<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTrans_Project extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumberModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies additional default values on a <c>LedgerJournalTrans_Project</c> record.
    /// </summary>
    void activityNumberModified()
    {
        this.initFromProjActivity(ProjActivity::find(this.ActivityNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// modifies the CategoryId field.
    /// </summary>
    public void categoryModified()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.TaxItemGroupSales        = ProjCategory::find(this.CategoryId).TaxItemGroupId;
            this.TaxGroupSales            = this.TaxItemGroupSales;
            this.LinePropertyId           = ProjLinePropertySetup::findLinePropertyId(this.ProjId, this.CategoryId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the activity number exists and is correctly setup for entry on an expense
    ///    journal.
    /// </summary>
    /// <returns>
    ///    true if the activity number exists and is correctly setup for entry on an expense journal;
    ///    otherwise, false.
    /// </returns>
    public boolean checkActivity()
    {
        boolean ret = true;

        if (this.ActivityNumber)
        {
            ret = ProjActivityHelper::validateProjActivityParentLinkV2(this.ProjId, this.ActivityNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the category is valid for entry on an expense journal.
    /// </summary>
    /// <returns>
    ///    true if the category is valid for entry on an expense journal; otherwise, false.
    /// </returns>

    public boolean checkCategoryId()
    {
        boolean         ret = true;
        ProjCategory    projCategory;

        if (this.CategoryId)
        {
            projCategory = ProjCategory::find(this.CategoryId);

            if (!this.isCategoryTypeValid(projCategory))
            {
                ret = checkFailed(strFmt("@SYS54897", this.CategoryId));
            }

            if (ret && (projCategory.SetupEstimate))
            {
                ret = checkFailed("@SYS90450");
            }
            ret = ret && projCategory.validateIfInactiveAllowed();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryTypeValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for category type on <c>ProjCategory</c>.
    /// </summary>
    /// <param name="_projCategory">
    ///    Current <c>ProjCategory</c>.
    /// </param>
    /// <returns>
    ///     true if category type is cost; otherwise, false.
    /// </returns>
    protected boolean isCategoryTypeValid(ProjCategory _projCategory)
    {
        return _projCategory.CategoryType == ProjCategoryType::Cost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a project has a valid status for entering on an expense journal.
    /// </summary>
    /// <returns>
    ///    true if the project has a valid status for entering on an expense journal; otherwise, false.
    /// </returns>
    public boolean checkProjId()
    {
        boolean ret = true;

        if (this.ProjId)
        {
            ret = ProjTable::find(this.ProjId).checkActiveInTree();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReqActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the activity field is required for the <c>LedgerJournalTrans_Project</c> record.
    /// </summary>
    /// <returns>
    ///    true if the activity field is required for the <c>LedgerJournalTrans_Project</c> table record;
    ///    otherwise, false.
    /// </returns>
    public boolean checkReqActivity()
    {
        RequireActivity     requireActivity;
        boolean             ret = true;

        requireActivity = ProjTable::checkRequireActivity(this.ProjId, tableNum(ProjCostTrans));
        if (requireActivity && (!this.ActivityNumber))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Copies the nonsystem fields from this buffer to the destination buffer.
    /// </summary>
    /// <param name="_destination">
    ///    The buffer to which to copy the nonsystem fields.
    /// </param>
    /// <remarks>
    ///    The <c>Common.data</c> method forces the system fields to be copied across. Some scenarios, such as
    ///    in-memory rollbacks of buffers, should not have those fields copied across.
    /// </remarks>
    public void copyTo(LedgerJournalTrans_Project _destination)
    {
        SysDictField field;
        FieldId fieldId;
        SysDictTable sysDictTable = new SysDictTable(tableNum(LedgerJournalTrans_Project));
        Set fieldsSet;
        Set systemFieldIds = new Set(Types::Integer);
        SetEnumerator fieldSetEnumerator;

        // Generate the list of system fields contained by this table.
        systemFieldIds.add(fieldNum(LedgerJournalTrans_Project, RecId));
        systemFieldIds.add(fieldNum(LedgerJournalTrans_Project, RecVersion));
        systemFieldIds.add(fieldNum(LedgerJournalTrans_Project, DataAreaId));

        // Copy the non-system fields from this buffer to the destination buffer.
        fieldsSet = sysDictTable.fields();
        fieldSetEnumerator = fieldsSet.getEnumerator();
        while (fieldSetEnumerator.moveNext())
        {
            field = fieldSetEnumerator.current();
            fieldId = field.id();
            if (!systemFieldIds.in(fieldId))
            {
                // This is not a system field, so copy the value across.
                _destination.(fieldId) = this.(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Applies default values for the <c>LedgerJournalTrans_Project</c> table, depending on the project
    ///    activity passed in as a parameter.
    /// </summary>
    /// <param name="_projActivity">
    ///    The project activity that should be used to drive the needed defaulting.
    /// </param>
    public void initFromProjActivity(ProjActivity _projActivity)
    {
        if (!_projActivity || !_projActivity.CategoryDefault ||
                ProjCategory::find(_projActivity.CategoryDefault).CategoryType != ProjCategoryType::Cost)
        {
            return;
        }

        this.CategoryId = _projActivity.CategoryDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ProjTransDate = this.ledgerJournalTrans().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides additional business logic to be run when an insert is saved to the
    ///    <c>LedgerJournalTrans_Project</c> table.
    /// </summary>
    public void insert()
    {
        #isoCountryRegionCodes

        LedgerJournalTrans  ledgerJournalTrans;
        LedgerJournalTable  ledgerJournalTable;

        if (!this.TransId)
        {
            this.TransId = ProjCostTrans::newTransId();
        }

        if (!this.Module)
        {
            this.Module = ModuleAxapta::Project;
        }

        super();

        ledgerJournalTable = this.ledgerJournalTable();
        ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, false);

        this.calculateTax(ledgerJournalTable, ledgerJournalTrans);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>

        this.setPayWhenPaid(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the journal that belongs to this transaction.
    /// </summary>
    /// <returns>
    /// The journal that belongs to this transaction.
    /// </returns>
    public LedgerJournalTable ledgerJournalTable()
    {
        return LedgerJournalTable::find(LedgerJournalTrans::findRecId(this.RefRecId, false).JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name="_forUpdate">
    /// true if the related buffer should be retrieved for update, false otherwise. Optional.
    /// </param>
    /// <returns>
    /// The related <c>LedgerJournalTrans</c> record.
    /// </returns>
    public LedgerJournalTrans ledgerJournalTrans(boolean _forUpdate = false)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        Common              joinedRecord;

        if (this.RefRecId)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(this.RefRecId, _forUpdate);
        }
        else
        {
            // When the records were not inserted and thus have no RecId, we can
            // still retrieve them from the joined query structure in memory
            joinedRecord = this.joinParent();
            if (joinedRecord.TableId == tableNum(LedgerJournalTrans))
            {
                ledgerJournalTrans = joinedRecord;
            }
            else
            {
                joinedRecord = this.joinChild();
                if (joinedRecord.TableId == tableNum(LedgerJournalTrans))
                {
                    ledgerJournalTrans = joinedrecord;
                }
            }
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans_ProjectTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>LedgerJournalTrans_ProjectTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>LedgerJournalTrans_ProjectTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public LedgerJournalTrans_ProjectTaxExtensionIN ledgerJournalTrans_ProjectTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ledgerJournalTrans_ProjectTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs any necessary logic when a field changes.
    /// </summary>
    /// <param name="_fieldId">
    /// The field that changed.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(LedgerJournalTrans_Project, Qty) :
            case fieldNum(LedgerJournalTrans_Project, SalesPrice) :
                this.updateAssessableValue_IN();
                break;

            case fieldNum(LedgerJournalTrans_Project, ProjId):
                this.setPayWhenPaid();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates assessable value.
    /// </summary>
    public void updateAssessableValue_IN()
    {
        if (TaxParameters::checkTaxParameters_IN())
        {
            LedgerJournalTrans_ProjectTaxExtensionIN ledgerJourTrans_ProjTaxExtIN = this.ledgerJournalTrans_ProjectTaxExtensionIN();
            ledgerJourTrans_ProjTaxExtIN.AssessableValue(this);
            this.packLedgerJournalTrans_Project_IN(ledgerJourTrans_ProjTaxExtIN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packLedgerJournalTrans_Project_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>LedgerJournalTrans_ProjectTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_ledgerJournalTrans_ProjectTaxExtensionIN">
    /// LedgerJournalTrans_ProjectTaxExtensionIN is packed.
    /// </param>
    public void packLedgerJournalTrans_Project_IN(LedgerJournalTrans_ProjectTaxExtensionIN _ledgerJournalTrans_ProjectTaxExtensionIN)
    {
        _ledgerJournalTrans_ProjectTaxExtensionIN.LedgerJournalTrans_Project = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_ledgerJournalTrans_ProjectTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAeditActivityPurpose</Name>
				<Source><![CDATA[
    public edit smmActivityPurpose psAeditActivityPurpose(boolean _set, ProjActivityNumber _activityNumber)
    {
        smmActivities smmActivities;
        str name;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (_set)
            {
                this.ActivityNumber = _activityNumber;
                this.initFromProjActivity(ProjActivity::find(_activityNumber));
            }
            else
            {
                smmActivities = smmActivities::find(this.ActivityNumber);
                name = smmActivities.Purpose;
            }
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides additional business logic to be run when an update is saved to a
    ///    <c>LedgerJournalTrans_Project</c> table record.
    /// </summary>
    public void update()
    {
        #isoCountryRegionCodes

        if (!this.TransId)
        {
            this.TransId = ProjCostTrans::newTransId();
        }

        ProjPayWhenPaidStatusContext context = ProjPayWhenPaidStatusContext::current();

        if (context && context.parmSimulatePosting() && ProjCustPaymentJournalSimulatePostingFlight::instance().isEnabled())
        {
            this.ReadyForPayment = NoYesCombo::No;
        }

        this.setPayWhenPaid();

        boolean isTaxCalculationRequired = this.haveTaxesModified();

        super();

        if (isTaxCalculationRequired)
        {
            this.calculateTax(this.ledgerJournalTable(), this.ledgerJournalTrans());
        }

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the project budget for the project expense journals.
    /// </summary>
    /// <returns>
    /// true if the budget is valid for the journal; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the parameter settings in Project Enable budget check on line saved is true
    /// the <c>validateBudget</c> method is always called when journal line is saved.
    /// </remarks>
    public boolean validateBudget()
    {
        if (ProjParameters::find().EnableBudgetCheckOnLineSave)
        {
            return ProjPost::validateBudget(this);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the field that is passed in is valid for saving.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The internal ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(LedgerJournalTrans_Project, CategoryId):
                    ret = this.checkCategoryId();
                    break;

                case fieldNum(LedgerJournalTrans_Project, Resource):
                    ret = this.checkResource();
                    ret = ret && ResourceFacade::checkResourceIsInCurrentCompany(this.Resource);
                    break;

                case fieldNum(LedgerJournalTrans_Project, ActivityNumber):
                    ret = this.checkActivity();
                    break;
            }
        }

        if (fieldNum(LedgerJournalTrans_Project, ProjId) ||
           fieldNum(LedgerJournalTrans_Project, CategoryId) ||
           fieldNum(LedgerJournalTrans_Project, ActivityNumber) ||
           fieldNum(LedgerJournalTrans_Project, CostPrice) ||
           fieldNum(LedgerJournalTrans_Project, SalesPrice) ||
           fieldNum(LedgerJournalTrans_Project, SalesCurrencyId))
        {
            this.validateBudget();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the record instance is valid for saving.
    /// </summary>
    /// <returns>
    ///    true if the record is valid; otherwise, false.
    /// </returns>
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean ret;

        LedgerJournalTrans_Project   orig = this.orig();

        ret = super();

        if (ret)
        {
            ret = this.checkActivity();
        }

        // Check for finished projects and inactive project categories and terminated employees
        ret = ret && this.checkProjId() && this.checkCategoryId() && this.checkResource();

        // Check that Category has a value in case the offset account is Project. Only in this case, it is relevant to warn user.
        if (!this.CategoryId)
        {
            ret = checkFailed("@SYS78502");
        }

        ProjTable projTable = ProjTable::find(this.ProjId);
        if (ret && (!projTable.status().validateWriteCreateJournal()))
        {
            ret = false;
        }

        if (ret && projTable.Type == ProjType::Time)
        {
            ret = checkFailed(strFmt("@SYS53011", ProjType::Time));
        }

        if (ret)
        {
            ret  = ProjJournalTrans::checkCategoryResourceOption(this.CategoryId, this.Resource);
        }

        if (ret)
        {
            ret  = projValCheckTrans.validateMandatory(this);
        }

        if (orig.ProjId != this.ProjId ||
           orig.CategoryId != this.CategoryId ||
           orig.ActivityNumber != this.ActivityNumber ||
           orig.CostPrice != this.CostPrice ||
           orig.SalesPrice != this.SalesPrice ||
           orig.SalesCurrencyId != this.SalesCurrencyId)
        {
            this.validateBudget();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a record exists for the passed in criteria and displays an error if the record
    ///    does not exist.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the related <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(LedgerJournalTransRefRecId _refRecId )
    {
        boolean ret = true;

        if (!LedgerJournalTrans_Project::exist(_refRecId))
        {
            ret = checkFailed(strFmt(LedgerJournalTrans_Project::txtNotExist(), _refRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a record exists for the passed in criteria.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the related <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    ///    true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(LedgerJournalTransRefRecId _refRecId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalTrans_Project
                 where
                     ledgerJournalTrans_Project.RefRecId == _refRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>LedgerJournalTrans_Project</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the related <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that is used when the table is not automatically concurrent;
    ///    optional.
    /// </param>
    /// <returns>
    ///    Returns a <c>LedgerJournalTrans_Project</c> table buffer.
    /// </returns>
    public static LedgerJournalTrans_Project find(
        LedgerJournalTransRefRecId _refRecId ,
        boolean                    _forUpdate = false,
        ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTrans_Project ledgerJournalTrans_Project;

        ledgerJournalTrans_Project.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalTrans_Project.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerJournalTrans_Project
        where
            ledgerJournalTrans_Project.RefRecId == _refRecId;

        return ledgerJournalTrans_Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides the error message for the <c>checkExist</c> method.
    /// </summary>
    /// <returns>
    ///    Returns the message to appear when a record does not exist.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102239";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates current sales price in the table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    Ledger journal trans record concerned to the current record.
    /// </param>
    /// <param name="_ledgerJournalTrans_Project">
    ///    Current record for which the value should be updated.
    /// </param>
    public static void updateSalesPrice(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalTrans_Project _ledgerJournalTrans_Project)
    {
        TaxUncommitted      taxUncommitted;

        _ledgerJournalTrans_Project.selectForUpdate(true);

        select taxUncommitted where taxUncommitted.Voucher == _ledgerJournalTrans.Voucher && taxUncommitted.SourceRecId == _ledgerJournalTrans.RecId;
        if (taxUncommitted)
        {
            _ledgerJournalTrans_Project.SalesPrice = taxUncommitted.SourceBaseAmountCur;
            _ledgerJournalTrans_Project.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the worker is valid for entry on an expense journal.
    /// </summary>
    /// <returns>
    ///    true if the worker is valid for entry on an expense journal; otherwise, false.
    /// </returns>
    public boolean checkResource()
    {
        boolean ret = true;
        HcmWorkerRecId worker;

        if (this.Resource)
        {
            worker = ResourceFacade::getWorker(this.Resource);
            if (worker && HcmWorker::find(worker).workerStatus() == HcmWorkerStatus::Terminated && !ProjParameters::find().ShowInactiveEmployees)
            {
                ret = checkFailed("@SYS39651");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId resourceCategory()
    {
        return ResourceFacade::getResourceCategory(this.Resource, this.ProjTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configureForSkipDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>skip</c> methods that are relevant when doing inserts or updates.
    /// </summary>
    public void configureForSkipDelete()
    {
        this.skipDataMethods(true);
        this.skipDeleteActions(true);
        this.skipDeleteMethod(true);
        this.skipEvents(true);
        this.skipPostLoad(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPayWhenPaid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for pay-when-paid feature.
    /// </summary>
    /// <param name="_parentLedgerJournalTrans">
    /// The related <c>LedgerJournalTrans</c> record; optional.
    /// </param>
    public void setPayWhenPaid(LedgerJournalTrans _parentLedgerJournalTrans = null)
    {
        if (Project::Enabled())
        {
            LedgerJournalTrans  journalTrans;
            ProjId              projId;
            AccountNum          vendAccount;
            LedgerJournalTrans  vendJournalTrans;

            this.isPwp = false;

            if (prmisDefault(_parentLedgerJournalTrans))
            {
                journalTrans = this.ledgerJournalTrans();
            }
            else
            {
                journalTrans = _parentLedgerJournalTrans;
            }

            if (journalTrans.AccountType == LedgerJournalACType::Vend && journalTrans.OffsetAccountType == LedgerJournalACType::Project)
            {
                vendAccount = journalTrans.parmAccount();
                projId = journalTrans.parmOffsetAccount();
            }
            else if (journalTrans.AccountType == LedgerJournalACType::Project && journalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                projId = journalTrans.parmAccount();
                vendAccount = journalTrans.parmOffsetAccount();
            }
            else if (journalTrans.AccountType == LedgerJournalACType::Project && journalTrans.OffsetAccountType == LedgerJournalACType::Ledger && journalTrans.OffsetLedgerDimension == 0)
            {
                select firstonly vendJournalTrans
                    where vendJournalTrans.AccountType == LedgerJournalACType::Vend &&
                        vendJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                        vendJournalTrans.Voucher == journalTrans.Voucher &&
                        vendJournalTrans.TransDate == journalTrans.TransDate;
                
                projId = journalTrans.parmAccount();
                vendAccount = vendJournalTrans.parmAccount();                
            }
            else if (journalTrans.AccountType == LedgerJournalACType::Vend && journalTrans.OffsetAccountType == LedgerJournalACType::Ledger && journalTrans.OffsetLedgerDimension == 0)
            {
                select firstonly vendJournalTrans
                    where vendJournalTrans.AccountType == LedgerJournalACType::Project &&
                        vendJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger &&
                        vendJournalTrans.Voucher == journalTrans.Voucher &&
                        vendJournalTrans.TransDate == journalTrans.TransDate;
                
                vendAccount = journalTrans.parmAccount();
                projId = vendJournalTrans.parmAccount();
            }

            if (vendAccount && projId && (this.ReadyForPayment == NoYesCombo::No))
            {
                ProjPWPVendorRetentionSetting pwpSetting = ProjPWPVendorRetentionSetting::findByProjVendor(projId, vendAccount);

                if (pwpSetting.PwpThresholdPercent > 0)
                {
                    this.isPwp = true;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the head table.
    /// </summary>
    /// <returns>The record for ledgerJournalTable.</returns>
    public SalesPurchJournalTable salesPurchJournalTable()
    {
        return this.ledgerJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTotalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the total tax amount created from a LedgerJournalTrans record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// LedgerJournalTrans record
    /// </param>
    /// <returns>
    /// Tax amount in transaction currency.
    /// </returns>
    public static AmountCur findTotalTaxAmount(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxData      taxData;
        TaxGroupData taxGroupData;
        AmountCur    totalTaxAmount;
        TaxOnItem    taxOnItem;

        select firstOnly RecId from taxData
            where taxData.TaxValue != 0
            exists join taxGroupData
            exists join TaxItemGroup, TaxCode from taxOnItem
                where taxGroupData.TaxGroup == _ledgerJournalTrans.TaxGroup &&
                    taxGroupData.TaxCode    == taxData.TaxCode  &&
                    taxOnItem.TaxCode       == taxData.TaxCode  &&
                    taxOnItem.TaxItemGroup  == _ledgerJournalTrans.TaxItemGroup &&
                    taxGroupData.UseTax     == NoYes::No;

        if (taxData.RecId)
        {
            totalTaxAmount = _ledgerJournalTrans.totalTaxAmountSingleLine(false, true, true);
        }

        return totalTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ProjTransDate field of <c>LedgerJournalTrans_Project</c>
    /// </summary>
    /// <param name="_journalNum">
    /// The Journal ID of the records that are being updated.
    /// </param>
    /// <param name="_voucher">
    /// The Voucher number of the records that are being updated.
    /// </param>
    /// <param name="_newTransDate">
    /// The modified TransDate that is to be updated.
    /// </param>
    public void updateProjTransDate(LedgerJournalId _journalNum, Voucher _voucher, TransDate _newTransDate)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;

        update_recordset ledgerJournalTrans_Project
            setting ProjTransDate = _newTransDate
                exists join ledgerJournalTrans
                    where ledgerJournalTrans_Project.RefRecId == ledgerJournalTrans.RecId &&
                        ledgerJournalTrans_Project.ProjTransDate != _newTransDate &&
                        ledgerJournalTrans.JournalNum == _journalNum &&
                        ledgerJournalTrans.Voucher == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>haveTaxesModified</Name>
				<Source><![CDATA[
    private boolean haveTaxesModified()
    {
        boolean taxesChanged;

        if (ProjCalculateTaxesWhenProjCategoryUpdateFlightVendInvoice::instance().isEnabled())
        {
            LedgerJournalTrans_Project _originalLedgerJournalTrans_Project = this.orig();

            taxesChanged = this.CategoryId != _originalLedgerJournalTrans_Project.CategoryId;
        }

        return taxesChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    private void calculateTax(LedgerJournalTable _ledgerJournalTable, LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean isTaxIntegrationEnabledForJournalType = TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(_ledgerJournalTable.JournalType);

        if (!isTaxIntegrationEnabledForJournalType
            && ((_ledgerJournalTrans.TaxGroup
                    && _ledgerJournalTrans.TaxItemGroup)
                || _ledgerJournalTrans.TaxCode))
        {
            // tax information is out of date so delete and recalculate taxes.
            if (TaxUncommitted::existByDocumentAndInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice))
            {
                TaxUncommitted::deleteForInvoice(_ledgerJournalTable.TableId, _ledgerJournalTable.RecId, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice);
            }

            // don't calculate taxes if this is marked as posted.  Also, records in the invoice pool don't
            // get Taxes calculated since they have already been posted to TaxTrans.
            // documents in the invoice pool are already posted and should not have taxes calculated.
            if (!_ledgerJournalTable.Posted && !(_ledgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool) && !_ledgerJournalTrans.DelayTaxCalculation)
            {
                LedgerJournalTrans::getTaxInstance(_ledgerJournalTrans.JournalNum, _ledgerJournalTrans.Voucher, _ledgerJournalTrans.Invoice, true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126128</DeveloperDocumentation>
	<Label>@sys109440</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>CategoryId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>TransIdIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RefRecIdIdx</PrimaryIndex>
	<ReplacementKey>RefRecIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjTransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Module</Name>
			<Label>@SYS9941</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAGroup</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesCurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupSales</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupSales</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayWhenPaid</Name>
			<Label>@PSA3342</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsPwp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PayWhenPaidStatus</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReadyForPayment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryCostId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>CostPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>ModuleAxapta</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalAC</ExtendedDataType>
			<Label>@SYS4534</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPriceGroupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProjTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesCurrencyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPrice</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroupJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupSales</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroupJournal</ExtendedDataType>
			<Label>@SYS21932</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsPwp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@PSA3342</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReadyForPayment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>Project</ConfigurationKey>
			<Label>@PSA11218</Label>
			<EnumType>NoYesCombo</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Correction</Name>
			<ExtendedDataType>ProjCorrection</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ProjectIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesCurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>SalesCurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Project</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EntityRelationshipRole>@SYS126076</EntityRelationshipRole>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTrans</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>LedgerJournalTrans_Project</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Project</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPriceGroupID</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>ProjPriceGroupID</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryCostId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126129</EntityRelationshipRole>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Project</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupSales</Name>
					<Field>TaxGroupSales</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS126130</EntityRelationshipRole>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalTrans_Project</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupSales</Name>
					<Field>TaxItemGroupSales</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>