<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMADispatchWorkerSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMADispatchWorkerSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(SMADispatchWorkerSetupRecId _recId)
    {
        boolean ret = true;

        if (!SMADispatchWorkerSetup::exist(_recId))
        {
            // The specific record in table %1 does not exist
            ret = checkFailed(strFmt("@SYS329226", tableId2name(tableNum(SMADispatchWorkerSetup))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>SMADispatchWorkerSetup</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>SMADispatchWorkerSetup</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(SMADispatchWorkerSetupRecId _recId)
    {
        return _recId && (select firstonly RecId from smaDispatchWorkerSetup
                    where smaDispatchWorkerSetup.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SMADispatchWorkerSetup</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>SMADispatchWorkerSetup</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SMADispatchWorkerSetup</c> table; otherwise, an empty record.
    /// </returns>
    public static SMADispatchWorkerSetup find(
    SMADispatchWorkerSetupRecId _recId,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        SMADispatchWorkerSetup smaDispatchWorkerSetup;

        smaDispatchWorkerSetup.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            smaDispatchWorkerSetup.concurrencyModel(_concurrencyModel);
        }

        select smaDispatchWorkerSetup
            where smaDispatchWorkerSetup.RecId == _recId;

        return smaDispatchWorkerSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>SMADispatchWorkerSetup</c> table by using the supplied value
    ///    of the <c>Worker</c> field.
    /// </summary>
    /// <param name="_worker">
    ///    The <c>Worker</c> field value of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>SMADispatchWorkerSetup</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    ///    <list type="number">
    ///       <item>
    ///          <description>If no values are supplied for both the parameters they use now. Therefore, the method
    ///          searches for only active records and returns either an empty or a valid record.</description>
    ///       </item>
    ///       <item>
    ///          <description>The method searches for the worker (employee or contractor) and returns either an
    ///          empty or a valid record.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public static SMADispatchWorkerSetup findByWorker(
        HcmWorkerRecId      _worker,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        SMADispatchWorkerSetup smaDispatchWorkerSetup;

        smaDispatchWorkerSetup.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            smaDispatchWorkerSetup.concurrencyModel(_concurrencyModel);
        }

         select smaDispatchWorkerSetup
            where smaDispatchWorkerSetup.Worker == _worker;

        return smaDispatchWorkerSetup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SMAManagement</ConfigurationKey>
	<DeveloperDocumentation>@SYS325890</DeveloperDocumentation>
	<Label>@SYS304592</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>DispatchTeamId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ServiceManagement</Modules>
	<ReplacementKey>SMADispatchWorkerSetup_AK1</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispatchTeamId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispatchTeamDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DispatchTeamId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DispatchTeamDataAreaId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispatchTeamDataAreaId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DispatchTeamId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMADispatchTeamId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>HcmWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SMADispatchWorkerSetup_AK1</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker_FK</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Worker</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DispatchWorker</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SMADispatchTeamTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>SMADispatchTeamTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DispatchTeamId</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>DispatchTeam</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DispatchTeamDataAreaId</Name>
					<Field>DispatchTeamDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DispatchTeamId</Name>
					<SourceEDT>SMADispatchTeamId</SourceEDT>
					<Field>DispatchTeamId</Field>
					<RelatedField>DispatchTeamId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DispatchTeamId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>