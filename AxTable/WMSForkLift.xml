<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSForkLift</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSForkLift extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initTransportHandlingQuery</Name>
				<Source><![CDATA[
        public void initTransportHandlingQuery(QueryBuildDataSource queryBuildDataSource)
    {
        #DEFINE.NO_MATCH_RANGE('x')
        QueryBuildRange         typeRange;
        QueryBuildRange         fromHeightRange;
        QueryBuildRange         toHeightRange;
        str                     rangeValues = '';

        typeRange       = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSTransport, TransportType));
        fromHeightRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSTransport, FromHeight));
        toHeightRange   = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSTransport, ToHeight));

        if (this.RecId)
        {
            if (this.DoInTransports && this.DoOutTransports && this.DoRefillTransports && this.DoRelocationTransports)
            {
                rangeValues = SysQuery::valueUnlimited();
            }
            else
            {
                if (this.DoInTransports)
                {
                    if (rangeValues)
                    {
                        rangeValues += ',';
                    }
                    rangeValues += strFmt('%1', enum2Value(WMSTransportType::InTransport));
                }
                if (this.DoOutTransports)
                {
                    if (rangeValues)
                    {
                        rangeValues += ',';
                    }
                    rangeValues += strFmt('%1', enum2Value(WMSTransportType::OutTransport));
                }
                if (this.DoRefillTransports)
                {
                    if (rangeValues)
                    {
                        rangeValues += ',';
                    }
                    rangeValues += strFmt('%1', enum2Value(WMSTransportType::Refill));
                }

                if (this.DoRelocationTransports)
                {
                    if (rangeValues)
                    {
                        rangeValues += ',';
                    }
                    rangeValues += strFmt('%1', enum2Value(WMSTransportType::Relocation));
                }
                if (!rangeValues)
                {
                    rangeValues = #NO_MATCH_RANGE;
                }
            }
            typeRange.value(rangeValues);
            fromHeightRange.value('..' + SysQuery::value(this.MaxHeight));
            toHeightRange.value('..' + SysQuery::value(this.MaxHeight));
        }
        else
        {
            typeRange.value(SysQuery::valueUnlimited());
            fromHeightRange.value(SysQuery::valueUnlimited());
            toHeightRange.value(SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        super();
        this.DoInTransports     = NoYes::Yes;
        this.DoRefillTransports = NoYes::Yes;
        this.DoOutTransports    = NoYes::Yes;
        this.DoRelocationTransports = NoYes::Yes;
        this.MaxHeight          = 999;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(WMSForkLiftId  wmsForkLiftId)
    {
        return wmsForkLiftId && (select firstonly wmSforkLift
                    where wmSforkLift.ForkLiftId  == wmsForkLiftId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static WMSForkLift find(
        WMSForkLiftId       wmsForkLiftId,
        boolean             update = false)
    {
        WMSForkLift  wmsForkLift;

        wmsForkLift.selectForUpdate(update);

        if (wmsForkLiftId)
        {
            select firstonly wmsForkLift
                where wmsForkLift.ForkLiftId == wmsForkLiftId;
        }
        return wmsForkLift;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperator</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the current operator of the specified forklift.
    /// </summary>
    /// <param name="_forklift">
    ///   The forklift to be associated with the operator.
    /// </param>
    /// <returns>
    ///   The ID of the current operator.
    /// </returns>
    static public HcmWorkerRecId getOperator(WMSForkLiftId _forklift)
    {
        WMSForkLift             wmsForkLift = WMSForkLift::find(_forklift);
        WMSForkliftOperator     wmsForkliftOperator;

        if (!wmsForkLift.RecId)
        {
            return 0;
        }

        wmsForkliftOperator = WMSForkliftOperator::findByForklift(wmsForkLift.RecId);
        return wmsForkliftOperator.OperatorWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOperator</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Sets the specified worker as the current operator of the specified forklift.
    /// </summary>
    /// <param name="_forklift">
    ///   The forklift to be associated with the operator.
    /// </param>
    /// <param name="_operator">
    ///   The operator to be associated with the forklift.
    /// </param>
    static public void setOperator(
        WMSForkLiftId       _forklift,
        HcmWorkerRecId      _operator)
    {
        WMSForkLift             wmsForkLift = WMSForkLift::find(_forklift);
        WMSForkliftOperator     wmsForkliftOperator;

        if (!wmsForkLift.RecId)
        {
            return;
        }

        ttsbegin;

        update_recordset wmsForkliftOperator
            setting OperatorWorker = _operator
            where wmsForkliftOperator.wmsForkLift       == wmsForkLift.RecId
               && wmsForkliftOperator.OperatorWorker    != _operator;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WMSAdvanced</ConfigurationKey>
	<DeveloperDocumentation>@SYS123906</DeveloperDocumentation>
	<IsObsolete>Yes</IsObsolete>
	<Label>@SYS51036</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>forkLiftId</TitleField1>
	<TitleField2>maxHeight</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ForkLiftIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ForkLiftIdx</PrimaryIndex>
	<TableContents>BaseDefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>forkLiftId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>doInTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>doOutTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>doRefillTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maxHeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>forkLiftId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Limitations</Name>
			<Label>@SYS22801</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>doInTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>doOutTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>doRefillTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>doRelocationTransports</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>maxHeight</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>doInTransports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS51040</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>doOutTransports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS51042</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>doRefillTransports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS51044</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>doRelocationTransports</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS4000142</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>forkLiftId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSForkLiftId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>maxHeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSForkliftMaxHeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ForkLiftIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>forkLiftId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>