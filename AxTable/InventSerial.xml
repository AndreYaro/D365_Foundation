<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSerial</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSerial extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasOpenInventSum</Name>
				<Source><![CDATA[
    [SysObsolete("Please use the method hasOpenInventSumQuantity if you want to check for open quantity.", false, 31\03\2019)]
    boolean hasOpenInventSum()
    {
        InventSum   inventSum;
        InventDim   inventDim;

        select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventSerialId  == this.InventSerialId
        join TableId from inventSum
            where inventSum.InventDimId     == inventDim.InventDimId    &&
                  inventSum.Closed          == NoYes::No                &&
                  inventSum.ItemId          == this.ItemId;

        return inventDim.RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOpenInventSumQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the serial number has <c>InventSum</c> records with open quantity.
    /// </summary>
    /// <returns>true if the serial number has <c>InventSum</c> records with open quantity; otherwise, false.</returns>
    boolean hasOpenInventSumQuantity()
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
                where inventSum.ItemId          == this.ItemId          &&
                      inventSum.InventSerialId  == this.InventSerialId  &&
                      inventSum.ClosedQty       == NoYes::No;

            return inventSum.RecId ? true : false;
        }
        else
        {
            InventDim   inventDim;

            select forceplaceholders firstonly RecId from inventDim
            where inventDim.InventSerialId  == this.InventSerialId
            join TableId from inventSum
                where inventSum.InventDimId     == inventDim.InventDimId    &&
                      inventSum.ClosedQty       == NoYes::No                &&
                      inventSum.ItemId          == this.ItemId;

            return inventDim.RecId ? true : false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    void initFromCaller(Args args)
    {
        if (this.RecId || !args || !args.caller())
        {
            return;
        }

        Object caller = args.caller();

        // check if caller is not a FormRun
        if (!SysDictClass::isEqualOrSuperclass(classIdGet(caller),classNum(FormRun)))
        {
            return;
        }

        FormRun callerForm  = args.caller();

        int h;

        if (callerForm.name() == formStr(WMSJournalTable))
        {
            for (h = 1; h <= callerForm.dataSourceCount(); h++)
            {
                if (callerForm.dataSource(h).cursor().TableId == tableNum(WMSJournalTrans))
                {
                    this.initFromWMSJournalTrans(callerForm.dataSource(h).cursor() as WMSJournalTrans);
                    return;
                }
            }
        }

        if (callerForm.name() == formStr(WhsInventOnHandReserve))
        {
            for (h = 1; h <= callerForm.dataSourceCount(); h++)
            {
                if (callerForm.dataSource(h).cursor().TableId == tableNum(WHSInventReserve))
                {
                    this.initFromWHSInventReserve(callerForm.dataSource(h).cursor() as WHSInventReserve);
                    return;
                }
            }
        }

        InventMovement inventMovement;

        for (h = 1; h <= callerForm.dataSourceCount(); h++)
        {
            if (callerForm.dataSource(h).cursor().TableId == tableNum(InventTrackingRegisterTrans))
            {
                InventTrackingRegisterTrans inventTrackingRegisterTrans = callerForm.dataSource(h).cursor() as InventTrackingRegisterTrans;
                this.initFromInventMovement(InventMovement::constructNoThrow(InventTransOrigin::find(inventTrackingRegisterTrans.InventTransOrigin)));
                return;
            }
            else
            {
                inventMovement = InventMovement::constructNoThrow(callerForm.dataSource(h).cursor());
            }

            if (inventMovement)
            {
                break;
            }
        }
        if (inventMovement)
        {
            this.initFromInventMovement(inventMovement);
        }
        else if (callerForm.args() && callerForm.args().caller())
        {
            this.initFromCaller(callerForm.args());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventMovement</Name>
				<Source><![CDATA[
    void initFromInventMovement(InventMovement inventMovement,InventTrans _inventTrans = null)
    {
        this.ItemId     = inventMovement.itemId();
        this.ProdDate   = inventMovement.serialProdDate(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWHSInventReserve</Name>
				<Source><![CDATA[
    void initFromWHSInventReserve(WHSInventReserve wmsInventReserve)
    {
        this.ItemId     = wmsInventReserve.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromWMSJournalTrans</Name>
				<Source><![CDATA[
    void initFromWMSJournalTrans(WMSJournalTrans wmsJournalTrans)
    {
        this.ItemId     = wmsJournalTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInterCompanySerial</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void createInterCompanySerial(ItemId _itemId, InventDim _inventDim)
    {
        InventSerial interCompanySerial;

        ttsbegin;
        interCompanySerial.ItemId         = _itemId;
        interCompanySerial.InventSerialId = _inventDim.InventSerialId;
        interCompanySerial.ProdDate       = this.ProdDate;
        interCompanySerial.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    void renamePrimaryKey()
    {
        InventDimRenameDimValue inventDimRenameDimValue = InventDimRenameDimValue::newInventSerial(this);

        if (inventDimRenameDimValue.validate())
        {
            ttsbegin;
            inventDimRenameDimValue.runOperation();
            ttscommit;

            if (FormDataUtil::isFormDataSource(this))
            {
                inventDimRenameDimValue.updateCallerForm(FormDataUtil::getFormDataSource(this));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.hasOpenInventSumQuantity())
        {
            ret = checkFailed(strFmt("@SYS79457", tablePName(InventSum)));
        }

        if (InventTrackingRegisterTrans::existForItemSerial(this.ItemId, this.InventSerialId))
        {
            ret = checkFailed(strFmt("@SYS75284", tablePName(InventTrackingRegisterTrans)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    static boolean checkExist(
        InventSerialId   _serialId,
        ItemId           _itemId)
    {
        if (_itemId && _serialId && ! InventSerial::exist(_serialId, _itemId))
        {
            return checkFailed(strFmt(InventSerial::txtNotExist(), _serialId, _itemId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if given serial number exists and creates it if necessary.
    /// </summary>
    /// <param name = "_serialId">Serial number.</param>
    /// <param name = "_itemId">Item.</param>
    [Hookable(false)]
    internal static void ensureExists(
        InventSerialId  _serialId,
        ItemId          _itemId)
    {
        if (!InventSerial::exist(_serialId, _itemId))
        {
            InventSerial inventSerial;
            inventSerial.InventSerialId = _serialId;
            inventSerial.ItemId         = _itemId;
            inventSerial.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        InventSerialId  _serialId,
        ItemId          _itemId)
    {
        return (select firstonly RecId from inventSerial
                    where inventSerial.ItemId         == _itemId    &&
                          inventSerial.InventSerialId == _serialId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static InventSerial find(InventSerialId _inventSerialId, ItemId _itemId, boolean _forupdate = false)
    {
        InventSerial inventSerial;

        inventSerial.selectForUpdate(_forupdate);

        if (_inventSerialId)
        {
            select firstonly inventSerial
                where inventSerial.ItemId           == _itemId       &&
                      inventSerial.InventSerialId   == _inventSerialId;
        }

        return inventSerial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up all serial numbers.
    /// </summary>
    /// <param name="lookupCtrl">
    /// The <c>FormStringControl</c> that fired the lookup.
    /// </param>
    public static void mcrlookupAll(
        FormStringControl   lookupCtrl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventSerial), lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventSerial));

        sysTableLookup.addLookupfield(fieldNum(InventSerial, InventSerialId));
        sysTableLookup.addLookupfield(fieldNum(InventSerial, ProdDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up all serial numbers for an item group.
    /// </summary>
    /// <param name="lookupCtrl">
    /// The <c>FormStringControl</c> that fired the lookup.
    /// </param>
    /// <param name="_itemGroupId">
    /// The <c>ItemGroupId</c> to search against.
    /// </param>
    public static void mcrlookupByGroup(
        FormStringControl   lookupCtrl,
        ItemGroupId         _itemGroupId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventSerial), lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    inventSerial = query.addDataSource(tableNum(InventSerial));
        QueryBuildDataSource    inventItemGroupItem = inventSerial.addDataSource(tableNum(InventItemGroupItem));
        QueryBuildRange         inventItemGroupItemRange = inventItemGroupItem.addRange(fieldNum(InventItemGroupItem, ItemGroupId));

        //Search by the item group
        inventSerial.orderMode(OrderMode::GroupBy);
        inventSerial.addSortField(fieldNum(InventSerial, InventSerialId));
        inventItemGroupItemRange.value(_itemGroupId);
        inventSerial.joinMode(JoinMode::InnerJoin);
        inventItemGroupItem.addLink(fieldNum(InventSerial, ItemId), fieldNum(InventItemGroupItem ,ItemId));
        inventItemGroupItem.addLink(fieldNum(InventSerial, DataAreaId), fieldNum(InventItemGroupItem ,ItemDataAreaId));
        sysTableLookup.addLookupfield(fieldNum(InventSerial, InventSerialId));
        sysTableLookup.addLookupfield(fieldNum(InventSerial, ProdDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrlookupByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up all serial numbers for an item.
    /// </summary>
    /// <param name="lookupCtrl">
    /// The <c>FormStringControl</c> that fired the lookup.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemID</c> to search against.
    /// </param>
    public static void mcrlookupByItem(
        FormStringControl   lookupCtrl,
        ItemId  _itemId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(InventSerial), lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventSerial));
        QueryBuildRange         queryBuildRange = queryBuildDataSource.addRange(fieldNum(InventSerial, ItemId));

        queryBuildRange.value(_itemId);
        sysTableLookup.addLookupfield(fieldNum(InventSerial, InventSerialId));
        sysTableLookup.addLookupfield(fieldNum(InventSerial, ProdDate));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS68707";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find an <c>InventSerial</c> record if it exists or create a new one if it does not.
    /// </summary>
    /// <param name = "_inventSerialId">Item serial number.</param>
    /// <param name = "_itemId">Item number.</param>
    /// <param name = "_forupdate">Select record for update?</param>
    /// <returns>Corresponding <c>InventSerial</c> record.</returns>
    public static InventSerial findOrCreate(
        InventSerialId _inventSerialId,
        ItemId _itemId,
        boolean _forupdate = false)
    {
        InventSerial inventSerial;

        inventSerial.selectForUpdate(_forupdate);

        if (_inventSerialId != '' && _itemId != '')
        {
            inventSerial = InventSerial::find(_inventSerialId, _itemId, _forupdate);

            if (inventSerial.RecId == 0)
            {
                inventSerial.InventSerialId = _inventSerialId;
                inventSerial.ItemId = _itemId;
                inventSerial.insert();
            }
        }

        return inventSerial;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123973</DeveloperDocumentation>
	<FormRef>InventSerial</FormRef>
	<Label>@SYS9516</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>InventSerialId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ItemSerialIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemSerialIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS25589</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventSerialId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Production</Name>
			<Label>@SYS4398</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialText</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSerialId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ProdDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSerialProdDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFIDTagId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RFIDTagId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemSerialIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SerialIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventSerialId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>