<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventValueReport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and fixes records in the <c>InventValueReportDimension</c> table.
    /// </summary>
    /// <remarks>
    /// If a record for a dimension does not exist in the <c>InventValueReportDimension</c> table, it is
    /// created. to print the a record exists, the line number is checked and fixed to print the not
    /// matching the position of a corresponding field in the <c>InventoryDimensions</c> field group of the
    /// <c>InventDim</c> table.
    /// </remarks>
    void checkFixReference()
    {
        InventValueReportDimension inventValueReportDimension;
        ListEnumerator             enumerator = InventDim::dimEnabledFieldList().getEnumerator();
        FieldId                    dimFieldId;
        int                        fieldNo;

        ttsbegin;

        while (enumerator.moveNext())
        {
            fieldNo++;
            dimFieldId = enumerator.current();
            inventValueReportDimension = InventValueReportDimension::findByInventValueReportFieldId(this.RecId, dimFieldId);

            if (inventValueReportDimension.RecId != 0)
            {
                if (inventValueReportDimension.LineNumber != fieldNo)
                {
                    update_recordset inventValueReportDimension
                        setting LineNumber = fieldNo
                        where inventValueReportDimension.InventValueReport == this.RecId
                           && inventValueReportDimension.DimensionFieldId == dimFieldId;
                }
            }
            else
            {
                inventValueReportDimension.clear();
                inventValueReportDimension.InventValueReport = this.RecId;
                inventValueReportDimension.DimensionFieldId = dimFieldId;
                inventValueReportDimension.LineNumber = fieldNo;
                inventValueReportDimension.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the inventory value report definition to another report.
    /// </summary>
    /// <param name="_newId">
    /// The ID of the new report.
    /// </param>
    /// <param name="_newName">
    /// The name of the new report.
    /// </param>
    /// <returns>
    /// A <c>InventValueReport</c> record, which corresponds to the new report.
    /// </returns>
    public InventValueReport copy(
        InventValueReportId _newId,
        InventValueReportName _newName)
    {
        InventValueReport inventValueReportNew;
        InventValueReportDimension inventValueReportDimension;
        InventValueReportDimension inventValueReportDimensionNew;
        RecId inventValueReportRecId;
        boolean ok;

        ok = true;

        if (_newId == '')
            ok = checkFailed("@SYS315640");

        if (_newName == '')
            ok = checkFailed("@SYS315641");

        if (InventValueReport::findByReportId(_newId).RecId != 0)
            ok = checkFailed(strFmt("@SYS315642", _newId));

        if (!ok)
            return null;

        ttsbegin;

        inventValueReportNew.data(this);
        inventValueReportNew.ReportId = _newId;
        inventValueReportNew.Name = _newName;
        inventValueReportNew.doInsert();

        inventValueReportRecId = inventValueReportNew.RecId;

        insert_recordset inventValueReportDimensionNew(InventValueReport, DimensionFieldId, View, Total, LineNumber)
        select  inventValueReportRecId, DimensionFieldId, View, Total, LineNumber from inventValueReportDimension
            where inventValueReportDimension.InventValueReport == this.RecId;

        ttscommit;

        return inventValueReportNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.ViewMaterial = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>InventValueReport</c> table and creates related records in the
    /// <c>InventValueReportDimension</c> table.
    /// </summary>
    void insert()
    {
        ttsbegin;

        super();

        this.checkFixReference();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>InventDimParm</c> table buffer. The inventory dimension flags are set according to
    /// the total property values of the corresponding dimensions in the report setup.
    /// </summary>
    /// <returns>
    /// A <c>InventDimParm</c> table buffer.
    /// </returns>
    public InventDimParm totalInventDimParm()
    {
        InventDimParm inventDimParm;
        InventValueReportDimension inventValueReportDimension;
        FieldId fieldId;

        inventDimParm.clear();

        while select DimensionFieldId from inventValueReportDimension
            where inventValueReportDimension.InventValueReport == this.RecId
               && inventValueReportDimension.Total == NoYes::Yes
        {
            fieldId = InventDim::dim2dimParm(inventValueReportDimension.DimensionFieldId);
            inventDimParm.(fieldId) = NoYes::Yes;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        DimensionHierarchyLevel dimensionHierarchyLevel;
        boolean                 ret;

        ret = super(_fieldIdToCheck);

        if (_fieldIdToCheck == fieldNum(InventValueReport, DimensionFocus) && this.DimensionFocus)
        {
            select count(RecId) from dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == this.DimensionFocus;
            if (dimensionHierarchyLevel.RecId > 2)
            {
                ret = ret && checkFailed("@SYS333544");
            }

            select RecId from dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == this.DimensionFocus
                   && dimensionHierarchyLevel.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

            if (!dimensionHierarchyLevel)
            {
                ret = ret && checkFailed("@SYS333545");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewAvgUnitCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the average unit costs.
    /// </summary>
    /// <returns>
    /// true to print the average unit costs; otherwise, false.
    /// </returns>
    display boolean viewAvgUnitCost()
    {
        return this.CalcAvgUnitCost && this.ViewInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewCOGSFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the Cost of Goods Sold (COGS) financial value should.
    /// </summary>
    /// <returns>
    /// true to print the COGS financial value; otherwise, false.
    /// </returns>
    display boolean viewCOGSFinancial()
    {
        return this.ViewCOGS && !this.SummarizePhysFinValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewCOGSTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the COGS value.
    /// </summary>
    /// <returns>
    /// true to print the COGS value; otherwise, false.
    /// </returns>
    display boolean viewCOGSTotal()
    {
        return this.ViewCOGS && (this.SummarizePhysFinValues || this.PrintTotalQtyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDeferredCOGSPhysicalNonPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the deferred COGS physical value that was not posted.
    /// </summary>
    /// <returns>
    /// true to print the deferred COGS physical value that was not posted; otherwise, false.
    /// </returns>
    display boolean viewDeferredCOGSPhysicalNonPosted()
    {
        return this.ViewDeferredCOGS && !this.SummarizePhysFinValues && this.IncludeNotPostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDeferredCOGSPhysicalPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the deferred COGS physical value posted.
    /// </summary>
    /// <returns>
    /// true to print the deferred COGS physical value that was posted; otherwise, false.
    /// </returns>
    display boolean viewDeferredCOGSPhysicalPosted()
    {
        return this.ViewDeferredCOGS && !this.SummarizePhysFinValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewDeferredCOGSTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the deferred COGS value.
    /// </summary>
    /// <returns>
    /// true to print the deferred COGS value; otherwise, false.
    /// </returns>
    display boolean viewDeferredCOGSTotal()
    {
        return this.ViewDeferredCOGS && (this.SummarizePhysFinValues || this.PrintTotalQtyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates an <c>InventDimParm</c> table buffer. The inventory dimension flags are set
    ///     according to the View property values of the corresponding dimensions in the report setup.
    /// </summary>
    /// <returns>
    ///     A <c>InventDimParm</c> table buffer.
    /// </returns>
    public InventDimParm viewInventDimParm()
    {
        InventDimParm inventDimParm;
        InventValueReportDimension inventValueReportDimension;
        FieldId fieldId;

        inventDimParm.clear();

        while select DimensionFieldId from inventValueReportDimension
            where inventValueReportDimension.InventValueReport == this.RecId
               && inventValueReportDimension.View == NoYes::Yes
        {
            fieldId = InventDim::dim2dimParm(inventValueReportDimension.DimensionFieldId);
            inventDimParm.(fieldId) = NoYes::Yes;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewInventoryFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the inventory financial value.
    /// </summary>
    /// <returns>
    /// true to print the inventory financial value; otherwise, false.
    /// </returns>
    display boolean viewInventoryFinancial()
    {
        return this.ViewInventory && !this.SummarizePhysFinValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewInventoryPhysicalNonPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the inventory physical value that was not posted.
    /// </summary>
    /// <returns>
    /// true to print the inventory physical value that was not posted; otherwise, false.
    /// </returns>
    display boolean viewInventoryPhysicalNonPosted()
    {
        return this.ViewInventory && !this.SummarizePhysFinValues && this.IncludeNotPostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewInventoryPhysicalPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the inventory physical value posted.
    /// </summary>
    /// <returns>
    /// true to print the inventory physical value posted; otherwise, false.
    /// </returns>
    display boolean viewInventoryPhysicalPosted()
    {
        return this.ViewInventory && !this.SummarizePhysFinValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewInventoryTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the inventory value, both physical and financial.
    /// </summary>
    /// <returns>
    /// true to print the inventory value; otherwise, false.
    /// </returns>
    display boolean viewInventoryTotal()
    {
        return this.ViewInventory && (this.SummarizePhysFinValues || this.PrintTotalQtyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewPLFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the profit and loss financial value.
    /// </summary>
    /// <returns>
    /// true to print the profit and loss financial value; otherwise, false.
    /// </returns>
    display boolean viewPLFinancial()
    {
        return this.ViewProfitLoss && !this.SummarizePhysFinValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewPLTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the profit and loss value.
    /// </summary>
    /// <returns>
    /// true to print the profit and loss value; otherwise, false.
    /// </returns>
    display boolean viewPLTotal()
    {
        return this.ViewProfitLoss && (this.SummarizePhysFinValues || this.PrintTotalQtyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the references.
    /// </summary>
    /// <returns>
    /// true to print the references; otherwise, false.
    /// </returns>
    display boolean viewReference()
    {
        return this.DetailLevel == TotalTrans::Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the resource groups.
    /// </summary>
    /// <returns>
    /// true to print the resource groups; otherwise, false.
    /// </returns>
    display boolean viewResourceGroup()
    {
        return this.ViewResourceGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewResourceGroupTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the resource group totals.
    /// </summary>
    /// <returns>
    /// true to print the resource group totals; otherwise, false.
    /// </returns>
    display boolean viewResourceGroupTotal()
    {
        return this.ViewResourceGroupTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewResourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the resource identifiers.
    /// </summary>
    /// <returns>
    /// true to print the resource identifiers; otherwise, false.
    /// </returns>
    display boolean viewResourceId()
    {
        return this.ViewResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewResourceIdTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the resource identifier totals.
    /// </summary>
    /// <returns>
    /// true to print the resource identifier totals; otherwise, false.
    /// </returns>
    display boolean viewResourceIdTotal()
    {
        return this.ViewResourceIdTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewTransBeginTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the transaction begin time.
    /// </summary>
    /// <returns>
    /// true to print the transaction begin time; otherwise, false.
    /// </returns>
    display boolean viewTransBeginTime()
    {
        return this.DetailLevel == TotalTrans::Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the transaction dates.
    /// </summary>
    /// <returns>
    /// true to print the transaction dates; otherwise, false.
    /// </returns>
    display boolean viewTransDate()
    {
        return this.DetailLevel == TotalTrans::Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the voucher numbers.
    /// </summary>
    /// <returns>
    /// true to print the voucher numbers; otherwise, false.
    /// </returns>
    display boolean viewVoucher()
    {
        return this.DetailLevel == TotalTrans::Trans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewWIPPhysicalNonPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the WIP physical value not posted.
    /// </summary>
    /// <returns>
    /// true to print the WIP physical value not posted; otherwise, false.
    /// </returns>
    display boolean viewWIPPhysicalNonPosted()
    {
        return this.ViewWIP && !this.SummarizePhysFinValues && this.IncludeNotPostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewWIPPhysicalPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the WIP physical value posted.
    /// </summary>
    /// <returns>
    /// true to print the WIP physical value posted; otherwise, false.
    /// </returns>
    display boolean viewWIPPhysicalPosted()
    {
        return this.ViewWIP && !this.SummarizePhysFinValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewWIPTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print the WIP value.
    /// </summary>
    /// <returns>
    /// true to print the WIP value; otherwise, false.
    /// </returns>
    display boolean viewWIPTotal()
    {
        return this.ViewWIP && (this.SummarizePhysFinValues || this.PrintTotalQtyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLedgerValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to print ledger values.
    /// </summary>
    /// <returns>
    /// true to print ledger values; otherwise, false.
    /// </returns>
    display boolean printLedgerValue()
    {
        return this.PrintLedgerValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeNotPostedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to include not posted values.
    /// </summary>
    /// <returns>
    /// true to include not posted values; otherwise, false.
    /// </returns>
    display boolean includeNotPostedValue()
    {
        return this.IncludeNotPostedValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFixReferenceAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks and fixes records in the <c>InventValueReportDimension</c> table across all inventory value
    /// reports.
    /// </summary>
    /// <remarks>
    /// See the description of the <c>checkFixReference</c> method for more information.
    /// </remarks>
    static void checkFixReferenceAll()
    {
        InventValueReport inventValueReport;
        InventValueReportDimension inventValueReportDimension;
        InventValueReportDimension inventValueReportDimensionDelete;
        Set dimFields = InventDim::dimFieldList2Set(InventDim::dimFieldsList());

        ttsbegin;

        while select DimensionFieldId from inventValueReportDimension
            group by DimensionFieldId
        {
            if (!dimFields.in(inventValueReportDimension.DimensionFieldId))
            {
                // delete from all groups
                delete_from inventValueReportDimensionDelete
                    where inventValueReportDimensionDelete.DimensionFieldId == inventValueReportDimension.DimensionFieldId;
            }
        }

        while select inventValueReport
        {
            inventValueReport.checkFixReference();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReportId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>InventValueReport</c> table.
    /// </summary>
    /// <param name="_reportId">
    ///    The ID of the <c>InventValueReport</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>InventValueReport</c> table; otherwise, an empty record.
    /// </returns>
    static InventValueReport findByReportId(InventValueReportId _reportId, boolean _forUpdate = false)
    {
        InventValueReport  inventValueReport;

        inventValueReport.selectForUpdate(_forUpdate);

        if (_reportId != '')
        {
            select firstonly inventValueReport
                where inventValueReport.ReportId == _reportId;
        }

        return inventValueReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDateRangeTransDate</Name>
				<Source><![CDATA[
    private boolean isDateRangeTransDate()
    {
        return this.SelectDateRange == InventValueReportSelectDateRange::TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventoryLedgerDimension</Name>
				<Source><![CDATA[
    private void defaultInventoryLedgerDimension()
    {
        if (this.InventoryLedgerDimension
            && !(this.ViewInventory && this.PrintLedgerValue && this.isDateRangeTransDate()))
        {
            this.InventoryLedgerDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWIPLedgerDimension</Name>
				<Source><![CDATA[
    private void defaultWIPLedgerDimension()
    {
        if (this.WIPLedgerDimension
            && !(this.ViewWIP && this.PrintLedgerValue))
        {
            this.WIPLedgerDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCOGSLedgerDimension</Name>
				<Source><![CDATA[
    private void defaultCOGSLedgerDimension()
    {
        if (this.COGSLedgerDimension
            && !(this.ViewCOGS && this.PrintLedgerValue))
        {
            this.COGSLedgerDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDeferredCOGSLedgerDimension</Name>
				<Source><![CDATA[
    private void defaultDeferredCOGSLedgerDimension()
    {
        if (this.DeferredCOGSLedgerDimension
            && !(this.ViewDeferredCOGS && this.PrintLedgerValue))
        {
            this.DeferredCOGSLedgerDimension = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCalcAvgUnitCost</Name>
				<Source><![CDATA[
    private void defaultCalcAvgUnitCost()
    {
        if (this.CalcAvgUnitCost
            && !this.ViewInventory)
        {
            this.CalcAvgUnitCost = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultIncludeBeginningBalance</Name>
				<Source><![CDATA[
    private void defaultIncludeBeginningBalance()
    {
        if (this.IncludeBeginningBalance
            && this.DetailLevel == TotalTrans::Total)
        {
            this.IncludeBeginningBalance = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrintLedgerValue</Name>
				<Source><![CDATA[
    private void defaultPrintLedgerValue()
    {
        if (this.PrintLedgerValue
            && !this.isDateRangeTransDate())
        {
            this.PrintLedgerValue = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultViewLabor</Name>
				<Source><![CDATA[
    private void defaultViewLabor()
    {
        if (this.ViewLabor
            && !this.isDateRangeTransDate())
        {
            this.ViewLabor = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultViewIndirect</Name>
				<Source><![CDATA[
    private void defaultViewIndirect()
    {
        if (this.ViewIndirect
            && !this.isDateRangeTransDate())
        {
            this.ViewIndirect = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultViewDirectOutsourcing</Name>
				<Source><![CDATA[
    private void defaultViewDirectOutsourcing()
    {
        if (this.ViewDirectOutsourcing
            && !this.isDateRangeTransDate())
        {
            this.ViewDirectOutsourcing = NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates default values in a field.
    /// </summary>
    /// <param name = "_fieldId">The Id of the field that gets defaulted.</param>
    public void defaultField(FieldId _fieldId)
    {
        super (_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventValueReport, InventoryLedgerDimension):
                this.defaultInventoryLedgerDimension();
                break;

            case fieldNum(InventValueReport, WIPLedgerDimension):
                this.defaultWIPLedgerDimension();
                break;

            case fieldNum(InventValueReport, COGSLedgerDimension):
                this.defaultCOGSLedgerDimension();
                break;

            case fieldNum(InventValueReport, DeferredCOGSLedgerDimension):
                this.defaultDeferredCOGSLedgerDimension();
                break;

            case fieldNum(InventValueReport, CalcAvgUnitCost):
                this.defaultCalcAvgUnitCost();
                break;

            case fieldNum(InventValueReport, IncludeBeginningBalance):
                this.defaultIncludeBeginningBalance();
                break;

            case fieldNum(InventValueReport, PrintLedgerValue):
                this.defaultPrintLedgerValue();
                break;

            case fieldNum(InventValueReport, ViewLabor):
                this.defaultViewLabor();
                break;

            case fieldNum(InventValueReport, ViewIndirect):
                this.defaultViewIndirect();
                break;

            case fieldNum(InventValueReport, ViewDirectOutsourcing):
                this.defaultViewDirectOutsourcing();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the defaulting dependencies.
    /// </summary>
    /// <returns>A container with the defaulting dependencies.</returns>
    public container getDefaultingDependencies()
    {
        return  [
            [fieldNum(InventValueReport, InventoryLedgerDimension), [fieldNum(InventValueReport, SelectDateRange), fieldNum(InventValueReport, ViewInventory), fieldNum(InventValueReport, PrintLedgerValue)]],
            [fieldNum(InventValueReport, WIPLedgerDimension), [fieldNum(InventValueReport, SelectDateRange), fieldNum(InventValueReport, ViewWIP), fieldNum(InventValueReport, PrintLedgerValue)]],
            [fieldNum(InventValueReport, COGSLedgerDimension), [fieldNum(InventValueReport, SelectDateRange), fieldNum(InventValueReport, ViewCOGS), fieldNum(InventValueReport, PrintLedgerValue)]],
            [fieldNum(InventValueReport, DeferredCOGSLedgerDimension), [fieldNum(InventValueReport, SelectDateRange), fieldNum(InventValueReport, ViewDeferredCOGS), fieldNum(InventValueReport, PrintLedgerValue)]],
            [fieldNum(InventValueReport, CalcAvgUnitCost), [fieldNum(InventValueReport, ViewInventory)]],
            [fieldNum(InventValueReport, IncludeBeginningBalance), [fieldNum(InventValueReport, DetailLevel)]],
            [fieldNum(InventValueReport, PrintLedgerValue), [fieldNum(InventValueReport, SelectDateRange)]],
            [fieldNum(InventValueReport, ViewLabor), [fieldNum(InventValueReport, SelectDateRange)]],
            [fieldNum(InventValueReport, ViewIndirect), [fieldNum(InventValueReport, SelectDateRange)]],
            [fieldNum(InventValueReport, ViewDirectOutsourcing), [fieldNum(InventValueReport, SelectDateRange)]]
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the table extension used for defaulting.
    /// </summary>
    /// <returns>An instance of the <c>SysTableExtension</c> class.</returns>
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldSet</Name>
				<Source><![CDATA[
    private boolean validateFieldSet(FieldId _fieldId)
    {
        if (this.isFieldSet(_fieldId)
            && this.getFieldValue(fieldId2Name(tableNum(InventValueReport), _fieldId)))
        {
            return checkFailed(strFmt("@CostManagement:MessageValidation_InventValueReport", fieldId2PName(tableNum(InventValueReport), _fieldId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        // Inventory
        if (!(this.ViewInventory && this.PrintLedgerValue && this.isDateRangeTransDate()))
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, InventoryLedgerDimension));
        }

        // WIP
        if (!(this.ViewWIP && this.PrintLedgerValue))
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, WIPLedgerDimension));
        }

        // Deferred COGS
        if (!(this.ViewDeferredCOGS && this.PrintLedgerValue))
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, DeferredCOGSLedgerDimension));
        }

        // COGS
        if (!(this.ViewCOGS && this.PrintLedgerValue))
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, COGSLedgerDimension));
        }

        if (!this.ViewInventory)
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, CalcAvgUnitCost));
        }

        // Detail level
        if (this.DetailLevel == TotalTrans::Total)
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, IncludeBeginningBalance));
        }

        if (!this.isDateRangeTransDate())
        {
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, PrintLedgerValue));
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, ViewLabor));
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, ViewIndirect));
            ret = ret && this.validateFieldSet(fieldNum(InventValueReport, ViewDirectOutsourcing));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@SYS315629</DeveloperDocumentation>
	<FormRef>InventValueReportSetup</FormRef>
	<Label>@SYS315624</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ReportId</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ReportIdIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<ReplacementKey>ReportIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventValueReportDimension</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventValueReportDimension</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDateInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewInventory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewWIP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewDeferredCOGS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewCOGS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewProfitLoss</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintLedgerValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferredCOGSLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>COGSLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SummarizePhysFinValues</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeNotPostedValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalcAvgUnitCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintTotalQtyValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewResourceIdTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewResourceGroupTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewMaterial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewLabor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewIndirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DetailLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeBeginningBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AvgUnitCost</Name>
			<Label>@SYS315632</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcAvgUnitCost</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CompareToLedger</Name>
			<Label>@SYS315864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintLedgerValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventoryLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WIPLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeferredCOGSLedgerDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>COGSLedgerDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateInterval</Name>
			<Label>@SYS22142</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDateInterval</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SelectDateRange</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DetailLevel</Name>
			<Label>@SYS26676</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DetailLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IncludeBeginningBalance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DimensionFocus</Name>
			<Label>@SYS83251</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DimensionFocus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FinancialPosition</Name>
			<Label>@SYS315626</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViewInventory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewWIP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewDeferredCOGS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewCOGS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewProfitLoss</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReportId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryTransactions</Name>
			<Label>@SYS1286</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IncludeNotPostedValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintTotal</Name>
			<Label>@SYS116651</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PrintTotalQtyValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResourceGroupView</Name>
			<Label>@SYS315625</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViewResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewResourceGroupTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResourceType</Name>
			<Label>@SYS315649</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViewMaterial</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewLabor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewIndirect</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewDirectOutsourcing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResourceView</Name>
			<Label>@SYS315648</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ViewResourceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ViewResourceIdTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Summarize</Name>
			<Label>@SYS132683</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SummarizePhysFinValues</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcAvgUnitCost</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315878</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>COGSLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS315868</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultDateInterval</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS22142</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeferredCOGSLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS315867</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DetailLevel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS315631</Label>
			<EnumType>TotalTrans</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DimensionFocus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS83251</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeBeginningBalance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315627</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeNotPostedValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS304101</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventoryLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS315865</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventValueReportName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintLedgerValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS304102</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintTotalQtyValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315880</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReportId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventValueReportId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SelectDateRange</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventValueReportSelectDateRange</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SummarizePhysFinValues</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315877</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewCOGS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS302640</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewDeferredCOGS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS302639</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewDirectOutsourcing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS333371</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewIndirect</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS108871</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewInventory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS981</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewLabor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315636</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewMaterial</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315633</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewProfitLoss</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS94848</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewResourceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315645</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewResourceGroupTotal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS809</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewResourceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS315645</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewResourceIdTotal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS809</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ViewWIP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS50076</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WIPLedgerDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionDefaultAccount</ExtendedDataType>
			<Label>@SYS315866</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReportIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReportId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>COGSLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventValueReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>COGSLedgerDimension</Name>
					<SourceEDT>LedgerDimensionDefaultAccount</SourceEDT>
					<Field>COGSLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeferredCOGSLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventValueReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeferredCOGSLedgerDimension</Name>
					<SourceEDT>LedgerDimensionDefaultAccount</SourceEDT>
					<Field>DeferredCOGSLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionFocusHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionHierarchy</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionHierarchy_InventValueReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DimensionFocus</Name>
					<Field>DimensionFocus</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventoryLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_3</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventValueReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventoryLedgerDimension</Name>
					<SourceEDT>LedgerDimensionDefaultAccount</SourceEDT>
					<Field>InventoryLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPeriodCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerPeriodCode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerPeriodCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventValueReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDateInterval</Name>
					<Field>DefaultDateInterval</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WIPLedgerDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DimensionAttributeValueCombination</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueCombination_2</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventValueReport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WIPLedgerDimension</Name>
					<SourceEDT>LedgerDimensionDefaultAccount</SourceEDT>
					<Field>WIPLedgerDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>