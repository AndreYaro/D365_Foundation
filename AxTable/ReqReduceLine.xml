<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqReduceLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqReduceLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateDays</Name>
				<Source><![CDATA[
    public Integer allocateDays(TransDate breakEvenDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return this.AllocateTransMap::allocateDays(breakEvenDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFromDate</Name>
				<Source><![CDATA[
    public display FromDate displayFromDate()
    {
        return this.displayFromDatePrim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFromDatePrim</Name>
				<Source><![CDATA[
    public FromDate displayFromDatePrim(
        ReqReduceKey    tmpReqReduceKey  = null,
        ReqReduceLine   tmpReqReduceLine = null
        )
    {
        ReqReduceKey    reqReduceKey;
        ReqReduceLine   prevReduceLine;
        TransDate       breakEvenDate;

        if (tmpReqReduceKey)
        {
            reqReduceKey = tmpReqReduceKey;

            if (tmpReqReduceLine.isTmp())
            {
                prevReduceLine.setTmp();
                prevReduceLine.setTmpData(tmpReqReduceLine);
            }
        }
        else
        {
            reqReduceKey = ReqReduceKey::find(this.ReduceKeyId);
        }

        breakEvenDate = reqReduceKey.breakEvenDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (! this.Freq)
            return breakEvenDate;

        select reverse firstonly prevReduceLine
            order by Sort1980
            where prevReduceLine.ReduceKeyId == this.ReduceKeyId &&
                  prevReduceLine.Sort1980    <  this.Sort1980;

        if (prevReduceLine.RecId)
        {
            return prevReduceLine.toDate(breakEvenDate) + 1;
        }

        return breakEvenDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMonthName</Name>
				<Source><![CDATA[
    public display MonthName displayMonthName()
    {
        return this.displayMonthNamePrim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMonthNamePrim</Name>
				<Source><![CDATA[
    public MonthName displayMonthNamePrim(ReqReduceKey reqReduceKey = ReqReduceKey::find(this.ReduceKeyId))
    {
        return mthname(mthofyr(this.displayToDatePrim(reqReduceKey)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayToDate</Name>
				<Source><![CDATA[
    public display ToDate displayToDate()
    {
        return this.displayToDatePrim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayToDatePrim</Name>
				<Source><![CDATA[
    public ToDate displayToDatePrim(ReqReduceKey reqReduceKey = ReqReduceKey::find(this.ReduceKeyId))
    {
        TransDate       breakEvenDate;

        breakEvenDate = reqReduceKey.breakEvenDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (! this.Freq)
            return breakEvenDate;

        return this.toDate(breakEvenDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    public FromDate fromDate(TransDate breakEvenDate,ReqReduceLine prevReduceLine)
    {
        if (prevReduceLine.RecId)
            return prevReduceLine.toDate(breakEvenDate) + 1;

        return breakEvenDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.AllocateTransMap::setSort1980();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDate</Name>
				<Source><![CDATA[
    public ToDate toDate(TransDate breakEvenDate)
    {
        return breakEvenDate + this.allocateDays(breakEvenDate) - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.AllocateTransMap::setSort1980();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record exists in the <c>ReqReduceLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select reqReduceLine
                    where reqReduceLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>ReqReduceLine</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record if found; otherwise, an empty buffer.
    /// </returns>
    public static ReqReduceLine find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        ReqReduceLine reqReduceLine;

        if (_recId)
        {
            reqReduceLine.selectForUpdate(_forUpdate);

            select firstonly reqReduceLine
                where reqReduceLine.RecId == _recId;
        }

        return reqReduceLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useForecastPercentMap</Name>
				<Source><![CDATA[
    public static Percent useForecastPercentMap(
        TransDate           _reduceDate,
        Map                 _mapReqReduceLines
        )

    {
        TransDate   fromDate;
        TransDate   toDate;

        MapIterator mi = new MapIterator(_mapReqReduceLines);

        mi.begin();
        while (mi.more())
        {
            [fromDate,toDate] = ReqCalc::cacheReduceKey2Dates(mi.key());

            if (fromDate <= _reduceDate && toDate >= _reduceDate)
                return _mapReqReduceLines.lookup(mi.key());

            mi.next();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || ReqEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Req</ConfigurationKey>
	<DeveloperDocumentation>@SYS124219</DeveloperDocumentation>
	<FormRef>ReqReduceKey</FormRef>
	<Label>@SYS27951</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>ReduceKeyId</TitleField1>
	<TitleField2>ReducePct</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>KeyIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>LineIndex</ReplacementKey>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReduceKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReducePct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReduceKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReduceKeyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReducePct</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sort1980</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Freq</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreqCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Freq</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Periods</ExtendedDataType>
			<Label>@SYS5901</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreqCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>PeriodUnit</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReduceKeyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqReduceKeyId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReducePct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Sort1980</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Date1980</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>KeyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ReduceKeyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sort1980</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LineIndex</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ReduceKeyId</DataField>
					<Optional>Yes</Optional>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FreqCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Freq</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>AllocateTransMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Sort1980</MapField>
					<MapFieldTo>Sort1980</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Freq</MapField>
					<MapFieldTo>Freq</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FreqCode</MapField>
					<MapFieldTo>FreqCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>ReduceKeyId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReqReduceKey</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqReduceKey</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReduceKeyId</Name>
					<Field>ReduceKeyId</Field>
					<RelatedField>ReduceKeyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>KeyIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>