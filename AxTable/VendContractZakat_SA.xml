<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendContractZakat_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendContractZakat_SA extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean     ret;
        PurchTable  purchTable;

        ret = super();

        if (ret)
        {
            select firstonly RecId
                from purchTable
                    where purchTable.ContractNum_SA == this.ContractNum;

            if (purchTable.RecId)
            {
                ret = checkFailed(strFmt("@SYS75284", tableStr(PurchTable)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
        public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(VendContractZakat_SA, Amount) :
                    if (this.Amount < 0)
                    {
                        ret = checkFailed("@SYS118311");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(
        VendAccount                 _vendAccount,
        VendContractNumZakat_SA     _contractNum)
    {
        boolean ret = true;

        if (_contractNum
            && !VendContractZakat_SA::exist(_vendAccount, _contractNum))
        {
            ret = checkFailed(strFmt(VendContractZakat_SA::txtNotExist(), _contractNum, _vendAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>VendContractZakat_SA</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account is used to find record.
    /// </param>
    /// <param name="_contractNum">
    /// The contract number is used to find record.
    /// </param>
    /// <returns>
    /// Returns true if record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        VendAccount                 _vendAccount,
        VendContractNumZakat_SA     _contractNum)
    {
        return (_vendAccount
            && _contractNum
            && (select firstonly RecId
                    from vendContractZakat_SA
                        where vendContractZakat_SA.VendAccount == _vendAccount
                           && vendContractZakat_SA.ContractNum == _contractNum).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existContracts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether <c>VendContractZakat_SA</c> record exists or not for specified parameter.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account is used to find record.
    /// </param>
    /// <returns>
    /// Returns true if record exists; otherwise, false.
    /// </returns>
    public static boolean existContracts(VendAccount _vendAccount)
    {
        return ((select firstonly RecId
                    from vendContractZakat_SA
                        where vendContractZakat_SA.VendAccount == _vendAccount).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendContractZakat_SA</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The record id of <c>VendContractZakat_SA</c> table is used to find record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendContractZakat_SA</c> table.
    /// </returns>
    public static VendContractZakat_SA find(
        recId               _recId,
        boolean             _forUpdate          = false,
        ConcurrencyModel    _concurrencyModel   = ConcurrencyModel::Auto)
    {
        VendContractZakat_SA vendContractZakat;

        vendContractZakat.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendContractZakat.concurrencyModel(_concurrencyModel);
        }

        select firstonly vendContractZakat
            where vendContractZakat.RecId == _recId;

        return vendContractZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNatyralKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendContractZakat_SA</c> table.
    /// </summary>
    /// <param name="_vendAccount">
    /// The vendor account is used to find record.
    /// </param>
    /// <param name="_contractNum">
    /// The contract number is used to find record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendContractZakat_SA</c> table.
    /// </returns>
    public static VendContractZakat_SA findByNatyralKey(
        VendAccount             _vendAccount,
        VendContractNumZakat_SA _contractNum,
        boolean                 _forUpdate        = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendContractZakat_SA vendContractZakat;

        if (_contractNum && _vendAccount)
        {
            vendContractZakat.selectForUpdate(_forUpdate);

            if (_forUpdate
                && _concurrencyModel != ConcurrencyModel::Auto)
            {
                vendContractZakat.concurrencyModel(_concurrencyModel);
            }

            select firstonly vendContractZakat
                where vendContractZakat.VendAccount == _vendAccount
                   && vendContractZakat.ContractNum == _contractNum;
        }

        return vendContractZakat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupContracts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a lookup for the <c>VendContractZakat_SA</c> table.
    /// </summary>
    /// <param name="_formControl">
    /// The from controll is used to create the lookup.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account is used to find record.
    /// </param>
    public static void lookupContracts(
        FormControl  _formControl,
        VendAccount  _vendAccount)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(VendContractZakat_SA), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource  = query.addDataSource(tableNum(VendContractZakat_SA));
        queryBuildRange       = queryBuildDataSource.addRange(fieldNum(VendContractZakat_SA, VendAccount));
        queryBuildRange.value(queryValue(_vendAccount));

        sysTableLookup.addLookupfield(fieldNum(VendContractZakat_SA, ContractNum), true);
        sysTableLookup.addLookupfield(fieldNum(VendContractZakat_SA, Amount));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS322402";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>SA</CountryRegionCodes>
	<DeveloperDocumentation>@SYS322149</DeveloperDocumentation>
	<Label>@SYS34389</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ContractNum</TitleField1>
	<TitleField2>VendAccount</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>VendAcctContractNumIdx</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>AccountsPayable</Modules>
	<ReplacementKey>VendAcctContractNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Contracts</Name>
			<Label>@SYS73302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContractNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS321533</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendContractNumZakat_SA</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendAcctContractNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ContractNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ZakatVendContracts_SA</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>