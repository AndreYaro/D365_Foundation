<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfo_PaymentDisbursement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfo_PaymentDisbursement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
/// Determines whether the specified record exists in the <c>VendInvoiceInfo_PaymentDisbursement</c> table; if not, an error message is displayed.
/// </summary>
/// <param name="_vendPaymDisbursementRecId">
/// The record ID of the <c>VendInvoiceInfo_PaymentDisbursement</c> table record to be checked for existence.
/// </param>
/// <returns>
/// true if the specified record exists; otherwise, false.
/// </returns>

public static boolean checkExist( RecId _vendPaymDisbursementRecId)
{
    boolean ret = true;
    ;

    if (!VendInvoiceInfo_PaymentDisbursement::exist(_vendPaymDisbursementRecId))
    {
        ret = checkFailed(strFmt(VendInvoiceInfo_PaymentDisbursement::txtNotExist(), _vendPaymDisbursementRecId));
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>checkPercentageAllocation</Name>
				<Source><![CDATA[
    /// <summary>
/// Determines whether the percentage allocation lies between 0% and 100% for the payment disbursement
/// such that 0% is not allowed but 100% is allowed.
/// </summary>
/// <param name='_vendInvoiceInfoTable'>
/// The selected table record.
/// </param>
/// <returns>
/// true if the percentage allocation lies between 0% and 100% such that 0% is not allowed but 100% is allowed.
/// Otherwise, false.
/// </returns>
public static boolean checkPercentageAllocation(VendInvoiceInfoTable _vendInvoiceInfoTable)
{
    boolean                             checkPaymentDisbursement = true;
    int                                 countPaymentDisbursement;
    Percent                             sumOfAllocationPercentage;
    VendInvoiceInfo_PaymentDisbursement paymDisbursement;
    PurchTable                          purchTable;

    if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
    {
        select firstonly RecId from paymDisbursement
            where paymDisbursement.ParmId ==  _vendInvoiceInfoTable.ParmId
               && paymDisbursement.TableRefId == _vendInvoiceInfoTable.TableRefId;

        // if the payment disbursement is defined and the vendor is setup for the vendor bank
        // then do the validation for percentage allocation range.
        if (paymDisbursement)
        {
            sumOfAllocationPercentage = VendInvoiceInfo_PaymentDisbursement::getSumOfAllocationPercentage(
                                                                        _vendInvoiceInfoTable.ParmId,
                                                                        _vendInvoiceInfoTable.TableRefId);

            if (sumOfAllocationPercentage <= 0 || sumOfAllocationPercentage > 100)
            {
                checkPaymentDisbursement = false;
                error("@SPS243");
            }

            // gets the count of Payment disbursement records.
            countPaymentDisbursement = VendInvoiceInfo_PaymentDisbursement::getCountOfPurchPaymDisbursement(
                                                                            _vendInvoiceInfoTable.ParmId,
                                                                            _vendInvoiceInfoTable.TableRefId);

            if (countPaymentDisbursement != 1 || (countPaymentDisbursement == 1 && sumOfAllocationPercentage != 100))
            {
                if (_vendInvoiceInfoTable.PurchId)
                {
                    purchTable = _vendInvoiceInfoTable.purchTable();
                }

                if (_vendInvoiceInfoTable.VendPaymentGroup
                    || _vendInvoiceInfoTable.PaymentSched
                    || purchTable.PaymentSched)
                {
                    checkPaymentDisbursement = false;
                }

                if (!checkPaymentDisbursement)
                {
                    if (_vendInvoiceInfoTable.VendPaymentGroup)
                    {
                        error("@SPS284");
                    }
                    else
                    {
                        error("@SPS233");
                    }
                }
            }
        }
    }

        return checkPaymentDisbursement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
/// Determines whether the specified record in the <c>VendInvoiceInfo_PaymentDisbursement</c> table exists.
/// </summary>
/// <param name="_vendInvoiceInfo_PaymentDisbursementRecId">
/// The record ID of the <c>VendInvoiceInfo_PaymentDisbursement</c> table to check for existence.
/// </param>
/// <returns>
/// true if the specified record exists, otherwise, false.
/// </returns>

public static boolean exist(RecId _vendInvoiceInfo_PaymentDisbursementRecId)
{
    boolean found;
    ;

    found = (select firstonly
                 RecId
             from
                 vendInvoiceInfo_PaymentDisbursement
             where
                 vendInvoiceInfo_PaymentDisbursement.RecId == _vendInvoiceInfo_PaymentDisbursementRecId).RecId != 0;

    return found;
}

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
/// Finds the specified record in the <c>VendInvoiceInfo_PaymentDisbursement</c> table.
/// </summary>
/// <param name="_vendInvoiceInfo_PaymentDisbursementRecId">
/// The recId of the <c>VendInvoiceInfo_PaymentDisbursement</c> table to find.
/// </param>
/// <param name="_forupdate">
/// A Boolean value that indicates whether to read the record for update; optional.
/// </param>
/// <param name="_concurrencyModel">
/// The concurrency model option to be used when reading the record; optional.
/// </param>
/// <returns>
/// A record of the <c>VendInvoiceInfo_PaymentDisbursement</c> table if found; otherwise, an empty buffer.
/// </returns>

public static VendInvoiceInfo_PaymentDisbursement find(
    RecId _vendInvoiceInfo_PaymentDisbursementRecId,
    boolean                 _forupdate = false,
    ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
{
    VendInvoiceInfo_PaymentDisbursement      vendInvoiceInfo_PaymentDisbursement;
    ;

    vendInvoiceInfo_PaymentDisbursement.selectForUpdate(_forupdate);
    if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
    {
        vendInvoiceInfo_PaymentDisbursement.concurrencyModel(_concurrencyModel);
    }

    select firstonly
        vendInvoiceInfo_PaymentDisbursement
    where
        vendInvoiceInfo_PaymentDisbursement.RecId == _vendInvoiceInfo_PaymentDisbursementRecId;

    return vendInvoiceInfo_PaymentDisbursement;
}

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfPurchPaymDisbursement</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the records count of the <c>VendInvoiceInfo_PaymentDisbursement</c> table.
/// </summary>
/// <param name="_parmId">
/// The _parmId of the <c>VendInvoiceInfoTable</c> table to retrieves the count of the <c>VendInvoiceInfo_PaymentDisbursement</c> table records.
/// </param>
/// <param name="_tableRefId">
/// The _tableRefId of the <c>VendInvoiceInfoTable</c> table to retrieves the count of <c>VendInvoiceInfo_PaymentDisbursement</c> table records.
/// </param>
/// <returns>
/// A record count of the <c>VendInvoiceInfo_PaymentDisbursement</c> table if found; otherwise, zero.
/// </returns>

public static int getCountOfPurchPaymDisbursement(ParmId _parmId, TradeLineRefId _tableRefId)
{
    VendInvoiceInfo_PaymentDisbursement paymentDisbursement;
    ;
     select count(RecId) from paymentDisbursement
        where paymentDisbursement.ParmId == _parmId &&
        paymentDisbursement.TableRefId   == _tableRefId;

    return any2int(paymentDisbursement.RecId);
}

]]></Source>
			</Method>
			<Method>
				<Name>getSumOfAllocationPercentage</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the sum of the <c>AllocationPercentage</c> field of the <c>VendInvoiceInfo_PaymentDisbursement</c> table.
/// </summary>
/// <param name="_parmId">
/// The _parmId of the <c>VendInvoiceInfoTable</c> table to retrieves the sum of the <c>VendInvoiceInfo_PaymentDisbursement</c> table records.
/// </param>
/// <param name="_tableRefId">
/// The _tableRefId of the <c>VendInvoiceInfoTable</c> table to retrieves the sum of <c>VendInvoiceInfo_PaymentDisbursement</c> table records.
/// </param>
/// <returns>
/// A sum of the <c>VendInvoiceInfo_PaymentDisbursement</c> table if found; otherwise, zero.
/// </returns>

public static Percent getSumOfAllocationPercentage(ParmId _parmId, TradeLineRefId _tableRefId)
{
    VendInvoiceInfo_PaymentDisbursement paymentDisbursement;

     select sum(PercentageAllocation) from paymentDisbursement
        where paymentDisbursement.ParmId == _parmId &&
        paymentDisbursement.TableRefId   == _tableRefId;

    return paymentDisbursement.PercentageAllocation;
}

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
{
    return "@SYS94719";
}

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
/// Updates the <c>ParmId</c> of <c>VendInvoiceInfo_PaymentDisbursement</c> records for a given invoice.
/// </summary>
/// <param name="_parmId">
/// The <c>ParmId</c> used to determine which <c>VendInvoiceInfo_PaymentDisbursement</c> to move.
/// </param>
/// <param name="_tableRefId">
/// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfo_PaymentDisbursement</c> to move.
/// </param>
/// <param name="_newParmId">
/// The new <c>ParmId</c> value; optional.
/// </param>
public static void updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
{
    VendInvoiceInfo_PaymentDisbursement     vendInvoiceInfo_PaymentDisbursement;

    vendInvoiceInfo_PaymentDisbursement.skipDataMethods(true);
    vendInvoiceInfo_PaymentDisbursement.skipEvents(true);
    vendInvoiceInfo_PaymentDisbursement.skipDatabaseLog(true);

    update_recordset vendInvoiceInfo_PaymentDisbursement
        setting ParmId = _newParmId
        where vendInvoiceInfo_PaymentDisbursement.ParmId        == _parmId
            && vendInvoiceInfo_PaymentDisbursement.TableRefId   == _tableRefId;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS242</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SPS240</Label>
	<TableGroup>Parameter</TableGroup>
	<TitleField1>VendAccount</TitleField1>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>VendBankaccountIdParmIdTableRefIdIdx</ClusteredIndex>
	<Modules>AccountsPayable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentageAllocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentDisbursement</Name>
			<Label>@SPS235</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentageAllocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PercentageAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPercentageAllocation</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TableRefId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendBankAccountID</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendBankaccountIdParmIdTableRefIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendBankAccountID</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TableRefId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount_VendInvoiceInfo_PaymentDisbursement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendBankAccountID</Name>
					<Field>VendBankAccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceInfoTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendInvoiceInfoTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendInvoiceInfoTable_VendInvoiceInfo_PaymentDisbursement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableRefId</Name>
					<Field>TableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>InvoiceAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>