<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkTypeCustom</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkTypeCustom extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>methodExistsOnWHsWorkCustomData</Name>
				<Source><![CDATA[
    private boolean methodExistsOnWHsWorkCustomData()
    {
        SysDictClass dictClass = SysDictClass::newName(classStr(WHSWorkCustomData));
        return dictClass.hasObjectMethod(this.WorkTypeCustomMethod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processorExists</Name>
				<Source><![CDATA[
    private boolean processorExists()
    {
        WhsWorkTypeCustomProcessorFactoryAttribute attribute = new WhsWorkTypeCustomProcessorFactoryAttribute(this.WorkTypeCustomMethod);
        WhsIWorkTypeCustomProcessor processor = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsIWorkTypeCustomProcessor), attribute) as WhsIWorkTypeCustomProcessor;

        return processor != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomMethodImplemented</Name>
				<Source><![CDATA[
    private boolean isCustomMethodImplemented()
    {
        if (this.processorExists() ||
            this.methodExistsOnWHsWorkCustomData())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean     ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(WHSWorkTypeCustom, WorkTypeCustomMethod):
                    if (this.WorkTypeCustomMethod &&
                        !this.isCustomMethodImplemented())
                    {
                        ret = checkFailed("@WAX3721");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callCustomMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls a custom method on an <c>WHSWorkCustomData</c> instance.
    /// </summary>
    /// <param name="_method">
    /// Name of the method to be called.
    /// </param>
    /// <param name="_workId">
    /// Work id as parameter to be passed to method call.
    /// </param>
    /// <param name="_data">
    /// Data as parameter to be passed to method call.
    /// </param>
    public static void callCustomMethod(WHSWorkTypeCustomMethod _method, WHSWorkId _workId, str _data)
    {
        DictClass           dictClass = new DictClass(classNum(WHSWorkCustomData));
        WHSWorkCustomData   customData = new WHSWorkCustomData();
        ExecutePermission   exePerm = new ExecutePermission();

        exePerm.assert();

        dictClass.callObject(_method, customData, _workId, _data);

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process work line.
    /// </summary>
    /// <param name = "_parameters">Parameters for the processing.</param>
    public void processWorkLine(WhsWorkTypeCustomProcessParameters _parameters)
    {
        if (this.WorkTypeCustomMethod)
        {
            WhsWorkTypeCustomProcessorFactoryAttribute attribute = new WhsWorkTypeCustomProcessorFactoryAttribute(this.WorkTypeCustomMethod);
            WhsIWorkTypeCustomProcessor processor = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WhsIWorkTypeCustomProcessor), attribute) as WhsIWorkTypeCustomProcessor;

            if (processor)
            {
                processor.process(_parameters);
            }
            else
            {
                //To support the old style
                WHSWorkTypeCustom::callCustomMethod(this.WorkTypeCustomMethod, _parameters.workLine.WorkId, _parameters.data);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>WHSWorkTypeCustom</c> record exists.
    /// </summary>
    /// <param name="_workTypeCustomCode">
    /// Custom code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(WHSWorkTypeCustomCode _workTypeCustomCode)
    {
        return _workTypeCustomCode &&
               (select firstOnly RecId from WHSWorkTypeCustom
                where WHSWorkTypeCustom.WorkTypeCustomCode == _workTypeCustomCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkTypeCustom</c> record with given parameters.
    /// </summary>
    /// <param name="_workTypeCustomCode">
    /// Custom code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkTypeCustom find(WHSWorkTypeCustomCode _workTypeCustomCode,
                                         boolean               _forupdate = false)
    {
        WHSWorkTypeCustom    workTypeCustom;

        if (_workTypeCustomCode)
        {
            workTypeCustom.selectForUpdate(_forupdate);

            select firstonly workTypeCustom
                where workTypeCustom.WorkTypeCustomCode == _workTypeCustomCode;
        }

        return workTypeCustom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4509</DeveloperDocumentation>
	<FormRef>WHSWorkTypeCustom</FormRef>
	<Label>@WAX429</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkTypeCustomCode</TitleField1>
	<TitleField2>WorkTypeCustomDesc</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>WorkTypeCustomCodeIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WorkTypeCustomCodeIdx</PrimaryIndex>
	<ReplacementKey>WorkTypeCustomCodeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CaptureData</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomDesc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RFLabel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CaptureData</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkTypeCustomMethod</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CaptureData</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCaptureData</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RFLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSRFLabel</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTypeCustomCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTypeCustomCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTypeCustomDesc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTypeCustomDesc</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WorkTypeCustomMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkTypeCustomMethod</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkTypeCustomCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkTypeCustomCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>