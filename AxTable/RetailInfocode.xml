<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInfocode</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailInfocode extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInfocodeIsInGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if infocode is member of any group
    /// </summary>
    /// <returns>
    /// False if infocode is member of any group otherwise true
    /// </returns>
    public boolean checkInfocodeIsInGroup()
    {
        RetailInfocodeGroupSpecific retailInfocodeGroupSpecific;
        boolean                     ret = true;

        select firstonly RecId, GroupId from retailInfocodeGroupSpecific
            where retailInfocodeGroupSpecific.InfocodeId == this.infocodeId;

        if (retailInfocodeGroupSpecific.RecId)
        {
            ret = checkFailed(strFmt('%1 is member of %2 group', this.infocodeId, retailInfocodeGroupSpecific.GroupId));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves a description of the reason code.
    /// </summary>
    /// <returns>
    ///     A description of the reason code.
    /// </returns>
    public display Description description()
    {
        Description description;

        description = retailInfocodeTable::find(this.infocodeId).infocodeDescription();

        if (!description)
        {
            description = retailInfocodeGroup::find(this.infocodeId).Description;
        }

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getjumpRefMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves menu function corresponding to reason code type
    /// </summary>
    /// <returns>
    ///     Menu function corresponding to reason code type
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throws <c>wrongUseOfFunction</c> exception
    /// </exception>
    public MenuFunction getjumpRefMenuFunction()
    {
        MenuFunction mf;

        switch (this.infocodeType())
        {
            case RetailInfocodeType::Infocode :
                mf = new MenuFunction(menuitemDisplayStr(RetailinfocodeTable), MenuItemType::Display);
                break;

            case RetailInfocodeType::Group :
                mf = new MenuFunction(menuitemDisplayStr(RetailinfocodeGroup), MenuItemType::Display);
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }
        return mf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infocodeType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves type of reason code.
    /// </summary>
    /// <returns>
    ///     <c>RetailInfocodeType::Group</c> if reason code is group; otherwise <c>RetailInfocodeType::Infocode</c>
    /// </returns>
    display public RetailInfocodeType infocodeType()
    {
        if (retailInfocodeGroup::find(this.infocodeId))
        {
            return RetailInfocodeType::Group;
        }
        else
        {
            return RetailInfocodeType::Infocode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record is valid to be deleted.
    /// </summary>
    /// <returns>
    /// true if the record is valid to be deleted; otherwise false.
    /// </returns>
    public boolean validateDelete()
    {
        RetailFunctionalityProfile functionalityProfile;
        boolean ret;

        ret = super();

        ret = this.checkInfocodeIsInGroup() && ret;

        // Checks if the infocode is assigned to any profile, if yes the record will not be deleted.
        select firstonly functionalityProfile
        where functionalityProfile.voidIsPressed          == this.InfocodeId
           || functionalityProfile.voidTransaction        == this.InfocodeId
           || functionalityProfile.voidPayment            == this.InfocodeId
           || functionalityProfile.refundSale             == this.InfocodeId
           || functionalityProfile.markDown               == this.InfocodeId
           || functionalityProfile.markUp                 == this.InfocodeId
           || functionalityProfile.overridePrice          == this.InfocodeId
           || functionalityProfile.discountAtTotal        == this.InfocodeId
           || functionalityProfile.tenderDeclaration      == this.InfocodeId
           || functionalityProfile.startOfTransaction     == this.InfocodeId
           || functionalityProfile.endOfTransaction       == this.InfocodeId
           || functionalityProfile.serialNumber           == this.InfocodeId
           || functionalityProfile.salesPerson            == this.InfocodeId
           || functionalityProfile.itemNotOnFile          == this.InfocodeId
           || functionalityProfile.negativeSalesLine      == this.InfocodeId
           || functionalityProfile.transactionTaxChange   == this.InfocodeId
           || functionalityProfile.lineItemTaxChange      == this.InfocodeId
           || functionalityProfile.noSale                 == this.InfocodeId
           || functionalityProfile.RejectOrderFulfillment == this.InfocodeId;

        if (functionalityProfile)
            ret = checkFailed(strFmt("@RET3966",functionalityProfile.ProfileId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>RetailInfocode</c> table exists.
    /// </summary>
    /// <param name="_infocodeid">
    /// The Reason code of the <c>RetailInfocode</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RetailInfocodeId  _infocodeid)
    {
        return _infocodeid && (select RecId from retailInfocode
                                   where retailInfocode.infocodeid == _infocodeid
                              ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInfocodeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds a record in the <c>Retailinfocode</c> table.
    /// </summary>
    /// <param name="_infocodeId">
    ///     The import file ID number of the <c>Retailinfocode</c> table.
    /// </param>
    /// <param name="_forUpdate">
    ///     A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///     A record in the <c>Retailinfocode</c> table; otherwise, an empty record.
    /// </returns>
    static public Retailinfocode findByInfocodeId(RetailInfocodeIdBase _infocodeId, boolean _forUpdate = false)
    {
        Retailinfocode retailinfocode;

        if (_infocodeId)
        {
            retailinfocode.selectForUpdate(_forUpdate);

            select firstOnly retailinfocode
                where retailinfocode.infocodeId == _infocodeId;
        }
        return retailinfocode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides functionality to go to main table.
    /// </summary>
    /// <param name="_infocodeId">
    ///     The reason code or reason code group  ID of the <c>RetailInfocode</c> record.
    /// </param>
    public static void jumpRef(RetailInfocodeIdBase _infocodeId)
    {
        Args args;

        RetailInfocode retailInfocode = RetailInfocode::findByInfocodeId(_infocodeId);

        args = new args();
        args.lookupRecord(retailInfocode);

        RetailInfocode.getjumpRefMenuFunction().run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX4160605</DeveloperDocumentation>
	<Label>@RET3089</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>infocodeId</TitleField1>
	<TitleField2>dataAreaId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>TransactionsAndOrders</Modules>
	<ReplacementKey>InfocodeIdIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>RetailInfocodeTableSpecific</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation>
      </Relation>
			<Table>RetailInfocodeTableSpecific</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>infocodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>infocodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>infocodeType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>infocodeId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>infocodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailInfocodeIdBase</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Activity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailInfocodeActivityType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InfocodeIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>infocodeId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>