<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailChannelTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class RetailChannelTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values to the <c>OMOperatingUnitID</c> and <c>ChannelType</c> fields based on the
    /// parameters that are passed to the method.
    /// </summary>
    /// <param name="channelType">
    /// The channel type of the <c>RetailChannelTable</c> record.
    /// </param>
    /// <param name="_ouRecId">
    /// The OM operating unit of the <c>RetailChannelTable</c> table.
    /// </param>
    public void create(RetailChannelType channelType, RecId _ouRecId)
    {
        this.omOperatingUnitID = _ouRecId;
        this.ChannelType = channelType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a record from <c>RetailChannelTable</c> table.
    /// </summary>
    /// <remarks>
    /// If replication of the record is allowed for the table, unprocessed(dead) records are removed from the distribution list.
    /// </remarks>
    public void delete()
    {
        RetailInternalOrganization  retailInternalOrganization;
        ttsbegin;

        retailInternalOrganization = RetailInternalOrganization::findByOMInternalOrganization(this.OMOperatingUnitID, true);

        if (retailInternalOrganization)
        {
            retailInternalOrganization.delete();
        }

        RetailChannelTable channelTable;
        select firstonly channelTable where channelTable.RecId == this.RecId;

        if (!DimensionValidation::canDeleteEntityValue(channelTable))
        {
            throw error(strfmt("@SYS134392", channelTable.RetailChannelId));
        }

        // Update the associated dimension attribute value.
        DimensionAttributeValue::updateForEntityValueDelete(channelTable);

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the selected record of the form in the class <c>args</c> based on retail channel type.
    /// </summary>
    public void displayForm()
    {
        Args                args = new Args();

        args.record(this);
        this.displayFormMenuFunction().run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFormMenuFunction</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method must be overridden based on the channel type.
    /// </summary>
    /// <returns>
    /// Always returns null.
    /// </returns>
    public MenuFunction displayFormMenuFunction()
    {
        // Must be overridden
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>RetailChannelTable</c> table.
    /// Also Validates if there is valid <c>OMOperatingUnitID</c> before it inserts the record.
    /// </summary>
    /// <param name="_syncToRetailIntOrg">
    /// whether to sync changes to <c>RetailInternalOrganization</c>
    /// </param>
    public void insert(boolean _syncToRetailIntOrg = true)
    {
        RetailInternalOrganization retailInternalOrganization;
        SysGlobalObjectCache c;

        #Retail

        //We should always have a matching OU.
        if (!this.omOperatingUnitID)
        {
            warning("@RET5805");
            return;
        }

        ttsBegin;

        if (this.ChannelTimeZone)
        {
            this.ChannelTimeZoneInfoId = DateTimeUtil::getTimeZoneId(this.ChannelTimeZone);
        }
        else
        {
            this.ChannelTimeZoneInfoId = '';
        }

        super();

        // sync RetailInternalOrganization table.
        if (_syncToRetailIntOrg && !RetailInternalOrganization::findByOMInternalOrganization(this.OMOperatingUnitID))
        {
            retailInternalOrganization.InternalOrganization = this.OMOperatingUnitID;
            retailInternalOrganization.CategoryHierarchy    = this.CategoryHierarchy;
            retailInternalOrganization.InheritEnabled       = NoYes::No;
            retailInternalOrganization.insert();
        }

        ttsCommit;

        RetailProvisionedChannelProdAttrGroup::FindOrAddChannelProductAttributeGroup(this);

        if (this.needsDataReplicated())
        {
            this.insertDefaultProductAttributeMetadata();
        }

        if (this.ChannelType == RetailChannelType::MCRCallCenter)
        {
            c = new SysGlobalObjectCache();
            c.clear(#MCRCacheScope);
            c.insert(#MCRCacheScope, [curext()], [true]);
        }
        
        RetailChannelTable retailChannelTableLocal = RetailChannelTable::findByRecId(this.RecId);
        if (retailChannelTableLocal)
        {
            DimensionDefaultFacade::copyDimensionValueToDefaultDimensionField(retailChannelTableLocal, fieldNum(RetailChannelTable, RetailChannelId), this, fieldNum(RetailChannelTable, DefaultDimension));
        }

        RetailCDXCustomerSearchSeedDataInitializer::populateListOfRepresentativeChannel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultProductAttributeMetadata</Name>
				<Source><![CDATA[
    private void insertDefaultProductAttributeMetadata()
    {
        RetailChannelProdAttrMetadataHandler metadataHandler;
        RetailInternalOrgAttributeGroup internalOrgAttributeGroup;
        RetailProvisionedChannelProdAttrGroup provisionedChannelProdAttrGroup;
        RetailProvisionedChannelProductAttribute provisionedChannelProductAttribute;
        EcoResAttributeGroupAttribute channelProductAttributeGroupAttribute;
        RetailStandardAttribute standardAttribute;
        EcoResAttribute  standardProductAttribute;
        RetailSharedParameters sharedParameter;
        EcoResAttributeGroupAttribute enrichmentProductAttributeGroupAttribute;
        RetailProdAttributeInternalOrgMetadata existingProdAttributeInternalOrgMetadata;
        RetailInternalOrganization retailInternalOrganization;
        RetailAttributeMetadata retailAttributeMetadata;
        str defaultMetadata;
        int currentVersion;

        ttsBegin;

        // Create metadata handler
        metadataHandler = RetailChannelProdAttrMetaHandlerFactory::create(this.RecId);
        retailInternalOrganization = RetailInternalOrganization::findByChannelId(this.RecId);

        // Insert metadata
        if (metadataHandler != null)
        {
            currentVersion = metadataHandler.currentMetadataVersion();

            // Provisioned channel product attributes
            while select InternalOrganization, Modifier, AttributeGroup from internalOrgAttributeGroup
                where internalOrgAttributeGroup.InternalOrganization == retailInternalOrganization.RecId &&
                        internalOrgAttributeGroup.Modifier == RetailChannelAttributeModifier::Product
                exists join provisionedChannelProdAttrGroup
                    where provisionedChannelProdAttrGroup.AttributeGroup == internalOrgAttributeGroup.AttributeGroup &&
                            provisionedChannelProdAttrGroup.ChannelType == this.ChannelType
            {
                while select AttributeGroup, Attribute from channelProductAttributeGroupAttribute
                    where channelProductAttributeGroupAttribute.AttributeGroup == internalOrgAttributeGroup.AttributeGroup
                    join Attribute, ChannelProductAttributeID from provisionedChannelProductAttribute
                    where provisionedChannelProductAttribute.Attribute == channelProductAttributeGroupAttribute.Attribute
                {
                    retailAttributeMetadata = RetailAttributeMetadata::findByAttribute(channelProductAttributeGroupAttribute.Attribute);

                    RetailProdAttributeInternalOrgMetadata::addUpdate(
                            retailInternalOrganization.RecId,
                            channelProductAttributeGroupAttribute.Attribute,
                            false,
                            RetailProductAttributeRelationType::Channel,
                            retailAttributeMetadata.Metadata,
                            retailAttributeMetadata.MetadataVersion);
                }
            }

            // Standard product attributes from RetailStandardAttribute table
            while select Attribute, StandardAttributeID from standardAttribute
                    join RecId, Name from standardProductAttribute
                    where standardProductAttribute.RecId == standardAttribute.Attribute
            {
                defaultMetadata = metadataHandler.defaultMetadata(RetailProductAttributeRelationType::StandardProduct, standardAttribute.StandardAttributeID, RetailChannelProductAttributeID::None, currentVersion);

                RetailProdAttributeInternalOrgMetadata::addUpdate(
                        retailInternalOrganization.RecId,
                        standardAttribute.Attribute,
                        false,
                        RetailProductAttributeRelationType::StandardProduct,
                        defaultMetadata,
                        currentVersion);
            }

            // Enrichment attributes
            sharedParameter = RetailSharedParameters::find();
            if (sharedParameter.RecId > 0 && sharedParameter.ProductDefaultAttributeGroup > 0)
            {
                defaultMetadata = metadataHandler.defaultMetadata(RetailProductAttributeRelationType::StandardProduct, RetailStandardAttributeID::None, RetailChannelProductAttributeID::None, currentVersion);

                while select Attribute, AttributeGroup from enrichmentProductAttributeGroupAttribute
                    where enrichmentProductAttributeGroupAttribute.AttributeGroup == sharedParameter.ProductDefaultAttributeGroup
                    notExists join existingProdAttributeInternalOrgMetadata
                    where existingProdAttributeInternalOrgMetadata.InternalOrganization == retailInternalOrganization.RecId
                        && existingProdAttributeInternalOrgMetadata.Attribute == enrichmentProductAttributeGroupAttribute.Attribute
                {
                    RetailProdAttributeInternalOrgMetadata::addUpdate(
                        retailInternalOrganization.RecId,
                        enrichmentProductAttributeGroupAttribute.Attribute,
                        false,
                        RetailProductAttributeRelationType::StandardProduct,
                        defaultMetadata,
                        currentVersion);
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnvironmentSupportAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks environment availablity for all channels.
    /// </summary>
    /// <returns>
    /// Environment availability status.
    /// </returns>
    public boolean isEnvironmentSupportAvailable()
    {
        boolean environmentsEnabled = false;
        #RetailEnvironment

        switch (this.ChannelType)
        {
            case RetailChannelType::OnlineMarketplace:
                environmentsEnabled = #AllowEnvironmentSupportForOnlineMarketplace;
                break;
            case RetailChannelType::OnlineStore:
                environmentsEnabled = #AllowEnvironmentSupportForOnlineStores;
                break;
            case RetailChannelType::RetailStore:
                environmentsEnabled = #AllowEnvironmentSupportForRetailStores;
                break;
            case RetailChannelType::SharePointOnlineStore:
                environmentsEnabled = #AllowEnvironmentSupportForSharePointStores;
                break;
            case RetailChannelType::MCRCallCenter:
                environmentsEnabled = #AllowEnvironmentSupportForCallCenter;
                break;
            default:
                EventHandlerResult result = new EventHandlerResult();
                this.isEnvironmentSupportAvailableDelegate(this.ChannelType, result);

                if (result.hasResult())
                {
                    environmentsEnabled = result.result();
                }
        }

        return environmentsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnvironmentSupportAvailableDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for checking environment availablity for the current channel based on its channel type.
    /// </summary>
    /// <param name="_channelType">
    /// The channel type of the current record.
    /// </param>
    /// <param name="_result">
    /// Subscribers should use this object to return true if environment support is available for the specified channel; false otherwise.
    /// </param>
    delegate void isEnvironmentSupportAvailableDelegate(RetailChannelType _channelType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIndiaCompanyRetailStore_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the company of retail storetable is an India company.
    /// </summary>
    /// <returns>
    /// True, if the company of retail storetable is an India company; false, otherwise.
    /// </returns>
    public boolean isIndiaCompanyRetailStore_IN()
    {
        #ISOCountryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN], this.inventLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRussiaCompanyRetailStore_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the store is located in Russian Federation.
    /// </summary>
    /// <returns>
    /// true if the store is located in Russia; false otherwise.
    /// </returns>
    public boolean isRussiaCompanyRetailStore_RU()
    {
        #ISOCountryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU], this.inventLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modification of the field value of <c>RetailChannelTable</c>.
    /// </summary>
    /// <param name="_fieldId">
    /// The value of field ID.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        if (_fieldId == fieldNum(RetailChannelTable, InventLocationDataAreaId))
        {
            this.inventLocation = '';
            this.DefaultCustAccount = '';

            this.DefaultCustDataAreaId          = getCompany(tableNum(CustTable),       this.inventLocationDataAreaId);
            this.Currency = Ledger::accountingCurrency(CompanyInfo::findDataArea(this.inventLocationDataAreaId).RecId);
            // <GIN>
            if (this.orig().isIndiaCompanyRetailStore_IN() && !this.isIndiaCompanyRetailStore_IN() && this.RecId)
            {
                RetailStoreTable_IN::deleteByRetailStoreTable(this.RecId);
            }
            // </GIN>
            // <GEERU>
            if (!this.isRussiaCompanyRetailStore_RU())
            {
                this.CashOffice_RU = '';
            }
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the <c>OMOperatingUnit</c> object.
    /// </summary>
    /// <returns>
    /// The name of the current operating unit.
    /// </returns>
    display DirPartyName name()
    {
        OMOperatingUnit ou;

        select RecId from ou
            where ou.RecId == this.omOperatingUnitID;

        return OMOperatingUnit::find(ou.RecId, OMOperatingUnitType::RetailChannel).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsDataReplicated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the channel need data replication via Store Connect.
    /// If there is a method subscribed to the  needsDataReplicatedDelegate the result from that method will
    /// override the implementation of needsDataReplicated method
    /// </summary>
    /// <returns>
    /// A boolean indicating the result
    /// </returns>
    public boolean needsDataReplicated()
    {
        EventHandlerResult result = new EventHandlerResult();
        this.needsDataReplicatedDelegate(this.ChannelType, result);

        if (result.hasResult()) // use the result from the delegate implementaiton if it exists
        {
            return result.result();
        }
        else // if there is no method that subscribed to the needsDataReplicatedDelegate use this default logic.
        {
            return this.ChannelType != RetailChannelType::OnlineStore &&
                this.ChannelType != RetailChannelType::OnlineMarketplace;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsDataReplicatedDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for checking whether the channel needs data replication via Store Connect.
    /// If there is a method subscribed to this delegate the result from that method will
    /// override the implementation of needsDataReplicated method
    /// </summary>
    /// <param name="_channelType">
    /// The channel type of the current record.
    /// </param>
    /// <param name="_result">
    /// Subscribers should use this object to return true if the channel needs data replication via store connect; false otherwise.
    /// </param>
    delegate void needsDataReplicatedDelegate(RetailChannelType _channelType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a record in <c>RetailChannelTable</c> table.
    /// </summary>
    /// <param name="_syncToRetailIntOrg">
    /// whether to sync changes to <c>RetailInternalOrganization</c>.
    /// </param>
    /// <remarks>
    /// If replicate is enabled, action is inserted into the <c>RetailConnPreactionTable</c>.
    /// </remarks>
    public void update(boolean _syncToRetailIntOrg = true)
    {
        RetailInternalOrganization  retailInternalOrganization;
        EcoResCategoryHierarchyId   orignalCategoryHierarchyId = this.orig().CategoryHierarchy;
        RetailChannelTable          originalRecord;

        if (this.RetailChannelId != this.orig().RetailChannelId)
        {
            // We need to ensure the instance type is really RetailChannelTable, instead of possiblity of inherit instance like RetailStoreTable.
            // We need this for DimensionValueRename::syncRenamedValue later on at the end of this method.
            // THe reason is that there can be inherit class like RetailStoreTable, which also register another dimension by another field StoreNumber.
            // As the result, DimensionValueRename::syncRenamedValue will handle incorrect to consider RetailStoreTable's dimension rather than RetailChannelTable's dimension.
            originalRecord = RetailChannelTable::findByRecId(this.RecId);
        }

        ttsBegin;

        if (this.ChannelTimeZone)
        {
            this.ChannelTimeZoneInfoId = DateTimeUtil::getTimeZoneId(this.ChannelTimeZone);
        }
        else
        {
            this.ChannelTimeZoneInfoId = '';
        }

        DimensionValueRenameV2 rename;
        if (originalRecord)
        {
            RetailChannelTable newRecord = originalRecord.data();
            newRecord.RetailChannelId = this.RetailChannelId;
            rename = DimensionValueRenameV2::construct(newRecord, originalRecord);
            rename.syncRenamedValuePreSuper();
        }

        super();

        // update RetailInternalOrganization table
        if (_syncToRetailIntOrg && orignalCategoryHierarchyId != this.CategoryHierarchy)
        {
            retailInternalOrganization = RetailInternalOrganization::findByOMInternalOrganization(this.OMOperatingUnitID, true);

            retailInternalOrganization.CategoryHierarchy = this.CategoryHierarchy;
            retailInternalOrganization.InheritEnabled = NoYes::No;

            if (!retailInternalOrganization)
            {
                retailInternalOrganization.InternalOrganization = this.OMOperatingUnitID;
                retailInternalOrganization.insert();
            }
            else
            {
                retailInternalOrganization.update(false);
            }
        }

        // According to guideline https://docs.microsoft.com/en-us/dynamics365/fin-ops-core/dev-itpro/financial/dimensionable-entities#step-3-override-methods-on-the-backing-table
        // We need to call the syncRenamedValue in case our registered column, which is RetailChannelId, has update.
        if (originalRecord)
        {
            rename.syncRenamedValuePostSuper();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>channelDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local date time of the channel.
    /// </summary>
    /// <param name="_channelRecId">
    /// The record ID of the channel.
    /// </param>
    /// <returns>
    /// The channel date time.
    /// </returns>
    public static utcDateTime channelDateTime(RetailChannelRecId _channelRecId)
    {
        return DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), RetailChannelTable::getChannelTimezone(_channelRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocalDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local date of the channel or call center.
    /// </summary>
    /// <param name="_channelRecId">
    /// The record ID of the channel, 0 if call center.
    /// </param>
    /// <returns>
    /// The channel/call center local date.
    /// </returns>
    internal static date getLocalDate(RetailChannelRecId _channelRecId)
    {
        date localDate;
        if (_channelRecId == 0)
        {
            localDate =  DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            localDate = DateTimeUtil::date(RetailChannelTable::channelDateTime(_channelRecId));
        }
        return localDate;

    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the table instance based on the channel type passed as the parameter.
    /// </summary>
    /// <param name="channelType">
    /// The current value of Channel type.
    /// </param>
    /// <returns>
    /// The instance of <c>RetailStoreTable</c> will be initilized based on the Channel type.
    /// </returns>
    private static RetailChannelTable constructTable(RetailChannelType channelType)
    {
        RetailStoreTable        retailStoreTable;
        RetailOnlineChannelTable  retailOnlineChannelTable;
        RetailMCRChannelTable     retailMCRChannelTable;

        switch (channelType)
        {
            case RetailChannelType::RetailStore :
                return retailStoreTable;

            case RetailChannelType::OnlineStore :
            case RetailChannelType::OnlineMarketplace :
            case RetailChannelType::SharePointOnlineStore :
                return retailOnlineChannelTable;

            case RetailChannelType::MCRCallCenter :
                return retailMCRChannelTable;

            default:
                EventHandlerResult result = new EventHandlerResult();
                RetailChannelTable::constructTableDelegate(channelType, result);  // invoke a method that may have subscribed to this delegate for extensibility.
                
                // if there is a method that subscribed to the delegate
                // and there is a result from the call
                if (result.hasResult())
                {
                    return result.result();
                }
                else
                {
                    // if the table type is not returned from the constructTableDelegate, default to retailStoreTable.
                    return retailStoreTable;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTableDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for initializing the table instance based on the specified channel type.
    /// </summary>
    /// <param name="_channel">
    /// The channel type.
    /// </param>
    /// <param name="_result">
    /// Subscribers should use this object to return the proper table instance that represents the specified channel type.
    /// The type of the table instance should be <c>RetailChannelTable</c> or one of its subtypes.
    /// </param>
    static delegate void constructTableDelegate(RetailChannelType _channelType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the form to let the user edit.
    /// </summary>
    /// <param name="channelType">
    /// The current value of channel type.
    /// </param>
    /// <param name="_ouRecId">
    /// The current value of operating unit RecId.
    /// </param>
    public static void displayChannel(RetailChannelType channelType, RecId _ouRecId)
    {
        // display the form to allow the user to edit.
        RetailChannelTable::findOrCreateChannel(channelType, _ouRecId).displayForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOperatingUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>RetailChanneltable</c> based on the RecId of an operating unit
    /// </summary>
    /// <param name="_recId">
    /// The value of RecId.
    /// </param>
    /// <returns>
    /// A record in the RetailChannelTable; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// A record in the RetailChannelTable; otherwise, an empty record.
    /// </remarks>
    public static RetailChannelTable findByOperatingUnitId(RecId _recId)
    {
        RetailChannelTable retailChannelTable;

        select firstonly retailChannelTable where retailChannelTable.OMOperatingUnitID == _recId;

        return retailChannelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRetailChannelId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>RetailChannelTable</c> based on the RetailChannelId
    /// </summary>
    /// <param name="_retailChannelId">
    /// The value of RetailChannelId.
    /// </param>
    /// <returns>
    /// A record in the RetailChannelTable; otherwise, an empty record.
    /// </returns>
    internal static RetailChannelTable findByRetailChannelId(RetailChannelId _retailChannelId)
    {
        RetailChannelTable retailChannelTable;

        select firstonly retailChannelTable where retailChannelTable.RetailChannelId == _retailChannelId;

        return retailChannelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>RetailChannelTable</c> table by using the record ID.
    /// </summary>
    /// <param name="_recId">
    /// The value of the record ID.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailChannelTable</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailChannelTable findByRecId(RecId _recId)
    {
        RetailChannelTable retailChannelTable;

        select firstonly retailChannelTable where retailChannelTable.RecId == _recId;

        return retailChannelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record in the <c>RetailChanneltable</c> table by using the record ID.
    /// </summary>
    /// <param name="channelType">
    /// The current value of channel type.
    /// </param>
    /// <param name="_ouRecId">
    /// The current value of record ID.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailChannelTable</c> table; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// Calls the method <c>recIdfromOperatingUnitId</c> from <c>RetailChannelTable</c> to find the record.
    /// </remarks>
    public static RetailChannelTable findOrCreateChannel(RetailChannelType channelType, RecId _ouRecId)
    {
        RetailChannelTable  channelTable;
        RecId               recId;

        // Construct the specific table for this channel
        channelTable = RetailChannelTable::constructTable(channelType);

        // search for an already existing record
        recId = RetailChannelTable::recIdfromOperatingUnitId(_ouRecId);
        if (recId)
        {
            select forupdate * from channelTable where channelTable.RecId == recId;
        }
        else
        {
            // Create a new record for this channel
            channelTable.create(channelType, _ouRecId);
        }

        return channelTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChannelTimezone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get channel time zone.
    /// </summary>
    /// <param name="_channelRecId">
    /// The channel record ID.
    /// </param>
    /// <returns>
    /// The channel time zone.
    /// </returns>
    /// <remarks>
    /// If time zone is not specified at channel level, use time zone specified at the channel's legal entity, or UTC.
    /// </remarks>
    public static Timezone getChannelTimezone(RetailChannelRecId _channelRecId)
    {
        RetailChannelTable channel;
        DataArea dataArea;

        channel = RetailChannelTable::findByRecId(_channelRecId);
        if (channel.ChannelTimeZone)
        {
            return channel.ChannelTimeZone;
        }

        select timeZone from dataArea
            where dataArea.Id == channel.inventLocationDataAreaId;
        if (dataArea.timeZone)
        {
            return dataArea.timeZone;
        }

        return Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recIdfromOperatingUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the <c>RetailChannelTable</c> record by using the record ID that is passed as
    /// the parameter.
    /// </summary>
    /// <param name="_ouRecId">
    /// The current value of record ID.
    /// </param>
    /// <returns>
    /// The record ID of the <c>RetailChannelTable</c> table.
    /// </returns>
    private static RecId recIdfromOperatingUnitId(RecId _ouRecId)
    {
        RetailChannelTable channelTable;

        select firstonly RecId from channelTable where channelTable.omOperatingUnitID == _ouRecId;
        return channelTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the value against a few fields.
    /// </summary>
    public void initValue()
    {
        super();
        
        this.inventLocationDataAreaId = curext();
        this.Currency = Ledger::accountingCurrency(CompanyInfo::findDataArea(this.inventLocationDataAreaId).RecId);

        this.setDataAreaFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataAreaFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the <c>DataArea</c> fields based on the <c>inventLocationDataAreaId</c> field.
    /// </summary>
    public void setDataAreaFields()
    {
        this.DefaultCustDataAreaId = getCompany(tableNum(CustTable), this.inventLocationDataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Title</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets title fields of a record.
    /// </summary>
    /// <returns>
    /// The title fields for display.
    /// </returns>
    display TitleFields Title()
    {
        OMOperatingUnit omOperatingUnit;

        if (this.RecId == 0)
        {
            return "@RET5915"; // New record
        }
        else
        {
            select Name, OMOperatingUnitNumber from omOperatingUnit where omOperatingUnit.RecId == this.omOperatingUnitID;

            return strFmt("@RET5916", omOperatingUnit.OMOperatingUnitNumber, omOperatingUnit.Name); //%1: %2
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WarehousePrimaryAddress_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the default address of the retail warehouse.
    /// </summary>
    /// <returns>
    /// Returns the default address of the retail warehouse.
    /// </returns>
    display LogisticsAddressing WarehousePrimaryAddress_IN()
    {
        LogisticsPostalAddress      logisticsPostalAddress;

        if (this.inventLocationDataAreaId)
        {
            changeCompany(this.inventLocationDataAreaId)
            {
                logisticsPostalAddress      = LogisticsPostalAddress::findByLocation(
                    InventLocation::getDefaultLogisticsLocation_IN(this.inventLocation, LogisticsLocationRoleType::Delivery).RecId);
            }
        }

        return logisticsPostalAddress.Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WarehousePrimaryLocation_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the default location of the retail warehouse.
    /// </summary>
    /// <returns>
    /// Returns the default location of the retail warehouse.
    /// </returns>
    display Description WarehousePrimaryLocation_IN()
    {
        Description warehousePrimaryLocation;
        if (this.inventLocationDataAreaId)
        {
            changeCompany(this.inventLocationDataAreaId)
            {
                warehousePrimaryLocation = InventLocation::getDefaultLogisticsLocation_IN(this.inventLocation, LogisticsLocationRoleType::Delivery).Description;
            }
        }
        return warehousePrimaryLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform validations on a given field.
    /// </summary>
    /// <param name = "_fieldIdToCheck">Field to validate.</param>
    /// <returns>true if validation successful; else false.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        switch (_fieldIdToCheck)
        {
            case fieldNum (RetailChanneltable, DefaultCustAccount):
                changecompany(this.DefaultCustDataAreaId)
                {
                    ret = super(_fieldIdToCheck);
                }
                break;

            case fieldNum (RetailChanneltable, InventLocation):
                changecompany(this.inventLocationDataAreaId)
                {
                    ret = super(_fieldIdToCheck);
                }
                break;

            case fieldNum (RetailChanneltable, OMOperatingUnitID):
                ret = this.validateOperatingUnitValue();
                break;

            default:
                ret = super(_fieldIdToCheck);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoryHierarchyByChannel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the category hierarchy ID by channel.
    /// </summary>
    /// <param name = "_channelRecId">The value of the channel record ID.</param>
    /// <returns>The category hierarchy of the current channel.</returns>
    public static EcoResCategoryHierarchyId findCategoryHierarchyByChannel(RefRecId _channelRecId)
    {
        RetailChannelTable          channelTable;
        RetailInternalOrganization  internalOrganization;
        RetailInternalOrgCatHierarchyCollapsed internalOrgCatHierarchyCollapsed;

        select firstonly CategoryHierarchy from internalOrgCatHierarchyCollapsed
            join internalOrganization
                where internalOrganization.RecId == internalOrgCatHierarchyCollapsed.InternalOrganization
            join channelTable
                where channelTable.OMOperatingUnitID == internalOrganization.InternalOrganization &&
                    channelTable.RecId == _channelRecId;

        return internalOrgCatHierarchyCollapsed.CategoryHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionAttributeDelegates_getTablesToAddCopiedValuesTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of tables and fields to update when copying the values to default dimensions on existing values.
    /// </summary>
    /// <param name = "_tableSet">A <c>Set</c> of <c>DimensionCopyValuesDataContract</c> values.</param>
    [SubscribesTo(classStr(DimensionAttributeDelegates), delegateStr(DimensionAttributeDelegates, getTablesToAddCopiedValuesTo))]
    public static void DimensionAttributeDelegates_getTablesToAddCopiedValuesTo(Set _tableSet)
    {
        DimensionCopyValueDataContract contract = DimensionCopyValueDataContract::construct(tableNum(RetailChannelTable), fieldNum(RetailChannelTable, DefaultDimension));
        contract.addKeyFieldDimensionPair(tableNum(RetailChannelTable), fieldNum(RetailChannelTable, RetailChannelId));
        _tableSet.add(contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a value in a field is valid.
    /// </summary>
    /// <param name="_fieldName">
    /// A string that contains the field name.
    /// </param>
    /// <param name="_arrayIndex">
    /// An integer that contains the array index, applies only if the field has array elements.
    /// </param>
    /// <returns>
    /// true if the specified field contains a valid value; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);
        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(RetailChannelTable, RetailChannelId):
                    if (this.orig().RetailChannelId != this.RetailChannelId
                        && RetailChannelIdFormControlHelper::getRetailChannelIdNumberSequenceManualStatus() == NoYes::Yes
                        && !AifUtil::isAlphaNumeric(this.RetailChannelId))
                    {
                        ret = checkFailed(strFmt("@Retail:RetailChannelIdNotAlphaNumeric",
                            this.RetailChannelId, fieldPName(RetailChannelTable, RetailChannelId)));
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlineB2bChannelLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides the look up on online b2b channels.
    /// </summary>
    /// <param name="_formControl">The channel form control.</param>
    /// <param name="_custAccount">Customer account for which channel needs to be looked at.</param>
    /// <returns>The lookup.</returns>
    internal static Common onlineB2bChannelLookup(FormControl _formControl, str _custAccount)
    {
        SysReferenceTableLookup sysTableLookup = new SysReferenceTableLookup();
        Query query;
        query = new Query();

        QueryBuildDataSource qbds;
        List recIdList = new List(Types::String);
        MCRChannelUser mcrChannelUser;

        qbds = query.addDataSource(tableNum(RetailChannelTable));

        List channels = B2B2BDataHelper::getChannels(_custAccount);
        ListEnumerator enumerator = channels.getEnumerator();
        while (enumerator.moveNext())
        {
            RetailChannelTable channelRecord = enumerator.current();
            recIdList.addEnd(int642Str(channelRecord.RecId));
        }

        // Adding call center channel allows customer to edit the channel if they need to revert the channel selection
        select firstonly Channel from mcrChannelUser where mcrChannelUser.User == curUserId();
        
        if(mcrChannelUser.Channel)
        {
            recIdList.addEnd(int642Str(mcrChannelUser.Channel));
        }

        qbds.addRange(fieldNum(RetailChannelTable, RecId)).value(strList2str(recIdList));

        sysTableLookup = SysReferenceTableLookup::newParameters(tableNum(RetailChannelTable), _formControl);
        sysTableLookup.addLookupfield(fieldNum(RetailChannelTable, OMOperatingUnitID));
        sysTableLookup.parmQuery(query);
        return sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOperatingUnitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the operating unit has the correct type RetailChannel.
    /// </summary>
    /// <returns>true if the specified operating unit is in type RetailChannel; otherwise, false.</returns>
    protected boolean validateOperatingUnitValue()
    {
        if (this.OMOperatingUnitID)
        {
            if (OMOperatingUnit::find(this.OMOperatingUnitID, OMOperatingUnitType::RetailChannel))
            {
                return true;
            }
            else
            {
                warning("@Retail:RetailChannelToOperatingUnitReferenceWarning");
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET4040182</DeveloperDocumentation>
	<Label>@RET5708</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ChannelType</TitleField1>
	<TitleField2>OMOperatingUnitID</TitleField2>
	<Abstract>Yes</Abstract>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ChannelManagement</Modules>
	<ReplacementKey>OperatingUnitIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>OMOperatingUnit</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>OMOperatingUnit</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PriceIncludesSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OMOperatingUnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCustDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayTaxPerTaxComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OMOperatingUnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CashOffice_RU</Name>
			<Label>@SYS4007523</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CashOffice_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ChannelTimeZone</Name>
			<Label>@REX4160680</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChannelTimeZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelTimeZoneInfoId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS11779</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultCustAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EventNotificationProfile</Name>
			<Label>@RET4160023</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EventNotificationProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OperatingUnit</Name>
			<Label>@RET15054</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OMOperatingUnitID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Organization</Name>
			<Label>@SYS38151</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InstanceRelationType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OMOperatingUnitID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceIncludesSalesTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChannelType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocationDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCustDataAreaId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultCustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionServiceProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StoreArea</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryHierarchy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayTaxPerTaxComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashOffice_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RCashAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS4007523</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CategoryHierarchy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResCategoryHierarchyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChannelTimeZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ChannelTimeZone</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>Timezone</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChannelTimeZoneInfoId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTimeZoneInfoId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChannelType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailChannelType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultCustAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@RET4265</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultCustDataAreaId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EventNotificationProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailEventNotificationProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyInventLocationId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventLocationDataAreaId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS315616</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OMOperatingUnitID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS92116</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymMode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PriceIncludesSalesTax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@RET5093</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StoreArea</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreArea</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionServiceProfile</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailTransactionServiceProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DisplayTaxPerTaxComponent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DisplayTaxPerTaxComponent</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RetailChannelId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailChannelId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ManualAccept</Name>
			<Label>@Retail:ManualAccept</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailReturnPolicyChannel</Name>
			<ExtendedDataType>RetailReturnPolicyChannelRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalcExemptTaxesForPriceInclusive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailStoreTableCalcExemptTaxesForPriceInclusive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardTypeId</Name>
			<ExtendedDataType>RetailCardTypeId</ExtendedDataType>
			<Label>@Retail:RetailDefaultForUnmappedProcessorPaymentsLabel</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ChannelIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RetailChannelId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OperatingUnitIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OMOperatingUnitID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InstanceRelationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InstanceRelationType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventLocation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InventLocationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>inventLocationDataAreaId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>inventLocation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashOffice_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RCashTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationDataAreaId</Name>
					<Field>inventLocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashOffice_RU</Name>
					<Field>CashOffice_RU</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustPaymModeTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustPaymModeTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymMode</Name>
					<SourceEDT>CustPaymMode</SourceEDT>
					<Field>PaymMode</Field>
					<RelatedField>PaymMode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultCustDataAreaId</Name>
					<Field>DefaultCustDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultCustAccount</Name>
					<Field>DefaultCustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategoryHierarchy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResCategoryHierarchy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryHierarchy</Name>
					<Field>CategoryHierarchy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocation</Name>
					<Field>inventLocation</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationDataAreaId</Name>
					<Field>inventLocationDataAreaId</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataAreaInventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventLocationDataAreaId</Name>
					<Field>inventLocationDataAreaId</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OMOperatingUnitID</Name>
					<Field>OMOperatingUnitID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>CustPaymTermId</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailEventNotificationProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>RetailEventNotificationProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EventNotificationProfileId</Name>
					<SourceEDT>RetailEventNotificationProfileId</SourceEDT>
					<Field>EventNotificationProfileId</Field>
					<RelatedField>ProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailTransactionServiceProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>RetailTransactionServiceProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionServiceProfile</Name>
					<SourceEDT>RetailTransactionServiceProfileId</SourceEDT>
					<Field>TransactionServiceProfile</Field>
					<RelatedField>profileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>profileIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailReturnPolicyChannel</Name>
			<RelatedTable>RetailReturnPolicyChannel</RelatedTable>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailReturnPolicyChannel</Name>
					<Field>RetailReturnPolicyChannel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>RetailTenderTypeCard</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>RetailTenderTypeCardTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CardTypeId</Name>
					<Field>CardTypeId</Field>
					<RelatedField>cardTypeId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>