<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CityHoliday</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CityHoliday extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Deletes the record record in the <c>CityHoliday</c> table.
    /// </summary>
    public void delete()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the record record in the <c>CityHoliday</c> table.
    /// </summary>
    public void insert()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::stateHolidayChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDateCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified record in the <c>CityHoliday_BR</c> table.
    /// </summary>
    /// <param name="_date">
    /// The date of the <c>StateHoliday</c> Record to find.
    /// </param>
    /// <param name="_cityRecId">
    /// The city of the <c>PaymCalendarException</c> Record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when the record is read; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CityHoliday_BR</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CityHoliday findByDateCity(
        DueDate _date,
        RecId _cityRecId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CityHoliday cityHoliday;

        cityHoliday.selectForUpdate(_forUpdate);
        if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            cityHoliday.concurrencyModel(_concurrencyModel);
        }

        select firstonly
                cityHoliday
            where
                cityHoliday.HolidayDate == _date &&
                cityHoliday.City == _cityRecId;

        return cityHoliday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super();
        str dateValue;

        PaymCalendar                  paymCalendar;
        PaymCalendarCountryRegion     paymCalendarCountryRegion;
        LogisticsAddressCountryRegion logisticsAddressCountryRegion;

        LogisticsAddressCity logisticsAddressCity = LogisticsAddressCity::findRecId(this.City);

        // Check for same date in payment calendar
        select firstOnly RecId from paymCalendar
                    exists join paymCalendarCountryRegion
                        where paymCalendarCountryRegion.PaymCalendar == paymCalendar.RecId
                    exists join logisticsAddressCountryRegion
                        where logisticsAddressCountryRegion.RecId == paymCalendarCountryRegion.CountryRegion &&
                              logisticsAddressCountryRegion.CountryRegionId == logisticsAddressCity.CountryRegionId;

        if (paymCalendar.RecId)
        {
            PaymCalendarException paymCalendarException = PaymCalendarException::findByPaymCalendarDate(paymCalendar.RecId, this.HolidayDate);
            if (paymCalendarException.RecId)
            {
                dateValue = date2str(this.HolidayDate, -1, -1, -1, -1, -1, -1, -1); // -1 causes Regional Settings to be used
                ret = ret && checkFailed(strFmt("@CashManagement:GLS220199", dateValue));
            }
        }

        // Check for same date in state holidays
        LogisticsAddressState logisticsAddressState = LogisticsAddressState::find(logisticsAddressCity.CountryRegionId, logisticsAddressCity.StateId);

        if (logisticsAddressState)
        {
            StateHoliday stateHoliday = StateHoliday::findByDateState(this.HolidayDate, logisticsAddressState.RecId);
            if (stateHoliday.RecId)
            {
                dateValue = date2str(this.HolidayDate, -1, -1, -1, -1, -1, -1, -1); // -1 causes Regional Settings to be used
                ret = ret && checkFailed(strFmt("@CashManagement:GLS220201", dateValue));
            }
        }

        // Check for duplicated entry
        CityHoliday cityHoliday = CityHoliday::findByDateCity(this.HolidayDate, logisticsAddressCity.RecId);
        if (cityHoliday.RecId && cityHoliday.RecId != this.RecId)
        {
            dateValue = date2str(CityHoliday.HolidayDate, -1, -1, -1, -1, -1, -1, -1); // -1 causes Regional Settings to be used
            ret = ret && checkFailed(strFmt("@GLS222021", dateValue));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS221965</DeveloperDocumentation>
	<Label>@GLS221964</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>HolidayDate</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>APARShared</Modules>
	<ReplacementKey>DateCityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HolidayDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HolidayDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>City</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HolidayDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>City</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsAddressCityRecId</ExtendedDataType>
			<Label>@GLS221966</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>HolidayDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DateCityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>City</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>HolidayDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>City</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LogisticsAddressCity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>City</Name>
					<Field>City</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>