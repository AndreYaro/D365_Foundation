<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanFlow extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the value in the <c>LegalEntity</c> field is valid.
    /// </summary>
    /// <returns>
    /// true if the field value is valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean checkLegalEntity()
    {
        boolean         result       = true;
        PlanActivity    planActivity = this.lastPlanActivity();

        if (   !this.LegalEntity
            || this.LegalEntity != planActivity.LegalEntity)
        {
            result = checkFailed(strFmt("@SYS332718",planActivity.Name));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAndInit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the foreign keys of a <c>KanbanFlow</c> record.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearAndInit()
    {
        this.IsBridge              = false;
        this.FirstPlanPlanActivity = 0;
        this.LastPlanPlanActivity  = 0;
        this.LegalEntity           = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.validateDelete())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPlanActivityNameFirst</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>PlanActivityName</c> extended data type of the first <c>PlanActivity</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_firstPlanActivityName">
    ///    The <c>PlanActivity</c> table that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The <c>PlanActivityName</c> extended value of the first <c>PlanActivity</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit FirstPlanActivityName editPlanActivityNameFirst(
        boolean               _set,
        FirstPlanActivityName _firstPlanActivityName)
    {
        if (_set)
        {
            // only resetting the value is handled here as the real setting of the value
            // is handled by the activities lookup
            if (!_firstPlanActivityName)
            {
                this.FirstPlanPlanActivity = 0;
            }
        }
        else
        {
            _firstPlanActivityName = this.firstPlanActivity().Name;
        }

        return _firstPlanActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPlanActivityNameLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits the <c>PlanActivityName</c> extended data type of the last <c>PlanActivity</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates whether to set or retrieve.
    /// </param>
    /// <param name="_lastPlanActivityName">
    ///    The <c>PlanActivity</c> table that will be set or retrieved.
    /// </param>
    /// <returns>
    ///    The <c>PlanActivityName</c> extended value of the last <c>PlanActivity</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public edit LastPlanActivityName editPlanActivityNameLast(
        boolean              _set,
        LastPlanActivityName _lastPlanActivityName)
    {
        if (_set)
        {
            // only resetting the value is handled here as the real setting of the value
            // is handled by the activities lookup
            if (!_lastPlanActivityName)
            {
                this.LastPlanPlanActivity = 0;
            }
        }
        else
        {
            if (this.isSingleActivityFlow())
            {
                // the UI shouldn't show the last activity name in case of
                // single activity flow
                _lastPlanActivityName = '';
            }
            else
            {
                _lastPlanActivityName = this.lastPlanActivity().Name;
            }
        }

        return _lastPlanActivityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityPlanName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the <c>PlanReference</c> object to which the first <c>KanbanFlow</c> activity
    ///    belongs.
    /// </summary>
    /// <returns>
    ///    The name of the <c>PlanReference</c> object to which the first <c>KanbanFlow</c> activity belongs;
    ///    otherwise, an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display PlanName firstActivityPlanName()
    {
        return this.firstPlanReference().PlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstActivityVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the version number of the plan to which the first <c>KanbanFlow</c> activity belongs.
    /// </summary>
    /// <returns>
    ///    The version number of the plan to which the first <c>KanbanFlow</c> activity belongs; otherwise, 0.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display PlanVersionNum firstActivityVersion()
    {
        return this.firstPlan().VersionNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstLeanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first <c>LeanProductionFlowActivity</c> record that is referred to by the current record.
    /// </summary>
    /// <returns>
    ///    A <c>LeanProductionFlowActivity</c> record; otherwise an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowActivity firstLeanProductionFlowActivity()
    {
        return LeanProductionFlowActivity::findPlanActivity(PlanPlanActivity::find(this.FirstPlanPlanActivity).PlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Plan</c> record that is referred by the first flow <c>PlanActivity</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan firstPlan()
    {
        Plan plan;

        if (this.FirstPlanPlanActivity)
        {
            plan = PlanPlanActivity::find(this.FirstPlanPlanActivity).plan();
        }

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first <c>PlanActivity</c> record that is referred to by the current record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record; otherwise an empty buffer.
    /// </returns>
    public PlanActivity firstPlanActivity()
    {
        return PlanPlanActivity::find(this.FirstPlanPlanActivity).planActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPlanActivityName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first plan activity name that is related to the current record.
    /// </summary>
    /// <returns>
    ///    The plan activity name; otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityName firstPlanActivityName()
    {
        return PlanPlanActivity::find(this.FirstPlanPlanActivity).planActivity().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPlanActivityType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the first <c>PlanActivity</c> record of the specified type.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value that holds the plan activity type.
    /// </param>
    /// <returns>
    ///    The first <c>PlanActivity</c> record of the specified type; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity firstPlanActivityType(PlanActivityType _planActivityType)
    {
        KanbanFlowWrapper           kanbanFlowWrapper;
        PlanActivity                planActivity = null;

        kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(this);
        planActivity      = kanbanFlowWrapper.firstPlanActivity();

        while (planActivity)
        {
            if (planActivity.PlanActivityType ==_planActivityType)
            {
                break;
            }
            planActivity = kanbanFlowWrapper.nextPlanActivity();
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstPlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PlanReference</c> object to which the first <c>PlanPlanActivity</c> object of the
    ///    kanban flow belongs.
    /// </summary>
    /// <returns>
    ///    a <c>PlanReference</c> record; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReference firstPlanReference()
    {
        return PlanReference::findPlanPlanActivity(this.FirstPlanPlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveFlowVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the used flow versions are active.
    /// </summary>
    /// <param name="_silent">
    ///    The parameter that identifies whether any error messages are enabled.
    /// </param>
    /// <returns>
    ///    true if kanbans can be created; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasActiveFlowVersion(boolean _silent = true)
    {
        Plan firstPlan = this.firstPlan();
        Plan lastPlan  = this.lastPlan();

        boolean result = (firstPlan.RecId) != 0 && (lastPlan.RecId != 0);

        result = result
                    && firstPlan.Status == PlanStatus::Active
                    && lastPlan.Status == PlanStatus::Active;

        if (!_silent && !result)
        {
            error("@SYS139125");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFirstPlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from the specified <c>PlanPlanActivity</c> record.
    /// </summary>
    /// <param name="_firstPlanPlanActivityRecId">
    /// The record ID of a <c>PlanPlanActivity</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromFirstPlanPlanActivity(PlanPlanActivityRefRecId _firstPlanPlanActivityRecId)
    {
        this.FirstPlanPlanActivity = _firstPlanPlanActivityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLastPlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current record from the specified <c>PlanPlanActivity</c> record.
    /// </summary>
    /// <param name="_lastPlanPlanActivityRecId">
    /// The record ID of a <c>PlanPlanActivity</c> record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromLastPlanPlanActivity(PlanPlanActivityRefRecId _lastPlanPlanActivityRecId)
    {
        PlanPlanActivity    planPlanActivity;

        if (_lastPlanPlanActivityRecId)
        {
            planPlanActivity          = PlanPlanActivity::find(_lastPlanPlanActivityRecId);
            this.LastPlanPlanActivity = planPlanActivity.RecId;
            this.LegalEntity          = planPlanActivity.planActivity().LegalEntity;
        }
        else
        {
            this.LastPlanPlanActivity = 0;
            this.LegalEntity          = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastActivityInventoryControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the kanban flow ends with an inventory controlled activity.
    /// </summary>
    /// <returns>
    ///    true if the kanban flow ends with an inventory controlled activity; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isLastActivityInventoryControlled()
    {
        return this.lastPlanActivity().onHandUpdate(PlanActivityType::Receive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastLocationKanbanSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the WMS location of the last activity of the kanban flow is a kanban supermarket.
    /// </summary>
    /// <returns>
    ///    true if the WMS location of the last activity of the kanban flow is a kanban supermarket; otherwise
    ///    false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isLastLocationKanbanSupermarket()
    {
        return (this.lastPlanActivity().receiptLocation().inventoryControl() == LeanInventoryControl::Restricted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiActivityFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban flow is a multiple activity flow.
    /// </summary>
    /// <returns>
    ///    true if the flow consists of more than one activity; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isMultiActivityFlow()
    {
        return    this.FirstPlanPlanActivity != 0
               && this.FirstPlanPlanActivity != this.LastPlanPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleActivityFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban flow is a single activity flow.
    /// </summary>
    /// <returns>
    ///    true if the flow consists of only one activity; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isSingleActivityFlow()
    {
        return    this.FirstPlanPlanActivity != 0
               && this.FirstPlanPlanActivity == this.LastPlanPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityCycleTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the cycle time that is referred by the last <c>PlanActivity</c> record of the current
    ///    <c>KanbanFlow</c> record.
    /// </summary>
    /// <returns>
    ///    The cycle time in seconds.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display LeanCycleTimeInUnit lastActivityCycleTime()
    {
        PlanPlanActivity            planPlanActivity;
        PlanActivity                planActivity;
        LeanProductionFlowActivity  leanProductionFlowActivity;

        if (this.LastPlanPlanActivity)
        {
            select firstonly CycleTime from leanProductionFlowActivity
                exists join planActivity
                    where planActivity.RecId            == leanProductionFlowActivity.PlanActivity
                exists join planPlanActivity
                    where planPlanActivity.PlanActivity == planActivity.RecId
                          && planPlanActivity.RecId     == this.LastPlanPlanActivity;
        }

        return leanProductionFlowActivity.CycleTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityPlanName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the name of the <c>PlanReference</c> object to which the last kanban flow activity
    ///    belongs.
    /// </summary>
    /// <returns>
    ///    The name of the <c>PlanReference</c> object to which the last kanban flow activity belongs;
    ///    otherwise, empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display PlanName lastActivityPlanName()
    {
        return this.lastPlanReference().PlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityUpdatesInventory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the last activity of the kanban flow updates the inventory.
    /// </summary>
    /// <returns>
    ///    true if the last activity of the rule updates the inventory; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean lastActivityUpdatesInventory()
    {
        return this.lastPlanActivity().onHandUpdate(PlanActivityType::Receive);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastActivityVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the version number of the plan to which the last kanban flow activity belongs.
    /// </summary>
    /// <returns>
    ///    The version number of the plan to which the last kanban flow activity belongs; otherwise, 0.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display PlanVersionNum lastActivityVersion()
    {
        return this.lastPlan().VersionNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLeanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last <c>LeanProductionFlowActivity</c> record that is referred to by the current record.
    /// </summary>
    /// <returns>
    ///    A <c>LeanProductionFlowActivity</c> record; otherwise an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlowActivity lastLeanProductionFlowActivity()
    {
        return LeanProductionFlowActivity::findPlanActivity(PlanPlanActivity::find(this.LastPlanPlanActivity).PlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPlan</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>Plan</c> record that is referred by the last flow <c>PlanActivity</c> object.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan lastPlan()
    {
        Plan plan;

        if (this.LastPlanPlanActivity)
        {
            plan = PlanPlanActivity::find(this.LastPlanPlanActivity).plan();
        }

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last <c>PlanActivity</c> that is referred to by the current record.
    /// </summary>
    /// <returns>
    ///    A <c>PlanActivity</c> record; otherwise an empty buffer.
    /// </returns>
    public PlanActivity lastPlanActivity()
    {
        return PlanPlanActivity::find(this.LastPlanPlanActivity).planActivity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPlanActivityName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last plan activity name that is related to the current record.
    /// </summary>
    /// <returns>
    ///    The plan activity name; otherwise an empty string.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivityName lastPlanActivityName()
    {
        return PlanPlanActivity::find(this.LastPlanPlanActivity).planActivity().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPlanActivityType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last <c>PlanActivity</c> record of the specified type.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value that holds the plan activity type.
    /// </param>
    /// <returns>
    ///    The last <c>PlanActivity</c> record of the specified type; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity lastPlanActivityType(PlanActivityType _planActivityType)
    {
        KanbanFlowWrapper           kanbanFlowWrapper;
        PlanActivity                planActivityLoop;
        PlanActivity                planActivity;

        kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(this);
        planActivityLoop  = kanbanFlowWrapper.firstPlanActivity();

        while (planActivityLoop)
        {
            if (planActivityLoop.PlanActivityType == _planActivityType)
            {
                planActivity = planActivityLoop.data();
            }
            planActivityLoop = kanbanFlowWrapper.nextPlanActivity();
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastPlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>PlanReference</c> object to which the last <c>PlanPlanActivity</c> object of the
    ///    kanban flow belongs.
    /// </summary>
    /// <returns>
    ///    A <c>PlanReference</c> record; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanReference lastPlanReference()
    {
        return PlanReference::findPlanPlanActivity(this.LastPlanPlanActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProductionFlow</c> record related to the kanban flow.
    /// </summary>
    /// <returns>
    /// A <c>LeanProductionFlow</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlow leanProductionFlow()
    {
        Plan                    plan;
        PlanPlanActivity        planPlanActivity;
        LeanProductionFlow      leanProductionFlow;

        if (this.LastPlanPlanActivity)
        {
            select leanProductionFlow
                exists join plan
                    where plan.RecId             == leanProductionFlow.Plan
                exists join planPlanActivity
                    where planPlanActivity.Plan  == plan.RecId
                       && planPlanActivity.RecId == this.LastPlanPlanActivity;
        }

        return leanProductionFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsFinancialTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if financial transactions will be created for the
    /// jobs created by the rule.
    /// </summary>
    /// <returns>
    /// true if financial transactions will be created; otherwise false.
    /// </returns>
    /// <remarks>
    /// True is returned in the following cases:
    /// - the kanban type is withdrawal => it's single Withdraw activity flow AND
    /// - the flow needs inventory transactions AND
    ///     - the issue and receipt locations are managed by different vendors OR
    ///     - the issue and receipt locations belong to different sites OR
    ///     - the pick and receive atomic activities have different OnHandUpdate values
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display KanbanNeedsFinancialTransactions needsFinancialTransactions()
    {
        boolean         result       = false;
        PlanActivity    planActivity = this.firstPlanActivity();
        PlanActivity    pickActivity;
        PlanActivity    receiveActivity;
        InventLocation  issueInventLocation;
        InventLocation  receiptInventLocation;

        if (this.isSingleActivityFlow() &&
            this.needsInventoryTransactions())
        {
            issueInventLocation   = planActivity.issueLocation().inventLocation();
            receiptInventLocation = planActivity.receiptLocation().inventLocation();
            pickActivity          = planActivity.nextLevelPlanActivity(PlanActivityType::Pick);
            receiveActivity       = planActivity.nextLevelPlanActivity(PlanActivityType::Receive);

            result = (pickActivity.OnHandUpdate             != receiveActivity.OnHandUpdate
                        && (pickActivity.OnHandUpdate       == NoYes::Yes
                            || receiveActivity.OnHandUpdate == NoYes::Yes))
                      || issueInventLocation.VendAccount    != receiptInventLocation.VendAccount
                      || issueInventLocation.InventSiteId   != receiptInventLocation.InventSiteId ;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needsInventoryTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether inventory transactions will be created for the jobs created by the rule.
    /// </summary>
    /// <returns>
    ///    true if inventory transactions will be created; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method works only for single activity flows or for already fully pesisted <c>KanbanFlow</c>
    ///    records. For in-memory flows, use the respective method on the <c>KanbanFlowWrapper</c> object.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display boolean needsInventoryTransactions()
    {
        boolean                             result;
        KanbanFlowActivityRelationship      kanbanFlowActivityRelationship;
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;
        PlanActivityRelationship            planActivityRelationship;
        PlanActivityRelationship            aggregatedRelationship;
        PlanActivity                        independentPlanActivity;
        PlanActivity                        dependentPlanActivity;
        PlanActivity                        inventoryControlledActivity;
        PlanConstraint                      planConstraint;

        if (this.isSingleActivityFlow())
        {
            result =    this.firstPlanActivity().onHandUpdate(PlanActivityType::Pick) == NoYes::Yes
                     || this.firstPlanActivity().onHandUpdate(PlanActivityType::Receive) == NoYes::Yes;
        }
        else
        {
            // this method will only work for already persisted flows - for the in-memory ones
            // you should use the proper method on the KanbanFlowWrapper class
            if (!this.RecId)
            {
                result = false;
            }
            else
            {
                // get an atomic activity that belongs to the flow (aggregated by an activity that belongs to the flow)
                // and which is of type receive/pick and has OnHandUpdate set to true
                select TableId from kanbanFlowActivityRelationship
                        where kanbanFlowActivityRelationship.KanbanFlow      == this.RecId
                    join TableId from leanProdFlowPlanActivityRelation
                        where leanProdFlowPlanActivityRelation.RecId         == kanbanFlowActivityRelationship.LeanProdFlowActivityRelation
                    join TableId from planActivityRelationship
                        where planActivityRelationship.RecId                 == leanProdFlowPlanActivityRelation.PlanActivityRelationship
                    join OnHandUpdate from independentPlanActivity
                        where independentPlanActivity.RecId                  == planActivityRelationship.IndependentPlanActivity
                    join OnHandUpdate from dependentPlanActivity
                        where dependentPlanActivity.RecId                    == planActivityRelationship.DependentPlanActivity
                    join TableId from aggregatedRelationship
                        where aggregatedRelationship.IndependentPlanActivity == independentPlanActivity.RecId
                           || aggregatedRelationship.IndependentPlanActivity == dependentPlanActivity.RecId
                    join TableId from planConstraint
                        where planConstraint.RecId                           == aggregatedRelationship.Constraint
                           && planConstraint.ConstraintType                  == ConstraintTypes::Aggregation
                    join RecId from inventoryControlledActivity
                        where inventoryControlledActivity.RecId              == aggregatedRelationship.DependentPlanActivity
                           && inventoryControlledActivity.OnHandUpdate       == NoYes::Yes
                           && (inventoryControlledActivity.PlanActivityType  == PlanActivityType::Pick
                           ||  inventoryControlledActivity.PlanActivityType  == PlanActivityType::Receive);

                result = inventoryControlledActivity.RecId != 0;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>plan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>Plan</c> record related to the kanban flow.
    /// </summary>
    /// <returns>
    /// A <c>Plan</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Plan plan()
    {
        Plan                plan;
        PlanPlanActivity    planPlanActivity;

        if (this.LastPlanPlanActivity)
        {
            select plan
                exists join planPlanActivity
                    where planPlanActivity.Plan  == plan.RecId
                       && planPlanActivity.RecId == this.LastPlanPlanActivity;
        }

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the storage inventory dimensions of the last kanban flow activity.
    /// </summary>
    /// <returns>
    ///    An <c>InventDim</c> table buffer with the site, warehouse, and location dimensions set.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim receiptInventDim()
    {
        return this.lastPlanActivity().receiptLocation().inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventLocationId</c> value referred to by the <c>PlanActivityLocation</c> value of
    /// the receive activity that belongs to the last <c>PlanActivity</c> object of this kanban flow.
    /// </summary>
    /// <returns>
    /// An <c>InventLocationId</c> value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display InventLocationId receiptInventLocationId()
    {
        return this.lastPlanActivity().receiptLocation().InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptWMSLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>WMSLocationId</c> value referred to by the <c>PlanActivityLocation</c> value of
    /// the receive activity that belongs to the last <c>PlanActivity</c> object of this kanban flow.
    /// </summary>
    /// <returns>
    /// An <c>InventLocationId</c> value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display WMSLocationId receiptWMSLocationId()
    {
        return this.lastPlanActivity().receiptLocation().wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        KanbanRule  kanbanRule;
        boolean     ret;

        ret = super();

        if (ret)
        {
            select firstonly RecId from kanbanRule
                where kanbanRule.KanbanFlow == this.RecId;

            ret = ret && kanbanRule.RecId == 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean result;

        result =    super()
                 && this.checkLegalEntity();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the date time at which the production flow and the kanban flow expires.
    /// </summary>
    /// <returns>
    ///    A <c>DateTime</c> value that holds the expiration time.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanValidToDateTime validTo()
    {
        Plan                    firstPlan, lastPlan;

        PlanValidToDateTime correctDateTime(utcdatetime _dateTime)
        {
            return _dateTime ? _dateTime : DateTimeUtil::maxValue();
        }

        firstPlan = this.firstPlan();
        lastPlan  = this.lastPlan();

        return min(correctDateTime(firstPlan.ValidTo), correctDateTime(lastPlan.ValidTo));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteActivityRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a <c>LeanProdFlowPlanActivityRelation</c> record can be deleted.
    /// </summary>
    /// <param name="_leanProdFlowPlanActivityRelation">
    ///    The record to delete.
    /// </param>
    /// <returns>
    ///    true if the specified record can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Only records that are not referred by any kanban flow can be deleted.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canDeleteActivityRelationship(LeanProdFlowPlanActivityRelation _leanProdFlowPlanActivityRelation)
    {
        KanbanFlowActivityRelationship kanbanFlowActivityRelationship;

        select firstonly RecId from kanbanFlowActivityRelationship
            where kanbanFlowActivityRelationship.LeanProdFlowActivityRelation == _leanProdFlowPlanActivityRelation.RecId;

        return !kanbanFlowActivityRelationship.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteLeanProductionFlowActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>LeanProductionFlowActivity</c> record can be deleted.
    /// </summary>
    /// <param name="_leanProductionFlowActivity">
    ///    The record to delete.
    /// </param>
    /// <returns>
    ///    true if the record can be deleted; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Only records that are not referred by a <c>KanbanFlow</c> can be deleted.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean canDeleteLeanProductionFlowActivity(LeanProductionFlowActivity _leanProductionFlowActivity)
    {
        KanbanFlowActivityRelationship      kanbanFlowActivityRelationship;
        PlanActivity                        planActivity;
        PlanActivityRelationship            planActivityRelationship;
        LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;

        select firstonly RecId from kanbanFlowActivityRelationship
            exists join leanProdFlowPlanActivityRelation
                where leanProdFlowPlanActivityRelation.RecId            == kanbanFlowActivityRelationship.LeanProdFlowActivityRelation
            exists join planActivityRelationship
                where planActivityRelationship.RecId                    == leanProdFlowPlanActivityRelation.PlanActivityRelationship
                   && (planActivityRelationship.IndependentPlanActivity == _leanProductionFlowActivity.PlanActivity
                   ||  planActivityRelationship.DependentPlanActivity   == _leanProductionFlowActivity.PlanActivity)
            exists join planActivity
                where (planActivity.RecId                               == planActivityRelationship.IndependentPlanActivity
                   || planActivity.RecId                                == planActivityRelationship.DependentPlanActivity)
                   && planActivity.RecId                                != _leanProductionFlowActivity.PlanActivity
                   && (planActivity.PlanActivityType                    == PlanActivityType::Process
                   ||  planActivity.PlanActivityType                    == PlanActivityType::Transfer);

        return !kanbanFlowActivityRelationship.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromKanbanFlowWrapper</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>KanbanFlow</c> in the database.
    /// </summary>
    /// <param name="_kanbanFlowWrapper">
    ///    The object that contains the <c>KanbanFlow</c> data to persist.
    /// </param>
    /// <returns>
    ///    The newly created <c>KanbanFlow</c> record; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlow createFromKanbanFlowWrapper(KanbanFlowWrapper _kanbanFlowWrapper)
    {
        KanbanFlow                      kanbanFlow;
        KanbanFlowActivityRelationship  kanbanFlowActivityRelationship;
        LeanActivityRelationshipWrapper leanActivityRelationshipWrapper;
        ListEnumerator                  relationsListEnumerator;
        int                             numberOfLinksCreated = 0;

        // check input parameters
        if (!_kanbanFlowWrapper ||
            _kanbanFlowWrapper.parmKanbanFlow().RecId != 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // get references to some of the internal storage
        kanbanFlow = _kanbanFlowWrapper.parmKanbanFlow();

        // now check the header data in the collection
        if (kanbanFlow.RecId                                != 0
            || kanbanFlow.FirstPlanPlanActivity             == 0
            || kanbanFlow.LastPlanPlanActivity              == 0
            || ( (!kanbanFlow.isSingleActivityFlow()
                    && _kanbanFlowWrapper.relationsCount()  == 0)
                 ||(kanbanFlow.isSingleActivityFlow()
                    && _kanbanFlowWrapper.relationsCount()  != 0) )
           )
        {
            // Invalid data in KanbanFlowsCollection
            throw error("@SYS134775");
        }

        ttsbegin;

        // insert the KanbanFlow record
        kanbanFlow.insert();
        kanbanFlow.reread();

        // the kanbanflow relations should be created only for non-single activity flows
        if (!kanbanFlow.isSingleActivityFlow())
        {
            // get an enumerator for the links
            relationsListEnumerator = _kanbanFlowWrapper.relationsList().getEnumerator();

            // create all corresponding kanban flow relations
            while (relationsListEnumerator.moveNext())
            {
                leanActivityRelationshipWrapper = relationsListEnumerator.current();
                numberOfLinksCreated++;

                kanbanFlowActivityRelationship.clear();

                kanbanFlowActivityRelationship.KanbanFlow                   = kanbanFlow.RecId;
                kanbanFlowActivityRelationship.LeanProdFlowActivityRelation = leanActivityRelationshipWrapper.parmLeanProdFlowPlanActRelationRecId();
                kanbanFlowActivityRelationship.Sequence                     = numberOfLinksCreated;

                kanbanFlowActivityRelationship.insert();
            }
        }

        ttscommit;

        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>KanbanFlow</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>KanbanFlow</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from kanbanFlow
                    where kanbanFlow.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>KanbanFlow</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>KanbanFlow</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>KanbanFlow</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlow find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        KanbanFlow kanbanFlow;

        if (_recId)
        {
            kanbanFlow.selectForUpdate(_forUpdate);

            select firstonly kanbanFlow
                where kanbanFlow.RecId == _recId;
        }

        return kanbanFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllFlows</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds all the existing flows between the first and last specified activity.
    /// </summary>
    /// <param name="_firstPlanPlanActivity">
    ///    The record ID of the first <c>PlanPlanActivity</c> record.
    /// </param>
    /// <param name="_lastPlanPlanActivity">
    ///    The record ID of the last <c>PlanPlanActivity</c> record.
    /// </param>
    /// <returns>
    ///    A <c>KanbanFlowsCollection</c> object that contains all the flows that have been found between the
    ///    first and last specified activities.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanFlowsCollection findAllFlows(
        RefRecId _firstPlanPlanActivity,
        RefRecId _lastPlanPlanActivity)
    {
        KanbanFlow kanbanFlow;
        KanbanFlowsCollection kanbanFlowsCollection = KanbanFlowsCollection::construct();

        // check input parameters
        if (!_firstPlanPlanActivity || !_lastPlanPlanActivity)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // iterate over all existing kanban flows that link the given source and destination
        while select kanbanFlow
            where kanbanFlow.FirstPlanPlanActivity  == _firstPlanPlanActivity
               && kanbanFlow.LastPlanPlanActivity   == _lastPlanPlanActivity
        {
            kanbanFlowsCollection.addKanbanFlowWrapper(KanbanFlowWrapper::newKanbanFlow(kanbanFlow, LeanKanbanType::Manufacturing, false, true));
        }

        return kanbanFlowsCollection;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS318734</DeveloperDocumentation>
	<FormRef>KanbanRules</FormRef>
	<Label>@SYS132016</Label>
	<SingularLabel>@SYS131967</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>FirstPlanPlanActivity</TitleField1>
	<TitleField2>LastPlanPlanActivity</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>KanbanFlowActivityRelationship</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>KanbanFlowActivityRelationship</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastPlanPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FirstPlanPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsBridge</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bridge</Name>
			<Label>@SYS152637</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsBridge</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsBridge</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Flow</Name>
			<Label>@SYS132808</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LastPlanPlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FirstPlanPlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LegalEntity</Name>
			<Label>@SYS331864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LegalEntity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FirstPlanPlanActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanPlanActivityRefRecId</ExtendedDataType>
			<Label>@SYS152896</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsBridge</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS132021</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LastPlanPlanActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanPlanActivityRefRecId</ExtendedDataType>
			<Label>@SYS152897</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LegalEntity</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FlowIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LastPlanPlanActivity</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FirstPlanPlanActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FirstPlanPlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanPlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FirstPlanPlanActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanFlow</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FirstPlanPlanActivity</Name>
					<Field>FirstPlanPlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LastPlanPlanActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PlanPlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LastPlanPlanActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanFlow</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LastPlanPlanActivity</Name>
					<Field>LastPlanPlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>LegalEntity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>KanbanFlow</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LegalEntity</Name>
					<Field>LegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>