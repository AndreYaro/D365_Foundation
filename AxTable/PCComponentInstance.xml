<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentInstance</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentInstance extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the values in this configuration instance with the ones on the supplied configuration instance.
    /// </summary>
    /// <param name="_componentInstance">
    /// The configuration instance of the component used for comparison.
    /// </param>
    /// <returns>
    /// true if all values of this component and the subcomponents are equal; otherwise, false.
    /// </returns>
    public boolean compareTo(PCComponentInstance _componentInstance)
    {
        PCComponentInstanceValue        thisComponentInstanceValue;
        EcoResAttributeValue            thisAttributeValue;
        EcoResValue                     thisValue;
        PCComponentInstanceSubComponent thisComponentInstanceSubComponent;
        PCComponentInstance             thisSubComponentInstance;

        PCComponentInstanceValue        refComponentInstanceValue;
        EcoResAttributeValue            refAttributeValue;
        EcoResValue                     refValue;
        PCComponentInstanceSubComponent refComponentInstanceSubComponent;
        PCComponentInstance             refSubComponentInstance;

        //it is assumed they are picked from parent so they represent the same component
        thisComponentInstanceValue = PCComponentInstanceValue::findByComponentInstance(this.RecId);
        refComponentInstanceValue  = PCComponentInstanceValue::findByComponentInstance(_componentInstance.RecId);

        //compare attributes
        while   select  RecId, Attribute from thisAttributeValue
        where   thisAttributeValue.InstanceValue == thisComponentInstanceValue.RecId
        join    thisValue
        where   thisValue.RecId == thisAttributeValue.Value
        {
            select  firstonly RecId from refAttributeValue
            where   refAttributeValue.InstanceValue == refComponentInstanceValue.RecId
            &&      refAttributeValue.Attribute  ==  thisAttributeValue.Attribute
            join    refValue
            where   refValue.RecId == refAttributeValue.Value;

            if (thisValue.pcGetStringValue() != refValue.pcGetStringValue())
            {
                return false;
            }
        }

        //compare subcomponents
        while   select RecId, SubComponent from thisComponentInstanceSubComponent
        where   thisComponentInstanceSubComponent.ParentComponentInstance == this.RecId
        join    thisSubComponentInstance
        where   thisSubComponentInstance.ProductConfiguration == this.ProductConfiguration
        &&      thisComponentInstanceSubComponent.ChildComponentInstance == thisSubComponentInstance.RecId
        {
            select  firstonly RecId from refComponentInstanceSubComponent
            where   refComponentInstanceSubComponent.ParentComponentInstance == _componentInstance.RecId
            &&      refComponentInstanceSubComponent.SubComponent == thisComponentInstanceSubComponent.SubComponent
            join    refSubComponentInstance
            where   refSubComponentInstance.ProductConfiguration == _componentInstance.ProductConfiguration
            &&      refComponentInstanceSubComponent.ChildComponentInstance == refSubComponentInstance.RecId;

            if (!thisSubComponentInstance.compareTo(refSubComponentInstance))
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Duplicates the associated records to another duplicate instance.
    /// </summary>
    /// <param name="_duplicateInstance">
    ///    A reference to a duplicated component instance.
    /// </param>
    /// <param name="_duplicatedComponent">
    ///    A reference to a duplicated component.
    /// </param>
    public void duplicateDetails(PCComponentInstance _duplicateInstance, PCClass _duplicatedComponent)
    {
        PCComponentInstanceSubComponent     subComponentInstance;
        PCComponentInstanceSubComponent     duplicateSubComponentInstance;
        PCComponentInstance                 childComponentInstance;
        PCComponentInstance                 dupChildComponentInstance;
        PCSubComponent                      subComponent;
        PCSubComponent                      dupSubComponent;
        PCClass                             childComponent;
        PCClass                             dupChildComponent;

        PCComponentInstanceValue            instanceValue;
        PCComponentInstanceValue            dupInstanceValue;

        EcoResAttributeValue                attributeValue;
        EcoResAttributeValue                dupAttributeValue;

        EcoResAttribute                     attribute;
        EcoResCategoryAttribute             categoryAttribute;

        EcoResAttribute                     dupAttribute;

        EcoResValue                         value;

        //duplicate InstanceValues
        instanceValue = PCComponentInstanceValue::findByComponentInstance(this.RecId);

        if (instanceValue)
        {
            dupInstanceValue.clear();
            dupInstanceValue.data(instanceValue);
            dupInstanceValue.ComponentInstance = _duplicateInstance.RecId;
            dupInstanceValue.insert();

            //duplicate attribute values
            while   select attributeValue
                where   attributeValue.InstanceValue == instanceValue.RecId
            join    value
                where   value.RecId == attributeValue.Value
            join    RecId from categoryAttribute
                where   categoryAttribute.Attribute == attributeValue.Attribute
            join    Name,RecId from attribute
                where   attribute.RecId == categoryAttribute.Attribute
            {
                //find the duplicated attributes
                dupAttribute                    = EcoResAttribute::find(EcoResCategoryAttribute::findByNameAndCategory(attribute.Name, _duplicatedComponent.RecId).Attribute);
                dupAttributeValue.Attribute     = dupAttribute.RecId;
                dupAttributeValue.InstanceValue = dupInstanceValue.RecId;
                dupAttributeValue.Value         = value.pcDuplicate();
                dupAttributeValue.insert();
            }
        }

        //duplicate sub-component instances
        while select childComponentInstance
            where   childComponentInstance.ProductConfiguration == this.ProductConfiguration
        join    firstonly subComponentInstance
            where   subComponentInstance.ChildComponentInstance  == childComponentInstance.RecId
            &&      subComponentInstance.ParentComponentInstance == this.RecId
        join    firstonly RecId, Name, ChildComponentClass from subComponent
            where   subComponentInstance.SubComponent   == subComponent.RecId
        {
            //get the child component
            childComponent = PCClass::find(subComponent.ChildComponentClass);

            //get the duplicated sub-Component and duplicated child component
            select firstonly RecId from dupSubComponent
                where   dupSubComponent.ParentComponentClass ==  _duplicatedComponent.RecId
                &&      dupSubComponent.Name == subComponent.Name
            join   firstonly dupChildComponent
                where   dupSubComponent.ChildComponentClass == dupChildComponent.RecId;

            dupChildComponentInstance.data(childComponentInstance);
            dupChildComponentInstance.ProductConfiguration = _duplicateInstance.ProductConfiguration;
            dupChildComponentInstance.insert();

            duplicateSubComponentInstance.data(subComponentInstance);
            duplicateSubComponentInstance.ParentComponentInstance = _duplicateInstance.RecId;
            duplicateSubComponentInstance.ChildComponentInstance = dupChildComponentInstance.RecId;
            duplicateSubComponentInstance.SubComponent = dupSubComponent.RecId;
            duplicateSubComponentInstance.insert();

            //duplicate the subcomponents, attribute values locally
            childComponentInstance.duplicateDetails(dupChildComponentInstance, dupChildComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record occurs in the <c>PCComponentInstance</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentInstance::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentInstance</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentInstance</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentInstance find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentInstance record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153059</DeveloperDocumentation>
	<Label>@SYS153058</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProductConfiguration</TitleField1>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCComponentInstanceValue</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCComponentInstanceValue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductConfiguration</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProductConfiguration</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153064</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductConfigurationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProductConfiguration</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProductConfiguration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PCProductConfiguration</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ConfigurationInstance</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ComponentInstanceOf</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProductConfiguration</Name>
					<Field>ProductConfiguration</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>