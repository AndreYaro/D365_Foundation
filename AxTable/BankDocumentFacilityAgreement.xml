<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentFacilityAgreement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankDocumentFacilityAgreement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAgreementDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the agreement could be set for the period.
    /// </summary>
    /// <returns>
    ///    true if the period is valid; otherwise, false.
    /// </returns>
    private boolean checkAgreementDates()
    {
        boolean ret = true;

        if (ret)
        {
            ret = BankDocumentFacilityAgreement::checkBankAccountActived(
                    this.BankAccountTable,
                    this.ValidFrom,
                    this.ValidTo);
        }

        if (ret
            && this.RecId
            && this.ValidFrom != DateTimeUtil::minValue()
            && this.ValidTo   != DateTimeUtil::minValue())
        {
            if (BankLCImport::hasOrphanTransactionInPeriod(
                    this.RecId,
                    this.ValidFrom,
                    this.ValidTo))
            {
                // Bank document agreement period could not be changed, because there are transactions in original period.
                ret = checkFailed("@SYS313659");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the currency code of the bank facility agreement.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    display CurrencyCode displayCurrencyCode()
    {
        return this.getBankAccountTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>BankAccountTable</c> record of this facility agreement.
    /// </summary>
    /// <returns>
    ///    The related <c>BankAccountTable</c> record.
    /// </returns>
    public BankAccountTable getBankAccountTable()
    {
        return BankAccountTable::find(this.BankAccountTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldstr(BankDocumentFacilityAgreement, BankAccountTable) :
                case fieldstr(BankDocumentFacilityAgreement, ValidFrom) :
                case fieldstr(BankDocumentFacilityAgreement, ValidTo) :
                    ret = this.checkAgreementDates();
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.checkAgreementDates();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountActived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the bank account is still active during the time period.
    /// </summary>
    /// <param name="_bankAccount">
    ///    The bank account ID.
    /// </param>
    /// <param name="_validFromDateTime">
    ///    The starting date of the period.
    /// </param>
    /// <param name="_validToDateTime">
    ///    The ending date of the period.
    /// </param>
    /// <returns>
    ///    true if the bank account is still active; otherwise, false.
    /// </returns>
    private static boolean checkBankAccountActived(
        CompanyBankAccountId _bankAccount,
        ValidFromDateTime    _validFromDateTime,
        ValidToDateTime      _validToDateTime)
    {
        boolean ret = true;

        if (_bankAccount)
        {
            if (_validFromDateTime)
            {
                ret = BankAccountTable::checkIsActive(
                        _bankAccount,
                        DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(
                                 _validFromDateTime,
                                 DateTimeUtil::getUserPreferredTimeZone())));
            }

            if (ret && _validToDateTime)
            {
                ret = BankAccountTable::checkIsActive(
                        _bankAccount,
                        DateTimeUtil::date(
                            DateTimeUtil::applyTimeZoneOffset(
                                 _validToDateTime,
                                 DateTimeUtil::getUserPreferredTimeZone())));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkImpactedAgreementsByBankInActived</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there is no related bank document facility agreement that is affected by the bank
    ///    account status changing.
    /// </summary>
    /// <param name="_bankAccountId">
    ///    The bank account ID.
    /// </param>
    /// <param name="_bankStatus">
    ///    The new bank status.
    /// </param>
    /// <param name="_validFromDateTime">
    ///    The new valid from date of the bank account.
    /// </param>
    /// <param name="_validToDateTime">
    ///    The new valid to date of the bank account.
    /// </param>
    /// <returns>
    ///    true if there is impactation from bank document facility agreements; otherwise, false.
    /// </returns>
    public static boolean checkImpactedAgreementsByBankInActived(
        CompanyBankAccountId  _bankAccountId,
        BankAccountHoldStatus _bankStatus,
        ValidFromDateTime     _validFromDateTime = DateTimeUtil::minValue(),
        ValidToDateTime       _validToDateTime   = DateTimeUtil::minValue())
    {
        boolean     isRequireCheck = true;
        boolean     ret            = true;

        UTCDateTime minValue;
        UTCDateTime maxValue;

        minValue = DateTimeUtil::minValue();
        maxValue = DateTimeUtil::maxValue();

        switch (_bankStatus)
        {
            case BankAccountHoldStatus::InactiveForAllTransactions:
            // All bank transactions are not allowed, check if any agreement.
                break;
            case BankAccountHoldStatus::InactiveForNewTransactions:
            // New bank transactions are not allowed, check if any live agreement from today.
                minValue = DateTimeUtil::getSystemDateTime();
                break;
            case BankAccountHoldStatus::ActiveForAllTransactions:
                if (_validFromDateTime  != DateTimeUtil::minValue()
                    && _validToDateTime == DateTimeUtil::minValue())
                {
                    // Bank Account is active from _validFromDateTime to forever.
                    // Check if any agreement is still live from today to _validFromDateTime.
                    minValue = DateTimeUtil::getSystemDateTime();
                    maxValue = _validFromDateTime;

                    // by pass the check, if the bank is active before today.
                    if (maxValue <= minValue)
                    {
                        isRequireCheck = false;
                        ret            = false;
                    }
                }
                else if (_validFromDateTime == DateTimeUtil::minValue()
                    && _validToDateTime     != DateTimeUtil::minValue())
                {
                    // Bank account is active until _validToDateTime.
                    // Check if live agreement after _validToDateTime.
                    minValue = _validToDateTime;
                }
                else if (_validFromDateTime != DateTimeUtil::minValue()
                    || _validToDateTime     != DateTimeUtil::minValue())
                {
                    // Bank account is only allowed from _validFromDateTime to _validToDateTime.

                    // Check if agreement from today to _validFromDateTime.
                    minValue = DateTimeUtil::getSystemDateTime();
                    maxValue = _validFromDateTime;

                    // by pass the check for startDate part, if the bank is active before today.
                    if (maxValue >= minValue)
                    {
                        ret = BankDocumentFacilityAgreement::existByDateRange(_bankAccountId, minValue, maxValue);

                        if (ret)
                        {
                            isRequireCheck = false;
                        }
                    }

                    if (isRequireCheck)
                    {
                        // Check if live agreement after _validToDateTime.
                        minValue = _validToDateTime;
                        maxValue = DateTimeUtil::maxValue();
                    }
                }
                else
                {
                    // always active.
                    isRequireCheck  = false;
                    ret             = false;
                }
                break;
        }

        if (isRequireCheck)
        {
            ret = BankDocumentFacilityAgreement::existByDateRange(_bankAccountId, minValue, maxValue);
        }

        if (ret)
        {
            if (_bankStatus == BankAccountHoldStatus::InactiveForAllTransactions)
            {
                // The Bank account could not be inactived for all transactions, since there are related Bank document facility agreements.
                checkFailed("@SYS313657");
            }
            else
            {
                // Active bank facility agreement exists for this bank account. Please close the bank facility agreement first.
                checkFailed("@SYS313656");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByAgreementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>BankDocumentFacilityAgreement</c> table exists
    ///    based on the given agreement number.
    /// </summary>
    /// <param name="_agreementNumber">
    ///    The agreement number of the <c>BankDocumentFacilityAgreement</c> record.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByAgreementNumber(
        BankDocumentAgreementNumber _agreementNumber)
    {
        BankDocumentFacilityAgreement bankDocumentFacilityAgreement;

        UTCDateTime minValue;
        UTCDateTime maxValue;

        if (_agreementNumber)
        {
            minValue = DateTimeUtil::minValue();
            maxValue = DateTimeUtil::maxValue();

            select firstonly validtimestate(minValue, maxValue)
                RecId from bankDocumentFacilityAgreement
                    where bankDocumentFacilityAgreement.AgreementNumber == _agreementNumber;

            if (bankDocumentFacilityAgreement
                && bankDocumentFacilityAgreement.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record in the <c>BankDocumentFacilityAgreement</c> table exists
    ///    based on the specified bank account and date period.
    /// </summary>
    /// <param name="_bankAccountId">
    ///    The account ID.
    /// </param>
    /// <param name="_validFromDateTime">
    ///    The starting date of the period.
    /// </param>
    /// <param name="_validToDateTime">
    ///    The ending date of the period.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByDateRange(
        CompanyBankAccountId _bankAccountId,
        UTCDateTime          _validFromDateTime = DateTimeUtil::minValue(),
        UTCDateTime          _validToDateTime   = DateTimeUtil::maxValue())
    {
        BankDocumentFacilityAgreement bankDocumentFacilityAgreement;

        select firstonly validtimestate(_validFromDateTime, _validToDateTime)
            RecId from bankDocumentFacilityAgreement
                where bankDocumentFacilityAgreement.BankAccountTable == _bankAccountId;

        return bankDocumentFacilityAgreement && bankDocumentFacilityAgreement.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankDocumentFacilityAgreement</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of <c>BankDocumentFacilityAgreement</c> .
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankDocumentFacilityAgreement</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentFacilityAgreement find(
        RecId   _recId,
        boolean _forUpdate = false)
    {
        BankDocumentFacilityAgreement bankDocumentFacilityAgreement;
        UTCDateTime minValue;
        UTCDateTime maxValue;

        if (_recId)
        {
            bankDocumentFacilityAgreement.selectForUpdate(_forUpdate);

            minValue = DateTimeUtil::minValue();
            maxValue = DateTimeUtil::maxValue();

            select firstonly validtimestate(minValue, maxValue) bankDocumentFacilityAgreement
                where bankDocumentFacilityAgreement.RecId == _recId;
        }

        return bankDocumentFacilityAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankDocumentFacilityAgreement</c> table by AgreementNumber.
    /// </summary>
    /// <param name="_agreementNumber">
    ///    The Agreement number of <c>BankDocumentFacilityAgreement</c> .
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankDocumentFacilityAgreement</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentFacilityAgreement findByAgreementNumber(
        BankDocumentAgreementNumber _agreementNumber,
        boolean _forUpdate = false)
    {
        BankDocumentFacilityAgreement bankDocumentFacilityAgreement;
        UTCDateTime minValue;
        UTCDateTime maxValue;

        if (_agreementNumber)
        {
            bankDocumentFacilityAgreement.selectForUpdate(_forUpdate);

            minValue = DateTimeUtil::minValue();
            maxValue = DateTimeUtil::maxValue();

            select firstonly validtimestate(minValue, maxValue) bankDocumentFacilityAgreement
                where bankDocumentFacilityAgreement.AgreementNumber == _agreementNumber;
        }

        return bankDocumentFacilityAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAvailableAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>BankDocumentFacilityAgreement</c> table by using the specified
    ///    bank account and transaction date.
    /// </summary>
    /// <param name="_bankAccountId">
    ///    The bank account of the <c>BankDocumentFacilityAgreement</c> record.
    /// </param>
    /// <param name="_transactionDateTime">
    ///    The transaction date within the period of the <c>BankDocumentFacilityAgreement</c> record.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>BankDocumentFacilityAgreement</c> table; otherwise, an empty record.
    /// </returns>
    public static BankDocumentFacilityAgreement findAvailableAgreement(
        CompanyBankAccountId _bankAccountId,
        UTCDateTime          _transactionDateTime,
        boolean              _forupdate = false)
    {
        BankDocumentFacilityAgreement bankDocumentFacilityAgreement;

        if (_bankAccountId && _transactionDateTime)
        {
            bankDocumentFacilityAgreement.selectForUpdate(_forUpdate);

            select firstonly validtimestate(_transactionDateTime) bankDocumentFacilityAgreement
                where bankDocumentFacilityAgreement.BankAccountTable == _bankAccountId;
        }

        return bankDocumentFacilityAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankCurrencyCodeConflicted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the new currency code of the <c>BankAccountTable</c> record is conflicted with
    ///    existing bank documents.
    /// </summary>
    /// <param name="_bankAccountId">
    ///    The bank account ID.
    /// </param>
    /// <param name="_currencyCode">
    ///    The new currency code.
    /// </param>
    /// <returns>
    ///    true if the currency code is conflicted; otherwise, false.
    /// </returns>
    public static boolean isBankCurrencyCodeConflicted(
        CompanyBankAccountId _bankAccountId,
        CurrencyCode         _currencyCode)
    {
        BankDocumentFacilityAgreement       bankDocumentFacilityAgreement;
        BankDocumentFacilityAgreementLine   bankDocumentFacilityAgreementLine;
        BankLCImport                        bankLCImport;
        PurchTable                          purchTable;
        UTCDateTime                         minValue;
        UTCDateTime                         maxValue;

        minValue = DateTimeUtil::minValue();
        maxValue = DateTimeUtil::maxValue();

        select firstonly validtimestate(minValue, maxValue) RecId
            from bankDocumentFacilityAgreement
                where bankDocumentFacilityAgreement.BankAccountTable == _bankAccountId
            exists join bankDocumentFacilityAgreement from bankDocumentFacilityAgreementLine
                where bankDOcumentFacilityAgreementLine.BankDocumentFacilityAgreement == bankDocumentFacilityAgreement.RecId
            exists join BankDocumentFacilityAgreementLine from bankLCImport
                where bankLCImport.BankDocumentFacilityAgreementLine == bankDocumentFacilityAgreementLine.RecId
                    && bankLCImport.ImportStatus                     != BankLCImportStatusType::Closed
            exists join CurrencyCode from purchTable
                where purchTable.PurchId       == bankLCImport.PurchTable
                    && purchTable.CurrencyCode != _currencyCode;

        return bankDocumentFacilityAgreement && bankDocumentFacilityAgreement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the Go to Main Table Form option to the context menu.
    /// </summary>
    /// <param name="_bankDocumentFacilityAgreement">
    ///    An instance of the <c>BankDocumentFacilityAgreement</c> table.
    /// </param>
    public static void jumpRef(BankDocumentFacilityAgreement _bankDocumentFacilityAgreement)
    {
        Args args = new Args();
        args.lookupField(fieldnum(BankDocumentFacilityAgreement, RecId));
        args.lookupValue(int642str(_bankDocumentFacilityAgreement.RecId));

        new MenuFunction(menuitemDisplayStr(BankDocumentFacilityAgreement), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS313664</DeveloperDocumentation>
	<FormRef>BankDocumentFacilityAgreement</FormRef>
	<Label>@SYS313692</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>AgreementNumber</TitleField1>
	<TitleField2>BankAccountTable</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>AgreementIdx</ReplacementKey>
	<ValidTimeStateFieldType>UtcDateTime</ValidTimeStateFieldType>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BankDocumentFacilityAgreementLine</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BankDocumentFacilityAgreementLine</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccountTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AgreementNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AgreementNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgreementNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankDocumentAgreementNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccountTable</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidFrom</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDateTime</ExtendedDataType>
			<Label>@SYS2168</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDateTime</ExtendedDataType>
			<Label>@SYS35211</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AgreementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AgreementNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankAccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>BankAccountTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankAccountTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankAccountTable_BankDocumentFacilityAgreement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankAccountTable</Name>
					<SourceEDT>CompanyBankAccountId</SourceEDT>
					<Field>BankAccountTable</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>