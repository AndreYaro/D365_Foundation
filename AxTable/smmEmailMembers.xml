<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEmailMembers</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class smmEmailMembers extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getIdentification</Name>
				<Source><![CDATA[
    display smmEMailIdentification getIdentification()
    {
        if (this.ParentId)
        {
            return this.showName()  + ',  ' + this.showEMail();
        }
        else
        {
            return this.showEmailGroup() + ', ' + this.CategoryId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.eMailToCopyOrBlindCopy = smmParametersTable::find().EmailMemberCopyType;

        if (this.eMailToCopyOrBlindCopy == smmEMailToCopyOrBlindCopy::None)
        {
            this.eMailToCopyOrBlindCopy = smmEMailToCopyOrBlindCopy::To;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.setMemberId();

        if (!this.CategoryId)
        {
            this.ParentId = smmEmailMembers::findParent(this.GroupId).MemberId;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMemberId</Name>
				<Source><![CDATA[
    public void setMemberId()
    {
        this.MemberId = smmParameters::getNumber(smmNumbSeqUsed::EmailMemberId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEMail</Name>
				<Source><![CDATA[
    display Email showEMail()
    {
        #define.blank('')

        LogisticsElectronicAddress electronicAddress;

        DictTable               dictTableContact;
        DictTable               dictTableEmployee;

        if (this.ContactPersonId)
        {
            dictTableContact = new DictTable(tableNum(ContactPerson));
            if (dictTableContact.rights() >= AccessType::View)
            {
                return ContactPerson::find(this.ContactPersonId).email();
            }
        }

        if (this.Worker)
        {
            dictTableEmployee = new DictTable(tableNum(HcmWorker));
            if (dictTableEmployee.rights() >= AccessType::View)
            {
                return HcmWorker::find(this.Worker).email();
            }
        }
        if (this.Party)
        {
            electronicAddress = DirParty::primaryElectronicAddress(this.Party, LogisticsElectronicAddressMethodType::Email);
            if (electronicAddress)
            {
                return electronicAddress.Locator;
            }
        }

        return #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEmailCategory</Name>
				<Source><![CDATA[
    display smmEmailCategoryId showEmailCategory()
    {
        return smmEmailGroups::find(this.GroupId).CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEmailGroup</Name>
				<Source><![CDATA[
    display smmEMailGroupId showEmailGroup()
    {
        return this.GroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showName</Name>
				<Source><![CDATA[
    display Name showName()
    {
        #define.blank('')

        if (this.ContactPersonId)
        {
            return ContactPerson::find(this.ContactPersonId).personName();
        }

        if (this.Worker)
        {
            return HcmWorker::find(this.Worker).name();
        }

        if (this.Party)
        {
            return DirPartyTable::findRec(this.Party).Name;
        }

        return #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        smmEmailMembers emailMember;

        ttsbegin;

        super();

        emailMember = smmEmailMembers::findGroupAndMember(this.GroupId, this.ParentId, true);

        if (!emailMember && this.GroupId && this.ParentId)
        {
            emailMember.GroupId   = this.GroupId;
            emailMember.MemberId  = this.ParentId;
            emailMember.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if Worker of <c>smmEmailMembers</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    /// Worker of the record in the <c>smmEmailMembers</c> table.
    /// </param>
    /// <returns>
    /// True if Worker belongs to current Legal Entity otherwise false.
    /// </returns>
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean         ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(smmEmailMembers, Worker) :
                if (this.Worker)
                {
                    ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.Worker);
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a worker of the <c>smmEmailMembers</c> table belongs to the current Legal Entity.
    /// </summary>
    /// <param name="validateWorkerOnly">
    /// A Boolean value that indicates whether only the worker has to be validated.
    /// </param>
    /// <returns>
    /// true if the worker belongs to current Legal Entity; otherwise, false.
    /// </returns>
    public boolean validateWrite(boolean validateWorkerOnly = false)
    {
        boolean ret = true;

        if (!validateWorkerOnly)
        {
            ret = super();
        }

        if (this.Worker)
        {
            ret = ret && smmUtility::isValidWorkerInCurrentCompany(this.Worker);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInserted</Name>
				<Source><![CDATA[
    public static boolean canBeInserted(str _value, smmEMailGroupId _emailGroupId, tableId _tableId)
    {
        smmEmailMembers     emailMembers;
        ContactPersonId     contactPersonId;
        CrmWorkerRecId      worker;

        switch (_tableId)
        {
            case tableNum(smmSalesUnitMembers) :
            case tableNum(HcmWorker)           :
                worker = HcmWorker::findByPersonnelNumber(_value).RecId;
                select count(RecId) from emailMembers where emailMembers.Worker == worker && emailMembers.GroupId == _emailGroupId;
                break;

            case tableNum(ContactPerson) :
                contactPersonId = _value;
                select count(RecId) from emailMembers where emailMembers.ContactPersonId == contactPersonId && emailMembers.GroupId == _emailGroupId;
                break;

            default :
                return false;
        }

        return emailMembers.RecId == 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static smmEmailMembers find(smmEmailMemberId _memberId, boolean _forupdate = false)
    {
        smmEmailMembers emailMembers = null;

        if (_memberId)
        {
            emailMembers.selectForUpdate(_forupdate);

            select firstonly emailMembers where emailMembers.MemberId == _memberId;
        }

        return emailMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContact</Name>
				<Source><![CDATA[
    public static smmEmailMembers findContact(smmEMailGroupId   _groupId,
                                              ContactPersonId   _contactPersonId,
                                              boolean           _forupdate = false)
    {
        smmEmailMembers emailMembers = null;

        if (_groupId)
        {
            emailMembers.selectForUpdate(_forupdate);

            select firstonly emailMembers
                where emailMembers.GroupId          == _groupId &&
                      emailMembers.ContactPersonId  == _contactPersonId;
        }

        return emailMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirContact</Name>
				<Source><![CDATA[
    public static smmEmailMembers findDirContact(smmEMailGroupId       _groupId,
                                                    DirPartyRecId       _party,
                                                    ContactPersonId     _contactPersonId,
                                                    boolean             _forupdate = false)
    {
        smmEmailMembers emailMembers = null;

        if (_groupId)
        {
            emailMembers.selectForUpdate(_forupdate);

            select firstonly emailMembers
                where emailMembers.GroupId          == _groupId &&
                      emailMembers.Party            == _party &&
                      emailMembers.ContactPersonId  == _contactPersonId;
        }

        return emailMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupAndMember</Name>
				<Source><![CDATA[
    public static smmEmailMembers findGroupAndMember(smmEMailGroupId   _smmEMailGroupId,
                                                     smmEmailMemberId  _smmMemberId,
                                                     boolean           _forupdate = false)
    {
        smmEmailMembers smmEmailMember = null;

        if (_smmEMailGroupId || _smmMemberId)
        {
            smmEmailMember.selectForUpdate(_forupdate);

            select firstonly smmEmailMember
                where smmEmailMember.GroupId    == _smmEMailGroupId &&
                      smmEmailMember.MemberId   == _smmMemberId ;
        }

        return smmEmailMember;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParent</Name>
				<Source><![CDATA[
    public static smmEmailMembers findParent(smmEMailGroupId  _groupId, boolean _forupdate = false)
    {
        #define.blank('')

        smmEmailMembers emailMembers = null;

        if (_groupId)
        {
            emailMembers.selectForUpdate(_forupdate);

            select firstonly emailMembers
                where emailMembers.GroupId      == _groupId &&
                      emailMembers.CategoryId   != #blank;
        }

        return emailMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    public static smmEmailMembers findRecId(recId _recId, boolean _forupdate = false)
    {
        smmEmailMembers smmEmailMembers = null;

        if (_recId)
        {
            smmEmailMembers.selectForUpdate(_forupdate);

            select firstonly smmEmailMembers where smmEmailMembers.RecId == _recId;
        }

        return smmEmailMembers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferEmailRecipients</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the specified recipient as an email member.
    /// </summary>
    /// <param name = "_recipient">The recipient to be added.</param>
    /// <param name = "_emailGroupId">The email group ID.</param>
    /// <returns>true if at least one email member has been added; otherwise, false.</returns>
    public static boolean transferEmailRecipients(Common _recipient, smmEmailGroupId _emailGroupId)
    {
        smmEmailMembers emailMembers = null;
        boolean         memberAdded = false;

        emailMembers.clear();
        emailMembers.GroupId                = _emailGroupId;
        emailMembers.ParentId               = _emailGroupId;
        emailMembers.eMailToCopyOrBlindCopy = smmParametersTable::find().EmailMemberCopyType;

        if (emailMembers.eMailToCopyOrBlindCopy == smmEMailToCopyOrBlindCopy::None)
        {
            emailMembers.eMailToCopyOrBlindCopy = smmEMailToCopyOrBlindCopy::To;
        }

        switch (_recipient.TableId)
        {
            case tableNum(HcmWorker) :
                emailMembers.Worker = _recipient.(fieldNum(HcmWorker, RecId));
                if (smmEmailMembers::canBeInserted(HcmWorker::find(emailMembers.Worker).PersonnelNumber, _emailGroupId, tableNum(HcmWorker)))
                {
                    emailMembers.insert();
                    memberAdded = true;
                }
                break;

            case tableNum(ContactPerson) :
                emailMembers.ContactPersonId = _recipient.(fieldNum(ContactPerson, ContactPersonId));
                if (smmEmailMembers::canBeInserted(emailMembers.ContactPersonId, _emailGroupId, tableNum(ContactPerson)))
                {
                    emailMembers.insert();
                    memberAdded = true;
                }
                break;

            case tableNum(smmSalesUnitMembers) :
                memberAdded = smmEmailMembers::addSalesUnitEmailMember(_recipient as smmSalesUnitMembers, emailMembers, _emailGroupId);
                break;

            default :
                return false;
        }

        return memberAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesUnitEmailMember</Name>
				<Source><![CDATA[
    private static boolean addSalesUnitEmailMember(
        smmSalesUnitMembers _smmSalesUnitMembers,
        smmEmailMembers     _emailMembers,
        smmEmailGroupId     _emailGroupId)
    {
        boolean memberAdded = false;

        if (_smmSalesUnitMembers.SalesPersonWorker) // If it is a leaf node
        {
            _emailMembers.Worker = _smmSalesUnitMembers.SalesPersonWorker;
            if (smmEmailMembers::canBeInserted(HcmWorker::find(_emailMembers.Worker).PersonnelNumber, _emailGroupId, tableNum(smmSalesUnitMembers)))
            {
                _emailMembers.insert();
                memberAdded = true;
            }
        }
        else // Add child nodes
        {
            smmSalesUnitMembers salesUnitMembers;

            while select SalesPersonWorker, MemberId from salesUnitMembers
                where salesUnitMembers.ParentId == _smmSalesUnitMembers.MemberId
            {
                memberAdded = smmEmailMembers::addSalesUnitEmailMember(salesUnitMembers, _emailMembers, _emailGroupId) || memberAdded;
            }
        }

        return memberAdded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return super() || SalesEnforceConcurrentDeletesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>SmmCRM</ConfigurationKey>
	<DeveloperDocumentation>@SYS124788</DeveloperDocumentation>
	<Label>@SYS80515</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>GroupId</TitleField1>
	<TitleField2>CategoryId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>MemberIdx</ClusteredIndex>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>MemberIdx</PrimaryIndex>
	<ReplacementKey>MemberIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>getIdentification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MemberId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Details</Name>
			<Label>@SYS8811</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EMailToCopyOrBlindCopy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EmailGroups</Name>
			<Label>@SYS80516</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ParentId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Members</Name>
			<Label>@SYS8818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MemberId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>KeyId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmEmailCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EMailToCopyOrBlindCopy</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>smmEMailToCopyOrBlindCopy</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmEMailGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>KeyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmKeyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MemberId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmEmailMemberId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>smmEmailParentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CrmWorkerRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>GroupMemberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>GroupId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MemberId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MemberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MemberId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ContactPerson</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmEmailMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContactPersonId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IsPartyOf</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IsEmailMemberFor</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmEmailCategoryGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmEmailCategoryGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmEmailCategoryGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>smmEmailMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>smmEmailCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmEmailGroups</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>smmEmailGroups</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>smmEmailGroups</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>smmEmailMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>GroupId</Name>
					<SourceEDT>smmEMailGroupId</SourceEDT>
					<Field>GroupId</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Worker</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_smmEmailMembers</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>