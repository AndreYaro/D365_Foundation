<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankLCImport extends BankLC
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeBankDocumentFacilityAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the <c>BankDocumentFacilityAgreementLine</c> record that is related to this letter of
    /// credit when the bank account or facility type has been changed.
    /// </summary>
    /// <param name="_companyBankAccountId">
    /// The changed bank account.
    /// </param>
    /// <param name="_bankDocumentFacilityTypeName">
    /// The changed facility type name.
    /// </param>
    /// <returns>
    /// The record ID of the changed <c>BankDocumentFacilityAgreementLine</c> record.
    /// </returns>
    public BankDocumentAgreementLineRefRecId changeBankDocumentFacilityAgreementLine(
        CompanyBankAccountId            _companyBankAccountId,
        BankDocumentFacilityTypeName    _bankDocumentFacilityTypeName)
    {
        CompanyBankAccountId            companyBankAccountId;
        BankDocumentFacilityTypeName    bankDocumentFacilityTypeName;

        companyBankAccountId         = this.getBankAccount();
        bankDocumentFacilityTypeName = this.getBankDocumentFacilityTypeName();

        if (_companyBankAccountId)
        {
            companyBankAccountId = _companyBankAccountId;
        }

        if (_bankDocumentFacilityTypeName)
        {
            bankDocumentFacilityTypeName = _bankDocumentFacilityTypeName;
        }

        this.BankDocumentFacilityAgreementLine = this.pickBankDocumentAgreementLineRefRecId(companyBankAccountId, bankDocumentFacilityTypeName);

        return this.BankDocumentFacilityAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayAgreementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the bank document facility agreement number of the letter of credit.
    /// </summary>
    /// <returns>
    /// The bank document facility agreement number.
    /// </returns>
    display BankDocumentAgreementNumber displayAgreementNumber()
    {
        return this.getAgreementNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the Currency Code of the Letter of Credit.
    /// </summary>
    /// <returns>
    /// The Currency Code.
    /// </returns>
    display CurrencyCode displayCurrencyCode()
    {
        return this.getCurrencyCode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFacilityBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the balance of the bank document facility agreement that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The balance amount.
    /// </returns>
    display BankDocumentFacilityAgreementAmountCur displayFacilityBalance()
    {
        if (this.BankDocumentFacilityAgreementLine)
        {
            return this.getBankDocumentFacilityAgreementLine().getBalanceAmount();
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayLCVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the vender account of the Letter of Credit.
    /// </summary>
    /// <returns>
    /// The Vender account value.
    /// </returns>
    display VendAccount displayLCVendAccount()
    {
        return this.getVendAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document facility agreement number that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The bank document facility agreement number.
    /// </returns>
    public BankDocumentAgreementNumber getAgreementNumber()
    {
        if (this.BankDocumentFacilityAgreementLine)
        {
            return this.getBankDocumentFacilityAgreement().AgreementNumber;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The bank account of the letter of credit.
    /// </returns>
    public CompanyBankAccountId getBankAccount()
    {
        if (this.BankDocumentFacilityAgreementLine)
        {
            return this.getBankDocumentFacilityAgreement().BankAccountTable;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityAgreement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankDocumentFacilityAgreement</c> record that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The <c>BankDocumentFacilityAgreement</c> record.
    /// </returns>
    public BankDocumentFacilityAgreement getBankDocumentFacilityAgreement()
    {
        BankDocumentFacilityAgreement bankDocumentFacilityAgreement;

        if (this.BankDocumentFacilityAgreementLine)
        {
            bankDocumentFacilityAgreement = this.getBankDocumentFacilityAgreementLine().getBankDocumentFacilityAgreement();
        }

        return bankDocumentFacilityAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityAgreementLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>BankDocumentFacilityAgreementLine</c> record that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The <c>BankDocumentFacilityAgreementLine</c> record.
    /// </returns>
    public BankDocumentFacilityAgreementLine getBankDocumentFacilityAgreementLine()
    {
        return BankDocumentFacilityAgreementLine::find(this.BankDocumentFacilityAgreementLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the facility type name that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The facility type name.
    /// </returns>
    public BankDocumentFacilityTypeName getBankDocumentFacilityTypeName()
    {
        if (this.BankDocumentFacilityAgreementLine)
        {
            return this.getBankDocumentFacilityAgreementLine().getBankDocumentFacilityType().FacilityTypeName;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentFacilityTypeRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the <c>BankDocumentFacilityType</c> record that is related to this letter of
    /// credit.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>BankDocumentFacilityType</c> record.
    /// </returns>
    public BankDocumentFacilityTypeRefRecId getBankDocumentFacilityTypeRefRecId()
    {
        return this.getBankDocumentFacilityAgreementLine().BankDocumentFacilityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document type that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The bank document type
    /// </returns>
    public BankDocumentType getBankDocumentType()
    {
        return this.getPurchTable().BankDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the letter of credit.
    /// </summary>
    /// <returns>
    /// The total amount of the letter of credit.
    /// </returns>
    public BankLCAmountCur getBankLCAmount()
    {
        if (this.isCreated())
        {
            return this.getTotalOrderAmount() + this.ToleranceAmountCur;
        }
        else
        {
            return this.AmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Currency Code of this Letter of Credit.
    /// </summary>
    /// <returns>
    /// The Currency Code.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        if (this.isCreated())
        {
            return this.getPurchCurrencyCode();
        }
        else
        {
            return this.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code from the purchase order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    public CurrencyCode getPurchCurrencyCode()
    {
        return this.getPurchTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the purchase order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The purchase order record.
    /// </returns>
    public PurchTable getPurchTable()
    {
        return PurchTable::find(this.PurchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor account from the purchase order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The vendor account from the purchase order that is related to the letter of credit.
    /// </returns>
    public VendAccount getPurchVendAccount()
    {
        return this.getPurchVendTable().AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vender table record from purchase order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The vender table from the purchase order that is related to the letter of credit.
    /// </returns>
    public VendTable getPurchVendTable()
    {
        PurchTable  purchTableLocal;
        VendTable   vendTableLocal;

        purchTableLocal = this.getPurchTable();

        if (purchTableLocal
            && purchTableLocal.RecId != 0)
        {
            vendTableLocal = purchTableLocal.vendTable_OrderAccount();
        }

        return vendTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOpenShipmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total shipment amount of the shipment lines with a shipment status of created or open.
    /// </summary>
    /// <returns>
    /// The total shipment amount.
    /// </returns>
    public BankLCShipmentAmountCur getTotalOpenShipmentAmount()
    {
        BankLCImportLine bankLCImportLineLocal;

        select sum(ShipmentAmountCur) from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC == this.RecId
                && (bankLCImportLineLocal.ImportShipmentStatus    == BankLCImportShipmentStatusType::Open
                    || bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Created);

        return bankLCImportLineLocal.ShipmentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOrderAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount from the purchase order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The total amount from the purchase order that is related to the letter of credit.
    /// </returns>
    public BankLCAmountCur getTotalOrderAmount()
    {
        AmountCur  amountCur = 0;

        if (this.PurchTable)
        {
            amountCur = BankLCImport::amountProformaTotalInclTax(this.PurchTable);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSettledShipmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total settled amount of this letter of credit.
    /// </summary>
    /// <returns>
    /// The total settled amount of the letter of credit.
    /// </returns>
    public BankLCShipmentAmountCur getTotalSettledShipmentAmount()
    {
        BankLCImportLine bankLCImportLine;

        select sum(ShipmentAmountCur)
            from bankLCImportLine
                where bankLCImportLine.BankLC                == this.RecId
                    && bankLCImportLine.ImportShipmentStatus == BankLCImportShipmentStatusType::Paid;

        return bankLCImportLine.ShipmentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the vendor account that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The vendor account.
    /// </returns>
    public VendAccount getVendAccount()
    {
        if (this.isCreated())
        {
            return this.getPurchVendAccount();
        }
        else
        {
            return this.VendTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransInvolved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if any <c>BankLCImportLine</c> records of this letter of credit have been involved in a
    /// packing slip, invoice, or payment.
    /// </summary>
    /// <returns>
    /// true if there is a <c>BankLCImportLine</c> record that is involved in a packing slip, invoice, or
    /// payment; otherwise, false.
    /// </returns>
    public boolean hasTransInvolved()
    {
        BankLCImportLine bankLCImportLineLocal;

        select firstonly RecId from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC == this.RecId
                && (bankLCImportLineLocal.ImportShipmentStatus    == BankLCImportShipmentStatusType::InvoiceUpdated
                    || bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::Paid
                    || bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::PackingSlipUpdated);

        return bankLCImportLineLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasUnSettledTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if any <c>BankLCImportLine</c> record of this letter of credit has not been settled.
    /// </summary>
    /// <returns>
    /// true if there is unsettled <c>BankLCImportLine</c> record; otherwise, false.
    /// </returns>
    public boolean hasUnSettledTransactions()
    {
        BankLCImportLine bankLCImportLineLocal;

        select firstonly RecId from bankLCImportLineLocal
            where bankLCImportLineLocal.BankLC == this.RecId
                && (bankLCImportLineLocal.ImportShipmentStatus    == BankLCImportShipmentStatusType::PackingSlipUpdated
                    || bankLCImportLineLocal.ImportShipmentStatus == BankLCImportShipmentStatusType::InvoiceUpdated);

        return bankLCImportLineLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>BankLCImport</c> record from the specified <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchTable">
    /// The <c>PurchTable</c> record.
    /// </param>
    public void initFromPurchTable(PurchTable _purchTable)
    {
        VendTable vendTable;

        this.PurchTable          = _purchTable.PurchId;
        this.ApplicationDateTime = DateTimeUtil::getSystemDateTime();

        vendTable = this.getPurchVendTable();

        this.VendTable          = vendTable.AccountNum;
        this.ImportBeneficiary  = vendTable.name();
        this.ImportAdvisingBank = vendTable.BankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ImportStatus = BankLCImportStatusType::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit is closed.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is closed; otherwise, false.
    /// </returns>
    public boolean isClosed()
    {
        return this.ImportStatus ==  BankLCImportStatusType::Closed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit is confirmed.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is confirmed; otherwise, false.
    /// </returns>
    public boolean isConfirmed()
    {
        return this.ImportStatus ==  BankLCImportStatusType::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the letter of credit has a status of created.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is created; otherwise, false.
    /// </returns>
    public boolean isCreated()
    {
        return this.ImportStatus ==  BankLCImportStatusType::Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeleteAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit can be deleted.
    /// </summary>
    /// <returns>
    /// true if it can be deleted; otherwise, false.
    /// </returns>
    public boolean isDeleteAllowed()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = !(BankLCImportMargin::existPostedMargin(this.RecId)
                    // <GSA>
                    || (BankLCImportChargeFeatureChecker_SA::construct(false).checkFeatureEnabled(false)
                        && BankLCImportCharge_SA::existPostedCharge(this.RecId))
                    // </GSA>
                    );
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarginTransactionAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether adding new margin transactions to the letter of credit is allowed.
    /// </summary>
    /// <returns>
    /// true if adding new margin transactions to the letter of credit is allowed; otherwise, false.
    /// </returns>
    public boolean isMarginTransactionAllowed()
    {
        return this.isConfirmed()
            && BankLCImportLine::existUnInvoicedBankLCImportLines(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMarkupTransactionAllowed_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether adding new charge transactions to the letter of credit is allowed.
    /// </summary>
    /// <returns>
    /// true if adding new charge transactions to the letter of credit is allowed; otherwise, false.
    /// </returns>
    public boolean isMarkupTransactionAllowed_SA()
    {
        // <GSA>
        return BankLCImportChargeFeatureChecker_SA::construct(false).checkFeatureEnabled(false)
            && this.isConfirmed()
            && BankLCImportLine::existNonPackingSlipBankLCImportLines(this.RecId) > 0;
        // </GSA>
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettlementAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the letter of credit is allowed to do the settlement.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is allowed to do the settlement; otherwise, false.
    /// </returns>
    public boolean isSettlementAllowed()
    {
        boolean ret = this.isConfirmed() && !BankLCImportMargin::hasUnAllocatedMargin(this.RecId);

        // <GSA>
        if (ret
            && BankLCImportChargeFeatureChecker_SA::construct(false).checkFeatureEnabled(false))
        {
            ret = !BankLCImportHelper_SA::hasUnAllocatedCharge(this.RecId);
        }
        // </GSA>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        switch (_fieldName)
        {
            case fieldStr(BankLCImport, ApplicationDateTime):
                this.changeBankDocumentFacilityAgreementLine('', '');
            break;
        }

        super(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pickBankDocumentAgreementLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first appropriate <c>BankDocumentAgreementLine</c> record based on the specified bank
    /// account and facility type name.
    /// </summary>
    /// <param name="_companyBankAccountId">
    /// The bank account ID.
    /// </param>
    /// <param name="_bankDocumentFacilityTypeName">
    /// The facility type name.
    /// </param>
    /// <returns>
    /// The record ID of the first appropriate <c>BankDocumentAgreementLine</c> record.
    /// </returns>
    private BankDocumentAgreementLineRefRecId pickBankDocumentAgreementLineRefRecId(
        CompanyBankAccountId         _companyBankAccountId,
        BankDocumentFacilityTypeName _bankDocumentFacilityTypeName)
    {
        Query                               query;
        QueryBuildDataSource                queryBuildDataSource;
        QueryBuildRange                     queryBuildRange;
        QueryRun                            queryRun;
        BankDocumentFacilityView            bankDocumentFacilityViewLocal;
        BankDocumentAgreementLineRefRecId   agreementLineRecId;

        query = new Query();

        queryBuildDataSource = SysQuery::findOrCreateDataSource(query, tableNum(BankDocumentFacilityView));
        queryBuildDataSource.firstOnly(true);

        queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(BankDocumentFacilityView, ValidFrom));
        queryBuildRange.value(SysQuery::range(DateTimeUtil::minValue(), this.ApplicationDateTime));
        queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(BankDocumentFacilityView, ValidTo));
        queryBuildRange.value(SysQuery::range(this.ApplicationDateTime, DateTimeUtil::maxValue()));

        queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(BankDocumentFacilityView, CurrencyCode));
        queryBuildRange.value(queryValue(this.getPurchCurrencyCode()));
        queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(BankDocumentFacilityView, BankDocumentType));
        queryBuildRange.value(queryValue(this.getBankDocumentType()));

        if (_companyBankAccountId)
        {
            queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(BankDocumentFacilityView, BankAccountTable));
            queryBuildRange.value(queryValue(_companyBankAccountId));
        }

        if (_bankDocumentFacilityTypeName)
        {
            queryBuildRange      = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(BankDocumentFacilityView, FacilityTypeName));
            queryBuildRange.value(queryValue(_bankDocumentFacilityTypeName));
        }

        queryRun = new QueryRun(query);

        if (queryRun.next())
        {
            bankDocumentFacilityViewLocal = queryRun.get(tableNum(BankDocumentFacilityView));
            agreementLineRecId = bankDocumentFacilityViewLocal.BankDocumentFacilityAgreementLine;
        }

        if (agreementLineRecId == 0)
        {
            // Required bank document facility agreement is not found.
            checkFailed("@SYS313720");
        }

        return agreementLineRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger coverage for the <c>PurchTable</c> table.
    /// </summary>
    /// <param name="_ledgerCoverage">
    /// The <c>LedgerCoverage</c> instance to store the coverage records.
    /// </param>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        BankLCImportLine    bankLCImportLine;
        TransDate           deliveryDate;
        PurchTable          purchTable;
        BankDocumentPosting bankDocumentPosting;

        if (_ledgerCoverage)
        {
            purchTable = this.getPurchTable();
            bankDocumentPosting = BankDocumentPosting::findByFacilityType(this.getBankDocumentFacilityTypeRefRecId());

            while select ActualMaturityDateTime, ShipmentAmountCur
                from bankLCImportLine
                    where bankLCImportLine.BankLC == this.RecId
                        && bankLCImportLine.ImportShipmentStatus < BankLCImportShipmentStatusType::InvoiceUpdated
            {
                deliveryDate = DateTimeUtil::date(
                                    DateTimeUtil::applyTimeZoneOffset(
                                        bankLCImportLine.ActualMaturityDateTime,
                                        DateTimeUtil::getUserPreferredTimeZone()));
                _ledgerCoverage.updateSum(
                    deliveryDate,
                    LedgerPostingType::VendBalance,
                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(bankDocumentPosting.SettleLedgerDimension),
                    purchTable.DefaultDimension,
                    purchTable.CurrencyCode,
                    - bankLCImportLine.ShipmentAmountCur,
                    0,
                    0,
                    naStr(),
                    naStr(),
                    naStr(),
                    deliveryDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(BankLCImport, ImportAdvisingBank) :
                    if (this.getBankDocumentType() == BankDocumentType::LetterOfCredit
                        && !this.ImportAdvisingBank)
                    {
                        // Advising bank
                        ret = checkFailed(strFmt("@SYS84378", "@SYS316129"));
                    }

                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                           ret;
        BankDocumentAgreementLineRefRecId agreementLineRefRecId;

        ret = super();

        if (ret)
        {
            if (this.BankDocumentFacilityAgreementLine == 0)
            {
                // Required bank document facility agreement is not found.
                ret = checkFailed("@SYS313720");
            }
        }

        if (ret)
        {
            agreementLineRefRecId = this.orig().BankDocumentFacilityAgreementLine;
            if (agreementLineRefRecId    != 0
                && agreementLineRefRecId != this.BankDocumentFacilityAgreementLine)
            {
                if (this.hasTransInvolved()
                    || BankLCImportMargin::hasTransactions(this.RecId)
                    // <GSA>
                    || (BankLCImportChargeFeatureChecker_SA::construct(false).checkFeatureEnabled(false)
                        && BankLCImportHelper_SA::hasChargeTransactions(this.RecId))
                    // </GSA>
                    )
                {
                    // Letter of Credit has posted transactions. Facility agreement could not be changed.
                    ret = checkFailed("@SYS316278");
                }
            }
        }

        if (ret
            && VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendBankAccount::validateIsDraft(this.getVendAccount(), this.ImportAdvisingBank))
        {
            ret = checkFailed(strFmt("@AccountsPayable:VendBankAccountValidateIsDraftError", this.ImportAdvisingBank));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountProformaTotalInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total proforma invoice amount of the purchase order.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID of purchase order.
    /// </param>
    /// <returns>
    /// The calculated proforma invoice amount.
    /// </returns>
    public static AmountCur amountProformaTotalInclTax(PurchId _purchId)
    {
        BankLCImportPurchTotals     purchTotals;
        PurchTable                  purchTable;
        AmountCur                   ret = 0.0;

        purchTable = PurchTable::find(_purchId);
        if (purchTable.RecId != 0)
        {
            purchTotals = BankLCImportPurchTotals::construct(purchTable, BankLCSalesPurchQtyCategoryType::UnInvoiced);
            purchTotals.calc();
            ret = purchTotals.purchTotalAmount() + purchTable.amountInvoiced() - BankLCImport::prepaymentAmount(purchTable.PurchId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaymentAmount</Name>
				<Source><![CDATA[
    private static AmountCur prepaymentAmount(PurchId _purchId)
    {
        PurchPrepayTable purchPrepayTable = PurchPrepayTable::findPurchId(_purchId);

        return purchPrepayTable.PrepayLimit - purchPrepayTable.PrepayAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existByPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>BankLCImport</c> table exists based on the
    /// specified <c>PurchId</c> value of a <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchId">
    /// A <c>PurchId</c> value of a <c>PurchTable</c> record..
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existByPurchTable(PurchId _purchId)
    {
        BankLCImport bankLCImport;

        if (_purchId)
        {
            select firstonly RecId from bankLCImport
                where bankLCImport.PurchTable == _purchId;

            if (bankLCImport && bankLCImport.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified <c>BankLCImport</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankLCImport</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>BankLCImport</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImport find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        BankLCImport bankLCImport;

        if (_recId)
        {
            bankLCImport.selectForUpdate(_forUpdate);

            select firstonly bankLCImport
                where bankLCImport.RecId == _recId;
        }

        return bankLCImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BankLCImport</c> record specified the <c>PurchId</c> value of a <c>PurchTable</c>
    /// record.
    /// </summary>
    /// <param name="_purchId">
    /// The <c>PurchId</c> of the <c>PurchTable</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The specified record in the <c>BankLCImport</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCImport findByPurchTable(
        PurchId _purchId,
        boolean _forUpdate = false)
    {
        BankLCImport bankLCImport;

        if (_purchId)
        {
            bankLCImport.selectForUpdate(_forUpdate);

            select firstonly bankLCImport
                where bankLCImport.PurchTable == _purchId;
        }

        return bankLCImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalNumberOfBankDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of bank documents for the specified vender account.
    /// </summary>
    /// <param name="_vendAccount">
    /// The specified vender account.
    /// </param>
    /// <param name="_bankDocumentType">
    /// The bank document type.
    /// </param>
    /// <returns>
    /// The number of bank documents for the specified vender account.
    /// </returns>
    public static BankLCTotalNumberOfDocuments getTotalNumberOfBankDocuments(
        VendAccount       _vendAccount,
        BankDocumentType  _bankDocumentType)
    {
        PurchTable purchTableLocal;

        select count(RecId) from purchTableLocal
            where purchTableLocal.OrderAccount      == _vendAccount
                && purchTableLocal.BankDocumentType == _bankDocumentType;

        return int642int(purchTableLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrphanTransactionInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether there are orphan transactions when a <c>BankDocumentFacilityAgreement</c> record
    /// changes period.
    /// </summary>
    /// <param name="_bankDocumentAgreementRecId">
    /// The record ID of a bank agreement.
    /// </param>
    /// <param name="_startDateTime">
    /// The starting <c>dateTime</c> value of the new period.
    /// </param>
    /// <param name="_endDateTime">
    /// The ending <c>dateTime</c> value of the new period.
    /// </param>
    /// <param name="_isCheckOnlyForOpenTransactions">
    /// A Boolean value that indicates whether the method will only check for open transactions.
    /// </param>
    /// <returns>
    /// true if it has orphan transactions; otherwise, false.
    /// </returns>
    public static boolean hasOrphanTransactionInPeriod(
        recId         _bankDocumentAgreementRecId,
        StartDateTime _startDateTime,
        EndDateTime   _endDateTime,
        boolean       _isCheckOnlyForOpenTransactions = false)
    {
        BankDocumentFacilityAgreementLine bankDocumentFacilityAgreementLine;
        BankLCImport                      bankLCImport;

        if (_isCheckOnlyForOpenTransactions)
        {
            select firstonly RecId
                from bankDocumentFacilityAgreementLine
                    where bankDocumentFacilityAgreementLine.BankDocumentFacilityAgreement == _bankDocumentAgreementRecId
                join RecId from bankLCImport
                    where bankLCImport.BankDocumentFacilityAgreementLine == bankDocumentFacilityAgreementLine.RecId
                        && (bankLCImport.ApplicationDateTime    < _startDateTime
                            || bankLCImport.ApplicationDateTime > _endDateTime)
                        && bankLCImport.ImportStatus                     != BankLCImportStatusType::Closed;
        }
        else
        {
            select firstonly RecId
                from bankDocumentFacilityAgreementLine
                    where bankDocumentFacilityAgreementLine.BankDocumentFacilityAgreement == _bankDocumentAgreementRecId
                join RecId from bankLCImport
                    where bankLCImport.BankDocumentFacilityAgreementLine == bankDocumentFacilityAgreementLine.RecId
                        && (bankLCImport.ApplicationDateTime    < _startDateTime
                            || bankLCImport.ApplicationDateTime > _endDateTime);
        }

        return bankDocumentFacilityAgreementLine && bankDocumentFacilityAgreementLine.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS316179</DeveloperDocumentation>
	<FormRef>BankLCImport</FormRef>
	<Label>@SYS316122</Label>
	<ListPageRef>BankLCImportGridView</ListPageRef>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>PurchTable</TitleField1>
	<TitleField2>ImportStatus</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>BankLC</Extends>
	<Modules>Bank</Modules>
	<ReplacementKey>PurchTableIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>BankLCImportHistory</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>BankLCImportHistory</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportBeneficiary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplicationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PurchTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Availablewith</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportAdvisingBank</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportBeneficiary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ImportStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankDocumentFacilityAgreementLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiptDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplicationDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Insurance</Name>
			<Label>@SYS67403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InsuranceStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InsuranceVendTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Insurance</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LookupIdentification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankLCNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCAmountCur</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ApplicationDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS316123</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Availablewith</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportAvailablewith</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankDocumentFacilityAgreementLine</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>BankDocumentAgreementLineRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImportAdvisingBank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Label>@SYS316129</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ImportBeneficiary</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendName</ExtendedDataType>
			<Label>@SYS70328</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ImportStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportStatus</ExtendedDataType>
			<EnumType>BankLCImportStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Insurance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportInsurance</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InsuranceStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCImportInsuranceStatus</ExtendedDataType>
			<EnumType>BankLCImportInsuranceStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InsuranceVendTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS316132</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdBase</ExtendedDataType>
			<Label>@SYS316136</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ReceiptDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS316125</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendTable</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PurchTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankDocumentFacilityAgreementLineIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankDocumentFacilityAgreementLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LCImportStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ImportStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendBankAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ImportAdvisingBank</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankDocumentFacilityAgreementLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankDocumentFacilityAgreementLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankDocumentFacilityAgreementLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>BankDocumentFacilityAgreementLine_BankLCImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankDocumentFacilityAgreementLine</Name>
					<Field>BankDocumentFacilityAgreementLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCImport</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankLC</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CurrencyCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Currency_BankLCImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ImportAdvisingBank</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount_BankLCImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTable</Name>
					<Field>VendTable</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ImportAdvisingBank</Name>
					<Field>ImportAdvisingBank</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InsuranceVendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable_1_BankLCImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InsuranceVendTable</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>InsuranceVendTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>PurchTable_BankLCImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchTable</Name>
					<SourceEDT>PurchIdBase</SourceEDT>
					<Field>PurchTable</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendTable_BankLCImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTable</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>