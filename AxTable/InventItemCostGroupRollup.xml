<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemCostGroupRollup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemCostGroupRollup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the delete action is not called from a form.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The delete action is called from a form.
    /// </exception>
    public void delete()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayUnitId</Name>
				<Source><![CDATA[
    display UnitOfMeasureSymbol displayUnitId()
    {
        return InventItemPrice::findRecId(this.InventItemPriceRefRecId).UnitID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCostGroupRollup</Name>
				<Source><![CDATA[
    public void initFromCostGroupRollup(InventItemCostGroupRollupMap _source,
                                        InventItemPriceMap           _sourceItemPrice)
    {
        this.InventItemCostGroupRollupMap::initFromCostGroupRollup(_source, _sourceItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>inventItemCostGroupRollup</c> record from a <c>inventCostTransVariance</c> record.
    /// </summary>
    /// <param name="_inventCostTransVariance">
    /// The <c>inventCostTransVariance</c> record that is used to initialize.
    /// </param>

    public void initFromInventCostTransVariance(InventCostTransVariance     _inventCostTransVariance)
    {
        this.CostGroupId            = _inventCostTransVariance.CostGroupId;
        this.CostLevel              = _inventCostTransVariance.Level;
        this.Split                  = _inventCostTransVariance.Split;
        this.CostAmountStd          = _inventCostTransVariance.CostAmount;
        // <GEERU>
        this.CostAmountSecCur_RU    = _inventCostTransVariance.CostAmountSecCur_RU;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPrice</Name>
				<Source><![CDATA[
    public void initFromInventItemPrice(InventItemPrice _inventItemPrice)
    {
        this.InventItemCostGroupRollupMap::initFromInventItemPriceMap(_inventItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventItemPriceSim</Name>
				<Source><![CDATA[
    public void initFromInventItemPriceSim(InventItemPriceSim _inventItemPriceSim)
    {
        this.InventItemCostGroupRollupMap::initFromInventItemPriceMap(_inventItemPriceSim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the insert action is not called from a form.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The insert action is called from a form.
    /// </exception>
    public void insert()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pcsPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the piece price of an <c>inventItemCostGroupRollup</c> record.
    /// </summary>
    /// <returns>
    /// The piece price of an <c>inventItemCostGroupRollup</c> record.
    /// </returns>
    public Price pcsPrice()
    {
        if (this.Qty)
        {
            return this.CostAmountStd / this.Qty;
        }
        else
        {
            return this.CostAmountStd;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies that the update action is not called from a form.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    The update action is called from a form.
    /// </exception>
    public void update()
    {
        if (FormDataUtil::isFormDataSource(this))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCostGroupRollupFromPrice</Name>
				<Source><![CDATA[
    static void copyCostGroupRollupFromPrice(InventItemPriceRefRecId   _sourceRecId,
                                                    InventItemPriceRefRecId   _targetRecId)
    {
        InventItemCostGroupRollup   costGroupRollup;
        InventItemCostGroupRollup   costGroupRollupSource;
        insert_recordset costGroupRollup
        (
            costAmountStd,
            // <GEERU>
            CostAmountSecCur_RU,
            // </GEERU>
            costGroupId,
            costLevel,
            qty,
            split,
            inventItemPriceRefRecId
        )
        select
            CostAmountStd,
            // <GEERU>
            CostAmountSecCur_RU,
            // </GEERU>
            CostGroupId,
            CostLevel,
            Qty,
            Split,
            _targetRecId
        from costGroupRollupSource
            where costGroupRollupSource.InventItemPriceRefRecId == _sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static InventItemCostGroupRollup find(
        InventItemPriceRefRecId _priceRefRecId,
        CostGroupId             _costGroupId,
        InventCostLevel         _inventCostLevel,
        NoYesId                 _split,
        boolean                 _forUpdate = false)
    {
        InventItemCostGroupRollup   inventItemCostGroupRollup;

        if (_priceRefRecId && _costGroupId)
        {
            inventItemCostGroupRollup.selectForUpdate(_forUpdate);

            select firstonly inventItemCostGroupRollup
                where inventItemCostGroupRollup.InventItemPriceRefRecId == _priceRefRecId
                   && inventItemCostGroupRollup.CostGroupId             == _costGroupId
                   && inventItemCostGroupRollup.CostLevel               == _inventCostLevel
                   && inventItemCostGroupRollup.Split                   == _split;
        }
        return inventItemCostGroupRollup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BOMCostBreakdown</ConfigurationKey>
	<DeveloperDocumentation>@SYS321276</DeveloperDocumentation>
	<FormRef>InventItemCostGroupRollup</FormRef>
	<Label>@SYS110970</Label>
	<TableGroup>TransactionLine</TableGroup>
	<TitleField1>InventItemPriceRefRecId</TitleField1>
	<TitleField2>CostGroupId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>PriceCostGroupIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PriceCostGroupIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountStd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostAmount</Name>
			<Label>@SYS3058</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostAmountStd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountSecCur_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventItemPriceRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Split</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventItemPriceRefRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostLevel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Split</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountStd</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAmountSecCur_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmountSecCur_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountSecCur_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAmountStd</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountNonMonetary</ExtendedDataType>
			<Label>@SYS3058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostLevel</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventCostLevel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventItemPriceRefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventItemPriceRefRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostQuantity</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Split</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS10133</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PriceCostGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventItemPriceRefRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostLevel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Split</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CostGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventItemCostGroupRollupMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CostGroupId</MapField>
					<MapFieldTo>CostGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostLevel</MapField>
					<MapFieldTo>CostLevel</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Split</MapField>
					<MapFieldTo>Split</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAmountStd</MapField>
					<MapFieldTo>CostAmountStd</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAmountSecCur_RU</MapField>
					<MapFieldTo>CostAmountSecCur_RU</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BOMCostGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BOMCostGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostGroupId</Name>
					<Field>CostGroupId</Field>
					<RelatedField>CostGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CostGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventItemPrice</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventItemPrice</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventItemPriceRefRecId</Name>
					<Field>InventItemPriceRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>