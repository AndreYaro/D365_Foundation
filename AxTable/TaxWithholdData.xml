<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdData extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInterval</Name>
				<Source><![CDATA[
    public boolean checkInterval()
    {
        if ((this.TaxWithholdFromDate && ! this.TaxWithholdToDate) ||
            (!this.TaxWithholdFromDate && this.TaxWithholdToDate))
            return checkFailed("@Tax:FromToDatesEmpty");

        if (this.TaxWithholdFromDate > this.TaxWithholdToDate)
            return checkFailed("@SYS16982");

        if (this.TaxWithholdLimitMax &&
           (this.TaxWithholdLimitMin > this.TaxWithholdLimitMax))
            return checkFailed("@Tax:LowerLimitLessThanUpperLimitCheck");

        if (this.TaxWithholdFromDate && TaxWithholdData::existDataWithoutDate(this.TaxWithholdCode, this.RecId))
            return checkFailed("@SYS22088");

        if (! TaxWithholdData::existDateInterval(this.TaxWithholdCode,
                                                 this.TaxWithholdFromDate,
                                                 this.TaxWithholdToDate,
                                                 this.RecId))
        {
            if (TaxWithholdData::existDateInInterval(this.TaxWithholdCode,
                                                     this.TaxWithholdFromDate,
                                                     this.TaxWithholdToDate,
                                                     this.RecId))
                return checkFailed("@Tax:DateWithinInterval");
        }
        else
        {
            if (TaxWithholdData::existAmountOverlap(this.TaxWithholdCode,
                                                    this.TaxWithholdFromDate,
                                                    this.TaxWithholdToDate,
                                                    this.TaxWithholdLimitMin,
                                                    this.TaxWithholdLimitMax,
                                                    this.RecId))
                return checkFailed("@Tax:AmountLimitOverlap");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithHoldValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the withholding tax value from either PANNonAvailableValue_IN or TaxWithholdValue value based on the PAN of the accountNum is reveal or not.
    /// </summary>
    /// <param name="_accountNum">
    ///    The <c>_accountNum</c> to know the PAN status of the accountNum selected.
    /// </param>
    /// <param name="_isVendTransaction">
    ///    The <c>_isVendTransaction</c> to Check Whether it is a Vendor or Customer transaction.
    /// </param>
    /// <returns>
    ///    Returns TaxWithholdValue values.
    /// </returns>
    public TaxWithholdValue getTaxWithHoldValue_IN(
        AccountNum _accountNum,
        boolean    _isVendTransaction)
    {
        VendTable          vendTableLoc;
        boolean            ret;

        if (_isVendTransaction)
        {
            vendTableLoc = VendTable::find(_accountNum);

            ret = (vendTableLoc
                    && (vendTableLoc.getTaxInformationVendTable_IN().PANStatus != PANStatus_IN::Received)
                    && (TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN == TaxWithholdCodeType_IN::TDS));
        }
        return  ret ? this.panNonAvailableValue_IN : this.TaxWithholdValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxWithholdTypeMatched_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax withhold type is matched.
    /// </summary>
    /// <param name="_taxWithholdCodeType_IN">
    /// The tax withhold code type.
    /// </param>
    /// <returns>
    /// Returns true if the tax withhold type is matched.
    /// </returns>
    public boolean isTaxWithholdTypeMatched_IN(TaxWithholdCodeType_IN _taxWithholdCodeType_IN)
    {
        return TaxWithholdTable::find(this.TaxWithholdCode).TaxType_IN == _taxWithholdCodeType_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ;
        ret = super();

        if (ret)
            ret = this.checkInterval();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(TaxWithholdCode _taxWithholdCode )
    {
        boolean ret = true;
        ;

        if (!TaxWithholdData::exist(_taxWithholdCode))
        {
            ret = checkFailed(strfmt(TaxWithholdData::txtNotExist(), _taxWithholdCode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(TaxWithholdCode _taxWithholdCode )
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     taxWithholdData
                 where
                     taxWithholdData.TaxWithholdCode == _taxWithholdCode).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existAmountOverlap</Name>
				<Source><![CDATA[
    private static boolean existAmountOverlap(TaxCode            _taxWithholdCode,
                                                     TaxValidDate       _taxWithholdFromDate,
                                                     TaxValidDate       _taxWithholdToDate,
                                                     TaxBase            _taxWithholdLimitMin,
                                                     TaxBase            _taxWithholdLimitMax,
                                                     recId              _recId)
    {
        TaxWithholdData taxWithholdData;
        boolean         ret = false;

        if (_taxWithholdCode)
        {
            while select TaxWithholdLimitMax, TaxWithholdLimitMin from taxWithholdData
                  where taxWithholdData.TaxWithholdCode      == _taxWithholdCode      &&
                        taxWithholdData.RecId                != _recId                &&
                        taxWithholdData.TaxWithholdFromDate  == _taxWithholdFromDate  &&
                        taxWithholdData.TaxWithholdToDate    == _taxWithholdToDate
            {
                if (! taxWithholdData.TaxWithholdLimitMax && ! _taxWithholdLimitMax)
                {
                    ret = true;
                    break;
                }

                if (taxWithholdData.TaxWithholdLimitMin      == _taxWithholdLimitMin &&
                    taxWithholdData.TaxWithholdLimitMax      == _taxWithholdLimitMax)
                {
                    ret = true;
                    break;
                }

                if (taxWithholdData.TaxWithholdLimitMin <= _taxWithholdLimitMin &&
                   (taxWithholdData.TaxWithholdLimitMax > _taxWithholdLimitMin ||
                    !taxWithholdData.TaxWithholdLimitMax))
                {
                    ret = true;
                    break;
                }

                if (_taxWithholdLimitMax &&
                    taxWithholdData.TaxWithholdLimitMin < _taxWithholdLimitMax &&
                   (taxWithholdData.TaxWithholdLimitMax >= _taxWithholdLimitMax ||
                    !taxWithholdData.TaxWithholdLimitMax))
                {
                    ret = true;
                    break;
                }

                if (taxWithholdData.TaxWithholdLimitMax &&
                    taxWithholdData.TaxWithholdLimitMin >= _taxWithholdLimitMin &&
                   (taxWithholdData.TaxWithholdLimitMax <= _taxWithholdLimitMax ||
                    !_taxWithholdLimitMax))
                {
                    ret = true;
                    break;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDataWithoutDate</Name>
				<Source><![CDATA[
    private static boolean existDataWithoutDate(TaxCode  _taxWithholdCode,
                                                       recId    _recId)
    {
        ;
        if (_taxWithholdCode)
            return (select firstonly RecId from taxWithholdData
                    index hint TaxWithholdCodeIdx
                    where taxWithholdData.TaxWithholdCode == _taxWithholdCode &&
                          taxWithholdData.RecId           != _recId           &&
                          !taxWithholdData.TaxWithholdFromDate                &&
                          !taxWithholdData.TaxWithholdToDate).RecId != 0;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInInterval</Name>
				<Source><![CDATA[
    private static boolean existDateInInterval(TaxWithholdCode  _taxWithholdCode,
                                                      TransDate        _taxWithholdFromDate,
                                                      TransDate        _taxWithholdToDate,
                                                      recId            _recId)
    {
        TaxWithholdData  taxWithholdData;
        boolean          ret = false;
        ;
        if (_taxWithholdCode)
        {
            while select TaxWithholdFromDate, TaxWithholdToDate from taxWithholdData
                  index hint TaxWithholdCodeIdx
                  where taxWithholdData.TaxWithholdCode == _taxWithholdCode &&
                        taxWithholdData.RecId           != _recId
            {
                if (!_taxWithholdFromDate || !_taxWithholdToDate)
                    ret = true;
                if (_taxWithholdFromDate  >= taxWithholdData.TaxWithholdFromDate  &&
                    _taxWithholdFromDate  <= taxWithholdData.TaxWithholdToDate    ||
                    _taxWithholdToDate    >= taxWithholdData.TaxWithholdFromDate  &&
                    _taxWithholdToDate    <= taxWithholdData.TaxWithholdToDate)
                    ret = true;
                if (taxWithholdData.TaxWithholdFromDate >= _taxWithholdFromDate    &&
                    taxWithholdData.TaxWithholdFromDate <= _taxWithholdToDate      ||
                    taxWithholdData.TaxWithholdToDate   >= _taxWithholdFromDate    &&
                    taxWithholdData.TaxWithholdToDate   <= _taxWithholdToDate)
                    ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDateInterval</Name>
				<Source><![CDATA[
    private static boolean existDateInterval(TaxWithholdCode  _taxWithholdCode,
                                                    TransDate        _taxWithholdFromDate,
                                                    TransDate        _taxWithholdToDate,
                                                    recId            _recId)
    {
        ;
        if (_taxWithholdCode)
            return (select firstonly RecId from taxWithholdData
                    index hint TaxWithholdCodeIdx
                    where taxWithholdData.TaxWithholdCode     == _taxWithholdCode     &&
                          taxWithholdData.TaxWithholdFromDate == _taxWithholdFromDate    &&
                          taxWithholdData.TaxWithholdToDate   == _taxWithholdToDate      &&
                          taxWithholdData.RecId               != _recId).RecId != 0;
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static TaxWithholdData find(
        TaxWithholdCode _taxWithholdCode,
        TransDate _transDate,
        TaxWithholdBase _taxWithholdBase ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdData taxWithholdData;
        ;

        taxWithholdData.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdData.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxWithholdData
                where  taxWithholdData.TaxWithholdCode == _taxWithholdCode                 &&
                       (!taxWithholdData.TaxWithholdFromDate ||
                        (taxWithholdData.TaxWithholdFromDate  <= _transDate &&
                         taxWithholdData.TaxWithholdToDate    >= _transDate))              &&
                       (((_taxWithholdBase && (taxWithholdData.TaxWithholdLimitMin  <= abs(_taxWithholdBase)  &&
                        (taxWithholdData.TaxWithholdLimitMax  >= abs(_taxWithholdBase)) ||
                        (taxWithholdData.TaxWithholdLimitMin  <= abs(_taxWithholdBase)  &&
                         !taxWithholdData.TaxWithholdLimitMax)))) || (!_taxWithholdBase));

        return taxWithholdData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWithoutCheckLimit_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds specific record in <c>TaxWithholdData</c> table
    /// </summary>
    /// <param name="_taxWithholdCode">
    /// The record identifier
    /// </param>
    /// <param name="_transDate">
    /// The range date of the search
    /// </param>
    /// <param name="_forupdate">
    /// A boolean to define if record will be selected for update or not
    /// </param>
    /// <param name="_concurrencyModel">
    /// The OCC setup for <c>TaxWithholdData</c> table
    /// </param>
    /// <returns>
    /// A record of <c>TaxWithholdData</c> table
    /// </returns>
    public static TaxWithholdData findWithoutCheckLimit_BR(
        TaxWithholdCode _taxWithholdCode,
        TransDate _transDate,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdData taxWithholdData;
        ;

        taxWithholdData.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdData.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxWithholdData
                where  taxWithholdData.TaxWithholdCode == _taxWithholdCode                 &&
                       (!taxWithholdData.TaxWithholdFromDate ||
                        (taxWithholdData.TaxWithholdFromDate  <= _transDate &&
                         taxWithholdData.TaxWithholdToDate    >= _transDate));

        return taxWithholdData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntervalMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the intervals that are defined for the <c>TaxWithholdCode</c> value.
    /// </summary>
    /// <param name="_taxWithholdCode">
    /// The <c>TaxWithholdCode</c> value of the <c>TaxWithholdTable</c> table.
    /// </param>
    /// <returns>
    /// true if the defined limits are correct; otherwise, false.
    /// </returns>
    public static boolean isIntervalMissing(TaxWithholdCode _taxWithholdCode)
    {
        TaxWithholdData         taxWithholdData;
        boolean                 isMissing   = false;
        boolean                 firstPeriod = true;
        real                    taxLimitMax = 0;
        TaxValidDate            taxFromDate;
        TaxValidDate            taxToDate;

        if (_taxWithholdCode)
        {
            while select TaxWithholdFromDate, TaxWithholdToDate, TaxWithholdLimitMin, TaxWithholdLimitMax from taxWithholdData
                where (taxWithholdData.TaxWithholdCode == _taxWithholdCode)
            {
                if (firstPeriod
                    ||(taxFromDate != taxWithholdData.TaxWithholdFromDate)
                    ||(taxToDate   != taxWithholdData.TaxWithholdToDate))
                // New period - First interval
                {
                    taxFromDate = taxWithholdData.TaxWithholdFromDate;
                    taxToDate   = taxWithholdData.TaxWithholdToDate;
                    // Last interval of previous period should have Max = 0 (i.e. infinity)
                    // First interval of current period should have Min = 0
                    isMissing = isMissing || (taxLimitMax > 0) || (taxWithholdData.TaxWithholdLimitMin > 0);
                    firstPeriod = false;
                }
                else
                // Inner or last interval
                {
                    // Difference between current Min and previous Max should be smaller than 0.01
                    isMissing = isMissing || (taxWithholdData.TaxWithholdLimitMin - taxLimitMax) > 0.01;
                }
                taxLimitMax = taxWithholdData.TaxWithholdLimitMax;
            }
            // Last interval of last period should have Max = 0 (i.e. infinity)
            isMissing = isMissing || (taxLimitMax > 0);
        }
        return isMissing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102256";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicWithholdingTax</ConfigurationKey>
	<DeveloperDocumentation>@SYS126136</DeveloperDocumentation>
	<Label>@Tax:WithholdingTaxCodeValues</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdCode</TitleField1>
	<TitleField2>TaxWithholdValue</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>FromSortIdx</ClusteredIndex>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Tax</Modules>
	<PrimaryIndex>TaxWithholdCodeIdx</PrimaryIndex>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdLimitMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdLimitMax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdExclude</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS7523</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdExclude</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PANNonAvailableValue_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Interval</Name>
			<Label>@SYS12899</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdLimitMin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdLimitMax</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PANNonAvailableValue_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>TaxWithholdValue</ExtendedDataType>
			<Label>@GLS220093</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWithholdCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdExclude</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdExclude</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxWithholdFromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS5209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdLimitMax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBase</ExtendedDataType>
			<Label>@Tax:MaximumLimit</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdLimitMin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdBase</ExtendedDataType>
			<Label>@SYS21884</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TaxWithholdToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS14656</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxWithholdValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWithholdValue</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdCodeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FromSortIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdFromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdToDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxWithholdLimitMin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdCode</Name>
					<SourceEDT>TaxWithholdCode</SourceEDT>
					<Field>TaxWithholdCode</Field>
					<RelatedField>TaxWithholdCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxWithholdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>