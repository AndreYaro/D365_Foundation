<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendBankAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendBankAccount extends Common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>account_BR</Name>
				<Source><![CDATA[
    display BankAccountNum_BR account_BR()
    {
        return Bank_BR::parseAccount(this.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressing</Name>
				<Source><![CDATA[
    display LogisticsAddressing addressing()
    {
        return LogisticsLocationEntity::location2PostalAddress(this.Location).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>agency_BR</Name>
				<Source><![CDATA[
    display BankAgency_BR agency_BR()
    {
        return Bank_BR::parseAgency(this.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountOpenedIn_RU</Name>
				<Source><![CDATA[
    public display BankAccountOpenedIn_RU bankAccountOpenedIn_RU()
    {
        return this.BankAccountMap::bankAccountOpenedIn_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the status of the vendor bank account.
    /// </summary>
    /// <param name="_transDate">
    ///    The date on which the payment transaction has to be made, or the current UTC date.
    /// </param>
    /// <returns>
    ///    The status of vendor bank account.
    /// </returns>
    /// <remarks>
    ///    This is a utility method that is used to get the status of vendor bank account based on <paramref
    ///    name="_transDate" /> parameter.
    /// </remarks>

    public BankAccountStatus bankAccountStatus(utcdatetime _transDate)
    {
        BankAccountStatus bankAccountStatus = BankAccountStatus::Inactive;

        if (this.ExpiryDate == Global::utcDateTimeNull() || this.ExpiryDate > _transDate)
        {         
            if (this.ActiveDate <= _transDate)
            {
                bankAccountStatus = BankAccountStatus::Active;
            }
        }
        return bankAccountStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountValidation</Name>
				<Source><![CDATA[
    Bank bankAccountValidation()
    {
        return this.BankAccountMap::bankAccountValidation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankBIC_RU</Name>
				<Source><![CDATA[
    public display BankBIC_RU bankBIC_RU()
    {
        return this.BankAccountMap::bankBIC_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankcode_BR</Name>
				<Source><![CDATA[
    display BankCode_BR bankcode_BR()
    {
        return Bank_BR::parseBankCode(this.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankIsBranch_RU</Name>
				<Source><![CDATA[
    public boolean bankIsBranch_RU()
    {
        return this.BankAccountMap::bankIsBranch_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankName_RU</Name>
				<Source><![CDATA[
    public display BankName_RU bankName_RU()
    {
        return this.BankAccountMap::bankName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankShortAddressing_RU</Name>
				<Source><![CDATA[
    public BankShortAddressing_RU bankShortAddressing_RU()
    {
        return this.BankAccountMap::bankShortAddressing_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseBankName_RU</Name>
				<Source><![CDATA[
    public Description baseBankName_RU()
    {
        return this.BankAccountMap::baseBankName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseBankShortAddressing_RU</Name>
				<Source><![CDATA[
    public BankShortAddressing_RU baseBankShortAddressing_RU()
    {
        return this.BankAccountMap::baseBankShortAddressing_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefault_LV</Name>
				<Source><![CDATA[
    private boolean checkDefault_LV()
    {
        VendBankAccount vendBankAccount;

        if (this.LvDefaultBank)
        {
            select firstonly RecId from vendBankAccount
                where vendBankAccount.VendAccount == this.VendAccount &&
                      vendBankAccount.CurrencyCode == this.CurrencyCode &&
                      vendBankAccount.LvDefaultBank == NoYes::Yes &&
                      vendBankAccount.RecId != this.RecId;
        }

        return vendBankAccount.RecId ? checkFailed("@GLS108523") : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDunsValueExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the unique combination of the record ID in the <c>LogisticLocation</c> table and
    /// Duns4 number exists other than in current record.
    /// </summary>
    /// <param name="_logisticLocationRecId">
    /// The record ID of the <c>LogisticLocation</c> table.
    /// </param>
    /// <param name="_duns4Number">
    /// The variable that contains the value for the Duns4 number.
    /// </param>
    /// <returns>
    /// true if the combination of the record ID of the <c>LogisticLocation</c> table and Duns4 number
    /// exist other than the current record; otherwise, false.
    /// </returns>
    private boolean checkDunsValueExists(RefRecId _logisticLocationRecId, VendDUNS4Num _duns4Number)
    {
        boolean ok = false;
        VendBankAccount vendBankAccount;

        if (_logisticLocationRecId)
        {
            select RecId from vendBankAccount
                where vendBankAccount.VendDuns4Number == _duns4Number
                   && vendBankAccount.LogisticsLocation == _logisticLocationRecId
                   && vendBankAccount.RecId != this.RecId ;

            if (vendBankAccount.RecId)
            {
                ok = true;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress logisticsPostalAddress()
    {
        return LogisticsLocationEntity::location2PostalAddress(this.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryIsoCode</Name>
				<Source><![CDATA[
    LogisticsAddressCountryRegionISOCode countryIsoCode()
    {
        return LogisticsAddressCountryRegion::find(LogisticsLocationEntity::location2PostalAddress(this.Location).CountryRegionId).isOcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CountryRegionId</c> value from the <c>logisticsPostalAddress</c> table.
    /// </summary>
    /// <returns>
    /// The <c>CountryRegionId</c> value from the <c>logisticsPostalAddress</c> table.
    /// </returns>
    LogisticsAddressCountryRegionId countryRegionId()
    {
        return LogisticsLocationEntity::location2PostalAddress(this.Location).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentBankAccountStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the current status of the bank account based on the current <c>utcdatetime</c> data type.
    /// </summary>
    /// <returns>
    ///    The string equivalent of the <c>BankAccountStatus</c> enumeration value.
    /// </returns>
    display VendBankAccountStatus currentBankAccountStatus()
    {
        return enum2str(this.bankAccountStatus(DateTimeUtil::utcNow()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reviewStatus</Name>
				<Source><![CDATA[
    public display VendBankAccountVersioningStateDisplay reviewStatus()
    {
        if(this.isDraft())
        {
            return VendBankAccountVersioningStateDisplay::Draft;
        }
        if(!VendBankAccountChangeProposal::existVendBankAccountRefRecId(this.RecId))
        {
            return VendBankAccountVersioningStateDisplay::Approved;
        }
        if(this.isWorkflowCompleted())
        {
            return VendBankAccountVersioningStateDisplay::ApprovedNotSubmitted;
        }
        
        return VendBankAccountVersioningStateDisplay::ApprovedPendingChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowCompleted</Name>
				<Source><![CDATA[
    [Hookable(true)]
    public boolean isWorkflowCompleted()
    {
        return this.WorkflowState == VendBankAccountChangeProposalWorkflowState::NotSubmitted
            || this.WorkflowState == VendBankAccountChangeProposalWorkflowState::Rejected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dac_br</Name>
				<Source><![CDATA[
    display BankDAC_BR dac_br()
    {
        return Bank_BR::parseDAC(this.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    public edit CrossExchRate editExchRate(boolean set, CrossExchRate _exchRate)
    {
        if (set)
        {
            this.ExchRate = CurrencyEuroDenomination::prepareExchangeRateForStorage_Static(_exchRate, ExchangeRateDisplayFactor::One);
        }
        else
        {
            _exchRate = CurrencyEuroDenomination::displayStoredExchangeRate_Static(this.ExchRate, ExchangeRateDisplayFactor::One);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentTypeElectronicPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the electronic payment enum value of <c>PaymentType</c>.
    /// </summary>
    /// <returns>
    ///     Enum value of electronic payment of enum <c>PaymentType</c>.
    /// </returns>
    protected PaymentType getPaymentTypeElectronicPayment()
    {
        return PaymentType::ElectronicPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the existence of open transactions based on the bank account active date or the expiry
    /// date.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of <c>datetime</c> field that specifies either the bank account active date or the expiry
    /// date.
    /// </param>
    /// <returns>
    /// true if open transactions exist for the bank account; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method is called by <c>validateField</c> method to check whether open transactions exist for
    /// the selected vendor bank account whenever the bank account active date or expiration date is
    /// modified.
    /// </remarks>
    boolean existOpenTransactions(FieldId _fieldId)
    {
        boolean ret = false;
        VendTrans vendTrans;
        VendPaymModeTable vendPaymMode;
        boolean retOpenTrans = false;
        VendTransOpen vendTransOpen;
        PaymentType electronicPaymentType = this.getPaymentTypeElectronicPayment();

        switch (_fieldId)
        {
            case (fieldNum(VendBankAccount, ActiveDate)) :
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    select firstonly RecId from vendTrans
                        exists join vendPaymMode
                            where vendPaymMode.PaymMode == vendTrans.PaymMode
                               && vendPaymMode.PaymentType == electronicPaymentType
                               && vendTrans.AccountNum == this.VendAccount
                               && vendTrans.AmountCur != vendTrans.SettleAmountCur
                               && vendTrans.TransDate < DateTimeUtil::date(this.ActiveDate)
                               && vendTrans.ThirdPartyBankAccountId == this.AccountID
                               && vendTrans.TransType == LedgerTransType::Payment;
                }
                else
                {
                    select firstonly RecId from vendTrans exists join vendPaymMode
                        where  vendPaymMode.PaymMode == vendTrans.PaymMode
                        && vendPaymMode.PaymentType == electronicPaymentType
                        && vendTrans.AccountNum == this.VendAccount
                        && vendTrans.AmountCur != vendTrans.SettleAmountCur
                        && vendTrans.TransDate < DateTimeUtil::date(this.ActiveDate)
                        && vendTrans.ThirdPartyBankAccountId == this.AccountID;
                }

                if (vendTrans.RecId)
                {
                    ret = true;
                }

                select firstonly RecId from vendTrans
                        where vendTrans.TransDate < DateTimeUtil::date(this.ActiveDate)
                    join RefRecId from vendTransOpen
                        where vendTransOpen.RefRecId == vendTrans.RecId
                           && vendTransOpen.ThirdPartyBankAccountId == this.AccountID
                    join PaymMode from vendPaymMode
                        where vendPaymMode.PaymMode == vendTrans.PaymMode
                           && vendPaymMode.PaymentType == electronicPaymentType
                           && vendTrans.AccountNum == this.VendAccount
                           && vendTrans.AmountCur != vendTrans.SettleAmountCur;

                if (vendTrans.RecId)
                {
                    retOpenTrans = true;
                }

                ret = ret || retOpenTrans;
                break;
            case (fieldNum(VendBankAccount, ExpiryDate)) :
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    select firstonly RecId from vendTrans
                            where vendTrans.AccountNum == this.VendAccount
                               && vendTrans.AmountCur != vendTrans.SettleAmountCur
                               && vendTrans.TransDate >= DateTimeUtil::date(this.ExpiryDate)
                               && vendTrans.ThirdPartyBankAccountId == this.AccountID
                               && vendTrans.TransType == LedgerTransType::Payment;
                }
                else
                {
                    select firstonly RecId from vendTrans
                        where vendTrans.AccountNum == this.VendAccount &&
                        vendTrans.AmountCur != vendTrans.SettleAmountCur &&
                        vendTrans.TransDate >= DateTimeUtil::date(this.ExpiryDate) &&
                        vendTrans.ThirdPartyBankAccountId == this.AccountID;
                }

                if (vendTrans.RecId)
                {
                    ret = true;
                }

                select firstonly RecId from vendTrans
                        where vendTrans.AccountNum == this.VendAccount
                           && vendTrans.AmountCur != vendTrans.SettleAmountCur
                           && vendTrans.TransDate >= DateTimeUtil::date(this.ExpiryDate)
                    join RefRecId from vendTransOpen
                        where vendTransOpen.RefRecId == vendTrans.RecId
                           && vendTransOpen.ThirdPartyBankAccountId == this.AccountID;

                if (vendTrans.RecId)
                {
                    retOpenTrans = true;
                }

                ret = ret || retOpenTrans;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignBankName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets name of foreign bank associated with current bank account.
    /// </summary>
    /// <returns>
    /// Name of the foreign bank.
    /// </returns>
    public display BankName_RU foreignBankName_RU()
    {
        return this.BankAccountMap::foreignBankName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether there is at least one document attached to the vendor bank
    /// account record.
    /// </summary>
    /// <returns>
    /// true if the vendor bank account has documents; otherwise, false.
    /// </returns>
    display VendProfileHasDocuments hasDocuments()
    {
        return DocuRef::exist(this.DataAreaId, this.TableId, this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAttachedDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether there is at least one document attached to the vendor bank
    /// account record.
    /// </summary>
    /// <returns>
    /// true if the vendor bank account has documents with external restrictions; otherwise, false.
    /// </returns>
    display NoYes hasAttachedDocuments()
    {
        DocuRef docuRef;
        return (select firstonly RecId from docuRef
            where docuRef.RefCompanyId == this.DataAreaId
            && docuRef.RefTableId == this.TableId
            && docuRef.RefRecId == this.RecId
            && docuRef.Restriction == DocuRestriction::External).RecId > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReviewed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether a bank account has been reviewed
    /// </summary>
    /// <returns>
    /// true if the vendor bank account has been reviewed; otherwise, false.
    /// </returns>
    display NoYes isReviewed()
    {
        return this.Reviewed == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFourDigitsOfBankAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value in the table for the bank account number and masks part of it
    /// </summary>
    /// <returns>
    /// the masked bank account number with only the last four digits showing
    /// </returns>
    [Hookable(false)]
    display BankAccount lastFourDigitsOfBankAccountNumber()
    {
        return this.hideAllOfStringButLastFour(this.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFourDigitsOfBankRegistrationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value in the table for the bank registration number and masks part of it
    /// </summary>
    /// <returns>
    /// the masked bank registration number with only the last four digits showing
    /// </returns>
    [Hookable(false)]
    display BankRegNum lastFourDigitsOfBankRegistrationNumber()
    {
        return this.hideAllOfStringButLastFour(this.RegistrationNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastFourDigitsOfBankIBAN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current value in the table for the bank IBAN number and masks part of it
    /// </summary>
    /// <returns>
    /// the masked bank IBAN number with only the last four digits showing
    /// </returns>
    [Hookable(false)]
    display BankIBAN lastFourDigitsOfBankIBAN()
    {
        return this.hideAllOfStringButLastFour(this.BankIBAN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideAllOfStringButLastFour</Name>
				<Source><![CDATA[
    private str hideAllOfStringButLastFour(str _originalString)
    {
        str lastfourDigits;
        str xDigits;
        if (strLen(_originalString) <= 4)
        {
            lastfourDigits = _originalString;
        }
        else
        {
            int HiddenSubStringLength = strLen(subStr(_originalString, 0, strLen(_originalString)-4));
            xDigits = strRep('x', HiddenSubStringLength);
            lastfourDigits = subStr(_originalString, strLen(_originalString)-3, strLen(_originalString));
        }

        return xDigits + lastfourDigits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        // <GJP>
        #isoCountryRegionCodes
        // </GJP>

        super();

        // <GJP>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoJP]))
        {
            this.TransType_JP = VendBankTransType_JP::OrdinarySavings;
        }
        // </GJP>
        if(VendBankAccount::isVendBankAccountWorkflowOnCreationEnabled())
        {
            this.VersioningState = VendBankAccountVersioningState::Draft;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendBankAccountWorkflowOnCreationEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isVendBankAccountWorkflowOnCreationEnabled()
    {
        return VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendParameters::find().VendBankAccountWorkflowOnCreationIsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendBankAccountChangeProposalEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isVendBankAccountChangeProposalEnabled()
    {
        return VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendParameters::find().VendBankAccountChangeProposalIsEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendBankAccountEditableOnWorkflow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isVendBankAccountEditableOnWorkflow()
    {
        if (VendBankAccountDisableEditForTwoStepsWorkflowApprovalFlight::instance().isEnabled())
        {
            return !(this.IsDraft() &&
                 (this.WorkflowState == VendBankAccountChangeProposalWorkflowState::Submitted ||
                  this.WorkflowState == VendBankAccountChangeProposalWorkflowState::Approved));
        }
        else
        {
            return !(this.IsDraft() && this.WorkflowState == VendBankAccountChangeProposalWorkflowState::Submitted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDraft</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isDraft()
    {
        return this.VersioningState == VendBankAccountVersioningState::Draft;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        container allDependencies = [
            [fieldNum(VendBankAccount, LogisticsLocation),
                [fieldNum(VendBankAccount, DirDunsNumber)]]
        ];
        allDependencies += this.BankAccountMap::bankAccountMappingDefaultingDependencies();

        return allDependencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        this.BankAccountMap::modifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(VendBankAccount, LogisticsLocation):
                if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                {
                    this.LogisticsLocation = LogisticsLocation::findByDUNSNumRecId(this.DirDunsNumber, VendTable::find(this.VendAccount).Party).RecId;
                }
                break;
            default:
                if (BankGroup::exist(this.BankGroupID))
                {
                    if(VendBankAccountChangeProposalFeature::instance().isEnabled() && this.isBankGroupIdChangeProposed())
                    {
                        break;
                    }  
                    this.BankAccountMap::defaultFieldOnMap(_fieldId);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBankGroupIdChangeProposed</Name>
				<Source><![CDATA[
    protected boolean isBankGroupIdChangeProposed()
    {
        VendBankAccountChangeProposal proposal = VendBankAccountChangeProposal::findByVendBankAccountRecId(this.RecId);
        if(VendBankAccountChangeProposalFieldEnablement::isEnabledFor(VendBankAccountChangeProposalFields::BankGroupID) 
            && proposal.IsChangedBankGroupID)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkflowIncomplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>VendBankAccount</c> record is related to incomplete workflow workitems.
    /// </summary>
    /// <returns>true if the <c>VendBankAccount</c> is related to incomplete workflow workitems; Otherwise, false.</returns>
    internal boolean isWorkflowIncomplete()
    {
        return !(this.WorkflowState == VendBankAccountChangeProposalWorkflowState::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();
       
        if (VendBankAccountChangeProposalFeature::instance().isEnabled() 
            && ret 
            && !this.isWorkflowCompleted())
        {
            ret = checkFailed("@AccountsPayable:VendBankAccountIncompleteWorkflowDeletionError");
        }

        if (ret && VendPrenote::existBankPrenotes(this.VendAccount,this.AccountID))
        {
            if (Box::yesNo(strFmt("@SYS128525",this.AccountID),DialogButton::Yes))
            {
                VendPrenote::deletePrenotes(this.AccountID, this.VendAccount);
                ret = true;
            }
            else
            {
                ret = false;
            }
        }

        if (ret)
        {
            LedgerJournalTable ledgerJournalTable;
            LedgerJournalTrans ledgerJournalTrans;

            select firstonly CustVendBankAccountId from ledgerJournalTrans
                where ledgerJournalTrans.CustVendBankAccountId == this.AccountId;

            if (ledgerJournalTrans.CustVendBankAccountId)
            {
                DimensionDynamicAccount ledgerDimension  = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(this.VendAccount, LedgerJournalACType::Vend);

                select firstonly Recid from ledgerJournalTrans
                    where ledgerJournalTrans.LedgerDimension == ledgerDimension
                        && ledgerJournalTrans.CustVendBankAccountId == this.AccountId
                    exists join ledgerJournalTable
                        where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                            && ledgerJournalTable.Posted == NoYes::Yes;

                if (ledgerJournalTrans.Recid)
                {
                    warning("@CashManagement:VendorBankAccountValidation");
                    ret = false;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret = super(_fieldId);
        #ISOCountryRegionCodes

        if (ret)
        {
            switch (_fieldId)
            {
                case (fieldNum(VendBankAccount, BankIBAN)) :
                    if (Bank::checkBankIBAN(this.BankIBAN, this.AccountID))
                    {
                        this.BankIBAN = strUpr(this.BankIBAN);

                        // If the IBAN has passed Mod97 validation, run further validations to check that
                        // the IBAN both references and adheres to an existing country account structure
                        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(this.BankIBAN);
                        bankIBANValidator.parmRegistrationNum(this.RegistrationNum);
                        bankIBANValidator.validateBankIBANFollowsCountryStructure(this.AccountNum);

                        ret = true;
                    }
                    else
                    {
                        ret = false;
                    }
                    break;

                case (fieldNum(VendBankAccount, ActiveDate)):

                    if (this.ActiveDate != Global::utcDateTimeNull() &&
                            this.ExpiryDate != Global::utcDateTimeNull()
                            && this.ActiveDate > this.ExpiryDate)
                    {
                        ret = checkFailed("@SYS116175");
                    }

                    else if (this. ActiveDate != Global::utcDateTimeNull() &&  this.existOpenTransactions(_fieldId))
                    {
                        info(strFmt("@SYS115074", this.AccountID));
                    }
                    else
                    {
                        ret = true;
                    }

                    break;

                case (fieldNum(VendBankAccount, ExpiryDate)) :
                    if (this.ActiveDate != Global::utcDateTimeNull()
                            && this.ExpiryDate != Global::utcDateTimeNull()
                            && this.ActiveDate > this.ExpiryDate)
                    {
                        ret = checkFailed("@SYS116176");
                    }
                    else if (this. ExpiryDate != Global::utcDateTimeNull() &&  this.existOpenTransactions(_fieldId))
                    {
                        info(strFmt("@SYS115092", this.AccountID));
                    }

                    break;

                case fieldNum(VendBankAccount, AccountNum) :
                    if (this.countryIsoCode() != #isoNL)
                    {
                        ret = this.BankAccountMap::bankAccountValidation().checkBankAccountNum(this.AccountNum);
                    }

                    if (ret)
                    {
                        ret = this.validatePrenote();
                    }

                    // If an IBAN has been specified for this record, validate that the new vendor bank account number
                    // matches the account number found in the IBAN.
                    if (ret && this.BankIBAN)
                    {
                        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(this.BankIBAN);
                        bankIBANValidator.parmRegistrationNum(this.RegistrationNum);
                        bankIBANValidator.validateBankIBANMatchesAccountNumber(this.AccountNum);
                        bankIBANValidator.validateBankIBANMatchesRoutingNumber(this.RegistrationNum);
                    }
                    break;

                case fieldNum(VendBankAccount, Name) :

                    ret = this.validatePrenote();
                    break;

                case (fieldNum(VendBankAccount, VendDuns4Number)):
                    if (strLen(this.VendDuns4Number) > 0)
                    {
                        // Duns number is not selected and does not exist
                        if ((!this.DirDunsNumber) || (DirDunsNumber::find(this.DirDunsNumber).DunsNumber==""))
                        {
                            ret = checkFailed("@SPS260");
                        }

                        // Duns4 number must be of length 4 character
                        if ((ret) && (strLen(this.VendDuns4Number) != 4))
                        {
                            ret = checkFailed(strFmt("@SPS261", this.VendDuns4Number));
                        }
                    }
                    break;

                case (fieldNum(VendBankAccount, DirDunsNumber)):
                    if ((this.DirDunsNumber) && (!LogisticsLocation::findByDUNSNumRecId(this.DirDunsNumber, VendTable::find(this.VendAccount).Party)))
                    {
                        ret = checkFailed("@PublicSector:DunsNumberNotAssociatedWithSelectedVendor");
                    }
                    break;

                case fieldNum(VendBankAccount, RegistrationNum) :
                    
                    ret = this.validatePrenote();

                    // If an IBAN has been specified for this record, validate that the new bank routing number
                    // matches the routing number found in the IBAN.
                    if (ret && this.BankIBAN)
                    {
                        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(this.BankIBAN);
                        bankIBANValidator.parmRegistrationNum(this.RegistrationNum);
                        bankIBANValidator.validateBankIBANMatchesRoutingNumber(this.RegistrationNum);
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrenote</Name>
				<Source><![CDATA[
    protected boolean validatePrenote()
    {
        boolean ret = true;

        if (VendPrenote::existBankPrenotes(this.VendAccount, this.AccountID))
        {
            if (Box::yesNo(strFmt("@SYS128525", this.AccountID), DialogButton::Yes))
            {
                VendPrenote::deletePrenotes(this.AccountID, this.VendAccount);
                ret = true;
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        // <GEELV>
        #ISOCountryRegionCodes
        // </GEELV>

        boolean ret = super();

        if (ret)
        {
            if (this.countryIsoCode() != #isoNL)
            {
                ret = this.BankAccountMap::validateWrite();
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
            {
                if ((this.DirDunsNumber) && (!this.LogisticsLocation))
                {
                    ret = checkFailed("@PublicSector:DunsNumberNotAssociatedWithSelectedVendor");
                }

                // Associated Duns number doesn't exist
                if ((ret) && (!this.DirDunsNumber) && (this.VendDuns4Number))
                {
                    ret = checkFailed("@SPS260");
                }

                if ((ret) && (this.checkDunsValueExists(this.LogisticsLocation, this.VendDuns4Number)))
                {
                    ret = checkFailed("@SPS262");
                }
            }

            // <GEELV>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
            {
                if (this.LvDefaultBank && !this.CurrencyCode)
                {
                    ret = checkFailed(strFmt("@SYS84378", fieldId2pname(tableNum(VendBankAccount), fieldNum(VendBankAccount, CurrencyCode))));
                }
                ret = ret && this.checkDefault_LV();
            }
            // </GEELV>

            if (this.Location && this.BankCIN && !SysCountryRegionCode::isLocationInCountryRegion(this.Location, [#isoIT]))
            {
                ret = checkFailed("@CashManagement_Localization:CINEnabledOnlyInItalianAddress");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountIsActiveForDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the given vendor bank account is an active bank account on the given date.
    /// </summary>
    /// <param name = "_vendAccount">The vendor the bank account belongs to.</param>
    /// <param name = "_vendBankAccountId">The ID of the bank account.</param>
    /// <param name = "_transDate">The date to verify the bank account is active on.</param>
    /// <param name = "_company">The company in which to look for the record.</param>
    /// <returns>true if the vendor bank account exists and is active; otherwise, false.</returns>
    public static boolean checkBankAccountIsActiveForDate(
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId,
        TransDate _transDate,
        CompanyId _company = curext())
    {
        boolean valid = VendBankAccount::checkBankAccountReference(_vendAccount, _vendBankAccountId, _company);

        if (valid)
        {
            VendBankAccount vendBankAccount = VendBankAccount::findByCompany(_company, _vendAccount, _vendBankAccountId);
            BankAccountStatus bankAccountStatus = vendBankAccount.bankAccountStatus(DateTimeUtil::newDateTime(_transDate, 0, DateTimeUtil::getCompanyTimeZone()));

            if (bankAccountStatus == BankAccountStatus::Inactive)
            {
                valid = checkFailed(strFmt("@CashManagement:InactiveVendBankAccount", _vendBankAccountId));
            }
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountReference</Name>
				<Source><![CDATA[
    static boolean checkBankAccountReference(VendAccount        _vendAccount,
                                             VendBankAccountId  _vendBankAccountId,
                                             CompanyId          _company = curext())
    {
        CompanyId companyId;

        if (_vendBankAccountId)
        {
            if (!_company)
            {
                companyId = curext();
            }
            else
            {
                companyId = _company;

                if (!xDataArea::exist(companyId))
                {
                    return checkFailed(strFmt("@SYS10666", companyId));
                }
            }

            changecompany(companyId)
            {
                if (!VendBankAccount::find(_vendAccount, _vendBankAccountId))
                {
                    return checkFailed(strFmt("@SYS27061",_vendBankAccountId));
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(VendAccount _vendAccount, VendBankAccountId _vendBankAccountId )
    {
        boolean ret = true;

        if (!VendBankAccount::exist(_vendAccount, _vendBankAccountId))
        {
            ret = checkFailed(strFmt(VendBankAccount::txtNotExist(), _vendAccount, _vendBankAccountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(VendAccount _vendAccount, VendBankAccountId _vendBankAccountId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     vendBankAccount
                 where
                     vendBankAccount.VendAccount == _vendAccount &&
                    vendBankAccount.AccountID == _vendBankAccountId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static VendBankAccount find(
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendBankAccount vendBankAccount;

        vendBankAccount.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            vendBankAccount.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            vendBankAccount
            where
            vendBankAccount.VendAccount == _vendAccount &&
                    vendBankAccount.AccountID == _vendBankAccountId;

        return vendBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIsDraft</Name>
				<Source><![CDATA[
    public static boolean validateIsDraft(VendAccount       _vendAccount, 
                                          VendBankAccountId _vendBankAccountId,
                                          CompanyId         _company = curext())
    {
        CompanyId companyId;

        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;

            if (!xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }
        }

        changecompany(companyId)
        {
            VendBankAccount vendBankAccount = VendBankAccount::find(_vendAccount, _vendBankAccountId);
            if (vendBankAccount.RecId)
            {
                return vendBankAccount.isDraft();
            }
            else
            {
                return false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    public static VendBankAccount findByRecId(
        RecId    _recId,
        boolean  _forUpdate = false)
    {
        VendBankAccount vendBankAccount;

        if (_recId)
        {
            vendBankAccount.selectForUpdate(_forUpdate);

            select firstonly vendBankAccount
                where vendBankAccount.RecId == _recId;
        }

        return vendBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>VendBankAccount</c> record in the specified company.
    /// </summary>
    /// <param name="_companyId">
    /// The company in which to look for the record.
    /// </param>
    /// <param name="_vendAccount">
    /// The vendor account ID.
    /// </param>
    /// <param name="_vendBankAccountId">
    /// The bank account ID.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the returned <c>VendBankAccount</c> record is selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model to use; optional.
    /// </param>
    /// <returns>
    /// The <c>VendBankAccount</c> record, if found.
    /// </returns>
    public static VendBankAccount findByCompany(
        CompanyId _companyId,
        VendAccount _vendAccount,
        VendBankAccountId _vendBankAccountId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        VendBankAccount vendBankAccount;

        changecompany (_companyId)
        {
            vendBankAccount = VendBankAccount::find(_vendAccount, _vendBankAccountId, _forupdate, _concurrencyModel);
        }

        return vendBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault_LV</Name>
				<Source><![CDATA[
    public static VendBankAccount findDefault_LV(VendAccount _vendAccount, CurrencyCode _currencyCode)
    {
        VendBankAccount vendBankAccount;

        select firstonly vendBankAccount
            where vendBankAccount.VendAccount     == _vendAccount  &&
                  vendBankAccount.CurrencyCode    == _currencyCode &&
                  vendBankAccount.LvDefaultBank   == NoYes::Yes;

        return vendBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultByCompany_LV</Name>
				<Source><![CDATA[
    public static VendBankAccount findDefaultByCompany_LV(CompanyId          _companyId,
                                                          VendAccount        _vendAccount,
                                                          CurrencyCode       _currencyCode,
                                                          boolean            _forUpdate          = false,
                                                          ConcurrencyModel   _concurrencyModel   = ConcurrencyModel::Auto)
    {
        VendBankAccount vendBankAccount;

        changecompany(_companyId)
        {
            vendBankAccount.selectForUpdate(_forUpdate);
            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                vendBankAccount.concurrencyModel(_concurrencyModel);
            }

            select firstonly vendBankAccount
                where vendBankAccount.VendAccount     == _vendAccount  &&
                      vendBankAccount.CurrencyCode    == _currencyCode &&
                      vendBankAccount.LvDefaultBank   == NoYes::Yes;
        }

        return vendBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateAccountId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a new account ID, based on the number of records in the <c>VendBankAccount</c> account.
    /// </summary>
    /// <returns>
    /// The bank account ID.
    /// </returns>
    public static VendBankAccountId generateAccountId()
    {
        VendBankAccount vendBankAccountCount;

        select count(RecId) from vendBankAccountCount;

        return int642str(vendBankAccountCount.RecId + 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBankAccount</Name>
				<Source><![CDATA[
    public static void lookupBankAccount(FormStringControl  _ctrl,
                                        VendAccount         _vendAccount,
                                        CompanyId           _company = curext(),
                                        utcdatetime         _transDate = utcDateTimeNull(),
                                        VendPaymMode        _paymentMode = "")
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(VendBankAccount), _ctrl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         activeBankAccountsRange;
        QueryBuildRange         approvedBankAccountsRange;
        CompanyId               companyId;
        VendPaymModeTable       vendPaymMode;

        str expiryDateCriteria(utcdatetime _dt)
        {
            return strfmt("((ExpiryDate == \%1) || (ExpiryDate > \%2))", date2StrXpp(dateNull()), DateTimeUtil::toStr(_dt));
        }

        str activeDateCriteria(utcdatetime _dt)
        {
            return strfmt("(ActiveDate <= \%1)", DateTimeUtil::toStr(_dt));
        }

        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;

            if (!xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }
        }

        changecompany(companyId)
        {
            sysTableLookup.addLookupfield(fieldNum(VendBankAccount, AccountID), true);
            sysTableLookup.addLookupfield(fieldNum(VendBankAccount, Name));
            sysTableLookup.addLookupfield(fieldNum(VendBankAccount, AccountNum));

            qbds = query.addDataSource(tableNum(VendBankAccount));
            qbds.addRange(fieldNum(VendBankAccount, VendAccount)).value(queryValue(_vendAccount));
            
            if (VendBankAccountChangeProposalFeature::instance().isEnabled())
            {
                approvedBankAccountsRange = qbds.addRange(fieldNum(VendBankAccount,VersioningState));
                approvedBankAccountsRange.value(queryValue(VendBankAccountVersioningState::Approved));
                approvedBankAccountsRange.status(RangeStatus::Hidden);
            }
            
            if (_transDate)
            {
                //Lookup active bank accounts only.
                //Active banks either have expiry date as null or expiry date greater than payment date
                activeBankAccountsRange = qbds.addRange(fieldNum(VendBankAccount, ExpiryDate));
                activeBankAccountsRange.value(expiryDateCriteria(_transDate));
                activeBankAccountsRange.status(RangeStatus::Hidden);

                if (_paymentMode)
                {
                    //If for electronic payment bank is inactive based on active date
                    select firstonly vendPaymMode where vendPaymMode.PaymMode == _paymentMode
                        && VendBankAccount::checkPaymentTypeForElectronicPayment(vendPaymMode);
                    if (vendPaymMode)
                    {
                        activeBankAccountsRange = qbds.addRange(fieldNum(VendBankAccount, ActiveDate));
                        activeBankAccountsRange.value(activeDateCriteria(_transDate));
                        activeBankAccountsRange.status(RangeStatus::Hidden);
                    }
                }
            }
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentTypeForElectronicPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks for the payment type on <c>VendPaymmodetable</c>.
    /// </summary>
    /// <param name = "_vendPaymMode">
    ///     A <c>VendPaymModeTable</c> table buffer.
    /// </param>
    /// <returns>
    ///     true if payment type is electronic payment; otherwise, false.
    /// </returns>
    protected static boolean checkPaymentTypeForElectronicPayment(VendPaymModeTable _vendPaymMode)
    {
        return (_vendPaymMode.PaymentType == PaymentType::ElectronicPayment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS9779";
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventAddressClearOrEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method allows for <c>LogisticsLocationFormHandler</c> to determine if the address can be cleared or edited.
    /// </summary>
    /// <returns>
    /// true if the location is the same as the account's bank group location; otherwise, false.
    /// </returns>
    public boolean preventAddressClearOrEdit()
    {
        return LogisticsLocationAppUtil::callerIsBankGroupLocation(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAccountNameKanaMatchesJBAFormat_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the bank account kana name matches JBA format.
    /// </summary>
    /// <returns>
    /// True if bank account kana name matches JBA format; otherwise, false.
    /// </returns>
    public boolean checkAccountNameKanaMatchesJBAFormat_JP()
    {
        boolean doesNameKanaMatchJBAFormat = true;

        if (Bank_JP::nameKanaValidatePaymentFileNeeded())
        {
            doesNameKanaMatchJBAFormat = Bank_JP::validateBankNameKana(this.BankAccountNameKana_JP);
        }

        return doesNameKanaMatchJBAFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankGroup</Name>
				<Source><![CDATA[
    public void initFromBankGroup(BankGroup _bankGroup)
    {
        this.BankAccountMap::initFromBankGroup(_bankGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    public void renamePrimaryKey()
    {
        Common origRecord = this.orig();
        this.update();
        DimensionValueRenameV2 rename = DimensionValueRenameV2::construct(this, origRecord);
        rename.syncRenamedValuePreSuper();
        super();
        rename.syncRenamedValuePostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all vendor bank accounts related to the vendor.
    /// </summary>
    /// <param name="_vendTable">
    /// The VendTable record.
    /// </param>
    public static void deleteFromVend(VendTable _vendTable)
    {
        if(_vendTable.BankAccount)
        {
            _vendTable.BankAccount = '';
            _vendTable.update();
        }

        VendBankAccount vendBankAccount;
        while select forupdate vendBankAccount where vendBankAccount.VendAccount == _vendTable.AccountNum
        {
            if (vendBankAccount.validateDelete())
            {
                vendBankAccount.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyChangeProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the workflow is in such a state to allow changing to change proposal fields.
    /// </summary>
    /// <returns>True if changes can be made; otherwise false.</returns>
    [Hookable(false)]
    public boolean canModifyChangeProposal()
    {
        boolean ret = false;

        if (!this.IsDraft() 
            && (this.WorkflowState == VendBankAccountChangeProposalWorkflowState::NotSubmitted
            || this.WorkflowState == VendBankAccountChangeProposalWorkflowState::Rejected))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyChangeProposalRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void modifyChangeProposalRecord(FieldId _changeProposalField, FieldId _vendBankAccountField, VendBankAccountChangeProposalFields _controlledField)
    {
        VendBankAccount originalTable = this.orig();
        if (this.canModifyChangeProposal())
        {
            ttsbegin;
            // create or update an approval entry
            VendBankAccountChangeProposal change = VendBankAccountChangeProposal::findOrCreate(this.RecId, true);
            change.(_changeProposalField) = this.(_vendBankAccountField);
            change.setFlagForChangedField(_controlledField);
            change.update();
            ttscommit;
        }

        // reset the field to original (must be after change proposal creation)
        this.(_vendBankAccountField) = originalTable.(_vendBankAccountField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubmitToWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if changes to a vendor bank account can be submitted to workflow.
    /// </summary>
    /// <param name = "_workflowType">The workflowType</param>
    /// <returns>True if workflow can be submitted; otherwise false.</returns>
    [Replaceable]
    public boolean canSubmitToWorkflow(str _workflowType = '')
    {
        boolean ret = false;
    
        if (this.WorkflowState == VendBankAccountChangeProposalWorkflowState::NotSubmitted 
            && this.requiresApproval())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresApproval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the vendor bank account is in a state the requires approval.
    /// </summary>
    /// <returns>True if the vendor bank account requires apporval; otherwise false.</returns>
    [Hookable(false)]
    public boolean requiresApproval()
    {
        return VendBankAccountChangeProposal::existVendBankAccountRefRecId(this.RecId) || this.IsDraft();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkflowState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the state of the workflow field to a given value.
    /// </summary>
    /// <param name = "_recId">The ID of the record to update.</param>
    /// <param name = "_state">The desired state.</param>
    public static void updateWorkflowState(RecId _recId, VendBankAccountChangeProposalWorkflowState _state)
    {
        ttsbegin;
        VendBankAccount vendBankAccount = VendBankAccount::findByRecId(_recId, true);
        vendBankAccount.WorkflowState = _state;
        vendBankAccount.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS127241</DeveloperDocumentation>
	<FormRef>VendBankAccounts</FormRef>
	<Label>@SYS24216</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AccountIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Vendor</Modules>
	<PrimaryIndex>AccountIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankGroupID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankAccountDetails</Name>
			<Label>@GLS60009</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransType_JP</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankConstantSymbol</Name>
			<Label>@GLS107997</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankConstantSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Phone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhoneLocal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CellularPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Pager</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TeleFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Telex</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrespondenceBank_EE</Name>
			<Label>@GLS108989</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrespBank_EE</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrAccount_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LvDefaultBank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dummy</Name>
			<Label>@SYS79159</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankAccountNameKana_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransType_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirDunsNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDuns4Number</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignBank_RU</Name>
			<Label>@GLS223927</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForeignBank_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>foreignBankName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignAccount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignSWIFT_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountNameKana_JP</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankGroupID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankBIC_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirDunsNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendDuns4Number</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SWIFTNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankIBAN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrAccount_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankAccountOpenedIn_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FICreditorID_DK</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterimBank_EE</Name>
			<Label>@GLS108993</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntermBank_EE</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntermAccount_EE</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IntermediaryBank</Name>
			<Label>@GLS223733</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntermBankAccountId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>currentBankAccountStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankGroupID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankBIC_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrAccount_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankAccountOpenedIn_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankContractAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentTextCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MsgToBank</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentShow</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendPaymentTextCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MsgToBank</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS115073</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ActiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>currentBankAccountStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileBankInformation</Name>
			<Label>@SYS315075</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileBankInformationDetails</Name>
			<Label>@SYS315076</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankCIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SWIFTNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankIBAN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileBankList</Name>
			<Label>@SYS315077</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActiveDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExpiryDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VendProfileContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Phone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhoneLocal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CellularPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Pager</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TeleFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Telex</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ActiveDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountActiveDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankAccountNameKana_JP</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankAccountNameKana_JP</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionContextField>Location</CountryRegionContextField>
			<EnumType>BankAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCIN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCIN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankCodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankCodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankConstantSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS108021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankContractAccount</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>GiroContractAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankGroupID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankIBAN</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>BankIBAN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CellularPhone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PhoneMobile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPerson</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PersonName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrAccount_W</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCorrAccount_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespBank_EE</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CH,DK,EE,LT,LV,NO,SE,FR</CountryRegionCodes>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
			<GroupPrompt>@SYS7439</GroupPrompt>
			<Label>@GLS108989</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirDunsNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>LogisticsDunsNumberRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CrossExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExchRateRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRateRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExpiryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountExpiryDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignAccount_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>BankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignBank_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<RelationContext>BankGroupForeign_RU</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignSWIFT_RU</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
			<Label>@SYS9360</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermAccount_EE</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>CH,DK,EE,LT,LV,NO,SE,FR</CountryRegionCodes>
			<ExtendedDataType>BankAccount</ExtendedDataType>
			<GroupPrompt>@SYS1996</GroupPrompt>
			<Label>@GLS108995</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermBank_EE</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CH,DK,EE,LT,LV,NO,SE,FR</CountryRegionCodes>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
			<GroupPrompt>@SYS7439</GroupPrompt>
			<Label>@GLS108993</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermBankAccountId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CH,PL,FR</CountryRegionCodes>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Label>@GLS113304</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LogisticsLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LvDefaultBank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LVDefaultBank</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MsgToBank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankMsgToBank</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Pager</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Pager</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Phone</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhoneLocal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PhoneLocal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankRegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SMS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMS</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpecificSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>SpecificSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SWIFTNo</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TeleFax</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TeleFax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Telex</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Telex</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransType_JP</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendBankTransType_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>URL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendDuns4Number</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>VendDUNS4Num</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendPaymentTextCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendPaymTextCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FICreditorID_DK</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FICreditorID_DK</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankAccount_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtCorrespondentBankAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankAddress_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtCorrespondentBankAddress</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankName_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtCorrespondentBankName</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankSWIFT_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtCorrespondentBankSWIFT</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankAccount_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtIntermediateBankAccount</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankAddress_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtIntermediateBankAddress</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankName_LT</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtIntermediateBankName</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankSWIFT_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>LtIntrastatDeclarationId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Comments</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@SYS5343</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reviewed</Name>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankInformationOrigin</Name>
			<Label>@SYS10299</Label>
			<EnumType>BankInformationOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WorkflowState</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>VendBankAccountChangeProposalFeature</FeatureClass>
			<Visible>No</Visible>
			<EnumType>VendBankAccountChangeProposalWorkflowState</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VersioningState</Name>
			<AllowEdit>No</AllowEdit>
			<FeatureClass>VendBankAccountChangeProposalFeature</FeatureClass>
			<EnumType>VendBankAccountVersioningState</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>VendAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DirDunsNumberIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DirDunsNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankConstantSymbolIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankConstantSymbol</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountID</MapField>
					<MapFieldTo>AccountID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCIN</MapField>
					<MapFieldTo>BankCIN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCodeType</MapField>
					<MapFieldTo>BankCodeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankContractAccount</MapField>
					<MapFieldTo>BankContractAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankGroupId</MapField>
					<MapFieldTo>BankGroupID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankIBAN</MapField>
					<MapFieldTo>BankIBAN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CellularPhone</MapField>
					<MapFieldTo>CellularPhone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPerson</MapField>
					<MapFieldTo>ContactPerson</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrAccount_W</MapField>
					<MapFieldTo>CorrAccount_W</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccount</MapField>
					<MapFieldTo>VendAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendPaymTextCode</MapField>
					<MapFieldTo>VendPaymentTextCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Email</MapField>
					<MapFieldTo>Email</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateRef</MapField>
					<MapFieldTo>ExchRateRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignAccount_RU</MapField>
					<MapFieldTo>ForeignAccount_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignBank_RU</MapField>
					<MapFieldTo>ForeignBank_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignSWIFT_RU</MapField>
					<MapFieldTo>ForeignSWIFT_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GiroContractAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>isBankPrenote</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MsgToBank</MapField>
					<MapFieldTo>MsgToBank</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Pager</MapField>
					<MapFieldTo>Pager</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Phone</MapField>
					<MapFieldTo>Phone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PhoneLocal</MapField>
					<MapFieldTo>PhoneLocal</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrenoteResponseDays</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RegistrationNum</MapField>
					<MapFieldTo>RegistrationNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SMS</MapField>
					<MapFieldTo>SMS</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SWIFTNo</MapField>
					<MapFieldTo>SWIFTNo</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TeleFax</MapField>
					<MapFieldTo>TeleFax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Telex</MapField>
					<MapFieldTo>Telex</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>URL</MapField>
					<MapFieldTo>URL</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>LogisticsLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankConstantSymbol</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BankConstantSymbol</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankConstantSymbol</Name>
					<Field>BankConstantSymbol</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankGroupID</Name>
					<SourceEDT>BankGroupId</SourceEDT>
					<Field>BankGroupID</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BankGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankGroup_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankGroup_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankGroupID</Name>
					<Field>BankGroupID</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankGroupForeign_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankGroupForeign_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>BankType_RU_Extern</Name>
					<RelatedField>BankType_RU</RelatedField>
					<ValueStr>BankType_RU::Foreign</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ForeignBank_RU</Name>
					<Field>ForeignBank_RU</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CorrespBank_EE</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CorrespBank_EE</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrespBank_EE</Name>
					<SourceEDT>BankGroupId</SourceEDT>
					<Field>CorrespBank_EE</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirDunsNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirDunsNumber</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DirDunsNumber</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DirDunsNumber_VendBankAccount</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirDunsNumber</Name>
					<Field>DirDunsNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>IntermBank_EE</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InterimBank_EE</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntermBank_EE</Name>
					<SourceEDT>BankGroupId</SourceEDT>
					<Field>IntermBank_EE</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>IntermBankAccountId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntermBankAccountId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>IntermBankAccountId</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntermBankAccountId</Name>
					<SourceEDT>VendBankAccountId</SourceEDT>
					<Field>IntermBankAccountId</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Location_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocation</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocation_VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocationFK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocation_VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LogisticsLocation</Name>
					<Field>LogisticsLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendBankAccount</Name>
			<EntityRelationshipRole>@SYS123434</EntityRelationshipRole>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>VendBankAccount_VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<Field>VendAccount</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountID</Name>
					<Field>AccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>