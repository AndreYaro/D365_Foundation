<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkPolicyLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkPolicyLocation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(WHSWorkPolicyLocation, InventLocationId):
                if (!InventLocation::find(this.InventLocationId).WHSEnabled)
                {
                    ret = checkFailed("@WAX4825");
                }
                break;
            case fieldNum(WHSWorkPolicyLocation, WMSLocationId):
                if (ret && this.InventLocationId)
                {
                    ret = this.validateLocationIsUnique() && this.validateNonLPControlledLocation();
                }
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocationIsUnique</Name>
				<Source><![CDATA[
    private boolean validateLocationIsUnique()
    {
        WHSWorkPolicyLocation otherPolicy = WHSWorkPolicyLocation::find(this.InventLocationId, this.WMSLocationId);

        if (otherPolicy && otherPolicy.WorkPolicy != this.WorkPolicy)
        {
            return checkFailed(strFmt("@WAX:WorkPolicyLocationAlreadyInUse", WHSWorkPolicy::findByRecId(otherPolicy.WorkPolicy).Name));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonLPControlledLocation</Name>
				<Source><![CDATA[
    private boolean validateNonLPControlledLocation()
    {
        WMSLocation location = WMSLocation::find(this.WMSLocationId, this.InventLocationId);

        if (!location.whsLocationIsLPControlled())
        {
            // If you are adding a non-LP location and "Finished goods put-away" or "Co/by products put away"
            // exist, the rule must be for work creation "never"
            return this.validateMandatoryWorkRulesForNonLPLocation(this.WorkPolicy, WHSWorkCreationMethod::Never);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMandatoryWorkRulesForNonLPLocation</Name>
				<Source><![CDATA[
    private boolean validateMandatoryWorkRulesForNonLPLocation(WHSWorkPolicyRecId _workPolicyRecId, WHSWorkCreationMethod _workCreationMethod)
    {
        WHSWorkCreationRule prodPut = WHSWorkCreationRule::findForCreationProcess(_workPolicyRecId, WHSWorkTransType::ProdPut, WhsWorkProcess::All);
        if (prodPut.WorkCreationMethod != _workCreationMethod)
        {
            return checkFailed(strFmt("@WAX:WorkPolicyLocationNotAllowedForCreationRule", prodPut.WorkCreationMethod, prodPut.WorkTransType));
        }

        WHSWorkCreationRule prodProcessPut = WHSWorkCreationRule::findForCreationProcess(_workPolicyRecId, WHSWorkTransType::ProdProcessPut, WhsWorkProcess::All);
        if (prodProcessPut.WorkCreationMethod != _workCreationMethod)
        {
            return checkFailed(strFmt("@WAX:WorkPolicyLocationNotAllowedForCreationRule", prodProcessPut.WorkCreationMethod, prodProcessPut.WorkTransType));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeAssociationToWorkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes an existing <c>WHSWorkPolicyLocation</c> to associate a location to another work policy
    /// </summary>
    /// <param name="_wmsLocation">
    /// The location to change the association for
    /// </param>
    /// <param name="_newWorkPolicy">
    /// The new Work policy to associate the location with
    /// </param>
    public static void changeAssociationToWorkPolicy(WMSLocation _wmsLocation, WHSWorkPolicy _newWorkPolicy)
    {
        WHSWorkPolicyLocation whsWorkPolicyLocation;

        if (_newWorkPolicy && _wmsLocation)
        {
            ttsbegin;

            update_recordset whsWorkPolicyLocation
                setting WorkPolicy = _newWorkPolicy.RecId
                  where whsWorkPolicyLocation.InventLocationId == _wmsLocation.inventLocationId
                     && whsWorkPolicyLocation.WMSLocationId    == _wmsLocation.wMSLocationId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>associateLocationToWorkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates a given location with a given Work policy
    /// </summary>
    /// <param name="_wmsLocation">
    /// The location to associate with the Work policy
    /// </param>
    /// <param name="_workPolicy">
    /// The Work policy to associate the location with
    /// </param>
    public static void associateLocationToWorkPolicy(WMSLocation _wmsLocation, WHSWorkPolicy _workPolicy)
    {
        WHSWorkPolicyLocation whsWorkPolicyLocation;

        if (_workPolicy && _wmsLocation)
        {
            ttsbegin;
            whsWorkPolicyLocation.WorkPolicy = _workPolicy.RecId;
            whsWorkPolicyLocation.InventLocationId = _wmsLocation.inventLocationId;
            whsWorkPolicyLocation.WMSLocationId = _wmsLocation.wMSLocationId;
            whsWorkPolicyLocation.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeLocationFromWorkPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a location from the Work policy it is currently associated with
    /// </summary>
    /// <param name="_wmsLocation">
    /// The location to remove
    /// </param>
    public static void removeLocationFromWorkPolicy(WMSLocation _wmsLocation)
    {
        WHSWorkPolicyLocation whsWorkPolicyLocation;

        if (_wmsLocation)
        {
            ttsbegin;

            delete_from whsWorkPolicyLocation
                where whsWorkPolicyLocation.InventLocationId == _wmsLocation.inventLocationId
                   && whsWorkPolicyLocation.WMSLocationId    == _wmsLocation.wMSLocationId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNonLpLocationsExist</Name>
				<Source><![CDATA[
    public static boolean checkNonLpLocationsExist(WHSWorkPolicyRecId _workPolicy)
    {
        WHSWorkPolicyLocation   workPolicyLocation = WHSWorkPolicyLocation::findNonLPLocationPolicy(_workPolicy);

        return workPolicyLocation.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNonLPLocationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a c>WHSWorkPolicyLocation</c> record with a non license plate controlled location for a work policy. 
    /// </summary>
    /// <param name = "_workPolicy">The work policy.</param>
    /// <returns>A c>WHSWorkPolicyLocation</c> record.</returns>
    [Hookable(false)]
    internal static WHSWorkPolicyLocation findNonLPLocationPolicy(WHSWorkPolicyRecId _workPolicy)
    {
        WHSWorkPolicyLocation   workPolicyLocation;
        WMSLocation             location;
        WHSLocationProfile      locProfile;

        select firstonly workPolicyLocation
               where workPolicyLocation.WorkPolicy == _workPolicy
            exists join location
               where location.inventLocationId  == workPolicyLocation.InventLocationId
                  && location.wMSLocationId     == workPolicyLocation.WMSLocationId
            exists join locProfile
               where location.LocProfileId      == locProfile.LocProfileId
                  && locProfile.LPControlled    == NoYes::No;

        return workPolicyLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNonLPControlledAndOutputLocationOnAnyResourceGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if current location is not LP controlled and is used as output location on any Resource group
    /// </summary>
    /// <returns>
    /// true if location is
    ///  - LP controlled, or
    ///  - not LP controlled and is used as output location on any Resource group;
    /// otherwise returns false
    /// </returns>
    private boolean isNonLPControlledAndOutputLocationOnAnyResourceGroup()
    {
        WrkCtrResourceGroup resourceGroup;
        WMSLocation         wmsLocation;
        WHSLocationProfile  whsLocationProfile;

        select firstonly resourceGroup
            where resourceGroup.OutputInventLocationId  == this.orig().inventLocationId
               && resourceGroup.OutputWMSLocationId     == this.orig().wMSLocationId
            exists join wmsLocation
                where wmsLocation.inventLocationId      == this.orig().inventLocationId
                   && wmsLocation.wMSLocationId         == this.orig().wMSLocationId
            exists join whsLocationProfile
                where whsLocationProfile.LocProfileId == wmsLocation.LocProfileId
                   && whsLocationProfile.LPControlled == NoYes::No;

        return resourceGroup.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ok = super();

        if (ok
            && this.WMSLocationId != this.orig().WMSLocationId)
        {
            ok = this.checkIsNonLPControlledAndOutputLocationOnAnyResourceGroup();
        }
                
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ok = super();

        ok = ok && this.checkIsNonLPControlledAndOutputLocationOnAnyResourceGroup();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsNonLPControlledAndOutputLocationOnAnyResourceGroup</Name>
				<Source><![CDATA[
    private boolean checkIsNonLPControlledAndOutputLocationOnAnyResourceGroup()
    {
        boolean ok = true;

        if (this.isNonLPControlledAndOutputLocationOnAnyResourceGroup())
        {
            // Not allowed to update or delete location if the original location is not LP controlled and is used as output location on a Resource group
            ok = checkFailed(strFmt("@WAX:LocationIsOutputLocationOnResourceGroup", this.orig().wMSLocationId));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WHSWorkPolicyLocation</c> record with given warehouse and location.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Id of the warehouse.
    /// </param>
    /// <param name="_wmsLocationId">
    /// Id of the location.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static WHSWorkPolicyLocation find(InventLocationId _inventLocationId, WMSLocationId _wmsLocationId, boolean _forUpdate = false)
    {
        WHSWorkPolicyLocation workPolicyLocation;

        if (_inventLocationId && _wmsLocationId)
        {
            workPolicyLocation.selectForUpdate(_forUpdate);

            select firstonly workPolicyLocation
                where workPolicyLocation.InventLocationId == _inventLocationId
                   && workPolicyLocation.WMSLocationId    == _wmsLocationId;
        }

        return workPolicyLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@WAX:WorkPolicyLocation</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>WorkPolicy</TitleField1>
	<TitleField2>WMSLocationId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>InventLocationIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WMSLocationId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkPolicy</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSWorkPolicyRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WMSLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSLocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventLocationIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventLocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>WMSLocationId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WorkPolicyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkPolicy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WMSLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WMSLocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<Field>InventLocationId</Field>
					<RelatedField>inventLocationId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WMSLocationId</Name>
					<Field>WMSLocationId</Field>
					<RelatedField>wMSLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSWorkPolicy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkPolicy</Name>
					<Field>WorkPolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>