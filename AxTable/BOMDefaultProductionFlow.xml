<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMDefaultProductionFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BOMDefaultProductionFlow extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayQuantity</Name>
				<Source><![CDATA[
    public display ProductQuantity displayQuantity(
        LeanCostingFacadeBase _leanCostingFacade = LeanCostingFacade::construct())
    {
        if (   !this.LeanProductionFlowReference
            || !this.ItemId
            || !this.InventSiteId)
        {
            return 0;
        }

        return _leanCostingFacade.getKanbanQuantity(
            this.LeanProductionFlowReference,
            this.ItemId,
            this.InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editProductionFlowName</Name>
				<Source><![CDATA[
    public edit PlanName editProductionFlowName(
        boolean  _set,
        PlanName _planName)
    {
        if (_set)
        {
            this.LeanProductionFlowReference = LeanProductionFlowReference::findPlanReference(PlanReference::findPlanName(_planName).RecId).RecId;
        }

        return PlanReference::find(LeanProductionFlowReference::find(this.LeanProductionFlowReference).PlanReference).PlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                         result;
        PlanReference                   planReference;
        LeanProductionFlowReference     leanProductionFlowReference;
        Set                             productionFlowReferenceRecIdSet;
        LeanCostingFacadeBase           leanCostingFacade = LeanCostingFacade::construct();
        InventDim                       inventDim;

        result = super();

        if (result)
        {
            leanProductionFlowReference = LeanProductionFlowReference::find(this.LeanProductionFlowReference);
            planReference               = leanProductionFlowReference.planReference();

            if (planReference.LegalEntity != CompanyInfo::current())
            {
                result = checkFailed(strfmt("@SYS332716",planReference.PlanName));
            }
        }

        if (result)
        {
            inventDim.InventSiteId = this.InventSiteId;
            productionFlowReferenceRecIdSet = leanCostingFacade.getProductionFlows(
                                                                    InventItemParmData::construct(
                                                                        this.ItemId,
                                                                        InventDim::findOrCreate(inventDim).inventDimId),
                                                                    this.InventSiteId,
                                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            if (!productionFlowReferenceRecIdSet.in(this.LeanProductionFlowReference))
            {
                result = checkFailed(strfmt("@SYS153468",
                                            this.ItemId,
                                            this.InventSiteId,
                                            planReference.PlanName));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLookupProductionFlowQuery</Name>
				<Source><![CDATA[
    public static Query buildLookupProductionFlowQuery(
        InventItemParmData      _itemParmData,
        InventSiteId            _inventSiteId,
        date                    _date,
        LegalEntity             _legalEntity       = CompanyInfo::current(),
        LeanCostingFacadeBase   _leanCostingFacade = LeanCostingFacade::construct())
    {
        str                     rangeValueStr = "";
        Set                     productionFlowReferenceRecIdSet;
        SetEnumerator           se;
        recId                   productionFlowReferenceRecId;
        Query                   query = new Query();
        QueryBuildDataSource    qbdsPlanReference           = query.addDataSource(tablenum(PlanReference));
        QueryBuildDataSource    qbdsProductionFlowReference = qbdsPlanReference.addDataSource(tablenum(LeanProductionFlowReference));
        QueryBuildRange         queryBuildRange;
        InventDim               inventDim;

        inventDim.InventSiteId = _inventSiteId;

        qbdsProductionFlowReference.joinMode(JoinMode::ExistsJoin);
        qbdsProductionFlowReference.addLink(fieldnum(PlanReference, RecId), fieldnum(LeanProductionFlowReference, PlanReference));

        // get the set of production flow reference RecIds
        productionFlowReferenceRecIdSet = _leanCostingFacade.getProductionFlows(
            _itemParmData,
            _inventSiteId,
            _date);

        // build the range string
        if (productionFlowReferenceRecIdSet.elements()>0)
        {
            se = productionFlowReferenceRecIdSet.getEnumerator();
            if (se.moveNext())
            {
                productionFlowReferenceRecId = se.current();
                rangeValueStr  = strfmt('((%1.%2 == %3)',
                                    qbdsProductionFlowReference.name(),
                                    fieldstr(LeanProductionFlowReference, RecId),
                                    productionFlowReferenceRecId);
            }
            while (se.moveNext())
            {
                productionFlowReferenceRecId = se.current();
                rangeValueStr += strfmt(' || (%1.%2 == %3)',
                    qbdsProductionFlowReference.name(),
                    fieldstr(LeanProductionFlowReference, RecId),
                    productionFlowReferenceRecId);
            }
            rangeValueStr  += ')';
            queryBuildRange = qbdsProductionFlowReference.addRange(fieldnum(LeanProductionFlowReference, RecId));
            queryBuildRange.value(rangeValueStr);
        }
        else
        {
            // always empty range
            qbdsProductionFlowReference.addRange(fieldnum(LeanProductionFlowReference, RecId)).value('0');
        }

        // legal entity range
        qbdsPlanReference.addRange(fieldnum(PlanReference,LegalEntity)).value(queryValue(_legalEntity));

        qbdsPlanReference.addSortField(fieldnum(PlanReference, PlanName),SortOrder::Ascending);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultProductionFlow</Name>
				<Source><![CDATA[
    public static BOMDefaultProductionFlow findDefaultProductionFlow(
        ItemId       _itemId,
        InventSiteId _inventSiteId,
        boolean      _forUpdate = false)
    {
        BOMDefaultProductionFlow    bomDefaultProductionFlow;

        if (   _itemId
            && _inventSiteId)
        {
            bomDefaultProductionFlow.selectForUpdate(_forUpdate);

            select firstonly bomDefaultProductionFlow
                where bomDefaultProductionFlow.ItemId       == _itemId
                   && bomDefaultProductionFlow.InventSiteId == _inventSiteId;
        }

        return bomDefaultProductionFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupProductionFlow</Name>
				<Source><![CDATA[
    public static void lookupProductionFlow(
        FormStringControl       _lookupCtrl,
        InventItemParmData      _itemParmData,
        InventSiteId            _inventSiteId,
        date                    _date,
        LegalEntity             _legalEntity       = CompanyInfo::current(),
        LeanCostingFacadeBase   _leanCostingFacade = LeanCostingFacade::construct())
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(PlanReference), _lookupCtrl);
        Query                   query = BOMDefaultProductionFlow::buildLookupProductionFlowQuery(
                                            _itemParmData,
                                            _inventSiteId,
                                            _date,
                                            _legalEntity,
                                            _leanCostingFacade);

        sysTableLookup.addLookupfield(fieldnum(PlanReference, PlanName), true);
        sysTableLookup.addLookupfield(fieldnum(PlanReference, PlanDescription), false);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS324196</DeveloperDocumentation>
	<FormRef>BOMDefaultProductionFlow</FormRef>
	<Label>@SYS152668</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventSiteId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>DefaultProductionFlow</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LeanProductionFlowReference</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeanProductionFlow</Name>
			<Label>@SYS131941</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeanProductionFlowReference</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editProductionFlowName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editProductionFlowName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>displayQuantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LeanProductionFlowReference</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131941</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DefaultProductionFlow</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventSiteId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LeanProductionFlowReferenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>LeanProductionFlowReference</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LeanProductionFlowReference</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanProductionFlowReference</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProductionFlowReference</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultProductionFlow</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LeanProductionFlowReference</Name>
					<Field>LeanProductionFlowReference</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>