<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXDataStoreChannel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCDXDataStoreChannel extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsBegin;

        super();

        RetailConnDatabaseProfile newDatabaseProfile = RetailConnDatabaseProfile::findByRecId(this.DatabaseProfile);

        // CustomerSearch database cannot be used as live database
        if (newDatabaseProfile.Name != RetailCustomerSearchConstants::CdxDatabaseProfileName &&
            newDatabaseProfile.DataStoreType != RetailCDXDataStoreType::OfflineDatabase)
        {
            // specify this database to be the live channel database for this channel, if there's not one yet.
            RetailChannelTableExt channelExt;

            select firstOnly forUpdate channelExt
                where channelExt.Channel == this.Channel;

            if (!channelExt)
            {
                channelExt.initValue();
                channelExt.Channel = this.Channel;
                channelExt.LiveChannelDatabase = this.DatabaseProfile;
                channelExt.insert();
            }
            else
            {
                RetailCDXDataStoreChannel auxDataStoreChannel;
                RetailConnDatabaseProfile currentLiveDatabaseProfile = RetailConnDatabaseProfile::findByRecId(channelExt.LiveChannelDatabase);

                select firstOnly auxDataStoreChannel
                    where auxDataStoreChannel.Channel == this.Channel &&
                    auxDataStoreChannel.DatabaseProfile == channelExt.LiveChannelDatabase;
            
                // If the current live channel DB is invalid/offline or if the current live channel DB is not mapped to that channel, then overwrite it
                if ((!currentLiveDatabaseProfile || !auxDataStoreChannel ||
                    (currentLiveDatabaseProfile && currentLiveDatabaseProfile.DataStoreType == RetailCDXDataStoreType::OfflineDatabase)))
                {
                    channelExt.LiveChannelDatabase = this.DatabaseProfile;
                    channelExt.update();
                }
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        RetailChannelTableExt channelExt;
        OMOperatingUnit ou;
        RetailChannelTable channel;
        RetailConnDatabaseProfile dataStore;
        boolean ret;

        ret = super();

        // block the delete if this database is currently the live channel database
        select firstOnly RecId from channelExt
            where channelExt.Channel == this.Channel
               && channelExt.LiveChannelDatabase == this.DatabaseProfile;

        if (channelExt)
        {
            select firstonly Name
            from dataStore
            where dataStore.RecId == this.DatabaseProfile;

            select firstOnly Name
            from ou
                exists join channel
                where channel.OMOperatingUnitID == ou.RecId
                && channel.channelType != RetailChannelType::MCRCallCenter
                && channel.RecId == this.Channel;

            // Cannot remove channel %1 from %2 which is currently the live channel database.
            if (ou)
            {
                ret = checkFailed(strFmt("@REX4520352", ou.Name, dataStore.Name));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning message and prompts the user for a confirmation whenever a channel to channel database mapping change is made.
    /// </summary>
    /// <returns>True if the validation is successful and the change can be saved; false otherwise.</returns>
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (this.isFormDataSource() && Box::yesNo("@Retail:MappingChannelToChannelDatabaseWarning", DialogButton::No) == DialogButton::No)
        {
            ret = false;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsInDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current <c>RetailCDXDataStoreChannel</c> mapping belongs to the specified database group or not.
    /// </summary>
    /// <param name = "_dataGroupRecId">The datagroup record Id.</param>
    /// <returns>True if the the current <c>RetailCDXDataStoreChannel</c> mapping belongs to the specified datagroup; false otherwise.</returns>
    internal boolean existsInDataGroup(RefRecId _dataGroupRecId)
    {
        RetailCDXDataGroup retailCDXDataGroup;
        RetailConnDatabaseProfile dataStore;

        select firstonly RecId
            from retailCDXDataGroup
            where retailCDXDataGroup.RecId == _dataGroupRecId
                exists join dataStore
                where dataStore.DataGroup == retailCDXDataGroup.RecId &&
                      dataStore.RecId     == this.DatabaseProfile;

        return retailCDXDataGroup.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RetailCDXDataStoreChannel</c> record corresponding to the specified datastore channel mapping record Id.
    /// </summary>
    /// <param name = "_recId">The datastore to channel mapping record Id.</param>
    /// <param name = "_forUpdate">Flag indicating if the returned record should be updatable or not.</param>
    /// <returns><c>RetailCDXDataStoreChannel</c> record corresponding to the specified datastore channel mapping record Id.</returns>
    internal static RetailCDXDataStoreChannel find(RecId _recId, boolean _forUpdate = false)
    {
        RetailCDXDataStoreChannel retailCDXDataStoreChannel;

        retailCDXDataStoreChannel.selectForUpdate(_forUpdate);

        select retailCDXDataStoreChannel
            where retailCDXDataStoreChannel.RecId == _recId;

        return retailCDXDataStoreChannel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTop10UnmappedChannelsWithOfflineEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the top 10 first channels that are not mapped to an offline database, but not to a channel database.
    /// </summary>
    /// <param name = "_dataGroupRecId">The data group record Id.</param>
    /// <returns>A container with the channel IDs.</returns>
    internal static container getTop10UnmappedChannelsWithOfflineEnabled(RecId _dataGroupRecId)
    {
        Retailchanneltable retailStoreTable;
        RetailConnDatabaseProfile databaseProfileOffline;
        RetailConnDatabaseProfile databaseProfileOnline;
        RetailCdxDataStoreChannel dataStoreChannelOffline;
        RetailCdxDataStoreChannel dataStoreChannelOnline;

        container unmappedChannelList;

        while select firstOnly10 RetailChannelId from retailStoreTable
         exists join dataStoreChannelOffline
            where dataStoreChannelOffline.Channel == retailStoreTable.RecId
         exists join databaseProfileOffline
            where databaseProfileOffline.RecId == dataStoreChannelOffline.DatabaseProfile &&
                  databaseProfileOffline.DataStoreType == RetailCDXDataStoreType::OfflineDatabase &&
                  databaseProfileOffline.DataGroup == _dataGroupRecId
        notexists join dataStoreChannelOnline
            where dataStoreChannelOnline.Channel == retailStoreTable.RecId
        exists join databaseProfileOnline
            where databaseProfileOnline.RecId == dataStoreChannelOnline.DatabaseProfile &&
                  databaseProfileOnline.DataStoreType == RetailCDXDataStoreType::ChannelDatabase &&
                  databaseProfileOnline.DataGroup == _dataGroupRecId
        {
            if (!conFind(unmappedChannelList,retailStoreTable.RetailChannelId))
            {
                unmappedChannelList += retailStoreTable.RetailChannelId;
            }

            if(conLen(unmappedChannelList) == 10)
            {
                break;
            }
        }
        return unmappedChannelList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnmappedChannelCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of channels that are mapped to an offline datastore but not to any online datastore in the same data group.
    /// </summary>
    /// <param name = "_dataGroupRecId">The data group record Id.</param>
    /// <returns>Count of channels that are mapped to an offline datastore but not to any online datastore in the same data group.</returns>
    internal static int getUnmappedChannelCount(RecId _dataGroupRecId)
    {
        Retailchanneltable retailStoreTable;
        RetailConnDatabaseProfile databaseProfileOffline;
        RetailConnDatabaseProfile databaseProfileOnline;
        RetailCdxDataStoreChannel dataStoreChannelOffline;
        RetailCdxDataStoreChannel dataStoreChannelOnline;

        select count(RecId) from retailStoreTable
         exists join dataStoreChannelOffline
            where dataStoreChannelOffline.Channel == retailStoreTable.RecId
         exists join databaseProfileOffline
            where databaseProfileOffline.RecId == dataStoreChannelOffline.DatabaseProfile &&
              databaseProfileOffline.DataStoreType == RetailCDXDataStoreType::OfflineDatabase &&
              databaseProfileOffline.DataGroup == _dataGroupRecId
         notexists join dataStoreChannelOnline
            where dataStoreChannelOnline.Channel == retailStoreTable.RecId
         exists join databaseProfileOnline
            where databaseProfileOnline.RecId == dataStoreChannelOnline.DatabaseProfile &&
              databaseProfileOnline.DataStoreType == RetailCDXDataStoreType::ChannelDatabase &&
              databaseProfileOnline.DataGroup == _dataGroupRecId;

        return retailStoreTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventLocationDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the Legal entity.
    /// </summary>
    /// <returns>
    /// The Legal entity to display.
    /// </returns>
    public display str getInventLocationDataAreaId()
    {
        RetailChannelTable retailChannelTable;

        select firstOnly inventLocationDataAreaId from retailChannelTable
            where retailChannelTable.RecId == this.Channel;

        return retailChannelTable.inventLocationDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnmappedChannelDataGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show warning of Data Group channels that are not mapped to a channel database, but mapped to an offline database.
    /// </summary>
    /// <param name = "_showWarning">Flag indicating to show warning or not.</param>
    /// <returns>
    /// True if it finds the data group channels that are not mapped to a channel database but are mapped to an offline database.
    /// </returns>
    internal static boolean checkUnmappedChannelDataGroup(boolean _showWarning)
    {
        RetailCdxDataGroup dataGroup;
        RetailConnDatabaseProfile databaseProfileOffline;
        RetailConnDatabaseProfile databaseProfileOnline;
        boolean unmappedChannelFound;
    
        while select RecId, Name from dataGroup
         exists join databaseProfileOffline
            where databaseProfileOffline.DataStoreType == RetailCDXDataStoreType::OfflineDatabase &&
              databaseProfileOffline.DataGroup == dataGroup.RecId
         exists join databaseProfileOnline
            where databaseProfileOnline.DataStoreType == RetailCDXDataStoreType::ChannelDatabase &&
              databaseProfileOnline.DataGroup == dataGroup.RecId
        {
            // Find channels not mapped to a channel database, but mapped to an offline database
            int unmappedChannelCount = RetailCdxDataStoreChannel::getUnmappedChannelCount(dataGroup.RecId);

            if (unmappedChannelCount > 0)
            {
                unmappedChannelFound = true;

                if (_showWarning)
                {
                    container unmappedChannelList = RetailCdxDataStoreChannel::getTop10UnmappedChannelsWithOfflineEnabled(dataGroup.RecId);
                    warning(strFmt("@Retail:UnmappedChannelListWarning", unmappedChannelCount, conLen(unmappedChannelList), con2Str(unmappedChannelList), dataGroup.Name));
                }
            }
        }

        return unmappedChannelFound;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX1525</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@REX1524</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>DatabaseProfile</TitleField1>
	<TitleField2>Channel</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ChannelManagement</Modules>
	<ReplacementKey>DataStoreChannelIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DatabaseProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DatabaseProfile</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@RET607</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Channel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DatabaseProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DataGroupModifiedDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Channel</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS88788</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DatabaseProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DataGroupModifiedDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCdxDataGroupModifiedDateTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>DataStoreChannelIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Channel</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>DatabaseProfile</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailChannelTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailChannelTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Channel</Name>
					<Field>Channel</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailConnDatabaseProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>RetailConnDatabaseProfile</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DatabaseProfile</Name>
					<Field>DatabaseProfile</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>