<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHourSalesPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjHourSalesPrice extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    display CostPrice costPrice()
    {
        DictTable dictTable = new DictTable(tableNum(ProjHourCostPrice));

        if (dictTable.rights() >= AccessType::View)
        {
            ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
				this.ProjId,
                this.Resource,
                this.CategoryId,
                '',
                this.TransDate,
                '',
                '',
                '',
                this.ResourceCategory);
            return ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current record and updates the EndDate of the previous record.
    /// </summary>
public void delete()
    {
        #ProjPrice

        ProjHourSalesPrice previousBuff;
        ProjHourSalesPrice nextBuff;
        date dateMax = dateMax();

        previousBuff = ProjHourSalesPrice::findByDatePrevious(this.ProjId,
                                                          this.Resource,
                                                          this.CategoryId,
                                                          this.CurrencyId,
                                                          this.TransDate,
                                                          this.ProjValidFor,
                                                          this.ProjPriceGroup,
                                                          this.PSACustAccount,
                                                          this.PSAProjInvoiceProjId,
                                                          this.ResourceCategory,
                                                          true);
        if (previousBuff)
        {
            if (this.EndDate == dateMax)
            {
                // This is the last chronological record by date, therefore,
                // update the EndDate of the previous one to dateMax()
                ttsbegin;
                previousBuff.EndDate = dateMax;
                previousBuff.update();
                super();
                ttscommit;
            }
            else
            {
                nextBuff = ProjHourSalesPrice::findByDateNext(this.ProjId,
                                                            this.Resource,
                                                            this.CategoryId,
                                                            this.CurrencyId,
                                                            this.TransDate,
                                                            this.ProjValidFor,
                                                            this.ProjPriceGroup,
                                                            this.PSACustAccount,
                                                            this.PSAProjInvoiceProjId,
                                                            this.ResourceCategory);

                if (nextBuff)
                {
                    // Updates the EndDate of the previous previous to the start date - 1 of the next record,
                    // and deletes the current record.
                    ttsbegin;
                    previousBuff.EndDate = nextBuff.TransDate - 1;
                    previousBuff.update();
                    super();
                    ttscommit;
                }
                else
                {
                    super();
                }
            }
        }
        else
        {
            super();
        }

        SysTransactionScopeCache::clear(tableStr(ProjHourSalesPrice));
        ProjHourSalesPrice::clearPriceCache(#ProjHourDateSalesPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current record and updates the EndDate of the previous record.
    /// Also ensures that the ExtensionHash field is updated before writing to the database.
    /// </summary>
public void insert()
    {
        #ProjPrice

        ProjHourSalesPrice currentBuff;
        ProjHourSalesPrice previousBuff;
        ProjHourSalesPrice nextBuff;
        date dateMax = dateMax();

        // Compute the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjHourSalesPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        currentBuff = ProjHourSalesPrice::findByDateCurrent(this.ProjId,
                                                        this.Resource,
                                                        this.CategoryId,
                                                        this.CurrencyId,
                                                        this.ProjValidFor,
                                                        this.ProjPriceGroup,
                                                        this.PSACustAccount,
                                                        this.PSAProjInvoiceProjId,
                                                        this.ResourceCategory,
                                                        true);
        if (!currentBuff)
        {
            // No record with passed attributes exist
            this.EndDate = dateMax;
            super();
        }
        else
        {
            // Records with passed attributes exist
            if (this.TransDate > currentBuff.TransDate)
            {
                // The start date of the record to be inserted is later than
                // the start date of the last chronological existing record by date
                ttsbegin;
                this.EndDate = dateMax;
                currentBuff.EndDate = this.TransDate - 1;
                currentBuff.update();
                super();
                ttscommit;
            }
            else
            {
                previousBuff = ProjHourSalesPrice::findByDatePrevious(this.ProjId,
                                                                  this.Resource,
                                                                  this.CategoryId,
                                                                  this.CurrencyId,
                                                                  this.TransDate,
                                                                  this.ProjValidFor,
                                                                  this.ProjPriceGroup,
                                                                  this.PSACustAccount,
                                                                  this.PSAProjInvoiceProjId,
                                                                  this.ResourceCategory,
                                                                  true);

                nextBuff = ProjHourSalesPrice::findByDateNext(this.ProjId,
                                                          this.Resource,
                                                          this.CategoryId,
                                                          this.CurrencyId,
                                                          this.TransDate,
                                                          this.ProjValidFor,
                                                          this.ProjPriceGroup,
                                                          this.PSACustAccount,
                                                          this.PSAProjInvoiceProjId,
                                                          this.ResourceCategory);
                ttsbegin;
                if (previousBuff)
                {
                    // Update the EndDate of the previous record
                    previousBuff.EndDate = this.TransDate - 1;
                    previousBuff.update();
                }

                // Set the EndDate of this record
                this.EndDate = nextBuff.TransDate - 1;
                super();
                ttscommit;
            }
        }

        SysTransactionScopeCache::clear(tableStr(ProjHourSalesPrice));
        ProjHourSalesPrice::clearPriceCache(#ProjHourDateSalesPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when a buffer is updated in a transaction.
    /// This is override to ensure that the ExtensionHash field is calculated before insertion into the database.
    /// </summary>
    public void update()
    {
        #ProjPrice

        // Update the hash for this instance
        ProjExtensionHashCalculator hashCalculator = ProjExtensionHashCalculator::construct();
        ProjHourSalesPrice::getExtensionFields(hashCalculator);
        this.ExtensionHash = hashCalculator.calculateHash(this);

        super();

        SysTransactionScopeCache::clear(tableStr(ProjHourSalesPrice));
        ProjHourSalesPrice::clearPriceCache(#ProjHourDateSalesPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    boolean validateField(FieldId p1)
    {
        boolean ret;

        ret = super(p1);

        switch (p1)
        {
            case fieldNum(ProjHourSalesPrice, CategoryId):

                if (this.CategoryId)
                {
                    if (ProjCategory::find(this.CategoryId).CategoryType != ProjCategoryType::Hour)
                    {
                        return checkFailed(strFmt("@SYS56468",ProjTransType::Hour));
                    }
                }
                break;

            case fieldNum(ProjHourSalesPrice, ProjSalesPricing),
             fieldNum(ProjHourSalesPrice, ProjSalesPriceModel):

                if ((this.ProjSalesPriceModel == ProjSalesPriceModel::Contributionratio) &&
                    (this.ProjSalesPricing > 100.00))
                {
                    return checkFailed("@SYS102503");
                }
                break;

            case fieldNum(ProjHourSalesPrice, Resource):
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        boolean checkTable = true;

        ret = super();

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            switch (this.ProjValidFor)
            {
                case TableGroupAll::Table:
                    checkTable = (this.psaProjInvoiceProjId == '') && (this.psaCustAccount == '');
                    if (checkTable && !this.ProjId)
                    {
                        return checkFailed("@SYS37928");
                    }
                    break;

                case TableGroupAll::GroupId:
                    if (!this.ProjPriceGroup)
                    {
                        return checkFailed("@SYS103188");
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPriceGroupInUse</Name>
				<Source><![CDATA[
    static boolean checkPriceGroupInUse(ProjPriceGroupID  priceGroup)
    {
        return (select firstonly RecId from projHourSalesPrice
                where projHourSalesPrice.ProjPriceGroup == priceGroup).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPriceCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears all the values stored for a given owner.
    /// </summary>
    /// <param name="_owner">
    ///    A string that represents the owner.
    /// </param>
    public static void clearPriceCache(str _owner)
    {
        SysGlobalCache  cache   = classfactory.globalCache();

        if (_owner)
        {
            cache.clear(_owner);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFind</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class instance based off the signature of <c>ProjHourSalesPrice::find</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResourceRecId</c>).</param>
    /// <param name = "_categoryId">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_currency">Sales currency to search with (<c>parmSalesCurrencyCode</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_projValidFor">'Valid for' value to search with (<c>parmProjPriceGroupValidFor</c>).</param>
    /// <param name = "_projPriceGroup">Price group ID to search with (<c>parmProjPriceGroupID</c>).</param>
    /// <param name = "_spsaCustAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_resourceCategory">Resource category to search with (<c>parmResourceCategoryRecId</c>).</param>
    /// <returns>An instance of <c>ProjPriceParameters</c> for use with <c>ProjHourSalesPrice::findByPriceParameters</c>.</returns>
	public static ProjPriceParameters constructPriceParametersForFind(
        ProjId					_projId,
        ResourceRecId           _resource,
        ProjCategoryId          _categoryId,
        CurrencyCode            _currency = Ledger::accountingCurrency(CompanyInfo::current()),
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupValidFor  _projValidFor = TableGroupAll::All,
        ProjPriceGroupID        _projPriceGroup = '',
        CustAccount             _spsaCustAccount = '',
        ProjInvoiceProjId       _spsaProjInvoiceProjId = '',
        ResourceCategoryRecId   _resourceCategory = 0)
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmSalesCurrencyCode(_currency);
        priceParams.parmTransDate(_transDate);
        priceParams.parmProjPriceGroupValidFor(_projValidFor);
        priceParams.parmProjPriceGroupID(_projPriceGroup);
        priceParams.parmCustAccount(_spsaCustAccount);
        priceParams.parmProjInvoiceProjId(_spsaProjInvoiceProjId);
        priceParams.parmResourceCategoryRecId(_resourceCategory);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a project hour sales price record.
    /// </summary>
    /// <param name = "_parameters">An instance of ProjPriceParameters containing the search criteria.</param>
    /// <param name = "_forUpdate">Whether the record should be selected for update.</param>
    /// <returns>A <c>ProjCostPriceExpense</c> record.</returns>
    [Replaceable]
    public static ProjHourSalesPrice findByPriceParameters(ProjPriceParameters _parameters, boolean _forUpdate = false)
    {
        ProjHourSalesPrice projHourSalesPrice = null;
        projHourSalesPrice.selectForUpdate(_forUpdate);

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            select reverse projHourSalesPrice
            order by ProjValidFor, TransDate
            where projHourSalesPrice.ProjValidFor == _parameters.parmProjPriceGroupValidFor()	&&
                projHourSalesPrice.ProjId == _parameters.parmProjId()							&&
                projHourSalesPrice.ProjPriceGroup == _parameters.parmProjPriceGroupID()			&&
                projHourSalesPrice.Resource == _parameters.parmResourceRecId()					&&
                projHourSalesPrice.CategoryId == _parameters.parmProjCategoryId()				&&
                projHourSalesPrice.CurrencyId == _parameters.parmSalesCurrencyCode()			&&
                projHourSalesPrice.psaCustAccount == _parameters.parmCustAccount()				&&
                projHourSalesPrice.psaProjInvoiceProjId == _parameters.parmProjInvoiceProjId()	&&
                projHourSalesPrice.TransDate <= _parameters.parmTransDate()						&&
                projHourSalesPrice.ResourceCategory == _parameters.parmResourceCategoryRecId();
        }
        else
        {
            select reverse projHourSalesPrice
            order by TransDate
            where projHourSalesPrice.ProjId == _parameters.parmProjId()							&&
                projHourSalesPrice.Resource == _parameters.parmResourceRecId()					&&
                projHourSalesPrice.CategoryId == _parameters.parmProjCategoryId()				&&
                projHourSalesPrice.CurrencyId == _parameters.parmSalesCurrencyCode()			&&
                projHourSalesPrice.psaCustAccount == _parameters.parmCustAccount()				&&
                projHourSalesPrice.psaProjInvoiceProjId == _parameters.parmProjInvoiceProjId()  &&
                projHourSalesPrice.TransDate <= _parameters.parmTransDate()						&&
                projHourSalesPrice.ResourceCategory == _parameters.parmResourceCategoryRecId();
        }

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
    /// Find a project hour sales price record.
    /// </summary>
    /// <param name = "_projId">Project ID to search with.</param>
    /// <param name = "_resource">Resource record ID to search with.</param>
    /// <param name = "_categoryId">Category ID to search with.</param>
    /// <param name = "_currency">Sales currency to search with.</param>
    /// <param name = "_transDate">Transaction date to search with.</param>
    /// <param name = "_projValidFor">'Valid for' value to search with.</param>
    /// <param name = "_projPriceGroup">Price group ID to search with.</param>
    /// <param name = "_spsaCustAccount">Customer account to search with.</param>
    /// <param name = "_spsaProjInvoiceProjId">Project invoice ID to search with.</param>
    /// <param name = "_resourceCategory">Resource category to search with.</param>
    /// <param name = "_forUpdate">Whether to select the record for update.</param>
    /// <returns>A <c>ProjCostPriceExpense</c> record.</returns>
    [SysObsolete("This method has been made obsolete, please use ProjHourSalesPrice::findByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static ProjHourSalesPrice find(
		ProjId					_projId,
        ResourceRecId           _resource,
        ProjCategoryId          _categoryId,
        CurrencyCode            _currency = Ledger::accountingCurrency(CompanyInfo::current()),
        TransDate               _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupValidFor  _projValidFor = TableGroupAll::All,
        ProjPriceGroupID        _projPriceGroup = '',
        CustAccount             _spsaCustAccount = '',
        ProjInvoiceProjId       _spsaProjInvoiceProjId = '',
        ResourceCategoryRecId   _resourceCategory = 0,
        boolean                 _forUpdate  = false)
    {
        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
			_projId,
			_resourceCategory,
			_categoryId,
			_currency,
			_transDate,
			_projValidFor,
			_projPriceGroup,
			_spsaCustAccount,
			_spsaProjInvoiceProjId,
            _resourceCategory);
        return ProjHourSalesPrice::findByPriceParameters(priceParams, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByContractResourceCategory</Name>
				<Source><![CDATA[
    private static ProjHourSalesPrice findByContractResourceCategory(ProjInvoiceProjId _projInvoiceProjId, ResourceRecId _resourceRecId, CategoryId _categoryId, CurrencyCode _currency,TransDate _transDate,ProjPriceGroupValidFor projValidFor = TableGroupAll::All, ResourceCategoryRecId _resourceCategory = 0)
    {
        ProjHourSalesPrice projHourSalesPrice;

        if (_projInvoiceProjId && _resourceRecId && _resourceCategory)
        {
            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resourceRecId, '', _currency, _transDate, projValidFor, '', '', _projInvoiceProjId, _resourceCategory);
            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
        }

        if (!(projHourSalesPrice))
        {
            if (_projInvoiceProjId && _resourceRecId && _categoryId)
            {
                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resourceRecId, _categoryId, _currency, _transDate, projValidFor, '','',_projInvoiceProjId);
                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
            }

            if (!(projHourSalesPrice))
            {
                if (_projInvoiceProjId && _resourceRecId)
                {
                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resourceRecId, '', _currency, _transDate, projValidFor, '','',_projInvoiceProjId);
                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                }

                if (!(projHourSalesPrice))
                {
                    if (_projInvoiceProjId && _resourceCategory)
                    {
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '','',_projInvoiceProjId, _resourceCategory);
                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                    }

                    if (!(projHourSalesPrice))
                    {
                        if (_projInvoiceProjId && _categoryId)
                        {
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor, '','',_projInvoiceProjId);
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (_projInvoiceProjId)
                            {
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '','',_projInvoiceProjId);
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }
                        }
                    }
                }
            }
        }

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustomerResourceCategory</Name>
				<Source><![CDATA[
    private static ProjHourSalesPrice findByCustomerResourceCategory(CustAccount _custAccount, ResourceRecId _resourceRecId, CategoryId _categoryId, CurrencyCode _currency,TransDate _transDate,ProjPriceGroupValidFor projValidFor= TableGroupAll::All, ResourceCategoryRecId _resourceCategory = 0)
    {
        ProjHourSalesPrice projHourSalesPrice;

        if (_custAccount && _resourceRecId && _resourceCategory)
        {
            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resourceRecId, '', _currency, _transDate, projValidFor, '',_custAccount,'', _resourceCategory);
            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
        }

        if (!(projHourSalesPrice))
        {
            if (_custAccount && _resourceRecId && _categoryId)
            {
                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resourceRecId, _categoryId, _currency, _transDate, projValidFor, '',_custAccount,'');
                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
            }

            if (!(projHourSalesPrice))
            {
                if (_custAccount && _resourceRecId)
                {
                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resourceRecId, '', _currency, _transDate, projValidFor, '',_custAccount,'');
                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                }

                if (!(projHourSalesPrice))
                {
                    if (_custAccount && _resourceCategory)
                    {
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '',_custAccount,'', _resourceCategory);
                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                    }

                    if (!(projHourSalesPrice))
                    {
                        if (_custAccount && _categoryId)
                        {
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor, '',_custAccount,'');
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (_custAccount)
                            {
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '',_custAccount,'');
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }
                        }
                    }
                }
            }
        }

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructPriceParametersForFindHourSalesPrice</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a <c>ProjPriceParameters</c> parameter class instance based off the signature of <c>ProjHourSalesPrice::findHourSalesPrice</c>.
    /// </summary>
    /// <param name = "_projId">Project ID to search with (<c>parmProjId</c>).</param>
    /// <param name = "_resource">Resource record ID to search with (<c>parmResource</c>).</param>
    /// <param name = "_categoryId">Category ID to search with (<c>parmProjCategoryId</c>).</param>
    /// <param name = "_linePropertyId">Line property ID to search with (<c>parmProjLinePropertyId</c>).</param>
    /// <param name = "_costPrice">Cost price to search with (<c>parmCostPrice</c>).</param>
    /// <param name = "_currency">Sales currency to search with (<c>parmSalesCurrencyCode</c>).</param>
    /// <param name = "_transDate">Transaction date to search with (<c>parmTransDate</c>).</param>
    /// <param name = "_priceGroupId">Price group ID to search with (<c>parmProjPriceGroupId</c>).</param>
    /// <param name = "_projInvoiceProjId">Project invoice ID to search with (<c>parmProjInvoiceProjId</c>).</param>
    /// <param name = "_custAccount">Customer account to search with (<c>parmCustAccount</c>).</param>
    /// <param name = "_resourceCategory">Resource category ID to search with (<c>parmResourceCategoryRecId</c>).</param>
    /// <returns>A <c>ProjPriceParameters</c> instance for use with <c>ProjHourSalesPrice::findHourSalesPriceByPriceParameters</c>.</returns>
	public static ProjPriceParameters constructPriceParametersForFindHourSalesPrice(
        ProjId					_projId,
        ResourceRecId			_resource,
        ProjCategoryId			_categoryId,
        ProjLinePropertyId		_linePropertyId,
        CostPrice				_costPrice,
        CurrencyCode			_currency = CompanyInfoHelper::standardCurrency(),
        TransDate				_transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupID		_priceGroupId = '',
        ProjInvoiceProjId		_projInvoiceProjId ='',
        CustAccount				_custAccount ='',
        ResourceCategoryRecId	_resourceCategory = 0)
    {
        ProjPriceParameters priceParams = ProjPriceParameters::construct();
        priceParams.parmProjId(_projId);
        priceParams.parmResourceRecId(_resource);
        priceParams.parmProjCategoryId(_categoryId);
        priceParams.parmProjLinePropertyId(_linePropertyId);
        priceParams.parmCostPrice(_costPrice);
        priceParams.parmSalesCurrencyCode(_currency);
        priceParams.parmTransDate(_transDate);
        priceParams.parmProjPriceGroupID(_priceGroupId);
        priceParams.parmProjInvoiceProjId(_projInvoiceProjId);
        priceParams.parmResourceCategoryRecId(_resourceCategory);
        priceParams.parmCustAccount(_custAccount);

        return priceParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHourSalesPriceByPriceParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find project hour sales prices.
    /// </summary>
    /// <param name = "_parameters">An instance of ProjPriceParameters containing the search criteria.</param>
    /// <param name = "_ignoreCustomerPriceGroup>Whether to ignore the price group for the customer.</param>
    /// <param name = "_areDateValuesVariedFrequently>Whether to use the <c>SysGlobalCache</c>.</param>
    /// <returns>
    /// A container holding the price and a boolean that indicates whether a price was found.
    /// The boolean returns true if a matching record in table projHourSalesPrice is returned even if its a zero sales price.
    /// </returns>
    [Replaceable]
    public static container findHourSalesPriceByPriceParameters(
        ProjPriceParameters _parameters,
        boolean             _ignoreCustomerPriceGroup       = false,
        boolean             _areDateValuesVariedFrequently  = false)
    {
        ProjHourSalesPrice      projHourSalesPrice;
        ProjTable               projTable;
        ProjId                  projId = _parameters.parmProjId();
        CostPrice               costPrice = _parameters.parmCostPrice();
        SalesPrice              salesPrice;
        ResourceCategoryRecId   resourceCategory = _parameters.parmResourceCategoryRecId();

        ProjPriceGroupValidFor  projValidFor;
        Map                     salesPriceMap;
        MapEnumerator           mapEnumerator;
        ProjTransDate           transDate, salesDate;
        SysGlobalCache          cache = classfactory.globalCache();
        boolean                 cacheFound;
        boolean                 priceFound = false; // returns TRUE if a matching record in table projHourSalesPrice is returned even if its a zero sales price.
        str                     cacheKey, cacheDateKey;
        boolean                 isPriceDiscConfigEnabled = isConfigurationkeyEnabled(configurationKeyNum(PriceDisc));

        const str ProjHourDateSalesPrice = 'ProjHourSalesPrice.getSalesPrice';

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(tableStr(ProjHourSalesPrice));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(tableStaticMethodStr(ProjHourSalesPrice, findHourSalesPriceByPriceParameters)))
        {
            activityContext.addCustomProperty('_areDateValuesVariedFrequently', any2Str(_areDateValuesVariedFrequently));
            activityContext.addCustomProperty('isPriceDiscConfigEnabled', any2Str(isPriceDiscConfigEnabled));

            if (!resourceCategory && _parameters.parmResourceRecId())
            {
                resourceCategory = ResourceFacade::getResourceCategory(_parameters.parmResourceRecId(), _parameters.parmTransDate());
            }

            if (_areDateValuesVariedFrequently)
            {
                cacheDateKey = strFmt("%1-%2-%3-%4-%5%-%6-%7",
                _parameters.parmProjId(),
                _parameters.parmResourceRecId(),
                _parameters.parmProjCategoryId(),
                _parameters.parmProjLinePropertyId(),
                _parameters.parmCostPrice(),
                _parameters.parmSalesCurrencyCode(),
                resourceCategory);

                if (cache.isSet(ProjHourDateSalesPrice, cacheDateKey))
                {
                    salesPriceMap = cache.get(ProjHourDateSalesPrice, cacheDateKey);
                    if (salesPriceMap.elements())
                    {
                        mapEnumerator = salesPriceMap.getEnumerator();
                        while (mapEnumerator.moveNext())
                        {
                            transDate = mapEnumerator.currentKey();
                            [salesDate, salesPrice, priceFound] = mapEnumerator.currentValue();
                            if (transDate && salesDate && salesPrice)
                            {
                                if (salesDate <= _parameters.parmTransDate() && _parameters.parmTransDate() <= transDate)
                                {
                                    cacheFound = true;
                                    activityContext.addCustomProperty('cacheFound', any2Str(cacheFound));
                                    return [salesPrice, priceFound];
                                }
                            }
                        }
                    }
                }
            }

            cacheKey = strFmt("%1-%2-%3-%4-%5-%6-%7-%8-%9-%10-%11-%12",
            _parameters.parmProjId(),
            _parameters.parmResourceRecId(),
            _parameters.parmProjCategoryId(),
            _parameters.parmProjLinePropertyId(),
            _parameters.parmCostPrice(),
            _parameters.parmSalesCurrencyCode(),
            _parameters.parmTransDate(),
            _parameters.parmProjPriceGroupID(),
            _ignoreCustomerPriceGroup,
            _parameters.parmProjInvoiceProjId(),
            _parameters.parmCustAccount(),
            resourceCategory);

            if (SysTransactionScopeCache::get(tableStr(ProjHourSalesPrice), cacheKey))
            {
                activityContext.addCustomProperty('cacheFound', any2Str(true));
                return SysTransactionScopeCache::get(tableStr(ProjHourSalesPrice), cacheKey);
            }

            activityContext.addCustomProperty('cacheFound', any2Str(false));

            ProjPriceGroupID projPriceGroup = _parameters.parmProjPriceGroupID();
            ProjInvoiceProjId projInvoiceProjId = _parameters.parmProjInvoiceProjId();
            CustAccount custAccount = _parameters.parmCustAccount();

            if (_parameters.parmProjId())
            {
                projTable = ProjTable::find(projId);
                if (!custAccount)
                {
                    custAccount = projTable.CustAccount;
                }
                if (!projInvoiceProjId)
                {
                    projInvoiceProjId = projTable.ProjInvoiceProjId;
                }
            }

            int loopCount = 0;
            int findCount = 0;

            // Find the best <c>ProjHourSalesPrice</c> record based on the following precedence:
            // 1. Resource
            // 2. Resource category
            // 3. Category
            // This is for PSA-specific findHourSalesPrice
            if (projPriceGroup || custAccount || projInvoiceProjId)
            {
                projHourSalesPrice = ProjHourSalesPrice::psAfindHourSalesPrice(
                _parameters.parmProjId(),
                _parameters.parmResourceRecId(),
                _parameters.parmProjCategoryId(),
                _parameters.parmProjLinePropertyId(),
                _parameters.parmCostPrice(),
                _parameters.parmSalesCurrencyCode(),
                _parameters.parmTransDate(),
                projPriceGroup,
                _ignoreCustomerPriceGroup,
                projInvoiceProjId,
                custAccount,
                resourceCategory);
                priceFound = projHourSalesPrice.RecId;
            }
            else
            {

                do
                {
                    loopCount++;

                    // Look for sales price using price group feature
                    if (isPriceDiscConfigEnabled)
                    {
                        // Look for sales price in Valid For = Table
                        projValidFor = TableGroupAll::Table;

                        if (projId && _parameters.parmResourceRecId() && resourceCategory)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                            projId,
                            _parameters.parmResourceRecId(),
                            '',
                            _parameters.parmSalesCurrencyCode(),
                            _parameters.parmTransDate(),
                            projValidFor,
                            '',
                            '',
                            '',
                            resourceCategory);
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (projId && _parameters.parmResourceRecId())
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                projId,
                                _parameters.parmResourceRecId(),
                                '',
                                _parameters.parmSalesCurrencyCode(),
                                _parameters.parmTransDate(),
                                projValidFor,
                                '');
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (projId && resourceCategory)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                    projId,
                                    0,
                                    '',
                                    _parameters.parmSalesCurrencyCode(),
                                    _parameters.parmTransDate(),
                                    projValidFor,
                                    '',
                                    '',
                                    '',
                                    resourceCategory);
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (projId && _parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                        projId,
                                        _parameters.parmResourceRecId(),
                                        _parameters.parmProjCategoryId(),
                                        _parameters.parmSalesCurrencyCode(),
                                        _parameters.parmTransDate(),
                                        projValidFor,
                                        '');
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (projId && _parameters.parmProjCategoryId())
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                            projId,
                                            0,
                                            _parameters.parmProjCategoryId(),
                                            _parameters.parmSalesCurrencyCode(),
                                            _parameters.parmTransDate(),
                                            projValidFor,
                                            '');
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            if (projId)
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                projId,
                                                0,
                                                '',
                                                _parameters.parmSalesCurrencyCode(),
                                                _parameters.parmTransDate(),
                                                projValidFor,
                                                '');
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // Look for sales price in Valid For = Group
                        if (!(projHourSalesPrice))
                        {
                            if (_ignoreCustomerPriceGroup)
                            {
                                projPriceGroup = _parameters.parmProjPriceGroupID();
                            }
                            else
                            {
                                projPriceGroup = ProjTable::findPriceGroup(_parameters.parmProjId());
                            }

                            if (projPriceGroup)
                            {
                                projValidFor = TableGroupAll::GroupId;

                                if (_parameters.parmResourceRecId() && resourceCategory)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                    '',
                                    _parameters.parmResourceRecId(),
                                    '',
                                    _parameters.parmSalesCurrencyCode(),
                                    _parameters.parmTransDate(),
                                    projValidFor,
                                    projPriceGroup,
                                    '',
                                    '',
                                    resourceCategory);
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (_parameters.parmResourceRecId())
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                        '',
                                        _parameters.parmResourceRecId(),
                                        '',
                                        _parameters.parmSalesCurrencyCode(),
                                        _parameters.parmTransDate(),
                                        projValidFor,
                                        projPriceGroup);
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (resourceCategory)
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                            '',
                                            0,
                                            '',
                                            _parameters.parmSalesCurrencyCode(),
                                            _parameters.parmTransDate(),
                                            projValidFor,
                                            projPriceGroup,
                                            '',
                                            '',
                                            resourceCategory);
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            if (_parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                '',
                                                _parameters.parmResourceRecId(),
                                                _parameters.parmProjCategoryId(),
                                                _parameters.parmSalesCurrencyCode(),
                                                _parameters.parmTransDate(),
                                                projValidFor,
                                                projPriceGroup);
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }

                                            if (!(projHourSalesPrice))
                                            {
                                                if (_parameters.parmProjCategoryId())
                                                {
                                                    findCount++;
                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                    '',
                                                    0,
                                                    _parameters.parmProjCategoryId(),
                                                    _parameters.parmSalesCurrencyCode(),
                                                    _parameters.parmTransDate(),
                                                    projValidFor,
                                                    projPriceGroup);
                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                }

                                                if (!(projHourSalesPrice))
                                                {
                                                    findCount++;
                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                    '',
                                                    0,
                                                    '',
                                                    _parameters.parmSalesCurrencyCode(),
                                                    _parameters.parmTransDate(),
                                                    projValidFor,
                                                    projPriceGroup);
                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        // Look for sales price in Valid For = All
                        if (!(projHourSalesPrice))
                        {
                            projValidFor = TableGroupAll::All;

                            if (_parameters.parmResourceRecId() && resourceCategory)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                '',
                                _parameters.parmResourceRecId(),
                                '',
                                _parameters.parmSalesCurrencyCode(),
                                _parameters.parmTransDate(),
                                projValidFor,
                                '',
                                '',
                                '',
                                resourceCategory);
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (_parameters.parmResourceRecId())
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                    '',
                                    _parameters.parmResourceRecId(),
                                    '',
                                    _parameters.parmSalesCurrencyCode(),
                                    _parameters.parmTransDate(),
                                    projValidFor,
                                    '');
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (resourceCategory)
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                        '',
                                        0,
                                        '',
                                        _parameters.parmSalesCurrencyCode(),
                                        _parameters.parmTransDate(),
                                        projValidFor,
                                        '',
                                        '',
                                        '',
                                        resourceCategory);
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (_parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                            '',
                                            _parameters.parmResourceRecId(),
                                            _parameters.parmProjCategoryId(),
                                            _parameters.parmSalesCurrencyCode(),
                                            _parameters.parmTransDate(),
                                            projValidFor,
                                            '');
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            if (_parameters.parmProjCategoryId())
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                '',
                                                0,
                                                _parameters.parmProjCategoryId(),
                                                _parameters.parmSalesCurrencyCode(),
                                                _parameters.parmTransDate(),
                                                projValidFor,
                                                '');
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }

                                            if (!(projHourSalesPrice))
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                '',
                                                0,
                                                '',
                                                _parameters.parmSalesCurrencyCode(),
                                                _parameters.parmTransDate(),
                                                projValidFor,
                                                '');
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        projId  = ProjTable::find(projId).ParentId;

                        if (projId && !projHourSalesPrice.ProjId)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                            projId,
                            _parameters.parmResourceRecId(),
                            _parameters.parmProjCategoryId(),
                            _parameters.parmSalesCurrencyCode(),
                            _parameters.parmTransDate(),
                            TableGroupAll::Table);
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }
                    }

                    // Look for sales price without price group feature
                    else
                    {
                        if (projId && _parameters.parmResourceRecId() && resourceCategory)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                            projId,
                            _parameters.parmResourceRecId(),
                            '',
                            _parameters.parmSalesCurrencyCode(),
                            _parameters.parmTransDate(),
                            TableGroupAll::All,
                            '',
                            '',
                            '',
                            resourceCategory);
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (projId && _parameters.parmResourceRecId())
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                projId,
                                _parameters.parmResourceRecId(),
                                '',
                                _parameters.parmSalesCurrencyCode(),
                                _parameters.parmTransDate());
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (projId && resourceCategory)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                    projId,
                                    0,
                                    '',
                                    _parameters.parmSalesCurrencyCode(),
                                    _parameters.parmTransDate(),
                                    TableGroupAll::All,
                                    '',
                                    '',
                                    '',
                                    resourceCategory);
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (projId && _parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                        projId,
                                        _parameters.parmResourceRecId(),
                                        _parameters.parmProjCategoryId(),
                                        _parameters.parmSalesCurrencyCode(),
                                        _parameters.parmTransDate());
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (projId && _parameters.parmProjCategoryId())
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                            projId,
                                            0,
                                            _parameters.parmProjCategoryId(),
                                            _parameters.parmSalesCurrencyCode(),
                                            _parameters.parmTransDate());
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            if (projId)
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                projId,
                                                0,
                                                '',
                                                _parameters.parmSalesCurrencyCode(),
                                                _parameters.parmTransDate());
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }

                                            if (!(projHourSalesPrice))
                                            {
                                                if (_parameters.parmResourceRecId() && resourceCategory)
                                                {
                                                    findCount++;
                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                    '',
                                                    _parameters.parmResourceRecId(),
                                                    '',
                                                    _parameters.parmSalesCurrencyCode(),
                                                    _parameters.parmTransDate(),
                                                    TableGroupAll::All,
                                                    '',
                                                    '',
                                                    '',
                                                    resourceCategory);
                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                }

                                                if (!(projHourSalesPrice))
                                                {
                                                    if (_parameters.parmResourceRecId())
                                                    {
                                                        findCount++;
                                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                        '',
                                                        _parameters.parmResourceRecId(),
                                                        '',
                                                        _parameters.parmSalesCurrencyCode(),
                                                        _parameters.parmTransDate());
                                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                    }

                                                    if (!(projHourSalesPrice))
                                                    {
                                                        if (resourceCategory)
                                                        {
                                                            findCount++;
                                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                            '',
                                                            0,
                                                            '',
                                                            _parameters.parmSalesCurrencyCode(),
                                                            _parameters.parmTransDate(),
                                                            TableGroupAll::All,
                                                            '',
                                                            '',
                                                            '',
                                                            resourceCategory);
                                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                        }

                                                        if (!(projHourSalesPrice))
                                                        {
                                                            if (_parameters.parmResourceRecId() && _parameters.parmProjCategoryId())
                                                            {
                                                                findCount++;
                                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                                '',
                                                                _parameters.parmResourceRecId(),
                                                                _parameters.parmProjCategoryId(),
                                                                _parameters.parmSalesCurrencyCode(),
                                                                _parameters.parmTransDate());
                                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                            }

                                                            if (!(projHourSalesPrice))
                                                            {
                                                                if (_parameters.parmProjCategoryId())
                                                                {
                                                                    findCount++;
                                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                                    '',
                                                                    0,
                                                                    _parameters.parmProjCategoryId(),
                                                                    _parameters.parmSalesCurrencyCode(),
                                                                    _parameters.parmTransDate());
                                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                }

                                                                if (!(projHourSalesPrice))
                                                                {
                                                                    findCount++;
                                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                                                                    '',
                                                                    0,
                                                                    '',
                                                                    _parameters.parmSalesCurrencyCode(),
                                                                    _parameters.parmTransDate());
                                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        projId  = ProjTable::find(projId).ParentId;

                        if (projId && !projHourSalesPrice.ProjId)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(
                            projId,
                            _parameters.parmResourceRecId(),
                            _parameters.parmProjCategoryId(),
                            _parameters.parmSalesCurrencyCode(),
                            _parameters.parmTransDate());
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }
                    }
                }
                while (!projHourSalesPrice && projId); // End - Do / While
            }

            if ((projHourSalesPrice.ProjSalesPriceModel == ProjSalesPriceModel::Contributionratio ||
                projHourSalesPrice.ProjSalesPriceModel  == ProjSalesPriceModel::PercentMarkup     ||
                projHourSalesPrice.ProjSalesPriceModel  == ProjSalesPriceModel::AmountMarkup)     && !costPrice)
            {
                ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
                projHourSalesPrice.ProjId,
                _parameters.parmResourceRecId(),
                _parameters.parmProjCategoryId(),
                '',
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                '',
                '',
                '',
                resourceCategory);
                costPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
            }

            switch (projHourSalesPrice.ProjSalesPriceModel)
            {
                case ProjSalesPriceModel::Qty :
                    salesPrice = projHourSalesPrice.ProjSalesPricing;
                    break;
                case ProjSalesPriceModel::Contributionratio :
                if (costPrice)
                    {
                        salesPrice = CurrencyExchangeHelper::price(100 * ExchangeRateHelper::curPrice(costPrice, _parameters.parmSalesCurrencyCode(), _parameters.parmTransDate()) / (100 - projHourSalesPrice.ProjSalesPricing ? 100 - projHourSalesPrice.ProjSalesPricing : 1), _parameters.parmSalesCurrencyCode());
                    }
                    break;
                case ProjSalesPriceModel::PercentMarkup :
                if (costPrice)
                    {
                        salesPrice  = CurrencyExchangeHelper::price(pt(ExchangeRateHelper::curPrice(costPrice, _parameters.parmSalesCurrencyCode(), _parameters.parmTransDate()), projHourSalesPrice.ProjSalesPricing / 100), _parameters.parmSalesCurrencyCode());
                    }
                    break;
                case ProjSalesPriceModel::AmountMarkup :
                if (costPrice)
                    {
                        salesPrice = ExchangeRateHelper::curPrice(costPrice, _parameters.parmSalesCurrencyCode(), _parameters.parmTransDate()) +
                                projHourSalesPrice.ProjSalesPricing;
                    }
                    break;
            }

            priceFound = (projHourSalesPrice.RecId);
            
            if (_areDateValuesVariedFrequently)
            {
                cacheDateKey = strFmt("%1-%2-%3-%4-%5%-%6-%7",
                _parameters.parmProjId(),
                _parameters.parmResourceRecId(),
                _parameters.parmProjCategoryId(),
                _parameters.parmProjLinePropertyId(),
                _parameters.parmCostPrice(),
                _parameters.parmSalesCurrencyCode(),
                resourceCategory);

                if (cache.isSet(ProjHourDateSalesPrice, cacheDateKey))
                {
                    salesPriceMap = cache.get(ProjHourDateSalesPrice, cacheDateKey);
                }
                else if (!salesPriceMap)
                {
                    salesPriceMap = new Map(Types::Date, Types::Container);
                }
                if (_parameters.parmProjLinePropertyId())
                {
                    salesPriceMap.insert(_parameters.parmTransDate(), [projHourSalesPrice.TransDate, CurrencyExchangeHelper::price(salesPrice * (1 + ProjLineProperty::find(_parameters.parmProjLinePropertyId()).SalesMarkup / 100), _parameters.parmSalesCurrencyCode()), priceFound]);
                }
                else
                {
                    salesPriceMap.insert(_parameters.parmTransDate(), [projHourSalesPrice.TransDate, CurrencyExchangeHelper::price(salesPrice, _parameters.parmSalesCurrencyCode()), priceFound]);
                }
                cache.set(ProjHourDateSalesPrice, cacheDateKey, salesPriceMap);
            }

            activityContext.addCustomProperty('loopCount', any2Str(loopCount));
            activityContext.addCustomProperty('findCount', any2Str(findCount));
            activityContext.addCustomProperty('priceFound', any2Str(priceFound));
            activityContext.addCustomProperty('projHourSalesPrice.RecId', any2Str(projHourSalesPrice.RecId));

            if (_parameters.parmProjLinePropertyId())
            {
                return [CurrencyExchangeHelper::price(salesPrice * (1 + ProjLineProperty::find(_parameters.parmProjLinePropertyId()).SalesMarkup / 100), _parameters.parmSalesCurrencyCode()), priceFound];
            }

            SysTransactionScopeCache::set(tableStr(ProjHourSalesPrice), cacheKey, [CurrencyExchangeHelper::price(salesPrice, _parameters.parmSalesCurrencyCode()), priceFound]);
        }

        return [CurrencyExchangeHelper::price(salesPrice, _parameters.parmSalesCurrencyCode()), priceFound];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHourSalesPrice</Name>
				<Source><![CDATA[
    [SysObsolete("This method has been made obsolete, please use ProjHourSalesPrice::findHourSalesPriceByPriceParameters instead for extensibility.", false, 02\08\2018)]
    public static container findHourSalesPrice(
		ProjId					_projId,
        ResourceRecId			_resource,
        ProjCategoryId			_categoryId,
        ProjLinePropertyId		_linePropertyId,
        CostPrice				_costPrice,
        CurrencyCode			_currency = CompanyInfoHelper::standardCurrency(),
        TransDate				_transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        ProjPriceGroupID		_priceGroupId = '',
        boolean					_ignoreCustomerPriceGroup = false,
        ProjInvoiceProjId		_projInvoiceProjId='',
        CustAccount				_custAccount='',
        ResourceCategoryRecId	_resourceCategory = 0,
        boolean					_areDateValuesVariedFrequently = false)
    {
        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFindHourSalesPrice(
			_projId,
			_resource,
			_categoryId,
			_linePropertyId,
			_costPrice,
			_currency,
			_transDate,
			_priceGroupId,
			_projInvoiceProjId,
			_custAccount,
            _resourceCategory);
        return ProjHourSalesPrice::findHourSalesPriceByPriceParameters(priceParams, _ignoreCustomerPriceGroup, _areDateValuesVariedFrequently);
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAfindHourSalesPrice</Name>
				<Source><![CDATA[
    private static ProjHourSalesPrice psAfindHourSalesPrice(ProjId    _projId,
                                           ResourceRecId          _resource,
                                           ProjCategoryId         _categoryId,
                                           ProjLinePropertyId     _linePropertyId,
                                           CostPrice              _costPrice,
                                           CurrencyCode           _currency    = CompanyInfoHelper::standardCurrency(),
                                           TransDate              _transDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                           ProjPriceGroupID       _priceGroupId = '',
                                           boolean                _ignoreCustomerPriceGroup = false,
                                           ProjInvoiceProjId      _projInvoiceProjId='',
                                           CustAccount            _custAccount='',
                                           ResourceCategoryRecId  _resourceCategory = 0
                                           )

    {
        ProjHourSalesPrice  projHourSalesPrice;
        ProjId              projId      = _projId;
        CostPrice           costPrice   = _costPrice;

        ProjPriceGroupValidFor  projValidFor;
        ProjPriceGroupID        projPriceGroup;
        ProjTable               projTable;

        boolean     isPriceDiscConfigEnabled = isConfigurationkeyEnabled(configurationKeyNum(PriceDisc));

        ProjOpsPricingLogger logger = ProjOpsPricingLogger::createLogger(tableStr(ProjHourCostPrice));

        using (var activityContext = logger.projOpsPricingActivity().codeInstrumentationContext(tableStaticMethodStr(ProjHourSalesPrice, psAfindHourSalesPrice)))
        {
            activityContext.addCustomProperty('isPriceDiscConfigEnabled', any2Str(isPriceDiscConfigEnabled));

            int loopCount = 0;
            int findCount = 0;

            do
            {
                loopCount++;

                // Look for sales price using price group feature
                if (isPriceDiscConfigEnabled)
                {
                    // Look for sales price in Valid For = Table
                    projValidFor = TableGroupAll::Table;

                    if (projId && _resource && _resourceCategory)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, '', _currency, _transDate, projValidFor, '', '', '', _resourceCategory);
                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                    }

                    if (!(projHourSalesPrice))
                    {
                        if (projId && _resource && _categoryId)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _currency, _transDate, projValidFor, '');
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (projId && _resource)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, '', _currency, _transDate, projValidFor, '');
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (projId && _resourceCategory)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, 0, '', _currency, _transDate, projValidFor, '', '', '', _resourceCategory);
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (projId && _categoryId)
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, 0, _categoryId, _currency, _transDate, projValidFor, '');
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (projId)
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, 0, '', _currency, _transDate, projValidFor);
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            // find by contract
                                            findCount++;
                                            projHourSalesPrice = ProjHourSalesPrice::findByContractResourceCategory(_projInvoiceProjId,_resource, _categoryId,_currency,_transDate,projValidFor, _resourceCategory);

                                            if (!(projHourSalesPrice))
                                            {
                                                //find by customer
                                                findCount++;
                                                projHourSalesPrice = ProjHourSalesPrice::findByCustomerResourceCategory(_custAccount,_resource, _categoryId,_currency,_transDate,projValidFor, _resourceCategory);

                                                if (!(projHourSalesPrice))
                                                {
                                                    if (_resource && _resourceCategory)
                                                    {
                                                        findCount++;
                                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, projValidFor, '', '', '', _resourceCategory);
                                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                    }

                                                    if (!(projHourSalesPrice))
                                                    {
                                                        if (_resource)
                                                        {
                                                            findCount++;
                                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, projValidFor);
                                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                        }

                                                        if (!(projHourSalesPrice))
                                                        {
                                                            if (_resourceCategory)
                                                            {
                                                                findCount++;
                                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '', '', '', _resourceCategory);
                                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                            }

                                                            if (!(projHourSalesPrice))
                                                            {
                                                                if (_resource && _categoryId)
                                                                {
                                                                    findCount++;
                                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _currency, _transDate, projValidFor);
                                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                }

                                                                if (!(projHourSalesPrice))
                                                                {
                                                                    if (_categoryId)
                                                                    {
                                                                        findCount++;
                                                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor);
                                                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // Look for sales price in Valid For = Group
                    if (!(projHourSalesPrice))
                    {
                        if (_ignoreCustomerPriceGroup)
                        {
                            projPriceGroup = _priceGroupId;
                        }
                        else
                        {
                            projPriceGroup = ProjTable::findPriceGroup(_projId);
                        }

                        if (projPriceGroup)
                        {
                            projValidFor = TableGroupAll::GroupId;

                            if (_resource && _resourceCategory)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, projValidFor, projPriceGroup, '', '', _resourceCategory);
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (_resource && _categoryId)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _currency, _transDate, projValidFor, projPriceGroup);
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (_resource)
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, projValidFor, projPriceGroup);
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (_resourceCategory )
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, projPriceGroup, '', '', _resourceCategory);
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            if (_categoryId)
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor, projPriceGroup);
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }

                                            if (!(projHourSalesPrice))
                                            {
                                                findCount++;
                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, projPriceGroup);
                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    // Look for sales price in Valid For = All
                    if (!(projHourSalesPrice))
                    {
                        projValidFor = TableGroupAll::All;

                        if (_resource && _resourceCategory)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, projValidFor, '', '', '', _resourceCategory);
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (_resource && _categoryId)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _currency, _transDate, projValidFor, '');
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (_resource)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, projValidFor, '');
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (_resourceCategory)
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '', '', '', _resourceCategory);
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (_categoryId)
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate, projValidFor, '');
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, projValidFor, '');
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (projTable.ParentId)
                    {
                        // Only do another select when project has a Parent
                        projTable.clear();
                        projTable = ProjTable::find(projId);
                    }

                    // projId is the root Project
                    projId = projTable.ParentId;

                    if (projId && !projHourSalesPrice.ProjId)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _currency, _transDate, TableGroupAll::Table);
                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                    }
                }

                // Look for sales price without price group feature
                else
                {
                    if (projId && _resource && _resourceCategory)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, '', _currency, _transDate, TableGroupAll::All, '', '', '', _resourceCategory);
                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                    }

                    if (!(projHourSalesPrice))
                    {
                        if (projId && _resource && _categoryId)
                        {
                            findCount++;
                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _currency, _transDate);
                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                        }

                        if (!(projHourSalesPrice))
                        {
                            if (projId && _resource)
                            {
                                findCount++;
                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, '', _currency, _transDate);
                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                            }

                            if (!(projHourSalesPrice))
                            {
                                if (projId && _resourceCategory)
                                {
                                    findCount++;
                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, 0, '', _currency, _transDate, TableGroupAll::All, '', '', '', _resourceCategory);
                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                }

                                if (!(projHourSalesPrice))
                                {
                                    if (projId && _categoryId)
                                    {
                                        findCount++;
                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, 0, _categoryId, _currency, _transDate);
                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                    }

                                    if (!(projHourSalesPrice))
                                    {
                                        if (projId)
                                        {
                                            findCount++;
                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, 0, '', _currency, _transDate);
                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                        }

                                        if (!(projHourSalesPrice))
                                        {
                                            // find by contract
                                            findCount++;
                                            projHourSalesPrice = ProjHourSalesPrice::findByContractResourceCategory(_projInvoiceProjId,_resource, _categoryId,_currency,_transDate, TableGroupAll::All, _resourceCategory);

                                            if (!(projHourSalesPrice))
                                            {
                                                //find by customer
                                                findCount++;
                                                projHourSalesPrice= ProjHourSalesPrice::findByCustomerResourceCategory(_custAccount,_resource, _categoryId,_currency,_transDate, TableGroupAll::All, _resourceCategory);

                                                if (!(projHourSalesPrice))
                                                {
                                                    if (_resource && _resourceCategory)
                                                    {
                                                        findCount++;
                                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate, TableGroupAll::All, '', '', '', _resourceCategory);
                                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                    }

                                                    if (!(projHourSalesPrice))
                                                    {
                                                        if (_resource)
                                                        {
                                                            findCount++;
                                                            ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, '', _currency, _transDate);
                                                            projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                        }

                                                        if (!(projHourSalesPrice))
                                                        {
                                                            if (_resourceCategory)
                                                            {
                                                                findCount++;
                                                                ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate, TableGroupAll::All, '', '', '', _resourceCategory);
                                                                projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                            }

                                                            if (!(projHourSalesPrice))
                                                            {
                                                                if (_resource && _categoryId)
                                                                {
                                                                    findCount++;
                                                                    ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', _resource, _categoryId, _currency, _transDate);
                                                                    projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                }

                                                                if (!(projHourSalesPrice))
                                                                {
                                                                    if (_categoryId)
                                                                    {
                                                                        findCount++;
                                                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, _categoryId, _currency, _transDate);
                                                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                    }

                                                                    if (!(projHourSalesPrice))
                                                                    {
                                                                        findCount++;
                                                                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind('', 0, '', _currency, _transDate);
                                                                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (projTable.ParentId)
                    {
                        // Only do another select when project has a Parent
                        projTable.clear();
                        projTable = ProjTable::find(projId);
                    }

                    // projId is the root Project
                    projId = projTable.ParentId;

                    if (projId && !projHourSalesPrice.ProjId)
                    {
                        findCount++;
                        ProjPriceParameters priceParams = ProjHourSalesPrice::constructPriceParametersForFind(projId, _resource, _categoryId, _currency, _transDate, TableGroupAll::All, '', '', '', _resourceCategory);
                        projHourSalesPrice = ProjHourSalesPrice::findByPriceParameters(priceParams);
                    }
                }
            }
            while (!projHourSalesPrice && projId); // End - Do / While

            activityContext.addCustomProperty('loopCount', any2Str(loopCount));
            activityContext.addCustomProperty('findCount', any2Str(findCount));
            activityContext.addCustomProperty('projHourSalesPriceRecId', any2Str(projHourSalesPrice.RecId));
        }

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDateCurrent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the record with EndDate value equal to max date.
    /// </summary>
    static ProjHourSalesPrice findByDateCurrent(ProjId                   _projId,
                                            ResourceRecId            _resource,
                                            ProjCategoryId           _categoryId,
                                            CurrencyCode             _currency = Ledger::accountingCurrency(CompanyInfo::current()),
                                            ProjPriceGroupValidFor   _projValidFor = TableGroupAll::All,
                                            ProjPriceGroupID         _projPriceGroup = '',
                                            CustAccount              _spsaCustAccount = '',
                                            ProjInvoiceProjId        _spsaProjInvoiceProjId = '',
                                            ResourceCategoryRecId    _resourceCategory = 0,
                                            boolean                  _forUpdate  = false)
    {
        ProjHourSalesPrice projHourSalesPrice;

        projHourSalesPrice.selectForUpdate(_forUpdate);

        select projHourSalesPrice
        where projHourSalesPrice.ProjValidFor == _projValidFor &&
            projHourSalesPrice.ProjId == _projId &&
            projHourSalesPrice.ProjPriceGroup == _projPriceGroup &&
            projHourSalesPrice.Resource == _resource &&
            projHourSalesPrice.CategoryId == _categoryId &&
            projHourSalesPrice.CurrencyId == _currency &&
            projHourSalesPrice.psaCustAccount == _spsaCustAccount &&
            projHourSalesPrice.psaProjInvoiceProjId == _spsaProjInvoiceProjId &&
            projHourSalesPrice.EndDate == dateMax() &&
            projHourSalesPrice.ResourceCategory == _resourceCategory;

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDateNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the first record with the next TransDate.
    /// </summary>
    static ProjHourSalesPrice findByDateNext(ProjId                   _projId,
                                         ResourceRecId            _resource,
                                         ProjCategoryId           _categoryId,
                                         CurrencyCode             _currency = Ledger::accountingCurrency(CompanyInfo::current()),
                                         TransDate                _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                         ProjPriceGroupValidFor   _projValidFor = TableGroupAll::All,
                                         ProjPriceGroupID         _projPriceGroup = '',
                                         CustAccount              _spsaCustAccount = '',
                                         ProjInvoiceProjId        _spsaProjInvoiceProjId = '',
                                         ResourceCategoryRecId    _resourceCategory = 0,
                                         boolean                  _forUpdate  = false)
    {
        ProjHourSalesPrice projHourSalesPrice;

        projHourSalesPrice.selectForUpdate(_forUpdate);

        select firstOnly projHourSalesPrice
        order by TransDate
            where projHourSalesPrice.ProjValidFor == _projValidFor &&
                projHourSalesPrice.ProjId == _projId &&
                projHourSalesPrice.ProjPriceGroup == _projPriceGroup &&
                projHourSalesPrice.Resource == _resource &&
                projHourSalesPrice.CategoryId == _categoryId &&
                projHourSalesPrice.CurrencyId == _currency &&
                projHourSalesPrice.psaCustAccount == _spsaCustAccount &&
                projHourSalesPrice.psaProjInvoiceProjId == _spsaProjInvoiceProjId &&
                projHourSalesPrice.TransDate > _transDate &&
                projHourSalesPrice.ResourceCategory == _resourceCategory;

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByDatePrevious</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the first record with the previous TransDate.
    /// </summary>
    static ProjHourSalesPrice findByDatePrevious(ProjId                   _projId,
                                             ResourceRecId            _resource,
                                             ProjCategoryId           _categoryId,
                                             CurrencyCode             _currency = Ledger::accountingCurrency(CompanyInfo::current()),
                                             TransDate                _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                             ProjPriceGroupValidFor   _projValidFor = TableGroupAll::All,
                                             ProjPriceGroupID         _projPriceGroup = '',
                                             CustAccount              _spsaCustAccount = '',
                                             ProjInvoiceProjId        _spsaProjInvoiceProjId = '',
                                             ResourceCategoryRecId    _resourceCategory = 0,
                                             boolean                  _forUpdate  = false)
    {
        ProjHourSalesPrice projHourSalesPrice;

        projHourSalesPrice.selectForUpdate(_forUpdate);

        select firstOnly reverse projHourSalesPrice
        order by TransDate
            where projHourSalesPrice.ProjValidFor == _projValidFor &&
                projHourSalesPrice.ProjId == _projId &&
                projHourSalesPrice.ProjPriceGroup == _projPriceGroup &&
                projHourSalesPrice.Resource == _resource &&
                projHourSalesPrice.CategoryId == _categoryId &&
                projHourSalesPrice.CurrencyId == _currency &&
                projHourSalesPrice.psaCustAccount == _spsaCustAccount &&
                projHourSalesPrice.psaProjInvoiceProjId == _spsaProjInvoiceProjId &&
                projHourSalesPrice.TransDate < _transDate &&
                projHourSalesPrice.ResourceCategory == _resourceCategory;

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByExactDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the record with the exact TransDate.
    /// </summary>
    static ProjHourSalesPrice findByExactDate(ProjId                   _projId,
                                              ResourceRecId            _resource,
                                              ProjCategoryId           _categoryId,
                                              TransDate                _transDate,
                                              CurrencyCode             _currency = Ledger::accountingCurrency(CompanyInfo::current()),
                                              ProjPriceGroupValidFor   _projValidFor = TableGroupAll::All,
                                              ProjPriceGroupID         _projPriceGroup = '',
                                              CustAccount              _spsaCustAccount = '',
                                              ProjInvoiceProjId        _spsaProjInvoiceProjId = '',
                                              ResourceCategoryRecId    _resourceCategory = 0,
                                              boolean                  _forUpdate  = false)
    {
        ProjHourSalesPrice projHourSalesPrice;

        projHourSalesPrice.selectForUpdate(_forUpdate);

        select projHourSalesPrice
        where projHourSalesPrice.ProjValidFor == _projValidFor &&
            projHourSalesPrice.ProjId == _projId &&
            projHourSalesPrice.ProjPriceGroup == _projPriceGroup &&
            projHourSalesPrice.Resource == _resource &&
            projHourSalesPrice.CategoryId == _categoryId &&
            projHourSalesPrice.CurrencyId == _currency &&
            projHourSalesPrice.psaCustAccount == _spsaCustAccount &&
            projHourSalesPrice.psaProjInvoiceProjId == _spsaProjInvoiceProjId &&
            projHourSalesPrice.TransDate == _transDate &&
            projHourSalesPrice.ResourceCategory == _resourceCategory;

        return projHourSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeEffectivePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the effective sales price based on the selected price model.
    /// </summary>
    display real computeEffectivePrice()    
    {
        PriceCur costPrice, salesPrice;

        if (this.ProjSalesPriceModel != ProjSalesPriceModel::Qty)
        {
            ProjPriceParameters priceParams = ProjHourCostPrice::constructPriceParametersForFindCostPrice(
				'', 
				this.Resource, 
				this.CategoryId,
                '', 
				DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), 
				'', 
				'', 
				'', 
				this.ResourceCategory);
            costPrice = ProjHourCostPrice::findCostPriceByPriceParameters(priceParams, false);
        }

        switch (this.ProjSalesPriceModel)
        {
            case ProjSalesPriceModel::Qty :
                salesPrice = this.ProjSalesPricing;
                break;
            case ProjSalesPriceModel::Contributionratio :
                if (costPrice)
                {
                    salesPrice = CurrencyExchangeHelper::price(100 * ExchangeRateHelper::curPrice(costPrice, this.CurrencyId, this.TransDate) / (100 - this.ProjSalesPricing ? 100 - this.ProjSalesPricing : 1), this.CurrencyId);
                }
                break;
            case ProjSalesPriceModel::PercentMarkup :
                if (costPrice)
                {
                    salesPrice  = CurrencyExchangeHelper::price(pt(ExchangeRateHelper::curPrice(costPrice, this.CurrencyId, this.TransDate), this.ProjSalesPricing / 100), this.CurrencyId);
                }
                break;
            case ProjSalesPriceModel::AmountMarkup :
                if (costPrice)
                {
                    salesPrice = ExchangeRateHelper::curPrice(costPrice, this.CurrencyId, this.TransDate) +
                        this.ProjSalesPricing;
                }
                break;
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPriceModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the price model text based on price model selection and sales price.
    /// </summary>
    display str displayPriceModel()
    {
        str result;

        switch (this.ProjSalesPriceModel)
        {
            case ProjSalesPriceModel::Qty:
                result = "@Res:SalesPriceModelQty";
                break;
            case ProjSalesPriceModel::Contributionratio:
                result = strfmt("@Res:SalesPriceModelContributionRatio", this.ProjSalesPricing);
                break;
            case ProjSalesPriceModel::AmountMarkup:
                result = strfmt("@Res:SalesPriceModelAmountMarkup", this.ProjSalesPricing);
                break;
            case ProjSalesPriceModel::PercentMarkup:
                result = strfmt("@Res:SalesPriceModelPercentMarkup", this.ProjSalesPricing);
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enumerates extension fields of this table, by registering them with the '_hashCalculator' object.
    /// This is the the intended CoC extension point for table extensions to register fields included in the hash.
    /// </summary>
    public static void getExtensionFields(ProjExtensionHashCalculator _hashCalculator)
    {
        // ex: _hashCalculator.addExtensionField(fieldNum(ProjHourSalesPrice, MyCustomField), defaultFieldValue);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124964</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>ProjSalesPriceHour</FormRef>
	<Label>@SYS75855</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TransDate</TitleField1>
	<TitleField2>ProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>ProjCatEmplDateIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPricing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSACustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjValidFor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPriceModel</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjSalesPricing</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Label>@SYS56480</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjPriceGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupID</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjSalesPriceModel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjSalesPriceModel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ProjSalesPricing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesPricing</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjValidFor</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPriceGroupValidFor</ExtendedDataType>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSACustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS50168</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EndDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExtensionHash</Name>
			<ExtendedDataType>ProjExtensionHash</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProjCatEmplDateIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjValidFor</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjPriceGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CategoryId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CurrencyId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSACustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PSAProjInvoiceProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ResourceCategory</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExtensionHash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ResourceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>Currency_ProjHourSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSACustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>PSACustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PriceDiscGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PriceDiscGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PriceDiscGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PriceDiscGroup_ProjHourSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjPriceGroup</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<Field>ProjPriceGroup</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Type</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Type</RelatedField>
					<ValueStr>PriceGroupType::PriceGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<SourceEDT>ProjPriceGroupID</SourceEDT>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjCategory_ProjHourSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>PSAProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjTable_ProjHourSalesPrice</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>