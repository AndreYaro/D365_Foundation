<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingAuxLedgerTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ELedgerAccountingAuxLedgerTmp extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setDebitAndCredit</Name>
				<Source><![CDATA[
    private static container setDebitAndCredit(GeneralJournalAccountEntry   _generalJournalAccountEntry)
    {
        AmountMSTDebCred   absoluteAmount = abs(_generalJournalAccountEntry.AccountingCurrencyAmount);
        AmountMSTDebCred   debit, credit;
        container          containerDebitCredit;

        void setCredit(AmountMSTDebCred _amount)
        {
            debit = 0;
            credit =  _amount;
        }

        void setDebit(AmountMSTDebCred _amount)
        {
            debit = _amount;
            credit = 0;
        }

        if (_generalJournalAccountEntry.IsCorrection)
        {
            if (_generalJournalAccountEntry.IsCredit)
            {
                setDebit(absoluteAmount);
            }
            else
            {
                setCredit(absoluteAmount);
            }
        }
        else
        {
            if (_generalJournalAccountEntry.IsCredit)
            {
                setCredit(absoluteAmount);
            }
            else
            {
                setDebit(absoluteAmount);
            }
        }

        containerDebitCredit = [debit, credit];

        return containerDebitCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetails</Name>
				<Source><![CDATA[
    [ERTableName(tableStr(ELedgerAccountingAuxLedgerDetailsTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RecordLinkList getDetails()
    {
        #ELedgerAccStatement_MX

        ELedgerAccountingAuxLedgerDetailsTmp    details;
        MainAccount                             mainAccount;
        GeneralJournalEntry                     generalJournalEntry;
        GeneralJournalAccountEntry              generalJournalAccountEntry;

        AmountMSTDebCred                        debit, credit;
        AccountName                             accountName;

        Query                                   query;
        QueryRun                                queryRun;
        QueryBuildDataSource                    qbdsMA, qbdsDAVC, qbdsGJE, qbdsGJAE, qbdsFCP;

        query = new Query();
        qbdsMA = query.adddataSource(tableNum(MainAccount));
        qbdsMA.addSelectionField(fieldNum(MainAccount, RecId));
        qbdsMA.addSelectionField(fieldNum(MainAccount, MainAccountId));
        qbdsMA.addSelectionField(fieldNum(MainAccount, Type));
        qbdsMA.addSelectionField(fieldNum(mainAccount, LedgerChartOfAccounts));
        qbdsMA.addSelectionField(fieldNum(MainAccount, Name));
        qbdsMA.addRange(fieldNum(MainAccount, MainAccountId)).value(SysQuery::value(this.MainAccountId));

        qbdsDAVC = qbdsMA.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDAVC.relations(true);
        qbdsDAVC.addSelectionField(fieldNum(DimensionAttributeValueCombination, MainAccount));

        qbdsGJAE = qbdsDAVC.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsGJAE.relations(true);
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, RecId));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, LedgerAccount));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, Text));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, PostingType));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, IsCorrection));
        qbdsGJAE.addSelectionField(fieldNum(GeneralJournalAccountEntry, PaymentReference));

        qbdsGJE = qbdsGJAE.addDataSource(tableNum(GeneralJournalEntry));
        qbdsGJE.relations(true);
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(this.FromDate, this.ToDate));
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(Ledger::current()));
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(SysQuery::value(OperationsTax::Current));
        qbdsGJE.addSelectionField(fieldNum(GeneralJournalEntry, LedgerEntryJournal));
        qbdsGJE.addSelectionField(fieldNum(GeneralJournalEntry, SubLedgerVoucher));
        qbdsGJE.addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate));
        qbdsGJE.addSelectionField(fieldNum(GeneralJournalEntry, JournalCategory));
        qbdsGJE.addOrderByField(fieldNum(GeneralJournalEntry, RecId));

        qbdsFCP = qbdsGJE.addDataSource(tableNum(FiscalCalendarPeriod));
        qbdsFCP.relations(true);
        qbdsFCP.joinMode(JoinMode::ExistsJoin);
        qbdsFCP.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));

        if (this.IncludeClosingTransactions)
        {
            qbdsFCP.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Opening));
            qbdsFCP.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Closing));
        }

        var ret = new RecordLinkList();

        accountName = MainAccount::findByMainAccountId(this.MainAccountId).Name;

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry));
            generalJournalAccountEntry = queryRun.get(tableNum(GeneralJournalAccountEntry));

            [debit, credit] = ELedgerAccountingAuxLedgerTmp::setDebitAndCredit(generalJournalAccountEntry);

            details.MainAccountId = mainAccount.MainAccountId;
            details.SubledgerVoucher = generalJournalEntry.SubledgerVoucher;
            details.AccountingDate = generalJournalEntry.AccountingDate;
            details.Concept = generalJournalAccountEntry.Text != #Blank ? generalJournalAccountEntry.Text : accountName;
            details.Debit = debit;
            details.Credit = credit;

            ret.ins(details);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>MX</CountryRegionCodes>
	<DeveloperDocumentation>@Mexico:ELedgerAccounting_AuxLedgerTmpERDevDoc</DeveloperDocumentation>
	<Label>@Mexico:ELedgerAccounting_AuxLedgerTmpERLabel</Label>
	<PrimaryIndex>AccountIdx</PrimaryIndex>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MainAccountId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>MainAccountNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AccountName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OpeningBalance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@Mexico:ELedgerAccounting_OpeningBalance</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndingBalance</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@Mexico:ELedgerAccounting_EndingBalance</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS5209</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS14656</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeClosingTransactions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@SYS14844</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>MainAccountId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>