<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgFlexCorrection</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgFlexCorrection extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>JmgFlexCorrection</c> record from the database.
    /// </summary>
    /// <remarks>
    /// The <c>JmgPayEvents</c> records that are associated with this <c>JmgFlexCorrection</c> record are
    /// also deleted.
    /// </remarks>
    public void delete()
    {
        JmgPayEvents jmgPayEvents;
        ttsbegin;
        delete_from jmgPayEvents
            where jmgPayEvents.SetOffParentTableId == this.TableId &&
                  jmgPayEvents.SetOffParent == this.RecId;
        super();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJmgPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>JmgPayEvents</c> record with values from the <c>JmgFlexCorrection</c> record.
    /// </summary>
    /// <param name="_jmgPayEvents">
    /// The <c>JmgPayEvents</c> record to initialize.
    /// </param>
    private void initJmgPayEvents(JmgPayEvents _jmgPayEvents)
    {
        JmgParameters       jmgParameters;
        JmgProdParameters   jmgProdParameters;
        jmgParameters                   = JmgParameters::find();
        jmgProdParameters               = JmgProdParameters::find();
        _jmgPayEvents.Worker            = this.Worker;
        _jmgPayEvents.ProfileDate       = this.Date;
        _jmgPayEvents.PaySpecType       = (this.Seconds > 0 || this.PayQty > 0 ? JmgPaySpecTypeEnum::FlexAdd : JmgPaySpecTypeEnum::FlexSub);
        _jmgPayEvents.DefaultDimension  = _jmgPayEvents.copyDimension(HcmWorker::find(this.Worker).getDefaultDimension(
                                                                                                                      this.companyInfo()
                                                                                                                      .RecId));
        _jmgPayEvents.Correction        = NoYes::No;
        _jmgPayEvents.SetOffParentTableId = this.TableId;
        _jmgPayEvents.SetOffParent      = this.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    void initValue()
    {
        super();

        this.CorrectedByWorker = HcmWorker::userId2Worker(curUserId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>JmgFlexCorrection</c> record in the database.
    /// </summary>
    /// <remarks>
    /// The <c>JmgPayEvents</c> records that are associated with the <c>JmgFlexCorrection</c> record are
    /// also updated.
    /// </remarks>
    public void insert()
    {
        ttsbegin;
        super();
        this.updateJmgPayEvents();
        this.updateFlexBalancePayEvents();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showSeconds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the time set on the <c>JmgFlexCorrection</c> record formatted as a string.
    /// </summary>
    /// <param name="set">
    /// true if the <c>JmgFlexCorrection</c> record must be updated with the specified value; otherwise,
    /// false.
    /// </param>
    /// <param name="value">
    /// The value to set in the <c>Seconds</c> field in the <c>JmgFlexCorrection</c> record.
    /// </param>
    /// <returns>
    /// A formatted string with the time set on this <c>JmgFlexCorrection</c> record.
    /// </returns>
    edit JmgLabelSecondsPayFlexCorrection showSeconds(boolean set, JmgTimeString value)
    {
        if (set && value)
        {
            this.Seconds = JmgProfileSeconds::unFormattedSeconds(value,JmgSecondPresentationEnum::Centitime);
        }

        return JmgProfileSeconds::formattedSeconds(this.Seconds,JmgSecondPresentationEnum::Centitime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgFlexCorrection</c> record in the database.
    /// </summary>
    /// <remarks>
    /// The associated <c>JmgPayEvents</c> records are also updated.
    /// </remarks>
    public void update()
    {
        JmgPayEvents jmgPayEvents;
        ttsbegin;
        select forupdate jmgPayEvents
            where jmgPayEvents.SetOffParentTableId == this.TableId &&
                  jmgPayEvents.SetOffParent == this.RecId &&
                  jmgPayEvents.PayCostType  == this.orig().PayCostType;
        super();

        this.updateJmgPayEvents(jmgPayEvents);
        this.updateFlexBalancePayEvents();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFlexBalancePayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the <c>JmgPayEvents</c> record, which is used to calculate the flex balance of a
    /// worker.
    /// </summary>
    private void updateFlexBalancePayEvents()
    {
        JmgFlexGroup    jmgFlexGroup;
        JmgPayEvents    jmgPayEvents;
        jmgFlexGroup = JmgFlexGroup::find(JmgEmployee::find(this.Worker).FlexGroup);
        if (jmgFlexGroup                                                &&
            jmgFlexGroup.CalculateFlexFromPayTypes  == NoYes::Yes       &&
            jmgFlexGroup.FlexAddPayType             != this.PayCostType &&
            jmgFlexGroup.FlexSubPayType             != this.PayCostType)
        {
            select firstonly forupdate jmgPayEvents
                where jmgPayEvents.SetOffParentTableId  == this.TableId                 &&
                      jmgPayEvents.SetOffParent         == this.RecId                   &&
                      (jmgPayEvents.PayCostType         == jmgFlexGroup.FlexAddPayType  ||
                       jmgPayEvents.PayCostType         == jmgFlexGroup.FlexSubPayType);

            this.initJmgPayEvents(jmgPayEvents);
            jmgPayEvents.PaySeconds                 = this.Seconds;
            jmgPayEvents.PayCostType                = (this.Seconds > 0 ? jmgFlexGroup.FlexAddPayType : jmgFlexGroup.FlexSubPayType);
            jmgPayEvents.Price = JmgPayEmployee::getPayCostTypePrice(jmgPayEvents.PayCostType, jmgPayEvents.Worker, this.Date);
            jmgPayEvents.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJmgPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the <c>JmgPayEvents</c> record by using the <c>JmgFlexCorrection</c> record.
    /// </summary>
    /// <param name="_jmgPayEvents">
    /// An existing <c>JmgPayEvents</c> record, which is updated.
    /// </param>
    private void updateJmgPayEvents(JmgPayEvents _jmgPayEvents = null)
    {
        // Only create pay events, if a pay cost type is defined.
        if (this.PayCostType)
        {
            this.initJmgPayEvents(_jmgPayEvents);
            _jmgPayEvents.PaySeconds    = (this.PayQty ? any2int(this.PayQty * 3600) : this.Seconds);
            _jmgPayEvents.PayCostType   = this.PayCostType;
            _jmgPayEvents.Price         = JmgPayEmployee::getPayCostTypePrice(this.PayCostType, this.Worker, this.Date);
            _jmgPayEvents.write();
        }
        else
        {
            // If the Pay Cost type is no longer set, then delete the corresponding pay event.
            if (_jmgPayEvents)
            {
                _jmgPayEvents.delete();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.validatePayEvent(true);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePayEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether <c>JmgPayEvents</c> record that is associated to this <c>JmgFlexCorrection</c>
    /// record can be updated.
    /// </summary>
    /// <param name="_delete">
    /// A Boolean value that indicates whether to delete the associated <c>JmgPayEvents</c> record.
    /// </param>
    /// <returns>
    /// true if the associated <c>JmgPayEvents</c> record can be updated; otherwise, false.
    /// </returns>
    private boolean validatePayEvent(boolean _delete = false)
    {
        JmgPayEvents    jmgPayEvents;
        boolean         ret;
        ret = true;
        select firstonly forupdate jmgPayEvents
            where jmgPayEvents.SetOffParentTableId  == this.TableId &&
                  jmgPayEvents.SetOffParent         == this.RecId;

        if (jmgPayEvents && jmgPayEvents.PayTransferred == NoYes::Yes   &&
            (this.PayCostType   != this.orig().PayCostType              ||
             this.PayQty        != this.orig().PayQty                   ||
             this.Seconds       != this.orig().Seconds                  ||
             _delete))
        {
            if (JmgParameters::find().ErrorLevelOnCancelation == JmgErrorTolerance::Error)
            {
                ret = checkFailed("@SYS99960");
            }
            else if (JmgParameters::find().ErrorLevelOnCancelation == JmgErrorTolerance::Warning)
            {
                warning("@SYS99961");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean         ret;
        JmgFlexGroup    jmgFlexGroup;
        ret = super();

        jmgFlexGroup = JmgFlexGroup::find(JmgEmployee::find(this.Worker).FlexGroup);

        if (jmgFlexGroup                                                &&
            jmgFlexGroup.CalculateFlexFromPayTypes  == NoYes::Yes       &&
            (jmgFlexGroup.FlexAddPayType            == this.PayCostType ||
             jmgFlexGroup.FlexSubPayType            == this.PayCostType))
        {
            ret = checkFailed(strFmt("@SYS39856", this.PayCostType));
        }

        if (ret)
        {
            ret = this.validatePayEvent();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFlexCorrectionPayEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>JmgPayEvents</c> records based on the <c>JmgFlexCorrection</c> records for the specified
    /// worker at the specified date.
    /// </summary>
    /// <param name="_worker">
    /// The ID of the worker.
    /// </param>
    /// <param name="_profileDate">
    /// The profile date to search for <c>JmgFlexCorrection</c> records.
    /// </param>
    public static void createFlexCorrectionPayEvents(JmgWorkerRecId _worker, JmgDate _profileDate)
    {
        JmgFlexCorrection jmgFlexCorrection;
        JmgPayEvents jmgPayEvents;
        while select jmgFlexCorrection
            where jmgFlexCorrection.Worker == _worker &&
                  jmgFlexCorrection.Date == _profileDate
        {
            ttsbegin;
            select forupdate jmgPayEvents
                where jmgPayEvents.SetOffParentTableId == jmgFlexCorrection.TableId &&
                      jmgPayEvents.SetOffParent == jmgFlexCorrection.RecId;
            jmgFlexCorrection.updateJmgPayEvents(jmgPayEvents);
            jmgFlexCorrection.updateFlexBalancePayEvents();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAutomaticCorrections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes automatic flex corrections that are made by the system.
    /// </summary>
    /// <param name="_jmgEmployee">
    /// The <c>JmgEmployee</c> for which associated automatic flex corrections are deleted.
    /// </param>
    /// <param name="_fromDate">
    /// The start date for deletion of automatic flex corrections.
    /// </param>
    /// <param name="_toDate">
    /// The to date for deletion of automatic flex corrections.
    /// </param>
    public static void deleteAutomaticCorrections(JmgEmployee _jmgEmployee, JmgDate _fromDate, JmgDate _toDate)
    {
        JmgFlexCorrection jmgFlexCorrection;
        ttsbegin;
        while select forupdate jmgFlexCorrection
            where (jmgFlexCorrection.Worker == _jmgEmployee.Worker) &&
                  (jmgFlexCorrection.Date >= _fromDate) &&
                  (jmgFlexCorrection.Date <= _toDate) &&
                  jmgFlexCorrection.AutomaticCorrection
        {
            jmgFlexCorrection.delete();
        }
        ttscommit;

        if (JmgOptimizeTransferToPayExportJobFlight::instance().isEnabled())
        {
            JmgFlex::sumEmployee(_jmgEmployee, _fromDate);
        }
        else
        {
            // Recalculate the flex balance.
            JmgFlex::sumEmployee(_jmgEmployee);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Jmg</ConfigurationKey>
	<DeveloperDocumentation>@SYS317241</DeveloperDocumentation>
	<Label>@SYS38533</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>Date</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>EmplDateIdx</ClusteredIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Seconds</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrectedByWorker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayTransferred</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Correction</Name>
			<Label>@SYS38561</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayTransferred</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Date</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PersonInCharge</Name>
			<Label>@SYS4330</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrectedByWorker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutomaticCorrection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CorrectedByWorker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Label>@SYS2192</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Date</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCostType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayCostType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PayQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PayTransferred</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayTransferred</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Seconds</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgSeconds</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>HcmWorkerCorrectedByIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CorrectedByWorker</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmplDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Date</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayTransferred</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgFlexCorrection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorkerCorrectedBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker_1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_1_JmgFlexCorrection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CorrectedByWorker</Name>
					<Field>CorrectedByWorker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCostType</Name>
					<Field>PayCostType</Field>
					<RelatedField>PayCostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgStampJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgStampJournalTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DaysTotal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>FlexCorrection</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>Worker</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Date</Name>
					<Field>Date</Field>
					<RelatedField>ProfileDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>