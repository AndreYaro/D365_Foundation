<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferParmLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransferParmLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateShipNowInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the ship now inventory quantity.
    /// </summary>
    /// <returns>
    /// The ship now inventory quantity.
    /// </returns>
    private InventQty calculateShipNowInventQty()
    {
        PdsCatchWeightMovementQtyAdjustment qtyAdjustment;

        qtyAdjustment = PdsCatchWeightMovementQtyAdjustment::newBuffer(this);
        return qtyAdjustment.transferIssueQty(
                    InventTransferUpdateType::PickingList,
                    this.PdsCWQtyShipNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            this.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
        }

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to return value of AssessableValue
    /// </summary>
    /// <returns>
    /// AssessableValue field of InventTransferParmLine_IN table
    /// </returns>
    public AmountMST getAssessableValue()
    {
        return this.inventTransferParmLine_IN().AssessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields on the line.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// The <c>InventTransferLine</c> table record the initialization is based on.
    /// </param>
    public void initFromInventTransferLine(InventTransferLine _inventTransferLine)
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>
        this.ItemId         = _inventTransferLine.ItemId;
        this.InventDimId    = _inventTransferLine.InventDimId;

        this.TransactionCode = _inventTransferLine.TransactionCode;
        this.Transport       = _inventTransferLine.Transport;
        this.Port            = _inventTransferLine.Port;
        this.StatProcId      = _inventTransferLine.StatProcId;
        this.IntrastatCommodity = _inventTransferLine.IntrastatCommodity;

        this.OrigCountryRegionId = _inventTransferLine.OrigCountryRegionId;
        this.OrigStateId         = _inventTransferLine.OrigStateId;
        this.OrigCountyId        = _inventTransferLine.OrigCountyId;

        this.AmountValue         = _inventTransferLine.AmountValue;
        this.StatisticalValue    = _inventTransferLine.StatisticalValue;

        this.UnitPrice           = _inventTransferLine.UnitPrice;

        // <GEEU>
        if (IntrastatSpecMovement_CZ::isEnabled())
        {
            this.IntrastatSpecMove_CZ        = _inventTransferLine.IntrastatSpecMove_CZ;
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            this.IntrastatFulfillmentDate_HU = _inventTransferLine.IntrastatFulfillmentDate_HU;
        }
        // </GEEU>

        // <GEERU>
        this.Price_RU           = _inventTransferLine.Price_RU;
        this.PriceUnit_RU       = _inventTransferLine.PriceUnit_RU;
        this.InventDimIdTo_RU   = _inventTransferLine.InventDimIdTo_RU;
        // line amount will calc later - on insert() or update() methods
        // </GEERU>
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            InventTransferTable inventTransferTable =InventTransferTable::find(_inventTransferLine.TransferId);
            if (inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
            {
                if (inventTransferTable.StockTransferCostPriceHandlingImprovement_IN == NoYes::Yes)
                {
                    this.DefaultDimension_IN = InventSite::changeDimension(InventTable::find(this.ItemId).DefaultDimension, InventDim::find(this.InventDimId).InventSiteId);
                }
                else
                {
                    this.DefaultDimension_IN = _inventTransferLine.inventTransferLine_IN().DefaultDimension;
                }
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setLineAmount_RU();
        }
        // </GEERU>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            InventTransferLine inventTransferLine = this.inventTransferLine();

            if (InventTransferTable::find(inventTransferLine.TransferId).TransferType_IN == TransferType_IN::StockTransfer)
            {
                InventTransferParmLine_IN inventTransferParmLineIN = this.inventTransferParmLine_IN();

                if (inventTransferLine.QtyTransfer != 0)
                {
                    InventTransferLine_IN inventTransferLineIN = inventTransferLine.inventTransferLine_IN();
                    InventTransferParmTable inventTransferParmTable = this.inventTransferParmTable();

                    switch (inventTransferParmTable.UpdateType)
                    {
                        case InventTransferUpdateType::Shipment :
                            inventTransferParmLineIN.AssessableValue = inventTransferLineIN.AssessableValueTransactionCurrency * (this.QtyShipNow/inventTransferLine.QtyTransfer);
                            break;
                        case InventTransferUpdateType::Receive :
                            inventTransferParmLineIN.AssessableValue = inventTransferLineIN.AssessableValueTransactionCurrency * (this.QtyReceiveNow/inventTransferLine.QtyTransfer);
                            break;
                    }
                }
                this.packInventTransferParmLine_IN(inventTransferParmLineIN);
            }
        }
        // </GIN>

        super();

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN, #isoBR]))
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        // </GIN>

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferLine</Name>
				<Source><![CDATA[
    public InventTransferLine inventTransferLine(boolean _forupdate = false)
    {
        return InventTransferLine::findTransIdByUpdateType(
            InventTransferParmTable::find(this.ParmId,this.TransferId).UpdateType,
            this.InventTransId,
            _forupdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferParmLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventTransferParmLine_BR</c> record related to the <c>InventTransferParmLine</c>.
    /// </summary>
    /// <returns>
    /// The <c>InventTransferParmLine_BR</c> record.
    /// </returns>
    public InventTransferParmLine_BR inventTransferParmLine_BR()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(InventTransferParmLine_BR));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>InventTransferParmLine_IN</c> record related to the <c>InventTransferParmLine</c>.
    /// </summary>
    /// <returns>
    /// The <c>InventTransferParmLine_IN</c> record.
    /// </returns>
    public InventTransferParmLine_IN inventTransferParmLine_IN()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(InventTransferParmLine_IN));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransferParmTable</Name>
				<Source><![CDATA[
    public InventTransferParmTable inventTransferParmTable()
    {
        return InventTransferParmTable::find(this.ParmId,this.TransferId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the method that returns the item name of the item on the line.
    /// </summary>
    /// <returns>
    ///    An <c>ItemNameDisplay</c> data type that represents the item name.
    /// </returns>
    display public ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(InventDim::find(this.InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called by the kernel when a field on the table has its value modified.
    /// </summary>
    /// <param name="_fieldId">
    ///    The field ID of the field that changed.
    /// </param>
    /// <remarks>
    ///    Methods that should be called when a field value changes are called in this method.
    /// </remarks>
    public void modifiedField(FieldId _fieldId)
    {
        //<GIN>
        #isoCountryRegionCodes
        InventTransferParmLine_IN   inventTransferParmLine_IN;
        InventTransferLine          inventTransferLine;
        boolean                     countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);

        if (countryRegion_IN)
        {
            inventTransferParmLine_IN = this.inventTransferParmLine_IN();
            inventTransferLine = this.inventTransferLine();
        }
        //</GIN>
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventTransferParmLine, PdsCWQtyShipNow):
                this.QtyShipNow = this.calculateShipNowInventQty();
                InventMovement::setMinMaxQty(this);
                break;

            // <GIN>
            case fieldNum(InventTransferParmLine,QtyShipNow):
                if (countryRegion_IN)
                {
                    inventTransferParmLine_IN.AssessableValue = inventTransferLine.inventTransferLine_IN().AssessableValueTransactionCurrency * (this.QtyShipNow/inventTransferLine.QtyTransfer);
                }
                break;

            case fieldNum(InventTransferParmLine,QtyReceiveNow):
                if (countryRegion_IN)
                {
                    inventTransferParmLine_IN.AssessableValue = inventTransferLine.inventTransferLine_IN().AssessableValueTransactionCurrency * (this.QtyReceiveNow/inventTransferLine.QtyTransfer);
                }
                break;
            // </GIN>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventTransferParmLine_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an <c>InventTransferParmLine_BR</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_inventTransferParmLine_BR">
    /// The source record of <c>InventTransferParmLine_BR</c> table.
    /// </param>
    public void packInventTransferParmLine_BR(InventTransferParmLine_BR _inventTransferParmLine_BR)
    {
        _inventTransferParmLine_BR.InventTransferParmLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_inventTransferParmLine_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInventTransferParmLine_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs an <c>InventTransferParmLine_IN</c> record to the container field <C>PackedExtensions</C>.
    /// </summary>
    /// <param name="_inventTransferParmLine_IN">
    /// The source record of <c>InventTransferParmLine_IN</c> table.
    /// </param>
    public void packInventTransferParmLine_IN(InventTransferParmLine_IN _inventTransferParmLine_IN)
    {
        _inventTransferParmLine_IN.InventTransferParmLine = this.RecId;
        this.SysExtensionSerializerMap::packExtensionTable(_inventTransferParmLine_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyReceiveNowTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the qtyReceiveNow field of a line.
    /// </summary>
    /// <returns>
    /// An <c>InventTransferQty</c> value in the <c>qtyReceiveNow</c> field.
    /// </returns>
    public InventTransferQty qtyReceiveNowTotal()
    {
        return this.QtyReceiveNow; //+ this.QtyScrapNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount_RU</Name>
				<Source><![CDATA[
    void setLineAmount_RU()
    {
        this.LineAmount_RU = CurrencyExchangeHelper::amount(this.QtyShipNow ? this.QtyShipNow : this.QtyReceiveNow * this.Price_RU / (this.PriceUnit_RU ? this.PriceUnit_RU : 1), this.inventTransferParmTable().CurrencyCode_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        // <GEERU>
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
        && (this.QtyShipNow != this.orig().QtyShipNow || this.QtyReceiveNow != this.orig().QtyReceiveNow))
        {
            this.setLineAmount_RU();
        }
        // </GEERU>

        // <GTE>
        InventTransferParmLine origTransferParmLine = this.orig();
        // </GTE>

        super();

        // <GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
            && this.taxRecalculationNeeded(origTransferParmLine))
        {
            this.markCurrentTaxDocumentTaxStatusDirty();
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <paramref name="_fieldIdToCheck" /> field is valid.
    /// </summary>
    /// <param name="_fieldIdToCheck">
    ///    The field ID of the field to validate.
    /// </param>
    /// <returns>
    ///    true if the field is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case (fieldNum(InventTransferParmLine, QtyShipNow)) :
                if (this.QtyShipNow < 0)
                {
                    InventTransferUpdateType updateType = this.inventTransferParmTable().UpdateType;

                    if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
                        || updateType == InventTransferUpdateType::PickingList)
                    {
                        switch (updateType)
                        {
                            case InventTransferUpdateType::PickingList:
                                ret = checkFailed("@SYS98283");
                                break;
                            case InventTransferUpdateType::Shipment:
                                ret = checkFailed("@SYS78847");
                                break;
                            case InventTransferUpdateType::Receive:
                                ret = checkFailed("@SCM:ReceiveQtyMustBePositive");
                                break;
                            default:
                                EventHandlerRejectResult result = EventHandlerRejectResult::newSingleResponse();
                                this.validateQtyShipNowDelegate(updateType, result);
                                ret = !result.isRejected();
                        }
                    }
                }
                break;

            case (fieldNum(InventTransferParmLine,QtyReceiveNow)) :
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled())
                {
                    if (this.QtyReceiveNow * this.QtyScrapNow < 0)
                    {
                        ret = checkFailed("@GLS113803");
                    }
                }
                else if (this.QtyReceiveNow < 0)
                // </GEERU>
                {
                    ret = checkFailed("@SYS78530");
                }

                if (this.qtyReceiveNowTotal() > this.inventTransferLine().QtyRemainReceive)
                {
                    ret = checkFailed("@SYS78654");
                }

                if (this.QtyScrapNow > this.QtyReceiveNow)
                {
                    ret = checkFailed("@SCM:ReceiveQuantityMustMoreThanScrapQuantity");
                }
                break;

            case (fieldNum(InventTransferParmLine,QtyScrapNow)) :
                // <GEERU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled())
                {
                    if (this.QtyReceiveNow * this.QtyScrapNow < 0)
                    {
                        ret = checkFailed("@GLS113803");
                    }
                }
                else if (this.QtyScrapNow < 0)
                // </GEERU>
                {
                    ret = checkFailed("@SYS78692");
                }

                if (this.qtyReceiveNowTotal() > this.inventTransferLine().QtyRemainReceive)
                {
                    ret = checkFailed("@SYS78654");
                }

                if (this.QtyScrapNow > this.QtyReceiveNow)
                {
                    ret = checkFailed("@SCM:ReceiveQuantityMustMoreThanScrapQuantity");
                }
                break;

            default:
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyShipNowDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for validating a <c>QtyShipNow</c> field.
    /// </summary>
    /// <param name = "_updateType">
    /// The current <c>InventTransferUpdateType</c> class.
    /// </param>
    /// <param name = "_result">
    /// Reject this if validation fails.
    /// </param>
    delegate void validateQtyShipNowDelegate(InventTransferUpdateType _updateType, EventHandlerRejectResult _result)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>createPickLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferParmLine</c> records that are eligible for picking.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///     Current <c>InventTransferParmTable</c> record that will be used to retrieve all the
    ///     <c>InventTransferLine</c> records.
    /// </param>
    [SysObsolete('Use CreatePickLines API on InventTransferParmLineCreate class instead', false, 30\11\2017)]
    public static void createPickLines(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLineCreate::newFromParameters(_inventTransferParmTable).createPickLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceiveLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>InventTransferParmLine</c> records that are ready to be received.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    ///    An <c>InventTransferParmTable</c> record that is used to create the lines.
    /// </param>
    [SysObsolete('Use CreateReceiveLines API on InventTransferParmLineCreate class instead', false, 30\11\2017)]
    static public void createReceiveLines(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLineCreate::newFromParameters(_inventTransferParmTable).createReceiveLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>InventTransferParmLine</c> table records that are ready to be shipped and are related to
    /// the <c>InventTransferParmTable</c> table record passed in as argument.
    /// </summary>
    /// <param name="_inventTransferParmTable">
    /// An <c>InventTransferParmTable</c> table record from which the lines should be created.
    /// </param>
    [SysObsolete('Use CreateShipLines API on InventTransferParmLineCreate class instead', false, 30\11\2017)]
    static public void createShipLines(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferParmLineCreate::newFromParameters(_inventTransferParmTable).createShipLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParmId</Name>
				<Source><![CDATA[
    static public void deleteParmId(
        ParmId              _parmId,
        InventTransferId    _transferId)
    {
        InventTransferParmLine  inventTransferParmLine;

        if (TaxIntegrationUtils::isTransitDocumentEnabled())
        {
            select firstonly inventTransferParmLine
                where inventTransferParmLine.ParmId == _parmId &&
                  inventTransferParmLine.TransferId == _transferId;
            if (inventTransferParmLine)
            {
                inventTransferParmLine.TransitDocumentTransactionMap_IN::deleteTransitDocuments();
            }
        }

        delete_from inventTransferParmLine
            where inventTransferParmLine.ParmId     == _parmId &&
                  inventTransferParmLine.TransferId == _transferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(
        ParmId      _parmId,
        LineNum     _lineNum)
    {
        return _parmId &&
               (select inventTransferParmLine
                    where inventTransferParmLine.ParmId  == _parmId &&
                          inventTransferParmLine.LineNum == _lineNum
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTableRefId</Name>
				<Source><![CDATA[
    static public boolean existTableRefId(
        ParmId              _parmId,
        InventTransferId    _inventTransferId)
    {
        if (_parmId  &&  _inventTransferId)
        {
            return (select firstonly RecId from inventTransferParmLine
                    where inventTransferParmLine.ParmId          == _parmId
                           && inventTransferParmLine.TransferId  == _inventTransferId).RecId != 0;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    static public InventTransferParmLine find(
        ParmId      _parmId,
        LineNum     _lineNum,
        boolean     _forUpdate)
    {
        InventTransferParmLine      inventTransferParmLine;

        inventTransferParmLine.selectForUpdate(_forUpdate);

        if (_parmId)
        {
            select firstonly inventTransferParmLine
                where inventTransferParmLine.ParmId  == _parmId &&
                      inventTransferParmLine.LineNum == _lineNum;
        }

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdByUpdateTypeForQtyNow</Name>
				<Source><![CDATA[
    [Hookable]
    static private FieldId fieldIdByUpdateTypeForQtyNow(InventTransferUpdateType _updateType)
    {
        switch (_updateType)
        {
            case InventTransferUpdateType::Shipment:
                return fieldnum(InventTransferParmLine, QtyShipNow);
            case InventTransferUpdateType::Receive:
                return fieldnum(InventTransferParmLine, QtyReceiveNow);
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdByUpdateTypeForPdsCWQtyNow</Name>
				<Source><![CDATA[
    [Hookable]
    static private FieldId fieldIdByUpdateTypeForPdsCWQtyNow(InventTransferUpdateType _updateType)
    {
        switch (_updateType)
        {
            case InventTransferUpdateType::Shipment:
                return fieldnum(InventTransferParmLine, PdsCWQtyShipNow);
            case InventTransferUpdateType::Receive:
                return fieldnum(InventTransferParmLine, PdsCWQtyReceiveNow);
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyNowByUpdateType</Name>
				<Source><![CDATA[
    public Qty qtyNowByUpdateType(InventTransferUpdateType _updateType)
    {
        Qty defaultQty;
        FieldId fieldId = InventTransferParmLine::fieldIdByUpdateTypeForQtyNow(_updateType);
        return (fieldId ? this.(fieldId) : defaultQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyNowByUpdateType</Name>
				<Source><![CDATA[
    public Qty pdsCWQtyNowByUpdateType(InventTransferUpdateType _updateType)
    {
        Qty defaultQty;
        FieldId fieldId = InventTransferParmLine::fieldIdByUpdateTypeForPdsCWQtyNow(_updateType);
        return (fieldId ? this.(fieldId) : defaultQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a dimension set that contains the merged combination of the current
    /// <c>defaultDimension</c> field on the <c>SalesLine</c> table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set to merge with the current <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set to merge with the current <c>defaultDimension</c> field on this table;
    /// optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that contains the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when they are merged.
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.inventTransferLine().companyInfo().RecId)
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on the <c>InventTransferLine</c>
    /// table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.inventTransferLine().companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRecalculationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a change to the <c>InventTransferParmLine</c> table will update the Tax
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record.
    /// </param>
    /// <returns>True if current line tax should be recalculated, otherwise false </returns>
    // <GTE>
    private boolean taxRecalculationNeeded(Common _inventTransferParmLine = null)
    {
        InventTransferParmLine  inventTransferParmLine_Orig;
        boolean                 updateNeeded;

        if (_inventTransferParmLine)
        {
            inventTransferParmLine_Orig = _inventTransferParmLine as InventTransferParmLine;
        }
        else
        {
            inventTransferParmLine_Orig = this.orig();
        }

        updateNeeded =
            (
            (this.ItemId                != inventTransferParmLine_Orig.ItemId) ||
            (this.QtyShipNow            != inventTransferParmLine_Orig.QtyShipNow) ||
            (this.PdsCWQtyShipNow       != inventTransferParmLine_Orig.PdsCWQtyShipNow) ||
            (this.QtyReceiveNow         != inventTransferParmLine_Orig.QtyReceiveNow) ||
            (this.PdsCWQtyReceiveNow    != inventTransferParmLine_Orig.PdsCWQtyReceiveNow)||
            (this.QtyScrapNow           != inventTransferParmLine_Orig.QtyScrapNow)||
            (this.PdsCWQtyScrapNow      != inventTransferParmLine_Orig.PdsCWQtyScrapNow)
            );

        return updateNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCurrentTaxDocumentTaxStatusDirty</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Mark current tax status of <c> InventTransferParmTable </c> to dirty
    /// </summary>
    // <GTE>
    private void markCurrentTaxDocumentTaxStatusDirty()
    {
        TaxableDocumentDescriptor descriptor = TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(this.inventTransferParmTable());
        ITaxableDocument taxableDocument = TaxableDocumentObject::construct(descriptor);
        TaxBusinessService::markTaxDocumentTaxStatus(taxableDocument, TaxDocumentCalculationLevel::Dirty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasIndirectTaxFieldChanged_IN</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Determines whether a change to the <c> InventTransferParmLine </c> table buffer on india fields should update the associated <c>SourceDocumentDistribution</c> table.
    /// </summary>
    /// <param name="_inventTransferParmLine">
    /// The <c>InventTransferParmLine</c> record.
    /// </param>
    /// <returns>
    /// True if the associated <c>SourceDocumentDistribution</c> records should be updated, otherwise false.
    /// </returns>
    // <GIN>
    public boolean hasIndirectTaxFieldChanged_IN(Common _inventTransferParmLine = null)
    {
        boolean                     indirectTaxChanged = false;
        InventTransferParmLine_IN   inventTransferParmLine_IN;
        InventTransferParmLine_IN   InventTransferParmLine_Orig_IN;
        InventTransferParmLine      inventTransferParmLine_Orig;

        if (TaxParameters::checkTaxParameters_IN())
        {
            if (_inventTransferParmLine)
            {
                inventTransferParmLine_Orig   = _inventTransferParmLine as InventTransferParmLine;
            }
            else
            {
                inventTransferParmLine_Orig  = this.orig();
            }

            InventTransferParmLine_IN        = this.inventTransferParmLine_IN();
            InventTransferParmLine_Orig_IN   = inventTransferParmLine_Orig.inventTransferParmLine_IN();

            indirectTaxChanged  =
            InventTransferParmLine_IN.AssessableValue   != InventTransferParmLine_Orig_IN.AssessableValue
            || this.DefaultDimension_IN                 != inventTransferParmLine_Orig.DefaultDimension_IN;
        }

        return indirectTaxChanged;
    }
    // </GIN>

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>InventTransferOrders</ConfigurationKey>
	<DeveloperDocumentation>@SYS124014</DeveloperDocumentation>
	<Label>@SYS78315</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>LineNum</TitleField1>
	<TitleField2>InventTransId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ParmLineIdx</ClusteredIndex>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ParmLineIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyShipNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyScrapNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CloseLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension_IN</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignTrade</Name>
			<Label>@SYS27650</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransactionCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transport</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatProcId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatCommodity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountryRegionId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigStateId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigCountyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatisticalValue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat_W</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatSpecMove_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatFulfillmentDate_HU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransIdTransit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdTo_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryTransaction</Name>
			<Label>@SYS22710</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StatusReceipt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusIssue</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price_RU</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PriceUnit_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineAmount_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReceiptLine</Name>
			<Label>@SYS78317</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyReceiveNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyScrapNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyScrapNow</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipmentLine</Name>
			<Label>@SYS78316</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyShipNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyShipNow</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CloseLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TransferLine</Name>
			<Label>@SYS78550</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Price</Name>
			<Label>@SYS11865</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UnitPrice</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<CountryRegionCodes>AT,BE,BG,CY,CZ,DE,DK,EE,GR,ES,FI,FR,GB,HR,HU,IE,IT,LT,LU,LV,MT,NL,PL,PT,RO,SE,SI,SK</CountryRegionCodes>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS80230</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CloseLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferCloseLine</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension_IN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>IntrastatCommodity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatCommodityId</ExtendedDataType>
			<FeatureClass>IntrastatCommodityToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>IntrastatFulfillmentDate_HU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatFulfillmentDate_HU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatSpecMove_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatSpecMove_CZ</ExtendedDataType>
			<FeatureClass>IntrastatSpecMoveToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdTo_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransIdTransit</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdTransit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineAmount_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>LineAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountryRegionId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountryRegionId</ExtendedDataType>
			<FeatureClass>ItemOrigCountryRegionIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigCountyId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigCountyId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigStateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemOrigStateId</ExtendedDataType>
			<FeatureClass>ItemOrigStateIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyReceiveNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyScrapNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyScrapNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyShipNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWQtyShipNow</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PriceCur</ExtendedDataType>
			<Label>@SYS11770</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PriceUnit_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>PriceUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyReceiveNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyReceived</ExtendedDataType>
			<Label>@SYS78314</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyScrapNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyScrap</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyShipNow</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferQtyShipped</ExtendedDataType>
			<Label>@SYS78313</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StatisticalValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ForeignTrade</ConfigurationKey>
			<CountryRegionCodes>AT,BE,BG,CY,CZ,DE,DK,EE,GR,ES,FI,FR,GB,HR,HU,IE,IT,LT,LU,LV,MT,NL,PL,PT,RO,SE,SI,SK</CountryRegionCodes>
			<ExtendedDataType>StatisticalValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>StatProcId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatProcId</ExtendedDataType>
			<FeatureClass>IntrastatProcToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>StatusIssue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusReceipt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>StatusReceipt</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransactionCodeId</ExtendedDataType>
			<FeatureClass>IntrastatTransactionCodeToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransferId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Transport</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatTransport</ExtendedDataType>
			<FeatureClass>IntrastatTransportToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Intracode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>DEL_IntrastatItemCodeId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>UnitPrice</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitPrice</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParmLineIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransferId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLineExtension_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AssessableValue</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CompanyLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustomsTariffCodeTable</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DirectSettlement</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DSA</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseRecordType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseTariffCodes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExciseType</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesTaxFormTypes</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTCSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxWithholdTDSGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AssessableValueAccountingCurrency</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxInformation</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TransitDocumentTransactionMap_IN</MappingTable>
			<Connections />
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension_IN</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>DefaultDimension_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferLine_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DefaultDimension_InventTransferParmLine</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension_IN</Name>
					<SourceEDT>DimensionDefault</SourceEDT>
					<Field>DefaultDimension_IN</Field>
					<RelatedField>DefaultDimension</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatCommodity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IntrastatCommodity</Name>
					<Field>IntrastatCommodity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatStatProc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatStatProc</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>StatProcId</Name>
					<SourceEDT>IntrastatProcId</SourceEDT>
					<Field>StatProcId</Field>
					<RelatedField>StatProcId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatProcIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransactionCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransactionCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransactionCode</Name>
					<SourceEDT>IntrastatTransactionCodeId</SourceEDT>
					<Field>TransactionCode</Field>
					<RelatedField>TransactionCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatTransportMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatTransportMode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Transport</Name>
					<SourceEDT>IntrastatTransport</SourceEDT>
					<Field>Transport</Field>
					<RelatedField>TransPortCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransPortCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimTo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDimTo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdTo_RU</Name>
					<Field>InventDimIdTo_RU</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferParmTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124015</EntityRelationshipRole>
			<RelatedTable>InventTransferParmTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferId</Name>
					<Field>TransferId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ParmId</Name>
					<Field>ParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransferTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransferId</Name>
					<Field>TransferId</Field>
					<RelatedField>TransferId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransferIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OriginCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<SourceEDT>ItemOrigCountryRegionId</SourceEDT>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginCounty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressCounty</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountyId</Name>
					<Field>OrigCountyId</Field>
					<RelatedField>CountyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>OriginState</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsAddressState</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigCountryRegionId</Name>
					<Field>OrigCountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigStateId</Name>
					<Field>OrigStateId</Field>
					<RelatedField>StateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransitInventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TransitInventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventTransferParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransIdTransit</Name>
					<SourceEDT>InventTransIdTransit</SourceEDT>
					<Field>InventTransIdTransit</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DimensionAttributeValueSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_InventTransferParmLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension_IN</Name>
					<Field>DefaultDimension_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>