<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerClosingTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerClosingTable extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoEnd</Name>
				<Source><![CDATA[
    void autoEnd()
    {
        switch (MainAccount::find(this.MainAccount).Closing)
        {
            case LedgerClosing::Result  :
                this.Result += this.diff();
                break;

            case LedgerClosing::BalanceSheet:
                this.BalanceSheet += this.diff();
                break;

            case LedgerClosing::Capital:
                this.Capital += this.diff();
                break;

            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    void delete(boolean _updateSheet = true,
                boolean _updateTable = true)
    {
        if (_updateTable)
        {
            ttsbegin;

            this.updateAmounts(this, -1, _updateSheet);

            super();

            ttscommit;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>diff</Name>
				<Source><![CDATA[
    display Amount diff()
    {
        return ((this.TrialBalanceSheet + this.Transfer) - (this.Result   + this.BalanceSheet+ this.Capital));
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBalanceSheetCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the balance sheet credit.
    /// </summary>
    /// <returns>
    /// Balance Sheet Credit.
    /// </returns>
    public display LedgerAmountMSTCredit_CN displayBalanceSheetCredit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurCreditBySign(this.BalanceSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayBalanceSheetDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Balance Sheet Debit.
    /// </summary>
    /// <returns>
    /// the Balance Sheet Debit.
    /// </returns>
    public display LedgerAmountMSTDebit_CN displayBalanceSheetDebit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurDebitBySign(this.BalanceSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCapitalCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Capital Credit.
    /// </summary>
    /// <returns>
    /// the Capital Credit.
    /// </returns>
    public display LedgerAmountMSTCredit_CN displayCapitalCredit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurCreditBySign(this.Capital);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCapitalDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Capital Debit.
    /// </summary>
    /// <returns>
    /// Capital Debit.
    /// </returns>
    public display LedgerAmountMSTDebit_CN displayCapitalDebit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurDebitBySign(this.Capital);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResultAmountCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the amount credit.
    /// </summary>
    /// <returns>
    /// Amount Credit.
    /// </returns>
    public display LedgerAmountMSTCredit_CN displayResultAmountCredit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurCreditBySign(this.Result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayResultAmountDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the result amount debit.
    /// </summary>
    /// <returns>
    /// Result Amount Debit.
    /// </returns>
    public display LedgerAmountMSTDebit_CN displayResultAmountDebit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurDebitBySign(this.Result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransferCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Transfer Credit.
    /// </summary>
    /// <returns>
    /// Transfer Credit.
    /// </returns>
    public display LedgerAmountMSTCredit_CN displayTransferCredit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurCreditBySign(this.Transfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTransferDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the transfer debit.
    /// </summary>
    /// <returns>
    /// Transfer Debit.
    /// </returns>
    public display LedgerAmountMSTDebit_CN displayTransferDebit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurDebitBySign(this.Transfer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTrialBalanceSheetCredit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Trial Balance Sheet Credit.
    /// </summary>
    /// <returns>
    /// Trial Balance Sheet Credit.
    /// </returns>
    public display LedgerAmountMSTCredit_CN displayTrialBalanceSheetCredit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurCreditBySign(this.TrialBalanceSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTrialBalanceSheetDebit_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method for the Trial Balance Sheet Debit.
    /// </summary>
    /// <returns>
    /// Trial Balance Sheet Debit.
    /// </returns>
    public display LedgerAmountMSTDebit_CN displayTrialBalanceSheetDebit_CN()
    {
        return LedgerShowDebCredController_CN::getAmountCurDebitBySign(this.TrialBalanceSheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(boolean _updateSheet = true,
                boolean _updateTable = true)
    {
        if (_updateTable)
        {
            ttsbegin;

            this.autoEnd();

            super();

            this.updateAmounts(this, 1, _updateSheet);

            ttscommit;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingAccount</Name>
				<Source><![CDATA[
    public boolean isPostingAccount()
    {
        MainAccount     mainAccount;

        mainAccount.Type = this.AccountType;
        return !mainAccount.isNonPostingAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    void update(boolean _updatesheet = true,
                boolean _updateTable = true)
    {
        LedgerClosingTable  this_Orig = this.orig();

        if (_updateTable)
        {
            ttsbegin;

            this.autoEnd();

            this.updateAmounts(this_Orig, -1, _updatesheet);

            super();

            this.updateAmounts(this, 1, _updatesheet);

            ttscommit;
        }
        else
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    void updateAmounts(LedgerClosingTable    _ledgerClosingTable,
                              Integer               _sign,
                              boolean               _updateSheet)
    {
        DimensionAttributeValueTotallingCriteria    dimAttrValueTotallingCriteria;
        MainAccount                                 mainAccount;
        MainAccount                                 summaryMainAccount;
        DimensionAttributeValue                     dimAttrValue;
        LedgerClosingSheet                          ledgerClosingSheet;
        LedgerClosingTable                          sumAccount;
        Integer                                     signModified;

        ttsbegin;

        if (_ledgerClosingTable.isPostingAccount())
        {
            select firstonly forupdate ledgerClosingSheet
                 where ledgerClosingSheet.Sheet == _ledgerClosingTable.Sheet;

            if (ledgerClosingSheet)
            {
                if (_updateSheet)
                {
                    ledgerClosingSheet.SumTrialBalanceSheet += _ledgerClosingTable.TrialBalanceSheet * _sign;
                    ledgerClosingSheet.SumTransfer          += _ledgerClosingTable.Transfer * _sign;
                    ledgerClosingSheet.SumResult            += _ledgerClosingTable.Result * _sign;
                    ledgerClosingSheet.SumBalanceSheet      += _ledgerClosingTable.BalanceSheet * _sign;
                    ledgerClosingSheet.SumCapital           += _ledgerClosingTable.Capital * _sign;

                    ledgerClosingSheet.update();
                }

                while select InvertTotalSign from dimAttrValueTotallingCriteria
                    join RecId from mainAccount
                        where mainAccount.RecId == _ledgerClosingTable.MainAccount &&
                            dimAttrValueTotallingCriteria.FromValue <= mainAccount.MainAccountId &&
                            dimAttrValueTotallingCriteria.ToValue >= mainAccount.MainAccountId
                    join RecId from dimAttrValue
                         where dimAttrValue.RecId == dimAttrValueTotallingCriteria.DimensionAttributeValue &&
                            dimAttrValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                    join RecId from summaryMainAccount
                        where summaryMainAccount.RecId == dimAttrValue.EntityInstance
                {
                    select firstonly forupdate sumAccount
                        where sumAccount.Sheet == _ledgerClosingTable.Sheet   &&
                              sumAccount.MainAccount == summaryMainAccount.RecId;

                    if (sumAccount)
                    {
                        signModified = dimAttrValueTotallingCriteria.InvertTotalSign ? (_sign * -1) : _sign;

                        sumAccount.TrialBalanceSheet += _ledgerClosingTable.TrialBalanceSheet * signModified;
                        sumAccount.Transfer          += _ledgerClosingTable.Transfer * signModified;
                        sumAccount.Result            += _ledgerClosingTable.Result * signModified;
                        sumAccount.BalanceSheet      += _ledgerClosingTable.BalanceSheet * signModified;
                        sumAccount.Capital           += _ledgerClosingTable.Capital * signModified;

                        sumAccount.update();
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (LedgerClosingSheet::find(this.Sheet).Voucher)
            {
                ret = checkFailed("@SYS28059");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;
        ;

        ret = super();

        if (ret)
        {
            if (LedgerClosingSheet::find(this.Sheet).Voucher)
            {
                ret = checkFailed("@SYS28059");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(ClosingSheet _sheet, RecId _mainAccountRecId)
    {
        boolean ret = true;

        if (!LedgerClosingTable::exist(_sheet, _mainAccountRecId))
        {
            ret = checkFailed(strfmt(LedgerClosingTable::txtNotExist(), _sheet, MainAccount::find(_mainAccountRecId).MainAccountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ClosingSheet _sheet, RecId _mainAccountRecId)
    {
        boolean found;

        found = (select firstonly
                    RecId
                from
                    ledgerClosingTable
                 where
                    ledgerClosingTable.Sheet == _sheet &&
                    ledgerClosingTable.MainAccount == _mainAccountRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerClosingTable find(
        ClosingSheet _sheet,
        RecId _mainAccountRecId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerClosingTable ledgerClosingTable;
        ;

        ledgerClosingTable.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerClosingTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly ledgerClosingTable
            where ledgerClosingTable.Sheet == _sheet &&
                ledgerClosingTable.MainAccount == _mainAccountRecId;

        return ledgerClosingTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102220";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS125906</DeveloperDocumentation>
	<Label>@SYS22246</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>Sheet</TitleField1>
	<TitleField2>Transfer</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>ShMnAcctIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>ShMnAcctIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LedgerClosingTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LedgerClosingTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TrialBalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Result</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Capital</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reconciled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountType</Name>
			<Label>@SYS27730</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TrialBalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Transfer</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Result</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BalanceSheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Capital</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Sheet</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MainAccount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reconciled</Name>
			<Label>@SYS22247</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reconciled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>DimensionLedgerAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BalanceSheet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76086</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Capital</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS2543</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MainAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS135766</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reconciled</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS22247</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Result</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS6769</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Sheet</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ClosingSheet</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Transfer</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS10443</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TrialBalanceSheet</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYS76084</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ShMnAcctIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Sheet</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>MainAccount</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerClosingSheet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerClosingSheet</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Sheet</Name>
					<SourceEDT>ClosingSheet</SourceEDT>
					<Field>Sheet</Field>
					<RelatedField>Sheet</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SheetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>MainAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>MainAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>MainAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerClosingTable</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>MainAccount</Name>
					<Field>MainAccount</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>