<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBankAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBankAccount extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressing</Name>
				<Source><![CDATA[
    display LogisticsAddressing addressing()
    {
        return LogisticsLocationEntity::location2PostalAddress(this.Location).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountOpenedIn_RU</Name>
				<Source><![CDATA[
    public display BankAccountOpenedIn_RU bankAccountOpenedIn_RU()
    {
        return this.BankAccountMap::bankAccountOpenedIn_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountValidation</Name>
				<Source><![CDATA[
    Bank bankAccountValidation()
    {
        return this.BankAccountMap::bankAccountValidation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankBIC_RU</Name>
				<Source><![CDATA[
    public display BankBIC_RU bankBIC_RU()
    {
        return this.BankAccountMap::bankBIC_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankIsBranch_RU</Name>
				<Source><![CDATA[
    public boolean bankIsBranch_RU()
    {
        return this.BankAccountMap::bankIsBranch_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankName_RU</Name>
				<Source><![CDATA[
    public display BankName_RU bankName_RU()
    {
        return this.BankAccountMap::bankName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankShortAddressing_RU</Name>
				<Source><![CDATA[
    public BankShortAddressing_RU bankShortAddressing_RU()
    {
        return this.BankAccountMap::bankShortAddressing_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseBankName_RU</Name>
				<Source><![CDATA[
    public Description baseBankName_RU()
    {
        return this.BankAccountMap::baseBankName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseBankShortAddressing_RU</Name>
				<Source><![CDATA[
    public BankShortAddressing_RU baseBankShortAddressing_RU()
    {
        return this.BankAccountMap::baseBankShortAddressing_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDefault_LV</Name>
				<Source><![CDATA[
    private boolean checkDefault_LV()
    {
        CustBankAccount custBankAccount;

        if (this.LvDefaultBank)
        {
            select firstonly RecId from custBankAccount
                where custBankAccount.CustAccount == this.CustAccount &&
                      custBankAccount.CurrencyCode == this.CurrencyCode &&
                      custBankAccount.LvDefaultBank == NoYes::Yes &&
                      custBankAccount.RecId != this.RecId;
        }

        return custBankAccount.RecId ? checkFailed("@GLS108523") : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryIsoCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the bank account postal address country ISO code identifier.
    /// </summary>
    /// <returns>
    /// The bank account country ISO code identifier.
    /// </returns>
    private LogisticsAddressCountryRegionISOCode countryIsoCode()
    {
        return LogisticsAddressCountryRegion::find(LogisticsLocationEntity::location2PostalAddress(this.Location).CountryRegionId).isOcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the bank account postal address country region identifier.
    /// </summary>
    /// <returns>
    /// The bank account country region identifier.
    /// </returns>
    LogisticsAddressCountryRegionId countryRegionId()
    {
        return LogisticsLocationEntity::location2PostalAddress(this.Location).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the customer name associated with the customer account of this bank account.
    /// </summary>
    /// <returns>The customer name associated with the customer account of this bank account.</returns>
    public display DirPartyName customerName()
    {
        return CustTable::find(this.CustAccount).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    public edit CrossExchRate editExchRate(boolean set, CrossExchRate _exchRate)
    {
        if (set)
        {
            this.ExchRate = CurrencyEuroDenomination::prepareExchangeRateForStorage_Static(_exchRate, ExchangeRateDisplayFactor::One);
        }
        else
        {
            _exchRate = CurrencyEuroDenomination::displayStoredExchangeRate_Static(this.ExchRate, ExchangeRateDisplayFactor::One);
        }

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>foreignBankName_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the foreign bank name.
    /// </summary>
    /// <returns>
    /// The foreign bank name.
    /// </returns>
    public display BankName_RU foreignBankName_RU()
    {
        return this.BankAccountMap::foreignBankName_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBankGroup</Name>
				<Source><![CDATA[
    void initFromBankGroup(BankGroup _bankGroup)
    {
        this.BankAccountMap::initFromBankGroup(_bankGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtension</Name>
				<Source><![CDATA[
    public TableExtension getExtension()
    {
        return SysTableExtension::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultingDependencies</Name>
				<Source><![CDATA[
    public container getDefaultingDependencies()
    {
        container bankMapDependencies = this.BankAccountMap::bankAccountMappingDefaultingDependencies();

        return bankMapDependencies;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    public void defaultField(FieldId _fieldId)
    {
        super(_fieldId);

        BankGroup bankGroup = BankGroup::find(this.BankGroupId);
        if (bankGroup)
        {
            this.BankAccountMap::defaultFieldOnMap(_fieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);
        
        this.BankAccountMap::modifiedField(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && CustPrenote::existBankPrenotes(this.CustAccount,this.AccountID))
        {
            if (Box::yesNo(strFmt("@SYS127532",this.AccountID),DialogButton::Yes))
            {
                CustPrenote::deletePrenotes(this.AccountID, this.CustAccount);
                ret = true;
            }
            else
            {
                ret = false;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldId)
    {
        boolean ret;

        #ISOCountryRegionCodes

        ret = super(_fieldId);
        if (ret)
        {
            switch (_fieldId)
            {
                case (fieldNum(CustBankAccount, BankIBAN)) :
                    if (Bank::checkBankIBAN(this.BankIBAN, this.AccountID) &&
                        CustDirectDebitMandate::validateCustBankAccount(this))
                    {
                        CustDirectDebitMandate::modifiedCustBankAccount(this);

                        this.BankIBAN = strUpr(this.BankIBAN);

                        // If the IBAN has passed Mod97 validation, run further validations to check that
                        // the IBAN both references and adheres to an existing country account structure
                        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(this.BankIBAN);
                        bankIBANValidator.parmRegistrationNum(this.RegistrationNum);
                        bankIBANValidator.validateBankIBANFollowsCountryStructure(this.AccountNum);

                        ret = true;
                    }
                    else
                    {
                        ret = false;
                    }
                    break;

                case fieldNum(CustBankAccount, AccountNum) :
                    if (this.countryIsoCode() != #isoNL)
                    {
                        ret = this.BankAccountMap::bankAccountValidation().checkBankAccountNum(this.AccountNum);
                    }

                    if (ret)
                    {
                        ret = this.validatePrenote();
                    }

                    // If an IBAN has been specified for this record, validate that the new customer bank account number
                    // matches the account number found in the IBAN.
                    if (ret && this.BankIBAN)
                    {                      
                        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(this.BankIBAN);
                        bankIBANValidator.parmRegistrationNum(this.RegistrationNum);
                        bankIBANValidator.validateBankIBANMatchesAccountNumber(this.AccountNum);
                    }

                    break;

                case fieldNum(CustBankAccount,Name) :
                    ret = this.validatePrenote();
                    break;

                case fieldNum(CustBankAccount, Rfc_MX) :
                    TaxRegistrationValidator_MX taxRegistrationValidator = TaxRegistrationValidator_MX::construct(this);
                    ret = taxRegistrationValidator.validateRFC(this.Rfc_MX, CompanyType_MX::LegalEntity);
                    break;

                case fieldNum(CustBankAccount, RegistrationNum) :
                    
                    ret = this.validatePrenote();

                    // If an IBAN has been specified for this record, validate that the new bank routing number
                    // matches the routing number found in the IBAN.
                    if (ret && this.BankIBAN)
                    {
                        BankIBANAccountValidator bankIBANValidator = BankIBANAccountValidator::construct(this.BankIBAN);
                        bankIBANValidator.parmRegistrationNum(this.RegistrationNum);
                        bankIBANValidator.validateBankIBANMatchesRoutingNumber(this.RegistrationNum);
                    }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrenote</Name>
				<Source><![CDATA[
    protected boolean validatePrenote()
    {
        boolean ret = true;

        if (CustPrenote::existBankPrenotes(this.CustAccount, this.AccountID))
        {
            if (Box::yesNo(strFmt("@SYS127532", this.AccountID), DialogButton::Yes))
            {
                CustPrenote::deletePrenotes(this.AccountID, this.CustAccount);
                ret = true;
            }
            else
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        // <GEELV>
        #ISOCountryRegionCodes
        // </GEELV>
        boolean ret;

        ret = super();

        if (ret && this.countryIsoCode() != #isoNL)
        {
            ret = this.BankAccountMap::validateWrite();
        }

        // <GEELV>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            if (this.LvDefaultBank && !this.CurrencyCode)
            {
                ret = checkFailed(strFmt("@SYS84378", fieldId2pname(tableNum(CustBankAccount), fieldNum(CustBankAccount, CurrencyCode))));
            }
            ret = ret && this.checkDefault_LV();
        }
        // </GEELV>

        if (this.Location && this.BankCIN && !SysCountryRegionCode::isLocationInCountryRegion(this.Location, [#isoIT]))
        {
            ret = checkFailed("@CashManagement_Localization:CINEnabledOnlyInItalianAddress");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBankAccountReference</Name>
				<Source><![CDATA[
    static boolean checkBankAccountReference(CustAccount _custAccount,
                                             CustBankAccountId _custBankAccountId,
                                             CompanyId _company = curext())
    {
        CompanyId companyId;

        if (_custBankAccountId)
        {
            if (!_company)
            {
                companyId = curext();
            }
            else
            {
                companyId = _company;

                if (! xDataArea::exist(companyId))
                {
                    return checkFailed(strFmt("@SYS10666", companyId));
                }
            }

            changecompany(companyId)
            {
                if (!CustBankAccount::find(_custAccount, _custBankAccountId))
                {
                    return checkFailed(strFmt("@SYS27061", _custBankAccountId));
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CustAccount _custAccount, CustBankAccountId _custBankAccountId )
    {
        boolean ret = true;

        if (!CustBankAccount::exist(_custAccount, _custBankAccountId))
        {
            ret = checkFailed(strFmt(CustBankAccount::txtNotExist(), _custAccount, _custBankAccountId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CustAccount _custAccount, CustBankAccountId _custBankAccountId )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custBankAccount
                 where
                     custBankAccount.CustAccount == _custAccount &&
                    custBankAccount.AccountID == _custBankAccountId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustBankAccount find(
        CustAccount _custAccount,
        CustBankAccountId _custBankAccountId ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBankAccount custBankAccount;

        custBankAccount.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custBankAccount.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custBankAccount
            where
            custBankAccount.CustAccount == _custAccount &&
                    custBankAccount.AccountID == _custBankAccountId;

        return custBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a <c>CustBankAccount</c> record in the given company.
    /// </summary>
    /// <param name="_companyId">
    ///    The company in which to look for the record.
    /// </param>
    /// <param name="_custAccount">
    ///    The customer account ID.
    /// </param>
    /// <param name="_custBankAccountId">
    ///    The bank account ID.
    /// </param>
    /// <param name="_forupdate">
    ///    Determines whether the returned <c>CustBankAccount</c> record is selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model to use; optional.
    /// </param>
    /// <returns>
    ///    Returns the <c>VendBankAccount</c> record, if found.
    /// </returns>

    public static CustBankAccount findByCompany(
        CompanyId _companyId,
        CustAccount _custAccount,
        CustBankAccountId _custBankAccountId ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBankAccount custBankAccount;

        changecompany (_companyId)
        {
            custBankAccount = CustBankAccount::find(_custAccount, _custBankAccountId, _forupdate, _concurrencyModel);
        }

        return custBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault_LV</Name>
				<Source><![CDATA[
    public static CustBankAccount findDefault_LV(CustAccount _custAccount, CurrencyCode _currencyCode)
    {
        CustBankAccount custBankAccount;

        select firstonly custBankAccount
            where custBankAccount.CustAccount == _custAccount &&
                    custBankAccount.CurrencyCode == _currencyCode &&
                    custBankAccount.LvDefaultBank == NoYes::Yes;

        return custBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultByCompany_LV</Name>
				<Source><![CDATA[
    public static CustBankAccount findDefaultByCompany_LV(CompanyId _companyId,
                                                          CustAccount _custAccount,
                                                          CurrencyCode _currencyCode,
                                                          boolean _forUpdate = false,
                                                          ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBankAccount custBankAccount;

        changecompany(_companyId)
        {
            custBankAccount.selectForUpdate(_forUpdate);
            if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                custBankAccount.concurrencyModel(_concurrencyModel);
            }

            select firstonly custBankAccount
                where custBankAccount.CustAccount == _custAccount &&
                      custBankAccount.CurrencyCode == _currencyCode &&
                      custBankAccount.LvDefaultBank == NoYes::Yes;
        }

        return custBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBankAccount</Name>
				<Source><![CDATA[
    static void lookupBankAccount(FormStringControl _ctrl,
                                         CustAccount _custAccount,
                                         CompanyId _company = curext())
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(CustBankAccount), _ctrl);
        Query query = new Query();
        QueryBuildDataSource qbds;
        CompanyId companyId;

        if (!_company)
        {
            companyId = curext();
        }
        else
        {
            companyId = _company;

            if (! xDataArea::exist(companyId))
            {
                throw error(strFmt("@SYS10666", companyId));
            }
        }

        changecompany(companyId)
        {
            CustBankAccount::addLookupFieldsForBankAccount(sysTableLookup);

            qbds = query.addDataSource(tableNum(CustBankAccount));
            qbds.addRange(fieldNum(CustBankAccount, CustAccount)).value(queryValue(_custAccount));
            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLookupFieldsForBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds lookup fields to an existing <c>SysTableLookup</c> instance for looking up the customer bank accounts.
    /// </summary>
    /// <param name = "_sysTableLookup">An existing <c>SysTableLookup</c> instance.</param>
    protected static void addLookupFieldsForBankAccount(SysTableLookup _sysTableLookup)
    {
        _sysTableLookup.addLookupfield(fieldNum(CustBankAccount, CustAccount));
        _sysTableLookup.addLookupfield(fieldNum(CustBankAccount, AccountID), true);
        _sysTableLookup.addLookupfield(fieldNum(CustBankAccount, Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    static TxtNotExist txtNotExist()
    {
        return "@SYS9779";
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventAddressClearOrEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method allows for <c>LogisticsLocationFormHandler</c> to determine if the address can be cleared or edited.
    /// </summary>
    /// <returns>
    /// true if the location is the same as the account's bank group location; otherwise, false.
    /// </returns>
    public boolean preventAddressClearOrEdit()
    {
        return LogisticsLocationAppUtil::callerIsBankGroupLocation(this);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS127230</DeveloperDocumentation>
	<FormRef>CustBankAccounts</FormRef>
	<Label>@SYS24208</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>AccountID</TitleField1>
	<TitleField2>Name</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>AccountIdx</ClusteredIndex>
	<DataSharingType>Duplicate</DataSharingType>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>AccountIdx</PrimaryIndex>
	<ReplacementKey>AccountIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Location</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Administration</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bank_RU</Name>
			<Label>@GLS100629</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankBIC_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrAccount_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankAccountOpenedIn_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>BankConstantSymbol</Name>
			<Label>@GLS107997</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankConstantSymbol</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecificSymbol</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ContactInfo</Name>
			<Label>@SYS21663</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPerson</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Phone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PhoneLocal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CellularPhone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Pager</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TeleFax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Email</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SMS</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>URL</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Telex</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CorrespondentBank_LT</Name>
			<Label>@GLS113356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CorrespondentBankName_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrespondentBankAddress_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrespondentBankSWIFT_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrespondentBankAccount_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ForeignBank_RU</Name>
			<Label>@GLS223927</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ForeignBank_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>foreignBankName_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignAccount_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ForeignSWIFT_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCodeType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SWIFTNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankIBAN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankAccountType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrAccount_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IntermediateBank_LT</Name>
			<Label>@GLS113357</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntermediateBankName_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntermediateBankAddress_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntermediateBankSWIFT_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntermediateBankAccount_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RegistrationNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankBIC_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CorrAccount_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>bankAccountOpenedIn_RU</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankCIN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankContractAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LvDefaultBank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPaymentTextCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MsgToBank</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentShow</Name>
			<Label>@SYS828</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustPaymentTextCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MsgToBank</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRateRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SYS2186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankSortCode_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountID</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankAccountType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionContextField>Location</CountryRegionContextField>
			<EnumType>BankAccountType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankCIN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCIN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankCodeType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>BankCodeType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankConstantSymbol</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS108021</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankContractAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>GiroContractAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankGroupId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankIBAN</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankIBAN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankSortCode_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>BankSortCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CellularPhone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PhoneMobile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPerson</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PersonName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrAccount_W</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankCorrAccount_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankAccount_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtCorrespondentBankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankAddress_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtCorrespondentBankAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankName_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtCorrespondentBankName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CorrespondentBankSWIFT_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtCorrespondentBankSWIFT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DEL_CustDomNumber_BE</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects70</ConfigurationKey>
			<ExtendedDataType>DEL_CustDomNumber_BE</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPaymentTextCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymTextCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Email</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Email</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CrossExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExchRateRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRateRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignAccount_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>BankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignBank_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>BankGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<RelationContext>BankGroupForeign_RU</RelationContext>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ForeignSWIFT_RU</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>RU</CountryRegionCodes>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
			<Label>@SYS9360</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankAccount_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtIntermediateBankAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankAddress_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtIntermediateBankAddress</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankName_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtIntermediateBankName</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntermediateBankSWIFT_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LtIntermediateBankSWIFT</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Location</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LvDefaultBank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LVDefaultBank</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>MsgToBank</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankMsgToBank</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Pager</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Pager</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Phone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Phone</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PhoneLocal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PhoneLocal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RegistrationNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankRegNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SMS</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMS</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SpecificSymbol</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ</CountryRegionCodes>
			<ExtendedDataType>SpecificSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SWIFTNo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TeleFax</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TeleFax</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Telex</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Telex</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>URL</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>URL</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Rfc_MX</Name>
			<ExtendedDataType>Rfc_MX</ExtendedDataType>
			<HelpText>@ApplicationSuite_Localization:RFCNotRequiredInForeignBanks</HelpText>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AccountIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankConstantSymbolIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankConstantSymbol</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>BankAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountID</MapField>
					<MapFieldTo>AccountID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankGroupId</MapField>
					<MapFieldTo>BankGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AccountNum</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RegistrationNum</MapField>
					<MapFieldTo>RegistrationNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Phone</MapField>
					<MapFieldTo>Phone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TeleFax</MapField>
					<MapFieldTo>TeleFax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ContactPerson</MapField>
					<MapFieldTo>ContactPerson</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Email</MapField>
					<MapFieldTo>Email</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>URL</MapField>
					<MapFieldTo>URL</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Telex</MapField>
					<MapFieldTo>Telex</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PhoneLocal</MapField>
					<MapFieldTo>PhoneLocal</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CellularPhone</MapField>
					<MapFieldTo>CellularPhone</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendAccount</MapField>
					<MapFieldTo>CustAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankContractAccount</MapField>
					<MapFieldTo>BankContractAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CustVendPaymTextCode</MapField>
					<MapFieldTo>CustPaymentTextCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SWIFTNo</MapField>
					<MapFieldTo>SWIFTNo</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MsgToBank</MapField>
					<MapFieldTo>MsgToBank</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateRef</MapField>
					<MapFieldTo>ExchRateRef</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GiroContractAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Pager</MapField>
					<MapFieldTo>Pager</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SMS</MapField>
					<MapFieldTo>SMS</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCodeType</MapField>
					<MapFieldTo>BankCodeType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>isBankPrenote</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrenoteResponseDays</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankIBAN</MapField>
					<MapFieldTo>BankIBAN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BankCIN</MapField>
					<MapFieldTo>BankCIN</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignBank_RU</MapField>
					<MapFieldTo>ForeignBank_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignAccount_RU</MapField>
					<MapFieldTo>ForeignAccount_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ForeignSWIFT_RU</MapField>
					<MapFieldTo>ForeignSWIFT_RU</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrAccount_W</MapField>
					<MapFieldTo>CorrAccount_W</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>LogisticsLocationMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Location</MapField>
					<MapFieldTo>Location</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankConstantSymbol</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>BankConstantSymbol</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankConstantSymbol</Name>
					<Field>BankConstantSymbol</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankGroupId</Name>
					<SourceEDT>BankGroupId</SourceEDT>
					<Field>BankGroupId</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BankGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>BankGroupForeign_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>BankGroupForeign_RU</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>BankType_RU_Extern</Name>
					<RelatedField>BankType_RU</RelatedField>
					<ValueStr>BankType_RU::Foreign</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ForeignBank_RU</Name>
					<Field>ForeignBank_RU</Field>
					<RelatedField>BankGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustBankAccount</Name>
			<EntityRelationshipRole>@SYS123434</EntityRelationshipRole>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableRole>CustBankAccount</RelatedTableRole>
			<RelationshipType>Link</RelationshipType>
			<Role>CustBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountID</Name>
					<Field>AccountID</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<Field>CustAccount</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Location_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Location_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBankAccount</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Location</Name>
					<Field>Location</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>