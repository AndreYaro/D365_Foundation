<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatPunchoutRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class CatPunchoutRequest extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>requestType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the punchout request protocol of the request.
    /// </summary>
    /// <returns>
    ///    The <c>CatPunchoutEntityType</c> data type.
    /// </returns>
    /// <remarks>
    ///    Sub types of the <c>CatPunchoutRequest</c> class must override this method.
    /// </remarks>
    public display CatPunchoutEntityType requestType()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatPunchoutRequest</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>CatPunchoutRequestRecId</c> of the <c>CatPunchoutRequest</c> to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatPunchoutRequest</c> table; otherwise, an empty record.
    /// </returns>
    public static CatPunchoutRequest find(CatPunchoutRequestRecId _recId, boolean _forUpdate = false)
    {
        CatPunchoutRequest punchoutRequest;

        punchoutRequest.selectForUpdate(_forUpdate);

        select firstonly punchoutRequest
            where punchoutRequest.RecId == _recId;

        return punchoutRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPurchReqTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatPunchoutRequest</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>PurchReqRefRecId</c> data type to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatPunchoutRequest</c> table; otherwise, an empty record.
    /// </returns>
    public static CatPunchoutRequest findByPurchReqTable(PurchReqRefRecId _recId, boolean _forUpdate = false)
    {
        CatPunchoutRequest  punchoutRequest;
    
        if (_recId)
        {
            punchoutRequest.selectForUpdate(_forUpdate);

            select firstonly punchoutRequest
            where punchoutRequest.PurchReqTable == _recId;
        }
    
        return punchoutRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPreparer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatPunchoutRequest</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>PurchReqPreparerRefRecId</c> data type to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatPunchoutRequest</c> table; otherwise, an empty record.
    /// </returns>
    public static CatPunchoutRequest findByPreparer(PurchReqPreparerRefRecId _recId = DirPersonUser::current().PersonParty, boolean _forUpdate = false)
    {
        CatPunchoutRequest  punchoutRequest;
    
        if (_recId)
        {
            punchoutRequest.selectForUpdate(_forUpdate);

            select firstonly punchoutRequest
            where punchoutRequest.Originator == _recId;
        }
    
        return punchoutRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByExternalCatalog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>CatPunchoutRequest</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The <c>CatExternalCatalogRecId</c> data type to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>CatPunchoutRequest</c> table; otherwise, an empty record.
    /// </returns>
    public static CatPunchoutRequest findByExternalCatalog(CatExternalCatalogRecId _recId, boolean _forUpdate = false)
    {
        CatPunchoutRequest  punchoutRequest;
    
        if (_recId)
        {
            punchoutRequest.selectForUpdate(_forUpdate);

            select firstonly punchoutRequest
            where punchoutRequest.ExternalCatalog == _recId;
        }
    
        return punchoutRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the punchout request can be deleted.
    /// </summary>
    /// <returns>
    ///   true if the request can be deleted; otherwise, false.
    /// </returns>
    public boolean canDelete()
    {
        // Allow deleting requests that are consumed or expired
        return this.RequestStatus == CatPunchoutRequestStatus::Expired ||
            this.RequestStatus == CatPunchoutRequestStatus::BasketConsumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;
    
        ret = super();
    
        return ret && this.canDelete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.RequestStatus = CatPunchoutRequestStatus::ExpectsBasket;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBasketConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the status of punchout request that has the basket consumed.
    /// </summary>
    public void setBasketConsumed()
    {
        this.RequestStatus = CatPunchoutRequestStatus::BasketConsumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExpired</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Updates the status of punchout request that has the basket consumed.
    /// </summary>
    public void setExpired()
    {
        this.RequestStatus = CatPunchoutRequestStatus::Expired;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the punchout request from a related record.
    /// </summary>
    /// <param name="_relatedRecord">
    /// The related record to initialize the punchout request from.
    /// </param>
    /// <remarks>
    /// Sub types of the <c>CatPunchoutRequest</c> class should override this method.
    /// </remarks>
    public void initFrom(Common _relatedRecord)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>discardPunchoutRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discards punchout request and related punchout session data.
    /// </summary>
    public void discardPunchoutRequest()
    {
        if (!this.canDelete())
        {
            throw error("@SCM:PunchoutRequestCanNotBeDiscarded");
        }

        CatPunchoutHandler CatPunchoutHandler = CatPunchoutHandler::constructFromPunchoutRequest(this.RecId);
        CatPunchoutHandler.discardPunchoutRequest(this.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discardExpiredPunchoutRequests</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discard expired punchout requests for the specific punchout originator.
    /// </summary>
    /// <param name = "_originator">
    /// The <c>PurchReqPreparerRefRecId</c> of the punchout request originator; optional, defaulted to current user.
    /// </param>
    /// <remarks>
    /// The expiry threshold is current system date - 2 days.
    /// </remarks>
    public static void discardExpiredPunchoutRequests(PurchReqPreparerRefRecId _originator = HcmWorkerLookup::currentWorker())
    {
        CatPunchoutRequest punchoutRequest;
        utcdatetime expiryThreshold = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), -2);

        ttsbegin;

        while select forupdate punchoutRequest
            where punchoutRequest.Originator       == _originator
               && punchoutRequest.RequestStatus    == CatPunchoutRequestStatus::ExpectsBasket
               && punchoutRequest.CreatedDateTime  <= expiryThreshold
        {
            punchoutRequest.setExpired();
            punchoutRequest.discardPunchoutRequest();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPunchoutRequestAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the punchout request from a related record.
    /// </summary>
    /// <param name="_punchoutRequestAttributes">
    /// The <c>CatPunchoutRequestAttributes</c> data type to initialize the punchout request from.
    /// </param>
    /// <remarks>
    /// Sub types of the <c>CatPunchoutRequest</c> class can override this method.
    /// </remarks>
    public void initFromPunchoutRequestAttributes(CatPunchoutRequestAttributes _punchoutRequestAttributes)
    {
        this.initValue();

        if (_punchoutRequestAttributes)
        {
            this.PurchReqTable = _punchoutRequestAttributes.getPurchReqTable();
            this.ExternalCatalog = _punchoutRequestAttributes.getExternalCatalog();

            CatExternalCatalogPolicyBasedFields externalCatalogPolicyBasedFields = _punchoutRequestAttributes.getExternalCatalogPolicyBasedFields();

            this.Originator = externalCatalogPolicyBasedFields.Originator;
            this.Requisitioner = externalCatalogPolicyBasedFields.Requisitioner;
            this.BuyingLegalEntity = externalCatalogPolicyBasedFields.BuyingLegalEntity;
            this.ReceivingOperatingUnit = externalCatalogPolicyBasedFields.ReceivingOperatingUnit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShoppingBaskets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the received shopping baskets for the specific punchout originator.
    /// </summary>
    /// <param name = "_originator">
    /// The <c>PurchReqPreparerRefRecId</c> of the punchout request originator; defaulted to current user
    /// </param>
    public static void processShoppingBaskets(PurchReqPreparerRefRecId _originator = HcmWorkerLookup::currentWorker())
    {
        if(_originator)
        {
            CatPunchoutRequest punchoutRequest;

            while select punchoutRequest
                where punchoutRequest.RequestStatus == CatPunchoutRequestStatus::ExpectsBasket
                    && punchoutRequest.Originator == _originator
            {
                System.Exception exception;

                try
                {
                    CatShoppingBasketHandler shoppingBasketHandler = CatShoppingBasketHandler::constructFromPunchoutRequest(punchoutRequest);

                    if(shoppingBasketHandler.canProcessShoppingBasket(punchoutRequest))
                    {
                        shoppingBasketHandler.processShoppingBasket(punchoutRequest);
                    }
                }
                catch(exception)
                {
                    warning(strFmt("@SCM:ProcessingShoppingBasketForPunchoutRequestFailed",
                         CatExternalCatalog::findByRecId(punchoutRequest.ExternalCatalog).Name, exception.Message));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllLinesValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all of the lines that are currently in the cart for the originator are valid.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator.</param>
    /// <returns>True if all lines are valid, false otherwise.</returns>
    public static boolean checkAllLinesValid(PurchReqPreparerRefRecId _originator)
    {
        CatCartLine catCartLine;
        CatCartLineState catCartLineState;
        CatPunchoutRequest catPunchoutRequest;
        
        select count(RecId) from catPunchoutRequest
                where catPunchoutRequest.Originator == _originator
                    && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
            exists join catCartLine
                where catCartLine.PunchoutRequest == catPunchoutRequest.RecId
            exists join catCartLineState
                where catCartLineState.IsValidProduct == 0
                    && catCartLineState.CartLine == catCartLine.RecId;
        
        return !catPunchoutRequest.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllProcurementCategoriesSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all of the lines that are currently in the cart for the originator have a correct procurement category.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator.</param>
    /// <returns>True if all procurement categories are specified, false otherwise.</returns>
    public static boolean checkAllProcurementCategoriesSpecified(PurchReqPreparerRefRecId _originator)
    {
        CatCartLine catCartLine;
        CatProductReference catProductReference;
        CatPunchoutRequest catPunchoutRequest;
        
        select firstonly catPunchoutRequest
                where catPunchoutRequest.Originator == _originator
                    && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
            exists join catCartLine
                where catCartLine.PunchoutRequest == catPunchoutRequest.RecId
            exists join catProductReference
                where catProductReference.ProcurementCategory == 0
                    && catProductReference.RecId == catCartLine.ProductReference;

        return !catPunchoutRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllActivePunchoutRequestsWithoutLinesForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all of the originator's active punchout sessions that don't have any associated <c>CatCartLine</c> records.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator.</param>
    public static void deleteAllActivePunchoutRequestsWithoutLinesForUser(PurchReqPreparerRefRecId _originator)
    {
        CatCartLine        catCartLine;
        CatPunchoutRequest punchoutRequest;
        
        ttsbegin;
        while select punchoutRequest
            where punchoutRequest.Originator == _originator
                && punchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
            notExists join catCartLine
                where catCartLine.PunchoutRequest == punchoutRequest.RecId
        {
            punchoutRequest.discardPunchoutRequest();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllActiveInvalidRowsInPunchoutRequestsForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all of the invalid <c>CatCartLine</c> records for the originator's active punchout sessions.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator.</param>
    public static void deleteAllActiveInvalidRowsInPunchoutRequestsForUser(PurchReqPreparerRefRecId _originator)
    {
        CatCartLine             catCartLine;
        CatCartLineState        catCartLineState;
        CatPunchoutRequest      catPunchoutRequest;

        ttsbegin;
        delete_from catCartLine
            exists join catPunchoutRequest
                where catPunchoutRequest.Originator == _originator
                    && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
                    && catPunchoutRequest.RecId == catCartLine.PunchoutRequest
            exists join catCartLineState
                where catCartLineState.IsValidProduct == 0
                    && catCartLineState.CartLine == catCartLine.RecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllActivePunchoutRequestsForUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all of the originator's active punchout sessions.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator.</param>
    public static void deleteAllActivePunchoutRequestsForUser(PurchReqPreparerRefRecId _originator)
    {
        CatPunchoutRequest catPunchoutRequest;

        ttsbegin;
        while select catPunchoutRequest
            where catPunchoutRequest.Originator == _originator
                && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
        {
            catPunchoutRequest.discardPunchoutRequest();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleValidSessionsStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if there are more than one punchout sessions in progress for the same user.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator who is the originator of the purchase requisiton lines.</param>
    /// <returns>
    /// True if there are multiple punchouts; otherwise false.
    /// </returns>
    public static boolean multipleValidSessionsStarted(PurchReqPreparerRefRecId _originator)
    {
        CatPunchoutRequest  catPunchoutRequest;

        select count(RecId) from catPunchoutRequest
            where catPunchoutRequest.Originator == _originator
                && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed;
        
        return catPunchoutRequest.RecId > 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultProcurementCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the procurement category for all <c>CatExternalQuoteProductReference</c> pertaining to a user's punchout(s) if only a single record is found.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the current worker.</param>
    public static void setDefaultProcurementCategories(PurchReqPreparerRefRecId _originator)
    {
        CatPunchoutRequest catPunchoutRequest;

        while select catPunchoutRequest
            where catPunchoutRequest.Originator == _originator
               && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
        {
            catPunchoutRequest.setProcurementCategoryIfUnique();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProcurementCategoryIfUnique</Name>
				<Source><![CDATA[
    private void setProcurementCategoryIfUnique()
    {
        EcoResCategory                      uniqueEcoResCategory;
        ProcCategoryTmpPolicyRule           procCategoryTmpPolicyRule;

        RefRecId buyingLegalEntity       = CompanyInfo::findDataArea(this.BuyingLegalEntity).RecId;
        RefRecId receivingOperatingUnit  = this.ReceivingOperatingUnit;

        procCategoryTmpPolicyRule.setTmpData(EcoResCategory::getProcCategoryRules(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule,
                                                                            buyingLegalEntity,
                                                                            receivingOperatingUnit));
        select firstonly RecId from procCategoryTmpPolicyRule;
        
        if (procCategoryTmpPolicyRule.RecId)
        {
            uniqueEcoResCategory = this.findCategoryBasedOnPolicyRuleIfUnique(procCategoryTmpPolicyRule);
        }
        else
        {
            uniqueEcoResCategory = this.findCategoryNotBasedOnPolicyRuleIfUnique();
        }

        if (uniqueEcoResCategory)
        {
            CatPunchoutRequest::updateAllProcurementCategories(uniqueEcoResCategory, this.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoryBasedOnPolicyRuleIfUnique</Name>
				<Source><![CDATA[
    private EcoResCategory findCategoryBasedOnPolicyRuleIfUnique(ProcCategoryTmpPolicyRule _procCategoryTmpPolicyRule)
    {
        EcoResCategory                                 ecoResCategory;
        EcoResCategory                                 selectedCategory;
        CatExternalCatalogProcurementCategories        catExternalCatalogCategories;
        ProcCategoryAccessPolicyParameter              procCategoryAccessPolicyParameter;

        int recordCounter = 0;
        while select _procCategoryTmpPolicyRule
            join procCategoryAccessPolicyParameter
                where _procCategoryTmpPolicyRule.PolicyRule == procCategoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule
            join ecoResCategory
                where ecoResCategory.RecId == procCategoryAccessPolicyParameter.ProcurementCategory
            exists join catExternalCatalogCategories
                where catExternalCatalogCategories.Category == ecoResCategory.RecId
                    && catExternalCatalogCategories.ExternalCatalog == this.ExternalCatalog
        {
            recordCounter++;
            if (recordCounter > 1)
            {
                return null;
            }
            selectedCategory.data(ecoResCategory);
        }
        return selectedCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCategoryNotBasedOnPolicyRuleIfUnique</Name>
				<Source><![CDATA[
    private EcoResCategory findCategoryNotBasedOnPolicyRuleIfUnique()
    {
        EcoResCategory                                 ecoResCategory;
        EcoResCategory                                 selectedCategory;
        CatExternalCatalogProcurementCategories        catExternalCatalogCategories;

        int recordCounter = 0;
        while select ecoResCategory
            exists join catExternalCatalogCategories
                where catExternalCatalogCategories.ExternalCatalog == this.ExternalCatalog
                    && ecoResCategory.RecId == catExternalCatalogCategories.Category
        {
            recordCounter++;
            if (recordCounter > 1)
            {
                return null;
            }
            selectedCategory.data(ecoResCategory);
        }
        
        return selectedCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAllProcurementCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all procurement categories for the specified <c>CatPunchoutRequest</c> record associated with the lines.
    /// </summary>
    /// <param name = "_newCategory">The new <c>EcoResCategory</c> for the <c>CatExternalQuoteProductReference</c>.</param>
    /// <param name = "_catPunchoutRequestRecId">The <c>CatPunchoutRequest</c> with the lines to be updated.</param>
    public static void updateAllProcurementCategories(EcoResCategory _newCategory, CatPunchoutRequestRecId _catPunchoutRequestRecId)
    {
        CatExternalQuoteProductReference catExternalQuoteProductReference;
        CatCartLine catCartLine;

        ttsbegin;
        update_recordset catExternalQuoteProductReference
                setting procurementCategory = _newCategory.RecId
            exists join catCartLine
                where catCartLine.ProductReference == catExternalQuoteProductReference.RecId
                   && catCartLine.PunchoutRequest == _catPunchoutRequestRecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCatalogsAreActiveForPunchouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that all of the punchouts contain active catalogs.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator for the punchout request(s).</param>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not allowed.</param>
    /// <returns>
    /// True if the current catalog is active; otherwise, false.
    /// </returns>
    public static boolean checkCatalogsAreActiveForPunchouts(PurchReqPreparerRefRecId _originator, boolean _showWarning)
    {
        boolean ret = true;

        CatPunchoutRequest catPunchoutRequest;
        CatExternalCatalog catExternalCatalog;

        while select Name from catExternalCatalog
                where catExternalCatalog.State == CatExternalCatalogState::InActive
            exists join catPunchoutRequest
                where catPunchoutRequest.Originator == _originator
                    && catPunchoutRequest.ExternalCatalog == catExternalCatalog.RecId    
                    && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
        {
            ret = false;

            if (_showWarning)
            {
                warning(strFmt("@SCM:CatExternalCatalogInvalidCatalog", catExternalCatalog.Name));
            }
            else
            {
                return ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAuthorizationForPunchouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks all punchouts to verify that the Originator is authorized to purchase items on behalf of the <c>CatPunchoutRequest</c>'s requisitioner, and that the requisitioner is authorized to buy in the punchout's LE and OU.
    /// </summary>
    /// <param name = "_originator">The <c>PurchReqPreparerRefRecId</c> of the originator for the punchout request(s).</param>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not authorized.</param>
    /// <returns>
    /// True if the Originator is authorized; otherwise, false.
    /// </returns>
    public static boolean checkAuthorizationForPunchouts(PurchReqPreparerRefRecId _originator, boolean _showWarning)
    {
        boolean ret                 = true;
        boolean validRequest        = true;

        CatPunchoutRequest catPunchoutRequest;

        while select Requisitioner, Originator, BuyingLegalEntity, ReceivingOperatingUnit from catPunchoutRequest
            where catPunchoutRequest.Originator == _originator
                && catPunchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
        {
            validRequest = catPunchoutRequest.checkLegalEntityAndOperatingUnitAuthorization(_showWarning);

            if (catPunchoutRequest.Originator != catPunchoutRequest.Requisitioner)
            {
                validRequest = validRequest && catPunchoutRequest.checkOnBehalfAuthorizationIsValid(_showWarning);
            }

            if (!validRequest)
            {
                ret = false;

                if (!_showWarning)
                {
                    return ret;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOnBehalfAuthorizationIsValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the the punchout's requisitioner user is authorized to purchase items on behalf of the <c>CatPunchoutRequest</c>'s requisitioner.
    /// </summary>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not authorized.</param>
    /// <returns>
    /// True if the punchout's originator is authorized to purchase on behalf of the requisitioner; otherwise, false.
    /// </returns>
    private boolean checkOnBehalfAuthorizationIsValid(boolean _showWarning)
    {
        if (!PurchReqLine::checkOnBehalfAuthorization(this.Originator, this.Requisitioner, false))
        {
            return _showWarning ? checkFailed(strFmt("@SCM:CatExternalCatalogInvalidRequester", HcmWorker::worker2Name(this.Requisitioner))) : false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLegalEntityAndOperatingUnitAuthorization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the legal entity and the operating unit are valid for the <c>CatPunchoutRequest</c>'s requisitioner.
    /// </summary>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not authorized.</param>
    /// <returns>
    /// True if the requisitioner's buyging legal entity and operating unit are allowed; otherwise, false.
    /// </returns>
    private boolean checkLegalEntityAndOperatingUnitAuthorization(boolean _showWarning)
    {
        return this.checkRequisitionerAllowedInLegalEntity(_showWarning) && this.checkRequisitionerAllowedInReceivingOperatingUnit(_showWarning);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequisitionerAllowedInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the requisitioner is allowed in the Legal Entity that the punchout is requested for.
    /// </summary>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not authorized.</param>
    /// <returns>
    /// True if the requisitioner is allowed; otherwise, false.
    /// </returns>
    private boolean checkRequisitionerAllowedInLegalEntity(boolean _showWarning)
    {
        PurchReqInternalOrgManager_LegalEntity purchReqInternalOrgManager_LegalEntity   = new PurchReqInternalOrgManager_LegalEntity();
        
        boolean ret = purchReqInternalOrgManager_LegalEntity.validate(this.Requisitioner,
                                                                      CompanyInfo::findDataArea(this.BuyingLegalEntity).RecId,
                                                                      false);

        if (!ret)
        {
            return !_showWarning ? false : checkFailed(strFmt("@SCM:CatExternalCatalogInvalidRequesterUnauthorizedLegalEntity", HcmWorker::worker2Name(this.Requisitioner),
                                                                                                                                this.BuyingLegalEntity));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequisitionerAllowedInReceivingOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the requisitioner is allowed for the Receiving Operating Unit that the punchout is requested for.
    /// </summary>
    /// <param name = "_showWarning">A <c>boolean</c> indicating whether or not a warning should be shown if the originator is not authorized.</param>
    /// <returns>
    /// True if the requisitioner is allowed; otherwise, false.
    /// </returns>
    private boolean checkRequisitionerAllowedInReceivingOperatingUnit(boolean _showWarning)
    {
        if (this.ReceivingOperatingUnit == 0)
        {
            return true;
        }

        PurchReqInternalOrgManager_OperatingUnit purchReqInternalOrgManager_OperatingUnit = new PurchReqInternalOrgManager_OperatingUnit();
        
        boolean ret = purchReqInternalOrgManager_OperatingUnit.validate(this.Requisitioner,
                                                                        this.ReceivingOperatingUnit,
                                                                        false);

        if (!ret)
        {
            return !_showWarning ? false : checkFailed(strFmt("@SCM:CatExternalCatalogInvalidRequesterUnauthorizedOperatingUnit", HcmWorker::worker2Name(this.Requisitioner),
                                                                                                                                  OMOperatingUnit::find(this.ReceivingOperatingUnit, OMOperatingUnitType::OMAnyOU).Name));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>ProcCatalog</ConfigurationKey>
	<DeveloperDocumentation>@SCM:PunchoutRequestBaseTableDeveloperDocumentation</DeveloperDocumentation>
	<Label>@SCM:PunchoutRequest</Label>
	<TableGroup>Worksheet</TableGroup>
	<Abstract>Yes</Abstract>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedDateTime>Yes</CreatedDateTime>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RequestStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>CatPunchoutRequestStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchReqTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Originator</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchReqPreparerRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Requisitioner</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>PurchReqRequesterRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ExternalCatalog</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CatExternalCatalogRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BuyingLegalEntity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>ProcCatalog</ConfigurationKey>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReceivingOperatingUnit</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>OMOperatingUnitRefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>OriginatorIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Originator</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PurchReqTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ExternalCatalog</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Requisitioner</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Requisitioner</Name>
					<Field>Requisitioner</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OMOperatingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReceivingOperatingUnit</Name>
					<Field>ReceivingOperatingUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchReqTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchReqTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchReqTable</Name>
					<Field>PurchReqTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatExternalCatalog</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CatExternalCatalog</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatExternalCatalog</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExternalCatalog</Name>
					<Field>ExternalCatalog</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CompanyInfo</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BuyingLegalEntity</Name>
					<Field>BuyingLegalEntity</Field>
					<RelatedField>DataArea</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>