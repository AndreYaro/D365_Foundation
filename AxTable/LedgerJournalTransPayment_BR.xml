<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransPayment_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransPayment_BR extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c> RefRecId </c> field of <c> LedgerJournalTransPayment_BR </c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// LedgerJournalTrans from which <c> RefRecId </c> field will copy the value.
    /// </param>
    void initFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.RecId)
        {
            this.RefRecId = _ledgerJournalTrans.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCompanyDocument_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the company document.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The journal line to determine the payment mode.
    /// </param>
    /// <returns>
    /// The company document.
    /// </returns>
    EPCompanyDocument_BR setCompanyDocument_BR(LedgerJournalTrans   _ledgerJournalTrans)
    {
        VendPaymModeTable       vendPaymModeTable;
        CustPaymModeTable       custPaymModeTable;
        EPCompanyDocument_BR    companyDocument_BR = '';

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            select firstonly ClassId from vendPaymModeTable
                where vendPaymModeTable.PaymMode == _ledgerJournalTrans.PaymMode;
        }

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            select firstonly ClassId from custPaymModeTable
                where custPaymModeTable.PaymMode == _ledgerJournalTrans.PaymMode;
        }

        if (vendPaymModeTable.ClassId == classnum(VendOutPaym_CNAB_BR)
            || custPaymModeTable.ClassId  == classnum(CustOutPaym_CNAB_BR))

        {
            companyDocument_BR = int642str(_ledgerJournalTrans.RecId);
        }

        return companyDocument_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentSetting_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts <c>LedgerJournalTransPayment_BR</c> fields (PaymentType / PaymentWay )
    /// in response to a change in the  <c>LedgerJournalTrans</c> AccountNumber, PaymMode or PaymSpec value.
    /// </summary>
    /// <param name="_ledgerJournalACType">
    /// The <c>LedgerJournalACType</c> value to find the AccountType.
    /// </param>
    /// <param name="_ledgerJournalTransRecId">
    /// A record ID of the <c>LedgerJournalTrans</c> record.
    /// </param>
    /// <param name="_paymSpec">
    /// The optional <c>PaymSpec</c> value.
    /// </param>
    /// <param name="_paymMode">
    /// The optional <c>PaymMode</c> value.
    /// </param>
    public void setPaymentSetting_BR(LedgerJournalACType   _ledgerJournalACType,
                                     RefRecId _ledgerJournalTransRecId,
                                     PaymSpec   _paymSpec = '',
                                     PaymMode   _paymMode = '')
    {
        LedgerJournalTransPayment_BR    ledgerJournalTransPayment_BR;

        ttsBegin;
        ledgerJournalTransPayment_BR = LedgerJournalTransPayment_BR::find(_ledgerJournalTransRecId, true);

        if (ledgerJournalTransPayment_BR)
        {
        switch (_ledgerJournalACType)
        {
            case LedgerJournalACType::Vend :
                ledgerJournalTransPayment_BR.EPPaymentType_BR = _paymSpec ? VendPaymModeSpec::findSpec(_paymMode, _paymSpec).EPPaymentType_BR : '';
                ledgerJournalTransPayment_BR.EPPaymentWay_BR  = _paymSpec ? VendPaymModeSpec::findSpec(_paymMode, _paymSpec).EPPaymentWay_BR  : '';
                break;

            case LedgerJournalACType::Cust :
                ledgerJournalTransPayment_BR.EPPaymentType_BR = _paymSpec ? CustPaymModeSpec::findSpec(_paymMode,_paymSpec).EPPaymentType_BR : '';
                ledgerJournalTransPayment_BR.EPPaymentWay_BR  = _paymSpec ? CustPaymModeSpec::findSpec(_paymMode,_paymSpec).EPPaymentWay_BR  : '';
                break;
        }
        ledgerJournalTransPayment_BR.update();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumOfInterestAndFineAmount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of interest and fine amounts.
    /// </summary>
    /// <returns>
    /// Sum of interest and fine amounts.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// User has no permission to access interest or fine amount fields.
    /// </exception>
    Display Amount sumOfInterestAndFineAmount_BR()
    {
        if (!(hasFieldAccess(tablenum(LedgerJournalTransPayment_BR), fieldnum(LedgerJournalTransPayment_BR, FinInterestAmountCur_BR))
            && hasFieldAccess(tablenum(LedgerJournalTransPayment_BR), fieldnum(LedgerJournalTransPayment_BR, FineAmountCur_BR))))
        {
            throw error("@SYS57330");
        }

        return (this.FinInterestAmountCur_BR + this.FineAmountCur_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>LedgerJournalTransPayment_BR</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the related <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that determines whether the record should be selected for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    A <c>ConcurrencyModel</c> value that is used when the table is not automatically concurrent;
    ///    optional.
    /// </param>
    /// <returns>
    ///    Returns a <c>LedgerJournalTransPayment_BR</c> table buffer.
    /// </returns>
    public static LedgerJournalTransPayment_BR find(
        LedgerJournalTransRefRecId _refRecId ,
        boolean                    _forUpdate = false,
        ConcurrencyModel           _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalTransPayment_BR ledgerJournalTransPayment;

        if (_refRecId)
        {
            ledgerJournalTransPayment.selectForUpdate(_forUpdate);
            if (_forUpdate  && _concurrencyModel != ConcurrencyModel::Auto)
            {
                ledgerJournalTransPayment.concurrencyModel(_concurrencyModel);
            }

            select firstonly
                ledgerJournalTransPayment
            where
                ledgerJournalTransPayment.RefRecId == _refRecId;
        }

        return ledgerJournalTransPayment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>BR</CountryRegionCodes>
	<DeveloperDocumentation>@GLS221875</DeveloperDocumentation>
	<Label>@SYS23470</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>RefRecId</TitleField1>
	<TitleField2>RecId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RefRecIdIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Bordero_BR</Name>
			<Label>@GLS666</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterestAndFineAmounts</Name>
			<Label>@GLS1236</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FineAmountCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinInterestAmountCur_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EPPaymentType_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPPaymentWay_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EPCompanyDocument_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FineAmountCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FinInterestAmountCur_BR</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdEditStatus_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPCompanyDocument_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>EPCompanyDocument_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPPaymentType_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>EPPaymentType_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EPPaymentWay_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>EPPaymentWay_BR</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FineAmountCur_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FineAmount_BR</ExtendedDataType>
			<Label>@GLS1228</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>FinInterestAmountCur_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>FinInterestAmount_BR</ExtendedDataType>
			<Label>@GLS1227</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RefRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LedgerJournalTransRefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxWithholdEditStatus_BR</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<EnumType>LedgerTransTaxWithholdEditStatus_BR</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RefRecIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RefRecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerExtensionMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BaseRecId</MapField>
					<MapFieldTo>RefRecId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefRecId</Name>
					<SourceEDT>LedgerJournalTransRefRecId</SourceEDT>
					<Field>RefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>