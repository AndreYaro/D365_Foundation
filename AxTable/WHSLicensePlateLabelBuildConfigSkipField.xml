<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateLabelBuildConfigSkipField</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSLicensePlateLabelBuildConfigSkipField extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup if a record is existing with the given references.
    /// </summary>
    /// <param name = "_licensePlateLabelBuildConfigRecId">License plate label build configuration reference.</param>
    /// <param name = "_skipFieldName">Name of the field that should be skipped from default initialization.</param>
    /// <returns>true if the record exists; otherwise, false.</returns>
    [Hookable(false)]
    internal static boolean exist(WHSLicensePlateLabelBuildConfigRecId _licensePlateLabelBuildConfigRecId, RefFieldName _skipFieldName)
    {
        return (select firstonly RecId
                from WHSLicensePlateLabelBuildConfigSkipField
                where WHSLicensePlateLabelBuildConfigSkipField.LicensePlateLabelBuildConfigRecId == _licensePlateLabelBuildConfigRecId
                && WHSLicensePlateLabelBuildConfigSkipField.SkipFieldName == _skipFieldName).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSkipField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup if a record is existing with the given references and add if not yet existing
    /// </summary>
    /// <param name = "_licensePlateLabelBuildConfigRecId">License plate label build configuration reference.</param>
    /// <param name = "_skipFieldName">Name of the field that should be skipped from default initialization.</param>
    [Hookable(false)]
    internal static void addSkipField(WHSLicensePlateLabelBuildConfigRecId _licensePlateLabelBuildConfigRecId, RefFieldName _skipFieldName)
    {
        if(WHSLicensePlateLabelBuildConfigSkipField::exist(_licensePlateLabelBuildConfigRecId, _skipFieldName))
        {
            return;
        }

        WHSLicensePlateLabelBuildConfigSkipField licensePlateLabelBuildConfigSkipField;

        ttsbegin;
        licensePlateLabelBuildConfigSkipField.initValue();
        licensePlateLabelBuildConfigSkipField.LicensePlateLabelBuildConfigRecId    = _licensePlateLabelBuildConfigRecId;
        licensePlateLabelBuildConfigSkipField.SkipFieldName                        = _skipFieldName;

        if(!licensePlateLabelBuildConfigSkipField.validateWrite())
        {
            throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(WHSLicensePlateLabelBuildConfigSkipField)));
        }
        else
        {
            licensePlateLabelBuildConfigSkipField.insert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSkipField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove the given reference from the skip list
    /// </summary>
    /// <param name = "_licensePlateLabelBuildConfigRecId">License plate label build configuration reference.</param>
    /// <param name = "_skipFieldName">Name of the field that should be skipped from default initialization.</param>
    [Hookable(false)]
    internal static void removeSkipField(WHSLicensePlateLabelBuildConfigRecId _licensePlateLabelBuildConfigRecId, RefFieldName _skipFieldName)
    {
        WHSLicensePlateLabelBuildConfigSkipField licensePlateLabelBuildConfigSkipField;

        if (_licensePlateLabelBuildConfigRecId && _skipFieldName)
        {
            delete_from licensePlateLabelBuildConfigSkipField
                where licensePlateLabelBuildConfigSkipField.LicensePlateLabelBuildConfigRecId == _licensePlateLabelBuildConfigRecId
                    && licensePlateLabelBuildConfigSkipField.SkipFieldName == _skipFieldName;
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current <c>WHSLicensePlateLabelBuildConfigSkipField</c> record is valid to be written.
    /// </summary>
    /// <returns>true if the record is valid; otherwise, false.</returns>
    public boolean validateWrite()
    {
        boolean ret;
        ret = super();
        Map skipListFull = WhsLicensePlateLabelBuildConfiguration::getSkipListFull();
        if (!skipListFull.exists(this.SkipFieldName))
        {
            ret = checkFailed("@WAX:WHSLicensePlateLabelBuildConfigSkipFieldValidationError");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:LicensePlateLabelBuildConfigSkipFieldDeveloper</DeveloperDocumentation>
	<Label>@WAX:LicensePlateLabelBuildConfigSkipField</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>LicensePlateLabelBuildConfigRecId</TitleField1>
	<TitleField2>SkipFieldName</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LabelBuildSkipFieldIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<PrimaryIndex>LabelBuildSkipFieldIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfigRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SkipFieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfigRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SkipFieldName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LicensePlateLabelBuildConfigRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSLicensePlateLabelBuildConfigRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SkipFieldName</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefFieldName</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LabelBuildSkipFieldIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateLabelBuildConfigRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SkipFieldName</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WhsLicensePlateLabelBuildConfig</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>WhsLicensePlateLabelBuildConfig</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LicensePlateLabelBuildConfigRecId</Name>
					<Field>LicensePlateLabelBuildConfigRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>