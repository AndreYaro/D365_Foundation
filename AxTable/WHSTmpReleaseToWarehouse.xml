<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTmpReleaseToWarehouse</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSTmpReleaseToWarehouse extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayRequestedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the requested quantity to be released to the warehouse
    /// </summary>
    /// <returns>
    /// Returns the requested inventory quantity
    /// </returns>
    display InventQty displayRequestedQty()
    {
        InventQty   ret;

        switch (this.Module)
        {
            case WHSModule::Sales:
                ret = SalesLine::findInventTransId(this.InventTransId).QtyOrdered;
                break;

            case WHSModule::Transfer:
                ret = InventTransferLine::findTransIdShip(this.InventTransId).QtyTransfer;
                break;

            case WHSModule::ProdBOM:
                ret = ProdBOM::findTransId(this.InventTransId).QtyInventCalc;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequestedHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the requested quantity in the handling unit to be released to the warehouse.
    /// </summary>
    /// <returns>
    /// Returns the requested inventory handling quantity.
    /// </returns>
    [Wrappable(true)]
    internal display InventHandlingQty displayRequestedHandlingQty()
    {
        InventHandlingQty   ret;

        switch (this.Module)
        {
            case WHSModule::Sales:
                SalesLine salesLine = SalesLine::findInventTransId(this.InventTransId);
                ret = salesLine.PdsCWQty ? salesLine.PdsCWQty : salesLine.QtyOrdered;
                break;

            case WHSModule::Transfer:
                InventTransferLine transferLine = InventTransferLine::findTransIdShip(this.InventTransId);
                ret = transferLine.PdsCWQtyTransfer ? transferLine.PdsCWQtyTransfer : transferLine.QtyTransfer;
                break;

            case WHSModule::ProdBOM:
                ProdBOM prodBOM = ProdBOM::findTransId(this.InventTransId);
                ret = prodBOM.PdsCWInventCalc ? prodBOM.PdsCWInventCalc : prodBOM.QtyInventCalc;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        WHSInventTransSumDim inventTransSumDim;

        ret = super(_fieldIdToCheck);

        if (ret && _fieldIdToCheck == (fieldNum(WHSTmpReleaseToWarehouse, ReleasedQty)))
        {
            select firstonly SumOfQty, SumOfPdsCWQty, ItemId from inventTransSumDim
                where inventTransSumDim.InventTransId == this.InventTransId
                    && inventTransSumDim.InventDimId  == this.InventDimId;

            boolean isCWItem = PdsGlobal::pdsIsCWItem(inventTransSumDim.ItemId);

            if ((isCWItem ? -inventTransSumDim.SumOfPdsCWQty : -inventTransSumDim.SumOfQty) < this.ReleasedQty)
            {
                ret = checkFailed(strFmt("@WAX5658", isCWItem ? -inventTransSumDim.SumOfPdsCWQty : -inventTransSumDim.SumOfQty));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.inventDim().inventLocation().checkIsWHSEnabled();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyLeftToRelease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity left to be released to the warehouse
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The <c>WHSTmpReleaseToWarehouse</c> table object
    /// </param>
    /// <param name="_inventTransId">
    /// The inventTransId.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDim Id.
    /// </param>
    /// <param name="_calculcatedReleasableQuantity">
    /// The quantity available to be released to the warehouse
    /// </param>
    /// <returns>
    /// Returns the quantity that remains to be released to the warehouse
    /// </returns>
    public static Qty calcQtyLeftToRelease(
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId,
        InventQty                   _calculcatedReleasableQuantity = 0)
    {
        Qty                         ret;
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        WHSReleasedQtyView          releasedQtyView;
        InventHandlingQty           quantityLeftToRelease = _calculcatedReleasableQuantity;

        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

        if (!_calculcatedReleasableQuantity)
        {
            InventDimParm       inventDimParm;
            InventDim           inventDim;
            InventDim           inventDimCriteria = InventDim::find(_inventDimId);

            inventDimParm.initFromInventDim(inventDimCriteria);
            select forceselectorder SumOfInventQty from releasedQtyView
				where releasedQtyView.InventTransId == _inventTransId
            #InventDimExistsJoin(releasedQtyView.InventDimId, inventDim, inventDimCriteria, inventDimParm);

            quantityLeftToRelease = WHSInvent::calculateCommittedHandlingQuantity(_inventTransId, _inventDimId) - releasedQtyView.SumOfInventQty;
        }

        select sum(ReleasedQty) from releaseToWarehouse
            where releaseToWarehouse.InventTransId  == _inventTransId &&
                  releaseToWarehouse.InventDimId    == _inventDimId;

        ret = quantityLeftToRelease - releaseToWarehouse.ReleasedQty;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyLeftToReleaseDelta</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity left to be released to the warehouse
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The <c>WHSTmpReleaseToWarehouse</c> table object
    /// </param>
    /// <param name="_inventTransId">
    /// The inventTransId.
    /// </param>
    /// <param name="_inventDimId">
    /// The inventDim Id.
    /// </param>
    /// <param name="_releaseableQty">
    /// The quantity available to be released to the warehouse
    /// </param>
    /// <returns>
    /// Returns the quantity that remains to be released to the warehouse
    /// </returns>
    public static Qty calcQtyLeftToReleaseDelta(
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId,
        InventQty                   _releaseableQty = 0)
    {
        return WHSTmpReleaseToWarehouse::calcQtyLeftToRelease(_releaseToWarehouse, _inventTransId, _inventDimId, _releaseableQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a <c>WHSTmpReleaseToWarehouse</c> record based on a <c>SalesLine</c> record
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The current <c>WHSTmpReleaseToWarehouse</c> table record
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// The release to warehouse identifier
    /// </param>
    /// <param name="_salesLine">
    /// The current <c>SalesLine</c> table record
    /// </param>
    /// <param name="_releaseQuantitySpecification">
    /// The quantity to release.
    /// </param>
    public static void createFromSalesLine(
        WHSTmpReleaseToWarehouse        _releaseToWarehouse,
        WHSReleaseToWarehouseId         _releaseToWarehouseId,
        SalesLine                       _salesLine,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification = WHSReleaseQuantitySpecification::All)
    {
        WHSInventTransSumDimEnumerator inventTransSumDimEnumerator = new WHSInventTransSumDimQuery().forInventTransId(_salesLine.InventTransId)
                                                                     .fromWHSEnabledWarehouse()
                                                                     .getEnumerator();

        boolean createdAnyLines = WHSTmpReleaseToWarehouse::releaseUsingQtySpecification(inventTransSumDimEnumerator, _releaseToWarehouse, _releaseToWarehouseId, _releaseQuantitySpecification, WHSModule::Sales);

        if (createdAnyLines)
        {
            WHSAutoReleaseToWarehouseProcessingResultContext context = WHSAutoReleaseToWarehouseProcessingResultContext::current();
            if (context && context.releaseIdsWithRTWLinesSet)
            {
                Set releaseIdsWithRTWLinesSet = context.releaseIdsWithRTWLinesSet;
                releaseIdsWithRTWLinesSet.add(_releaseToWarehouseId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineFromInventTransIdInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a <c>WHSTmpReleaseToWarehouse</c> record based on an InventTransId and InventDimId
    /// </summary>
    /// <param name="_releaseToWarehouse">
    /// The <c>WHSTmpReleaseToWarehouse</c> table object
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// The release to warehouse identifier
    /// </param>
    /// <param name="_inventTransId">
    /// The inventory transaction identifier
    /// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension identifier
    /// </param>
    /// <param name="_module">
    /// The module for which the <c>WHSTmpReleaseToWarehouse</c> record is to be created or updated
    /// </param>
    /// <param name="_qtyToRelease">
    /// The quantity to release to the warehouse
    /// </param>
    /// <param name="_skipValidation">
    /// Identifies if validation should be skipped.
    /// </param>
    /// <param name="_populateFulfillmentPolicy">
    /// true if the fulfillmentpolicy field should be populated; otherwise, false.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if the specified inventory dimensions refer to a non-WHS warehouse.
    /// </exception>
    public static void createLineFromInventTransIdInventDimId(
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSReleaseToWarehouseId     _releaseToWarehouseId,
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId,
        WHSModule                   _module,
        InventQty                   _qtyToRelease,
        boolean                     _skipValidation = false,
        boolean                     _populateFulfillmentPolicy = false)
    {
        WHSTmpReleaseToWarehouse    releaseToWarehouse;
        Qty                         qty = abs(_qtyToRelease);

        if (_releaseToWarehouseId 
        &&  _inventTransId
        &&  _inventDimId 
        && (qty
        ||  _module == WHSModule::ProdBOM))
        {
            ttsbegin;

            releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

            releaseToWarehouse = WHSTmpReleaseToWarehouse::find(releaseToWarehouse, _releaseToWarehouseId, _inventTransId, _inventDimId, true);

            if (releaseToWarehouse.RecId
            &&  _module != WHSModule::ProdBOM)
            {
                releaseToWarehouse.ReleasedQty += qty;
                releaseToWarehouse.update();
            }
            else if (releaseToWarehouse.RecId == 0)
            {
                WHSModuleTmpReleaseToWarehouseMapping moduleTmpReleaseToWarehouseMapping = WHSModuleTmpReleaseToWarehouseMapping::newModuleTmpReleaseToWarehouseMapping(_module);
                moduleTmpReleaseToWarehouseMapping.initializeWHSTmpReleaseToWarehouse(
                    releaseToWarehouse,
                    _releaseToWarehouseId,
                    _inventTransId,
                    _inventDimId,
                    _populateFulfillmentPolicy,
                    qty);

                if (!_skipValidation && !releaseToWarehouse.validateWrite())
                {
                    throw error("@SYS23020");
                }

                releaseToWarehouse.insert();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseUsingQtySpecification</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the transaction collection. The released quantities are determined based on the 
    /// quantity specification.
    /// </summary>
    /// <param name="_inventTransSumDimEnumerator">
    /// An enumerator object that allows iterating over the query.
    /// </param>
    /// <param name="_releaseToWarehouse">
    /// The <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    /// The identifier of the release to warehouse process.
    /// </param>
    /// <param name="_releaseQuantitySpecification">
    /// The release quantity specification.
    /// </param>
    /// <param name="_whsModule">
    /// The module the transaction relates to.
    /// </param>
    /// <returns>
    /// true if at least one line got released; otherwise, false.
    /// </returns>
    public static boolean releaseUsingQtySpecification(
        WHSInventTransSumDimEnumerator  _inventTransSumDimEnumerator,
        WHSTmpReleaseToWarehouse        _releaseToWarehouse,
        WHSReleaseToWarehouseId         _releaseToWarehouseId,
        WHSReleaseQuantitySpecification _releaseQuantitySpecification,
        WHSModule                       _whsModule)
    {

        boolean anyLinesReleased = false;

        WHSWarehouseReleaseProcessingResult processingResult;
        WHSAutoReleaseToWarehouseProcessingResultContext context = WHSAutoReleaseToWarehouseProcessingResultContext::current();

        if (context)
        {
            processingResult = context.processingResult;
        }
        
        WHSTmpReleaseToWarehouse releaseToWarehouse;
        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

        boolean skipLinesWithHoleAboveLocationFlightEnabled = WHSReleaseToWarehouseSkipLinesWithHoleAboveLocationV2Flight::instance().isEnabled();
        while (_inventTransSumDimEnumerator.moveNext())
        {
            WHSInventTransSumDim inventTransSumDim = _inventTransSumDimEnumerator.inventTransSumDim();

            if (processingResult
                && !WHSTmpReleaseToWarehouse::checkInventTransDimensionsForWHSProcessing(inventTransSumDim))
            {
                processingResult.addOrderLevelWarning(strFmt("@WAX:DimensionLocationAndBelowSpecifiedForLotIDWarning", inventTransSumDim.InventTransId));
                processingResult.parmInventTransLocationOrBelowValidationFailed(true);
                continue;
            }

            // When partially releasing batch- or serial-above item, we might have lines with hole above location. We should skip them.
            if (skipLinesWithHoleAboveLocationFlightEnabled
                && WhsReservationHierarchyInventDimUtil::inventDimHasBlankValues(
                    InventDim::find(inventTransSumDim.inventDimId),
                    WhsReservationHierarchyProvider::construct().getDimListAboveLocationFromInventTable(InventTable::find(inventTransSumDim.ItemId), WHSReservationHierarchySortOrder::BottomUp)))
            {
                if (processingResult)
                {
                    processingResult.addOrderLevelWarning(strFmt("@WAX:ReleaseToWarehouseAboveLocationDimensionsFailure", inventTransSumDim.ItemId));
                }
                else
                {
                    checkFailed(strFmt("@WAX:ReleaseToWarehouseAboveLocationDimensionsFailure", inventTransSumDim.ItemId));
                }

                continue;
            }
            
            WhsWarehouseReleaseLineCreator lineCreator = WhsWarehouseReleaseLineCreator::construct();
            lineCreator.parmReleaseToWarehouse(_releaseToWarehouse);
            lineCreator.parmReleaseToWarehouseId(_releaseToWarehouseId);
            lineCreator.parmWhsModule(_whsModule);
            lineCreator.parmInventTransSumDim(inventTransSumDim);
            lineCreator.parmMustValidateReleaseQuantity(false);
            lineCreator.parmReleaseAllQuantity(_releaseQuantitySpecification == WHSReleaseQuantitySpecification::All || _releaseQuantitySpecification == WHSReleaseQuantitySpecification::ReservedPhysicallyAndCrossDock);
            lineCreator.parmUsePreviouseReleaseToWarehouseRecords(true);

            if (lineCreator.releaseLine())
            {
                anyLinesReleased = true;
            }
           
        }

        return anyLinesReleased;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTransDimensionsForWHSProcessing</Name>
				<Source><![CDATA[
    private static boolean checkInventTransDimensionsForWHSProcessing(WHSInventTransSumDim _inventTransSumDim)
    {
        if (WHSReservationHierarchyInventDimUtil::isLocationOrBelowSpecified(InventTable::find(_inventTransSumDim.ItemId), InventDim::find(_inventTransSumDim.inventDimId)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignFulfillmentPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fulfillment policy for the selected release lines.
    /// </summary>
    /// <param name="_selectedFulfillmentPolicyRecId">
    /// The recId of the selected fulfillment policy which will be updated 
    /// to selected lines to be released from release to warehouse form.
    /// </param>
    /// <param name="_tmpReleaseToWarehouse">
    /// The buffer of the line to be released.
    /// </param>
    public static void assignFulfillmentPolicy(
        WHSFulfillmentPolicyRecId   _selectedFulfillmentPolicyRecId,
        WHSTmpReleaseToWarehouse    _tmpReleaseToWarehouse)
    {
        WHSTmpReleaseToWarehouse releaseToWarehouse;

        ttsbegin;
        releaseToWarehouse.linkPhysicalTableInstance(_tmpReleaseToWarehouse);
        releaseToWarehouse = _tmpReleaseToWarehouse;
        releaseToWarehouse.selectForUpdate(true);
        releaseToWarehouse.FulfillmentPolicyRecId = _selectedFulfillmentPolicyRecId;
        releaseToWarehouse.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignShipConsolidationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment consolidation policy for the selected release lines.
    /// </summary>
    /// <param name="_selectedPolicyRecId">
    /// The recId of the selected shipment consolidation policy which will be updated
    /// to selected lines to be released from release to warehouse form.
    /// </param>
    /// <param name="_tmpReleaseToWarehouse">
    /// The buffer of the line to be released.
    /// </param>
    public static void assignShipConsolidationPolicy(
        WHSShipConsolidationPolicyRecId _selectedPolicyRecId,
        WHSTmpReleaseToWarehouse        _tmpReleaseToWarehouse)
    {
        ttsbegin;

        _tmpReleaseToWarehouse.selectForUpdate(true);
        _tmpReleaseToWarehouse.ShipConsolidationPolicy = _selectedPolicyRecId;
        _tmpReleaseToWarehouse.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a specified record in the <c>WHSReleaseToWarehouse</c> table exists.
    /// </summary>
    /// <param name="_releaseToWarehouse">
    ///     A <c>WHSReleaseToWarehouse</c> record.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    ///     The ReleaseToWarehouseId of the record.
    /// </param>
    /// <param name="_inventTransId">
    ///     The InventTransId of the record.
    /// </param>
    /// <param name="_inventDimId">
    ///     The InventDimId of the record.
    /// </param>
    /// <returns>
    ///     true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        WHSTmpReleaseToWarehouse    _releaseToWarehouse,
        WHSReleaseToWarehouseId     _releaseToWarehouseId,
        InventTransId               _inventTransId,
        InventDimId                 _inventDimId)
    {
        if (_releaseToWarehouseId && _inventTransId && _inventDimId)
        {
            select firstonly RecId from _releaseToWarehouse
                where _releaseToWarehouse.ReleaseToWarehouseId  == _releaseToWarehouseId    &&
                      _releaseToWarehouse.InventTransId         == _inventTransId           &&
                      _releaseToWarehouse.InventDimId           == _inventDimId;

            if (_releaseToWarehouse.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the specified record in <c>WHSTmpReleaseToWarehouse</c> table.
    /// </summary>
    /// <param name="_releaseToWarehouse">
    ///     A <c>WHSTmpReleaseToWarehouse</c> record.
    /// </param>
    /// <param name="_releaseToWarehouseId">
    ///     The <c>ReleaseToWarehouseId</c> of the record.
    /// </param>
    /// <param name="_inventTransId">
    ///     The <c>InventTransId</c> of the record.
    /// </param>
    /// <param name="_inventDimId">
    ///     The <c>InventDimId</c> of the record
    /// </param>
    /// <param name="_forupdate">
    ///     A boolean value that indicates whether to read the record for update;optional.
    /// </param>
    /// <returns>
    ///     A record in <c>WHSTmpReleaseToWarehouse</c> table; otherwise, an empty record.
    /// </returns>
    public static WHSTmpReleaseToWarehouse find(
        WHSTmpReleaseToWarehouse   _releaseToWarehouse,
        WHSReleaseToWarehouseId    _releaseToWarehouseId,
        InventTransId              _inventTransId,
        InventDimId                _inventDimId,
        boolean                    _forupdate = false)
    {
        WHSTmpReleaseToWarehouse    releaseToWarehouse;

        releaseToWarehouse.linkPhysicalTableInstance(_releaseToWarehouse);

        if (_releaseToWarehouseId && _inventTransId && _inventDimId)
        {
            releaseToWarehouse.selectForUpdate(_forupdate);

            select firstonly releaseToWarehouse
                where releaseToWarehouse.ReleaseToWarehouseId   == _releaseToWarehouseId  &&
                      releaseToWarehouse.InventTransId          == _inventTransId         &&
                      releaseToWarehouse.InventDimId            == _inventDimId;
        }

        return releaseToWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextReleaseToWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next release to warehouse ID
    /// </summary>
    /// <returns>
    /// Returns the next release to warehouse identifier
    /// </returns>
    public static WHSWaveId getNextReleaseToWarehouseId()
    {
        return NumberSeq::newGetNum(WHSParameters::numRefWHSReleaseToWarehouseId()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(InventDim _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('InventDim');
        }
        else
        {
            return this.setLink('InventDim', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProdBOMItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the item ID from the bill of material.
    /// </summary>
    /// <returns>The item ID from the bill of material.</returns>
    public display ItemId displayProdBOMItemId()
    {
        ItemId ret;

        if (this.Module == WHSModule::ProdBOM)
        {
            ret = ProdBOM::findTransId(this.InventTransId).ItemId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProdBOMInventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the inventory unit ID for the bill of material.
    /// </summary>
    /// <returns>The inventory unit ID for the bill of material.</returns>
    public display InventUnitId displayProdBOMInventUnitId()
    {
        InventUnitId ret;
        
        if (this.Module == WHSModule::ProdBOM)
        {
            ret = InventTableModule::find(this.displayProdBOMItemId(), ModuleInventPurchSales::Invent).UnitId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProdBOMHandlingUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the inventory handling unit ID for the bill of material.
    /// </summary>
    /// <returns>The inventory handling unit ID for the bill of material.</returns>
    [Hookable(false)]
    internal display UnitOfMeasureSymbol displayProdBOMHandlingUnitId()
    {
        UnitOfMeasureSymbol ret;
        
        if (this.Module == WHSModule::ProdBOM)
        {
            ret = WHSCatchWeightHelper::inventHandlingUnitId(this.displayProdBOMItemId());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the given instance of <c>WHSTmpReleaseToWarehouse</c>.
    /// </summary>
    /// <param name = "_whsReleaseToWarehouse">
    /// The instance of <c>WHSTmpReleaseToWarehouse</c> to pack.
    /// </param>
    /// <param name="_whsReleaseToWarehouseId">
    /// The parameter of type <c>WHSReleaseToWarehouseId</c>.
    /// </param>
    /// <returns>
    /// The packed list of the <c>WHSTmpReleaseToWarhouse</c> instance.
    /// </returns>
    /// <remarks>
    /// Use <c>unpack</c> method to deserialize the table.
    /// </remarks>
    public static container pack(
        WHSTmpReleaseToWarehouse _whsReleaseToWarehouse,
        WHSReleaseToWarehouseId  _whsReleaseToWarehouseId)
    {
        WHSTmpReleaseToWarehouse whsTmpReleaseToWarehouse;
        whsTmpReleaseToWarehouse.linkPhysicalTableInstance(_whsReleaseToWarehouse);

        List packedRecords = new List(Types::Container);

        while select whsTmpReleaseToWarehouse
            where whsTmpReleaseToWarehouse.ReleaseToWarehouseId == _whsReleaseToWarehouseId
        {
            packedRecords.addEnd(buf2Con(whsTmpReleaseToWarehouse));
        }

        return packedRecords.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the given list and inserts into a new instance of <c>WHSTmpReleaseToWarhouse</c>.
    /// </summary>
    /// <param name = "_packedTable">
    /// Packed instance of <c>WHSTmpReleaseToWarhouse</c> table.
    /// </param>
    /// <returns>
    /// New instance of <c>WHSTmpReleaseToWarhouse</c>.
    /// </returns>
    public static WHSTmpReleaseToWarehouse unpack(container _packedTable)
    {
        WHSTmpReleaseToWarehouse whsTmpReleaseToWarehouse;
        ListEnumerator           listEnumerator = List::create(_packedTable).getEnumerator();

        while (listEnumerator.moveNext())
        {
            whsTmpReleaseToWarehouse.data(con2Buf(listEnumerator.current()));
            whsTmpReleaseToWarehouse.doInsert();
        }

        return whsTmpReleaseToWarehouse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryCreateLineFromInventTransIdInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a <c>WHSTmpReleaseToWarehouse</c> record based on an sum of quantities for an inventory dimension view.
    /// </summary>
    /// <param name = "_inventTransSumDim">Sum of quantities for an inventory dimension view</param>
    /// <param name = "_releaseToWarehouse">The <c>WHSTmpReleaseToWarehouse</c> table object</param>
    /// <param name = "_releaseToWarehouseId">The release to warehouse identifier</param>
    /// <param name = "_whsModule">The module for which the <c>WHSTmpReleaseToWarehouse</c> record is to be created or updated</param>
    /// <param name = "_qtyToRelease">The quantity to release to the warehouse</param>
    /// <returns>true if <c>WHSTmpReleaseToWarehouse</c> record was created or updated; otherwise false</returns>
    [Hookable(false)]
    internal static boolean tryCreateLineFromInventTransIdInventDimId(WHSInventTransSumDim        _inventTransSumDim,
                                                                      WHSTmpReleaseToWarehouse    _releaseToWarehouse,
                                                                      WHSReleaseToWarehouseId     _releaseToWarehouseId,
                                                                      WHSModule                   _whsModule,
                                                                      InventQty                   _qtyToRelease)
    {
        if (_qtyToRelease > 0)
        {
            WHSTmpReleaseToWarehouse::createLineFromInventTransIdInventDimId(_releaseToWarehouse,
                                                                             _releaseToWarehouseId,
                                                                             _inventTransSumDim.InventTransId,
                                                                             _inventTransSumDim.InventDimId,
                                                                             _whsModule,
                                                                             _qtyToRelease,
                                                                             true); // skip validation since invalid inventory transactions have already been filtered out in the query
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservePhysicalQtyFromInventTransSumDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserve a quantity based on an sum of quantities for an inventory dimension view.
    /// </summary>
    /// <param name = "_inventTransSumDim">Sum of quantities for an inventory dimension view</param>
    /// <param name = "_reservedOrOnOrderQty">The quantity reserved or on order</param>
    /// <returns>Reserved physical quantity.</returns>
    [Hookable(false)]
    internal static InventHandlingQty reservePhysicalQtyFromInventTransSumDim(WHSInventTransSumDim   _inventTransSumDim,
                                                                              InventQty              _reservedOrOnOrderQty)
    {
        InventTable inventTable = InventTable::find(_inventTransSumDim.ItemId);
        InventHandlingQty  reservedPhysicalQty = WHSWarehouseRelease::getReservedPhysicalHandlingQty(inventTable, _inventTransSumDim.InventTransId, _inventTransSumDim.InventDimId);

        if (_reservedOrOnOrderQty > reservedPhysicalQty
            && WHSTmpReleaseToWarehouse::shouldReserveAutomatically(inventTable))
        {
            WHSWarehouseRelease::reserve(_inventTransSumDim.InventTransId, _inventTransSumDim.InventDimId);
            reservedPhysicalQty = _reservedOrOnOrderQty;
        }

        return reservedPhysicalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReserveAutomatically</Name>
				<Source><![CDATA[
    private static boolean shouldReserveAutomatically(InventTable _inventTable)
    {
        return _inventTable.whsAllowPhysNeg()
            && !WhsReservationHierarchyInventDimUtil::anyTrackingDimensionsAboveLocation(_inventTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@WAX4432</DeveloperDocumentation>
	<Label>@WAX1884</Label>
	<TitleField1>ReleaseToWarehouseId</TitleField1>
	<TitleField2>OrderNum</TitleField2>
	<ClusteredIndex>ReleaseToWarehouseIdInventTransIdIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<PrimaryIndex>ReleaseToWarehouseIdInventTransIdIdx</PrimaryIndex>
	<TableType>TempDB</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseToWarehouseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoReserved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservationStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReleaseToWarehouseId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReleasedQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Module</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipmentId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoReserved</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReservationStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CreditMaxCheck</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipConsolidationPolicy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoReserved</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSAutoReserved</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>WHSModule</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderNum</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReleasedQty</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSReleasedQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReleaseToWarehouseId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSReleaseToWarehouseId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReservationStatus</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<EnumType>WHSReservationStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ShipmentId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSShipmentId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CreditMaxCheck</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CustCreditMaxCheck</ExtendedDataType>
			<EnumType>TypeOfCreditmaxCheck</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>FulfillmentPolicyRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSFulfillmentPolicyRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ShipConsolidationPolicy</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>WHSShipConsolidationPolicyRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ReleaseToWarehouseIdInventTransIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ReleaseToWarehouseId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EDTRelation>Yes</EDTRelation>
			<NavigationPropertyMethodNameOverride>inventDim</NavigationPropertyMethodNameOverride>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTranferLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTransferLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>WHSModule::Transfer</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SaleLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>WHSModule::Sales</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSShipmentTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSShipmentTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipmentId</Name>
					<SourceEDT>WHSShipmentId</SourceEDT>
					<Field>ShipmentId</Field>
					<RelatedField>ShipmentId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSFulfillmentPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSFulfillmentPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FulfillmentPolicyRecId</Name>
					<Field>FulfillmentPolicyRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WHSShipConsolidationPolicy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSShipConsolidationPolicy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ShipConsolidationPolicy</Name>
					<Field>ShipConsolidationPolicy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>