<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundSortPositionCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSOutboundSortPositionCriteria extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>groupFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the group field name of referenced field Id.
    /// </summary>
    /// <returns>
    /// The field name of the sort position criteria record's referenced field Id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSGroupFieldLabel groupFieldName()
    {
        return fieldId2PName(this.GroupTableId, this.GroupFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTableName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the group table name
    /// </summary>
    /// <returns>
    /// The table name of the sort position criteria record's referenced table Id.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    public display WHSGroupTableLabel groupTableName()
    {
        return tableId2PName(this.GroupTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContainerSortPositionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sorting criteria for container.
    /// </summary>
    /// <param name="_sortTemplate">
    /// The sort template tied to the position.
    /// </param>
    /// <param name="_sortPosition">
    /// The sort position record.
    /// </param>
    /// <param name="_sortIdentifier">
    /// The container or LP being sorted.
    /// </param>
    [Hookable(false)]
    internal static void createContainerSortPositionCriteria(
        WHSOutboundSortTemplate			_sortTemplate,
        WHSOutboundSortPosition	        _sortPosition,
        WHSOutboundSortIdentifier		_sortIdentifier)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

		if (_sortTemplate && _sortIdentifier && _sortPosition.RecId)
        {
            WHSInstrumentationLogger instrumentationLogger = WHSOutboundSortPositionCriteria::instrumentationLogger();

            using (var activityContext = instrumentationLogger.outboundSortingActivities().createSortPositionCriteria())
            {
                instrumentationLogger.logRecordInformation(_sortTemplate);

                Query query = new Query(_sortTemplate.PackedQueryRun);
   
                QueryBuildDataSource qbdsContainer = query.dataSourceTable(tableNum(WHSContainerTable));
                qbdsContainer.addRange(fieldNum(WHSContainerTable, ContainerId)).value(queryValue(_sortIdentifier));
                qbdsContainer.firstOnly(true);
    
                QueryRun queryRun = new QueryRun(query);
   
                boolean foundContainer = queryRun.next();

                if (foundContainer)
                {
                    WHSOutboundSortPositionCriteria::insertSortPositionCriteria(_sortPosition, queryRun, instrumentationLogger);
                }

                instrumentationLogger.outboundSortingActivities().createdSortPositionCriteria(activityContext, foundContainer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveDemandSortPositionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sorting criteria for wave demand inventory.
    /// </summary>
    /// <param name="_sortTemplate">
    /// The sort template tied to the position.
    /// </param>
    /// <param name="_sortPosition">
    /// The sort position criteria is being created for.
    /// </param>
    /// <param name="_sortIdentifier">
    /// The sort identifier of the inventory being sorted.
    /// </param>
    /// <param name="_itemId">
    /// Item being sorted.
    /// </param>
    /// <param name="_inventDim">
    /// Inventory dimensions being sorted.
    /// </param>
    [Hookable(false)]
    internal static void createWaveDemandSortPositionCriteria(
        WHSOutboundSortTemplate         _sortTemplate,
        WHSOutboundSortPosition         _sortPosition,
        WHSOutboundSortIdentifier       _sortIdentifier,
        ItemId                          _itemId,
        InventDim                       _inventDim)
    {
        if (appl.ttsLevel() == 0 || _sortTemplate.SortTemplateType != WHSOutboundSortTemplateType::WaveDemand)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSInstrumentationLogger instrumentationLogger = WHSOutboundSortPositionCriteria::instrumentationLogger();

        using (var activityContext = instrumentationLogger.outboundSortingActivities().createSortPositionCriteria())
        {
            instrumentationLogger.logRecordInformation(_sortTemplate);

            QueryRun queryRun = new QueryRun(WHSOutboundSortPositionCriteria::constructWaveDemandSortPositionCriteria(
                                                _sortTemplate,
                                                _itemId,
                                                _inventDim,
                                                _sortIdentifier));

            boolean foundWaveDemand = queryRun.next();

            if (foundWaveDemand)
            {
                WHSOutboundSortPositionCriteria::insertSortPositionCriteria(_sortPosition, queryRun, instrumentationLogger);
            }

            instrumentationLogger.outboundSortingActivities().createdSortPositionCriteria(activityContext, foundWaveDemand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveSortPositionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the sorting position criteria records for wave.
    /// </summary>
    /// <param name="_sortTemplate">
    /// A sort template associated with the sorting position.
    /// </param>
    /// <param name="_sortPosition">
    /// A sorting position the criteria is being created for.
    /// </param>
    /// <param name="_queryRun">
    /// The query run object used to read the data.
    /// </param>
    [Hookable(false)]
    internal static void createWaveSortPositionCriteria(
        WHSOutboundSortTemplate         _sortTemplate,
        WHSOutboundSortPosition         _sortPosition,
        QueryRun                        _queryRun)
    {
        if (appl.ttsLevel() == 0 || _sortTemplate.SortTemplateType != WHSOutboundSortTemplateType::WaveDemand)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSInstrumentationLogger instrumentationLogger = WHSOutboundSortPositionCriteria::instrumentationLogger();

        using (var activityContext = instrumentationLogger.outboundSortingActivities().createSortPositionCriteria())
        {
            instrumentationLogger.logRecordInformation(_sortTemplate);

            WHSOutboundSortPositionCriteria::insertSortPositionCriteria(_sortPosition, _queryRun, instrumentationLogger);

            instrumentationLogger.outboundSortingActivities().createdSortPositionCriteria(activityContext, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSortPositionCriteria</Name>
				<Source><![CDATA[
    private static void insertSortPositionCriteria(
        WHSOutboundSortPosition     _sortPosition, 
        QueryRun                    _queryRun, 
        WHSInstrumentationLogger    _instrumentationLogger)
    {
        using (var activityContext = _instrumentationLogger.outboundSortingActivities().insertSortPositionCriteria())
        {
            _instrumentationLogger.logRecordInformation(_sortPosition);

            WHSOutboundSortTemplateGroup    sortTemplateGroup;
            int                             criteriaCount;

            ttsbegin;

            while select sortTemplateGroup
                where sortTemplateGroup.SortGroupBy     == NoYes::Yes &&
                      sortTemplateGroup.SortTemplateId  == _sortPosition.SortTemplateId
            {
                WHSOutboundSortPositionCriteria sortPositionCriteria;

                sortPositionCriteria.OutboundSortPosition   = _sortPosition.RecId;
                sortPositionCriteria.GroupTableId           = sortTemplateGroup.GroupTableId;
                sortPositionCriteria.GroupFieldId           = sortTemplateGroup.GroupFieldId;
    
                WHSOutboundSortPositionCriteriaValue outputStr = _queryRun.get(sortTemplateGroup.GroupTableId).(sortTemplateGroup.GroupFieldId);
                
                sortPositionCriteria.SortPositionCriteriaValue = outputStr;
    
                sortPositionCriteria.insert();

                criteriaCount++;
            }

            ttscommit;

            _instrumentationLogger.outboundSortingActivities().insertedSortPositionCriteria(activityContext, criteriaCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructWaveDemandSortPositionCriteria</Name>
				<Source><![CDATA[
    private static Query constructWaveDemandSortPositionCriteria(
        WHSOutboundSortTemplate     _sortTemplate,
        ItemId                      _itemId,
        InventDim                   _inventDim,
        WHSOutboundSortIdentifier   _sortIdentifier)
    {
        Query query = new Query(_sortTemplate.PackedQueryRun);

        QueryBuildDataSource qbdsWorkLine = query.dataSourceTable(tableNum(WHSWorkLine));
        if (!qbdsWorkLine)
        {
            qbdsWorkLine = query.dataSourceTable(tableNum(WHSLoadLine)).addDataSource(tableNum(WHSWorkLine));
        }
        qbdsWorkLine.relations(true);
        qbdsWorkLine.fetchMode(QueryFetchMode::One2One);
        qbdsWorkLine.addRange(fieldNum(WHSWorkLine, ItemId)).value(queryValue(_itemId));

        QueryBuildDataSource qbdsSortTransaction = query.dataSourceTable(tableNum(WHSOutboundSortPositionTrans));
        if (!qbdsSortTransaction)
        {
            qbdsSortTransaction = query.dataSourceTable(tableNum(WHSWorkLine)).addDataSource(tableNum(WHSOutboundSortPositionTrans));
        }
        qbdsSortTransaction.relations(true);
        qbdsSortTransaction.joinMode(JoinMode::NoExistsJoin);
        qbdsSortTransaction.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsInventdim = query.dataSourceTable(tableNum(InventDim));
        if (!qbdsInventdim)
        {
            qbdsInventdim = qbdsWorkLine.addDataSource(tableNum(InventDim));
        }
        qbdsInventdim.relations(true);
        
        InventDim inventDimCriteria = InventDim::findDim(_inventDim);
        inventDimCriteria.clearLocationAndBelowDim(_itemId);
        InventDim::queryAddRangeCriteria(qbdsInventdim, inventDimCriteria);
        qbdsInventdim.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsWorkTable = query.dataSourceTable(tableNum(WHSWorkTable));
        if (!qbdsWorkTable)
        {
            qbdsWorkTable = qbdsWorkLine.addDataSource(tableNum(WHSWorkTable));
        }
        qbdsWorkTable.relations(true);
        qbdsWorkTable.addRange(fieldNum(WHSWorkTable, TargetLicensePlateId)).value(queryValue(_sortIdentifier));

        qbdsWorkTable.fetchMode(QueryFetchMode::One2One);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private static WHSInstrumentationLogger instrumentationLogger()
    {
        return WHSInstrumentationLogger::createLogger(tableStr(WHSOutboundSortPositionCriteria));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:WHSOutboundSortPositionCriteriaDevDocumentation</DeveloperDocumentation>
	<Label>@WAX:WHSOutboundSortPositionCriteriaLabel</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>OutboundSortPosition</TitleField1>
	<TitleField2>SortPositionCriteriaValue</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>SortPositionRefFieldRefTableId</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>SortPositionRefFieldRefTableId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SortPositionCriteriaValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OutboundSortPosition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupFieldId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>GroupTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SortPositionCriteriaValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortPositionCriteriaValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OutboundSortPosition</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortPositionRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupFieldId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortGroupFieldId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>GroupTableId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSOutboundSortGroupTableId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SortPositionRefFieldRefTableId</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>OutboundSortPosition</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupFieldId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>GroupTableId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>SortPosition</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>WHSOutboundSortPosition</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OutboundSortPosition</Name>
					<Field>OutboundSortPosition</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>