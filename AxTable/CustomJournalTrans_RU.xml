<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTrans_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomJournalTrans_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>correctAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display CustomCorrectAmount_RU correctAmount()
    {
        return (select customCorrectionTrans_RU where customCorrectionTrans_RU.JournalTransRecId == this.RecId).CorrectionCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customJournalTable</Name>
				<Source><![CDATA[
    CustomJournalTable_RU customJournalTable(boolean _forupdate = false)
    {
        CustomJournalTable_RU customJournalTable;

        customJournalTable = CustomJournalTable_RU::find(this.CustomJournalId, _forupdate);

        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        CustomJournalCalc_RU    customJournalCalc;
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;
        PackingSlipId           packingSlipId;
        CustomPartition_RU      customPartition;

        ttsbegin;

        customJournalTable = this.customJournalTable(true);

        if (customJournalTable.CustomJournalType == CustomJournalType_RU::Export)
        {
            packingSlipId = this.PackingSlipId;

            while select forupdate customJournalTrans
                where customJournalTrans.CustomJournalId    == customJournalTable.CustomJournalId   &&
                      customJournalTrans.PackingSlipId      == packingSlipId                        &&
                      customJournalTrans.RecId              != this.RecId                           &&
                      customJournalTrans.PackingSlipId
            {
                customJournalTrans.removeFromInventTrans();
                customJournalTrans.doDelete();
            }
        }

        customPartition = this.CustomPartition;

        this.removeFromInventTrans();

        super();

        customJournalCalc = CustomJournalCalc_RU::construct();
        customJournalCalc.initFromTable(customJournalTable);
        customJournalCalc.parmCustomPartition(customPartition);
        customJournalCalc.recalc();

        customJournalTable.updateChangeInLines();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>divergenceCostAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DivergenceAmount_RU divergenceCostAmount()
    {
        return this.invoiceTotalAmount() - this.indicativeTotalAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimativeAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    CustomAmount_RU estimativeAmount(CustomTotalType_RU _customTotalType)
    {
        CustomAmount_RU customAmount_RU;

        switch (_customTotalType)
        {
            case CustomTotalType_RU::Cost :
                customAmount_RU = this.CalculationMethod == CustomCalculationMethod_RU::Invoice ? this.InvoiceCostInclMarkup : this.IndicativeCost;
                break;
            case CustomTotalType_RU::Duty :
                customAmount_RU = this.CalculationMethod == CustomCalculationMethod_RU::Invoice ? this.InvoiceDuty : this.IndicativeDuty;
                break;
            case CustomTotalType_RU::Excise :
                customAmount_RU = this.CalculationMethod == CustomCalculationMethod_RU::Invoice ? this.InvoiceExcise : this.IndicativeExcise;
                break;
            case CustomTotalType_RU::VAT :
                customAmount_RU = this.CalculationMethod == CustomCalculationMethod_RU::Invoice ? this.InvoiceVAT : this.IndicativeVAT;
                break;
            case CustomTotalType_RU::Total :
                customAmount_RU = this.CalculationMethod == CustomCalculationMethod_RU::Invoice ? this.invoiceTotalAmount() : this.indicativeTotalAmount();
                break;
        }

        return customAmount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>feaccDescription</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display Description_RU feaccDescription()
    {
        return FEACCTable_RU::find(this.feaccId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indicativeTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display CustomAmount_RU indicativeTotalAmount()
    {
        return this.IndicativeDuty + this.IndicativeExcise + this.IndicativeVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustomJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initFromCustomJournalTable(CustomJournalTable_RU _customJournalTable)
    {
        this.CustomJournalId    = _customJournalTable.CustomJournalId;
        this.CountryRegionId    = _customJournalTable.CountryRegionId;
        this.CalculationMethod  = _customJournalTable.CalculationMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnitId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display InventUnitId inventUnitId()
    {
        return InventTable::find(this.ItemId).inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTotalAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display CustomAmount_RU invoiceTotalAmount()
    {
        return this.InvoiceDuty + this.InvoiceExcise + this.InvoiceVAT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display ItemName itemName()
    {
        return InventTable::find(this.ItemId).itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId   _fieldId,
                              boolean   _showInfo = true,
                              boolean   _autoAcceptDialog = false)
    {
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;
        boolean                 recalcTable = false;
        CustomPartition_RU      customPartitionOld;

        void write()
        {
            if (this.(_fieldId) != this.orig().(_fieldId))
            {
                recalcTable = true;
            }
            this.write();
            if (customPartitionOld != this.CustomPartition)
            {
                this.recalc(customPartitionOld);
                this.recalc(this.CustomPartition);
            }
        }
        void refresh()
        {
            write();
            if (FormDataUtil::isFormDataSource(this))
            {
                FormDataUtil::getFormDataSource(this).reread();
                FormDataUtil::getFormDataSource(this).refresh();
            }
        }
        void research()
        {
            write();
            if (FormDataUtil::isFormDataSource(this))
            {
                customJournalTrans.data(this);
                FormDataUtil::getFormDataSource(this).research();
                FormDataUtil::getFormDataSource(this).findRecord(customJournalTrans);
            }
        }
        ;
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustomJournalTrans_RU, CustomPartition):
                customPartitionOld = this.orig().CustomPartition;
                if (CustomJournalTrans_RU::countLines(this.CustomJournalId, this.feaccId) > 1)
                {
                    this.CustomPartition = CustomJournalTrans_RU::applyPartition(this.CustomJournalId, this.feaccId, this.CustomPartition, this.orig().CustomPartition, this, _autoAcceptDialog);
                    research();
                }
                else
                {
                    refresh();
                }
                break;
            case fieldNum(CustomJournalTrans_RU, CalculationMethod):
                select count(RecId) from customJournalTrans
                    where customJournalTrans.CustomJournalId == this.CustomJournalId &&
                          customJournalTrans.CustomPartition == this.CustomPartition;
                if (customJournalTrans.RecId > 1)
                {
                    this.CalculationMethod = CustomJournalTrans_RU::applyCalculationMethod(this.CalculationMethod, this, _autoAcceptDialog);
                    research();
                }
                else
                {
                    refresh();
                }
                if (recalcTable)
                {
                    this.recalcTable();
                }
                break;
            case fieldNum(CustomJournalTrans_RU, CountryRegionId):
                select count (RecId) from customJournalTrans
                    where customJournalTrans.CustomJournalId == this.CustomJournalId
                       && customJournalTrans.CustomPartition == this.CustomPartition;
                if (customJournalTrans.RecId > 1)
                {
                    this.CountryRegionId = CustomJournalTrans_RU::applyCountryRegionId(this.CountryRegionId, this, _autoAcceptDialog);
                    research();
                }
                else
                {
                    refresh();
                }
                if (recalcTable)
                {
                    this.recalcTable();
                }
                break;
            case fieldNum(CustomJournalTrans_RU, IndicativeDuty),
                 fieldNum(CustomJournalTrans_RU, IndicativeExcise):
                    customJournalTable = this.customJournalTable();
                    this.IndicativeVAT = CustomJournalCalc_RU::construct().calcVAT(this.ItemId,
                                                                                   this.feaccId,
                                                                                   customJournalTable.PlanArrivalDate,
                                                                                   this.IndicativeCost + this.IndicativeDuty + this.IndicativeExcise,
                                                                                   this.Qty,
                                                                                   this.UnitId,
                                                                                   customJournalTable.CustomJournalType,
                                                                                   this.CountryRegionId);
                    if (_showInfo)
                    {
                        info("@SYS55661" + "@GLS111192" + "@GLS102908" + "@GLS115052" + "@GLS102908" + "@GLS111211" + "@GLS116883" +
                             strFmt("@SYS79527", this.ItemId, strFmt("@GLS115270", customJournalTable.CustomJournalId)));
                    }
                break;
            case fieldNum(CustomJournalTrans_RU, InvoiceDuty),
                 fieldNum(CustomJournalTrans_RU, InvoiceExcise):
                    customJournalTable = this.customJournalTable();
                    this.InvoiceVAT    = CustomJournalCalc_RU::construct().calcVAT(this.ItemId,
                                                                                   this.feaccId,
                                                                                   customJournalTable.PlanArrivalDate,
                                                                                   this.InvoiceCostInclMarkup + this.InvoiceDuty + this.InvoiceExcise,
                                                                                   this.Qty,
                                                                                   this.UnitId,
                                                                                   customJournalTable.CustomJournalType,
                                                                                   this.CountryRegionId);

                    if (_showInfo)
                    {
                        info("@SYS55661" + "@GLS111192" + "@GLS102908" + "@GLS115051" + "@GLS102908" + "@GLS111211" + "@GLS116883" +
                             strFmt("@SYS79527", this.ItemId, strFmt("@GLS115270", customJournalTable.CustomJournalId)));
                    }
                break;
            case fieldNum(CustomJournalTrans_RU, ItemNetWeight),
                 fieldNum(CustomJournalTrans_RU, ItemGrossWeight),
                 fieldNum(CustomJournalTrans_RU, Volume):
                refresh();
                break;
            case fieldNum(CustomJournalTrans_RU, PdsCWQty):
                this.pdsCWQtyConversion();
                refresh();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the CW qty to the standard qty and sets the
    /// customJournalTrans.Qty to the converted value.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// private void pdsCWQtyConversion()
    /// </syntax>
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void pdsCWQtyConversion()
    {
        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            this.Qty = PdsCatchWeight::inventQty(
                           this.ItemId,
                           this.PdsCWQty,
                           this.UnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the catch weight quanity entered is valid.
    /// </summary>
    /// <returns>
    /// true if CW quantity is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Checks that catch weight quantity is within the range set
    /// up for the item.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean pdsCWQtyValidation()
    {
        boolean ret = true;
        boolean isNegative = false;

        if (PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            if (!this.PdsCWQty)
            {
                ret = checkFailed("@PDS113");
            }

            if (ret
                && !PdsCatchWeightItem::pdsCWIsValidQty(this.ItemId,
                                                        this.Qty,
                                                        this.PdsCWQty))
            {
                ret = checkFailed(PdsCatchWeightItem::pdsCWErrorMsgForUnit(
                                                        this.ItemId,
                                                        this.PdsCWQty,
                                                        this.UnitId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void recalc(CustomPartition_RU  _customPartition = '')
    {
        CustomJournalCalc_RU    customJournalCalc;
        FormDataSource          formDataSource;
        FormRun                 formRun;
        Object                  formRunObject;

        ttsbegin;

        customJournalCalc = CustomJournalCalc_RU::construct();
        customJournalCalc.initFromTable(this.customJournalTable());
        customJournalCalc.parmCustomPartition(_customPartition);
        customJournalCalc.recalc();

        ttscommit;

        if (FormDataUtil::isFormDataSource(this))
        {
            formDataSource = FormDataUtil::getFormDataSource(this);
            formRun        = formDataSource.formRun();

            if (formRun && formHasMethod(formRun, identifierStr(tableFormDataSource)))
            {
                formRunObject  = formRun;
                formDataSource = formRunObject.tableFormDataSource();
                formDataSource.reread();
                formDataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void recalcTable()
    {
        CustomJournalCalc_RU    customJournalCalc;
        FormDataSource          formDataSource;
        FormRun                 formRun;
        Object                  formRunObject;

        ttsbegin;

        customJournalCalc = CustomJournalCalc_RU::construct();
        customJournalCalc.initFromTable(this.customJournalTable());
        customJournalCalc.recalcTable();

        ttscommit;

        if (FormDataUtil::isFormDataSource(this))
        {
            formDataSource = FormDataUtil::getFormDataSource(this);
            formRun        = formDataSource.formRun();

            if (formRun && formHasMethod(formRun, identifierStr(tableFormDataSource)))
            {
                formRunObject  = formRun;
                formDataSource = formRunObject.tableFormDataSource();
                formDataSource.reread();
                formDataSource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFromInventTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void removeFromInventTrans()
    {
        InventTrans         inventTrans;
        PdsCWInventQty      remainPdsCWQty = abs(this.PdsCWQty);
        PdsCWInventQty      pdsCWUpdateNow;
        Qty                 remainQty = abs(this.Qty);
        Qty                 updateNow;
        real                sign;
        InventTransOriginId originId;

        if (this.StatusIssue == StatusIssue::None && this.StatusReceipt == StatusReceipt::None)
        {
            return;
        }

        originId = InventTransOrigin::findByInventTransId(this.SalesPurchInventTransId).RecId;

        while select forupdate inventTrans
            index hint GroupRefIdx_RU
            where ((inventTrans.GroupRefType_RU             == InventTransGroupRefType_RU::CustomJournalGIT &&
                    inventTrans.GroupRefId_RU               == this.CustomJournalId                         &&
                    inventTrans.InventTransOriginSales_RU   == originId)                ||
                   (inventTrans.GroupRefType_RU             == InventTransGroupRefType_RU::CustomJournalStd &&
                    inventTrans.GroupRefId_RU               == this.CustomJournalId                         &&
                    inventTrans.InventTransOrigin           == originId))                                   &&
                    inventTrans.StatusIssue                 == this.StatusIssue                             &&
                    inventTrans.StatusReceipt               == this.StatusReceipt
        {
            sign      = sign(inventTrans.Qty);
            updateNow = min(abs(inventTrans.Qty), remainQty);
            pdsCWUpdateNow = min(abs(inventTrans.PdsCWQty), remainPdsCWQty);

            if (updateNow < sign * inventTrans.Qty)
            {
                inventTrans.updateSplit(sign * updateNow, sign * pdsCWUpdateNow);
            }

            inventTrans.GroupRefType_RU = InventTransGroupRefType_RU::None;
            inventTrans.GroupRefId_RU   = '';
            inventTrans.update();

            inventTrans.updateSumUp();

            remainQty -= updateNow;
            remainPdsCWQty -= pdsCWUpdateNow;

            if (! remainQty)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Common salesPurchLine(boolean _forUpdate = false)
    {
        Common ret;

        switch (this.customJournalTable().CustomJournalType)
        {
            case CustomJournalType_RU::Import :
                ret = PurchLine::findInventTransId(this.SalesPurchInventTransId, _forUpdate);
                break;
            case CustomJournalType_RU::Export :
                ret = SalesLine::findInventTransId(this.SalesPurchInventTransId, _forUpdate);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays SalesPurchUnitId
    /// </summary>
    /// <returns>
    /// Returns the Sales/PurchUnit of the originating Sales/PurchLine record
    /// </returns>
    /// <remarks>
    /// Selects the originating Sales/PurchLine record and returns the value of the corresponsing Sales/PurchUnit field
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display InventUnitId salesPurchUnitId()
    {
        Common          common  = this.salesPurchLine();
        InventUnitId    ret     = '';

        switch (common.TableId)
        {
            case tableNum(PurchLine) :
                ret = common.(fieldNum(PurchLine, PurchUnit));
                break;
            case tableNum(SalesLine) :
                ret = common.(fieldNum(SalesLine, SalesUnit));
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChangeInLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void updateChangeInLines()
    {
        this.ChangeInLines = this.InvoiceDuty      != this.InvoiceDutyFixed        ||
                             this.InvoiceExcise    != this.InvoiceExciseFixed      ||
                             this.InvoiceVAT       != this.InvoiceVATFixed         ||
                             this.IndicativeDuty   != this.IndicativeDutyFixed     ||
                             this.IndicativeExcise != this.IndicativeExciseFixed   ||
                             this.IndicativeVAT    != this.IndicativeVATFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean                 ret;
        CustomJournalCharge_RU  customJournalCharge;

        ret = super();

        select firstonly customJournalCharge
            where customJournalCharge.CustomJournalId   == this.CustomJournalId             &&
                  customJournalCharge.ChargeType        == CustomChargeTypeCalc_RU::Storage &&
                  this.CustomAmountStorage;

        if (customJournalCharge)
        {
            ret = checkFailed("@GLS115379");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;
        real    value;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(CustomJournalTrans_RU, CustomPartition):
                    if (CustomJournalTrans_RU::existCustomPartition(this.CustomJournalId, this.CustomPartition, this.feaccId))
                    {
                        this.CustomPartition = this.orig().CustomPartition;
                        ret = checkFailed("@GLS115430");
                    }
                    break;
                case fieldNum(CustomJournalTrans_RU, Qty):
                    if (this.Qty < 0.0)
                    {
                        ret = checkFailed("@GLS115431");
                    }
                    if (ret)
                    {
                        ret = this.pdsCWQtyValidation();
                    }
                    break;
                case fieldNum(CustomJournalTrans_RU, PdsCWQty):
                    if (this.PdsCWQty < 0.0)
                    {
                        ret = checkFailed("@GLS115431");
                    }
                    break;
                case fieldNum(CustomJournalTrans_RU, ItemNetWeight),
                     fieldNum(CustomJournalTrans_RU, ItemGrossWeight),
                     fieldNum(CustomJournalTrans_RU, Volume):
                    value = this.(_fieldIdToCheck);
                    if (value <= 0.0)
                    {
                        ret = checkFailed("@GLS223714");
                    }
                    break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = this.pdsCWQtyValidation() && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCalculationMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustomCalculationMethod_RU applyCalculationMethod(CustomCalculationMethod_RU  _newCalculationMethod,
                                                                    CustomJournalTrans_RU       _callerRecord,
                                                                    boolean                     _autoAcceptDialog = false)
    {
        CustomJournalTrans_RU       customJournalTrans;
        CustomCalculationMethod_RU  ret = _callerRecord.orig().CalculationMethod;

        if (_callerRecord.CalculationMethod == ret)
        {
            return ret;
        }

        if (_autoAcceptDialog || Box::okCancel("@GLS115919", DialogButton::Cancel) == DialogButton::Ok)
        {
            update_recordset customJournalTrans
                setting CalculationMethod = _newCalculationMethod
                where customJournalTrans.CustomJournalId == _callerRecord.CustomJournalId &&
                      customJournalTrans.CustomPartition == _callerRecord.CustomPartition &&
                     (! _callerRecord.RecId || customJournalTrans.RecId != _callerRecord.RecId);
            ret = _callerRecord.CalculationMethod;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Country/region field in the record with original record.
    /// </summary>
    /// <param name="_newCountryRegionId">
    /// The new Country/region value.
    /// </param>
    /// <param name="_callerRecord">
    /// The original record.
    /// </param>
    /// <param name="_autoAcceptDialog">
    /// A Boolean value that indicates whether to skip dialog for confirm; optional.
    /// </param>
    /// <returns>
    /// The new Country/region value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static AddressCountryRegionId applyCountryRegionId(AddressCountryRegionId _newCountryRegionId,
                                                                     CustomJournalTrans_RU  _callerRecord,
                                                                     boolean                _autoAcceptDialog = false)
    {
        CustomJournalTrans_RU   customJournalTrans;
        AddressCountryRegionId  ret = _callerRecord.orig().CountryRegionId;

        if (_callerRecord.CountryRegionId == ret)
        {
            return ret;
        }

        if (Box::okCancel("@GLS223713", DialogButton::Cancel) == DialogButton::Ok
        || _autoAcceptDialog)
        {
            update_recordset customJournalTrans
                setting CountryRegionId = _newCountryRegionId
                where customJournalTrans.CustomJournalId == _callerRecord.CustomJournalId &&
                      customJournalTrans.CustomPartition == _callerRecord.CustomPartition &&
                     (! _callerRecord.RecId || customJournalTrans.RecId != _callerRecord.RecId);
            ret = _callerRecord.CountryRegionId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPartition</Name>
				<Source><![CDATA[
    #define.customPartitionDefaultSymbol('0')
    #define.digits('0123456789')
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustomPartition_RU applyPartition(CustomJournalId_RU      _customJournalId,
                                                    FEACCId_RU              _feaccId,
                                                    CustomPartition_RU      _newCustomPartition,
                                                    CustomPartition_RU      _oldCustomPartition = '',
                                                    CustomJournalTrans_RU   _callerRecord = null,
                                                    boolean                 _autoAcceptDialog = false)
    {
        FormDataSource          formDataSource;
        CustomJournalTrans_RU   customJournalTrans;
        CustomPartition_RU      ret = _oldCustomPartition;
        DialogButton            retDialogButton;

        _newCustomPartition = strRFix(strKeep(_newCustomPartition, #digits), new DictField(tableNum(CustomJournalTrans_RU), fieldNum(CustomJournalTrans_RU, CustomPartition)).stringLen(), #customPartitionDefaultSymbol);

        if (_newCustomPartition == _oldCustomPartition)
        {
            return ret;
        }
        if (!_autoAcceptDialog)
        {
            retDialogButton = Box::yesYesAllNoCancel(strFmt("@GLS115377", _feaccId), DialogButton::No, "@SYS12529", true);
        }
        else
        {
            retDialogButton = DialogButton::YesToAll;
        }
        switch (retDialogButton)
        {
            case DialogButton::YesToAll :
                update_recordset customJournalTrans
                    setting CustomPartition = _newCustomPartition
                    where customJournalTrans.CustomJournalId == _customJournalId &&
                          customJournalTrans.feaccId         == _feaccId &&
                         (! _callerRecord.RecId || customJournalTrans.RecId != _callerRecord.RecId);

                ret = _newCustomPartition;

                if (_callerRecord && FormDataUtil::isFormDataSource(_callerRecord))
                {
                    customJournalTrans.data(_callerRecord);

                    formDataSource = FormDataUtil::getFormDataSource(_callerRecord);
                    formDataSource.research();
                    formDataSource.positionToRecord(customJournalTrans);
                }
                break;
            case DialogButton::Yes :
                ret = _newCustomPartition;
                break;
            case DialogButton::Cancel :
                error("@SYS319214");
                ret = _oldCustomPartition;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static int64 countLines(CustomJournalId_RU  _customJournalId,
                            FEACCId_RU          _feaccId = '')
    {
        CustomJournalTrans_RU customJournalTrans;

        select count(RecId) from customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalId &&
                  (! _feaccId || customJournalTrans.feaccId == _feaccId);

        return customJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCustomPartition</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RecId existCustomPartition(CustomJournalId_RU    _customJournalId,
                                      CustomPartition_RU    _customPartition,
                                      FEACCId_RU            _feaccId = '')
    {
        CustomJournalTrans_RU customJournalTrans;

        select count(RecId) from customJournalTrans
            where customJournalTrans.CustomJournalId == _customJournalId &&
                  customJournalTrans.CustomPartition == _customPartition &&
                  (! _feaccId || customJournalTrans.feaccId != _feaccId);

        return customJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInventTransId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static boolean existInventTransId(InventTransId _inventTransId)
    {
        return (select firstonly RecId from customJournalTrans_RU
                    where customJournalTrans_RU.SalesPurchInventTransId == _inventTransId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTrans_RU find(CustomJournalId_RU _customJournalId,
                                             LineNum            _lineNum,
                                             boolean            _forupdate = false)
    {
        CustomJournalTrans_RU customJournalTrans;

        customJournalTrans.selectForUpdate(_forupdate);

        if (_customJournalId && _lineNum)
        {
            select firstonly customJournalTrans
                where customJournalTrans.CustomJournalId == _customJournalId &&
                      customJournalTrans.LineNum         == _lineNum;
        }

        return customJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByFacture</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTrans_RU findByFacture(FactureTrans_RU    _trans,
                                                             boolean            _forupdate = false)
    {
        CustomJournalTrans_RU ret;

        if (_trans                                                          &&
            _trans.Module          == FactureModule_RU::Vend                &&
            _trans.FactureLineType == FactureLineType_RU::GTDLine)
        {
            ret.selectForUpdate(_forupdate);

            select firstonly ret
                where ret.LineNum             == _trans.InvoiceLineNum      &&
                      ret.CustomJournalId     == _trans.FactureId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstFEACCId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomPartition_RU findFirstFEACCId(CustomJournalId_RU    _customJournalId,
                                                      FEACCId_RU            _feaccId)
    {
        CustomJournalTrans_RU customJournalTrans;

        if (_customJournalId && _feaccId)
        {
            select firstonly CustomPartition from customJournalTrans
                where customJournalTrans.CustomJournalId == _customJournalId &&
                      customJournalTrans.feaccId         == _feaccId;
        }

        return customJournalTrans.CustomPartition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustomJournalTrans_RU findInventTransId(InventTransId _inventTransId,
                                                   boolean       _forupdate = false)
    {
        CustomJournalTrans_RU customJournalTrans;

        if (_inventTransId)
        {
            customJournalTrans.selectForUpdate(_forupdate);

            select firstonly customJournalTrans
                index hint TransIdIdx
                where customJournalTrans.SalesPurchInventTransId == _inventTransId;
        }

        return customJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastPosted</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTrans_RU findLastPosted(FEACCId_RU           _feaccId,
                                                       VendAccountCustom_RU _vendAccountCustom,
                                                       boolean              _forupdate = false)
    {
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;

        customJournalTrans.selectForUpdate(_forupdate);

        if (_feaccId)
        {
            select firstonly customJournalTrans
                where customJournalTrans.feaccId == _feaccId
            join PlanArrivalDate from customJournalTable
                order by PlanArrivalDate desc
                where customJournalTable.CustomJournalId     == customJournalTrans.CustomJournalId &&
                      customJournalTable.VendAccountCustom   == _vendAccountCustom                 &&
                      customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Posted;
        }

        return customJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTrans_RU findRecId(RefRecId  _refRecId,
                                                  boolean   _forupdate = false)
    {
        CustomJournalTrans_RU customJournalTrans;

        customJournalTrans.selectForUpdate(_forupdate);

        if (_refRecId)
        {
            select firstonly customJournalTrans
                where customJournalTrans.RecId == _refRecId;
        }

        return customJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSingleLinePartition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that indicates whether singular custom journal line.
    /// </summary>
    /// <param name="_customJournalId">
    /// The original journal Id.
    /// </param>
    /// <param name="_customPartition">
    /// The original partition.
    /// </param>
    /// <returns>
    /// A Boolean value that indicates whether singular custom journal line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean isSingleLinePartition(CustomJournalId_RU _customJournalId, CustomPartition_RU _customPartition)
    {
        #define.one(1)
        return CustomJournalTrans_RU::partitionLineCount(_customJournalId, _customPartition) == any2int64(#one);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static LineNum maxLineNum(CustomJournalId_RU _journalId)
    {
        return (select maxof(LineNum) from customJournalTrans_RU
                    where customJournalTrans_RU.CustomJournalId == _journalId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>partitionLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the count of records of the <c>CustomJournalTrans_RU</c> table that is attached to the journal Id and partition.
    /// </summary>
    /// <param name="_customJournalId">
    /// The original custom journal Id.
    /// </param>
    /// <param name="_customPartition">
    /// The original partition.
    /// </param>
    /// <returns>
    /// The agreement count of records.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static int64 partitionLineCount(CustomJournalId_RU _customJournalId, CustomPartition_RU _customPartition)
    {
        return (select count (RecId) from customJournalTrans_RU
                where customJournalTrans_RU.CustomJournalId == _customJournalId
                   && customJournalTrans_RU.CustomPartition == _customPartition).RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<FormRef>CustomJournalTable_RU</FormRef>
	<Label>@GLS115114</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>FEACCId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>JournalLineNumIdx</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>JournalLineNumIdx</PrimaryIndex>
	<ReplacementKey>JournalLineNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Divergence</Name>
			<Label>@GLS115130</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>divergenceCostAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS35893</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomPartition</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalculationMethod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CountryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS80392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustomJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IndicativeAmount</Name>
			<Label>@GLS115155</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IndicativeCost</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndicativeDuty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndicativeExcise</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndicativeVAT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>indicativeTotalAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>IndicativeAmountFixed</Name>
			<Label>@GLS115156</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IndicativeDutyFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndicativeExciseFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IndicativeVATFixed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAmount</Name>
			<Label>@GLS115160</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceCostInclMarkup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDuty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceExcise</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceVAT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoiceTotalAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceAmountFixed</Name>
			<Label>@GLS115161</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceDutyFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceExciseFixed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceVATFixed</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceInformation</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackingSlipId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Item</Name>
			<Label>@SYS14428</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FEACCId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Markup</Name>
			<Label>@SYS116804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MarkupAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Qty</Name>
			<Label>@SYS59970</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemNetWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemGrossWeight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomAmountStorage</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reference</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesPurchInventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusIssue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StatusReceipt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS9853</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChangeInLines</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AmountCur</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalculationMethod</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustomCalculationMethod_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ChangeInLines</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@GLS115127</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CountryRegionId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>AddressCountryRegionId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CustomAmountStorage</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS115123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomJournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomJournalId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustomPartition</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomPartition_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FEACCId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FEACCId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeCost</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS102406</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeDuty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS115133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeDutyFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS115133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeExcise</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS100780</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeExciseFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS100780</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS111211</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IndicativeVATFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS111211</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceCostInclMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS102406</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceDuty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS115133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceDutyFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS115133</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceExcise</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS100780</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceExciseFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS100780</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InvoiceId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceVAT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS111211</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceVATFixed</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@GLS111211</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ItemGrossWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemGrossWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ItemNetWeight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemNetWeight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MarkupAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomAmount_RU</ExtendedDataType>
			<Label>@SYS57840</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackingSlipId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PackingSlipId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Qty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesPurchId_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesPurchInventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusIssue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>StatusIssue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>StatusReceipt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>StatusReceipt</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>UnitId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitOfMeasureSymbol</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Volume</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Volume</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>JournalLineNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomJournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>journalDisplayIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomJournalId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustomPartition</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesPurchInventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustomJournalTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomJournalTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomJournalId</Name>
					<Field>CustomJournalId</Field>
					<RelatedField>CustomJournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>FEACCTable_RU</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FEACCTable_RU</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Blocked_Extern</Name>
					<RelatedField>Blocked</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FEACCId</Name>
					<Field>FEACCId</Field>
					<RelatedField>FEACCId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesPurchInventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>SalesPurchInventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsAddressCountryRegion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LogisticsAddressCountryRegion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CountryRegionId</Name>
					<SourceEDT>AddressCountryRegionId</SourceEDT>
					<Field>CountryRegionId</Field>
					<RelatedField>CountryRegionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CountryRegionIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>