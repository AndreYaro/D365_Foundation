<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdExcludeIndirectTax_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdExcludeIndirectTax_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>writeExcludedTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts Indirect Taxes those are excluded for the TDS or TCS calculation.
    /// </summary>
    /// <param name="_taxTypeContainer">
    /// Contains Indirect Tax Types
    /// </param>
    /// <param name="_excludedIndirectTaxCtrlText">
    /// Indirect Tax Types
    /// </param>
    /// <param name="_taxWithholdGroupHeadingRecId">
    /// The TaxWithholdGroup attached for the transaction.
    /// </param>
    public void writeExcludedTaxes(container _taxTypeContainer,
                                   str       _excludedIndirectTaxCtrlText,
                                   RefRecId  _taxWithholdGroupHeadingRecId)
    {
        int                              i;
        TaxWithholdExcludeIndirectTax_IN taxWithholdExcludeIndirectTax;
        DictEnum                         enum;

        enum = new DictEnum(enumNum(TaxType_IN));

        i = 1;

        ttsBegin;

        delete_from taxWithholdExcludeIndirectTax
            where taxWithholdExcludeIndirectTax.TaxWithholdGroupHeading == _taxWithholdGroupHeadingRecId;

        ttsCommit;
        // This condition is to ignore the insertion of records into TaxWithholdExcludeIndirectTax_IN
        // table if the elements are marked but OK not clicked
        if (_excludedIndirectTaxCtrlText != "")
        {
            while (i <= conLen(_taxTypeContainer))
            {
                if (conPeek(_taxTypeContainer, i) != "")
                {
                    taxWithholdExcludeIndirectTax.TaxType                 = enum.symbol2Value(conPeek(_taxTypeContainer, i));
                    taxWithholdExcludeIndirectTax.TaxWithholdGroupHeading = _taxWithholdGroupHeadingRecId;
                    taxWithholdExcludeIndirectTax.insert();
                    i++;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxWithholdExcludeIndirectTax_IN</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The reference record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxWithholdExcludeIndirectTax_IN</c> table; otherwise, an empty record.
    /// </returns>

    static TaxWithholdExcludeIndirectTax_IN find(RefRecId      _recId,
                                                 boolean       _forUpdate = false)
    {
        TaxWithholdExcludeIndirectTax_IN taxWithholdExcludeIndirectTax;

        if (_recId)
        {
            if (_forUpdate)
                taxWithholdExcludeIndirectTax.selectForUpdate(_forUpdate);

            select firstonly taxWithholdExcludeIndirectTax
                where taxWithholdExcludeIndirectTax.RecId == _recId;
        }
        return taxWithholdExcludeIndirectTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedIndirectTaxContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Indirect Taxes those are excluded for the TDS or TCS calculation.
    /// </summary>
    /// <param name="_taxWithholdGroupHeadingRecid">
    /// The TaxWithholdGroup attached for the transaction.
    /// </param>
    /// <returns>
    /// Returns Indirect Taxes those are excluded for the TDS or TCS calculation.
    /// </returns>
    public static container getExcludedIndirectTaxContainer(RefRecId _taxWithholdGroupHeadingRecid)
    {
        container                        selectedTaxTypeContainer;
        container                        taxTypeRecIdContainer;
        TaxWithholdExcludeIndirectTax_IN taxWithholdExcludeIndirectTax;
        TaxTypeTable_IN                  taxTypeTable;
        DictEnum                         enum;

        enum = new DictEnum(enumNum(TaxType_IN));

        while select TaxType, RecId from taxWithholdExcludeIndirectTax
            where taxWithholdExcludeIndirectTax.TaxWithholdGroupHeading == _taxWithholdGroupHeadingRecId
                join TaxType from taxTypeTable
                    where taxTypeTable.TaxType == taxWithholdExcludeIndirectTax.TaxType

        {
            taxTypeRecIdContainer         += taxTypeTable.RecId;
            selectedTaxTypeContainer      += enum.value2Symbol(taxWithholdExcludeIndirectTax.TaxType);
        }

        return [taxTypeRecIdContainer, selectedTaxTypeContainer];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@SYS4002998</DeveloperDocumentation>
	<Label>@SYS4002999</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxWithholdGroupHeading</TitleField1>
	<TitleField2>TaxType</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>WithholingGroupTaxTypeIdx</ClusteredIndex>
	<Modules>Tax</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroupHeading</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS334321</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdGroupHeading</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TaxType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdGroupHeading</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WithholingGroupTaxTypeIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdGroupHeading</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdGroupHeading</Name>
					<Field>TaxWithholdGroupHeading</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>