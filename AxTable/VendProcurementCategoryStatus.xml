<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendProcurementCategoryStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendProcurementCategoryStatus extends Common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateFutureRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the specified record in the <c>VendProcureCategoryStatus</c> table.
    /// </summary>
    /// <param name="_vendProcCategoryStatusRecId">
    /// The <c>VendProcurementCategoryStatus</c> record to find and enable.
    /// </param>
    /// <remarks>
    /// If this method is called by using the version record in past then an error will be thrown.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void activateFutureRecord(RefRecId _vendProcCategoryStatusRecId)
    {
        VendProcurementCategoryStatus vendProcCategoryStatusActivate;

        ttsbegin;
        vendProcCategoryStatusActivate = VendProcurementCategoryStatus::findVersion(_vendProcCategoryStatusRecId, true);
        if (vendProcCategoryStatusActivate.RecId)
        {
            vendProcCategoryStatusActivate.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            vendProcCategoryStatusActivate.ValidFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
            vendProcCategoryStatusActivate.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new version of the specified record in the <c>VendProcureCategoryStatus</c> table.
    /// </summary>
    /// <param name="_vendProcCategoryStatusRecId">
    /// The <c>VendProcurementCategoryStatus</c> record to find and create a new version.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createNewVersion(RefRecId _vendProcCategoryStatusRecId)
    {
        VendProcurementCategoryStatus  vendProcCategoryStatusNew = VendProcurementCategoryStatus::findVersion(_vendProcCategoryStatusRecId, true);
        vendProcCategoryStatusNew.ValidFrom = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        vendProcCategoryStatusNew.ValidTo = maxDate();
        vendProcCategoryStatusNew.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes any future records and retires any past records.
    /// </summary>
    /// <remarks>
    /// Overrides the delete method in the <c>VendProcurementCategoryStatus</c> table.
    /// </remarks>
    public void delete()
    {
        VendProcurementCategoryStatusSkipBusinessLogicContext skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::current();

        if (skipBusinessLogicContext && skipBusinessLogicContext.parmSkipUpdate())
        {
            super();
            return;
        }

        date currentDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;
        VendProcurementCategoryStatus::deleteChildVendorCategoryStatus(this);

        if (this.ValidFrom >= currentDate)
        {
            super();
        }
        else
        {
            this.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
            this.ValidTo = currentDate - 1;
            this.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expireActiveRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the current active record in the <c>VendProcureCategoryStatus</c> table.
    /// </summary>
    /// <param name="_vendCategoryRecId">
    /// The <c>VendCategory</c> record to deletes.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void expireActiveRecord(RefRecId _vendCategoryRecId)
    {
        VendProcurementCategoryStatus   vendProcCategoryStatusExpire;
        date                            systemDate  = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;
        vendProcCategoryStatusExpire = VendProcurementCategoryStatus::findVendorCategoryAsOfDate(_vendCategoryRecId, systemDate, true);
        if (vendProcCategoryStatusExpire.RecId)
        {
            vendProcCategoryStatusExpire.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperatingUnitName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    display DirPartyName getOperatingUnitName()//VendProcurementCategoryStatus _selected)
    {
        return DirPartyTable::findRec(this.OperatingUnit).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        VendProcurementCategoryStatusSkipBusinessLogicContext skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::current();

        if (skipBusinessLogicContext && skipBusinessLogicContext.parmSkipUpdate())
        {
            super();
            return;
        }

        ttsbegin;

        super();

        VendProcurementCategoryStatus::addChildVendorCategoryStatus(this);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        VendProcurementCategoryStatusSkipBusinessLogicContext skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::current();

        if (skipBusinessLogicContext && skipBusinessLogicContext.parmSkipUpdate())
        {
            super();
            return;
        }

        VendCategory                  vendCategory;
        ProcCategoryExpanded          procCategory;
        VendProcurementCategoryStatus originalCategoryStatus = this.orig();

        ttsbegin;

        if (this.VendorCategoryStatus != originalCategoryStatus.VendorCategoryStatus)
        {
            select firstonly * from vendCategory
                    where vendCategory.RecId == this.VendorCategory
                    join IsVendorsInherited, ParentCategory from procCategory
                        where procCategory.CategoryId == vendCategory.Category;

            if (procCategory.IsVendorsInherited && VendCategory::exist(vendCategory.VendorAccount, procCategory.ParentCategory, vendCategory.VendorDataArea))
            {
                throw Global::error("@SYS326689");
            }

            VendProcurementCategoryStatus::changeChildVendorCategoryStatus(this.VendorCategory, this.VendorCategoryStatus);
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        VendCategory         vendCategory;
        ProcCategoryExpanded procCategory;
        boolean              ret = super();

        if (ret)
        {
            select firstonly * from vendCategory
                where vendCategory.RecId == this.VendorCategory
                join IsVendorsInherited, ParentCategory from procCategory
                    where procCategory.CategoryId == vendCategory.Category;

            if (procCategory.IsVendorsInherited && VendCategory::exist(vendCategory.VendorAccount, procCategory.ParentCategory, vendCategory.VendorDataArea))
            {
                return checkFailed("@SYS327993");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChildVendorCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>VendProcurementCategoryStatus</c> records by using the inheritance that is specified at
    /// each child category.
    /// </summary>
    /// <param name="_vendProcurementCategoryStatus">
    /// The <c>VendProcurementCategoryStatus</c> record that is used as a filter.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void addChildVendorCategoryStatus(VendProcurementCategoryStatus _vendProcurementCategoryStatus)
    {
        VendCategory                    selectedVendCategory, vendCategory;
        ProcCategoryExpanded            procCategory;
        VendCategory                    childVendCategory;
        ProcCategoryExpanded            subTree, pathToThis;

        ttsbegin;

        select firstonly * from selectedVendCategory
                where selectedVendCategory.RecId == _vendProcurementCategoryStatus.VendorCategory
                join * from procCategory
                    where procCategory.CategoryId == selectedVendCategory.Category;

        while select VendorAccount, VendorDataArea from vendCategory
                where vendCategory.RecId == _vendProcurementCategoryStatus.VendorCategory
                join CategoryId from subTree
                    where subTree.CategoryHierarchy == procCategory.CategoryHierarchy
                        && subTree.NestedSetLeft > procCategory.NestedSetLeft
                        && subTree.NestedSetRight < procCategory.NestedSetRight
                        && subTree.IsVendorsInherited == true
                notexists join pathToThis
                    where pathToThis.CategoryHierarchy == procCategory.CategoryHierarchy
                        && pathToThis.NestedSetLeft < subTree.NestedSetLeft
                        && pathToThis.NestedSetRight > subTree.NestedSetRight
                        && pathToThis.NestedSetLeft > procCategory.NestedSetLeft
                        && pathToThis.NestedSetRight < procCategory.NestedSetRight
                        && pathToThis.IsVendorsInherited == false
        {
            childVendCategory = VendCategory::findOrCreateVendorCategory(vendCategory.VendorAccount,
                                                                             subTree.CategoryId,
                                                                             vendCategory.VendorDataArea,
                                                                             true);

            VendProcurementCategoryStatus::findOrCreateVendorCategoryStatus(childVendCategory.RecId,
                                                                                VendCategoryStatus::Standard, false);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInheritanceAtCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>VendProcurementCategoryStatus</c> records by using the inheritance that is added at
    /// the specified category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void addInheritanceAtCategory(EcoResCategory _ecoResCategory)
    {
        VendProcurementCategoryStatus   vendProcurementCategoryStatus;
        VendCategory                    vendCategory, childVendCategory;
        ProcCategoryExpanded            subTree, pathToThis;
        EcoResCategory                  ecoResCategory       = EcoResCategory::find(_ecoResCategory.RecId);
        EcoResCategory                  ecoResParentCategory = EcoResCategory::find(ecoResCategory.ParentCategory);

        ttsbegin;

        while select VendorAccount, VendorDataArea from vendCategory
            where vendCategory.Category == ecoResParentCategory.RecId
            join VendorCategoryStatus from vendProcurementCategoryStatus
                where vendProcurementCategoryStatus.VendorCategory == vendCategory.RecId
            join CategoryId from subTree
            where subTree.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                && subTree.NestedSetLeft >= ecoResCategory.NestedSetLeft
                && subTree.NestedSetRight <= ecoResCategory.NestedSetRight
            notexists join pathToThis
                where pathToThis.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && pathToThis.NestedSetLeft <= subTree.NestedSetLeft
                    && pathToThis.NestedSetRight >= subTree.NestedSetRight
                    && pathToThis.NestedSetLeft >= ecoResCategory.NestedSetLeft
                    && pathToThis.NestedSetRight <= ecoResCategory.NestedSetRight
                    && pathToThis.IsVendorsInherited == false
        {
            childVendCategory = VendCategory::findOrCreateVendorCategory(vendCategory.VendorAccount,
                                                                         subTree.CategoryId,
                                                                         vendCategory.VendorDataArea,
                                                                         true);

            VendProcurementCategoryStatus::findOrCreateVendorCategoryStatus(childVendCategory.RecId,
                                                                            vendProcurementCategoryStatus.VendorCategoryStatus);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakInheritanceAtCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>VendProcurementCategoryStatus</c> records, which have a vendor that belongs to the
    /// parent category of specified category and whose category field belongs to its subtree.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The <c>EcoResCategory</c> record that is used as a filter.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void breakInheritanceAtCategory(EcoResCategory _ecoResCategory)
    {
        VendProcurementCategoryStatus   vendProcurementCategoryStatus;
        VendCategory                    vendCategory, parentVendorCategory;
        ProcCategoryExpanded            subTree, pathToThis;
        EcoResCategory                  ecoResCategory       = EcoResCategory::find(_ecoResCategory.RecId);
        EcoResCategory                  ecoResParentCategory = EcoResCategory::find(ecoResCategory.ParentCategory);
        date                            asOfDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;

        while select forupdate validtimestate(asOfDate) vendProcurementCategoryStatus
            join * from vendCategory
                where vendCategory.RecId == vendProcurementCategoryStatus.VendorCategory
            join VendorAccount, VendorDataArea from parentVendorCategory
                where parentVendorCategory.Category         == ecoResParentCategory.RecId
                    && parentVendorCategory.VendorAccount   == vendCategory.VendorAccount
                    && parentVendorCategory.VendorDataArea  == vendCategory.VendorDataArea
            join Name, CategoryId from subTree
                where subTree.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && subTree.NestedSetLeft >= ecoResCategory.NestedSetLeft
                    && subTree.NestedSetRight <= ecoResCategory.NestedSetRight
                    && subTree.CategoryId == vendCategory.Category
                    notexists join pathToThis
                        where pathToThis.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                            && pathToThis.NestedSetLeft    <= subTree.NestedSetLeft
                            && pathToThis.NestedSetRight   >= subTree.NestedSetRight
                            && pathToThis.NestedSetLeft    >= ecoResCategory.NestedSetLeft
                            && pathToThis.NestedSetRight   <= ecoResCategory.NestedSetRight
                            && pathToThis.IsVendorsInherited == false
        {
            if (vendProcurementCategoryStatus.ValidFrom >= asOfDate)
            {
                using (var skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::construct())
                {
                    vendProcurementCategoryStatus.delete();
                }
            }
            else
            {
                vendProcurementCategoryStatus.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                vendProcurementCategoryStatus.ValidTo = asOfDate - 1;

                using (var skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::construct())
                {
                    vendProcurementCategoryStatus.update();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeChildVendorCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the vendor category status for all the children that inherit from the specified category.
    /// </summary>
    /// <param name="_vendorCategory">
    /// The record ID of a <c>VendCategory</c> record.
    /// </param>
    /// <param name="_vendorCategoryStatus">
    /// The status value of vendor category.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void changeChildVendorCategoryStatus( recId _vendorCategory, VendCategoryStatus _vendorCategoryStatus)
    {
        VendProcurementCategoryStatus   vendProcurementCategoryStatus;
        VendCategory                    selectedVendCategoy, vendCategory;
        ProcCategoryExpanded            procCategory;
        ProcCategoryExpanded            subTree, pathToThis;
        EcoResCategory                  ecoResCategory;
        date                            asOfDate  = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;

        select firstonly * from selectedVendCategoy
            where selectedVendCategoy.RecId == _vendorCategory
            join IsVendorsInherited, ParentCategory from procCategory
                where procCategory.CategoryId == selectedVendCategoy.Category;

        if (procCategory.IsVendorsInherited &&
            VendCategory::exist(selectedVendCategoy.VendorAccount, procCategory.ParentCategory, selectedVendCategoy.VendorDataArea))
        {
            throw Global::error("@SYS326689");
        }

        select * from selectedVendCategoy
            where selectedVendCategoy.RecId == _vendorCategory;

        ecoResCategory = EcoResCategory::find(selectedVendCategoy.Category);

        while select forupdate validtimestate(asOfDate) vendProcurementCategoryStatus
            join RecId from vendCategory
                where vendProcurementCategoryStatus.VendorCategory == vendCategory.RecId
                    && vendCategory.VendorAccount == selectedVendCategoy.VendorAccount
                    && vendCategory.VendorDataArea == selectedVendCategoy.VendorDataArea
            join CategoryId from subTree
                where subTree.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && subTree.NestedSetLeft > ecoResCategory.NestedSetLeft
                    && subTree.NestedSetRight < ecoResCategory.NestedSetRight
                    && subTree.IsVendorsInherited ==  true
                    && subTree.CategoryId == vendCategory.Category
            notexists join pathToThis
                where pathToThis.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && pathToThis.NestedSetLeft  < subTree.NestedSetLeft
                    && pathToThis.NestedSetRight > subTree.NestedSetRight
                    && pathToThis.NestedSetLeft  > ecoResCategory.NestedSetLeft
                    && pathToThis.NestedSetRight < ecoResCategory.NestedSetRight
                    && pathToThis.IsVendorsInherited == false
        {
            VendProcurementCategoryStatus::findOrCreateVendorCategoryStatus(vendCategory.RecId,
                                                                            _vendorCategoryStatus);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteChildVendorCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes or expires all the valid <c>VendProcurementCategoryStatus</c> records by using the
    /// inheritance that is specified at each child category.
    /// </summary>
    /// <param name="_vendProcurementCategoryStatus">
    /// The <c>VendProcurementCategoryStatus</c> record that is used as a filter.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void deleteChildVendorCategoryStatus(VendProcurementCategoryStatus _vendProcurementCategoryStatus)
    {
        VendProcurementCategoryStatus   vendProcurementCategoryStatus;
        VendCategory                    selectedVendCategoy, vendCategory;
        ProcCategoryExpanded            subTree, pathToThis;
        EcoResCategory                  ecoResCategory;
        date                            asOfDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        ttsbegin;

        select * from selectedVendCategoy
            where selectedVendCategoy.RecId == _vendProcurementCategoryStatus.VendorCategory;

        ecoResCategory = EcoResCategory::find(selectedVendCategoy.Category);

        while select forupdate validtimestate(asOfDate) vendProcurementCategoryStatus
            join RecId from vendCategory
                where vendProcurementCategoryStatus.VendorCategory == vendCategory.RecId
                    && vendCategory.VendorAccount   == selectedVendCategoy.VendorAccount
                    && vendCategory.VendorDataArea  == selectedVendCategoy.VendorDataArea
            join CategoryId from subTree
                where subTree.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && subTree.NestedSetLeft > ecoResCategory.NestedSetLeft
                    && subTree.NestedSetRight < ecoResCategory.NestedSetRight
                    && subTree.IsVendorsInherited ==  true
                    && subTree.CategoryId == vendCategory.Category
            notexists join pathToThis
                where pathToThis.CategoryHierarchy == ecoResCategory.CategoryHierarchy
                    && pathToThis.NestedSetLeft  < subTree.NestedSetLeft
                    && pathToThis.NestedSetRight > subTree.NestedSetRight
                    && pathToThis.NestedSetLeft  > ecoResCategory.NestedSetLeft
                    && pathToThis.NestedSetRight < ecoResCategory.NestedSetRight
                    && pathToThis.IsVendorsInherited == false
        {
            if (vendProcurementCategoryStatus.ValidFrom >= asOfDate)
            {
                using (var skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::construct())
                {
                    vendProcurementCategoryStatus.delete();
                }                
            }
            else
            {
                vendProcurementCategoryStatus.validTimeStateUpdateMode(ValidTimeStateUpdate::Correction);
                vendProcurementCategoryStatus.ValidTo = asOfDate - 1;
                vendProcurementCategoryStatus.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record is in the <c>VendProcurementCategoryStatus</c> table for
    /// the specified operating unit, vendor category record ID, and valid from date.
    /// </summary>
    /// <param name="_operatingUnit">
    /// The record ID of an <c>OMOperatingUnit</c> record.
    /// </param>
    /// <param name="_vendCategory">
    /// The record ID of a <c>VendCategory</c> record.
    /// </param>
    /// <param name="_validFrom">
    /// The valid from date in the <c>VendCategoryTemp</c> table that is associated with the
    /// <c>VendCategoryTemp</c> record.
    /// </param>
    /// <returns>
    /// true if the record in the <c>VendProcurementCategoryStatus</c> table exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _operatingUnit,VendCategoryRef _vendCategory,validFromDate _validFrom)
    {
        return (select firstonly RecId from vendProcurementCategoryStatus
                where vendProcurementCategoryStatus.OperatingUnit == _operatingUnit
                    && vendProcurementCategoryStatus.VendorCategory == _vendCategory
                    && vendProcurementCategoryStatus.ValidFrom == _validFrom).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateVendorCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the valid specified record as of the specified date in the
    /// <c>VendProcurementCategoryStatus</c> table.
    /// </summary>
    /// <param name="_vendorCategory">
    /// The record ID of the <c>VendCategory</c> record to find.
    /// </param>
    /// <param name="_vendorCategoryStatus">
    /// The vendor category status value, which can be preferred or standard.
    /// </param>
    /// <param name="_addVendortoChildren">
    /// A Boolean value that indicates whether the specified vendor will be added to all the descendants.
    /// </param>
    /// <returns>
    /// A record in the <c>VendProcurementCategoryStatus</c> table if found; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendProcurementCategoryStatus findOrCreateVendorCategoryStatus( RecId              _vendorCategory,
                                                                                  VendCategoryStatus _vendorCategoryStatus,
                                                                                  boolean            _addVendortoChildren = true)
    {
        VendProcurementCategoryStatus vendProcurementCategoryStatus;

        ttsbegin;
        if (_vendorCategory)
        {
            vendProcurementCategoryStatus = VendProcurementCategoryStatus::findVendorCategoryAsOfDate(_vendorCategory, DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), true);

            if (vendProcurementCategoryStatus.RecId == 0)
            {
                vendProcurementCategoryStatus.clear();
                vendProcurementCategoryStatus.initValue();
                vendProcurementCategoryStatus.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
                vendProcurementCategoryStatus.VendorCategory       = _vendorCategory;
                vendProcurementCategoryStatus.VendorCategoryStatus = _vendorCategoryStatus;
                vendProcurementCategoryStatus.ValidFrom            = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
                vendProcurementCategoryStatus.ValidTo              = maxDate();

                if (vendProcurementCategoryStatus.validateWrite())
                {
                    using (var skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::construct())
                    {
                        vendProcurementCategoryStatus.insert();
                    }
                }
            }
            else if (vendProcurementCategoryStatus.VendorCategoryStatus != _vendorCategoryStatus)
            {
                vendProcurementCategoryStatus.VendorCategoryStatus = _vendorCategoryStatus;
                vendProcurementCategoryStatus.validTimeStateUpdateMode(ValidTimeStateUpdate::CreateNewTimePeriod);
                if (vendProcurementCategoryStatus.validateWrite())
                {                    
                    using (var skipBusinessLogicContext = VendProcurementCategoryStatusSkipBusinessLogicContext::construct())
                    {
                        vendProcurementCategoryStatus.update();
                    }                    
                }
            }

            if (vendProcurementCategoryStatus.RecId && _addVendortoChildren)
            {
                VendProcurementCategoryStatus::addChildVendorCategoryStatus(vendProcurementCategoryStatus);
            }
        }
        ttscommit;

        return vendProcurementCategoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVendorCategoryAsOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the valid specified record as of the specified date in the
    /// <c>VendProcurementCategoryStatus</c> table.
    /// </summary>
    /// <param name="_vendorCategory">
    /// The record ID of the <c>VendCategory</c> record to find.
    /// </param>
    /// <param name="_asOfDate">
    /// The date for which to find the specified record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendProcurementCategoryStatus</c> table; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendProcurementCategoryStatus findVendorCategoryAsOfDate( RecId   _vendorCategory,
                                                                            date    _asOfDate  = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                                                            boolean _forUpdate = false )
    {
        VendProcurementCategoryStatus vendProcurementCategoryStatus;

        if (_vendorCategory)
        {
            vendProcurementCategoryStatus.selectForUpdate(_forUpdate);

            select firstonly validTimeState(_asOfDate) vendProcurementCategoryStatus
                where vendProcurementCategoryStatus.VendorCategory == _vendorCategory;
        }

        return vendProcurementCategoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>VendProcurementCategoryStatus</c> table.
    /// </summary>
    /// <param name="_vendProcurecategoryStatusRecId">
    /// The <c>vendProcurementCategoryStatus</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>VendProcurementCategoryStatus</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static VendProcurementCategoryStatus findVersion(recId       _vendProcurecategoryStatusRecId,
                                                            boolean     _forUpdate = false)
    {
        VendProcurementCategoryStatus vendProcurementCategoryStatus = null;
        date dtMin = dateNull();
        date dtMax = maxDate();

        if (_vendProcurecategoryStatusRecId)
        {
            vendProcurementCategoryStatus.selectForUpdate(_forUpdate);
            select ValidTimeState(dtMin, dtMax) vendProcurementCategoryStatus
                where vendProcurementCategoryStatus.RecId    == _vendProcurecategoryStatusRecId;
        }

        return vendProcurementCategoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a record was not found error message.
    /// </summary>
    /// <returns>
    /// A <c>TxtNotExist</c> value that has an error message that states a record was not found.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str txtNotExist()
    {
        return "@SYS327993";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS322334</DeveloperDocumentation>
	<FormRef>Proccategoryaddvendor</FormRef>
	<Label>@SYS130803</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>VendorCategory</TitleField1>
	<TitleField2>OperatingUnit</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>ValidTimeStateKeyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<ValidTimeStateFieldType>Date</ValidTimeStateFieldType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperatingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorCategoryStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorCategoryStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperatingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Category</Name>
			<Label>@SYS136906</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendorCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OperatingUnit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendorCategoryStatus</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ValidPeriod</Name>
			<Label>@SYS29148</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OperatingUnit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ValidToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendorCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendCategoryRef</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VendorCategoryStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>VendCategoryStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendCategoryIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ValidTimeStateKeyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<ValidTimeStateKey>Yes</ValidTimeStateKey>
			<ValidTimeStateMode>Gap</ValidTimeStateMode>
			<Fields>
				<AxTableIndexField>
					<DataField>VendorCategoryStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>OperatingUnit</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidFrom</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ValidTo</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendorCategory</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnit</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>OMOperatingUnit</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>VendProcurementCategoryStatus</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OperatingUnit</Name>
					<Field>OperatingUnit</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendCategory</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>VendProcurementCategoryStatus</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendorCategory</Name>
					<Field>VendorCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>