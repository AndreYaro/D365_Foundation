<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConv</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventStdCostConv extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAddItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether items may be added to the conversion.
    /// </summary>
    /// <returns>
    /// true if items may be added; otherwise, false.
    /// </returns>
    public boolean allowAddItems()
    {
        return this.RecId && this.Status == InventStdCostConvStatus::Planned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCheckConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a conversion may be checked.
    /// </summary>
    /// <returns>
    ///    true if conversion may be checked; otherwise, false.
    /// </returns>
    public boolean allowCheckConversion()
    {
        return this.RecId && this.Status != InventStdCostConvStatus::Completed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCompletedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the status of a conversion may be changed to Completed.
    /// </summary>
    /// <returns>
    ///    true if the conversion status may be changed; otherwise, false.
    /// </returns>
    public boolean allowCompletedConversion()
    {
        return this.RecId && this.Status == InventStdCostConvStatus::InProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether additional conversions may be created.
    /// </summary>
    /// <returns>
    ///    true if additional conversions may be created; otherwise, false.
    /// </returns>
    public boolean allowCreate()
    {
        return !this.notCompletedConversionExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowDeleteItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether items may be deleted from the conversion.
    /// </summary>
    /// <returns>
    /// true if items may be deleted; otherwise, false.
    /// </returns>
    public boolean allowDeleteItems()
    {
        return this.Status == InventStdCostConvStatus::Planned || this.Status == InventStdCostConvStatus::InProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a conversion may be edited.
    /// </summary>
    /// <returns>
    ///    true if the conversion may be edited; otherwise, false.
    /// </returns>
    public boolean allowEdit()
    {
        return this.Status == InventStdCostConvStatus::Planned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowInProgressConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the status of a conversion may be converted to InProgress.
    /// </summary>
    /// <returns>
    ///    true if the conversion status may be changed; otherwise, false.
    /// </returns>
    public boolean allowInProgressConversion()
    {
        return this.RecId && this.Status == InventStdCostConvStatus::Ready;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowReadyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the status of a conversion may be changed to Ready.
    /// </summary>
    /// <returns>
    ///    true if the conversion status may be changed; otherwise, false.
    /// </returns>
    public boolean allowReadyConversion()
    {
        return this.RecId && this.Status == InventStdCostConvStatus::Planned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUndoInProgressConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a state change for a conversion to InProgress may be undone.
    /// </summary>
    /// <returns>
    ///    true if the conversion status change may be undone; otherwise, false.
    /// </returns>
    public boolean allowUndoInProgressConversion()
    {
        return this.RecId && this.Status == InventStdCostConvStatus::InProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowUndoReadyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a state change for a conversion to Ready may be undone.
    /// </summary>
    /// <returns>
    ///    true if the conversion status change may be undone; otherwise, false.
    /// </returns>
    public boolean allowUndoReadyConversion()
    {
        return this.RecId && this.Status == InventStdCostConvStatus::Ready;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCheckConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the Check action should be enabled.
    /// </summary>
    /// <returns>
    /// true if the Check action should be enabled; otherwise, false.
    /// </returns>
    public boolean enableCheckConversion()
    {
        return this.allowCheckConversion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableConvert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether a conversion can be made.
    /// </summary>
    /// <returns>
    ///    true if the conversion is ready or in progress; otherwise false.
    /// </returns>
    public boolean enableConvert()
    {
        return this.RecId && (this.Status == InventStdCostConvStatus::Ready || this.Status == InventStdCostConvStatus::InProgress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableItemTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether items may be transferred into a conversion.
    /// </summary>
    /// <returns>
    ///    true if items may be transferred; otherwise, false.
    /// </returns>
    public boolean enableItemTransfer()
    {
        return this.allowAddItems();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableReadyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the Ready update action should be enabled.
    /// </summary>
    /// <returns>
    /// true if the Ready update action should be enabled; otherwise, false.
    /// </returns>
    public boolean enableReadyConversion()
    {
        return this.allowReadyConversion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUndoConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the Undo update action should be enabled.
    /// </summary>
    /// <returns>
    ///    true if the Undo update action should be enabled; otherwise, false.
    /// </returns>
    public boolean enableUndoConversion()
    {
        return this.enableUndoReadyConversion() || this.enableUndoInProgressConversion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUndoInProgressConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the Undo InProgress update action should be enabled.
    /// </summary>
    /// <returns>
    /// true if the Undo InProgress update action should be enabled; otherwise, false.
    /// </returns>
    public boolean enableUndoInProgressConversion()
    {
        return this.allowUndoInProgressConversion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUndoReadyConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether the Undo Ready update action should be enabled.
    /// </summary>
    /// <returns>
    /// true if the Undo Ready update action should be enabled; otherwise, false.
    /// </returns>
    public boolean enableUndoReadyConversion()
    {
        return this.allowUndoReadyConversion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.Status = InventStdCostConvStatus::Planned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(InventStdCostConv, TransitionStartDate):
                if (!this.TransitionEndDate || this.TransitionStartDate >= this.TransitionEndDate)
                {
                    this.TransitionEndDate = this.TransitionStartDate + 1;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>notCompletedConversionExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether any conversions exist with a status that is not equal to Completed.
    /// </summary>
    /// <returns>
    ///    true if a conversion exists with a status not equal to Completed; otherwise false.
    /// </returns>
    public boolean notCompletedConversionExists()
    {
        return (select firstonly RecId from inventStdCostConv
                where inventStdCostConv.Status  != InventStdCostConvStatus::Completed).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (this.Status != InventStdCostConvStatus::Planned)
        {
            ret = checkFailed("@SYS119320");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        InventStdCostConv   inventStdCostConv;
        TransDate           closingDate;
        boolean             ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(InventStdCostConv, TransitionStartDate):

                // <GEERU>
                closingDate = InventClosing::closingDate(false, this.InventTransCurrency_RU);
                // </GEERU>

                if (closingDate && this.TransitionStartDate <= closingDate)
                {
                    ret = checkFailed(strfmt("@SYS119321", date2StrUsr(closingDate, DateFlags::FormatAll)));
                }

                select maxof(TransitionEndDate) from inventStdCostConv

                    // <GEERU>
                    where inventStdCostConv.RecId                  != this.RecId &&
                          inventStdCostConv.InventTransCurrency_RU == this.InventTransCurrency_RU;
                    // </GEERU>

                if (inventStdCostConv.TransitionEndDate && inventStdCostConv.TransitionEndDate > this.TransitionStartDate)
                {
                    ret = checkFailed(strfmt("@SYS119322", date2StrUsr(inventStdCostConv.TransitionEndDate, DateFlags::FormatAll)));
                }

                break;

            case fieldnum(InventStdCostConv, TransitionEndDate):
                if (this.TransitionStartDate && this.TransitionStartDate >= this.TransitionEndDate)
                {
                    ret = checkFailed("@SYS119323");
                }

                if (this.orig().TransitionEndDate && this.TransitionEndDate < this.orig().TransitionEndDate)
                {
                    if (!this.validateTransitionEndDateChange())
                    {
                        ret = checkFailed("@SYS119324");
                    }
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTransitionEndDateChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether transactions are posted on items in the conversion list after the date stated in the
    ///    <c>TransitionEndDate</c> field.
    /// </summary>
    /// <returns>
    ///    true if transactions do not exist for any of the items in the conversion list; otherwise false.
    /// </returns>
    public boolean validateTransitionEndDateChange()
    {
        InventStdCostConvItem   inventStdCostConvItem;
        boolean                 ret = true;

        while select inventStdCostConvItem
            where inventStdCostConvItem.StdCostConvRecId == this.RecId
        {
            setPrefix(strFmt("@SYS14077",inventStdCostConvItem.ItemId));

            if (!inventStdCostConvItem.validateAfterConversionTransactions(this))
            {
                ret = false;
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!this.RecId && this.notCompletedConversionExists())
        {
            ret = checkFailed("@SYS119315");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkItemPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that if an item is part of an uncompleted standard cost conversion, then an item
    ///    transaction is posted on a date prior to the conversion date.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item that should be validated.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date that should be validated for the item.
    /// </param>
    /// <param name="_inventTransCurrency">
    ///    The inventory accounting currency - primary or secondary - that should be validated for the item.
    /// </param>
    /// <returns>
    ///    true if the item is either not part of an uncompleted standard cost conversion, or if the date is
    ///    prior to the conversion date for an uncompleted standard cost conversion; otherwise false.
    /// </returns>
    static boolean checkItemPostingDate(ItemId _itemId, TransDate _transDate,
                                               InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostConv   inventStdCostConv;
        boolean ret = true;

        // <GEERU>
        inventStdCostConv = InventStdCostConv::firstNotCompletedConversion(_inventTransCurrency);
        // </GEERU>
        if (inventStdCostConv.RecId && _transDate >= inventStdCostConv.TransitionEndDate)
        {
            if (InventStdCostConvItem::exist(inventStdCostConv.RecId, _itemId))
            {
                ret = checkFailed(strfmt("@SYS120626", _itemId, date2StrUsr(inventStdCostConv.TransitionEndDate, DateFlags::FormatAll), date2StrUsr(_transDate, DateFlags::FormatAll)));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static public boolean exist(RecId _recId)
    {
        return _recId && (select RecId from inventStdCostConv
                    where inventStdCostConv.RecId == _recId
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventStdCostConv</c> table by using the specified
    /// <c>RecId</c> value.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>InventStdCostConv</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventStdCostConv</c> table; otherwise, an empty record.
    /// </returns>
    static public InventStdCostConv find(RecId _recId, boolean _forupdate = false)
    {
        InventStdCostConv   inventStdCostConv;

        if (_forupdate)
        {
            inventStdCostConv.selectForUpdate(_forupdate);
        }

        select firstonly inventStdCostConv
            where inventStdCostConv.RecId   == _recId;

        return inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds a record in the <c>InventStdCostConv</c> table with a particular value for the
    ///    <c>CostingVersionId</c> field.
    /// </summary>
    /// <param name="_costingVersionId">
    ///    The value of the <c>VersionId</c> field from the related <c>CostingVersion</c> table record.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConv</c> table buffer.
    /// </returns>
    static public InventStdCostConv findCostingVersion(CostingVersionId _costingVersionId)
    {
        InventStdCostConv   inventStdCostConv;

        select firstonly inventStdCostConv
            where inventStdCostConv.CostingVersionId == _costingVersionId;

        return inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransitionEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Attempts to find a record in the <c>InventStdCostConv</c> table with a particular
    ///    <c>TransitionEndDate</c> value.
    /// </summary>
    /// <param name="_transitionEndDate">
    ///    <c>TransitionEndDate</c> of the related <c>InventStdCostConv</c> table record.
    /// </param>
    /// <param name="_inventTransCurrency">
    ///    The inventory accounting currency - primary or secondary.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConv</c> table buffer.
    /// </returns>
    static public InventStdCostConv findTransitionEndDate(InventStdCostConvEndDate _transitionEndDate,
                                                          InventTransCurrency_RU   _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostConv   inventStdCostConv;

        select firstonly inventStdCostConv
            // <GEERU>
            where inventStdCostConv.TransitionEndDate      == _transitionEndDate &&
                  inventStdCostConv.InventTransCurrency_RU == _inventTransCurrency;
            // </GEERU>

        return inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstNotCompletedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the first uncompleted conversion.
    /// </summary>
    /// <param name="_inventTransCurrency">
    ///    The inventory accounting currency - primary or secondary.
    /// </param>
    /// <returns>
    ///    An <c>InventStdCostConv</c> record buffer for the first uncompleted conversion. If none is found,
    ///    then an empty buffer is returned.
    /// </returns>
    static public InventStdCostConv firstNotCompletedConversion(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostConv   inventStdCostConv;

        select firstonly inventStdCostConv
            order by TransitionStartDate asc
            // <GEERU>
            where inventStdCostConv.Status                 != InventStdCostConvStatus::Completed &&
                  inventStdCostConv.InventTransCurrency_RU == _inventTransCurrency;
            // </GEERU>

        return inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastNotPlannedConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last not planned conversion.
    /// </summary>
    /// <param name="_inventTransCurrency">
    ///    Determines conversion in which currency should be found(dual warehouse), by default in primary currency; optional.
    /// </param>
    /// <returns>
    /// An <c>InventStdCostConv</c> record buffer for the last not planned conversion. If the record buffer
    /// for the last not planned conversion is not found, an empty buffer is returned.
    /// </returns>
    static public InventStdCostConv lastNotPlannedConversion(InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostConv   inventStdCostConv;

        select firstonly inventStdCostConv
            order by TransitionStartDate desc
            // <GEERU>
            where inventStdCostConv.Status                 != InventStdCostConvStatus::Planned &&
                  inventStdCostConv.InventTransCurrency_RU == _inventTransCurrency;
            // </GEERU>

        return inventStdCostConv;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckItemPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether an uncompleted standard cost conversion exists and whether the transaction date
    /// is before the conversion date on an uncompleted standard cost conversion.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date that should be validated.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// Type of currency that should be validated (dual warehouse), by default primary currency; optional.
    /// </param>
    /// <returns>
    /// true if an uncompleted standard cost conversion exists and the date is after or on the conversion
    /// date; otherwise false.
    /// </returns>
    static boolean mustCheckItemPostingDate(TransDate _transDate, InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventStdCostConv   inventStdCostConv;
        boolean ret = false;

        // <GEERU>
        inventStdCostConv = InventStdCostConv::firstNotCompletedConversion(_inventTransCurrency);
        // </GEERU>
        if (inventStdCostConv.RecId && _transDate >= inventStdCostConv.TransitionEndDate)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123786</DeveloperDocumentation>
	<FormRef>inventstdCostConv</FormRef>
	<Label>@SYS119316</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>TransitionEndDate</TitleField1>
	<TitleField2>Status</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>TransitionEndDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Single</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PriceVersionIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventStdCostConvItem</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>InventStdCostConvItem</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransitionEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Conversion</Name>
			<Label>@SYS119311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransitionStartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransitionEndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostingVersion</Name>
			<Label>@SYS119319</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostingVersionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventModelGroup</Name>
			<Label>@SYS53818</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultModelGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CostingVersionId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CostingVersionId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultModelGroupId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventModelGroupId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Label>@SYS119317</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventTransCurrency_RU</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>InventTransCurrency_RU</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<EnumType>InventStdCostConvStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransitionEndDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventStdCostConvEndDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransitionStartDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventStdCostConvStartDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransitionEndDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransitionEndDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransitionStartDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransitionStartDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransCurrency_RU</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PriceVersionIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CostingVersionId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CostingVersion</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CostingVersion</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CostingVersionId</Name>
					<Field>CostingVersionId</Field>
					<RelatedField>VersionId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>VersionIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventModelGroup_StandardCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123787</EntityRelationshipRole>
			<RelatedTable>InventModelGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>InventModel_Extern</Name>
					<RelatedField>InventModel</RelatedField>
					<ValueStr>InventModel::StdCost</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultModelGroupId</Name>
					<Field>DefaultModelGroupId</Field>
					<RelatedField>ModelGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>