<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjInvoiceJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an amount of money in default currency to an equivalent amount in the currency used on this invoice journal.
    /// </summary>
    /// <param name="_amountMST">
    ///    The amount to be converted.
    /// </param>
    /// <returns>
    ///    The amount in the currency used on the invoice journal.
    /// </returns>
    AmountCur amountCur(AmountMST _amountMST)
    {
        return CurrencyExchangeHelper::curAmount(_amountMST, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur2Euro</Name>
				<Source><![CDATA[
    AmountCur amountCur2Euro(AmountCur _amountCur)
    {
        CurrencyCode euroCurrency = Currency::findEuroCurrencyCode();
        AmountCur euroAmount;
        LedgerRecId ledgerRecId = Ledger::primaryLedger(CompanyInfo::current());
        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            ledgerRecId,
            this.InvoiceDate);

        if (euroCurrency)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                ledgerRecId,
                this.InvoiceDate);

            currencyExchangeHelper.parmExchangeRate1(this.ExchRate);
            currencyExchangeHelper.parmExchangeRate2(this.ExchrateSecondary);

            euroAmount = currencyExchangeHelper.calculateTransactionToTransaction(
                ledgerRecId,
                this.CurrencyId,
                euroCurrency,
                _amountCur,
                0,
                true);
        }

        return euroAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an amount that is in currency used on the invoice journal to its equivalent amount in the default currency.
    /// </summary>
    /// <param name="_amountCur">
    ///    The amount of money on the invoice journal in its currency.
    /// </param>
    /// <returns>
    ///    An <c>AmountMST</c> data type representing the amount of money in the default currency.
    /// </returns>
    public AmountMST amountMST(AmountCur _amountCur)
    {
        return CurrencyExchangeHelper::mstAmount(_amountCur, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2Euro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts an amount in the default currency to its equivalent amount in the Euro currency.
    /// </summary>
    /// <param name="_amountMST">
    ///    The amount in the default currency to be converted.
    /// </param>
    /// <returns>
    ///    The converted amount in Euros.
    /// </returns>
    AmountCur amountMST2Euro(AmountMST _amountMST)
    {
        CurrencyCode euroCurrency = Currency::findEuroCurrencyCode();
        CurrencyExchangeHelper currencyExchangeHelper;
        AmountCur euroAmount;

        if (euroCurrency)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::current()),
                this.InvoiceDate);

            euroAmount = currencyExchangeHelper.calculateAccountingToTransaction(euroCurrency, _amountMST, true);
        }

        return euroAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountOutstanding</Name>
				<Source><![CDATA[
    public display AmountCur amountOutstanding()
    {
        return this.InvoiceAmount - this.amountSettled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountSettled</Name>
				<Source><![CDATA[
    public display AmountCur amountSettled()
    {
        CustTrans   custTrans;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            select sum(SettleAmountCur) from custTrans
            where custTrans.Voucher == this.LedgerVoucher
                && custTrans.AccountNum == this.InvoiceAccount
                && custTrans.TransDate == this.InvoiceDate;
        }

        return custTrans.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the date when the cash discount is to be applied and sets the <c>CashDiscDate</c> field
    /// with this value.
    /// </summary>
    /// <remarks>
    /// The cash discount date is calculated based on the cash discount code, invoice date, or invoice
    /// creation date specified for this invoice journal. The cash discount date is calculated by calling
    /// the <c>CustVendInvoiceJour.CalcCashDiscDate </c> method.
    /// </remarks>
    public void calcCashDiscDate()
    {
        this.CustVendInvoiceJour::calcCashDiscDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the due date for payment of an invoice journal.
    /// </summary>
    /// <remarks>
    /// The <c>DueDate</c> field is set with this value. The <c>CustVendInvoiceJour.CalcDue</c> method is
    /// used to determine the due date based on the payment term, invoice date, or creation date for an
    /// invoice proposal document.
    /// </remarks>
    public void calcDue()
    {
        this.CustVendInvoiceJour::calcDue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDueDateLimit_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the <c>PaymDueDateLimit_ES</c> record that fits the criteria.
    /// </summary>
    /// <param name="_paymTerm">
    /// The <c>PaymTerm</c> record containing the selection criteria.
    /// </param>
    /// <param name="_transDate">
    /// The date to base the limit off of.
    /// </param>
    /// <returns>
    /// The <c>PaymDueDateLimit_ES</c> record that fits the criteria.
    /// </returns>
    public PaymDueDateLimit_ES calcDueDateLimit_ES(PaymTerm _paymTerm, TransDate _transDate)
    {
        return this.CustVendInvoiceJour::calcDueDateLimit_ES(_paymTerm, _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscTxt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a cash discount text built from the cash discount date and amount on an invoice journal.
    /// </summary>
    /// <returns>
    ///    A cash discount text.
    /// </returns>
    /// <remarks>
    ///    If the cash discount amount and date are not specified, an empty string is returned.
    /// </remarks>
    display cashDiscTxt cashDiscTxt()
    {
        if (this.CashDiscDate   && this.CashDisc)
        {
            return strFmt("@SYS24359", date2StrUsr(this.CashDiscDate, DateFlags::FormatAll), this.CashDisc, this.CurrencyId);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscTxtOnInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the appropriate cash discount text to build for an invoice journal based on the cash discount amount, cash discount date, taxes, or Value Added Tax (VAT).
    /// </summary>
    /// <returns>
    ///    A cash discount text.
    /// </returns>
    display CashDiscFreeTxt  cashDiscTxtOnInvoice()
    {
        return CashDisc::cashDiscTxt(this.CashDiscCode,
                                     this.InvoiceDate,
                                     CustParameters::find().CashDiscVAT,
                                     this.InvoiceAmount,
                                     this.InvoiceAmount - this.SumTax,
                                     this.CurrencyId,
                                     this.CashDiscDate,
                                     this.CashDisc,
                                     this.LanguageId,
                                     ModuleCustVend::Cust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the contribution amount of the invoice journal.
    /// </summary>
    /// <returns>
    ///    The contribution amount in the default currency.
    /// </returns>
    /// <remarks>
    ///    The contribution amount is calculated as the sales amount on the invoice minus the cost incurred on this invoice, minus the on-account amount for the customer. A zero contribution is returned for an
    ///    on-account type of invoice.
    /// </remarks>
    display AmountMST contributionAmountMST()
    {
        if (!this)
        {
            return 0;
        }

        return (this.revenueMST() - this.CostValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionMargin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the contribution margin of the invoice journal.
    /// </summary>
    /// <returns>
    ///    The contribution margin for the invoice journal.
    /// </returns>
    /// <remarks>
    ///    The contribution amount is calculated as the sales balance on the invoice minus the cost incurred on this invoice, minus the on-account amount for the customer. A zero contribution is returned for an
    ///    on-account type of invoice or if the exchange rate is not specified for the invoice.
    /// </remarks>
    display ProjContributionMargin contributionMargin()
    {
        if (this.ProjInvoiceType == ProjInvoiceType::OnAccount)
        {
            return 0;
        }

        if (this.ExchRate)
        {
            return (this.SalesOrderbalance - this.OnAccountAmount - this.amountCur(this.CostValue));
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionRatio</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the percentage of sales on an invoice journal.
    /// </summary>
    /// <returns>
    ///    The percentage ratio of the cost to sales for the invoice journal.
    /// </returns>
    /// <remarks>
    ///    A zero percent is returned for an on-account type of invoice. A zero percent is also returned if the exchange rate is not specified for the invoice, or if the on-account amount is larger than the
    ///    sales amount.
    /// </remarks>
    display ProjContributionRatio contributionRatio()
    {
        return ProjParameters::grossMarginPct(this.CostValue,this.revenueMST(),this.contributionAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>contributionRatioMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the percentage of sales on this invoice journal.
    /// </summary>
    /// <returns>
    ///    The percentage ratio of the cost to sales for this invoice journal.
    /// </returns>
    /// <remarks>
    ///    A zero percent is returned for an on-account type of invoice. A zero percent is also returned if the exchange rate is not specified for the invoice, or if the on-account amount is larger than the
    ///    sales amount.
    /// </remarks>
    display ProjContributionRatio contributionRatioMST()
    {
        if (!this)
        {
            return 0;
        }

        if (this.invoiceAmountMST())
        {
            return (this.contributionAmountMST() / this.invoiceAmountMST()) * 100;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that should be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>dimensionCopy</c> object previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this,
                                                                      this.companyInfo().RecId
                                                                      )
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionId</Name>
				<Source><![CDATA[
    display LogisticsAddressCountryRegionId countryRegionId()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    CustTrans custTrans()
    {
        CustTrans custTrans;
        
        this.CustVendInvoiceJour::custVendTrans(custTrans);
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a payment schedule based on an amount and the type of payment schedule set for the invoice journal.
    /// </summary>
    public void createPaymentSchedule()
    {
        this.CustVendInvoiceJour::createPaymentSched();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditCardBypassCreditLimit</Name>
				<Source><![CDATA[
    boolean creditCardBypassCreditLimit()
    {
        boolean ret;
        ret =  this.payment().CreditCardCreditCheck == CreditCardCreditCheck::ByPass;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryAddress</Name>
				<Source><![CDATA[
    display LogisticsAddressing deliveryAddress()
    {
        return LogisticsPostalAddress::findRecId(this.DeliveryPostalAddress).Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the exchange rate used on the invoice journal.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether to get or set the exchange rate.
    /// </param>
    /// <param name="_exchRate">
    ///    The exchange rate to set on the invoice journal.
    /// </param>
    /// <returns>
    ///    The exchange rate used on the invoice journal.
    /// </returns>
    public edit ExchRate editExchRate(boolean _set, ExchRate _exchRate)
    {
        ExchRate exchRate = _exchRate;
        ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            this.CurrencyId);

        if (_set)
        {
            this.ExchRate = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        }
        else
        {
            exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchRate);
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editExchRateSecondary</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets or gets the secondary exchange rate used on the invoice journal.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value to set or get the secondary exchange rate: true to set the secondary exchange rate and false to get it.
    /// </param>
    /// <param name="_exchRate">
    ///    The secondary exchange rate to set on the invoice journal.
    /// </param>
    /// <returns>
    ///    An <c>ExchrateSecondary</c> data type representing the secondary exchange rate used on the invoice journal.
    /// </returns>
    public edit ExchrateSecondary editExchRateSecondary(boolean _set, ExchrateSecondary _exchRate)
    {
        ExchrateSecondary exchRate = _exchRate;
        ExchangeRateHelper  exchangeRateHelper = ExchangeRateHelper::newCurrency(
            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
            this.CurrencyId);

        if (_set)
        {
            this.ExchrateSecondary = exchangeRateHelper.prepareExchangeRateForStorage(exchRate);
        }
        else
        {
            exchRate = exchangeRateHelper.displayStoredExchangeRate(this.ExchrateSecondary);
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code.
    /// </summary>
    /// <param name="_set">
    /// Set to true if the reason code is set; otherwise, set to false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="set" /> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return this.ReasonCodeMap::editReasonCode(_set, strLRTrim(_reasonCode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that indicates whether the reason code is set.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when the <paramref name="set" /> value is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return this.ReasonCodeMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscEuro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the amount in the <c>EndDisc</c> field of an invoice journal to its equivalent amount in
    /// the Euro currency.
    /// </summary>
    /// <returns>
    /// A <c>SalesEndDiscAmount</c> data type representing the end discount amount in the Euro currency.
    /// </returns>
    /// <remarks>
    /// The conversion is based on the currency used on the invoice, the invoice date, the exchange rate,
    /// and the secondary exchange rate.
    /// </remarks>
    display SalesEndDiscAmount endDiscEuro()
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(this.EndDisc, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary), euroCurrencyCode, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesTable</c> with the smallest sales id for the proposal.
    /// </summary>
    /// <returns>
    /// The <c>SalesTable</c> record.
    /// </returns>
    public SalesTable getSalesTable()
    {
        ProjProposalItem    projProposalItem;

        select minOf(SalesId) from projProposalItem
            where projProposalItem.ProposalId == this.ProposalId &&
                projProposalItem.SalesId;

        return SalesTable::find(projProposalItem.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFDIUUID_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unique identification of CDFI document
    /// </summary>
    /// <returns>
    /// The CFDI identification
    /// </returns>
    public EInvoiceCFDIUUID_MX getCFDIUUID_MX()
    {
        return EInvoiceJour_MX::findByRef(this.TableId, this.RecId).CFDIUUID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRFC_MX</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer RFC
    /// </summary>
    /// <returns>
    /// The RFC number
    /// </returns>
    public RFC_MX getRFC_MX()
    {
        return CustTable::find(this.InvoiceAccount).RFC_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the group ID for the customer on the invoice journal.
    /// </summary>
    /// <returns>
    /// A <c>CustVendGroupId</c> data type that represents the group ID for the customer on the invoice
    /// journal.
    /// </returns>
    /// <remarks>
    /// This method uses the value specified in the <c>InvoiceAccount</c> field as the customer account.
    /// </remarks>
    CustVendGroupId groupId()
    {
        return CustTable::find(this.InvoiceAccount).CustGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjProposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the fields of this invoice journal with the value of the corresponding fields in an invoice proposal journal.
    /// </summary>
    /// <param name="projProposalJour">
    ///    The invoice proposal journal used to initialize this invoice journal.
    /// </param>
    public void initFromProjProposal(ProjProposalJour projProposalJour)
    {
        // <GEEU>
        ReasonTableRef reasonTableRef;
        #ISOCountryRegionCodes
        // </GEEU>

        CustTable invoiceAccountCustTable = CustTable::find(projProposalJour.InvoiceAccount);
        
        this.ProjInvoiceProjId      = projProposalJour.ProjInvoiceProjId;
        this.ProposalId             = projProposalJour.ProposalId;
        
        this.ProjGroupId            = projProposalJour.ProjGroupId;
        this.OrderAccount           = projProposalJour.OrderAccount;
        this.InvoiceAccount         = projProposalJour.InvoiceAccount;
        this.vatNum                 = CustTable::find(this.OrderAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, projProposalJour.InvoiceDate);
        this.EnterpriseNumber       = CustTable::find(this.InvoiceAccount).getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, projProposalJour.InvoiceDate);
        this.NumberSequenceGroupId  = projProposalJour.NumberSequenceGroupId;
        
        this.DefaultDimension       = projProposalJour.DefaultDimension;
        this.LedgerDefaultDimension = projProposalJour.DefaultDimension;
        this.LanguageId             = projProposalJour.LanguageId;
        this.CurrencyId             = projProposalJour.CurrencyId;
        
        this.CashDiscCode           = projProposalJour.CashDiscCode;
        this.CashDiscDate           = projProposalJour.CashDiscDate;
        this.CashDisc               = projProposalJour.CashDisc;
        this.PostingProfile         = projProposalJour.PostingProfile;
        
        this.DueDate                = projProposalJour.DueDate;
        
        this.CostValue              = projProposalJour.CostValue;
        this.SumLineDisc            = projProposalJour.SumLineDisc;
        this.SalesOrderbalance      = projProposalJour.SalesOrderbalance;
        this.InvoiceAmount          = projProposalJour.InvoiceAmount;
        this.OnAccountAmount        = projProposalJour.OnAccountAmount;
        
        this.DeliveryName           = projProposalJour.DeliveryName;
        this.DeliveryPostalAddress  = projProposalJour.DeliveryPostalAddress;
        this.DlvTerm                = projProposalJour.DlvTerm;
        this.DlvMode                = projProposalJour.DlvMode;
        
        this.Payment                = projProposalJour.Payment;
        this.PaymDayId              = projProposalJour.PaymDayId ? projProposalJour.PaymDayId : PaymTerm::find(this.Payment).PaymDayId;
        this.InvoiceRoundOff        = projProposalJour.InvoiceRoundOff;
        
        this.TaxPrintOnInvoice      = projProposalJour.TaxPrintOnInvoice;
        this.TaxGroupId             = projProposalJour.TaxGroupId;
        this.TaxSpecifyTotal        = projProposalJour.TaxSpecifyTotal;
        this.TaxSpecifyByLine       = projProposalJour.TaxSpecifyByLine;
        this.SumTax                 = projProposalJour.SumTax;
        
        this.PaymentSched           = projProposalJour.PaymentSched;
        
        this.ProjInvoiceType        = projProposalJour.InvoiceType;
        
        this.IntrastatDispatchId    = projProposalJour.IntrastatDispatchId;
        this.ListCodeId             = projProposalJour.ListCodeId;
        this.Port                   = projProposalJour.Port;
        
        this.GiroType               = projProposalJour.GiroType;
        
        // <GEELV>
        this.IntrastatAddValue_LV = projProposalJour.IntrastatAddValue_LV;
        // </GEELV>
        
        if (CustTable::isCustPublic_NO(projProposalJour.InvoiceAccount))
        {
            this.EInvoiceAccountCode = projProposalJour.EInvoiceAccountCode;
            this.CustRef_NO = projProposalJour.CustRef_NO;
            this.CustPurchaseOrder_NO = projProposalJour.CustPurchaseOrder_NO;
            this.ContactPersonId_NO = projProposalJour.ContactPersonId_NO;
        }
        else if (CustTable::isCustDKPublic(projProposalJour.InvoiceAccount) == NoYes::Yes)
        {
            this.eInvoiceLineSpecific   = projProposalJour.eInvoiceLineSpecific;
            this.eInvoiceAccountCode    = projProposalJour.eInvoiceAccountCode;
        }
        
        this.InterCompanyPosted = projProposalJour.InterCompanyPosted;
        this.Description = projProposalJour.Description;
        this.psaInvoiceFormats = projProposalJour.psaInvoiceFormats;

        // <GEEU> <GBR>
        reasonTableRef = ReasonTableRef::find(projProposalJour.ReasonTableRef);
        this.ReasonTableRef = ReasonTableRef::createReasonTableRef(reasonTableRef.Reason, reasonTableRef.ReasonComment);
        // </GBR> </GEEU>
        
        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            this.TaxInformation_IN = projProposalJour.TaxInformation_IN;
        }
        // </GIN>
 
        if (ProjInvoicePaymentModeFlight::instance().isEnabled())
        {
            if (CustPaymModeTable::find(projProposalJour.PaymMode).IsSEPA
                && this.DirectDebitMandate == 0)
            {
                this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(invoiceAccountCustTable.AccountNum);
            }
        }
        else
        {
            if (CustPaymModeTable::find(invoiceAccountCustTable.PaymMode).IsSEPA
                && this.DirectDebitMandate == 0)
            {
                this.DirectDebitMandate = CustDirectDebitMandate::getDefaultMandate(invoiceAccountCustTable.AccountNum);
            }
        }
        
        // <GMY>
        if (TaxGSTFeatureChecker_MY::isCountryRegionMY())
        {
            this.InvoiceType_MY = projProposalJour.InvoiceType_MY;
            this.NoteType_MY    = projProposalJour.getNoteType_MY();
            this.ReasonTableRef = projProposalJour.ReasonTableRef;
        }
        // </GMY>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ProjInvoiceJour_TH  projInvoiceJourExtension = this.projInvoiceJourExtension_TH();
            ProjProposalJour_TH projProposalJourExtension = projProposalJour.projProposalJourExtension_TH();
            
            projInvoiceJourExtension.RefInvoiceId        = projProposalJourExtension.RefInvoiceId;
            projInvoiceJourExtension.RefInvoiceAmountCur = projProposalJourExtension.RefInvoiceAmountCur;
            projInvoiceJourExtension.NoteFormat          = projProposalJourExtension.NoteFormat;
            projInvoiceJourExtension.ReasonTableRef      = projProposalJourExtension.ReasonTableRef;
            projInvoiceJourExtension.TaxAgent            = projProposalJourExtension.TaxAgent;
            
            this.SysExtensionSerializerMap::packExtensionTable(projInvoiceJourExtension);
        }
        // </GTH>

        if (TaxIntegrationUtils::isMultipleTaxIdEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            this.VATNum = projProposalJour.VATNum;
            this.VATNumRecId = projProposalJour.VATNumRecId;
            this.VATNumTableType = projProposalJour.VATNumTableType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        //<GCN>
        projInvoiceJourExtensionCN projInvoiceJourExtensionCN;
        //</GCN>
        // <GIN>
        ProjProposalJour                    projProposalJour;
        TransitDocumentManager_IN           transitDocManager;
        TransitDocumentEWayBill_IN          formInward,
                                            formOutward,
                                            currentForm;
        List                                list;
        ListEnumerator                      listEnumerator;
        
        #ISOCountryRegionCodes
        boolean isINCountryRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        if (!this.ProjInvoiceId && !this.isProforma())
        {
            throw error(strFmt("@SYS26332", fieldId2PName(tableNum(ProjInvoiceJour), fieldNum(ProjInvoiceJour, ProjInvoiceId))));
        }

        ttsBegin;
        if (this.CashDiscCode && TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent = CashDisc::find(this.CashDiscCode).Percent;
        }

        super();

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();
        }
        //</GTH>
        //<GCN>
        if (CustParameters::isTaxIntegrationSystem_CN())
        {
            projInvoiceJourExtensionCN.insertFromProjProposalJour(ProjProposalJour::find(this.ProposalId).RecId, this.RecId);
        }
        //</GCN>
        
        // <GIN>
        if (isINCountryRegion
            && TransitDocumentTransactionRule_IN::existRuleByTransAndTransitDoc(
                                                    tableNum(ProjInvoiceJour), tableNum(TransitDocumentEWayBill_IN)))
        {
            transitDocManager = TransitDocumentManager_IN::newManager();
        
            select firstOnly projProposalJour
                    where projProposalJour.ProposalId == this.ProposalId;
        
            if (projProposalJour.RecId)
            {
                formInward.Direction    = TaxGSTEWayBillBasis_IN::Inward;
                formOutward.Direction   = TaxGSTEWayBillBasis_IN::Outward;
        
                // Add E-way bill
                list = transitDocManager.findTransitDocuments(projProposalJour, formInward);
                list.appendList(transitDocManager.findTransitDocuments(projProposalJour, formOutward));
                listEnumerator = list.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    currentForm = listEnumerator.current();
        
                    transitDocManager.addTransitDocument(this, currentForm);
                }
            }
        }
        // </GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            BaseDocument_IT::insertForProjInvoiceJour(this);
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceJourExtension_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the TH extension table.
    /// </summary>
    /// <returns>
    /// The instance of the extension table.
    /// </returns>
    public ProjInvoiceJour_TH projInvoiceJourExtension_TH()
    {
        return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjInvoiceJour_TH));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the amount on the invoice to its equivalent in the Euro currency.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> data type representing the amount on the invoice in Euros.
    /// </returns>
    display AmountCur invoiceAmountEuro()
    {
        CurrencyCode euroCurrencyCode;

        if (! this)
        {
            return 0;
        }

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(this.InvoiceAmount, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary), euroCurrencyCode, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the amount on an invoice journal in the default currency.
    /// </summary>
    /// <returns>
    ///    An <c>AmountMST</c> data type representing the amount on the invoice journal in the default currency.
    /// </returns>
    /// <remarks>
    ///    The conversion to the default currency is based on the amount in the SalesOrderBalance field.
    /// </remarks>
    display AmountMST invoiceAmountMST()
    {
        if (! this)
        {
            return 0;
        }

        return this.amountMST(this.SalesOrderbalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceReferenceNumberFI</Name>
				<Source><![CDATA[
    public display SalesInvoiceReferenceNumber_FI invoiceReferenceNumberFI()
    {
        SalesInvoiceReferenceNumber_FI refNumber;
        int refNumberLength;
        CustTrans custTrans;

        #define.Space(' ')

        select firstonly PaymReference from custTrans where custTrans.Invoice == this.ProjInvoiceId;
        refNumber = custTrans.PaymReference;
        refNumberLength = strLen(refNumber);

        // Add spaces for report formatting
        if (refNumberLength > 15)
        {
            return subStr(refNumber, 1, refNumberLength - 15) + #Space +
                subStr(refNumber, refNumberLength - 14, 5) + #Space +
                subStr(refNumber, refNumberLength - 9, 5) + #Space +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else if (refNumberLength > 10)
        {
            return subStr(refNumber, 1, refNumberLength - 10) + #Space +
                subStr(refNumber, refNumberLength - 9, 5) + #Space +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else if (refNumberLength > 5)
        {
            return subStr(refNumber, 1, refNumberLength - 5) + #Space +
                subStr(refNumber, refNumberLength - 4, 5);
        }
        else
        {
            return refNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRoundOffEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts the amount in the InvoiceRoundOff field to its equivalent in the Euros.
    /// </summary>
    /// <returns>
    ///    A <c>RoundOff</c> data type representing the round off amount in the Euro currency.
    /// </returns>
    display RoundOff invoiceRoundOffEuro()
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(this.InvoiceRoundOff, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary), euroCurrencyCode, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Check is this record a credit note document
    /// </summary>
    /// <returns>
    ///     True, if the document is the credit note
    /// </returns>
    public boolean isCreditNote_CZ()
    {
        return this.InvoiceAmount < 0 ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    public boolean isProforma()
    {
        return !this.ProjInvoiceId || this.IsProforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a dimension set that holds the merged combination of the current <c>defaultDimension</c>
    /// field on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set that should be merged with the current <c>defaultDimension</c> field on this
    /// table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that should be merged with the current <c>defaultDimension</c> field on this
    /// table; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object that was previously instantiated by using the current buffer;
    /// optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current <c>defaultDimension</c> field on
    /// this table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additional the entity specifier defaulting will be taken into consideration
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this,
                                                                        this.companyInfo().RecId
                                                                        )
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a numeric value that represents a project module in Microsoft Dynamics AX.
    /// </summary>
    /// <returns>
    ///    A numeric value that represents a project module in Microsoft Dynamics AX.
    /// </returns>
    SysModule module()
    {
        return SysModule::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmount</Name>
				<Source><![CDATA[
    display AmountCurNet netAmount()
    {
        return this.SalesOrderbalance - this.EndDisc + this.SumMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmountEuro</Name>
				<Source><![CDATA[
    display AmountCurNet netAmountEuro()
    {
        return this.amountMST2Euro(this.netAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ourAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the account number of the customer on the invoice journal.
    /// </summary>
    /// <returns>
    ///    The account number of the customer.
    /// </returns>
    display CustAccountExt ourAccountNum()
    {
        DictTable dictTable = new DictTable(tableNum(CustTable));

        if (dictTable.rights() >= AccessType::View)
        {
            return CustTable::find(this.InvoiceAccount).OurAccountNum;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payment</Name>
				<Source><![CDATA[
    PaymTerm payment(boolean _update = false)
    {
        return PaymTerm::find(this.Payment, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentBankAccountId</Name>
				<Source><![CDATA[
    CompanyBankAccountId paymentBankAccountId()
    {
        CompanyBankAccountId    paymBankAccountId;
        
        CustPaymModeTable custPaymModeTable;
        if (ProjInvoicePaymentModeFlight::instance().isEnabled())
        {
            custPaymModeTable = CustPaymModeTable::find(ProjProposalJour::find(this.ProposalId).PaymMode);
        }
        else
        {
            custPaymModeTable = CustPaymModeTable::find(CustTable::find(this.InvoiceAccount).PaymMode);
        }

        if (custPaymModeTable.AccountType == LedgerJournalACType::Bank)
        {
            paymBankAccountId = custPaymModeTable.parmPaymAccount();
        }

        return paymBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCondition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the message text for the terms of payment to use for an invoice journal.
    /// </summary>
    /// <returns>
    ///    The message text for the terms of payment for this invoice journal.
    /// </returns>
    /// <remarks>
    ///    This is based off the terms of payment and language specified in this invoice journal.
    /// </remarks>
    display PaymTxt paymentCondition()
    {
        #ISOCountryRegionCodes
        PaymTxt payCondition;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            payCondition = date2StrUsr(this.DueDate, DateFlags::FormatAll);
        }
        else
        {
            payCondition = PaymTerm::txt(this.Payment, this.LanguageId);
        }

        return payCondition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total settled prepaid amount from all the transactions posted for the customer on an invoice journal.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> data type representing the total settled prepaid amount.
    /// </returns>
    display AmountCur prepaidAmount()
    {
        QueryRun        queryRun;
        CustTrans       custTrans;
        AmountCur       prepaidAmount;

        DictTable dictTable = new DictTable(tableNum(CustTrans));

        if (dictTable.rights() >= AccessType::View)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                queryRun = this.queryRunCustTrans();

                while (queryRun.next())
                {
                    if (queryRun.changed(tableNum(CustTrans)))
                    {
                        custTrans = queryRun.get(tableNum(CustTrans));
                        if (custTrans)
                        {
                            prepaidAmount += custTrans.settledPrepaidAmountCur();
                        }
                    }
                }
            }
            else
            {
                while select custTrans
                where custTrans.AccountNum  == this.InvoiceAccount &&
                      custTrans.Invoice     == this.ProjInvoiceId  &&
                      custTrans.TransDate   == this.InvoiceDate
                {
                    prepaidAmount += custTrans.settledPrepaidAmountCur();
                }
                return prepaidAmount;
            }
        }
        return prepaidAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmountEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total settled prepaid amount in the Euro currency from all the transactions posted for the customer on an invoice journal.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> data type representing the total settled prepaid amount.
    /// </returns>
    display AmountCur prepaidAmountEuro()
    {
        return this.amountMST2Euro(this.prepaidAmountMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the total settled prepaid amount in the default currency from all the transactions posted for the customer on an invoice journal.
    /// </summary>
    /// <returns>
    ///    An <c>AmountMST</c> data type representing the total settled prepaid amount in the default currency.
    /// </returns>
    display AmountMST prepaidAmountMST()
    {
        return this.amountMST(this.prepaidAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIsFromContractLine</Name>
				<Source><![CDATA[
    // Description:     Judge current invoice journal whether was generated from contract line.
    public boolean psaIsFromContractLine()
    {
        ProjInvoiceCost                     tProjInvoiceCost;
        ProjInvoiceEmpl                     tProjInvoiceEmpl;
        ProjInvoiceItem                     tProjInvoiceItem;
        ProjInvoiceOnAcc                    tProjInvoiceOnAcc;
        ProjInvoiceRevenue                  tProjInvoiceRevenue;

        if (!isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            return false;
        }

        while select ProjInvoiceId, InvoiceDate, psaContractLineNum from tProjInvoiceCost
            where tProjInvoiceCost.ProjInvoiceId == this.ProjInvoiceId
               && tProjInvoiceCost.InvoiceDate == this.InvoiceDate
        {
            if (tProjInvoiceCost.psaContractLineNum)
            {
                return true;
            }
        }

        while select ProjInvoiceId, InvoiceDate, psaContractLineNum from tProjInvoiceEmpl
            where tProjInvoiceEmpl.ProjInvoiceId == this.ProjInvoiceId
               && tProjInvoiceEmpl.InvoiceDate == this.InvoiceDate
        {
            if (tProjInvoiceEmpl.psaContractLineNum)
            {
                return true;
            }
        }

        while select ProjInvoiceId, InvoiceDate, psaContractLineNum from tProjInvoiceItem
            where tProjInvoiceItem.ProjInvoiceId == this.ProjInvoiceId
               && tProjInvoiceItem.InvoiceDate == this.InvoiceDate
        {
            if (tProjInvoiceItem.psaContractLineNum)
            {
                return true;
            }
        }

        while select ProjInvoiceId, InvoiceDate, psaContractLineNum from tProjInvoiceOnAcc
            where tProjInvoiceOnAcc.ProjInvoiceId == this.ProjInvoiceId
               && tProjInvoiceOnAcc.InvoiceDate == this.InvoiceDate
        {
            if (tProjInvoiceOnAcc.psaContractLineNum)
            {
                return true;
            }
        }

        while select ProjInvoiceId, InvoiceDate, psaContractLineNum from tProjInvoiceRevenue
            where tProjInvoiceRevenue.ProjInvoiceId == this.ProjInvoiceId
               && tProjInvoiceRevenue.InvoiceDate == this.InvoiceDate
        {
            if (tProjInvoiceRevenue.psaContractLineNum)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyHour</Name>
				<Source><![CDATA[
    display ProjQty qtyHour()
    {
        ProjInvoiceEmpl    projInvoiceEmpl;
        DictTable dictTable = new DictTable(tableNum(ProjInvoiceEmpl));

        if (dictTable.rights() >= AccessType::View)
        {
            return ((select sum(Qty) from projInvoiceEmpl
                        where projInvoiceEmpl.ProjInvoiceId == this.ProjInvoiceId).Qty);
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustTrans</Name>
				<Source><![CDATA[
    public Query queryCustTrans(boolean update = false)
    {
        DictRelation    dictRelation;
        DictField       externdictField;
        DictField       dictField;
        Query           query = new Query();
        Counter         c;

        query.addDataSource(tableNum(CustTrans));

        dictRelation = new DictRelation(tableNum(CustTrans));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField   = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField   = new DictField(tableNum(CustTrans),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(CustTrans)).addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }
        query.dataSourceTable(tableNum(CustTrans)).update(update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunCustTrans</Name>
				<Source><![CDATA[
    public QueryRun queryRunCustTrans(boolean update = false)
    {
        return new QueryRun(this.queryCustTrans(update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a query that retrieves all the tax transactions associated with project invoice journal.
    /// </summary>
    /// <param name="update">
    ///    A Boolean data type that lets the record be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The query to retrieve tax transactions.
    /// </returns>
    Query queryTaxTrans(boolean update = false)
    {
        DictRelation            dictRelation;
        DictField               externdictField;
        DictField               dictField;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        Counter                 c;

        queryBuildDataSource = query.addDataSource(tableNum(TaxTrans));

        dictRelation = new DictRelation(tableNum(TaxTrans));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField     = new DictField(this.TableId,dictRelation.lineExternTableValue(c));
                dictField           = new DictField(tableNum(TaxTrans),dictRelation.lineTableValue(c));

                queryBuildDataSource.addRange(dictField.id()).value(queryValue(this.(externdictField.id())));
            }
        }

        queryBuildDataSource.update(update);
        queryBuildDataSource.addRange(fieldNum(TaxTrans, TaxOrigin)).value(strFmt('!%1',queryValue(TaxOrigin::TaxReversed)));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, InventTransId      ));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, TaxGroup           ));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, TaxItemGroup       ));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, ExemptTax          ));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, SourceBaseAmountCur));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, SourceTableId));
        queryBuildDataSource.addSortField(fieldNum(TaxTrans, SourceRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    Query queryTmpTaxWorkTrans(boolean update = false)
    {
        Query           query = new Query();

        query.addDataSource(tableNum(TmpTaxWorkTrans));

        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).update(update);
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addRange(fieldNum(TmpTaxWorkTrans, TaxOrigin)).value(strFmt('!%1',queryValue(TaxOrigin::TaxReversed)));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).orderMode(OrderMode::GroupBy);
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, InventTransId));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, TaxGroup     ));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, TaxItemGroup ));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, TaxRefId     ));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, ExemptTax    ));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, SourceBaseAmountCur));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, sourcetableid));
        query.dataSourceTable(tableNum(TmpTaxWorkTrans)).addSortField(fieldNum(TmpTaxWorkTrans, SourceRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountToBePaid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the remaining amount to be paid for an invoice journal.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> data type representing the remaining amount to be paid for an invoice journal.
    /// </returns>
    /// <remarks>
    ///    This is calculated by subtracting the pre-paid amount from the amount on the invoice.
    /// </remarks>
    display AmountCur remainAmountToBePaid()
    {
        return this.InvoiceAmount - this.prepaidAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountToBePaidEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the remaining amount to be paid for an invoice journal in the Euro currency.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> data type that represents the remaining amount to be paid for this invoice journal in the Euro currency.
    /// </returns>
    display AmountCur remainAmountToBePaidEuro()
    {
        return this.amountMST2Euro(this.remainAmountToBePaidMST());
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainAmountToBePaidMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the remaining amount to be paid for an invoice journal in the default currency.
    /// </summary>
    /// <returns>
    ///    An <c>AmountMST</c> data type representing the remaining amount to be paid for this invoice journal in the default currency.
    /// </returns>
    /// <remarks>
    ///    The amount to be paid is calculated by subtracting the pre-paid amount from the amount on the invoice, both in the default currency.
    /// </remarks>
    display AmountMST remainAmountToBePaidMST()
    {
        return this.amountMST(this.InvoiceAmount) - this.prepaidAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Does not function.
    /// </summary>
    /// <remarks>
    ///    This method should not be called. The primary key for invoices cannot be renamed. If this method is called, the following error message will be displayed: An invoice cannot be renamed.
    /// </remarks>
    public void renamePrimaryKey()
    {
        throw error("@SYS67280");
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnOriginalTransRecId_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The method returns RecId of an original line for the current credit note line
    /// </summary>
    /// <param name="_tableIdTrans">
    ///     The TableId value of project invoice line record (<c>ProjectInvoiceItem</c>, <c>ProjectInvoiceCost</c>,
    /// <c>ProjectInvoiceOnAcc</c>, <c>ProjectInvoiceEmpl</c>, <c>ProjectInvoiceRevenue</c>)
    /// </param>
    /// <param name="_tableIdTransDetail">
    ///     The TableId value of project invoice line detail record (<c>ProjectInvoiceItemDetail</c>, <c>ProjectInvoiceCostDetail</c>,
    /// <c>ProjectInvoiceOnAccDetail</c>, <c>ProjectInvoiceEmplDetail</c>, <c>ProjectInvoiceRevenueDetail</c>)
    /// </param>
    /// <param name="_recId">
    ///     The RecId field value of the current credit note line
    /// </param>
    /// <returns>
    ///     The RecId value of an original line if it was found, else 0
    /// </returns>
    /// <remarks>
    ///     If the _recId parameter isn't set, the method looks for the first line of the current invoice which refers on original invoice
    /// </remarks>
    public RefRecId returnOriginalTransRecId_CZ(
        TableId  _tableIdTrans,
        TableId  _tableIdTransDetail,
        RecId    _recId     = 0)
    {
        Query                   query;
        QueryBuildDataSource    qbdsTrans;
        QueryBuildDataSource    qbdsTransDetail;
        QueryBuildRange         qbr;
        QueryRun                queryRun;
        FieldId                 refReturnInvoiceTrans_WFieldId;
        FieldId                 refRecIdFieldId;
        FieldId                 recIdFieldId;
        FieldId                 projInvoiceIdFieldId;
        FieldId                 invoiceDateFieldId;

        RefRecId                origRefRecId;

        switch (_tableIdTrans)
        {
            case tableNum(ProjInvoiceItem):
                refReturnInvoiceTrans_WFieldId  = fieldNum(ProjInvoiceItem, RefReturnInvoiceTrans_W);
                refRecIdFieldId                 = fieldNum(ProjInvoiceItemDetail, RefRecId);
                recIdFieldId                    = fieldNum(ProjInvoiceItem, RecId);
                projInvoiceIdFieldId            = fieldNum(ProjInvoiceItem, ProjInvoiceId);
                invoiceDateFieldId              = fieldNum(ProjInvoiceItem, InvoiceDate);
                break;
            case tableNum(ProjInvoiceEmpl):
                refRecIdFieldId                 = fieldNum(ProjInvoiceEmplDetail, RefRecId);
                recIdFieldId                    = fieldNum(ProjInvoiceEmpl, RecId);
                projInvoiceIdFieldId            = fieldNum(ProjInvoiceEmpl, ProjInvoiceId);
                invoiceDateFieldId              = fieldNum(ProjInvoiceEmpl, InvoiceDate);
                break;
            case tableNum(ProjInvoiceOnAcc):
                refRecIdFieldId                 = fieldNum(ProjInvoiceOnAccDetail, RefRecId);
                recIdFieldId                    = fieldNum(ProjInvoiceOnAcc, RecId);
                projInvoiceIdFieldId            = fieldNum(ProjInvoiceOnAcc, ProjInvoiceId);
                invoiceDateFieldId              = fieldNum(ProjInvoiceOnAcc, InvoiceDate);
                break;
            case tableNum(ProjInvoiceCost):
                refRecIdFieldId                 = fieldNum(ProjInvoiceCostDetail, RefRecId);
                recIdFieldId                    = fieldNum(ProjInvoiceCost, RecId);
                projInvoiceIdFieldId            = fieldNum(ProjInvoiceCost, ProjInvoiceId);
                invoiceDateFieldId              = fieldNum(ProjInvoiceCost, InvoiceDate);
                break;
            case tableNum(ProjInvoiceRevenue):
                refRecIdFieldId                 = fieldNum(ProjInvoiceRevenueDetail, RefRecId);
                recIdFieldId                    = fieldNum(ProjInvoiceRevenue, RecId);
                projInvoiceIdFieldId            = fieldNum(ProjInvoiceRevenue, ProjInvoiceId);
                invoiceDateFieldId              = fieldNum(ProjInvoiceRevenue, InvoiceDate);
                break;
            default:
                // Document table id reference: %1 is not valid.
                throw error(strFmt("@SYS112754", _tableIdTrans));
        }

        query       = new query();
        qbdsTrans   = query.addDataSource(_tableIdTrans);

        qbdsTrans.firstOnly(true);
        qbdsTrans.addSelectionField(recIdFieldId);

        qbdsTrans.addRange(projInvoiceIdFieldId).value(SysQuery::value(this.ProjInvoiceId));
        qbdsTrans.addRange(invoiceDateFieldId).value(SysQuery::value(this.InvoiceDate));
        if (_recId)
        {
            qbdsTrans.addRange(recIdFieldId).value(SysQuery::value(_recId));
        }

        if (_tableIdTrans   == tableNum(ProjInvoiceItem))
        {
            qbdsTrans.addSelectionField(refReturnInvoiceTrans_WFieldId);

            qbr             = qbdsTrans.addRange(refReturnInvoiceTrans_WFieldId);
            qbr.value(SysQuery::valueNot(0));

            queryRun        = new QueryRun(query);
            queryRun.next();
            origRefRecId    = queryRun.get(_tableIdTrans).(refReturnInvoiceTrans_WFieldId);
        }

        if (!origRefRecId)
        {
            qbdsTrans.clearRange(refReturnInvoiceTrans_WFieldId);

            qbdsTransDetail = qbdsTrans.addDataSource(_tableIdTransDetail);
            qbdsTrans.addSelectionField(refRecIdFieldId);
            qbdsTransDetail.relations(true);

            qbr             = qbdsTransDetail.addRange(refRecIdFieldId);
            qbr.value(SysQuery::valueNot(0));

            queryRun        = new QueryRun(query);
            queryRun.next();
            origRefRecId    = queryRun.get(_tableIdTransDetail).(refRecIdFieldId);
        }

        return origRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenue</Name>
				<Source><![CDATA[
    display Amount revenue()
    {
        return (this.SalesOrderbalance - this.OnAccountAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenueMST</Name>
				<Source><![CDATA[
    display AmountMST revenueMST()
    {
        return (this.invoiceAmountMST() + this.wipInvoicedOnAcc());
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesBalanceEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the sales order balance in the Euro currency.
    /// </summary>
    /// <returns>
    ///    An <c>AmountCur</c> data type representing the sales order balance in the Euro currency.
    /// </returns>
    display AmountCur salesBalanceEuro()
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(this.SalesOrderbalance, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary), euroCurrencyCode, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendElectronically</Name>
				<Source><![CDATA[
    public void sendElectronically(PrintCopyOriginal _printCopyOriginal, boolean _showWarning = true)
    {
        if (this.CustVendInvoiceJour::canXMLBeSent())
        {
            if (this.CustVendInvoiceJour::validateERParameters(this.InvoiceAmount, _showWarning))
            {
                Args args = new Args();
                args.parmEnumType(enumnum(PrintCopyOriginal));
                args.parmEnum(_printCopyOriginal);
                this.reread();
                args.record(this);
                
                new MenuFunction(menuitemOutputStr(EInvoiceGeneration), MenuItemType::Output).run(args);

                info("@SYS344889");
            }
        }
        else
        {
            if (_showWarning)
            {
                warning (strFmt("@SYS100814", this.InvoiceAccount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumMarkupEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the equivalent amount in the euro currency for the amount in the SumMarkup field in an invoice journal.
    /// </summary>
    /// <returns>
    ///    The equivalent amount in the euro currency for the amount in the SumMarkup field.
    /// </returns>
    display MarkupSumSales sumMarkupEuro()
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(this.SumMarkup, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary), euroCurrencyCode, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxEuro</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the equivalent amount in the Euro currency for the amount in the SumMarkup field for an invoice journal.
    /// </summary>
    /// <returns>
    ///    A <c>TaxAmountCur</c> data type representing the equivalent amount in the Euro currency for the amount in the SumMarkup field.
    /// </returns>
    display TaxAmountCur sumTaxEuro()
    {
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (euroCurrencyCode == '')
        {
            return 0;
        }

        return CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(this.SumTax, this.CurrencyId, this.InvoiceDate, Currency::noYes2UnknownNoYes(this.Triangulation), this.ExchRate, this.ExchrateSecondary), euroCurrencyCode, this.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountCur2Euro(this.taxableBalanceMST(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceMST</Name>
				<Source><![CDATA[
    TaxBase taxableBalanceMST(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        TaxTrans        taxTrans;
        QueryRun        queryRun;
        TaxBase         taxBase;
        TmpTaxWorkTrans tmpTaxWorkTrans;
        TaxBaseCur      sourceBaseAmountCur;
        TaxExemptTax    taxExemptTax;

        if (_tmpTaxWorkTrans)
        {
            queryRun = new QueryRun(this.queryTmpTaxWorkTrans());
            queryRun.setCursor(_tmpTaxWorkTrans);
        }
        else
        {
            queryRun = new QueryRun(this.queryTaxTrans());
        }

        while (queryRun.next())
        {
            if (_tmpTaxWorkTrans)
            {
                tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans));
                if (tmpTaxWorkTrans)
                {
                    taxExemptTax        = tmpTaxWorkTrans.ExemptTax;
                    sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCurRaw;
                }
            }
            else
            {
                taxTrans = queryRun.get(tableNum(TaxTrans));
                if (taxTrans)
                {
                    taxExemptTax        = taxTrans.ExemptTax;
                    sourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
                }
            }

            if (taxExemptTax == NoYes::No)
            {
                taxBase += sourceBaseAmountCur;
            }
        }

        return -taxBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalance</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.netAmount() - this.taxableBalanceMST(_tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans = null)
    {
        return this.amountCur2Euro(this.taxFreeBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totaltaxAmountCur_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>SourceRegulateAmountCur</c> fields from Tax trans related to the vendor journal.
    /// </summary>
    /// <remarks>
    /// A real value with the total retained tax amount.
    /// </remarks>
    public TaxAmountCur totaltaxAmountCur_BR()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the current project invoice journal.
    /// </summary>
    /// <remarks>
    /// This method sets the invoice account to the value of order account for this invoice journal if an
    /// invoice account is not specified. It also deletes all entries of the payment schedule for this
    /// invoice journal in the <c>CustPaymSched</c> table if the payment schedule type is being modified
    /// for this invoice journal.
    /// </remarks>
    public void update()
    {
        ProjInvoiceJour  this_Orig = this.orig();

        if (!this.ProjInvoiceId && !this.isProforma())
        {
            throw error(strFmt("@SYS26332", fieldId2PName(tableNum(ProjInvoiceJour), fieldNum(ProjInvoiceJour, ProjInvoiceId))));
        }

        ttsbegin;

        super();

        //<GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        //</GTH>

        if (!this.InvoiceAccount)
        {
            this.InvoiceAccount = this.OrderAccount;
        }

        if (this_Orig.PaymentSched && this_Orig.PaymentSched != this.PaymentSched)
        {
            CustPaymSched::deleteCustPaymSched(this.TableId, this.RecId);
        }

        if (this.CashDiscCode && TaxParameters::find().CashDiscOnInvoice)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00021, funcName());
            this.CashDiscPercent = CashDisc::find(this.CashDiscCode).Percent;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if ((PaymTerm::isCashLedgerDimension(this.Payment)) && this.PaymentSched)
        {
            ret  = checkFailed("@SYS25074");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatDueDate_W</Name>
				<Source><![CDATA[
    display VatDueDate_W vatDueDate_W()
    {
        return this.CustVendInvoiceJour::vatDueDate_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipInvoicedOnAcc</Name>
				<Source><![CDATA[
    display AmountMST wipInvoicedOnAcc()
    {
        ProjTransPosting    projTransPosting;
        DictTable dictTable = new DictTable(tableNum(ProjTransPosting));

        if (dictTable.rights() >= AccessType::View)
        {
            return ((select sum(AmountMst) from projTransPosting
                        where projTransPosting.Voucher == this.LedgerVoucher
                           && projTransPosting.PostingType == LedgerPostingType::ProjWIPInvoicedOnAccount).AmountMst);
        }
        else
        {
            return 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCostAmount</Name>
				<Source><![CDATA[
    static void adjustCostAmount(
        InventTransId       inventTransId,
        ProjAdjustRefId     projAdjustRefId,
        AmountMST           adjustAmount)
    {
        ProjItemTrans           projItemTrans;
        ProjInvoiceItem         projInvoiceItem;
        ProjInvoiceItemDetail   projInvoiceItemDetail;
        ProjInvoiceJour         projInvoiceJour;

        ttsbegin;

        select forceplaceholders forupdate projInvoiceJour
        join TableId from projItemTrans
                where projItemTrans.InventTransId   == inventTransId                 &&
                     (projItemTrans.ProjAdjustRefId == projAdjustRefId || !projAdjustRefId)
        join TableId from projInvoiceItem
                where projInvoiceItem.ProjTransId == projItemTrans.ProjTransId       &&
                      projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId &&
                      projInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate
        exists join TableId from projInvoiceItemDetail
                where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId &&
                    ! projInvoiceItemDetail.RefRecId;

        if (projInvoiceJour)
        {
            projInvoiceJour.CostValue += adjustAmount;
            projInvoiceJour.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether sales order invoices exist for a project invoice journal.
    /// </summary>
    /// <param name="invoiceNum">
    ///    The ID of the invoice journal.
    /// </param>
    /// <param name="invoiceDate">
    ///    The date on the invoice journal.
    /// </param>
    /// <returns>
    ///    true if sales order invoices exists; otherwise, false.
    /// </returns>
    static boolean exist(InvoiceId invoiceNum, TransDate invoiceDate)
    {
        return (select custInvoiceJour
                where custInvoiceJour.SalesId     == invoiceNum   &&
                      custInvoiceJour.InvoiceDate == invoiceDate
               ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the invoice journal for the given invoice journal ID and invoice date.
    /// </summary>
    /// <param name="_projInvoiceId">
    ///    The ID for the invoice journal.
    /// </param>
    /// <param name="_invoiceDate">
    ///    The invoice date.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean data type that can be set to true if the invoice journal to retrieve will require updating; optional.
    /// </param>
    /// <returns>
    ///    A <c>ProjInvoiceJour</c> data type representing the desired project invoice journal.
    /// </returns>
    public static ProjInvoiceJour find(ProjInvoiceId   _projInvoiceId,
                                       TransDate       _invoiceDate,
                                       boolean         _forUpdate = false)
    {
        ProjInvoiceJour projInvoiceJour = null;

        projInvoiceJour.selectForUpdate(_forUpdate);

        if (_projInvoiceId && _invoiceDate)
        {
            select firstonly projInvoiceJour
                where projInvoiceJour.ProjInvoiceId == _projInvoiceId &&
                      projInvoiceJour.InvoiceDate   == _invoiceDate;
        }

        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static ProjInvoiceJour findRecId(RecId    recId,
                                       boolean  update = false)
    {
        ProjInvoiceJour projInvoiceJour;

        projInvoiceJour.selectForUpdate(update);

        select firstonly crosscompany projInvoiceJour
            where projInvoiceJour.RecId == recId;

        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumSeqAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a number sequence reference for new invocie journal.
    /// </summary>
    /// <param name="_projProposalJour">
    /// The <c>ProjProposalJour</c> table buffer to get proposal journal data.
    /// </param>
    /// <param name="_creditNote">
    /// The <c>NoYes</c> variable to specify if it is a credit note.
    /// </param>
    /// <param name="_ltDocNumberingCode">
    /// The auto numbering code to use for finding the invoice number.
    /// </param>
    /// <returns>
    /// A <c>NumberSeq</c> object
    /// </returns>
    public static NumberSeq getNumSeqAndVoucher(ProjProposalJour _projProposalJour, NoYes _creditNote, LtDocNumberingCode _ltDocNumberingCode = "")
    {
        RefRecId  invoiceNumber;
        RefRecId  invoiceVoucher;
        NumberSequenceDatatype numberDatatype;
        NumberSequenceDatatype voucherDatatype;
        RefRecId scopeId = NumberSeqScopeFactory::createDefaultScope().getId();
        NumberSeq           tmpNumberSeq;
        boolean             voucherEqualsNumber;
        ProjProposalCost       tmpProjProposalCost;
        ProjProposalEmpl       tmpProjProposalEmpl;
        ProjProposalOnAcc      tmpProjProposalOnAcc;
        ProjProposalRevenue    tmpProjProposalRevenue;
        ProjProposalItem       tmpProjProposalItem;
        #ISOCountryRegionCodes

        // <GMY>
        boolean                 isIsoMY = TaxGSTFeatureChecker_MY::isCountryRegionMY();
        // </GMY>
        switch (_projProposalJour.InvoiceType)
        {
            // <GBR>
            // Generate number sequence for debit note and voucher.
            case ProjInvoiceType::DebitNote_BR :
                if (BrazilParameters::isEnabled())
                {
                    if (_projProposalJour.InvoiceType == ProjInvoiceType::DebitNote_BR)
                    {
                        tmpNumberSeq = NumberSeq::newGetNumAndVoucher(ProjParameters::numRefProjNormalDebitNoteId_BR(),
                                                                      ProjParameters::numRefProjNormalDebitNoteVoucher_BR());
                    }
                }
                break;
            // </GBR>
            case ProjInvoiceType::Invoice:
            case ProjInvoiceType::OnAccount:
                // <GEEU>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]) && _projProposalJour.InvoiceAutoNumbering_LT)
                {
                    invoiceNumber = NumberSequenceTable::findByNaturalKey(LtInvoiceAutoNumberingTable::find(_ltDocNumberingCode).NumberSequenceCode, NumberSeqScopeFactory::createDefaultScope().getId()).RecId;
                }
                // </GEEU>
                if (_projProposalJour.NumberSequenceGroupId)
                {
                    if (_creditNote)
                    {
                        numberDatatype = NumberSequenceDatatype::find(ProjParameters::numRefProjNormalCreditNoteId().NumberSequenceDatatype);
                        voucherDatatype = NumberSequenceDatatype::find(ProjParameters::numRefProjNormalCreditNoteVoucher().NumberSequenceDatatype);

                        // <GEEU>
                        if (!invoiceNumber)
                        {
                            // </GEEU>
                            invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, _projProposalJour.NumberSequenceGroupId).NumberSequenceId;

                            if (!invoiceNumber)
                            {
                                invoiceNumber = ProjParameters::numRefProjNormalCreditNoteId().NumberSequenceId;
                            }
                            // <GEEU>
                        }
                        // </GEEU>

                        if (ProjParameters::numRefProjNormalCreditNoteVoucher().AllowSameAs)
                        {
                            voucherEqualsNumber = true;
                            invoiceVoucher      = invoiceNumber;
                        }
                        else
                        {
                            invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, _projProposalJour.NumberSequenceGroupId).NumberSequenceId;

                            if (!invoiceVoucher)
                            {
                                invoiceVoucher = ProjParameters::numRefProjNormalCreditNoteVoucher().NumberSequenceId;
                            }
                        }
                    }
                    else
                    {
                        // <GMY>
                        if (isIsoMY && _projProposalJour.hasLinesWithReference_MY())
                        {
                            numberDatatype = NumberSequenceDatatype::find(ProjParameters::numRefProjNormalDebitNoteId_MY().NumberSequenceDatatype);
                            voucherDatatype = NumberSequenceDatatype::find(ProjParameters::numRefProjNormalDebitNoteVoucher_MY().NumberSequenceDatatype);
                        }
                        else
                        {
                            // </GMY>
                            numberDatatype = NumberSequenceDatatype::find(ProjParameters::numRefProjNormalInvoiceId().NumberSequenceDatatype);
                            voucherDatatype = NumberSequenceDatatype::find(ProjParameters::numRefProjNormalCreditNoteVoucher().NumberSequenceDatatype);
                            // <GMY>
                        }
                        // </GMY>

                        // <GEEU>
                        if (!invoiceNumber)
                        {
                            // </GEEU>
                            invoiceNumber = NumberSequenceGroupRef::findNaturalKey(numberDatatype.RecId, scopeId, _projProposalJour.NumberSequenceGroupId).NumberSequenceId;

                            if (!invoiceNumber)
                            {
                                invoiceNumber = ProjParameters::numRefProjNormalInvoiceId().NumberSequenceId;
                            }
                            // <GEEU>
                        }
                        // </GEEU>

                        if (ProjParameters::numRefProjNormalInvoiceVoucher().AllowSameAs)
                        {
                            voucherEqualsNumber = true;
                            invoiceVoucher      = invoiceNumber;
                        }
                        else
                        {
                            invoiceVoucher = NumberSequenceGroupRef::findNaturalKey(voucherDatatype.RecId, scopeId, _projProposalJour.NumberSequenceGroupId).NumberSequenceId;

                            if (!invoiceVoucher)
                            {
                                invoiceVoucher = ProjParameters::numRefProjNormalInvoiceVoucher().NumberSequenceId;
                            }
                        }
                    }

                    tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber, invoiceVoucher, voucherEqualsNumber);
                }
                else
                {
                    // <GEEU>
                    if (!invoiceNumber)
                    {
                        // </GEEU>
                        if (_creditNote)
                        {
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(ProjParameters::numRefProjNormalCreditNoteId(),
                                                                      ProjParameters::numRefProjNormalCreditNoteVoucher());
                        }
                        // <GMY>
                        else if (isIsoMY && _projProposalJour.hasLinesWithReference_MY())
                        {
                            // Debit note sequence will be generated.
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(ProjParameters::numRefProjNormalDebitNoteId_MY(),
                                                                    ProjParameters::numRefProjNormalDebitNoteVoucher_MY());
                        }
                        // </GMY>
                        else
                        {
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucher(ProjParameters::numRefProjNormalInvoiceId(),
                                                                      ProjParameters::numRefProjNormalInvoiceVoucher());
                        }
                        // <GEEU>
                    }
                    else
                    {
                        if (_creditNote)
                        {
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber,
                                                                                  ProjParameters::numRefProjNormalCreditNoteVoucher().RecId);
                        }
                        else
                        {
                            tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(invoiceNumber,
                                                                          ProjParameters::numRefProjNormalInvoiceVoucher().RecId);
                        }
                    }
                    // </GEEU>
                }
                break;
        }

        // Italian functionality of VAT books and VAT book sections
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
        {
            if (! TaxBookSection::checkTaxBookSection(
                            tmpNumberSeq.parmVoucherSequenceId(),
                            _projProposalJour.InvoiceDate))
            {
                throw error("@SYS21533");
            }

            while select TaxGroupId, TaxItemGroupId from tmpProjProposalCost
                where tmpProjProposalCost.ProposalId == _projProposalJour.ProposalId
            {
                if (! TaxGroupData::checkTaxGroups(tmpProjProposalCost.TaxGroupId, tmpProjProposalCost.TaxItemGroupId))
                {
                    throw error("@SYS21533");
                }
            }

            while select TaxGroupId, TaxItemGroupId from tmpProjProposalEmpl
                where tmpProjProposalEmpl.ProposalId == _projProposalJour.ProposalId
            {
                if (! TaxGroupData::checkTaxGroups(tmpProjProposalEmpl.TaxGroupId, tmpProjProposalEmpl.TaxItemGroupId))
                {
                    throw error("@SYS21533");
                }
            }

            while select TaxGroupId, TaxItemGroupId from tmpProjProposalOnAcc
                where tmpProjProposalOnAcc.ProposalId == _projProposalJour.ProposalId
            {
                // Don't throw error if TaxItemGroupId is empty and it's an optional field.
                if ((tmpProjProposalOnAcc.TaxItemGroupId || ProjParameters::find().TaxItemGroupOnAccOptional == NoYes::No)
                    && !TaxGroupData::checkTaxGroups(tmpProjProposalOnAcc.TaxGroupId, tmpProjProposalOnAcc.TaxItemGroupId))
                {
                    throw error("@SYS21533");
                }
            }

            while select TaxGroupId, TaxItemGroupId from tmpProjProposalRevenue
                where tmpProjProposalRevenue.ProposalId == _projProposalJour.ProposalId
            {
                if (! TaxGroupData::checkTaxGroups(tmpProjProposalRevenue.TaxGroupId, tmpProjProposalRevenue.TaxItemGroupId))
                {
                    throw error("@SYS21533");
                }
            }

            while select TaxGroupId, TaxItemGroupId from tmpProjProposalItem
                where tmpProjProposalItem.ProposalId == _projProposalJour.ProposalId
            {
                if (! TaxGroupData::checkTaxGroups(tmpProjProposalItem.TaxGroupId, tmpProjProposalItem.TaxItemGroupId))
                {
                    throw error("@SYS21533");
                }
            }
        }
        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceQuery</Name>
				<Source><![CDATA[
    public static container invoiceQuery(Common    _common)
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        ProjInvoiceId           invoiceId;
        ProjEmplTrans           projEmplTrans;
        ProjEmplTransSale       projEmplTransSale;
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSale;
        boolean                 found;

        query = new Query();
        qbds = query.addDataSource(tableNum(ProjInvoiceJour));

        #localMacro.addRange
        %1 = _common;
        while select %2
            where %2.%3 == %1.%3
        {
            invoiceId = ProjTrans::%4(%1, %2).invoiceId();
            if (invoiceId)
            {
                found = true;
                qbds.addRange(fieldnum(ProjInvoiceJour, ProjInvoiceId)).value(queryValue(invoiceId));
            }
        }

        if (!found)
        {
            qbds.addRange(fieldnum(ProjInvoiceJour, ProjInvoiceId)).value(SysQuery::valueEmptyString());
        }
    #endMacro

        switch (_common.TableId)
        {
            case tableNum(ProjEmplTrans):
                #addRange(projEmplTrans, projEmplTransSale, TransId, newProjEmplTransSale)
                break;
            case tableNum(ProjCostTrans):
                #addRange(projCostTrans, projCostTransSale, TransId, newProjCostTransSale)
                break;
            case tableNum(ProjItemTrans):
                #addRange(projItemTrans, projItemTransSale, ProjTransId, newProjItemTransSale)
                break;
            case tableNum(ProjRevenueTrans):
                #addRange(projRevenueTrans, projRevenueTransSale, TransId, newProjRevenueTransSale)
                break;
            case tableNum(ProjOnAccTrans):
                #addRange(projOnAccTrans, projOnAccTransSale, TransId, newProjOnAccTransSale)
                break;
            default:
                throw error("@SYS18626");
        }

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches a <c>ProjInvoiceJournal</c> object and passes an invoice journal record.
    /// </summary>
    /// <param name="transId">
    ///    The ID of the transaction line.
    /// </param>
    /// <param name="projTransType">
    ///    The type of the transaction line.
    /// </param>
    /// <remarks>
    ///    This method creates a project invoice journal form object and passes the invoice journal record that contains the transaction line passed as part of the argument to the form to load.
    /// </remarks>
    static void jumpRefInvoice(ProjTransIdBase transId, ProjTransType projTransType)
    {
        ProjInvoiceId   invoiceId;
        InvoiceDate     invoiceDate;

        ProjInvoiceJour projInvoiceJour;

        ProjInvoiceCost     projInvoiceCost;
        ProjInvoiceEmpl     projInvoiceEmpl;
        ProjInvoiceItem     projInvoiceItem;
        ProjInvoiceRevenue  projInvoiceRevenue;
        ProjInvoiceOnAcc    projInvoiceOnAcc;

        ProjRevenueTrans    projRevenueTrans;
        ProjItemTrans       projItemTrans;
        SysAnyType          parmSysAnyTypeTransId;

        if (! transId)
        {
            return;
        }

        switch (projTransType)
        {
            case ProjTransType::Revenue:
                projInvoiceRevenue  = ProjInvoiceRevenue::findTransId(transId);
                invoiceDate         = projInvoiceRevenue.InvoiceDate;
                invoiceId           = projInvoiceRevenue.ProjInvoiceId;
                break;
            case ProjTransType::Hour:
                projInvoiceEmpl     = ProjInvoiceEmpl::findTransId(transId);
                invoiceDate         = projInvoiceEmpl.InvoiceDate;
                invoiceId           = projInvoiceEmpl.ProjInvoiceId;
                break;
            case ProjTransType::Cost:
                projInvoiceCost     = ProjInvoiceCost::findTransId(transId);
                invoiceDate         = projInvoiceCost.InvoiceDate;
                invoiceId           = projInvoiceCost.ProjInvoiceId;
                break;
            case ProjTransType::Item:
                projInvoiceItem     = ProjInvoiceItem::findTransId(transId);
                invoiceDate         = projInvoiceItem.InvoiceDate;
                invoiceId           = projInvoiceItem.ProjInvoiceId;
                break;
            case ProjTransType::OnAccount:
                projInvoiceOnAcc    = ProjInvoiceOnAcc::findTransId(transId);
                invoiceDate         = projInvoiceOnAcc.InvoiceDate;
                invoiceId           = projInvoiceOnAcc.ProjInvoiceId;
                break;
            default:
                return;
        }

        projInvoiceJour     = ProjInvoiceJour::find(invoiceId, invoiceDate);

        if (projInvoiceJour)
        {
            Args args = new Args();
            args.record(projInvoiceJour);

            // Construct parameters to pass to the form
            // We pass the transaction id and the transaction type/transaction origin
            args.parm('jumpToMain');
            parmSysAnyTypeTransId = new SysAnyType(transId);
            args.parmObject(parmSysAnyTypeTransId);
            switch (projTransType)
            {
                // For Revenue(Fee) and Item transactions, pass the transaction origin enum
                case ProjTransType::Revenue:
                    projRevenueTrans = ProjRevenueTrans::find(transId);
                    args.parmEnumType(enumNum(ProjOrigin));
                    args.parmEnum(enum2int(projRevenueTrans.TransactionOrigin));
                    break;
                case ProjTransType::Item:
                    projItemTrans = ProjItemTrans::find(transId);
                    args.parmEnumType(enumNum(ProjOrigin));
                    args.parmEnum(enum2int(projItemTrans.TransactionOrigin));
                    break;
                // For the other transaction types, we simply pass the transaction type enum
                default:
                    args.parmEnumType(enumNum(ProjTransType));
                    args.parmEnum(enum2int(projTransType));
                    break;
            }

            new MenuFunction(menuitemDisplayStr(ProjInvoiceJournal), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCustomsInvoiceID_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Lookup Project Custom's invoice id.
    /// </summary>
    /// <param name="_formControl">
    /// <c> _formControl </c> as a parameter.
    /// </param>
    /// <param name="_salesId">
    /// <c> _salesId </c> as a parameter.
    /// </param>
    public static void lookupCustomsInvoiceID_IN(FormControl _formControl, SalesIdBase _salesId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(ProjInvoiceJour), _formControl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildDataSource    qbdProposalJour;
        QueryBuildDataSource    qbdProposalItem;
        QueryBuildDataSource    qbdSalesLine;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource    = query.addDataSource(tablenum(ProjInvoiceJour));
        queryBuildDataSource.addGroupByField(fieldnum(ProjInvoiceJour, ProjInvoiceId));

        QueryBuildDataSource qbdsProjInvoiceItem = queryBuildDataSource.addDataSource(tableNum(ProjInvoiceItem));
        qbdsProjInvoiceItem.relations(true);

        qbdsProjInvoiceItem.addRange(fieldNum(ProjInvoiceItem, SalesId)).value(queryValue(_salesId));

        sysTableLookup.addLookupfield(fieldnum(ProjInvoiceJour, ProjInvoiceId));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenueExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if revenue transaction lines are in the project invoice journal.
    /// </summary>
    /// <param name="_projInvoiceId">
    ///    The ID of the project invoice journal.
    /// </param>
    /// <returns>
    ///    true if revenue transaction lines are in the project invoice journal; otherwise, false.
    /// </returns>
    public static boolean revenueExists(ProjInvoiceId _projInvoiceId)
    {
        return (select projInvoiceRevenue where projInvoiceRevenue.ProjInvoiceId == _projInvoiceId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrinted</Name>
				<Source><![CDATA[
    public static void updatePrinted(ProjInvoiceJour _invoiceJour, PrintedOriginals _originalsIncrement)
    {
        ProjInvoiceJour invoiceJour;

        ttsbegin;

        invoiceJour = ProjInvoiceJour::findRecId(_invoiceJour.RecId, true);

        invoiceJour.PrintedOriginals += _originalsIncrement;
        invoiceJour.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contractName</Name>
				<Source><![CDATA[
    display Description contractName()
    {
        return ProjInvoiceTable::find(this.ProjInvoiceProjId).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original or credit note invoices associated with the current invoice.
    /// </summary>
    /// <returns>Original or credit note invoices.</returns>
    [SysClassName(classStr(SAFTInvoiceData_W))]
    public List getOriginalInvoices()
    {
        return this.getLinkedOriginalAndCreditNoteInvoices();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalInvoicesOnlyByCurrentCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original invoices associated with the current credit note invoice.
    /// </summary>
    /// <returns>Original invoices only. If the current invoice is not a credit note, retrieves an empty list.</returns>
    internal List getOriginalInvoicesOnlyByCurrentCreditNote()
    {
        return this.getLinkedOriginalAndCreditNoteInvoices(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLinkedOriginalAndCreditNoteInvoices</Name>
				<Source><![CDATA[
    private List getLinkedOriginalAndCreditNoteInvoices(boolean _excludeCreditNoteInvoicesForOriginals = false)
    {
        Set originalInvoiceSet = new Set(Types::Container);

        ProjInvoiceItem originalProjInvoiceItem, creditNoteProjInvoiceItem;
        ProjInvoiceItemDetail originalProjInvoiceItemDetail, creditNoteProjInvoiceItemDetail;

        while select ProjInvoiceId, InvoiceDate, RecId from originalProjInvoiceItem
        exists join creditNoteProjInvoiceItem
            where creditNoteProjInvoiceItem.RefReturnInvoiceTrans_W == originalProjInvoiceItem.RecId  &&
                  creditNoteProjInvoiceItem.ProjInvoiceId           == this.ProjInvoiceId   &&
                  creditNoteProjInvoiceItem.InvoiceDate             == this.InvoiceDate
        {
            originalInvoiceSet.add([originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate]);
        }

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
        exists join originalProjInvoiceItemDetail
            where originalProjInvoiceItemDetail.InvoiceRefRecId == originalProjInvoiceItem.RecId
        exists join creditNoteProjInvoiceItemDetail
            where creditNoteProjInvoiceItemDetail.RecId == originalProjInvoiceItemDetail.RefRecId
        exists join creditNoteProjInvoiceItem
            where creditNoteProjInvoiceItem.RecId == creditNoteProjInvoiceItemDetail.InvoiceRefRecId &&
                  creditNoteProjInvoiceItem.ProjInvoiceId == this.ProjInvoiceId &&
                  creditNoteProjInvoiceItem.InvoiceDate   == this.InvoiceDate &&
                  (!_excludeCreditNoteInvoicesForOriginals || creditNoteProjInvoiceItem.LineAmount < 0.)
        {
            originalInvoiceSet.add([originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate]);
        }

        ProjInvoiceRevenue originalProjInvoiceRevenue, creditNoteProjInvoiceRevenue;
        ProjInvoiceRevenueDetail originalProjInvoiceRevenueDetail, creditNoteProjInvoiceRevenueDetail;

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceRevenue
        exists join originalProjInvoiceRevenueDetail
            where originalProjInvoiceRevenueDetail.InvoiceRefRecId == originalProjInvoiceRevenue.RecId
        exists join creditNoteProjInvoiceRevenueDetail
            where creditNoteProjInvoiceRevenueDetail.RecId == originalProjInvoiceRevenueDetail.RefRecId
        exists join creditNoteProjInvoiceRevenue
            where creditNoteProjInvoiceRevenue.RecId == creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId &&
                  creditNoteProjInvoiceRevenue.ProjInvoiceId == this.ProjInvoiceId &&
                  creditNoteProjInvoiceRevenue.InvoiceDate   == this.InvoiceDate &&
                  (!_excludeCreditNoteInvoicesForOriginals || creditNoteProjInvoiceRevenue.LineAmount < 0.)
        {
            originalInvoiceSet.add([originalProjInvoiceRevenue.ProjInvoiceId, originalProjInvoiceRevenue.InvoiceDate]);
        }

        ProjInvoiceCost originalProjInvoiceCost, creditNoteProjInvoiceCost;
        ProjInvoiceCostDetail originalProjInvoiceCostDetail, creditNoteProjInvoiceCostDetail;

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceCost
        exists join originalProjInvoiceCostDetail
            where originalProjInvoiceCostDetail.InvoiceRefRecId == originalProjInvoiceCost.RecId
        exists join creditNoteProjInvoiceCostDetail
            where creditNoteProjInvoiceCostDetail.RecId == originalProjInvoiceCostDetail.RefRecId
        exists join creditNoteProjInvoiceCost
            where creditNoteProjInvoiceCost.RecId == creditNoteProjInvoiceCostDetail.InvoiceRefRecId &&
                  creditNoteProjInvoiceCost.ProjInvoiceId == this.ProjInvoiceId &&
                  creditNoteProjInvoiceCost.InvoiceDate   == this.InvoiceDate &&
                  (!_excludeCreditNoteInvoicesForOriginals || creditNoteProjInvoiceCost.LineAmount < 0.)
        {
            originalInvoiceSet.add([originalProjInvoiceCost.ProjInvoiceId, originalProjInvoiceCost.InvoiceDate]);
        }

        ProjInvoiceEmpl originalProjInvoiceEmpl, creditNoteProjInvoiceEmpl;
        ProjInvoiceEmplDetail originalProjInvoiceEmplDetail, creditNoteProjInvoiceEmplDetail;

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceEmpl
        exists join originalProjInvoiceEmplDetail
            where originalProjInvoiceEmplDetail.InvoiceRefRecId == originalProjInvoiceEmpl.RecId
        exists join creditNoteProjInvoiceEmplDetail
            where creditNoteProjInvoiceEmplDetail.RecId == originalProjInvoiceEmplDetail.RefRecId
        exists join creditNoteProjInvoiceEmpl
            where creditNoteProjInvoiceEmpl.RecId == creditNoteProjInvoiceEmplDetail.InvoiceRefRecId &&
                  creditNoteProjInvoiceEmpl.ProjInvoiceId == this.ProjInvoiceId &&
                  creditNoteProjInvoiceEmpl.InvoiceDate   == this.InvoiceDate &&
                  (!_excludeCreditNoteInvoicesForOriginals || creditNoteProjInvoiceEmpl.LineAmount < 0.)
        {
            originalInvoiceSet.add([originalProjInvoiceEmpl.ProjInvoiceId, originalProjInvoiceEmpl.InvoiceDate]);
        }

        ProjInvoiceOnAcc originalProjInvoiceOnAcc, creditNoteProjInvoiceOnAcc;
        ProjInvoiceOnAccDetail originalProjInvoiceOnAccDetail, creditNoteProjInvoiceOnAccDetail;

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceOnAcc
        exists join originalProjInvoiceOnAccDetail
            where originalProjInvoiceOnAccDetail.InvoiceRefRecId == originalProjInvoiceOnAcc.RecId
        exists join creditNoteProjInvoiceOnAccDetail
            where creditNoteProjInvoiceOnAccDetail.RecId == originalProjInvoiceOnAccDetail.RefRecId
        exists join creditNoteProjInvoiceOnAcc
            where creditNoteProjInvoiceOnAcc.RecId == creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId &&
                  creditNoteProjInvoiceOnAcc.ProjInvoiceId == this.ProjInvoiceId &&
                  creditNoteProjInvoiceOnAcc.InvoiceDate   == this.InvoiceDate &&
                  (!_excludeCreditNoteInvoicesForOriginals || creditNoteProjInvoiceOnAcc.Amount < 0.)
        {
            originalInvoiceSet.add([originalProjInvoiceOnAcc.ProjInvoiceId, originalProjInvoiceOnAcc.InvoiceDate]);
        }

        return this.toInvoiceList(originalInvoiceSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParentOriginalInvoices</Name>
				<Source><![CDATA[
    internal List getParentOriginalInvoices()
    {
        Set originalInvoiceSet = new Set(Types::Container);

        this.populateOriginalItemInvoiceIdAndDateByRefReturnInvoiceTrans(
            this.ProjInvoiceId,
            this.InvoiceDate,
            originalInvoiceSet);

        this.populateOriginalItemInvoiceIdAndDate(
            this.ProjInvoiceId,
            this.InvoiceDate,
            this.CreatedDateTime,
            originalInvoiceSet);

        this.populateOriginalRevenueInvoiceIdAndDate(
            this.ProjInvoiceId,
            this.InvoiceDate,
            this.CreatedDateTime,
            originalInvoiceSet);

        this.populateOriginalCostInvoiceIdAndDate(
            this.ProjInvoiceId,
            this.InvoiceDate,
            this.CreatedDateTime,
            originalInvoiceSet);

        this.populateOriginalEmplInvoiceIdAndDate(
            this.ProjInvoiceId,
            this.InvoiceDate,
            this.CreatedDateTime,
            originalInvoiceSet);

        this.populateOriginalOnAccInvoiceIdAndDate(
            this.ProjInvoiceId,
            this.InvoiceDate,
            this.CreatedDateTime,
            originalInvoiceSet);

        return this.toInvoiceList(originalInvoiceSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInvoiceList</Name>
				<Source><![CDATA[
    private List toInvoiceList(Set _invoiceSet)
    {
        List ret = new List(Types::Class);
        if (_invoiceSet)
        {
            str origInvoiceId;
            date origInvoiceDate;
            var se = _invoiceSet.getEnumerator();
            while (se.moveNext())
            {
                [origInvoiceId, origInvoiceDate] = se.current();
                SAFTInvoiceData_W invoiceData = new SAFTInvoiceData_W();
                invoiceData.parmInvoiceId(origInvoiceId);
                invoiceData.parmInvoiceDate(origInvoiceDate);
                ret.addEnd(invoiceData);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginalItemInvoiceIdAndDateByRefReturnInvoiceTrans</Name>
				<Source><![CDATA[
    private void populateOriginalItemInvoiceIdAndDateByRefReturnInvoiceTrans(ProjInvoiceId _invoiceId, TransDate _transDate, Set _originalParentInvoiceSet)
    {
        ProjInvoiceItem originalProjInvoiceItem, creditNoteProjInvoiceItem;
        boolean found;

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
            exists join creditNoteProjInvoiceItem
                where creditNoteProjInvoiceItem.RefReturnInvoiceTrans_W == originalProjInvoiceItem.RecId
                    && creditNoteProjInvoiceItem.ProjInvoiceId == _invoiceId
                    && creditNoteProjInvoiceItem.InvoiceDate == _transDate
        {
            found = true;
            this.populateOriginalItemInvoiceIdAndDateByRefReturnInvoiceTrans(originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate, _originalParentInvoiceSet);
        }
        if (!found && (_invoiceId != this.ProjInvoiceId || _transDate != this.InvoiceDate))
        {
            _originalParentInvoiceSet.add([_invoiceId, _transDate]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginalItemInvoiceIdAndDate</Name>
				<Source><![CDATA[
    private void populateOriginalItemInvoiceIdAndDate(
        ProjInvoiceId _invoiceId,
        TransDate _transDate,
        CreatedDateTime _createdDateTime,
        Set _originalParentInvoiceSet)
    {
        ProjInvoiceItem originalProjInvoiceItem, creditNoteProjInvoiceItem;
        ProjInvoiceItemDetail originalProjInvoiceItemDetail, creditNoteProjInvoiceItemDetail;
        ProjInvoiceJour originalProjInvoiceJour;

        boolean found;

        if (ProjInvoiceJourOriginalInvoiceForNegativeTransPLFlight::instance().isEnabled())
        {
            while select ProjInvoiceId, InvoiceDate, CreatedDateTime from originalProjInvoiceJour
                where originalProjInvoiceJour.CreatedDateTime < _createdDateTime
                exists join originalProjInvoiceItem
                    where originalProjInvoiceItem.ProjInvoiceId == originalProjInvoiceJour.ProjInvoiceId
                        && originalProjInvoiceItem.InvoiceDate == originalProjInvoiceJour.InvoiceDate
                exists join originalProjInvoiceItemDetail
                    where originalProjInvoiceItemDetail.InvoiceRefRecId == originalProjInvoiceItem.RecId
                exists join creditNoteProjInvoiceItemDetail
                    where creditNoteProjInvoiceItemDetail.RecId == originalProjInvoiceItemDetail.RefRecId
                exists join creditNoteProjInvoiceItem
                    where creditNoteProjInvoiceItem.RecId == creditNoteProjInvoiceItemDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceItem.ProjInvoiceId == _invoiceId
                        && creditNoteProjInvoiceItem.InvoiceDate == _transDate
            {
                found = true;
                this.populateOriginalItemInvoiceIdAndDate(
                    originalProjInvoiceJour.ProjInvoiceId,
                    originalProjInvoiceJour.InvoiceDate,
                    originalProjInvoiceJour.CreatedDateTime,
                    _originalParentInvoiceSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
                exists join originalProjInvoiceItemDetail
                    where originalProjInvoiceItemDetail.InvoiceRefRecId == originalProjInvoiceItem.RecId
                exists join creditNoteProjInvoiceItemDetail
                    where creditNoteProjInvoiceItemDetail.RecId == originalProjInvoiceItemDetail.RefRecId
                exists join creditNoteProjInvoiceItem
                    where creditNoteProjInvoiceItem.RecId == creditNoteProjInvoiceItemDetail.InvoiceRefRecId &&
                          creditNoteProjInvoiceItem.ProjInvoiceId == _invoiceId &&
                          creditNoteProjInvoiceItem.InvoiceDate == _transDate &&
                          creditNoteProjInvoiceItem.LineAmount < 0.
                {
                    found = true;
                    this.populateOriginalItemInvoiceIdAndDate(originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate, utcDateTimeNull(), _originalParentInvoiceSet);
                }
        }

        if (!found && (_invoiceId != this.ProjInvoiceId || _transDate != this.InvoiceDate))
        {
            _originalParentInvoiceSet.add([_invoiceId, _transDate]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginalRevenueInvoiceIdAndDate</Name>
				<Source><![CDATA[
    private void populateOriginalRevenueInvoiceIdAndDate(
        ProjInvoiceId _invoiceId,
        TransDate _transDate,
        CreatedDateTime _createdDateTime,
        Set _originalParentInvoiceSet)
    {
        ProjInvoiceRevenue originalProjInvoiceRevenue, creditNoteProjInvoiceRevenue;
        ProjInvoiceRevenueDetail originalProjInvoiceRevenueDetail, creditNoteProjInvoiceRevenueDetail;
        ProjInvoiceJour originalProjInvoiceJour;

        boolean found;

        if (ProjInvoiceJourOriginalInvoiceForNegativeTransPLFlight::instance().isEnabled())
        {
            while select ProjInvoiceId, InvoiceDate, CreatedDateTime from originalProjInvoiceJour
                where originalProjInvoiceJour.CreatedDateTime < _createdDateTime
                exists join originalProjInvoiceRevenue
                    where originalProjInvoiceRevenue.ProjInvoiceId == originalProjInvoiceJour.ProjInvoiceId
                        && originalProjInvoiceRevenue.InvoiceDate == originalProjInvoiceJour.InvoiceDate
                exists join originalProjInvoiceRevenueDetail
                    where originalProjInvoiceRevenueDetail.InvoiceRefRecId == originalProjInvoiceRevenue.RecId
                exists join creditNoteProjInvoiceRevenueDetail
                    where creditNoteProjInvoiceRevenueDetail.RecId == originalProjInvoiceRevenueDetail.RefRecId
                exists join creditNoteProjInvoiceRevenue
                    where creditNoteProjInvoiceRevenue.RecId == creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceRevenue.ProjInvoiceId == _invoiceId
                        && creditNoteProjInvoiceRevenue.InvoiceDate == _transDate
            {
                found = true;
                this.populateOriginalRevenueInvoiceIdAndDate(
                    originalProjInvoiceJour.ProjInvoiceId,
                    originalProjInvoiceJour.InvoiceDate,
                    originalProjInvoiceJour.CreatedDateTime,
                    _originalParentInvoiceSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceRevenue
                exists join originalProjInvoiceRevenueDetail
                    where originalProjInvoiceRevenueDetail.InvoiceRefRecId == originalProjInvoiceRevenue.RecId
                exists join creditNoteProjInvoiceRevenueDetail
                    where creditNoteProjInvoiceRevenueDetail.RecId == originalProjInvoiceRevenueDetail.RefRecId
                exists join creditNoteProjInvoiceRevenue
                    where creditNoteProjInvoiceRevenue.RecId == creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId &&
                          creditNoteProjInvoiceRevenue.ProjInvoiceId == _invoiceId &&
                          creditNoteProjInvoiceRevenue.InvoiceDate   == _transDate &&
                          creditNoteProjInvoiceRevenue.LineAmount < 0.
            {
                found = true;
                this.populateOriginalRevenueInvoiceIdAndDate(originalProjInvoiceRevenue.ProjInvoiceId, originalProjInvoiceRevenue.InvoiceDate, utcDateTimeNull(), _originalParentInvoiceSet);
            }
        }

        if (!found && (_invoiceId != this.ProjInvoiceId || _transDate != this.InvoiceDate))
        {
            _originalParentInvoiceSet.add([_invoiceId, _transDate]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginalCostInvoiceIdAndDate</Name>
				<Source><![CDATA[
    private void populateOriginalCostInvoiceIdAndDate(
        ProjInvoiceId _invoiceId,
        TransDate _transDate,
        CreatedDateTime _createdDateTime,
        Set _originalParentInvoiceSet)
    {
        ProjInvoiceCost originalProjInvoiceCost, creditNoteProjInvoiceCost;
        ProjInvoiceCostDetail originalProjInvoiceCostDetail, creditNoteProjInvoiceCostDetail;
        ProjInvoiceJour originalProjInvoiceJour;

        boolean found;

        if (ProjInvoiceJourOriginalInvoiceForNegativeTransPLFlight::instance().isEnabled())
        {
            while select ProjInvoiceId, InvoiceDate, CreatedDateTime from originalProjInvoiceJour
                where originalProjInvoiceJour.CreatedDateTime < _createdDateTime
                exists join originalProjInvoiceCost
                    where originalProjInvoiceCost.ProjInvoiceId == originalProjInvoiceJour.ProjInvoiceId
                        && originalProjInvoiceCost.InvoiceDate == originalProjInvoiceJour.InvoiceDate
                exists join originalProjInvoiceCostDetail
                    where originalProjInvoiceCostDetail.InvoiceRefRecId == originalProjInvoiceCost.RecId
                exists join creditNoteProjInvoiceCostDetail
                    where creditNoteProjInvoiceCostDetail.RecId == originalProjInvoiceCostDetail.RefRecId
                exists join creditNoteProjInvoiceCost
                    where creditNoteProjInvoiceCost.RecId == creditNoteProjInvoiceCostDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceCost.ProjInvoiceId == _invoiceId
                        && creditNoteProjInvoiceCost.InvoiceDate == _transDate
            {
                found = true;
                this.populateOriginalCostInvoiceIdAndDate(
                    originalProjInvoiceJour.ProjInvoiceId,
                    originalProjInvoiceJour.InvoiceDate,
                    originalProjInvoiceJour.CreatedDateTime,
                    _originalParentInvoiceSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceCost
                exists join originalProjInvoiceCostDetail
                    where originalProjInvoiceCostDetail.InvoiceRefRecId == originalProjInvoiceCost.RecId
                exists join creditNoteProjInvoiceCostDetail
                    where creditNoteProjInvoiceCostDetail.RecId == originalProjInvoiceCostDetail.RefRecId
                exists join creditNoteProjInvoiceCost
                    where creditNoteProjInvoiceCost.RecId == creditNoteProjInvoiceCostDetail.InvoiceRefRecId &&
                          creditNoteProjInvoiceCost.ProjInvoiceId == _invoiceId &&
                          creditNoteProjInvoiceCost.InvoiceDate   == _transDate &&
                          creditNoteProjInvoiceCost.LineAmount < 0.
            {
                found = true;
                this.populateOriginalCostInvoiceIdAndDate(originalProjInvoiceCost.ProjInvoiceId, originalProjInvoiceCost.InvoiceDate, utcDateTimeNull(), _originalParentInvoiceSet);
            }
        }

        if (!found && (_invoiceId != this.ProjInvoiceId || _transDate != this.InvoiceDate))
        {
            _originalParentInvoiceSet.add([_invoiceId, _transDate]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginalEmplInvoiceIdAndDate</Name>
				<Source><![CDATA[
    private void populateOriginalEmplInvoiceIdAndDate(
        ProjInvoiceId _invoiceId,
        TransDate _transDate,
        CreatedDateTime _createdDateTime,
        Set _originalParentInvoiceSet)
    {
        ProjInvoiceEmpl originalProjInvoiceEmpl, creditNoteProjInvoiceEmpl;
        ProjInvoiceEmplDetail originalProjInvoiceEmplDetail, creditNoteProjInvoiceEmplDetail;
        ProjInvoiceJour originalProjInvoiceJour;

        boolean found;

        if (ProjInvoiceJourOriginalInvoiceForNegativeTransPLFlight::instance().isEnabled())
        {
            while select ProjInvoiceId, InvoiceDate, CreatedDateTime from originalProjInvoiceJour
                where originalProjInvoiceJour.CreatedDateTime < _createdDateTime
                exists join originalProjInvoiceEmpl
                    where originalProjInvoiceEmpl.ProjInvoiceId == originalProjInvoiceJour.ProjInvoiceId
                        && originalProjInvoiceEmpl.InvoiceDate == originalProjInvoiceJour.InvoiceDate
                exists join originalProjInvoiceEmplDetail
                    where originalProjInvoiceEmplDetail.InvoiceRefRecId == originalProjInvoiceEmpl.RecId
                exists join creditNoteProjInvoiceEmplDetail
                    where creditNoteProjInvoiceEmplDetail.RecId == originalProjInvoiceEmplDetail.RefRecId
                exists join creditNoteProjInvoiceEmpl
                    where creditNoteProjInvoiceEmpl.RecId == creditNoteProjInvoiceEmplDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceEmpl.ProjInvoiceId == _invoiceId
                        && creditNoteProjInvoiceEmpl.InvoiceDate == _transDate
            {
                found = true;
                this.populateOriginalEmplInvoiceIdAndDate(
                    originalProjInvoiceJour.ProjInvoiceId,
                    originalProjInvoiceJour.InvoiceDate,
                    originalProjInvoiceJour.CreatedDateTime,
                    _originalParentInvoiceSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceEmpl
                exists join originalProjInvoiceEmplDetail
                    where originalProjInvoiceEmplDetail.InvoiceRefRecId == originalProjInvoiceEmpl.RecId
                exists join creditNoteProjInvoiceEmplDetail
                    where creditNoteProjInvoiceEmplDetail.RecId == originalProjInvoiceEmplDetail.RefRecId
                exists join creditNoteProjInvoiceEmpl
                    where creditNoteProjInvoiceEmpl.RecId == creditNoteProjInvoiceEmplDetail.InvoiceRefRecId &&
                          creditNoteProjInvoiceEmpl.ProjInvoiceId == _invoiceId &&
                          creditNoteProjInvoiceEmpl.InvoiceDate == _transDate &&
                          creditNoteProjInvoiceEmpl.LineAmount < 0.
            {
                found = true;
                this.populateOriginalEmplInvoiceIdAndDate(originalProjInvoiceEmpl.ProjInvoiceId, originalProjInvoiceEmpl.InvoiceDate, utcDateTimeNull(), _originalParentInvoiceSet);
            }
        }

        if (!found && (_invoiceId != this.ProjInvoiceId || _transDate != this.InvoiceDate))
        {
            _originalParentInvoiceSet.add([_invoiceId, _transDate]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOriginalOnAccInvoiceIdAndDate</Name>
				<Source><![CDATA[
    private void populateOriginalOnAccInvoiceIdAndDate(
        ProjInvoiceId _invoiceId,
        TransDate _transDate,
        CreatedDateTime _createdDateTime,
        Set _originalParentInvoiceSet)
    {
        ProjInvoiceOnAcc originalProjInvoiceOnAcc, creditNoteProjInvoiceOnAcc;
        ProjInvoiceOnAccDetail originalProjInvoiceOnAccDetail, creditNoteProjInvoiceOnAccDetail;
        ProjInvoiceJour originalProjInvoiceJour;

        boolean found;

        if (ProjInvoiceJourOriginalInvoiceForNegativeTransPLFlight::instance().isEnabled())
        {
            while select ProjInvoiceId, InvoiceDate, CreatedDateTime from originalProjInvoiceJour
                where originalProjInvoiceJour.CreatedDateTime < _createdDateTime
                exists join originalProjInvoiceOnAcc
                    where originalProjInvoiceOnAcc.ProjInvoiceId == originalProjInvoiceJour.ProjInvoiceId
                        && originalProjInvoiceOnAcc.InvoiceDate == originalProjInvoiceJour.InvoiceDate
                exists join originalProjInvoiceOnAccDetail
                    where originalProjInvoiceOnAccDetail.InvoiceRefRecId == originalProjInvoiceOnAcc.RecId
                exists join creditNoteProjInvoiceOnAccDetail
                    where creditNoteProjInvoiceOnAccDetail.RecId == originalProjInvoiceOnAccDetail.RefRecId
                exists join creditNoteProjInvoiceOnAcc
                    where creditNoteProjInvoiceOnAcc.RecId == creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId
                        && creditNoteProjInvoiceOnAcc.ProjInvoiceId == _invoiceId
                        && creditNoteProjInvoiceOnAcc.InvoiceDate == _transDate
            {
                found = true;
                this.populateOriginalOnAccInvoiceIdAndDate(
                    originalProjInvoiceJour.ProjInvoiceId,
                    originalProjInvoiceJour.InvoiceDate,
                    originalProjInvoiceJour.CreatedDateTime,
                    _originalParentInvoiceSet);
            }
        }
        else
        {
            while select ProjInvoiceId, InvoiceDate from originalProjInvoiceOnAcc
                exists join originalProjInvoiceOnAccDetail
                    where originalProjInvoiceOnAccDetail.InvoiceRefRecId == originalProjInvoiceOnAcc.RecId
                exists join creditNoteProjInvoiceOnAccDetail
                    where creditNoteProjInvoiceOnAccDetail.RecId == originalProjInvoiceOnAccDetail.RefRecId
                exists join creditNoteProjInvoiceOnAcc
                    where creditNoteProjInvoiceOnAcc.RecId == creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId &&
                          creditNoteProjInvoiceOnAcc.ProjInvoiceId == _invoiceId &&
                          creditNoteProjInvoiceOnAcc.InvoiceDate == _transDate &&
                          creditNoteProjInvoiceOnAcc.Amount < 0.
            {
                found = true;
                this.populateOriginalOnAccInvoiceIdAndDate(originalProjInvoiceOnAcc.ProjInvoiceId, originalProjInvoiceOnAcc.InvoiceDate, utcDateTimeNull(), _originalParentInvoiceSet);
            }
        }

        if (!found && (_invoiceId != this.ProjInvoiceId || _transDate != this.InvoiceDate))
        {
            _originalParentInvoiceSet.add([_invoiceId, _transDate]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets amount MST for Standard Audit File in the European Union.
    /// </summary>
    /// <returns>Journal amount MST.</returns>
    public AmountMST amountMST_W()
    {
        return this.amountMST(this.InvoiceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totaltaxAmountRetained_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sum of the <c>SourceRegulateAmountCur</c> fields from Tax trans related to the vendor journal.
    /// </summary>
    /// <returns>A real value with the total retained tax amount.</returns>
    public TaxAmountCur totaltaxAmountRetained_BR()
    {
        return this.CustVendInvoiceJour::totaltaxAmountRetained_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegData_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax registration data for the specified element of the global address book.
    /// </summary>
    /// <returns>
    /// Class <c>SIIGetTaxRegData</c> with calculated tax regisration data.
    /// </returns>
    public SIIGetTaxRegData getTaxRegData_ES()
    {
        return SIIGetTaxRegData::findByCustVendInvoiceJour(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceDescription_ES</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets description of the assets acquired.
    /// </summary>
    /// <returns>
    /// Description of the assets acquired.
    /// </returns>
    public str getInvoiceDescription_ES()
    {
        return SIIGetInvoiceDescription::getInvoiceDescription(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxMST_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum tax MST for RegFs in the European Union.
    /// </summary>
    /// <returns>Journal sum tax MST.</returns>
    public AmountMST sumTaxMST_W()
    {
        return this.amountMST(this.SumTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfProjInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record count of <c>ProjInvoiceJour</c>.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// Count of <c>ProjInvoiceJour</c> record.
    /// </returns>
    internal static int calcNumOfProjInvoiceJour(CustAccount _accountNum)
    {
        ProjInvoiceJour projInvoiceJour;

        select count(RecId) from projInvoiceJour
            where projInvoiceJour.InvoiceAccount == _accountNum;

        return projInvoiceJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceSumInMSTForProjectInvoicesInMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of <c>SalesOrderbalance</c> in table <c>ProjInvoiceJour</c>.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// Sum of <c>SalesOrderbalance</c> in table <c>ProjInvoiceJour</c>.
    /// </returns>
    internal static Amount calculateInvoiceSumInMSTForProjectInvoicesInMST(CustAccount _accountNum)
    {
        ProjInvoiceJour projInvoiceJour;

        select sum(SalesOrderbalance) from projInvoiceJour
            where projInvoiceJour.InvoiceAccount == _accountNum
                && projInvoiceJour.CurrencyId == Ledger::accountingCurrency();

        return projInvoiceJour.SalesOrderbalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateInvoiceSumInMSTForProjectInvoicesNotInMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sum of amountMST in table <c>ProjInvoiceJour</c>.
    /// </summary>
    /// <param name="_accountNum">
    /// The account number.
    /// </param>
    /// <returns>
    /// Sum of amountMST in table <c>ProjInvoiceJour</c>.
    /// </returns>
    internal static AmountMST calculateInvoiceSumInMSTForProjectInvoicesNotInMST(CustAccount _accountNum)
    {
        ProjInvoiceJour projInvoiceJour;
        AmountMST amountMST = 0;

        while select * from projInvoiceJour
            where projInvoiceJour.InvoiceAccount == _accountNum
                && projInvoiceJour.CurrencyId != Ledger::accountingCurrency()
        {
            amountMST += projInvoiceJour.amountMST(projInvoiceJour.SalesOrderbalance);
        }

        return amountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQRCode_SA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the QR code is received from ZATCA.
    /// </summary>
    /// <returns> True, if the QR code is received.</returns>
    display IsQRCodeReceived_SA checkQRCode_SA()
    {
        return this.QRCode_SA != "";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124906</DeveloperDocumentation>
	<FormRef>ProjInvoiceJournal</FormRef>
	<Label>@SYS10619</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjInvoiceId</TitleField1>
	<TitleField2>ProjInvoiceProjId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>InvoiceAccountIdx</ClusteredIndex>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>TransportationDocument</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>TransportationDocument</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceCost</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceCost</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceEmpl</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceEmpl</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceItem</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceItem</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceOnAcc</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceOnAcc</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceRevenue</Name>
			<DeleteAction>CascadeRestricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceRevenue</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Address_RU</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>countryRegionId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AddressDisplay</Name>
			<Label>@SYS9362</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>deliveryAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Amount</Name>
			<Label>@SYS12227</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceRoundOff</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OnAccountAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderbalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumMarkup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AmountTotal</Name>
			<Label>@SYS53072</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionMargin</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumLineDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesOrderbalance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SumTax</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Currency</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExchrateSecondary</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CurrencyShow</Name>
			<Label>@SYS7572</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editExchRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Triangulation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sumTaxEuro</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrderAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Payment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymDayId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Data</Name>
			<Label>@SYS7403</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Volume</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EInvoice</Name>
			<Label>@SYS100769</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EInvoiceLineSpecific</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId_NO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder_NO</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRef_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InterCompany</Name>
			<Label>@SYS74106</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InterCompanyPosted</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Intrastat</Name>
			<Label>@SYS6530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IntrastatDispatchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ListCodeId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Port</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EUSalesList</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IntrastatAddValue_LV</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS12128</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDisc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CashDiscPercent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintedOriginals</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesDate_CZ</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DocumentDate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InvoiceNumbering_LT</Name>
			<Label>@GLS113292</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceNumberingCode_LT</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WhoIsAuthor_LT</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Languages</Name>
			<Label>@SYS15819</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ledger</Name>
			<Label>@SYS13356</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Matching</Name>
			<Label>@SYS88145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS73543</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PostingJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Narration_BR</Name>
			<Label>@GLS510023</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Narration_BR</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionAmountMST</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>contributionRatioMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PaymentSchedule</Name>
			<Label>@SYS23027</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PaymentSched</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PrintingSpecifications</Name>
			<Label>@SYS28138</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Project</Name>
			<Label>@SYS4534</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAInvoiceFormats</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSAEndDateMaxInvoiceId</Name>
			<Label>@SYS40804</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAEndDateMaxInvoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Reason</Name>
			<Label>@GLS220480</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editReasonCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editReasonComment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSpecifyTotal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxSpecifyByLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPrintOnInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EnterpriseNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subscription</Name>
			<Label>@SYS14482</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SMASpecIndexCalc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherNumberSequenceTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation_IN</Name>
			<Label>@SYS33652</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxInformation_IN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TermsOfDelivery</Name>
			<Label>@SYS6576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DlvTerm</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DlvMode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WebCategoryBrowsing</Name>
			<Label>@SYS74258</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>GSTInvoice_MY</Name>
			<Label>@SYP4860622</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InvoiceType_MY</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NoteType_MY</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CFDI</Name>
			<Label>@Mexico:EInvoice_CustInvoiceJour_CFDITableGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>VATNum</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VATNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATNumTableType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrderAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Label>@SYS22016</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDisc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CashDiscCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CashDiscDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCashDiscDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CashDiscPercent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>ES</CountryRegionCodes>
			<ExtendedDataType>DiscPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostValue</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CostAmountProject</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DimensionDefault</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DeliveryName</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
			<GroupPrompt>@SYS7399</GroupPrompt>
			<Label>@SYS22058</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DirectDebitMandate</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvMode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DlvTerm</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DocumentDate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>CZ,EE,HU,LT,LV,PL,DE</CountryRegionCodes>
			<ExtendedDataType>DocumentDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EInvoiceLineSpecific</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceLineSpecific</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>EndDisc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@SYS6465</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EnterpriseNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxEnterpriseNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EUSalesList</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListDispatchId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchRate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchRate</ExtendedDataType>
			<Label>@SYS4193</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchrateSecondary</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExchrateSecondary</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubProjId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InterCompanyPosted</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InterCompanyPosted</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>IntrastatAddValue_LV</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LvIntrastatAddValue</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IntrastatDispatchId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatDispatchId</ExtendedDataType>
			<FeatureClass>IntrastatDispatchIdToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceAccount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustInvoiceAccount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9458</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>InvoiceDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceNumberingCode_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT,LV</CountryRegionCodes>
			<ExtendedDataType>NumberSequenceCode</ExtendedDataType>
			<Label>@GLS113288</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>InvoiceRoundOff</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RoundOff</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLanguageId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ListCodeId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ListcodeId</ExtendedDataType>
			<FeatureClass>EUSalesListToggle</FeatureClass>
			<EnumType>Listcode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Narration_BR</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>BR</CountryRegionCodes>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@GLS510023</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>NumberSequenceGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NumberSequenceGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OnAccountAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS7659</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymDayId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPaymDayId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Payment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjPaymCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentSched</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymSchedId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Port</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>IntrastatPortId</ExtendedDataType>
			<FeatureClass>IntrastatPortToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingJournalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerPostingJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>PrintedOriginals</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PrintedOriginals</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjGroupId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjInvoiceProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceProjId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProjInvoiceType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProjInvoiceType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProposalId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjProposalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAEndDateMaxInvoiceId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjInvoiceId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PSAInvoiceFormats</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PSAInvoiceFormats</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesQty</ExtendedDataType>
			<Label>@SYS14578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonTableRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SalesDate_CZ</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CzSalesDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SalesOrderbalance</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS464</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SMASpecIndexCalc</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SMASpecIndexCalc</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentHeader</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumLineDisc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DiscAmount</ExtendedDataType>
			<Label>@SYS9913</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumMarkup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>MarkupSumSales</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>SumTax</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmountCur</ExtendedDataType>
			<Label>@SYS5878</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxInformation_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>IN</CountryRegionCodes>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxPrintOnInvoice</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPrintOnInvoice</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSpecifyByLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS19934</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxSpecifyTotal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS19934</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TransportationDocument</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TransportationDocumentRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Triangulation</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EUROTriangulation</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATNumJournal</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Volume</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Volume</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VoucherNumberSequenceTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjVoucherNumberSequenceTable</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Weight</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>WhoIsAuthor_LT</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>LT</CountryRegionCodes>
			<EnumType>LtDocOriginator</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InvoiceType_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYP4860656</Label>
			<EnumType>InvoiceType_MY</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NoteType_MY</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>NoteType_MY</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId_NO</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrder_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRef_NO</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<CountryRegionCodes>NO</CountryRegionCodes>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<CountryRegionCodes>TH</CountryRegionCodes>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SentElectronically</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS4004070</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsProforma</Name>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@Proj:Proforma</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PartyTaxID</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxRegistrationRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerDefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<FeatureClass>ProjEnableInvoiceFormsHeaderLineViewFeature</FeatureClass>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VATNumRecId</Name>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>VATNumTableType</Name>
			<Visible>No</Visible>
			<EnumType>TaxExemptNumberSourceType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ParmIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_ProjInvoic</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OrderAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>OrderAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjInvoiceId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumberSequenceTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VoucherNumberSequenceTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>SourceDocumentHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustDirectDebitMandateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DirectDebitMandate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>InvoiceAccountVoucherDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InvoiceAccount</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerVoucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>DeliveryPostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CurrencyCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>CustVendInvoiceJour</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AttorneyDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>AttorneyIssuedName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDisc</MapField>
					<MapFieldTo>CashDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscBaseDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscCode</MapField>
					<MapFieldTo>CashDiscCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CashDiscDate</MapField>
					<MapFieldTo>CashDiscDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsigneeAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsignorAccount_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ConsInvoice_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceDate_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CorrectedInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Correct_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryDate_ES</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryName_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryPostalAddress_RU</MapField>
					<MapFieldTo>DeliveryPostalAddress</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentDate</MapField>
					<MapFieldTo>DocumentDate_W</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DocumentNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DueDate</MapField>
					<MapFieldTo>DueDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRateSecondary</MapField>
					<MapFieldTo>ExchrateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FacturedFully_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FactureModule_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>FixedDueDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>GroupId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatFulfillmentDate_HU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventOwnerId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventProfileType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_JP</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAmountMST_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceNum</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceRegister_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceStatus_LT</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LanguageId</MapField>
					<MapFieldTo>LanguageId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MCRPaymOrderID</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NonRealRevenue_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>ProjInvoiceProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceCode_LT</MapField>
					<MapFieldTo>InvoiceNumberingCode_LT</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroupId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OffSessionId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OneTimeAccount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderAccount</MapField>
					<MapFieldTo>OrderAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
					<MapFieldTo>PartyTaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymDayId</MapField>
					<MapFieldTo>PaymDayId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Payment</MapField>
					<MapFieldTo>Payment</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentSched</MapField>
					<MapFieldTo>PaymentSched</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymId</MapField>
					<MapFieldTo>PaymId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PostingProfile</MapField>
					<MapFieldTo>PostingProfile</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Prepayment</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintCopies_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintOriginals_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PrintStandardCurrency_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Proforma</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PurchInternalInvoiceId_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff_W</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesInvoicePostingType_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesOrderbalance</MapField>
					<MapFieldTo>SalesOrderbalance</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SentElectronically</MapField>
					<MapFieldTo>SentElectronically</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceDocumentHeader_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SumTax</MapField>
					<MapFieldTo>SumTax</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
					<MapFieldTo>TaxID</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
					<MapFieldTo>Triangulation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>UnitedVATInvoice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Updated</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATOnPayment_RU</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VendPaymentGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WhoIsAuthor_LT</MapField>
					<MapFieldTo>WhoIsAuthor_LT</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>FormletterJournal</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>EndDisc</MapField>
					<MapFieldTo>EndDisc</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchRate</MapField>
					<MapFieldTo>ExchRate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExchrateSecondary</MapField>
					<MapFieldTo>ExchrateSecondary</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
					<MapFieldTo>NumberSequenceGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>ProjInvoiceProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundOff</MapField>
					<MapFieldTo>InvoiceRoundOff</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Triangulation</MapField>
					<MapFieldTo>Triangulation</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxIntgrExportDocumentSourceMap_CN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceAccount</MapField>
					<MapFieldTo>InvoiceAccount</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceDate</MapField>
					<MapFieldTo>InvoiceDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceId</MapField>
					<MapFieldTo>ProjInvoiceId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LedgerVoucher</MapField>
					<MapFieldTo>LedgerVoucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRelationType</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionCurrencyAmount</MapField>
					<MapFieldTo>InvoiceAmount</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>TaxExemptVATNumMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>VATNum</MapField>
					<MapFieldTo>VATNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumRecId</MapField>
					<MapFieldTo>VATNumRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>VATNumTableType</MapField>
					<MapFieldTo>VATNumTableType</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalTable</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InclTax</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ListCode</MapField>
					<MapFieldTo>ListCodeId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PartyTaxId</MapField>
					<MapFieldTo>PartyTaxId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Posted</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxId</MapField>
					<MapFieldTo>TaxId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CashDisc</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CashDisc</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CashDisc</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CashDiscCode</Name>
					<SourceEDT>ProjCashDiscCode</SourceEDT>
					<Field>CashDiscCode</Field>
					<RelatedField>CashDiscCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustDirectDebitMandate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustDirectDebitMandate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DirectDebitMandate</Name>
					<Field>DirectDebitMandate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustLedger</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124909</EntityRelationshipRole>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceAccount</Name>
					<SourceEDT>CustInvoiceAccount</SourceEDT>
					<Field>InvoiceAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable_Order</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable_Order</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrderAccount</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>OrderAccount</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DeliveryPostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsPostalAddress</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsPostalAddress_ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvMode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvMode</Name>
					<SourceEDT>CustDlvModeId</SourceEDT>
					<Field>DlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DlvTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DlvTerm</Name>
					<SourceEDT>CustDlvTermId</SourceEDT>
					<Field>DlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IntrastatPort</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>IntrastatPort</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>IntrastatPort</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Port</Name>
					<SourceEDT>IntrastatPortId</SourceEDT>
					<Field>Port</Field>
					<RelatedField>PortId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PortIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Key</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable1</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LanguageTable1</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>ProjLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerPostingJournal</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerPostingJournal</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerPostingJournal</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingJournalId</Name>
					<SourceEDT>LedgerPostingJournalId</SourceEDT>
					<Field>PostingJournalId</Field>
					<RelatedField>LedgerPostingJournalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Primarykey</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>NumberSequenceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceGroupId</Name>
					<SourceEDT>NumberSequenceGroupId</SourceEDT>
					<Field>NumberSequenceGroupId</Field>
					<RelatedField>numberSequenceGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>groupId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>NumberSequenceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VoucherNumberSequenceTable</Name>
					<Field>VoucherNumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymDay</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymDay</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymDay</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymDayId</Name>
					<SourceEDT>CustPaymDayId</SourceEDT>
					<Field>PaymDayId</Field>
					<RelatedField>PaymDayId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PaymDayIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymSched</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentSched</Name>
					<SourceEDT>PaymSchedId</SourceEDT>
					<Field>PaymentSched</Field>
					<RelatedField>Name</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>NameIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Payment</Name>
					<SourceEDT>ProjPaymCode</SourceEDT>
					<Field>Payment</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjGroupId</Name>
					<SourceEDT>ProjGroupId</SourceEDT>
					<Field>ProjGroupId</Field>
					<RelatedField>ProjGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjInvoiceTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjInvoiceProjId</Name>
					<SourceEDT>ProjInvoiceProjId</SourceEDT>
					<Field>ProjInvoiceProjId</Field>
					<RelatedField>ProjInvoiceProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjInvoiceIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjProposalJour</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjProposalJour</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjProposalJour</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProposalId</Name>
					<SourceEDT>ProjProposalId</SourceEDT>
					<Field>ProposalId</Field>
					<RelatedField>ProposalId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProposalNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentHeader</Name>
					<Field>SourceDocumentHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxGroupHeading</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxInformation_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxInformation_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxInformation_IN</Name>
					<Field>TaxInformation_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TransportationDocument</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TransportationDocument</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransportationDocument</Name>
					<Field>TransportationDocument</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ContactPerson_NO</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId_NO</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId_NO</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_ProjInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxID</Name>
					<Field>TaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PartyTaxRegistration</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxRegistration</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PartyTaxRegistration</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxRegistration_ProjInvoiceJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PartyTaxID</Name>
					<Field>PartyTaxID</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerDefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjInvoiceJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerDefaultDimension</Name>
					<Field>LedgerDefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>