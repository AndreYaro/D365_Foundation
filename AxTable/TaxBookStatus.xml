<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBookStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxBookStatus extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (this.TaxBookStatusType == TaxBookStatusType::TaxSummary &&
            this.FirstPageNo == 0)
        {
            this.FirstPageNo = 1;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(TaxBookStatus, TaxBookStatusType):
                ret = this.validateTaxBookType() && ret;
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxBookType</Name>
				<Source><![CDATA[
    public boolean validateTaxBookType()
    {
        boolean         ret = true;
        TaxBookStatus   bookStatus;

        if (this.TaxBookStatusType == TaxBookStatusType::TaxSummary)
        {
            select firstOnly RecId from bookStatus
               where bookStatus.TaxPeriod         == this.TaxPeriod
                  && bookStatus.FromDate          == this.FromDate
                  && bookStatus.ToDate            == this.ToDate
                  && bookStatus.TaxBookStatusType == TaxBookStatusType::TaxSummary
                  && bookStatus.RecId             != this.RecId;

            if (bookStatus.RecId != 0)
            {
                ret = checkFailed("@SYS330963");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.TaxBookStatusType == TaxBookStatusType::TaxBook &&
                !this.TaxBook)
            {
                ret = checkFailed("@SYS107593");
            }
            if (this.TaxBookStatusType == TaxBookStatusType::TaxSummary &&
                    this.TaxBook)
            {
                ret = checkFailed("@SYS107594");
            }

            ret = this.validateTaxBookType() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(
        TaxPeriod       _taxPeriod,
        TaxPeriodDate   _fromDate,
        TaxPeriodDate   _toDate,
        TaxBookRecId    _taxBookRecId)
    {
        boolean ret = true;

        if (!TaxBookStatus::exist(_taxPeriod, _fromDate, _toDate, _taxBookRecId))
        {
            ret = checkFailed(strfmt(TaxBookStatus::txtNotExist(), _taxPeriod, _fromDate, _toDate, _taxBookRecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForTaxReportPeriod</Name>
				<Source><![CDATA[
    static void createForTaxReportPeriod(TaxReportPeriod _taxReportPeriod)
    {
        TaxBook          taxBook;
        TaxBookStatus    taxBookStatus;
        TaxReportPeriod  taxReportPeriodPrevious;
        TaxBookStatus    taxBookStatusPrevious;

        ttsbegin;

        while select * from taxBook
              where taxBook.TaxPeriod == _taxReportPeriod.TaxPeriod
        {
            taxBookStatus.clear();
            taxBookStatus.TaxPeriod = _taxReportPeriod.TaxPeriod;
            taxBookStatus.FromDate  = _taxReportPeriod.FromDate;
            taxBookStatus.ToDate    = _taxReportPeriod.ToDate;
            taxBookStatus.TaxBook   = taxBook.RecId;

            taxReportPeriodPrevious = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                            _taxReportPeriod.FromDate - 1);
            if (taxReportPeriodPrevious.RecId &&
                ! taxReportPeriodPrevious.LastPeriod)
            {
                taxBookStatusPrevious = TaxBookStatus::findByPeriodDateBookId(taxReportPeriodPrevious.TaxPeriod,
                                                                              taxReportPeriodPrevious.FromDate,
                                                                              taxReportPeriodPrevious.ToDate,
                                                                              taxBookStatus.TaxBook);
                if (taxBookStatusPrevious.RecId)
                {
                    taxBookStatus.FirstPageNo = taxBookStatusPrevious.LastPageNo + 1;
                }
                else
                {
                    taxBookStatus.FirstPageNo = 1;
                    if (TaxAuthorityAddress::find(TaxPeriodHead::find(_taxReportPeriod.TaxPeriod).TaxAuthority).PrintBlankPage)
                    {
                        taxBookStatus.LastPageNo = 1;
                    }
                }
            }
            else
            {
                if (TaxAuthorityAddress::find(TaxPeriodHead::find(_taxReportPeriod.TaxPeriod).TaxAuthority).PrintBlankPage)
                {
                    taxBookStatus.FirstPageNo = 1;
                    taxBookStatus.LastPageNo  = 1;
                }
            }
            taxBookStatus.insert();
        }
        if (taxReportPeriodPrevious.RecId)
        {
            taxBookStatusPrevious = TaxBookStatus::findByPeriodDateBookId(taxReportPeriodPrevious.TaxPeriod,
                                                                          taxReportPeriodPrevious.FromDate,
                                                                          taxReportPeriodPrevious.ToDate);
            if (taxBookStatusPrevious.RecId &&
                taxBookStatusPrevious.TaxBookStatusType == TaxBookStatusType::TaxSummary)
            {
                taxBookStatus.clear();
                taxBookStatus.TaxPeriod = _taxReportPeriod.TaxPeriod;
                taxBookStatus.FromDate  = _taxReportPeriod.FromDate;
                taxBookStatus.ToDate    = _taxReportPeriod.ToDate;
                taxBookStatus.FirstPageNo = taxBookStatusPrevious.LastPageNo + 1;
                taxBookStatus.TaxBookStatusType = TaxBookStatusType::TaxSummary;
                taxBookStatus.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(
        TaxPeriod       _taxPeriod,
        TaxPeriodDate   _fromDate,
        TaxPeriodDate   _toDate,
        TaxBookRecId    _taxBookRecId)
    {
        boolean found;

        found = (select firstonly RecId from taxBookStatus
                    where taxBookStatus.TaxPeriod == _taxPeriod
                       && taxBookStatus.FromDate  == _fromDate
                       && taxBookStatus.ToDate    == _toDate
                       && taxBookStatus.TaxBook   == _taxBookRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record from the <c>TaxBookStatus</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>TaxBookStatus</c> table; otherwise, an empty record.
    /// </returns>
    public static TaxBookStatus find(
        RefRecId         _recId,
        boolean          _forupdate        = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookStatus taxBookStatus;

        taxBookStatus.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookStatus.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxBookStatus
            where taxBookStatus.RecId == _recId;

        return taxBookStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByPeriodDateBookId</Name>
				<Source><![CDATA[
    public static TaxBookStatus findByPeriodDateBookId(
        TaxPeriod        _taxPeriod,
        TaxPeriodDate    _fromDate,
        TaxPeriodDate    _toDate,
        TaxBookRecId     _taxBookRecId     = 0,
        boolean          _forupdate        = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxBookStatus taxBookStatus;

        taxBookStatus.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxBookStatus.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxBookStatus
            where taxBookStatus.TaxPeriod == _taxPeriod
               && taxBookStatus.FromDate  == _fromDate
               && taxBookStatus.ToDate    == _toDate
               && taxBookStatus.TaxBook   == _taxBookRecId;

        return taxBookStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstPageNo</Name>
				<Source><![CDATA[
    static PageNo getFirstPageNo(TaxReportPeriod _taxReportPeriod,
                                        TaxBookId       _taxBookId = '',
                                        NoYes           _update = false)
    {
        PageNo           firstPageNo;
        TaxBookStatus    taxBookStatus;
        TaxBookStatus    taxBookStatusPrevious;
        TaxReportPeriod  taxReportPeriodPrevious;
        TaxBookRecId     taxBookRecId;

        // The TaxBookStatus record for the TaxReportPeriod and the TaxBook is selected.

        // If an update is made and the TaxBookStatus record exists:
        // If the changed page number is filled this is returned.
        // Else: If the first page number is 0, it is set to 1. The first page number
        // of the TaxBookStatus record is returned.

        // If no update is made and the TaxBookStatus record exists:
        // If the changed page number is filled this is returned.
        // Else if the first page number is not 0 this is returned.
        // Else 1 is returned.

        // If an update is made and no TaxBookStatus record exists it is created. If the
        // previous TaxbookStatus record exists and the 'last period' of the previous
        // TaxReportPeriod record is not activated, the first page number is filled with
        // last page number + 1 of the previous TaxReportPeriod record. Else the first
        // page number is set to 1.
        //The first page number of the TaxBookStatus record is returned.

        // If no update is made and no TaxBookStatus record exists:
        // If the previous TaxbookStatus record exists and the 'last period' of the
        // previous TaxReportPeriod record is not activated, the last page number + 1
        // of the previous TaxReportPeriod record is returned.
        // Else 1 is returned.

        ttsbegin;

        taxBookRecId  = TaxBook::findByTaxBookId(_taxBookId).RecId;
        taxBookStatus = TaxBookStatus::findByPeriodDateBookId(_taxReportPeriod.TaxPeriod,
                                                              _taxReportPeriod.FromDate,
                                                              _taxReportPeriod.ToDate,
                                                              taxBookRecId,
                                                              true);
        if (taxBookStatus.RecId)
        {
            if (_update)
            {
                if (taxBookStatus.ChangedPageNo != 0)
                {
                    firstPageNo = taxBookStatus.ChangedPageNo;
                }
                else
                {
                    if (taxBookStatus.FirstPageNo == 0)
                    {
                        taxBookStatus.FirstPageNo = 1;
                        taxBookStatus.update();
                    }
                    firstPageNo = taxBookStatus.FirstPageNo;
                }
            }
            else
            {
                if (taxBookStatus.ChangedPageNo != 0)
                {
                    firstPageNo = taxBookStatus.ChangedPageNo;
                }
                else if (taxBookStatus.FirstPageNo == 0)
                {
                    firstPageNo = 1;
                }
                else
                {
                    firstPageNo = taxBookStatus.FirstPageNo;
                }
            }
        }
        else
        {
            taxReportPeriodPrevious = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                        _taxReportPeriod.FromDate - 1);
            if (taxReportPeriodPrevious.RecId &&
                ! taxReportPeriodPrevious.LastPeriod)
            {
                taxBookStatusPrevious = TaxBookStatus::findByPeriodDateBookId(taxReportPeriodPrevious.TaxPeriod,
                                                                              taxReportPeriodPrevious.FromDate,
                                                                              taxReportPeriodPrevious.ToDate,
                                                                              taxBookRecId);

                firstPageNo = taxBookStatusPrevious.LastPageNo + 1;
            }
            else
            {
                firstPageNo = 1;
            }

            if (_update)
            {
                taxBookStatus.clear();
                taxBookStatus.TaxPeriod         = _taxReportPeriod.TaxPeriod;
                taxBookStatus.FromDate          = _taxReportPeriod.FromDate;
                taxBookStatus.ToDate            = _taxReportPeriod.ToDate;
                taxBookStatus.TaxBook           = taxBookRecId;
                taxBookStatus.FirstPageNo       = firstPageNo;
                taxBookStatus.TaxBookStatusType =  taxBookStatusPrevious.TaxBookStatusType;
                taxBookStatus.insert();
            }
        }

        ttscommit;

        return firstPageNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPageNo</Name>
				<Source><![CDATA[
    static void setLastPageNo(TaxReportPeriod _taxReportPeriod,
                                     TaxBookId       _taxBookId,
                                     PageNo          _pageNo)
    {
        TaxBookStatus    taxBookStatus;

        ttsbegin;

        taxBookStatus = TaxBookStatus::findByPeriodDateBookId(_taxReportPeriod.TaxPeriod,
                                                              _taxReportPeriod.FromDate,
                                                              _taxReportPeriod.ToDate,
                                                              TaxBook::findByTaxBookId(_taxBookId).RecId,
                                                              true);

        if (taxBookStatus.RecId)
        {
            taxBookStatus.LastPageNo = _pageNo;
            taxBookStatus.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS103287";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePageNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    ///     The method carries out the operations connected with change of page number for TaxReport
    /// </summary>
    /// <param name="_taxReportPeriod">
    ///     Period of creation of TaxReport
    /// </param>
    public static void updatePageNumbers(TaxReportPeriod _taxReportPeriod)
    {
        TaxReportPeriod  nextTaxReportPeriod;
        TaxReportPeriod  previousTaxReportPeriod;
        TaxBookStatus    taxBookStatus;
        TaxBookStatus    nextTaxBookStatus;
        TaxBookStatus    previousTaxBookStatus;
        boolean          printBlankPage=false;

        // Selection of the the previous TaxReportPeriod
        previousTaxReportPeriod  = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                         _taxReportPeriod.FromDate - 1);

        printBlankPage = TaxAuthorityAddress::find(TaxPeriodHead::find(_taxReportPeriod.TaxPeriod).TaxAuthority).PrintBlankPage;

        ttsbegin;

        if (previousTaxReportPeriod.RecId)
        {
            // Selection of all TaxBookStatus records with LastPageNo = 0 for the transferred TaxReportPeriod
            while select forupdate taxBookStatus
                  index hint TaxBookPeriodIdx
                       where taxBookStatus.TaxPeriod  == _taxReportPeriod.TaxPeriod &&
                             taxBookStatus.FromDate   == _taxReportPeriod.FromDate  &&
                             taxBookStatus.ToDate     == _taxReportPeriod.ToDate    &&
                             taxBookStatus.LastPageNo == 0
            {
                // Update of the fields FirstPageNo and LastPageNo of the TaxBookStatus record if a
                // TaxBookStatus record exists for the previous TaxReportPeriod.
                previousTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(previousTaxReportPeriod.TaxPeriod,
                                                                              previousTaxReportPeriod.FromDate,
                                                                              previousTaxReportPeriod.ToDate,
                                                                              taxBookStatus.TaxBook);
                if (previousTaxBookStatus.RecId)
                {
                    if (! previousTaxReportPeriod.LastPeriod)
                    {
                        taxBookStatus.FirstPageNo = previousTaxBookStatus.LastPageNo + 1;
                    }
                    else if (taxBookStatus.FirstPageNo == 0)
                    {
                        taxBookStatus.FirstPageNo = 1;
                    }
                    if (taxBookStatus.ChangedPageNo != 0)
                    {
                        taxBookStatus.LastPageNo = taxBookStatus.ChangedPageNo;
                    }
                    else
                    {
                        if (printBlankPage)
                        {
                            taxBookStatus.LastPageNo = taxBookStatus.FirstPageNo;
                        }
                        else
                        {
                            if (!previousTaxReportPeriod.LastPeriod)
                            {
                                taxBookStatus.LastPageNo = previousTaxBookStatus.LastPageNo;
                            }
                        }
                    }
                    taxBookStatus.update();
                }
            }
        }

        ttscommit;

        // Selection of the next TaxReportPeriod resp. creation if it does not exist
        nextTaxReportPeriod  = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                     _taxReportPeriod.ToDate + 1);
        if (! nextTaxReportPeriod.RecId)
        {
            TaxReportPeriod::newPeriod(_taxReportPeriod.TaxPeriod);
            nextTaxReportPeriod = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                         _taxReportPeriod.ToDate + 1);
        }

        ttsbegin;

        // Selection of all TaxBookStatus records for the transferred TaxReportPeriod
        while select forupdate taxBookStatus
              index hint TaxBookPeriodIdx
                   where taxBookStatus.TaxPeriod == _taxReportPeriod.TaxPeriod &&
                         taxBookStatus.FromDate  == _taxReportPeriod.FromDate  &&
                         taxBookStatus.ToDate    == _taxReportPeriod.ToDate
        {
            if (nextTaxReportPeriod.RecId)
            {
                nextTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(nextTaxReportPeriod.TaxPeriod,
                                                                          nextTaxReportPeriod .FromDate,
                                                                          nextTaxReportPeriod .ToDate,
                                                                          taxBookStatus.TaxBook,
                                                                          true);
                if (nextTaxBookStatus)
                {
                    if (_taxReportPeriod.LastPeriod)
                    {
                        nextTaxBookStatus.FirstPageNo = 1;
                        nextTaxBookStatus.LastPageNo  = 0;
                    }
                    else
                    {
                        nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                        nextTaxBookStatus.LastPageNo  = printBlankPage ? nextTaxBookStatus.FirstPageNo : taxBookStatus.LastPageNo;
                    }
                    nextTaxBookStatus.update();
                }
                else
                {
                    if (taxBookStatus.TaxBookStatusType == TaxBookStatusType::TaxSummary)
                    {
                        nextTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(nextTaxReportPeriod.TaxPeriod,
                                                                                  nextTaxReportPeriod.FromDate,
                                                                                  nextTaxReportPeriod.ToDate,
                                                                                  0,
                                                                                  true);
                        if (!nextTaxBookStatus)
                        {
                            nextTaxBookStatus.clear();
                            nextTaxBookStatus.TaxPeriod   = nextTaxReportPeriod.TaxPeriod;
                            nextTaxBookStatus.FromDate    = nextTaxReportPeriod.FromDate;
                            nextTaxBookStatus.ToDate      = nextTaxReportPeriod.ToDate;
                            if (_taxReportPeriod.LastPeriod)
                            {
                                nextTaxBookStatus.FirstPageNo = 1;
                            }
                            else
                            {
                                nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                            }
                            nextTaxBookStatus.TaxBookStatusType = TaxBookStatusType::TaxSummary;
                            nextTaxBookStatus.insert();
                        }
                        else
                        {
                            if (_taxReportPeriod.LastPeriod)
                            {
                                nextTaxBookStatus.FirstPageNo = 1;
                            }
                            else
                            {
                                nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                            }
                            nextTaxBookStatus.update();
                        }
                    }
                }

                if (!TaxReportERContext_IT::current())
                {
                    // Closing of the TaxBookSections
                    TaxBook::closeTaxBookSections(TaxBook::find(taxBookStatus.TaxBook).TaxBookId, _taxReportPeriod.ToDate);
                }

                // Creation of the TaxBookStatus record for the next TaxReportPeriod
                // with field FirstPageNo filled with LastPageNo + 1
                if (! TaxBookStatus::exist(nextTaxReportPeriod.TaxPeriod, nextTaxReportPeriod.FromDate,
                                           nextTaxReportPeriod.ToDate, taxBookStatus.TaxBook))
                {
                    nextTaxBookStatus.clear();
                    nextTaxBookStatus.TaxPeriod   = nextTaxReportPeriod.TaxPeriod;
                    nextTaxBookStatus.FromDate    = nextTaxReportPeriod.FromDate;
                    nextTaxBookStatus.ToDate      = nextTaxReportPeriod.ToDate;
                    nextTaxBookStatus.TaxBook     = taxBookStatus.TaxBook;
                    if (_taxReportPeriod.LastPeriod)
                    {
                        nextTaxBookStatus.FirstPageNo = 1;
                    }
                    else
                    {
                        nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                    }
                    if (taxBookStatus.TaxBookStatusType == TaxBookStatusType::TaxSummary)
                    {
                        nextTaxBookStatus.TaxBookStatusType = TaxBookStatusType::TaxSummary;
                    }
                    nextTaxBookStatus.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndSetLastPageNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Last page number based on the First page number and given page amount.
    /// </summary>
    /// <param name = "_taxReportPeriod">Period of creation of TaxReport</param>
    /// <param name = "_taxBookId">Processed tax book id</param>
    /// <param name = "_pageQty">Given page amount</param>
    public static void calcAndSetLastPageNo(
        TaxReportPeriod _taxReportPeriod,
        TaxBookId       _taxBookId,
        Integer         _pageQty)
    {
        ttsbegin;

        TaxBookStatus taxBookStatus =
            TaxBookStatus::findByPeriodDateBookId(_taxReportPeriod.TaxPeriod,
                                                  _taxReportPeriod.FromDate,
                                                  _taxReportPeriod.ToDate,
                                                  TaxBook::findByTaxBookId(_taxBookId).RecId,
                                                  true);

        if (taxBookStatus.RecId)
        {
            taxBookStatus.LastPageNo = TaxBookStatus::getFirstPageNo(_taxReportPeriod, _taxBookId) + _pageQty - 1;
            taxBookStatus.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxPayment</Name>
				<Source><![CDATA[
    static void updateTaxPayment(TaxReportPeriod _taxReportPeriod)
    {
        TaxReportPeriod  nextTaxReportPeriod;
        TaxReportPeriod  previousTaxReportPeriod;
        TaxBookStatus    taxBookStatus;
        TaxBookStatus    nextTaxBookStatus;
        TaxBookStatus    previousTaxBookStatus;
        TaxBook          taxBook;
        boolean          printBlankPage=false;

        // Selection of the the previous TaxReportPeriod
        previousTaxReportPeriod  = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                         _taxReportPeriod.FromDate - 1);
        if (TaxAuthorityAddress::find(TaxPeriodHead::find(_taxReportPeriod.TaxPeriod).TaxAuthority).PrintBlankPage)
        {
            printBlankPage = true;
        }
        else
        {
            printBlankPage = false;
        }

        if (previousTaxReportPeriod.RecId)
        {
            ttsbegin;
            // Selection of all TaxBookStatus records with LastPageNo = 0 for the transferred TaxReportPeriod
            while select forupdate taxBookStatus
                       where taxBookStatus.TaxPeriod  == _taxReportPeriod.TaxPeriod &&
                             taxBookStatus.FromDate   == _taxReportPeriod.FromDate  &&
                             taxBookStatus.ToDate     == _taxReportPeriod.ToDate    &&
                             taxBookStatus.LastPageNo == 0
                exists join previousTaxBookStatus
                    where previousTaxBookStatus.TaxPeriod == previousTaxReportPeriod.TaxPeriod
                       && previousTaxBookStatus.FromDate == previousTaxReportPeriod.FromDate
                       && previousTaxBookStatus.ToDate   == previousTaxReportPeriod.ToDate
                       && previousTaxBookStatus.TaxBook  == taxBookStatus.TaxBook
            {
                // Update of the fields FirstPageNo and LastPageNo of the TaxBookStatus record if a
                // TaxBookStatus record exists for the previous TaxReportPeriod.
                if (! previousTaxReportPeriod.LastPeriod)
                {
                    taxBookStatus.FirstPageNo = previousTaxBookStatus.LastPageNo + 1;
                }
                else if (taxBookStatus.FirstPageNo == 0)
                {
                    taxBookStatus.FirstPageNo = 1;
                }
                if (taxBookStatus.ChangedPageNo != 0)
                {
                    taxBookStatus.LastPageNo = taxBookStatus.ChangedPageNo;
                }
                else
                {
                    if (printBlankPage)
                    {
                        taxBookStatus.LastPageNo = taxBookStatus.FirstPageNo;
                    }
                    else
                    {
                        if (!previousTaxReportPeriod.LastPeriod)
                        {
                            taxBookStatus.LastPageNo = previousTaxBookStatus.LastPageNo;
                        }
                    }
                }
                taxBookStatus.update();
            }

            ttscommit;
        }

        // Selection of the the next TaxReportPeriod resp. creation if it does not exist
        nextTaxReportPeriod  = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                     _taxReportPeriod.ToDate + 1);
        if (! nextTaxReportPeriod.RecId)
        {
            TaxReportPeriod::newPeriod(_taxReportPeriod.TaxPeriod);
            nextTaxReportPeriod  = TaxReportPeriod::find(_taxReportPeriod.TaxPeriod,
                                                         _taxReportPeriod.ToDate + 1);
        }

        if (nextTaxReportPeriod.RecId)
        {
            ttsbegin;
            // Selection of all TaxBookStatus records for the transferred TaxReportPeriod
            while select forupdate taxBookStatus
                   where taxBookStatus.TaxPeriod == _taxReportPeriod.TaxPeriod &&
                         taxBookStatus.FromDate  == _taxReportPeriod.FromDate  &&
                         taxBookStatus.ToDate    == _taxReportPeriod.ToDate
                join TaxBookId from taxBook
                    where taxBook.RecId == taxBookStatus.TaxBook
            {
                nextTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(nextTaxReportPeriod.TaxPeriod,
                                                                          nextTaxReportPeriod .FromDate,
                                                                          nextTaxReportPeriod .ToDate,
                                                                          taxBookStatus.TaxBook,
                                                                          true);
                if (nextTaxBookStatus)
                {
                    if (_taxReportPeriod.LastPeriod)
                    {
                        nextTaxBookStatus.FirstPageNo = 1;
                        nextTaxBookStatus.LastPageNo  = 0;
                    }
                    else
                    {
                        nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                        nextTaxBookStatus.LastPageNo  = printBlankPage ? nextTaxBookStatus.FirstPageNo : taxBookStatus.LastPageNo;
                    }
                    nextTaxBookStatus.update();
                }
                else
                {
                    if (taxBookStatus.TaxBookStatusType == TaxBookStatusType::TaxSummary)
                    {
                        nextTaxBookStatus = TaxBookStatus::findByPeriodDateBookId(nextTaxReportPeriod.TaxPeriod,
                                                                                  nextTaxReportPeriod.FromDate,
                                                                                  nextTaxReportPeriod.ToDate,
                                                                                  0,
                                                                                  true);
                        if (!nextTaxBookStatus)
                        {
                            nextTaxBookStatus.clear();
                            nextTaxBookStatus.TaxPeriod   = nextTaxReportPeriod.TaxPeriod;
                            nextTaxBookStatus.FromDate    = nextTaxReportPeriod.FromDate;
                            nextTaxBookStatus.ToDate      = nextTaxReportPeriod.ToDate;
                            if (_taxReportPeriod.LastPeriod)
                            {
                                nextTaxBookStatus.FirstPageNo = 1;
                            }
                            else
                            {
                                nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                            }
                            nextTaxBookStatus.TaxBookStatusType = TaxBookStatusType::TaxSummary;
                            nextTaxBookStatus.insert();
                        }
                        else
                        {
                            if (_taxReportPeriod.LastPeriod)
                            {
                                nextTaxBookStatus.FirstPageNo = 1;
                            }
                            else
                            {
                                nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                            }
                            nextTaxBookStatus.update();
                        }
                    }
                }
                // Closing of the TaxBookSections
                TaxBook::closeTaxBookSections(taxBook.TaxBookId, _taxReportPeriod.ToDate);

                // Creation of the TaxBookStatus record for the next TaxReportPeriod
                // with field FirstPageNo filled with LastPageNo + 1
                if (! TaxBookStatus::exist(nextTaxReportPeriod.TaxPeriod, nextTaxReportPeriod.FromDate,
                                           nextTaxReportPeriod.ToDate, taxBookStatus.TaxBook))
                {
                    nextTaxBookStatus.clear();
                    nextTaxBookStatus.TaxPeriod   = nextTaxReportPeriod.TaxPeriod;
                    nextTaxBookStatus.FromDate    = nextTaxReportPeriod.FromDate;
                    nextTaxBookStatus.ToDate      = nextTaxReportPeriod.ToDate;
                    nextTaxBookStatus.TaxBook     = taxBookStatus.TaxBook;
                    if (_taxReportPeriod.LastPeriod)
                    {
                        nextTaxBookStatus.FirstPageNo = 1;
                    }
                    else
                    {
                        nextTaxBookStatus.FirstPageNo = taxBookStatus.LastPageNo + 1;
                    }
                    if (taxBookStatus.TaxBookStatusType == TaxBookStatusType::TaxSummary)
                    {
                        nextTaxBookStatus.TaxBookStatusType = TaxBookStatusType::TaxSummary;
                    }
                    nextTaxBookStatus.insert();
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (!TaxReportERHelper_IT::skipUpdateTaxBookStatus(this))
        {
            boolean isERReportShouldBeUsed = TaxReportERHelper_IT::isERReportShouldBeUsed(
                TaxPeriodHead::find(this.TaxPeriod).TaxAuthority);
            TaxBookStatus this_orig = this.orig();

            if (isERReportShouldBeUsed)
            {
                if (this.PrintoutStatus == TaxBookPrintoutStatus::Generated
                    && ((this.FirstPageNo != this_orig.FirstPageNo)
                        || (this.ChangedPageNo != this_orig.ChangedPageNo)))
                {
                    this.PrintoutStatus = TaxBookPrintoutStatus::NeedsRegeneration;
                }
            }

            super();

            if (isERReportShouldBeUsed)
            {
                if ((this.LastPageNo != this_orig.LastPageNo)
                    || (this.ChangedPageNo != this_orig.ChangedPageNo))
                {
                    this.updateNextTaxBookStatuses();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNextTaxBookStatuses</Name>
				<Source><![CDATA[
    private void updateNextTaxBookStatuses(
        TaxBookPrintoutStatus _fromStatus = TaxBookPrintoutStatus::Generated,
        TaxBookPrintoutStatus _toStatus = TaxBookPrintoutStatus::NeedsRegeneration)
    {
        TaxBookStatus nextTaxBookStatus;

        if (!TaxReportPeriod::find(this.TaxPeriod, this.FromDate).LastPeriod)
        {
            ttsbegin;
            while select forupdate nextTaxBookStatus
                order by FromDate asc
                where nextTaxBookStatus.TaxPeriod == this.TaxPeriod
                    && nextTaxBookStatus.TaxBook == this.TaxBook
                    && nextTaxBookStatus.FromDate > this.FromDate
                    && nextTaxBookStatus.PrintoutStatus == _fromStatus
            {
                nextTaxBookStatus.PrintoutStatus = _toStatus;
                nextTaxBookStatus.update();

                if (TaxReportPeriod::find(nextTaxBookStatus.TaxPeriod, nextTaxBookStatus.FromDate).LastPeriod)
                {
                    break;
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123545</DeveloperDocumentation>
	<FormRef>TaxBookStatus</FormRef>
	<Label>@SYS79243</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>TaxPeriod</TitleField1>
	<TitleField2>TaxBook</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>TaxBookPeriodIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FirstPageNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangedPageNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastPageNo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS107599</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxBookStatusType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxBook</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FirstPageSummaryNo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PageNumbers</Name>
			<Label>@SYS27422</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FirstPageNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChangedPageNo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastPageNo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Period</Name>
			<Label>@SYS40</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>ChangedPageNo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PageNo</ExtendedDataType>
			<Label>@SYS79247</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FirstPageNo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PageNo</ExtendedDataType>
			<Label>@SYS79245</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>FirstPageSummaryNo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PageNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriodDate</ExtendedDataType>
			<Label>@SYS5209</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LastPageNo</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PageNo</ExtendedDataType>
			<Label>@SYS79249</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxBook</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxBookRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxBookStatusType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxBookStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriodDate</ExtendedDataType>
			<Label>@SYS14656</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintBlankPage</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<Label>@SYS107601</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeZeroLines_IT</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>IncludeZeroLines_IT</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IncludeReverseTrans_IT</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>IncludeReverseTrans_IT</ExtendedDataType>
			<FeatureClass>TaxBookToggle</FeatureClass>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintoutStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<EnumType>TaxBookPrintoutStatus</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxBookPeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TaxBook</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxBookIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxBook</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ItalyTaxBooks</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ItalyTaxBooksStatus</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxBook</Name>
					<Field>TaxBook</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>TaxPeriodHead</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxBookStatus</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxReportPeriod</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123546</EntityRelationshipRole>
			<RelatedTable>TaxReportPeriod</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ItalyTaxReportPeriod</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ItalyTaxBooksStatus</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromDate</Name>
					<Field>FromDate</Field>
					<RelatedField>FromDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToDate</Name>
					<Field>ToDate</Field>
					<RelatedField>ToDate</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>