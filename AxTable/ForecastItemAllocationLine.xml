<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastItemAllocationLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ForecastItemAllocationLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();

        // Clear kanban rule caching if record is deleted
        KanbanFindRulesCache::clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        return InventTable::find(this.ItemId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        // Clear kanban rule caching if item or coverage dimensions change
        if (this.orig().ItemId      != this.ItemId ||
            this.orig().InventDimId != this.InventDimId)
        {
            KanbanFindRulesCache::clearCache();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        ProjParameters projParameters;

        ret = super();

        ret = ret && InventTable::checkProductDimensions(this.ItemId, this.inventDim());

        // Not allow to add new lines if the allocateKey is in projParameters
        if (ret)
        {
            projParameters=ProjParameters::find(false);
            if (this.AllocationId ==projParameters.ItemLumpSumAllocationKey)
            {
               ret= checkFailed("@SYS108452");
            }
        }

        if (ret && ReqDemForecastItemAllocationLineDuplicatesValidationToggle::instance().isEnabled())
        {
            ForecastItemAllocationLine allocationLine;

            select firstonly RecId from allocationLine
                where allocationLine.ItemId == this.ItemId
                    && allocationLine.InventDimId == this.InventDimId
                    && allocationLine.AllocationId == this.AllocationId
                    && allocationLine.RecId != this.RecId;

            if (allocationLine.RecId)
            {
                ret = checkFailed("@SCMPlanning:ForecastItemAllocationLineSameItemWarning");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the forecast allocation line table.
    /// </summary>
    /// <param name="_allocationId">
    ///    The forecast item allocation key ID of the forecast allocation line record.
    /// </param>
    /// <param name="_lineNum">
    ///    The line number of the forecast allocation line record.
    /// </param>
    /// <returns>
    ///    true if the line number exists; otherwise, false.
    /// </returns>
    public static boolean exist(
        ForecastItemAllocationId _allocationId,
        LineNum                  _lineNum = 0)
    {
        ForecastItemAllocationLine  forecastItemAllocationLine;

        if (!ForecastAllocateExistCheckFlight::instance().isEnabled() || _allocationId != '')
        {
            if (!prmisdefault(_lineNum))
            {
                select firstonly RecId from forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId == _allocationId
                       && forecastItemAllocationLine.LineNum      == _lineNum;
            }
            else
            {
                select firstonly RecId from forecastItemAllocationLine
                    where forecastItemAllocationLine.AllocationId == _allocationId;
            }
        }

        return (forecastItemAllocationLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the forecast allocation line table.
    /// </summary>
    /// <param name="_allocationId">
    ///    The forecast item allocation key ID of the forecast allocation line record.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID of the forecast allocation line record.
    /// </param>
    /// <returns>
    ///    true if the item exists; otherwise, false.
    /// </returns>
    public static boolean existItem(
        ForecastItemAllocationId _allocationId,
        ItemId                   _itemId)
    {
        ForecastItemAllocationLine  forecastItemAllocationLine;

        select firstonly RecId from forecastItemAllocationLine
            where forecastItemAllocationLine.AllocationId == _allocationId
               && forecastItemAllocationLine.ItemId       == _itemId;

        return (forecastItemAllocationLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the forecast allocation line table.
    /// </summary>
    /// <param name="_allocationId">
    ///    The forecast item allocation key ID of the forecast allocation line record.
    /// </param>
    /// <param name="_itemGroupId">
    ///    The item group ID of the forecast allocation line record.
    /// </param>
    /// <returns>
    ///    true if the item group exists; otherwise, false.
    /// </returns>
    public static boolean existItemGroup(
        ForecastItemAllocationId _allocationId,
        ItemGroupId              _itemGroupId)
    {
        ForecastItemAllocationLine  forecastItemAllocationLine;
        InventTable                 inventTable;
        InventItemGroupItem         inventItemGroupItem;

        select firstonly RecId from forecastItemAllocationLine
            where forecastItemAllocationLine.AllocationId == _allocationId
            exists join inventTable
                where inventTable.ItemId == forecastItemAllocationLine.ItemId
            exists join inventItemGroupItem
                where inventItemGroupItem.ItemId == inventTable.ItemId
                   && inventItemGroupItem.ItemDataAreaId == inventTable.DataAreaId
                   && inventItemGroupItem.ItemGroupId == _itemGroupId;

        return (forecastItemAllocationLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existItemInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the forecast allocation line table.
    /// </summary>
    /// <param name="_allocationId">
    ///    The forecast item allocation key ID of the forecast allocation line record.
    /// </param>
    /// <param name="_itemId">
    ///    The item ID of the forecast allocation line record.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID of the forecast allocation line record.
    /// </param>
    /// <returns>
    ///    true if the inventory dimension combination exists; otherwise, false.
    /// </returns>
    public static boolean existItemInventDim(
        ForecastItemAllocationId _allocationId,
        ItemId                   _itemId,
        InventDimId              _inventDimId)
    {
        ForecastItemAllocationLine  forecastItemAllocationLine;

        select firstonly RecId from forecastItemAllocationLine
            where forecastItemAllocationLine.AllocationId == _allocationId
               && forecastItemAllocationLine.ItemId       == _itemId
               && forecastItemAllocationLine.InventDimId  == _inventDimId;

        return (forecastItemAllocationLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a record with the specified record ID exists in the database.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existRecId(recId _recId)
    {
        return _recId &&
               (select firstonly RecId from forecastItemAllocationLine
                    where forecastItemAllocationLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>ForecastItemAllocationLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the ForecastItemAllocationLine table; otherwise, an empty record.
    /// </returns>
    public static ForecastItemAllocationLine find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        ForecastItemAllocationLine forecastLine;

        if (_recId)
        {
            forecastLine.selectForUpdate(_forUpdate);

            select firstonly forecastLine
                where forecastLine.RecId == _recId;
        }

        return forecastLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        return super() && this.validateForecastSalesNotExist();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForecastSalesNotExist</Name>
				<Source><![CDATA[
    private boolean validateForecastSalesNotExist()
    {
        ForecastSales forecastSales;

        if (!ForecastItemAllocationValidateSalesExistFlight::instance().isEnabled())
        {
            return true;
        }

        select firstonly ItemId, ModelId from forecastSales
            where forecastSales.ItemAllocateId == this.AllocationId
               && forecastSales.ItemId         == this.ItemId;

        if (forecastSales.ItemId)
        {
            return checkFailed(strFmt("@SCM:AllocationLineCouldNotBeDeleted",
                               this.ItemId,
                               this.AllocationId,
                               forecastSales.ItemId,
                               forecastSales.ModelId));
        }

        return !forecastSales.ItemId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Forecast</ConfigurationKey>
	<DeveloperDocumentation>@SYS124111</DeveloperDocumentation>
	<Label>@SYS22209</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>AllocationId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AllocationIdx</ClusteredIndex>
	<Modules>MasterPlanning</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Allocation</Name>
			<Label>@Sys12895</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AllocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TableGroup</Name>
			<Label>@SYS21958</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AllocationId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ForecastItemAllocationPct</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AllocationIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AllocationId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ForecastItemAllocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ForecastItemAllocation</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AllocationId</Name>
					<Field>AllocationId</Field>
					<RelatedField>AllocateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AllocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>