<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCTmpTranslation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCTmpTranslation extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayDescriptionOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the description of the record in the system language.
    /// </summary>
    /// <returns>
    /// A description of the translated record.
    /// </returns>
    display Name displayDescriptionOriginal()
    {
        str             ret = '';
        LanguageId      systemLanguageId = SystemParameters::getSystemLanguageId();

        switch (this.SourceTableId)
        {
            case tablenum(EcoResAttribute):
                ret = EcoResAttributeTranslation::findByAttributeAndLanguage(this.SourceRecId, systemLanguageId).Description;
                break;
            case tablenum(PCProductConfigurationModel):
                ret = PCProductConfigurationModelTranslation::findByModelAndLanguage(this.SourceRecId, systemLanguageId).Description;
                break;
            case tablenum(PCSubComponent):
                ret = PCSubComponentTranslation::findBySubComponentAndLanguage(this.SourceRecId, systemLanguageId).Description;
                break;
            case tablenum(PCClass):
                ret = EcoResCategoryTranslation::findByCategoryAndLanguage(this.SourceRecId, systemLanguageId).Description;
                break;
            case tablenum(PCTemplateConfiguration):
                ret = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.SourceRecId, systemLanguageId).Description;
                break;
            case tablenum(PCComponentAttributeGroup):
                // this table has no description field
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNameOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the name of the record in the system language.
    /// </summary>
    /// <returns>
    /// The name of the translated record.
    /// </returns>
    display Name displayNameOriginal()
    {
        str             ret = '';
        LanguageId      systemLanguageId = SystemParameters::getSystemLanguageId();

        switch (this.SourceTableId)
        {
            case tablenum(EcoResAttribute):
                ret = EcoResAttributeTranslation::findByAttributeAndLanguage(this.SourceRecId, systemLanguageId).FriendlyName;
                break;
            case tablenum(PCProductConfigurationModel):
                ret = PCProductConfigurationModelTranslation::findByModelAndLanguage(this.SourceRecId, systemLanguageId).Name;
                break;
            case tablenum(PCSubComponent):
                ret = PCSubComponentTranslation::findBySubComponentAndLanguage(this.SourceRecId, systemLanguageId).Name;
                break;
            case tablenum(PCClass):
                ret = EcoResCategoryTranslation::findByCategoryAndLanguage(this.SourceRecId, systemLanguageId).FriendlyName;
                break;
            case tablenum(PCComponentAttributeGroup):
                ret = PCComponentAttributeGroupTranslation::findByAttributeGroupAndLanguage(this.SourceRecId, systemLanguageId).Name;
                break;
            case tablenum(PCTemplateConfiguration):
                ret = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(this.SourceRecId, systemLanguageId).Name;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the translation data into the temporary table.
    /// </summary>
    /// <param name="_translationTmp">
    /// A temporary table buffer.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// The record ID of a product configuration model.
    /// </param>
    public void fillData(
        PCTmpTranslation    _translationTmp,
        RefRecId            _productConfigurationModel)
    {
        PCProductConfigurationModel productConfigurationModel;

        PCClass                     component;
        PCTmpTranslation            pcTranslationTmp;

        void fillDataIntoTmp()
        {
            pcTranslationTmp.insertIntoTmp(productConfigurationModel.TableId, productConfigurationModel.RecId, component.Name);

            this.fillDataForComponent(pcTranslationTmp, component.RecId, component.Name);
            this.fillDataForConfigurationUI(pcTranslationTmp, productConfigurationModel.RecId);
            this.fillDataForConfigurationTemplates(pcTranslationTmp, productConfigurationModel.RecId);
        }

        pcTranslationTmp.setTmp();
        pcTranslationTmp.setTmpData(_translationTmp);

        // if value has be selected in the filter
        if (_productConfigurationModel != 0)
        {
            // find configuration model
            productConfigurationModel = PCProductConfigurationModel::find(_productConfigurationModel);

            // find root component
            component = PCClass::find(productConfigurationModel.RootComponentClass);

            fillDataIntoTmp();
        }
        else
        {
            while select RecId from productConfigurationModel
                join Name, RecId from component
                    where component.RecId == productConfigurationModel.RootComponentClass
            {
                fillDataIntoTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataForComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills data for a component into a temporary table.
    /// </summary>
    /// <param name="_translationTmp">
    /// A temporary table buffer.
    /// </param>
    /// <param name="_component">
    /// The record ID of a component.
    /// </param>
    /// <param name="_name">
    /// The name of the referenced component.
    /// </param>
    void fillDataForComponent(
        PCTmpTranslation    _translationTmp,
        RefRecId            _component,
        Name                _name)
    {
        PCSubComponent              subComponent;
        EcoResCategoryAttribute     categoryAttribute;
        EcoResAttribute             attribute;

        // insert component info
        _translationTmp.insertIntoTmp(
            tablenum(PCClass),
            _component,
            _name);

        // add attributes of the component
        while select RecId from categoryAttribute
            where categoryAttribute.Category == _component
            join TableId, RecId from attribute
                where
                    attribute.RecId == categoryAttribute.Attribute
        {
            _translationTmp.insertIntoTmp(
                attribute.TableId,
                attribute.RecId,
                _name);
        }

        // add sub components
        while select RecId, Name, ChildComponentClass from subComponent
            where subComponent.ParentComponentClass == _component
        {
            _translationTmp.insertIntoTmp(subComponent.TableId, subComponent.RecId, _name);

            this.fillDataForComponent(
                _translationTmp,
                subComponent.ChildComponentClass,
                PCClass::find(subComponent.ChildComponentClass).Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataForConfigurationTemplates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the translation data for configuration templates into the temporary table.
    /// </summary>
    /// <param name="_translationTmp">
    /// A temporary table buffer.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// The record ID of a product configuration model.
    /// </param>
    public void fillDataForConfigurationTemplates(
        PCTmpTranslation    _translationTmp,
        RefRecId            _productConfigurationModel)
    {
        PCTemplateConfiguration     templateConfiguration;

        if (_productConfigurationModel == 0)
        {
            while select RecId from templateConfiguration
            {
                _translationTmp.insertIntoTmp(
                    templateConfiguration.TableId,
                    templateConfiguration.RecId,
                    '');
            }
        }
        else
        {
            while select RecId from templateConfiguration
                where templateConfiguration.ProductConfigurationModel == _productConfigurationModel
            {
                _translationTmp.insertIntoTmp(
                    templateConfiguration.TableId,
                    templateConfiguration.RecId,
                    '');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDataForConfigurationUI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills data for a configuration user interface into a temporary table.
    /// </summary>
    /// <param name="_translationTmp">
    /// A temporary table buffer.
    /// </param>
    /// <param name="_productConfigurationModel">
    /// The record ID of a product configuration model.
    /// </param>
    public void fillDataForConfigurationUI(
        PCTmpTranslation    _translationTmp,
        RefRecId            _productConfigurationModel)
    {
        PCConfigurationControl                  configurationControl;
        PCComponentControl                      componentControl;
        PCClass                                 component;
        PCSubComponent                          subComponent;
        PCComponentControlSubComponent          componentControlSubComponent;
        PCComponentControlRootComponent         componentControlRootComponent;
        PCComponentAttributeGroup               componentAttributeGroup;
        PCComponentAttributeGroupTranslation    componentAttributeGroupTranslation;

        LanguageId                              systemLanguage = SystemParameters::getSystemLanguageId();

        // select component control for the root component
        select firstonly RecId from componentControl
            join RecId from configurationControl
                where   configurationControl.RecId              == componentControl.ConfigurationControl &&
                        configurationControl.ConfigurationModel == _productConfigurationModel
            join RecId from componentControlRootComponent
                where componentControlRootComponent.ComponentControl == componentControl.RecId
                    join Name from component
                        where component.RecId == componentControlRootComponent.RootComponent;

        // if product configuration model has customized UI
        if (componentControl.RecId)
        {
            // insert attribute groups for the root component
            while select RecId from componentAttributeGroup
                where componentAttributeGroup.ComponentControl == componentControl.RecId
                    join RecId from componentAttributeGroupTranslation
                        where   componentAttributeGroupTranslation.ComponentAttributeGroup  == componentAttributeGroup.RecId &&
                                componentAttributeGroupTranslation.Language                 == systemLanguage
            {
                _translationTmp.insertIntoTmp(
                    componentAttributeGroup.TableId,
                    componentAttributeGroup.RecId,
                    component.Name);
            }

            // insert attribute groups for all sub components
            while select RecId from componentControl
            join RecId from componentAttributeGroup
                where componentAttributeGroup.ComponentControl == componentControl.RecId
            join RecId from configurationControl
                where   configurationControl.RecId              == componentControl.ConfigurationControl &&
                        configurationControl.ConfigurationModel == _productConfigurationModel
            join RecId from componentControlSubComponent
                where componentControlSubComponent.ComponentControl == componentControl.RecId
                    join RecId from subComponent
                        where subComponent.RecId == componentControlSubComponent.SubComponent
                            join Name from component
                                where component.RecId == subComponent.ParentComponentClass
            {
                _translationTmp.insertIntoTmp(
                    componentAttributeGroup.TableId,
                    componentAttributeGroup.RecId,
                    component.Name);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getElementType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the element being translated.
    /// </summary>
    /// <returns>
    /// The element type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Throws an error if an unexpected table ID is encountered.
    /// </exception>
    display EcoResCategoryName getElementType()
    {
        EcoResCategoryName ret = '';

        switch (this.SourceTableId)
        {
            case tablenum(PCProductConfigurationModel):
                ret = "@SYS310578";
                break;
            case tablenum(EcoResAttribute):
                ret = "@SYS310577";
                break;
            case tablenum(PCTemplateConfiguration):
                ret = "@SYS314553";
                break;
            case tablenum(PCSubComponent):
                ret = "@SYS310581";
                break;
            case tablenum(PCClass):
                ret = "@SYS314554";
                break;
            case tablenum(PCComponentAttributeGroup):
                ret = "@SYS191496";
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the referenced table.
    /// </param>
    /// <param name="_recId">
    /// The record ID of the referenced record.
    /// </param>
    /// <param name="_name">
    /// The name of the referenced component.
    /// </param>
    void insertIntoTmp(
        tableId             _tableId,
        RecId               _recId,
        EcoResCategoryName  _name)
    {
        this.SourceTableId  = _tableId;
        this.SourceRecId    = _recId;
        this.ComponentName  = _name;

        this.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record that is currently being translated.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the record being translated.
    /// </param>
    /// <param name="_recordId">
    /// The record ID of the record being translated.
    /// </param>
    /// <param name="_language">
    /// The language ID of the language being translated.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether the record is selected for update; optional.
    /// </param>
    /// <returns>
    /// A table buffer of the translated record.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Throws an exception if an unexpected table ID is encountered.
    /// </exception>
    public static Common findTranslationRecord(
        tableId _tableId,
        RefRecId _recordId,
        LanguageId _language,
        boolean _forupdate)
    {
        Common  common;

        switch (_tableId)
        {
            case tablenum(PCProductConfigurationModel):
                common =    PCProductConfigurationModelTranslation::findByModelAndLanguage(
                    _recordId,
                    _language,
                    _forupdate);
                break;
            case tablenum(PCSubComponent):
                common = PCSubComponentTranslation::findBySubComponentAndLanguage(
                    _recordId,
                    _language,
                    _forupdate);
                break;
            case tablenum(PCComponentAttributeGroup):
                common = PCComponentAttributeGroupTranslation::findByAttributeGroupAndLanguage(
                    _recordId,
                    _language,
                    _forupdate);
                break;
            case tablenum(PCClass):
                  common = EcoResCategoryTranslation::findByCategoryAndLanguage(
                    _recordId,
                    _language,
                    _forupdate);
                break;
            case tablenum(EcoResAttribute):
                common = EcoResAttributeTranslation::findByAttributeAndLanguage(
                    _recordId,
                    _language,
                    _forupdate);
                break;
            case tablenum(PCTemplateConfiguration):
                common = PCTemplateConfigurationTranslation::findByTemplateAndLanguage(
                    _recordId,
                    _language,
                    _forupdate);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId2DescriptionFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map that contains the relations between the table ID and the description field of the
    /// translated record.
    /// </summary>
    /// <returns>
    /// A packed map in the form of a container data structure.
    /// </returns>
    public static container getTableId2DescriptionFieldMap()
    {
        Map tableId2DescriptionFieldMap = new Map(Types::Int64, Types::Int64);

        tableId2DescriptionFieldMap.insert(tablenum(PCProductConfigurationModel), fieldnum(PCProductConfigurationModelTranslation, Description));
        tableId2DescriptionFieldMap.insert(tablenum(PCSubComponent), fieldnum(PCSubComponentTranslation, Description));
        tableId2DescriptionFieldMap.insert(tablenum(PCTemplateConfiguration), fieldnum(PCTemplateConfigurationTranslation, Description));
        tableId2DescriptionFieldMap.insert(tablenum(PCClass), fieldnum(EcoResCategoryTranslation, Description));
        tableId2DescriptionFieldMap.insert(tablenum(EcoResAttribute), fieldnum(EcoResAttributeTranslation, Description));

        return tableId2DescriptionFieldMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId2LanguageFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map that contains relations between the table ID and the language field of the translated
    /// record.
    /// </summary>
    /// <returns>
    /// A packed map in the form of a container data structure.
    /// </returns>
    public static container getTableId2LanguageFieldMap()
    {
        Map tableId2LanguageFieldMap = new Map(Types::Int64, Types::Int64);

        tableId2LanguageFieldMap.insert(tablenum(PCProductConfigurationModel), fieldnum(PCProductConfigurationModelTranslation, Language));
        tableId2LanguageFieldMap.insert(tablenum(PCSubComponent), fieldnum(PCSubComponentTranslation, Language));
        tableId2LanguageFieldMap.insert(tablenum(PCComponentAttributeGroup), fieldnum(PCComponentAttributeGroupTranslation, Language));
        tableId2LanguageFieldMap.insert(tablenum(PCTemplateConfiguration), fieldnum(PCTemplateConfigurationTranslation, Language));
        tableId2LanguageFieldMap.insert(tablenum(PCClass), fieldnum(EcoResCategoryTranslation, LanguageId));
        tableId2LanguageFieldMap.insert(tablenum(EcoResAttribute), fieldnum(EcoResAttributeTranslation, Language));

        return tableId2LanguageFieldMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId2NameFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map that contains the relations between the table ID and the name field of the translated
    /// record.
    /// </summary>
    /// <returns>
    /// A packed map in the form of a container data structure.
    /// </returns>
    public static container getTableId2NameFieldMap()
    {
        Map tableId2NameFieldMap = new Map(Types::Int64, Types::Int64);

        tableId2NameFieldMap.insert(tablenum(PCProductConfigurationModel), fieldnum(PCProductConfigurationModelTranslation, Name));
        tableId2NameFieldMap.insert(tablenum(PCSubComponent), fieldnum(PCSubComponentTranslation, Name));
        tableId2NameFieldMap.insert(tablenum(PCComponentAttributeGroup), fieldnum(PCComponentAttributeGroupTranslation, Name));
        tableId2NameFieldMap.insert(tablenum(PCTemplateConfiguration), fieldnum(PCTemplateConfigurationTranslation, Name));
        tableId2NameFieldMap.insert(tablenum(PCClass), fieldnum(EcoResCategoryTranslation, FriendlyName));
        tableId2NameFieldMap.insert(tablenum(EcoResAttribute), fieldnum(EcoResAttributeTranslation, FriendlyName));

        return tableId2NameFieldMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId2ReferenceFieldMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a map that contains the relations between the table ID and the reference field of the
    /// translated record.
    /// </summary>
    /// <returns>
    /// A packed map in the form of a container data structure.
    /// </returns>
    public static container getTableId2ReferenceFieldMap()
    {
        Map tableId2ReferenceFieldMap = new Map(Types::Int64, Types::Int64);

        tableId2ReferenceFieldMap.insert(tablenum(PCProductConfigurationModel), fieldnum(PCProductConfigurationModelTranslation, ProductConfigurationModel));
        tableId2ReferenceFieldMap.insert(tablenum(PCSubComponent), fieldnum(PCSubComponentTranslation, SubComponent));
        tableId2ReferenceFieldMap.insert(tablenum(PCComponentAttributeGroup), fieldnum(PCComponentAttributeGroupTranslation, ComponentAttributeGroup));
        tableId2ReferenceFieldMap.insert(tablenum(PCTemplateConfiguration), fieldnum(PCTemplateConfigurationTranslation, TemplateConfiguration));
        tableId2ReferenceFieldMap.insert(tablenum(PCClass), fieldnum(EcoResCategoryTranslation, Category));
        tableId2ReferenceFieldMap.insert(tablenum(EcoResAttribute), fieldnum(EcoResAttributeTranslation, Attribute));

        return tableId2ReferenceFieldMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<Label>@sys105593</Label>
	<TitleField1>ComponentName</TitleField1>
	<TitleField2>SourceTableId</TitleField2>
	<TableType>InMemory</TableType>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@sys312535</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SourceTableId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ComponentName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Translation</Name>
			<Label>@sys105593</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>getElementType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ComponentName</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PCSubComponentName</ExtendedDataType>
			<Label>@sys311441</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PCSourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SourceTableId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefTableId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes />
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>