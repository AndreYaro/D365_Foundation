<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFund</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerFund extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional validation prior to deleting to ensure the fund is not in use by dimensions.
    /// </summary>
    /// <remarks>
    /// If the validation succeeds, the dimensions data is updated to reflect the deleted value.
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///  The fund number is in use by dimensions and cannot be deleted.
    /// </exception>
    public void delete()
    {
        // Check to see if the associated dimension attribute value has been used
        // in a way that would prevent deletion.
        // FI 6.0.816.0: canDeleteEntityValue changed in sys. Verify change is correct.
        // if (!DimensionValidation::canDeleteEntityValue(this.TableId, this.RecId, this.DataAreaId))
        if (!DimensionValidation::canDeleteEntityValue(this))
        {
            throw error(strfmt("@SYS134392", this.FundNumber));
        }

        ttsbegin;

        // Update the associated dimension attribute value.
        // FI 6.0.816.0: updateForEntityValueDelete changed in sys. Verify change is correct.
        // DimensionAttributeValue::updateForEntityValueDelete(this.TableId, this.RecId, this.DataAreaId);
        DimensionAttributeValue::updateForEntityValueDelete(this);

        super();
        // commit
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the fund number changed, and updates dimensions with the new value if it has.
    /// </summary>
    public void update()
    {
        LedgerFund originalLedgerFund = this.orig();

        boolean isSyncRequired = this.FundNumber != originalLedgerFund.FundNumber;
        DimensionValueRenameV2 rename;

        if (isSyncRequired)
        {
            rename = DimensionValueRenameV2::construct(this, originalLedgerFund);
            rename.syncRenamedValuePreSuper();
        }

        super();

        if (isSyncRequired)
        {
            // FI 6.0.816.0: syncRenamedValue changed in sys. Verify change is correct.
            // DimensionStorage::syncRenamedValue(this.TableId, this.RecId, this.DataAreaId, originalLedgerFund.FundNumber, this.FundNumber);
            rename.syncRenamedValuePostSuper();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified fund number value exists in the table and reports an error if it does not exist.
    /// </summary>
    /// <param name="_fundNumber">
    /// The fund number value to check.
    /// </param>
    /// <returns>
    /// true if the fund number exists in the table; otherwise, false.
    /// </returns>
    public static boolean checkExist(FundNumber _fundNumber)
    {
        boolean ret = true;
        ;

        if (!LedgerFund::exist(_fundNumber))
        {
            ret = checkFailed(strfmt(LedgerFund::txtNotExist(), _fundNumber));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified fund number value exists in the table.
    /// </summary>
    /// <param name="_fundNumber">
    /// The fund number value to check.
    /// </param>
    /// <returns>
    /// true if the fund number value exists in the table; otherwise, false.
    /// </returns>
    public static boolean exist(FundNumber _fundNumber)
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                 from
                     ledgerFund
                 where
                     ledgerFund.FundNumber == _fundNumber).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>LedgerFund</c> table for the specified fund number value.
    /// </summary>
    /// <param name="_fundNumber">
    /// The fund number value to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specify whether the record should be fetched for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The associated concurrency model for the fetched record; optional.
    /// </param>
    /// <returns>
    ///  The fetched <c>LedgerFund</c> table record.
    /// </returns>
    public static LedgerFund find(
        FundNumber _fundNumber,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerFund      ledgerFund;
        ;

        ledgerFund.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerFund.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerFund
        where
            ledgerFund.FundNumber == _fundNumber;

        return ledgerFund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches the <c>LedgerFund</c> table for the specified fund record ID value.
    /// </summary>
    /// <param name="_fundRecId">
    /// The fund record ID value to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that specify whether the record should be fetched for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The associated concurrency model for the fetched record; optional.
    /// </param>
    /// <returns>
    ///  The fetched <c>LedgerFund</c> table record.
    /// </returns>
    public static LedgerFund findByRecId(
        FundRecId _fundRecId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerFund      ledgerFund;
        ;

        ledgerFund.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerFund.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerFund
        where
            ledgerFund.RecId == _fundRecId;

        return ledgerFund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the custom error message associated with the existence of the record.
    /// </summary>
    /// <returns>
    /// A string that contains the error message.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SPS220";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();
        if (ret)
        {
            if (this.OverrideYearEndOption &&  !(PublicSectorUtils::isPurchYearEndEnabled()
                        || PublicSectorUtils::isLedgerYearEndClosingEnabled()))
            {
                ret = checkFailed(strFmt("@PublicSector:TableFieldShouldNotBeSet", fieldId2PName(this.TableId, fieldNum(LedgerFund, OverrideYearEndOption))));
            }
            else if (this.OverrideYearEndOption && this.YearEndOption == LedgerFundYearEndOption::None)
            {
                ret = checkFailed("@SPS715");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFundFromLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will extract the fund value from a given ledger dimension record.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// Display value of the ledger dimension.
    /// </param>
    /// <returns>
    /// The ledger fund record of the passed ledger dimension.
    /// </returns>
    public static LedgerFund getFundFromLedgerAccount(LedgerDimensionAccount _ledgerDimension)
    {
        LedgerFund                          ledgerFund;
        DimensionAttributeLevelValueView    dimensionAttributeLevelValueView;
        DimensionAttribute                  dimensionAttribute;

        select firstOnly RecId, DimensionAttribute, EntityInstance from dimensionAttributeLevelValueView
            where dimensionAttributeLevelValueView.ValueCombinationRecId == _ledgerDimension
            join ledgerFund
                where ledgerFund.RecId == dimensionAttributeLevelValueView.EntityInstance
            join RecId, BackingEntityTableId from dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeLevelValueView.DimensionAttribute
                && dimensionAttribute.BackingEntityTableId == tableNum(LedgerFund);

        return ledgerFund;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS230</DeveloperDocumentation>
	<Label>@SPS105</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>FundNumber</TitleField1>
	<TitleField2>FundName</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>FundNumberIdx</ClusteredIndex>
	<Modules>Ledger</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PurchYearEnd</Name>
			<Label>@sps660</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverrideYearEndOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>YearEndOption</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DoReduceCarryForwardBudget_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Setup</Name>
			<Label>@SPS145</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FundNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundClass</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FundGASB34</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsMajor</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerFundType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FundClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FundClass</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>FundClassValue</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FundGASB34</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FundGASB34</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FundName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>FundNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FundNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMajor</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SPS964</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LedgerFundType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS113</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideYearEndOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@sps661</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>YearEndOption</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerFundYearEndOption</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DoReduceCarryForwardBudget_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<HelpText>@FieldDescriptions_Budgeting_BudgetReservationPS:BudgetReservationType_CarryForward</HelpText>
			<Label>@Budgeting_BudgetReservationPS:ReduceCarryForwardBudget</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FundNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>FundNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerFundType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LedgerFundType</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FundType</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Fund</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerFundType</Name>
					<Field>LedgerFundType</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>