<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendExternalItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendExternalItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountRelation</Name>
				<Source><![CDATA[
    boolean  checkAccountRelation()
    {
        boolean  ok = true;

        switch (this.ModuleType)
        {
            case ModuleInventPurchSalesVendCustGroup::Cust      :
                if (!CustTable::exist(this.CustVendRelation))
                {
                    ok = checkFailed("@SYS17074");
                }
                break;

            case ModuleInventPurchSalesVendCustGroup::Vend      :
                if (!VendTable::exist(this.CustVendRelation))
                {
                    ok = checkFailed("@SYS17074");
                }
                break;

            case ModuleInventPurchSalesVendCustGroup::CustGroup,
                 ModuleInventPurchSalesVendCustGroup::VendGroup :
                if (!CustVendItemGroup::exist(this.custVendItemGroupModule(),
                                              this.CustVendRelation))
                {
                    ok = checkFailed("@SYS17074");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendItemGroupModule</Name>
				<Source><![CDATA[
    ExternalItemModule custVendItemGroupModule()
    {
        ExternalItemModule  module;

        switch (this.ModuleType)
        {
            case ModuleInventPurchSalesVendCustGroup::Vend,
                 ModuleInventPurchSalesVendCustGroup::VendGroup :
                module = ModuleInventCustVend::Vend;
                break;

            case ModuleInventPurchSalesVendCustGroup::Cust,
                 ModuleInventPurchSalesVendCustGroup::CustGroup :
                module = ModuleInventCustVend::Cust;
                break;
        }

        return module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        CustVendExternalItemDescription::flushExistsCheckCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayItemName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the item name from the <c>InventTable</c> table.
    /// </summary>
    /// <returns>
    ///     The item name.
    /// </returns>
    display ItemName displayItemName()
    {
        ItemName    itemName;

        itemName = InventTable::name(this.ItemId);

        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayModuleRelationName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>moduleRelationName</c> by using the module type a customer or vendor name.
    /// </summary>
    /// <returns>
    /// The <c>moduleRelationName</c> value of the vendor.
    /// </returns>
    display Name displayModuleRelationName()
    {
        Name moduleRelationName;

        switch (this.ModuleType)
        {
            case ModuleInventPurchSalesVendCustGroup::Vend :
                moduleRelationName = VendTable::find(this.CustVendRelation).name();
                break;
            case ModuleInventPurchSalesVendCustGroup::Cust :
                moduleRelationName = CustTable::find(this.CustVendRelation).name();
                break;
        }

        return moduleRelationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        this.SHA256Hash = this.hashKey();      
        super();
        CustVendExternalItemDescription::flushExistsCheckCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim(boolean _forUpdate = false)
    {
        return InventDim::find(this.InventDimId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        this.SHA256Hash = this.hashKey();
        super();
        CustVendExternalItemDescription::flushExistsCheckCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashKey</Name>
				<Source><![CDATA[
    // <summary>
    /// Calculates the hashed key for the number sequence scope.
    /// </summary>
    /// <returns>
    /// A string hash key.
    /// </returns>
    private str hashKey()
    {
        str hashableKey = this.hashableKey();
        str hashString;

        if (hashableKey != '')
        {
            using (System.Security.Cryptography.SHA256 hasher = System.Security.Cryptography.SHA256::Create())
            {
                System.Byte[] hashKeyBytes = System.Text.Encoding::Default.GetBytes(hashableKey);
                System.Byte[] hash = hasher.ComputeHash(hashKeyBytes);
                hashString = System.Convert::ToBase64String(hash);
            }
        }

        return hashString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hashableKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the string to calculate the hash key from.
    /// </summary>
    /// <returns>The string to calculate the hash key from.</returns>
    private str hashableKey()
    {
        Set hashFields = this.fieldIdsToHash();

        if (!hashFields.elements())
        {
            return '';
        }

        List hashableKeys = new List(Types::String);

        SetEnumerator hashFieldsEnumerator = hashFields.getEnumerator();

        while (hashFieldsEnumerator.moveNext())
        {
            FieldId fieldId = hashFieldsEnumerator.current();

            if (this.(fieldId))
            {
                str fieldValue = any2Str(this.(fieldId));
                str formattedFieldValue = strLwr(strRTrim(fieldValue));

                if (formattedFieldValue)
                {
                    hashableKeys.addEnd(int2Str(fieldId) + ':' + formattedFieldValue + '~');
                }
            }
        }

        return hashableKeys.toString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdsToHash</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the set of field Ids that must define the uniqueness of a record in addition to already used ones.
    /// </summary>
    /// <returns>The set of field Ids.</returns>
    protected Set fieldIdsToHash()
    {
        return new Set(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    boolean  validateWrite()
    {
        boolean  ok = true;

        ok = super();

        ok = ok && this.checkAccountRelation();

        // if all dimensions are blank the 'vendor product Id' entry is added for the master products hence AllBlank dimensions is a valid entry
        if (this.InventDimId != InventDim::inventDimIdBlank())
        {
            ok = ok && InventTable::checkProductDimensions(this.ItemId, this.inventDim());
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    static boolean exist(
        ModuleInventPurchSalesVendCustGroup     _moduleType,
        ItemId                                  _itemId,
        InventDimId                             _inventDimId,
        CustVendRel                             _custVendRelation)
    {
        return _itemId && (select custVendExternalItem
                    index hint CustVendExternalItemIdx
                    where custVendExternalItem.ItemId              == _itemId
                       && custVendExternalItem.InventDimId         == _inventDimId
                       && custVendExternalItem.ModuleType          == _moduleType
                       && custVendExternalItem.CustVendRelation    == _custVendRelation).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsForCustVendRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether one or more external item descriptions exist for a given relation.
    /// </summary>
    /// <param name="_custVendAccountId">
    /// The customer or vendor account number.
    /// </param>
    /// <param name="_custVendItemGroupId">
    /// The customer or vendor item group ID.
    /// </param>
    /// <param name="_moduleType">
    /// A <c>ModuleCustVend</c> enumeration value.
    /// </param>
    /// <returns>
    /// true if one or more external item descriptions exist; otherwise, false.
    /// </returns>
    public static boolean existsForCustVendRelation(
        CustVendAC                          _custVendAccountId,
        CustVendItemGroupId                 _custVendItemGroupId,
        ModuleCustVend                      _moduleType)
    {
        ModuleInventPurchSalesVendCustGroup tableType;
        ModuleInventPurchSalesVendCustGroup groupType;
        switch (_moduleType)
        {
            case ModuleCustVend::Cust :
                tableType = ModuleInventPurchSalesVendCustGroup::Cust;
                groupType = ModuleInventPurchSalesVendCustGroup::CustGroup;
                break;

            case ModuleCustVend::Vend :
                tableType = ModuleInventPurchSalesVendCustGroup::Vend;
                groupType = ModuleInventPurchSalesVendCustGroup::VendGroup;
                break;
        }

        return (select firstonly CustVendRelation  from custVendExternalItem
                where (custVendExternalItem.CustVendRelation == _custVendAccountId
                       && custVendExternalItem.ModuleType == tableType)
                      || (custVendExternalItem.CustVendRelation == _custVendItemGroupId
                          && custVendExternalItem.ModuleType == groupType)).CustVendRelation != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    [SysObsolete('Use findByNaturalKey() instead.', false, 24\3\2020)]
    static CustVendExternalItem find(
        ModuleInventPurchSalesVendCustGroup     _moduleType,
        ItemId                                  _itemId,
        InventDimId                             _inventDimId,
        CustVendRel                             _custVendRelation,
        boolean                                 _forUpdate = false)
    {
        CustVendExternalItem  custVendExternalItem;

        custVendExternalItem.selectForUpdate(_forUpdate);

        if (_itemId && _inventDimId)
        {
            CustVendExternalItem  searchParameters;

            searchParameters.ItemId             = _itemId;
            searchParameters.InventDimId        = _inventDimId;
            searchParameters.ModuleType         = _moduleType;
            searchParameters.CustVendRelation   = _custVendRelation;

            return CustVendExternalItem::findByNaturalKey(searchParameters, _forUpdate);
        }
            
        return custVendExternalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByNaturalKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>CustVendExternalItem</c> record based on provided search parameters.
    /// </summary>
    /// <param name = "_searchParameter">A search parameter.</param>
    /// <param name = "_forUpdate">Whether found record is supposed to be updated.</param>
    /// <returns>A <c>CustVendExternalItem</c> record.</returns>
    [Hookable(false)]
    static public CustVendExternalItem findByNaturalKey(CustVendExternalItem _searchParameter, boolean _forUpdate = false)
    {
        CustVendExternalItem  custVendExternalItem;

        custVendExternalItem.selectForUpdate(_forUpdate);

        select custVendExternalItem
                index hint CustVendExternalItemIdx
                where custVendExternalItem.ItemId               == _searchParameter.ItemId
                    && custVendExternalItem.InventDimId         == _searchParameter.InventDimId
                    && custVendExternalItem.ModuleType          == _searchParameter.ModuleType
                    && custVendExternalItem.CustVendRelation    == _searchParameter.CustVendRelation
                    && custVendExternalItem.SHA256Hash          == _searchParameter.hashKey();

        return custVendExternalItem;   
    }

]]></Source>
			</Method>
			<Method>
				<Name>findExternalItemId</Name>
				<Source><![CDATA[
    static CustVendExternalItem findExternalItemId(
        ModuleInventPurchSalesVendCustGroup     _moduleType,
        CustVendRel                             _custVendRelation,
        ExternalItemId                          _externalItemId)
    {
        CustVendExternalItem  custVendExternalItem;

        if (_externalItemId && _custVendRelation)
        {
            select custVendExternalItem
                   where custVendExternalItem.ExternalItemId      == _externalItemId
                      && custVendExternalItem.ModuleType          == _moduleType
                      && custVendExternalItem.CustVendRelation    == _custVendRelation;
        }

        return custVendExternalItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdForInvoiceAccount_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the item id for the externalItem and invoice account supplied.
    /// </summary>
    /// <param name="_externalItemId">
    /// The external item id.
    /// </param>
    /// <param name="_invoiceAccount">
    /// The invoice account.
    /// </param>
    /// <returns>
    /// The item id for the invoice account, or if not found, the item id for the item group of the invoice account.
    /// </returns>
    public static ItemId getItemIdForInvoiceAccount_BR(ExternalItemId _externalItemId, VendInvoiceAccount _invoiceAccount)
    {
        CustVendExternalItem externalCodes;
        VendTable            vendor;

        select firstOnly ItemId from externalCodes
            where externalCodes.ExternalItemId == _externalItemId
                && externalCodes.ModuleType == ModuleInventPurchSalesVendCustGroup::Vend
                && externalCodes.CustVendRelation == _invoiceAccount;

        if (!externalCodes)
        {
            select firstOnly ItemId from externalCodes
                where externalCodes.ExternalItemId == _externalItemId
                join VendItemGroupId from vendor
                    where vendor.AccountNum == _invoiceAccount
                    && externalCodes.ModuleType == ModuleInventPurchSalesVendCustGroup::VendGroup
                    && externalCodes.CustVendRelation == vendor.VendItemGroupId;
        }

        return externalCodes.ItemId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124509</DeveloperDocumentation>
	<FormRef>CustVendExternalItem</FormRef>
	<Label>@SYS54793</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>ModuleType</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>CustVendExternalItemIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<Modules>SalesAndMarketing</Modules>
	<PrimaryIndex>CustVendExternalItemIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS7576</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ABCCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalDescription</Name>
			<Label>@SYS54822</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemTxt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExternalItemDescriptions</Name>
			<Label>@SYS54793</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ModuleType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendRelation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemTxt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExternalItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ABCCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ABCCategory</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ABC</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendRelation</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendRel</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExternalItemId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExternalItemTxt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ExternalItemFreeTxt</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ModuleType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ModuleInventPurchSalesVendCustGroup</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SHA256Hash</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<Label>@GLS180550</Label>
			<Visible>No</Visible>
			<StringSize>64</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustVendExternalItemIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SHA256Hash</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ExternalItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExternalItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustVendRelationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustVendRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ModuleType</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendExternalItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleInventPurchSalesVendCustGroup::CustGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleInventPurchSalesVendCustGroup::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDimCombination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDimCombination</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendItemGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustVendItemGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendItemGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendExternalItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleInventPurchSalesVendCustGroup::VendGroup</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_Extern</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ModuleType</Name>
					<Field>ModuleType</Field>
					<ValueStr>ModuleInventPurchSalesVendCustGroup::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>