<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrActivityRequirement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrActivityRequirement extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowEditSchedulingFlags</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>UsedForOperationScheduling</c> and <c>UsedForJobScheduling</c> fields are
    ///    allowed to change based on the requirement type.
    /// </summary>
    /// <returns>
    ///    true if the scheduling fields may change; otherwise, false.
    /// </returns>
    public boolean allowEditSchedulingFlags()
    {
        switch (this.RelationshipType)
        {
            case WrkCtrActivityRequirementType::Skill:
            case WrkCtrActivityRequirementType::Course:
            case WrkCtrActivityRequirementType::Certificate:
            case WrkCtrActivityRequirementType::PersonTitle:
                return false;
            default:
                return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSubtype</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the applicable child record based on the requirement type.
    /// </summary>
    /// <param name="_wrkCtrActivityCapabilityRequirement">
    /// A <c>WrkCtrActivityCapabilityRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivityCertificateRequirement">
    /// A <c>WrkCtrActivityCertificateRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivityCourseRequirement">
    /// A <c>WrkCtrActivityCourseRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivityResourceRequirement">
    /// A <c>WrkCtrActivityResourceRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivityResourceGroupRequirement">
    /// A <c>WrkCtrActivityResourceGroupRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivitySkillRequirement">
    /// A <c>WrkCtrActivitySkillRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivityResourceTypeRequirement">
    /// A <c>WrkCtrActivityResourceTypeRequirement</c> child record.
    /// </param>
    /// <param name="_wrkCtrActivityPersonTitleRequirement">
    /// A <c>WrkCtrActivityPersonTitleRequirement</c> child record.
    /// </param>
    /// <returns>
    /// The applicable child record.
    /// </returns>
    public Common determineSubtype(
        WrkCtrActivityCapabilityRequirement     _wrkCtrActivityCapabilityRequirement,
        WrkCtrActivityCertificateRequirement    _wrkCtrActivityCertificateRequirement,
        WrkCtrActivityCourseRequirement         _wrkCtrActivityCourseRequirement,
        WrkCtrActivityResourceRequirement       _wrkCtrActivityResourceRequirement,
        WrkCtrActivityResourceGroupRequirement  _wrkCtrActivityResourceGroupRequirement,
        WrkCtrActivitySkillRequirement          _wrkCtrActivitySkillRequirement,
        WrkCtrActivityResourceTypeRequirement   _wrkCtrActivityResourceTypeRequirement,
        WrkCtrActivityPersonTitleRequirement    _wrkCtrActivityPersonTitleRequirement,
        boolean                                 _returnEmptyBuffer = false)
    {
        switch (this.RelationshipType)
        {
            case WrkCtrActivityRequirementType::Capability:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityCapabilityRequirement wrkCtrActivityCapabilityRequirementLocal;
                    return wrkCtrActivityCapabilityRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityCapabilityRequirement;
                }
            case WrkCtrActivityRequirementType::Certificate:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityCertificateRequirement wrkCtrActivityCertificateRequirementLocal;
                    return wrkCtrActivityCertificateRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityCertificateRequirement;
                }
            case WrkCtrActivityRequirementType::Course:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityCourseRequirement wrkCtrActivityCourseRequirementLocal;
                    return wrkCtrActivityCourseRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityCourseRequirement;
                }
            case WrkCtrActivityRequirementType::ResourceGroup:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityResourceGroupRequirement wrkCtrActivityResourceGroupRequirementLocal;

                    return wrkCtrActivityResourceGroupRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityResourceGroupRequirement;
                }
            case WrkCtrActivityRequirementType::Skill:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivitySkillRequirement wrkCtrActivitySkillRequirementLocal;
                    return wrkCtrActivitySkillRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivitySkillRequirement;
                }
            case WrkCtrActivityRequirementType::ResourceType:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityResourceTypeRequirement wrkCtrActivityResourceTypeRequirementLocal;
                    return wrkCtrActivityResourceTypeRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityResourceTypeRequirement;
                }
            case WrkCtrActivityRequirementType::PersonTitle:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityPersonTitleRequirement wrkCtrActivityPersonTitleRequirementLocal;
                    return wrkCtrActivityPersonTitleRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityPersonTitleRequirement;
                }
            default:
                if (_returnEmptyBuffer)
                {
                    WrkCtrActivityResourceRequirement wrkCtrActivityResourceRequirementLocal;
                    return wrkCtrActivityResourceRequirementLocal;
                }
                else
                {
                    return _wrkCtrActivityResourceRequirement;
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the name of the activity requirement.
    /// </summary>
    /// <returns>
    ///     The display name of the activity requirement.
    /// </returns>
    public display WrkCtrActivityRequirementEdit displayRequirement()
    {
        if (this.RecId)
        {
            return this.requirementEdit();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayRequirementDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the description of the activity requirement.
    /// </summary>
    /// <returns>
    ///     The description of the activity requirement.
    /// </returns>
    public display Description displayRequirementDescription()
    {
        if (this.RecId)
        {
            return this.subtype().requirementDescription();
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the company for which the requirement must be used.
    /// </summary>
    /// <param name="_throwIfWrkCtrActivityNotFound">
    /// A Boolean value that indicates if an error must be thrown if a <c>WrkCtrActivity</c> record cannot
    /// be found.
    /// </param>
    /// <returns>
    /// The ID of the company for which the requirement must be used.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// A company context could not be established.
    /// </exception>
    public CompanyId getCompanyContext(boolean _throwIfWrkCtrActivityNotFound)
    {
        CompanyId                       companyId;
        WrkCtrActivity                  wrkCtrActivity;
        WrkCtrActivityRequirementSet    wrkCtrActivityRequirementSet = this.wrkCtrActivityRequirementSet();

        if (wrkCtrActivityRequirementSet)
        {
            wrkCtrActivity = wrkCtrActivityRequirementSet.wrkCtrActivity();

            if (wrkCtrActivity)
            {
                // throws an error if context can not be established
                companyId = wrkCtrActivity.getCompanyContext();
            }
        }

        if (   _throwIfWrkCtrActivityNotFound
            && !wrkCtrActivity)
        {
            throw error("@SYS327436");
        }

        return companyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSchedulingFlags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>UsedForJobScheduling</c> and <c>UsedForOperationScheduling</c> fields based on the requirement type.
    /// </summary>
    public void initSchedulingFlags()
    {
        switch (this.RelationshipType)
        {
            case WrkCtrActivityRequirementType::Resource:
            case WrkCtrActivityRequirementType::Skill:
            case WrkCtrActivityRequirementType::Course:
            case WrkCtrActivityRequirementType::Certificate:
            case WrkCtrActivityRequirementType::PersonTitle:
                this.UsedForJobScheduling = NoYes::Yes;
                this.UsedForOperationScheduling = NoYes::No;
                break;
            default:
                this.UsedForJobScheduling = NoYes::Yes;
                this.UsedForOperationScheduling = NoYes::Yes;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        this.RelationshipType = WrkCtrActivityRequirementType::Resource;
        this.initSchedulingFlags();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        if (_fieldName == fieldStr(WrkCtrActivityRequirement, RelationshipType))
        {
                this.initSchedulingFlags();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementEdit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the requirement based on name.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether the requirement name is set.
    /// </param>
    /// <param name="_fetchExistingRecord">
    ///    A Boolean value that specifies whether an existing subtype should be retrieved from the database.
    /// </param>
    /// <param name="_activeRecord">
    ///    A <c>Common</c> record buffer which must be a subtype to this record.
    /// </param>
    /// <param name="_wrkCtrActivityRequirementEdit">
    ///    The new capability name value when the <paramref name="set" /> parameter is true.
    /// </param>
    /// <param name="_companyId">The company ID.</param>
    /// <returns>
    ///    A string with the name of the requirement.
    /// </returns>
    public WrkCtrActivityRequirementEdit requirementEdit(
        boolean                                 _set                            = false,
        boolean                                 _fetchExistingRecord            = true,
        Common                                  _activeRecord                   = null,
        WrkCtrActivityRequirementEdit           _wrkCtrActivityRequirementEdit  = '',
        CompanyId                               _companyId = ''
        )
    {
        Common  common = _activeRecord;

        if (_fetchExistingRecord)
        {
            common = this.subtype();
        }

        if (prmisDefault(_companyId))
        {
            return common.requirementEdit(_set, _wrkCtrActivityRequirementEdit, this);
        }
        else
        {
            return common.requirementEdit(_set, _wrkCtrActivityRequirementEdit, this, false, _companyId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Invokes go to the main table for the active subtable.
    /// </summary>
    /// <param name="_activeRecord">
    ///    A <c>Common</c> record buffer which must be a subtype to this record.
    /// </param>
    public void requirementJumpRef(Common _activeRecord)
    {
        _activeRecord.requirementJumpRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>requirementLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a lookup for requirements.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormStringControl</c> control that the lookup should attach to.
    /// </param>
    /// <param name="_siteId">
    /// The ID of a site to limit the search on.
    /// </param>
    /// <param name="_activeRecord">
    /// A <c>Common</c> record buffer which must be a subtype to this record.
    /// </param>
    public void requirementLookup(FormStringControl _formControl, InventSiteId _siteId, Common _activeRecord)
    {
        _activeRecord.requirementLookup(_formControl, _siteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subtype</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the subtype of this record based on the <c>RelationshipType</c> field.
    /// </summary>
    /// <returns>
    ///    A record buffer of the subtype.
    /// </returns>
    Common subtype()
    {
        WrkCtrActivityCapabilityRequirement     wrkCtrActivityCapabilityRequirement;
        WrkCtrActivityCertificateRequirement    wrkCtrActivityCertificateRequirement;
        WrkCtrActivityCourseRequirement         wrkCtrActivityCourseRequirement;
        WrkCtrActivityResourceRequirement       wrkCtrActivityResourceRequirement;
        WrkCtrActivityResourceGroupRequirement  wrkCtrActivityResourceGroupRequirement;
        WrkCtrActivitySkillRequirement          wrkCtrActivitySkillRequirement;
        WrkCtrActivityResourceTypeRequirement   wrkCtrActivityResourceTypeRequirement;
        WrkCtrActivityPersonTitleRequirement    wrkCtrActivityPersonTitleRequirement;

        Common                                  common;

        switch (this.RelationshipType)
        {
            case WrkCtrActivityRequirementType::Capability:
                select firstonly forupdate wrkCtrActivityCapabilityRequirement
                    where wrkCtrActivityCapabilityRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityCapabilityRequirement;
                break;

            case WrkCtrActivityRequirementType::Certificate:
                select firstonly forupdate wrkCtrActivityCertificateRequirement
                    where wrkCtrActivityCertificateRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityCertificateRequirement;
                break;
            case WrkCtrActivityRequirementType::Course:
                select firstonly forupdate wrkCtrActivityCourseRequirement
                    where wrkCtrActivityCourseRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityCourseRequirement;
                break;

            case WrkCtrActivityRequirementType::Resource:
                select firstonly forupdate wrkCtrActivityResourceRequirement
                    where wrkCtrActivityResourceRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityResourceRequirement;
                break;

            case WrkCtrActivityRequirementType::ResourceGroup:
                select firstonly forupdate wrkCtrActivityResourceGroupRequirement
                    where wrkCtrActivityResourceGroupRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityResourceGroupRequirement;
                break;

            case WrkCtrActivityRequirementType::Skill:
                select firstonly forupdate wrkCtrActivitySkillRequirement
                    where wrkCtrActivitySkillRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivitySkillRequirement;
                break;

            case WrkCtrActivityRequirementType::ResourceType:
                select firstonly forupdate wrkCtrActivityResourceTypeRequirement
                    where wrkCtrActivityResourceTypeRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityResourceTypeRequirement;
                break;

            case WrkCtrActivityRequirementType::PersonTitle:
                select firstonly forupdate wrkCtrActivityPersonTitleRequirement
                    where wrkCtrActivityPersonTitleRequirement.ActivityRequirement == this.RecId;
                common = wrkCtrActivityPersonTitleRequirement;
                break;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean                     ret;

        ret = super();

        if (ret
            && this.UsedForJobScheduling == NoYes::No
            && this.UsedForOperationScheduling == NoYes::No)
        {
            ret = checkFailed("@SYS301003");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrkCtrActivityRequirementSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the requirement that is related to the requirement set record.
    /// </summary>
    /// <returns>
    /// The requirement set record that the relates to the requirement.
    /// </returns>
    public WrkCtrActivityRequirementSet wrkCtrActivityRequirementSet()
    {
        return WrkCtrActivityRequirementSet::find(this.ActivityRequirementSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>WrkCtrActivityRequirement</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The ID of the requirement record.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>WrkCtrActivityRequirement</c> table; otherwise, an empty record.
    /// </returns>
    static WrkCtrActivityRequirement find(recId     _recId,
                                          boolean   _forUpdate = false)
    {
        WrkCtrActivityRequirement   wrkCtrActivityRequirement;

        wrkCtrActivityRequirement.selectForUpdate(_forUpdate);

        if (_recId)
        {
            select firstonly wrkCtrActivityRequirement
                where wrkCtrActivityRequirement.RecId == _recId;
        }

        return wrkCtrActivityRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromActivityRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies an activity requirement from another instance of the <c>WrkCtrActivityRequirement</c>.
    /// </summary>
    /// <param name = "_fromWrkCtrActivityRequirement">An activity requirement to copy from.</param>
    /// <param name = "_toWrkCtrActivityRequirementSet">An activity requirement set.</param>
    public void copyFromActivityRequirement(WrkCtrActivityRequirement _fromWrkCtrActivityRequirement, WrkCtrActivityRequirementSet _toWrkCtrActivityRequirementSet)
    {
        this.data(_fromWrkCtrActivityRequirement);
        this.ActivityRequirementSet = _toWrkCtrActivityRequirementSet.RecId;
        this.insert();

        this.copySubtypeFromActivityRequirement(_fromWrkCtrActivityRequirement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySubtypeFromActivityRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies an activity requirement subtype from <paramref name="_fromWrkCtrActivityRequirement" />.
    /// </summary>
    /// <param name = "_fromWrkCtrActivityRequirement">An activity requirement record.</param>
    private void copySubtypeFromActivityRequirement(WrkCtrActivityRequirement _fromWrkCtrActivityRequirement)
    {
        switch (_fromWrkCtrActivityRequirement.RelationshipType)
        {
            case WrkCtrActivityRequirementType::Capability:
                WrkCtrActivityCapabilityRequirement toWrkCtrActivityCapabilityRequirement;
                toWrkCtrActivityCapabilityRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityCapabilityRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityCapabilityRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::Certificate:
                WrkCtrActivityCertificateRequirement toWrkCtrActivityCertificateRequirement;
                toWrkCtrActivityCertificateRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityCertificateRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityCertificateRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::Course:
                WrkCtrActivityCourseRequirement toWrkCtrActivityCourseRequirement;
                toWrkCtrActivityCourseRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityCourseRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityCourseRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::Resource:
                WrkCtrActivityResourceRequirement toWrkCtrActivityResourceRequirement;
                toWrkCtrActivityResourceRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityResourceRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityResourceRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::ResourceGroup:
                WrkCtrActivityResourceGroupRequirement toWrkCtrActivityResourceGroupRequirement;
                toWrkCtrActivityResourceGroupRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityResourceGroupRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityResourceGroupRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::Skill:
                WrkCtrActivitySkillRequirement toWrkCtrActivitySkillRequirement;
                toWrkCtrActivitySkillRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivitySkillRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivitySkillRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::ResourceType:
                WrkCtrActivityResourceTypeRequirement toWrkCtrActivityResourceTypeRequirement;
                toWrkCtrActivityResourceTypeRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityResourceTypeRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityResourceTypeRequirement.insert();
                break;
            case WrkCtrActivityRequirementType::PersonTitle:
                WrkCtrActivityPersonTitleRequirement toWrkCtrActivityPersonTitleRequirement;
                toWrkCtrActivityPersonTitleRequirement.data(_fromWrkCtrActivityRequirement.subtype());
                toWrkCtrActivityPersonTitleRequirement.ActivityRequirement = this.RecId;
                toWrkCtrActivityPersonTitleRequirement.insert();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WrkCtr</ConfigurationKey>
	<DeveloperDocumentation>@SYS134886</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<FormRef>Routeopr</FormRef>
	<Label>@SYS134222</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RelationshipType</TitleField1>
	<TitleField2>UsedForJobScheduling</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityCapabilityRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityCapabilityRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityCertificateRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityCertificateRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityCourseRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityCourseRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityPersonTitleRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityPersonTitleRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityResourceGroupRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityResourceGroupRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityResourceRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityResourceRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivityResourceTypeRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivityResourceTypeRequirement</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>WrkCtrActivitySkillRequirement</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>WrkCtrActivitySkillRequirement</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelationshipType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityRequirementSet</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RelationshipType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SchedulingUsage</Name>
			<Label>@SYS300999</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>UsedForOperationScheduling</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsedForJobScheduling</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ActivityRequirementSet</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RelationshipType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>WrkCtrActivityRequirementType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UsedForJobScheduling</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrUsedForJobScheduling</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UsedForOperationScheduling</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrUsedForOperationScheduling</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ActivityRequirementSetIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityRequirementSet</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ActivityRequirementSet</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrActivityRequirementSet</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ActivityRequirementSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ResourceRequirement</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityRequirementSet</Name>
					<Field>ActivityRequirementSet</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>