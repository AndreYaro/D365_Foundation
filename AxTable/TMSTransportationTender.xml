<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTransportationTender</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSTransportationTender extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createHistoryRecord</Name>
				<Source><![CDATA[
	/// <summary>
	/// Creates a history record for the current <c>TMSTransportationTender</c> record.
	/// </summary>
    void createHistoryRecord()
    {
        TMSTransTenderHistory tenderHistory;

        ttsbegin;

        tenderHistory.TransportationOrderNum     = this.TransportationOrderNum;
        tenderHistory.TenderStatus               = this.TenderStatus;
        tenderHistory.RequestedRate              = this.RequestedRate;
        tenderHistory.RequestedPickupDateTime    = this.RequestedPickupDateTime;
        tenderHistory.ConfirmedRate              = this.ConfirmedRate;
        tenderHistory.ConfirmedPickupDateTime    = this.ConfirmedPickupDateTime;
        tenderHistory.Miles                      = this.Miles;
        tenderHistory.Weight                     = this.Weight;
        tenderHistory.EquipmentCode              = this.EquipmentCode;
        if (!tenderHistory.validateWrite())
        {
                throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSTransTenderHistory)));
        }
        else
        {
            tenderHistory.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        TMSRoute            route;
        TMSRouteSegment     routeSegement;
        TMSRouteSegmentLoad segmentLoad;

        ttsbegin;
        while select forupdate route
            where route.TransportationOrderNum == this.TransportationOrderNum
        {
            route.TransportationOrderNum = '';
            if (!route.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotUpdateRecordInTable", tablePName(TMSRoute)));
            }
            else
            {
                route.update();
            }
        }

        while select forupdate routeSegement
            where routeSegement.TransportationOrderNum == this.TransportationOrderNum
        {
            routeSegement.TransportationOrderNum = '';
            if (!routeSegement.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotUpdateRecordInTable", tablePName(TMSRouteSegment)));
            }
            else
            {
                routeSegement.update();
            }
        }

        while select forupdate segmentLoad
            where segmentLoad.TransportationOrderNum == this.TransportationOrderNum
        {
            segmentLoad.TransportationOrderNum = '';
            if (!segmentLoad.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotUpdateRecordInTable", tablePName(TMSRouteSegmentLoad)));
            }
            else
            {
                segmentLoad.update();
            }
        }
        ttscommit;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>destinationPostalAddress</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the address of the destination location.
	/// </summary>
	/// <returns>
	/// The address of the destination location.
	/// </returns>
    public LogisticsPostalAddress destinationPostalAddress()
    {
        return LogisticsPostalAddress::findByLocation(this.DestinationLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReference</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the reference record using reference type.
	/// </summary>
	/// <param name="_forUpdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The reference record associated with the tender.
	/// </returns>
    Common getReference(boolean _forUpdate = false)
    {
        Common              source;

        switch (this.TenderRefType)
        {
            // load
            case TMSTenderRefType::Load:
                source = WHSLoadTable::find(this.RefId, _forUpdate);
                break;

            // Segment
            case TMSTenderRefType::RouteSegment:
                source = TMSRouteSegment::find(this.RefId, this.Sequence, _forUpdate);
                break;

            // Segment Load
            case TMSTenderRefType::RouteSegLoad:
                source = TMSRouteSegmentLoad::find(this.RefId, this.Sequence, this.LoadId, _forUpdate);
                break;

            // route
            case TMSTenderRefType::Route:
                source = TMSRoute::find(this.RefId, _forUpdate);
                break;
        }

        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLoadTable</Name>
				<Source><![CDATA[
	/// <summary>
	/// Establish transportation tender information from load record
	/// </summary>
	/// <param name="_loadTable">
	/// Load record
	/// </param>
    void initFromLoadTable(WHSLoadTable _loadTable)
    {
        TMSRouteSegment     routeSegment;
        TMSRoute            route;

        this.RefId                      = _loadTable.LoadId;
        this.TenderRefType              = TMSTenderRefType::Load;
        this.CarrierCode                = _loadTable.CarrierCode;
        this.CarrierServiceCode         = _loadTable.CarrierServiceCode;
        this.Weight                     = _loadTable.effectiveGrossWeight();
        this.EquipmentCode              = WHSLoadTemplate::find(_loadTable.LoadTemplateId).EquipmentCode;
        this.OriginLocation             = LogisticsPostalAddress::findRecId(_loadTable.OriginPostalAddress).Location;
        this.DestinationLocation        = LogisticsPostalAddress::findRecId(_loadTable.DestinationPostalAddress).Location;
        this.RequestedPickupDateTime    = _loadTable.LoadSchedShipUTCDateTime;

        if (_loadTable.displayNumberOfShipments() == 1)
        {
            this.initFromShipment(WHSShipmentTable::find(_loadTable.displayShipment()));
        }

        route = TMSRoute::find(_loadTable.RouteCode);

        if (route)
        {
            select count(RecId) from routeSegment
                where routeSegment.RouteCode == route.RouteCode;

            if (routeSegment.RecId == 1)
            {
                this.Miles = route.totalMiles();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRoute</Name>
				<Source><![CDATA[
	/// <summary>
	/// Establish transportation tender information from route record
	/// </summary>
	/// <param name="_route">
	/// Route record
	/// </param>
    void initFromRoute(TMSRoute _route)
    {
        this.RefId                      = _route.RouteCode;
        this.TenderRefType              = TMSTenderRefType::Route;
        this.CarrierCode                = _route.routeCarrier();
        this.CarrierServiceCode         = _route.routeCarrierService();
        this.Miles                      = _route.totalMiles();
        this.CurrencyCode               = _route.CurrencyCode;
        this.RequestedRate              = _route.displayTotalShipperRate();
        this.RequestedPickupDateTime    = _route.ShipUTCDateTime;
        this.Weight						= 0;

        WHSLoadTable loadTable;

        while select loadTable
            where loadTable.RouteCode == _route.RouteCode
        {
            this.Weight += loadTable.effectiveGrossWeight();
        }
               
        this.initFromRouteSegments(_route.RouteCode, _route.TransportationOrderNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Establish transportation tender information from segment record
    /// </summary>
    /// <param name="_routeSegment">
    /// Route segment record
    /// </param>
    public void initFromRouteSegment(TMSRouteSegment _routeSegment)
    {
        this.RefId                      = _routeSegment.RouteCode;
        this.Sequence                   = _routeSegment.Sequence;
        this.TenderRefType              = TMSTenderRefType::RouteSegment;
        this.CarrierCode                = _routeSegment.CarrierCode;
        this.CarrierServiceCode         = _routeSegment.CarrierServiceCode;
        this.Miles                      = _routeSegment.Miles;
        this.CurrencyCode               = _routeSegment.CurrencyCode;
        this.RequestedRate              = _routeSegment.ShipperRate;
        this.RequestedPickupDateTime    = _routeSegment.ScheduledShipUTCDateTime;
        this.Weight						= 0;
       
        WHSLoadTable        loadTable;
        TMSRouteSegmentLoad segmentLoad;

        while select loadTable
            exists join segmentLoad
            where segmentLoad.Id            == loadTable.LoadId
                && segmentLoad.RouteCode    == _routeSegment.RouteCode
                && segmentLoad.Sequence     == _routeSegment.Sequence
        {
            this.Weight += loadTable.effectiveGrossWeight();
        }
        
        this.OriginLocation         = _routeSegment.OriginLocation;
        this.DestinationLocation    = _routeSegment.DestinationLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteSegmentLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Establishes transportation tender record based on segment load information
    /// </summary>
    /// <param name="_segmentLoad">
    /// Segment load record
    /// </param>
    public void initFromRouteSegmentLoad(TMSRouteSegmentLoad _segmentLoad)
    {
        TMSRouteSegment routeSegment;
        WHSLoadTable    loadTable;

        select firstonly OriginLocation, DestinationLocation, CarrierCode, CarrierServiceCode, Miles from routeSegment
            where routeSegment.RouteCode == _segmentLoad.RouteCode &&
                  routeSegment.Sequence  == _segmentLoad.Sequence;

        this.RefId                      = _segmentLoad.RouteCode;
        this.Sequence                   = _segmentLoad.Sequence;
        this.LoadId                     = _segmentLoad.Id;
        this.TenderRefType              = TMSTenderRefType::RouteSegLoad;
        this.CarrierCode                = routeSegment.CarrierCode;
        this.CarrierServiceCode         = routeSegment.CarrierServiceCode;
        this.Miles                      = routeSegment.Miles;
        this.RequestedPickupDateTime    = routeSegment.ScheduledShipUTCDateTime;

        loadTable = WHSLoadTable::find(_segmentLoad.Id);

        this.Weight              = loadTable.effectiveGrossWeight();
        this.EquipmentCode       = WHSLoadTemplate::find(loadTable.LoadTemplateId).EquipmentCode;

        this.OriginLocation         = routeSegment.OriginLocation;
        this.DestinationLocation    = routeSegment.DestinationLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Establishes transportation tender information based on route segments
    /// </summary>
    /// <param name="_routeCode">
    /// Route code
    /// </param>
    /// <param name="_tenderNum">
    /// Transportation tender number
    /// </param>
    public void initFromRouteSegments(TMSRouteCode _routeCode, TMSTransportationOrderNum _tenderNum)
    {
        TMSRouteSegment routeSegment;

        // Select first segment with the same trans tender
        select firstonly OriginLocation from routeSegment
            order by Sequence asc
            where routeSegment.RouteCode                == _routeCode
                && routeSegment.TransportationOrderNum  == _tenderNum;

        if (!routeSegment.OriginLocation)
        {
            select firstonly OriginLocation from routeSegment
                order by Sequence asc
                where routeSegment.RouteCode == _routeCode;
        }

        this.OriginLocation         = routeSegment.OriginLocation;

        // Select last segment with the same trans tender
        select firstonly DestinationLocation from routeSegment
            order by Sequence desc
            where routeSegment.RouteCode                == _routeCode
                && routeSegment.TransportationOrderNum  == _tenderNum;

        if (!routeSegment.DestinationLocation)
        {
            select firstonly DestinationLocation from routeSegment
                order by Sequence desc
                where routeSegment.RouteCode  == _routeCode;
        }

        this.DestinationLocation    = routeSegment.DestinationLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Establishes TMSTransportationTender information based on shipment
    /// </summary>
    /// <param name="_shipmentTable">
    ///    Shipment table record used to initialize data
    /// </param>
    public void initFromShipment(WHSShipmentTable _shipmentTable)
    {
        LogisticsLocationRecId location = _shipmentTable.getDropOffAddress().parmLocation();
        if (location)
        {
            this.DestinationLocation = location;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.setTransportationOrderNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        TMSTransportTender transTender = new TMSTransportTender();

        super();

        transTender.setTransTenderNum(this.getReference(true), this.TransportationOrderNum, this.TenderRefType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        Common reference;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(TMSTransportationTender, RefId):
            case fieldNum(TMSTransportationTender, Sequence):
            case fieldNum(TMSTransportationTender, LoadId):
                reference = this.getReference();

                if (reference)
                {
                    switch (this.TenderRefType)
                    {
                        case TMSTenderRefType::Load:
                            this.initFromLoadTable(reference);
                            break;

                        case TMSTenderRefType::RouteSegment:
                            this.initFromRouteSegment(reference);
                            break;

                        case TMSTenderRefType::RouteSegLoad:
                            this.initFromRouteSegmentLoad(reference);
                            break;

                        case TMSTenderRefType::Route:
                            this.initFromRoute(reference);
                            break;
                    }
                }
                break;
        }

        if (this.TenderStatus > TMSTenderStatus::PendingChange)
        {
            this.TenderStatus = TMSTenderStatus::PendingChange;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originPostalAddress</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the address of the origin location.
	/// </summary>
	/// <returns>
	/// The address of the origin location.
	/// </returns>
    public LogisticsPostalAddress originPostalAddress()
    {
        return LogisticsPostalAddress::findByLocation(this.OriginLocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransportationOrderNum</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets a new transportation order number using number sequence.
	/// </summary>
    void setTransportationOrderNum()
    {
        this.TransportationOrderNum = NumberSeq::newGetNum(TMSParameters::numRefTMSTransportationOrderNum()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();

        if (this.TenderStatus != TMSTenderStatus::Pending)
        {
            this.createHistoryRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForAccepted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the Tender Status is set to accepted.
    /// </summary>
    /// <param name="_loadId">
    /// Specifies the load used to select the Transportation Tender record.
    /// </param>
    /// <returns>
    /// True if all tenders are accepted for load; otherwise false.
    /// </returns>
    public static boolean checkForAccepted(WHSLoadId _loadId)
    {
        TMSRoute                route;
        TMSRouteSegment         routeSegment;
        TMSRouteSegmentLoad     segmentLoad;
        TMSTransportationTender transTender;
        boolean                 ret = true;
        boolean                 loadTendered;
        
        while select transTender
            where transTender.RefId == _loadId
        {
            ret = false;
            loadTendered = true;
            if (transTender.TenderStatus == TMSTenderStatus::Accepted)
            {
                ret = true;
                break;
            }
        }

        if (ret && !loadTendered)
        {
            while select TransportationOrderNum from route
                join TransportationOrderNum from routeSegment
                where route.RouteCode == routeSegment.RouteCode
                join TransportationOrderNum from segmentLoad
                    where segmentLoad.RouteCode  == routeSegment.RouteCode    &&
                          segmentLoad.Sequence   == routeSegment.Sequence     &&
                          segmentLoad.Id         == _loadId
            {
                if (!route.TransportationOrderNum)
                {
                    ret = false;
                }

                else
                {
                    transTender = TMSTransportationTender::find(segmentLoad.TransportationOrderNum);

                    ret = transTender.TenderStatus != TMSTenderStatus::Accepted ? false : true;
                }

                if (!ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForTender</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a load is associated with a transportation tender.
	/// </summary>
	/// <param name="_loadId">
	/// Id of the load.
	/// </param>
	/// <returns>
	/// True if the load is associated with a transportation tender.
	/// </returns>
    public static boolean checkForTender(WHSLoadId _loadId)
    {
        TMSRouteSegmentLoad     segmentLoad;
        TMSTransportationTender transTender;

        select firstonly segmentLoad
            where segmentLoad.Id                     == _loadId &&
                  segmentLoad.TransportationOrderNum == '';

        if (segmentLoad)
        {
            select firstonly transTender
                where transTender.RefId == _loadId;
        }

        return !segmentLoad || transTender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if a specific <c>TMSTransportationTender</c> record exists.
	/// </summary>
	/// <param name="_tmsTransportationOrderNum">
	/// Transportation order number of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(TMSTransportationOrderNum _tmsTransportationOrderNum)
    {
        return (_tmsTransportationOrderNum) &&
               (select firstonly tmsTransportationTender
                where tmsTransportationTender.TransportationOrderNum == _tmsTransportationOrderNum).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>TMSTransportationTender</c> record with given parameters.
	/// </summary>
	/// <param name="_tmsTransportationOrderNum">
	/// Transportation order number of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static TMSTransportationTender find(TMSTransportationOrderNum _tmsTransportationOrderNum,
                                               boolean                   _forupdate = false)
    {
        TMSTransportationTender    tmsTransportationTender;

        if (_tmsTransportationOrderNum)
        {
            tmsTransportationTender.selectForUpdate(_forupdate);

            select firstonly tmsTransportationTender
                where tmsTransportationTender.TransportationOrderNum == _tmsTransportationOrderNum;
        }

        return tmsTransportationTender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRefId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific record by reference document id.
	/// </summary>
	/// <param name="">
	/// Id of the reference document.
	/// </param>
	/// <param name="_sequence">
	/// Sequence number of the record.
	/// </param>
	/// <param name="_loadId">
	/// Associated load id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static TMSTransportationTender findByRefId(TMSRefId      _refId,
                                                      TMSSequence   _sequence = 0,
                                                      WHSLoadId     _loadId = '',
                                                      boolean       _forupdate = false)
    {
        TMSTransportationTender    tmsTransportationTender;

        if (_refId && _sequence && _loadId)
        {
            tmsTransportationTender.selectForUpdate(_forupdate);

            select firstonly tmsTransportationTender
                where tmsTransportationTender.RefId      == _refId &&
                      tmsTransportationTender.Sequence   == _sequence &&
                      tmsTransportationTender.LoadId     == _loadId;
        }

        return tmsTransportationTender;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCarrierServiceCode</Name>
				<Source><![CDATA[
	/// <summary>
	/// Performs lookup on carrier service code using carrier code.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control.
	/// </param>
	/// <param name="_carrierCode">
	/// Carrier code of the <c>TMSCarrierService</c> records.
	/// </param>
    static void lookupCarrierServiceCode(FormControl _ctrl, TMSCarrierCode _carrierCode)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        if (_carrierCode)
        {
            sysTableLookup          = SysTableLookup::newParameters(tableNum(TMSCarrierService), _ctrl);
            query                   = new Query();
            queryBuildDataSource    = query.addDataSource(tableNum(TMSCarrierService));

            sysTableLookup.addLookupfield(fieldNum(TMSCarrierService, CarrierServiceCode));
            sysTableLookup.addLookupfield(fieldNum(TMSCarrierService, Name));
            sysTableLookup.addLookupfield(fieldNum(TMSCarrierService, CarrierCode));
            queryBuildDataSource.addRange(fieldNum(TMSCarrierService, CarrierCode)).value(queryValue(_carrierCode));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupLoadId</Name>
				<Source><![CDATA[
	/// <summary>
	/// Performs lookup on load id using segment information.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control.
	/// </param>
	/// <param name="_routeCode">
	/// Route code of the segment.
	/// </param>
	/// <param name="_sequence">
	/// Sequence number of the segment.
	/// </param>
    static void lookupLoadId(FormControl _ctrl, TMSRouteCode _routeCode, TMSSequence _sequence)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        if (_routeCode && _sequence)
        {
            sysTableLookup          = SysTableLookup::newParameters(tableNum(TMSRouteSegmentLoad), _ctrl);
            query                   = new Query();
            queryBuildDataSource    = query.addDataSource(tableNum(TMSRouteSegmentLoad));

            sysTableLookup.addLookupfield(fieldNum(TMSRouteSegmentLoad, Id));
            queryBuildDataSource.addRange(fieldNum(TMSRouteSegmentLoad, RouteCode)).value(queryValue(_routeCode));
            queryBuildDataSource.addRange(fieldNum(TMSRouteSegmentLoad, Sequence)).value(queryValue(_sequence));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSequence</Name>
				<Source><![CDATA[
	/// <summary>
	/// Performs lookup on segment sequence of a route.
	/// </summary>
	/// <param name="_ctrl">
	/// Form control.
	/// </param>
	/// <param name="_routeCode">
	/// Route code of the segment.
	/// </param>
    static void lookupSequence(FormControl _ctrl, TMSRouteCode _routeCode)
    {
        SysTableLookup          sysTableLookup;
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;

        if (_routeCode)
        {
            sysTableLookup          = SysTableLookup::newParameters(tableNum(TMSRouteSegment), _ctrl);
            query                   = new Query();
            queryBuildDataSource    = query.addDataSource(tableNum(TMSRouteSegment));

            sysTableLookup.addLookupfield(fieldNum(TMSRouteSegment, Sequence));
            queryBuildDataSource.addRange(fieldNum(TMSRouteSegment, RouteCode)).value(queryValue(_routeCode));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTenderStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tender tatus for a <c>TMSTransportationTender</c>.
    /// </summary>
    /// <param name="_transportationTender">
    /// The <c>TMSTransportationTender</c> that is to be udpdated.
    /// </param>
    /// <param name="_tenderStatus">
    /// The <c>TMSTenderStatus</c> to update with.
    /// </param>
    public static void updateTenderStatus(TMSTransportationTender _transportationTender, TMSTenderStatus _tenderStatus)
    {
        TMSTransportationTender transportationTender;

        ttsbegin;

        transportationTender = TMSTransportationTender::find(_transportationTender.TransportationOrderNum, true);

        if (transportationTender)
        {
            transportationTender.TenderStatus = _tenderStatus;
            transportationTender.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1988</DeveloperDocumentation>
	<FormRef>TMSTransportationTemplate</FormRef>
	<Label>@TRX1404</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>TransportationOrderNum</TitleField1>
	<TitleField2>RefId</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>TransportationOrderNumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>TransportationOrderNumIdx</PrimaryIndex>
	<ReplacementKey>TransportationOrderNumIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmedPickupDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedPickupDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Miles</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EquipmentCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@TRX1387</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ConfirmedPickupDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ConfirmedRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedPickupDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RequestedRate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Miles</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Weight</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EquipmentCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierServiceCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CarrierCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TenderRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LoadId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Sequence</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DestinationLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OriginLocation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CarrierServiceCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSCarrierServiceCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ConfirmedPickupDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSConfirmedPickupDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ConfirmedRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSConfirmedRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DestinationLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EquipmentCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSEquipmentCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLoadId</ExtendedDataType>
			<Label>@TRX:ReferenceSegmentLoad</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Miles</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSMiles</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OriginLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LogisticsLocationRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>RequestedPickupDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRequestedPickupDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RequestedRate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRequestedRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>Sequence</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSSequence</ExtendedDataType>
			<Label>@TRX:ReferenceSequence</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TenderRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSTenderRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TenderStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSTenderStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationOrderNum</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSTransportationOrderNum</ExtendedDataType>
			<Label>@TRX:TransportationTender</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Weight</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSWeight</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransportationOrderNumIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsLocationDestination</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocationDestination</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocationDestination</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DestinationLocation</Name>
					<Field>DestinationLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LogisticsLocationOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LogisticsLocationOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LogisticsLocationOrigin</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OriginLocation</Name>
					<Field>OriginLocation</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrier</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSCarrier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<SourceEDT>TMSCarrierCode</SourceEDT>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSCarrierService</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSCarrierService</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierCode</Name>
					<Field>CarrierCode</Field>
					<RelatedField>CarrierCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CarrierServiceCode</Name>
					<Field>CarrierServiceCode</Field>
					<RelatedField>CarrierServiceCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSEquipment</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSEquipment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EquipmentCode</Name>
					<SourceEDT>TMSEquipmentCode</SourceEDT>
					<Field>EquipmentCode</Field>
					<RelatedField>EquipmentCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRoute</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRoute</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TenderRefType</Name>
					<Field>TenderRefType</Field>
					<ValueStr>TMSTenderRefType::Route</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRouteSegment</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRouteSegment</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Sequence</Name>
					<Field>Sequence</Field>
					<RelatedField>Sequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TenderRefType</Name>
					<Field>TenderRefType</Field>
					<ValueStr>TMSTenderRefType::RouteSegment</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRouteSegmentLoad</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>TMSRouteSegmentLoad</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadId</Name>
					<Field>LoadId</Field>
					<RelatedField>Id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Sequence</Name>
					<Field>Sequence</Field>
					<RelatedField>Sequence</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>RouteCode</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TenderRefType</Name>
					<Field>TenderRefType</Field>
					<ValueStr>TMSTenderRefType::RouteSegLoad</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WHSLoadTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RefId</Name>
					<Field>RefId</Field>
					<RelatedField>LoadId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>TenderRefType</Name>
					<Field>TenderRefType</Field>
					<ValueStr>TMSTenderRefType::Load</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>