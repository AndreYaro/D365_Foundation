<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementSubcontractor</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchAgreementSubcontractor extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>displayCurrentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the posted amount of all the posted vendor invoices to the subcontractor vendor referencing this purchase agreement.
    /// </summary>
    /// <returns>
    /// A real containing the posted amount of all the posted vendor invoices to the subcontractor vendor referencing this purchase agreement.
    /// </returns>
    public display AmountCur displayCurrentAmount()
    {
        VendInvoiceJour                 vendInvoiceJour;
        VendInvoiceTrans                vendInvoiceTrans;
        AgreementLineReleasedLine       agreementLineReleasedLine;
        AgreementLine                   agreementLine;
        PurchAgreementHeader            purchAgreementHeader;
        PurchAgreementHeader            currentPurchAgreementHeader;
        AmountCur                       currentAmount;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            currentAmount = 0;

            if (this.SubcontractorID)
            {
                currentPurchAgreementHeader = PurchAgreementHeader::find(this.PurchAgreementHeader);

                while select firstonly InvoiceAmount from vendInvoiceJour
                    where vendInvoiceJour.InvoiceAccount == this.SubcontractorID

                    join PurchID, InvoiceId, InvoiceDate, NumberSequenceGroup, InternalInvoiceId from vendInvoiceTrans
                        where vendInvoiceTrans.PurchID          == vendInvoiceJour.PurchId
                        && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId

                    join VendInvoiceTrans from agreementLineReleasedLine
                        where agreementLineReleasedLine.VendInvoiceTrans == vendInvoiceTrans.RecId

                    join RecId from agreementLine
                        where agreementLine.RecId == agreementLineReleasedLine.AgreementLine

                    join RecId from purchAgreementHeader
                        where purchAgreementHeader.RecId == agreementLine.Agreement
                        && purchAgreementHeader.RecId == currentPurchAgreementHeader.RecId
                {
                    currentAmount = currentAmount + vendInvoiceJour.InvoiceAmount;
                }
            }

            return currentAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySubContractorName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the vendor account for the current purchase agreement subcontractor ID.
    /// </summary>
    /// <param name="_purchAgreementSubcontractor">
    /// The <c>PurchAgreementSubcontractor</c> table record.
    /// </param>
    /// <returns>
    /// A string that contains the name of the Vendor.
    /// </returns>
    public display VendName displaySubContractorName(PurchAgreementSubcontractor    _purchAgreementSubcontractor)
    {
        VendTable       vendTable;
        DirPartyTable   partyTable;

        if (this.SubcontractorID)
        {
            select firstonly Party from vendTable
                where vendTable.AccountNum == _purchAgreementSubcontractor.SubcontractorID
                join Name from partyTable
                    where partyTable.RecId == vendTable.Party;
        }

        return partyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the vendor account for the current purchase agreement subcontracotor record.
    /// </summary>
    /// <param name="_purchAgreementSubcontractor">
    /// The <c>PurchAgreementSubcontractor</c> table record.
    /// </param>
    /// <returns>
    /// A string that contains the name of the Vendor.
    /// </returns>
    public display VendName displayVendName(PurchAgreementSubcontractor    _purchAgreementSubcontractor)
    {
        VendTable       vendTable;
        DirPartyTable   dirPartyTable;

        select firstonly Party from vendTable
            where vendTable.AccountNum == _purchAgreementSubcontractor.VendTable
            join Name from dirPartyTable
                where dirPartyTable.RecId == vendTable.Party;

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editVendBankAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Manages the setting of vendor bank account ID on purchase agreement subcontractor record.
    /// </summary>
    /// <param name="_set">
    /// true if the vendor bank account ID should be set; otherwise, false.
    /// </param>
    /// <param name="_vendBankAccountID_PSN">
    /// The vendor bank account ID that was selected by a user.
    /// </param>
    /// <returns>
    /// The vendor bank account ID.
    /// </returns>
    public edit BankAccountID editVendBankAccount(boolean _set, BankAccountID _vendBankAccountID_PSN)
    {
        BankAccountID   vendBankAccountID_PSN;

        BankAccountID   originalVendBankAccountID_PSN;
        VendAccount     originalVendAccount_PSN;
        DataAreaId      originalVendBankAccountDataAreaID_PSN;

        VendBankAccount vendBankAccount;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            vendBankAccountID_PSN = _vendBankAccountID_PSN;

            if (_set)
            {
                originalVendBankAccountID_PSN = this.VendBankAccountID_PSN;
                originalVendBankAccountDataAreaID_PSN = this.VendBankAccountDataAreaID_PSN;
                originalVendAccount_PSN = this.VendAccount_PSN;

                vendBankAccount = VendBankAccount::findByCompany(CompanyInfo::findRecId(CompanyInfo::current()).DataArea,
                                                                    this.SubcontractorID, vendBankAccountID_PSN);

                if (vendBankAccount.RecId != 0 && (vendBankAccount.ExpiryDate == utcDateTimeNull() || vendBankAccount.ExpiryDate > DateTimeUtil::getSystemDateTime()))
                {
                    this.VendBankAccountID_PSN = vendBankAccountID_PSN;
                    this.VendBankAccountDataAreaID_PSN = CompanyInfo::findRecId(CompanyInfo::current()).DataArea;

                    this.VendAccount_PSN = this.SubcontractorID;
                }
                else
                {
                    this.VendBankAccountID_PSN = originalVendBankAccountID_PSN;
                    this.VendBankAccountDataAreaID_PSN = originalVendBankAccountDataAreaID_PSN;
                    this.VendAccount_PSN = originalVendAccount_PSN;
                }
            }

            return this.VendBankAccountID_PSN;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PurchAgreementSubcontractor, VendTable), fieldNum(PurchAgreementSubcontractor, SubcontractorID):
                    if (this.VendTable == this.SubcontractorID)
                    {
                        ret =  checkFailed(strFmt("@SPS1373", this.SubcontractorID));
                    }
                break;

                case fieldNum(PurchAgreementSubcontractor, StartDate):
                    if (this.EndDate != dateNull() && this.StartDate > this.EndDate)
                    {
                        ret =  checkFailed("@SPS1387");
                    }
                break;

                case fieldNum(PurchAgreementSubcontractor, EndDate):
                    if (this.EndDate != dateNull() && this.EndDate < this.StartDate)
                    {
                        ret =  checkFailed("@SYS30562");
                    }
                break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record occurs in the <c>PurchAgreementSubcontractor</c> table.
    /// </summary>
    /// <param name="_purchAgreementSubcontractorRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(RecId  _purchAgreementSubcontractorRecId)
    {
        boolean found = true;

        if (!PurchAgreementSubcontractor::exist(_purchAgreementSubcontractorRecId))
        {
            found = checkFailed(strFmt(PurchAgreementSubcontractor::txtNotExist(), _purchAgreementSubcontractorRecId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PurchAgreementSubcontractor</c> table exists.
    /// </summary>
    /// <param name="_purchAgreementSubcontractorRecId">
    /// The RecId of the <c>CustInvoiceTemplate</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId  _purchAgreementSubcontractorRecId)
    {
        boolean found;

        found = (select firstonly RecId from purchAgreementSubcontractor
                    where purchAgreementSubcontractor.RecId == _purchAgreementSubcontractorRecId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsByAgreementHeaderAndCocontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>PurchAgreementSubcontractor</c> table exists.
    /// </summary>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <param name="_vendAccount">
    /// A buffer of the <c>VendTable</c> table.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existsByAgreementHeaderAndCocontractor(AgreementHeaderRecId _purchAgreementHeaderRecId,
                                                                    VendAccount _vendAccount)
    {
        boolean                     found;
        PurchAgreementSubcontractor purchAgreementSubcontractor;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            found = (select firstonly RecId from purchAgreementSubcontractor
                        where purchAgreementSubcontractor.PurchAgreementHeader      == _purchAgreementHeaderRecId
                        && purchAgreementSubcontractor.SubcontractorID              == _vendAccount
                        && purchAgreementSubcontractor.PurchAgreementVendorType_PSN == PurchAgreementVendorType_PSN::Cocontractor).RecId != 0;

            return found;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>PurchAgreementSubcontractor</c> table.
    /// </summary>
    /// <param name="_purchAgreementSubcontractorRecId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchAgreementSubcontractor</c> table buffer.
    /// </returns>
    public static PurchAgreementSubcontractor find(RecId                _purchAgreementSubcontractorRecId,
                                                    boolean             _forUpdate = false,
                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchAgreementSubcontractor  purchAgreementSubcontractor;

        purchAgreementSubcontractor.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            purchAgreementSubcontractor.concurrencyModel(_concurrencyModel);
        }

        select firstonly purchAgreementSubcontractor
        where purchAgreementSubcontractor.RecId == _purchAgreementSubcontractorRecId;

        return purchAgreementSubcontractor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByAgreementHeaderAndCocontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchAgreementSubcontractor</c> table.
    /// </summary>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementHeader</c> record.
    /// </param>
    /// <param name="_vendAccount">
    /// A buffer of the <c>VendTable</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchAgreementSubcontractor</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchAgreementSubcontractor findByAgreementHeaderAndCocontractor(AgreementHeaderRecId _purchAgreementHeaderRecId,
                                                                                    VendAccount _vendAccount,
                                                                                    boolean _forUpdate = false)
    {
        PurchAgreementSubcontractor purchAgreementSubcontractor;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            purchAgreementSubcontractor.selectForUpdate(_forUpdate);

            select firstonly purchAgreementSubcontractor
                where purchAgreementSubcontractor.PurchAgreementHeader      == _purchAgreementHeaderRecId
                && purchAgreementSubcontractor.SubcontractorID              == _vendAccount
                && purchAgreementSubcontractor.PurchAgreementVendorType_PSN == PurchAgreementVendorType_PSN::Cocontractor;

            return purchAgreementSubcontractor;
        }
        else
        {
            return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSubContractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific record in the <c>PurchAgreementSubcontractor</c> table.
    /// </summary>
    /// <param name="_vendTable">
    /// The vendor specified in the <c>PurchAgreementSubContractor</c> table.
    /// </param>
    /// <param name="_purchAgreementHeaderRecId">
    /// The Purch Agreement RecId specified in the <c>PurchAgreementSubContractor</c> table.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A <c>PurchAgreementSubcontractor</c> table buffer.
    /// </returns>
    public static PurchAgreementSubcontractor findSubContractor(VendAccount          _vendTable,
                                                    RefRecId            _purchAgreementHeaderRecId,
                                                    boolean             _forUpdate = false,
                                                    ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchAgreementSubcontractor  purchAgreementSubcontractor;

        purchAgreementSubcontractor.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            purchAgreementSubcontractor.concurrencyModel(_concurrencyModel);
        }

        select firstonly purchAgreementSubcontractor
        where purchAgreementSubcontractor.SubcontractorID == _vendTable
        && purchAgreementSubcontractor.PurchAgreementHeader == _purchAgreementHeaderRecId;

        return purchAgreementSubcontractor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCocontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the subcontractor Id lookup on <c>PurchAgreementSubcontractor</c> table to display the co-contractors associated with a purchase agreement.
    /// </summary>
    /// <param name="_ctrl">
    /// The instance of <c>FormStringControl</c> class.
    /// </param>
    /// <param name="_purchAgreementRecId">
    /// The record ID of the <c>PurchAgreementheader</c> table.
    /// </param>
    public static void lookupCocontractor(FormStringControl _ctrl,
                                            RecId _purchAgreementRecId)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tableNum(VendTable), _ctrl, true);

        Query                   query = new Query();

        QueryBuildDataSource    qbdsVendTable;
        QueryBuildDataSource    qbdsPurchAgreementSubcontractor;

        QueryBuildRange         qbrPurchAgreementHeaderId;
        QueryBuildRange         qbrPurchAgreementVendorType_PSN;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            qbdsVendTable = query.addDataSource(tableNum(VendTable));
            qbdsPurchAgreementSubcontractor = qbdsVendTable.addDataSource(tableNum(PurchAgreementSubcontractor));

            qbdsPurchAgreementSubcontractor.relations(true);

            qbrPurchAgreementHeaderId = qbdsPurchAgreementSubcontractor.addRange(fieldNum(PurchAgreementSubcontractor, PurchAgreementHeader));
            qbrPurchAgreementHeaderId.value(SysQuery::value(_purchAgreementRecId));

            qbrPurchAgreementVendorType_PSN = qbdsPurchAgreementSubcontractor.addRange(fieldNum(PurchAgreementSubcontractor, PurchAgreementVendorType_PSN));
            qbrPurchAgreementVendorType_PSN.value(SysQuery::value(PurchAgreementVendorType_PSN::Cocontractor));

            sysTableLookup.addLookupfield(fieldNum(VendTable, AccountNum));
            sysTableLookup.addLookupMethod(tableMethodStr(VendTable, displayVendName));

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSubcontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the subcontractor Id lookup on <c>PurchAgreementSubcontractor</c> table.
    /// </summary>
    /// <param name="_ctrl">
    /// The instance of <c>FormStringControl</c> class.
    /// </param>
    /// <param name="_purchaseAgreementHeaderVendor">
    /// The vendor account number of purchase agreement record.
    /// </param>
    /// <param name="_subcontractorVendor">
    /// The subcontractor Id of purchase agreement record.
    /// </param>
    /// <param name="_purchAgreementRecId">
    /// The Purchase agreement header record Id.
    /// </param>
    public static void lookupSubcontractor(FormStringControl _ctrl,
                                            AccountNum       _purchaseAgreementHeaderVendor,
                                            AccountNum       _subcontractorVendor,
                                            RecId            _purchAgreementRecId)
    {
        var query = PurchAgreementSubcontractor::lookupSubcontractorQuery(_purchaseAgreementHeaderVendor, _subcontractorVendor, _purchAgreementRecId);

        var sysTableLookup = SysTableLookup::newParameters(tableNum(VendTable), _ctrl, true,
                VendorDataInteractorFactory::useExistingOrCreateResolver(_ctrl, query));

        sysTableLookup.addLookupfield(fieldNum(VendTable, AccountNum));
        sysTableLookup.addLookupfield(fieldNum(VendTable, Party));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveAmbiguousReferenceSubcontractor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the user's entered value, either by taking the value directly as the vendor account number or by mapping
    /// it to the vendor name, which allows the account number value to be found indirectly.
    /// </summary>
    /// <param name = "_ctrl">The control on which contextual data entry is being performed.</param>
    /// <param name="_purchaseAgreementHeaderVendor">The vendor account number of purchase agreement record.</param>
    /// <param name="_subcontractorVendor">The subcontractor Id of purchase agreement record.</param>
    /// <param name="_purchAgreementRecId">The Purchase agreement header record Id.</param>
    /// <returns>The resolved value.</returns>
    /// <remarks>
    /// This method is designed to be used in conjuction with the <c>PurchAgreementSubcontractor::lookupSubcontractor</c> method.
    /// </remarks>
    public static str resolveAmbiguousReferenceSubcontractor(FormStringControl _ctrl,
                                                             AccountNum       _purchaseAgreementHeaderVendor,
                                                             AccountNum       _subcontractorVendor,
                                                             RecId            _purchAgreementRecId)
    {
        return VendorDataInteractorFactory::resolveAmbiguousReferenceForControl(_ctrl,
            PurchAgreementSubcontractor::lookupSubcontractorQuery(_purchaseAgreementHeaderVendor, _subcontractorVendor, _purchAgreementRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupSubcontractorQuery</Name>
				<Source><![CDATA[
    private static Query lookupSubcontractorQuery(AccountNum _purchaseAgreementHeaderVendor,
                                                  AccountNum _subcontractorVendor,
                                                  RecId      _purchAgreementRecId)
    {
        var query = VendorDataInteractorFactory::constructDefaultBaseQuery();
        var qbdsVendTable = query.dataSourceTable(tableNum(VendTable));

        // we can't specify a range on AccountNum on the root data source as it will cause problems when the resolver attempts to alter it,
        // so we add an exists join of the table to itself and place the range on that
        var qbdsVendTableFilter = qbdsVendTable.addDataSource(tableNum(VendTable));
        qbdsVendTableFilter.addLink(fieldNum(VendTable, RecId), fieldNum(VendTable, RecId));
        qbdsVendTableFilter.joinMode(JoinMode::ExistsJoin);

        var qbrAccountNum = qbdsVendTableFilter.addRange(fieldNum(VendTable, AccountNum));
        qbrAccountNum.value(SysQuery::valueNot(_purchaseAgreementHeaderVendor));

        var qbdsPurchAgreementSubcontractor = qbdsVendTable.addDataSource(tableNum(PurchAgreementSubcontractor));
        qbdsPurchAgreementSubcontractor.relations(true);
        qbdsPurchAgreementSubcontractor.joinMode(JoinMode::NoExistsJoin);

        var qbrSubcontractorVendor = qbdsPurchAgreementSubcontractor.addRange(fieldNum(PurchAgreementSubcontractor, VendTable));
        qbrSubcontractorVendor.value(_subcontractorVendor);

        var qbrPurchAgreementHeaderId = qbdsPurchAgreementSubcontractor.addRange(fieldNum(PurchAgreementSubcontractor, PurchAgreementHeader));
        qbrPurchAgreementHeaderId.value(SysQuery::value(_purchAgreementRecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCocontractorForContractorChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>SubcontractorID</c> field for the specified record
    /// at the time of changing the contractor.
    /// </summary>
    /// <param name="_purchAgreementHeaderRecId">
    /// The record ID of the <c>PurchAgreementheader</c> record.
    /// </param>
    /// <param name="_vendTableCurrent">
    /// A buffer of the <c>VendTable</c> table for the current co-contractor.
    /// </param>
    /// <param name="_vendTablePrevious">
    /// A buffer of the <c>VendTable</c> table for the previous co-contractor.
    /// </param>
    public static void updateCocontractorForContractorChange(AgreementHeaderRecId _purchAgreementHeaderRecId,
                                                                VendTable _vendTableCurrent,
                                                                VendTable _vendTablePrevious)
    {
        PurchAgreementSubcontractor purchAgreementSubcontractor;

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            purchAgreementSubcontractor = PurchAgreementSubcontractor::findByAgreementHeaderAndCocontractor(_purchAgreementHeaderRecId, _vendTableCurrent.AccountNum, true);

            if (purchAgreementSubcontractor != null)
            {
                ttsbegin;
                purchAgreementSubcontractor.SubcontractorID     = _vendTablePrevious.AccountNum;
                purchAgreementSubcontractor.update();

                update_recordset purchAgreementSubcontractor
                setting VendTable = _vendTableCurrent.AccountNum
                where purchAgreementSubcontractor.PurchAgreementHeader == _purchAgreementHeaderRecId;
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        if (ret
            && VendBankAccountChangeProposalFeature::instance().isEnabled()
            && VendBankAccount::validateIsDraft(this.VendAccount_PSN, this.VendBankAccountID_PSN, this.VendBankAccountDataAreaID_PSN))
        {
            ret = checkFailed(strFmt("@AccountsPayable:VendBankAccountValidateIsDraftError", this.VendBankAccountID_PSN));
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS1352</DeveloperDocumentation>
	<Label>@SPS1351</Label>
	<TitleField1>SubcontractorID</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProcurementAndSourcing</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubcontractorID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentParticipation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementVendorType_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumAmount_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubcontractorID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Subcontractor</Name>
			<Label>@SYS22167</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubcontractorID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SubcontractPeriod</Name>
			<Label>@SPS1353</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SubcontractorID</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StartDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PercentParticipation</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Vendor</Name>
			<Label>@SYS80105</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchAgreementVendorType_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaximumAmount_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountID_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendBankAccountDataAreaID_PSN</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendAccount_PSN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<StringSize>60</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>EndDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS22882</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MaximumAmount_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SPS2090</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PercentParticipation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SPS1350</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchAgreementHeader</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PurchAgreementVendorType_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PurchAgreementVendorType_PSN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS35856</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubcontractorID</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Label>@SYS22167</Label>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendAccount_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<StringSize>20</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendBankAccountDataAreaID_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<StringSize>4</StringSize>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendBankAccountID_PSN</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>PurchFrenchRegulatory_PSN</ConfigurationKey>
			<ExtendedDataType>BankAccountID</ExtendedDataType>
			<Label>@SPS2094</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendTable</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<StringSize>20</StringSize>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SubcontractorIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchAgreementHeader</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SubcontractorID</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchAgreementHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchAgreementHeader</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PurchAgreementHeader</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementSubcontractor</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchAgreementHeader</Name>
					<Field>PurchAgreementHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SubContractor</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SubContractor</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementSubcontractor</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SubcontractorID</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>SubcontractorID</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendBankAccount</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendBankAccount</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendBankAccount</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementSubcontractor</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendBankAccountDataAreaID_PSN</Name>
					<Field>VendBankAccountDataAreaID_PSN</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendBankAccountID_PSN</Name>
					<Field>VendBankAccountID_PSN</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendAccount_PSN</Name>
					<Field>VendAccount_PSN</Field>
					<RelatedField>VendAccount</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>VendTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>VendTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PurchAgreementSubcontractor</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendTable</Name>
					<SourceEDT>VendAccount</SourceEDT>
					<Field>VendTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>