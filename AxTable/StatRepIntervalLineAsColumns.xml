<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>StatRepIntervalLineAsColumns</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class StatRepIntervalLineAsColumns extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasStatRepIntervalLineRecordsNotDefinedAsColumns</Name>
				<Source><![CDATA[
    internal static boolean hasStatRepIntervalLineRecordsNotDefinedAsColumns()
    {
        StatRepInterval statRepInterval;
        StatRepIntervalLine statRepIntervalLine;
        StatRepIntervalLineAsColumns statRepIntervalLineAsColumns;

        boolean hasUpdates;

        select firstonly crosscompany RecId from statRepIntervalLine
            notexists join statRepIntervalLineAsColumns
                where statRepIntervalLine.Name == statRepIntervalLineAsColumns.Name;

        hasUpdates = statRepIntervalLine.RecId;

        if (!hasUpdates)
        {
            select firstonly crosscompany RecId from statRepIntervalLineAsColumns
                join statRepIntervalLine
                    where statRepIntervalLine.Name == statRepIntervalLineAsColumns.Name
                        && statRepIntervalLine.ModifiedDateTime > statRepIntervalLineAsColumns.ModifiedDateTime;

            hasUpdates = statRepIntervalLineAsColumns.RecId;
        }

        return hasUpdates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateStatRepIntervalLineAsColumns</Name>
				<Source><![CDATA[
    internal static void populateStatRepIntervalLineAsColumns()
    {
        StatRepInterval statRepInterval;
        StatRepIntervalLineAsColumns statRepIntervalLineAsColumns;
        
        StatRepIntervalLineAsColumns::deleteRecordsThatHaveModifiedParents();

        // Add all that don't exist
        while select crosscompany statRepInterval
            notexists join statRepIntervalLineAsColumns
                where statRepIntervalLineAsColumns.Name == statRepInterval.Name
        {
            changecompany (statRepInterval.DataAreaId)
            {
                int i = 1;
                
                StatRepIntervalLineAsColumns columnsLocal;
                columnsLocal.Name = statRepInterval.Name;

                StatRepIntervalLine statRepIntervalLine;
        
                while select statRepIntervalLine
                    order by statRepIntervalLine.LineNum desc
                    where statRepIntervalLine.Name == statRepInterval.Name
                {
                    switch (i)
                    {
                        case 1:
                            columnsLocal.AgingPeriodLabel1 = statRepIntervalLine.Heading;
                            break;
                        case 2:
                            columnsLocal.AgingPeriodLabel2 = statRepIntervalLine.Heading;
                            break;
                        case 3:
                            columnsLocal.AgingPeriodLabel3 = statRepIntervalLine.Heading;
                            break;
                        case 4:
                            columnsLocal.AgingPeriodLabel4 = statRepIntervalLine.Heading;
                            break;
                        case 5:
                            columnsLocal.AgingPeriodLabel5 = statRepIntervalLine.Heading;
                            break;
                        case 6:
                            columnsLocal.AgingPeriodLabel6 = statRepIntervalLine.Heading;
                            break;
                    }

                    i++;
                }

                columnsLocal.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordsThatHaveModifiedParents</Name>
				<Source><![CDATA[
    private static void deleteRecordsThatHaveModifiedParents()
    {
        StatRepInterval statRepIntervalCrossCompany;

        // Remove the records that have been updated to be recreated
        while select crossCompany DataAreaId from statRepIntervalCrossCompany
            group by statRepIntervalCrossCompany.DataAreaId
        {
            changecompany (statRepIntervalCrossCompany.DataAreaId)
            {
                StatRepInterval statRepInterval;
                StatRepIntervalLine statRepIntervalLine;
                StatRepIntervalLineAsColumns columnsDelete;
        
                columnsDelete.skipDataMethods();
                columnsDelete.skipDeleteActions(true);
                columnsDelete.skipAosValidation(true);
                columnsDelete.skipEvents(true);

                delete_from columnsDelete
                    exists join statRepInterval
                        where statRepInterval.Name == columnsDelete.Name
                        join statRepIntervalLine
                            where statRepIntervalLine.Name == statRepInterval.Name
                                && statRepIntervalLine.ModifiedDateTime > columnsDelete.ModifiedDateTime;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@AccountsReceivable:StatRepIntervalLinesAsColumnsDevDoc</DeveloperDocumentation>
	<Label>@AccountsReceivable:StatRepIntervalLinesAsColumns</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<DataSharingType>Single</DataSharingType>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Ledger</Modules>
	<TableContents>DefaultData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendReportName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgingPeriodLabel1</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@AccountsReceivable:AgingPeriod1Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgingPeriodLabel2</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@AccountsReceivable:AgingPeriod2Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgingPeriodLabel3</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@AccountsReceivable:AgingPeriod3Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgingPeriodLabel4</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@AccountsReceivable:AgingPeriod4Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgingPeriodLabel5</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@AccountsReceivable:AgingPeriod5Label</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AgingPeriodLabel6</Name>
			<ExtendedDataType>Description</ExtendedDataType>
			<Label>@AccountsReceivable:AgingPeriod6Label</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AK</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>