<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSGenericEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSGenericEngine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeEngineOnParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes engine value in the <c>TMSEngineParameter</c> records.
    /// </summary>
    /// <param name="_oldEngine">
    /// Old engine value to be changed.
    /// </param>
    /// <param name="_newEngine">
    /// New engine value to be replaced instead.
    /// </param>
    public void changeEngineOnParameters(TMSEngine _oldEngine, TMSEngine _newEngine)
    {
        if (_oldEngine != _newEngine)
        {
            TMSEngineParameter parameter;
            
            ttsbegin;
            while select forupdate parameter
            where parameter.EngineCode   == this.GenericEngineCode    &&
                  parameter.Engine       == _oldEngine
            {
                parameter.Engine = _newEngine;
                parameter.write();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDefaultForEngineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes default engine for other engines with the same type.
    /// </summary>
    public void removeDefaultForEngineType()
    {
        TMSGenericEngine        engine;

        ttsbegin;

        update_recordset engine
               setting DefaultEngine = NoYes::No
               where engine.Engine  == this.Engine &&
                     engine.RecId      != this.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>TMSGenericEngine</c> record exists.
    /// </summary>
    /// <param name="_tmsGenericEngineCode">
    /// Generic engine code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSGenericEngineCode _tmsGenericEngineCode)
    {
        return (_tmsGenericEngineCode) &&
               (select firstonly TMSGenericEngine
                    where tmsGenericEngine.GenericEngineCode == _tmsGenericEngineCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSGenericEngine</c> record with given parameters.
    /// </summary>
    /// <param name="_tmsGenericEngineCode">
    /// Generic engine code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSGenericEngine find(TMSGenericEngineCode _tmsGenericEngineCode,
                                        boolean              _forupdate = false)
    {
        TMSGenericEngine    tmsGenericEngine;

        if (_tmsGenericEngineCode)
        {
            tmsGenericEngine.selectForUpdate(_forupdate);

            select firstonly tmsGenericEngine
                where tmsGenericEngine.GenericEngineCode == _tmsGenericEngineCode;
        }

        return tmsGenericEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefaultByEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a default generic engine by engine type.
    /// </summary>
    /// <param name="_engine">
    /// An engine type for which to find the generic engine.
    /// </param>
    /// <returns>
    /// A <c>TMSGenericEngine</c> engine table record.
    /// </returns>
    public static TMSGenericEngine findDefaultByEngine(TMSEngine _engine)
    {
        TMSGenericEngine  engine;

        select firstOnly engine
            where engine.Engine == _engine
               && engine.DefaultEngine == NoYes::Yes;

        return engine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (ret)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(TMSGenericEngine, EngineTypeSource):
                    if (this.EngineTypeSource == TMSSourceType::Xpp)
                    {
                        if (this.EngineAssembly != '')
                        {
                            ret = checkFailed(strFmt("@TRX:EngineAssemblyBlankForXpp", fieldPName(TMSGenericEngine, EngineAssembly), this.EngineTypeSource));
                        }
                        if (this.Engine != TMSEngine::CheckDigit)
                        {
                            ret = checkFailed(strFmt("@TRX:FieldMustBeValue", fieldPName(TMSGenericEngine, Engine), TMSEngine::CheckDigit, fieldPName(TMSGenericEngine, EngineTypeSource), TMSSourceType::Xpp));
                        }
                    }
                    break;

                case fieldNum(TMSGenericEngine, EngineType):
                    switch (this.Engine)
                    {
                        case TMSEngine::CheckDigit:
                            if (this.EngineTypeSource == TMSSourceType::Xpp)
                            {
                                ClassId interfaceId = classNum(TMSICheckDigitEngine);
                                if (!this.engineClassImplementsInterface(interfaceId))
                                {
                                    ret = checkFailed(strFmt("@TRX:EngineClassDoesNotImplementInterface", this.EngineType, classId2Name(interfaceId)));
                                }
                            }
                    }
                    break;
                case fieldNum(TMSGenericEngine, DefaultEngine):
                    TMSGenericEngine engine = TMSGenericEngine::findDefaultByEngine(this.Engine);
                    if (this.DefaultEngine == NoYes::Yes && engine.RecId && this.RecId != engine.RecId)
                    {
                        ret = checkFailed(strFmt("@TRX:ErrorMessageMoreThanOneDefaultGenericEngine", this.Engine));
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>engineClassImplementsInterface</Name>
				<Source><![CDATA[
    private boolean engineClassImplementsInterface(ClassId _interfaceId)
    {
        boolean     ret                 = false;
        DictClass   engineClass         = SysDictClass::newName(this.EngineType);

        if (engineClass)
        {
            int     interfacesCount     = engineClass.implementsCnt();

            for (int k = 1; k <= interfacesCount; k++)
            {
                if (engineClass.implements(k) == _interfaceId)
                {
                    ret = true;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        TMSEngine oldEngine = this.orig().Engine;
   
        super();

        this.changeEngineOnParameters(oldEngine, this.Engine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret = super() && this.validateField(fieldNum(TMSGenericEngine, DefaultEngine));
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1915</DeveloperDocumentation>
	<FormRef>TMSGenericEngine</FormRef>
	<Label>@TRX668</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>GenericEngineCode</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>GenericEngineCode</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DataSharingType>Duplicate</DataSharingType>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>GenericEngineCode</PrimaryIndex>
	<ReplacementKey>GenericEngineCode</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GenericEngineCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EngineAssembly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EngineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Engine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultEngine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GenericEngineCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GenericEngineCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EngineAssembly</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EngineType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Engine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultEngine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EngineTypeSource</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>DefaultEngine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDefault</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Engine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSEngine</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EngineAssembly</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSEngineAssembly</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EngineType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSEngineType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>GenericEngineCode</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSGenericEngineCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EngineTypeSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>TMSSourceType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>GenericEngineCode</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>GenericEngineCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>