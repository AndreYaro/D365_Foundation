<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryAttributeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResCategoryAttributeGroup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        EcoResCategory ecoResCategoryForLookup = EcoResCategory::find(this.Category);

        // Delete product attribute values, only if product attribute group is being deleted.
        if (this.Modifier == EcoResCategoryAttributeModifier::Product)
        {
            EcoResCategoryAttributeGroup::deleteAttributeValues(this.AttributeGroup, this.Category);
        }

        super();

        EcoResCategoryAttributeLookup::synchronizeWithCategoryAttribute(ecoResCategoryForLookup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByGroupAndCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the attribute type record in the <c>categoryAttributeGroup</c> table using categoryID and group.
    /// </summary>
    /// <param name="_attributeGroupId">
    /// The record ID of the attribute group record to find.
    /// </param>
    /// <param name="_categoryId">
    /// The category record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///  A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>EcoResCategoryAttributeGroup</c> table; otherwise, an empty record.
    /// </returns>
    public static EcoResCategoryAttributeGroup findByGroupAndCategory(RecId _attributeGroupId, RecId _categoryId, boolean _forupdate = false)
    {
        EcoResCategoryAttributeGroup categoryAttributeGropu;

        if (_attributeGroupId && _categoryId)
        {
            categoryAttributeGropu.selectForUpdate(_forupdate);

            select firstonly categoryAttributeGropu
                where categoryAttributeGropu.AttributeGroup == _attributeGroupId && categoryAttributeGropu.Category == _categoryId;
        }

        return categoryAttributeGropu;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAttributeValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes EcoResAttributeValue values to remove dependent attribute values, while deleting attribute group from categories node.
    /// </summary>
    /// <param name = "_attributeGroup">RecId of the attribute group which is being deleted.</param>
    /// <param name = "_category">RecId of the category from which the attribute group is deleted.</param>
    private static void deleteAttributeValues(RefRecId _attributeGroup, RefRecId _category)
    {
        EcoResAttributeValue ecoResAttributeValue;
        EcoResProductInstanceValue ecoResProductInstanceValue;
        EcoResProduct ecoResProduct;
        EcoResProductCategory ecoResProductCategory;
        EcoResCategoryAttributeGroup ecoResCategoryAttributeGroup;
        EcoResProduct ecoResProductExclude;
        EcoResProductCategory ecoResProductCategoryExclude;
        EcoResCategoryAttributeGroup categoryAttributeGroupToExclude;
        EcoResAttributeGroupAttribute attributeGroupAttribute,ecoResAttibuteGroupAttributeOther,ecoResAttibuteGroupAttributeExclude;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            delete_from ecoResAttributeValue
                exists join ecoResProductInstanceValue
                    where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
                    exists join ecoResProduct
                        where ecoResProduct.RecId == ecoResProductInstanceValue.Product
                        exists join ecoResProductCategory
                            where ecoResProductCategory.Product == ecoResProduct.RecId
                            exists join ecoResCategoryAttributeGroup
                                where ecoResCategoryAttributeGroup.Category == ecoResProductCategory.Category
                                    && ecoResCategoryAttributeGroup.AttributeGroup == _attributeGroup
                                    && ecoResCategoryAttributeGroup.Category == _category
                    exists join attributeGroupAttribute
                        where attributeGroupAttribute.Attribute == ecoResAttributeValue.Attribute
                        &&    attributeGroupAttribute.AttributeGroup == _attributeGroup
                    // If the attribute is present in other attribute group and this other attribute group is applied to same product through the same category,
                    // then for those products attibute value shouldn't be deleted.
                    // Following joins will figure out those products.
                    notexists join ecoResProductExclude
                        where ecoResProductExclude.RecId == ecoResProduct.RecId
                    exists join ecoResProductCategoryExclude
                        where ecoResProductCategoryExclude.Product == ecoResProductExclude.RecId
                        exists join categoryAttributeGroupToExclude
                            where categoryAttributeGroupToExclude.Category == ecoResProductCategoryExclude.Category
                            &&    categoryAttributeGroupToExclude.Category == _category
                            &&    categoryAttributeGroupToExclude.Modifier == EcoResCategoryAttributeModifier::Product
                            &&    categoryAttributeGroupToExclude.AttributeGroup != _attributeGroup
                        exists join ecoResAttibuteGroupAttributeOther
                            where ecoResAttibuteGroupAttributeOther.AttributeGroup == categoryAttributeGroupToExclude.AttributeGroup
                        exists join ecoResAttibuteGroupAttributeExclude
                            where ecoResAttibuteGroupAttributeExclude.Attribute == ecoResAttibuteGroupAttributeOther.Attribute
                            &&    ecoResAttibuteGroupAttributeExclude.AttributeGroup == _attributeGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@RET261075</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@RET261170</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Category</TitleField1>
	<TitleField2>AttributeGroup</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>EcoResCategoryAttributeGroupIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroupType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DisplayOrder</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Modifier</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AttributeGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AttributeGroupType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Category</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AttributeGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AttributeGroupType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailAttributeGroupType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Category</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Modifier</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>EcoResCategoryAttributeModifier</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>DisplayOrder</Name>
			<ExtendedDataType>RetailAttributeGroupDisplayOrder</ExtendedDataType>
			<Label>@Retail:RetailEcoResAttributeGroupProductDisplayOrder</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EcoResCategoryAttributeGroupIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AttributeGroup</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Category</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Modifier</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>EcoResCategoryAttributeItemMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AttributeItemId</MapField>
					<MapFieldTo>AttributeGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>Category</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Modifier</MapField>
					<MapFieldTo>Modifier</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResAttributeGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>EcoResAttributeGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AttributeGroup</Name>
					<Field>AttributeGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>EcoResCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>EcoResCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Category</Name>
					<Field>Category</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>