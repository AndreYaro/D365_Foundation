<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillingCodeRate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillingCodeRate extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exist in the Billing code rate table.
    /// </summary>
    /// <param name="_recId">
    /// The unique id of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(recId _recId)
    {
        boolean ret = true;
        ;

        if (!CustBillingCodeRate::exist(_recId))
        {
            ret = checkFailed(strFmt(CustBillingCodeRate::txtNotExist(), _recId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exist in the Billing code rate table.
    /// </summary>
    /// <param name="_recId">
    /// The unique id of the record to find.
    /// </param>
    /// <returns>
    /// true if the record exists; otherwise, false.
    /// </returns>
    public static boolean exist(recId _recId)
    {
        boolean found;
        ;

        found = (select firstonly
                     RecId
                from
                     custBillingCodeRate
                where
                     custBillingCodeRate.RecId == _recId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>CustBillingCodeRate</c> table to find the specified record.
    /// </summary>
    /// <param name="_recId">
    /// The unique ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to read the record for updating; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustBillingCodeRate</c> table buffer.
    /// </returns>
    public static CustBillingCodeRate find(
        recId _recId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBillingCodeRate custBillingCodeRate;
        ;

        custBillingCodeRate.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custBillingCodeRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custBillingCodeRate
            where
            custBillingCodeRate.RecId == _recId;

        return custBillingCodeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustBillingCodeVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>CustBillingCodeRate</c> table to find the specified record.
    /// </summary>
    /// <param name="_refRecId">
    /// The record id of billing code version to find.
    /// </param>
    /// <returns>
    /// <c>CustBillingCodeRate</c>  table buffer.
    /// </returns>
    public static CustBillingCodeRate findByCustBillingCodeVersion(RefRecId _refRecId)
    {
        CustBillingCodeRate custBillingCodeRate;

        select firstonly
            custBillingCodeRate
            where
            custBillingCodeRate.CustBillingCodeVersion == _refRecId;

        return custBillingCodeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total number of records based on Billing Code reference ID
    /// </summary>
    /// <param name="_custBillingCodeVersionRecId">
    /// Billing code version reference ID
    /// </param>
    /// <returns>
    /// Return the total number of records based on Billing code reference id
    /// </returns>
    static int recordCount(RefRecId _custBillingCodeVersionRecId)
    {
        return any2int(
            (select count(RecId)
                from custBillingCodeRate
                where custBillingCodeRate.CustBillingCodeVersion == _custBillingCodeVersionRecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the label number to use when displaying a message to indicate that the record does not exist.
    /// </summary>
    /// <returns>
    /// A string indicating the label number to use.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustBillingCodeVersionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>CustBillingCodeRate</c> table to find the specified record.
    /// </summary>
    /// <param name="_billingCodeVersion">
    /// The <c>CustBillingCodeVersion</c> record ID value of the <c>CustBillingCodeRate</c> record to find.
    /// </param>
    /// <param name="_currency">
    /// The <c>CurrencyCode</c> value of the <c>CustBillingCodeRate</c> record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that determines whether to read the record for updating; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A value used when the table is not automatically concurrent; optional.
    /// </param>
    /// <returns>
    /// A <c>CustBillingCodeRate</c> table buffer.
    /// </returns>
    public static CustBillingCodeRate findByCustBillingCodeVersionCurrency(
        RefRecId                _billingCodeVersion,
        CurrencyCode            _currency,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustBillingCodeRate custBillingCodeRate;

        custBillingCodeRate.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custBillingCodeRate.concurrencyModel(_concurrencyModel);
        }

        select firstonly custBillingCodeRate
            where custBillingCodeRate.CustBillingCodeVersion == _billingCodeVersion
                && custBillingCodeRate.Currency == _currency;

        return custBillingCodeRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBillingCodeRateForStandardCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the record with standard currency in <c>CustBillingCodeRate</c> table.
    /// </summary>
    /// <param name = "_billingCodeVersionRecId">
    /// The record ID of <c>CustBillingCodeVersion</c> table record.
    /// </param>
    /// <remarks>
    /// Creates records if there no record exists.
    /// </remarks>
    public static void createBillingCodeRateForStandardCurrency(RefRecId _billingCodeVersionRecId)
    {
        if (CustBillingCodeRate::recordCount(_billingCodeVersionRecId) == 0)
        {
            CustBillingCodeRate billingCodeRate;

            billingCodeRate.Currency = CompanyInfoHelper::standardCurrency();
            billingCodeRate.CustBillingCodeVersion = _billingCodeVersionRecId;
            billingCodeRate.write();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PublicSector</ConfigurationKey>
	<DeveloperDocumentation>@SPS2222</DeveloperDocumentation>
	<FormRef>CustBillingCode</FormRef>
	<Label>@SPS34</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Currency</TitleField1>
	<TitleField2>Amount</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CustBillingCode</Name>
			<Label>@SPS21</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CustBillingCodeVersion</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS34991</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Currency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SPS22</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Currency</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingCodeVersion</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BillingCodeRateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Currency</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustBillingCodeVersion</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>OneMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Currency</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>Currency</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingCodeVersion</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBillingCodeVersion</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingCodeVersion</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>CustBillingCodeVersion_CustBillingCodeRate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingCodeVersion</Name>
					<Field>CustBillingCodeVersion</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>