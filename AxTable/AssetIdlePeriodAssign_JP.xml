<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetIdlePeriodAssign_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetIdlePeriodAssign_JP extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAssetBookByQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add asset book to <C>AssetIdlePeriodTable_JP</C> by query
    /// </summary>
    /// <param name="_query">
    /// Query to find asset book
    /// </param>
    public void addAssetBookByQuery(Query _query)
    {
        QueryRun                            queryRun;
        AssetBook                           assetBook;
        AssetIdlePeriodTable_JP             assetIdlePeriodTable;
        RecordInsertList                    recordInsertList = new RecordInsertList(tableNum(AssetIdlePeriodTable_JP));

        if (!_query)
        {
            return;
        }

        ttsbegin;

        queryRun = new QueryRun(_query);

        while (queryRun.next())
        {
            assetBook = queryRun.get(tableNum(AssetBook));

            if (assetBook.RecId != 0 && this.validateForOverlap(assetBook.AssetId, assetBook.BookId))
            {
                assetIdlePeriodTable.AssetId                  = assetBook.AssetId;
                assetIdlePeriodTable.BookId                   = assetBook.BookId;
                assetIdlePeriodTable.AssetGroup               = assetBook.AssetGroup;
                assetIdlePeriodTable.AssetIdlePeriodAssign_JP = this.RecId;
                assetIdlePeriodTable.initValue();
                recordInsertList.add(assetIdlePeriodTable);
            }
        }

        recordInsertList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the asset book will overlap periods
    /// </summary>
    /// <param name="_assetId">
    /// The Asset id
    /// </param>
    /// <param name="_bookId">
    /// The Asset book id.
    /// </param>
    /// <returns>
    /// Return true, if overlap is not found, otherwise false with validation message.
    /// </returns>
    public boolean validateForOverlap(AssetId       _assetId,
                                      AssetBookId   _bookId)
    {
        boolean ret = true;
        AssetIdlePeriodAssign_JP    assetIdlePeriodAssign;
        AssetIdlePeriodTable_JP     assetIdlePeriodTable;

        select firstonly RecId from assetIdlePeriodTable
            where assetIdlePeriodTable.AssetId == _assetId
                && assetIdlePeriodTable.BookId == _bookId
        exists join assetIdlePeriodAssign
            where assetIdlePeriodAssign.RecId       == assetIdlePeriodTable.AssetIdlePeriodAssign_JP
                && (assetIdlePeriodAssign.Status    == AssetIdlePeriodStatus_JP::Open
                    || assetIdlePeriodAssign.Status == AssetIdlePeriodStatus_JP::Confirmed)
                && (!(assetIdlePeriodAssign.ValidTo    < this.ValidFrom
                    || assetIdlePeriodAssign.ValidFrom > this.ValidTo));

        if (assetIdlePeriodTable.RecId)
        {
            ret = checkFailed("@FixedAssets:FA_Message_Validation_FixedAssetIdlePeriod_Overlap");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean     ret;

        ret = super();

        if (ret && this.validTo < this.ValidFrom)
        {
            // @SYP4880095 - To date should be later than from date.
            ret = checkFailed("@SYP4880095");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetIdlePeriodAssign_JP</c> table.
    /// </summary>
    /// <param name="_assetIdlePeriodId">
    /// The <c>AssetIdlePeriod_JP</c> Id.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// The <c>AssetIdlePeriodAssign_JP</c> table record.
    /// </returns>
    public static AssetIdlePeriodAssign_JP find(AssetIdlePeriod_JP  _assetIdlePeriodId,
                                                boolean             _forupdate = false,
                                                ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetIdlePeriodAssign_JP   assetIdlePeriodAssign;

        if (_assetIdlePeriodId)
        {
            assetIdlePeriodAssign.selectForUpdate(_forupdate);

            if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
            {
                assetIdlePeriodAssign.concurrencyModel(_concurrencyModel);
            }

            select firstonly assetIdlePeriodAssign
                where assetIdlePeriodAssign.AssetIdlePeriodId == _assetIdlePeriodId;
        }
        return assetIdlePeriodAssign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIdlePeriodStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the asset idle period status.
    /// </summary>
    /// <param name="_assetIdlePeriodAssign">
    /// The <c>AssetIdlePeriodAssign_JP</c> table records.
    /// </param>
    /// <param name="_assetIdlePeriodStatus">
    /// The <c>AssetIdlePeriodStatus_JP></c> status records.
    /// </param>
    public static void updateIdlePeriodStatus(AssetIdlePeriodAssign_JP  _assetIdlePeriodAssign,
                                              AssetIdlePeriodStatus_JP  _assetIdlePeriodStatus)
    {
        ttsbegin;

        _assetIdlePeriodAssign.selectForUpdate(true);
        _assetIdlePeriodAssign.Status = _assetIdlePeriodStatus;
        _assetIdlePeriodAssign.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumOfIdlePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>AssetIdlePeriodAssign_JP</c> table.
    /// </summary>
    /// <param name="_assetId">
    /// The Asset Id.
    /// </param>
    /// <param name="_assetBookId">
    /// The Asset Book Id.
    /// </param>
    /// <param name="_assetTableInterval">
    /// The AssetTableinterval instance.
    /// </param>
    /// <param name="_transDate">
    /// The Tranaction date.
    /// </param>
    /// <returns>
    /// Return number of Idle period records.
    /// </returns>
    public static int findNumOfIdlePeriods(AssetId              _assetId,
                                           AssetBookId          _assetBookId,
                                           assetTableInterval   _assetTableInterval,
                                           AssetTransDate       _transDate)
    {
        AssetIdlePeriodAssign_JP    assetIdlePeriodAssign;
        AssetIdlePeriodTable_JP     assetIdlePeriodTable;
        int                         numOfIdlePeriods;
        AssetDepreciationProfile    assetDepreciationProfile;

        assetDepreciationProfile = AssetBook::find(_assetId, _assetBookId).depreciationProfile();

        while select assetIdlePeriodAssign
            where assetIdlePeriodAssign.Status  == AssetIdlePeriodStatus_JP::Confirmed
                && (assetIdlePeriodAssign.Validto  > _assetTableInterval.findFirstDayOfYear(_transDate)
                     && assetIdlePeriodAssign.ValidFrom <= _transDate)
            exists join assetIdlePeriodTable
            where assetIdlePeriodTable.AssetId == _assetId
                && assetIdlePeriodTable.BookId == _assetBookId
                && assetIdlePeriodTable.Skip   == NoYes::Yes
                && assetIdlePeriodAssign.RecId == assetIdlePeriodTable.AssetIdlePeriodAssign_JP
        {
            numOfIdlePeriods += AssetIdlePeriodAssign_JP::numOfPeriods(
                _assetTableInterval,
                assetIdlePeriodAssign,
                assetDepreciationProfile,
                _transDate);

            if (((assetDepreciationProfile.Accrual == AssetAccrual::FiscalPeriod  || assetDepreciationProfile.Accrual == AssetAccrual::Monthly)
                    && _assetTableInterval.findLastDayOfMonth(assetIdlePeriodAssign.Validto)   != assetIdlePeriodAssign.ValidTo)
                 || (assetDepreciationProfile.Accrual == AssetAccrual::Yearly
                    && _assetTableInterval.findLastDayOfYear(assetIdlePeriodAssign.Validto)    != assetIdlePeriodAssign.ValidTo)
                 || (assetDepreciationProfile.Accrual == AssetAccrual::Quarterly
                    && _assetTableInterval.findLastDayOfQuarter(assetIdlePeriodAssign.ValidTo) != assetIdlePeriodAssign.ValidTo)
                 || (assetDepreciationProfile.Accrual == AssetAccrual::HalfYearly
                    && _assetTableInterval.endPeriod(assetIdlePeriodAssign.ValidTo) != assetIdlePeriodAssign.ValidTo))
            {
                numOfIdlePeriods = numOfIdlePeriods - 1;
            }
        }

        return numOfIdlePeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriods</Name>
				<Source><![CDATA[
    private static int numOfPeriods(
        AssetTableInterval _assetTableInterval,
        AssetIdlePeriodAssign_JP _assetIdlePeriodAssign,
        AssetDepreciationProfile _assetDepreciationProfile,
        AssetTransDate _transDate)
    {
        const int MonthsInQuarter = 3;
        const int MonthsInHalfYear = 6;
        const int MonthsInYear = 12;

        int ret;
        TransDate dateFrom = max(_assetIdlePeriodAssign.ValidFrom, _assetTableInterval.findFirstDayOfYear(_transDate));
        TransDate dateTo = min(_assetIdlePeriodAssign.Validto, _transDate);

        if (_assetDepreciationProfile.DepreciationYear == AssetDepreciationYear::Fiscal)
        {
            ret = _assetTableInterval.numOfPeriods(dateFrom, dateTo);
        }
        else
        {
            int monthsBetweenDates = intvNo(dateTo, dateFrom, IntvScale::YearMonth);

            switch (_assetDepreciationProfile.Accrual)
            {
                case AssetAccrual::Monthly:
                    ret = monthsBetweenDates;
                    break;

                case AssetAccrual::Quarterly:
                    ret = intvNo(dateTo, dateFrom, IntvScale::YearQuarter);
                    monthsBetweenDates = ret * MonthsInQuarter;
                    break;

                case AssetAccrual::HalfYearly:
                    ret = monthsBetweenDates / MonthsInHalfYear;
                    monthsBetweenDates = ret * MonthsInHalfYear;
                    break;

                case AssetAccrual::Yearly:
                    ret = intvNo(dateTo, dateFrom, IntvScale::Year);
                    monthsBetweenDates = ret * MonthsInYear;
                    break;
                default:
                    ret = 1;
                    break;
            }

            // The function intvNo() returns the number of full periods.
            // Incrementing the value if we have additional not full period between dates.
            if (DateTimeUtil::addMonths(DateTimeUtil::newDateTime(dateFrom, 0), monthsBetweenDates) < DateTimeUtil::newDateTime(dateTo, 0))
            {
                ret++;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetIdlePeriodId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a look up form for Asset Book id field.
    /// </summary>
    /// <param name="_formControl">
    /// Form control that the look up form attached.
    /// </param>
    /// <returns>
    /// Returns look up form for AssetIdlePeriodId id field.
    /// </returns>
    public static SysTableLookup lookupAssetIdlePeriodId(FormControl _formControl)
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildAssetIdlePeriodAssign;

        queryBuildAssetIdlePeriodAssign = query.addDataSource(tableNum(AssetIdlePeriodAssign_JP));
        queryBuildAssetIdlePeriodAssign.addRange(fieldNum(AssetIdlePeriodAssign_JP, Status)).value(queryValue(AssetIdlePeriodStatus_JP::Open));

        sysTableLookup = SysTableLookup::newParameters(tableNum(AssetIdlePeriodAssign_JP), _formControl);
        sysTableLookup.addLookupfield(fieldNum(AssetIdlePeriodAssign_JP, AssetIdlePeriodId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();

        return sysTableLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<CountryRegionCodes>JP</CountryRegionCodes>
	<DeveloperDocumentation>@FixedAssets:FA_DeveloperDocumentation_AssetIdlePeriodAssign</DeveloperDocumentation>
	<Label>@FixedAssets:FA_AssignIdlePeriod_FixedAsset</Label>
	<TitleField1>AssetIdlePeriodId</TitleField1>
	<TitleField2>Status</TitleField2>
	<Modules>FixedAssets</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetIdlePeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetIdlePeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetIdlePeriodId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@Budget:General</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Reason</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>AssetIdlePeriodStatus_JP</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetIdlePeriodId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>AssetIdlePeriod_JP</ExtendedDataType>
			<Label>@SYS319515</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Reason</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>String30</ExtendedDataType>
			<Label>@SYS107174</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<Label>@SYS5209</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Validto</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetTransDate</ExtendedDataType>
			<Label>@SYS14656</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetIdlePeriodIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetIdlePeriodId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>