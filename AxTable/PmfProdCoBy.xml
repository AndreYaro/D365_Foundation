<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfProdCoBy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PmfProdCoBy extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRelativeProdQtyChange</Name>
				<Source><![CDATA[
    public container calcRelativeProdQtyChange(
        PmfProdCoBy _orig = this.orig())
    {
        InventQty       qty;
        PdsCWInventQty  cwQty;

        qty = (this.CoByQty - _orig.CoByQty)
            * this.prodTable().QtyStUp / this.CoByQty;

        if (this.PdsCWQty)
        {
            cwQty = (this.PdsCWQty - _orig.PdsCWQty)
                * this.prodTable().QtyStUp / this.PdsCWQty;
        }
        else
        {
            cwQty = 0;
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBurdenAmount</Name>
				<Source><![CDATA[
    public boolean checkBurdenAmount(boolean _warningOnly = true)
    {
        boolean ret = true;

        if (this.BurdenType != PmfBurdenType::None
            && this.OverheadAmt <= 0)
        {
            if (_warningOnly)
            {
                warning("@PRO2360");
            }
            else
            {
                ret = checkFailed("@PRO2360");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubProduction</Name>
				<Source><![CDATA[
    public boolean checkSubProduction(ProdTable _prodTable)
    {
        if (!this.InventTransId || this.InventRefType != InventRefType::Production)
        {
            return checkFailed("@SYS9098");
        }

        if (!_prodTable.checkValid(this.InventRefId))
        {
            return false;
        }

        if (_prodTable.InventTransId != this.InventRefTransId)
        {
            return checkFailed("@SYS368");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSubPurch</Name>
				<Source><![CDATA[
    public boolean checkSubPurch(PurchLine _purchLine)
    {
        if (!this.InventTransId || this.InventRefType != InventRefType::Purch)
        {
            return checkFailed("@SYS13188");
        }

        if (!_purchLine.RecId)
        {
            return checkFailed(strfmt("@SYS19258",this.ItemId));
        }

        if (_purchLine.PurchId   != this.InventRefId)
        {
            return checkFailed("@SYS18517");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>coByQty</Name>
				<Source><![CDATA[
    public PmfCoByQty coByQty(Qty _seriesSize = 1)
    {
        return this.PmfCoByMap::coByQty(_seriesSize);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>CompanyInfo</c> record associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>CompanyInfo</c> record.
    /// </returns>
    public CompanyInfo companyInfo()
    {
        return CompanyInfo::findDataArea(this.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a dimension set that can be applied to the <c>defaultDimension</c> field on the
    /// <c>PmfProdCoBy</c> table.
    /// </summary>
    /// <param name="_defaultDimension">
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </param>
    /// <param name="_dimensionCopy">
    /// A <c>DimensionCopy</c> object that was created by using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that can be applied to the <c>defaultDimension</c> field on this table.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential associated dimensions are not overwritten.
    /// </remarks>

    public DimensionDefault copyDimension(
        DimensionDefault _defaultDimension,
        DimensionCopy    _dimensionCopy = DimensionCopy::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionCopy.copy(_defaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.status().deleting();

        super();

        this.status().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorHistoricalCost historicalCostQtyError()
    {
        ProdReportedErrorHistoricalCost errorQty = 0;

        //Check if user has security access
        if (hasFieldAccess(tablenum(ProdTableJour),
                           fieldnum(ProdTableJour, QtyError),
                           AccessType::View))
        {
            errorQty = ProdTableJour::pmfCoByHistoricalCostQtyError(
                                                this.ProdId,
                                                this.InventTransId);
        }

        return errorQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>historicalCostQtyGood</Name>
				<Source><![CDATA[
    public display PmfProdReportedGoodHistoricalCost historicalCostQtyGood()
    {
        PmfProdReportedGoodHistoricalCost goodQty = 0;

        //Check if user has security access
        if (hasFieldAccess(tablenum(ProdTableJour),
                           fieldnum(ProdTableJour, QtyGood),
                           AccessType::View))
        {
            goodQty = ProdTableJour::pmfCoByHistoricalCostQtyGood(
                                                this.ProdId,
                                                this.InventTransId);
        }

        return goodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCoBy</Name>
				<Source><![CDATA[
    public void initFromCoBy(PmfFormulaCoBy _coBy)
    {
        InventTable inventTable = InventTable::find(_coBy.ItemId);

        if (!this.ProdId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        this.PmfCoByMap::initFromCoByMap(_coBy);
        this.CoByRefRecId = _coBy.RecId;
        this.BurdenType = _coBy.BurdenType;

        InventDim inventDim = this.initInventDim(_coBy, inventTable);

        this.setInventDimIdFromInventDim(inventDim);

        this.DefaultDimension  = this.mergeDimension(ProdTable::find(this.ProdId).DefaultDimension, inventTable.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>InventDim</c> table buffer.
    /// </summary>
    /// <param name = "_coBy">The batch order's co/by product.</param>
    /// <param name = "_inventTable">The co/by item.</param>
    /// <returns>Initialized <c>InventDim</c> table buffer.</returns>
    public InventDim initInventDim(PmfFormulaCoBy _coBy, InventTable _inventTable)
    {
        InventDim fromInventDim = _coBy.inventDim();
        InventDim inventDim;

        inventDim.copyPrimaryDim(InventDimGroupSetup::newInventTable(_inventTable),fromInventDim);

        if (! inventDim.InventLocationId)
        {
            inventDim.InventSiteId = fromInventDim.InventSiteId;
        }

        if (! inventDim.InventSiteId)
        {
            inventDim.InventSiteId = this.prodTable().inventDim().InventSiteId;
        }

        if (! inventDim.InventLocationId && fromInventDim.InventLocationId)
        {
            inventDim.InventLocationId = fromInventDim.InventLocationId;
        }

        if (! inventDim.InventLocationId)
        {
            inventDim.initFromInventTable(
                _inventTable,
                InventItemOrderSetupType::Invent,
                inventDim);
        }

        if (!inventDim.InventLocationId)
        {
            inventDim.InventLocationId
                = this.prodTable().inventDim().InventLocationId;
        }
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    public void initFromInventTable(InventTable _inventTable)
    {
        InventDim   inventDim;
        InventDim   inventDimDefault;

        this.ItemId = _inventTable.ItemId;

        this.ProductType = _inventTable.PmfProductType;

        if (this.ProductType == PmfProductType::Co_Product)
        {
            this.CostAllocation = PmfCostAllocationMethod::None;
            this.CostAllocationPct = 0;
        }
        else if (this.ProductType == PmfProductType::By_Product)
        {
            this.OverheadAmt = 0;
        }

        this.DefaultDimension  = this.mergeDimension(ProdTable::find(this.ProdId).DefaultDimension, _inventTable.DefaultDimension);

        if (this.InventDimId)
        {
            inventDim = InventDim::find(this.InventDimId);
        }

        //Limit to the same site as the parent production order
        inventDimDefault.InventSiteId = this.prodTable().inventDim().InventSiteId;

        inventDim.initFromInventTable(
            _inventTable,
            InventItemOrderSetupType::Invent,
            inventDimDefault);

        this.setInventDimIdFromInventDim(inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record based on the related <c>ProdJournalProd</c> record.
    /// </summary>
    /// <param name="_prodJournalProd">
    /// A related <c>ProdJournalProd</c> record.
    /// </param>
    public void initFromProdJournalProd(
        ProdJournalProd _prodJournalProd)
    {
        ProdTable prodTable = ProdTable::find(_prodJournalProd.ProdId);
        InventTable inventTable = InventTable::find(_prodJournalProd.ItemId);

        this.initValue();
        this.initFromProdTable(prodTable);
        this.initFromInventTable(inventTable);
        this.CoByQty = _prodJournalProd.QtyGood +_prodJournalProd.QtyError;
        this.CoByQtySerie = prodTable.QtyCalc;
        this.InventDimId = _prodJournalProd.InventDimId;
        this.InventTransId = _prodJournalProd.InventTransId;
        this.PdsCWQty = _prodJournalProd.PdsCWBatchGood+_prodJournalProd.PdsCWBatchErr;
        if (this.ProductType == PmfProductType::Co_Product)
        {
            if (prodTable.PmfTotalCostAllocation)
            {
                this.CostAllocation = PmfCostAllocationMethod::TCA;
            }
            else
            {
                this.CostAllocation = PmfCostAllocationMethod::Manual;
            }
        }
        else
        {
            this.CostAllocation = PmfCostAllocationMethod::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdParmReportFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record based on the related <c>ProdParmReportFinished</c> record.
    /// </summary>
    /// <param name="_prodParmReportFinished">
    /// A related <c>ProdParmReportFinished</c> record.
    /// </param>
    public void initFromProdParmReportFinished(ProdParmReportFinished _prodParmReportFinished)
    {
        ProdTable prodTable = ProdTable::find(_prodParmReportFinished.ProdId);
        InventTable inventTable = InventTable::find(_prodParmReportFinished.ItemId);

        this.initValue();
        this.initFromProdTable(prodTable);
        this.initFromInventTable(inventTable);
        this.CoByQty = _prodParmReportFinished.QtyGood +_prodParmReportFinished.QtyError;
        this.CoByQtySerie = prodTable.QtyCalc;
        this.InventDimId = _prodParmReportFinished.InventDimId;
        this.InventTransId = _prodParmReportFinished.InventTransId;
        this.PdsCWQty = _prodParmReportFinished.PdsCWBatchGood+_prodParmReportFinished.PdsCWBatchErr;
        if (this.ProductType == PmfProductType::Co_Product)
        {
            if (prodTable.PmfTotalCostAllocation)
            {
                this.CostAllocation = PmfCostAllocationMethod::TCA;
            }
            else
            {
                this.CostAllocation = PmfCostAllocationMethod::Manual;
            }
        }
        else
        {
            this.CostAllocation = PmfCostAllocationMethod::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    public void initFromProdTable(ProdTable _prodTable)
    {
        this.ProdId = _prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();

        this.CoByQtySerie = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        this.status().inserting();

        if (!this.InventTransId)
        {
            this.InventTransId = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        }

        InventUpd_Estimated estimated;

        estimated = InventUpd_Estimated::newPmfProdCoBy(this, null, this.type());
        estimated.updateNow();

        super();

        if (estimated)
        {
            estimated.updateOwnerRelationship();
            estimated.updateReservation();
        }

        this.status().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>InventItemPrice</c> record associated with the record.
    /// </summary>
    /// <returns>
    ///     The <c>InventItemPrice</c> record associated with the record.
    /// </returns>
    public InventItemPrice inventItemPrice()
    {
        InventItemPrice inventItemPrice;

        inventItemPrice = InventItemPrice::findCurrent(
                this.ItemId,
                CostingVersionPriceType::Cost,
                this.InventDimId,
                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                this.inventDim().InventSiteId);

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    public InventTable inventTable(boolean _forUpdate = false)
    {
        InventTable inventTable;

        inventTable = InventTable::find(this.ItemId,_forUpdate);

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransIdSum</c> object for the record.
    /// </summary>
    /// <returns>
    /// The <c>InventTransIdSum</c> object for the record.
    /// </returns>
    public InventTransIdSum inventTransIdSum()
    {
        return InventTransIdSum::newTransOriginId(InventTransOriginPmfProdCoBy::findInventTransOriginId(this.DataAreaId,this.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUnit</Name>
				<Source><![CDATA[
    public display UnitOfMeasureSymbol inventUnit()
    {
        return InventTableModule::find(this.ItemId, ModuleInventPurchSales::Invent).UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    public display ItemNameDisplay itemName()
    {
        return InventTable::find(this.ItemId).itemName(this.inventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemNameGrid</Name>
				<Source><![CDATA[
    public display ItemNameDisplayGrid itemNameGrid()
    {
        return this.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkInventDim2Dimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of the dimension field in <c>ProdBOM</c> records to the default value, based on the
    /// value in the <c>InventDim</c> record buffer.
    /// </summary>
    /// <param name="_newInventDim">
    /// The <c>InventDim</c> record buffer linked to the current <c>ProdBOM</c> record.
    /// </param>
    /// <param name="_oldInventDim">
    /// The <c>InventDim</c> record buffer that was previously linked to the current <c>ProdBOM</c> record
    /// buffer.
    /// </param>
    public void linkInventDim2Dimension(
        InventDim _newInventDim,
        InventDim _oldInventDim)
    {
        _newInventDim.setInventSiteFromParentIfModified(this, _oldInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mandatoryRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the mandatory registration is required.
    /// </summary>
    /// <returns>
    /// true if mandatory registration; otherwise, false .
    /// </returns>
    public boolean mandatoryRegister()
    {
        return this.inventTable().modelGroup().MandatoryRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a dimension set that holds the merged combination of the current <c>defaultDimension</c> field
    /// on this table and the provided dimension set.
    /// </summary>
    /// <param name="_primaryDefaultDimension">
    /// A first dimension set that should be merged with the current <c>defaultDimension</c> field on this
    /// table.
    /// </param>
    /// <param name="_secondaryDefaultDimension">
    /// A second dimension set that should be merged with the current <c>defaultDimension</c> field on this
    /// table; optional.
    /// </param>
    /// <param name="_dimensionMerge">
    /// A <c>dimensionMerge</c> object previously instantiated using the current buffer; optional.
    /// </param>
    /// <returns>
    /// A dimension set that holds the merged combination of the current defaultDimension field on this
    /// table and the provided dimension set.
    /// </returns>
    /// <remarks>
    /// This method makes sure that potential linked dimensions are not overwritten when merging.
    /// Additional the entity indicator defaulting will be considered
    /// </remarks>

    public DimensionDefault mergeDimension(
        DimensionDefault _primaryDefaultDimension,
        DimensionDefault _secondaryDefaultDimension = 0,
        DimensionMerge   _dimensionMerge = DimensionMerge::newFromTable(this, this.companyInfo().RecId)
        )
    {
        return _dimensionMerge.merge(_primaryDefaultDimension, _secondaryDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        InventTable inventTable;
        InventDim inventDim;

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(PmfProdCoBy, CostAllocationPct) :
                if (this.OverheadAmt)
                {
                    this.OverheadAmt = 0;
                }
                break;
            case fieldnum(PmfProdCoBy, OverheadAmt) :
                if (this.CostAllocationPct)
                {
                    this.CostAllocationPct = 0;
                }
                break;
            case fieldnum(PmfProdCoBy, BurdenType) :
                if (this.BurdenType != PmfBurdenType::None)
                {
                    this.CostAllocation =  PmfCostAllocationMethod::None;
                }
                break;
            case fieldnum(PmfProdCoBy, ItemId) :
                inventTable = this.inventTable();
                inventDim = this.inventDim();

                inventDim.InventSiteId = this.prodTable().inventDim().InventSiteId;

                if (inventDim.InventSiteId)
                {
                    inventDim.initFromInventTable(
                            inventTable, InventItemOrderSetupType::Invent, inventDim);
                            this.InventDimId
                            = InventDim::findOrCreate(inventDim).InventDimId;
                }

                this.initFromInventTable(inventTable);
                this.ProductType = inventTable.PmfProductType;
                inventDim.data(InventDim::find(this.InventDimId));

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyError</Name>
				<Source><![CDATA[
    public display PdsCWBatchErrHistoricalCost pdsCWHistoricalCostQtyError()
    {
        PdsCWBatchErr  pdsCWBatchErr = 0;

        //Check if user has security access
        if (hasFieldAccess(tablenum(ProdTableJour),
                           fieldnum(ProdTableJour, PdsCWBatchGood),
                           AccessType::View))
        {
            pdsCWBatchErr = ProdTableJour::pdsCWCoByHistoricalCostQtyError(
                                                this.ProdId,
                                                this.InventTransId);
        }

        return pdsCWBatchErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWHistoricalCostQtyGood</Name>
				<Source><![CDATA[
    public display PdsCWBatchGoodHistoricalCost pdsCWHistoricalCostQtyGood()
    {
        PdsCWBatchGood  pdsCWBatchGood = 0;

        //Check if user has security access
        if (hasFieldAccess(tablenum(ProdTableJour),
                           fieldnum(ProdTableJour, PdsCWBatchGood),
                           AccessType::View))
        {
            pdsCWBatchGood = ProdTableJour::pdsCWCoByHistoricalCostQtyGood(
                                                this.ProdId,
                                                this.InventTransId);
        }

        return pdsCWBatchGood;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWMaxQtyCalcStUpInvent</Name>
				<Source><![CDATA[
    public PdsCWInventQty pdsCWMaxQtyCalcStUpInvent()
    {
        PdsCWInventQty  pdsCWInventQty;

        if (this.PdsCWInventCalc >= 0
            && this.PdsCWInventStup >= 0)
        {
            pdsCWInventQty = max(this.PdsCWInventCalc,this.PdsCWInventStup);
        }
        else
        {
            pdsCWInventQty = min(this.PdsCWInventCalc,this.PdsCWInventStup);
        }

        return pdsCWInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRegisteredQty</Name>
				<Source><![CDATA[
    public display PdsCWRegistered pdsCWRegisteredQty()
    {
        PdsCWRegistered cwRegistered = 0;
        InventTransOriginId inventTransOriginId;

        inventTransOriginId = InventTransOriginPmfProdCoBy::findInventTransOriginId(this.dataAreaId, this.RecId);
        cwRegistered = InventTransSum::newStandard().pdsCWidRegistered(InventTransOriginId);

        return cwRegistered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainInventFinancial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight remain inventory financial quantity.
    /// </summary>
    /// <returns>
    /// The catch weight inventory financial quantity.
    /// </returns>
    public display PdsCWInventQty pdsCWRemainInventFinancial()
    {
        PdsCWInventQty pdsCWInventQty = 0;

        //Check if user has security access
        if (hasFieldAccess(tableNum(InventSum),
                           fieldNum(InventSum, PdsCWDeducted),
                           AccessType::View)
            && hasFieldAccess(tableNum(InventSum),
                          fieldNum(InventSum, PdsCWReceived),
                          AccessType::View))
        {
            InventTransOriginId pmfProdCoByInventTransOriginId = InventTransOriginPmfProdCoBy::findInventTransOriginId(this.dataAreaId, this.RecId);
            InventTransIdSum transIdSum = InventTransIdSum::newTransOriginId(pmfProdCoByInventTransOriginId);
            pdsCWInventQty = transIdSum.pdsCWPhysical();
        }

        return pdsCWInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedError</Name>
				<Source><![CDATA[
    public display PdsCWBatchErrReportedFinished pdsCWReportedFinishedError()
    {
        if (!this.ProdId || !this.InventTransId)
        {
            return 0;
        }
        
        return ProdJournalProd::pdsCWCoByReportedFinishedError(this.ProdId, this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReportedFinishedGood</Name>
				<Source><![CDATA[
    public display PdsCWBatchGoodReportedFinished pdsCWReportedFinishedGood()
    {
        if (!this.ProdId || !this.InventTransId)
        {
            return 0;
        }
        
        return ProdJournalProd::pdsCWCoByReportedFinishedGood( this.ProdId, this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prodTable</Name>
				<Source><![CDATA[
    public ProdTable prodTable(boolean _forUpdate = false)
    {
        return ProdTable::find(this.ProdId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderStatusDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status of the associated quality order.
    /// </summary>
    /// <returns>
    /// The quality order status.
    /// </returns>
    public display InventTestOrderStatusDisplay qualityOrderStatusDisplay()
    {
        return InventQualityOrderTable::referenceDocumentStatusDisplay(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registeredQty</Name>
				<Source><![CDATA[
    public display InventQtyRegistered registeredQty()
    {
        InventTransOriginId inventTransOriginId = InventTransOriginPmfProdCoBy::findInventTransOriginId(this.dataAreaId, this.RecId);
        return InventTransSum::newStandard().originRegistered(inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainInventFinancial</Name>
				<Source><![CDATA[
    public display InventQty remainInventFinancial()
    {
        InventTransOriginId inventTransOriginId = InventTransOriginPmfProdCoBy::findInventTransOriginId(this.dataAreaId, this.RecId);
        InventTransSum inventTransSum = InventTransSum::newStandard();
        return inventTransSum.OriginReceived(inventTransOriginId) - inventTransSum.OriginDeducted(inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedError</Name>
				<Source><![CDATA[
    public display ProdReportedErrorReportedFinished reportedFinishedError()
    {
        if (!this.ProdId || !this.InventTransId)
        {
            return 0;
        }
        
        return ProdJournalProd::pmfCoByReportedFinishedError(this.ProdId,this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinishedGood</Name>
				<Source><![CDATA[
    public display PmfProdReportedGoodReportedFinished reportedFinishedGood()
    {
        if (!this.ProdId || !this.InventTransId)
        {
            return 0;
        }

        return ProdJournalProd::pmfCoByReportedFinishedGood(this.ProdId, this.InventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the <c>InventDimId</c> parameter to the <c>ProdBOM.inventDimId</c> field and populates the
    /// field that has default value that is based on the new inventory dimensions.
    /// </summary>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> value that will be applied to the <c>ProdBOM.InventDimId</c> field.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record buffer that is related to the <c>InventDimId</c> parameters; optional.
    /// </param>
    public void setInventDimId(
        InventDimId _inventDimId,
        InventDim   _inventDim = InventDim::find(_inventDimId))
    {
        InventDim   currentInventDim
            = this.InventDimId == _inventDimId ? _inventDim : this.inventDim();

        this.InventDimId = _inventDimId;
        this.linkInventDim2Dimension(_inventDim, currentInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimIdFromInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a value for the <c>InventDimId</c> field for the <c>InventDim</c> record and
    /// applies the found value to the <c>InventDimId</c> field in the <c>ProdBOM</c> table.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer that should be referenced by the current <c>ProdBOM</c> record
    /// buffer.
    /// </param>
    public void setInventDimIdFromInventDim(InventDim _inventDim)
    {
        InventDim   inventDim;

        inventDim = InventDim::findOrCreate(_inventDim);
        this.setInventDimId(inventDim.InventDimId, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStorageDim</Name>
				<Source><![CDATA[
    public void setInventStorageDim(
        InventDim                   _inventDim  = InventDim::find(this.InventDimId),
        InventTable                 _inventTable = InventTable::find(this.ItemId),
        InventItemOrderSetupType    _setupType   = InventItemOrderSetupType::Invent)
    {
        InventItemOrderSetupMap itemOrderSetupDefaultMap = _inventTable.inventItemOrderSetupMap(_setupType, _inventDim.inventDimId);
        InventItemOrderSetupMap itemOrderSetupDimMap;

        boolean                 updateInventDim = false;

        if (!_inventDim.InventSiteId
            || _inventDim.InventSiteId != itemOrderSetupDefaultMap.inventSiteId(
                                                        _inventDim.InventSiteId,
                                                        _inventTable))
        {
            _inventDim.InventSiteId = itemOrderSetupDefaultMap.inventSiteId(
                                                        _inventDim.InventSiteId,
                                                        _inventTable);

            updateInventDim = true;
        }

        itemOrderSetupDimMap    = _inventTable.inventItemOrderSetupMap(_setupType, InventDim::findOrCreate(_inventDim).InventDimId);

        if (!_inventDim.InventLocationId
            || _inventDim.InventLocationId != itemOrderSetupDimMap.inventLocationId(
                                                    _inventDim.InventLocationId,
                                                    _inventTable,
                                                    _inventDim.InventSiteId))
        {
            _inventDim.InventLocationId = itemOrderSetupDimMap.inventLocationId(
                                                _inventDim.InventLocationId,
                                                _inventTable,
                                                _inventDim.InventSiteId);

            _inventDim.initFromInventLocation(
                        _inventDim.inventLocation());

            updateInventDim = true;
        }

        if (updateInventDim)
        {
            _inventDim.InventDimId
                = InventDim::findOrCreate(_inventDim).InventDimId;

            this.setInventDimId(_inventDim.InventDimId, _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    public PmfProdCoByStatus status()
    {
        return PmfProdCoByStatus::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public PmfProdCoByType type()
    {
        return PmfProdCoByType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(
        boolean _dropEstimated = false,
        Common  _childBuffer = null)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        PmfProdCoBy prodCoBy_Orig = this.orig();

        this.status().updating();

        this.type().setBackStatus();

        InventUpd_Estimated estimated;

        if (!_dropEstimated)
        {
            estimated = InventUpd_Estimated::newPmfProdCoBy(this, _childBuffer, this.type());
            estimated.updateNow();
        }

        super();

        if (estimated)
        {
            estimated.updateReservation();
        }

        this.status().updated(prodCoBy_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCostAllocation</Name>
				<Source><![CDATA[
    public void updateCostAllocation()
    {
        switch (this.CostAllocation)
        {
            case PmfCostAllocationMethod::None :
                this.CostAllocationPct = 0.0;
                break;
            default :
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = this.status().validateDelete();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a product type is valid.
    /// </summary>
    /// <param name = "_productType">The product type.</param>
    /// <returns>true if the product type is valid; otherwise, false.</returns>
    protected boolean isValidProductType(PmfProductType _productType)
    {
        switch (_productType)
        {
            case PmfProductType::Co_Product:
            case PmfProductType::By_Product:
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _fieldIdToCheck)
    {
        boolean ret;
        boolean prodBatchOrderCoProductAllocationValidateFlight = ProdBatchOrderCoProductAllocationValidateFlight::instance().isEnabled();

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldnum(PmfProdCoBy, ItemId) :
                if (!this.isValidProductType(this.inventTable().PmfProductType))
                {
                    ret = checkFailed("@PRO118");
                }
                break;
            case fieldnum(PmfProdCoBy, ProductType) :
                if (this.ProductType == PmfProductType::None
                   || this.ProductType == PmfProductType::MainItem)
                {
                    ret = checkFailed("@PRO118");
                }
                break;
            case fieldnum(PmfProdCoBy, CostAllocation) :
                this.updateCostAllocation();
                break;
            case fieldnum(PmfProdCoBy, CostAllocationPct) :
                if ((prodBatchOrderCoProductAllocationValidateFlight
                    && this.CostAllocation != PmfCostAllocationMethod::None && this.CostAllocationPct <= 0) ||
                    (!prodBatchOrderCoProductAllocationValidateFlight
                    && (this.CostAllocation == PmfCostAllocationMethod::Manual
                    || this.CostAllocation != PmfCostAllocationMethod::Manual && this.CostAllocationPct <= 0)))
                {
                    this.CostAllocationPct = this.orig().CostAllocationPct;

                    ret = checkFailed("@PRO1990");
                }
                break;
            case fieldnum(PmfProdCoBy, OverheadAmt) :
                if (this.BurdenType != PmfBurdenType::None
                    && this.OverheadAmt <= 0)
                {
                    this.OverheadAmt = this.orig().OverheadAmt;
                    ret = checkFailed("@PRO1990");
                }
                break;
            case fieldNum(PmfProdCoBy, CoByQty) :

                if (this.CoByQty < 0)
                {
                    ret = checkFailed("@PRO2640");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite(boolean _calledFromStatus = false)
    {
        boolean     ret;
        ProdTable   prodTable;

        if (!_calledFromStatus)
        {
            return this.status().validateWrite();
        }

        ret = super();

        if (ret
            && this.CoByQtySerie <= 0)
        {
            ret = checkFailed(strFmt("@SYS331080", fieldPName(PmfFormulaCoBy, CoByQtySerie)));
        }

        if (ret)
        {
            if (!this.isValidProductType(this.ProductType))
            {
                ret = checkFailed("@PRO2323");
            }
        }

        if (ret)
        {
            if (this.CostAllocation == PmfCostAllocationMethod::Manual
                && this.CostAllocationPct <= 0)
            {
                ret = checkFailed("@PRO2358");
            }
        }

        if (ret)
        {
            this.checkBurdenAmount();
        }

        prodTable = this.prodTable();

        if (ret && !this.RecId)
        {
            // Check for TCA price on insert but do not prevent user from continue
            PmfTCACostPriceValidation::runProdCoBy(prodTable, this.ItemId, this.InventDimId);
        }

        var totalCostAllocationPct = prodTable.pmfTotalCostAlloc(this.RecId) + this.CostAllocationPct;
        
        totalCostAllocationPct = decRound(totalCostAllocationPct, 0);

        if (ret && totalCostAllocationPct > 100)
        {
            ret = checkFailed(strfmt("@PRO204",
                    fieldid2pname(
                        tablenum(PmfProdCoBy),
                        fieldnum(PmfProdCoBy, CostAllocationPct))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBatchOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new production co-by product from a batch order.
    /// </summary>
    /// <param name = "_reqTransCoBy">The co-by product receipt.</param>
    /// <param name = "_prodTable">The batch order.</param>
    public void initFromBatchOrder(ReqTrans _reqTransCoBy, ProdTable _prodTable)
    {
        this.clear();
        this.initFromProdTable(_prodTable);

        PmfFormulaCoBy pmfFormulaCoBy;

        select firstonly pmfFormulaCoBy
            where pmfFormulaCoBy.RecId == _reqTransCoBy.PmfCoByRefRecId;

        this.initFromCoBy(pmfFormulaCoBy);
        this.InventDimId = _reqTransCoBy.CovInventDimId;

        if (!this.inventDim().InventSiteId
            && _prodTable.inventDim().InventSiteId)
        {
            InventDim coByDim;

            coByDim = this.inventDim();
            coByDim.InventSiteId = _prodTable.inventDim().InventSiteId;
            coByDim = InventDim::findOrCreate(coByDim);
            this.InventDimId = coByDim.InventDimId;
        }

        this.setInventStorageDim(
            InventDim::find(this.InventDimId),
            InventTable::find(this.ItemId));

        this.InventRefTransId = InventTransOrigin::find(_reqTransCoBy.MarkingRefInventTransOrigin).InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates batch order co-byproducts by using the formula version definition.
    /// </summary>
    /// <param name="_prodTable">
    /// The <c>ProdTable</c> record to initializes batch order <c>PmfProdCoBy</c> record.
    /// </param>
    public static void createLines(ProdTable _prodTable)
    {
        PmfFormulaCoBy          coBy;
        PmfProdCoBy             prodCoBy;

        while select coBy
            where coBy.bomVersionRefRecId == _prodTable.bomVersion().RecId
        {
            prodCoBy = null;
            prodCoBy.initFromProdTable(_prodTable);
            prodCoBy.initFromCoBy(coBy);
            prodCoBy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(ProdId  _prodId,  RecId   _recId)
    {
        return _prodId && (select pmfProdCoBy where pmfProdCoBy.ProdId == _prodId  && pmfProdCoBy.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProdId</Name>
				<Source><![CDATA[
    public static boolean existProdId(
        ProdId   _prodId)
    {
        return _prodId
            && (select pmfProdCoBy
                    where pmfProdCoBy.ProdId == _prodId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static PmfProdCoBy find(ProdId      _prodId, RecId       _recId, boolean     _forUpdate = false)
    {
        PmfProdCoBy pmfProdCoBy;

        pmfProdCoBy.selectForUpdate(_forUpdate);

        select firstonly pmfProdCoBy
            where pmfProdCoBy.ProdId == _prodId
            &&    pmfProdCoBy.RecId == _recId;

        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProdItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the byproduct entry of the production outcomes.
    /// </summary>
    /// <param name="_prodId">
    /// The ID of the batch order.
    /// </param>
    /// <param name="_itemId">
    /// The ID of the byproduct.
    /// </param>
    /// <param name="_inventDimId">
    /// The specified ID of the dimension; optional.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the record should be selected for update.
    /// </param>
    /// <returns>
    /// The record of the <c>PmfProdCoBy</c> table or an empty buffer.
    /// </returns>
    public static PmfProdCoBy findByProdItemDim(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDimId _inventDimId    = '',
        boolean     _forUpdate      = false)
    {
        PmfProdCoBy pmfProdCoBy;
        InventDimId inventDimId = _inventDimId;

        pmfProdCoBy.selectForUpdate(_forUpdate);

        select firstonly pmfProdCoBy
            where pmfProdCoBy.ProdId        == _prodId
            &&    pmfProdCoBy.ItemId        == _itemId
            &&    (     (inventDimId && pmfProdCoBy.InventDimId == inventDimId)
                    ||  (!inventDimId));

        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProdIdItemIdProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the production co-by product record that matches production batch order id, 
    /// item number and product inventory dimensions.
    /// </summary>
    /// <param name = "_prodId">The ID of the batch order.</param>
    /// <param name = "_itemId">The ID of the co-by product.</param>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    /// <param name="_forUpdate">A Boolean value that indicates whether the record should be selected for update.</param>
    /// <returns>The record of the <c>PmfProdCoBy</c> table or an empty buffer.</returns>
    public static PmfProdCoBy findByProdIdItemIdProductDimensions(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDim   _inventDim,
        boolean     _forUpdate = false)
    {
        PmfProdCoBy pmfProdCoBy;

        // no check for inventDim which can be empty in case of distinct product, 
        // purpose is to get the correct record for a given co/by product variant.
        if (_prodId && _itemId)
        {
            pmfProdCoBy.selectForUpdate(_forUpdate);

            EcoResProductDimGroupSetup ecoResProductGroup = EcoResProductDimGroupSetup::newItemId(_itemId);
            while select pmfProdCoBy
                where pmfProdCoBy.ProdId == _prodId
                &&    pmfProdCoBy.ItemId == _itemId
            {
                if (InventDim::isInventDimEqualProductDim(ecoResProductGroup, _inventDim, InventDim::find(pmfProdCoBy.InventDimId)))
                {
                    break;
                }
            }
        }

        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProdIdItemIdInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the production co-by product record that matches production batch order id, item number and product inventory dimensions.
    /// If no product dimensions have been specified, then a co-by product record that matches the order id and item number will be searched for.
    /// </summary>
    /// <param name = "_prodId">The ID of the batch order.</param>
    /// <param name = "_itemId">The ID of the co-by product.</param>
    /// <param name = "_inventDim">The inventory dimension record.</param>
    /// <returns>The record of the <c>PmfProdCoBy</c> table or an empty buffer.</returns>
    public static PmfProdCoBy findByProdIdItemIdInventDim(
        ProdId      _prodId,
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        PmfProdCoBy prodCoBy;

        if (_inventDim.anyProductDimensionSpecified())
        {
            prodCoBy = PmfProdCoBy::findByProdIdItemIdProductDimensions(_prodId, _itemId, _inventDim);
        }
        else
        {
            prodCoBy = PmfProdCoBy::findByProdItemDim(_prodId, _itemId);
        }

        return prodCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProdIdItemIdProductTypeTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the production co-by product record that matches production batch order id, item number, product type and product inventory transaction id.
    /// </summary>
    /// <param name = "_prodId">The ID of the batch order.</param>
    /// <param name = "_itemId">The ID of the co-by product.</param>
    /// <param name = "_productType">The product type.</param>
    /// <param name = "_transId"> The value of the <c>InventTransId</c> field of the <c>ProdBOM</c> table. It is a part of the primary key on the <c>ProdBOM</c> table.</param>
    /// <returns>The record of the <c>PmfProdCoBy</c> table or an empty buffer.</returns>
    public static PmfProdCoBy findByProdIdItemIdProductTypeTransId(
        ProdId      _prodId,
        ItemId      _itemId,
        PmfProductType _productType,
        InventTransId   _transId)
    {
        PmfProdCoBy  pmfProdCoByProduct;

        select firstonly pmfProdCoByProduct
                where pmfProdCoByProduct.ProdId        == _prodId
                   && pmfProdCoByProduct.ItemId        == _ItemId
                   && pmfProdCoByProduct.ProductType   == _productType
                   && pmfProdCoByProduct.InventTransId == _transId;

        return pmfProdCoByProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransId</Name>
				<Source><![CDATA[
    public static PmfProdCoBy findTransId(
        InventTransId   _transId,
        boolean         _forUpdate = false)
    {
        PmfProdCoBy  pmfProdCoByProduct;

        pmfProdCoByProduct.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select firstonly pmfProdCoByProduct
                where pmfProdCoByProduct.InventTransId == _transId;
        }

        return pmfProdCoByProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBatchOrderCoDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup form for the co-product items or transactions related to a batch order.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///     The form control receiving the value of the lookup.
    /// </param>
    /// <returns>
    ///     The lookup object used.
    /// </returns>
    public static PmfTableLookupExtended lookupBatchOrderCoDetails(FormStringControl _lookupCtrl)
    {
        TmpPmfItemTransProdLookup   tmpPmfItemTransProdLookup;

        PmfTableLookupExtended  tableLookup     = PmfTableLookupExtended::newParameters(tablenum(TmpPmfItemTransProdLookup), _lookupCtrl, false);

        //query for the lookup
        Query                   queryTmpItems   = new Query();
        Object                  qbds            = queryTmpItems.addDataSource(tableNum(TmpPmfItemTransProdLookup));

        PmfProdCoBy::populateQueryProdTmpTableCoProds(
            SysQuery::valueUnlimited(),
            tmpPmfItemTransProdLookup);

        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,ProdId), true);
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,ItemId));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,ItemName));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,ProdStatus));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,BackOrderStatus));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,InventTransId));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,Configuration));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,Size));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,Color));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,Style));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup,Version));

        tableLookup.parmTmpBuffer(tmpPmfItemTransProdLookup);
        tableLookup.parmQuery(queryTmpItems);
        tableLookup.performFormLookup();

        return tableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupBatchOrderTransItems</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a lookup form for the items or transactions related to this batch order.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///     The form control receiving the value of the lookup.
    /// </param>
    /// <param name="_prodId">
    ///     The specified ID of the order.
    /// </param>
    /// <returns>
    ///     The lookup object used.
    /// </returns>
    public static PmfTableLookupExtended lookupBatchOrderTransItems(
        FormStringControl _lookupCtrl,
        ProdId            _prodId)
    {
        InventTable                 inventTable;
        InventTransOrigin           inventTransOrigin;
        InventDim                   inventDim;
        TmpPmfItemTransProdLookup   tmpPmfItemTransProdLookup;

        PmfTableLookupExtended  tableLookup     = PmfTableLookupExtended::newParameters(tablenum(TmpPmfItemTransProdLookup), _lookupCtrl);
        Query                   queryProdItems  = PmfProdCoBy::queryBatchOrderTransItems(_prodId);
        Query                   queryProdCoBy   = PmfProdCoBy::queryBatchOrderTransCoBy(_prodId);

        //query for the lookup
        Query                   queryTmpItems   = new Query();
        Object                  qbds            = queryTmpItems.addDataSource(tableNum(TmpPmfItemTransProdLookup));

        void populateTmpTableCoProds(Query _query, TmpPmfItemTransProdLookup _tmpPmfItemTransProdLookup)
        {
            QueryRun queryRun = new queryRun(_query);
            //populate tmp table for the lookup
            while (queryRun.next())
            {
                inventTable         = queryRun.get(tableNum(InventTable));
                InventTransOrigin   = queryRun.get(tableNum(InventTransOrigin));
                inventDim           = queryRun.get(tableNum(InventDim));

                _tmpPmfItemTransProdLookup.ItemId        = inventTable.ItemId;
                _tmpPmfItemTransProdLookup.ItemName      = inventTable.defaultProductName();
                _tmpPmfItemTransProdLookup.InventTransId = inventTransOrigin.InventTransId;

                InventProductDimension::initTableFromInventDim(_tmpPmfItemTransProdLookup, inventDim);

                _tmpPmfItemTransProdLookup.insert();
            }
        }

        populateTmpTableCoProds(queryProdItems, tmpPmfItemTransProdLookup);
        populateTmpTableCoProds(queryProdCoBy,  tmpPmfItemTransProdLookup);

        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup, ItemId));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup, ItemName));
        tableLookup.addLookupfield(fieldnum(TmpPmfItemTransProdLookup, InventTransId));

        tableLookup.addProductDimensionsFields();
        tableLookup.parmTmpBuffer(tmpPmfItemTransProdLookup);
        tableLookup.parmQuery(queryTmpItems);
        tableLookup.performFormLookup();

        return tableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a lookup form for the batch order batch co-byproducts.
    /// </summary>
    /// <param name="_lookupCtrl">
    /// A <c>FormStringControl</c> object for which the lookup will be created.
    /// </param>
    /// <param name="_prodId">
    /// A <c>ProdId</c> value for the related production order.
    /// </param>
    public static void lookupInventTransId(
        FormStringControl _lookupCtrl,
        ProdId            _prodId)
    {
        SysTableLookup          sysTableLookup =   SysTableLookup::newParameters(tablenum(PmfProdCoBy), _lookupCtrl);
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tablenum(PmfProdCoBy));

        sysTableLookup.addLookupfield(fieldnum(PmfProdCoBy,InventTransId));
        sysTableLookup.addLookupfield(fieldnum(PmfProdCoBy,ProdId));
        sysTableLookup.addLookupfield(fieldnum(PmfProdCoBy,ItemId));

        queryBuildDataSource.addRange(fieldnum(PmfProdCoBy,ProdId)).value(SysQuery::value(_prodId));

        queryBuildDataSource.addSortField(fieldnum(PmfProdCoBy,ItemId));
        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateQueryProdTmpTableCoProds</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates a temporary buffer with the record information from co-products associated with the specified production order.
    /// </summary>
    /// <param name="_prodId">
    ///     The ID of the production order.
    /// </param>
    /// <param name="_tmpPmfItemTransProdLookup">
    ///     The temporary buffer where the records will be stored.
    /// </param>
    public static void populateQueryProdTmpTableCoProds(
        ProdId                    _prodId,
        TmpPmfItemTransProdLookup _tmpPmfItemTransProdLookup)
    {
        PmfProdCoBy                 pmfProdCoBy;
        ProdTable                   prodTable;
        InventTable                 inventTable;
        InventTransOrigin           inventTransOrigin;
        InventDim                   inventDim;
        Query                       queryProdCoBy = PmfProdCoBy::queryBatchOrderTransCoBy(_prodId);
        QueryRun                    queryRun = new queryRun(queryProdCoBy);

        //populate tmp table for the lookup
        while (queryRun.next())
        {
            inventTable         = queryRun.get(tableNum(InventTable));
            InventTransOrigin   = queryRun.get(tableNum(InventTransOrigin));
            inventDim           = queryRun.get(tableNum(InventDim));
            prodTable           = queryRun.get(tableNum(ProdTable));
            pmfProdCoBy         = queryRun.get(tableNum(PmfProdCoBy));

            _tmpPmfItemTransProdLookup.ProdId          = prodTable.ProdId;
            _tmpPmfItemTransProdLookup.ProdStatus      = prodTable.ProdStatus;
            _tmpPmfItemTransProdLookup.BackorderStatus = pmfProdCoBy.BackorderStatus;
            _tmpPmfItemTransProdLookup.ItemId        = inventTable.ItemId;
            _tmpPmfItemTransProdLookup.ItemName      = inventTable.defaultProductName();
            _tmpPmfItemTransProdLookup.InventTransId = inventTransOrigin.InventTransId;
            _tmpPmfItemTransProdLookup.Configuration = inventDim.configId;
            _tmpPmfItemTransProdLookup.Color         = inventDim.InventColorId;
            _tmpPmfItemTransProdLookup.Size          = inventDim.InventSiteId;
            _tmpPmfItemTransProdLookup.Style         = inventDim.InventStyleId;
            _tmpPmfItemTransProdLookup.Version       = inventDim.InventVersionId;
            _tmpPmfItemTransProdLookup.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBatchOrderTransCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a query to fetch reportable co-products related to the specified order.
    /// </summary>
    /// <param name="_prodId">
    ///     The specified ID of the order.
    /// </param>
    /// <returns>
    ///     An instance of the <c>Query</c> class that locates the items related to the specified order.
    /// </returns>
    public static Query queryBatchOrderTransCoBy(ProdId _prodId)
    {
        Query                   query   = new Query(queryStr(PmfCoByCanBeReportAsFinished));
        QueryBuildDataSource    qbdsCB  = query.dataSourceTable(tableNum(PmfProdCoBy));

        SysQuery::findOrCreateRange(qbdsCB, fieldnum(PmfProdCoBy, ProdId)).value(_prodId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBatchOrderTransItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query to fetch reportable items related to the specified order.
    /// </summary>
    /// <param name="_prodId">
    /// The specified ID of the order.
    /// </param>
    /// <returns>
    /// An instance of the <c>Query</c> class that locates the items related to the specified order.
    /// </returns>
    public static Query queryBatchOrderTransItems(ProdId _prodId)
    {
        Query                   query   = new Query(queryStr(PmfItemsCanBeReportAsFinished));
        QueryBuildDataSource    qbdsPT  = query.dataSourceTable(tableNum(ProdTable));

        SysQuery::findOrCreateRange(qbdsPT, fieldnum(ProdTable, ProdId)).value(_prodId);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExclBackStatus</Name>
				<Source><![CDATA[
    public static void updateExclBackStatus(
        PmfProdCoBy _pmfProdCoBy)
    {
        _pmfProdCoBy.update(false,null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePmfProdCoByRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// If there is remain RemainCoByPhysical but not physical qty to be financially posted, it should be remove from InventTrans.
    /// </summary>
    internal void updatePmfProdCoByRemainPhysical()
    {
        this.RemainCoByPhysical = 0;
        this.PdsCWRemainPhysical = 0;
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchOrderTransItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified item can be reported from the specified batch order.
    /// </summary>
    /// <param name="_prodId">
    /// The specified ID of the order.
    /// </param>
    /// <param name="_itemId">
    /// The specified ID of the item.
    /// </param>
    /// <returns>
    /// true if the item can be specified for the order; otherwise false.
    /// </returns>
    public static boolean validateBatchOrderTransItem(
        ProdId            _prodId,
        ItemId            _itemId)
    {
        InventTable             inventTable = InventTable::find(_itemId);
        ProdTable               prodTable;
        Query                   queryProdItems;
        Query                   queryProdCoBy;

        QueryRun                queryRunProd;
        QueryRun                queryRunCoBy;

        QueryBuildDataSource    qbdsItemCoBy;
        QueryBuildDataSource    qbdsItemProd;

        if (    !inventTable.isCoByProduct()
            &&  (inventTable.PmfProductType != PmfProductType::Formula))
        {
            // item is not formula, co or by product
            return false;
        }

        prodTable = ProdTable::find(_prodId);
        //if the order allows CoByProduct variations, all items are allowed to be reported.
        if (prodTable.PmfCoByVarAllow)
        {
            // order does allow variations, so all items should be possible to be added
            return true;
        }

        // only allow if the item is allowed on this order
        queryProdItems = PmfProdCoBy::queryBatchOrderTransItems(_prodId);
        queryProdCoBy  = PmfProdCoBy::queryBatchOrderTransCoBy(_prodId);

        // range the both options for the item
        qbdsItemCoBy = queryProdCoBy.dataSourceTable(tableNum(InventTable));
        SysQuery::findOrCreateRange(qbdsItemCoBy, fieldNum(InventTable, ItemId)).value(_itemId);

        qbdsItemProd = queryProdItems.dataSourceTable(tableNum(InventTable));
        SysQuery::findOrCreateRange(qbdsItemProd, fieldNum(InventTable, ItemId)).value(_itemId);

        // if any row is returned, the item is recognized
        queryRunCoBy = new QueryRun(queryProdCoBy);
        queryRunProd = new QueryRun(queryProdItems);

        return queryRunCoBy.next() || queryRunProd.next();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PMF</ConfigurationKey>
	<DeveloperDocumentation>@PDS1104</DeveloperDocumentation>
	<FormRef>PmfProdCoBy</FormRef>
	<Label>@PRO2391</Label>
	<TableGroup>WorksheetLine</TableGroup>
	<TitleField1>ProdId</TitleField1>
	<TitleField2>ItemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>NumIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Burden</Name>
			<Label>@PRO311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverheadAmt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BurdenType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CoBy</Name>
			<Label>@PRO2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoByQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventUnit</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ConsumptionCalculation</Name>
			<Label>@SYS22165</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CoByQtySerie</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainCoByPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostAllocation</Name>
			<Label>@PRO200</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CostAllocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CostAllocationPct</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Created</Name>
			<Label>@PRO2328</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>createdDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimensions</Name>
			<Label>@SYS5951</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Ended</Name>
			<Label>@PRO2278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RealDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWHistoricalCostQtyGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>historicalCostQtyGood</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Estimated</Name>
			<Label>@PRO2279</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CalcDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCoByCalc</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Formula</Name>
			<Label>@SYS672</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProductType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProdId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Inventory</Name>
			<Label>@SYS981</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ItemReference</Name>
			<Label>@SYS24659</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventRefType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventRefTransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overhead</Name>
			<Label>@PRO311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OverheadAmt</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCW</Name>
			<Label>@PRO446</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventCalc</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventStup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWRemainPhysical</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlannedOrderReference</Name>
			<Label>@SYS24657</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReqPlanIdSched</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReqPOId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QualityManagement</Name>
			<Label>@PRO2392</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qualityOrderStatusDisplay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ReportedAsFinished</Name>
			<Label>@PRO2280</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FinishedDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWReportedFinishedGood</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>reportedFinishedGood</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RoundingUp</Name>
			<Label>@SYS2864</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RoundUp</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoundUpQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Started</Name>
			<Label>@PRO2281</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>StUpDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWInventStup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>QtyCoByStUp</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Update</Name>
			<Label>@SYS2934</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BackorderStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EndConsump</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BackorderStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ProdBackStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BurdenType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfBurdenType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CalcDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@PRO2283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CoByQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCoByQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CoByQtySerie</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCoByQtySerie</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CoByRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>PmfCoByRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CostAllocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfCostAllocationMethod</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CostAllocationPct</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCostAllocationPct</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EndConsump</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS83463</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FinishedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@PRO2287</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventRefTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>InventRefType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventRefType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransIdBase</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>OverheadAmt</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfOverheadAmt</ExtendedDataType>
			<CurrencyDate>Current</CurrencyDate>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventCalc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS139</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWInventStup</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS141</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWRemainPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS140</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProdId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProdId</ExtendedDataType>
			<Label>@PDS1470</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProductType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfProductType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyCoByCalc</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCoByQty</ExtendedDataType>
			<Label>@PRO2284</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>QtyCoByStUp</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfCoByQty</ExtendedDataType>
			<Label>@PRO2286</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>RealDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@PRO2288</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainCoByPhysical</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UnitQty</ExtendedDataType>
			<Label>@SYS10197</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPlanIdSched</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPlanIdSched</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ReqPOId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReqPOId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RoundUp</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PmfCoByRoundUp</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RoundUpQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PmfRoundUpQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StUpDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@PRO2285</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RecId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumRemainIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ProdId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdIdx</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BackStatusItemIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RefTypeIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>InventRefType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>BackorderStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>DimensionDefaultMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PmfCoByMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>BOMVersionRefRecId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProdId</MapField>
					<MapFieldTo>ProdId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BurdenType</MapField>
					<MapFieldTo>BurdenType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CoByQty</MapField>
					<MapFieldTo>CoByQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUp</MapField>
					<MapFieldTo>RoundUp</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>RoundUpQty</MapField>
					<MapFieldTo>RoundUpQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BOMId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CoByQtySerie</MapField>
					<MapFieldTo>CoByQtySerie</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProductType</MapField>
					<MapFieldTo>ProductType</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAllocation</MapField>
					<MapFieldTo>CostAllocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CostAllocationPct</MapField>
					<MapFieldTo>CostAllocationPct</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverheadAmt</MapField>
					<MapFieldTo>OverheadAmt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PdsCWQty</MapField>
					<MapFieldTo>PdsCWQty</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PmfProdCoBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfFormulaCoBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PmfFormulaCoBy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CoByRefRecId</Name>
					<Field>CoByRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PmfProdCoByProduct</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123434</EntityRelationshipRole>
			<RelatedTable>PmfProdCoBy</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalBOM</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124133</EntityRelationshipRole>
			<RelatedTable>ProdJournalBOM</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124136</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProdTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>PmfProdCoBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProdId</Name>
					<SourceEDT>ProdId</SourceEDT>
					<Field>ProdId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124137</EntityRelationshipRole>
			<RelatedTable>ProdTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProdTableRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PmfProdCoBy</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>InventRefType</Name>
					<Field>InventRefType</Field>
					<ValueStr>InventRefType::Production</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventRefId</Name>
					<Field>InventRefId</Field>
					<RelatedField>ProdId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ReqPlanSched</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ReqPlanSched</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReqPlanIdSched</Name>
					<SourceEDT>ReqPlanIdSched</SourceEDT>
					<Field>ReqPlanIdSched</Field>
					<RelatedField>ReqPlanIdSched</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>