<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFundingSourceEInvoice_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjFundingSourceEInvoice_NO extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates, if selected contact person id is correct and belongs to valid customer.
    /// </summary>
    /// <returns>
    ///   True, if value is correct, otherwise false.
    /// </returns>
    public boolean checkContactPerson()
    {
        ContactPerson contactPerson;
        CustTable custTable;
        ProjFundingSource projFundingSource = this.ProjFundingSource();

        if (projFundingSource.FundingType == ProjFundingType::Customer)
        {
            if (this.ContactPersonId)
            {
                contactPerson = ContactPerson::find(this.ContactPersonId);
                custTable = CustTable::findByPartyRecId(projFundingSource.Party);
                if (contactPerson.getCustAccount() != custTable.AccountNum)
                {
                    return checkFailed(strFmt("@SYS92800",this.ContactPersonId,contactPerson.personName(),custTable.AccountNum));
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the contract name identified by the contact ID.
    /// </summary>
    /// <returns>
    /// The contact name specified by the contract ID.
    /// </returns>
    public display ContactPersonName contactPersonName()
    {
        ContactPersonName contactPersonName;

        if (this.ContactPersonId)
        {
            contactPersonName = ContactPerson::name(this.ContactPersonId);
        }

        return contactPersonName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editContactPersonName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the contact name for the current contract ID.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value to determine whether this is a set or get action.
    /// </param>
    /// <param name="_name">
    /// The contact name that will be used by a set operation.
    /// </param>
    /// <returns>
    /// The contact name specified by the contract ID.
    /// </returns>
    edit ContactPersonName editContactPersonName(boolean _set, ContactPersonName _name)
    {
        ContactPersonName name = _name;
        ContactPerson contactPerson;
        ContactPersonId contactPersonId;

        if (_set)
        {
            if (name)
            {
                contactPersonId = this.ContactPersonId;
                contactPerson = ContactPerson::find(_name);
                this.ContactPersonId = contactPerson.ContactPersonId;
                if (this.ContactPersonId)
                {
                    name = contactPerson.personName();
                }
                else
                {
                    DirPartyTable partyTable;

                    select firstonly ContactPersonId from contactPerson
                        where contactPerson.ContactForParty == this.ProjFundingSource().Party
                    join Name from partyTable
                        where partyTable.RecId == contactPerson.Party &&
                              partyTable.Name like name;
                    if (contactPerson.ContactPersonId)
                    {
                        this.ContactPersonId = contactPerson.ContactPersonId;
                        name=partyTable.Name;
                    }
                }

                if (contactPersonId != this.ContactPersonId)
                {
                    if (this.checkContactPerson())
                    {
                        if (FormDataUtil::getFormDataSource(this))
                        {
                            FormDataUtil::getFormDataSource(this).refresh();
                        }
                    }
                    else
                    {
                        this.ContactPersonId = contactPersonId;
                    }
                }
            }
            else
            {
                this.ContactPersonId = '';
            }
        }
        else
        {
            name = this.contactPersonName();
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes record with values from <c>ProjFundingSource</c> record in case fields in current record is empty.
    /// </summary>
    /// <param name="_projFundingSource">
    ///   <c>ProjFundingSource</c> record.
    /// </param>
    /// <remarks>
    ///   Used when retrieving values for E-Invoice.
    /// </remarks>
    public void initFromProjFundingSource(ProjFundingSource _projFundingSource)
    {
        this.ProjFundingSource = _projFundingSource.RecId;

        if (!this.ContactPersonId)
        {
            this.ContactPersonId = _projFundingSource.ContactPersonId;
        }

        if (!this.CustPurchaseOrder)
        {
            this.CustPurchaseOrder = _projFundingSource.CustPurchaseOrder;
        }

        if (!this.CustRef)
        {
            this.CustRef = _projFundingSource.CustRef;
        }

        if (!this.EInvoiceAccountCode)
        {
            this.EInvoiceAccountCode = _projFundingSource.EInvoiceAccountCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projFundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns <c>ProjFundingSource</c> record related to current line.
    /// </summary>
    /// <param name="_forUpdate">
    ///   Indicates, if record must be selected for update.
    /// </param>
    /// <returns>
    ///   <c>ProjFundingSource</c> record.
    /// </returns>
    public ProjFundingSource projFundingSource(boolean _forUpdate = false)
    {
        return ProjFundingSource::find(this.ProjFundingSource, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks if record exists at <c>ProjFundingSourceEInvoice_NO</c> table.
    /// </summary>
    /// <param name="_projFundingSourceEInvoiceRecId">
    ///   Record id of record to be found.
    /// </param>
    /// <returns>
    ///   True, if record exists; Otherwise false.
    /// </returns>
    public static boolean exist(RecId _projFundingSourceEInvoiceRecId)
    {
        return _projFundingSourceEInvoiceRecId
        && (select firstOnly RecId from ProjFundingSourceEInvoice_NO
                where ProjFundingSourceEInvoice_NO.RecId == _projFundingSourceEInvoiceRecId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Searches for record in <c>ProjFundingSourceEInvoice_NO</c> table.
    /// </summary>
    /// <param name="_projFundingSourceEInvoiceRecId">
    ///   Record id of record to be found.
    /// </param>
    /// <param name="_forUpdate">
    ///   Indicates if record must be selected for update.
    /// </param>
    /// <returns>
    ///   <c>ProjFundingSourceEInvoice_NO</c> record.
    /// </returns>
    public static ProjFundingSourceEInvoice_NO find(RecId _projFundingSourceEInvoiceRecId, boolean _forUpdate = false)
    {
        ProjFundingSourceEInvoice_NO projFundingSourceEInvoice;

        if (_projFundingSourceEInvoiceRecId)
        {
            projFundingSourceEInvoice.selectForUpdate(_forUpdate);

            select firstOnly projFundingSourceEInvoice
            where projFundingSourceEInvoice.RecId == _projFundingSourceEInvoiceRecId;
        }

        return projFundingSourceEInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFundingSourceProjId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Searches for record in <c>ProjFundingSourceEInvoice_NO</c> table by project id and funding source.
    /// </summary>
    /// <param name="_projFundingSource">
    ///   Record id of funding source.
    /// </param>
    /// <param name="_projId">
    ///   Id of project.
    /// </param>
    /// <param name="_forUpdate">
    ///   Indicates if record must be selected for update.
    /// </param>
    /// <returns>
    ///   <c>ProjFundingSourceEInvoice_NO</c> record.
    /// </returns>
    public static ProjFundingSourceEInvoice_NO findFundingSourceProjId(ProjFundingSourceRefId _projFundingSource, ProjId _projId, boolean _forUpdate = false)
    {
        ProjFundingSourceEInvoice_NO projFundingSourceEInvoice;

        if (_projFundingSource && _projId)
        {
            projFundingSourceEInvoice.selectForUpdate(_forUpdate);

            select firstOnly projFundingSourceEInvoice
            where projFundingSourceEInvoice.ProjFundingSource == _projFundingSource
                && projFundingSourceEInvoice.ProjId == _projId;
        }

        return projFundingSourceEInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:TableProjFundingSourceEInvoice_NO</DeveloperDocumentation>
	<Label>@Proj:DetailedInformationEInvoice</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>ProjFundingSource</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>FundingSourceProjIdx</ClusteredIndex>
	<Modules>ProjectManagementAndAccounting</Modules>
	<ReplacementKey>FundingSourceProjIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DefaultValues</Name>
			<Label>@SYS40219</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ContactPersonId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustPurchaseOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EInvoiceAccountCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ProjFundingSource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProjFundingSource</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFundingSourceRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContactPersonId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ContactPersonId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustPurchaseOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPurchaseOrder</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustRef</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustRef</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>EInvoiceAccountCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EInvoiceAccountCode</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FundingSourceProjIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjFundingSource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ContactPerson</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ContactPerson</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ContactPersonId</Name>
					<SourceEDT>ContactPersonId</SourceEDT>
					<Field>ContactPersonId</Field>
					<RelatedField>ContactPersonId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjFundingSource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjFundingSource</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjFundingSource</Name>
					<Field>ProjFundingSource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>