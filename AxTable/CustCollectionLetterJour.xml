<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionLetterJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustCollectionLetterJour extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur2Euro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the transaction currency amount provided to a Euro currency amount.
    /// </summary>
    /// <param name="_amountCur">
    /// The transaction currency amount represented in the CurrencyCode of this <c>CustCollectionLetterJour</c> table record.
    /// </param>
    /// <returns>
    /// The converted amount represented in the Euro currency; otherwise, zero if no exchange rates exist.
    /// </returns>
    /// <remarks>
    /// This method is used primarily for displaying Euro amounts during reporting. As a result, no error checking is done when performing
    /// currency conversions to ensure exchange rates exist. If exchange rates are not found, a zero amount will be returned.
    /// </remarks>
    AmountCur amountCur2Euro(AmountCur _amountCur)
    {
        CurrencyExchangeHelper currencyExchangeHelper;
        CurrencyCode euroCurrencyCode;
        AmountCur euroAmount, accountingCurrencyAmount;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (!euroCurrencyCode || !this.CurrencyCode || !this.CollectionLetterDate)
        {
            euroAmount = 0;
        }
        else
        {
            if (this.CurrencyCode == euroCurrencyCode)
            {
                euroAmount = _amountCur;
            }
            else
            {
                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), this.CollectionLetterDate);
                currencyExchangeHelper.parmErrorType(AifErrorType::None);

                // Note that it is not possible to call calculateTransactionToTransaction since it does not provide the ability to
                // turn off exchange rate error checking.
                accountingCurrencyAmount = currencyExchangeHelper.calculateTransactionToAccounting(this.CurrencyCode, _amountCur, false);
                euroAmount = currencyExchangeHelper.calculateAccountingToTransaction(euroCurrencyCode, accountingCurrencyAmount, true);
            }
        }

        return euroAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2Euro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the accounting currency amount provided to a Euro currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount.
    /// </param>
    /// <returns>
    /// The converted amount represented in the Euro currency; otherwise, zero if no exchange rates exist.
    /// </returns>
    /// <remarks>
    /// This method is used primarily for displaying Euro amounts during reporting. As a result, no error checking is done when performing
    /// currency conversions to ensure exchange rates exist. If exchange rates are not found, a zero amount will be returned.
    /// </remarks>
    AmountCur amountMST2Euro(AmountMST _amountMST)
    {
        CurrencyExchangeHelper currencyExchangeHelper;
        CurrencyCode euroCurrencyCode;

        euroCurrencyCode = Currency::findEuroCurrencyCode();

        if (!euroCurrencyCode || !this.CollectionLetterDate)
        {
            return 0;
        }

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), this.CollectionLetterDate);
        currencyExchangeHelper.parmErrorType(AifErrorType::None);

        return currencyExchangeHelper.calculateAccountingToTransaction(euroCurrencyCode, _amountMST, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockCustomer</Name>
				<Source><![CDATA[
    void blockCustomer()
    {
        CustTable custTable;

        if (this.Block == NoYes::Yes)
        {
            custTable = CustTable::find(this.AccountNum, true);

            if (! custTable.Blocked)
            {
                custTable.Blocked = CustVendorBlocked::Invoice;
                custTable.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelCustTransFromCustCollectionLetterJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the <c>CustTrans</c> record for cancellation based on the last customer collection letter.
    /// </summary>
    /// <param name = "_custTrans">The customer transaction to be cancelled.</param>
    protected void cancelCustTransFromCustCollectionLetterJour(CustTrans _custTrans)
    {
        // If there are no records with CustTransOpenRefRecIds found it is the case when
        // CustCollectionLetterJour records were generated before fix for DAXSE TFSID 3684120.
        // We need to check to see if that is the case and fall back to using
        // CollectionLetterJour records associated with the custTrans record.
        CustCollectionLetterJour lastCustCollectionLetterJour = _custTrans.lastUpdatedCollectionLetterOld();
        CustCollectionLetterTrans lastCustCollectionLetterTrans;
        
        if (lastCustCollectionLetterJour.RecId)
        {
            select firstonly RecId, CollectionLetterCode from lastCustCollectionLetterTrans
                where lastCustCollectionLetterTrans.CollectionLetterNum == lastCustCollectionLetterJour.CollectionLetterNum &&
                      lastCustCollectionLetterTrans.CustTransId == _custTrans.RecId;

            if (lastCustCollectionLetterTrans.RecId)
            {
                _custTrans.CollectionLetterCode = lastCustCollectionLetterTrans.CollectionLetterCode;
            }
        }
        else if (_custTrans.CollectionLetterCode != CustCollectionLetterCode::None)
        {
            _custTrans.CollectionLetterCode = CustCollectionLetterCodeOrderedList::determinePreviousCustCollectionLetterCode(_custTrans.CollectionLetterCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelCustTransOpenFromCustCollectionLetterTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the <c>CustTransOpen</c> record and prepares the <c>CustTrans</c> record for cancellation based on the last customer collection letter transaction.
    /// </summary>
    /// <param name = "_custTrans">The customer transaction to be cancelled.</param>
    /// <param name = "_custTransOpen">The open customer transaction to be cancelled.</param>
    /// <param name = "_lastCustCollectionLetterJour">The previous customer collection letter journal record.</param>
    protected void cancelCustTransOpenFromCustCollectionLetterTrans(CustTrans _custTrans, CustTransOpen _custTransOpen, CustCollectionLetterJour _lastCustCollectionLetterJour)
    {
        CustCollectionLetterTrans lastCustCollectionLetterTrans;

        select firstonly RecId, CollectionLetterCode from lastCustCollectionLetterTrans
                    where lastCustCollectionLetterTrans.CollectionLetterNum == _lastCustCollectionLetterJour.CollectionLetterNum &&
                        lastCustCollectionLetterTrans.CustTransOpenRecId == _custTransOpen.RecId;

        if (lastCustCollectionLetterTrans.RecId)
        {
            _custTrans.CollectionLetterCode = lastCustCollectionLetterTrans.CollectionLetterCode;
            _custTransOpen.CollectionLetterCode = lastCustCollectionLetterTrans.CollectionLetterCode;
            _custTransOpen.update();
        }
        else
        {
            _custTrans.CollectionLetterCode = CustCollectionLetterCodeOrderedList::determinePreviousCustCollectionLetterCode(_custTrans.CollectionLetterCode);
            _custTransOpen.CollectionLetterCode = CustCollectionLetterCodeOrderedList::determinePreviousCustCollectionLetterCode(_custTransOpen.CollectionLetterCode);
            _custTransOpen.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelCollectionLetterCodeCustTrans</Name>
				<Source><![CDATA[
    public void cancelCollectionLetterCodeCustTrans()
    {
        CustCollectionLetterTrans custCollectionLetterTrans;
        CustTrans custTrans;
        CustTransOpen custTransOpen;
        CustCollectionLetterJour lastCustCollectionLetterJour;
        
        ttsbegin;
        while select custCollectionLetterTrans
            where custCollectionLetterTrans.CollectionLetterNum == this.CollectionLetterNum &&
                  custCollectionLetterTrans.AccountNum == this.AccountNum &&
                  custCollectionLetterTrans.CollectionLetterIssued
        {
            custTrans = CustTrans::find(custCollectionLetterTrans.CustTransId, true);
            custTransOpen = CustTransOpen::find(custCollectionLetterTrans.CustTransOpenRecId, true);
            lastCustCollectionLetterJour = custTransOpen.lastUpdatedCollectionLetter();

            if (lastCustCollectionLetterJour || (!lastCustCollectionLetterJour && custTransOpen.CollectionLetterCode != CustCollectionLetterCode::None))
            {
                this.cancelCustTransOpenFromCustCollectionLetterTrans(custTrans, custTransOpen, lastCustCollectionLetterJour);
            }
            else
            {
                this.cancelCustTransFromCustCollectionLetterJour(custTrans);
            }

            custTrans.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionAddress</Name>
				<Source><![CDATA[
    display Addressing collectionAddress()
    {
        CustTable custTable;

        if (!hasFieldAccess(tableNum(LogisticsPostalAddress), fieldNum(LogisticsPostalAddress, Address), AccessType::View))
            throw error("@SYS57330");

        if (CustTable::checkExist(this.AccountNum))
        {
            custTable.recordLevelSecurity(true);

            select firstonly Party from custTable
                where custTable.AccountNum == this.AccountNum;

            if (!custTable)
                throw error("@SYS57330");
        }

        return DirUtility::replaceAddressTokenLanguage(custTable.postalAddress(), custTable.languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionAgencyDataCon_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates data related to the collection agency fee: fee amount, tax amount and fee currency.
    /// </summary>
    /// <returns>
    ///    Container with data related to the collection agency fee.
    /// </returns>
    container collectionAgencyDataCon_W()
    {
        Amount feeAmount, taxAmount;
        CurrencyCode feeCurrencyCode;

        if (this.ReferToCollectionAgency_W)
        {
            [feeAmount, feeCurrencyCode] = CustCollectionAgencyFeeHeader_W::calcCollectionAgencyFee(this.sumAmount(), this.CurrencyCode, this.CollectionLetterDate);

            if (this.ApplyCollectionAgencyTaxRate_W)
            {
                taxAmount = CurrencyExchangeHelper::amount(feeAmount * this.CollectionAgencyTaxRate_W / 100, feeCurrencyCode);
            }
            else
            {
                taxAmount = Tax::calcTaxAmount(this.TaxGroup,
                                               this.TaxItemGroup,
                                               this.CollectionLetterDate,
                                               feeCurrencyCode,
                                               feeAmount,
                                               TaxModuleType::CustCollectionLetter);
            }
        }

        return [feeAmount, taxAmount, feeCurrencyCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionLetterNum</Name>
				<Source><![CDATA[
    void collectionLetterNum()
    {
        NumberSeq numberSeq = NumberSeq::newGetNum(CustParameters::numRefCollectionLetterNum());

        this.CollectionLetterNum = numberSeq.num();
        this.NumberSequenceTable = numberSeq.parmNumberSequenceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectionName</Name>
				<Source><![CDATA[
    display Name collectionName()
    {
        return CustTable::find(this.AccountNum).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    public CustTrans custTrans()
    {
        CustTrans custTrans;
        select firstonly custTrans
            where custTrans.AccountNum == this.AccountNum
               && custTrans.TransDate == this.Updated
               && custTrans.Voucher == this.LedgerVoucher;
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayJournalPrintedString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a string indicating whether or not the collection letter has been printed yet.
    /// </summary>
    /// <returns>A string indicating whether or not the collection letter has been printed yet.</returns>
    public display str displayJournalPrintedString()
    {
        return this.JournalPrinted == NoYes::No ? "@SYS4004109" : "@SYS5308";
    }

]]></Source>
			</Method>
			<Method>
				<Name>eInvoice_NO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates if the information about customer can be unloaded in the xml-document
    /// </summary>
    /// <returns>
    ///     True if the customer information can be unloaded, false otherwise.
    /// </returns>
    public display EInvoice_NO eInvoice_NO()
    {
        return CustTable::find(this.AccountNum).eInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeAmountEuro</Name>
				<Source><![CDATA[
    display AmountCur feeAmountEuro()
    {
        return this.amountMST2Euro(this.Fee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeInclTax</Name>
				<Source><![CDATA[
    display AmountCur feeInclTax()
    {
        return (this.Fee + this.TaxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeInclTaxEuro</Name>
				<Source><![CDATA[
    display AmountCur feeInclTaxEuro()
    {
        return this.amountMST2Euro(this.feeInclTax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>feeLedgerDimension</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount feeLedgerDimension()
    {
        CollectionLetterCourseId collectionLetterCourse;

        collectionLetterCourse = CustLedgerAccounts::collectionLetterCourse(this.AccountNum,
                                                                            this.PostingProfile);

        return CustCollectionLetterLine::find(collectionLetterCourse,
                                              this.CollectionLetterCode,
                                              this.CurrencyCode).LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustCollectionLetterLine</Name>
				<Source><![CDATA[
    void initFromCustCollectionLetterLine(CustCollectionLetterLine _custCollectionLetterLine)
    {
        this.Block = _custCollectionLetterLine.Block;
        this.Fee = _custCollectionLetterLine.Fee;
        this.TaxItemGroup = _custCollectionLetterLine.TaxItemGroup;
        this.Notes = _custCollectionLetterLine.notes(this.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustTable</Name>
				<Source><![CDATA[
    void initFromCustTable(CustTable _custTable)
    {
        this.AccountNum = _custTable.AccountNum;
        this.CurrencyCode = _custTable.Currency;
        this.Name = _custTable.name();
        this.LanguageId = DirPartyTable::findRec(_custTable.Party).LanguageId;
        this.TaxGroup = _custTable.TaxGroup;
        this.DefaultDimension = _custTable.DefaultDimension;
        this.GiroType = _custTable.GiroTypeCollectionletter;
        this.PostalAddress = DirParty::primaryPostalAddress(_custTable.Party).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeCancelled</Name>
				<Source><![CDATA[
    boolean mayBeCancelled()
    {
        boolean ret = true;

        if (this.Updated || this.Canceled)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayBeReminded</Name>
				<Source><![CDATA[
    boolean mayBeReminded()
    {
        return (CustTable::find(this.AccountNum).Blocked != CustVendorBlocked::All);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(CustCollectionLetterJour, ApplyCollectionAgencyTaxRate_W):
                if (this.ApplyCollectionAgencyTaxRate_W)
                {
                    this.CollectionAgencyTaxRate_W = CustParameters::find().CollectionAgencyTaxRate_W;
                }
                else
                {
                    this.CollectionAgencyTaxRate_W = 0;
                }
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentBankAccountId</Name>
				<Source><![CDATA[
    CompanyBankAccountId paymentBankAccountId()
    {
        CompanyBankAccountId paymBankAccountId;
        CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(this.paymMode());
        if (custPaymModeTable.AccountType == LedgerJournalACType::Bank)
        {
            paymBankAccountId = custPaymModeTable.parmPaymAccount();
        }

        return paymBankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    CustPaymMode paymMode()
    {
        CustPaymMode paymMode;
        CustCollectionLetterTrans custCollectionLetterTrans;

        if (this.Status == PrintPostCancel::Posted)
        {
            select firstonly CustTransId from custCollectionLetterTrans
                where custCollectionLetterTrans.CollectionLetterNum == this.CollectionLetterNum
                   && custCollectionLetterTrans.AccountNum == this.AccountNum;
            paymMode = CustTrans::find(custCollectionLetterTrans.CustTransId, true).PaymMode;
        }
        else
        {
            paymMode = CustTable::find(this.AccountNum).PaymMode;
        }

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewPaneTitle</Name>
				<Source><![CDATA[
    display Caption previewPaneTitle()
    {
        return strFmt("@SYS327590", this.CollectionLetterNum, this.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCustTrans</Name>
				<Source><![CDATA[
    public Query queryCustTrans(boolean _update = false)
    {
        DictRelation dictRelation;
        DictField externdictField;
        DictField dictField;
        Query query = new Query();
        Counter c;

        query.addDataSource(tableNum(CustTrans));

        dictRelation = new DictRelation(tableNum(CustTrans));
        dictRelation.loadTableRelation(this.TableId);

        if (dictRelation.lines())
        {
            for (c=1; c <= dictRelation.lines(); c++)
            {
                externdictField = new DictField(this.TableId, dictRelation.lineExternTableValue(c));
                dictField = new DictField(tableNum(CustTrans),dictRelation.lineTableValue(c));
                query.dataSourceTable(tableNum(CustTrans)).addRange(dictField.id()).value(queryValue(externdictField.id()));
            }
        }
        query.dataSourceTable(tableNum(CustTrans)).update(_update);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunCustTrans</Name>
				<Source><![CDATA[
    public QueryRun queryRunCustTrans(boolean _update = false)
    {
        return new QueryRun (this.queryCustTrans(_update));
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryTmpTaxWorkTrans</Name>
				<Source><![CDATA[
    Query queryTmpTaxWorkTrans(boolean update = false)
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        queryBuildDataSource = query.addDataSource(tableNum(TmpTaxWorkTrans));

        queryBuildDataSource.update(update);
        queryBuildDataSource.addRange(fieldNum(TmpTaxWorkTrans, TaxOrigin)).value(strFmt('!%1',queryValue(TaxOrigin::TaxReversed)));
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, InventTransId ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxGroup ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxItemGroup ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, TaxRefId ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, ExemptTax ));
        queryBuildDataSource.addSortField(fieldNum(TmpTaxWorkTrans, SourceBaseAmountCur));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCancelling</Name>
				<Source><![CDATA[
    void setCancelling()
    {
        this.Canceled = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.Status = PrintPostCancel::Canceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPosted</Name>
				<Source><![CDATA[
    void setPosted(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        this.Updated = _transDate;
        this.Status = PrintPostCancel::Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrinted</Name>
				<Source><![CDATA[
    void setPrinted()
    {
        this.PrintDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.JournalPrinted = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAmount</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute(true)]
    display AmountCur sumAmount()
    {
        AmountCur amountCur;
        CustCollectionLetterTrans custCollectionLetterTrans;

        while select RemainAmount, CurrencyCode from custCollectionLetterTrans
            where custCollectionLetterTrans.CollectionLetterNum == this.CollectionLetterNum
               && custCollectionLetterTrans.AccountNum == this.AccountNum
               && custCollectionLetterTrans.CollectionLetterIssued
        {
            amountCur += CurrencyExchangeHelper::curAmount2CurAmount(custCollectionLetterTrans.RemainAmount, custCollectionLetterTrans.CurrencyCode, this.CurrencyCode, this.CollectionLetterDate);
        }

        return CurrencyExchangeHelper::amount(amountCur, this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAmountFeeInclTax</Name>
				<Source><![CDATA[
    display AmountCur sumAmountFeeInclTax()
    {
        return this.sumCollectionAmountFee() + this.taxAmountCur();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAmountInclTax</Name>
				<Source><![CDATA[
    display AmountCur sumAmountInclTax()
    {
        return (this.sumAmount() + this.taxAmountCur());
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumCollectionAmountFee</Name>
				<Source><![CDATA[
    display AmountCur sumCollectionAmountFee()
    {
        return this.sumAmount() + (this.Status != PrintPostCancel::Posted ? this.Fee : 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumRemainAmount</Name>
				<Source><![CDATA[
    display AmountCur sumRemainAmount()
    {
        AmountCur amountCur;
        CustCollectionLetterTrans custCollectionLetterTrans;

        while select sum(RemainAmount) from custCollectionLetterTrans
            group by CurrencyCode
            where custCollectionLetterTrans.CollectionLetterNum == this.CollectionLetterNum
               && custCollectionLetterTrans.AccountNum == this.AccountNum
               && custCollectionLetterTrans.CollectionLetterIssued
        {
            amountCur += CurrencyExchangeHelper::curAmount2CurAmount(custCollectionLetterTrans.RemainAmount, custCollectionLetterTrans.CurrencyCode, this.CurrencyCode);
        }

        return CurrencyExchangeHelper::amount(amountCur, this.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalance</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalance(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        QueryRun queryRun;
        TaxBaseCur taxBaseCur;
        TaxBaseCur sourceBaseAmountCur;
        TaxExemptTax taxExemptTax;

        queryRun = new QueryRun(this.queryTmpTaxWorkTrans());
        queryRun.setCursor(_tmpTaxWorkTrans);

        while (queryRun.next())
        {
            tmpTaxWorkTrans = queryRun.get(tableNum(TmpTaxWorkTrans));
            if (tmpTaxWorkTrans)
            {
                taxExemptTax = tmpTaxWorkTrans.ExemptTax;
                sourceBaseAmountCur = tmpTaxWorkTrans.SourceBaseAmountCur;
            }

            if (taxExemptTax == NoYes::No)
            {
                taxBaseCur += sourceBaseAmountCur;
            }
        }

        return -taxBaseCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxableAmountCur taxableBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.amountCur2Euro(this.taxableBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCur</Name>
				<Source><![CDATA[
    display TaxAmount taxAmountCur()
    {
        TaxAmount taxAmount = 0;

        if (this.Status == PrintPostCancel::Posted)
        {
            taxAmount = this.TaxAmount;
        }
        else
        {
            if (this.TaxGroup &&
                this.TaxItemGroup &&
                this.CurrencyCode &&
                this.Fee)
            {
                taxAmount = Tax::calcTaxAmount(this.TaxGroup,
                                               this.TaxItemGroup,
                                               this.CollectionLetterDate,
                                               this.CurrencyCode,
                                               this.Fee,
                                               TaxModuleType::CustCollectionLetter);
            }
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountEuro</Name>
				<Source><![CDATA[
    display TaxAmountCur taxAmountEuro()
    {
        return this.amountMST2Euro(this.taxAmountCur());
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalance</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalance(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.Fee - this.taxableBalance(_tmpTaxWorkTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalanceEuro</Name>
				<Source><![CDATA[
    display TaxTaxFreeAmountCur taxFreeBalanceEuro(TmpTaxWorkTrans _tmpTaxWorkTrans)
    {
        return this.amountCur2Euro(this.taxFreeBalance(_tmpTaxWorkTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectionLetterCodeCustTrans</Name>
				<Source><![CDATA[
    public void updateCollectionLetterCodeCustTrans()
    {
        CustCollectionLetterTrans custCollectionLetterTrans;

        if (this.Status != PrintPostCancel::Canceled)
        {
            CustCollectionLetterCodeOrderedList custCollectionLetterCodeOrderedList = CustCollectionLetterCodeOrderedList::newFromOrder();

            ttsbegin;
            while select * from custCollectionLetterTrans
                  where custCollectionLetterTrans.CollectionLetterNum == this.CollectionLetterNum
                     && custCollectionLetterTrans.AccountNum == this.AccountNum
                     && custCollectionLetterTrans.CollectionLetterIssued
            {
                var custTrans = CustTrans::find(custCollectionLetterTrans.CustTransId, true);
                var custTransOpen = CustTransOpen::find(CustCollectionLetterTrans.CustTransOpenRecId, true);

                custTransOpen.CollectionLetterCode = custCollectionLetterTrans.CollectionLetterCode;

                if (custCollectionLetterCodeOrderedList.indexOf(CustTrans.CollectionLetterCode) < custCollectionLetterCodeOrderedList.indexOf(custCollectionLetterTrans.CollectionLetterCode))
                {
                    custTrans.CollectionLetterCode = custCollectionLetterTrans.CollectionLetterCode;
                    custTrans.update();
                }

                custTransOpen.update();
            }

            if (CustParameters::find().CollectionLetterGenerationLevel == CustCollectionLetterGenerationLevel::Customer)
            {
                CustTable custTable = CustTable::find(this.AccountNum, true);
                custTable.CollectionLetterCode = this.CollectionLetterCode;
                custTable.doUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(CollectionLetterNum _collectionLetterNum, CustAccount _accountNum )
    {
        boolean ret = true;

        if (!CustCollectionLetterJour::exist(_collectionLetterNum, _accountNum))
        {
            ret = checkFailed(strFmt(CustCollectionLetterJour::txtNotExist(), _collectionLetterNum, _accountNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(CollectionLetterNum _collectionLetterNum, CustAccount _accountNum )
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     custCollectionLetterJour
                 where
                     custCollectionLetterJour.CollectionLetterNum == _collectionLetterNum &&
                    custCollectionLetterJour.AccountNum == _accountNum).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static CustCollectionLetterJour find(
        CollectionLetterNum _collectionLetterNum,
        CustAccount _accountNum ,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustCollectionLetterJour custCollectionLetterJour;

        custCollectionLetterJour.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            custCollectionLetterJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            custCollectionLetterJour
            where
            custCollectionLetterJour.CollectionLetterNum == _collectionLetterNum &&
                    custCollectionLetterJour.AccountNum == _accountNum;

        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    static CustCollectionLetterJour findRecId(recId _recId,
                                              boolean _forUpdate = false)
    {
        CustCollectionLetterJour custCollectionLetterJour;

        custCollectionLetterJour.selectForUpdate(_forUpdate);

        select firstonly custCollectionLetterJour
             order CollectionLetterNum asc
             where custCollectionLetterJour.RecId == _recId;

        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecIdConcurrent</Name>
				<Source><![CDATA[
    static CustCollectionLetterJour findRecIdConcurrent(recId _recId,
                                                        boolean _forUpdate = false,
                                                        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustCollectionLetterJour custCollectionLetterJour;

        custCollectionLetterJour.selectForUpdate(_forUpdate);

        if (_concurrencyModel != ConcurrencyModel::Auto)
        {
            custCollectionLetterJour.concurrencyModel(_concurrencyModel);

            if (_concurrencyModel == ConcurrencyModel::Pessimistic)
            {
                custCollectionLetterJour.readPast(true);
            }
        }

        select firstonly custCollectionLetterJour
             where custCollectionLetterJour.RecId == _recId;

        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumAmountDisplayCache</Name>
				<Source><![CDATA[
    static container sumAmountDisplayCache(container _conCollectionLetterNum,
                                                  container _conMapCollectionLetterNumSumAmount)
    {
        CustCollectionLetterJour custCollectionLetterJour;
        Set setCollectionLetterNum = Set::create(_conCollectionLetterNum);
        Map mapCollectionLetterNumSumAmount = Map::create(_conMapCollectionLetterNumSumAmount);
        SetIterator si = new SetIterator(setCollectionLetterNum);
        CollectionLetterNum collectionLetterNum;
        CustAccount accountNum;
        container collectionAgencyDataCon;

        si.begin();

        while (si.more())
        {
            [collectionLetterNum, accountNum] = si.value();
            custCollectionLetterJour = CustCollectionLetterJour::find(collectionLetterNum, accountNum);

            if (CustParameters::find().EnableReferToCollectionAgency_W == NoYes::Yes)
            {
                collectionAgencyDataCon = custCollectionLetterJour.collectionAgencyDataCon_W();

                mapCollectionLetterNumSumAmount.insert(si.value(), [custCollectionLetterJour.sumAmount(),
                                                                    conPeek(collectionAgencyDataCon,1),
                                                                    conPeek(collectionAgencyDataCon,2),
                                                                    conPeek(collectionAgencyDataCon,3)]);
            }
            else
            {
                mapCollectionLetterNumSumAmount.insert(si.value(), [custCollectionLetterJour.sumAmount()]);
            }
            si.next();
        }

        return mapCollectionLetterNumSumAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102172";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCollectionLetterCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the collection letter journal as per the <c>collectionLetterCode</c> value.
    /// </summary>
    /// <param name="_collectionLetterNum">
    /// The number of the current collection letter.
    /// </param>
    /// <param name="_accountNum">
    /// The customer account who received the current collection letter.
    /// </param>
    public static void updateCollectionLetterCode(CollectionLetterNum _collectionLetterNum, CustAccount _accountNum)
    {
        CustCollectionLetterJour custCollectionLetterJour;
        CustCollectionLetterTrans custCollectionLetterTrans;
        CollectionLetterCourseId collectionLetterCourse;
        CustCollectionLetterLine custCollectionLetterLine;

        ttsbegin;

        select maxof(CollectionLetterCode) from custCollectionLetterTrans
            where custCollectionLetterTrans.CollectionLetterNum == _collectionLetterNum &&
                  custCollectionLetterTrans.AccountNum == _accountNum &&
                  custCollectionLetterTrans.CollectionLetterIssued;

        custCollectionLetterJour = CustCollectionLetterJour::find(_collectionLetterNum, _accountNum, true);

        custCollectionLetterJour.CollectionLetterCode = custCollectionLetterTrans.CollectionLetterCode;

        collectionLetterCourse = CustLedgerAccounts::collectionLetterCourse(custCollectionLetterJour.AccountNum,
                                                                            custCollectionLetterJour.PostingProfile);

        custCollectionLetterLine = CustCollectionLetterLine::find(collectionLetterCourse,
                                                                  custCollectionLetterTrans.CollectionLetterCode,
                                                                  custCollectionLetterJour.CurrencyCode);

        custCollectionLetterJour.Fee = custCollectionLetterLine.Fee;

        custCollectionLetterJour.Notes = custCollectionLetterLine.notes(custCollectionLetterJour.LanguageId);

        custCollectionLetterJour.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPrintedFilterToFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a printed filter to the <c>CustCollectionLetterJour</c> form data source provided.
    /// </summary>
    /// <param name="_custCollectionLetterJourDataSource">
    /// The <c>CustCollectionLetterJour</c> form data source.
    /// </param>
    /// <param name="_selection">
    /// The filter selection.
    /// </param>
    public static void addPrintedFilterToFormDatasource(FormDataSource _custCollectionLetterJourDataSource, PrintedStatusFilter _selection)
    {
        switch (_selection)
        {
            case PrintedStatusFilter::NotPrinted:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, JournalPrinted), queryValue(NoYes::No));
                break;
            case PrintedStatusFilter::Printed:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, JournalPrinted), queryValue(NoYes::Yes));
                break;

            case PrintedStatusFilter::All:
            default:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, JournalPrinted), '');
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStatusFilterToFormDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a status filter to the <c>CustCollectionLetterJour</c> form data source provided.
    /// </summary>
    /// <param name="_custCollectionLetterJourDataSource">
    /// The <c>CustCollectionLetterJour</c> form data source.
    /// </param>
    /// <param name="_selection">
    /// The filter selection.
    /// </param>
    public static void addStatusFilterToFormDatasource(FormDataSource _custCollectionLetterJourDataSource, PrintPostCancelFilter _selection)
    {
        switch (_selection)
        {
            // It is important to use the PrintPostCancel enum for filtering since the enum element values are
            // not the same as the PrintPostCancelFilter enum. This was necessary to support "All" as an option.

            case PrintPostCancelFilter::Created:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, Status), queryValue(PrintPostCancel::Created));
                break;

            case PrintPostCancelFilter::Posted:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, Status), queryValue(PrintPostCancel::Posted));
                break;

            case PrintPostCancelFilter::Canceled:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, Status), queryValue(PrintPostCancel::Canceled));
                break;

            case PrintPostCancelFilter::All:
            default:
                _custCollectionLetterJourDataSource.filter(fieldnum(CustCollectionLetterJour, Status), '');
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastUpdatedCollectionLetterPerCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last updated Collection Letter for a customer.
    /// </summary>
    /// <param name = "_custAccount">A unique customer account number.</param>
    /// <returns>A <c>CustCollectionLetterJour</c> buffer.</returns>
    public static CustCollectionLetterJour lastUpdatedCollectionLetterPerCustomer(CustAccount _custAccount)
    {
        Query q = new Query();
        QueryBuildDataSource collectionLetterJourDS = q.addDataSource(tableNum(CustCollectionLetterJour));

        collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, Status)).value(SysQuery::valueNot(PrintPostCancel::Canceled));
        collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, AccountNum)).value(SysQuery::value(_custAccount));
        collectionLetterJourDS.addOrderByField(fieldNum(CustCollectionLetterJour, CollectionLetterDate), SortOrder::Descending);
        collectionLetterJourDS.firstOnly(true);

        if (CustParameters::find().CollectionLetterCodeUpdate == CustPostedPrinted::Posting)
        {
            collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, Updated)).value(SysQuery::valueNot(dateNull()));
        }
        else
        {
            collectionLetterJourDS.addRange(fieldNum(CustCollectionLetterJour, JournalPrinted)).value(SysQuery::value(NoYes::Yes));
        }
        
        QueryBuildDataSource collectionLetterTransDS = collectionLetterJourDS.addDataSource(tableNum(CustCollectionLetterTrans));
        collectionLetterTransDS.relations(true);
        collectionLetterTransDS.joinMode(JoinMode::ExistsJoin);
        collectionLetterTransDS.addRange(fieldNum(CustCollectionLetterTrans, CollectionLetterIssued)).value(SysQuery::value(NoYes::Yes));

        QueryBuildDataSource custTransOpenDS = collectionLetterTransDS.addDataSource(tableNum(CustTransOpen));
        custTransOpenDS.relations(true);
        custTransOpenDS.joinMode(JoinMode::ExistsJoin);

        QueryRun qr = new QueryRun(q);
        qr.next();

        CustCollectionLetterJour custCollectionLetterJour = qr.get(tableNum(CustCollectionLetterJour));

        return custCollectionLetterJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCreated</Name>
				<Source><![CDATA[
    internal static CustCollectionLetterJour findCreated(
        AccountNum _accountNum,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustCollectionLetterJour collectionLetterJour;

        collectionLetterJour.selectForUpdate(_forupdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            collectionLetterJour.concurrencyModel(_concurrencyModel);
        }

        select firstonly collectionLetterJour
            where collectionLetterJour.AccountNum == _accountNum
                && collectionLetterJour.Status == PrintPostCancel::Created;

        return collectionLetterJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CustCollectionLetter</ConfigurationKey>
	<DeveloperDocumentation>@SYS125048</DeveloperDocumentation>
	<FormRef>CustCollectionLetterJournal</FormRef>
	<Label>@SYS15076</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CollectionLetterNum</TitleField1>
	<TitleField2>AccountNum</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>AccountCollectIdx</PrimaryIndex>
	<ReplacementKey>AccountCollectIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>CustCollectionLetterTrans</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>CustCollectionLetterTrans</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sumAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Canceled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Updated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CollectionAgency_W</Name>
			<Label>@SYS4009955</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ReferToCollectionAgency_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApplyCollectionAgencyTaxRate_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionAgencyTaxRate_W</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CollectionLetterJournal</Name>
			<Label>@SYS15076</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PostingProfile</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NumberSequenceTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymTermId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DueDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customer</Name>
			<Label>@SYS302</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LanguageId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>eInvoice_NO</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS342338</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Giro</Name>
			<Label>@SYS5231</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>GiroType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustBillingClassification</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Note</Name>
			<Label>@SYS13887</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Notes</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AccountNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CollectionLetterCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Block</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReferToCollectionAgency_W</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Fee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>sumAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS5878</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWriteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>taxAmountCur</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTaxAmount</Name>
			<Label>@SYS22646</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Sequence</Name>
			<Label>@SYS21731</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PrintDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Updated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Canceled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JournalPrinted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SentElectronically</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AccountNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyCollectionAgencyTaxRate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ApplyCollectionAgencyTaxRate_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Block</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Block</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Canceled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS1068</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CollectionAgencyTaxRate_W</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCollectionAgencyTaxRate_W</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CollectionLetterCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>CustCollectionLetterCode</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CollectionLetterDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CollectionLetterNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CollectionLetterNum</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustBillingClassification</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SPS371</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDefaultDimensionValueSet</ExtendedDataType>
			<Visible>No</Visible>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>DueDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DueDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Fee</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS9154</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>GiroType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymentStubCollectionId</ExtendedDataType>
			<EnumType>PaymentStub</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JournalPrinted</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS5308</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LanguageId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustLanguageId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Notes</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Notes</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>NumberSequenceTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymTermId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PaymTermId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PostalAddress</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PostingProfile</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustPostingProfile</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>PrintDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS5308</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReferToCollectionAgency_W</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ReferToCollectionAgency_W</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SentElectronically</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@AccountsReceivable:CustCollectionLetterSentElectronically</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>PrintPostCancel</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxWriteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxWriteCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>Updated</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS439</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>SentElectronically_NO</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<CountryRegionCodes>NO,DK</CountryRegionCodes>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_DimensionAttributeValueSet_CustCollec</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>DefaultDimension</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountCollectIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CollectionLetterNum</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AccountNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>AccountNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PaymIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PaymId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CollectionLetterDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustBillingClassificationIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<ConfigurationKey>PublicSector</ConfigurationKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CustBillingClassification</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PostalAddressIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PostalAddress</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CustVendAccountMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Account</MapField>
					<MapFieldTo>AccountNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Num</MapField>
					<MapFieldTo>CollectionLetterNum</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CustCurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustBillingClassification</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBillingClassification</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustBillingClassification</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustBillingClassification_CustCollectionLetterJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustBillingClassification</Name>
					<Field>CustBillingClassification</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustLedger</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustLedger</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostingProfile</Name>
					<SourceEDT>CustPostingProfile</SourceEDT>
					<Field>PostingProfile</Field>
					<RelatedField>PostingProfile</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PostingIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustTransOpen</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125051</EntityRelationshipRole>
			<RelatedTable>CustTransOpen</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTransOpen</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustCollectionLetterJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AccountNum</Name>
					<Field>AccountNum</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CollectionLetterCode</Name>
					<Field>CollectionLetterCode</Field>
					<RelatedField>CollectionLetterCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultDimension</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustCollectionLetterJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LanguageTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LanguageTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LanguageId</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<Field>LanguageId</Field>
					<RelatedField>LanguageId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>LabelFile_Extern</Name>
					<SourceEDT>CustLanguageId</SourceEDT>
					<RelatedField>LabelFile</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>NumberSequenceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>NumberSequenceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NumberSequenceTable</Name>
					<Field>NumberSequenceTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PaymTerm_PaymTermId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PaymTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PaymTerm_PaymTermId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustCollectionLetterJour</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymTermId</Name>
					<SourceEDT>PaymTermId</SourceEDT>
					<Field>PaymTermId</Field>
					<RelatedField>PaymTermId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TermIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PostalAddress_FK</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PostalAddress_FK</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustCollectionLetterJour</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PostalAddress</Name>
					<Field>PostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>