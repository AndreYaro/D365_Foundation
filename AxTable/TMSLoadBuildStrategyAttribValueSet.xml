<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSLoadBuildStrategyAttribValueSet</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSLoadBuildStrategyAttribValueSet extends EcoResInstanceValue
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByLoadBuildStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>TMSLoadBuildStrategyAttribValueSet</c> record by associated load build strategy ID.
    /// </summary>
    /// <param name="_tmsLoadBuildStrategyId">
    /// The associated load build strategy ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>TMSLoadBuildStrategyAttribValueSet</c> record; otherwise empty record.
    /// </returns>
    public static TMSLoadBuildStrategyAttribValueSet findByLoadBuildStrategy(TMSLoadBuildStrategyId _tmsLoadBuildStrategyId, boolean _forUpdate = false)
    {
        TMSLoadBuildStrategyAttribValueSet tmsLoadBuildStrategyAttribValueSet;

        if (_tmsLoadBuildStrategyId)
        {
            tmsLoadBuildStrategyAttribValueSet.selectForUpdate(_forUpdate);

            select firstOnly tmsLoadBuildStrategyAttribValueSet
                where tmsLoadBuildStrategyAttribValueSet.LoadBuildStrategy == _tmsLoadBuildStrategyId;
        }

        return tmsLoadBuildStrategyAttribValueSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts attribute values for a specific load build strategy.
    /// </summary>
    /// <param name="_tmsLoadBuildStrategyClassId">
    /// The record ID of load build strategy class, that defines the attributes.
    /// </param>
    /// <param name="_tmsLoadBuildStrategyId">
    /// The record ID of the load build strategy, for which to insert the attribute values.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Unsupported attribute type.
    /// </exception>
    public static void insertValues(TMSLoadBuildStrategyClassId _tmsLoadBuildStrategyClassId, TMSLoadBuildStrategyId _tmsLoadBuildStrategyId)
    {
        TMSLoadBuildStrategyAttribValueSet  tmsLoadBuildStrategyAttribValueSet;
        TMSLoadBuildStrategyAttribute       tmsLoadBuildStrategyAttribute;
        EcoResAttribute                     ecoResAttribute;
        EcoResAttributeType                 ecoResAttributeType;
        EcoResTextValue                     ecoResTextValue;
        EcoResFloatValue                    ecoResFloatValue;
        EcoResIntValue                      ecoResIntValue;
        EcoResBooleanValue                  ecoResBooleanValue;
        EcoResDateTimeValue                 ecoResDateTimeValue;
        EcoResAttributeValue                ecoResAttributeValue;

        ttsBegin;

        while select RecId from tmsLoadBuildStrategyAttribute
            where tmsLoadBuildStrategyAttribute.LoadBuildStrategyClass == _TMSLoadBuildStrategyClassId
            join RecId from ecoResAttribute
                where ecoResAttribute.RecId == tmsLoadBuildStrategyAttribute.EcoResAttribute
                join DataType from ecoResAttributeType
                     where ecoResAttributeType.RecId == ecoResAttribute.AttributeType

        {
            // Insert the value set record if not created yet - only inserting if there is at least one attribute to record value for
            if (!tmsLoadBuildStrategyAttribValueSet.RecId)
            {
                tmsLoadBuildStrategyAttribValueSet.LoadBuildStrategy = _tmsLoadBuildStrategyId;
                tmsLoadBuildStrategyAttribValueSet.insert();
            }

            ecoResAttributeValue.clear();
            switch (ecoResAttributeType.DataType)
            {
                case AttributeDataType::Text:
                    ecoResTextValue.clear();
                    ecoResTextValue.insert();
                    ecoResAttributeValue.Value = ecoResTextValue.RecId;
                    break;
                case AttributeDataType::DateTime:
                    ecoResDateTimeValue.clear();
                    ecoResDateTimeValue.insert();
                    ecoResAttributeValue.Value = ecoResDateTimeValue.RecId;
                    break;
                case AttributeDataType::TrueFalse:
                    ecoResBooleanValue.clear();
                    ecoResBooleanValue.insert();
                    ecoResAttributeValue.Value = ecoResBooleanValue.RecId;
                    break;
                case AttributeDataType::Decimal:
                    ecoResFloatValue.clear();
                    ecoResFloatValue.insert();
                    ecoResAttributeValue.Value = ecoResFloatValue.RecId;
                    break;
                case AttributeDataType::Integer:
                    ecoResIntValue.clear();
                    ecoResIntValue.insert();
                    ecoResAttributeValue.Value = ecoResIntValue.RecId;
                    break;

                default:
                    if(!tmsLoadBuildStrategyAttribValueSet::insertValuesDefault(_tmsLoadBuildStrategyClassId, _tmsLoadBuildStrategyId))
                    {
                        throw error(strFmt("@SYP4860901", ecoResAttributeType.DataType));
                    }
            }

            ecoResAttributeValue.InstanceValue = tmsLoadBuildStrategyAttribValueSet.RecId;
            ecoResAttributeValue.Attribute = ecoResAttribute.RecId;
            ecoResAttributeValue.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValuesDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts attribute values for a specific load build strategy.
    /// </summary>
    /// <param name="_tmsLoadBuildStrategyClassId">
    ///     The record ID of load build strategy class, that defines the attributes.
    /// </param>
    /// <param name="_tmsLoadBuildStrategyId">
    ///     The record ID of the load build strategy, for which to insert the attribute values.
    /// </param>
    /// <returns>
    ///     true to throw the error.
    /// </returns>
    protected static boolean insertValuesDefault(TMSLoadBuildStrategyClassId _tmsLoadBuildStrategyClassId, TMSLoadBuildStrategyId _tmsLoadBuildStrategyId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@SYP4860890</DeveloperDocumentation>
	<Label>@SYP4860889</Label>
    <AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>LoadBuildStrategyIdx</ClusteredIndex>
	<Extends>EcoResInstanceValue</Extends>
	<Modules>Transportation</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LoadBuildStrategy</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>LoadBuildStrategy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSLoadBuildStrategyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LoadBuildStrategyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LoadBuildStrategy</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSEcoResInstanceValue</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>EcoResInstanceValue</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSLoadBuildStrategy</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TMSLoadBuildStrategy</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadBuildStrategy</Name>
					<Field>LoadBuildStrategy</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>