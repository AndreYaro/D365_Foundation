<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PaymCalendar extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the <c>PaymCalendar</c> table.
    /// </summary>
    public void delete()
    {
        PaymCalendarCountryRegion paymCalendarCountryRegion;
        StateHoliday stateHoliday;
        LogisticsAddressState logisticsAddressState;
        LogisticsAddressCountryRegion logisticsAddressCountryRegion;

        paymCalendarCountryRegion = PaymCalendarCountryRegion::findByPaymCalendar(this.RecId);

        super();

        if (paymCalendarCountryRegion.CountryRegion)
        {
            // <GBR>
            if (BrazilParameters::isEnabled())
            {
                this.deleteRelatedCityHolidays(paymCalendarCountryRegion);
            }
            // </GBR>

            select firstonly RecId from stateHoliday
                exists join logisticsAddressState
                    where logisticsAddressState.RecId == stateHoliday.State
                exists join logisticsAddressCountryRegion
                    where logisticsAddressCountryRegion.CountryRegionId == logisticsAddressState.CountryRegionId
                        && logisticsAddressCountryRegion.RecId == paymCalendarCountryRegion.CountryRegion;

            if (stateHoliday)
            {
                stateHoliday.skipDeleteMethod(true);
                delete_from stateHoliday
                    exists join logisticsAddressState
                        where logisticsAddressState.RecId == stateHoliday.State
                    exists join logisticsAddressCountryRegion
                        where logisticsAddressCountryRegion.CountryRegionId == logisticsAddressState.CountryRegionId
                            && logisticsAddressCountryRegion.RecId == paymCalendarCountryRegion.CountryRegion;

                // Flush holiday cache
                PaymCalendarProcessor::stateHolidayChanged();
            }

            // Flush calendar for location cache
            PaymCalendarProcessor::calendarForLocationChanged();
        }

        // Flush calendar cache
        PaymCalendarProcessor::paymCalendarChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRelatedCityHolidays</Name>
				<Source><![CDATA[
    private void deleteRelatedCityHolidays(PaymCalendarCountryRegion _paymCalendarCountryRegion)
    {
        CityHoliday cityHoliday;
        LogisticsAddressCountryRegion logisticsAddressCountryRegion;
        LogisticsAddressCity logisticsAddressCity;

        select firstonly RecId from cityHoliday
            exists join logisticsAddressCity
                where logisticsAddressCity.RecId == cityHoliday.City
            exists join logisticsAddressCountryRegion
                where logisticsAddressCountryRegion.CountryRegionId == logisticsAddressCity.CountryRegionId
                    && logisticsAddressCountryRegion.RecId == _paymCalendarCountryRegion.CountryRegion;

        if (cityHoliday)
        {
            cityHoliday.skipDeleteMethod(true);
            delete_from cityHoliday
                exists join logisticsAddressCity
                    where logisticsAddressCity.RecId == cityHoliday.City
                exists join logisticsAddressCountryRegion
                    where logisticsAddressCountryRegion.CountryRegionId == logisticsAddressCity.CountryRegionId
                        && logisticsAddressCountryRegion.RecId == _paymCalendarCountryRegion.CountryRegion;

            // Flush city holiday cache
            PaymCalendarProcessor::stateHolidayChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record in the <c>PaymCalendar</c> table.
    /// </summary>
    public void insert()
    {
        super();

        // Flush cache
        PaymCalendarProcessor::paymCalendarChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record in the <c>PaymCalendar</c> table.
    /// </summary>
    public void update()
    {
        PaymCalendar origPaymCalendar;
        boolean isFlush;

        origPaymCalendar = this.orig();

        // Only flush if business days have changed
        isFlush = (this.IsMondayBusinessDay != origPaymCalendar.IsMondayBusinessDay)
            || (this.IsTuesdayBusinessDay != origPaymCalendar.IsTuesdayBusinessDay)
            || (this.IsWednesdayBusinessDay != origPaymCalendar.IsWednesdayBusinessDay)
            || (this.IsThursdayBusinessDay != origPaymCalendar.IsThursdayBusinessDay)
            || (this.IsFridayBusinessDay != origPaymCalendar.IsFridayBusinessDay)
            || (this.IsSaturdayBusinessDay != origPaymCalendar.IsSaturdayBusinessDay)
            || (this.IsSundayBusinessDay != origPaymCalendar.IsSundayBusinessDay);

        super();

        // Flush cache
        if (isFlush)
        {
            PaymCalendarProcessor::paymCalendarChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        PaymCalendarCountryRegion paymCalendarCountryRegion;
        PaymCalendarCriteriaRule paymCalendarCriteriaRule;
        PaymCalendarCountryRegionLegalEntity paymCalendarCountryRegionLegalEntity;
        PaymCalendarCustInterest paymCalendarCustInterest;
        CustInterest custInterest;
        CompanyInfo companyInfo;

        boolean isValid = super();

        // Check if rules exist
        select firstonly crosscompany RecId from paymCalendarCriteriaRule
            where paymCalendarCriteriaRule.PaymCalendar == this.RecId
            join Name from companyInfo
                where companyInfo.DataArea == paymCalendarCriteriaRule.DataAreaId;

        if (paymCalendarCriteriaRule)
        {
            isValid = checkFailed(strFmt("@CashManagement:GLS220248", this.Name, paymCalendarCriteriaRule.ModuleType, paymCalendarCriteriaRule.Name, companyInfo.Name));
        }

        paymCalendarCountryRegion = PaymCalendarCountryRegion::findByPaymCalendar(this.RecId);

        // Check for country/region selected calendars
        if (isValid && paymCalendarCountryRegion)
        {
            select firstonly crosscompany RecId from paymCalendarCountryRegionLegalEntity
                where paymCalendarCountryRegionLegalEntity.PaymCalendarCountryRegion == paymCalendarCountryRegion.RecId
                join Name from companyInfo
                    where companyInfo.DataArea == paymCalendarCountryRegionLegalEntity.DataAreaId;

            if (paymCalendarCountryRegionLegalEntity)
            {
                isValid = checkFailed(strFmt("@CashManagement:GLS220872", this.Name, companyInfo.Name));
            }
        }

        // Check for cust interest record
        if (isValid)
        {
            select firstonly RecId from paymCalendarCustInterest
                where paymCalendarCustInterest.PaymCalendar == this.RecId
                join InterestCode from custInterest
                    where custInterest.RecId == paymCalendarCustInterest.CustInterest
                join Name from companyInfo
                    where companyInfo.DataArea == custInterest.DataAreaId;

            if (paymCalendarCustInterest)
            {
                isValid = checkFailed(strFmt("@CashManagement:GLS220202", this.Name, custInterest.InterestCode, companyInfo.Name));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isBusinessDaySpecified;

        boolean isValid = super();

        isBusinessDaySpecified = this.IsMondayBusinessDay
            || this.IsTuesdayBusinessDay
            || this.IsWednesdayBusinessDay
            || this.IsThursdayBusinessDay
            || this.IsFridayBusinessDay
            || this.IsSaturdayBusinessDay
            || this.IsSundayBusinessDay;

        if (!isBusinessDaySpecified)
        {
            isValid = checkFailed("@CashManagement:GLS220234");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the <c>PaymCalendar</c> table; if not, an error
    /// message is displayed.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendar</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PaymCalendarRecId _recId)
    {
        boolean isExisting = true;

        if (!PaymCalendar::exist(_recId))
        {
            isExisting = checkFailed(strFmt(PaymCalendar::txtNotExist(), _recId));
        }

        return isExisting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PaymCalendar</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>PaymCalendar</c> record.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PaymCalendarRecId _recId)
    {
        PaymCalendar paymCalendar;

        select firstonly RecId from paymCalendar
            where paymCalendar.RecId == _recId;

        return paymCalendar != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PaymCalendar</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The ID of the <c>PaymCalendar</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendar</c> table; otherwise, an empty record.
    /// </returns>
    public static PaymCalendar find(
        PaymCalendarRecId _recId,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendar paymCalendar;

        paymCalendar.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendar.concurrencyModel(_concurrencyModel);
        }

        select firstonly paymCalendar
            where paymCalendar.RecId == _recId;

        return paymCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the payment calendar with the specified name.
    /// </summary>
    /// <param name="_name">
    /// The name of the <c>PaymCalendar</c> record.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when it reads the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PaymCalendar</c> table with the specified name; otherwise, an empty record.
    /// </returns>
    public static PaymCalendar findByName(
        Name _name,
        boolean _forUpdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        PaymCalendar paymCalendar;

        paymCalendar.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            paymCalendar.concurrencyModel(_concurrencyModel);
        }

        // Find record
        select firstonly paymCalendar
            where paymCalendar.Name == _name;

        return paymCalendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to use when a specific record in the <c>PaymCalendar</c> table does not exist.
    /// </summary>
    /// <returns>
    /// The message that indicates a record does not exists.
    /// </returns>
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102169";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PaymCalendar</ConfigurationKey>
	<DeveloperDocumentation>@CashManagement:GLS220107</DeveloperDocumentation>
	<Label>@CashManagement:GLS220106</Label>
	<TableGroup>Reference</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Description</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<Modules>Bank</Modules>
	<ReplacementKey>NameIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS6303</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Weekdays</Name>
			<Label>@CashManagement:GLS220116</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>IsMondayBusinessDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsTuesdayBusinessDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsWednesdayBusinessDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsThursdayBusinessDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsFridayBusinessDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSaturdayBusinessDay</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsSundayBusinessDay</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsFridayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS7072</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMondayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS5217</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSaturdayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS13051</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsSundayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS13053</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsThursdayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6714</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsTuesdayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6713</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsWednesdayBusinessDay</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6482</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
			<Label>@CashManagement:GLS220108</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NameIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>