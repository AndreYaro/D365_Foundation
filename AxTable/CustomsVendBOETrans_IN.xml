<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsVendBOETrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustomsVendBOETrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>editReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason code using ReasonCodeMap.
    /// </summary>
    /// <param name="_set">
    /// true if the reason code is set; otherwise, false.
    /// </param>
    /// <param name="_reasonCode">
    /// The new reason code when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason code of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonCode editReasonCode(boolean _set, ReasonCode _reasonCode)
    {
        return this.ReasonCodeMap::editReasonCode(_set, _reasonCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the reason comment using ReasonCodeMap.
    /// </summary>
    /// <param name="_set">
    /// true if the reason comment is set; otherwise, false.
    /// </param>
    /// <param name="_reasonComment">
    /// The new reason comment when <paramref name="_set"/> is true.
    /// </param>
    /// <returns>
    /// The reason comment of the record in the <c>ReasonTableRef</c> table.
    /// </returns>
    public edit ReasonComment editReasonComment(boolean _set, ReasonComment _reasonComment)
    {
        return this.ReasonCodeMap::editReasonComment(_set, _reasonComment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchaseOrderedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Purchase quantity for given InventTransId.
    /// </summary>
    /// <returns>
    /// The Purchase quantity for purchLine.
    /// </returns>
    display CustomsQty_IN getPurchaseOrderedQty()
    {
        return PurchLine::findInventTransId(this.InventTransId).PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets difference of receiveQty and BillOfEntryQty for specified CustomsVendBOETrans_IN record.
    /// </summary>
    /// <returns>
    /// The remaining quantity for selected CustomsVendBoeTrans_IN.
    /// </returns>
    display CustomsQty_IN getRemainingQty()
    {
        return (this.ReceiveQty - this.BillOfEntryQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize CustomsVendBOETrans_IN record from specified PurchLine.
    /// </summary>
    /// <param name="_purchLine">
    /// The PurchLine record to be copied to CustomsVendBOETrans_IN fields.
    /// </param>
    public void  initFromPurchLine(PurchLine  _purchLine)
    {
        this.OrigPurchId               = _purchLine.PurchId;
        this.InventTransId             = _purchLine.InventTransId;
        this.ItemId                    = _purchLine.ItemId;
        this.PurchLineRecId            = _purchLine.RecId;
        this.TaxItemGroup              = _purchLine.TaxItemGroup;
        this.TaxGroup                  = _purchLine.TaxGroup;
        this.CurrencyCode              = _purchLine.CurrencyCode;
        this.InventDimId               = _purchLine.InventDimId;
        this.ProcurementCategory       = _purchLine.ProcurementCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendBOEJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize CustomsVendBOETrans_IN table buffer from CustomsVendBOEJour_IN record.
    /// </summary>
    /// <param name="_customsVendBOEJour">
    /// The CustomsVendBOEJour_IN record to be copied to CustomsVendBOETrans_IN fields.
    /// </param>
    public void  initFromVendBOEJour(CustomsVendBOEJour_IN _customsVendBOEJour)
    {
        this.PurchId                = _customsVendBOEJour.PurchId;
        this.CustomsBillOfEntryNumberTable      = _customsVendBOEJour.CustomsBillOfEntryNumberTable;
        this.BillOfEntryDate        = _customsVendBOEJour.BillOfEntryDate;
        this.CustomsBillOfEntryJournal_IN = _customsVendBOEJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGetRemainingInventQuantityForPackingSlipUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the remaining quantity for the packing slip update should be retrieved.
    /// </summary>
    /// <param name = "_purchLine">A <c>PurchLine</c></param>
    /// <param name = "_qty">The quantity</param>
    /// <returns>true if the remaining quantity should be retrieved; otherwise, false.</returns>
    public static boolean mustGetRemainingInventQuantityForPackingSlipUpdate(PurchLine _purchLine, InventQty _qty)
    {
        return (PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes
                && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId)
                && _qty == naReal()
                && (_purchLine.purchTable().DocumentStatus == DocumentStatus::BillOfEntry_IN
                || _purchLine.purchTable().DocumentStatus == DocumentStatus::PackingSlip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGetRemainingPurchQuantityForPackingSlipUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the remaining quantity for the packing slip update should be retrieved.
    /// </summary>
    /// <param name = "_purchLine">A <c>PurchLine</c></param>
    /// <param name = "_qty">The quantity</param>
    /// <returns>true if the remaining quantity should be retrieved; otherwise, false.</returns>
    public static boolean mustGetRemainingPurchQuantityForPackingSlipUpdate(PurchLine _purchLine, PurchQty _qty)
    {
        return (PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN
                && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId)
                && _qty == naReal()
                && (_purchLine.purchTable().DocumentStatus == DocumentStatus::BillOfEntry_IN
                || _purchLine.purchTable().DocumentStatus == DocumentStatus::PackingSlip));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// finds InventDim record for specified InventDimId.
    /// </summary>
    /// <param name="_update">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected inventDim record.
    /// </returns>
    InventDim inventDim(boolean  _update = false)
    {
        return InventDim::find(this.InventDimId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// finds PurchLine record for specified InventTransId.
    /// </summary>
    /// <param name="_update">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected PurchLine record.
    /// </returns>
    public PurchLine purchLine(boolean _update = false)
    {
        return PurchLine::findInventTransId(this.InventTransId, _update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBillOfEntryComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if BillOfEntry is completely Updated for specified PurchTable record.
    /// </summary>
    /// <param name="_purchId">
    /// PurchId for which BillOfEntry update is complete.
    /// </param>
    /// <returns>
    /// True if BillOfEntry update is complete otherwise, false.
    /// </returns>
    public static boolean checkBillOfEntryComplete(PurchIdBase _purchId)
    {
        CustomsQty_IN                       totalOrderedQty;
        CustomsQty_IN                       consumedQty;
        CustomsVendBOETrans_IN              customsVendBOETrans;
        boolean                             isBillOfEntryComplete;
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;

        select sum(Receive) from customsInvoiceRegnTrans
                join RecId, CustomsInvoiceRegnJournalTableRecId from customsInvoiceRegnJournalLine
                    where customsInvoiceRegnTrans.CustomsInvoiceRegnJournalLineRecId == customsInvoiceRegnJournalLine.RecId
                join RecId, OrderId from customsInvoiceRegnJournalTable
            where  customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId
                && customsInvoiceRegnJournalTable.OrderId == _purchId;

        totalOrderedQty = customsInvoiceRegnTrans.Receive;

        select sum(BillOfEntryQty) from customsVendBOETrans
            group by PurchId
                where customsVendBOETrans.PurchId == _purchId
                    && customsVendBOETrans.Status != CustomsVendBOEStatus_IN::Canceled;

        consumedQty = customsVendBOETrans.BillOfEntryQty;

        if (consumedQty && (consumedQty == totalOrderedQty))
        {
            isBillOfEntryComplete = true;
        }

        return isBillOfEntryComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsVendBOETrans_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing CustomsVendBOETrans_IN table.
    /// </returns>
    public static CustomsVendBOETrans_IN find(
        RefRecId            _recId,
        boolean             _forupdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        customsVendBOETrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            customsVendBOETrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly customsVendBOETrans
            where customsVendBOETrans.RecId  == _recId
            &&    customsVendBOETrans.Status != CustomsVendBOEStatus_IN::Canceled;

        return customsVendBOETrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsVendBOETrans_IN table for the specified CustomsImportInvoiceNumberTable_IN RecId, CustomsBillOfEntryNumberTable_IN RecId and PurchId.
    /// </summary>
    /// <param name="_customsImporterInvoiceNumber">
    /// The CustomsImportInvoiceNumberTable_IN RecId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <param name="_customsBillOfEntryNumber">
    /// The CustomsBillOfEntryNumberTable_IN RecId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <param name="_purchId">
    /// The PurchId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <param name="_forUpdate">
    /// if true, select record for update.
    /// </param>
    /// <returns>
    /// The selected CustomsVendBOETrans_IN table record.
    /// </returns>
    public static CustomsVendBOETrans_IN findByInvoiceNumber(
        RefRecId _customsImporterInvoiceNumber,
        RefRecId _customsBillOfEntryNumber,
        PurchId  _purchId,
        boolean  _forUpdate = false)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        if (_customsImporterInvoiceNumber && _customsBillOfEntryNumber && _purchId)
        {
            customsVendBOETrans.selectForUpdate(_forUpdate);
            select firstonly customsVendBOETrans
                where   customsVendBOETrans.CustomsImportInvoiceNumberTable == _customsImporterInvoiceNumber
                &&      customsVendBOETrans.CustomsBillOfEntryNumberTable   == _customsBillOfEntryNumber
                &&      customsVendBOETrans.PurchId                         == _purchId
                &&      customsVendBOETrans.Status != CustomsVendBOEStatus_IN::Canceled;
        }

        return customsVendBOETrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsVendBOETrans_IN table for the specified PurchId.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <returns>
    /// The selected CustomsVendBOETrans_IN table record.
    /// </returns>
    public static CustomsVendBOETrans_IN findOrderId(PurchIdBase   _purchId)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        if (_purchId)
        {
            select firstonly customsVendBOETrans
                where customsVendBOETrans.PurchId == _purchId
                &&    customsVendBOETrans.Status  != CustomsVendBOEStatus_IN::Canceled;
        }
        return customsVendBOETrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchLineRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsVendBOETrans_IN table for the specified PurchLine RecId.
    /// </summary>
    /// <param name="_recid">
    /// The PurchLine RecId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <returns>
    /// The selected CustomsVendBOETrans_IN record.
    /// </returns>
    public static CustomsVendBOETrans_IN findPurchLineRecId(RecId   _recid)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        if (_recid)
        {
            select firstonly customsVendBOETrans
                where customsVendBOETrans.PurchLineRecId == _recid
                &&    customsVendBOETrans.Status != CustomsVendBOEStatus_IN::Canceled;
        }
        return customsVendBOETrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existNotCanceledPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>CustomsVendBOETrans_IN</c> record with specified PurchLine RecId and CustomsImportInvoiceNumberTable RecId.
    /// </summary>
    /// <param name="_purchLineRecId">
    /// Specified PurchLine RecId.
    /// </param>
    /// <param name="_customsImportInvoiceNumberTableRecId">
    /// Specified CustomsImportInvoiceNumberTable RecId.
    /// </param>
    /// <returns>
    /// True if the <c>CustomsVendBOETrans_IN</c> record exists; otherwise false.
    /// </returns>
    public static boolean existNotCanceledPurchLine(RefRecId _purchLineRecId, RefRecId _customsImportInvoiceNumberTableRecId)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        if (_purchLineRecId && _customsImportInvoiceNumberTableRecId)
        {
            select firstonly RecId from customsVendBOETrans
                where customsVendBOETrans.PurchLineRecId == _purchLineRecId
                &&    customsVendBOETrans.CustomsImportInvoiceNumberTable == _customsImportInvoiceNumberTableRecId
                &&    customsVendBOETrans.Status != CustomsVendBOEStatus_IN::Canceled;
        }
        return customsVendBOETrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the CustomsVendBOETrans_IN table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id to find.
    /// </param>
    /// <param name="_forUpdate">
    /// select record for update.
    /// </param>
    /// <returns>
    /// CustomsVendBOETrans_IN record.
    /// </returns>
    public static CustomsVendBOETrans_IN findRecId(
        recId     _recId,
        boolean   _forUpdate = false)
    {
        CustomsVendBOETrans_IN customsVendBOETrans;

        customsVendBOETrans.selectForUpdate(_forUpdate);
        select customsVendBOETrans
            where customsVendBOETrans.RecId  == _recId
            &&    customsVendBOETrans.Status != CustomsVendBOEStatus_IN::Canceled;
        return customsVendBOETrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOEQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets BillOFEntry quantity for specified PurchId, InventTransId and CustomsImportInvoiceNumberTable_IN recId.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <param name="_inventTransId">
    /// The InventTransId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <param name="_customsImporterInvoiceNumber">
    /// The CustomsImportInvoiceNumberTable_IN recId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <returns>
    /// The sum of BillOfEntry quantity for given CustomsVendBOETrans_IN.
    /// </returns>
    public static CustomsQty_IN getBOEQty(
        PurchIdBase   _purchId,
        InventTransId _inventTransId,
        RefRecId      _customsImporterInvoiceNumber)
    {
        CustomsVendBOETrans_IN      customsVendBOETrans;

        select sum(BillOfEntryQty) from customsVendBOETrans
            group by PurchId
                where   customsVendBOETrans.PurchId                         == _purchId
                    &&  customsVendBOETrans.InventTransId                   == _inventTransId
                    &&  customsVendBOETrans.CustomsImportInvoiceNumberTable == _customsImporterInvoiceNumber
                    &&  customsVendBOETrans.Status                          != CustomsVendBOEStatus_IN::Canceled;

        return customsVendBOETrans.BillOfEntryQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBOEQuantityUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets BillOfEntry quantity for specified PurchId and CustomsImportInvoiceNumberTable_IN recId.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <param name="_customsImporterInvoiceNumber">
    /// The CustomsImportInvoiceNumberTable_IN recId to find CustomsVendBOETrans_IN record.
    /// </param>
    /// <returns>
    /// The sum of BillOfEntry quantity for selected CustomsVendBOETrans_IN.
    /// </returns>
    public static CustomsQty_IN getBOEQuantityUpdated(
        PurchIdBase _purchId,
        RefRecId    _customsImporterInvoiceNumber)
    {
        CustomsVendBOETrans_IN      customsVendBOETrans;

        select sum(BillOfEntryQty) from customsVendBOETrans
            group by PurchId
                where   customsVendBOETrans.PurchId                         == _purchId
                    &&  customsVendBOETrans.CustomsImportInvoiceNumberTable == _customsImporterInvoiceNumber
                    &&  customsVendBOETrans.Status                          != CustomsVendBOEStatus_IN::Canceled;
        return customsVendBOETrans.BillOfEntryQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomsBillOfEntryDate_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Customs Bill of Entry date.
    /// </summary>
    /// <param name="_custVendInvoiceTransTableID">
    /// Invoice trans table ID
    /// </param>
    /// <param name="_custVendInvoiceTransRecId">
    /// Invoice trans Rec ID
    /// </param>
    /// <returns>
    /// Bill Of entry date
    /// </returns>
    /// <remarks>
    /// Gets the Customs Bill of Entry date
    /// </remarks>
    public static TransDate getCustomsBillOfEntryDate_IN(RefTableId _custVendInvoiceTransTableID,
        RefRecId _custVendInvoiceTransRecId)
    {
        CustomsVendBOETrans_IN  customsVendBOETrans;
        CustomsVendInvoiceBOETransLink_IN customsVendInvoiceBOETransLink;

        switch (_custVendInvoiceTransTableID)
        {
            case tableNum(VendInvoiceTrans):
                select BillOfEntryDate
                    from customsVendBOETrans
                    exists join customsVendInvoiceBOETransLink
                        where customsVendInvoiceBOETransLink.CustomsVendBOETrans_IN == customsVendBOETrans.RecId
                        && customsVendInvoiceBOETransLink.VendInvoiceTrans == VendInvoiceTrans::findRecId(_custVendInvoiceTransRecId).recid;
                break;

            case tableNum(VendInvoiceInfoLine):
                VendInvoiceInfoSubLine vendInvoiceInfoSubLine;

                select firstOnly JournalRefRecId, JournalRefTableId from vendInvoiceInfoSubLine
                    where vendInvoiceInfoSubLine.LineRefRecId == _custVendInvoiceTransRecId;
                if (vendInvoiceInfoSubLine)
                {
                    if (VendInvoiceMatchPRDeleteBOESubLine_INFlight::instance().isEnabled())
                    {
                        if (vendInvoiceInfoSubLine.JournalRefTableId == customsVendBOETrans.TableId)
                        {
                            customsVendBOETrans = CustomsVendBOETrans_IN::find(vendInvoiceInfoSubLine.JournalRefRecId);
                        }
                        else
                        {
                            customsVendBOETrans = CustomsVendBOETrans_IN::find(CustomsVendPackingSlipBOETransLink_IN::findByVendPackingSlipTrans(vendInvoiceInfoSubLine.JournalRefRecId).CustomsVendBOETrans_IN);
                        }
                    }
                    else
                    {
                        select BillOfEntryDate
                            from customsVendBOETrans
                            where customsVendBOETrans.RecId == vendInvoiceInfoSubLine.JournalRefRecId
                                && customsVendBOETrans.TableId == vendInvoiceInfoSubLine.JournalRefTableId;
                    }
                }
                break;
        }
        return customsVendBOETrans.BillOfEntryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingQuantityForBOEUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets remain quantity to be updated for BillOfEntry for specified PurchId and CustomsImportInvoiceNumberTable_IN recId.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find BillOfEntry quantity and InvoiceRegistration updated quantity.
    /// </param>
    /// <param name="_customsImporterInvoiceNumber">
    /// The CustomsImportInvoiceNumberTable_IN recId to find BillOfEntry quantity and InvoiceRegistration updated quantity.
    /// </param>
    /// <returns>
    /// The remain quantity for BOEUpdate from difference of receive quantity and purchase quantity.
    /// </returns>
    public static CustomsQty_IN getRemainingQuantityForBOEUpdate(
        PurchIdBase _purchId,
        RefRecId    _customsImporterInvoiceNumber)
    {
        CustomsInvoiceRegnTrans_IN          customsInvoiceRegnTrans;
        CustomsInvoiceRegnJournalLine_IN    customsInvoiceRegnJournalLine;
        CustomsInvoiceRegnJournalTable_IN   customsInvoiceRegnJournalTable;
        CustomsVendBOETrans_IN              customsVendBOETrans;

        select sum(Receive) from customsInvoiceRegnTrans
            group by CustomsInvoiceRegnJournalLineRecId
                join CustomsInvoiceRegnJournalTableRecId from customsInvoiceRegnJournalLine
                join RecId, CustomsImportInvoiceNumberTable from customsInvoiceRegnJournalTable
                    where  customsInvoiceRegnJournalLine.CustomsInvoiceRegnJournalTableRecId == customsInvoiceRegnJournalTable.RecId
                        && customsInvoiceRegnJournalTable.CustomsImportInvoiceNumberTable    == _customsImporterInvoiceNumber;

        select sum(BillOfEntryQty) from customsVendBOETrans
            group by PurchId
                where   customsVendBOETrans.PurchId                         == _purchId
                    &&  customsVendBOETrans.CustomsImportInvoiceNumberTable == _customsImporterInvoiceNumber
                    &&  customsVendBOETrans.Status                          != CustomsVendBOEStatus_IN::Canceled;

        return (customsInvoiceRegnTrans.Receive - customsVendBOETrans.BillOfEntryQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingQuantityForInvoiceUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets remain quantity for Invoice update for specified PurchId and InventTransId.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find BillOfEntry quantity and Invoice updated quantity.
    /// </param>
    /// <param name="_inventTransId">
    /// The InventTransId to find BillOfEntry quantity and Invoice updated quantity.
    /// </param>
    /// <param name="_customsVendBOETrans">
    /// The CustomsVendBOETrans to find BillOfEntry quantity and Invoice updated quantity.
    /// </param>
    /// <returns>
    /// The remain quantity for Invoice update.
    /// </returns>
    public static CustomsQty_IN getRemainingQuantityForInvoiceUpdate(
        PurchIdBase         _purchId,
        InventTransId       _inventTransId,
        RefRecId            _customsVendBOETrans = 0)
    {
        VendInvoiceTrans            vendInvoiceTrans;
        CustomsVendBOETrans_IN      customsVendBOETrans;
        CustomsVendInvoiceBOETransLink_IN customsVendInvoiceBOETransLink;

        if (_customsVendBOETrans)
        {
            select sum(Qty) from vendInvoiceTrans
                group by InventTransId, PurchID
                    where vendInvoiceTrans.PurchID          == _purchId
                       && vendInvoiceTrans.InventTransId    == _inventTransId
                    join CustomsVendBOETrans_IN, VendInvoiceTrans from customsVendInvoiceBOETransLink
                        where customsVendInvoiceBOETransLink.CustomsVendBOETrans_IN == _customsVendBOETrans
                           && vendInvoiceTrans.RecId                                == customsVendInvoiceBOETransLink.VendInvoiceTrans;

            select BillOfEntryQty from customsVendBOETrans
                   where   customsVendBOETrans.PurchId                 == _purchId         &&
                            customsVendBOETrans.InventTransId           == _inventTransId   &&
                            customsVendBOETrans.RecId                   == _customsVendBOETrans;
        }
        else
        {
            select sum(Qty) from vendInvoiceTrans
                group by InventTransId, PurchID
                    where   vendInvoiceTrans.PurchID                    == _purchId         &&
                            vendInvoiceTrans.InventTransId              == _inventTransId;

            select sum(BillOfEntryQty) from customsVendBOETrans
                group by PurchId
                   where   customsVendBOETrans.PurchId                 == _purchId
                    &&     customsVendBOETrans.InventTransId           == _inventTransId
                    &&     customsVendBOETrans.Status                  != CustomsVendBOEStatus_IN::Canceled;
        }
        return (customsVendBOETrans.BillOfEntryQty - vendInvoiceTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingQuantityForPackingSlipUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets remain quantity for packingSlip update for specified PurchId and InventTransId.
    /// </summary>
    /// <param name="_purchId">
    /// The PurchId to find BillOfEntry quantity and PackingSlip updated quantity.
    /// </param>
    /// <param name="_inventTransId">
    /// The InventTransiD to find BillOfEntry quantity and PackingSlip updated quantity.
    /// </param>
    /// <param name="_remainPurchPhysical">
    /// The packingSlip remainqty.
    /// </param>
    /// <param name="_customsVendBOETrans">
    /// The customsvendBOE recid for which the remainqty is arrived.
    /// </param>
    /// <returns>
    /// The remain quantity for packingSlip update.
    /// </returns>
    public static CustomsQty_IN getRemainingQuantityForPackingSlipUpdate(
        PurchIdBase    _purchId,
        InventTransId  _inventTransId,
        PurchQty       _remainPurchPhysical = 0,
        RefRecId       _customsVendBOETrans = 0)
    {
        VendPackingSlipTrans        vendPackingSlipTrans;
        CustomsVendBOETrans_IN      customsVendBOETrans;
        PurchLine                   purchLine;
        CustomsVendPackingSlipBOETransLink_IN customsVendPackingSlipBOETransLink;

        if (_customsVendBOETrans)
        {
            select sum(Qty) from vendPackingSlipTrans
                group by InventTransId, OrigPurchid
                    where   vendPackingSlipTrans.OrigPurchid    == _purchId
                       && vendPackingSlipTrans.InventTransId        == _inventTransId
                    join CustomsVendBOETrans_IN, VendPackingSlipTrans from customsVendPackingSlipBOETransLink
                        where customsVendPackingSlipBOETransLink.CustomsVendBOETrans_IN == _customsVendBOETrans
                           && vendPackingSlipTrans.RecId                                == customsVendPackingSlipBOETransLink.VendPackingSlipTrans;

            select BillOfEntryQty from customsVendBOETrans
                    where customsVendBOETrans.PurchId       == _purchId
                       && customsVendBOETrans.InventTransId == _inventTransId
                       && customsVendBOETrans.RecId         == _customsVendBOETrans;

            select RemainPurchPhysical from purchLine
                where purchLine.PurchId       == _purchId
                   && purchLine.InventTransId == _inventTransId;
        }
        else
        {
            select sum(Qty) from vendPackingSlipTrans
                 group by InventTransId
                     where   vendPackingSlipTrans.InventTransId           == _inventTransId
                join RecId from purchLine
                        where purchLine.InventTransId       == vendPackingSlipTrans.InventTransId
                           && PurchLine.PurchId             == _purchId;

            select sum(BillOfEntryQty) from customsVendBOETrans
                group by PurchId
                    where customsVendBOETrans.PurchId       == _purchId
                       && customsVendBOETrans.InventTransId == _inventTransId
                       && customsVendBOETrans.Status        != CustomsVendBOEStatus_IN::Canceled;

            select RemainPurchPhysical from purchLine
                where purchLine.PurchId       == _purchId
                   && purchLine.InventTransId == _inventTransId;
        }
        // Adding the remainPurchPhysical difference to cater to packingSlip correction scenario.
        return (customsVendBOETrans.BillOfEntryQty - vendPackingSlipTrans.Qty) + (_remainPurchPhysical ? (_remainPurchPhysical - purchLine.RemainPurchPhysical): 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64149</DeveloperDocumentation>
	<Label>@GLS5647</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>CustomsBillOfEntryNumberTable</TitleField1>
	<TitleField2>CustomsImportInvoiceNumberTable</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsBillOfEntryNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfEntryQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Customs</Name>
			<Label>@GLS5007</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>OrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsBillOfEntryNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfEntryQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Misc</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssessableValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AssessableValueAccountingCurrency</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BillOfEntryDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchInternalBOEId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PurchLineRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustomsImportInvoiceNumberTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RemainingQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>BillOfEntryDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsDate_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>BillOfEntryQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsQty_IN</ExtendedDataType>
			<Label>@GLS5652</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsBillOfEntryJournal_IN</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsBillOfEntryNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS5648</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CustomsImportInvoiceNumberTable</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@GLS60990</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventTransId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<Label>@SYS14428</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigPurchId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchIdOrig</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PurchId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PurchInternalBOEId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsPurchInternalBOEId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PurchLineRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReasonTableRef</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ReasonRefRecID</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ReceiveQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsQty_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>RemainingQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsQty_IN</ExtendedDataType>
			<Label>@SYS10197</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustomsVendBOETransStatus_IN</ExtendedDataType>
			<EnumType>CustomsVendBOEStatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchLineAmount</ExtendedDataType>
			<Label>@GLS5298</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>AssessableValueAccountingCurrency</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountMST</ExtendedDataType>
			<Label>@SYP4860372</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ProcurementCategory</Name>
			<ExtendedDataType>PurchCategory</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CustomsImportInvoiceNumberTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsImportInvoiceNumberTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsBillOfEntryNumberTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsBillOfEntryNumberTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PurchIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>PurchId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Status</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustomsBillOfEntryJournal_INIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustomsBillOfEntryJournal_IN</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>FormletterJournalTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>OrderId</MapField>
					<MapFieldTo>PurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JournalId</MapField>
					<MapFieldTo>PurchInternalBOEId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>BillOfEntryDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>NumberSequenceGroup</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InternalJournalId</MapField>
					<MapFieldTo>PurchInternalBOEId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OrigOrderId</MapField>
					<MapFieldTo>OrigPurchId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Category</MapField>
					<MapFieldTo>ProcurementCategory</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>ReasonCodeMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ReasonTableRef</MapField>
					<MapFieldTo>ReasonTableRef</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyCode</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
					<MapFieldTo>InventTransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroup</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>BillOfEntryDate</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsBillOfEntryNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsBillOfEntryNumberTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsBillOfEntryNumberTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsBillOfEntryNumberTable_IN_CustomsVendBOETrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsBillOfEntryNumberTable</Name>
					<Field>CustomsBillOfEntryNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsImportInvoiceNumberTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsImportInvoiceNumberTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustomsImportInvoiceNumberTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsImportInvoiceNumberTable_IN_CustomsVendBOETrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsImportInvoiceNumberTable</Name>
					<Field>CustomsImportInvoiceNumberTable</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustomsVendBOEJour_IN</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustomsVendBOEJour_IN</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustomsBillOfEntryJournal_IN</Name>
					<Field>CustomsBillOfEntryJournal_IN</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<SourceEDT>ItemId</SourceEDT>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransId</Name>
					<SourceEDT>InventTransId</SourceEDT>
					<Field>InventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventTransIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchLineRecId</Name>
					<Field>PurchLineRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable_OrigPurchId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>PurchTable_OrigPurchId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustomsVendBOETrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigPurchId</Name>
					<SourceEDT>PurchIdOrig</SourceEDT>
					<Field>OrigPurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable_PurchID</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PurchId</Name>
					<SourceEDT>PurchId</SourceEDT>
					<Field>PurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ReasonTableRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ReasonTableRef</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReasonTableRef</Name>
					<SourceEDT>ReasonRefRecID</SourceEDT>
					<Field>ReasonTableRef</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroup</Name>
					<SourceEDT>TaxGroup</SourceEDT>
					<Field>TaxGroup</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroup</Name>
					<SourceEDT>TaxItemGroup</SourceEDT>
					<Field>TaxItemGroup</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>