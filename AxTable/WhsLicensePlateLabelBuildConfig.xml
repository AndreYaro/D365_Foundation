<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLicensePlateLabelBuildConfig</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WhsLicensePlateLabelBuildConfig extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>WhsLicensePlateLabelBuildConfig</c> table.
    /// </summary>
    /// <param name="_configId">
    /// The ID of configuration to lookup.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// An <c>WhsLicensePlateLabelBuildConfig</c> record.
    /// </returns>
    public static WhsLicensePlateLabelBuildConfig find(WHSLicensePlateLabelBuildConfigId _configId, boolean _forUpdate = false)
    {
        WhsLicensePlateLabelBuildConfig licensePlateLabelBuildConfiguration;

        if (_forUpdate)
        {
            licensePlateLabelBuildConfiguration.selectForUpdate(_forUpdate);
        }

        select firstonly licensePlateLabelBuildConfiguration
            index LicensePlateLabelBuildConfigIdIdx
            where licensePlateLabelBuildConfiguration.LicensePlateLabelBuildConfigId == _configId;

        return licensePlateLabelBuildConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>WhsLicensePlateLabelBuildConfig</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The Record ID of configuration to lookup.
    /// </param>
    /// <param name="_forUpdate">
    /// true if the record must be selected for update; otherwise, false.
    /// </param>
    /// <returns>
    /// An <c>WhsLicensePlateLabelBuildConfig</c> record.
    /// </returns>
    private static WhsLicensePlateLabelBuildConfig findRecId(WHSLicensePlateLabelBuildConfigRecId _recId, boolean _forUpdate = false)
    {
        WhsLicensePlateLabelBuildConfig licensePlateLabelBuildConfiguration;

        if (_forUpdate)
        {
            licensePlateLabelBuildConfiguration.selectForUpdate(_forUpdate);
        }

        select firstonly licensePlateLabelBuildConfiguration
            where licensePlateLabelBuildConfiguration.RecId == _recId;

        return licensePlateLabelBuildConfiguration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLicensePlateLabelBuildConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>WhsLicensePlateLabelBuildConfig</c> record with given parameters.
    /// </summary>
    /// <param name="_workTemplateCode">
    /// Work template code.
    /// </param>
    /// <param name="_workTransType">
    /// Transaction type.
    /// </param>
    /// <param name="_forUpdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    [Hookable(false)]
    internal static WhsLicensePlateLabelBuildConfig findLicensePlateLabelBuildConfig(
        WHSWorkTemplateCode	_workTemplateCode,
        WHSWorkTransType	_workTransType,
        boolean             _forUpdate			= false)
    {
        WhsLicensePlateLabelBuildConfig licensePlateLabelBuildConfig;
        WHSWorkTemplateTable workTemplateTable = WHSWorkTemplateTable::find(_workTemplateCode, _workTransType);

        if (workTemplateTable && workTemplateTable.LicensePlateLabelBuildConfig)
        {
            licensePlateLabelBuildConfig = WhsLicensePlateLabelBuildConfig::findRecId(workTemplateTable.LicensePlateLabelBuildConfig, _forUpdate);
        }

        return licensePlateLabelBuildConfig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX:LicensePlateLabelBuildConfigDeveloper</DeveloperDocumentation>
	<FormRef>WHSLicensePlateLabelBuildConfig</FormRef>
	<Label>@WAX:LicensePlateLabelBuildConfig</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Group</TableGroup>
	<TitleField1>LicensePlateLabelBuildConfigId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex></ClusteredIndex>
	<ReplacementKey>LicensePlateLabelBuildConfigIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfigId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfigId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfigId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LicensePlateLabelBuildConfigId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LicensePlateLabelBuildConfigId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSLicensePlateLabelBuildConfigId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>LicensePlateLabelBuildConfigIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>LicensePlateLabelBuildConfigId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>