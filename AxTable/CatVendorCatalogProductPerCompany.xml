<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogProductPerCompany</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CatVendorCatalogProductPerCompany extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the release status of the product that is released for a legal entity.
    /// </summary>
    /// <returns>
    /// <c>NoYes::Yes</c> if the product is released; otherwise, <c>NoYes::No</c>.
    /// </returns>
    display NoYes releaseStatus()
    {
        CatVendorCatalogMaintenanceRequest      catVendorCatalogMaintenanceRequest;
        CatVendorProductCandidate               catVendorProductCandidate;
        CatVendorCatalog                        catVendorCatalog;
        CatVendorApprovedProduct                catVendorApprovedProduct;
        InventTable                             inventTable;

        select crossCompany VendorProductCode, recId from catVendorProductCandidate
            where CatVendorProductCandidate.RecId == this.CatVendorProductCandidate

        join VendorCatalog from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.RecId == catVendorProductCandidate.CatalogMaintenanceRequest

        join VendorParty from catVendorCatalog
            where catVendorCatalog.RecId == catVendorCatalogMaintenanceRequest.VendorCatalog

        join EcoResProduct from catVendorApprovedProduct
            where catVendorApprovedProduct.VendorProductCode == CatVendorProductCandidate.VendorProductCode
               && catVendorApprovedProduct.DirPartyTable == CatVendorCatalog.VendorParty

        join firstOnly recId from inventTable
            where inventTable.Product == catVendorApprovedProduct.EcoResProduct
               && inventTable.dataAreaId == getCompany(tableNum(inventTable), this.Company);

        return inventTable.RecId ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates a record in the <c>CatVendorCatalogProductPerCompany</c> table.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    /// The <c>RecId</c> value of the <c>CatVendorProductCandidate</c> record to find.
    /// </param>
    /// <param name="_company">
    /// The <c>DataArea</c> of the <c>CompanyInfo</c> record to find.
    /// </param>
    /// <param name="_isReleased">
    /// A Boolean value that specifies whether it is released.
    /// </param>
    public static void createOrUpdate(
        RecId _catVendorProductCandidateRecId,
        CompanyId
        _company,
        NoYes _isReleased)
    {
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;

        select forupdate catVendorCatalogProductPerCompany
                where catVendorCatalogProductPerCompany.CatVendorProductCandidate == _catVendorProductCandidateRecId &&
                      catVendorCatalogProductPerCompany.Company == _company;

        if (catVendorCatalogProductPerCompany)
        {
            ttsbegin;
            catVendorCatalogProductPerCompany.IsReleased = _isReleased;
            catVendorCatalogProductPerCompany.update();
            ttscommit;
        }
        else
        {
            catVendorCatalogProductPerCompany.CatVendorProductCandidate =   _catVendorProductCandidateRecId;
            catVendorCatalogProductPerCompany.Company                   =   _company;
            catVendorCatalogProductPerCompany.IsReleased                =   _isReleased;

            catVendorCatalogProductPerCompany.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>_catVendorProductCandidateRecId</c> table exists.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    /// The <c>RecId</c> value of the <c>CatVendorProductCandidate</c> record to find.
    /// </param>
    /// <param name="_company">
    /// The <c>DataArea</c> of the <c>CompanyInfo</c> record to find.
    /// </param>
    /// <returns>
    /// true if a record with the provided values exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _catVendorProductCandidateRecId,dataAreaId _company)
    {
        return (CatVendorCatalogProductPerCompany::find(_catVendorProductCandidateRecId,_company).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>CatVendorCatalogProductPerCompany</c> record by using the specified
    /// <c>CatVendorProductCandidate</c> record and <c>DataAreaId</c> value.
    /// </summary>
    /// <param name="_catVendorProductCandidateRecId">
    /// The <c>RecId</c> value of the <c>CatVendorProductCandidate</c> record to find.
    /// </param>
    /// <param name="_company">
    /// The <c>DataArea</c> of the <c>CompanyInfo</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record of the <c>CatVendorCatalogProductPerCompany</c> table if found; otherwise, an empty buffer.
    /// </returns>
    public static CatVendorCatalogProductPerCompany find(
        RecId _catVendorProductCandidateRecId,
        CompanyId
        _company,
        boolean _forUpdate = false
        )
    {
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany = null;

        if (_catVendorProductCandidateRecId && _company)
        {
            catVendorCatalogProductPerCompany.selectForUpdate(_forUpdate);
            select catVendorCatalogProductPerCompany
                where catVendorCatalogProductPerCompany.CatVendorProductCandidate == _catVendorProductCandidateRecId &&
                      catVendorCatalogProductPerCompany.Company == _company;
        }

        return catVendorCatalogProductPerCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountProductsReleasedInLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of products released for a given catalog in a given legal entity.
    /// </summary>
    /// <param name="_candidateRecId">
    /// The <c>RecId</c> value of the <c>CatVendorProductCandidate</c> record.
    /// </param>
    /// <param name="_dataAreaId">
    /// The <c>DataAreaId</c> value of the company to find count for.
    /// </param>
    /// <returns>
    /// Count of the products released in the legal entity for the given catalog.
    /// </returns>
    static int getCountProductsReleasedInLegalEntity(recId _candidateRecId, DataAreaId _dataAreaId)
    {
        CatVendorProductCandidate           catVendorProductCandidateReleased;
        CatVendorCatalogProductPerCompany   catVendorCatalogProductPerCompany;

        if (_candidateRecId)
        {
            select count(RecId) from catVendorCatalogProductPerCompany
            join RecId from catVendorProductCandidateReleased
                where catVendorCatalogProductPerCompany.CatVendorProductCandidate   == catVendorProductCandidateReleased.RecId
                    && catVendorCatalogProductPerCompany.Company                    == _dataAreaId
                    && catVendorProductCandidateReleased.CatalogMaintenanceRequest  == _candidateRecId;
        }

        return int642int(catVendorCatalogProductPerCompany.recId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>VendCatalogImport</ConfigurationKey>
	<DeveloperDocumentation>@SYS320623</DeveloperDocumentation>
	<Label>@SYS320622</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Company</TitleField1>
	<TitleField2>IsReleased</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ProductCompanyIdx</ClusteredIndex>
	<Modules>ProcurementAndSourcing</Modules>
	<ReplacementKey>ProductCompanyIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatVendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReleased</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatVendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@SYS80069</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CatVendorProductCandidate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Company</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsReleased</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsMarkedForRelease</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RetailPurchTableRefRecId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>CatVendorProductCandidate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Company</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsMarkedForRelease</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS343319</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsReleased</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RetailPurchTableRefRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>Retail</ConfigurationKey>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@RET260129</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ProductCompanyIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CatVendorProductCandidate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Company</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CatVendorProductCandidate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CatVendorProductCandidate</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CatVendorProductCandidate</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatVendorProductCandidate_CatVendorProductPerCompany</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CatVendorProductCandidate</Name>
					<Field>CatVendorProductCandidate</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DataArea</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>DataArea</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CatVendorCatalogProductPerCompany</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Company</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>Company</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RetailPurchTableRefRecId</Name>
					<Field>RetailPurchTableRefRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>