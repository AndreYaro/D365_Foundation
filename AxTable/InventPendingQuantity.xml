<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPendingQuantity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventPendingQuantity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventPendingRegistrationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>InventPendingRegistrationDetail</c> record related to this record.
    /// </summary>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>inventPendingRegistrationDetail</c> table; otherwise, an empty record.
    /// </returns>
    public InventPendingRegistrationDetail inventPendingRegistrationDetail(boolean _forUpdate = false)
    {
        return InventPendingRegistrationDetail::findByPendingQuantityRecId(this.RecId,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the existing quantity with the <c>_adjustedQuantity</c> value.
    /// </summary>
    /// <param name="_adjustedQuantity">
    /// The quantity that the existing quantity should be adjusted with.
    /// </param>
    /// <remarks>
    /// If the adjustment results in a quantity that is <c>0</c> or less the record is deleted.
    /// </remarks>
    public void updateQuantity(InventQty _adjustedQuantity)
    {
        InventQty newQuantity;

        if (_adjustedQuantity)
        {
            newQuantity = this.Quantity + _adjustedQuantity;

            this.Quantity = max(0,newQuantity);

            //delete the record if there is no quantity left
            if (!this.Quantity)
            {
                this.delete();
            }
            else
            {
                this.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPendingReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>InventPendingQuantity</c> table for a pending receipt.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// A record ID of the related record in the <c>SourceDocumentLine</c> table.
    /// </param>
    /// <param name="_quantity">
    /// A quantity that should be assigned to the record.
    /// </param>
    /// <returns>
    /// An <c>InventPendingQuantity</c> record.
    /// </returns>
    public static InventPendingQuantity createPendingReceipt(
        SourceDocumentLineRecId _sourceDocumentLineRecId,
        InventQty               _quantity)
    {
        InventPendingQuantity inventPendingQuantity;

        if (_sourceDocumentLineRecId == 0
        ||  _quantity                == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        inventPendingQuantity.SourceDocumentLine    = _sourceDocumentLineRecId;
        inventPendingQuantity.ProcessRole           = InventProcessRole::PendingReceipt;
        inventPendingQuantity.updateQuantity(_quantity);

        ttscommit;

        return inventPendingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>InventPendingQuantity</c> table and in the <c>InventPendingRegistrationDetail</c> table for a pending registration.
    /// </summary>
    /// <param name="_inventPendingRegistrationProvider">
    /// An instance of the <c>InventPendingRegistrationProvider</c> interface.
    /// </param>
    /// <param name="_quantity">
    /// A quantity that should be assigned to the record.
    /// </param>
    /// <returns>
    /// An <c>InventPendingQuantity</c> record.
    /// </returns>
    public static InventPendingQuantity createPendingRegistration(
        InventPendingRegistrationProvider _inventPendingRegistrationProvider,
        InventQty                         _quantity)
    {
        InventPendingQuantity inventPendingQuantity;

        if (_inventPendingRegistrationProvider == null
        ||  _quantity                          == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        inventPendingQuantity.SourceDocumentLine    = _inventPendingRegistrationProvider.getSourceDocumentLineRecId();
        inventPendingQuantity.ProcessRole           = InventProcessRole::PendingRegistration;
        inventPendingQuantity.updateQuantity(_quantity);

        InventPendingRegistrationDetail::createPendingRegistrationDetail(inventPendingQuantity.RecId,_inventPendingRegistrationProvider);

        ttscommit;

        return inventPendingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductOrDeletePendingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the quantity that is being posted from the <c>InventPendingQuantity</c> table for the
    /// specified invent process role.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The <c>SourceDocumentLineRecId</c> record ID of the order line.
    /// </param>
    /// <param name="_quantityBeingPosted">
    /// The <c>InventQty</c> table that is being posted.
    /// </param>
    /// <param name="_inventProcessRole">
    /// The invent process role from which the quantity is to be deducted.
    /// </param>
    /// <returns>
    /// The remaining <c>InventQty</c> table after the deduction from the corresponding pending quantity
    /// records.
    /// </returns>
    public static InventQty deductOrDeletePendingQuantity(SourceDocumentLineRecId _sourceDocumentLineRecId, InventQty _quantityBeingPosted, InventProcessRole _inventProcessRole)
    {
        InventPendingQuantity inventPendingQuantity;
        InventQty             remainingQuantity = _quantityBeingPosted;

        inventPendingQuantity = InventPendingQuantity::findBySourceDocumentLine(_sourceDocumentLineRecId, _inventProcessRole, true);

        ttsbegin;

        //If a record exists, then deduct the quantity and delete the record if quantity becomes 0.
        if (inventPendingQuantity.RecId)
        {
            if (inventPendingQuantity.Quantity <= _quantityBeingPosted)
            {
                remainingQuantity = _quantityBeingPosted - inventPendingQuantity.Quantity;
                inventPendingQuantity.delete();
            }
            else
            {
                remainingQuantity = 0;
                inventPendingQuantity.Quantity = inventPendingQuantity.Quantity - _quantityBeingPosted;
                inventPendingQuantity.update();
            }
        }
        ttscommit;

        return remainingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes records in the <c>InventPendingQuantity</c> table and in the
    /// <c>InventPendingRegistrationDetail</c> table for a pending registration.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of a <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_forceDelete">
    /// A Boolean value that specifies whether the deletion is to be forced.
    /// </param>
    public static void deletePendingRegistration(SourceDocumentLineRecId _sourceDocumentLineRecId, boolean _forceDelete = false)
    {
        InventPendingQuantity           inventPendingQuantity;

        if (!_sourceDocumentLineRecId)
        {
            error ("@SCM:MissingSourceDocumentLineFieldValue");
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!_forceDelete && InventPendingQuantity::findBySourceDocumentLine(_sourceDocumentLineRecId, InventProcessRole::PendingReceipt))
        {
            throw error("@SYS315652");
        }
        else
        {
            ttsbegin;

            //InventPendingRegistrationDetails record is to be deleted through the delete action.
            delete_from inventPendingQuantity where inventPendingQuantity.SourceDocumentLine == _sourceDocumentLineRecId;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>InventPendingQuantity</c> records exist for the given
    /// <c>SourceDocumentLine</c> record.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of a <c>SourceDocumentLine</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>InventPendingQuantity</c> records exist for the given line; otherwise, false.
    /// </returns>
    public static boolean existsSourceDocumentLine(SourceDocumentLineRecId _sourceDocumentLineRecId)
    {
        InventPendingQuantity inventPendingQuantity;

        if (_sourceDocumentLineRecId)
        {
            select firstonly RecId from inventPendingQuantity
                where inventPendingQuantity.SourceDocumentLine  == _sourceDocumentLineRecId;
        }

        return inventPendingQuantity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>InventPendingQuantity</c> table.
    /// </summary>
    /// <param name="_inventPendingQuantityRecId">
    /// The <c>recId</c> field of the <c>InventPendingQuantity</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventPendingQuantity</c> table; otherwise, an empty record.
    /// </returns>
    public static InventPendingQuantity find(
        InventPendingQuantityRecId  _inventPendingQuantityRecId,
        boolean                     _forUpdate = false)
    {
        InventPendingQuantity inventPendingQuantity;

        inventPendingQuantity.selectForUpdate(_forUpdate);

        if (_inventPendingQuantityRecId)
        {
            select firstonly inventPendingQuantity
                where inventPendingQuantity.RecId  == _inventPendingQuantityRecId;
        }

        return inventPendingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record in the <c>InventPendingQuantity</c> table.
    /// </summary>
    /// <param name="_sourceDocumentLineRecId">
    /// The record ID of a <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_inventProcessRole">
    /// An process role.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>InventPendingQuantity</c> table; otherwise, an empty record.
    /// </returns>
    public static InventPendingQuantity findBySourceDocumentLine(
        SourceDocumentLineRecId _sourceDocumentLineRecId,
        InventProcessRole       _inventProcessRole,
        boolean                 _forUpdate = false)
    {
        InventPendingQuantity inventPendingQuantity;

        inventPendingQuantity.selectForUpdate(_forUpdate);

        if (_sourceDocumentLineRecId && _inventProcessRole)
        {
            select firstonly inventPendingQuantity
                where inventPendingQuantity.SourceDocumentLine  == _sourceDocumentLineRecId
                &&    inventPendingQuantity.ProcessRole         == _inventProcessRole;
        }

        return inventPendingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates records in the <c>InventPendingQuantity</c> table and in the
    /// <c>InventPendingRegistrationDetail</c> table for a pending registration.
    /// </summary>
    /// <param name="_inventPendingRegistrationProvider">
    /// An instance of the <c>InventPendingRegistrationProvider</c> interface.
    /// </param>
    /// <param name="_adjustedQuantity">
    /// A quantity that the pending quantity record should be adjusted with. If no record exist it will be
    /// created with this quantity.
    /// </param>
    /// <param name="_checkIfPendingRegistrationExist">
    /// A boolean flag to determine if the method should look for existing records. If the value is false a
    /// new record will be created.
    /// </param>
    /// <returns>
    /// An <c>InventPendingQuantity</c> record.
    /// </returns>
    public static InventPendingQuantity synchronizePendingRegistration(
        InventPendingRegistrationProvider   _inventPendingRegistrationProvider,
        InventQty                           _adjustedQuantity,
        boolean                             _checkIfPendingRegistrationExist = true)
    {
        InventPendingQuantity               inventPendingQuantity;
        InventPendingRegistrationDetail     inventPendingRegistrationDetail;

        if (_inventPendingRegistrationProvider == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        //this is for optimizations in case callers know that they are inserting for the first time
        if (_checkIfPendingRegistrationExist)
        {
            inventPendingQuantity = InventPendingQuantity::findBySourceDocumentLine(_inventPendingRegistrationProvider.getSourceDocumentLineRecId(),InventProcessRole::PendingRegistration,true);
        }

        if (!inventPendingQuantity.RecId)
        {
            if (_adjustedQuantity != 0)
            {
                inventPendingQuantity = InventPendingQuantity::createPendingRegistration(_inventPendingRegistrationProvider,_adjustedQuantity);
            }
        }
        else
        {
            inventPendingQuantity.updateQuantity(_adjustedQuantity);

            inventPendingRegistrationDetail = inventPendingQuantity.inventPendingRegistrationDetail(true);

            if (inventPendingRegistrationDetail.RecId)
            {
                inventPendingRegistrationDetail.syncFromRegistrationProvider(_inventPendingRegistrationProvider);
                inventPendingRegistrationDetail.update();
            }
        }

        ttscommit;

        return inventPendingQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePendingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantity for a record in the <c>InventPendingQuantity</c> table.
    /// If a record does not exist new records in the <c>InventPendingQuantity</c> table and in the <c>InventPendingRegistrationDetail</c> table will be created.
    /// </summary>
    /// <param name="_inventPendingRegistrationProvider">
    /// An instance of the <c>InventPendingRegistrationProvider</c> interface.
    /// </param>
    /// <param name="_adjustedQuantity">
    /// A quantity that the pending quantity record should be adjusted with. If no record exist it will be created with this quantity.
    /// </param>
    /// <param name="_inventProcessRole">
    /// A process role.
    /// </param>
    public static void writePendingQuantity(
        InventPendingRegistrationProvider   _inventPendingRegistrationProvider,
        InventQty                           _adjustedQuantity,
        InventProcessRole                   _inventProcessRole)
    {
        InventPendingQuantity inventPendingQuantity;

        if (_inventPendingRegistrationProvider == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ttsbegin;

        inventPendingQuantity = InventPendingQuantity::findBySourceDocumentLine(_inventPendingRegistrationProvider.getSourceDocumentLineRecId(),_inventProcessRole,true);

        if (inventPendingQuantity.RecId)
        {
            inventPendingQuantity.updateQuantity(_adjustedQuantity);
        }
        else
        {
            switch (_inventProcessRole)
            {
                case InventProcessRole::PendingRegistration :
                    InventPendingQuantity::createPendingRegistration(_inventPendingRegistrationProvider,_adjustedQuantity);
                    break;

                case InventProcessRole::PendingReceipt      :
                    InventPendingQuantity::createPendingReceipt(_inventPendingRegistrationProvider.getSourceDocumentLineRecId(),_adjustedQuantity);
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS312880</DeveloperDocumentation>
	<Label>@SYS312892</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>SourceDocumentLine</TitleField1>
	<TitleField2>ProcessRole</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Inventory</Modules>
	<ReplacementKey>SourceDocumentLineIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventPendingRegistrationDetail</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventPendingRegistrationDetail</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessRole</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProcessRole</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Quantity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ProcessRole</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>InventProcessRole</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Quantity</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>SourceDocumentLine</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SourceDocumentLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SourceDocumentLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SourceDocumentLine</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ProcessRole</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SourceDocumentLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>SourceDocumentLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SourceDocumentLine</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>SourceDocumentLine_InventPendingQuantity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SourceDocumentLine</Name>
					<Field>SourceDocumentLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>