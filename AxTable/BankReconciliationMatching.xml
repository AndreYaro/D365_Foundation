<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconciliationMatching</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankReconciliationMatching extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a bank document reconcilation.
    /// </summary>
    private void cancelDocument()
    {
        BankReconciliationMatchingItemView  matchingItemView;
        BankDocumentTable                   documentTable;

        while select forUpdate documentTable
            exists join matchingItemView
                where matchingItemView.BankDocumentTable == documentTable.RecId
                    && matchingItemView.BankReconciliationMatching == this.RecId
        {
            BankDocumentProcessor::submitBankDocument(documentTable, BankDocumentStatusChangeType::ReverseReconcile);

            if (documentTable.CorrectionBankCurrencyAmount != 0)
            {
                documentTable.CorrectionBankCurrencyAmount = 0.0;
                documentTable.update();
            }

            this.createCanceledDocumentItemInHistoryDetails(documentTable.RecId);
        }

        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()) && this.BankReconciliationMatchingType == BankReconciliationMatchingType::SingleStatement)
        {
            // Delete history details for generate voucher bank document as bank document is deleted.
            BankReconciliationMatchingItem matchingItem;
            select firstonly RecId, BankDocumentTable from matchingItem
                where matchingItem.BankReconciliationMatching == this.RecId
                    && matchingItem.BankDocumentTable != 0;
            if (matchingItem.RecId)
            {
                BankReconciliationHistoryDetails historyDetails;
                delete_from historyDetails
                    where historyDetails.BankDocumentTable == matchingItem.BankDocumentTable;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCanceledDocumentItemInHistoryDetails</Name>
				<Source><![CDATA[
    private void createCanceledDocumentItemInHistoryDetails(RecId _documentTableRecId)
    {
        BankReconciliationHistoryDetails historyDetails;
        BankReconciliationHeader headers;
        BankReconciliationHeader headerCanceled = BankReconciliationHeader::find(this.BankReconciliationHeader);

        insert_recordset historyDetails (BankDocumentTable, BankReconciliationHeader)
            select _documentTableRecId, RecId from headers
                where headers.CutOffDate >= headerCanceled.CutOffDate
                    && headers.CreatedDateTime >= headerCanceled.CreatedDateTime
                    && headers.IsReconciled == NoYes::Yes
                    && headers.RecId != headerCanceled.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a statement reconciliation.
    /// </summary>
    private void cancelStatement()
    {
        BankReconciliationMatchingItemView  matchingItemView;
        BankStmtISOReportEntry              reportEntry;

        while select forUpdate reportEntry
            exists join matchingItemView
                where matchingItemView.BankStmtISOReportEntry == reportEntry.RecId
                    && matchingItemView.BankReconciliationMatching == this.RecId
        {
            reportEntry.updateReconciledStatus(NoYes::No);
            this.createCanceledStatementItemInHistoryDetails(reportEntry.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCancelStatementValid</Name>
				<Source><![CDATA[
    private boolean checkCancelStatementValid()
    {
        BankReconciliationMatchingItemView matchingItemView;
        BankStmtISOReportEntry reportEntry;

        while select reportEntry
            join matchingItemView
                where matchingItemView.BankStmtISOReportEntry == reportEntry.RecId
                    && matchingItemView.BankReconciliationMatching == this.RecId
        {
            if (reportEntry.isMarkNewAndPostedHeaderOrLine())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCanceledStatementItemInHistoryDetails</Name>
				<Source><![CDATA[
    private void createCanceledStatementItemInHistoryDetails(RecId _reportEntryRecId)
    {
        BankReconciliationHistoryDetails historyDetails;
        BankReconciliationHeader headers;
        BankReconciliationHeader headerCanceled = BankReconciliationHeader::find(this.BankReconciliationHeader);

        insert_recordset historyDetails (BankStmtISOReportEntry, BankReconciliationHeader)
            select _reportEntryRecId, RecId from headers
                where headers.CutOffDate >= headerCanceled.CutOffDate
                    && headers.CreatedDateTime >= headerCanceled.CreatedDateTime
                    && headers.IsReconciled == NoYes::Yes
                    && headers.RecId != headerCanceled.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispReconciliationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a bank reconciliation ID.
    /// </summary>
    /// <returns>
    /// The bank reconciliation ID to display.
    /// </returns>
    public display BankReconciliationId dispReconciliationId()
    {
        return BankReconciliationHeader::find(this.BankReconciliationHeader).ReconciliationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAsCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets matching canceled.
    /// </summary>
    private void updateAsCancelled()
    {
        this.Cancelled = NoYes::Yes;
        this.CancelledBy = curUserId();
        this.CancelledDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelReconcile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the cancelation of the reconciliation.
    /// </summary>
    /// <param name="_matchingRecId">
    /// The matching ID.
    /// </param>
    public static void cancelReconcile(RecId _matchingRecId)
    {
        BankReconciliationMatching matching = BankReconciliationMatching::find(_matchingRecId, true);

        if (matching.RecId)
        {
            if (!matching.checkCancelStatementValid())
            {
                throw error("@Bank:BankCancelReconciliationFailError");
            }
            ttsBegin;

            matching.updateAsCancelled();

            matching.cancelDocument();
            matching.cancelStatement();

            if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
            {
                matching.resetClearedDateOnCancelReconcile();
            }

            BankReconciliationMatchingItem bankReconciliationMatchingItem;

            delete_from bankReconciliationMatchingItem
                where bankReconciliationMatchingItem.BankReconciliationMatching == matching.RecId;

            matching.delete();

            ttsCommit;

            info("@GLS221699");
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetClearedDateOnCancelReconcile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the cleared date to null for the bank document transaction when the reconciliation is cancelled.
    /// </summary>
    private void resetClearedDateOnCancelReconcile()
    {
        BankReconciliationMatchingItemView matchingItemView;
        BankDocumentTable documentTable;
        BankAccountTrans bankAccountTrans;
        bankAccountTrans.skipDatabaseLog(true);
        bankAccountTrans.skipDataMethods(true);
        bankAccountTrans.skipEvents(true);

        update_recordset bankAccountTrans
            setting ClearedDate = dateNull()
            exists join documentTable
                where documentTable.SourceRelationType == bankAccountTrans.SourceTableId
                    && documentTable.SourceRecId == bankAccountTrans.SourceRecId
            exists join matchingItemView
                where matchingItemView.BankDocumentTable == documentTable.RecId
                    && matchingItemView.BankReconciliationMatching == this.RecId;

        if (FeatureStateProvider::isFeatureEnabled(BankTransClearedDateAdvancedBankReconciliationFeature::instance()))
        {
            update_recordset bankAccountTrans
                setting ClearedDate = dateNull()
                exists join documentTable
                    where documentTable.SourceRelationType == bankAccountTrans.TableId
                        && documentTable.SourceRecId == bankAccountTrans.RecId
                exists join matchingItemView
                    where matchingItemView.BankDocumentTable == documentTable.RecId
                        && matchingItemView.BankReconciliationMatching == this.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>BankReconciliationMatching</c> record that has a specified <c>RecId</c> value.
    /// </summary>
    /// <param name="_recId">
    /// A <c>RecId</c> value.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether the selected record can be updated.
    /// </param>
    /// <param name="_concurrencyModel">
    /// A currency model.
    /// </param>
    /// <returns>
    /// A <c>BankReconciliationMatching</c> record .
    /// </returns>
    public static BankReconciliationMatching find(
        RecId               _recId,
        boolean             _forUpdate = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        BankReconciliationMatching matching;

        matching.selectForUpdate(_forUpdate);

        if (_forUpdate
            && _concurrencyModel != ConcurrencyModel::Auto)
        {
            matching.concurrencyModel(_concurrencyModel);
        }

        select firstonly matching
            where matching.RecId == _recId;

        return matching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllMatchingItemsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of containers that contain all the matching items in the matching.
    /// </summary>
    /// <param name="_matchingRecId">
    /// The matching record ID.
    /// </param>
    /// <returns>
    /// A list of containers that contain all the matching items.
    /// </returns>
    public static List getAllMatchingItemsList(RecId _matchingRecId)
    {
        BankReconciliationMatchingItem  matchingItem;
        List                            list = new List(Types::Container);

        while select BankStmtISOReportEntry, BankDocumentTable from matchingItem
            where matchingItem.BankReconciliationMatching == _matchingRecId
        {
            if (matchingItem.BankStmtISOReportEntry)
            {
                list.addEnd([BankReconciliationMatchingEntryType::BankStatement, matchingItem.BankStmtISOReportEntry]);
            }
            else if (matchingItem.BankDocumentTable)
            {
                list.addEnd([BankReconciliationMatchingEntryType::BankDocument, matchingItem.BankDocumentTable]);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            this.MatchingId = BankReconciliationMatching::getNextMatchingId(this.BankReconciliationHeader);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMatchingId</Name>
				<Source><![CDATA[
    internal static int64 getNextMatchingId(RecId _bankReconciliationHeader)
    {
        BankReconciliationMatching matching;
        int64 matchingId;

        select maxof(MatchingId) from matching
            where matching.BankReconciliationHeader == _bankReconciliationHeader;

        matchingId = matching.MatchingId ? matching.MatchingId + 1 : 1;

        return matchingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMatchingIdListByStatementLineList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets matching ID list by statement line list.
    /// </summary>
    /// <param name = "_statementLineList">The statement line list.</param>
    /// <returns>The matching ID list.</returns>
    internal static List getMatchingIdListByStatementLineList(List _statementLineList)
    {
        List matchingIdList = new List(Types::Int64);

        ListEnumerator enumerator = _statementLineList.getEnumerator();
        while (enumerator.moveNext())
        {
            RecId statementLineRecId = enumerator.current();
            if (statementLineRecId)
            {
                BankReconciliationMatchingItem matchingItem = BankReconciliationMatchingItem::findValidByStatementLineRecId(statementLineRecId);
                if (matchingItem)
                {
                    BankReconciliationMatching matching = BankReconciliationMatching::find(matchingItem.BankReconciliationMatching);
                    if (matching)
                    {
                        matchingIdList.addEnd(matching.MatchingId);
                    }
                }
            }
        }

        return matchingIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayMatchingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets user friendly matching type display string.
    /// </summary>
    /// <param name="_matchingType">The matching type.</param>
    /// <returns>The user friendly matching type display string.</returns>
    internal static str displayMatchingType(BankReconciliationMatchingType _matchingType)
    {
        switch (_matchingType)
        {
            case BankReconciliationMatchingType::Statement2Document:
            case BankReconciliationMatchingType::Statements2ReversalDocument:
                return "@GLS222265";
            case BankReconciliationMatchingType::SingleStatement:
                return "@Bank:GenerateVoucher";
            case BankReconciliationMatchingType::Statement2ReversalStatement:
                return "@GLS222244";
            case BankReconciliationMatchingType::DocumentClear:
                return "@Bank:TransactionReversal";
            case BankReconciliationMatchingType::GenerateCustPayment:
                return "@Bank:GenCustPaym";
            case BankReconciliationMatchingType::GenerateVendPayment:
                return "@Bank:GenVendPaym";
            default:
                return "";
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Bank</ConfigurationKey>
	<DeveloperDocumentation>@GLS221692</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@GLS221616</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>BankReconciliationHeader</TitleField1>
	<TitleField2>Cancelled</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>Bank</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelledDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Cancelled</Name>
			<Label>@GLS221698</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Cancelled</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelledBy</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CancelledDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Relation</Name>
			<Label>@SYS2720</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationHeader</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankReconciliationMatchRuleId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>BankReconciliationHeader</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BankReconciliationMatchingType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>BankReconciliationMatchingType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankReconciliationMatchRuleId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationMatchRuleId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Cancelled</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankReconciliationHeaderCancelled</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CancelledBy</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>UserId</ExtendedDataType>
			<Label>@GLS221694</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CancelledDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS221696</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>MatchingId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<FeatureClass>BankModernReconciliationFeature</FeatureClass>
			<HelpText>@Bank:MatchingIDHelpText</HelpText>
			<Label>@Bank:MatchingID</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BankReconciliationHeaderIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>BankReconciliationHeader</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>MatchingIdIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>MatchingId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankReconciliationHeader</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>BankReconciliationHeader</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BankReconciliationHeader</Name>
					<Field>BankReconciliationHeader</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CancelledBy</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>UserInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CancelledBy</Name>
					<Field>CancelledBy</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>Id</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>