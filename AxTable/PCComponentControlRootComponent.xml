<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentControlRootComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentControlRootComponent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        PCConfigurationControl  configurationControl;
        PCComponentControl      componentControl;
        RefRecId                ComponentControlRefRecId = this.ComponentControl;

        super();

        // if the root component control is deleted the whole UI structure must be deleted.
        delete_from configurationControl
            exists join componentControl
            where   componentControl.RecId == ComponentControlRefRecId
            &&      componentControl.ConfigurationControl == configurationControl.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicateRootComponentTree</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a duplicate of the current record for the specified component control.
    /// </summary>
    /// <param name="_duplicatedComponentControl">
    ///    The ID of the component control that was duplicated.
    /// </param>
    /// <returns>
    ///    The duplicated record of the <c>PCComponentControlRootComponent</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The duplicated component cannot be found.
    /// </exception>
    public PCComponentControlRootComponent duplicateRootComponentTree(
        RefRecId    _duplicatedComponentControl)
    {
        PCComponentControlRootComponent newRootComponentControl;
        PCClass                         component;
        PCClass                         dupComponent;

        component    = PCClass::find(this.RootComponent);
        dupComponent = PCClass::findByName(PCModelingLibrary::duplicateCategoryName(component.Name, NoYes::No));

        if (dupComponent.RecId == 0)
        {
            throw Exception::Error;
        }

        newRootComponentControl.RootComponent = dupComponent.RecId;
        newRootComponentControl.ComponentControl = _duplicatedComponentControl;
        newRootComponentControl.insert();

        return newRootComponentControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified record in the <c>PCComponentControlRootComponent</c> table exists.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentControlRootComponent::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentControlRootComponent</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for an update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentControlRootComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControlRootComponent find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentControlRootComponent record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByComponentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PCComponentControlRootComponent</c> table.
    /// </summary>
    /// <param name="_componentControl">
    /// The record ID of the related component control.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PCComponentControlRootComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentControlRootComponent findByComponentControl(RefRecId _componentControl, boolean _forupdate = false)
    {
        PCComponentControlRootComponent record;

        if (!_componentControl)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.ComponentControl == _componentControl;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS332811</DeveloperDocumentation>
	<Label>@SYS309653</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ComponentControl</TitleField1>
	<TitleField2>RootComponent</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ComponentControlRootComponentIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentControl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootComponent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentControl</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS190608</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RootComponent</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS310580</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ComponentControlRootComponentIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ComponentControl</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>RootComponent</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PCClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RootComponent</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>UIOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RootComponent</Name>
					<Field>RootComponent</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PCComponentControl</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCComponentControl</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>UIDefinition</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RootComponent</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentControl</Name>
					<Field>ComponentControl</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>