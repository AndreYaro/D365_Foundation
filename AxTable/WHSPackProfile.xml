<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPackProfile</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSPackProfile extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        WHSWorker worker;

        ttsbegin;

        while select forupdate worker
             where worker.PackProfileId == this.PackProfileId
        {
            worker.PackProfileId = '';
            worker.update();
        }

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks whether a specific <c>whsPackProfile</c> record exists.
	/// </summary>
	/// <param name="_whsPackProfileId">
	/// Pack profile id of the record.
	/// </param>
	/// <returns>
	/// True if the record exists.
	/// </returns>
    public static boolean exist(WHSPackProfileId _whsPackProfileId)
    {
        return (_whsPackProfileId) &&
               (select firstonly whsPackProfile
                where whsPackProfile.PackProfileId == _whsPackProfileId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a specific <c>WHSPackProfile</c> record with given parameters.
	/// </summary>
	/// <param name="_whsPackProfileId">
	/// Pack profile id of the record.
	/// </param>
	/// <param name="_forupdate">
	/// Determines whether the record is selected for update.
	/// </param>
	/// <returns>
	/// The record that is searched for.
	/// </returns>
    public static WHSPackProfile find(WHSPackProfileId  _whsPackProfileId, boolean _forupdate = false)
    {
        WHSPackProfile whsPackProfile;

        if (_whsPackProfileId)
        {
            whsPackProfile.selectForUpdate(_forupdate);

            select firstonly whsPackProfile
                where whsPackProfile.PackProfileId == _whsPackProfileId;
        }

        return whsPackProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProfileWithWarehouseForFinalShippingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if a packing profile with a associated container close profile can be used together with the specified warehouse.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Location id of the warehouse
    /// </param>
    /// <returns>
    /// True, if the packing profile can be used with the specified warehouse; otherwise false
    /// </returns>
    public boolean validateProfileWithWarehouseForFinalShippingLocation(
        InventLocationId    _inventLocationId)
    {
        boolean ret = true;

        if (this.CloseContainerProfileId)
        {
            var closeContainerProfile = WHSCloseContainerProfile::find(this.CloseContainerProfileId);

            switch (closeContainerProfile.WarehouseGroupAll)
            {
                case WhsWarehouseGroupAll::Warehouse:
                    ret = (closeContainerProfile.InventLocationId == _inventLocationId);
                    break;
                case WhsWarehouseGroupAll::Group:
                    ret = WhsWarehouseGroup::containsWarehouse(closeContainerProfile.WarehouseGroupId, _inventLocationId);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(WHSPackProfile, LPAssignment):
                if (this.LPAssignment == WHSLPAssignment::Manual)
                {
                    this.PreventContainerIdEdit = false;
                }
                break;
            case fieldStr(WHSPackProfile, CloseContainerProfileId):
                if (this.CloseContainerProfileId != '' &&
                    WHSPackProfileUpdateWorkerCloseContProfFlight::instance().isEnabled() &&
                    WHSWorker::existsForPackProfileId(this.PackProfileId))
                {
                    warning(strFmt("@WAX:WHSPackProfile_UpdateCloseContainerProfileId_Warning", this.CloseContainerProfileId));
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;

        WHSCloseContainerProfileId origCloseContProfId = this.orig().CloseContainerProfileId;

        super();

        if (this.mustUpdateWorkerCloseContainerProfileIds(origCloseContProfId) && 
            WHSPackProfileUpdateWorkerCloseContProfFlight::instance().isEnabled())
        {
            this.updateWorkerCloseContainerProfileIds();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateWorkerCloseContainerProfileIds</Name>
				<Source><![CDATA[
    private boolean mustUpdateWorkerCloseContainerProfileIds(WHSCloseContainerProfileId _originalCloseContainerProfileId)
    {
        return this.CloseContainerProfileId && 
            this.CloseContainerProfileId != _originalCloseContainerProfileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkerCloseContainerProfileIds</Name>
				<Source><![CDATA[
    private void updateWorkerCloseContainerProfileIds()
    {
        WHSWorker whsWorker;

        update_recordset whsWorker
            setting CloseContainerProfileId = this.CloseContainerProfileId
            where whsWorker.PackProfileId == this.PackProfileId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@WAX4417</DeveloperDocumentation>
	<Label>@WAX2104</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>PackProfileId</TitleField1>
	<TitleField2>Description</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>PackingProfileIdx</ClusteredIndex>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>PackingProfileIdx</PrimaryIndex>
	<ReplacementKey>PackingProfileIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LPAssignment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultContainerType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoContainerOnClose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CloseContainerProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PackProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LPAssignment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DefaultContainerType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AutoContainerOnClose</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PackProfileId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CloseContainerProfileId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>AutoContainerOnClose</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSAutoContainerOnClose</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CloseContainerProfileId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSCloseContainerProfileId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DefaultContainerType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSDefaultContainerType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LPAssignment</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WHSLPAssignment</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PackProfileId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPackProfileId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PrintContainerLabel</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPrintContainerLabel</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreventContainerIdEdit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPreventContainerIdEdit</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PreventContainerCreateWithoutItemToPack</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WHSPreventContainerCreateWithoutItemToPack</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PackingProfileIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PackProfileId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>WHSCloseContainerProfile</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>WHSCloseContainerProfile</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CloseContainerProfileId</Name>
					<SourceEDT>WHSCloseContainerProfileId</SourceEDT>
					<Field>CloseContainerProfileId</Field>
					<RelatedField>CloseContainerProfileId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSContainerType</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WHSContainerType</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultContainerType</Name>
					<SourceEDT>WHSDefaultContainerType</SourceEDT>
					<Field>DefaultContainerType</Field>
					<RelatedField>ContainerTypeCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>