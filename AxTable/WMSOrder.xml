<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WMSOrder extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTransReservations</Name>
				<Source><![CDATA[
    private container addInventTransReservations(
        WMSShipment         wmsShipment,
        InventQty           qty,
        WMSRouteId          routeId     = '',
        WMSExpeditionStatus newStatus   = WMSExpeditionStatus::Registered,
        NoYes               fullPallet  = NoYes::No,
        PdsCWInventQty      _pdsCWQty   = 0
        )
    {
        InventTrans         inventTrans;
        WMSOrderTrans       orderTrans;
        WMSOrderTrans       wmsOrderTrans;
        InventQty           availQty;
        InventQty           remainingQty = qty;
        InventQty           useQty;
        InventQty           orderTransQty;
        InventDimId         inventDimIdOld;
        InventDimFixed      inventDimFixedOld;
        InventTransOrigin   inventTransOrigin;
        PdsCWInventQty      pdsCWAvailQty;
        PdsCWInventQty      pdsCWRemainingQty = _pdsCWQty;
        PdsCWInventQty      pdsCWUseQty;
        PdsCWInventQty      pdsCWOrderTransQty;

        while select TableId from inventTransOrigin
            where inventTransOrigin.InventTransId   == this.InventTransId
            join sum(Qty), sum(PdsCWQty),
            InventDimId, InventDimFixed from inventTrans
            group by InventDimId, InventDimFixed, StatusIssue
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
             &&   inventTrans.TransChildType    == InventTransChildType::WMSOrder
             &&   inventTrans.TransChildRefId   == this.OrderId
             &&   inventTrans.StatusReceipt     == StatusReceipt::None
             &&  (inventTrans.StatusIssue       == StatusIssue::ReservPhysical
             ||   inventTrans.StatusIssue       == StatusIssue::ReservOrdered)
        {
            if (inventTrans.InventDimId != inventDimIdOld || inventTrans.InventDimFixed != inventDimFixedOld)
            {
                [orderTransQty, pdsCWOrderTransQty] = this.retrieveInProcessQuantitiesForOrder(inventTrans);
            }

            availQty = -inventTrans.Qty - orderTransQty;
            pdsCWAvailQty = -inventTrans.PdsCWQty - pdsCWOrderTransQty;
            if (availQty < 0)
            {
                orderTransQty += availQty;
                availQty = 0;
                pdsCWOrderTransQty += pdsCWAvailQty;
                pdsCWAvailQty = 0;
            }

            if (availQty)
            {
                useQty = (remainingQty > availQty) ? availQty : remainingQty;
                pdsCWUseQty = (pdsCWRemainingQty > pdsCWAvailQty) ? pdsCWAvailQty   : pdsCWRemainingQty;
                if (pdsCWUseQty)
                {
                    useQty = availQty  > PdsCatchWeight::maxInventQty(this.ItemId, pdsCWUseQty) ? remainingQty : availQty;
                }
                wmsOrderTrans.clear();
                wmsOrderTrans.initFromWMSOrder(this);
                wmsOrderTrans.initFromWMSShipment(wmsShipment);
                wmsOrderTrans.ExpeditionStatus  = newStatus;
                wmsOrderTrans.Qty               = useQty;
                wmsOrderTrans.PdsCWQty          = pdsCWUseQty;
                wmsOrderTrans.InventDimId       = inventTrans.InventDimId;
                wmsOrderTrans.initToInventDimFromInventDim();
                wmsOrderTrans.InventDimFixed    = inventTrans.InventDimFixed;
                wmsOrderTrans.RouteId           = routeId;
                wmsOrderTrans.PreReserved       = NoYes::Yes;
                wmsOrderTrans.IsReserved        = inventTrans.isWMSReserved();
                wmsOrderTrans.SortCode          = wmsOrderTrans.wmsLocation().sortCode;
                if (newStatus == WMSExpeditionStatus::Registered || newStatus == WMSExpeditionStatus::Activated)
                {
                    wmsOrderTrans.changeToLocation(wmsOrderTrans.findToLocation(),false);
                }
                wmsOrderTrans = WMSOrderTrans::insertOrUpdate(wmsOrderTrans,this);

                remainingQty -= useQty;
                pdsCWRemainingQty -= pdsCWUseQty;
            }
            if (!remainingQty)
            {
                break;
            }
            inventDimIdOld    = inventTrans.InventDimId;
            inventDimFixedOld = inventTrans.InventDimFixed;
        }

        return [remainingQty, pdsCWRemainingQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInProcessQuantitiesForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an aggregated sum of the quantities in process for the given inventory transaction.
    /// </summary>
    /// <param name = "_inventTrans">An inventory transaction record.</param>
    /// <returns>A container with the aggregated quantity and the Pds catchweight quantity.</returns>
    protected container retrieveInProcessQuantitiesForOrder(InventTrans _inventTrans)
    {
        WMSOrderTrans orderTrans;
        select sum(Qty), sum(PdsCWQty) from orderTrans
            where orderTrans.OrderId            == this.OrderId
                && orderTrans.InventDimId       == _inventTrans.InventDimId
                && orderTrans.InventDimFixed    == _inventTrans.InventDimFixed
                && (orderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
                || orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Activated
                || orderTrans.ExpeditionStatus  == WMSExpeditionStatus::Started)
                && orderTrans.IsReserved        == NoYes::Yes;
       
         return [orderTrans.Qty, orderTrans.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoAddShipment</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public void autoAddShipment()
    {
 
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateReservOrderedDim</Name>
				<Source><![CDATA[
    public boolean canUpdateReservOrderedDim(
        InventDim       fromDim,
        InventDim       toDim,
        InventQty       qty,
        PdsCWInventQty  _cwQty = 0
        )
    {
        WMSOrderTrans   wmsOrderTrans;
        InventQty       remainingQty    = -qty;
        PdsCWInventQty  remainingCWQty  = -_cwQty;
        boolean         isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);

        while select RouteId, ItemId, Qty, PdsCWQty
            from wmsOrderTrans
            order by ExpeditionStatus desc, IsReserved
            where wmsOrderTrans.OrderId             == this.OrderId                         &&
                 (wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Registered      ||
                  wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Activated       ||
                  wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Started)        &&
                  wmsOrderTrans.InventDimId         == fromDim.InventDimId
        {
            if (wmsOrderTrans.RouteId) // picking routes
            {
                remainingCWQty -= min(wmsOrderTrans.PdsCWQty, remainingCWQty);
                remainingQty -= min(wmsOrderTrans.Qty, remainingQty);
            }
            else if (!wmsOrderTrans.RouteId) // Shipment not reserved yet
            {
                remainingCWQty -= min(wmsOrderTrans.PdsCWQty, remainingCWQty);
                remainingQty -= min(wmsOrderTrans.Qty, remainingQty);
            }
            if ((isCWItem && !remainingCWQty) || (!isCWItem && !remainingQty))
            {
                break;
            }
        }

        if (    (isCWItem  && (remainingCWQty && this.PdsCWQtyNoShipment + this.pdsCWQtyRegistered() < remainingCWQty))
            ||  (!isCWItem && (remainingQty && this.QtyNoShipment + this.qtyRegistered() < remainingQty)))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFix</Name>
				<Source><![CDATA[
    public void checkFix(WMSConsistencyCheck_WMSOrder wmsConsistencyCheck_WMSOrder)
    {
        this.type().checkFix(wmsConsistencyCheck_WMSOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.type().deleting();

        boolean couldBeDeletedAlready = this.canBeDeletedByReferencedTable();

        if (couldBeDeletedAlready)
        {
            this.reread();
        }
        
        if (!couldBeDeletedAlready || this.RecId)
        {
            super();
        }

        this.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>finish</Name>
				<Source><![CDATA[
    public void finish()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventQty           qtyPhysicalUpdated = this.qtyPhysicalUpdated();

        setPrefix(strFmt("@SYS55213", this.OrderId));
        if (this.QtyNoShipment + qtyPhysicalUpdated != this.Qty)
        {
            throw(error("@SYS55214"));
        }

        if (this.QtyNoShipment == this.Qty && this.Type != WMSOrderType::OrderPick && this.qtyCanceled() == 0)
        {
            throw(error("@SYS55216"));
        }

        if (qtyPhysicalUpdated && qtyPhysicalUpdated == this.Qty)
        {
            throw(error("@SYS55217"));
        }

        ttsbegin;

        if (this.QtyNoShipment > 0)
        {
            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId   == this.InventTransId
                join forupdate inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                      &&  inventTrans.TransChildRefId   == this.OrderId
                      &&  inventTrans.TransChildType    == InventTransChildType::WMSOrder
            {
                inventTrans.TransChildRefId = '';
                inventTrans.TransChildType  = InventTransChildType::None;
                inventTrans.update(NoYes::Yes);
                this.Qty           += inventTrans.Qty;
                this.QtyNoShipment += inventTrans.Qty;

                // If any transactions are updated so the wmsOrder reference is cleared we interpret this as
                // the quantity was no longer requested for WMS processing. Hence we adjust the qtyRequested
                // so any re-activation of the wmsOrder e.g from an unpick will work on the correct QtyRequested.
                this.QtyRequested  += inventTrans.Qty;

                this.PdsCWQty           += inventTrans.PdsCWQty;
                this.PdsCWQtyNoShipment += inventTrans.PdsCWQty;
            }
        }

        this.cleanupRedundantTransactionsForCompletedPicking(PdsGlobal::pdsIsCWItem(this.ItemId));

        // No reference is expected after the output order is finished.
        InventTrans inValidReferenceTransaction;
        inValidReferenceTransaction.skipAosValidation(true);
        inValidReferenceTransaction.skipBusinessEvents(true);
        inValidReferenceTransaction.skipDatabaseLog(true);
        inValidReferenceTransaction.skipDataMethods(true);
        inValidReferenceTransaction.skipEvents(true);

        update_recordset inValidReferenceTransaction setting TransChildRefId = '', TransChildType = InventTransChildType::None
            where inValidReferenceTransaction.TransChildRefId   == this.OrderId
                && inValidReferenceTransaction.TransChildType    == InventTransChildType::WMSOrder
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inValidReferenceTransaction.InventTransOrigin
                    && inventTransOrigin.InventTransId == this.inventTransId;

        this.Qty           = max(0,this.Qty);
        this.QtyNoShipment = max(0,this.QtyNoShipment);
        this.QtyRequested  = max(0,this.QtyRequested);

        this.PdsCWQty           = this.Qty > 0 ? this.PdsCWQty : 0;
        this.PdsCWQtyNoShipment = this.QtyNoShipment > 0 ? this.PdsCWQtyNoShipment : 0;

        this.Status = WMSOrderStatus::Complete;
        this.doUpdate();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        this.type().inserting();

        this.setShipmentGroupingReference();

        super();

        this.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim()
    {
        return InventDim::find(this.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBeingProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether inventory activities are in progress for this order.
    /// </summary>
    /// <returns>
    /// true if this order has quantities that is being processed; otherwise, false.
    /// </returns>
    public boolean isBeingProcessed()
    {
        WMSOrderTrans wmsOrderTrans;

        select sum(Qty), sum(PdsCWQty) from wmsOrderTrans
        where  wmsOrderTrans.OrderId           == this.OrderId
            && (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered
            ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated
            ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started);

        return ((wmsOrderTrans.PdsCWQty != 0) || (wmsOrderTrans.Qty != 0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBeingProcessedOnMultipleRoutes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether inventory activities are in progress on multiple routes for this order.
    /// </summary>
    /// <returns>
    /// true if this order has quantities that are being processed on multiple routes; otherwise, false.
    /// </returns>
    public boolean isBeingProcessedOnMultipleRoutes()
    {
        boolean res;
        WMSOrderTrans wmsOrderTrans1;
        WMSOrderTrans wmsOrderTrans2;

        res = this.isBeingProcessed();

        if (res)
        {
            select RecId from wmsOrderTrans1
                where wmsOrderTrans1.OrderId            == this.OrderId
                &&   (wmsOrderTrans1.ExpeditionStatus   ==  WMSExpeditionStatus::Activated
                ||    wmsOrderTrans1.ExpeditionStatus   ==  WMSExpeditionStatus::Started)

            exists join wmsOrderTrans2
                where wmsOrderTrans2.OrderId            == wmsOrderTrans1.OrderId
                &&    wmsOrderTrans2.RecId              != wmsOrderTrans1.RecId
                &&    wmsOrderTrans2.RouteId            != wmsOrderTrans1.RouteId
                &&   (wmsOrderTrans2.ExpeditionStatus   ==  WMSExpeditionStatus::Activated
                ||    wmsOrderTrans2.ExpeditionStatus   ==  WMSExpeditionStatus::Started);

            res = (wmsOrderTrans1.RecId != 0);
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDeliverComplete</Name>
				<Source><![CDATA[
    public boolean mustDeliverComplete()
    {
        boolean     ok= false;
        SalesLine   salesLine;

        if (this.InventTransType == InventTransType::Sales)
        {
            salesLine = SalesLine::findInventTransId(this.InventTransId);
            if (salesLine && salesLine.Complete)
            {
                ok = true;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeletedByReferencedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory order record can be deleted by one of the tables referencing the inventory order record.
    /// </summary>
    /// <returns>
    /// true, if the inventory order can be deleted; otherwise, false.
    /// </returns>
    protected boolean canBeDeletedByReferencedTable()
    {
        return this.type().canBeDeletedByReferencedTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyActivated</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyActivated pdsCWQtyActivated()
    {
        PdsCWQtyActivated pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where  wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Activated).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyCanceled</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyCanceled pdsCWQtyCanceled()
    {
        PdsCWQtyCanceled pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Cancelled).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyNotCanceled</Name>
				<Source><![CDATA[
    private PdsCWInventQty pdsCWQtyNotCanceled()
    {
        PdsCWQtyCanceled pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus !=
                                    WMSExpeditionStatus::Cancelled).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyCompleted</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyCompleted pdsCWQtyCompleted()
    {
        PdsCWQtyCompleted pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Complete).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyLoaded</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyLoaded pdsCWQtyLoaded()
    {
        PdsCWQtyLoaded pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Loaded).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyOverdelivered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the overdelivered catch weight quantity on the current <c>WMSOrder</c> table record.
    /// </summary>
    /// <returns>
    ///    The overdelivered catch weight quantity.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public PdsCWInventQty pdsCWQtyOverdelivered()
    {
        return max(0,this.PdsCWQty - this.PdsCWQtyRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyPhysicalUpdated</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyPhysicalUpdated pdsCWQtyPhysicalUpdated()
    {
        WMSOrderTrans   wmsOrderTrans;
        PdsCWQtyPhysicalUpdated  pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),AccessType::View))
        {
            select sum(PdsCWQty)
                from wmsOrderTrans
                where  wmsOrderTrans.OrderId               == this.OrderId
                    && (wmsOrderTrans.ExpeditionStatus     == WMSExpeditionStatus::Picked
                        ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged
                        ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Loaded
                        ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Complete);

            pdsCWQty = wmsOrderTrans.PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyPicked</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyPicked pdsCWQtyPicked()
    {
        PdsCWQtyPicked pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty) from wmsOrderTrans
                            where wmsOrderTrans.OrderId           == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Picked).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRegistered</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyRegistered pdsCWQtyRegistered()
    {
        PdsCWQtyRegistered pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Registered).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyStaged</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyStaged pdsCWQtyStaged()
    {
        PdsCWQtyStaged pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Staged).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyStarted</Name>
				<Source><![CDATA[
    [SysClientCacheDataMethodAttribute]
    display PdsCWQtyStarted pdsCWQtyStarted()
    {
        PdsCWQtyStarted pdsCWQty = 0;

        if (!PdsGlobal::pdsIsCWItem(this.ItemId))
        {
            return 0;
        }

        //Check if user has security access
        if (hasTableAccess(tableNum(WMSOrder),
                          AccessType::View))
        {
            pdsCWQty = (select sum(PdsCWQty)
                            from wmsOrderTrans
                            where wmsOrderTrans.OrderId          == this.OrderId
                                && wmsOrderTrans.ExpeditionStatus ==
                                    WMSExpeditionStatus::Started).PdsCWQty;
        }

        return pdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight unit for the item.
    /// </summary>
    /// <returns>
    /// The catch weight unit for the item.
    /// </returns>
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyActivated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Activated</c> that belongs to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Activated</c> that belongs to the current
    ///    inventory order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyActivated qtyActivated()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Activated).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyNotCanceled</Name>
				<Source><![CDATA[
    private InventQty qtyNotCanceled()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus != WMSExpeditionStatus::Cancelled).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyCanceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Canceled</c> that belong to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Canceled</c> that belong to current inventory
    ///    order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyCanceled qtyCanceled()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Cancelled).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Completed</c> that belongs to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Completed</c> that belongs to current inventory
    ///    order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyCompleted qtyCompleted()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Complete).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLoaded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Loaded</c> that belongs to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Loaded</c> that belongs to the current inventory
    ///    order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyLoaded qtyLoaded()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Loaded).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyOverdelivered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the overdelivered quantity on the current <c>WMSOrder</c> table record.
    /// </summary>
    /// <returns>
    ///    The overdelivered quantity.
    /// </returns>
    public InventQty qtyOverdelivered()
    {
        return max(0,this.orig().Qty - this.QtyRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyOverdelivered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the overdelivered quantity need to be canceled on the current <c>WMSOrder</c> table record.
    /// </summary>
    /// <returns>
    ///    The overdelivered quantity.
    /// </returns>
    internal InventQty calcQtyOverdelivered()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        WMSOrderTrans wmsOrderTrans;

        if (this.InventTransType == InventTransType::Sales && this.Qty > this.QtyRequested)
        {
            SalesLine salesLine = SalesLine::findInventTransId(this.InventTransId);
            select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.inventTransId == this.InventTransId
                        && wmsOrderTrans.InventDimId == this.InventDimId
                        && wmsOrderTrans.ExpeditionStatus != WMSExpeditionStatus::Cancelled;

            if (salesLine.QtyOrdered >= wmsOrderTrans.Qty)
            {
                select sum(Qty) from inventTrans
                    exists join inventTransOrigin
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTransOrigin.InventTransId == this.InventTransId;

                if (salesLine.QtyOrdered >= -inventTrans.Qty)
                {
                    return 0;
                }
            }
        }

        if (this.InventTransType == InventTransType::TransferOrderShip
            && this.Qty >= this.QtyRequested
            && WMSTransferPickingRegistrationDecreaseQtyFlight::instance().isEnabled())
        {
            select sum(Qty) from wmsOrderTrans
                where wmsOrderTrans.inventTransId == this.InventTransId
                    && wmsOrderTrans.InventDimId == this.InventDimId
                    && wmsOrderTrans.ExpeditionStatus != WMSExpeditionStatus::Cancelled;

            InventTransferLine inventTransferLine = InventTransferLine::findTransIdShip(this.InventTransId);

            if (inventTransferLine.QtyTransfer > wmsOrderTrans.Qty)
            {
                select sum(Qty) from inventTrans
                    exists join inventTransOrigin
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                           && inventTransOrigin.InventTransId == this.InventTransId;

                if (inventTransferLine.QtyTransfer >= -inventTrans.Qty)
                {
                    return 0;
                }
            }
        }

        return this.qtyOverdelivered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPhysicalUpdated</Name>
				<Source><![CDATA[
    public InventQty qtyPhysicalUpdated()
    {
        WMSOrderTrans   wmsOrderTrans;

        select sum(Qty) from wmsOrderTrans
            where  wmsOrderTrans.OrderId          == this.OrderId
               && (wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Picked
               ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged
               ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Loaded
               ||  wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Complete);

        return wmsOrderTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPicked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Picked</c> that belongs to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Picked</c> that belongs to the current inventory
    ///    order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyPicked qtyPicked()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Picked).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Registered</c> that belongs to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Registered</c> that belongs to current inventory
    ///    order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyRegistered qtyRegistered()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyStaged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Staged</c> that belongs to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with the status <c>Staged</c> that belongs to the current inventory
    ///    order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyStaged qtyStaged()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Staged).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity of picking lines with the status <c>Started</c> that belong to the current
    ///    inventory order.
    /// </summary>
    /// <returns>
    ///    The quantity of picking lines with status <c>Started</c> that belong to current inventory order.
    /// </returns>
    [SysClientCacheDataMethodAttribute]
    public display WMSQtyStarted qtyStarted()
    {
        return (select sum(Qty) from wmsOrderTrans
                    where wmsOrderTrans.OrderId          == this.OrderId
                       && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Started).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentGroupingReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the grouping reference fields.
    /// </summary>
    public void setShipmentGroupingReference()
    {
        if (!this.ShipmentGroupingRefId)
        {
            this.ShipmentGroupingTransType = this.InventTransType;
            this.ShipmentGroupingRefId     = this.InventTransRefId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the status.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    /// An <c>WMSOrderTrans</c> record that is related to this <c>WMSOrder</c> record; optional.
    /// </param>
    /// <remarks>
    /// The <paramref name="_wmsOrderTrans" /> parameter can be passed to improve performance when the
    /// status of the record has changed.
    /// </remarks>
    public void setStatus(WMSOrderTrans _wmsOrderTrans = null)
    {
        boolean isCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        boolean isWMSOrderTransPhysicalUpdated = false;

        this.cleanupRedundantTransactionsForCompletedPicking(isCWItem);

        if (_wmsOrderTrans.RecId)
        {
            isWMSOrderTransPhysicalUpdated = _wmsOrderTrans.isPhysicalUpdated();
        }

        if (isCWItem)
        {
            if (this.PdsCWQtyNoShipment > 0)
            {
                this.Status = WMSOrderStatus::New;
            }
            else if (this.pdsCWQtyPhysicalUpdated() == this.PdsCWQty)
            {
                this.Status = WMSOrderStatus::Complete;
            }
            else
            {
                this.Status = WMSOrderStatus::InExpedition;
            }
        }
        else
        if (this.QtyNoShipment > 0)
        {
            this.Status = WMSOrderStatus::New;
        }//case where we only have one wmsOrderTrans related to a wmsOrder
        else if (_wmsOrderTrans.RecId
        &&       _wmsOrderTrans.Qty     == this.Qty
        &&       _wmsOrderTrans.OrderId == this.OrderId
        &&       isWMSOrderTransPhysicalUpdated)
        {
            this.Status = WMSOrderStatus::Complete;
        }
        //something is still not updated physical so the order must be in expedition
        else if (_wmsOrderTrans.RecId
        &&       _wmsOrderTrans.OrderId == this.OrderId
        &&       !isWMSOrderTransPhysicalUpdated
        &&       _wmsOrderTrans.expeditionStatus != WMSExpeditionStatus::Cancelled)
        {
            this.Status = WMSOrderStatus::InExpedition;
        }
        else if (this.qtyPhysicalUpdated() == this.Qty)
        {
            this.Status = WMSOrderStatus::Complete;
        }
        else
        {
            this.Status = WMSOrderStatus::InExpedition;
        }

        if (this.Status             != this.orig().Status
        ||  this.QtyNoShipment      != this.orig().QtyNoShipment
        ||  this.Qty                != this.orig().Qty
        ||  this.PdsCWQty           != this.orig().PdsCWQty
        ||  this.PdsCWQtyNoShipment != this.orig().PdsCWQtyNoShipment
            )
        {
            this.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupRedundantTransactionsForCompletedPicking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up transactions that are created due to unsupported cases in handling 
    /// quantity adjustments having various combinations of lines on a generated picking list 
    /// and updates a parent movement for adjusted quantity.
    /// </summary>
    /// <param name = "_isCWItem">true if an item is CW enabled; otherwise, false.</param>
    private void cleanupRedundantTransactionsForCompletedPicking(boolean _isCWItem)
    {
        var hasDifferenceInActualAndRequestedQuantities = _isCWItem ? (this.PdsCWQtyRequested != this.PdsCWQty) : (this.qtyRequested != this.qty);

        if (hasDifferenceInActualAndRequestedQuantities)
        {
            InventQty orderQuantity = this.qtyNotCanceled();
            PdsCWInventQty orderCWQuantity = this.pdsCWQtyNotCanceled();
            InventQty qtyDelta = orderQuantity - this.qty;
            PdsCWInventQty cwQtyDelta = orderCWQuantity - this.PdsCWQty;
        
            if (this.mustCleanupRedundantTransactionsForCompletedPicking(_isCWItem, qtyDelta, cwQtyDelta, orderQuantity, orderCWQuantity))
            {
                this.unlinkRedundantTransactionsForCompletedPickingQty();

                this.adjustQtyOnParentMovement(qtyDelta, cwQtyDelta);

                this.PdsCWQty = orderCWQuantity;
                this.qty = orderQuantity;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustQtyOnParentMovement</Name>
				<Source><![CDATA[
    private void adjustQtyOnParentMovement(InventQty _qtyDelta, PdsCWInventQty _cwQtyDelta)
    {
        InventMovement inventMovement = this.type().inventMovement();
        InventMovement inventMovementParent = InventMovement.parentMovement();

        InventQty qtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																								  this.InventDimId,
																								  _qtyDelta,
																								  inventMovementParent.inventTable().inventUnitId(),
																								  inventMovementParent.transUnitId(),
																								  NoYes::Yes);

        inventMovementParent.addRemainPhysical(-_qtyDelta);
        inventMovementParent.addRemainPhysicalUnit(-qtyUnit);
        inventMovementParent.pdsCWAddRemainPhysical(-_cwQtyDelta);

        this.updateParentMovementTransfers(inventMovementParent, _qtyDelta, qtyUnit, _cwQtyDelta);

        inventMovementParent.updateBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCleanupRedundantTransactionsForCompletedPicking</Name>
				<Source><![CDATA[
    private boolean mustCleanupRedundantTransactionsForCompletedPicking(
        boolean         _isCWItem, 
        InventQty       _qtyDelta, 
        PdsCWInventQty  _cwQtyDelta, 
        InventQty       _orderQuantity,
        PdsCWInventQty  _orderCWQuantity)
    {
        // finish method addresses non zero qtyNoShipment case
        if (_isCWItem
            ? (!_cwQtyDelta || this.PdsCWQtyNoShipment)
            : (!_qtyDelta || this.qtyNoShipment))
        {
            return false;
        }

        boolean allPickingQtyCompleted = _isCWItem
            ? this.pdsCWQtyPhysicalUpdated() == _orderCWQuantity
            : this.qtyPhysicalUpdated() == _orderQuantity;

        if (!allPickingQtyCompleted)
        {
            return false;
        }

        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransIdChildType(this.type().inventMovement().inventTransOriginId(), InventTransChildType::WMSOrder, this.OrderId);

        return _isCWItem 
            ? _cwQtyDelta == inventTransIdSum.pdsCWOnOrder() + inventTransIdSum.pdsCWReservPhysical() + inventTransIdSum.pdsCWReserveOrdered()
            : _qtyDelta == inventTransIdSum.onOrder() + inventTransIdSum.reservPhysical() + inventTransIdSum.reserveOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkRedundantTransactionsForCompletedPickingQty</Name>
				<Source><![CDATA[
    private void unlinkRedundantTransactionsForCompletedPickingQty()
    {
        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;

        update_recordset inventTrans
            setting TransChildRefId = '',
                TransChildType = InventTransChildType::None
            where inventTrans.TransChildType == InventTransChildType::WMSOrder
            && inventTrans.StatusIssue >= StatusIssue::ReservPhysical
            && inventTrans.StatusReceipt == StatusReceipt::None
            exists join inventTransOrigin
                where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId  == this.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentMovementTransfers</Name>
				<Source><![CDATA[
    private void updateParentMovementTransfers(
        InventMovement _parentMovement,
        InventQty           _qtyAdjusted,
        Qty                 _qtyAdjustedUnit,
        PdsCWInventQty      _pdsCWQtyAdjusted)
    {
        if (_parentMovement.isTransfer())
        {
            InventMovement movementParentTransferReceipt = _parentMovement.newMovement_TransferReceipt();

            if (movementParentTransferReceipt)
            {
                InventMovement movementParentTransferIssueReceive = movementParentTransferReceipt.newMovement_TransferIssueReceive();

                if (movementParentTransferIssueReceive)
                {
                    movementParentTransferReceipt = movementParentTransferIssueReceive.newMovement_TransferReceipt();
                }

                if (movementParentTransferReceipt)
                {
                    movementParentTransferReceipt.addRemainPhysical(_qtyAdjusted);
                    movementParentTransferReceipt.addRemainPhysicalUnit(_qtyAdjustedUnit);
                    movementParentTransferReceipt.pdsCWAddRemainPhysical(_pdsCWQtyAdjusted);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>toInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory dimensions from the inventory order.
    /// </summary>
    /// <returns>
    /// The inventory dimensions from the inventory order.
    /// </returns>
    public InventDim toInventDim()
    {
        return InventDim::find(this.ToInventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    public WMSOrderTableType type()
    {
        return WMSOrderTableType::construct(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }
        
        WMSOrder wmsOrder_Orig = this.orig();
        
        this.type().updating();

        super();

        this.type().updated(wmsOrder_Orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservOrderedDim</Name>
				<Source><![CDATA[
    public void updateReservOrderedDim(
        InventDim       fromDim,
        InventDim       toDim,
        InventQty       qty,
        boolean         isNowPhysical = false,
        PdsCWInventQty  _pdsCWQty = 0
        )
    {
        WMSOrderTrans   wmsOrderTrans;
        InventQty       remainingQty = -qty;
        PdsCWInventQty  pdsCWRemainingQty = -_pdsCWQty;
        boolean         pdsIsCWItem = PdsGlobal::pdsIsCWItem(this.ItemId);
        boolean         changeLocation = false;
        WMSLocation     fromLocation, toLocation;

        if (fromDim.wmsLocationId != toDim.wmsLocationId || fromDim.InventLocationId != toDim.InventLocationId)
        {
            changeLocation = true;
        }

        while select forupdate wmsOrderTrans
            order by ExpeditionStatus desc, IsReserved
            where wmsOrderTrans.OrderId             == this.OrderId
             &&  (wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Registered
             ||   wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Activated
             ||   wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Started)
             &&   wmsOrderTrans.InventDimId         == fromDim.InventDimId
        {
            if ((!pdsIsCWItem && wmsOrderTrans.Qty > remainingQty)
                || (pdsIsCWItem && wmsOrderTrans.PdsCWQty > pdsCWRemainingQty))
            {
                wmsOrderTrans.split(wmsOrderTrans.Qty - remainingQty, wmsOrderTrans.PdsCWQty - pdsCWRemainingQty);
            }

            if (wmsOrderTrans.routeId)
            {   // picking routes
                if (changeLocation)
                {
                    fromLocation = WMSLocation::find(fromDim.wmsLocationId, fromDim.InventLocationId);
                    toLocation   = WMSLocation::find(toDim.wmsLocationId, toDim.InventLocationId);

                    wmsOrderTrans.SortCode = toLocation.SortCode;
                }
                wmsOrderTrans.InventDimId = toDim.InventDimId;

                if (isNowPhysical)
                {
                    wmsOrderTrans.IsReserved = NoYes::Yes;
                }

                wmsOrderTrans.update();
                remainingQty -= wmsOrderTrans.Qty;
                pdsCWRemainingQty -= wmsOrderTrans.PdsCWQty;
            } 
            else
            {   
                // Shipment not reserved yet
                if (isNowPhysical && wmsOrderTrans.ExpeditionStatus == WMSExpeditionStatus::Registered)
                {
                    wmsOrderTrans.IsReserved    = NoYes::Yes;
                    wmsOrderTrans.PreReserved   = NoYes::Yes;
                }
                wmsOrderTrans.InventDimId = toDim.InventDimId;
                wmsOrderTrans.update();
                remainingQty -= wmsOrderTrans.Qty;
                pdsCWRemainingQty -= wmsOrderTrans.PdsCWQty;
            }

            wmsOrderTrans.sumUp();

            if (!remainingQty)
            {
                break;
            }
        }

        if (remainingQty && this.QtyNoShipment + this.qtyRegistered() < remainingQty)
        {
            throw(error("@SYS53948"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipmentResolved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory order transaction contains a route id.
    /// </summary>
    /// <param name = "_wmsOrderTrans">The <c>WMSOrderTrans</c> record.</param>
    /// <returns>true, if the <c>WMSOrderTrans</c> has been initialized; otherwise, false.</returns>
    protected boolean isShipmentResolved(WMSOrderTrans _wmsOrderTrans)
    {
        return !_wmsOrderTrans.RouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipment</Name>
				<Source><![CDATA[
    public void updateShipment(
        WMSShipment         _wmsShipment,
        InventQty           _qty,
        WMSPickingRouteID   _pickingRouteId = '',
        boolean             _tryToUpdateShipment = true,
        PdsCWInventQty    _pdsCWQty = 0
        )
    {
        InventQty       qty = _qty;
        PdsCWInventQty  pdsCWQty = _pdsCWQty;
        WMSOrderTrans   wmsOrderTrans;
        RecVersion      recVersionShipment;
        WMSLocation     wmsLocationTo;

        if (!_wmsShipment.isStatusOkForAddition())
        {
            throw(error(strFmt("@SYS50569", _wmsShipment.ShipmentId)));
        }

        if (qty == 0)
        {
            return;
        }

        if (qty < 0)
        {
            throw(error("@SYS50502"));
        }

        if (qty > 0)
        {
            ttsbegin;
            if (qty > this.QtyNoShipment)
            {
                throw(error(strFmt("@SYS50414", this.QtyNoShipment)));
            }

            if (qty != this.QtyNoShipment)
            {
                if (this.mustDeliverComplete())
                {
                    throw(error("@SYS25384"));
                }
            }

            [qty, pdsCWQty] = this.addInventTransReservations(
                                _wmsShipment,
                                qty,
                                _pickingRouteId,
                                WMSExpeditionStatus::Registered,
                                NoYes::No,
                                pdsCWQty);
            if (qty)
            {
                wmsOrderTrans.initFromWMSOrder(this);
                wmsOrderTrans.initToInventDimFromInventDim();
                wmsOrderTrans.initFromWMSShipment(_wmsShipment);
                wmsOrderTrans.Qty                  = qty;

                wmsOrderTrans.PdsCWQty = pdsCWQty;

                wmsOrderTrans.ExpeditionStatus     = WMSExpeditionStatus::Registered;
                wmsOrderTrans.RouteId              = _pickingRouteId;
                wmsOrderTrans.SortCode             = wmsOrderTrans.wmsLocation().sortCode;

                wmsLocationTo = wmsOrderTrans.findToLocation();

                if (wmsLocationTo.RecId)
                {
                    wmsOrderTrans.changeToLocation(wmsLocationTo,false);
                }

                WMSOrderTrans::insertOrUpdate(wmsOrderTrans,this);
            }
            // if the order is added to a shipment, shipment status or/and potentially date must be changed
            if (_wmsShipment.RecId
            &&  _tryToUpdateShipment == true
            && (_wmsShipment.shouldStatusBeUpdatedOnAddingWMSOrder()|| _wmsShipment.RequestedShipDate != this.DlvDate))
            {
                if (!_wmsShipment.selectForUpdate())
                {
                    recVersionShipment = _wmsShipment.RecVersion;
                    _wmsShipment = WMSShipment::find(_wmsShipment.ShipmentId,true);

                    if (_wmsShipment.RecVersion != recVersionShipment)
                    {
                        throw error("@SYS91572");
                    }
                }

                if (_wmsShipment.shouldStatusBeUpdatedOnAddingWMSOrder())
                {
                    _wmsShipment.notifyOfLineChange(NoYes::Yes,NoYes::Yes,NoYes::Yes);      // Update route status and ship date
                }
                else if (!_wmsShipment.RequestedShipDate || _wmsShipment.RequestedShipDate > this.DlvDate)
                {
                    _wmsShipment.notifyOfLineChange(NoYes::No,NoYes::No,NoYes::Yes);        // Update ship date
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            ret = this.type().validateDelete();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.type().validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransportOrder</Name>
				<Source><![CDATA[
    [SysObsolete('Functionality related to Warehouse Management II is not supported', false, 7\11\2016)]
    public static WMSOrder createTransportOrder(
        ItemId            _itemId,
        InventDimId       _fromDimId,
        InventDimId       _toDimId,
        InventQty         _qty,
        InventTransOrigin _inventTransOrigin,
        NoYes             _postTransfer,
        PdsCWInventQty _pdsCWQty = 0
        )
    {
        WMSOrder                wmsOrder;

        ttsbegin;

        wmsOrder.OrderId        = NumberSeq::newGetNum(WMSParameters::numRefWMSOrderId()).num();
        wmsOrder.Type           = WMSOrderType::Transport;
        wmsOrder.PostTransfer   = _postTransfer;
        wmsOrder.ItemId         = _itemId;
        wmsOrder.InventDimId    = _fromDimId;
        wmsOrder.ToInventDimId  = _toDimId;
        wmsOrder.DlvDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        wmsOrder.PdsCWQty            = _pdsCWQty;
        wmsOrder.PdsCWQtyNoShipment  = _pdsCWQty;
        wmsOrder.PdsCWQtyRequested   = _pdsCWQty;

        wmsOrder.Qty            = _qty;
        wmsOrder.QtyNoShipment  = _qty;
        wmsOrder.QtyRequested   = _qty;

        if (_inventTransOrigin)
        {
            wmsOrder.InventTransId      = _inventTransOrigin.InventTransId;
            wmsOrder.InventTransType    = _inventTransOrigin.ReferenceCategory;
            wmsOrder.InventTransRefId   = _inventTransOrigin.ReferenceId;
        }
        else
        {
            wmsOrder.InventTransId  = NumberSeq::newGetNum(InventParameters::numRefInventTransId()).num();
        }
        wmsOrder.insert();

        ttscommit;

        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static WMSOrder find(WMSOrderId wmsOrderId, boolean _update = false)
    {
        WMSOrder    wmsOrder;

        wmsOrder.selectForUpdate(_update);

        if (wmsOrderId)
        {
            select firstonly wmsOrder
                where wmsOrder.OrderId == wmsOrderId;
        }
        return wmsOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCheckAndCacelZeroCWLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the orders have only 0 catch weight lines left to deliver and delete these lines.
    /// </summary>
    /// <param name="_orderIds">
    /// A list of order IDs to check.
    /// </param>
    public static void pdsCheckAndCacelZeroCWLines(container _orderIds)
    {
        int i;
        WMSOrderTrans   orderTrans;
        WMSOrderId      orderId;

        for (i = 1; i <= conLen(_orderIds); i++)
        {
            orderId = conPeek(_orderIds,i);
            select firstonly RecId
                from orderTrans
                where  orderTrans.OrderId == orderId
                    && (orderTrans.ExpeditionStatus
                                == WMSExpeditionStatus::Registered
                        || orderTrans.ExpeditionStatus
                                == WMSExpeditionStatus::Activated
                        || orderTrans.ExpeditionStatus
                                == WMSExpeditionStatus::Started)
                    && orderTrans.PdsCWZeroCWLine == NoYes::No;
            if (orderTrans.RecId)
            {
                continue;
            }
            ttsbegin;
            while select forupdate orderTrans
                where  orderTrans.OrderId == orderId
                    && (orderTrans.ExpeditionStatus
                                == WMSExpeditionStatus::Registered
                        || orderTrans.ExpeditionStatus
                                == WMSExpeditionStatus::Activated
                        || orderTrans.ExpeditionStatus
                                == WMSExpeditionStatus::Started)
                    && orderTrans.PdsCWZeroCWLine == NoYes::Yes
            {
                orderTrans.deleteAndReduceOrderQuantity();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpInventTransChildReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes inventory transaction child references to this output order, if the output order is complete.
    /// </summary>
    public void cleanUpInventTransChildReferences()
    {
        if (this.status != WMSOrderStatus::Complete 
            || !this.Qty
            || !this.hasChildReferenceInventTrans())
        {
            return;
        }

        InventMovement movement = this.type().inventMovement();
        InventMovement movementParent = movement.parentMovement();

        InventQty qty = this.Qty;
        InventQty qtyUnit = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(this.ItemId,
																								  this.InventDimId,
																								  qty,
																								  movementParent.inventTable().inventUnitId(),
																								  movementParent.transUnitId(),
																								  NoYes::Yes);

        InventUpd_ChildReference childReference = InventUpd_ChildReference::newParameters(
            movement, 
            qty,
            qtyUnit, 
            false, 
            '', 
            this.PdsCWQty);
        childReference.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChildReferenceInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this output order is referenced by any inventory transactions.
    /// </summary>
    /// <returns>true if this output order is referenced by any inventory transactions; otherwise, false.</returns>
    public boolean hasChildReferenceInventTrans()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select firstonly RecId from inventTrans
            where inventTrans.TransChildRefId   == this.OrderId
                && inventTrans.TransChildType   == InventTransChildType::WMSOrder
            exists join inventTransOrigin
                where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                    && inventTransOrigin.InventTransId  == this.InventTransId;

        return (inventTrans.RecId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS123901</DeveloperDocumentation>
	<Label>@SYS50647</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>orderId</TitleField1>
	<TitleField2>itemId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>WMSOrderIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Inventory</Modules>
	<PrimaryIndex>WMSOrderIdx</PrimaryIndex>
	<ReplacementKey>WMSOrderIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>orderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>orderId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CatchWeight</Name>
			<Label>@SYS345071</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyNoShipment</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyRequested</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Delivery</Name>
			<Label>@SYS4508</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>dlvDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dlvMode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>dlvTerm</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DeliveryAddress</Name>
			<Label>@SYS7924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DeliveryPostalAddress</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>orderId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>type</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Internal</Name>
			<Label>@SYS15017</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>toInventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>postTransfer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>InventoryOrderQty</Name>
			<Label>@SYS117567</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qtyRegistered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyActivated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyStarted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyPicked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyStaged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyLoaded</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyCanceled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWOrderQty</Name>
			<Label>@PDS83</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyRegistered</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyActivated</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyStarted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyPicked</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyStaged</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyLoaded</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyCompleted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWQtyCanceled</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWQuantity</Name>
			<Label>@GLS180298</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PdsCWQtyNoShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS14578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>qtyRequested</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>qtyNoShipment</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>References</Name>
			<Label>@SYS14018</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>itemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>inventTransRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>customer</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Shipment</Name>
			<Label>@SYS50389</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>dlvDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ShipmentGroupingReference</Name>
			<Label>@SYS4000068</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>shipmentGroupingTransType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>shipmentGroupingRefId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS25587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>status</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transport</Name>
			<Label>@SYS3843</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>freightZone</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FreightSlipType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>customer</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>WMSCustomer</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DeliveryPostalAddress</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>LogisticsPostalAddressRecId</ExtendedDataType>
			<Label>@SYS7924</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>dlvDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSDlvDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>dlvMode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvModeId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>dlvTerm</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustDlvTermId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FreightSlipType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightSlipType</ExtendedDataType>
			<EnumType>FreightSlipType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>freightZone</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustFreightZoneId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>inventTransRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>inventTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>itemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemIdInventoried</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>optimizedPicking</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOptimizedPicking</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>orderId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSOrderId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyNoShipment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS1119</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PdsCWQtyRequested</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PdsCWInventQty</ExtendedDataType>
			<Label>@PDS1121</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>postTransfer</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS6098</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qty</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS117567</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qtyNoShipment</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventQty</ExtendedDataType>
			<Label>@SYS54109</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>qtyRequested</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSRequestedQty</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>shipmentGroupingRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentGroupingRefId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>shipmentGroupingTransType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WMSShipmentGroupingTransType</ExtendedDataType>
			<EnumType>InventTransType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>status</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSOrderStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>toInventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>type</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>WMSOrderType</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>InventTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>inventTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>WMSOrderIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>orderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>StatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>status</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>orderId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>customer</Name>
					<Field>customer</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvMode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvMode</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>dlvMode</Name>
					<Field>dlvMode</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DlvTerm</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DlvTerm</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>dlvTerm</Name>
					<Field>dlvTerm</Field>
					<RelatedField>Code</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123902</EntityRelationshipRole>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123453</EntityRelationshipRole>
			<RelatedTable>InventJournalTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventQuarantineOrder</Name>
			<EntityRelationshipRole>@SYS123857</EntityRelationshipRole>
			<RelatedTable>InventQuarantineOrder</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>itemId</Name>
					<Field>itemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransferLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123837</EntityRelationshipRole>
			<RelatedTable>InventTransferLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123903</EntityRelationshipRole>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LogisticsPostalAddress</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LogisticsPostalAddress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DeliveryPostalAddress</Name>
					<Field>DeliveryPostalAddress</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdBOM</Name>
			<EntityRelationshipRole>@SYS123904</EntityRelationshipRole>
			<RelatedTable>ProdBOM</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ProdJournalBOM</Name>
			<EntityRelationshipRole>@SYS123839</EntityRelationshipRole>
			<RelatedTable>ProdJournalBOM</RelatedTable>
			<RelationshipType>Link</RelationshipType>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PurchLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123841</EntityRelationshipRole>
			<RelatedTable>PurchLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>SalesLine</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123905</EntityRelationshipRole>
			<RelatedTable>SalesLine</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>inventTransId</Name>
					<Field>inventTransId</Field>
					<RelatedField>InventTransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ToInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ToInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WMSOrder</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>toInventDimId</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>toInventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>