<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TMSRoute extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLoadToEntireRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates load segment records
    /// </summary>
    /// <param name="_loadId">
    /// Load id
    /// </param>
    /// <param name="_sequence">
    /// Sequence from segment record
    /// </param>
    public void addLoadToEntireRoute(WHSLoadId _loadId, TMSSequence _sequence)
    {
        WHSLoadTable        loadTable = WHSLoadTable::find(_loadId);
        TMSRouteSegment     routeSegment;
        TMSRouteSegmentLoad segmentLoad;

        while select DestinationLocation, OriginLocation, Sequence from routeSegment
            where routeSegment.RouteCode == this.RouteCode &&
                 (routeSegment.Sequence  >= 100 ||
                  routeSegment.Sequence  == _sequence)
        {
            if (!TMSRouteSegmentLoad::exist(this.RouteCode, routeSegment.Sequence, _loadId))
            {
                segmentLoad.RouteCode               = this.RouteCode;
                segmentLoad.Sequence                = routeSegment.Sequence;
                segmentLoad.Id                      = loadTable.LoadId;
                segmentLoad.OriginPostalCode        = routeSegment.originPostalAddress().ZipCode;
                segmentLoad.DestinationPostalCode   = routeSegment.destinationPostalAddress().ZipCode;
                segmentLoad.BillOfLadingId          = loadTable.BillOfLadingId;
                segmentLoad.BookingNum              = loadTable.BookingNum;
                segmentLoad.VoyageNum               = loadTable.VoyageNum;
                segmentLoad.VesselName              = loadTable.VesselName;
                segmentLoad.InspectionSeal          = loadTable.InspectionSeal;
                segmentLoad.HouseBill               = loadTable.HouseBill;
                segmentLoad.SailUTCDateTime         = loadTable.SailUTCDateTime;
                segmentLoad.eta                     = loadTable.eta;
                segmentLoad.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOriginToRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Associates origin to route
    /// </summary>
    /// <param name="_loadId">
    /// Load id value
    /// </param>
    public void addOriginToRoute(WHSLoadId _loadId)
    {
        TMSSequence             sequence;
        TMSRouteSegment         manualSegment;
        TMSRouteSegment         segment;
        WHSLoadTable            loadTable = WHSLoadTable::find(_loadId, true);
        SalesTable              salesTable;
        VendTable               vendTable;
        TMSAddressPhone         addressPhone;

        ttsbegin;

        // note: manual flag for a segment is set for inbound direction and for segments based on a route plan
        select firstonly manualSegment
            order by Sequence
            where manualSegment.RouteCode   == this.RouteCode &&
                  manualSegment.Manual      == NoYes::Yes;

        sequence = (select firstonly Sequence from tmsRouteSegment
                        order by Sequence desc
                        where tmsRouteSegment.RouteCode  == this.RouteCode
                            && tmsRouteSegment.Sequence   <  manualSegment.Sequence).Sequence + 1;

        segment.RouteCode                           = this.RouteCode;
        segment.Sequence                            = sequence;
        segment.CurrencyCode                        = manualSegment.CurrencyCode;
        segment.DestinationName                     = manualSegment.OriginName;
        segment.DestinationLocation                 = manualSegment.OriginLocation;
        segment.DestinationResidential              = manualSegment.OriginResidential;
        segment.DestinationHubCode                  = manualSegment.OriginHubCode;
        segment.DestinationVendorCode               = manualSegment.OriginVendorCode;
        segment.DestinationVendorInvoiceCode        = manualSegment.OriginVendorInvoiceCode;
        segment.DestinationResponsibleForPayment    = manualSegment.OriginResponsibleForPayment;
        segment.Manual                              = NoYes::No;
        segment.VesselName                          = loadTable.VesselName;
        segment.VoyageNum                           = loadTable.VoyageNum;
        segment.SailUTCDateTime                     = loadTable.SailUTCDateTime;
        segment.BookingNum                          = loadTable.BookingNum;

        if (loadTable.LoadDirection == WHSLoadDirection::Inbound)
        {
            vendTable           = VendTable::find(loadTable.AccountNum);
            addressPhone        = TMSAddressPhone::initFromVendAccount(vendTable.AccountNum);
            segment.VendorCode  = vendTable.AccountNum;
        }
        else
        {
            salesTable      = SalesTable::find(loadTable.OrderNum);
            addressPhone    = TMSAddressPhone::initFromCustAccount(salesTable.CustAccount);
        }

        segment.OriginName      = addressPhone.parmName();
        segment.OriginLocation  = LogisticsPostalAddress::findRecId(addressPhone.parmPostalAddressRecId()).Location;

        if (this.shouldOriginRouteSegmentBeInserted(segment))
        {
            if (!segment.validateWrite())
            {
                throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRouteSegment)));
            }
            else
            {
               segment.insert();
            }
        }

        this.addLoadToEntireRoute(_loadId, segment.Sequence);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldOriginRouteSegmentBeInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the passed <c>TMSRouteSegment</c> record should be inserted as a origin route segment.
    /// </summary>
    /// <param name = "_routeSegment">
    /// A <c>TMSRouteSegment</c> record being checked.
    /// </param>
    /// <returns>
    /// true if the origin route segment should be inserted; otherwise, false.
    /// </returns>
    public boolean shouldOriginRouteSegmentBeInserted(TMSRouteSegment _routeSegment)
    {
        return _routeSegment.OriginName
            && _routeSegment.OriginName != _routeSegment.DestinationName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addShipmentToSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates segment shipment records
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id
    /// </param>
    /// <param name="_isScheduledRoute">
    /// Identifies whether or not a segment is a scheduled route
    /// </param>
    public void addShipmentToSegments(WHSShipmentId _shipmentId,
                                      boolean       _isScheduledRoute = false)
    {
        WHSShipmentTable        shipmentTable;
        TMSRouteSegmentLoadLine segmentLoadLine;
        WHSLoadLine             loadLine;

        shipmentTable = WHSShipmentTable::find(_shipmentId);

        ttsbegin;

        if (_isScheduledRoute && !TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
        {
            //get the lowest sequence from the segmentLines
            select firstOnly Sequence from segmentLoadLine
                Order by Sequence
                join TableId from loadLine
                    where loadLine.recId == segmentLoadLine.loadLineRecId
                    && loadLine.loadId == shipmentTable.loadId;

            this.addSegmentShipment(shipmentTable, segmentLoadLine.Sequence);
        }
        else
        {
            while select segmentLoadLine
                join LoadId from loadLine
                group by segmentLoadLine.Sequence
                where segmentLoadLine.LoadLineRecId == loadLine.RecId
                    && loadLine.LoadId              == shipmentTable.LoadId
                    && (loadLine.ShipmentId == shipmentTable.ShipmentId || !TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
            {
                this.addSegmentShipment(shipmentTable, segmentLoadLine.Sequence);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        if (this.hasRouteSegmentLoad())
        {
            ttsbegin;
            TMSRouteSegmentLoad     routeSegmentLoad;

            while select forupdate routeSegmentLoad
            where routeSegmentLoad.RouteCode == this.RouteCode
            {
                routeSegmentLoad.delete();
            }
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayDropOffPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the zip code tied to the segment
    /// </summary>
    /// <returns>
    /// Zip code tied to segment
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSPostalCode displayDropOffPostalCode()
    {
        TMSRouteSegment             routeSegment;
        LogisticsPostalAddress      postalAddress;

        select firstonly RecId from routeSegment
            order by Sequence desc
            where routeSegment.RouteCode        == this.RouteCode
            join ZipCode from postalAddress
                where postalAddress.Location    == routeSegment.DestinationLocation;

        return postalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayHasChargeOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays true if charges are overriden on the route, false otherwise.
    /// </summary>
    /// <returns>
    /// True if charges are overriden on the route, false otherwise.
    /// </returns>
    display boolean displayHasChargeOverride()
    {
        return (select firstonly RecId from tmsRouteOverride where tmsRouteOverride.RouteCode == this.RouteCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayPickUpPostalCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the pickup zip code tied to the segment
    /// </summary>
    /// <returns>
    /// Zip code of origin tied to segment
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSPostalCode displayPickUpPostalCode()
    {
        TMSRouteSegment             routeSegment;
        LogisticsPostalAddress      postalAddress;

        select firstonly RecId from routeSegment
            order by Sequence asc
            where routeSegment.RouteCode        == this.RouteCode
            join ZipCode from postalAddress
                where postalAddress.Location    == routeSegment.OriginLocation;

        return postalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalCustomerRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total rate to be paid by customer.
    /// </summary>
    /// <returns>
    /// The total rate to be paid by customer for the route.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSCustomerRate displayTotalCustomerRate()
    {
        TMSCustomerRate          ret = 0;
        TmsRouteSegment          tmsRouteSegment;
        TmsRouteAccessorialTable tmsRouteAccessorialTable;
        TMSRouteOverride         tmsRouteOverride;

        if (this.displayHasChargeOverride())
        {
            while select sum(TotalRate), CurrencyCode from tmsRouteOverride
                    group by CurrencyCode
                    where tmsRouteOverride.RouteCode == this.RouteCode
            {
                ret += TMSGlobal::convertCurrency(tmsRouteOverride.CurrencyCode, this.CurrencyCode, tmsRouteOverride.TotalRate);
            }
        }
        else
        {
            while select sum(CustomerRate), CurrencyCode from tmsRouteSegment
                    group by CurrencyCode
                    where tmsRouteSegment.RouteCode == this.RouteCode
            {
                ret += TMSGlobal::convertCurrency(tmsRouteSegment.CurrencyCode, this.CurrencyCode, tmsRouteSegment.CustomerRate);
            }

            if (this.RouteStatus != TMSRouteStatus::Confirmed)
            {
                while select sum(CustomerRate), CurrencyCode from tmsRouteAccessorialTable
                    group by CurrencyCode
                    where tmsRouteAccessorialTable.RouteCode == this.RouteCode
                {
                    ret += TMSGlobal::convertCurrency(tmsRouteAccessorialTable.CurrencyCode, this.CurrencyCode, tmsRouteAccessorialTable.CustomerRate);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalMiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays total miles on the route.
    /// </summary>
    /// <returns>
    /// The total miles on the route.
    /// </returns>
    display TMSMiles displayTotalMiles()
    {
        return this.totalMiles();
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays total rate charged for the route.
    /// </summary>
    /// <returns>
    /// The total rate charged for the route.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSRate displayTotalRate()
    {
        TMSRate             ret;
        TMSRouteRateDetail  routeRateDetail;

        if (this.RouteStatus == TMSRouteStatus::Confirmed)
        {
            while select sum(RateCur), CurrencyCode from routeRateDetail
                group by CurrencyCode
                where routeRateDetail.RouteCode == this.RouteCode
                   && routeRateDetail.AccessorialAssignmentLevel == TMSAccessorialAssignmentLevel::Shipment
            {
                ret += TMSGlobal::convertCurrency(routeRateDetail.CurrencyCode, this.CurrencyCode, routeRateDetail.RateCur);
            }
        }
        else
        {
            while select sum(RateCur), CurrencyCode from routeRateDetail
                group by CurrencyCode
                where routeRateDetail.RouteCode == this.RouteCode
            {
                ret += TMSGlobal::convertCurrency(routeRateDetail.CurrencyCode, this.CurrencyCode, routeRateDetail.RateCur);
            }
        }

        if (this.RouteStatus != TMSRouteStatus::Confirmed)
        {
            TmsRouteAccessorialTable tmsRouteAccessorialTable;
            
            while select sum(RateCur), CurrencyCode from tmsRouteAccessorialTable
                  group by CurrencyCode
                  where tmsRouteAccessorialTable.RouteCode == this.RouteCode
            {
                ret += TMSGlobal::convertCurrency(tmsRouteAccessorialTable.CurrencyCode, this.CurrencyCode, tmsRouteAccessorialTable.RateCur);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalShipperRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the total rate to be paid by shipper.
    /// </summary>
    /// <returns>
    /// The total rate to be paid by shipper.
    /// </returns>
    [SysClientCacheDataMethodAttribute(true)]
    display TMSShipperRate displayTotalShipperRate()
    {
        TMSShipperRate           ret = 0;
        TmsRouteSegment          tmsRouteSegment;
        TmsRouteAccessorialTable tmsRouteAccessorialTable;

        TMSTransportationTender tmsTransportationTender = TMSTransportationTender::find(this.TransportationOrderNum);

        if (TMSApplyTransportationTenderRateToRouteSegmentFlight::instance().isEnabled()
            && tmsTransportationTender.RecId
            && tmsTransportationTender.TenderRefType == TMSTenderRefType::Route
            && tmsTransportationTender.TenderStatus == TMSTenderStatus::Accepted)
        {
            if (tmsTransportationTender.CurrencyCode)
            {
                ret = TMSGlobal::convertCurrency(tmsTransportationTender.CurrencyCode, this.CurrencyCode, tmsTransportationTender.ConfirmedRate);
            }
        }
        else
        {
            while select sum(ShipperRate), CurrencyCode from tmsRouteSegment
                group by CurrencyCode
                where tmsRouteSegment.RouteCode == this.RouteCode
            {
                ret += TMSGlobal::convertCurrency(tmsRouteSegment.CurrencyCode, this.CurrencyCode, tmsRouteSegment.ShipperRate);
            }
        }

        if (this.RouteStatus != TMSRouteStatus::Confirmed)
        {
            while select sum(ShipperRate), CurrencyCode from tmsRouteAccessorialTable
                group by CurrencyCode
                where tmsRouteAccessorialTable.RouteCode == this.RouteCode
            {
                ret += TMSGlobal::convertCurrency(tmsRouteAccessorialTable.CurrencyCode, this.CurrencyCode, tmsRouteAccessorialTable.ShipperRate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayTotalTransitTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the number of days in transit on the route.
    /// </summary>
    /// <returns>
    /// The number of transit days on the route.
    /// </returns>
    display TMSTransitTime displayTotalTransitTime()
    {
        return this.totalTransitTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasRouteSegmentLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if there is a load tied to the current route
    /// </summary>
    /// <param name="_loadId">
    ///     Optional parameter to look for a specific load tied to the current route.
    /// </param>
    /// <returns>
    /// Boolean indicating if a load exists for route
    /// </returns>
    public boolean hasRouteSegmentLoad(WHSLoadId _loadId = '')
    {
        TMSRouteSegmentLoad     routeSegmentLoad;
        boolean                 ret;

        select firstonly RecId from routeSegmentLoad
            where routeSegmentLoad.RouteCode == this.RouteCode
                && (routeSegmentLoad.Id      == _loadId
                || !_loadId);

        ret = routeSegmentLoad.RecId ? true : false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageIdxOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays an image index if the route has charges override.
    /// </summary>
    /// <param name="_route">
    /// <c>TMSRoute</c> record to be check if charges are overriden.
    /// </param>
    /// <returns>
    /// Zero index if the charges are overriden, -1 otherwise.
    /// </returns>
    display int imageIdxOverride(TMSRoute _route)
    {
        return _route.displayHasChargeOverride() ? 0 : -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        if (this.CurrencyCode == '')
        {
            this.CurrencyCode = CompanyInfoHelper::standardCurrency();
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLoad</Name>
				<Source><![CDATA[
    private void initFromLoad(WHSLoadTable _loadTable)
    {
        this.InventSiteId       = _loadTable.InventSiteId;
        this.InventLocationId   = _loadTable.InventLocationId;
        this.Manual             = NoYes::Yes;
        this.ShipUTCDateTime    = _loadTable.LoadSchedShipUTCDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromLoad</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new route from a load.  Also creates a segment and the linking <c>TMSRouteSegmentLoad</c> record.
    /// </summary>
    /// <param name = "_loadTable">The load we want to use to create a route.</param>
    public void createFromLoad(WHSLoadTable _loadTable)
    {
        ttsbegin;

        this.initFromLoad(_loadTable);
        this.insert();

        TMSRouteSegment segment = TMSRouteSegment::createFromRouteAndLoad(this, _loadTable);

        this.addLoadToEntireRoute(_loadTable.LoadId, segment.Sequence);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSegmentShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts segment shipment records
    /// </summary>
    /// <param name="_shipmentTable">
    ///  <c>WHSShipmentTable</c> buffer
    /// </param>
    /// <param name="_sequence">
    ///  The sequence of the segment.
    /// </param>
    private void addSegmentShipment(
        WHSShipmentTable        _shipmentTable,
        TMSSequence             _sequence)
    {
        TMSRouteSegmentShipment segmentShipment;
        TMSRouteSegment         routeSegment;

        routeSegment                            = TMSRouteSegment::find(this.RouteCode, _sequence);

        segmentShipment.RouteCode               = this.RouteCode;
        segmentShipment.Sequence                = _sequence;
        segmentShipment.Id                      = _shipmentTable.ShipmentId;
        segmentShipment.OriginPostalCode        = routeSegment.originPostalAddress().ZipCode;
        segmentShipment.DestinationPostalCode   = routeSegment.destinationPostalAddress().ZipCode;
        segmentShipment.DlvTermId               = _shipmentTable.DlvTermId;
        segmentShipment.ActualWeight            = _shipmentTable.displayTotalWeight();

        if (!segmentShipment.validateWrite())
        {
            throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRouteSegmentShipment)));
        }
        else
        {
            segmentShipment.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRouteConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms route tied to load
    /// </summary>
    /// <param name="_loadId">
    /// Load id to be used in confirmation
    /// </param>
    /// <param name="_shipDateTime">
    /// Load shipment UTC date / time
    /// </param>
    /// <returns>
    /// true if route was ship confirmed; otherwise, false
    /// </returns>
    /// <exception cref="Exception::Error">
    /// No carrier assigned to this route segment.
    /// </exception>
    public boolean loadRouteConfirmation(
        WHSLoadId          _loadId,
        TMSApptUTCDateTime _shipDateTime)
    {
        TMSProcessXML_Base  processXML;
        TMSCommProxy        commProxy  = new TMSCommProxy();
        TMSRouteSegment     segment;
        WHSLoadTable        loadTable;
        WHSLoadLine         loadLine;
        Common              orderHeader;
        TMSRouteSegmentLoad segmentLoad;
        boolean             ret;

        select firstonly loadTable
            where loadTable.LoadId    == _loadId &&
                  loadTable.RouteCode == this.RouteCode;

        if (loadTable.RecId == 0)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        loadLine = WHSLoadLine::findFirstForLoadId(loadTable.LoadId);

        orderHeader = loadline.orderHeader();

        while select segment
            join Sequence, Id from segmentLoad
            where segment.RouteCode      == this.RouteCode &&
                  segmentLoad.RouteCode  == this.RouteCode &&
                  segmentLoad.Sequence   == segment.Sequence &&
                  segmentLoad.Id         == loadtable.loadId
        {
            processXML = this.createProcessXML(
                TMSSourceDocument::construct(orderHeader),
                loadTable,
                segment,
                _shipDateTime,
                loadTable.effectiveGrossWeight());

            processXML.execute();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be executed when a field value is modified.
    /// </summary>
    /// <param name="_fieldName">
    /// Name of the field.
    /// </param>
    /// <param name="_arrayIndex">
    /// Array index of the field.
    /// </param>
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(TMSRoute, InventLocationId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
            case fieldStr(TMSRoute, InventSiteId):
                this.InventStorageDimMap::modifiedField(fieldNum(InventStorageDimMap, InventSiteId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total number of loads in the route.
    /// </summary>
    /// <returns>
    /// The total number of loads in the route.
    /// </returns>
    int numOfLoads()
    {
        TMSRouteSegmentLoad segmentLoad;
        int                 numOfLoads;

        if (this.RouteCode)
        {
            while select segmentLoad group by Id
                where segmentLoad.RouteCode == this.RouteCode
            {
                ++numOfLoads;
            }
        }

        return numOfLoads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the carrier code of the route.
    /// </summary>
    /// <returns>
    /// The carrier code of the route. If there are multiple carriers between segments, returns empty string.
    /// </returns>
    TMSCarrierCode routeCarrier()
    {
        TMSRouteSegment     routeSegment;
        TMSCarrierCode      ret;

        while select routeSegment
            group by routeSegment.CarrierCode
            where routeSegment.RouteCode == this.RouteCode
        {
            if (ret == '')
            {
                ret = routeSegment.CarrierCode;
            }
            else
            {
                ret = '';
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeCarrierService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds carrier service code of the route.
    /// </summary>
    /// <returns>
    /// The carrier service code of the route. If there are multiple carriers between segments, then it returns empty string.
    /// </returns>
    TMSCarrierServiceCode routeCarrierService()
    {
        TMSRouteSegment         routeSegment;
        TMSCarrierServiceCode   ret;

        while select routeSegment
            group by routeSegment.CarrierServiceCode
            where routeSegment.RouteCode == this.RouteCode
        {
            if (ret == '')
            {
                ret = routeSegment.CarrierServiceCode;
            }
            else
            {
                ret = '';
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms the route
    /// </summary>
    /// <param name="_shipDateMap">
    /// Map containing shipment dates
    /// </param>
    /// <returns>
    /// true if route was ship confirmed; otherwise, false
    /// </returns>
    /// <exception cref="Exception::Error">
    /// No carrier assigned to this route segment.
    /// </exception>
    public boolean routeConfirmation(Map _shipDateMap)
    {
        TMSProcessXML_Base  processXML;
        TMSCommProxy        commProxy  = new TMSCommProxy();
        TMSRouteSegment     segment;
        TMSRouteSegmentLoad load;
        WHSLoadTable        loadTable;
        WHSLoadLine         loadLine;
        Common              orderHeader;
        boolean             ret;
        TMSApptUTCDateTime  shipDateTime;

        while select segment
            where segment.RouteCode  == this.RouteCode
        {
            // Assumed one load per segment
            select firstonly loadTable
                exists join load
                where load.Id        == loadTable.LoadId &&
                      load.RouteCode == this.RouteCode  &&
                      load.Sequence  == segment.Sequence;

            if (loadTable.RecId == 0)
            {
                throw error(error::wrongUseOfFunction(funcName()));
            }

            loadLine = WHSLoadLine::findFirstForLoadId(loadTable.LoadId);

            orderHeader = loadline.orderHeader();

            if (!_shipDateMap || !_shipDateMap.exists(loadTable.LoadId))
            {
                throw error(_shipDateMap.elements() > 1 ? strFmt("@TRX1864", loadTable.LoadId, loadTable.RouteCode) : strFmt("@TRX2706", loadTable.LoadId));
            }

            shipDateTime = _shipDateMap.lookup(loadTable.LoadId);

            processXML = this.createProcessXML(
                TMSSourceDocument::construct(orderHeader),
                loadTable,
                segment,
                shipDateTime,
                loadTable.effectiveGrossWeight());

            processXML.execute();

            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRouteCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a new route code using number sequence of the TMSRouteCode.
    /// </summary>
    void setRouteCode()
    {
        this.RouteCode = NumberSeq::newGetNum(TMSParameters::numRefTMSRouteCode()).num();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalMiles</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total miles on the route.
    /// </summary>
    /// <returns>
    /// The total miles on the route.
    /// </returns>
    TMSMiles totalMiles()
    {
        return (select sum(Miles) from tmsRouteSegment where tmsRouteSegment.RouteCode == this.RouteCode).Miles;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTransitTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total transit time on the route.
    /// </summary>
    /// <returns>
    /// The total transit time on the route.
    /// </returns>
    TMSTransitTime totalTransitTime()
    {
        return (select sum(TransitTime) from tmsRouteSegment where tmsRouteSegment.RouteCode == this.RouteCode).TransitTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && this.hasRouteSegmentLoad())
        {
            ret = Box::yesNo("@TRX2355", DialogButton::Ok) == DialogButton::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(TMSRoute, InventLocationId):
                ret = this.InventStorageDimMap::validateField(fieldNum(InventStorageDimMap, InventLocationId));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a specific <c>tmsRoute</c> record exists.
    /// </summary>
    /// <param name="_tmsRouteCode">
    /// Route code of the record.
    /// </param>
    /// <returns>
    /// True if the record exists.
    /// </returns>
    public static boolean exist(TMSRouteCode _tmsRouteCode)
    {
        return (_tmsRouteCode) &&
               (select firstonly tmsRoute
                    where tmsRoute.RouteCode == _tmsRouteCode).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specific <c>TMSRoute</c> record with given parameters.
    /// </summary>
    /// <param name="_tmsRouteCode">
    /// Route code of the record.
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether the record is selected for update.
    /// </param>
    /// <returns>
    /// The record that is searched for.
    /// </returns>
    public static TMSRoute find(TMSRouteCode _tmsRouteCode,
                                boolean      _forupdate = false)
    {
        TMSRoute    tmsRoute;

        if (_tmsRouteCode)
        {
            tmsRoute.selectForUpdate(_forupdate);

            select firstonly tmsRoute
                where tmsRoute.RouteCode == _tmsRouteCode;
        }

        return tmsRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unconfirms a route.
    /// </summary>
    /// <param name="_routeCode">
    /// Code of the route to be unconfirmed.
    /// </param>
    static void unConfirm(TMSRouteCode _routeCode)
    {
        ttsbegin;

        TMSRoute route = TMSRoute::find(_routeCode, true);

        if (route.RecId != 0)
        {
            TMSRouteMarkupTrans routeMarkupTrans;
            MarkupTrans markupTrans;

            select forupdate markupTrans
                exists join routeMarkupTrans
                where routeMarkupTrans.RouteCode == route.RouteCode
                    && markupTrans.RecId          == routeMarkupTrans.RefRecId;
                
            while (markupTrans)
            {
                markupTrans.delete();
                next markupTrans;
                if (markupTrans)
                {
                    markupTrans.reread();
                }
            }

            TMSFreightBillDetail freightBillDetail;
            delete_from freightBillDetail
                where freightBillDetail.RouteCode == _routeCode;

            TMSRouteRateDetail routeRateDetail;
            delete_from routeRateDetail
                where routeRateDetail.RouteCode == route.RouteCode;

            route.RouteStatus = TMSRouteStatus::None;
            route.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProcessXML</Name>
				<Source><![CDATA[
    private TMSProcessXML_Base createProcessXML(
        TMSSourceDocument   _tmsSourceDocument,
        WHSLoadTable        _loadTable,
        TMSRouteSegment     _segment,
        TMSApptUTCDateTime  _shipDateTime,
        TMSWeight           _weight)
    {
        TMSRecordType       recordType = TMSRecordType::Load;
        TMSProcessXML_Base  processXML = TMSProcessXML_Base::construct(recordType);
        WHSSTCCCode         whsSTCC;
        WHSLTLClassCode     whsLTL;

        _tmsSourceDocument.initializeProcessXML(processXML);
        processXML.parmRecordType(recordType);
        processXML.parmRouteConfigCode(this.RouteConfigCode);
        processXML.parmRouteGuideName(this.Name);
        processXML.parmRoutePlanName(this.RoutePlanName);
        processXML.parmRouteCode(this.RouteCode);

        processXML.parmInventSiteId(this.InventSiteId);
        processXML.parmInventLocationId(this.InventLocationId);

        processXML.parmManualApportionment(this.Manual);

        processXML.parmShipDateTime(_shipDateTime);

        processXML.parmId(_loadTable.LoadId);
        processXML.initShippingDimensions(
            _weight != 0 ? _weight : _loadTable.effectiveGrossWeight(),
            _loadTable.effectiveTotalVolumeInLoad(),
            _loadTable.displayTotalAmount(),
            _loadTable.tmsDisplayEquipmentCode());

        [whsSTCC,
        whsLTL]     = TMSAutoRouteAssignment::findLoadSTCCandLTL(_loadTable.LoadId);

        processXML.parmLTLClass(whsLTL);
        processXML.parmSTCC(whsSTCC);

        processXML.initFromSegment(_segment);

        processXML.parmTransportationTemplateId(_loadTable.TransportationTemplateId);

        return processXML;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    [Hookable(false)]
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>WHSandTMS</ConfigurationKey>
	<DeveloperDocumentation>@TRX1959</DeveloperDocumentation>
	<FormRef>TMSRouteWorkbench</FormRef>
	<Label>@TRX519</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>RouteCode</TitleField1>
	<TitleField2>ApptUTCDateTime</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RouteCodeIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>Transportation</Modules>
	<PrimaryIndex>RouteCodeIdx</PrimaryIndex>
	<ReplacementKey>RouteCodeIdx</ReplacementKey>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoutePlanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteConfigCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteGuideRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@WAX2277</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RouteCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventSiteId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventLocationId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RoutePlanName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteConfigCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RouteGuideRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Description</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Manual</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransportationOrderNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ShipUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>DeliveryUTCDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ApptUTCDateTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ApptUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSApptUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>DeliveryUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDeliveryUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSDescription</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventLocationId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventLocationId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventSiteId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventSiteId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Manual</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSManual</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
			<Label>@TRX715</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteCode</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteCode</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RouteConfigCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteConfigCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RouteGuideRecId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TMSRouteGuideRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>RoutePlanName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSName</ExtendedDataType>
			<Label>@TRX274</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RouteStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TMSRouteStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ShipUTCDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSShipUTCDateTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransportationOrderNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSTransportationOrderNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RouteSchedule</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TMSRouteScheduleRecId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MilkrunRoute</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LoadTemplateId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>WHSLoadTemplateId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RouteCodeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>RouteCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CurrencyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CurrencyCode</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventStorageDimMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>InventSiteId</MapField>
					<MapFieldTo>InventSiteId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventLocationId</MapField>
					<MapFieldTo>InventLocationId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyCode</Name>
					<SourceEDT>CurrencyCode</SourceEDT>
					<Field>CurrencyCode</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventLocation</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventLocation</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventLocationId</Name>
					<SourceEDT>InventLocationId</SourceEDT>
					<Field>InventLocationId</Field>
					<RelatedField>InventLocationId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>InventLocationIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventSite</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventSite</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventSiteId</Name>
					<SourceEDT>InventSiteId</SourceEDT>
					<Field>InventSiteId</Field>
					<RelatedField>SiteId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SiteIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRouteConfig</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TMSRouteConfig</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteConfigCode</Name>
					<SourceEDT>TMSRouteConfigCode</SourceEDT>
					<Field>RouteConfigCode</Field>
					<RelatedField>RouteConfigCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TMSRouteGuide</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TMSRouteGuide</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteGuideRecId</Name>
					<Field>RouteGuideRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TMSRouteSchedule</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>TMSRouteSchedule</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RouteSchedule</Name>
					<Field>RouteSchedule</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WHSLoadTemplate</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WHSLoadTemplate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LoadTemplateId</Name>
					<Field>LoadTemplateId</Field>
					<RelatedField>LoadTemplateId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>