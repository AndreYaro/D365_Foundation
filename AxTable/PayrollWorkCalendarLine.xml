<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkCalendarLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PayrollWorkCalendarLine extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateEarningCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value that the user entered into the <c>EarningCode</c> field.
    /// </summary>
    /// <returns>
    /// true if the value that was entered into the <c>EarningCode</c> field is valid by
    /// checking that earning code is of hours unit type and is base earning component; otherwise, false.
    /// </returns>
    private boolean validateEarningCode()
    {
        PayrollEarningCode payrollEarningCode;
        boolean fieldIsValid = true;

        if (this.EarningCode)
        {
            payrollEarningCode = PayrollEarningCode::find(this.EarningCode);

            if (payrollEarningCode.QuantityUnit != PayrollQuantityUnit::Hours)
            {
                fieldIsValid = checkFailed("@Payroll:TheUnitOfMeasureForTheEarningCodeThatYouSelectedIsNotHoursSe");
            }
        }

        return fieldIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean fieldIsValid;

        fieldIsValid = super(_fieldIdToCheck);

        if (fieldIsValid)
        {
            switch (_fieldIdToCheck)
            {
                case fieldNum(PayrollWorkCalendarLine, EarningCode):
                    fieldIsValid = this.validateEarningCode();
                    break;
            }
        }

        return fieldIsValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the specified record exists in the <c>PayrollWorkCalendarLine</c> table; if not, an error
    ///    message is displayed.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(PayrollWorkCalendarLineRecId _recId)
    {
        boolean ret = true;

        if (!PayrollWorkCalendarLine::exist(_recId))
        {
            ret = checkFailed(strFmt(PayrollWorkCalendarLine::txtNotExist(), tableId2name(tableNum(PayrollWorkCalendarLine))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new <c>PayrollWorkCalendarLine</c> row from a supplied earning code and work calendar date line value.
    /// </summary>
    /// <param name="_earningCode">
    ///    The <c>PayrollEarningCode</c> foreign key value for which a reference will be created.
    /// </param>
    /// <param name="_workCalendarDateLine">
    ///    The <c>WorkCalendarDateLine</c> foreign key value for which a reference will be created.
    /// </param>
    /// <returns>
    ///    If successful, a <c>PayrollWorkCalendarLineRecId</c> identifier that is not zero; otherwise, zero.
    /// </returns>
    /// <remarks>
    ///    It is intended to be used for edit methods on tables that will require a reference to a earning code.
    /// </remarks>
    public static PayrollWorkCalendarLineRecId createFromCode(PayrollEarningCodeRecId _earningCode, WorkCalendarDateLineRecId _workCalendarDateLine)
    {
        PayrollWorkCalendarLine  payrollWorkCalendarLine;

        payrollWorkCalendarLine.EarningCode = _earningCode;
        if (payrollWorkCalendarLine.validateField(fieldNum(PayrollWorkCalendarLine, EarningCode)))
        {
            payrollWorkCalendarLine.WorkCalendarDateLine = _workCalendarDateLine;
            if (payrollWorkCalendarLine.EarningCode != 0 && payrollWorkCalendarLine.WorkCalendarDateLine != 0)
            {
                ttsbegin;
                payrollWorkCalendarLine.insert();
                ttscommit;
            }
        }

        return payrollWorkCalendarLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByWorkCalendarLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the record in the table <c>PayrollWorkCalendarLine</c> for the provided <c>WorkCalendarDateLine</c> record value.
    /// </summary>
    /// <param name="_workCalendarDateLine">
    /// Value of <c>WorkCalendarDateLine</c> record to delete.
    /// </param>
    public static void deleteByWorkCalendarLine(WorkCalendarDateLineRecId _workCalendarDateLine)
    {
        PayrollWorkCalendarLine  payrollWorkCalendarLine;

        if (_workCalendarDateLine)
        {
            payrollWorkCalendarLine = PayrollWorkCalendarLine::findByWorkCalendarDateLine(_workCalendarDateLine, true);

            ttsbegin;
            payrollWorkCalendarLine.delete();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>PayrollWorkCalendarLine</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(PayrollWorkCalendarLineRecId _recId)
    {
        return _recId && (select firstonly RecId from payrollWorkCalendarLine
                    where payrollWorkCalendarLine.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollWorkCalendarLine</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    An enumeration value that indicates the concurrency setting to use on the table; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollWorkCalendarLine</c> table; otherwise, an empty record.
    /// </returns>
    public static PayrollWorkCalendarLine find(
        PayrollWorkCalendarLineRecId    _recId,
        boolean                         _forUpdate = false,
        ConcurrencyModel                _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkCalendarLine payrollWorkCalendarLine;

        payrollWorkCalendarLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkCalendarLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkCalendarLine
            where payrollWorkCalendarLine.RecId == _recId;

        return payrollWorkCalendarLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByWorkCalendarDateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PayrollWorkCalendarLine</c> table.
    /// </summary>
    /// <param name="_workCalendarDateLineRecId">
    ///    The value of the <c>WorkCalendarDateLine</c> field of the record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PayrollWorkCalendarLine</c> table.
    /// </returns>
    public static PayrollWorkCalendarLine findByWorkCalendarDateLine(
        WorkCalendarDateLineRecId   _workCalendarDateLineRecId,
        boolean                     _forUpdate = false,
        ConcurrencyModel            _concurrencyModel = ConcurrencyModel::Auto)
    {
        PayrollWorkCalendarLine payrollWorkCalendarLine;

        payrollWorkCalendarLine.selectForUpdate(_forUpdate );
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            payrollWorkCalendarLine.concurrencyModel(_concurrencyModel);
        }

        select firstonly payrollWorkCalendarLine
            where payrollWorkCalendarLine.WorkCalendarDateLine == _workCalendarDateLineRecId;

        return payrollWorkCalendarLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS329226";
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates a <c>PayrollWorkCalendarLine</c> row from a supplied earning code and work calendar date line value.
    /// </summary>
    /// <param name="_earningCode">
    ///    The <c>PayrollEarningCode</c> foreign key value for which a reference will be created.
    /// </param>
    /// <param name="_workCalendarDateLine">
    ///    The <c>WorkCalendarDateLine</c> foreign key value for which a reference will be created.
    /// </param>
    /// <remarks>
    ///    It is intended to be used from edit methods on tables that will require a reference to a earning
    ///    code.
    ///    If the update will result in blank code (zero value), the related <c>PayrollWorkCalendarLine</c> row
    ///    will be deleted and the return value will be set to zero. This will indicate the reference no
    ///    longer exists.
    /// </remarks>
    public static void updateCode(PayrollEarningCodeRecId _earningCode, WorkCalendarDateLineRecId _workCalendarDateLine)
    {
        #OCCRetryCount
        PayrollWorkCalendarLine  payrollWorkCalendarLine;

        try
        {
            payrollWorkCalendarLine = PayrollWorkCalendarLine::findByWorkCalendarDateLine(_workCalendarDateLine, true);
            if (payrollWorkCalendarLine.RecId == 0)
            {
                return;
            }

            if (_earningCode != 0)
            {
                payrollWorkCalendarLine.EarningCode = _earningCode;
                if (payrollWorkCalendarLine.validateField(fieldNum(PayrollWorkCalendarLine, EarningCode)))
                {
                    ttsbegin;
                    payrollWorkCalendarLine.write();
                    ttscommit;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>HRMAdministrationPayrollInfo</ConfigurationKey>
	<DeveloperDocumentation>@Payroll:ThePayrollworkcalendarlineTableContainsTheAssociatedEarningC</DeveloperDocumentation>
	<Label>@Payroll:WorkCalendarDateLineEarningCode</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>WorkCalendarDateLine</TitleField1>
	<TitleField2>EarningCode</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>Payroll</Modules>
	<ReplacementKey>WorkCalendarDateLineIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WorkCalendarDateLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WorkCalendarDateLine</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>EarningCode</Name>
			<Label>@Payroll:EarningCode4</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>EarningCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>EarningCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PayrollEarningCodeRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkCalendarDateLine</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WorkCalendarDateLineRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>WorkCalendarDateLineIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>WorkCalendarDateLine</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PayrollEarningCode</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PayrollEarningCode</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PayrollEarningCode</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>PayrollEarningCode_PayrollWorkCalendarLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>EarningCode</Name>
					<Field>EarningCode</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WorkCalendarDateLine</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>WorkCalendarDateLine</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCalendarDateLine</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkCalendarDateLine_PayrollWorkCalendarLine</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkCalendarDateLine</Name>
					<SourceEDT>RecId</SourceEDT>
					<Field>WorkCalendarDateLine</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>