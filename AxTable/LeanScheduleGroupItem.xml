<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanScheduleGroupItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanScheduleGroupItem extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        super();
        LeanScheduleGroupCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LeanScheduleGroupItem</c> record.
    /// </summary>
    public void initValue()
    {
        super();
        this.ThroughputRatio = 1.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        public void insert()
    {
        super();
        LeanScheduleGroupCache::construct().clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
        public void update()
    {
        if (this.ThroughputRatio != this.orig().ThroughputRatio)
        {
            LeanScheduleGroupCache::construct().clearCache();
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the uniqueness of an item given a new lean location.
    /// </summary>
    /// <param name="_newWorkCell">
    ///    The new work cell.
    /// </param>
    /// <returns>
    ///    true if the item is still unique; otherwise, false.
    /// </returns>
    public boolean validateLocation(RefRecId _newWorkCell)
    {
        LeanScheduleGroupEntrySingle leanScheduleGroupEntrySingle;
        LeanScheduleGroupEntryGroup  leanScheduleGroupEntryGroup;
        LeanScheduleGroup            leanScheduleGroup;
        boolean                      result = false;

        switch (this.EntryType)
        {
            case LeanScheduleGroupItemType::Group:
                leanScheduleGroupEntryGroup = LeanScheduleGroupEntryGroup::findLeanScheduleGroupItem(this.RecId);
                result                      = leanScheduleGroupEntryGroup.validateAllocationId(_newWorkCell);
                break;

            case LeanScheduleGroupItemType::Item:
                leanScheduleGroupEntrySingle = LeanScheduleGroupEntrySingle::findLeanScheduleGroupItem(this.RecId);
                leanScheduleGroup            = LeanScheduleGroup::find(this.ScheduleGroup);

                // this is not being persisted, done for the sake of validation
                leanScheduleGroup.WorkCell = _newWorkCell;
                result                     = leanScheduleGroupEntrySingle.validateUniqueness(leanScheduleGroup);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (!this.ThroughputRatio)
        {
            ret = ret && checkFailed("@SYS135094");
        }
        else
        {
            if (this.ThroughputRatio <= 0)
            {
                ret = ret && checkFailed("@SYS135096");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>LeanScheduleGroupItem</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LeanScheduleGroupItem</c> record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RecId _recId)
    {
        return _recId &&
               (select firstonly RecId from leanScheduleGroupItem
                    where leanScheduleGroupItem.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanScheduleGroupItem</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LeanScheduleGroupItem</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanScheduleGroupItem</c> table; otherwise, an empty record.
    /// </returns>
    public static LeanScheduleGroupItem find(
        RefRecId _recId,
        boolean  _forUpdate = false)
    {
        LeanScheduleGroupItem leanScheduleGroupItem;

        if (_recId)
        {
            leanScheduleGroupItem.selectForUpdate(_forUpdate);

            select firstonly leanScheduleGroupItem
                where leanScheduleGroupItem.RecId == _recId;
        }

        return leanScheduleGroupItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS325882</DeveloperDocumentation>
	<FormRef>LeanScheduleGroup</FormRef>
	<Label>@SYS132035</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>EntryType</TitleField1>
	<TitleField2>ScheduleGroup</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>MasterPlanning</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LeanScheduleGroupEntryGroup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanScheduleGroupEntryGroup</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>LeanScheduleGroupEntrySingle</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LeanScheduleGroupEntrySingle</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ThroughputRatio</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS131988</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ScheduleGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LeanScheduleGroupItem</Name>
			<Label>@SYS131926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ThroughputRatio</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>EntryType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>EntryType</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Mandatory>Yes</Mandatory>
			<EnumType>LeanScheduleGroupItemType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ScheduleGroup</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS131901</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ThroughputRatio</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanThroughputRatio</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FK_ScheduleGroup</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ScheduleGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ScheduleGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>LeanScheduleGroup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ScheduleGroup</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ScheduleGroupItem</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ScheduleGroup</Name>
					<Field>ScheduleGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>