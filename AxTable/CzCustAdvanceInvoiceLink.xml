<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzCustAdvanceInvoiceLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CzCustAdvanceInvoiceLink extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>advanceInvoiceTable</Name>
				<Source><![CDATA[
    public CzAdvanceInvoiceTable advanceInvoiceTable(
        CompanyId _company  = this.InvoiceCompany,
        RefRecId  _refRecId = this.AdvanceInvoiceRecId)
    {
        return CzCustAdvanceInvoiceTable::findByCompany(_company, _refRecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    public CustTrans custTrans(
        CompanyId _company   = this.PaymentCompany,
        Voucher   _voucher   = this.Voucher,
        TransDate _transDate = this.TransDate)
    {
        CustTrans     custTrans;
        CustTransOpen custTransOpen;

        changecompany(_company)
        {
            // find open custTrans if possible
            // there can be several closed prepayment custTrans'es but only one open
            select firstonly custTrans
                where custTrans.Voucher   == _voucher &&
                      custTrans.TransDate == _transDate &&
                      custTrans.Prepayment
            outer join RecId from custTransOpen
                order by custTransOpen.RecId desc
                where custTransOpen.RefRecId == custTrans.RecId;
        }

        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        CzCustAdvanceInvoiceTable advanceInvoiceTable;
        CustTrans                 paymentTrans;
        LedgerJournalTrans        paymentJournalTrans;

        CzCustAdvanceInvoiceLink  link;
        CzCustAdvanceInvoiceTable advanceInvoiceTableOther;

        Set                       currencySet  = new Set(Types::String);
        AmountCur                 totalAmountCUR = 0;
        AmountMST                 totalAmountMST = 0;

        CurrencyCode              paymentCurrency;
        AmountCur                 remainAmountCUR;
        AmountMST                 remainAmountMST;
        Voucher                   paymentVoucher;
        TransDate                 paymentTransDate;
        CompanyId                 paymentCompanyId;

        void add(AmountMST _amountMST, AmountCur _amountCur, CurrencyCode _currencyCode)
        {
            currencySet.add(_currencyCode);
            totalAmountCUR += _amountCur;
            totalAmountMST += _amountMST;
        }

        changecompany (this.InvoiceCompany)
        {
            advanceInvoiceTable = CzCustAdvanceInvoiceTable::findRecId(this.AdvanceInvoiceRecId);
        }

        changecompany (this.PaymentCompany)
        {
            paymentTrans        = CustTrans::findVoucherDate(this.Voucher, this.TransDate);

            if (paymentTrans)
            {
                paymentCurrency  = paymentTrans.CurrencyCode;
                remainAmountCUR  = paymentTrans.remainAmountCur();
                remainAmountMST  = paymentTrans.remainAmountMST();
                paymentVoucher   = paymentTrans.Voucher;
                paymentTransDate = paymentTrans.TransDate;
                paymentCompanyId = paymentTrans.company();
            }
            else
            {
                select firstonly paymentJournalTrans
                    where paymentJournalTrans.Voucher           == this.Voucher     &&
                          paymentJournalTrans.TransDate         == this.TransDate   &&
                          paymentJournalTrans.Prepayment                            &&
                         (paymentJournalTrans.AccountType       == LedgerJournalACType::Cust ||
                          paymentJournalTrans.OffsetAccountType == LedgerJournalACType::Cust);

                paymentCurrency  = paymentJournalTrans.CurrencyCode;
                remainAmountCUR  = paymentJournalTrans.amount();
                remainAmountMST  = paymentJournalTrans.calcAmountMST();
                paymentVoucher   = paymentJournalTrans.Voucher;
                paymentTransDate = paymentJournalTrans.TransDate;
                paymentCompanyId = paymentJournalTrans.company();

                if (paymentJournalTrans.AccountType != LedgerJournalACType::Cust)
                {
                    remainAmountCUR = -remainAmountCUR;
                    remainAmountMST = -remainAmountMST;
                }
            }
        }

        if (advanceInvoiceTable.CustPostingProfile)
        {
            if (advanceInvoiceTable.CurrencyCode == paymentCurrency)
            {
                if (advanceInvoiceTable.InvoiceAmount > - remainAmountCUR)
                {
                    error(strfmt("@GLS114111",
                                 advanceInvoiceTable.InvoiceId,
                                 advanceInvoiceTable.InvoiceAmount,
                                 advanceInvoiceTable.CurrencyCode,
                                 paymentVoucher,
                                 paymentTransDate,
                                 - remainAmountCUR));
                }
            }
            else
            {
                changecompany (this.InvoiceCompany)
                {
                    if (advanceInvoiceTable.amountMST(advanceInvoiceTable.InvoiceAmount) > - remainAmountMST)
                    {
                        error(strfmt("@GLS114111",
                                     advanceInvoiceTable.InvoiceId,
                                     advanceInvoiceTable.amountMST(advanceInvoiceTable.InvoiceAmount),
                                     CompanyInfoHelper::standardCurrency(),
                                     paymentVoucher,
                                     paymentTransDate,
                                     - remainAmountMST));
                    }
                }
            }

            while select link
                where link.Voucher        == paymentVoucher   &&
                      link.TransDate      == paymentTransDate &&
                      link.PaymentCompany == paymentCompanyId
            {
                changecompany (link.InvoiceCompany)
                {
                    advanceInvoiceTableOther = CzCustAdvanceInvoiceTable::findRecId(link.AdvanceInvoiceRecId);

                    add(advanceInvoiceTableOther.amountMSTOpen(),
                        advanceInvoiceTableOther.amountCurOpen(),
                        advanceInvoiceTableOther.CurrencyCode);
                }
            }

            changecompany (this.InvoiceCompany)
            {
                add(advanceInvoiceTable.amountMSTOpen(),
                    advanceInvoiceTable.amountCurOpen(),
                    advanceInvoiceTable.CurrencyCode);
            }

            add(remainAmountMST,
                remainAmountCUR,
                paymentCurrency);

            if (currencySet.elements() > 1)
            {
                if (totalAmountMST)
                {
                    error(strfmt("@GLS114147",
                                 paymentVoucher,
                                 paymentTransDate,
                                 - remainAmountMST,
                                 CompanyInfoHelper::standardCurrency(),
                                 - remainAmountMST + totalAmountMST));
                }
            }
            else
            {
                if (totalAmountCUR)
                {
                    error(strfmt("@GLS114147",
                                 paymentVoucher,
                                 paymentTransDate,
                                 - remainAmountCUR,
                                 paymentCurrency,
                                 - remainAmountCUR + totalAmountCUR));
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentPosted</Name>
				<Source><![CDATA[
    display CzPaymentPosted isPaymentPosted(CompanyId _company   = this.PaymentCompany,
                                            Voucher   _voucher   = this.Voucher,
                                            TransDate _transDate = this.TransDate)
    {
        CustTrans custTrans;
        ;

        changecompany(_company)
        {
            custTrans = CustTrans::findVoucherDate(_voucher, _transDate);
        }

        return custTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    public container paymentAmount(CompanyId _company   = this.PaymentCompany,
                                   Voucher   _voucher   = this.Voucher,
                                   TransDate _transDate = this.TransDate)
    {
        Amount       amount;
        CurrencyCode currency;

        CustTrans          custTrans;
        LedgerJournalTrans journalTrans;

        changecompany(_company)
        {
            if (this.isPaymentPosted(_company, _voucher, _transDate))
            {
                select firstonly sum(AmountCur), sum(SettleAmountCur), CurrencyCode from custTrans
                    group by CurrencyCode
                    where custTrans.Voucher   == _voucher &&
                          custTrans.TransDate == _transDate;

                amount   = custTrans.AmountCur - custTrans.SettleAmountCur;
                currency = custTrans.CurrencyCode;
            }
            else
            {
                select firstonly AmountCurDebit, AmountCurCredit, CurrencyCode from journalTrans
                    where journalTrans.Voucher           == _voucher   &&
                          journalTrans.TransDate         == _transDate &&
                         (journalTrans.AccountType       == LedgerJournalACType::Cust ||
                          journalTrans.OffsetAccountType == LedgerJournalACType::Cust);

                amount   = journalTrans.amount();
                currency = journalTrans.CurrencyCode;
            }
        }

        return [ -amount, currency ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAdvance</Name>
				<Source><![CDATA[
    public static boolean existsAdvance(CompanyId _company, CzCustAdvanceInvoiceRecId _recId)
    {
        CzCustAdvanceInvoiceLink ret;
        ;

        if (_recId)
        {
            select firstonly RecId from ret
                where ret.InvoiceCompany        == _company
                   && ret.AdvanceInvoiceRecId   == _recId;
        }

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNonLinkedPayment</Name>
				<Source><![CDATA[
    public static boolean existsNonLinkedPayment(CompanyId _company, DirPartyRecId _party)
    {
        CzCustAdvanceInvoiceLink    advanceInvoiceLink;
        CustTrans                   trans;
        CustTable                   custTable;
        boolean                     ret;
        container                   sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_company);

        while select crosscompany:sharedServiceCompanies DataAreaId, Voucher, TransDate from trans
            exists join custTable
            where   trans.AccountNum  == custTable.AccountNum
               &&   custTable.Party   == _party
               &&   trans.Prepayment
               && ! trans.Closed
        {
            select firstonly advanceInvoiceLink
                where advanceInvoiceLink.PaymentCompany == trans.DataAreaId
                   && advanceInvoiceLink.Voucher        == trans.Voucher
                   && advanceInvoiceLink.TransDate      == trans.TransDate;

            if (!advanceInvoiceLink)
            {
                ret = true;
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherAdvance</Name>
				<Source><![CDATA[
    public static boolean existsOtherAdvance(CompanyId                 _invoiceCompany,
                                                    CzCustAdvanceInvoiceRecId _recId,
                                                    CompanyId                 _paymentCompany,
                                                    Voucher                   _voucher,
                                                    TransDate                 _transDate)
    {
        CzCustAdvanceInvoiceLink ret;

        select firstonly RecId from ret
            where (ret.InvoiceCompany      != _invoiceCompany
               ||  ret.AdvanceInvoiceRecId != _recId)
               &&  ret.PaymentCompany      == _paymentCompany
               &&  ret.Voucher             == _voucher
               &&  ret.TransDate           == _transDate;

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOtherPayment</Name>
				<Source><![CDATA[
    public static boolean existsOtherPayment(CompanyId                 _invoiceCompany,
                                                    CzCustAdvanceInvoiceRecId _recId,
                                                    CompanyId                 _paymentCompany,
                                                    Voucher                   _voucher,
                                                    TransDate                 _transDate)
    {
        CzCustAdvanceInvoiceLink ret;

        select firstonly RecId from ret
            where  ret.InvoiceCompany       == _invoiceCompany
               &&  ret.AdvanceInvoiceRecId  == _recId
               && (ret.PaymentCompany       != _paymentCompany
               ||  ret.Voucher              != _voucher
               ||  ret.TransDate            != _transDate);

        return ret.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPaymentForFreeText</Name>
				<Source><![CDATA[
    // select open prepayment, linked to (non-closed) advance invoice
    // which belongs to given free text invoice
    public static boolean existsPaymentForFreeText(CompanyId _invoiceCompany, CustInvoiceTableRefRecId _recId)
    {
        CzCustAdvanceInvoiceTable advanceInvoiceTable;
        CzCustAdvanceInvoiceLink  advanceInvoiceLink;
        CustTrans                 trans;
        boolean                   ret;

        changecompany(_invoiceCompany)
        {
            select RecId from advanceInvoiceTable
                where advanceInvoiceTable.SalesId           == '' &&
                    advanceInvoiceTable.FreeInvoiceRefRecId == _recId &&
                    advanceInvoiceTable.Status              != CzAdvanceInvoiceStatus::Closed;

            while (advanceInvoiceTable && ! ret)
            {
                select Voucher, TransDate, PaymentCompany from advanceInvoiceLink
                    where advanceInvoiceLink.InvoiceCompany      == _invoiceCompany &&
                          advanceInvoiceLink.AdvanceInvoiceRecId == advanceInvoiceTable.RecId;

                while (advanceInvoiceLink && ! ret)
                {
                    changecompany(advanceInvoiceLink.PaymentCompany)
                    {
                        trans = null;
                        select firstonly RecId from trans
                            where  trans.Voucher   == advanceInvoiceLink.Voucher   &&
                                   trans.TransDate == advanceInvoiceLink.TransDate &&
                                   trans.Prepayment                                &&
                                 ! trans.Closed;
                    }
                    if (trans)
                    {
                        ret = true;
                    }

                    next advanceInvoiceLink;
                }

                next advanceInvoiceTable;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPaymentForOrder</Name>
				<Source><![CDATA[
    // select open prepayment, linked to (non-closed) advance invoice
    // which belongs to given sales order
    public static boolean existsPaymentForOrder(CompanyId _invoiceCompany, SalesId _orderId)
    {
        CzCustAdvanceInvoiceTable advanceInvoiceTable;
        CzCustAdvanceInvoiceLink  advanceInvoiceLink;
        CustTrans                 trans;
        boolean                   ret;

        changecompany(_invoiceCompany)
        {
            select advanceInvoiceTable
                where advanceInvoiceTable.SalesId == _orderId &&
                      advanceInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed;

            while (advanceInvoiceTable && ! ret)
            {
                select advanceInvoiceLink
                    where advanceInvoiceLink.InvoiceCompany      == _invoiceCompany &&
                          advanceInvoiceLink.AdvanceInvoiceRecId == advanceInvoiceTable.RecId;

                while (advanceInvoiceLink && ! ret)
                {
                    changecompany(advanceInvoiceLink.PaymentCompany)
                    {
                        trans = null;
                        select firstonly trans
                            where  trans.Voucher   == advanceInvoiceLink.Voucher   &&
                                   trans.TransDate == advanceInvoiceLink.TransDate &&
                                   trans.Prepayment                                &&
                                 ! trans.Closed;
                    }
                    if (trans)
                    {
                        ret = true;
                    }

                    next advanceInvoiceLink;
                }

                next advanceInvoiceTable;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPaymentLinkedToManual</Name>
				<Source><![CDATA[
    public static boolean existsPaymentLinkedToManual(CompanyId _company, CustAccount _account)
    {
        boolean                   ret;
        container                 sharedServiceCompanies = CustVendOpenTransManager::findSharedServiceCompanies(_company);
        CustTable                 custTable              = CustTable::find(_account);

        CzCustAdvanceInvoiceTable advanceInvoiceTable;
        CzCustAdvanceInvoiceLink  advanceInvoiceLink;
        CustTrans                 trans;
        CustTable                 custTableExists;

        select firstonly crosscompany:sharedServiceCompanies RecId from advanceInvoiceLink
            exists join advanceInvoiceTable
                where advanceInvoiceTable.SalesId == ''
                    && advanceInvoiceTable.FreeInvoiceRefRecId == 0
                    && advanceInvoiceTable.RecId == advanceInvoiceLink.AdvanceInvoiceRecId
                    && advanceInvoiceTable.DataAreaId == advanceInvoiceLink.InvoiceCompany
            exists join trans
                where trans.Voucher == advanceInvoiceLink.Voucher
                    && trans.DataAreaId == advanceInvoiceLink.PaymentCompany
                    && trans.TransDate == advanceInvoiceLink.TransDate
                    && trans.Prepayment == NoYes::Yes
                    && trans.Closed == dateNull()
            exists join custTableExists
                where trans.AccountNum == custTableExists.AccountNum
                    && custTableExists.Party == custTable.Party
                    && custTableExists.DataAreaId == advanceInvoiceLink.PaymentCompany;

        if (advanceInvoiceLink)
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CzCustVendAdvanceInvoices</ConfigurationKey>
	<CountryRegionCodes>CZ,HU,PL</CountryRegionCodes>
	<DeveloperDocumentation>@GLS221001</DeveloperDocumentation>
	<Label>@GLS111702</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>VoucherDateIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>VoucherDateIdx</PrimaryIndex>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvanceInvoiceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@GLS107927</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvanceInvoiceRecId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InvoiceCompany</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Payment</Name>
			<Label>@SYS55132</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>isPaymentPosted</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentCompany</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>AdvanceInvoiceRecId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>CzCustAdvanceInvoiceRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InvoiceCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PaymentCompany</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CompanyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VoucherDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AdvanceInvoiceRecId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceCompany</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PaymentCompany</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherTransDateInvoiceCompanyIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Voucher</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InvoiceCompany</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>CzCustVendAdvanceInvoiceLink</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AdvanceInvoiceRecId</MapField>
					<MapFieldTo>AdvanceInvoiceRecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InvoiceCompany</MapField>
					<MapFieldTo>InvoiceCompany</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PaymentCompany</MapField>
					<MapFieldTo>PaymentCompany</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation>
			<Name>CustTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCompany</Name>
					<Field>PaymentCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CzCustAdvanceInvoiceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>CzCustAdvanceInvoiceTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdvanceInvoiceRecId</Name>
					<SourceEDT>CzCustAdvanceInvoiceRecId</SourceEDT>
					<Field>AdvanceInvoiceRecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCompany</Name>
					<Field>InvoiceCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InvoiceCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InvoiceCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InvoiceCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>InvoiceCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>LedgerJournalTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>LedgerJournalTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Voucher</Name>
					<Field>Voucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransDate</Name>
					<Field>TransDate</Field>
					<RelatedField>TransDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCompany</Name>
					<Field>PaymentCompany</Field>
					<RelatedField>dataAreaId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PaymentCompany</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>DataArea</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PaymentCompany</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PaymentCompany</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<Field>PaymentCompany</Field>
					<RelatedField>id</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>isVirtual_Extern</Name>
					<SourceEDT>CompanyId</SourceEDT>
					<RelatedField>isVirtual</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>