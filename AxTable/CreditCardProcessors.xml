<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardProcessors</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CreditCardProcessors extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deactivateOtherProcessors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deactivates all of the <c>CreditCardProcessors</c> records except for the current
    /// <c>CreditCardProcessors</c> record.
    /// </summary>
    void deactivateOtherProcessors()
    {
        CreditCardProcessors otherCreditCardProcessors;

        if (this.Active)
        {
            ttsbegin;
            otherCreditCardProcessors.skipDataMethods(true);
            update_recordset otherCreditCardProcessors
                setting
                    Active = NoYes::No
                where
                    otherCreditCardProcessors.Active &&
                    otherCreditCardProcessors.RecId != this.RecId;
            otherCreditCardProcessors.skipDataMethods(false);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that only one record in the <c>CreditCardProcessors</c> table is active after a record in the <c>CreditCardProcessors</c> table is inserted.
    /// </summary>
    public void insert()
    {
        super();

        this.deactivateOtherProcessors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a processors configuration information is correct and usable.
    /// </summary>
    /// <returns>
    /// true for a valid configuration; otherwise, false.
    /// </returns>
    public boolean isValid()
    {
        CreditCardTypeSetup cardTypeSetup;

        select firstonly RecId
            from cardTypeSetup
            where cardTypeSetup.CreditCardProcessors == this.RecId;

        if (!cardTypeSetup.RecId)
        {
            // All credit card types must have a payment journal name specified.
            return false;
        }
        select firstonly RecId
            from cardTypeSetup
            where cardTypeSetup.CreditCardProcessors == this.RecId &&
                    cardTypeSetup.PaymentJournal == '';
        if (cardTypeSetup.RecId)
        {
            // At least one of the card types does not have a journal.
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that only one record in the <c>CreditCardProcessors</c> table is active after a record in the <c>CreditCardProcessors</c> table is updated.
    /// </summary>
    public void update()
    {
        super();

        this.deactivateOtherProcessors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid && this.Active && !this.isValid())
        {
            isValid = checkFailed("@SYS327098");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that only one record in the <c>CreditCardProcessors</c> table is active after a record in the <c>CreditCardProcessors</c> table is written.
    /// </summary>
    public void write()
    {
        super();

        this.deactivateOtherProcessors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>activeProcessorExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an active processor exists.
    /// </summary>
    /// <returns>
    /// true if an active processor exists; otherwise, false.
    /// </returns>
    static boolean activeProcessorExists()
    {
        return (select firstonly creditCardProcessors
                 where creditCardProcessors.Active == NoYes::Yes).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified record exists in the <c>CreditCardProcessors</c> table.
    /// </summary>
    /// <param name="_processorsId">
    ///    The credit card processor to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean checkExist(CreditCardProcessorsId _processorsId)
    {
        boolean found = true;

        if (!CreditCardProcessors::exist(_processorsId))
        {
            found = checkFailed(strFmt(CreditCardProcessors::txtNotExist(), _processorsId));
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record in the <c>CreditCardProcessors</c> table exists.
    /// </summary>
    /// <param name="_processorsId">
    /// The RecId of the credit card processors to check for existence.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(CreditCardProcessorsId _processorsId)
    {
        return (select firstonly creditCardProcessors
                 where creditCardProcessors.RecId == _processorsId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardProcessors</c> table.
    /// </summary>
    /// <param name="_processorsId">
    /// The Recid of the credit card processors record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardProcessors</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardProcessors find(
            CreditCardProcessorsId _processorsId,
            boolean _forUpdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardProcessors creditCardProcessor;

        creditCardProcessor.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            creditCardProcessor.concurrencyModel(_concurrencyModel);
        }

        if (_processorsId)
        {
            creditCardProcessor.selectForUpdate(_forUpdate);
            creditCardProcessor.selectLocked(_forUpdate);

            select firstonly creditCardProcessor
                where creditCardProcessor.RecId == _processorsId;
        }

        return creditCardProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findActiveProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the active record in the <c>CreditCardProcessors</c> table.
    /// </summary>
    /// <returns>
    /// The active record in the <c>CreditCardProcessors</c> table.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// No credit card processors are active.
    /// </exception>
    static CreditCardProcessors findActiveProcessor()
    {
        CreditCardProcessors creditCardProcessors;

        select firstonly creditCardProcessors
            where creditCardProcessors.Active;

        if (!creditCardProcessors)
        {
            throw error("@SYS116985");
        }
        return creditCardProcessors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>CreditCardProcessors</c> table.
    /// </summary>
    /// <param name="_processorsName">
    /// The name of the credit card processors record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>CreditCardProcessors</c> table; otherwise, an empty record.
    /// </returns>
    static CreditCardProcessors findByName(
            CreditCardProcessorsName _processorsName,
            boolean _forUpdate = false,
            ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        CreditCardProcessors creditCardProcessor;

        // *************************************************
        // TO DO: make Name & NotUsed index unique
        // *************************************************
        creditCardProcessor.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            creditCardProcessor.concurrencyModel(_concurrencyModel);
        }

        if (_processorsName)
        {
            creditCardProcessor.selectForUpdate(_forUpdate);
            creditCardProcessor.selectLocked(_forUpdate);

            select firstonly creditCardProcessor
                where creditCardProcessor.Name == _processorsName;
        }

        return creditCardProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemine if the specified processor is active.
    /// </summary>
    /// <param name="_processorsId">
    /// A processor.
    /// </param>
    /// <returns>
    /// true if the processor is active.
    /// </returns>
    public static boolean isActiveProcessor(CreditCardProcessorsId _processorsId)
    {
        CreditCardProcessors creditCardProcessors;

        select firstonly creditCardProcessors
            where
                creditCardProcessors.RecId == _processorsId;

        return creditCardProcessors && creditCardProcessors.Active == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS121339";
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurrencyForProcessor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the currency is valid.
    /// </summary>
    /// <param name="_creditCardProcessors">
    /// The processor to validate.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code of the currency to validate.
    /// </param>
    /// <param name="_cardTypeName">
    /// The credit card type to check for existence.
    /// </param>
    /// <returns>
    /// true if the currency is valid for the current credit card processor; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If there is no active processor, this method will return true.
    /// </remarks>
    public static boolean validateCurrencyForProcessor(CreditCardProcessors _creditCardProcessors, CurrencyCode _currencyCode, CreditCardTypeName _cardTypeName)
    {
        var isCurrencyValid = true;

        if (isConfigurationkeyEnabled(configurationKeyNum(CreditCard)))
        {
            var creditCardTypeSetup = CreditCardTypeSetup::find(_creditCardProcessors, _cardTypeName);

            if (!CreditCardTypeCurrency::exist(creditCardTypeSetup, _currencyCode))
            {
                isCurrencyValid = false;
            }
        }

        return isCurrencyValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the deletion of the processor.
    /// </summary>
    /// <returns>
    /// A boolean with the result of the validation.
    /// </returns>
    public boolean validateDelete()
    {
        boolean ret;

        ret = super();
    
        // Verify if the processor is not in use
        ret = ret && !CreditCardProcessors::isProcessorInUse(this.RecId);

        if (!ret)
        {
            ret = checkFailed("@Retail:BlockPaymentServiceDeletion");
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessorInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if the provided processor is in use to process credit cards.
    /// </summary>
    /// <param name = "_processorRecId">
    /// The <c>CreditCardAccountSetup</c> table buffer.
    /// </param>
    /// <returns>
    /// True if the processor is in use. False otherwise.
    /// </returns>
    internal static boolean isProcessorInUse(RefRecId _processorRecId)
    {
        CreditCardCust creditCardCustToCheck;
        boolean ret = false;

        // Verify if there are no valid card tokens using the processor
        while select ExpiryDate from creditCardCustToCheck
            where creditCardCustToCheck.CreditCardProcessors == _processorRecId
        {
            // If credit card is NOT expired
            if (CreditCard::checkExpireDate(creditCardCustToCheck.ExpiryDate))
            {
                ret = true;
                // Break after find first valid card token
                break;
            }
        }

        if (!ret)
        {
            CreditCardAuthTrans creditCardAuthTransToCheck;

            // Verify there are no valid authorizations or captures using the processor
            select firstonly RecId from creditCardAuthTransToCheck
                where creditCardAuthTransToCheck.CreditCardProcessors == _processorRecId 
                && ( creditCardAuthTransToCheck.ApprovalType == CreditCardOperation::Authorize
                ||   creditCardAuthTransToCheck.ApprovalType == CreditCardOperation::AuthorizeAndCapture 
                ||   creditCardAuthTransToCheck.ApprovalType == CreditCardOperation::CaptureAfterAuthorize
                   ) 
                && ( creditCardAuthTransToCheck.ProcessorStatus == CreditCardProcessorStatus::Approved
                ||   creditCardAuthTransToCheck.ProcessorStatus == CreditCardProcessorStatus::Settled
                   ) 
                &&  creditCardAuthTransToCheck.ApprovalExpired == NoYes::No 
                &&  creditCardAuthTransToCheck.ApprovalVoid == NoYes::No;

            if (creditCardAuthTransToCheck)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGiftCardProviderByConnector</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method finds gift card provider name from active payment processor.
    /// </summary>
    /// <param name="_paymentConnectorName">
    /// Name of the payment connector.
    /// </param>
    /// <returns>
    /// Gift card provider name.
    /// </returns>
    internal static str getGiftCardProviderByConnector(str _paymentConnectorName)
    {
        const boolean Decrypt = false;
        const str GiftCardProvider = 'GiftCardProvider';
        CreditCardAccountSetup creditCardAccountSetup;
        CreditCardProcessors creditCardProcessors;
        str providerName;

        select firstonly creditCardAccountSetup
            where creditCardAccountSetup.ConnectorName == _paymentConnectorName
            exists join creditCardProcessors
                where creditCardProcessors.RecId == creditCardAccountSetup.CreditCardProcessors
                   && creditCardProcessors.Active;

        if (creditCardAccountSetup)
        {
            CreditCardPaymentProperties properties = CreditCardPaymentProperties::fromXmlString(creditCardAccountSetup.manageEncryptionForSecureMerchantProperties(Decrypt, ''));
            CreditCardPaymentProperty property = properties.find(Microsoft.Dynamics.Retail.PaymentSDK.Portable.Constants.GenericNamespace::get_MerchantAccount(), GiftCardProvider);
            providerName = property ? property.parmStringValue() : '';
        }

        return providerName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>CreditCard</ConfigurationKey>
	<DeveloperDocumentation>@SYS126894</DeveloperDocumentation>
	<FormRef>CreditCardProcessors</FormRef>
	<Label>@SYS116925</Label>
	<TableGroup>Group</TableGroup>
	<TitleField1>Name</TitleField1>
	<TitleField2>Active</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<DataSharingType>Single</DataSharingType>
	<Modules>AccountsReceivable</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Status</Name>
			<Label>@SYS80127</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Active</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Active</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardIsActive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CreditCardProcessorsName</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NotUsed</Name>
			<ExtendedDataType>CreditCardProcessorNotUsed</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>Name</Name>
			<Fields>
				<AxTableIndexField>
					<DataField>Name</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>NotUsed</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations />
	<StateMachines />
</AxTable>