<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetInventTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class AssetInventTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeAssetId</Name>
				<Source><![CDATA[
        public static void changeAssetId(
        InventTransOriginId     _inventTransOriginId,
        AssetId                 _assetIdFrom,
        AssetId                 _assetIdTo,
        AssetBookId             _assetBookIdTo)
    {
        AssetInventTrans assetInventTrans;

        if (!_assetIdFrom)
        {
            AssetInventTrans::createTransId(_assetIdTo, _assetBookIdTo, _inventTransOriginId);
            return;
        }

        if (!_assetIdTo)
        {
            AssetInventTrans::deleteTransId(_assetIdFrom, _inventTransOriginId);
            return;
        }

        select forupdate firstonly assetInventTrans
            where assetInventTrans.AssetId              == _assetIdFrom     &&
                  assetInventTrans.InventTransOrigin    == _inventTransOriginId;

        if (assetInventTrans)
        {
            assetInventTrans.AssetId = _assetIdTo;
            assetInventTrans.BookId  = _assetBookIdTo;
            assetInventTrans.update();
            return;
        }

        AssetInventTrans::createTransId(_assetIdTo, _assetBookIdTo, _inventTransOriginId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
        public static boolean checkExist(
        AssetId                 _assetId,
        InventTransOriginId     _inventTransOriginId)
    {
        boolean ret = true;

        if (!AssetInventTrans::exist(_assetId, _inventTransOriginId))
        {
            ret = checkFailed(strfmt(AssetInventTrans::txtNotExist(), _inventTransOriginId, _assetId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransId</Name>
				<Source><![CDATA[
        public static void createTransId(
        AssetId                 _assetId,
        AssetBookId             _assetBookId,
        InventTransOriginId     _inventTransOriginId)
    {
        AssetInventTrans assetInventTrans;

        select forupdate firstonly assetInventTrans
            where assetInventTrans.AssetId              == _assetId
               && assetInventTrans.InventTransOrigin    == _inventTransOriginId;

        if (!assetInventTrans.RecId)
        {
            assetInventTrans.AssetId            = _assetId;
            assetInventTrans.BookId             = _assetBookId;
            assetInventTrans.InventTransOrigin  = _inventTransOriginId;
            assetInventTrans.insert();
        }
        else
        {
            assetInventTrans.BookId        = _assetBookId;
            assetInventTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTransId</Name>
				<Source><![CDATA[
        public static void deleteTransId(
        AssetId                 _assetId,
        InventTransOriginId     _inventTransOriginId)
    {
        AssetInventTrans assetInventTrans;

        delete_from assetInventTrans
            where assetInventTrans.AssetId              == _assetId
               && assetInventTrans.InventTransOrigin    == _inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        public static boolean exist(
        AssetId                 _assetId,
        InventTransOriginId     _inventTransOriginId)
    {
        boolean found;

        found = (select firstonly
                    RecId
                 from
                    assetInventTrans
                 where
                    assetInventTrans.AssetId == _assetId &&
                    assetInventTrans.InventTransOrigin == _inventTransOriginId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        public static AssetInventTrans find(
        AssetId                 _assetId,
        InventTransOriginId     _inventTransOriginId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        AssetInventTrans      assetInventTrans;

        assetInventTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            assetInventTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            assetInventTrans
        where
            assetInventTrans.AssetId            == _assetId &&
            assetInventTrans.InventTransOrigin  == _inventTransOriginId;

        return assetInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>AssetInventTrans</c> record, depending on the <c>InventTransOriginId</c> field.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The inventory transaction originator ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to select the record for update.
    /// </param>
    /// <returns>
    ///    A record in the <c>AssetInventTrans</c> table; otherwise, an empty record.
    /// </returns>
    public static AssetInventTrans findByInventTransOriginId(
        InventTransOriginId     _inventTransOriginId,
        boolean                 _forupdate = false)
    {
        AssetInventTrans    assetInventTrans;

        assetInventTrans.selectForUpdate(_forupdate);

        if (_inventTransOriginId)
        {   // There is one to one relation between InventTransId and AssetId\AssetBookId
            select firstonly
                assetInventTrans
            where
                assetInventTrans.InventTransOrigin == _inventTransOriginId;
        }

        return assetInventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
        public static TxtNotExist txtNotExist()
    {
        return "@SYS100040";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Asset</ConfigurationKey>
	<DeveloperDocumentation>@SYS127372</DeveloperDocumentation>
	<Label>@SYS67877</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>AssetId</TitleField1>
	<TitleField2>InventTransOrigin</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>AssetIdx</ClusteredIndex>
	<Modules>FixedAssets</Modules>
	<PrimaryIndex>AssetIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AssetId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventTransOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AssetId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AssetBookId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InventTransOrigin</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventTransOriginId</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>AssetIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>AssetId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>OriginIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>InventTransOrigin</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>AssetBook</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS125947</EntityRelationshipRole>
			<RelatedTable>AssetBook</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>AssetBook</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetInventTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetBookTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetBookTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>BookId</Name>
					<SourceEDT>AssetBookId</SourceEDT>
					<Field>BookId</Field>
					<RelatedField>BookId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>BookIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>AssetTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>AssetTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AssetId</Name>
					<SourceEDT>AssetId</SourceEDT>
					<Field>AssetId</Field>
					<RelatedField>AssetId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>GroupAssetIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTransOrigin</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>InventTransOrigin</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventTransOrigin</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>AssetInventTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventTransOrigin</Name>
					<Field>InventTransOrigin</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>