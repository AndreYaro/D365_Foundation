<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPurchSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventItemPurchSetup extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calendarDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the lead time days should be specified in the calendar.
    /// </summary>
    /// <returns>
    /// true if the lead time days should be specified in the calendar; otherwise, false.
    /// </returns>
    public CalendarDays calendarDays()
    {
        return this.InventItemOrderSetupMap::calendarDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationId</Name>
				<Source><![CDATA[
    boolean checkInventLocationId(
        InventLocationId    _inventLocationId,
        boolean             _mandatoryCheck     = true,
        boolean             _matchSiteCheck     = true,
        InventTable         _inventTable        = null) // set this parameter for better performance
    {
        return this.InventItemOrderSetupMap::checkInventLocationId(_inventLocationId,
                                                                   _mandatoryCheck,
                                                                   _matchSiteCheck,
                                                                   _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventSiteId</Name>
				<Source><![CDATA[
    boolean checkInventSiteId(
        InventSiteId    _inventSiteId,
        boolean         _mandatoryCheck = true,
        InventTable     _inventTable    = null) // set this parameter for better performance
    {
        return this.InventItemOrderSetupMap::checkInventSiteId(_inventSiteId,
                                                               _mandatoryCheck,
                                                               _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotStopped</Name>
				<Source><![CDATA[
    boolean checkNotStopped(boolean _showSetupType = true)
    {
        return this.InventItemOrderSetupMap::checkNotStopped(_showSetupType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValid</Name>
				<Source><![CDATA[
    boolean checkValid()
    {
        return this.InventItemOrderSetupMap::checkValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        super();
        this.InventItemOrderSetupMap::delete();
        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>editCalendarDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>CalendarDays</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>CalendarDays</c> field.
    /// </param>
    /// <param name="_calendarDays">
    ///    A Boolean value that is used to assign a new value to the <c>CalendarDays</c> field.
    /// </param>
    /// <returns>
    ///    A Boolean value that determines whether lead time is specified in working days.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>CalendarDays</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit CalendarDays editCalendarDays(
        boolean                 _set,
        CalendarDays            _calendarDays)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.CalendarDays;
            }
        }

        if (_set)
        {
            this.CalendarDays = _calendarDays;
        }

        return this.CalendarDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHighestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>HighestQty</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>HighestQty</c> field.
    /// </param>
    /// <param name="_qtyHighest">
    ///    A real value that is used to assign a new value to the <c>HighestQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the maximum quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>HighestQty</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit QtyHighest editHighestQty(
        boolean                 _set,
        QtyHighest              _qtyHighest)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.HighestQty;
            }
        }

        if (_set)
        {
            this.HighestQty = _qtyHighest;
        }

        return this.HighestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>LeadTime</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>LeadTime</c> field.
    /// </param>
    /// <param name="_leadTime">
    ///    An integer value that is used to assign a new value to the <c>LeadTime</c> field.
    /// </param>
    /// <returns>
    ///    An integer value that holds the lead time in days.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>LeadTime</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit LeadTimePurchDefault  editLeadTime(
        boolean                 _set,
        LeadTimePurchDefault    _leadTime)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.LeadTime;
            }
        }

        if (_set)
        {
            this.LeadTime = _leadTime;
        }

        return this.LeadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editLowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>LowestQty</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether to assign a new value to the <c>LowestQty</c> field.
    /// </param>
    /// <param name="_qtyLowest">
    ///    A real value that is used to assign a new value to the <c>LowestQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the minimum quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>LowestQty</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit QtyLowest editLowestQty(
        boolean                 _set,
        QtyLowest               _qtyLowest)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.LowestQty;
            }
        }

        if (_set)
        {
            this.LowestQty = _qtyLowest;
        }

        return this.LowestQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>MultipleQty</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether to assign a new value to the <c>MultipleQty</c> field.
    /// </param>
    /// <param name="_qtyMultiples">
    ///    A real value that is used to assign a new value to the <c>MultipleQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value that holds the multiple quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>MultipleQty</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit QtyMultiples editMultipleQty(
        boolean                 _set,
        QtyMultiples            _qtyMultiples)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.MultipleQty;
            }
        }

        if (_set)
        {
            this.MultipleQty = _qtyMultiples;
        }

        return this.MultipleQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWHighestQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyHighest editPdsCWHighestQty(boolean _set, PdsCWInventQtyHighest _cwQtyHighest)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemPurchSetup inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemPurchSetupDefault.HighestQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemPurchSetupDefault.HighestQty, this.pdsPurchUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.HighestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyHighest);
            }
            else
            {
                this.HighestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyHighest, this.pdsPurchUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.HighestQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.HighestQty, this.pdsPurchUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWLowestQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyLowest editPdsCWLowestQty(boolean _set, PdsCWInventQtyLowest _cwQtyLowest)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemPurchSetup inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemPurchSetupDefault.LowestQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemPurchSetupDefault.LowestQty, this.pdsPurchUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.LowestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyLowest);
            }
            else
            {
                this.LowestQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyLowest, this.pdsPurchUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.LowestQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.LowestQty, this.pdsPurchUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWMultipleQty</Name>
				<Source><![CDATA[
    public edit PdsCWInventQtyMultiples editPdsCWMultipleQty(boolean _set, PdsCWInventQtyMultiples _cwQtyMultiple)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemPurchSetup inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemPurchSetupDefault.MultipleQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemPurchSetupDefault.MultipleQty, this.pdsPurchUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.MultipleQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyMultiple);
            }
            else
            {
                this.MultipleQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyMultiple, this.pdsPurchUnitId());
            }
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.MultipleQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.MultipleQty, this.pdsPurchUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPdsCWStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edits or displays the <c>StandardQty</c> field in catch weight units from the
    /// <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    /// A Boolean value that determines whether to assign a new value to the <c>StandardQty</c> field.
    /// </param>
    /// <param name="_cwQtyStandard">
    /// A real value in catch weight units that is used to assign a new value to the <c>StandardQty</c>
    /// field.
    /// </param>
    /// <returns>
    /// A real value that holds the standard quantity in catch weight units.
    /// </returns>
    /// <remarks>
    /// If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    /// method displays the <c>StandardQty</c> field in catch weight units from the default
    /// <c>InventItemPurchSetup</c> record.
    /// </remarks>
    public edit PdsCWInventQtyStandard editPdsCWStandardQty(boolean _set, PdsCWInventQtyStandard  _cwQtyStandard)
    {
        if (!this.Override && this.ItemId)
        {
            InventItemPurchSetup inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
                {
                    return PdsCatchWeight::cwQty(this.ItemId, inventItemPurchSetupDefault.StandardQty);
                }

                return PdsCatchWeight::convertQtyToCWQty(this.ItemId, inventItemPurchSetupDefault.StandardQty, this.pdsPurchUnitId());
            }
        }

        if (_set)
        {
            if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
            {
                this.StandardQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyStandard);
            }

            this.StandardQty = PdsCatchWeight::inventQty(this.ItemId, _cwQtyStandard, this.pdsPurchUnitId());
        }

        if (PdsCWPurchSalesLineDefaultQuantityThreeWayConversionDisabled::instance().isEnabled())
        {
            return PdsCatchWeight::cwQty(this.ItemId, this.StandardQty);
        }

        return PdsCatchWeight::convertQtyToCWQty(this.ItemId, this.StandardQty, this.pdsPurchUnitId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>StandardQty</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that determines whether to assign a new value to the <c>StandardQty</c> field.
    /// </param>
    /// <param name="_qtyStandard">
    ///    A real value that is used to assign a new value to the <c>StandardQty</c> field.
    /// </param>
    /// <returns>
    ///    A real value holds the standard quantity.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>StandardQty</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit QtyStandard editStandardQty(
        boolean                 _set,
        QtyStandard             _qtyStandard)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.StandardQty;
            }
        }

        if (_set)
        {
            this.StandardQty = _qtyStandard;
        }

        return this.StandardQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editStopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edits or displays the <c>Stopped</c> field from the <c>InventItemPurchSetup</c> table.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that specifies whether to assign a new value to the <c>Stopped</c> field.
    /// </param>
    /// <param name="_itemStopped">
    ///    A Boolean value that is used to assign a new value to the <c>Stopped</c> field.
    /// </param>
    /// <returns>
    ///    A Boolean value that determines whether the item is on hold for transactions.
    /// </returns>
    /// <remarks>
    ///    If the <c>Override</c> field for the specified <c>InventItemPurchSetup</c> record is false, the
    ///    method displays the <c>Stopped</c> field from the default <c>InventItemPurchSetup</c> record.
    /// </remarks>
    edit ItemStopped editStopped(
        boolean                 _set,
        ItemStopped             _itemStopped)
    {
        InventItemPurchSetup    inventItemPurchSetupDefault;

        if (! this.Override
           && this.ItemId)
        {
            inventItemPurchSetupDefault = InventItemPurchSetup::findDefault(this.ItemId);

            if (inventItemPurchSetupDefault.RecId != this.RecId)
            {
                return inventItemPurchSetupDefault.Stopped;
            }
        }

        if (_set)
        {
            this.Stopped = _itemStopped;
        }

        return this.Stopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHighestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a maximum allowed purchase order quantity.
    /// </summary>
    /// <returns>
    /// A maximum allowed purchase order quantity.
    /// </returns>
    /// <remarks>
    /// If this parameter is set to zero, there is no limitation on the maximum quantity.
    /// </remarks>
    display public QtyHighest getHighestQty()
    {
        return this.InventItemOrderSetupMap::highestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a purchase lead time in days.
    /// </summary>
    /// <returns>
    /// A purchase lead time in days.
    /// </returns>
    display public LeadTimeDelivery getLeadTime()
    {
        return this.InventItemOrderSetupMap::leadTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a minimum allowed purchase order quantity.
    /// </summary>
    /// <returns>
    /// A minimum allowed purchase order quantity.
    /// </returns>
    display public QtyLowest getLowestQty()
    {
        return this.InventItemOrderSetupMap::lowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMultipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a purchase order quantity multiplier.
    /// </summary>
    /// <returns>
    /// A purchase order quantity multiplier.
    /// </returns>
    display public QtyMultiples getMultipleQty()
    {
        return this.InventItemOrderSetupMap::multipleQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStandardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a standard purchase order quantity.
    /// </summary>
    /// <returns>
    /// A standard purchase order quantity.
    /// </returns>
    display public QtyStandard getStandardQty()
    {
        return this.InventItemOrderSetupMap::standardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrevRecordInSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the previous record below the current according to Sequence.
    /// </summary>
    /// <param name = "_forUpdate">Boolean value to indicate whether found record should be selected for update.</param>
    /// <returns>The previous record below the current according to sequence. If current record is the lowest, a null record will be returned.</returns>
    public InventItemPurchSetup getPrevRecordInSequence(boolean _forUpdate = false)
    {
        InventItemPurchSetup prevRecord;
        prevRecord.selectForUpdate(_forUpdate);

        select firstonly prevRecord
            order by Sequence desc
            where prevRecord.ItemId == this.ItemId
            && prevRecord.Sequence < this.Sequence;

        return prevRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextRecordInSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next record above the current according to Sequence.
    /// </summary>
    /// <param name = "_forUpdate">Boolean value to indicate whether found record should be selected for update.</param>
    /// <returns>The next record above the current according to sequence. If current record is the highest, a null record will be returned.</returns>
    public InventItemPurchSetup getNextRecordInSequence(boolean _forUpdate = false)
    {
        InventItemPurchSetup nextRecord;
        nextRecord.selectForUpdate(_forUpdate);

        select firstonly nextRecord
            order by Sequence asc
            where nextRecord.ItemId == this.ItemId
            && nextRecord.Sequence > this.Sequence;

        return nextRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>highestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a maximum allowed purchase order quantity.
    /// </summary>
    /// <returns>
    /// A maximum allowed purchase order quantity.
    /// </returns>
    /// <remarks>
    /// If this parameter is set to zero, it means there is no limitation on the maximum quantity.
    /// </remarks>
    public QtyHighest highestQty()
    {
        return this.InventItemOrderSetupMap::highestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current item purchase order settings record with settings from the default item purchase order setting record.
    /// </summary>
    void initFromDefault()
    {
        InventItemPurchSetup    purchSetupDefault;

        if (this.ItemId)
        {
            purchSetupDefault  = InventItemPurchSetup::findDefault(this.ItemId);

            if (   purchSetupDefault.RecId
                && this.RecId != purchSetupDefault.RecId)
            {
                this.MultipleQty    = purchSetupDefault.MultipleQty;
                this.LowestQty      = purchSetupDefault.LowestQty;
                this.HighestQty     = purchSetupDefault.HighestQty;
                this.StandardQty    = purchSetupDefault.StandardQty;

                this.LeadTime       = purchSetupDefault.LeadTime;
                this.CalendarDays   = purchSetupDefault.CalendarDays;
                this.Stopped        = purchSetupDefault.Stopped;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        this.InventItemOrderSetupMap::insert();
        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    InventDim inventDim()
    {
        return this.InventItemOrderSetupMap::inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimDefault</Name>
				<Source><![CDATA[
    InventDim inventDimDefault()
    {
        return this.InventItemOrderSetupMap::inventDimDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a purchase warehouse ID.
    /// </summary>
    /// <param name="_inventLocationId">
    ///    The default purchase warehouse ID; optional.
    /// </param>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> buffer that is used to verify whether the multisite has been enabled;
    ///    optional.
    /// </param>
    /// <param name="_inventSiteIdParent">
    ///    A purchase site ID that the <paramref name="_inventLocationId" /> parameter should belong to;
    ///    optional.
    /// </param>
    /// <returns>
    ///    A purchase warehouse ID.
    /// </returns>
    /// <remarks>
    ///    The <paramref name="_inventSiteIdParent" /> parameter applies only when the <paramref
    ///    name="_inventLocationId" /> parameter is specified. If both the <paramref
    ///    name="_inventSiteIdParent" /> and <paramref name="_inventLocationId" /> parameters are passed and
    ///    no site specific settings are found, the check whether the passed <paramref
    ///    name="_inventLocationId" /> belongs to the site specified by <paramref name="_inventSiteIdParent"
    ///    /> will be performed. If it does not, an empty string will be returned. If it does, the passed
    ///    <paramref name="_inventLocationId" /> parameter is returned.
    /// </remarks>

    display InventLocationId inventLocationId(
        InventLocationId    _inventLocationId   = '',
        InventTable         _inventTable        = null,
        InventSiteId        _inventSiteIdParent = '')
    {
        return this.InventItemOrderSetupMap::inventLocationId(_inventLocationId,
                                                              _inventTable,
                                                              _inventSiteIdParent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a purchase site ID.
    /// </summary>
    /// <param name="_inventSiteId">
    ///    The default site ID; optional.
    /// </param>
    /// <param name="_inventTable">
    ///    An <c>InventTable</c> buffer that is used to verify whether the <c>multisite</c> has been enabled;
    ///    optional.
    /// </param>
    /// <returns>
    ///    A purchase site ID.
    /// </returns>

    display InventSiteId inventSiteId(
        InventSiteId    _inventSiteId   = '',
        InventTable     _inventTable    = null)
    {
        return this.InventItemOrderSetupMap::inventSiteId(_inventSiteId, _inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    InventTable inventTable(boolean _forUpdate = false)
    {
        return this.InventItemOrderSetupMap::inventTable(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStopped</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an item is on hold for transactions in purchase order.
    /// </summary>
    /// <returns>
    /// true if the item is on hold for transactions; otherwise, false.
    /// </returns>
    display public ItemStopped isStopped()
    {
        return this.InventItemOrderSetupMap::stopped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current record represents the default (dimension-less) order settings.
    /// </summary>
    /// <returns>
    /// true if the current record represents default order settings; otherwise, false.
    /// </returns>
    public boolean isDefault()
    {
        return this.InventItemOrderSetupMap::isSettingsDefault();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemName</Name>
				<Source><![CDATA[
    display ItemNameDisplay itemName()
    {
        return this.InventItemOrderSetupMap::itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>leadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a purchase lead time in days.
    /// </summary>
    /// <returns>
    /// A purchase lead time in days.
    /// </returns>
    public LeadTimeDelivery leadTime()
    {
        return this.InventItemOrderSetupMap::leadTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lowestQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a minimum allowed purchase order quantity.
    /// </summary>
    /// <returns>
    /// A minimum allowed purchase order quantity.
    /// </returns>
    public QtyLowest lowestQty()
    {
        return this.InventItemOrderSetupMap::lowestQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a purchase order quantity multiplier.
    /// </summary>
    /// <returns>
    /// A purchase order quantity multiplier.
    /// </returns>
    public QtyMultiples multipleQty()
    {
        return this.InventItemOrderSetupMap::multipleQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveRecordUp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record 'up' to have a higher Sequence priority by swapping the Sequence value of the record above it.
    /// </summary>
    public void moveRecordUp()
    {
        this.swapRecordSequences(this.getNextRecordInSequence(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveRecordDown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves a record 'down' to have a lower Sequence priority by swapping the Sequence value of the record below it.
    /// </summary>
    public void moveRecordDown()
    {
        this.swapRecordSequences(this.getPrevRecordInSequence(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWUnitId</Name>
				<Source><![CDATA[
    public display PdsCWUnitId pdsCWUnitId()
    {
        return PdsCatchWeight::cwUnitId(this.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsInventUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the unit in which the related item is stored.
    /// </summary>
    /// <returns>
    /// The <c>UnitOfMeasureSymbol</c> value of the unit of measure of the related item.
    /// </returns>
    public display UnitOfMeasureSymbol pdsInventUnitId()
    {
        return this.inventTable().inventUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsPurchUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the purchase unit in which the related item is stored in.
    /// </summary>
    /// <returns>
    /// The symbol of the unit of measure of the related item.
    /// </returns>
    public display UnitOfMeasureSymbol pdsPurchUnitId()
    {
        return this.inventTable().purchUnitId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventLocationId</Name>
				<Source><![CDATA[
    void setInventLocationId(InventLocationId _inventLocationId)
    {
        this.InventItemOrderSetupMap::setInventLocationId(_inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    void setInventSiteId(InventSiteId _inventSiteId)
    {
        this.InventItemOrderSetupMap::setInventSiteId(_inventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the purchase order settings of the default item.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that specifies whether to select the returning record for update; optional.
    /// </param>
    /// <returns>
    ///    The purchase order settings of the default item.
    /// </returns>
    /// <remarks>
    ///    This method is used by the <c>InventItemOrderSetupMap</c> map.
    /// </remarks>
    InventItemPurchSetup setupDefault(boolean _forUpdate = false)
    {
        return InventItemPurchSetup::findDefault(this.ItemId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupType</Name>
				<Source><![CDATA[
    InventItemOrderSetupType setupType()
    {
        return InventItemOrderSetupType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>standardQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a standard purchase order quantity.
    /// </summary>
    /// <returns>
    /// A standard purchase order quantity.
    /// </returns>
    public QtyStandard standardQty()
    {
        return this.InventItemOrderSetupMap::standardQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether an item is on hold for purchase order transactions.
    /// </summary>
    /// <returns>
    ///    true if the item is on hold for transactions; otherwise, false.
    /// </returns>
    public ItemStopped stopped()
    {
        return this.InventItemOrderSetupMap::stopped();
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapRecordSequences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swaps the Sequences of two records
    /// </summary>
    /// <param name = "_recordToBeSwapped">The record to have its Sequence swapped with the current record.</param>
    private void swapRecordSequences(InventItemPurchSetup _recordToBeSwapped)
    {
        //if there is nothing to be swapped, or the default Sequence of 0 is to be swapped, then return and do nothing
        if (!_recordToBeSwapped || this.Sequence == 0 || _recordToBeSwapped.Sequence == 0)
        {
            return;
        }

        InventItemSetupSequence currRecordSequence = this.Sequence;
        InventItemSetupSequence recordToBeSwappedSequence = _recordToBeSwapped.Sequence;

        ttsbegin;

        this.Sequence = -1;
        this.update();

        _recordToBeSwapped.Sequence = currRecordSequence;
        _recordToBeSwapped.update();

        this.Sequence = recordToBeSwappedSequence;
        this.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        InventItemSetupSequence origSequence = this.orig().Sequence;
        boolean sequenceUpdated = (origSequence != this.Sequence);
        boolean defaultDimUpdate = (this.orig().inventDimIdDefault != this.inventDimIdDefault);

        super();

        if (sequenceUpdated)
        {
            // The purchase record is the only one where sequence changes are made in the form so the change
            // should be propagated to the other two settings records as well

            InventItemInventSetup inventSetup = InventItemInventSetup::find(this.ItemId, this.InventDimId, true);
            if (inventSetup.InventDimId != this.InventDimId)
            {
                inventSetup = InventItemInventSetup::findByItemIdAndInventDimId(this.ItemId, this.InventDimId, true);
            }
            inventSetup.inventItemOrderSetupMap::updateSequence(this.Sequence);

            InventItemSalesSetup salesSetup = InventItemSalesSetup::find(this.ItemId, this.InventDimId, true);
            if (salesSetup.InventDimId != this.InventDimId)
            {
                salesSetup = InventItemSalesSetup::findByItemIdAndInventDimId(this.ItemId, this.InventDimId, true);
            }
            salesSetup.inventItemOrderSetupMap::updateSequence(this.Sequence);
        }

        if (defaultDimUpdate && this.InventDimId == InventDim::inventDimIdBlank())
        {
            this.inventItemOrderSetupMap::propagateDefaultSiteWarehouseChanges();
        }

        SalesPurchLineInterface::flushPriceDiscCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        switch (_fieldIdToCheck)
        {
            case fieldNum(InventItemPurchSetup, InventDimIdDefault) :

                ret = ret && this.InventItemOrderSetupMap::validateFieldInventDimIdDefault();
                break;

            case fieldNum(InventItemPurchSetup, LeadTime)           :

                ret = ret && this.InventItemOrderSetupMap::validateFieldLeadTime();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = this.InventItemOrderSetupMap::validateWrite();
        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the purchase order settings of an item exist.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID.
    /// </param>
    /// <returns>
    ///    true if the purchase order settings of the item exist; otherwise, false.
    /// </returns>
    static boolean exist(
        ItemId          _itemId,
        InventDimId     _inventDimId)
    {
        return _itemId && _inventDimId && (select firstonly inventItemPurchSetup
                                            where   inventItemPurchSetup.ItemId         == _itemId &&
                                                    inventItemPurchSetup.InventDimId    == _inventDimId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieve the purchase order settings of the item.
    /// </summary>
    /// <param name="_itemId">
    ///    The number of the item for which to find the settings.
    /// </param>
    /// <param name="_inventDimId">
    ///    The inventory dimension ID for which to find the settings.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    The purchase order settings of an item.
    /// </returns>
    static InventItemPurchSetup find(
        ItemId          _itemId,
        InventDimId     _inventDimId,
        boolean         _forUpdate      = false)
    {
        InventItemPurchSetup    inventItemPurchSetup;

        inventItemPurchSetup = InventItemOrderSetupMap::findRecord(inventItemPurchSetup, _itemId, _inventDimId, _forUpdate);

        return inventItemPurchSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the purchase order settings of the default item.
    /// </summary>
    /// <param name="_itemId">
    ///    The number of the item for which to find the settings.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to select the record for update; optional.
    /// </param>
    /// <returns>
    ///    The purchase order settings of the default item.
    /// </returns>
    /// <remarks>
    ///    The default inventory dimension ID is used to find the default item's order settings.
    /// </remarks>

    static public InventItemPurchSetup findDefault(
        ItemId          _itemId,
        boolean         _forUpdate      = false)
    {
        return InventItemPurchSetup::find(_itemId,
                                          InventDim::inventDimIdBlank(),
                                          _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefault</Name>
				<Source><![CDATA[
    static public InventItemPurchSetup insertDefault(ItemId _itemId)
    {
        InventItemPurchSetup    inventItemPurchSetup;
        InventDimId             inventDimIdBlank = InventDim::inventDimIdBlank();

        inventItemPurchSetup.initValue();

        inventItemPurchSetup.ItemId             = _itemId;
        inventItemPurchSetup.InventDimId        = inventDimIdBlank;
        inventItemPurchSetup.InventDimIdDefault = inventDimIdBlank;

        inventItemPurchSetup.insert();

        return inventItemPurchSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemInventSetup</Name>
				<Source><![CDATA[
    public InventItemInventSetup InventItemInventSetup(InventItemInventSetup _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('InventItemInventSetup');
        }
        else
        {
            return this.setLink('InventItemInventSetup', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventItemSalesSetup</Name>
				<Source><![CDATA[
    public InventItemSalesSetup InventItemSalesSetup(InventItemSalesSetup _relatedTable = null)
    {
        if (prmIsDefault(_relatedTable))
        {
            return this.setLink('InventItemSalesSetup');
        }
        else
        {
            return this.setLink('InventItemSalesSetup', _relatedTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextSequence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next Sequence number above the current.
    /// </summary>
    /// <returns>The next Sequence number above the current. If a record already exist with that number then zero will be returned.</returns>
    public InventItemSetupSequence getNextSequence()
    {
        InventItemPurchSetup nextRecord;

        select firstonly nextRecord
            order by Sequence asc
            where nextRecord.ItemId == this.ItemId
               && nextRecord.Sequence > this.Sequence;

        if (!nextRecord)
        {
            // Current record is the top, so just create a new number
            return this.Sequence + 10;
        }

        if (nextRecord.Sequence > this.Sequence + 1)
        {
            // Get the number between the two sequences
            return any2Int64(this.Sequence + roundUp((nextRecord.Sequence - this.Sequence)/2, 0));
        }
        else
        {
            // Could not get a new number
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextSequenceForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sequence number that will place a new record on top of the hierarchy.
    /// </summary>
    /// <param name = "_itemId">The number of the item for which the sequence number will be generated.</param>
    /// <returns>The calculated sequence number.</returns>
    public static InventItemSetupSequence getNextSequenceForItem(ItemId _itemId)
    {
        InventItemPurchSetup inventItemPurchSetup;

        select firstonly Sequence from inventItemPurchSetup
            order by Sequence desc
            where inventItemPurchSetup.ItemId == _itemId;

        return inventItemPurchSetup.Sequence + 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>renumberSequencesAbove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renumbers Sequence values.
    /// </summary>
    /// <param name = "_itemId">The item to renumber for.</param>
    /// <param name = "_fromNumber">The Sequence value above which should be renumbered.</param>
    public static void renumberSequencesAbove(ItemId _itemId, InventItemSetupSequence _fromNumber, InventItemSetupSequence _increment = 10)
    {
        InventItemSetupSequence lastSequence = _fromNumber;
        InventItemSetupSequence newValue = any2Int64(roundUp(_fromNumber + 1, _increment));
        InventItemPurchSetup purchSetup;

        ttsbegin;

        while select forupdate purchSetup
            order by Sequence asc
            where purchSetup.ItemId == _itemId
               && purchSetup.Sequence > _fromNumber
        {
            if (lastSequence != purchSetup.Sequence && lastSequence != _fromNumber)
            {
                newValue = newValue + _increment;
            }
            lastSequence = purchSetup.Sequence;

            purchSetup.Sequence = newValue;
            purchSetup.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedFieldValue</Name>
				<Source><![CDATA[
    public void modifiedFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        super(_fieldName, _arrayIndex);

        this.InventItemOrderSetupMap::modifiedFieldValue(_fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    public boolean validateDelete()
    {
        boolean ret = super();

        ret = ret && this.InventItemOrderSetupMap::validateDelete();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopVariantForTrade</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or creates the variant specific settings to stop the variant for sales and purchase.
    /// </summary>
    /// <param name = "_inventDimCombination">Tha variant that should no longer be traded.</param>
    public static void stopVariantForTrade(InventDimCombination _inventDimCombination)
    {
        InventItemInventSetup inventItemInventSetup;
        InventItemPurchSetup  inventItemPurchSetup;
        InventItemSalesSetup  inventItemSalesSetup;

        inventItemPurchSetup = InventItemPurchSetup::find(_inventDimCombination.ItemId, _inventDimCombination.InventDimId, true);

        boolean variantSettingsExist = inventItemPurchSetup && inventItemPurchSetup.InventDimId == _inventDimCombination.InventDimId;

        if(!variantSettingsExist)
        {
            inventItemPurchSetup = null;
            InventItemSetupSequence topSequence = InventItemPurchSetup::getNextSequenceForItem(_inventDimCombination.ItemId);

            inventItemPurchSetup.initValue();
            inventItemPurchSetup.ItemId = _inventDimCombination.ItemId;
            inventItemPurchSetup.InventDimId = _inventDimCombination.InventDimId;
            inventItemPurchSetup.InventDimIdDefault = InventDim::inventDimIdBlank();
            inventItemPurchSetup.Sequence = topSequence;
            inventItemPurchSetup.initFromDefault();

            inventItemSalesSetup.initValue();
            inventItemSalesSetup.ItemId = _inventDimCombination.ItemId;
            inventItemSalesSetup.InventDimId = _inventDimCombination.InventDimId;
            inventItemSalesSetup.InventDimIdDefault = InventDim::inventDimIdBlank();
            inventItemSalesSetup.Sequence = topSequence;
            inventItemSalesSetup.initFromDefault();
                            
            inventItemInventSetup.initValue();
            inventItemInventSetup.ItemId = _inventDimCombination.ItemId;
            inventItemInventSetup.InventDimId = _inventDimCombination.InventDimId;
            inventItemInventSetup.InventDimIdDefault = InventDim::inventDimIdBlank();
            inventItemInventSetup.Sequence = topSequence;
            inventItemInventSetup.initFromDefault();
            if (inventItemInventSetup.validateWrite())
            {
                inventItemInventSetup.insert();
            }
        }
        else
        {
            inventItemSalesSetup = InventItemSalesSetup::find(_inventDimCombination.ItemId, _inventDimCombination.InventDimId, true);
        }
                        
        inventItemPurchSetup.Stopped = NoYes::Yes;
        inventItemPurchSetup.Override = NoYes::Yes;
        inventItemSalesSetup.Stopped = NoYes::Yes;
        inventItemSalesSetup.Override = NoYes::Yes;

        if (inventItemPurchSetup.validateWrite())
        {
            if (variantSettingsExist)
            {
                inventItemPurchSetup.update();
            }
            else
            {
                inventItemPurchSetup.insert();
            }
        }
        if (inventItemSalesSetup.validateWrite())
        {
            if (variantSettingsExist)
            {
                inventItemSalesSetup.update();
            }
            else
            {
                inventItemSalesSetup.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS124018</DeveloperDocumentation>
	<FormRef>InventItemOrderSetup</FormRef>
	<Label>@SYS110754</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>ItemId</TitleField1>
	<TitleField2>InventDimId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>ItemDimIdx</ClusteredIndex>
	<Modules>Inventory</Modules>
	<PrimaryIndex>ItemDimIdx</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>InventItemInventSetup</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>InventItemInventSetup</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>InventDimIdDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventSite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Override</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimIdDefault</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventSite</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MandatoryInventLocation</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Override</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ItemId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>itemName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LeadTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CalendarDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Stopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>OtherEdit</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editLeadTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editCalendarDays</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editStopped</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PdsCWQuantityEdit</Name>
			<Label>@PDS1447</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editPdsCWMultipleQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPdsCWLowestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPdsCWHighestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editPdsCWStandardQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsCWUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Quantity</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>MultipleQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LowestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>HighestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>StandardQty</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>QuantityEdit</Name>
			<Label>@SYS11187</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>editMultipleQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editLowestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editHighestQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>editStandardQty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>pdsPurchUnitId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>InventDimId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CalendarDays</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CalendarDays</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>HighestQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyHighest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>InventDimIdDefault</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventDimId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemId</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>LeadTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeadTimePurchDefault</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LowestQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyLowest</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryInventLocation</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS22408</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MandatoryInventSite</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS110751</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>MultipleQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyMultiples</ExtendedDataType>
			<Label>@SCM:Field_MultipleQty</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Override</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Override</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>StandardQty</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>QtyStandard</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Stopped</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ItemStopped</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Sequence</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemSetupSequence</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OverrideDefaultStorageDimensions</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>InventItemOverrideDefaultStorageDimensions</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ItemDimIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemStoppedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Stopped</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Override</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ItemSequenceIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ItemId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>Sequence</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>InventDimId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>InventItemOrderSetupMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
					<MapFieldTo>ItemId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
					<MapFieldTo>InventDimId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimIdDefault</MapField>
					<MapFieldTo>InventDimIdDefault</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MandatoryInventSite</MapField>
					<MapFieldTo>MandatoryInventSite</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MandatoryInventLocation</MapField>
					<MapFieldTo>MandatoryInventLocation</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>MultipleQty</MapField>
					<MapFieldTo>MultipleQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LowestQty</MapField>
					<MapFieldTo>LowestQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>HighestQty</MapField>
					<MapFieldTo>HighestQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>StandardQty</MapField>
					<MapFieldTo>StandardQty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LeadTime</MapField>
					<MapFieldTo>LeadTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CalendarDays</MapField>
					<MapFieldTo>CalendarDays</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Stopped</MapField>
					<MapFieldTo>Stopped</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Override</MapField>
					<MapFieldTo>Override</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Sequence</MapField>
					<MapFieldTo>Sequence</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>OverrideDefaultStorageDimensions</MapField>
					<MapFieldTo>OverrideDefaultStorageDimensions</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultInventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DefaultInventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemPurchSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimIdDefault</Name>
					<SourceEDT>InventDimId</SourceEDT>
					<Field>InventDimIdDefault</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>DimIdIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventDim</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS123902</EntityRelationshipRole>
			<RelatedTable>InventDim</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>InventDim</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>InventItemPurchSetup</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>inventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemInventSetup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EntityRelationshipRole>@SYS124019</EntityRelationshipRole>
			<RelatedTable>InventItemInventSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventItemSalesSetup</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<CreateNavigationPropertyMethods>Yes</CreateNavigationPropertyMethods>
			<EntityRelationshipRole>@SYS124020</EntityRelationshipRole>
			<RelatedTable>InventItemSalesSetup</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>InventDimId</Name>
					<Field>InventDimId</Field>
					<RelatedField>InventDimId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>InventTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemId</Name>
					<Field>ItemId</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ItemIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>