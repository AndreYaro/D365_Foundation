<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalParmPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalParmPost extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournalType</Name>
				<Source><![CDATA[
    public boolean checkJournalType()
    {
        boolean ret = true;

        if (!LedgerJournalParmPost::canPostJournalType(this.LedgerJournalType))
        {
            ret = checkFailed("@SYS81593");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    void initParmDefault()
    {
        this.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert()
    {
        this.JobStatus  = ParmJobStatus::Waiting;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalName</Name>
				<Source><![CDATA[
    display JournalDescription journalName()
    {
        ;
        return LedgerJournalTable::find(this.LedgerJournalId).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTable</Name>
				<Source><![CDATA[
    LedgerJournalTable ledgerJournalTable()
    {
        return LedgerJournalTable::find(this.LedgerJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(LedgerJournalParmPost, LedgerJournalType) :
                if (this.LedgerJournalType != this.orig().LedgerJournalType)
                {
                    this.LedgerJournalId = '';
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        ret = ret && this.checkJournalType();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostJournalType</Name>
				<Source><![CDATA[
    static public boolean canPostJournalType(LedgerJournalType  _ledgerJournalType)
    {
        boolean ret = true;

        switch (_ledgerJournalType)
        {
            case LedgerJournalType::Periodic,
                 LedgerJournalType::VendInvoicePool:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    public static boolean checkExist(Num parmId, LedgerJournalId ledgerJournalId)
    {
        boolean ret = true;

        if (!LedgerJournalParmPost::exist(parmId, ledgerJournalId))
        {
            ret = checkFailed(strfmt(LedgerJournalParmPost::txtNotExist(), parmId, ledgerJournalId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteParameters</Name>
				<Source><![CDATA[
    static void deleteParameters(Num parmId)
    {
        LedgerJournalParmPost   ledgerJournalParmPost;

        ttsbegin;

        delete_from ledgerJournalParmPost
            index hint NumJournalNumIdx
            where ledgerJournalParmPost.ParmId == parmId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePosted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the <c>LedgerJournalParmPost</c> records that have
    ///    associated posted <c>LedgerJournalTable</c> records.  This
    ///    will prevent posting of journals that have already been
    ///    posted when using late selection.
    /// </summary>
    public static void deletePosted()
    {
        LedgerJournalParmPost   ledgerJournalParmPost;
        LedgerJournalTable      ledgerJournalTable;

        delete_From ledgerJournalParmPost
            exists join ledgerJournalTable
                where ledgerJournalTable.Posted == true
                    && ledgerJournalParmPost.LedgerJournalId == ledgerJournalTable.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    public static boolean exist(Num parmId, LedgerJournalId ledgerJournalId)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     ledgerJournalParmPost
                 where
                     ledgerJournalParmPost.ParmId == parmId &&
                    ledgerJournalParmPost.LedgerJournalId == ledgerJournalId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLedgerJournalIdExist</Name>
				<Source><![CDATA[
    public static boolean doesLedgerJournalIdExist(LedgerJournalId ledgerJournalId)
    {
        boolean found;

        found = (select firstonly RecId
                    from ledgerJournalParmPost
                    where ledgerJournalParmPost.LedgerJournalId == ledgerJournalId).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public static LedgerJournalParmPost find(
        Num parmId,
        LedgerJournalId ledgerJournalId ,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalParmPost ledgerJournalParmPost;
        ;

        ledgerJournalParmPost.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalParmPost.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            ledgerJournalParmPost
            where
            ledgerJournalParmPost.ParmId == parmId &&
                    ledgerJournalParmPost.LedgerJournalId == ledgerJournalId;

        return ledgerJournalParmPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByParmId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a set of records in the <c>LedgerJournalParmPost</c> table that have the same
    ///    <c>ParmId</c> value as the <paramref name="_parmId" /> parameter.
    /// </summary>
    /// <param name="_parmId">
    ///    The <c>parmId</c> value with which to match the records.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    ///    The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    ///    A set of records from the <c>LedgerJournalParmPost</c> table.
    /// </returns>
    public static LedgerJournalParmPost findByParmId(
        Num                     _parmId,
        boolean                 _forupdate = false,
        ConcurrencyModel        _concurrencyModel = ConcurrencyModel::Auto)
    {
        LedgerJournalParmPost ledgerJournalParmPost;
        ;

        ledgerJournalParmPost.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            ledgerJournalParmPost.concurrencyModel(_concurrencyModel);
        }

        select
            ledgerJournalParmPost
        where
            ledgerJournalParmPost.ParmId == _parmId;

        return ledgerJournalParmPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    static LineNum lastLineNum(ParmId parmId)
    {
        return (select maxof(LineNum) from ledgerJournalParmPost
                    where ledgerJournalParmPost.ParmId == parmId).LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookpJournalId</Name>
				<Source><![CDATA[
    static void lookpJournalId(LedgerJournalType _ledgerJournalType,
                                      FormStringControl _ctrl)
    {
        LedgerJournalTable      ledgerJournalTable;
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRangeJournalType;
        QueryBuildRange         queryBuildRangeUserGroupId;
        QueryBuildRange         queryBuildRangePosted;
        QueryBuildRange         queryBuildRangeSystemBlocked;
        QueryBuildRange         queryBuildRangeInUse;

        ledgerJournalTable.JournalType = _ledgerJournalType;

        sysTableLookup                  = SysTableLookup::newParameters(tablenum(LedgerJournalTable),_ctrl);
        queryBuildDataSource            = query.addDataSource(tablenum(LedgerJournalTable));
        queryBuildRangeJournalType      = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, JournalType));
        queryBuildRangeUserGroupId      = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, GroupBlockId));
        queryBuildRangePosted           = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, Posted));
        queryBuildRangeSystemBlocked    = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, SystemBlocked));
        queryBuildRangeInUse            = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, SessionId));

        sysTableLookup.addLookupfield(fieldnum(LedgerJournalTable, JournalNum));
        sysTableLookup.addLookupfield(fieldnum(LedgerJournalTable, Name));

        queryBuildRangeJournalType.value(queryValue(_ledgerJournalType));
        queryBuildRangeUserGroupId.value(UserGroupList::groupsForUser());
        queryBuildRangePosted.value(queryValue(NoYes::No));
        queryBuildRangeSystemBlocked.value(queryValue(NoYes::No));
        queryBuildRangeInUse.value(queryValue(0));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102231";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasic</ConfigurationKey>
	<DeveloperDocumentation>@SYS126152</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS86511</Label>
	<TableGroup>Worksheet</TableGroup>
	<TitleField1>LedgerJournalType</TitleField1>
	<TitleField2>LedgerJournalId</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>AccountingFoundation</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>journalName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>LateSelection</Name>
			<Label>@SYS72905</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LateSelectionQuery</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LateSelection</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Other</Name>
			<Label>@SYS1284</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExecutedDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>JobStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerJournalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>journalName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferErrors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Post</Name>
			<Label>@SYS5943</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransferErrors</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>System</Name>
			<Label>@SYS4278</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>ExecutedDateTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>DateTimeExecuted</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>JobStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>ParmJobStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LateSelection</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LateSelection</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>LateSelectionQuery</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LateSelectionQuery</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerJournalId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerJournalId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>LedgerJournalType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>LedgerJournalType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>LineNum</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransferErrors</Name>
			<AssetClassification>System metadata</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<Label>@SYS86506</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>JournalDataAreaId</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>DataAreaId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>NumLineNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LineNum</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>NumJournalNumIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>LedgerJournalId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ParmBuffer</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>Linenum</MapField>
					<MapFieldTo>LineNum</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ParmId</MapField>
					<MapFieldTo>ParmId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Id</MapField>
					<MapFieldTo>LedgerJournalId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>JobStatus</MapField>
					<MapFieldTo>JobStatus</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDate</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ExecutedDateTime</MapField>
					<MapFieldTo>ExecutedDateTime</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelection</MapField>
					<MapFieldTo>LateSelection</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LateSelectionQuery</MapField>
					<MapFieldTo>LateSelectionQuery</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LedgerJournalTable_LedgerJournalId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>LedgerJournalTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>LedgerJournalTable_LedgerJournalId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>LedgerJournalParmPost</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LedgerJournalId</Name>
					<SourceEDT>LedgerJournalId</SourceEDT>
					<Field>LedgerJournalId</Field>
					<RelatedField>JournalNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeNumIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>