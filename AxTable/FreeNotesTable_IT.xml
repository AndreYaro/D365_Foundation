<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeNotesTable_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FreeNotesTable_IT extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDocumentRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates note attachment for the record.
    /// </summary>
    /// <param name = "_tableId">The table ID of target record.</param>
    /// <param name = "_recId">The target record ID.</param>
    /// <param name = "_languageId">The language ID to select proper translation.</param>
    /// <param name = "_documentType">The type of document to get notes for.</param>
    public void createDocumentRef(
        RefTableId _tableId,
        RefRecId _recId,
        LanguageId _languageId,
        DocumentStatus _documentType)
    {
        DocuTypeId docuType = this.determineDocuType(_documentType);

        LanguageId languageForNote = _languageId;
        if (_documentType == DocumentStatus::PickingList)
        {
            Session session = new Session();
            // Picking list notes are always in Standard language.
            languageForNote = session.interfaceLanguage();
        }

        LanguageTxt languageTxt = LanguageTxt::find(tableNum(FreeNotesTable_IT), this.RecId, languageForNote);

        if (docuType
            && (languageTxt.Txt || this.Text)
            && _tableId
            && _recId)
        {
            DocuRef docuRef;

            docuRef.RefTableId = _tableId;
            docuRef.RefRecId = _recId;

            docuRef.Name = FreeNotesTable_IT::getDocumentName(_tableId);
            docuRef.TypeId = docuType;
            docuRef.Restriction = this.Restriction;
            docuref.RefCompanyId = curExt();
            
            docuRef.Notes = languageTxt ? languageTxt.Txt : this.Text;
            docuRef.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    public void modifiedField(fieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldnum(FreeNotesTable_IT, CustVendCode):
                if (this.CustVendCode != this.orig().CustVendCode)
                {
                    this.CustVendRelation = '';
                }
                break;
            case fieldnum(FreeNotesTable_IT, ItemCode):
                if (this.ItemCode != this.orig().ItemCode)
                {
                    this.ItemRelation = '';
                }
                break;
            case fieldnum(FreeNotesTable_IT, Module):
                this.CustVendRelation = '';
                break;
            default: break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean isValid = super();

        if (isValid)
        {
            if (this.CustVendCode != TableGroupAll::All
                && this.CustVendRelation == '')
            {
                isValid = checkFailed(strfmt("@SYS26332","@SYS265"));
            }

            if (this.ItemCode != TableGroupAll::All
                && this.ItemRelation == ''
                && this.HeaderLines == HeaderLines_IT::Lines)
            {
                isValid = checkFailed(strfmt("@SYS26332","@SYS8631"));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDocuType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines what <c>DocuTypeId</c> reference to use based on the document status.
    /// </summary>
    /// <param name = "_documentType">A <c>DocumentStatus</c> enumeration.</param>
    /// <returns>The document type for the attachment.</returns>
    protected DocuTypeId determineDocuType(DocumentStatus _documentType)
    {
        DocuTypeId docuType;

        switch (_documentType)
        {
            case DocumentStatus::PurchaseOrder:
                docuType = VendFormLetterDocument::find().DocuTypePurchOrder;
                break;
            case DocumentStatus::Quotation:
                docuType = CustFormLetterDocument::find().DocuTypeQuotation;
                break;
            case DocumentStatus::Confirmation:
                docuType = CustFormLetterDocument::find().DocuTypeConfirm;
                break;
            case DocumentStatus::PickingList:
                docuType = CustFormLetterDocument::find().DocuTypePickingList;
                break;
            case DocumentStatus::PackingSlip:
                docuType = CustFormLetterDocument::find().DocuTypePackingSlip;
                break;
            case DocumentStatus::Invoice:
                docuType = CustFormLetterDocument::find().DocuTypeInvoice;
                break;
            case DocumentStatus::FreeTextInvoice:
                docuType = CustFormLetterDocument::find().DocuTypeFreeTextInvoice;
                break;
            default:
                break;
        }

        return docuType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document name.
    /// </summary>
    /// <param name = "_tableId">The Id of document table.</param>
    /// <returns>The name of document.</returns>
    protected static Name getDocumentName(TableId _tableId)
    {
        const Name SalesOrder = 'Sales order';
        const Name PurchOrder = 'Purchase order';
        const Name Quotation = 'Quotation order';
        const Name FTI = 'Free text invoice';

        Name name;

        switch (_tableId)
        {
            case tableNum(SalesTable):
            case tableNum(SalesLine):
                name = SalesOrder;
                break;
            case tableNum(PurchTable):
            case tableNum(PurchLine):
                name = PurchOrder;
                break;
            case tableNum(SalesQuotationTable):
            case tableNum(SalesQuotationLine):
                name = Quotation;
                break;
            case tableNum(CustInvoiceTable):
            case tableNum(CustInvoiceLine):
                name = FTI;
                break;
            default:
                break;
        }

        return name;

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteDocumentRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes related notes attachments.
    /// </summary>
    /// <param name = "_common">The record that attachments are related to.</param>
    public static void deleteDocumentRef(Common _common)
    {
        if (_common)
        {
            TableId tableId = _common.TableId;
            RecId recId = _common.RecId;
            Name name = FreeNotesTable_IT::getDocumentName(tableId);

            //Every note related to the record will be deleted.
            ttsbegin;
            Docuref docuRef;

            if(FreeNotesTableDeleteDocuRefFlight::instance().isEnabled())
            {
                delete_from docuRef
                    index RefIdx
                        where docuRef.RefCompanyId == _common.DataAreaId 
                            && docuRef.RefTableId == tableId
                            && docuRef.RefRecId == recId
                            && docuRef.Name == name;
            }
            else
            {
                delete_from docuRef
                where docuRef.RefTableId == tableId
                    && docuRef.RefRecId == recId
                    && docuRef.Name == name;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the note record for document header.
    /// </summary>
    /// <param name = "_module">The customer or vendor module value.</param>
    /// <param name = "_custVendCode">The account relation type.</param>
    /// <param name = "_custVendRel">The relation value.</param>
    /// <param name = "_forUpdate">Determines if the found record must be selected for update.</param>
    /// <returns>The note record for document header.</returns>
    public static FreeNotesTable_IT findHeader(
        ModuleCustVend _module,
        TableGroupAll _custVendCode,
        CustVendRel _custVendRel,
        boolean _forUpdate = false)
    {
        FreeNotesTable_IT custVendFreeNotes;
        custVendFreeNotes.selectForUpdate(_forUpdate);

        select firstonly custVendFreeNotes
            where custVendFreeNotes.Module == _module
                && custVendFreeNotes.CustVendCode == _custVendCode
                && custVendFreeNotes.CustVendRelation == _custVendRel
                && custVendFreeNotes.HeaderLines == HeaderLines_IT::Header;

        return custVendFreeNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the note related to document line.
    /// </summary>
    /// <param name = "_module">The customer or vendor module value.</param>
    /// <param name = "_custVendCode">The account relation type.</param>
    /// <param name = "_custVendRel">The relation value.</param>
    /// <param name = "_itemCode">The item code.</param>
    /// <param name = "_itemRel">The item relation type.</param>
    /// <param name = "_forUpdate"></param>
    /// <returns>The note related to document line.</returns>
    public static FreeNotesTable_IT findLine(
        ModuleCustVend _module,
        TableGroupAll _custVendCode,
        CustVendRel _custVendRel,
        TableGroupAll _itemCode,
        ItemRelationInvent _itemRel,
        boolean _forUpdate = false)
    {
        FreeNotesTable_IT custVendFreeNotes;
        custVendFreeNotes.selectForUpdate(_forUpdate);

        select firstonly custVendFreeNotes
            where custVendFreeNotes.Module == _module
                && custVendFreeNotes.CustVendCode == _custVendCode
                && custVendFreeNotes.CustVendRelation == _custVendRel
                && custVendFreeNotes.ItemCode == _itemCode
                && custVendFreeNotes.ItemRelation == _itemRel
                && custVendFreeNotes.HeaderLines == HeaderLines_IT::Lines;

        return custVendFreeNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the notes that meet the conditions.
    /// </summary>
    /// <param name = "_moduleCustVend">The customer or vendor module value.</param>
    /// <param name = "_headerLines">The relation to header or lines value.</param>
    /// <param name = "_accountNum">The account number</param>
    /// <param name = "_documentStatus">The document type related to the note.</param>
    /// <param name = "_itemId">The item ID related to the note.</param>
    /// <returns>The notes that meet the conditions.</returns>
    public static FreeNotesTable_IT findNotes(
        ModuleCustVend _moduleCustVend,
        HeaderLines_IT _headerLines,
        CustVendRel _accountNum,
        DocumentStatus _documentStatus,
        ItemRelationInvent _itemId = '')
    {
        FreeNotesTable_IT custvendFreeNotes;
        fieldId onDocumentField = FreeNotesTable_IT::onDocumentField(_documentStatus);

        if (!onDocumentField)
        {
            return custvendFreeNotes;
        }

        CustVendFreeNotesGroupId_IT freeNotesGroupId;
        CustTable custTable;
        VendTable vendTable;

        switch (_moduleCustVend)
        {
            case ModuleCustVend::Cust:
                custTable = CustTable::find(_accountNum);
                freeNotesGroupId = custTable.FreeNotesGroup_IT;
                break;
            case ModuleCustVend::Vend:
                vendTable = VendTable::find(_accountNum);
                freeNotesGroupId = vendTable.FreeNotesGroup_IT;
                break;
            default:
                custTable = null;
                vendTable = null;
                break;
        }

        if (_headerLines == HeaderLines_IT::Header)
        {
            //Header notes
            //Notes on all Customers/Vendors - all Items
            select custVendFreeNotes
                index hint ModuleRelItemRelIdx
                where custVendFreeNotes.Module == _moduleCustVend
                    && custVendFreeNotes.HeaderLines == HeaderLines_IT::Header
                    && ((custVendFreeNotes.CustVendCode == TableGroupAll::Table
                        && custVendFreeNotes.CustVendRelation == _accountNum
                        && custVendFreeNotes.ItemCode == TableGroupAll::All
                        && custVendFreeNotes.(onDocumentField) == NoYes::Yes)
                    || (custVendFreeNotes.CustVendCode == TableGroupAll::GroupId
                        && custVendFreeNotes.CustVendRelation == freeNotesGroupId
                        && custVendFreeNotes.ItemCode == TableGroupAll::All
                        && custVendFreeNotes.(onDocumentField) == NoYes::Yes)
                    || (custVendFreeNotes.CustVendCode == TableGroupAll::All
                        && custVendFreeNotes.ItemCode == TableGroupAll::All
                        && custVendFreeNotes.(onDocumentField) == NoYes::Yes));

        }
        else
        {
            //Line notes
            InventTable inventTable = InventTable::find(_itemId);

            select custVendFreeNotes
                index hint ModuleRelItemRelIdx
                where custVendFreeNotes.Module == _moduleCustVend
                    && custVendFreeNotes.HeaderLines == HeaderLines_IT::Lines
                    && custVendFreeNotes.(onDocumentField) == NoYes::Yes
                     //Single Item
                     //Notes on single Customer/Vendor - single Item
                    && ((custVendFreeNotes.CustVendCode == TableGroupAll::Table
                        && custVendFreeNotes.CustVendRelation == _accountNum
                        && custVendFreeNotes.ItemCode == TableGroupAll::Table
                        && custVendFreeNotes.ItemRelation == inventTable.ItemId
                        
                    ||
                    //Notes on group of Customers/Vendors - single Item
                        (custVendFreeNotes.CustVendCode == TableGroupAll::GroupId
                        && custVendFreeNotes.CustVendRelation == freeNotesGroupId
                        && custVendFreeNotes.ItemCode == TableGroupAll::Table
                        && custVendFreeNotes.ItemRelation == inventTable.ItemId)
                    ||
                    //Notes on all Customers/Vendors - single Item
                        (custVendFreeNotes.CustVendCode == TableGroupAll::All
                        && custVendFreeNotes.ItemCode == TableGroupAll::Table
                        && custVendFreeNotes.ItemRelation == inventTable.ItemId)
                    ||
                    //Group of Items
                    //Notes on single Customer/Vendor - group of Items
                        (custVendFreeNotes.CustVendCode == TableGroupAll::Table
                        && custVendFreeNotes.CustVendRelation == _accountNum
                        && custVendFreeNotes.ItemCode == TableGroupAll::GroupId
                        && custVendFreeNotes.ItemRelation == inventTable.FreeNotesGroup_IT)
                    ||
                    //Notes on group of Customers/Vendors - group of Items
                        (custVendFreeNotes.CustVendCode == TableGroupAll::GroupId
                        && custVendFreeNotes.CustVendRelation == freeNotesGroupId
                        && custVendFreeNotes.ItemCode == TableGroupAll::GroupId
                        && custVendFreeNotes.ItemRelation == inventTable.FreeNotesGroup_IT)
                    ||
                    //Notes on all Customers/Vendors - group of Items
                        (custVendFreeNotes.CustVendCode == TableGroupAll::All
                        && custVendFreeNotes.ItemCode == TableGroupAll::GroupId
                        && custVendFreeNotes.ItemRelation == inventTable.FreeNotesGroup_IT))
                    ||
                    //All Items
                    //Notes on single Customer/Vendor - all Items
                        (custVendFreeNotes.CustVendCode == TableGroupAll::Table
                        && custVendFreeNotes.CustVendRelation == _accountNum
                        && custVendFreeNotes.ItemCode == TableGroupAll::All)
                    ||
                    //Notes on group of Customers/Vendors - all Items
                        (custVendFreeNotes.CustVendCode == TableGroupAll::GroupId
                        && custVendFreeNotes.CustVendRelation == freeNotesGroupId
                        && custVendFreeNotes.ItemCode == TableGroupAll::All)
                    ||
                    //Notes on all Customers/Vendors - all Items
                        (custVendFreeNotes.CustVendCode == TableGroupAll::All
                        && custVendFreeNotes.ItemCode == TableGroupAll::All));
        }

        return custVendFreeNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFoundNotes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains shared logic for creation of notes attachments for different types of documents.
    /// </summary>
    /// <param name = "_custVendFreeNotes">The set of notes to attach.</param>
    /// <param name = "_recId">The record Id of record that the note is related to.</param>
    /// <param name = "_tableId">The table Id of record that the note is related to.</param>
    /// <param name = "_languageId">The language Id used for translation selection.</param>
    /// <param name = "_localDocumentStatus">The type of document.</param>
    protected static void processFoundNotes(
        FreeNotesTable_IT _custVendFreeNotes,
        TableId _tableId,
        RecId _recId,
        LanguageId _languageId,
        DocumentStatus _localDocumentStatus)
    {
        while(_custVendFreeNotes)
        {
            _custVendFreeNotes.createDocumentRef(
                _tableId,
                _recId,
                _languageId,
                _localDocumentStatus);
            next _custVendFreeNotes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDocumentRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the attachment note document.
    /// </summary>
    /// <param name = "_common">The record, the note must be attached to.</param>
    public static void insertDocumentRef(Common _common)
    {
        if (_common)
        {
            FreeNotesTable_IT custVendFreeNotes;
            RecId recId;
            TableId tableId = _common.TableId;
            LanguageId languageId;
            int document;
            DictEnum documentStatusEnum = new SysDictEnum(enumnum(DocumentStatus));
            Session session = new Session();
            DocumentStatus localDocumentStatus;

            switch (tableId)
            {
                case tableNum(SalesTable):
                    SalesTable salesTable = _common;
                    recId = salesTable.RecId;
                    languageId = salesTable.LanguageId;

                    for (document = 1; document <= enumcnt(Documentstatus); document++)
                    {
                        localDocumentStatus = DocumentStatusEnum.index2Value(document);

                        if (FreeNotesTable_IT::isCompliantDocumentStatus(tableId, localDocumentStatus))
                        {
                            custVendFreeNotes = FreeNotesTable_IT::findNotes(
                                ModuleCustVend::Cust,
                                HeaderLines_IT::Header,
                                salesTable.CustAccount,
                                localDocumentStatus);

                            FreeNotesTable_IT::processFoundNotes(
                                custVendFreeNotes,
                                tableId,
                                recId,
                                languageId,
                                localDocumentStatus);

                            custVendFreeNotes.clear();
                        }
                    }

                    break;
                case tableNum(SalesLine):
                    SalesLine salesLine = _common;
                    recId = salesLine.RecId;
                    languageId = salesLine.salesTable().LanguageId;

                    for (document = 1; document <= enumcnt(Documentstatus); document++)
                    {
                        localDocumentStatus = DocumentStatusEnum.index2Value(document);

                        if (FreeNotesTable_IT::isCompliantDocumentStatus(tableId, localDocumentStatus))
                        {
                            custVendFreeNotes = FreeNotesTable_IT::findNotes(
                                ModuleCustVend::Cust,
                                HeaderLines_IT::Lines,
                                salesLine.CustAccount,
                                localDocumentStatus,
                                salesLine.ItemId);

                            FreeNotesTable_IT::processFoundNotes(
                                custVendFreeNotes,
                                tableId,
                                recId,
                                languageId,
                                localDocumentStatus);

                            custVendFreeNotes.clear();
                        }
                    }

                    break;
                case tableNum(PurchTable) :
                    PurchTable purchTable = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Vend,
                        HeaderLines_IT::Header,
                        purchTable.OrderAccount,
                        DocumentStatus::PurchaseOrder);
                    recId = purchTable.RecId;
                    languageId = purchTable.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::PurchaseOrder);

                    break;
                case tableNum(PurchLine):
                    PurchLine purchLine = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Vend,
                        HeaderLines_IT::Lines,
                        purchLine.VendAccount,
                        DocumentStatus::PurchaseOrder,
                        purchLine.ItemId);
                    recId = purchLine.RecId;
                    languageId = purchLine.purchTable().LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::PurchaseOrder);

                    break;
                case tableNum(SalesQuotationTable):
                    SalesQuotationTable salesQuotationTable = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Header,
                        salesQuotationTable.CustAccount,
                        DocumentStatus::Quotation);
                    recId = salesQuotationTable.RecId;
                    languageId = salesQuotationTable.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::Quotation);

                    break;
                case tableNum(SalesQuotationLine):
                    SalesQuotationLine salesQuotationLine = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Lines,
                        salesQuotationLine.CustAccount,
                        DocumentStatus::Quotation,
                        salesQuotationLine.ItemId);
                    recId = salesQuotationLine.RecId;
                    languageId = salesQuotationLine.salesQuotationTable().LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::Quotation);

                    break;
                case tableNum(CustInvoiceTable) :
                    CustInvoiceTable custInvoiceTable = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Header,
                        custInvoiceTable.OrderAccount,
                        DocumentStatus::FreeTextInvoice);
                    recId = CustInvoiceTable.RecId;
                    languageId = CustInvoiceTable.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::FreeTextInvoice);

                    break;
                case tableNum(CustInvoiceLine):
                    CustInvoiceLine custInvoiceLine = _common;
                    custInvoiceTable = custInvoiceLine.custInvoiceTable();
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Lines,
                        custInvoiceTable.OrderAccount,
                        DocumentStatus::FreeTextInvoice);
                    recId = custInvoiceLine.RecId;
                    languageId = custInvoiceTable.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        localDocumentStatus);

                    break;
                case tableNum(CustPackingSlipJour):
                    CustPackingSlipJour custPackingSlipJour = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Header,
                        custPackingSlipJour.OrderAccount,
                        DocumentStatus::PackingSlip);

                    recId = custPackingSlipJour.RecId;
                    languageId = custPackingSlipJour.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::PackingSlip);
                    break;
                case tableNum(CustPackingSlipTrans):
                    CustPackingSlipTrans custPackingSlipTrans = _common;
                    custPackingSlipJour = custPackingSlipTrans.custPackingslipJour();
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Lines,
                        custPackingSlipJour.OrderAccount,
                        DocumentStatus::PackingSlip,
                        custPackingSlipTrans.ItemId);

                    recId = custPackingSlipTrans.RecId;
                    languageId = custPackingSlipJour.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::PackingSlip);

                    break;
                case tableNum(WMSPickingRoute):
                    WMSPickingRoute wMSPickingRoute = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Header,
                        wMSPickingRoute.customer,
                        DocumentStatus::PickingList);

                    recId = wMSPickingRoute.RecId;
                    languageId = session.interfaceLanguage();

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::PickingList);
                    break;
                case tableNum(WMSOrderTrans):
                    WMSOrderTrans wMSOrderTrans = _common;
                    wMSPickingRoute = wMSOrderTrans.wmsPickingRoute();
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Lines,
                        wMSPickingRoute.customer,
                        DocumentStatus::PickingList,
                        wMSOrderTrans.itemId);

                    recId = wMSOrderTrans.RecId;
                    languageId = session.interfaceLanguage();

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::PickingList);
                    break;
                case tableNum(CustInvoiceJour):
                    CustInvoiceJour custInvoiceJour = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Header,
                        custInvoiceJour.InvoiceAccount,
                        DocumentStatus::Invoice);

                    recId = custInvoiceJour.RecId;
                    languageId = custInvoiceJour.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::Invoice);
                    break;
                case tableNum(CustInvoiceTrans):
                    CustInvoiceTrans custInvoiceTrans = _common;
                    custInvoiceJour = custInvoiceTrans.custInvoiceJour();
                    if (!custInvoiceJour)
                    {
                        custInvoiceJour = FreeNotesTable_IT::findProformaCustInvoiceJour(custInvoiceTrans);
                    }
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Lines,
                        custInvoiceJour.InvoiceAccount,
                        DocumentStatus::Invoice,
                        custInvoiceTrans.ItemId);

                    recId = custInvoiceTrans.RecId;
                    languageId = custInvoiceJour.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::Invoice);
                    break;

                case tableNum(CustConfirmJour):
                    CustConfirmJour custConfirmJour = _common;
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Header,
                        custConfirmJour.InvoiceAccount,
                        DocumentStatus::Confirmation);

                    recId = custConfirmJour.RecId;
                    languageId = custConfirmJour.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::Confirmation);
                    break;
                case tableNum(CustConfirmTrans):
                    CustConfirmTrans custConfirmTrans = _common;
                    custConfirmJour = custConfirmTrans.custConfirmJour();
                    custVendFreeNotes = FreeNotesTable_IT::findNotes(
                        ModuleCustVend::Cust,
                        HeaderLines_IT::Lines,
                        custConfirmJour.InvoiceAccount,
                        DocumentStatus::Confirmation,
                        custConfirmTrans.ItemId);

                    recId = custConfirmTrans.RecId;
                    languageId = custConfirmJour.LanguageId;

                    FreeNotesTable_IT::processFoundNotes(
                        custVendFreeNotes,
                        tableId,
                        recId,
                        languageId,
                        DocumentStatus::Confirmation);
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCompliantDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the document is compliant for note.
    /// </summary>
    /// <param name = "_tableId">The document table Id.</param>
    /// <param name = "_documentStatus">The status of document.</param>
    /// <returns>true if the document is compliant, otherwise false.</returns>
    public static boolean isCompliantDocumentStatus(TableId _tableId, DocumentStatus _documentStatus)
    {
        const container DocumentStatuses = [DocumentStatus::Confirmation, DocumentStatus::Invoice, DocumentStatus::PackingSlip, DocumentStatus::PickingList];
        boolean ret;

        switch(_tableId)
        {
            case tableNum(SalesTable):
            case tableNum(SalesLine):
                ret = (conFind(DocumentStatuses, _documentStatus));
                break;
            case tableNum(PurchTable):
            case tableNum(PurchLine):
                ret = _documentStatus == DocumentStatus::PurchaseOrder;
                break;
            case tableNum(SalesQuotationTable):
            case tableNum(SalesQuotationLine):
                ret = _documentStatus == DocumentStatus::Quotation;
                break;
            case tableNum(CustInvoiceTable) :
            case tableNum(CustInvoiceLine):
                ret = _documentStatus == DocumentStatus::FreeTextInvoice;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDocumentField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the settings field related to the document type.
    /// </summary>
    /// <param name = "_document">The document type.</param>
    /// <returns>The <c>fieldId</c> of the corresponding settings field.</returns>
    public static fieldId onDocumentField(DocumentStatus _document)
    {
        fieldId onDocumentField;

        switch (_document)
        {
            case DocumentStatus::Quotation:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnQuotation);
                break;
            case DocumentStatus::PackingSlip:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnPackingSlip);
                break;
            case DocumentStatus::PickingList:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnPickingList);
                break;
            case DocumentStatus::Confirmation:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnConfirmation);
                break;
            case DocumentStatus::PurchaseOrder:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnPurchOrder);
                break;
            case DocumentStatus::Invoice:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnInvoice);
                break;
            case DocumentStatus::FreeTextInvoice:
                onDocumentField = fieldnum(FreeNotesTable_IT, OnFreeTextInvoice);
                break;
        }

        return onDocumentField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates notes document references of the record.
    /// </summary>
    /// <param name = "_common">The record to update references.</param>
    public static void updateDocumentRef(Common _common)
    {
        FreeNotesTable_IT::deleteDocumentRef(_common);
        FreeNotesTable_IT::insertDocumentRef(_common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00041, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProformaCustInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds unique <c>CustInvoiceJour</c> record for corresponding <c>CustInvoiceTrans</c> record
    /// with possible pro forma result.
    /// </summary>
    /// <remarks>
    /// Based on <c>CustInvoiceJour::findFromCustInvoiceTrans</c> method
    /// but allows pro forma records (with empty InvoiceId) by default.
    /// </remarks>
    /// <param name = "_custInvoiceTrans">Record to find <c>CustInvoiceJour</c> from.</param>
    /// <returns>Corresponding <c>CustInvoiceJour</c> record.</returns>
    private static CustInvoiceJour findProformaCustInvoiceJour(CustInvoiceTrans _custInvoiceTrans)
    {
        CustInvoiceJour custInvoiceJour;

        select firstonly custInvoiceJour
            where custInvoiceJour.InvoiceId == _custInvoiceTrans.InvoiceId
                && custInvoiceJour.InvoiceDate == _custInvoiceTrans.InvoiceDate
                && custInvoiceJour.NumberSequenceGroup == _custInvoiceTrans.NumberSequenceGroup
                && custInvoiceJour.SalesId == _custInvoiceTrans.SalesId;

        return custInvoiceJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<DeveloperDocumentation>@ExtendedItallianLocalization:NotesManagement</DeveloperDocumentation>
	<FormRef>CustVendFreeNotes_IT</FormRef>
	<Label>@ExtendedItallianLocalization:FreeNotesSetup</Label>
	<TitleField1>CustVendRelation</TitleField1>
	<TitleField2>ItemRelation</TitleField2>
	<CacheLookup>EntireTable</CacheLookup>
	<ClusteredIndex>ModuleRelItemRelIdx</ClusteredIndex>
	<Modules>APARShared</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>LanguageTxt</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>LanguageTxt</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CustVendCode</Name>
			<HelpText>@ExtendedItallianLocalization:AccountCode</HelpText>
			<Label>@SYS12243</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendRelation</Name>
			<ExtendedDataType>CustVendRel</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:CustVendRelationHelpText</HelpText>
			<Label>@SYS265</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>HeaderLines</Name>
			<EnumType>HeaderLines_IT</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ItemCode</Name>
			<HelpText>@SYS58255</HelpText>
			<Label>@SYS58740</Label>
			<EnumType>TableGroupAll</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ItemRelation</Name>
			<ExtendedDataType>ItemRelationInvent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Module</Name>
			<Label>@ExtendedItallianLocalization:CustomerOrVendor</Label>
			<EnumType>ModuleCustVend</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnConfirmation</Name>
			<HelpText>@ExtendedItallianLocalization:PrintOnConfirmations</HelpText>
			<Label>@SYS12529</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnDeliveryNote</Name>
			<HelpText>@ExtendedItallianLocalization:DeliveryNoteHelpText</HelpText>
			<Label>@ExtendedItallianLocalization:DeliveryNote</Label>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnFreeTextInvoice</Name>
			<HelpText>OnFreeTextInvoiceHelpText</HelpText>
			<Label>@SYS23028</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnInvoice</Name>
			<HelpText>@ExtendedItallianLocalization:OnInvoiceHelpText</HelpText>
			<Label>@SYS12128</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnPackingSlip</Name>
			<HelpText>@ExtendedItallianLocalization:OnPackingSlipHelpText</HelpText>
			<Label>@SYS11549</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnPickingList</Name>
			<HelpText>@ExtendedItallianLocalization:OnPickingListHelpText</HelpText>
			<Label>@SYS77792</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnPrepaymentRequest</Name>
			<HelpText>@ExtendedItallianLocalization:OnPrepaymentRequestHelpText</HelpText>
			<Label>@ExtendedItallianLocalization:PrepaymentRequest</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnPurchOrder</Name>
			<HelpText>@ExtendedItallianLocalization:OnPurchOrderHelpText</HelpText>
			<Label>@SYS15812</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>OnQuotation</Name>
			<HelpText>@ExtendedItallianLocalization:OnQuotationHelpText</HelpText>
			<Label>@SYS5864</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Restriction</Name>
			<EnumType>DocuRestriction</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text</Name>
			<ExtendedDataType>FreeText</ExtendedDataType>
			<HelpText>@ExtendedItallianLocalization:FreeNoteDefaultText</HelpText>
			<Label>@ExtendedItallianLocalization:FreeNoteText</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ModuleRelItemRelIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Module</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CustVendRelation</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemCode</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ItemRelation</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>CustNotesGroup</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>FreeNotesGroupsTable_IT</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CustNotesGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendFreeNotes</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_1</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>CustNotesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>ModuleCustVend::Cust</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>InventNotesGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>FreeNotesGroupsTable_IT</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>InventNotesGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendFreeNotes</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Invent</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ItemTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>InventTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ItemRelation</Name>
					<Field>ItemRelation</Field>
					<RelatedField>ItemId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>ItemCode</Name>
					<Field>ItemCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendNotesGroup</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>FreeNotesGroupsTable_IT</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>VendNotesGroup</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>CustVendFreeNotes</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>GroupId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::GroupId</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>Module_1</Name>
					<RelatedField>Module</RelatedField>
					<ValueStr>ModuleInventCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendNotesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustVendRelation</Name>
					<Field>CustVendRelation</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>CustVendCode</Name>
					<Field>CustVendCode</Field>
					<ValueStr>TableGroupAll::Table</ValueStr>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintFixed">
					<Name>Module</Name>
					<Field>Module</Field>
					<ValueStr>ModuleCustVend::Vend</ValueStr>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>