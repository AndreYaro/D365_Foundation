<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankLCExport extends BankLC
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank document type that is used by this letter of credit.
    /// </summary>
    /// <returns>
    /// The bank document type
    /// </returns>
    public BankDocumentType getBankDocumentType()
    {
        return this.getSalesTable().BankDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankLCAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the letter of credit.
    /// </summary>
    /// <returns>
    /// The total amount of the letter of credit.
    /// </returns>
    public BankLCAmountCur getBankLCAmount()
    {
        return this.getTotalOrderAmount() + this.ToleranceAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency code of the letter of credit.
    /// </summary>
    /// <returns>
    /// The currency code of the letter of credit.
    /// </returns>
    public CurrencyCode getCurrencyCode()
    {
        return this.getSalesTable().CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account that is used by the letter of credit.
    /// </summary>
    /// <returns>
    /// The customer account that is used by the letter of credit.
    /// </returns>
    public CustAccount getCustAccount()
    {
        return this.CustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> record from the sales order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c> record from the related sales order.
    /// </returns>
    public CustTable getSalesCustTable()
    {
        SalesTable  salesTableLocal;
        CustTable   custTableLocal;

        salesTableLocal = this.getSalesTable();

        if (salesTableLocal
            && salesTableLocal.RecId != 0)
        {
            custTableLocal = salesTableLocal.custTable_CustAccount();
        }

        return custTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The related <c>SalesTable</c> record.
    /// </returns>
    public SalesTable getSalesTable()
    {
        return SalesTable::find(this.SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOrderAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount of the sales order that is related to the letter of credit.
    /// </summary>
    /// <returns>
    /// The total amount from the sales order of the letter of credit.
    /// </returns>
    public BankLCAmountCur getTotalOrderAmount()
    {
        return BankLCExport::amountProformaTotalInclTax(this.SalesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalSettledShipmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total settled amount of the letter of credit.
    /// </summary>
    /// <returns>
    /// The total settled amount of the letter of credit.
    /// </returns>
    public BankLCShipmentAmountCur getTotalSettledShipmentAmount()
    {
        BankLCExportLine bankLCExportLine;

        select sum(ShipmentAmountCur)
            from bankLCExportLine
                where bankLCExportLine.BankLC                == this.RecId
                    && bankLCExportLine.ExportShipmentStatus == BankLCExportShipmentStatusType::PaymentReceived;

        return bankLCExportLine.ShipmentAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransInvolved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether any <c>BankLCExportLine</c> records have been involved in the packing slip,
    /// invoice, or payment.
    /// </summary>
    /// <returns>
    /// true if any <c>BankLCLine</c> records have been involved in the packing slip, invoice, or payment;
    /// otherwise, false.
    /// </returns>
    public boolean hasTransInvolved()
    {
        BankLCExportLine bankLCExportLineLocal;

        select firstonly RecId from bankLCExportLineLocal
            where bankLCExportLineLocal.BankLC == this.RecId
                && (bankLCExportLineLocal.ExportShipmentStatus    == BankLCExportShipmentStatusType::Invoiced
                    || bankLCExportLineLocal.ExportShipmentStatus == BankLCExportShipmentStatusType::Shipped
                    || bankLCExportLineLocal.ExportShipmentStatus == BankLCExportShipmentStatusType::PaymentReceived);

        return bankLCExportLineLocal.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>BankLCExport</c> record by using a <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record to use.
    /// </param>
    public void initFromSalesTable(SalesTable _salesTable)
    {
        CustTable   custTableLocal;

        this.SalesTable         = _salesTable.SalesId;
        custTableLocal          = this.getSalesCustTable();
        this.CustTable          = custTableLocal.AccountNum;
        this.ExportBeneficiary  = CompanyInfo::find().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue()
    {
        super();
        this.ExportStatus = BankLCExportStatusType::Prepared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfirmed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit is confirmed.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is confirmed; otherwise, false.
    /// </returns>
    public boolean isConfirmed()
    {
        return this.ExportStatus == BankLCExportStatusType::Issued
            || this.ExportStatus == BankLCExportStatusType::UnderPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPreparing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the letter of credit is in the preparing status.
    /// </summary>
    /// <returns>
    /// true if the letter of credit is in the preparing status; otherwise, false.
    /// </returns>
    public boolean isPreparing()
    {
        return this.ExportStatus == BankLCExportStatusType::Prepared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerCov</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ledger cover for <c>SalesTable</c> based on this letter of credit information.
    /// </summary>
    /// <param name="_ledgerCoverage">
    /// The <c>LedgerCoverage</c> instance to store the cover records.
    /// </param>
    public void updateLedgerCov(LedgerCoverage _ledgerCoverage)
    {
        BankLCExportLine    bankLCExportLine;
        TransDate           deliveryDate;
        SalesTable          salesTable;

        if (_ledgerCoverage)
        {
            salesTable = this.getSalesTable();

            while select ActualMaturityDateTime, ShipmentAmountCur
                from bankLCExportLine
                    where bankLCExportLine.BankLC == this.RecId
                        && bankLCExportLine.ExportShipmentStatus < BankLCExportShipmentStatusType::Invoiced
            {
                deliveryDate = DateTimeUtil::date(
                                    DateTimeUtil::applyTimeZoneOffset(
                                        bankLCExportLine.ActualMaturityDateTime,
                                        DateTimeUtil::getUserPreferredTimeZone()));
                _ledgerCoverage.updateSum(
                    deliveryDate,
                    LedgerPostingType::CustBalance,
                    LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(salesTable.accountCustLedgerDimension()),
                    salesTable.DefaultDimension,
                    salesTable.CurrencyCode,
                    - bankLCExportLine.ShipmentAmountCur,
                    0,
                    0,
                    naStr(),
                    naStr(),
                    naStr(),
                    deliveryDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret;

        ret = super(_fieldName, _arrayIndex);

        if (ret)
        {
            switch (_fieldName)
            {
                case fieldStr(BankLCExport, ExportStatus) :
                    if (this.ExportStatus == BankLCExportStatusType::Issued)
                    {
                        ret = BankLCExportType::canIssueLC(this.RecId);
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountProformaTotalInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total pro forma invoice amount of the sales order.
    /// </summary>
    /// <param name="_salesId">
    /// The sales ID of sales order.
    /// </param>
    /// <returns>
    /// The calculated proforma invoice amount.
    /// </returns>
    public static AmountCur amountProformaTotalInclTax(SalesId _salesId)
    {
        BankLCExportSalesTotals     salesTotals;
        SalesTable                  salesTable;
        AmountCur                   ret = 0.0;

        salesTable = SalesTable::find(_salesId);
        if (salesTable.RecId != 0)
        {
            salesTotals = BankLCExportSalesTotals::construct(
                salesTable,
                BankLCSalesPurchQtyCategoryType::UnInvoiced);
            salesTotals.calc();
            ret = salesTotals.totalAmount() + salesTable.amountInvoiced();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existBySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record in the <c>BankLCExport</c> table exists specified by a <c>SalesId</c>
    /// value of the <c>SalesTable</c> table.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> value of the <c>SalesTable</c> table to use.
    /// </param>
    /// <returns>
    /// true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean existBySalesTable(SalesId _salesId)
    {
        BankLCExport bankLCExport;

        if (_salesId)
        {
            select firstonly RecId from bankLCExport
                where bankLCExport.SalesTable == _salesId;

            if (bankLCExport && bankLCExport.RecId != 0)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified <c>BankLCExport</c> record.
    /// </summary>
    /// <param name="_recId">
    /// The record ID of the <c>BankLCExport</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCExport</c> table; otherwise, an empty record.
    /// </returns>
    public static BankLCExport find(
        recId   _recId,
        boolean _forUpdate = false)
    {
        BankLCExport bankLCExport;

        if (_recId)
        {
            bankLCExport.selectForUpdate(_forUpdate);

            select firstonly bankLCExport
                where bankLCExport.RecId == _recId;
        }

        return bankLCExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBySalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>BankLCExport</c> record specified by a <c>SalesId</c> value of the <c>SalesTable</c>
    /// table.
    /// </summary>
    /// <param name="_salesId">
    /// The <c>SalesId</c> value of the <c>SalesTable</c> table to use.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>BankLCExport</c> table if found; otherwise, an empty record.
    /// </returns>
    public static BankLCExport findBySalesTable(
        SalesId _salesId,
        boolean _forUpdate = false)
    {
        BankLCExport bankLCExport;

        if (_salesId)
        {
            bankLCExport.selectForUpdate(_forUpdate);

            select firstonly bankLCExport
                where bankLCExport.SalesTable == _salesId;
        }

        return bankLCExport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalNumberOfBankDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of bank documents that are opened for the specified customer account.
    /// </summary>
    /// <param name="_custAccount">
    /// The specified customer account.
    /// </param>
    /// <param name="_bankDocumentType">
    /// The bank document type.
    /// </param>
    /// <returns>
    /// The number of bank documents that are opened for the specified customer account.
    /// </returns>
    public static BankLCTotalNumberOfDocuments getTotalNumberOfBankDocuments(
        CustAccount       _custAccount,
        BankDocumentType  _bankDocumentType)
    {
        SalesTable salesTableLocal;

        select count(RecId) from salesTableLocal
            where salesTableLocal.CustAccount       == _custAccount
                && salesTableLocal.BankDocumentType == _bankDocumentType;

        return int642int(salesTableLocal.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>issueLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Issues the letter of credit.
    /// </summary>
    /// <param name="_bankLCExportRecid">
    /// The record ID of the <c>BankLCExport</c> record to be issued.
    /// </param>
    public static void issueLC(BankLCRefRecId _bankLCExportRecid)
    {
        BankLCExport bankLCExportLocal;

        ttsbegin;
        bankLCExportLocal = BankLCExport::find(_bankLCExportRecid, true);
        bankLCExportLocal.ExportStatus = BankLCExportStatusType::Issued;
        bankLCExportLocal.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>BankDocument</ConfigurationKey>
	<DeveloperDocumentation>@SYS316226</DeveloperDocumentation>
	<FormRef>BankLCExport</FormRef>
	<Label>@SYS316225</Label>
	<ListPageRef>BankLCExportGridView</ListPageRef>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>SalesTable</TitleField1>
	<TitleField2>ExportStatus</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>BankLC</Extends>
	<Modules>Bank</Modules>
	<ReplacementKey>SalesTableIdx</ReplacementKey>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaturityDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportAdvisingBank</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportBeneficiary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuingBank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AdvisingBank</Name>
			<Label>@SYS316237</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdvisingBankNoticeDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvisingBankNoticeNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdvisingSWIFTCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportAdvisingBank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>General</Name>
			<Label>@SYS19924</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ExportStatus</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SalesTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MaturityDateTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ExportBeneficiary</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustTable</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IssuingBank</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>AdvisingBankNoticeDateTime</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS316232</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdvisingBankNoticeNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCExportAdvisingBankNoticeNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdvisingSWIFTCode</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>SWIFTNo</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustTable</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustAccount</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExportAdvisingBank</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyBankAccount</ExtendedDataType>
			<Label>@SYS316237</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ExportBeneficiary</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CompanyName</ExtendedDataType>
			<Label>@SYS70328</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ExportStatus</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BankLCExportStatus</ExtendedDataType>
			<EnumType>BankLCExportStatusType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>IssuingBank</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>CustBankAccountId</ExtendedDataType>
			<Label>@SYS316238</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldUtcDateTime">
			<Name>MaturityDateTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDateTime</ExtendedDataType>
			<Label>@SYS316230</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SalesTable</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>SalesIdBase</ExtendedDataType>
			<Label>@SYS316136</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>SalesTableIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>SalesTable</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>BankAccountTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExportAdvisingBank</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>CustBankAccountIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>CustTable</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>IssuingBank</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>LCExportStatusIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ExportStatus</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>BankLCExport</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>BankLC</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Specialization</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>CustTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustTable_BankLCExport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTable</Name>
					<SourceEDT>CustAccount</SourceEDT>
					<Field>CustTable</Field>
					<RelatedField>AccountNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ExportAdvisingBank</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>BankAccountTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>BankAccountTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>BankAccountTable_BankLCExport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ExportAdvisingBank</Name>
					<SourceEDT>CompanyBankAccount</SourceEDT>
					<Field>ExportAdvisingBank</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>IssuingBank</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CustBankAccount</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>CustBankAccount</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>CustBankAccount_BankLCExport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CustTable</Name>
					<Field>CustTable</Field>
					<RelatedField>CustAccount</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>IssuingBank</Name>
					<Field>IssuingBank</Field>
					<RelatedField>AccountID</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>AccountIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>SalesTable</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>SalesTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>SalesTable</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>SalesTable_BankLCExport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>SalesTable</Name>
					<SourceEDT>SalesIdBase</SourceEDT>
					<Field>SalesTable</Field>
					<RelatedField>SalesId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>SalesIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>