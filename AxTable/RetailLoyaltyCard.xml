<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailLoyaltyCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailLoyaltyCard extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a loyalty card by record ID.
    /// </summary>
    /// <param name="_recId">
    /// The record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailLoyaltyCard</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailLoyaltyCard find(RefRecId _recId, boolean _forUpdate = false)
    {
        RetailLoyaltyCard  retailLoyaltyCard;

        if (_recId)
        {
            retailLoyaltyCard.selectForUpdate(_forUpdate);
            select firstOnly retailLoyaltyCard
                where retailLoyaltyCard.RecId == _recId;
        }

        return retailLoyaltyCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCardNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a loyalty card by card number.
    /// </summary>
    /// <param name="_cardNumber">
    /// The card number.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailLoyaltyCard</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailLoyaltyCard findByCardNumber(RetailLoyaltyCardNumber _cardNumber, boolean _forUpdate = false)
    {
        RetailLoyaltyCard  retailLoyaltyCard;

        if (_cardNumber)
        {
            retailLoyaltyCard.selectForUpdate(_forUpdate);
            select firstOnly retailLoyaltyCard
                index hint CardNumberIdx
                where retailLoyaltyCard.CardNumber == _cardNumber;
        }

        return retailLoyaltyCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>FindDefaultLoyaltyCardByCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the default loyalty card of the customer.
    /// </summary>
    /// <param name = "_accountNum">Customer account number of the card owner.</param>
    /// <param name = "_forUpdate">A Boolean value that indicates whether to read the record for update; optional.</param>
    /// <returns>A record in the <c>RetailLoyaltyCard</c> table if customer has exactly one loyalty card (not blocked); otherwise, an empty record if the customer has zero or more than one.</returns>
    public static RetailLoyaltyCard FindDefaultLoyaltyCardByCustomer(CustAccount _accountNum, boolean _forUpdate = false)
    {
        RetailLoyaltyCard retailLoyaltyCard, retailLoyaltyCard2;
        CustTable custTable;

        if (_accountNum)
        {
            retailLoyaltyCard.selectForUpdate(_forUpdate);

            // If the customer has one, and only one, non-blocked loyalty card, return it as the default card.
            // Otherwise, no card or more than on cards, return nothing.
            select firstonly retailLoyaltyCard
                    where retailLoyaltyCard.Party != 0
                       && retailLoyaltyCard.CardTenderType != RetailLoyaltyTenderTypeBase::Blocked
                exists join custTable
                    where custTable.Party == retailLoyaltyCard.Party
                       && custTable.AccountNum == _accountNum
                notexists join retailLoyaltyCard2
                    where retailLoyaltyCard2.RecId != retailLoyaltyCard.RecId
                       && retailLoyaltyCard2.Party == retailLoyaltyCard.Party
                       && retailLoyaltyCard2.CardTenderType != RetailLoyaltyTenderTypeBase::Blocked;
        }

        return retailLoyaltyCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>AllowToUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the customer is allowed to use the loyalty card.
    /// </summary>
    /// <param name = "_customerId">The customer account number.</param>
    /// <param name = "_cardRecId">The loyalty card record ID.</param>
    /// <returns>The check result.</returns>
    public static boolean AllowToUse(AccountNum _customerId, RefRecId _cardRecId)
    {
        RetailLoyaltyCard card;
        CustTable cust;

        card = RetailLoyaltyCard::find(_cardRecId);
        if (card)
        {
            // The card exists
            if (card.Party)
            {
                // The card belongs to a customer.
                if (_customerId)
                {
                    select firstonly RecId from cust
                    where cust.AccountNum == _customerId;

                    if (cust.Party == card.Party)
                    {
                        // The customer matches the card owner.
                        if (card.CardTenderType == RetailLoyaltyTenderTypeBase::Blocked)
                        {
                            // The card is blocked.
                            return checkFailed("@Retail:RetailLoyaltyCardBlockedError");
                        }
                        else
                        {
                            return true;
                        }
                    }
                    else
                    {
                        // The customer does not match the card owner.
                        return checkFailed("@Retail:RetailLoyaltyCardDifferentCustomerError");
                    }
                }
                else
                {
                    return checkFailed("@Retail:RetailLoyaltyCardNamedCustomerError");
                }
            }
            else
            {
                // The card is anonymous
                if (card.CardTenderType == RetailLoyaltyTenderTypeBase::Blocked)
                {
                    // The card is blocked.
                    return checkFailed("@Retail:RetailLoyaltyCardBlockedError");
                }
                else
                {
                    return true;
                }
            }
        }
        else
        {
            // The card does not exist.
            return checkFailed("@Retail:RetailLoyaltyCardNotExistsError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        RetailCustTable retailCustTable;
        CustTable custTable;
        RetailLoyaltyCard retailLoyaltyCard;
        
        boolean ret = super();
          
        select firstonly * from retailLoyaltyCard
            where retailLoyaltyCard.CardNumber == this.CardNumber;
        
        select firstonly * from retailCustTable
            join custTable
                where custTable.AccountNum == retailCustTable.accountNum
                    && custTable.Party == this.Party;
        
        if (ret && retailLoyaltyCard.Party != this.Party && retailCustTable.BlockCustomerForLoyaltyEnrollment)
        {
            // Customer is blocked from enrolling in new loyalty cards.
            // The party check ensures that updates can be made to cards this customer already owns.
            ret = checkFailed("@Retail:BlockCustomerForLoyaltyEnrollment");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetLoyaltyPointsToZero</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets active and unvested loyalty card reward points associated with card to zero. 
    /// </summary>
    /// <param name = "rtc">Retail Loyalty Card</param>
    public static void SetLoyaltyPointsToZero(RetailLoyaltyCard rtc)
    {
        // Get active and unvested points for each type of loyalty reward
        RetailLoyaltyRewardPoint rewardPoint;
        RetailLoyaltyRewardPointTranslation rewardPointTranslation;
        RetailLoyaltyRewardPointAmountQty active, unvested, totalPoints;
        RetailLoyaltySchemeRewardPointView schemeRewardPointView;
        RetailLoyaltyScheme scheme;
        RetailLoyaltyCardTier cardTier;

        utcdatetime now = datetimeutil::utcnow();

        while select * from  rewardPoint
                        outer join rewardPointTranslation
                        where rewardPointTranslation.RewardPoint == rewardPoint.RecId
                        join schemeRewardPointView
                        where schemeRewardPointView.RewardPoint == rewardPoint.RecId
                        join scheme
                        where scheme.RecId == schemeRewardPointView.LoyaltyScheme
                        join cardTier
                        where cardTier.Affiliation == scheme.Affiliation
                            && cardTier.LoyaltyCard == rtc.RecId
        {
            active = RetailLoyaltyCardRewardPointTrans::calcPoints(rtc, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Active);
            unvested = RetailLoyaltyCardRewardPointTrans::calcPoints(rtc, rewardPoint.RecId, RetailLoyaltyPointStatusTypeBase::Unvested);
            totalPoints = active + unvested;

            if (totalPoints > 0)
            {
                //post adjustments for each type of loyalty reward
                RetailLoyaltyCardRewardPointTrans trans;

                ttsbegin;
                trans.loyaltytransactiontype = retailloyaltytransactiontype::loyaltyadjustment;
                trans.entrytype = retailloyaltyrewardpointentrytype::adjust;
                trans.adjustmentid = numberSeq::newGetNumFromId(RetailParameters::numRefLoyaltyAdjustmentId().NumberSequenceId).num();
                trans.loyaltytranslinenum = 1.0;
                trans.affiliation = cardTier.Affiliation;
                trans.cardnumber = rtc.cardnumber;
                trans.CustAccount = CustTable::findByPartyRecId(rtc.Party).AccountNum;
                trans.RewardPoint = rewardPoint.RecId;
                trans.RewardPointAmountQty = -totalPoints;
                trans.EntryDate = DateTimeUtil::date(now);
                trans.EntryTime = DateTimeUtil::time(now);
                trans.CardTenderType = RetailLoyaltyTenderTypeBase::Blocked;
                trans.ExpirationDate = maxDate();

                RetailLoyaltyManager::PostLoyaltyCardRewardPointTrans(trans);

                ttsCommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>renamePrimaryKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Renames the foreign keys in other tables according to the change of the
    /// corresponding primary key value in this table.
    /// </summary>
    public void renamePrimaryKey()
    {
        throw Error('@Retail:RetailLoyaltyCardPrimaryKeyRenamingIsNotAllowed');
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByReplacementCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find a loyalty card by Replacement card record ID.
    /// </summary>
    /// <param name="_recId">
    /// The replacement card record ID.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>RetailLoyaltyCard</c> table; otherwise, an empty record.
    /// </returns>
    public static RetailLoyaltyCard findByReplacementCard(RefRecId _replacementCardRecId, boolean _forUpdate = false)
    {
        RetailLoyaltyCard  retailLoyaltyCard;

        if (_replacementCardRecId)
        {
            retailLoyaltyCard.selectForUpdate(_forUpdate);
            select firstOnly retailLoyaltyCard
                where retailLoyaltyCard.ReplacementCard == _replacementCardRecId;
        }

        return retailLoyaltyCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update enrollment date and time based on the changes to enrollment date
    /// </summary>
    /// <param name = "_fieldId">
    /// Field that is being updated.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(RetailLoyaltyCard, LoyaltyEnrollmentDateLocal):
                // note that LoyaltyEnrollmentDateLocal can be any date
                //   - we will use the current time of day in user preferred timezone and in utc to store the time
                //   - we will adjust the utc date based on the values of LoyaltyEnrollmentDateLocal and enrollmentTimeLocal
                Timezone tz = DateTimeUtil::getUserPreferredTimeZone();
                TimeOfDay enrollmentTimeLocal = DateTimeUtil::getTimeNow(tz);
                date utcEnrollmentDate = DateTimeUtil::date(
                    DateTimeUtil::newDateTime(this.LoyaltyEnrollmentDateLocal, enrollmentTimeLocal, DateTimeUtil::getUserPreferredTimeZone()));
                TimeOfDay utcEnrollmentTime = DateTimeUtil::getTimeNow(Timezone::GMT_COORDINATEDUNIVERSALTIME);

                date minDate = DateTimeUtil::date(DateTimeUtil::minValue());
                this.LoyaltyEnrollmentTimeLocal = 0;
                this.LoyaltyEnrollmentTime = 0;
                this.LoyaltyEnrollmentDate = minDate;
                if (this.LoyaltyEnrollmentDateLocal > minDate)
                {
                    this.LoyaltyEnrollmentTimeLocal = enrollmentTimeLocal;
                    this.LoyaltyEnrollmentTime = utcEnrollmentTime;
                    this.LoyaltyEnrollmentDate = utcEnrollmentDate;
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Retail</ConfigurationKey>
	<DeveloperDocumentation>@REX4160124</DeveloperDocumentation>
	<FormRef>RetailLoyaltyCard</FormRef>
	<Label>@REX4160123</Label>
	<TitleField1>CardNumber</TitleField1>
	<TitleField2>Party</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>CommerceCustomers</Modules>
	<PrimaryIndex>CardNumberIdx</PrimaryIndex>
	<ReplacementKey>CardNumberIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTenderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplacementCard</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>All</Name>
			<Label>@SYS14437</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Party</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardTenderType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CardNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReplacementCard</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CardNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyCardNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>CardTenderType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyTenderType</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
			<EnumType>RetailLoyaltyTenderTypeBase</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Party</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>DirPartyRecId</ExtendedDataType>
			<Label>@SYS27874</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ReplacementCard</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>OMOperatingUnitId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>OMOperatingUnitRefRecId</ExtendedDataType>
			<Label>@Retail:LoyaltyEnrollmentSource</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LoyaltyEnrollmentDate</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
			<Label>@Retail:LoyaltyEnrollmentDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LoyaltyBlockedDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RetailLoyaltyBlockedDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>LoyaltyEnrollmentTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyEnrollmentTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LoyaltyEnrollmentDateLocal</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ValidFromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>LoyaltyEnrollmentTimeLocal</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailLoyaltyEnrollmentTime</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>CardNumberIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CardNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>RetailLoyaltyCard_Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ReplacementCard</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CardNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>PartyCardNumber_Idx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>Party</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>CardNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DirPartyTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DirPartyTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Party</Name>
					<Field>Party</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RetailLoyaltyReplacementCard</Name>
			<Cardinality>ZeroOne</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>RetailLoyaltyCard</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ReplacementCard</Name>
					<Field>ReplacementCard</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>OMOperatingUnitTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>OMOperatingUnit</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OMOperatingUnitId</Name>
					<Field>OMOperatingUnitId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>