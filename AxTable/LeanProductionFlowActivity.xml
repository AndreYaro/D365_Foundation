<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowActivity</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanProductionFlowActivity extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultPickActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default pick activity for the current production flow activity.
    /// </summary>
    /// <returns>
    /// A pick <c>PlanActivity</c> record without an item number or any other pick activity if such does
    /// not exist; otherwise, an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity defaultPickActivity()
    {
        PlanActivity                        planActivity;
        PlanActivityRelationship            planActivityRelationship;
        PlanConstraint                      planConstraint;
        LeanProductionFlowActivity          leanProductionFlowActivity;
        LeanProdFlowActivityPickingLocation leanProdFlowActivityPickingLocation;

        select firstonly planActivity
        where planActivity.PlanActivityType                         == PlanActivityType::Pick
        join RecId from leanProductionFlowActivity
            where leanProductionFlowActivity.PlanActivity           == planActivity.RecId
        outer join ItemId from leanProdFlowActivityPickingLocation
            order by leanProdFlowActivityPickingLocation.ItemId asc
            where leanProdFlowActivityPickingLocation.ProductionFlowActivity == leanProductionFlowActivity.RecId
        exists join planActivityRelationship
            where planActivityRelationship.IndependentPlanActivity  == this.planActivity().RecId
                && planActivityRelationship.DependentPlanActivity   == planActivity.RecId
        exists join planConstraint
            where planConstraint.RecId                              == planActivityRelationship.Constraint
                && planConstraint.ConstraintType                    == ConstraintTypes::Aggregation;

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        public void delete()
    {
        if (this.validateDelete())
        {
            super();
        }
        else
        {
            throw error("@SYS138340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProdFlowActivityPickingLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LeanProdFlowActivityPickingLocation</c> record for the current
    /// <c>LeanProductionFlowActivity</c> object that best matches the specified criteria.
    /// </summary>
    /// <param name="_itemId">
    /// An <c>ItemId</c> variable to use in the search.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table buffer to use in the search.
    /// </param>
    /// <returns>
    /// A <c>LeanProdFlowActivityPickingLocation</c> record if one is found; otherwise, an empty record.
    /// </returns>
    /// <remarks>
    /// The best match is determined by ordering the results, item specific first, and then in order of the
    /// prioritized inventory dimensions.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProdFlowActivityPickingLocation leanProdFlowActivityPickingLocation(
        ItemId     _itemId,
        InventDim  _inventDim = null)
    {
        LeanProdFlowActivityPickingLocation     leanProdFlowActivityPickingLocation;
        LeanProductionFlowActivity              leanProductionFlowActivity;
        PlanActivityRelationship                planActivityRelationship;
        PlanActivity                            planActivity;
        PlanConstraint                          planConstraint;
        InventDim                               inventDimSearch;
        InventDimParm                           inventDimParm;
        DataAreaId                              itemDataAreaId = _itemId ? appl.company().dataArea(tableNum(InventTable)) : '';

        inventDimParm.setActiveSiteAndWarehouseDimensions();
        inventDimParm.setActiveProductDim(EcoResProductDimGroupSetup::newItemId(_itemId));

        select firstonly forceplaceholders leanProdFlowActivityPickingLocation
            order by ItemId desc
            where (leanProdFlowActivityPickingLocation.ItemId          == _itemId
               &&  leanProdFlowActivityPickingLocation.ItemDataAreaId  == itemDataAreaId)
               || leanProdFlowActivityPickingLocation.ItemId           == ''
               #InventDimJoinCoveragePriority(leanProdFlowActivityPickingLocation.inventDimId,inventDimSearch,_inventDim,inventDimParm)
            exists join leanProductionFlowActivity
                where leanProductionFlowActivity.RecId == leanProdFlowActivityPickingLocation.ProductionFlowActivity
            exists join planActivity
                where planActivity.RecId == leanProductionFlowActivity.PlanActivity
            exists join planActivityRelationship
                where planActivityRelationship.DependentPlanActivity   == planActivity.RecId
                   && planActivityRelationship.IndependentPlanActivity == this.PlanActivity
            exists join planConstraint
                where planConstraint.RecId          == planActivityRelationship.Constraint
                   && planConstraint.ConstraintType == ConstraintTypes::Aggregation;

        return leanProdFlowActivityPickingLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>LeanProductionFlow</c> record for the current table buffer.
    /// </summary>
    /// <param name="_transDateTime">
    ///    A date and time to use to find the correct production flow.
    /// </param>
    /// <returns>
    ///    A <c>LeanProductionFlow</c> table buffer.
    /// </returns>
    /// <remarks>
    ///    An active plan has priority if more than one plan is present.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanProductionFlow leanProductionFlow(TransDateTime _transDateTime)
    {
        PlanPlanActivity        planPlanActivity;
        Plan                    plan;
        LeanProductionFlow      leanProductionFlow;

        if (this.PlanActivity)
        {
            select firstonly leanProductionFlow
                join TableId from plan
                    order by Status desc
                    where plan.RecId == leanProductionFlow.Plan
                       && plan.ValidFrom <= _transDateTime
                       && (plan.ValidTo  >= _transDateTime
                       || !plan.ValidTo)
                exists join planPlanActivity
                    where planPlanActivity.Plan         == plan.RecId
                       && planPlanActivity.PlanActivity == this.PlanActivity;
        }

        return leanProductionFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandUpdatePick</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the value of the <c>OnHandUpdate</c> field for the <c>PlanActivityType::Pick</c> activity type that is
    ///    related to the current record.
    /// </summary>
    /// <param name="_receivingActivity">
    ///    A <c>LeanProductionFlowActivity</c> record buffer with the upstream activity.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes onHandUpdatePick(LeanProductionFlowActivity _receivingActivity)
    {
        PlanActivity parentPlanActivity = this.planActivity();
        PlanActivity resultPlanActivity;
        InventDim    inventDim;

        if (parentPlanActivity.PlanActivityType != PlanActivityType::Pick)
        {
            // Try to obtain the pick activity that matches the storage dimensions of the receiving (upstream) activity
            inventDim = _receivingActivity.planActivity().receiptLocation().inventDim();
            resultPlanActivity = this.storageDimPickActivity(inventDim);

            // If none found, return the default one
            if (!resultPlanActivity)
            {
                resultPlanActivity = this.defaultPickActivity();
            }
        }

        return resultPlanActivity.RecId ? resultPlanActivity.OnHandUpdate : parentPlanActivity.OnHandUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onHandUpdateReceive</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the value of the <c>OnHandUpdate</c> field for the <c>PlanActivityType::Receive</c>
    ///    activity type that is related to the current record.
    /// </summary>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes onHandUpdateReceive()
    {
        PlanActivity parentPlanActivity = this.planActivity();
        PlanActivity resultPlanActivity;

        if (parentPlanActivity.PlanActivityType != PlanActivityType::Receive)
        {
            resultPlanActivity = parentPlanActivity.nextLevelPlanActivity(PlanActivityType::Receive);
        }

        return resultPlanActivity.RecId ? resultPlanActivity.OnHandUpdate : parentPlanActivity.OnHandUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>PlanActivity</c> record for the current table buffer.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// A <c>PlanActivity</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity planActivity(boolean _forUpdate = false)
    {
        return PlanActivity::find(this.PlanActivity,_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>storageDimPickActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the pick activity for the current production flow activity that matches the storage
    /// dimensions provided.
    /// </summary>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> record buffer with the storage dimensions to filter by.
    /// </param>
    /// <param name="_blankItemIdOnly">
    /// A Boolean value that defines if the search is limited to the blank item only; optional.
    /// </param>
    /// <returns>
    /// A pick <c>PlanActivity</c> instance matching the storage dimensions if such exists, otherwise
    /// an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity storageDimPickActivity(
        InventDim _inventDim
        ,
        boolean   _blankItemIdOnly = false
        )
    {
        InventDim                           inventDim;
        InventDimParm                       inventDimParm;
        PlanActivity                        planActivity;
        PlanActivityRelationship            planActivityRelationship;
        PlanConstraint                      planConstraint;
        LeanProductionFlowActivity          leanProductionFlowActivity;
        LeanProdFlowActivityPickingLocation leanProdFlowActivityPickingLocation;

        inventDimParm.initDimLeanPickingList();

        select firstonly planActivity
            where planActivity.PlanActivityType               == PlanActivityType::Pick
            join RecId from leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == planActivity.RecId
            join ItemId from leanProdFlowActivityPickingLocation
                order by leanProdFlowActivityPickingLocation.ItemId asc
                where leanProdFlowActivityPickingLocation.ProductionFlowActivity == leanProductionFlowActivity.RecId
                   && (!leanProdFlowActivityPickingLocation.ItemId
                   ||  !_blankItemIdOnly)
            #inventDimExistsJoin(leanProdFlowActivityPickingLocation.InventDimId,inventDim,_inventDim,inventDimParm)
            exists join planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity ==
                                                                          this.PlanActivity
                   && planActivityRelationship.DependentPlanActivity   == planActivity.RecId
            exists join planConstraint
                where planConstraint.RecId                             == planActivityRelationship.Constraint
                   && planConstraint.ConstraintType                    == ConstraintTypes::Aggregation;

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
        public boolean validateDelete()
    {
        boolean ret;

        ret = super();

        if (ret && !KanbanFlow::canDeleteLeanProductionFlowActivity(this))
        {
            ret = checkFailed(strFmt("@SYS305259", "@SYS38381"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record in the <c>LeanProductionFlowActivity</c> table exists.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the <c>LeanProductionFlowActivity</c> table record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(RefRecId _recId)
    {
        return _recId &&
               (select firstonly RecId from leanProductionFlowActivity
                    where leanProductionFlowActivity.RecId == _recId).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanProductionFlowActivity</c> table.
    /// </summary>
    /// <param name="_refRecId">
    ///    The record ID of the <c>LeanProductionFlowActivity</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanProductionFlowActivity</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProductionFlowActivity find(
        LeanProductionFlowActivityRefRecId _refRecId,
        boolean                            _forUpdate = false)
    {
        LeanProductionFlowActivity    leanProductionFlowActivity;

        if (_refRecId)
        {
            leanProductionFlowActivity.selectForUpdate(_forUpdate);

            select firstonly leanProductionFlowActivity
                where leanProductionFlowActivity.RecId == _refRecId;
        }

        return leanProductionFlowActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>LeanProductionFlowActivity</c> table.
    /// </summary>
    /// <param name="_planActivity">
    ///    The record ID of the <c>PlanActivity</c> table record to find.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>LeanProductionFlowActivity</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProductionFlowActivity findPlanActivity(
        PlanActivityRefRecId _planActivity,
        boolean              _forUpdate = false)
    {
        LeanProductionFlowActivity    leanProductionFlowActivity;

        if (_planActivity)
        {
            leanProductionFlowActivity.selectForUpdate(_forUpdate);

            select firstonly leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == _planActivity;
        }

        return leanProductionFlowActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkCellUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the specified record is assigned to any production flow activity.
    /// </summary>
    /// <param name="_wrkCtrResourceGroup">
    ///    The record ID of the <c>WrkCtrResourceGroup</c> table to check.
    /// </param>
    /// <param name="_forUpdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PlanReference</c> table with the specified <c>WrkCtrResourceGroup</c> record
    ///    assigned to it; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanReference isWorkCellUsed(
        WrkCtrResourceGroupRefRecId _wrkCtrResourceGroup,
        boolean                     _forUpdate = false)
    {
        LeanProductionFlowActivity  leanProductionFlowActivity;
        PlanActivity                planActivity;
        PlanReference               planReference;

        select firstonly PlanReference from planActivity
            exists join leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity        == planActivity.RecId
                   && leanProductionFlowActivity.WrkCtrResourceGroup == _wrkCtrResourceGroup
                   && planActivity.PlanActivityType                  == PlanActivityType::Process;

        if (planActivity)
        {
            planReference = planActivity.planReference();
        }

        return planReference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LeanManufacturing</ConfigurationKey>
	<DeveloperDocumentation>@SYS320523</DeveloperDocumentation>
	<FormRef>PlanActivity</FormRef>
	<Label>@SYS152579</Label>
	<SingularLabel>@SYS152580</SingularLabel>
	<TableGroup>Main</TableGroup>
	<TitleField1>PlanActivity</TitleField1>
	<TitleField2>WrkCtrResourceGroup</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<Modules>ProductionControl</Modules>
	<ReplacementKey>PlanActivityIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FeederBridge</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WrkCtrResourceGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PickUpSemiFinished</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveSemiFinished</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CycleTime</Name>
			<Label>@SYS105720</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CycleTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Feeder</Name>
			<Label>@SYS131911</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FeederBridge</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PlanActivity</Name>
			<Label>@SYS152578</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PlanActivity</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>RegisterScrap</Name>
			<Label>@SYS325491</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>RegisterScrap</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ResourceGroup</Name>
			<Label>@SYS15433</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>WrkCtrResourceGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SemiFinished</Name>
			<Label>@SYS309902</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PickUpSemiFinished</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ReceiveSemiFinished</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>CycleTime</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanCycleTimeInUnit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>FeederBridge</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanFeederBridge</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PickUpSemiFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanPickUpSemiFinished</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>PlanActivity</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PlanActivityRefRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ReceiveSemiFinished</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanReceiveSemiFinished</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>RegisterScrap</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LeanRegisterScrap</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WrkCtrResourceGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>WrkCtrResourceGroupRefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PlanActivityIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>PlanActivity</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>FK_WrkCtrResourceGroup</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>WrkCtrResourceGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PlanActivity</Name>
			<Cardinality>ExactlyOne</Cardinality>
			<RelatedTable>PlanActivity</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Activity</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProductionFlowActivity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PlanActivity</Name>
					<Field>PlanActivity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>WrkCtrResourceGroup</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>WrkCtrResourceGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WorkCell</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProductionFlowActivity</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WrkCtrResourceGroup</Name>
					<Field>WrkCtrResourceGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>