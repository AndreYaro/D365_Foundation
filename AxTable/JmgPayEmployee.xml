<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayEmployee</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class JmgPayEmployee extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether existing records in the <c>JmgPayEmployee</c> table overlap this
    /// <c>JmgPayEmployee</c> record.
    /// </summary>
    /// <returns>
    /// true if no overlapping records exist; otherwise, false.
    /// </returns>
    private boolean checkOverlap()
    {
        JmgPayEmployee jmgPayEmployee;
        boolean ret = true;

        // Check for overlap in date intervals:
        if (this.FromDate       && this.ToDate)
        {
            select firstonly RecId
                from  jmgPayEmployee
                where jmgPayEmployee.RecId         != this.RecId       &&
                      jmgPayEmployee.Worker        == this.Worker      &&
                      jmgPayEmployee.PayCostType   == this.PayCostType &&
                      ((!jmgPayEmployee.FromDate                       && // Check for unbound interval
                        !jmgPayEmployee.ToDate)                        ||
                       (jmgPayEmployee.FromDate                        && // Check for lower bound interval
                        !jmgPayEmployee.ToDate                         &&
                        jmgPayEmployee.FromDate    <= this.ToDate)     ||
                       (!jmgPayEmployee.FromDate                       && // Check for upper bound interval
                        jmgPayEmployee.ToDate                          &&
                        jmgPayEmployee.ToDate      >= this.FromDate)   ||
                       (jmgPayEmployee.FromDate                        && // Check for bound interval
                        jmgPayEmployee.ToDate                          &&
                        (jmgPayEmployee.FromDate   >= this.FromDate    &&
                         jmgPayEmployee.FromDate   <= this.ToDate)     ||
                        (jmgPayEmployee.ToDate     >= this.FromDate    &&
                         jmgPayEmployee.ToDate     <= this.ToDate)     ||
                        (jmgPayEmployee.FromDate   <  this.FromDate    &&
                         jmgPayEmployee.ToDate     >  this.ToDate)));
        }
        else if (this.FromDate  && !this.ToDate)
        {
            select firstonly RecId
                from  jmgPayEmployee
                where jmgPayEmployee.RecId         != this.RecId       &&
                      jmgPayEmployee.Worker        == this.Worker      &&
                      jmgPayEmployee.PayCostType   == this.PayCostType &&
                      ((!jmgPayEmployee.FromDate                       && // Check for unbound interval
                        !jmgPayEmployee.ToDate)                        ||
                       (jmgPayEmployee.FromDate                        && // Check for lower bound interval
                        !jmgPayEmployee.ToDate)                        ||
                       (!jmgPayEmployee.FromDate                       && // Check for upper bound interval
                        jmgPayEmployee.ToDate                          &&
                        jmgPayEmployee.ToDate      >= this.FromDate)   ||
                       (jmgPayEmployee.FromDate                        && // Check for bound interval
                        jmgPayEmployee.ToDate                          &&
                        jmgPayEmployee.ToDate      >= this.FromDate));
        }
        else if (!this.FromDate && this.ToDate)
        {
            select firstonly RecId
                from  jmgPayEmployee
                where jmgPayEmployee.RecId         != this.RecId       &&
                      jmgPayEmployee.Worker        == this.Worker      &&
                      jmgPayEmployee.PayCostType   == this.PayCostType &&
                      ((!jmgPayEmployee.FromDate                       && // Check for unbound interval
                        !jmgPayEmployee.ToDate)                        ||
                       (jmgPayEmployee.FromDate                        && // Check for lower bound interval
                        !jmgPayEmployee.ToDate                         &&
                        jmgPayEmployee.FromDate    <= this.ToDate)     ||
                       (!jmgPayEmployee.FromDate                       && // Check for upper bound interval
                        jmgPayEmployee.ToDate)                         ||
                       (jmgPayEmployee.FromDate                        && // Check for bound interval
                        jmgPayEmployee.ToDate                          &&
                        jmgPayEmployee.FromDate    <= this.ToDate));
        }
        else
        {
            // Neither from nor to date are set.
            select firstonly RecId
                from  jmgPayEmployee
                where jmgPayEmployee.RecId         != this.RecId       &&
                      jmgPayEmployee.Worker        == this.Worker      &&
                      jmgPayEmployee.PayCostType   == this.PayCostType;
        }

        if (jmgPayEmployee.RecId)
        {
            ret = ret && checkFailed("@SYS39599");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>JmgPayEmployee</c> record into the database.
    /// </summary>
    public void insert()
    {
        if (this.checkOverlap())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgPayEmployee</c> record in the database.
    /// </summary>
    public void update()
    {
        if (this.checkOverlap())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
        JmgPayTable jmgPayTable;

        ret = super();

        if (ret)
        {
            ret = JmgEmployee::validateRegistrationWorker(this.Worker);
        }

        jmgPayTable = JmgPayTable::find(this.PayCostType);

        if (ret && this.Percent && this.Price)
            ret = checkFailed("@SYS39353");

        if (ret && jmgPayTable.RefPayCostType      && this.Price)
            ret = checkFailed("@SYS39355");

        if (ret && this.Percent && !jmgPayTable.RefPayCostType)
            ret = checkFailed("@SYS39354");

        // From date must be smaller than to date
        if (ret && this.FromDate && this.ToDate && this.FromDate > this.ToDate)
        {
            ret = ret && checkFailed("@SYS16982");
        }

        ret = ret && this.checkOverlap();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>JmgPayEmployee</c> record from the database for the specified pay cost type, worker,
    /// and date.
    /// </summary>
    /// <param name="_payCostType">
    /// The Pay cost type to search for.
    /// </param>
    /// <param name="_worker">
    /// The ID of the worker to search for
    /// </param>
    /// <param name="_date">
    /// The date to search for.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that specifies whether the returned record must be selected for update.
    /// </param>
    /// <returns>
    /// A <c>JmgPayEmployee</c> record.
    /// </returns>
    /// <remarks>
    /// The returned <c>JmgPayEmployee</c> record has a date interval, which covers the specified date.
    /// </remarks>
    static JmgPayEmployee find(JmgPayCostType _payCostType, JmgWorkerRecId _worker, JmgDate _date, boolean  _forUpdate = false)
    {
        JmgPayEmployee    jmgPayEmployee;

        jmgPayEmployee.selectForUpdate(_forUpdate);

        if (_payCostType && _worker && _date)
        {
            select firstonly jmgPayEmployee
                where jmgPayEmployee.PayCostType    == _payCostType &&
                      jmgPayEmployee.Worker         == _worker      &&
                      ((jmgPayEmployee.FromDate                     && // Bound date interval
                        jmgPayEmployee.ToDate                       &&
                        jmgPayEmployee.FromDate    <= _date         &&
                        jmgPayEmployee.ToDate      >= _date)        ||
                       (jmgPayEmployee.FromDate                     && // lower bound date interval
                        !jmgPayEmployee.ToDate                      &&
                        jmgPayEmployee.FromDate    <= _date)        ||
                       (!jmgPayEmployee.FromDate                    && // Upper bound date interval
                        jmgPayEmployee.ToDate                       &&
                        jmgPayEmployee.ToDate      >= _date)        ||
                       (!jmgPayEmployee.FromDate                    && // Unbound date interval
                        !jmgPayEmployee.ToDate));
        }

        return jmgPayEmployee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayCostTypePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the hourly cost for the specified pay cost type and worker, at the specified date.
    /// </summary>
    /// <param name="_jmgPayCostType">
    /// The pay cost type to search for.
    /// </param>
    /// <param name="_worker">
    /// The ID of the worker.
    /// </param>
    /// <param name="_date">
    /// The date for which to retrieve the cost.
    /// </param>
    /// <returns>
    /// The hourly cost for the specified pay cost type, and worker, at the specified date.
    /// </returns>
    static Price getPayCostTypePrice(JmgPayCostType _jmgPayCostType, JmgWorkerRecId _worker, JmgDate _date)
    {
        JmgPayEmployee  jmgPayEmployee;
        JmgPayRate      jmgPayRate;
        JmgPayTable     jmgPayTable;
        jmgPayEmployee  = JmgPayEmployee::find(_jmgPayCostType, _worker, _date);

        if (jmgPayEmployee && (! jmgPayEmployee.Percent))
            return jmgPayEmployee.Price;

        jmgPayRate      = JmgPayRate::find(_jmgPayCostType, _date);
        jmgPayTable     = JmgPayTable::find(_jmgPayCostType);

        if (jmgPayEmployee.Percent && jmgPayTable.RefPayCostType)
            return (jmgPayEmployee.Percent / 100 * JmgPayEmployee::getPayCostTypePrice(jmgPayTable.RefPayCostType, _worker, _date));

        if (jmgPayRate.Percent && jmgPayTable.RefPayCostType)
            return (jmgPayRate.Percent / 100 * JmgPayEmployee::getPayCostTypePrice(jmgPayTable.RefPayCostType, _worker, _date));

        if (jmgPayRate)
            return jmgPayRate.Price;

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>JmgPayroll</ConfigurationKey>
	<DeveloperDocumentation>@SYS317273</DeveloperDocumentation>
	<Label>@SYS98297</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Worker</TitleField1>
	<TitleField2>PayCostType</TitleField2>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<ClusteredIndex>EmplTypeIdx</ClusteredIndex>
	<CreateRecIdIndex>No</CreateRecIdIndex>
	<Modules>ProductionControl</Modules>
	<PrimaryIndex>EmplTypeIdx</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>DateInterval</Name>
			<Label>@SYS36688</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Employee</Name>
			<Label>@SYS4705</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS50012</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PayCostType</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Percent</Name>
			<Label>@SYS15774</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Percent</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Rate</Name>
			<Label>@SYS7405</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Price</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS35905</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PayCostType</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgPayCostType</ExtendedDataType>
			<IgnoreEDTRelation>Yes</IgnoreEDTRelation>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Percent</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Price</Name>
			<AosAuthorization>Yes</AosAuthorization>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Price</ExtendedDataType>
			<Label>@SYS7405</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>JmgDate</ExtendedDataType>
			<Label>@SYS35904</Label>
			<Mandatory>Yes</Mandatory>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>JmgWorkerRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>EmplTypeIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Worker</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>PayCostType</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>HcmWorker</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>HcmWorker</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>HcmWorker</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>HcmWorker_JmgPayEmployee</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Worker</Name>
					<Field>Worker</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>JmgPayRate</Name>
			<Cardinality>OneMore</Cardinality>
			<RelatedTable>JmgPayRate</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>Rate</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>WorkerRate</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ToDate</Name>
					<Field>ToDate</Field>
					<RelatedField>ToDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>FromDate</Name>
					<Field>FromDate</Field>
					<RelatedField>FromDate</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCostType</Name>
					<Field>PayCostType</Field>
					<RelatedField>PayCostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>JmgPayTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>JmgPayTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PayCostType</Name>
					<Field>PayCostType</Field>
					<RelatedField>PayCostType</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TypeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>