<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResNomenclatureSegment</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResNomenclatureSegment extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initElementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the record with the next segment number.
    /// </summary>
    public void initElementNumber()
    {
        EcoResNomenclatureSegment segment;

        select maxof(SegmentNumber)
            from segment
            where segment.Nomenclature == this.Nomenclature;

        this.SegmentNumber = segment.SegmentNumber + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>segmentTypeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table name of the specific sub type.
    /// </summary>
    /// <returns>A table name.</returns>
    public display Name segmentTypeName()
    {
        return tableId2PName(int642int(this.InstanceRelationType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>segmentTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the specific sub type.
    /// </summary>
    /// <returns>A table ID.</returns>
    public int segmentTypeId()
    {
        return int642int(this.InstanceRelationType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value of the segment given an input structure.
    /// </summary>
    /// <param name = "_input">The input parameter class.</param>
    /// <returns>The value of the segment.</returns>
    /// <exception cref="M:Exception::Error">
    /// The method should be overridden on the subtype tables.
    /// </exception>
    public EcoResNomenclatureOutput getSegmentValue(EcoResNomenclatureInput _input)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSegmentAllowedForNomenclatureType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the segment is allowed for a nomenclature.
    /// </summary>
    /// <param name = "_nomenclatureType"></param>
    /// <returns>True if the segment is allowed; otherwise, false.</returns>
    /// <exception cref="M:Exception::Error">
    /// The method should be overridden on the subtype tables.
    /// </exception>
    public static boolean isSegmentAllowedForNomenclatureType(TableId _nomenclatureType)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a product configuration model visitor.
    /// </summary>
    /// <param name="_visitor">
    ///  A product configuration model visitor.
    /// </param>
    /// <remarks>
    /// This is used for exporting product configuration models.
    /// </remarks>
    public void accept(PCModelVisitor _visitor)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOrNull</Name>
				<Source><![CDATA[
    protected Common getFirstOrNull(Common _table)
    {
        select firstonly _table;
        return _table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentSampleValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a sample value for the segment given an input structure.
    /// </summary>
    /// <param name = "_input">The input parameter class.</param>
    /// <returns>The sample value of the segment.</returns>
    /// <exception cref="M:Exception::Error">
    /// The method should be overridden on the subtype tables.
    /// </exception>
    public EcoResNomenclatureOutput getSegmentSampleValue(EcoResNomenclatureInput _input)
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:EcoResNomenclatureSegmentDevDoc</DeveloperDocumentation>
	<Label>@SCM:EcoResNomenclatureSegment</Label>
	<TableGroup>Main</TableGroup>
	<TitleField1>Nomenclature</TitleField1>
	<TitleField2>SegmentNumber</TitleField2>
	<Abstract>Yes</Abstract>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<InstanceRelationType>InstanceRelationType</InstanceRelationType>
	<Modules>ProductInformationManagement</Modules>
	<ReplacementKey>ElementIdx</ReplacementKey>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<SupportInheritance>Yes</SupportInheritance>
	<TableContents>BaseData</TableContents>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Nomenclature</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SegmentNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Nomenclature</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResNomenclatureRecId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>InstanceRelationType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RelationType</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SegmentNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>EcoResNomenclatureSegmentNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>ElementIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>Nomenclature</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>SegmentNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Nomenclature</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>EcoResNomenclature</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Composition</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Nomenclature</Name>
					<Field>Nomenclature</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>