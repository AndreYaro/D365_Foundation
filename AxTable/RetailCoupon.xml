<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCoupon</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RetailCoupon extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>RetailCoupon</c> record.
    /// </summary>
    /// <param name="_retailCouponNumber">
    /// The coupon ID to find by.
    /// </param>
    /// <param name="update">
    ///  A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RetailCoupon</c> record if found; otherwise, <c>null</c>.
    /// </returns>
    public static RetailCoupon find(RetailCouponNumber _retailCouponNumber, boolean  update = false)
    {
        RetailCoupon  retailCoupon;

        retailCoupon.selectForUpdate(update);

        if (_retailCouponNumber)
        {
            select firstonly retailCoupon
                where retailCoupon.CouponNumber == _retailCouponNumber;
        }

        return retailCoupon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCoupons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies to a new coupon information from an existing coupon.
    /// </summary>
    /// <param name="retailCouponNew">
    /// The new coupons object that will be used to set the parameters on the copied coupon.
    /// </param>
    /// <param name="retailCouponNumber">
    /// The original coupon  ID.
    /// </param>   
    /// <param name="couponDescription">
    /// The original coupon  Description.
    /// </param>
    /// <param name="retailPeriodicDiscountOfferId">
    /// The original coupon discountId.
    /// </param>
    /// <param name="copyAttributes">
    /// A <c>boolean</c> if true identifies that the attributes information needs to be copied; otherwise false.
    /// </param>
    public static void copyCoupons(RetailCoupon                      retailCouponNew,
                                          RetailCouponNumber                retailCouponNumber,
                                          RetailDescriptionEx2              couponDescription,
                                          RetailOfferIdEx3               retailPeriodicDiscountOfferId,
                                          boolean                           copyAttributes)
    {
        // Initiate RetailCouponCopy class.
        RetailCouponCopy retailCouponCopy = new RetailCouponCopy(retailCouponNumber,
                                                                 couponDescription,
                                                                 retailPeriodicDiscountOfferId,
                                                                 copyAttributes);

        while select CouponNumber, Description, DiscountOfferId from retailCouponNew
        {
            retailCouponCopy.parmNewCouponNumber(retailCouponNew.CouponNumber);            
            retailCouponCopy.parmCouponDesc(retailCouponNew.Description);
            retailCouponCopy.parmNewRetailPeriodicDiscountOfferId(retailCouponNew.DiscountOfferId);
            retailCouponCopy.copyCoupon();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOfferId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>RetailCoupon</c> record.
    /// </summary>
    /// <param name="retailPeriodicDiscountOfferId">
    /// The coupon ID to find by DiscountOfferId.
    /// </param>
    /// <param name="update">
    ///  A <c>Boolean</c> value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    /// The <c>RetailCoupon</c> record if found; otherwise, <c>null</c>.
    /// </returns>
    public static RetailCoupon findByOfferId(RetailOfferIdEx3 retailPeriodicDiscountOfferId, boolean  update = false)
    {
        RetailCoupon  retailCoupon;

        retailCoupon.selectForUpdate(update);

        if (retailPeriodicDiscountOfferId)
        {
            select firstonly retailCoupon
                where retailCoupon.DiscountOfferId == retailPeriodicDiscountOfferId;
        }

        return retailCoupon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByOfferIdAndStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>RetailCoupon</c> record by the given OfferId and the Status
    /// </summary>
    /// <param name = "retailPeriodicDiscountOfferId">OfferId</param>
    /// <param name = "retailCouponStatus">Status: optional (default value: RetailCouponStatus::Active)</param>
    /// <param name = "update">A <c>Boolean</c> value that indicates whether to read the record for update; optional.</param>
    /// <returns><c>RetailCoupon</c> record if found; otherwise null</returns>
    public static RetailCoupon findByOfferIdAndStatus(RetailOfferIdEx3 retailPeriodicDiscountOfferId,
                                                            RetailCouponStatus retailCouponStatus = RetailCouponStatus::Active, 
                                                            boolean  update = false)
    {
        RetailCoupon  retailCoupon;

        retailCoupon.selectForUpdate(update);

        if (retailPeriodicDiscountOfferId)
        {
            select firstonly retailCoupon
                where retailCoupon.DiscountOfferId == retailPeriodicDiscountOfferId
                && retailCoupon.Status == retailCouponStatus;
        }

        return retailCoupon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInvalidDiscountOffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a coupon and update discountOfferId <c>RetailCoupon</c> record.
    /// </summary>
    /// <param name="retailPeriodicDiscountOfferId">
    /// The discountOfferid ID to find by.
    /// </param>
    /// <returns>
    /// The <c>RetailCoupon</c> record if found; otherwise, <c>null</c>.
    /// </returns>
    public static RetailCoupon removeInvalidDiscountOffer(RetailOfferIdEx3 retailPeriodicDiscountOfferId)
    {
        RetailCoupon  retailCoupon;

        retailCoupon.selectForUpdate(true);

        ttsBegin;
                 
        while select forUpdate retailCoupon
            where retailCoupon.DiscountOfferId == retailPeriodicDiscountOfferId
        {
            retailCoupon.DiscountOfferId = null;
            retailCoupon.update();
        }

        ttsCommit;

        return retailCoupon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates <c>RetailCoupon</c> table row.
    /// </summary>
    /// <returns>boolean value to allow writing to the table.</returns>
    public boolean validateWrite()
    {
        boolean ret = super();

        if (ret)
        {
            if (this.Status == RetailCouponStatus::Active)
            {
                if(!RetailCouponHelper::isAssociatedDiscountValid(this.DiscountOfferId))
                {
                    return checkFailed(strFmt("@RetailPricing:CouponAssociatedDiscountInvalid", this.CouponNumber));
                }
                
                RetailOfferIdEx3 offerId = this.DiscountOfferId;

                // use limit should not be set for shipping discount
                int periodicDiscountType = RetailPeriodicDiscount::findByOfferId(offerId).PeriodicDiscountType;
                if(periodicDiscountType == RetailDiscountOfferTypeBase::Shipping && this.UsageLimit > 0)
                {
                    return checkFailed("@Retail:RetailCouponUsageLimitShouldNotSet");
                }

                if (this.shouldValidatePriceGroups())
                {
                    if (this.IsCustomerRequired == NoYes::Yes)
                    {
                        if (!RetailDiscountPriceGroup::findByOfferId(offerId))
                        {
                            return checkFailed("@Retail:RetailPriceGroupRequired");
                        }
                    }
                    else if (!RetailChannelPriceGroup::findByOfferId(offerId) && !RetailCatalogPriceGroup::findByOfferId(offerId))
                    {
                        return checkFailed("@Retail:RetailChannelCatalogRequired");
                    }
                }

                date headerStartDate = this.ValidFrom;
                date headerEndDate = this.ValidTo;

                if (headerStartDate != Global::dateNull() && headerEndDate != Global::dateNull())
                {
                    if (headerEndDate < headerStartDate)
                    {
                        return checkFailed("@Retail:RetailDateRangeWarning");
                    }
                }
            }

            if (this.UsageLimit > 0 && this.UsageLimitType == RetailCouponUsageLimitType::CustomerSpecific)
            {
                if (!this.IsCustomerRequired)
                {
                    return checkFailed("@RetailPricing:CouponCustomerRequiredError");
                }
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldValidatePriceGroups</Name>
				<Source><![CDATA[
    protected boolean shouldValidatePriceGroups()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates before delete.
    /// </summary>
    /// <returns>true when delete is allowed; otherwise, false.</returns>
    public boolean validateDelete()
    {
        boolean ret = true;

        if (this.Status == RetailCouponStatus::Active)
        {
            ret = checkFailed('@Retail:RetailDeleteActiveCouponError');
        }
        
        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate data for a specific field.
    /// </summary>
    /// <param name = "_fieldIdToCheck">The field Id of the field that is going to be validated.</param>
    /// <returns>true if field validated, otherwise, false.</returns>
    public boolean validateField(FieldId _fieldIdToCheck)
    {
        boolean ret;

        ret = super(_fieldIdToCheck);

        if (fieldNum(RetailCoupon, UsageLimit) == _fieldIdToCheck)
        {
            if (this.UsageLimit < 0)
            {
                warning("@Retail:RetailUsageLimitNegativeWarning");
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the records and disables the assoaciated discount in case the current coupon is the only coupon associated with the discount.
    /// </summary>
    public void delete()
    {
        super();

        // First check if the associated discount exists.
        // Then, if there is no active coupon associated with discount, update the discount status to Disabled.
        if (RetailPeriodicDiscount::existsByOfferId(this.DiscountOfferId) && !RetailCoupon::findByOfferIdAndStatus(this.DiscountOfferId, RetailCouponStatus::Active))
        {
            RetailPeriodicDiscount::updateDiscountStatus(this.DiscountOfferId, RetailDisabledEnabled::Disabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the coupon in the database and updates related tables (RetailCouponCodeTable & RetailPeriodicDiscount) to keep the data consistent.
    /// </summary>
    public void insert()
    {
        super();

        this.updateRelatedTablesBasedOnStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the coupon in the database and updates related tables (RetailCouponCodeTable & RetailPeriodicDiscount) to keep the data consistent.
    /// </summary>
    public void update()
    {
        boolean isStatusChanged = this.Status != this.orig().Status;

        super();

        if (isStatusChanged)
        {
            this.updateRelatedTablesBasedOnStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTablesBasedOnStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method contains shared logic that is used during insert and update.
    /// Updates related tables (RetailCouponCodeTable & RetailPeriodicDiscount) to keep the data consistent.
    /// </summary>
    private void updateRelatedTablesBasedOnStatus()
    {
        str offerId = this.DiscountOfferId;

        if (this.Status != RetailCouponStatus::Active)
        {
            // if there is no associated active coupon
            if (!RetailCoupon::findByOfferIdAndStatus(offerId, RetailCouponStatus::Active))
            {
                RetailPeriodicDiscount::updateDiscountStatus(offerId, RetailDisabledEnabled::Disabled);
            }

            RetailCouponCodeTable::updateCouponCodeStatusInBatch(this.CouponNumber, this.Status);
        }
        else
        {
            RetailPeriodicDiscount::updateDiscountStatus(offerId, RetailDisabledEnabled::Enabled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<Label>@Retail:RetailCouponTable</Label>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>Found</CacheLookup>
	<Modules>CommerceCustomers</Modules>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DeleteAction1</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>RetailCouponCodeTable</Table>
			<Tags></Tags>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Attibutes</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Status</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsCustomerRequired</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>IsExclusive</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsageLimit</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>UsageLimitType</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Valid</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ValidFrom</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ValidTo</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Miscellaneous</Name>
			<Label>@Retail:Miscellaneous</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DiscountOfferId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>FutureCoupon</Name>
			<Label>@Retail:RetailFutureCouponGroup</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ParentCouponNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CouponNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponNumber</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailDescriptionEx2</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Status</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailCouponStatus</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidFrom</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ValidTo</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>UsageLimit</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailUsageLimit</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>UsageLimitType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>RetailCouponUsageLimitType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCustomerRequired</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponIsCustomerRequired</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsExclusive</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponIsExclusive</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>DiscountOfferId</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailOfferIdEx3</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ParentCouponNumber</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailParentCouponNumber</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>ApplyWithoutCouponCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RetailCouponApplyCouponWithoutCode</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>RetailCouponIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>CouponNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>RetailPeriodicDiscountRelationship</Name>
			<RelatedTable>RetailPeriodicDiscount</RelatedTable>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DiscountOfferId</Name>
					<Field>DiscountOfferId</Field>
					<RelatedField>OfferId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsDiscountCodeRequired</Name>
					<RelatedField>IsDiscountCodeRequired</RelatedField>
					<Value>1</Value>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>