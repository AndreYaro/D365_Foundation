<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoSubMarkupMatchingTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendInvoiceInfoSubMarkupMatchingTrans extends MarkupMatchingTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>connectVendSubTableMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a single expected miscellaneous charge for the invoice miscellaneous charge.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The <c>MarkupTrans</c> record that represents the <c>VendInvoiceInfoSubTable</c> records
    ///    miscellaneous charge.
    /// </param>
    public static void connectVendSubTableMarkupTrans(MarkupTrans _markupTrans)
    {
        Qty qty = 0;
        AmountCur amount = 0;
        AmountCur intercompanyAmount = 0;
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        PurchTable purchTable;
        MarkupTrans orderMarkupTrans;
        MarkupAmount expectedAmount;
        Markup markup;
        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;
        VendParameters vendParameters;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchTotals purchTotals;
        Tax tax;

        // if feature is not enabled we can just return.
        vendParameters = VendParameters::find();
        if (vendParameters.UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::findRecId( _markupTrans.TransRecId);

        vendInvoiceInfoTable = vendInvoiceInfoSubTable.vendInvoiceInfoTable();
        vendInvoiceInfoMarkupMatchingTolerance = VendInvoiceInfoMarkupMatchingTolerance::find(vendInvoiceInfoSubTable.ParmId, vendInvoiceInfoSubTable.TableRefId, _markupTrans.MarkupCode);

        if (vendInvoiceInfoTable.isInclTax())
        {
            // totals are only needed if price includes tax
            purchTotals = PurchTotals::newParmTable(vendInvoiceInfoTable,
                                                PurchUpdate::All,
                                                vendInvoiceInfoTable.ParmId,
                                                vendInvoiceInfoTable.PurchId,
                                                vendInvoiceInfoTable.Ordering);
            purchTotals.calc(false, false, true);
            tax = purchTotals.tax();
        }

        if (vendInvoiceInfoSubTable && vendInvoiceInfoMarkupMatchingTolerance
            && (vendInvoiceInfoMarkupMatchingTolerance.CustType == MarkupType::CustVend || vendInvoiceInfoMarkupMatchingTolerance.VendType == MarkupType::CustVend)
            && vendInvoiceInfoMarkupMatchingTolerance.UseInMatching == NoYes::Yes)
        {
            purchTable = vendInvoiceInfoSubTable.purchTable();
            if (purchTable)
            {
                markup = new Markup(purchTable.CurrencyCode);

                orderMarkupTrans = MarkupTrans::findRecId(_markupTrans.OrigRecId);
                if (orderMarkupTrans.MarkupCategory == MarkupCategory::Fixed)
                {
                    //because it is fixed, we do not need to get the lines total quantity and amounts
                    expectedAmount = Markup::calcMarkupAmount(orderMarkupTrans, 0, 0, 0, markup.isInclTax(purchTable), NoYes::Yes,
                                vendInvoiceInfoTable.CurrencyCode,
                                vendInvoiceInfoTable.updateDate(),
                                vendInvoiceInfoTable.ExchRate,
                                vendInvoiceInfoTable.ExchRateSecondary);
                }
                else
                {
                    [qty, amount, intercompanyAmount] = VendInvoiceInfoSubMarkupMatchingTrans::getTotalQtyAndAmounts(vendInvoiceInfoSubTable, tax);

                    expectedAmount = Markup::calcMarkupAmount(orderMarkupTrans, qty, amount, intercompanyAmount, markup.isInclTax(purchTable), NoYes::Yes,
                                vendInvoiceInfoTable.CurrencyCode,
                                vendInvoiceInfoTable.updateDate(),
                                vendInvoiceInfoTable.ExchRate,
                                vendInvoiceInfoTable.ExchRateSecondary);
                }

                vendInvoiceInfoSubMarkupMatchingTrans.clear();

                vendInvoiceInfoSubMarkupMatchingTrans.TransTableId = _markupTrans.TransTableId;
                vendInvoiceInfoSubMarkupMatchingTrans.TransRecId = _markupTrans.TransRecId;
                vendInvoiceInfoSubMarkupMatchingTrans.LineNum = _markupTrans.LineNum;
                vendInvoiceInfoSubMarkupMatchingTrans.ModuleType = _markupTrans.ModuleType;
                vendInvoiceInfoSubMarkupMatchingTrans.MarkupCode = _markupTrans.MarkupCode;
                vendInvoiceInfoSubMarkupMatchingTrans.ExpectedMarkup = expectedAmount;
                vendInvoiceInfoSubMarkupMatchingTrans.ExpectedMarkupCode = orderMarkupTrans.MarkupCode;
                vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId = vendInvoiceInfoSubTable.ParmId;
                vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId = vendInvoiceInfoSubTable.TableRefId;
                vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableOrigPurchId = vendInvoiceInfoSubTable.OrigPurchId;
                if (orderMarkupTrans.CurrencyCode != vendInvoiceInfoTable.CurrencyCode)
                {
                    vendInvoiceInfoSubMarkupMatchingTrans.CurrencyConverted = NoYes::Yes;
                }

                vendInvoiceInfoSubMarkupMatchingTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoSubTable</Name>
				<Source><![CDATA[
    private static void createFromVendInvoiceInfoSubTable(VendInvoiceInfoTable _vendInvoiceInfoTable, VendInvoiceInfoSubTable _vendInvoiceInfoSubTable, Tax _tax)
    {
        Qty qty, totalQty = 0;
        AmountCur amount, totalAmount = 0;
        AmountCur intercompanyAmount, totalIntercompanyAmount = 0;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchTable purchTable;
        Markup markup;
        MarkupTrans invoiceMarkupTrans;
        MarkupTrans orderMarkupTrans;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;
        MarkupAmount expectedAmount;
        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;

        while select vendInvoiceInfoLine
            where vendInvoiceInfoLine.ParmId == _vendInvoiceInfoSubTable.ParmId
                && vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoSubTable.TableRefId
                && vendInvoiceInfoLine.OrigPurchId == _vendInvoiceInfoSubTable.OrigPurchId
        {
            [qty, amount, intercompanyAmount] = VendInvoiceInfoLineMarkupMatchingTrans::createFromVendInvoiceInfoLine(_vendInvoiceInfoTable, vendInvoiceInfoLine, _tax);
            totalQty += qty;
            totalAmount += amount;
            totalIntercompanyAmount += intercompanyAmount;
        }

        purchTable = _vendInvoiceInfoSubTable.purchTable();

        if (purchTable)
        {
            markup = new Markup(purchTable.CurrencyCode);

            while select TransTableId, TransRecId, LineNum, ModuleType, MarkupCode from invoiceMarkupTrans
                join orderMarkupTrans
                    where invoiceMarkupTrans.TransTableId == _vendInvoiceInfoSubTable.TableId
                        && invoiceMarkupTrans.TransRecId == _vendInvoiceInfoSubTable.RecId
                        && !invoiceMarkupTrans.IsDeleted
                        && orderMarkupTrans.TransTableId == tableNum(PurchTable)
                        && orderMarkupTrans.TransRecId == purchTable.RecId
                        && !orderMarkupTrans.IsDeleted
                        && invoiceMarkupTrans.OrigTableId == tableNum(MarkupTrans)
                        && invoiceMarkupTrans.OrigRecId == orderMarkupTrans.RecId
                exists join vendInvoiceInfoMarkupMatchingTolerance
                    where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == _vendInvoiceInfoSubTable.ParmId
                        && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == _vendInvoiceInfoSubTable.TableRefId
                        && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == invoiceMarkupTrans.ModuleType
                        && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == invoiceMarkupTrans.MarkupCode
                        && ( vendInvoiceInfoMarkupMatchingTolerance.CustType == MarkupType::CustVend || vendInvoiceInfoMarkupMatchingTolerance.VendType == MarkupType::CustVend)
                        && vendInvoiceInfoMarkupMatchingTolerance.UseInMatching == NoYes::Yes
            {
                expectedAmount = Markup::calcMarkupAmount(orderMarkupTrans, totalQty, totalAmount, totalIntercompanyAmount, markup.isInclTax(purchTable), NoYes::Yes,
                                _vendInvoiceInfoTable.CurrencyCode,
                                _vendInvoiceInfoTable.updateDate(),
                                _vendInvoiceInfoTable.ExchRate,
                                _vendInvoiceInfoTable.ExchRateSecondary);

                vendInvoiceInfoSubMarkupMatchingTrans.clear();

                vendInvoiceInfoSubMarkupMatchingTrans.TransTableId = invoiceMarkupTrans.TransTableId;
                vendInvoiceInfoSubMarkupMatchingTrans.TransRecId = invoiceMarkupTrans.TransRecId;
                vendInvoiceInfoSubMarkupMatchingTrans.LineNum = invoiceMarkupTrans.LineNum;
                vendInvoiceInfoSubMarkupMatchingTrans.ModuleType = invoiceMarkupTrans.ModuleType;
                vendInvoiceInfoSubMarkupMatchingTrans.MarkupCode = invoiceMarkupTrans.MarkupCode;
                vendInvoiceInfoSubMarkupMatchingTrans.ExpectedMarkup = expectedAmount;
                vendInvoiceInfoSubMarkupMatchingTrans.ExpectedMarkupCode = orderMarkupTrans.MarkupCode;
                vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId = _vendInvoiceInfoSubTable.ParmId;
                vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId = _vendInvoiceInfoSubTable.TableRefId;
                vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableOrigPurchId = _vendInvoiceInfoSubTable.OrigPurchId;

                if (orderMarkupTrans.CurrencyCode != _vendInvoiceInfoTable.CurrencyCode)
                {
                    vendInvoiceInfoSubMarkupMatchingTrans.CurrencyConverted = NoYes::Yes;
                }

                vendInvoiceInfoSubMarkupMatchingTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the expected invoice miscellaneous charges for the <c>VendInvoiceInfoTable</c> and
    ///    <c>VendInvoiceInfoSubTable</c> invoices.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The invoice that defines the actual miscellaneous charge context.
    /// </param>
    public static void createFromVendInvoiceInfoTable(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchTotals purchTotals;
        Tax tax;

        // if feature is not enabled we can just return.
        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        if (_vendInvoiceInfoTable.isInclTax())
        {
            // totals are only needed if price includes tax
            purchTotals = PurchTotals::newParmTable(_vendInvoiceInfoTable,
                                                PurchUpdate::All,
                                                _vendInvoiceInfoTable.ParmId,
                                                _vendInvoiceInfoTable.PurchId,
                                                _vendInvoiceInfoTable.Ordering);
            purchTotals.calc(false, false, true);
            tax = purchTotals.tax();
        }

        while select vendInvoiceInfoSubTable
            where vendInvoiceInfoSubTable.ParmId == _vendInvoiceInfoTable.ParmId
                && vendInvoiceInfoSubTable.TableRefId == _vendInvoiceInfoTable.TableRefId
        {
            VendInvoiceInfoSubMarkupMatchingTrans::createFromVendInvoiceInfoSubTable(_vendInvoiceInfoTable, vendInvoiceInfoSubTable, tax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>disconnectVendSubTableMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes a single expected miscellaneous charge for the invoice miscellaneous charge.
    /// </summary>
    /// <param name="_markupTrans">
    ///    The <c>MarkupTrans</c> record that represents the miscellaneous charge of the
    ///    <c>VendInvoiceInfoSubTable</c> invoices.
    /// </param>
    public static void disconnectVendSubTableMarkupTrans(MarkupTrans _markupTrans)
    {
        // if feature is not enabled we can just return.
        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        MarkupMatchingTrans::deleteRecords(_markupTrans.TransTableId, _markupTrans.TransRecId, _markupTrans.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalQtyAndAmounts</Name>
				<Source><![CDATA[
    private static container getTotalQtyAndAmounts(VendInvoiceInfoSubTable _vendInvoiceInfoSubTable, Tax _tax)
    {
        Qty qty, totalQty = 0;
        AmountCur amount, totalAmount = 0;
        AmountCur intercompanyAmount, totalIntercompanyAmount = 0;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        while select ReceiveNow from vendInvoiceInfoLine
            join purchLine
                where vendInvoiceInfoLine.ParmId == _vendInvoiceInfoSubTable.ParmId &&
                    vendInvoiceInfoLine.TableRefId == _vendInvoiceInfoSubTable.TableRefId &&
                    vendInvoiceInfoLine.OrigPurchId == _vendInvoiceInfoSubTable.OrigPurchId &&
                    vendInvoiceInfoLine.ReceiveNow != 0 &&
                    purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
        {
            qty = vendInvoiceInfoLine.ReceiveNow;
            amount = purchLine.salesPurchLineInterface().calcBaseLineAmountExclTax(qty, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            intercompanyAmount = purchLine.interCompanyLineAmount(qty, purchLine.DeliveryDate, _tax);

            totalQty += qty;
            totalAmount += amount;
            totalIntercompanyAmount += intercompanyAmount;
        }
        return [totalQty, totalAmount, totalIntercompanyAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>reapplyVendSubTableMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the expected connected miscellaneous charge in the active invoice context.
    /// </summary>
    /// <param name="_parmId">
    ///    The parameter ID as a piece of the primary key to the active invoice context.
    /// </param>
    /// <param name="_tableRefId">
    ///    The <c>TradeLineRefId</c> value as a piece of the primary key to the active invoice context.
    /// </param>
    /// <param name="_origPurchId">
    ///    The <c>PurchIdOrig</c> value as a piece of the primary key to the active invoice context.
    /// </param>
    public static void reapplyVendSubTableMarkupTrans(ParmId _parmId, TradeLineRefId _tableRefId, PurchIdOrig _origPurchId)
    {
        VendInvoiceInfoSubTable vendInvoiceInfoSubTable;
        PurchTable purchTable;
        MarkupTrans invoiceMarkupTrans, orderMarkupTrans;
        VendInvoiceInfoMarkupMatchingTolerance vendInvoiceInfoMarkupMatchingTolerance;

        // if feature is not enabled we can just return.
        if (VendParameters::find().UseMiscChargeMatching == NoYes::No)
        {
            return;
        }

        vendInvoiceInfoSubTable = VendInvoiceInfoSubTable::find(_parmId, _tableRefId, _origPurchId);
        purchTable = vendInvoiceInfoSubTable.purchTable();

        if (vendInvoiceInfoSubTable && purchTable)
        {
            while select invoiceMarkupTrans
                join MarkupCategory from orderMarkupTrans
                    where invoiceMarkupTrans.TransTableId == tableNum(VendInvoiceInfoSubTable)
                        && invoiceMarkupTrans.TransRecId == vendInvoiceInfoSubTable.RecId
                        && !invoiceMarkupTrans.IsDeleted
                        && orderMarkupTrans.TransTableId == tableNum(PurchTable)
                        && orderMarkupTrans.TransRecId == purchTable.RecId
                        && !orderMarkupTrans.IsDeleted
                        && invoiceMarkupTrans.OrigTableId == tableNum(MarkupTrans)
                        && invoiceMarkupTrans.OrigRecId == orderMarkupTrans.RecId
                exists join vendInvoiceInfoMarkupMatchingTolerance
                    where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableParmId == vendInvoiceInfoSubTable.ParmId
                        && vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == vendInvoiceInfoSubTable.TableRefId
                        && vendInvoiceInfoMarkupMatchingTolerance.ModuleType == invoiceMarkupTrans.ModuleType
                        && vendInvoiceInfoMarkupMatchingTolerance.MarkupCode == invoiceMarkupTrans.MarkupCode
                        && (vendInvoiceInfoMarkupMatchingTolerance.CustType == MarkupType::CustVend || vendInvoiceInfoMarkupMatchingTolerance.VendType == MarkupType::CustVend)
                        && vendInvoiceInfoMarkupMatchingTolerance.UseInMatching == NoYes::Yes
            {
                // When the markup category is not fixed we need to recalculate the miscellaneous charge.
                if (orderMarkupTrans.MarkupCategory != MarkupCategory::Fixed)
                {
                    MarkupMatchingTrans::deleteRecords(invoiceMarkupTrans.TransTableId, invoiceMarkupTrans.TransRecId, invoiceMarkupTrans.LineNum);

                    VendInvoiceInfoSubMarkupMatchingTrans::connectVendSubTableMarkupTrans(invoiceMarkupTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpectedValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the expected invoice miscellaneous charges for the <c>VendInvoiceInfoTable</c>,
    ///    <c>VendInvoiceInfoSubTable</c> and <c>VendInvoiceLine</c> tables.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    ///    The invoice that defines the actual miscellaneous charge context.
    /// </param>
    /// <param name="_updateExpectedValues">
    ///    Indicates whether or not we need to update the expected miscellaneous charges.
    ///    If automatic header matching is turned on, these values are updated regardless of this parameter value.
    /// </param>
    /// <param name="_prevParmId">
    ///    The previous <c>ParmId</c>, in case the invoice is transitioning from saved to active; optional.
    /// </param>
    public static void updateExpectedValues(VendInvoiceInfoTable _vendInvoiceInfoTable, boolean _updateExpectedValues = false, ParmId _prevParmId = '')
    {
        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;
        VendInvoiceInfoLineMarkupMatchingTrans vendInvoiceInfoLineMarkupMatchingTrans;

        if (!_updateExpectedValues && !VendParameters::find().editAutomaticHeaderMatching())
        {
            return;
        }

        if (prmisDefault(_prevParmId))
        {
            _prevParmId = _vendInvoiceInfoTable.ParmId;
        }

        delete_from vendInvoiceInfoSubMarkupMatchingTrans
            where vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId == _prevParmId
                && vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId == _vendInvoiceInfoTable.TableRefId;

        delete_from vendInvoiceInfoLineMarkupMatchingTrans
            where vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineParmId == _prevParmId
                && vendInvoiceInfoLineMarkupMatchingTrans.VendInvoiceInfoLineTableRefId == _vendInvoiceInfoTable.TableRefId;

        VendInvoiceInfoSubMarkupMatchingTrans::createFromVendInvoiceInfoTable(_vendInvoiceInfoTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ParmId</c> of <c>VendInvoiceInfoSubMarkupMatchingTrans</c> records for the given invoice.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> used to determine which <c>VendInvoiceInfoSubMarkupMatchingTrans</c> to move.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> used to determine which <c>VendInvoiceInfoSubMarkupMatchingTrans</c> to move.
    /// </param>
    /// <param name="_newParmId">
    /// The new <c>ParmId</c> value; optional.
    /// </param>
    public static void updateParmId(ParmId _parmId, TradeLineRefId _tableRefId, ParmId _newParmId = '')
    {
        VendInvoiceInfoSubMarkupMatchingTrans vendInvoiceInfoSubMarkupMatchingTrans;

        vendInvoiceInfoSubMarkupMatchingTrans.skipDataMethods(true);
        vendInvoiceInfoSubMarkupMatchingTrans.skipEvents(true);
        vendInvoiceInfoSubMarkupMatchingTrans.skipDatabaseLog(true);

        update_recordset vendInvoiceInfoSubMarkupMatchingTrans
        setting VendInvoiceInfoSubTableParmId = _newParmId
        where vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableParmId == _parmId
            && vendInvoiceInfoSubMarkupMatchingTrans.VendInvoiceInfoSubTableTableRefId == _tableRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PurchInvoiceMatching</ConfigurationKey>
	<DeveloperDocumentation>@SYS136339</DeveloperDocumentation>
	<Label>@SYS131701</Label>
	<TableGroup>TransactionHeader</TableGroup>
	<CacheLookup>NotInTTS</CacheLookup>
	<Extends>MarkupMatchingTrans</Extends>
	<Modules>AccountsPayable</Modules>
	<SupportInheritance>Yes</SupportInheritance>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoSubTableParmId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoSubTableTableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoSubTableOrigPurchId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ExpectedValues</Name>
			<Label>@SYS115395</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoSubTableTableRefId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoSubTableOrigPurchId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VendInvoiceInfoSubTableParmId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoSubTableOrigPurchId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchIdOrig</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoSubTableParmId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ParmId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VendInvoiceInfoSubTableTableRefId</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TradeLineRefId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>VendInvoiceInfoSubTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoSubTableParmId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoSubTableTableRefId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>VendInvoiceInfoSubTableOrigPurchId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>FK_VendInvoiceInfoSubTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>VendInvoiceInfoSubTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>FK_VendInvoiceInfoSubTable</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>VendInvoiceInfoSubMarkupMatchingTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoSubTableOrigPurchId</Name>
					<Field>VendInvoiceInfoSubTableOrigPurchId</Field>
					<RelatedField>OrigPurchId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoSubTableTableRefId</Name>
					<Field>VendInvoiceInfoSubTableTableRefId</Field>
					<RelatedField>TableRefId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoSubTableParmId</Name>
					<Field>VendInvoiceInfoSubTableParmId</Field>
					<RelatedField>ParmId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TableRefIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PK_MarkupMatchingTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>MarkupMatchingTrans</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>PK_MarkupMatchingTrans</RelatedTableRole>
			<RelationshipType>Specialization</RelationshipType>
			<Role>VendInvoiceInfoSubMarkupMatchingTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PurchTable_3580</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PurchTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceInfoSubTableOrigPurchId</Name>
					<SourceEDT>PurchIdOrig</SourceEDT>
					<Field>VendInvoiceInfoSubTableOrigPurchId</Field>
					<RelatedField>PurchId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>PurchIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>