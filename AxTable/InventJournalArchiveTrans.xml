<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalArchiveTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventJournalArchiveTrans extends common
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventJournalArchiveTrans create(FromDate _fromDate, ToDate _toDate, NoYes _isActive = NoYes::Yes)
    {
        ttsbegin;

        InventJournalArchiveTrans inventJournalArchiveTrans;
        inventJournalArchiveTrans.ArchiveFromDate        = _fromDate;
        inventJournalArchiveTrans.ArchiveToDate          = _toDate;
        inventJournalArchiveTrans.ArchiveDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        UserInfo userInfo;
        select Name, networkAlias from userInfo
            where userInfo.Id == curUserId();

        inventJournalArchiveTrans.ArchiveUserId = userInfo.name ? userInfo.name : userInfo.networkAlias;
        inventJournalArchiveTrans.insert();

        ttscommit;

        return inventJournalArchiveTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreate</Name>
				<Source><![CDATA[
    internal static InventJournalArchiveTrans findOrCreate(FromDate _fromDate, ToDate _toDate, boolean _forUpdate = false)
    {
        InventJournalArchiveTrans archiveTrans = InventJournalArchiveTrans::find(_fromDate, _toDate, _forUpdate);

        if (!archiveTrans)
        {
            archiveTrans = InventJournalArchiveTrans::create(_fromDate, _toDate);
        }

        return archiveTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    internal static InventJournalArchiveTrans find(
        FromDate _fromDate,
        ToDate _toDate,
        boolean _forupdate = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        InventJournalArchiveTrans archiveTrans;

        archiveTrans.selectForUpdate(_forupdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            archiveTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly archiveTrans
            where archiveTrans.ArchiveFromDate == _fromDate
               && archiveTrans.ArchiveToDate   == _toDate;
          
        return archiveTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOverlapPeriodDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean existsOverlapPeriodDate(FromDate _fromDate, ToDate _toDate)
    {
        if (!InventoryArchiveSkipOverlappingCheckFlight::instance().isEnabled())
        {
            InventJournalArchiveTrans inventJournalArchiveTrans;
            inventJournalArchiveTrans.selectLocked(false);

            select firstonly RecId from inventJournalArchiveTrans
            order by RecId desc
            where (  (inventJournalArchiveTrans.ArchiveFromDate      <= _fromDate
                      && inventJournalArchiveTrans.ArchiveToDate    >= _toDate)
                  || (inventJournalArchiveTrans.ArchiveFromDate      >= _fromDate
                      && inventJournalArchiveTrans.ArchiveFromDate   <= _toDate)
                  || (inventJournalArchiveTrans.ArchiveToDate       >= _fromDate
                      && inventJournalArchiveTrans.ArchiveToDate    <= _toDate));

            if (inventJournalArchiveTrans.RecId)
            {
                ArchiveServiceJobDetailsView archiveServiceJobDetailsView;

                select firstonly RecId from archiveServiceJobDetailsView
                where archiveServiceJobDetailsView.SourceLinkTableId == tableNum(InventJournalArchiveTrans)
                   && archiveServiceJobDetailsView.SourceLinkRecId == inventJournalArchiveTrans.RecId
                   && archiveServiceJobDetailsView.Status != ArchiveServiceJobStatus::Error;

                return archiveServiceJobDetailsView.RecId != 0;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean validate(FromDate _fromDate, ToDate _toDate)
    {
        if (InventJournalArchiveTrans::existsOverlapPeriodDate(_fromDate, _toDate))
        {
            return checkFailed("@SCM:InventJournalArchivePeriodDateOverlapExistingArchivedTransPeriod");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static InventJournalArchiveTrans findByRecId(RecId _recId, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        InventJournalArchiveTrans inventJournalArchiveTrans;

        inventJournalArchiveTrans.selectForUpdate(_forUpdate);

        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            inventJournalArchiveTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly crosscompany inventJournalArchiveTrans
            where inventJournalArchiveTrans.RecId == _recId;

        return inventJournalArchiveTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LogisticsBasic</ConfigurationKey>
	<DeveloperDocumentation>@SCM:InventJournalArchiveTransTableDevDoc</DeveloperDocumentation>
	<Label>@SCM:InventJournalArchiveTransTable</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ArchiveFromDate</TitleField1>
	<TitleField2>ArchiveToDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>FromDateToDateIdx</ClusteredIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Session</Name>
			<Label>@SYS7115</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Overview</Name>
			<Label>@SYS9039</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ArchiveFromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchiveToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ArchiveUserId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ArchiveFromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ArchiveToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ArchiveUserId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<ExtendedDataType>UserIdStr</ExtendedDataType>
			<Label>@SYS109893</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ArchiveDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS95468</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Name</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>FromDateToDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ArchiveFromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ArchiveToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActiveEndDateExecutedIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>ArchiveToDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ArchiveDate</DataField>
					<IncludedColumn>Yes</IncludedColumn>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation>
			<Name>ArchiveServiceJobProgress</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ArchiveServiceJobProgress</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SourceLinkRefRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceLinkRefTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ArchiveServiceJobDetailsView</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>ArchiveServiceJobDetailsView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>SourceLinkRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>SourceLinkTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>