<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportExtraFieldsBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxReportExtraFieldsBE extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    public boolean validateField(fieldId _p1)
    {
        const TaxIntervatPercentage MinAdjustedValue = 0;
        const TaxIntervatPercentage MaxAdjustedValue = 100;
        boolean ret;

        ret = super(_p1);

        if (ret)
        {
            switch (_p1)
            {
                case fieldnum(TaxReportExtraFieldsBE, vatDisbursement):
                    if ((mthofyr(this.FromDate) == MonthsOfYear::December) && (strrem(this.vatDisbursement,'0123456789., ') != ''))
                    {
                        ret = checkFailed("@SYS79713");
                    }
                    break;

                case fieldnum(TaxReportExtraFieldsBE, AdjustedValue),
                        fieldnum(TaxReportExtraFieldsBE, SpecialPercentageB1),
                        fieldnum(TaxReportExtraFieldsBE, SpecialPercentageB2),
                        fieldnum(TaxReportExtraFieldsBE, SpecialPercentageB3),
                        fieldnum(TaxReportExtraFieldsBE, SpecialPercentageB4),
                        fieldnum(TaxReportExtraFieldsBE, SpecialPercentageB5):
                    if ((this.(_p1) > MaxAdjustedValue) || (this.(_p1) < MinAdjustedValue))
                    {
                        ret = checkFailed(strFmt("@TaxReportBE:AmountError", fieldId2PName(tableNum(TaxReportExtraFieldsBE), _p1)));
                    }
                    break;

                default: break;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (this.Voucher || this.TransDate)
            {
                ret = checkFailed("@SYS63294");
            }

            ret = TaxReportPeriod::checkExist(this.TaxPeriod, this.FromDate,this.ToDate) && ret;

            if (ret && TaxReportPeriod::find(this.TaxPeriod, this.FromDate).VersionNum > 0)
            {
                ret = checkFailed(strfmt("@SYS66030",this.TaxPeriod, this.FromDate, this.ToDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean checkExist(
        TaxPeriod   _taxPeriod,
        FromDate    _fromDate,
        ToDate      _toDate,
        boolean     _forUpdate = false )
    {
        boolean ret = true;

        if (!TaxReportExtraFieldsBE::exist(_taxPeriod, _fromDate, _toDate, _forUpdate))
        {
            ret = checkFailed(strfmt(TaxReportExtraFieldsBE::txtNotExist(), _taxPeriod, _fromDate, _toDate, _forUpdate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean exist(
        TaxPeriod   _taxPeriod,
        FromDate    _fromDate,
        ToDate      _toDate,
        boolean     _forUpdate = false)
    {
        boolean found;

        found = (select firstonly
                     RecId
                from
                     taxReportExtraFieldsBE
                 where
                     taxReportExtraFieldsBE.TaxPeriod == _taxPeriod &&
                    taxReportExtraFieldsBE.FromDate == _fromDate &&
                    taxReportExtraFieldsBE.ToDate == _toDate).RecId != 0;

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>TaxReportExtraFieldsBE</c> table.
    /// </summary>
    /// <param name="_recId">
    /// Ther record ID of the <c>TaxReportExtraFieldsBE</c> record to find.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>TaxReportExtraFieldsBE</c> table; otherwise, an empty record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxReportExtraFieldsBE find(
        recId              _recId,
        boolean            _forUpdate        = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxReportExtraFieldsBE taxReportExtraFieldsBE;

        taxReportExtraFieldsBE.selectForUpdate(_forUpdate);
        if (_forUpdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxReportExtraFieldsBE.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxReportExtraFieldsBE
            where taxReportExtraFieldsBE.RecId == _recId;

        return taxReportExtraFieldsBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByTaxPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxReportExtraFieldsBE findByTaxPeriod(
        TaxPeriod        _taxPeriod,
        FromDate         _fromDate,
        ToDate           _toDate,
        boolean          _forupdate        = false,
        ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxReportExtraFieldsBE taxReportExtraFieldsBE;

        taxReportExtraFieldsBE.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxReportExtraFieldsBE.concurrencyModel(_concurrencyModel);
        }

        select firstonly
            taxReportExtraFieldsBE
            where
            taxReportExtraFieldsBE.TaxPeriod == _taxPeriod &&
                    taxReportExtraFieldsBE.FromDate == _fromDate &&
                    taxReportExtraFieldsBE.ToDate == _toDate;

        return taxReportExtraFieldsBE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRecord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void newRecord()
    {
        TaxReportExtraFieldsBE    taxReportExtraFields;
        TaxReportExtraFieldsBE    taxReportExtraFieldsNew;
        TaxReportPeriod           taxReportPeriod;
        TaxReportPeriod           taxReportPeriodFound;

        select reverse taxReportExtraFields
        index PeriodIdx;

        if (taxReportExtraFields)
        {
            while select taxReportPeriod
            where taxReportPeriod.TaxPeriod == taxReportExtraFields.TaxPeriod &&
                  taxReportPeriod.FromDate < taxReportExtraFields.ToDate + 1 &&
                  taxReportPeriod.VersionNum == 0
            {
                if (!TaxReportExtraFieldsBE::exist(taxReportPeriod.TaxPeriod,
                                                 taxReportPeriod.FromDate,
                                                 taxReportPeriod.ToDate))
                {
                    taxReportPeriodFound = taxReportPeriod;
                    break;
                }
            }
            if (!taxReportPeriodFound)
            {
                while select taxReportPeriod
                where taxReportPeriod.FromDate < taxReportExtraFields.ToDate + 1 &&
                      taxReportPeriod.VersionNum == 0
                {
                    if (!TaxReportExtraFieldsBE::exist(taxReportPeriod.TaxPeriod,
                                                     taxReportPeriod.FromDate,
                                                     taxReportPeriod.ToDate))
                    {
                        taxReportPeriodFound = taxReportPeriod;
                        break;
                    }
                }
            }
        }
        if (!taxReportPeriodFound)
        {
            while select taxReportPeriod
                where taxReportPeriod.VersionNum == 0
            {
                if (!TaxReportExtraFieldsBE::exist(taxReportPeriod.TaxPeriod,
                                                     taxReportPeriod.FromDate,
                                                     taxReportPeriod.ToDate))
                {
                    taxReportPeriodFound = taxReportPeriod;
                    break;
                }
            }
        }
        if (taxReportPeriodFound)
        {
            taxReportExtraFieldsNew.TaxPeriod = taxReportPeriodFound.TaxPeriod;
            taxReportExtraFieldsNew.FromDate  = taxReportPeriodFound.FromDate;
            taxReportExtraFieldsNew.ToDate    = taxReportPeriodFound.ToDate;
            taxReportExtraFieldsNew.insert();
        }
        else
            info("@SYS66032");
    }

]]></Source>
			</Method>
			<Method>
				<Name>txtNotExist</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TxtNotExist txtNotExist()
    {
        return "@SYS102251";
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherAndDateByTaxPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes voucher and date to the <c>TaxReportExtraFieldsBE</c> record found or
    /// created by the settlement period and date interval specified as parameters.
    /// </summary>
    /// <param name="_taxPeriod">Settlement period of the <c>TaxReportExtraFieldsBE</c> record to find or create.</param>
    /// <param name="_fromDate">From date of the <c>TaxReportExtraFieldsBE</c> record to find or create.</param>
    /// <param name="_toDate">To date of the <c>TaxReportExtraFieldsBE</c> record to find or create.</param>
    /// <param name="_voucher">Voucher to write to the found or created <c>TaxReportExtraFieldsBE</c> record.</param>
    /// <param name="_transDate">Transaction date to write to the found or created <c>TaxReportExtraFieldsBE</c> record.</param>
    internal static void setVoucherAndDateByTaxPeriod(
        TaxPeriod _taxPeriod,
        FromDate _fromDate,
        ToDate _toDate,
        Voucher _voucher,
        TransDate _transDate)
    {
        TaxReportExtraFieldsBE taxReportExtraFieldsBE = TaxReportExtraFieldsBE::findByTaxPeriod(_taxPeriod, _fromDate, _toDate);

        if (taxReportExtraFieldsBE)
        {
            ttsbegin;
            taxReportExtraFieldsBE.selectForUpdate(true);
            taxReportExtraFieldsBE.Voucher = _voucher;
            taxReportExtraFieldsBE.TransDate = _transDate;
            taxReportExtraFieldsBE.update();
            ttscommit;
        }
        else
        {
            taxReportExtraFieldsBE.TaxPeriod = _taxPeriod;
            taxReportExtraFieldsBE.FromDate = _fromDate;
            taxReportExtraFieldsBE.ToDate = _toDate;
            taxReportExtraFieldsBE.Voucher = _voucher;
            taxReportExtraFieldsBE.TransDate = _transDate;
            taxReportExtraFieldsBE.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>BE</CountryRegionCodes>
	<DeveloperDocumentation>@SYS123526</DeveloperDocumentation>
	<FormRef>TaxReportExtraFieldsBE</FormRef>
	<Label>@SYS67070</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaxPeriod</TitleField1>
	<TitleField2>FromDate</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>PeriodIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxPeriod</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>FromDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Orders</Name>
			<Label>@SYS67077</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Reimbursement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PaymentFormOrder</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VATDisbursement</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NihilAnnualListing</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ProRata</Name>
			<Label>@TaxReportBE:ProRataPercentages</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>AdjustedValue</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialPercentageB1</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialPercentageB2</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialPercentageB3</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialPercentageB4</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>SpecialPercentageB5</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>FromDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NihilAnnualListing</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS343068</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>PaymentFormOrder</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS67075</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Reimbursement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS67071</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxPeriod</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxPeriod</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ToDate</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VATDisbursement</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VATDisbursement</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>AdjustedValue</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatPercentage</ExtendedDataType>
			<Label>@TaxReportBE:ProRataPercentage</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialPercentageB1</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatPercentage</ExtendedDataType>
			<Label>@TaxReportBE:B1</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialPercentageB2</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatPercentage</ExtendedDataType>
			<Label>@TaxReportBE:B2</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialPercentageB3</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatPercentage</ExtendedDataType>
			<Label>@TaxReportBE:B3</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialPercentageB4</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatPercentage</ExtendedDataType>
			<Label>@TaxReportBE:B4</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt">
			<Name>SpecialPercentageB5</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxIntervatPercentage</ExtendedDataType>
			<Label>@TaxReportBE:B5</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PeriodIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxPeriod</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>FromDate</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>ToDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxPeriodHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxPeriodHead</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxPeriod</Name>
					<SourceEDT>TaxPeriod</SourceEDT>
					<Field>TaxPeriod</Field>
					<RelatedField>TaxPeriod</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxPeriodIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>