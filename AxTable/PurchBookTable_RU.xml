<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBookTable_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchBookTable_RU extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findSalesBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for sales book for the same period as current purchase book
    /// </summary>
    /// <returns>
    /// Found sales book
    /// </returns>
    public SalesBookTable_RU findSalesBook()
    {
        SalesBookTable_RU  salesBookTable, salesBookTableCount;
        PurchBookTable_RU  purchBookTableCount;
        TransDate          toDate;

        select count(RecId) from purchBookTableCount;
        select count(RecId) from salesBookTableCount;

        if (purchBookTableCount.RecId == 1 && salesBookTableCount.RecId == 1)
        {
            select firstonly salesBookTable;
        }
        else
        {
            toDate = this.getToDate();
            while select salesBookTable
            {
                if (salesBookTable.getToDate() == toDate)
                {
                    break;
                }
            }
        }

        return salesBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns starting date for purchase book
    /// </summary>
    /// <returns>
    /// Starting date for purchase book
    /// </returns>
    public TransDate getFromDate()
    {
        return this.SalesPurchBookTable_RU::getFromDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviousBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns previous purchase book
    /// </summary>
    /// <returns>
    /// Previous purchase book
    /// </returns>
    public SalesPurchBookTable_RU getPreviousBook()
    {
        return this.SalesPurchBookTable_RU::getPreviousBook();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ending date for purchase book
    /// </summary>
    /// <returns>
    /// Ending date for purchase book
    /// </returns>
    public TransDate getToDate()
    {
        return this.SalesPurchBookTable_RU::getToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current book is active
    /// </summary>
    /// <returns>
    /// True if current book is active(not closed); Otherwise false
    /// </returns>
    public boolean isActiveBook()
    {
        return this.RecId ? this.ClosingDate == dateNull() : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if current book is last book
    /// </summary>
    /// <returns>
    /// True if current book is last; Otherwise false
    /// </returns>
    public boolean isLastBook()
    {
        if (this.isActiveBook())
        {
            return true;
        }

        if (PurchBookTable_RU::existActiveBook())
        {
            return false;
        }

        return (select firstonly RecId from purchBookTable_RU
                    where purchBookTable_RU.ClosingDate > this.ClosingDate).RecId ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSortFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sorting for a given <c>QueryBuildDataSource</c>
    /// </summary>
    /// <param name="_queryBuildDataSource">
    /// <c>QueryBuildDataSource</c> object to be updated
    /// </param>
    public static void addSortFields(QueryBuildDataSource _queryBuildDataSource)
    {
        _queryBuildDataSource.addSortField(fieldNum(PurchBookTrans_RU, LineNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>booksInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container with Purchase books record Ids which were closed in given period,
    /// or, if ending date of period is greater than last closed workbook date, which were closed later than
    /// start date or not closed at all
    /// </summary>
    /// <param name="_bookRecId">
    /// Purchase book record id, added to result if no records were found
    /// </param>
    /// <param name="_fromDate">
    /// Starting date of period
    /// </param>
    /// <param name="_toDate">
    /// Ending date of period
    /// </param>
    /// <returns>
    /// Container with Purchase books record
    /// </returns>
    public static container booksInPeriod(SalesPurchBookRecId_RU _bookRecId,
                                          TransDate              _fromDate  = dateNull(),
                                          TransDate              _toDate    = dateNull())
    {
        PurchBookTable_RU   purchBookTable;
        TransDate           closingDate, bookToDate;
        container           ret;

        if (_fromDate || _toDate)
        {
            closingDate = PurchBookTable_RU::getLastClosedBook().ClosingDate;

            if (closingDate >= _toDate)
            {
                while select RecId from purchBookTable
                    order by BookId
                    where purchBookTable.ClosingDate >= _fromDate &&
                          purchBookTable.ClosingDate <= _toDate
                {
                    ret += purchBookTable.RecId;
                }
            }
            else
            {
                while select * from purchBookTable
                    order by BookId
                    where purchBookTable.ClosingDate >= _fromDate ||
                        ! purchBookTable.ClosingDate
                {
                    bookToDate = purchBookTable.getToDate();

                    if (bookToDate >= _fromDate && bookToDate <= _toDate)
                    {
                        ret += purchBookTable.RecId;
                    }
                }
            }
        }

        if (! ret && _bookRecId)
        {
            ret += _bookRecId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if purchase book can be closed on specified date
    /// </summary>
    /// <param name="_date">
    /// Date on which book should be closed
    /// </param>
    /// <param name="_closingDate">
    /// Date to be checked, if omitted
    /// </param>
    /// <returns>
    /// True if can be closed; otherwise false
    /// </returns>
    public static boolean canProcessDate(TransDate _date, TransDate _closingDate = dateNull())
    {
        boolean ret;
        date    closingDate = (! prmisDefault(_closingDate)) ? _closingDate : PurchBookTable_RU::getLastClosedBook().ClosingDate;

        if (closingDate && (closingDate >= _date))
        {
            ret = false;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanBeSettled_Cust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if customer transactions can be setteled on specified date depending on state of purchase books
    /// </summary>
    /// <param name="_custTransInvoice">
    /// Debet customer transaction
    /// </param>
    /// <param name="_custTransPayment">
    /// Credit customer transaction
    /// </param>
    /// <param name="_settlementDate">
    /// Date of settlement
    /// </param>
    /// <returns>
    /// True if transactions can be settled; otherwise false
    /// </returns>
    private static boolean checkIfCanBeSettled_Cust(CustTrans _custTransInvoice,
                                                           CustTrans _custTransPayment,
                                                           TransDate _settlementDate)
    {
        boolean             ok = true;
        PurchBookTable_RU   purchBookTable;
        TransDate           maxTransDate;
        TaxTable            taxTable;
        TaxReportPeriod     taxReportPeriod;

        changecompany(_custTransPayment.company())
        {
            if (_custTransPayment.custTrans_W().PrepaymentFactureId_W)
            {
                purchBookTable = PurchBookTable_RU::getLastClosedBook();

                select firstonly TaxPeriod from taxTable
                    where taxTable.TaxType_W == TaxType_W::VAT        ||
                          taxTable.TaxType_W == TaxType_W::VATReduced ||
                          taxTable.TaxType_W == TaxType_W::VATZero;

                if (taxTable.TaxPeriod)
                {
                    maxTransDate = max(max(_custTransPayment.TransDate, _settlementDate), _custTransInvoice.TransDate);

                    taxReportPeriod = TaxReportPeriod::find(taxTable.TaxPeriod, maxTransDate);

                    if (! taxReportPeriod)
                    {
                        error(strFmt("@GLS102560", _custTransPayment.Voucher, _custTransPayment.TransDate, _settlementDate));
                        return checkFailed(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
                    }

                    if (purchBookTable && maxTransDate <= purchBookTable.ClosingDate)
                    {
                        return checkFailed(strFmt("@GLS101111", purchBookTable.BookId));
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanBeSettled_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if customer or vendor transactions can be setteled on specified date depending on state of purchase books
    /// </summary>
    /// <param name="_custVendTransInvoice">
    /// Invoice customer transaction
    /// </param>
    /// <param name="_custVendTransPayment">
    /// Payment customer transaction
    /// </param>
    /// <param name="_settlementDate">
    /// Date of settlement
    /// </param>
    /// <returns>
    /// True if transactions can be settled; otherwise false
    /// </returns>
    public static boolean checkIfCanBeSettled_RU(CustVendTrans  _custVendTransInvoice,
                                                        CustVendTrans  _custVendTransPayment,
                                                        TransDate      _settlementDate)
    {
        switch (_custVendTransInvoice.TableId)
        {
            case tableNum(VendTrans) :
                return PurchBookTable_RU::checkIfCanBeSettled_Vend(_custVendTransInvoice, _custVendTransPayment, _settlementDate);
            case tableNum(CustTrans) :
                return PurchBookTable_RU::checkIfCanBeSettled_Cust(_custVendTransInvoice, _custVendTransPayment, _settlementDate);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCanBeSettled_Vend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if customer transactions can be setteled on specified date depending on state of purchase books
    /// </summary>
    /// <param name="_vendTransInvoice">
    /// Credit vendor transaction
    /// </param>
    /// <param name="_vendTransPayment">
    /// Debet vendor transaction
    /// </param>
    /// <param name="_settlementDate">
    /// Date of settlement
    /// </param>
    /// <returns>
    /// True if transactions can be settled; otherwise false
    /// </returns>
    #VATTransitionPeriod_RU
    private static boolean checkIfCanBeSettled_Vend(VendTrans  _vendTransInvoice,
                                                           VendTrans  _vendTransPayment,
                                                           TransDate  _settlementDate)

    {
        VendInvoiceJour                        vendInvoiceJour;
        TransDate                              maxTransDate, paymentDate;
        PurchBookTable_RU                      purchBookTable;
        TaxTable                               taxTable;
        FactureJour_RU                         factureJour;
        TaxReportPeriod                        paymentPeriod, facturePeriod;
        boolean                                checkSettlement = true;
        RecordSortedList                       sortedList;

        boolean checkRestoredVAT(TransDate _checkDate)
        {
            if (RestoredVATLogTable_RU::checkApproved(_checkDate))
            {
                error(RestoredVATLogTable_RU::txtApprovedMsg(_checkDate));
                return false;
            }

            return true;
        }

        changecompany(_vendTransInvoice.company())
        {
            select firstonly TaxPeriod from taxTable
                where taxTable.TaxType_W == TaxType_W::VAT        ||
                      taxTable.TaxType_W == TaxType_W::VATReduced ||
                      taxTable.TaxType_W == TaxType_W::VATZero;

            if (taxTable.TaxPeriod)
            {
                purchBookTable = PurchBookTable_RU::getLastClosedBook();

                paymentDate   = max(_settlementDate, _vendTransPayment.TransDate);
                paymentPeriod = TaxReportPeriod::find(taxTable.TaxPeriod, paymentDate);

                if (! paymentPeriod)
                {
                    error(strFmt("@GLS102560", _vendTransPayment.Voucher, _vendTransPayment.TransDate, _settlementDate));
                    return checkFailed(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
                }

                if (_vendTransInvoice.Invoice)
                {
                    select firstonly vendInvoiceJour
                        where vendInvoiceJour.InvoiceAccount == _vendTransInvoice.AccountNum &&
                              vendInvoiceJour.InvoiceId      == _vendTransInvoice.Invoice    &&
                              vendInvoiceJour.InvoiceDate    == _vendTransInvoice.TransDate  &&
                              vendInvoiceJour.LedgerVoucher  == _vendTransInvoice.Voucher;

                    if ((vendInvoiceJour.InvoiceDate >= #TransitionStartDate || _settlementDate > #TransitionEndDateOld) && ! vendInvoiceJour.vatOnPayment_RU)
                    {
                        checkSettlement = false;
                    }

                    sortedList = vendInvoiceJour.factureJourSortedList_RU();

                    while (sortedList.next(factureJour))
                    {
                        facturePeriod = TaxReportPeriod::find(taxTable.TaxPeriod, factureJour.FactureReportDate);

                        if ( ! facturePeriod)
                        {
                            error(strFmt("@GLS104865", factureJour.FactureExternalId, factureJour.FactureReportDate));
                            return checkFailed(strFmt(TaxPeriodHead::txtNotExist(), TaxType_W::VAT));
                        }

                        if (_settlementDate >= #TransitionStartDate &&
                          ! vendInvoiceJour.vatOnPayment_RU         &&
                            checkSettlement                         ||
                            _settlementDate <  #TransitionStartDate ||
                            vendInvoiceJour.vatOnPayment_RU)
                        {
                            maxTransDate = max(factureJour.FactureReportDate, paymentDate);

                            if (purchBookTable && (maxTransDate <= purchBookTable.ClosingDate))
                            {
                                error(strFmt("@GLS101111", purchBookTable.BookId));
                                return false;
                            }

                            if (! checkRestoredVAT(factureJour.FactureReportDate))
                                return false;

                            if (! checkRestoredVAT(paymentDate))
                                return false;
                        }
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates default query for use in purchase book report.
    /// </summary>
    /// <param name="_bookRecId">
    /// RecId of purch book.
    /// </param>
    /// <param name="_query">
    /// Query which is already initialized.
    /// </param>
    /// <param name="_fromDate">
    /// Start date of period.
    /// </param>
    /// <param name="_toDate">
    /// End date of period.
    /// </param>
    /// <param name="_initBookId">
    /// If true only book table rec id ranges cleared, otherwise all ranges cleared.
    /// </param>
    /// <returns>
    /// Query for use in purchase book report.
    /// </returns>
    #VATTransitionPeriod_RU
    public static Query createDefaultQuery(SalesPurchBookRecId_RU        _bookRecId,
                                           Query                         _query      = null,
                                           TransDate                     _fromDate   = dateNull(),
                                           TransDate                     _toDate     = dateNull(),
                                           boolean                       _initBookId = false)
    {
        Query                   query;
        QueryBuildRange         range;
        QueryBuildDataSource    queryBuildDataSource;

        if (_query)
        {
            query                = new Query(_query);
            queryBuildDataSource = query.dataSourceTable(tablenum(PurchBookTrans_RU));

            if (! _initBookId)
            {
                queryBuildDataSource.clearRanges();
                queryBuildDataSource.sortClear();

                queryBuildDataSource = query.dataSourceTable(tablenum(SalesBookTrans_RU));
                queryBuildDataSource.clearRanges();
                queryBuildDataSource.sortClear();
            }
            else
            {
                range = queryBuildDataSource.findRange(fieldnum(PurchBookTrans_RU, PurchBookTable_RU));
                while (range)
                {
                    queryBuildDataSource.clearRange(fieldnum(PurchBookTrans_RU, PurchBookTable_RU));
                    range = queryBuildDataSource.findRange(fieldnum(PurchBookTrans_RU, PurchBookTable_RU));
                }

                queryBuildDataSource = query.dataSourceTable(tablenum(SalesBookTrans_RU));
                if (queryBuildDataSource)
                {
                    range = queryBuildDataSource.findRange(fieldnum(SalesBookTrans_RU, SalesBookTable_RU));
                    while (range)
                    {
                        queryBuildDataSource.clearRange(fieldnum(SalesBookTrans_RU, SalesBookTable_RU));
                        range = queryBuildDataSource.findRange(fieldnum(SalesBookTrans_RU, SalesBookTable_RU));
                    }
                }
            }

            queryBuildDataSource = query.dataSourceTable(tablenum(PurchBookTrans_RU));
        }
        else
        {
            query = new Query();
            queryBuildDataSource = query.addDataSource(tablenum(PurchBookTrans_RU));
        }

        if ((_toDate ? _toDate : PurchBookTable_RU::find(_bookRecId).getToDate()) < #BookCorrectionDate)
        {
            PurchBookTable_RU::initDefaultQuery_OldBooks(_bookRecId, queryBuildDataSource, _fromDate, _toDate);
        }
        else
        {
            PurchBookTable_RU::initDefaultQuery(_bookRecId, queryBuildDataSource, _fromDate, _toDate, false);

            queryBuildDataSource = query.dataSourceTable(tablenum(SalesBookTrans_RU));

            if (!queryBuildDataSource)
            {
                queryBuildDataSource = query.addDataSource(tablenum(SalesBookTrans_RU));
            }

            PurchBookTable_RU::initDefaultQuery(_bookRecId, queryBuildDataSource, _fromDate, _toDate, false);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for purchase book printout
    /// </summary>
    /// <param name="_bookRecId">
    /// RecId of purchase book
    /// </param>
    /// <param name="_query">
    /// Query to be updated; Optional
    /// </param>
    /// <param name="_fromDate">
    /// From date for query
    /// </param>
    /// <param name="_toDate">
    /// To date for query
    /// </param>
    /// <param name="_initBookId">
    /// Determines if ranges on <c>SalesBookTrans_RU</c> should be cleared
    /// </param>
    /// <returns>
    /// Query for later use
    /// </returns>
    #VATTransitionPeriod_RU
    public static Query createQuery(SalesPurchBookRecId_RU  _bookRecId,
                                    Query                   _query      = null,
                                    TransDate               _fromDate   = dateNull(),
                                    TransDate               _toDate     = dateNull(),
                                    boolean                 _initBookId = false)
    {
        Query                   query;

        query = PurchBookTable_RU::createDefaultQuery(_bookRecId, _query, _fromDate, _toDate, _initBookId);

        if ((_toDate ? _toDate : PurchBookTable_RU::find(_bookRecId).getToDate()) >= #BookCorrectionDate)
        {
            PurchBookTable_RU::setExtQueryRanges(query);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existActiveBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if not closed book exists
    /// </summary>
    /// <returns>
    /// True if not closed book exists; otherwise false
    /// </returns>
    public static boolean existActiveBook()
    {
        return PurchBookTable_RU::findByClosingDate(dateNull()).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the <c>PurchBookTable_RU</c> table.
    /// </summary>
    /// <param name="_recId">
    /// The RecId of the PurchBookTable_RU record to find.
    /// </param>
    /// <param name="_forupdate">
    /// A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <param name="_concurrencyModel">
    /// The concurrency model option to use when reading the record; optional.
    /// </param>
    /// <returns>
    /// A record in the <c>PurchBookTable_RU</c> table; otherwise, an empty record.
    /// </returns>
    public static PurchBookTable_RU find(
        recId              _recId,
        boolean            _forupdate = false,
        ConcurrencyModel   _concurrencyModel = ConcurrencyModel::Auto)
    {
        PurchBookTable_RU purchBookTable;

        purchBookTable.selectForUpdate(_forupdate);
        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            purchBookTable.concurrencyModel(_concurrencyModel);
        }

        select firstonly purchBookTable
            where purchBookTable.RecId == _recId;

        return purchBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds record by specified BookId
    /// </summary>
    /// <param name="_bookId">
    /// BookId to look for
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether record should be selected for update
    /// </param>
    /// <returns>
    /// Found purchase book table
    /// </returns>
    public static PurchBookTable_RU findByBookId(PurchBookId_RU _bookId, boolean _forupdate = false)
    {
        PurchBookTable_RU   purchBookTable;

        if (_bookId)
        {
            purchBookTable.selectForUpdate(_forupdate);

            select firstonly firstfast purchBookTable
                where purchBookTable.BookId == _bookId;
        }

        return purchBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByClosingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds latest purchase book record with date greater that specified
    /// </summary>
    /// <param name="_closingDate">
    /// Date parameter
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether record should be selected for update
    /// </param>
    /// <returns>
    /// Found purchase book table
    /// </returns>
    public static PurchBookTable_RU findByClosingDate(PurchBookClosingDate_RU _closingDate,
                                                             boolean                 _forupdate = false)
    {
        PurchBookTable_RU   purchBookTable;

        purchBookTable.selectForUpdate(_forupdate);

        if (_closingDate)
        {
            select reverse firstonly purchBookTable
                where purchBookTable.ClosingDate >= _closingDate;
        }
        else
        {
            select firstonly purchBookTable
                where !purchBookTable.ClosingDate;
        }

        return purchBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstByClosingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds purchase book record with date greater that specified
    /// </summary>
    /// <param name="_closingDate">
    /// Date parameter
    /// </param>
    /// <param name="_forupdate">
    /// Determines whether record should be selected for update
    /// </param>
    /// <returns>
    /// Found purchase book table
    /// </returns>
    public static PurchBookTable_RU findFirstByClosingDate(PurchBookClosingDate_RU _closingDate,
                                                                  boolean                 _forupdate = false)
    {
        PurchBookTable_RU   purchBookTable;

        purchBookTable.selectForUpdate(_forupdate);

        select firstonly purchBookTable
            order by ClosingDate
            where purchBookTable.ClosingDate >= _closingDate;

        return purchBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureRevisionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns revision type for facture.
    /// </summary>
    /// <param name="_factureExternalId">
    /// External id of facture.
    /// </param>
    /// <param name="_factureDate">
    /// Date of facture.
    /// </param>
    /// <param name="_factureId">
    /// Id (internal) of facture.
    /// </param>
    /// <returns>
    /// Facture revision type.
    /// </returns>
    public static FactureRevisionType_RU getFactureRevisionType(FactureExternalId_RU       _factureExternalId,
                                                                FactureDate_RU             _factureDate,
                                                                FactureId_RU               _factureId)
    {
        PurchBookTrans_RU               purchBookTrans;
        FactureRevisionType_RU          revisionType;

        select firstonly TransType from purchBookTrans
        where purchBookTrans.FactureExternalId  == _factureExternalId
            && purchBookTrans.FactureDate       == _factureDate
            && (purchBookTrans.CorrectionType == FactureCorrectionType_RU::Correction
                || (   purchBookTrans.CorrectionType    == FactureCorrectionType_RU::Unknown
                    && purchBookTrans.CorrectedFactureExternalId))
            && purchBookTrans.FactureId         == _factureId;

        if (purchBookTrans.TransType == SalesPurchBookTransType_RU::CreditNote)
        {
            revisionType = FactureRevisionType_RU::RevisionCorrSales;
        }
        else
        {
            revisionType = FactureRevisionType_RU::RevisionCorrPurch;
        }

        return revisionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastClosedBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns last closed book
    /// </summary>
    /// <returns>
    /// Last closed book
    /// </returns>
    public static PurchBookTable_RU getLastClosedBook()
    {
        PurchBookTable_RU   purchBookTable;

        select reverse firstonly purchBookTable
            where purchBookTable.ClosingDate;

        return purchBookTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpPurchBookTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and fills temporary table with <c>PurchBookTrans_RU</c> records
    /// </summary>
    /// <param name="_queryRun">
    /// QeuryRun used for data selection
    /// </param>
    /// <param name="_groupCorrect">
    /// Determines whether correcting factures should be grouped
    /// </param>
    /// <returns>
    /// Temporary table with <c>PurchBookTrans_RU</c> records
    /// </returns>
    static public PurchBookTrans_RU getTmpPurchBookTrans(QueryRun _queryRun, NoYes _groupCorrect)
    {
        PurchBookTrans_RU       purchBookTrans, tmpPurchBookTrans;
        PurchBookTrans_RU       purchBookTransCorr, purchBookTransTmp;
        SalesBookTrans_RU       salesBookTrans;
        SalesBookTrans_RU       salesBookCreditNote;
        Integer                 lineNum;
        FactureJour_RU          factureJour;

        _queryRun.reset();

        tmpPurchBookTrans.setTmp();

        while (_queryRun.next())
        {
            if (_queryRun.changed(tableNum(PurchBookTrans_RU)))
            {
                purchBookTrans = _queryRun.get(tableNum(PurchBookTrans_RU));
                tmpPurchBookTrans.data(purchBookTrans);
                tmpPurchBookTrans.doInsert();
            }
            if (_queryRun.query().dataSourceTable(tableNum(SalesBookTrans_RU)) && _queryRun.changed(tableNum(SalesBookTrans_RU)))
            {
                salesBookTrans = _queryRun.get(tableNum(SalesBookTrans_RU));

                if (salesBookTrans.TransType == SalesPurchBookTransType_RU::SumDiff)
                {
                    select firstonly salesBookCreditNote
                        where salesBookCreditNote.FactureId == salesBookTrans.FactureId &&
                              salesBookCreditNote.TransType == SalesPurchBookTransType_RU::CreditNote;

                    if (! salesBookCreditNote || salesBookCreditNote.CorrectedFactureExternalId)
                    {
                        continue;
                    }
                }

                tmpPurchBookTrans.AmountLiableToVAT10           = - salesBookTrans.AmountLiableToVAT10;
                tmpPurchBookTrans.TaxAmountVAT10                = - salesBookTrans.TaxAmountVAT10;
                tmpPurchBookTrans.AmountNotLiableToVAT          = - salesBookTrans.AmountNotLiableToVAT;
                tmpPurchBookTrans.FactureExternalId             =   salesBookTrans.FactureExternalId;
                tmpPurchBookTrans.AccountName                   =   salesBookTrans.AccountName;
                tmpPurchBookTrans.PaymentDate                   =   salesBookTrans.PaymentDate;
                tmpPurchBookTrans.AmountInclVAT                 = - salesBookTrans.AmountInclVAT;
                tmpPurchBookTrans.AmountLiableToVAT20           = - salesBookTrans.AmountLiableToVAT20;
                tmpPurchBookTrans.TaxAmountVAT20                = - salesBookTrans.TaxAmountVAT20;
                tmpPurchBookTrans.AmountLiableToVAT0            = - salesBookTrans.AmountLiableToVAT0;
                tmpPurchBookTrans.AccountNum                    =   salesBookTrans.AccountNum;
                tmpPurchBookTrans.FactureId                     =   salesBookTrans.FactureId;
                tmpPurchBookTrans.FactureJour_RU                =   salesBookTrans.FactureJour_RU;
                tmpPurchBookTrans.FactureDate                   =   salesBookTrans.FactureDate;
                tmpPurchBookTrans.SettlementDate                =   salesBookTrans.SettlementDate;
                tmpPurchBookTrans.FactureDate_External          =   salesBookTrans.FactureDate_External;
                tmpPurchBookTrans.TransType                     =   salesBookTrans.TransType;
                tmpPurchBookTrans.DeliveryDate                  =   salesBookTrans.FactureDate_External;
                tmpPurchBookTrans.CorrectedFactureExternalId    =   salesBookTrans.CorrectedFactureExternalId;
                tmpPurchBookTrans.RefOriginalFacture            =   salesBookTrans.RefOriginalFacture;
                tmpPurchBookTrans.RevisionSeqNumber             =   salesBookTrans.RevisionSeqNumber;
                tmpPurchBookTrans.CorrectionType                =   salesBookTrans.CorrectionType;
                tmpPurchBookTrans.RevisionType                  =   salesBookTrans.RevisionType;
                tmpPurchBookTrans.Annulment                     =   salesBookTrans.Annulment;
                tmpPurchBookTrans.CorrectedFactureDate          =   salesBookTrans.CorrectedFactureDate;
                tmpPurchBookTrans.RefRevisedFacture             =   salesBookTrans.RefRevisedFacture;
                tmpPurchBookTrans.AmountCurInclVAT              = - salesBookTrans.AmountCurInclVAT;
                tmpPurchBookTrans.CommissionAgent               =   salesBookTrans.CommissionAgent;
                tmpPurchBookTrans.CurrencyCode                  =   salesBookTrans.CurrencyCode;
                tmpPurchBookTrans.OperationTypeCodes            =   salesBookTrans.OperationTypeCodes;
                tmpPurchBookTrans.PaymDocumentNum               =   salesBookTrans.PaymDocumentNum;

                if (salesBookTrans.FactureJour_RU)
                {
                    tmpPurchBookTrans.FactureJour_RU              = salesBookTrans.FactureJour_RU;
                }
                else
                {
                    tmpPurchBookTrans.FactureJour_RU              = FactureJour_RU::find(salesBookTrans.FactureId, salesBookTrans.factureModule()).RecId;
                }

                tmpPurchBookTrans.doInsert();
            }
        }

        if (_groupCorrect)
        {
            purchBookTransCorr.setTmp();
            purchBookTransCorr.setTmpData(tmpPurchBookTrans);

            purchBookTransTmp.setTmp();
            purchBookTransTmp.setTmpData(tmpPurchBookTrans);

            while select forupdate tmpPurchBookTrans
                where tmpPurchBookTrans.TransType == SalesPurchBookTransType_RU::Invoice &&
                    ! tmpPurchBookTrans.CorrectedFactureExternalId
            {
                factureJour = FactureJour_RU::find(tmpPurchBookTrans.FactureId, tmpPurchBookTrans.factureModule());

                select sum(AmountLiableToVAT10),
                       sum(TaxAmountVAT10),
                       sum(AmountNotLiableToVAT),
                       sum(AmountInclVAT),
                       sum(AmountLiableToVAT20),
                       sum(TaxAmountVAT20),
                       sum(AmountLiableToVAT0),
                       sum(AmountCurInclVAT)
                   from purchBookTransCorr
                where purchBookTransCorr.RefOriginalFacture         == factureJour.RecId        &&
                     (purchBookTransCorr.CorrectedPurchBookTable_RU == tmpPurchBookTrans.PurchBookTable_RU ||
                    ! purchBookTransCorr.CorrectedPurchBookTable_RU);

                tmpPurchBookTrans.AmountLiableToVAT10   += purchBookTransCorr.AmountLiableToVAT10;
                tmpPurchBookTrans.TaxAmountVAT10        += purchBookTransCorr.TaxAmountVAT10;
                tmpPurchBookTrans.AmountNotLiableToVAT  += purchBookTransCorr.AmountNotLiableToVAT;
                tmpPurchBookTrans.AmountInclVAT         += purchBookTransCorr.AmountInclVAT;
                tmpPurchBookTrans.AmountLiableToVAT20   += purchBookTransCorr.AmountLiableToVAT20;
                tmpPurchBookTrans.TaxAmountVAT20        += purchBookTransCorr.TaxAmountVAT20;
                tmpPurchBookTrans.AmountLiableToVAT0    += purchBookTransCorr.AmountLiableToVAT0;
                tmpPurchBookTrans.AmountCurInclVAT      += purchBookTransCorr.AmountCurInclVAT;

                delete_from purchBookTransCorr
                where purchBookTransCorr.RefOriginalFacture          == factureJour.RecId        &&
                     (purchBookTransCorr.CorrectedPurchBookTable_RU  == tmpPurchBookTrans.PurchBookTable_RU ||
                    ! purchBookTransCorr.CorrectedPurchBookTable_RU);

                if (tmpPurchBookTrans.AmountLiableToVAT10   ||
                    tmpPurchBookTrans.TaxAmountVAT10        ||
                    tmpPurchBookTrans.AmountNotLiableToVAT  ||
                    tmpPurchBookTrans.AmountInclVAT         ||
                    tmpPurchBookTrans.AmountLiableToVAT20   ||
                    tmpPurchBookTrans.TaxAmountVAT20        ||
                    tmpPurchBookTrans.AmountLiableToVAT0    ||
                    tmpPurchBookTrans.AmountCurInclVAT)
                {
                    tmpPurchBookTrans.doUpdate();
                }
                else
                {
                    tmpPurchBookTrans.doDelete();
                }
            }
        }

        lineNum = 0;
        while select tmpPurchBookTrans
            order by PaymentDate, FactureDate, FactureExternalId, RevisionSeqNumber, Annulment
        {
            lineNum ++;
            tmpPurchBookTrans.LineNum = lineNum;
            tmpPurchBookTrans.doUpdate();
        }

        return tmpPurchBookTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates default query for purchase book processing
    /// </summary>
    /// <param name="_bookRecId">
    /// RecId of purchase book
    /// </param>
    /// <param name="_queryBuildDataSource">
    /// <c>QueryBuildDataSource</c> object to be modified
    /// </param>
    /// <param name="_fromDate">
    /// Starting date for data selection
    /// </param>
    /// <param name="_toDate">
    /// Ending date for data selection
    /// </param>
    /// <param name="_setExtQueryRange">
    /// Determines if extended range should be set on query; Optional
    /// </param>
    public static void initDefaultQuery(SalesPurchBookRecId_RU  _bookRecId,
                                        QueryBuildDataSource    _queryBuildDataSource,
                                        TransDate               _fromDate  = dateNull(),
                                        TransDate               _toDate    = dateNull(),
                                        boolean                 _setExtQueryRange = true)
    {
        QueryBuildRange         queryRange;
        SalesBookTable_RU       salesBookTable;
        PurchBookTable_RU       purchBookTable;
        SalesPurchBookRecId_RU  bookRecId;
        int                     idx;
        container               bookRecIdCon;

        bookRecIdCon = PurchBookTable_RU::booksInPeriod(_bookRecId, _fromDate, _toDate);

        switch (_queryBuildDataSource.table())
        {
            case tableNum(PurchBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(PurchBookTrans_RU, TransType));
                queryRange.status(RangeStatus::Hidden);

                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldNum(PurchBookTrans_RU, CorrectedPurchBookTable_RU), queryValue(0));
                queryRange.status(RangeStatus::Hidden);

                for (idx = 1; idx <= conLen(bookRecIdCon); idx++)
                {
                    bookRecId = conPeek(bookRecIdCon, idx);
                    queryRange = _queryBuildDataSource.addRange(fieldNum(PurchBookTrans_RU, PurchBookTable_RU));
                    queryRange.value(queryValue(bookRecId));
                    queryRange.status(RangeStatus::Locked);

                    queryRange = _queryBuildDataSource.addRange(fieldNum(PurchBookTrans_RU, CorrectedPurchBookTable_RU));
                    queryRange.value(queryValue(bookRecId));
                    queryRange.status(RangeStatus::Hidden);
                }
                break;

            case tableNum(SalesBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU), SysQuery::value(0));
                queryRange.status(RangeStatus::Hidden);

                for (idx = 1; idx <= conLen(bookRecIdCon); idx++)
                {
                    purchBookTable = PurchBookTable_RU::find(conPeek(bookRecIdCon, idx));
                    salesBookTable = purchBookTable.findSalesBook();

                    queryRange = _queryBuildDataSource.addRange(fieldNum(SalesBookTrans_RU, SalesBookTable_RU));
                    queryRange.value(queryValue(salesBookTable.RecId));
                    queryRange.status(RangeStatus::Locked);

                    queryRange = _queryBuildDataSource.addRange(fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU));
                    queryRange.value(queryValue(salesBookTable.RecId));
                    queryRange.status(RangeStatus::Hidden);
                }

                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(SalesBookTrans_RU, TransType));
                queryRange.status(RangeStatus::Hidden);

                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldNum(SalesBookTrans_RU, ReverseTrans), queryValue(NoYes::No));
                queryRange.status(RangeStatus::Locked);
                break;
        }

        if (_setExtQueryRange)
        {
            PurchBookTable_RU::setExtQueryRange(_queryBuildDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultQuery_OldBooks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>QueryBuildDataSource</c> object with ranges by book rec ids from given period
    /// </summary>
    /// <param name="_bookRecId">
    /// Initial book recId
    /// </param>
    /// <param name="_queryBuildDataSource">
    /// <c>QueryBuildDataSource</c> object to be changed
    /// </param>
    /// <param name="_fromDate">
    /// Starting date of period
    /// </param>
    /// <param name="_toDate">
    /// Ending date of period
    /// </param>
    public static void initDefaultQuery_OldBooks(SalesPurchBookRecId_RU _bookRecId,
                                                 QueryBuildDataSource   _queryBuildDataSource,
                                                 TransDate              _fromDate  = dateNull(),
                                                 TransDate              _toDate    = dateNull())
    {
        int             idx;
        container       bookRecIdCon;
        QueryBuildRange queryRange;

        PurchBookTable_RU::addSortFields(_queryBuildDataSource);

        bookRecIdCon = PurchBookTable_RU::booksInPeriod(_bookRecId, _fromDate, _toDate);

        for (idx = 1; idx <= conLen(bookRecIdCon); idx++)
        {
            queryRange = _queryBuildDataSource.addRange(fieldNum(PurchBookTrans_RU, PurchBookTable_RU));
            queryRange.value(queryValue(conPeek(bookRecIdCon, idx)));
            queryRange.status(RangeStatus::Locked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunOnTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>QueryRun</c> object on temporary tables
    /// </summary>
    /// <param name="_queryRun">
    /// <c>QueryRun</c> object which is source for data selection
    /// </param>
    /// <param name="_groupCorrect">
    /// Determines whether corrections should be grouped in <c>QueryRun</c> object
    /// </param>
    /// <returns>
    /// Resulting <c>QueryRun</c> object
    /// </returns>
    public static QueryRun initQueryRunOnTmp(QueryRun _queryRun, NoYes _groupCorrect)
    {
        Query                query = new Query();
        QueryRun             queryRun;
        QueryBuildDataSource queryBuildDataSource;
        PurchBookTrans_RU    purchBookTrans = PurchBookTable_RU::getTmpPurchBookTrans(_queryRun, _groupCorrect);

        queryBuildDataSource = query.addDataSource(tableNum(PurchBookTrans_RU));

        PurchBookTable_RU::addSortFields(queryBuildDataSource);

        queryRun = new QueryRun(query);
        queryRun.setCursor(purchBookTrans);

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if <c>PurchBookTrans_RU</c> record is Credit-Note
    /// </summary>
    /// <param name="_purchBookTrans">
    /// <c>PurchBookTrans_RU</c> record to be checked
    /// </param>
    /// <param name="_isOldBook">
    /// Determines if book is in VAT Transition period
    /// </param>
    /// <returns>
    /// True if book transaction is credit note; Otherwise false
    /// </returns>
    public static boolean isCreditNote(PurchBookTrans_RU _purchBookTrans, boolean _isOldBook)
    {
        return ((_purchBookTrans.TransType == SalesPurchBookTransType_RU::CreditNote &&
                 ! _purchBookTrans.CorrectedFactureExternalId)                       ||
                _purchBookTrans.TransType == SalesPurchBookTransType_RU::Prepayment  ||
                _purchBookTrans.TransType == SalesPurchBookTransType_RU::VATStandardCancellation) && ! _isOldBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchBookTrans2SalesBookTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>PurchBookTrans_RU</c> record to <c>SalesBookTrans_RU</c> record
    /// </summary>
    /// <param name="_purchBookTrans">
    /// <c>PurchBookTrans_RU</c> record to be converted
    /// </param>
    /// <param name="_isOldBook">
    /// Determines if book is in VAT transition period
    /// </param>
    /// <returns>
    /// Buffer of <c>SalesBookTrans_RU</c> record
    /// </returns>
    public static SalesBookTrans_RU purchBookTrans2SalesBookTrans(PurchBookTrans_RU _purchBookTrans, boolean _isOldBook)
    {
        SalesBookTrans_RU salesBookTrans;

        if (PurchBookTable_RU::isCreditNote(_purchBookTrans, _isOldBook))
        {
            salesBookTrans.FactureDate_External = _purchBookTrans.FactureDate_External ? _purchBookTrans.FactureDate_External : _purchBookTrans.DeliveryDate;
            salesBookTrans.TransType            = _purchBookTrans.TransType;
            salesBookTrans.FactureId            = _purchBookTrans.FactureId;
            salesBookTrans.AmountLiableToVAT20  = _purchBookTrans.AmountLiableToVAT20;
            salesBookTrans.TaxAmountVAT20       = _purchBookTrans.TaxAmountVAT20;
            salesBookTrans.FactureJour_RU       = _purchBookTrans.FactureJour_RU;
        }

        return salesBookTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets extended query range on given datasource.
    /// </summary>
    /// <param name="_queryBuildDataSource">
    /// <c>QueryBuildDatasource</c> recod to be updated.
    /// </param>
    public static void setExtQueryRange(QueryBuildDataSource    _queryBuildDataSource)
    {
        QueryBuildRange    queryRange;

        str purchTransTypeValue = 
            '('                 +
            '('                 +
                '(\%1.'         + fieldstr(PurchBookTrans_RU, TransType)                    +
                    '!='        + int2str(SalesPurchBookTransType_RU::CreditNote)           +
                ')'             +
                ' || (\%1.'     + fieldstr(PurchBookTrans_RU, RevisionType)                 +
                    '=='        + int2str(FactureRevisionType_RU::RevisionOriginal)         +
                ')'             +
                ' || (\%1.'     + fieldstr(PurchBookTrans_RU, RevisionType)                 +
                    '=='        + int2str(FactureRevisionType_RU::RevisionCorrPurch)        +
                ')'             +
            ')'                 +
            ' && ('             +
                '('             +
                    '(\%1.'     + fieldstr(PurchBookTrans_RU, TransType)                    +
                        '!='    + int2str(SalesPurchBookTransType_RU::Invoice)              +
                    '\)'        +
                    ' && (\%1.' + fieldstr(PurchBookTrans_RU, TransType)                    +
                        '!='    + int2str(SalesPurchBookTransType_RU::SumDiff)              +
                    '\)'        +
                    ' && (\%1.' + fieldstr(PurchBookTrans_RU, TransType)                    +
                        '!='    + int2str(SalesPurchBookTransType_RU::AdvanceAdjustment)    +
                    '\)'        +
                    ' && (\%1.' + fieldstr(PurchBookTrans_RU, TransType)                    +
                        '!='    + int2str(SalesPurchBookTransType_RU::ExchAdj)              +
                    ')'         +
                ')'                                                                         +
                ' || (\%1.'     + fieldstr(PurchBookTrans_RU, ReverseTrans)                 +
                    '!='        + int2str(NoYes::Yes)                                       +
                ')'             +
            ')'                 +
            ' && (\%1.'         + fieldstr(PurchBookTrans_RU, RevisionType)                 +
                '!='            + int2str(FactureRevisionType_RU::RevisionCorrSales)        +
            ') '                +
            ')';

        str salesTransTypeValue = 
            '('                     +
            '('                     +
                '('                     +
                    '('                 +
                        '('             +
                            '(\%1.'     + fieldstr(SalesBookTrans_RU, TransType)                    +
                                '=='    + int2str(SalesPurchBookTransType_RU::CreditNote)           +
                            ')'         +
                            ' && (\%1.' + fieldstr(SalesBookTrans_RU, RevisionType)                 +
                                '!='    + int2str(FactureRevisionType_RU::RevisionOriginal)         +
                            ')'         +
                        ')'             +
                        ' || (\%1.'     + fieldstr(SalesBookTrans_RU, RevisionType)                 +
                            '=='        + int2str(FactureRevisionType_RU::RevisionCorrPurch)        +
                        ')'             +
                    ')'                 +
                    ' || ('             +
                        '(\%1.'         + fieldstr(SalesBookTrans_RU, TransType)                    +
                            '=='        + int2str(SalesPurchBookTransType_RU::SumDiff)              +
                        ')'             +
                        ' && (\%1.'     + fieldstr(SalesBookTrans_RU, CorrectedFactureExternalId)   +
                            '== \"\"'   +
                        ')'             +
                    ')'                 +
                ')'                     +
                ' || ('                 +
                    '(\%1.'             + fieldstr(SalesBookTrans_RU, AmountInclVAT)                +
                        '< 0'           +
                    ')'                 +
                    ' && (\%1.'         + fieldstr(SalesBookTrans_RU, TransType)                    +
                        '=='            + int2str(SalesPurchBookTransType_RU::Prepayment)           +
                    ')'                 +
                ')'                     +
            ')'                     +
            ' && (\%1.'         + fieldstr(SalesBookTrans_RU, RevisionType)                 +
                '!='            + int2str(FactureRevisionType_RU::RevisionCorrSales)        +
            ') '                +
            ')';

        switch (_queryBuildDataSource.table())
        {
            case tablenum(PurchBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(PurchBookTrans_RU, TransType));
                queryRange.value(strfmt(purchTransTypeValue,_queryBuildDataSource.name()));
                queryRange.status(RangeStatus::Hidden);
                break;

            case tablenum(SalesBookTrans_RU) :
                queryRange = findOrCreateRange_W(_queryBuildDataSource, fieldnum(SalesBookTrans_RU, TransType));
                queryRange.value(strfmt(salesTransTypeValue, _queryBuildDataSource.name()));
                queryRange.status(RangeStatus::Hidden);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets extended query ranges for all datasources in the query.
    /// </summary>
    /// <param name="_query">
    /// <c>Query</c> to be updated.
    /// </param>
    public static void setExtQueryRanges(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = _query.dataSourceTable(tablenum(PurchBookTrans_RU));
        PurchBookTable_RU::setExtQueryRange(queryBuildDataSource);

        queryBuildDataSource = _query.dataSourceTable(tablenum(SalesBookTrans_RU));
        if (queryBuildDataSource)
        {
            PurchBookTable_RU::setExtQueryRange(queryBuildDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes given <c>QueryRun</c> object to use grouping and aggregation by several fields
    /// </summary>
    /// <param name="_queryRun">
    /// <c>QueryRun</c> object to be modified
    /// </param>
    /// <param name="_groupByFactures">
    /// Determines whether grouping should be applied
    /// </param>
    public static void updateQuery(QueryRun _queryRun, NoYes _groupByFactures)
    {
        QueryBuildDataSource    queryDataSource;

        if (! _groupByFactures)
        {
            return;
        }

        queryDataSource = _queryRun.query().dataSourceTable(tableNum(PurchBookTrans_RU));
        queryDataSource.sortClear();

        queryDataSource.orderMode(OrderMode::GroupBy);
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, PaymentDate));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, FactureDate_External));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, FactureExternalId));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, RevisionSeqNumber));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, Annulment));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, FactureId));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, TransType));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, AccountNum));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, AccountName));
        queryDataSource.addSortField(fieldNum(PurchBookTrans_RU, CountryGTD));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, CorrectedFactureExternalId));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, RefOriginalFacture));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, CorrectionType));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, RevisionType));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, CorrectedFactureDate));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, FactureJour_RU));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, CurrencyCode));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, CommissionAgent));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, OperationTypeCodes));
        queryDataSource.addSortField(fieldnum(PurchBookTrans_RU, PaymDocumentNum));

        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, DeliveryDate), SelectionField::Max);
        queryDataSource.addSelectionField(fieldnum(PurchBookTrans_RU, AmountCurInclVAT), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, AmountInclVAT), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, AmountLiableToVAT20), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, AmountLiableToVAT10), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, AmountLiableToVAT0), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, AmountNotLiableToVAT), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, TaxAmountVAT20), SelectionField::Sum);
        queryDataSource.addSelectionField(fieldNum(PurchBookTrans_RU, TaxAmountVAT10), SelectionField::Sum);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>LedgerBasicSalesTax</ConfigurationKey>
	<CountryRegionCodes>RU</CountryRegionCodes>
	<DeveloperDocumentation>@GLS64331</DeveloperDocumentation>
	<FormRef>PurchBookTable_RU</FormRef>
	<Label>@GLS101143</Label>
	<TableGroup>WorksheetHeader</TableGroup>
	<TitleField1>BookId</TitleField1>
	<TitleField2>Name</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>BookIdIdx</ClusteredIndex>
	<Modules>RSalesPurchBooks</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<ReplacementKey>BookIdIdx</ReplacementKey>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdateDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ClosingDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AccountingPeriod</Name>
			<Label>@SYS4646</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ClosingDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LastUpdateDate</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>History</Name>
			<Label>@SYS10575</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Log</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>BookId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Name</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BookId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchBookId_RU</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ClosingDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchBookClosingDate_RU</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>LastUpdateDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@SYS16686</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Log</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Log</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Name</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PurchBookName_RU</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>BookIdIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>BookId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ClosingDateIdx</Name>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>ClosingDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>SalesPurchBookTable_RU</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>LastUpdateDate</MapField>
					<MapFieldTo>LastUpdateDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ClosingDate</MapField>
					<MapFieldTo>ClosingDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>BookId</MapField>
					<MapFieldTo>BookId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Name</MapField>
					<MapFieldTo>Name</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Policy</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Log</MapField>
					<MapFieldTo>Log</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations />
	<StateMachines />
</AxTable>