<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSettleTrans_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxWithholdSettleTrans_IN extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>TaxWithholdTrans_IN</c> table.
    /// </summary>
    /// <param name="_taxWithholdtrans">
    /// <c>TaxWithholdTrans_IN</c> buffer is used to initialize the record.
    /// </param>
    /// <param name="_newVoucher">
    /// Voucher number is used to find out Amount origin.
    /// </param>
    /// <param name="_settlementPeriod">
    /// Withhold tax settlement period is used to initialize the record.
    /// </param>
    /// <param name="_taxType">
    /// Withhold tax type is used to initialize the record.
    /// </param>
    /// <param name="_tanNumber">
    ///  Withhold tax account number is used to initialize the record.
    /// </param>
    public void initFromTaxWithholdTrans(
        TaxWithholdTrans_IN       _taxWithholdtrans,
        Voucher                   _newVoucher,
        TaxWithholdPeriodRecId_IN _settlementPeriod,
        TaxWithholdType_IN        _taxType,
        TaxInformationRecId_IN    _tanNumber)
    {
        TaxWithholdTrans_IN                 taxWithholdLoc;
        TaxWithholdTrans_IN                 taxWithholdTrans;
        TaxWithholdTrans_IN                 withholdTrans;
        VendTable                           vendTable;
        CustTable                           custTable;
        AccountNum                          accountNumber;
        PANNumber_IN                        paN;
        AccountName                         accountName;
        AmountCur                           amountOrigin;
        TaxWithholdTrans_IN                 taxWithholdTransLoc;
        TaxWithholdConcessionTable_IN       taxWithholdConcessionTable;
        TaxWithholdConcessionCertTable_IN   taxWithholdConcessionCertTable;
        TaxWithholdReasonCode               reason;
        boolean                             checkReason;
        TaxWithholdSection_IN               sectionCodeLoc;
        TaxWithholdCertificateNumber_IN     certificateNumber;
        TaxWithholdTable                    taxWithholdTableLoc;
        TaxWithholdGroupData                taxWithholdGroupDataLoc;
        TaxWithholdGroupData                taxWithholdGroupData;

        #define.ReasonA('A')
        #define.ReasonB('B')

        #TaxWithhold_IN
        while select AmountOriginMST
                from taxWithholdLoc
                group by Voucher, LineNum, AmountOriginMST
                where taxWithholdLoc.Voucher                   == _taxWithholdTrans.Voucher
                   && taxWithholdLoc.TaxWithholdComponentGroup == _taxWithholdTrans.TaxWithholdComponentGroup
                   && taxWithholdLoc.IsTaxInterim == NoYes::No
        {
            amountOrigin += taxWithholdLoc.AmountOriginMST;
        }

        select sum(TaxTaxWithholdAmount)
                from taxWithholdLoc
                group by Voucher, Source, TransDate, TaxWithholdCurrency
                where taxWithholdLoc.Voucher                   == _taxWithholdTrans.Voucher
                   && taxWithholdLoc.TaxWithholdComponentGroup == _taxWithholdTrans.TaxWithholdComponentGroup
                   && taxWithholdLoc.IsTaxInterim == NoYes::No;

        select firstonly CustAccount, VendAccount, TaxWithholdGroup, TaxWithholdComponentGroup, RateOfDeduction, AmountOriginMST, SourceTransDate, SourceTransVoucher, TransactionStatus  from taxWithholdTrans
           where taxWithholdTrans.Voucher                    == _taxWithholdTrans.Voucher
               && taxWithholdTrans.Source                    == taxWithholdLoc.Source
               && taxWithholdTrans.TaxWithholdComponentGroup == _taxWithholdTrans.TaxWithholdComponentGroup
               && taxWithholdTrans.TransDate                 == taxWithholdLoc.TransDate
               && taxWithholdTrans.IsTaxInterim == NoYes::No;

        if (CompanyInfoHelper::standardCurrency() != taxWithholdLoc.TaxWithholdCurrency)
        {
            amountOrigin = CurrencyExchangeHelper::curAmount(amountOrigin, taxWithholdLoc.TaxWithholdCurrency);
        }
        if (taxWithholdTrans.VendAccount)
        {
            vendTable     = VendTable::find(taxWithholdTrans.VendAccount, false);
            accountNumber = vendTable.AccountNum;
            paN           = vendTable.getTaxInformationVendTable_IN().panNumber;
            accountName   = DirPartyTable::findRec(vendTable.Party).Name;
        }
        else
        {
            custTable     = CustTable::find(taxWithholdTrans.CustAccount, false);
            accountNumber = custTable.AccountNum;
            paN           = custTable.getTaxInformationCustTable_IN().panNumber;
            accountName   =  DirPartyTable::findRec(custTable.Party).Name;
        }

        ttsbegin;
        this.OrigVoucher                    = _taxWithholdTrans.Voucher;
        this.Voucher                        = _newVoucher;
        this.CustVendAccount                = accountNumber;
        this.TransDate                      = taxWithholdLoc.TransDate;
        this.Source                         = taxWithholdLoc.Source;
        this.NatureOfAssessee               = _taxWithholdTrans.NatureOfAssessee;
        this.Amount                         = amountOrigin;
        this.TaxAmount                      = taxWithholdLoc.TaxTaxWithholdAmount;
        this.TaxWithholdComponentGroup      = taxWithholdTrans.TaxWithholdComponentGroup;
        this.WithholdingTaxGroup            = taxWithholdTrans.TaxWithholdGroup;
        this.Value                          = taxWithholdTrans.RateOfDeduction;
        this.CurrentDate                    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        this.pan                            = paN;
        this.CustVendAccountName            = accountName;
        this.TaxWithholdSettlementPeriod    = _settlementPeriod;
        this.TaxType                        = _taxType;
        this.TaxWithholdRegNumber           = _tanNumber;
        this.SourceTransDate                = taxWithholdTrans.SourceTransDate;
        this.SourceTransVoucher             = taxWithholdTrans.SourceTransVoucher;
        this.TransactionStatus              = taxWithholdTrans.TransactionStatus;
        this.doInsert();

        while select TaxWithholdCode, TransDate
            from withholdTrans
            where withholdTrans.Voucher                   == _taxWithholdTrans.Voucher
               && withholdTrans.TaxWithholdComponentGroup == _taxWithholdTrans.TaxWithholdComponentGroup
        {
            select TaxWithholdCode,TaxType,Section from taxWithholdConcessionTable
                where taxWithholdConcessionTable.TaxWithholdCode    == withholdTrans.TaxWithholdCode
                   && taxWithholdConcessionTable.TaxType            == _taxType
                   && ((taxWithholdConcessionTable.FromDate         <= withholdTrans.TransDate
                   || !taxWithholdConcessionTable.FromDate)
                   && (taxWithholdConcessionTable.ToDate            >= withholdTrans.TransDate
                   || !taxWithholdConcessionTable.ToDate));
            if (taxWithholdConcessionTable && !checkReason)
            {
                select RecId from taxWithholdConcessionCertTable
                    where taxWithholdConcessionCertTable.TaxWithholdConcessionTable == taxWithholdConcessionTable.RecId
                       && (taxWithholdConcessionCertTable.VendAccount               == accountNumber
                       || taxWithholdConcessionCertTable.CustAccount                == accountNumber)
                       && ((taxWithholdConcessionCertTable.FromDate                 <= withholdTrans.TransDate
                       || !taxWithholdConcessionCertTable.FromDate)
                       && (taxWithholdConcessionCertTable.ToDate                    >= withholdTrans.TransDate
                       || !taxWithholdConcessionCertTable.ToDate));
                if (taxWithholdConcessionCertTable)
                {
                    taxWithholdConcessionTable = TaxWithholdConcessionTable_IN::find(taxWithholdConcessionCertTable.TaxWithholdConcessionTable);
                    certificateNumber = taxWithholdConcessionCertTable.CertificateNumber;

                    if (taxWithholdConcessionTable.Section == #197 && taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TDS)
                    {
                        reason      = #ReasonA;
                        checkReason = true;
                    }
                    else if ((taxWithholdConcessionTable.Section == #197A
                             || taxWithholdConcessionTable.Section == #194
                             || taxWithholdConcessionTable.Section == #194A
                             || taxWithholdConcessionTable.Section == #194EE
                             || taxWithholdConcessionTable.Section == #193)
                             && taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TDS)
                    {
                        reason      = #ReasonB;
                        checkReason = true;
                    }
                    if (taxWithholdConcessionTable.Section == "@GLS6380" && taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TCS)
                    {
                        reason      = #ReasonA;
                        checkReason = true;
                    }
                    else if (taxWithholdConcessionTable.TaxType == TaxWithholdType_IN::TCS)
                    {
                        reason      = #ReasonB;
                        checkReason = true;
                    }
                }
            }
        }
        sectionCodeLoc = TaxWithholdComponentGroupTable_IN::find(_taxWithholdTrans.TaxWithholdComponentGroup).SectionCode;
        update_recordset taxWithholdTransLoc
            setting SettledVoucher  = _newVoucher,
                    SectionCode     = sectionCodeLoc
            where taxWithholdTransLoc.Voucher                   == _taxWithholdTrans.Voucher
               && taxWithholdTransLoc.Source                    == taxWithholdLoc.Source
               && (taxWithholdTransLoc.VendAccount              == taxWithholdTrans.VendAccount
               || taxWithholdTransLoc.CustAccount               == taxWithholdTrans.CustAccount)
               && taxWithholdTransLoc.TaxWithholdComponentGroup == _taxWithholdTrans.TaxWithholdComponentGroup;

        update_recordset taxWithholdTransLoc
            setting Reason          = reason
            where taxWithholdTransLoc.Voucher                       == _taxWithholdTrans.Voucher
               && taxWithholdTransLoc.Source                        == taxWithholdLoc.Source
               && (taxWithholdTransLoc.VendAccount                  == taxWithholdTrans.VendAccount
               || taxWithholdTransLoc.CustAccount                   == taxWithholdTrans.CustAccount)
               && taxWithholdTransLoc.TaxWithholdComponentGroup     == _taxWithholdTrans.TaxWithholdComponentGroup
               && taxWithholdTransLoc.Reason                        == '';
        
        select firstOnly TaxWithholdGroup from taxWithholdGroupDataLoc
            where taxWithholdGroupDataLoc.TaxWithholdCode == _taxWithholdTrans.TaxWithholdCode;

        // if ApplyThreshold_IN is not marked then update the old threshhold certificate value.
        select firstOnly RecId from taxWithholdTableLoc
            join RecId from taxWithholdGroupData
            where taxWithholdGroupData.TaxWithholdGroup == taxWithholdGroupDataLoc.TaxWithholdGroup
                && taxWithholdGroupData.TaxWithholdCode == taxWithholdTableLoc.TaxWithholdCode
                && taxWithholdTableLoc.ApplyThreshold_IN == NoYes::Yes;

        if(taxWithholdTableLoc.RecId == 0 && certificateNumber != '')
        {
            //for the old TDS functionality if transaction is updated is updated with reason code “A” and “B” than only certificate information should flow to e-return.
            //Else for other reason codes like “C” “T” etc. feature should ignore to flow certificate number information to e-Return.
            //This will avoid reject of txt file validation through FVU tool.
            update_recordset taxWithholdTransLoc
            setting ConcessionCertificateNumber          = certificateNumber,
                    CertificateNumber                    = certificateNumber
            where taxWithholdTransLoc.Voucher                       == _taxWithholdTrans.Voucher
               && taxWithholdTransLoc.Source                        == taxWithholdLoc.Source
               && (taxWithholdTransLoc.VendAccount                  == taxWithholdTrans.VendAccount
               || taxWithholdTransLoc.CustAccount                   == taxWithholdTrans.CustAccount)
               && taxWithholdTransLoc.TaxWithholdComponentGroup     == _taxWithholdTrans.TaxWithholdComponentGroup
               &&(taxWithholdTransLoc.Reason                        == #ReasonA
               ||taxWithholdTransLoc.Reason                         == #ReasonB);
        }

        if (reason == #ReasonB)
        {
            // If the reason is B, then the transaction should be mark as B, no matter is has been mark as Y or not.
            // Y means: zero deduct, because cumulative transaction amount has not cross threshold.
            update_recordset taxWithholdTransLoc
            setting Reason          = reason
            where taxWithholdTransLoc.Voucher                       == _taxWithholdTrans.Voucher
               && taxWithholdTransLoc.Source                        == taxWithholdLoc.Source
               && (taxWithholdTransLoc.VendAccount                  == taxWithholdTrans.VendAccount
               || taxWithholdTransLoc.CustAccount                   == taxWithholdTrans.CustAccount)
               && taxWithholdTransLoc.TaxWithholdComponentGroup     == _taxWithholdTrans.TaxWithholdComponentGroup
               && taxWithholdTransLoc.TaxType                       == TaxWithholdCodeType_IN::TDS
               && taxWithholdTransLoc.Reason                        == #ZeroDeductDueToThreshholdMark;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating  Mark field if  corresponding record  for <c> specTrans </c>.
    /// </summary>
    /// <param name="_recId">
    /// Unique record Id is used to find the record.
    /// </param>
    /// <param name="_voucher">
    ///  Voucher is used to find the record.
    /// </param>
    /// <param name="_company">
    ///  Company Id is used to find the record.
    /// </param>
    public void markTrans(
        RecId   _recId,
        Voucher _voucher,
        DataAreaId _company)
    {
        SpecTrans                   specTrans;
        VendTransOpen               vendTransOpen;
        TaxWithholdSettleTrans_IN   taxWithholdSettleTrans;

        select firstonly RecId from vendTransOpen
            where vendTransOpen.RefRecId    == _recId;

        select firstonly RecId from specTrans
            where specTrans.RefTableId   == vendTransOpen.TableId
               && specTrans.RefRecId     == vendTransOpen.RecId
               && specTrans.RefCompany   == _company;

        ttsbegin;
        if (specTrans.RecId)
        {
            update_recordset taxWithholdSettleTrans
                setting Mark = NoYes::Yes
                where taxWithholdSettleTrans.Voucher == _voucher
                   && taxWithholdSettleTrans.Closed  == NoYes::No;
        }
        else
        {
            update_recordset taxWithholdSettleTrans
                setting Mark = NoYes::No
                where taxWithholdSettleTrans.Voucher == _voucher
                   && taxWithholdSettleTrans.Closed  == NoYes::No;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Ledger voucher  of <c> TaxWithholdSettleTrans_IN </c> table.
    /// </summary>
    /// <param name="_newVoucher">
    ///  Updated value of voucher
    /// </param>
    /// <param name="_voucher">
    ///  Voucher is used to find the record.
    /// </param>
    public void updateLedgerVoucher(
        Voucher _newVoucher,
        Voucher _voucher)
    {
        TaxWithholdSettleTrans_IN    taxWithholdSettleTrans;

        ttsbegin;
        update_recordset taxWithholdSettleTrans
            setting LedgerVoucher   = _newVoucher
            where taxWithholdSettleTrans.Voucher    == _voucher
               && taxWithholdSettleTrans.Mark       == NoYes::Yes
               && taxWithholdSettleTrans.Closed     == NoYes::No;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdSettleTrans_IN</c> table for the specified record id.
    /// </summary>
    /// <param name="_recId">
    /// The unique record id is used  to find.
    /// </param>
    /// <param name="_forupdate">
    /// If true, then read the record for updating.
    /// </param>
    /// <param name="_concurrencyModel">
    /// An optional value used when the table is not automatically concurrent.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdSettleTrans_IN</c> table.
    /// </returns>
    public static TaxWithholdSettleTrans_IN find(
        RefRecId            _recId,
        boolean             _forupdate        = false,
        ConcurrencyModel    _concurrencyModel = ConcurrencyModel::Auto)
    {
        TaxWithholdSettleTrans_IN taxWithholdSettleTrans;

        taxWithholdSettleTrans.selectForUpdate(_forupdate);
        if (_forupdate  && _concurrencyModel != ConcurrencyModel::Auto)
        {
            taxWithholdSettleTrans.concurrencyModel(_concurrencyModel);
        }

        select firstonly taxWithholdSettleTrans
            where taxWithholdSettleTrans.RecId == _recId;

        return taxWithholdSettleTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the <c>TaxWithholdSettleTrans_IN</c>  table for the specified Voucer and Orig Voucher.
    /// </summary>
    /// <param name="_voucher">
    ///  Voucher to find the record.
    /// </param>
    /// <param name="_origVoucher">
    /// Origin voucher to find the record.
    /// </param>
    /// <returns>
    /// A buffer containing <c>TaxWithholdSettleTrans_IN</c> table.
    /// </returns>
    public static TaxWithholdSettleTrans_IN findByVoucher(
        Voucher      _voucher,
        Voucher      _origVoucher)
    {
        TaxWithholdSettleTrans_IN    taxWithholdSettleTrans;

        if (_voucher)
        {
            select firstonly taxWithholdSettleTrans
                where taxWithholdSettleTrans.Voucher        == _voucher
                   && taxWithholdSettleTrans.OrigVoucher    == _origVoucher;
        }
        return taxWithholdSettleTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumOfTaxmountFrmVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caculate the sum of tax amount.
    /// </summary>
    /// <param name="_voucher">
    /// A voucher number is used to find the record.
    /// </param>
    /// <returns>
    /// Total tax amount.
    /// </returns>
    public static AmountCur findSumOfTaxmountFrmVoucher(Voucher _voucher)
    {
        TaxWithholdSettleTrans_IN    taxWithholdSettleTrans;

        if (_voucher)
        {
            select sum(TaxAmount) from taxWithholdSettleTrans
                where taxWithholdSettleTrans.Voucher == _voucher
                   && taxWithholdSettleTrans.Mark    == NoYes::Yes
                   && taxWithholdSettleTrans.Closed  == NoYes::No;
        }

        return taxWithholdSettleTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSumOfTaxmountFrmVoucher_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// To find the total tax amount.
    /// </summary>
    /// <param name="_voucher">
    /// Voucher number is used to find the record.
    /// </param>
    /// <returns>
    /// Total tax amount.
    /// </returns>
    public static AmountCur findSumOfTaxmountFrmVoucher_IN(Voucher _voucher)
    {
        TaxWithholdSettleTrans_IN    taxWithholdSettleTrans;

        if (_voucher)
        {
            select sum(TaxAmount) from taxWithholdSettleTrans
                where taxWithholdSettleTrans.Voucher == _voucher
                   && taxWithholdSettleTrans.Mark    == NoYes::Yes
                   && taxWithholdSettleTrans.Closed  == NoYes::No;
        }

        return taxWithholdSettleTrans.TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateChallanInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updating challan information .
    /// </summary>
    /// <param name="_vouhcer">
    ///  Voucher is used to find the record.
    /// </param>
    /// <param name="_taxWithholdSettleTrans">
    ///  Buffer of <c>TaxWithholdSettleTrans_IN </c> table.
    /// </param>
    /// <param name="_accountNum">
    /// Account number to update the authority of <c> TaxWithholdTrans_IN </c>.
    /// </param>
    /// <param name="_chequeNumber">
    ///  Cheque number to update the record.
    /// </param>
    /// <returns>
    /// If record updates then return true otherwise false.
    /// </returns>
    public static boolean updateChallanInformation(
        Voucher                      _vouhcer,
        TaxWithholdSettleTrans_IN    _taxWithholdSettleTrans,
        AccountNum                   _accountNum,
        BankChequeNum                _chequeNumber)
    {
        TaxWithholdSettleTrans_IN   taxWithholdSettleTransLoc;
        boolean                     checkStatus = false;

        ttsbegin;
        while select forupdate taxWithholdSettleTransLoc
            where taxWithholdSettleTransLoc.LedgerVoucher   == _vouhcer
               && taxWithholdSettleTransLoc.Mark            == NoYes::Yes
               && taxWithholdSettleTransLoc.Closed          == NoYes::Yes
        if (taxWithholdSettleTransLoc)
        {
            taxWithholdSettleTransLoc.BankName              = _taxWithholdSettleTrans.BankName;
            taxWithholdSettleTransLoc.BookEntry             = _taxWithholdSettleTrans.BookEntry;
            taxWithholdSettleTransLoc.bsrCode               = _taxWithholdSettleTrans.bsrCode;
            taxWithholdSettleTransLoc.ChallanDate           = _taxWithholdSettleTrans.ChallanDate;
            taxWithholdSettleTransLoc.ChallanNumber         = _taxWithholdSettleTrans.ChallanNumber;
            taxWithholdSettleTransLoc.TransferVoucherNum    = _taxWithholdSettleTrans.TransferVoucherNum;
            taxWithholdSettleTransLoc.MinorHeadCode         = _taxWithholdSettleTrans.MinorHeadCode;
            taxWithholdSettleTransLoc.Text                  = _taxWithholdSettleTrans.Text;
            taxWithholdSettleTransLoc.doUpdate();
            TaxWithholdTrans_IN::updateChallanInformation(taxWithholdSettleTransLoc, _accountNum, _chequeNumber);
            checkStatus = true;
        }
        ttscommit;

        return checkStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayOriginInvoiceAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display the adjusted base amount of basic withholding tax component.
    /// </summary>
    /// <returns>Adjusted withholding base amount.</returns>
    public display AmountCur displayOriginInvoiceAmount()
    {
        TaxWithholdTrans_IN taxWithholdTrans;
        TaxWithholdDesignerTable_IN taxWithholdDesignerTable;

        select firstonly AdjustedBaseAmount from taxWithholdTrans
            join RecId from taxWithholdDesignerTable
            where taxWithholdDesignerTable.TaxWithholdCode      == taxWithholdTrans.TaxWithholdCode
                && taxWithholdDesignerTable.TaxWithholdGroup    == taxWithholdTrans.TaxWithholdGroup
                && taxWithholdDesignerTable.Basis               == 0
                && taxWithholdTrans.Voucher                     == this.OrigVoucher
                && taxWithholdTrans.TransDate                   == this.TransDate
                && taxWithholdTrans.Source                      == this.Source
                && taxWithholdTrans.NatureOfAssessee            == this.NatureOfAssessee
                && taxWithholdTrans.TaxWithholdComponentGroup   == this.TaxWithholdComponentGroup
                && taxWithholdTrans.TaxWithholdGroup            == this.WithholdingTaxGroup
                && taxWithholdTrans.RateOfDeduction             == this.Value
                && taxWithholdTrans.SourceTransDate             == this.SourceTransDate
                && taxWithholdTrans.SourceTransVoucher          == this.SourceTransVoucher
                && taxWithholdTrans.TransactionStatus           == this.TransactionStatus;

        return taxWithholdTrans.AdjustedBaseAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<CountryRegionCodes>IN</CountryRegionCodes>
	<DeveloperDocumentation>@GLS63804</DeveloperDocumentation>
	<Label>@SYS81714</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>Voucher</TitleField1>
	<TitleField2>Source</TitleField2>
	<CacheLookup>Found</CacheLookup>
	<ClusteredIndex>RecId</ClusteredIndex>
	<Modules>Tax</Modules>
	<PrimaryIndex>RecId</PrimaryIndex>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccountName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Calculation</Name>
			<Label>@SYS31242</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Amount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrentDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Value</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Challaninfomation</Name>
			<Label>@GLS6139</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ChallanNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ChallanDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransferVoucherNum</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BankName</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BSRCode</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>BookEntry</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>MinorHeadCode</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Description</Name>
			<Label>@SYS41042</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>NatureOfAssessee</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PAN</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS36186</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Voucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Source</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CustVendAccountName</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Others</Name>
			<Label>@GLS5530</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Mark</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Closed</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>OrigVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LedgerVoucher</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Text</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdRegNumber</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TaxInformation_IN</Name>
			<Label>@SYS33550</Label>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>WithholdingTax</Name>
			<Label>@SYS33817</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>WithholdingTaxGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Amount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS6928</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BankName</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>VendBankAccountId</ExtendedDataType>
			<Label>@SYS22737</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>BookEntry</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@GLS6076</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>BSRCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>BSRCode_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CertificateNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdCertificateNumber_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ChallanDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Label>@GLS6079</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ChallanNumber</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdChallanNumber_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Closed</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>NoYesId</ExtendedDataType>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>CurrentDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendAccount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>CustVendAC</ExtendedDataType>
			<Label>@GLS5356</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CustVendAccountName</Name>
			<AssetClassification>End User Identifiable Information (EUII)</AssetClassification>
			<ExtendedDataType>AccountName</ExtendedDataType>
			<Label>@GLS6074</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>FromDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LedgerVoucher</Name>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Mark</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Label>@SYS19120</Label>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>MinorHeadCode</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>TaxWithholdMinorHeadCode_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>NatureOfAssessee</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<EnumType>NatureOfAssessee_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>OrigVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PAN</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PANNumber_IN</ExtendedDataType>
			<Label>@GLS5039</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>Source</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TaxModuleTypeId</ExtendedDataType>
			<EnumType>TaxModuleType</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>SourceTransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SourceTransVoucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TaxAmount</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>AmountCur</ExtendedDataType>
			<Label>@SYS76123</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TaxType</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdType_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdComponentGroup</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdComponentGroupRecId_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdRegNumber</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>TaxWithholdSettlementPeriod</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>TaxWithholdPeriodRecId_IN</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Text</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ChallanInformationText_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>ToDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionStatus</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<Visible>No</Visible>
			<EnumType>TaxWithholdTransactionstatus_IN</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>TransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransferVoucherNum</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdTransferVoucherNum_IN</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Value</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@SYS40283</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Voucher</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>Voucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>WithholdingTaxGroup</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>TaxWithholdGroup</ExtendedDataType>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaxWithholdComponentGroupTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdComponentGroup</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdHeadIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdSettlementPeriod</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TaxWithholdRegNumberTableIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaxWithholdRegNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>LedgerTransactionVoucher_IN</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>AccountingDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Voucher</MapField>
					<MapFieldTo>Voucher</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdComponentGroupTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdComponentGroupTable_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdComponentGroupTable_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdComponentGroupTable_IN_TaxWithholdSettleTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdComponentGroup</Name>
					<Field>TaxWithholdComponentGroup</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxWithholdGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WithholdingTaxGroup</Name>
					<SourceEDT>TaxWithholdGroup</SourceEDT>
					<Field>WithholdingTaxGroup</Field>
					<RelatedField>TaxWithholdGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdHead</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdHead_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdHead_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdHead_IN_TaxWithholdSettleTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdSettlementPeriod</Name>
					<Field>TaxWithholdSettlementPeriod</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxWithholdRegNumber</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdRegNumbers_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxWithholdRegNumbers_IN</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>TaxWithholdRegNumbers_IN_TaxWithholdSettleTrans_IN</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxWithholdRegNumber</Name>
					<Field>TaxWithholdRegNumber</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxWithholdTrans</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>TaxWithholdTrans_IN</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>NatureOfAssessee</Name>
					<Field>NatureOfAssessee</Field>
					<RelatedField>NatureOfAssessee</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>OrigVoucher</Name>
					<Field>OrigVoucher</Field>
					<RelatedField>Voucher</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>