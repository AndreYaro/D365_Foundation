<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCDSEstimateHoursImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjCDSEstimateHoursImport extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        boolean ret;
    
        ret = super();

        // Make sure the project exists
        if (!ProjTable::find(this.ProjectId).RecId)
        {
            ret = ret && checkFailed("@SYS102541");
        }

        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            if (!this.TaskId)
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateHoursImport, TaskId)));
            }
            
            if (!this.ModelId)
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateHoursImport, ModelId)));
            }
        
            // Make sure a corresponding Task exists
            if (!ProjCDSTaskImport::findByTask(this.TaskId))
            {
                ret = ret && checkFailed(strFmt("@Proj:ProjCDSRelatedTaskNotFound", guid2Str(this.TaskId)));
            }

            if (!this.CurrencyId)
            {
                ret = ret && checkFailed(strFmt("@SYS84378", fieldPName(ProjCDSEstimateHoursImport, CurrencyId)));
            }

            // Make sure the currency exists
            if (!Currency::find(this.CurrencyId).RecId)
            {
                ret = ret && checkFailed(strFmt("@SYS1458", this.CurrencyId));
            }
        }
 
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        ttsbegin;
        
        this.createForecastDataOnInsert();

        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastDataOnInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates relevant forecast records for imported hour estimate integration data when <c>ProjCDSEstimateHoursImport</c> record is inserted. Applies to pre-dualwrite only.
    /// </summary>
    public void createForecastDataOnInsert()
    {
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            this.createForecastModelRecord();
            this.TransId = this.createProjForecastEmplRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjForecastEmplRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>ProjForecastEmpl</c> table which contains the data that was imported
    /// </summary>
    private ProjEmplForecastTransId createProjForecastEmplRecord()
    {
        boolean             validationSucceeded = true;
        ProjForecastEmpl    projForecastEmpl;
        ProjCDSParameters   projCDSParameters = ProjCDSParameters::find();

        projForecastEmpl.SchedFromDate = this.StartDate;

        // call initialization methods on table
        projForecastEmpl.initValue();   // must be called after setting SchedFromDate
        projForecastEmpl.initFromProjTable(projForecastEmpl.projTable());

        projForecastEmpl.CurrencyId = this.CurrencyId;
        projForecastEmpl.ProjId = this.ProjectId;

        projForecastEmpl.initfromTransDate();

        projForecastEmpl.ModelId = this.ModelId;
        projForecastEmpl.ExchRate = this.ExchangeRate;
        projForecastEmpl.Txt = this.Description;

        if (this.Duration != 0)
        {
            projForecastEmpl.CostPrice = this.PlannedCostAmount / this.Duration;
            projForecastEmpl.SalesPrice = this.PlannedSalesAmount / this.Duration;
        }

        projForecastEmpl.ModelId = this.ModelId;
        projForecastEmpl.CategoryId = projCDSParameters.TimeCategory;
        projForecastEmpl.Qty = this.Duration;
        projForecastEmpl.ActivityNumber = ProjCDSTaskImport::findByTask(this.TaskId).ActivityNumber;
        projForecastEmpl.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(projForecastEmpl.ProjId, projForecastEmpl.CategoryId);

        if (!projCDSParameters.TimeCategory)
        {
            validationSucceeded = checkFailed(strFmt("@Proj:ProjCDSParametersValueNotSet", "@Proj:Category", "@Proj:TimeCategory"));
        }

        projForecastEmpl.initSchedFromDateToSourceActivity();

        if (validationSucceeded && projForecastEmpl.validateWrite())
        {
            projForecastEmpl.insert();
        }
        else
        {
            throw Error("@Proj:UnableToSaveDueToErrors");
        }

        return projForecastEmpl.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastModelRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>ForecastModel</c> table if it doesn't already exist
    /// </summary>
    private void createForecastModelRecord()
    {
        ForecastModel forecastModel;
        HeadingSub type = HeadingSub::Heading;

        if (!ForecastModel::find(type, this.ModelId))
        {
            forecastModel.ModelId = this.ModelId;
            forecastModel.SubModelId = this.ModelId;
            forecastModel.Type = type;

            if (forecastModel.validateWrite())
            {
                forecastModel.insert();
            }
            else
            {
                throw Error("@Proj:UnableToSaveDueToErrors");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        ttsbegin;
        
        this.createForecastDataOnUpdate();
  
        super();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastDataOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates relevant forecast records for imported hour estimate integration data when <c>ProjCDSEstimateHoursImport</c> record is updated.
    /// </summary>
    public void createForecastDataOnUpdate()
    {
       
        if (!ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
        {
            if (this.ModelId != this.orig().ModelId)
            {
                this.createForecastModelRecord();
            }
            this.updateProjForecastEmplTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjForecastEmplTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles updates into table <c>ProjForecastEmpl</c>
    /// </summary>
    private void updateProjForecastEmplTable()
    {
        ProjForecastEmpl projForecastEmpl;

        projForecastEmpl = ProjForecastEmpl::find(this.TransId, true);

        projForecastEmpl.Txt = this.Description;
        projForecastEmpl.CurrencyId = this.CurrencyId;
        projForecastEmpl.ExchRate = this.ExchangeRate;

        if (this.Duration != 0)
        {
            projForecastEmpl.CostPrice = this.PlannedCostAmount / this.Duration;
            projForecastEmpl.SalesPrice = this.PlannedSalesAmount / this.Duration;
        }

        projForecastEmpl.ModelId = this.ModelId;
        projForecastEmpl.Qty = this.Duration;
        projForecastEmpl.SchedFromDate = this.StartDate ? this.StartDate : projForecastEmpl.SchedFromDate;
        projForecastEmpl.ActivityNumber = ProjCDSTaskImport::findByTask(this.TaskId).ActivityNumber;
        projForecastEmpl.LinePropertyId = ProjLinePropertySetup::findLinePropertyId(projForecastEmpl.ProjId, projForecastEmpl.CategoryId);

        projForecastEmpl.initSchedFromDateToSourceActivity();

        if (projForecastEmpl.validateWrite())
        {
            projForecastEmpl.update();
        }
        else
        {
            throw Error("@Proj:UnableToSaveDueToErrors");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record corresponding to the passed in taskId
    /// </summary>
    /// <param name = "_taskId">The taskId to find</param>
    /// <param name = "_forUpdate">Optional parameter indicating if the table should be open for write</param>
    /// <returns>The record corresponding to the passed in taskId</returns>
    public static ProjCDSEstimateHoursImport find(guid _taskId, boolean _forUpdate = false)
    {
        ProjCDSEstimateHoursImport estimateHoursImport;

        estimateHoursImport.selectForUpdate(_forUpdate);

        if (_taskId)
        {
            select estimateHoursImport
                where estimateHoursImport.TaskId == _taskId;
        }

        return estimateHoursImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.deleteForecastData();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForecastData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes relevant forecast records for imported hour estimate integration data when <c>ProjCDSEstimateHoursImport</c> record is deleted.
    /// </summary>
    public void deleteForecastData()
    {
        return;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@Proj:ProjCDSEstimateHoursImportTableDevDoc</DeveloperDocumentation>
	<FormRef>ProjForecastEmpl</FormRef>
	<Label>@Proj:ProjCDSEstimateHoursImportTableTitle</Label>
	<SubscriberAccessLevel>
		<Read>Allow</Read>
		<Update>Allow</Update>
	</SubscriberAccessLevel>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>TaskId</TitleField1>
	<TitleField2>TransId</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>FoundAndEmpty</CacheLookup>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<DeleteActions />
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldGuid">
			<Name>TaskId</Name>
			<AllowEdit>No</AllowEdit>
			<Label>@SYS121658</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Description</Name>
			<ExtendedDataType>TransTxt</ExtendedDataType>
			<Label>@Proj:Description</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjectId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>ExchangeRate</Name>
			<ExtendedDataType>ExchRate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlannedCostAmount</Name>
			<ExtendedDataType>ProjCostPriceEmpl</ExtendedDataType>
			<Label>@Proj:ProjCDSPlannedCostAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PlannedSalesAmount</Name>
			<ExtendedDataType>ProjSalesPriceEmpl</ExtendedDataType>
			<Label>@Proj:ProjCDSPlannedSalesAmount</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Duration</Name>
			<ExtendedDataType>ProjQtyEmpl</ExtendedDataType>
			<Label>@SYS4008578</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ModelId</Name>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<ExtendedDataType>ProjEmplForecastTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>StartDate</Name>
			<ExtendedDataType>SchedFromDate</ExtendedDataType>
			<Label>@Proj:StartDate</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ContractLineId</Name>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
			<Label>@Proj:ContractLineId</Label>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TaskId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TaskId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransId</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Composition</RelationshipType>
			<Role>ProjCDSEstimateHoursImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjectId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjectId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>Currency</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjCDSEstimateHoursImport</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>