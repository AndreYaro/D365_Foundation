<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCComponentInstanceRootComponent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PCComponentInstanceRootComponent extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compareTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the values in this component instance with the ones on the supplied conponent instance.
    /// </summary>
    /// <param name="_rootComponentInstance">
    /// The instance of the root component used for comparison.
    /// </param>
    /// <returns>
    /// true if all values of this component and the subcomponents are equal; otherwise, false.
    /// </returns>
    public boolean compareTo(PCComponentInstanceRootComponent _rootComponentInstance)
    {
        PCComponentInstance                 thisComponentInstance;
        PCComponentInstance                 refComponentInstance;

        if (!this.RecId || !_rootComponentInstance.RecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        //compare the component this points to
        if (this.RootComponentClass != _rootComponentInstance.RootComponentClass)
        {
            return false;
        }

        //compare the instances
        thisComponentInstance = PCComponentInstance::find(this.ComponentInstance);
        refComponentInstance  = PCComponentInstance::find(_rootComponentInstance.ComponentInstance);

        return thisComponentInstance.compareTo(refComponentInstance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the root component instance that is associated with a configuration session.
    /// </summary>
    /// <param name="_configuration">
    /// A configuration session.
    /// </param>
    public static void deleteByConfiguration(PCProductConfiguration _configuration)
    {
        PCComponentInstanceRootComponent    componentInstanceRootComponent;
        PCComponentInstance                 componentInstance;
        ttsbegin;

        while   select  forupdate componentInstanceRootComponent
        join    RecId   from    componentInstance
        where   componentInstanceRootComponent.ComponentInstance == componentInstance.RecId
        &&      componentInstance.ProductConfiguration == _configuration.RecId
        {
            componentInstanceRootComponent.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified record exists in the <c>PCComponentInstanceRootComponent</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to check for existence.
    /// </param>
    /// <returns>
    ///    true if the specified record exists; otherwise, false.
    /// </returns>
    public static boolean exist(RefRecId _recId)
    {
        return (PCComponentInstanceRootComponent::find(_recId).RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentInstanceRootComponent</c> table.
    /// </summary>
    /// <param name="_recId">
    ///    The record ID of the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentInstanceRootComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentInstanceRootComponent find(RefRecId _recId, boolean _forupdate = false)
    {
        PCComponentInstanceRootComponent record;

        if (!_recId)
        {
            return record;
        }
        record.selectForUpdate(_forupdate);
        select firstonly record where record.RecId == _recId;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByProductConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the specified record in the <c>PCComponentInstanceRootComponent</c> table.
    /// </summary>
    /// <param name="_productConfiguration">
    ///    The record ID of the product configuration associated with the record to find.
    /// </param>
    /// <param name="_forupdate">
    ///    A Boolean value that indicates whether to read the record for update; optional.
    /// </param>
    /// <returns>
    ///    A record in the <c>PCComponentInstanceRootComponent</c> table; otherwise, an empty record.
    /// </returns>
    public static PCComponentInstanceRootComponent findByProductConfiguration(RefRecId _productConfiguration, boolean _forupdate = false)
    {
        PCComponentInstanceRootComponent    rootComponentInstance;
        PCComponentInstance                 componentInstance;

        if (!_productConfiguration)
        {
            return rootComponentInstance;
        }
        rootComponentInstance.selectForUpdate(_forupdate);
        select  firstonly rootComponentInstance
        join    RecId from componentInstance
        where   rootComponentInstance.ComponentInstance == componentInstance.RecId
        &&      componentInstance.ProductConfiguration  == _productConfiguration;

        return rootComponentInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowExceptionOnZeroDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if concurrent deletes should throw exception.
    /// </summary>
    /// <returns>true if exception should be thrown; otherwise false.</returns>
    public boolean shouldThrowExceptionOnZeroDelete()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>PC</ConfigurationKey>
	<DeveloperDocumentation>@SYS153037</DeveloperDocumentation>
	<EntityRelationshipType>Relationship</EntityRelationshipType>
	<Label>@SYS153036</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ComponentInstance</TitleField1>
	<TitleField2>RootComponentClass</TitleField2>
	<CacheLookup>NotInTTS</CacheLookup>
	<Modules>ProductInformationManagement</Modules>
	<SaveDataPerCompany>No</SaveDataPerCompany>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>PCComponentInstance</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>PCComponentInstance</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentInstance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootComponentClass</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Default</Name>
			<Label>@SYS27587</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>ComponentInstance</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>RootComponentClass</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ComponentInstance</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153058</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>RootComponentClass</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Label>@SYS153051</Label>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>PCClassIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>RootComponentClass</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings />
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ComponentInstance</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>PCComponentInstance</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ComponentInstance</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RootComponentInstance</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ComponentInstance</Name>
					<Field>ComponentInstance</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>RootComponentClass</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Cascade</OnDelete>
			<RelatedTable>PCClass</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>RootComponentClass</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>RootComponentInstance</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RootComponentClass</Name>
					<Field>RootComponentClass</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>