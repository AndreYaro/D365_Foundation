<?xml version="1.0" encoding="utf-8"?>
<AxTable xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjEmplTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjEmplTrans extends common
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the cost ledger amount for a transaction.
    /// </summary>
    /// <param name="projEmplTrans">
    ///    The transaction for which to calculate the cost amount.
    /// </param>
    /// <param name="ledgerFromDate">
    ///    The start date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    A <c>SalesAmount</c> data type that represents the cost amount.
    /// </returns>
    /// <remarks>
    ///    This is the total consumed cost for the transaction. The amount returned is in the default
    ///    currency.
    ///    Set the ledgerFromDate value to dateNull() and the ledgerToDate value to dateMax() to
    ///    include all postings for this transaction.
    /// </remarks>
    SalesAmount costAmount(
        ProjEmplTrans    projEmplTrans,
        TransDate        ledgerFromDate,
        TransDate        ledgerToDate)
    {
        return projStatement::newProjEmplTrans(projEmplTrans,ledgerFromDate,ledgerToDate).c105_Consumption_Hour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    display CostPrice costPrice()
    {
        ProjEmplTransCost   projEmplTransCost;
        ProjTrans           projTransCost;
        Amount              transCost;
        ProjTrans           projTrans;
        CostPrice           costPrice;

        select count(RecId), sum(CostPrice) from projEmplTransCost
           where projEmplTransCost.TransId == this.TransId;

        // Multiple funding sources exist
        if (projEmplTransCost.RecId > 1)
        {
            while select projEmplTransCost
                where projEmplTransCost.TransId == this.TransId
            {
                projTransCost = ProjTrans::newProjEmplTransCost(this, projEmplTransCost);
                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    transCost += CurrencyExchangeHelper::mstAmount(projTransCost.costPrice(),
                                                                    projTransCost.currencyIdCost(),
                                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                    UnknownNoYes::Unknown,
                                                                    0,
                                                                    0,
                                                                    false);
                }
                else
                {
                    transCost += CurrencyExchangeHelper::mstAmount((projTransCost.qty() ? projTransCost.qty() : 1) * projTransCost.costPrice(),
                                                                    projTransCost.currencyIdCost(),
                                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                    UnknownNoYes::Unknown,
                                                                    0,
                                                                    0,
                                                                    false);
                }
            }
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                costPrice = transCost;
            }
            else
            {
                projTrans = ProjTrans::newProjEmplTrans(this);
                costPrice = CurrencyExchangeHelper::mstAmount(transCost / (projTrans.qty() ? projTrans.qty() : 1),
                                                                projTrans.currencyIdCost(),
                                                                DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                UnknownNoYes::Unknown,
                                                                0,
                                                                0,
                                                                false);
            }
        }
        else
        {
            costPrice = projEmplTransCost.CostPrice;
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCostAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displayCostAmount()
    {
        return this.costAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySalesAmount</Name>
				<Source><![CDATA[
    public display SalesAmount displaySalesAmount()
    {
        return this.salesAmount(this, dateNull(), dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSourceList</Name>
				<Source><![CDATA[
    List fundingSourceList()
    {
        ProjEmplTransSale       projEmplTransSale;
        ProjEmplTransCost       projEmplTransCost;
        Map                     fundingList;
        List                    fundingSourceAllocation;
        AmountCur               totalTrxAmount;
        AmountCur               amountToMap;
        MapEnumerator           mapEnumerator;
        ProjSplitAllocation     allocation;
        boolean                 firstRecord = true;

        fundingList = new Map(Types::Int64, Types::Real);
        fundingSourceAllocation = new List( Types::Class );

        if (this.TotalCostAmountCur)
        {
            while select LineAmount, FundingSource from projEmplTransCost
                where projEmplTransCost.TransId == this.TransId
            {
                totalTrxAmount = totalTrxAmount + projEmplTransCost.LineAmount;
                amountToMap = projEmplTransCost.LineAmount;
                if (fundingList.exists(projEmplTransCost.FundingSource))
                {
                    amountToMap = fundingList.lookup(projEmplTransCost.FundingSource) + amountToMap;
                    fundingList.remove(projEmplTransCost.FundingSource);
                }
                fundingList.insert(projEmplTransCost.FundingSource, amountToMap);
            }
        }
        else if (this.TotalSalesAmountCur)
        {
            while select LineAmount, FundingSource from projEmplTransSale
                where projEmplTransSale.TransId == this.TransId
            {
                totalTrxAmount = totalTrxAmount + projEmplTransSale.LineAmount;
                amountToMap = projEmplTransSale.LineAmount;
                if (fundingList.exists(projEmplTransSale.FundingSource))
                {
                    amountToMap = fundingList.lookup(projEmplTransSale.FundingSource) + amountToMap;
                    fundingList.remove(projEmplTransSale.FundingSource);
                }
                fundingList.insert(projEmplTransSale.FundingSource, amountToMap);
            }
        }

        mapEnumerator = fundingList.getEnumerator();
        while ( mapEnumerator.moveNext() )
        {
            if (totalTrxAmount != 0.00)
            {
                allocation = ProjSplitAllocation::construct( mapEnumerator.currentKey(),
                                                             mapEnumerator.currentValue()/totalTrxAmount * 100,
                                                             0,
                                                             firstRecord ? NoYes::Yes : NoYes::No );
            }
            else
            {
                allocation = ProjSplitAllocation::construct( mapEnumerator.currentKey(),
                                                             100,
                                                             0,
                                                             firstRecord ? NoYes::Yes : NoYes::No );
            }
            fundingSourceAllocation.addEnd( allocation );
            firstRecord = false;
        }

        return fundingSourceAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjProposalJourQuery</Name>
				<Source><![CDATA[
    public container getProjProposalJourQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        ProjProposalId          proposalId;
        ProjEmplTransSale       projEmplTransSale;

        query = new Query();
        qbds = query.addDataSource(tableNum(ProjProposalJour));

        while select projEmplTransSale
            where projEmplTransSale.TransId == this.TransId
        {
            proposalId = ProjTrans::newProjEmplTransSale(this, projEmplTransSale).proposalId();
            if (proposalId)
            {
                qbds.addRange(fieldNum(ProjProposalJour, ProposalId)).value(queryValue(proposalId));
            }
        }

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    public void insert()
    {
        #isoCountryRegionCodes

        super();

        ProjPostedTransTable::initFromEmplTrans(this);

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            this.SysExtensionSerializerMap::postInsert();

            if (this.TransactionOrigin == ProjOrigin::Timesheet)
            {
                TSTimesheetTrans tsTimesheetTrans;

                select firstonly tsTimesheetTrans
                    where tsTimesheetTrans.TransId == this.TransIdRef;

                TSTimesheetLine tsTimesheetLine = tsTimesheetTrans.timesheetLine();
                if (tsTimesheetLine && !TransTaxInformationHelper::newHelper().findTransTaxInformationByRecord(this))
                {
                    TransTaxInformationHelper::copyTransTaxInformation(tsTimesheetLine, this);
                }
            }
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transaction has been invoiced.
    /// </summary>
    /// <returns>
    ///    true if the transaction has been invoiced; otherwise, false.
    /// </returns>
    display ProjInvoiced invoiced()
    {
        return ProjTrans::newProjEmplTrans(this).invoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the invoice that includes the transaction.
    /// </summary>
    /// <returns>
    ///    A <c>ProjInvoiceId</c> data type that represents the ID of the invoice for the transaction.
    /// </returns>
    /// <remarks>
    ///    If this transaction status is credit note proposal, an empty string is returned.
    /// </remarks>
    display ProjInvoiceId invoiceId()
    {
        return ProjTrans::newProjEmplTrans(this).invoiceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this transaction was created for a worker employed by another legal entity.
    /// </summary>
    /// <returns>
    /// true if the resource is employed by another legal entity; false otherwise.
    /// </returns>
    public boolean isIntercompany()
    {
        if (this.Resource &&
            ResourceFacade::getLegalEntity(this.Resource)  != CompanyInfo::findDataArea(this.dataAreaId).RecId)
        {
            return true;
        }
        else if (this.VendInvoiceTrans && ProjPendingVendorInvoiceIntercompanyCheckFlight::instance().isEnabled())
        {
            CustInvoiceTable custInvoiceTable = VendInvoiceTrans::getIntercompanyCustInvoiceTable(this.VendInvoiceTrans, this.ProjId, this.DataAreaId);

            if (custInvoiceTable.ProjIntercompany && custInvoiceTable.ProjIntercompany == this.DataAreaId)
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    display ProjLedgerAccruedAmount ledgerSalesAmount()
    {
        DictTable dictTableProjEmplTransSale;

        dictTableProjEmplTransSale = new DictTable(tableNum(ProjEmplTransSale));

        if (dictTableProjEmplTransSale.rights() >= AccessType::View)
        {
            return (select sum(LedgerSalesAmount) from projEmplTransSale
                    where projEmplTransSale.TransId == this.TransId).LedgerSalesAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packProjEmplTrans_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the <c>ProjEmplTransTaxExtensionIN</c> table
    /// </summary>
    /// <param name="_projEmplTransTaxExtensionIN">
    /// ProjEmplTransTaxExtensionIN is packed.
    /// </param>
    public void packProjEmplTrans_IN(ProjEmplTransTaxExtensionIN _projEmplTransTaxExtensionIN)
    {
        _projEmplTransTaxExtensionIN.ProjEmplTrans = this.RecId;

        this.SysExtensionSerializerMap::packExtensionTable(_projEmplTransTaxExtensionIN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projEmplTransTaxExtensionIN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the <c>ProjEmplTransTaxExtensionIN</c> table.
    /// </summary>
    /// <returns>
    /// The table <c>ProjEmplTransTaxExtensionIN</c> associated with the current record.
    /// </returns>
    public ProjEmplTransTaxExtensionIN projEmplTransTaxExtensionIN()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            return this.SysExtensionSerializerMap::getExtensionTable(tableNum(ProjEmplTransTaxExtensionIN));
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projEmplTransView_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a view associated with the current record.
    /// </summary>
    /// <returns>
    /// The <c>ProjEmplTransView_IN</c>.
    /// </returns>
    public ProjEmplTransView_IN projEmplTransView_IN()
    {
        ProjEmplTransView_IN projEmplTransView_IN;
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projEmplTransView_IN.initProjEmplTrans(this);

            // If the view doesn't have a RecId then it will assume
            // this is an insert scenario when it isn't.  So we will
            // let the view borrow the RecId from the projEmplTrans.  Since
            // no writes are done using this view this will work okay.
            projEmplTransView_IN.RecId = this.RecId;
            return projEmplTransView_IN;
        }

        return projEmplTransView_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceStatus</Name>
				<Source><![CDATA[
    public display ProjInvoiceStatus projInvoiceStatus()
    {
        ProjInvoiceStatus projInvoiceStatus = ProjInvoiceStatus::None;
  
        // Adjusted transactions
        ProjEmplTransSale adjustedTransaction;
        select firstonly RecId from adjustedTransaction
            where adjustedTransaction.TransId == this.TransId &&
                  adjustedTransaction.TransStatus == ProjTransStatus::Adjusted;
        if (adjustedTransaction)
        {
            projInvoiceStatus = ProjInvoiceStatus::Adjusted;
        }
        else
        {
            ProjTable projTable = ProjTable::find(this.ProjId);
            if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTable, ProjTransType::Hour))
            {
                ProjFundingSource projFundingSource;

                ProjLineProperty projLineProperty = ProjLineProperty::find(this.LinePropertyId);
                if (projLineProperty.ToBeInvoiced == NoYes::Yes)
                {
                    ProjEmplTransSale invoiced;
                    select firstonly RecId from invoiced
                        where invoiced.TransId == this.TransId &&
                            (invoiced.TransStatus == ProjTransStatus::Invoiced ||
                            invoiced.TransStatus == ProjTransStatus::MarkedCreditnote ||
                            invoiced.TransStatus == ProjTransStatus::CreditnoteProposal);

                    // For performance, Only search for OnHold if some of the transaction has been invoice
                    ProjEmplTransSale onHoldFunding;
                    if (invoiced)
                    {
                        select firstonly RecId from onHoldFunding
                            where onHoldFunding.TransId == this.TransId
                            join RecId from projFundingSource
                                where projFundingSource.RecId == onHoldFunding.FundingSource &&
                                    projFundingSource.FundingType == ProjFundingType::OnHoldFundingSource;
                    }

                    ProjEmplTransSale chargeable;
                    select firstonly RecId from chargeable
                        where chargeable.TransId == this.TransId &&
                            (chargeable.TransStatus == ProjTransStatus::Posted ||
                            chargeable.TransStatus == ProjTransStatus::InvoiceProposal)
                        join RecId from projFundingSource
                            where projFundingSource.RecId == chargeable.FundingSource &&
                                (projFundingSource.FundingType == ProjFundingType::Customer ||
                                projFundingSource.FundingType == ProjFundingType::Grant);

                    if (invoiced.RecId && chargeable.RecId)
                    {
                        if (onHoldFunding)
                        {
                            projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoicedWithOnhold;
                        }
                        else
                        {
                            projInvoiceStatus = ProjInvoiceStatus::PartiallyInvoiced;
                        }
                    }
                    else if (invoiced.RecId && !chargeable.RecId)
                    {
                        if (onHoldFunding)
                        {
                            projInvoiceStatus = ProjInvoiceStatus::FullyInvoicedWithOnhold;
                        }
                        else
                        {
                            projInvoiceStatus = ProjInvoiceStatus::FullyInvoiced;
                        }
                    }
                    else if (!invoiced.RecId && chargeable.RecId)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::Chargeable;

                        // The check against billing rules is delayed to this point as it is an expensive operation
                        if (!ProjInvoiceTable::isBillingRuleInvoiceable(this.ProjId, this.CategoryId, this.psaContractLineNum, ProjTransType::Hour))
                        {
                            projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                        }
                    }
                    else if (!invoiced.RecId && !chargeable.RecId)
                    {
                        projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                    }
                }
                else
                {
                    projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
                }
            }
            else
            {
                // Transactions are not invoiceable for Fixed Price, Investment, Time, Cost projects
                projInvoiceStatus = ProjInvoiceStatus::Nonchargeable;
            }
        }

        return projInvoiceStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the project that the hours on this transaction were reported against.
    /// </summary>
    /// <returns>
    ///    The project that the hours on this transaction were reported against.
    /// </returns>
    public ProjTable projTable()
    {
        return ProjTable::find(this.ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a transaction is included in an invoice proposal.
    /// </summary>
    /// <returns>
    ///    true if the transaction is included in an invoice proposal; otherwise, false.
    /// </returns>
    display ProjProposal proposal()
    {
        return ProjTrans::newProjEmplTrans(this).proposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the ID of the invoice proposal for a transaction.
    /// </summary>
    /// <returns>
    ///    A <c>ProjProposalId</c> data type that indicates the ID of the invoice proposal for the transaction.
    /// </returns>
    display ProjProposalId proposalId()
    {
        return ProjTrans::newProjEmplTrans(this).proposalId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectCostAmount</Name>
				<Source><![CDATA[
    display PSAIndirectCost psaIndirectCostAmount()
    {
        ProjEmplTransCost   projEmplTransCost;
        ProjTrans           projTransCost;
        Amount              transCost;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            while select projEmplTransCost
                where projEmplTransCost.TransId == this.TransId
            {
                projTransCost = ProjTrans::newProjEmplTransCost(this, projEmplTransCost);
                transCost += CurrencyExchangeHelper::amount(projEmplTransCost.psaIndirectCost, projTransCost.currencyIdCost());
            }
        }

        return transCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectCostTotal</Name>
				<Source><![CDATA[
    display ProjTotalCostAmount psaIndirectCostTotal()
    {
        return this.TotalCostAmountCur+this.psaIndirectCostAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectSalesAmount</Name>
				<Source><![CDATA[
    display PSAIndirectSalesAmount psaIndirectSalesAmount()
    {
        ProjEmplTransSale   projEmplTransSale;
        ProjTrans           projTransSale;
        AmountCur           salesAmount;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            while select projEmplTransSale
                where projEmplTransSale.TransId == this.TransId &&
                    ((!projEmplTransSale.wipPeriod) ||
                    (projEmplTransSale.wipPeriod && projEmplTransSale.TransStatus != ProjTransStatus::Adjusted))
            {
                projTransSale = ProjTrans::newProjEmplTransSale(this, projEmplTransSale);
                salesAmount += CurrencyExchangeHelper::amount(projEmplTransSale.PSAIndirectRevenue, projTransSale.currencyIdSales());
            }
        }

        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaIndirectSalesTotal</Name>
				<Source><![CDATA[
    display ProjTotalSalesAmount psaIndirectSalesTotal()
    {
        return this.TotalSalesAmountCur+this.psaIndirectSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the sales ledger amount for a transaction.
    /// </summary>
    /// <param name="projEmplTrans">
    ///    The transaction for which to calculate the sales amount.
    /// </param>
    /// <param name="ledgerFromDate">
    ///    The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    The sales amount for the transaction.
    /// </returns>
    /// <remarks>
    ///    The sales ledger amount is the total revenue for the transaction including both invoiced and
    ///    accrued revenue as calculated by the <c>projStatement.A100_Total_Revenue</c> method.
    ///    The amount
    ///    returned is in the default currency.
    ///    Set <paramref name="ledgerFromDate" /> to the <c>dateNull</c>
    ///    method and <paramref name="ledgerToDate" /> to the <c>dateMax</c> method to include all postings
    ///    for the transaction.
    /// </remarks>
    SalesAmount salesAmount(
        ProjEmplTrans    projEmplTrans,
        TransDate        ledgerFromDate,
        TransDate        ledgerToDate)
    {
        return projStatement::newProjEmplTrans(projEmplTrans,ledgerFromDate,ledgerToDate).a100_Total_Revenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    display SalesPrice salesPrice()
    {
        AmountCur   transTurnover;
        ProjTrans   projTrans;
        ProjEmplTransSale  projEmplTransSale;
        SalesPrice         salesPrice;

        select count(RecId), sum(SalesPrice) from projEmplTransSale
            where projEmplTransSale.TransId == this.TransId;

        // Multiple funding sources exist
        if (projEmplTransSale.RecId > 1)
        {
            transTurnover = this.transTurnover();
            projTrans = ProjTrans::newProjEmplTrans(this);
            salesPrice = CurrencyExchangeHelper::price(transTurnover / (projTrans.qty() ? projTrans.qty() : 1), projTrans.currencyIdSales());
        }

        else
        {
            salesPrice = projEmplTransSale.SalesPrice;
        }
        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTimesheetIcon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the source of a transaction is a timesheet and retrieves the appropriate
    ///    timesheet icon number.
    /// </summary>
    /// <returns>
    ///    The <c>#RES_FLASHLIGHT</c> value if the transaction origin is a timesheet; otherwise, zero.
    /// </returns>
    /// <remarks>
    ///    If the transaction origin is a timesheet, clicking the icon will link to the timesheet form.
    /// </remarks>
    display TSTimesheetIconNum showTimesheetIcon()
    {
        #macrolib.resource

        if (this.TransactionOrigin == ProjOrigin::Timesheet)
        {
            return #RES_FLASHLIGHT;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the cost for this transaction.
    /// </summary>
    /// <returns>
    ///    A <c>ProjCost</c> data type that represents the cost of the transaction.
    /// </returns>
    /// <remarks>
    ///    The cost is calculated by multiplying the quantity with the cost price. The returned cost is in the
    ///    default currency.
    /// </remarks>
    display ProjCost transCost()
    {
        return ProjTrans::newProjEmplTrans(this).transCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_transID">
    /// Transaction ID for turnover amount.
    /// </param>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    protected ProjTurnover getTurnover(ProjEmplTransId _transID, boolean _isConsiderCredit = true)
    {
        ProjEmplTransSale   projEmplTransSale;
        ProjTrans           projTransSale;
        AmountCur           transTurnover;

        while select projEmplTransSale
            where projEmplTransSale.TransId == _transID &&
                  (!projEmplTransSale.wipPeriod || (projEmplTransSale.wipPeriod && projEmplTransSale.TransStatus != ProjTransStatus::Adjusted)) &&
                  (_isConsiderCredit            || (!_isConsiderCredit && projEmplTransSale.TransStatus != ProjTransStatus::MarkedCreditnote))
        {
            projTransSale = ProjTrans::newProjEmplTransSale(this, projEmplTransSale);
            transTurnover += CurrencyExchangeHelper::amount((projTransSale.qty() ? projTransSale.qty() : 1) * projTransSale.salesPrice(), projTransSale.currencyIdSales());
        }
        
        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the revenue for a transaction.
    /// </summary>
    /// <param name="_isConsiderCredit">
    /// Indicates whether credit note transactions are to be considered.
    /// </param>
    /// <returns>
    /// An <c>AmountCur</c> data type that represents the revenue for the transaction.
    /// </returns>
    /// <remarks>
    /// The revenue is calculated as quantity multiplied by the sales price. The revenue amount that is
    /// returned is in the currency of the transaction.
    /// </remarks>
    [SysClientCacheDataMethodAttribute(true)]
    display ProjTurnover transTurnover(boolean _isConsiderCredit = true)
    {
        return this.getTurnover(this.TransId, _isConsiderCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total sales amount for this transaction in company currency.
    /// </summary>
    /// <returns>
    ///    The total sales amount for this transaction.
    /// </returns>
    display ProjTurnover transTurnoverMST()
    {
        return ProjTrans::newProjEmplTrans(this).transTurnoverMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        #isoCountryRegionCodes

        super();

        ProjPostedTransTable::updateFromProjEmplTrans(this);

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            this.SysExtensionSerializerMap::postUpdate();
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        ProjValCheckTrans   projValCheckTrans   = new ProjValCheckTrans();
        boolean             ret;

        ret = super();

        if (ret)
        {
            ret  = projValCheckTrans.validateMandatory(this);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The voucher number that is associated with this transaction.
    /// </returns>
    display Voucher voucherInvoice()
    {
        return ProjTrans::newProjEmplTrans(this).voucherInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the Work in Progress (WIP) for a given project and period.
    /// </summary>
    /// <param name="projId">
    /// The project ID of the project for which to clear WIP.
    /// </param>
    /// <param name="projPeriodTo">
    /// The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    /// The transactions of type beginning balance.
    /// </param>
    public static void clearWIPPeriod(ProjId projId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjEmplTrans       projEmplTrans;
        ProjEmplTransCost   projEmplTransCost;
        ProjTable           projTable;

        update_recordset projEmplTransCost
        setting
            wipPeriod   = dateNull(),
            TransStatus = ProjTransStatus::Posted
        where projEmplTransCost.TransStatus == ProjTransStatus::Estimated
           && projEmplTransCost.wipPeriod   == projPeriodTo
        exists join projEmplTrans
            where projEmplTrans.TransId == projEmplTransCost.TransId
            && ((beginningBalance && projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!beginningBalance && projEmplTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        exists join projTable
            where projTable.wipProject == projId
               && projTable.ProjId     == projEmplTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearWIPPeriodContractLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the Work in Progress (WIP) for a given project and period
    ///    when WIPProject was created with ProjContractLineBasedRevenueRecognitionFeature on.
    /// </summary>
    /// <param name="projWIPId">
    ///    The project ID of the WIP project for which to clear the WIP.
    /// </param>
    /// <param name="projPeriodTo">
    ///    The end date of the period to clear.
    /// </param>
    /// <param name="beginningBalance">
    ///    The transactions of the starting balance type.
    /// </param>
    public static void clearWIPPeriodContractLine(ProjWIPId projWIPId, ProjPeriodTo projPeriodTo, ProjBeginningBalance beginningBalance)
    {
        ProjEmplTrans       projEmplTrans;
        ProjEmplTransCost   projEmplTransCost;
        ProjRevRecContractLine projRevRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(projWIPId).IsContractLineUsed;

        if(!isContractLineUsed || !contractLineBasedRevRecFeature)
        {
            throw error(strFmt("@SYS22828",funcName()));
        }

        update_recordset projEmplTransCost
        setting
            wipPeriod   = dateNull(),
            TransStatus = ProjTransStatus::Posted
        where projEmplTransCost.TransStatus == ProjTransStatus::Estimated
           && projEmplTransCost.wipPeriod   == projPeriodTo
        exists join projEmplTrans
            where projEmplTrans.TransId == projEmplTransCost.TransId
            && ((beginningBalance && projEmplTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
                              || (!beginningBalance && projEmplTrans.TransactionOrigin != ProjOrigin::BeginningBalance))
        exists join projRevRecContractLine
                where projRevRecContractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
            && projRevRecContractLine.RevenueRecognitionId == projWIPId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountDisplayCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cost amounts for multiple transactions and returns a map of the transaction IDs to
    ///    cost amounts in a container.
    /// </summary>
    /// <param name="_conProjEmplTrans">
    ///    A packed set of transaction IDs.
    /// </param>
    /// <param name="_conProjEmplTransSalesAmount">
    ///    A packed map of String to Real. It can be empty or can already contain elements.
    /// </param>
    /// <param name="_ledgerFromDate">
    ///    The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="_ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    A packed map of transaction IDs to cost amounts.
    /// </returns>
    /// <remarks>
    ///    The <c>ProjEmplTrans.costAmount</c> method is used to calculate the amounts.
    ///    If _<paramref
    ///    name="conProjEmplTrans" /> contains transaction IDs that are already in _<paramref
    ///    name="conProjEmplTransSalesAmount" />, the cost amount will be recalculated and updated in the
    ///    map.
    ///    Set _<paramref name="ledgerFromDate" /> to the <c>dateNull </c>method and _<paramref
    ///    name="ledgerToDate" /> to the <c>dateMax </c>method to include all postings for the transactions in
    ///    the cost calculation.
    /// </remarks>
    static container costAmountDisplayCache(
        container   _conProjEmplTrans,
        container   _conProjEmplTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjEmplTrans    projEmplTrans;
        Set              setProjEmplTrans;
        Map              mapProjEmplTransSalesAmount;
        SetIterator      si;

        if (_conProjEmplTrans)
        {
            setProjEmplTrans = Set::create(_conProjEmplTrans);
        }
        if (_conProjEmplTransSalesAmount)
        {
            mapProjEmplTransSalesAmount = Map::create(_conProjEmplTransSalesAmount);
        }
        si = new SetIterator(setProjEmplTrans);
        si.begin();
        while (si.more())
        {
            projEmplTrans = ProjEmplTrans::find(si.value());
            mapProjEmplTransSalesAmount.insert(si.value(), projEmplTrans.costAmount(projEmplTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapProjEmplTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a transaction exists.
    /// </summary>
    /// <param name="transId">
    ///    The transaction ID of the transaction.
    /// </param>
    /// <returns>
    ///    true if a transaction with the given transaction ID exists; otherwise, false.
    /// </returns>
    static boolean exist(ProjEmplTransId  transId)
    {
        return transId &&   (select projEmplTrans
                                where projEmplTrans.TransId  == transId
                             ).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the transaction with the given transaction ID.
    /// </summary>
    /// <param name="_transId">
    /// The transaction ID of the transaction.
    /// </param>
    /// <param name="_forUpdate">
    /// A Boolean value that determines whether the record will be selected for update; optional.
    /// </param>
    /// <returns>
    /// A <c>ProjEmplTrans</c> data type of the desired transaction.
    /// </returns>
    /// <remarks>
    /// Returns null if the transaction does not exist.
    /// </remarks>
    public static ProjEmplTrans find(ProjEmplTransId _transId, boolean _forUpdate = false)
    {
        ProjEmplTrans    projEmplTrans = null;

        projEmplTrans.selectForUpdate(_forUpdate);

        if (_transId)
        {
            select projEmplTrans where projEmplTrans.TransId == _transId;
        }

        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a record from its RecID>
    /// </summary>
    /// <param name="_recId">
    /// RecID of the desired record.
    /// </param>
    /// <param name="update">
    /// Whether the record will be updated or not.
    /// </param>
    /// <returns>
    /// The <c>ProjEmplTrans</c> record with the given RecID; empty record if none is found.
    /// </returns>
    static ProjEmplTrans findRecId(RecId _recId, boolean update = false)
    {
        ProjEmplTrans   projEmplTrans;
        ;
        projEmplTrans.selectForUpdate(update);

        select firstonly projEmplTrans
            where projEmplTrans.RecId == _recId;

        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>projStatement</c> object and initializes it from the hours that are recorded in a
    /// journal entry.
    /// </summary>
    /// <param name="_projJournalTrans">
    /// The journal entry from which to initialize the transaction.
    /// </param>
    /// <returns>
    /// The new transaction.
    /// </returns>
    public static ProjEmplTrans initTransFromJournal(ProjJournalTrans _projJournalTrans)
    {
        ProjEmplTrans  projEmplTrans;
        // <GIN>
        ProjEmplTransTaxExtensionIN     projEmplTransTaxExtensionIN;
        ProjJournalTransTaxExtensionIN  projJournalTransTaxExtensionIN;
        // </GIN>

        TSTimesheetTrans    tsTimesheetTrans;

        projEmplTrans.TransId               = _projJournalTrans.TransId;
        projEmplTrans.TransIdRef            = _projJournalTrans.TransId;
        projEmplTrans.ActivityNumber        = _projJournalTrans.ActivityNumber;

        projEmplTrans.Resource                = _projJournalTrans.Resource;
        projEmplTrans.ResourceCategory        = _projJournalTrans.ResourceCategory;

        projEmplTrans.CategoryId            = _projJournalTrans.CategoryId;
        projEmplTrans.CurrencyId            = _projJournalTrans.CurrencyId;
        projEmplTrans.DefaultDimension      = _projJournalTrans.DefaultDimension;
        projEmplTrans.ProjId                = _projJournalTrans.ProjId;
        projEmplTrans.Qty                   = _projJournalTrans.Qty;
        projEmplTrans.LinePropertyId        = _projJournalTrans.LinePropertyId;
        projEmplTrans.Txt                   = _projJournalTrans.Txt;
        projEmplTrans.TransDate             = _projJournalTrans.ProjTransDate;
        projEmplTrans.TaxGroupId            = _projJournalTrans.TaxGroupId;
        projEmplTrans.TaxItemGroupId        = _projJournalTrans.TaxItemGroupId;
        projEmplTrans.FromTime              = _projJournalTrans.FromTime;
        projEmplTrans.ToTime                = _projJournalTrans.ToTime;
       
        select tsTimesheetTrans where tsTimesheetTrans.TransId == _projJournalTrans.TransId;

        if (tsTimesheetTrans.RecId != 0)
        {
            projEmplTrans.TransactionOrigin = ProjOrigin::Timesheet;

            if (ResProjectResource::isUsingStartEndTime(_projJournalTrans.Resource))
            {
                projEmplTrans.FromTime = tsTimesheetTrans.TimeFrom;
                projEmplTrans.ToTime = tsTimesheetTrans.TimeTo;
            }
        }
        else
        {
            projEmplTrans.TransactionOrigin = ProjOrigin::HourJournal;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            // Init orig trans id
            projEmplTrans.psaProjOrigTransId    = _projJournalTrans.psaProjOrigTransId;

            // Init workcenter
            projEmplTrans.psaWrkCtrId = _projJournalTrans.psaWrkCtrId;

            // Init percent complete
            projEmplTrans.psaPercentCompl = _projJournalTrans.psaPercentCompl;

            // Indirect cost
            projEmplTrans.psaIndirectComponentGroup = _projJournalTrans.psaIndirectComponentGroup;

            //  Set contract line number when post journal
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                ProjEmplTrans::populatePSAContractLineNum(projEmplTrans);
            }
            else
            {
                projEmplTrans.psaContractLineNum = PSAContractLineItemsSetup::find(_projJournalTrans.ProjId, _projJournalTrans.CategoryId).ContractLineNum;
            }
        }

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN())
        {
            projJournalTransTaxExtensionIN  = ProjJournalTransTaxExtensionIN::findByProjJournalTrans(_projJournalTrans.RecId);
            projEmplTransTaxExtensionIN     = projEmplTrans.projEmplTransTaxExtensionIN();

            projEmplTransTaxExtensionIN.AssessableValueTransactionCurrency  = projJournalTransTaxExtensionIN.AssessableValueTransactionCurrency;
            projEmplTransTaxExtensionIN.MaximumRetailPrice                  = projJournalTransTaxExtensionIN.MaximumRetailPrice;
            projEmplTransTaxExtensionIN.ServiceEventGroup                   = projJournalTransTaxExtensionIN.ServiceEventGroup;
            projEmplTrans.packProjEmplTrans_IN(projEmplTransTaxExtensionIN);
        }
        // </GIN>

        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromRouteJournal</Name>
				<Source><![CDATA[
    public static ProjEmplTrans initTransFromRouteJournal(ProdRouteTrans        _prodRouteTrans,
                                                          ProdJournalRoute      _prodJournalRoute,
                                                          ProdJournalRouteProj  _prodJournalRouteProj,
                                                          ProjTransIdBase       _projTransId)
    {
        ProjEmplTrans       projEmplTrans;
        ProdRouteProj       prodRouteProj;

        projEmplTrans.TransId           = _projTransId;
        projEmplTrans.ActivityNumber    = _prodJournalRouteProj.ActivityNumber;

        projEmplTrans.Resource            = ResourceFacade::findOrCreateByWorker(_prodJournalRoute.Worker);

        projEmplTrans.CategoryId        = (_prodJournalRouteProj.TransType == ProdRouteTransType::Time ? _prodJournalRoute.CategoryHoursId : _prodJournalRoute.CategoryQtyId);
        projEmplTrans.CurrencyId        = _prodJournalRouteProj.ProjSalesCurrencyId;
        projEmplTrans.DefaultDimension  = _prodJournalRoute.DefaultDimension;
        projEmplTrans.ProjId            = _prodJournalRouteProj.ProjId;
        projEmplTrans.Qty               = (_prodJournalRouteProj.TransType == ProdRouteTransType::Time ? _prodJournalRoute.Hours : _prodJournalRoute.QtyGood + _prodJournalRoute.QtyError);
        projEmplTrans.LinePropertyId    = _prodJournalRouteProj.ProjLinePropertyId;
        projEmplTrans.Txt               = _prodJournalRouteProj.Txt;
        projEmplTrans.TransDate         = _prodJournalRoute.TransDate;
        projEmplTrans.TaxGroupId        = _prodJournalRouteProj.ProjTaxGroupId;
        projEmplTrans.TaxItemGroupId    = _prodJournalRouteProj.ProjTaxItemGroupId;

        prodRouteProj = ProdRouteProj::find(_prodJournalRoute.ProdId, _prodJournalRoute.OprNum, _prodRouteTrans.OprPriority, _prodJournalRouteProj.itemCalcType(_prodJournalRoute));
        if (prodRouteProj)
        {
            projEmplTrans.TransIdRef = prodRouteProj.ProjTransId;
        }
        else
        {
            projEmplTrans.TransIdRef = _projTransId;
        }

        projEmplTrans.TransactionOrigin = ProjOrigin::ProductionConsumed;

        ProjEmplTrans::populatePSAContractLineNum(projEmplTrans);

        return projEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePSAContractLineNum</Name>
				<Source><![CDATA[
    private static void populatePSAContractLineNum(ProjEmplTrans _projEmplTrans)
    {
        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ProjInvoiceProjId contractId = ProjTable::find(_projEmplTrans.ProjId).ProjInvoiceProjId;
            if (contractId)
            {
                _projEmplTrans.PSAContractLineNum = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineNumForTransType(_projEmplTrans.ProjId, contractId, ProjTransType::Hour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPTransOpenAfterDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check if there are any transactions not included in WIP after the given date.
    /// </summary>
    /// <param name = "_projWipId">Rev rec project ID.</param>
    /// <param name = "_date">Transaction date.</param>
    /// <param name = "_infoMsgType">Level of info message.</param>
    /// <returns>true if there are transactions after the given date; otherwise false.</returns>
    public static boolean isWIPTransOpenAfterDate(ProjWipId _projWipId, TransDate _date, ProjMsgLevel _infoMsgType = ProjMsgLevel::None)
    {
        ProjEmplTrans projEmplTrans;
        ProjEmplTransCost projEmplTransCost;
        ProjTable projTable;
        boolean ret = false;
        ProjRevRecContractLine  revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(_projWipId).IsContractLineUsed;

        
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
              
                PSAContractLineItems contractLine;

                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
            where projEmplTrans.TransDate > _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            exists join contractLine
                where contractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                    && contractLine.IncludeHourTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                {
                    ProjEmplTrans::addWIPOpenAfterDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
                where projEmplTrans.TransDate > _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                {
                    ProjEmplTrans::addWIPOpenAfterDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
        }
        else
        {

            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;

                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
            where projEmplTrans.TransDate > _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projEmplTrans.ProjId
                    && projTable.wipProject == _projWipId
            exists join contractLine
                where contractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                    && contractLine.IncludeHourTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
                {
                    ProjEmplTrans::addWIPOpenAfterDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
                where projEmplTrans.TransDate > _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            exists join RecId from projTable
                where projTable.ProjId == projEmplTrans.ProjId
                    && projTable.wipProject == _projWipId
                {
                    ProjEmplTrans::addWIPOpenAfterDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
        }
        

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPTransOpenBeforeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to check if there are any transactions not included in WIP before the given date.
    /// </summary>
    /// <param name = "_projWipId">Rev rec project ID.</param>
    /// <param name = "_date">Transaction date.</param>
    /// <param name = "_infoMsgType">Level of info message.</param>
    /// <returns>true if there are transactions before the given date; otherwise false.</returns>
    public static boolean isWIPTransOpenBeforeDate(ProjWipId _projWipId, TransDate _date, ProjMsgLevel _infoMsgType = ProjMsgLevel::None)
    {
        ProjEmplTrans projEmplTrans;
        ProjEmplTransCost projEmplTransCost;
        ProjTable projTable;
        boolean ret = false;
        ProjRevRecContractLine  revRecContractLine;
        boolean contractLineBasedRevRecFeature = ProjContractLineBasedRevenueRecognitionFeatureHelper::isFeatureEnabled();
        boolean isContractLineUsed = ProjWIPTable::find(_projWipId).IsContractLineUsed;

        
        if(isContractLineUsed && contractLineBasedRevRecFeature)
        {
            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;
                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
                where projEmplTrans.TransDate <= _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            exists join contractLine
                where contractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                    && contractLine.IncludeHourTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
             exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projEmplTrans.PSAContractLineNum

                {
                    ProjEmplTrans::addWIPOpenBeforeDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
            where projEmplTrans.TransDate <= _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
             exists join revRecContractLine
                    where revRecContractLine.RevenueRecognitionId == _projWipId
                    && revRecContractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                {
                    ProjEmplTrans::addWIPOpenBeforeDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
        }
        else
        {

            if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
            {
                PSAContractLineItems contractLine;
                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
                where projEmplTrans.TransDate <= _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            join RecId from projTable
                where projTable.ProjId == projEmplTrans.ProjId
                    && projTable.wipProject == _projWipId
            exists join contractLine
                where contractLine.ContractLineNum == projEmplTrans.PSAContractLineNum
                    && contractLine.IncludeHourTrans == NoYes::Yes
                    && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice
                {
                    ProjEmplTrans::addWIPOpenBeforeDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
            else
            {
                while select ProjId, VoucherJournal, TransDate, TransId from projEmplTrans
            where projEmplTrans.TransDate <= _date
            exists join projEmplTransCost
                where projEmplTransCost.TransId == projEmplTrans.TransId
                    && projEmplTransCost.wipPeriod == dateNull()
                    && projEmplTransCost.TransStatus == ProjTransStatus::Posted
            join RecId from projTable
                where projTable.ProjId == projEmplTrans.ProjId
                    && projTable.wipProject == _projWipId
                {
                    ProjEmplTrans::addWIPOpenBeforeDateTransMessage(projEmplTrans, _infoMsgType);
                    ret = true;
                }
            }
        }
        
         
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPOpenBeforeDateTransMessage</Name>
				<Source><![CDATA[
    private static void addWIPOpenBeforeDateTransMessage(ProjEmplTrans _projEmplTrans, ProjMsgLevel _infoMsgType)
    {
        switch (_infoMsgType)
        {
            case ProjMsgLevel::Info :
                info(strFmt("@SYS70636", tableId2pname(tableNum(ProjEmplTrans)), _projEmplTrans.ProjId, _projEmplTrans.VoucherJournal, date2StrUsr(_projEmplTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Warning :
                warning(strFmt("@SYS70636", tableId2pname(tableNum(ProjEmplTrans)), _projEmplTrans.ProjId, _projEmplTrans.VoucherJournal, date2StrUsr(_projEmplTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Error :
                error(strFmt("@SYS70636", tableId2pname(tableNum(ProjEmplTrans)), _projEmplTrans.ProjId, _projEmplTrans.VoucherJournal, date2StrUsr(_projEmplTrans.TransDate, DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPOpenAfterDateTransMessage</Name>
				<Source><![CDATA[
    private static void addWIPOpenAfterDateTransMessage(ProjEmplTrans _projEmplTrans, ProjMsgLevel _infoMsgType)
    {
        switch (_infoMsgType)
        {
            case ProjMsgLevel::Info :
                info(strFmt("@SYS70636", tableId2pname(tableNum(ProjEmplTrans)), _projEmplTrans.ProjId, _projEmplTrans.VoucherJournal, date2StrUsr(_projEmplTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Warning :
                warning(strFmt("@SYS70636", tableId2pname(tableNum(ProjEmplTrans)), _projEmplTrans.ProjId, _projEmplTrans.VoucherJournal, date2StrUsr(_projEmplTrans.TransDate, DateFlags::FormatAll)));
                break;

            case ProjMsgLevel::Error :
                error(strFmt("@SYS70636", tableId2pname(tableNum(ProjEmplTrans)), _projEmplTrans.ProjId, _projEmplTrans.VoucherJournal, date2StrUsr(_projEmplTrans.TransDate, DateFlags::FormatAll)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>jumpRefTransId</Name>
				<Source><![CDATA[
    static void jumpRefTransId(
        Common  common,
        Object  object,
        str     parm = '')
    {
        Args args = new Args();
        args.record(common);
        args.caller(object);
        args.parm(parm);
        args.lookupField(fieldNum(ProjJournalTrans, TransId));

        new MenuFunction(menuitemDisplayStr(ProjTransEmpl), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>realisedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number of hours that are reported for a given project and activity.
    /// </summary>
    /// <param name="_projId">
    /// The project ID of the project.
    /// </param>
    /// <param name="_activityNumber">
    /// The activity ID of the activity.
    /// </param>
    /// <returns>
    /// A <c>ProjQtyEmpl</c> data type of the total number of hours reported for the given activity on the
    /// given project.
    /// </returns>
    public static ProjQtyEmpl realisedHours(ProjId _projId, ProjActivityNumber _activityNumber)
    {
        return (select sum(Qty) from projEmplTrans
                    where projEmplTrans.ProjId     == _projId &&
                          projEmplTrans.ActivityNumber == _activityNumber).Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountDisplayCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the sales amounts for multiple transactions and returns a map of the transaction IDs to
    ///    sales amounts in a container.
    /// </summary>
    /// <param name="_conProjEmplTrans">
    ///    A packed set of transaction IDs.
    /// </param>
    /// <param name="_conProjEmplTransSalesAmount">
    ///    A packed map of String to Real. It can be empty or can already contain elements.
    /// </param>
    /// <param name="_ledgerFromDate">
    ///    The begin date of ledger postings to include in the calculation.
    /// </param>
    /// <param name="_ledgerToDate">
    ///    The end date of ledger postings to include in the calculation.
    /// </param>
    /// <returns>
    ///    A packed map of transaction IDs to sales amounts.
    /// </returns>
    /// <remarks>
    ///    The <c>ProjEmplTrans.salesAmount</c> method is used to calculate the amounts.
    ///    If <paramref
    ///    name="_conProjEmplTrans" /> contains transaction IDs that are already in <paramref
    ///    name="_conProjEmplTransSalesAmount" />, the sales amount will be recalculated and updated in the
    ///    map.
    ///    Set <paramref name="ledgerFromDate" /> with the <c>dateNull</c> method and <paramref
    ///    name="ledgerToDate" /> with the <c>dateMax</c> method to include all postings for the transactions
    ///    in the sales calculation.
    /// </remarks>
    static container salesAmountDisplayCache(
        container   _conProjEmplTrans,
        container   _conProjEmplTransSalesAmount,
        TransDate   _ledgerFromDate,
        TransDate   _ledgerToDate)
    {
        ProjEmplTrans    projEmplTrans;
        Set              setProjEmplTrans;
        Map              mapProjEmplTransSalesAmount;
        SetIterator      si;

        if (_conProjEmplTrans)
        {
            setProjEmplTrans = Set::create(_conProjEmplTrans);
        }
        if (_conProjEmplTransSalesAmount)
        {
            mapProjEmplTransSalesAmount = Map::create(_conProjEmplTransSalesAmount);
        }

        si = new SetIterator(setProjEmplTrans);
        si.begin();
        while (si.more())
        {
            projEmplTrans = ProjEmplTrans::find(si.value());
            mapProjEmplTransSalesAmount.insert(si.value(), projEmplTrans.salesAmount(projEmplTrans,_ledgerFromDate,_ledgerToDate));
            si.next();
        }

        return mapProjEmplTransSalesAmount.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxEngineProjEmplTransHeader</c> object.
    /// </summary>
    /// <returns>
    /// The <c>TaxEngineProjEmplTransHeader</c> object.
    /// </returns>
    public TaxEngineProjEmplTransHeader salesPurchJournalTable()
    {
        ProjProposalJour projProposalJour;
        ProjProposalEmpl projProposalEmpl;

        select firstOnly RecId from projProposalJour
            join RecId from projProposalEmpl
                where projProposalEmpl.ProposalId == projProposalJour.ProposalId
                    && projProposalEmpl.TransId == this.TransId;

        return TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(projProposalJour);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
	<ConfigurationKey>Project</ConfigurationKey>
	<DeveloperDocumentation>@SYS124894</DeveloperDocumentation>
	<FormRef>ProjTransEmpl</FormRef>
	<Label>@SYS1151</Label>
	<TableGroup>Transaction</TableGroup>
	<TitleField1>ProjId</TitleField1>
	<TitleField2>TransDate</TitleField2>
	<AllowRowVersionChangeTracking>Yes</AllowRowVersionChangeTracking>
	<CacheLookup>NotInTTS</CacheLookup>
	<ClusteredIndex>projDateIdx</ClusteredIndex>
	<CreatedBy>Yes</CreatedBy>
	<CreatedDateTime>Yes</CreatedDateTime>
	<DisableLockEscalation>Yes</DisableLockEscalation>
	<ModifiedBy>Yes</ModifiedBy>
	<ModifiedDateTime>Yes</ModifiedDateTime>
	<Modules>ProjectManagementAndAccounting</Modules>
	<PrimaryIndex>TransIdx</PrimaryIndex>
	<ReplacementKey>TransIdx</ReplacementKey>
	<DeleteActions>
		<AxTableDeleteAction>
			<Name>DocuRef</Name>
			<DeleteAction>Cascade</DeleteAction>
			<Relation></Relation>
			<Table>DocuRef</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjInvoiceEmpl</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjInvoiceEmpl</Table>
		</AxTableDeleteAction>
		<AxTableDeleteAction>
			<Name>ProjProposalEmpl</Name>
			<DeleteAction>Restricted</DeleteAction>
			<Relation></Relation>
			<Table>ProjProposalEmpl</Table>
		</AxTableDeleteAction>
	</DeleteActions>
	<FieldGroups>
		<AxTableFieldGroup>
			<Name>AutoSummary</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoBrowse</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoReport</Name>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Worker</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalCostAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>voucherInvoice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>transTurnoverMST</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoLookup</Name>
			<Fields />
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>AutoIdentification</Name>
			<AutoPopulate>Yes</AutoPopulate>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>ComponentGroups</Name>
			<Label>@PSA2409</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAIndirectComponentGroup</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>CostPrice</Name>
			<Label>@SYS13134</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>Qty</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>costPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalCostAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>psaIndirectCostAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>psaIndirectCostTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Dimension</Name>
			<Label>@SYS14926</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>DefaultDimension</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Identification</Name>
			<Label>@SYS5711</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransDate</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ProjId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ActivityNumber</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>CategoryId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>LinePropertyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Resource</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ResourceCategory</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Invoice</Name>
			<Label>@SYS14204</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>proposalId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>invoiceId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>PSA</Name>
			<Label>@PSA43</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>PSAWrkCtrId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAPercentCompl</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAProjOrigTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>PSAContractLineNum</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesPrice</Name>
			<Label>@SYS5755</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>CurrencyId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>salesPrice</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ledgerSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TotalSalesAmountCur</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>psaIndirectSalesAmount</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>psaIndirectSalesTotal</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>SalesTax</Name>
			<Label>@SYS67871</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TaxGroupId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TaxItemGroupId</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>TimeSheet</Name>
			<Label>@SYS15311</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>FromTime</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>ToTime</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
		<AxTableFieldGroup>
			<Name>Transaction</Name>
			<Label>@SYS15191</Label>
			<Fields>
				<AxTableFieldGroupField>
					<DataField>TransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransIdRef</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>AdjRefTransId</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>VoucherJournal</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>Txt</DataField>
				</AxTableFieldGroupField>
				<AxTableFieldGroupField>
					<DataField>TransactionOrigin</DataField>
				</AxTableFieldGroupField>
			</Fields>
		</AxTableFieldGroup>
	</FieldGroups>
	<Fields>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjEmplTransId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ActivityNumber</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjActivityNumber</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>AdjRefTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>ProjEmplTransId</ExtendedDataType>
			<Label>@SYS115827</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CategoryId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjCategoryId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>CurrencyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSalesCurrencyCode</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>DefaultDimension</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerDimensionValueSet</ExtendedDataType>
			<SysSharingType>Never</SysSharingType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>FromTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjFromTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>IsCorrection</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>LedgerCorrection</ExtendedDataType>
			<Visible>No</Visible>
			<EnumType>NoYes</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>LinePropertyId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjLinePropertyId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldContainer">
			<Name>PackedExtensions</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>SysExtensionSerializerPackedContainer</ExtendedDataType>
			<SaveContents>No</SaveContents>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>ProjId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjId</ExtendedDataType>
			<Mandatory>Yes</Mandatory>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAContractLineNum</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAContractLineNum</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAIndirectComponentGroup</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAIndirectComponentGroupId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>PSAPercentCompl</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Percent</ExtendedDataType>
			<Label>@PSA243</Label>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAProjOrigTransId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>PSAProjOrigTransId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>PSAWrkCtrId</Name>
			<AssetClassification>Customer Content </AssetClassification>
			<ExtendedDataType>PSAWrkCtrId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>Qty</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjQtyEmpl</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Resource</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceCategory</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>ResourceCategoryRecId</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>ResourceLegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<IsObsolete>Yes</IsObsolete>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TaxItemGroupId</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTaxItemGroup</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalCostAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalCostAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldReal">
			<Name>TotalSalesAmountCur</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTotalSalesAmount</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldTime">
			<Name>ToTime</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjToTime</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldEnum">
			<Name>TransactionOrigin</Name>
			<AllowEdit>No</AllowEdit>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionOrigin</ExtendedDataType>
			<EnumType>ProjOrigin</EnumType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldDate">
			<Name>TransDate</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransDate</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransIdRef</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjEmplTransId</ExtendedDataType>
			<Label>@SYS71999</Label>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>Txt</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>Description255</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>VoucherJournal</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjTransactionVoucher</ExtendedDataType>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>Worker</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>ProjWorkerRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>WorkerLegalEntity</Name>
			<AssetClassification>System Metadata</AssetClassification>
			<ConfigurationKey>SysDeletedObjects72</ConfigurationKey>
			<ExtendedDataType>CompanyInfoRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldInt64">
			<Name>VendInvoiceTrans</Name>
			<AllowEdit>No</AllowEdit>
			<AllowEditOnCreate>No</AllowEditOnCreate>
			<AssetClassification>System Metadata</AssetClassification>
			<ExtendedDataType>RefRecId</ExtendedDataType>
			<Visible>No</Visible>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>SubcontractLine</Name>
			<AssetClassification>Customer Content</AssetClassification>
			<ExtendedDataType>ProjSubcontractLine</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsSubcontractLineIntegrationToggle</FeatureClass>
		</AxTableField>
		<AxTableField xmlns=""
			i:type="AxTableFieldString">
			<Name>TransactionGroupId</Name>
			<ExtendedDataType>ProjTransactionGroupId</ExtendedDataType>
			<FeatureClass>ProjProjectOperationsIntegrationToggle</FeatureClass>
		</AxTableField>
	</Fields>
	<FullTextIndexes />
	<Indexes>
		<AxTableIndex>
			<Name>TransIdx</Name>
			<AllowPageLocks>No</AllowPageLocks>
			<AlternateKey>Yes</AlternateKey>
			<Fields>
				<AxTableIndexField>
					<DataField>TransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>EmplDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>Resource</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>projDateIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ProjId</DataField>
				</AxTableIndexField>
				<AxTableIndexField>
					<DataField>TransDate</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>AdjRefTransIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>AdjRefTransId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VendInvoiceTrans</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VendInvoiceTrans</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>ActivityNumber</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>ActivityNumber</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransIdRef</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>TransIdRef</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>TransactionGroupIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<Fields>
				<AxTableIndexField>
					<DataField>TransactionGroupId</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
		<AxTableIndex>
			<Name>VoucherJournalIdx</Name>
			<AllowDuplicates>Yes</AllowDuplicates>
			<AllowPageLocks>No</AllowPageLocks>
			<Fields>
				<AxTableIndexField>
					<DataField>VoucherJournal</DataField>
				</AxTableIndexField>
			</Fields>
		</AxTableIndex>
	</Indexes>
	<Mappings>
		<AxTableMapping>
			<MappingTable>ProjProposalTransMap_BR</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjCategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ServiceCodeId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransTxt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>PSAProjTrans</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>ActivityNumber</MapField>
					<MapFieldTo>ActivityNumber</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Amount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
					<MapFieldTo>CategoryId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyId</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DefaultDimension</MapField>
					<MapFieldTo>DefaultDimension</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsReleased</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IsRetained</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LinePropertyId</MapField>
					<MapFieldTo>LinePropertyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ProjId</MapField>
					<MapFieldTo>ProjId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Qty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Resource</MapField>
					<MapFieldTo>Resource</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPrice</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesQty</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroupId</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroupId</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransactionOrigin</MapField>
					<MapFieldTo>TransactionOrigin</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
					<MapFieldTo>TransDate</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransStatus</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>Txt</MapField>
					<MapFieldTo>Txt</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>WrkCtrId</MapField>
					<MapFieldTo>PSAWrkCtrId</MapFieldTo>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SysExtensionSerializerMap</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>PackedExtensions</MapField>
					<MapFieldTo>PackedExtensions</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>PackedPrioritizedIdList</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
		<AxTableMapping>
			<MappingTable>SalesPurchJournalLine</MappingTable>
			<Connections>
				<AxTableMappingConnection>
					<MapField>CategoryId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>CurrencyCode</MapField>
					<MapFieldTo>CurrencyId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryLocation</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>DeliveryState</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>IntrastatCommodity</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventDimId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>InventTransId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>ItemId</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineAmount</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>LineNum</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchQty</MapField>
					<MapFieldTo>Qty</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SalesPurchUnit</MapField>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceId</MapField>
					<MapFieldTo>TransId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceRecId</MapField>
					<MapFieldTo>RecId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>SourceTableId</MapField>
					<MapFieldTo>TableId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxGroup</MapField>
					<MapFieldTo>TaxGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TaxItemGroup</MapField>
					<MapFieldTo>TaxItemGroupId</MapFieldTo>
				</AxTableMappingConnection>
				<AxTableMappingConnection>
					<MapField>TransDate</MapField>
				</AxTableMappingConnection>
			</Connections>
		</AxTableMapping>
	</Mappings>
	<Relations>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>Currency</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>Currency</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CurrencyId</Name>
					<SourceEDT>ProjSalesCurrencyCode</SourceEDT>
					<Field>CurrencyId</Field>
					<RelatedField>CurrencyCode</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CurrencyCodeIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>DefaultDimension</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>DimensionAttributeValueSet</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>DimensionAttributeValueSet</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>DimensionAttributeValueSet_ProjEmplTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>DefaultDimension</Name>
					<Field>DefaultDimension</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>LegalEntity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>CompanyInfo</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>CompanyInfo</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>WorkerLegalEntity</Name>
					<Field>WorkerLegalEntity</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>RecId</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>projActivity</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EntityRelationshipRole>@SYS124895</EntityRelationshipRole>
			<RelatedTable>ProjActivity</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjActivity</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjActivity_ProjEmplTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjCategory</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>CategoryId</Name>
					<SourceEDT>ProjCategoryId</SourceEDT>
					<Field>CategoryId</Field>
					<RelatedField>CategoryId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>CategoryIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTrans_AdjRefTransId</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjEmplTrans_AdjRefTransId</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>AdjRefTransId</Name>
					<SourceEDT>ProjEmplTransId</SourceEDT>
					<Field>AdjRefTransId</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjEmplTrans_TransIdRef</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjEmplTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>ProjEmplTrans_TransIdRef</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TransIdRef</Name>
					<SourceEDT>ProjEmplTransId</SourceEDT>
					<Field>TransIdRef</Field>
					<RelatedField>TransId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TransIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjLineProperty</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjLineProperty</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Aggregation</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>LinePropertyId</Name>
					<SourceEDT>ProjLinePropertyId</SourceEDT>
					<Field>LinePropertyId</Field>
					<RelatedField>LinePropertyId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>StatusIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>ProjTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>ProjTable</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelatedTableRole>ProjTable_1</RelatedTableRole>
			<RelationshipType>Aggregation</RelationshipType>
			<Role>ProjEmplTrans</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ProjId</Name>
					<SourceEDT>ProjId</SourceEDT>
					<Field>ProjId</Field>
					<RelatedField>ProjId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ProjectIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>PSAContractLineItems</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>PSAContractLineItems</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAContractLineNum</Name>
					<SourceEDT>PSAContractLineNum</SourceEDT>
					<Field>PSAContractLineNum</Field>
					<RelatedField>ContractLineNum</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ContractLineNumIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>PSAIndirectComponentGroupCost</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>PSAIndirectComponentGroup</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>MayOccurIn</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>Has</Role>
			<UseDefaultRoleNames>No</UseDefaultRoleNames>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAIndirectComponentGroup</Name>
					<Field>PSAIndirectComponentGroup</Field>
					<RelatedField>ComponentGroupId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>Resource</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceCategory</Name>
			<Cardinality>ZeroMore</Cardinality>
			<RelatedTable>ResourceCategoryView</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ResourceCategory</Name>
					<Field>ResourceCategory</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>smmActivities</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>smmActivities</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>ActivityNumber</Name>
					<SourceEDT>ProjActivityNumber</SourceEDT>
					<Field>ActivityNumber</Field>
					<RelatedField>ActivityNumber</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>ActivityNumberIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxGroupId</Name>
					<SourceEDT>ProjTaxGroup</SourceEDT>
					<Field>TaxGroupId</Field>
					<RelatedField>TaxGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation xmlns=""
			i:type="AxTableRelationForeignKey">
			<Name>TaxItemGroupHeading</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>TaxItemGroupHeading</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TaxItemGroupId</Name>
					<SourceEDT>ProjTaxItemGroup</SourceEDT>
					<Field>TaxItemGroupId</Field>
					<RelatedField>TaxItemGroup</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
			<Index>TaxItemGroupIdx</Index>
		</AxTableRelation>
		<AxTableRelation>
			<Name>TaxServiceTariff</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>TaxServiceTariff</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>TaxServiceTariff</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTrans</Role>
			<Validate>No</Validate>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>RecId</Name>
					<Field>RecId</Field>
					<RelatedField>ParentRecId</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>TableId</Name>
					<Field>TableId</Field>
					<RelatedField>ParentTableId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>WrkCtrTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<EDTRelation>Yes</EDTRelation>
			<RelatedTable>WrkCtrTable</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelatedTableRole>WrkCtrTable</RelatedTableRole>
			<RelationshipType>Association</RelationshipType>
			<Role>ProjEmplTrans</Role>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintRelatedFixed">
					<Name>IsIndividualResource_Extern</Name>
					<SourceEDT>PSAWrkCtrId</SourceEDT>
					<RelatedField>IsIndividualResource</RelatedField>
				</AxTableRelationConstraint>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>PSAWrkCtrId</Name>
					<SourceEDT>PSAWrkCtrId</SourceEDT>
					<Field>PSAWrkCtrId</Field>
					<RelatedField>WrkCtrId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>ResourceTable</Name>
			<Cardinality>ZeroMore</Cardinality>
			<OnDelete>Restricted</OnDelete>
			<RelatedTable>ResResourceIdentifier</RelatedTable>
			<RelatedTableCardinality>ExactlyOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>Resource</Name>
					<Field>Resource</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
		<AxTableRelation>
			<Name>VendInvoiceTrans</Name>
			<Cardinality>ZeroOne</Cardinality>
			<RelatedTable>VendInvoiceTrans</RelatedTable>
			<RelatedTableCardinality>ZeroOne</RelatedTableCardinality>
			<RelationshipType>Association</RelationshipType>
			<Constraints>
				<AxTableRelationConstraint xmlns=""
					i:type="AxTableRelationConstraintField">
					<Name>VendInvoiceTrans</Name>
					<Field>VendInvoiceTrans</Field>
					<RelatedField>RecId</RelatedField>
				</AxTableRelationConstraint>
			</Constraints>
		</AxTableRelation>
	</Relations>
	<StateMachines />
</AxTable>