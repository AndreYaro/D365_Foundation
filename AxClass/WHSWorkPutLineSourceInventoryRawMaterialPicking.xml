<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkPutLineSourceInventoryRawMaterialPicking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkPutLineSourceInventoryRawMaterialPicking</c> class extends the <c>WHSWorkPutLineSourceInventoryPicking</c>
/// class and provides functionality specific to raw material picking.
/// </summary>
[WHSWorkPutLineSourceInventoryPickingAttribute(WHSWorkTransType::KanbanPick)]
[WHSWorkPutLineSourceInventoryPickingAttribute(WHSWorkTransType::ProdPick)]
internal class WHSWorkPutLineSourceInventoryRawMaterialPicking extends WHSWorkPutLineSourceInventoryPicking
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pickInventoryQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void pickInventoryQuantities(WHSWorkPutLineSourceInventoryPickingParameters _parameters)
    {
        if (!this.canUpdateInventoryTransactions())
        {
            return;
        }

        InventTransRefId inventTransRefId;
        if (work.WorkTransType == WHSWorkTransType::ProdPick)
        {
            inventTransRefId = InventTransOrigin::findByInventTransId(_parameters.inventTransIdParent).ReferenceId;
        }

        if (work.WorkTransType != WHSWorkTransType::ProdPick || inventTransRefId)
        {
            InventTrans inventTransWorkTransType;
            InventTransOrigin inventTransOriginWorkTransType;

            select sum(Qty), sum(PdsCWQty) from inventTransWorkTransType
                where (inventTransWorkTransType.StatusIssue == StatusIssue::OnOrder
                    ||  inventTransWorkTransType.StatusIssue == StatusIssue::ReservOrdered
                    ||  inventTransWorkTransType.StatusIssue == StatusIssue::ReservPhysical)
                exists join inventTransOriginWorkTransType
                where inventTransOriginWorkTransType.RecId == inventTransWorkTransType.InventTransOrigin
                    && inventTransOriginWorkTransType.InventTransId == _parameters.inventTransIdParent;
                        
            if (inventTransWorkTransType.PdsCWQty || inventTransWorkTransType.Qty)
            {
                Qty qtyToPick;
                InventQty weightToPick;
                boolean isCW;

                [qtyToPick, weightToPick, isCW] = this.calculateQuantityToPick(_parameters, inventTransWorkTransType);

                this.updateInventoryTransactions(_parameters, qtyToPick, weightToPick, isCW);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQuantityToPick</Name>
				<Source><![CDATA[
    private container calculateQuantityToPick(WHSWorkPutLineSourceInventoryPickingParameters _parameters, InventTrans _inventTransWorkTransType)
    {
        Qty qtyToPick;
        InventQty weightToPick;
        boolean isCW;

        if (PdsGlobal::pdsIsCWItem(_parameters.itemId))
        {
            // inventTransWorkTransType is an issue transaction and inventTrans is a receipt so we compare by flipping the sign on inventTransWorkTransType
            if (-_inventTransWorkTransType.PdsCWQty < _parameters.pdsCWQty)
            {
                qtyToPick = -_inventTransWorkTransType.PdsCWQty;
                weightToPick = WHSCatchWeightHelper::calculateAverageWeight(qtyToPick, _parameters.pdsCWQty, _parameters.qty, InventTable::inventDecimals(_parameters.itemId));
            }
            else
            {
                qtyToPick = _parameters.pdsCWQty;
                weightToPick = _parameters.qty;
            }

            isCW = true;
        }
        else
        {
            qtyToPick = min(_parameters.qty, -_inventTransWorkTransType.Qty);
            weightToPick = 0;
            isCW = false;
        }

        return [qtyToPick, weightToPick, isCW];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryTransactions</Name>
				<Source><![CDATA[
    private void updateInventoryTransactions(
        WHSWorkPutLineSourceInventoryPickingParameters _parameters,
        InventHandlingQty _qtyToPick,
        WHSHandlingWeight _weightToPick,
        boolean _isCW)
    {
        InventDim inventDimFrom = InventDim::find(_parameters.inventDimId);
        inventDimFrom.clearLocationAndBelowDim(_parameters.itemId);
        inventDimFrom = InventDim::findOrCreate(inventDimFrom);

        if (work.WorkTransType == WHSWorkTransType::ProdPick
                                    && ProdJournalBOM::hasOpenReservedRecord(_parameters.inventTransIdParent, inventDimFrom.inventDimId))
        {
            WHSPoolProdBOM::updateWithPickListTransactionsHandlingQty(_parameters.inventTransIdParent,
                                                                        _parameters.itemId,
                                                                        InventDim::find(_parameters.inventDimId),
                                                                        _qtyToPick,
                                                                        _weightToPick,
                                                                        WHSRawMaterialPolicy::Pick);
        }
        else
        {
            using (var context = WhsInventPickingContext::newSkipPickIdAllocation())
            {
                WHSInvent::pickQuantities(WHSInvent::getCommonFromWorkTransType(work.WorkTransType, _parameters.inventTransIdParent, true),
                                                                _parameters.inventDimId,
                                                                _isCW ? _weightToPick: _qtyToPick,
                                                                _isCW ? _qtyToPick : _weightToPick,
                                                                _parameters.inventDimParmAboveLocation,
                                                                UnknownNoYes::Unknown,
                                                                true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>