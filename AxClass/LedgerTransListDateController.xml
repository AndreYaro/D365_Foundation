<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransListDateController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransListDateController</c> class is the controller class for the
/// <c>LedgerTransListDate</c> report.
/// </summary>
public class LedgerTransListDateController extends SrsReportRunController implements BatchRetryable
{
    private date userPreferredCurrentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the default parameter values before the user is prompted for input.
    /// </summary>
    protected void prePromptModifyContract()
    {
        LedgerTransListDateContract ledgerTransListDateContract = this.parmReportContract().parmRdpContract() as LedgerTransListDateContract;

        if (!ledgerTransListDateContract.parmFromDate())
        {
            // Provide a default date because the last value is empty.
            ledgerTransListDateContract.parmFromDate(this.getPrePromptFromDateValue());
        }

        if (!ledgerTransListDateContract.parmToDate())
        {
            // Provide a default date because the last value is empty.
            ledgerTransListDateContract.parmToDate(this.getPrePromptToDateValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrePromptFromDateValue</Name>
				<Source><![CDATA[
    private TransDate getPrePromptFromDateValue()
    {
        // Get the default value for the From date to the first day of the current fiscal period.
        return FiscalCalendars::findFirstDayOfMonth(Ledger::fiscalCalendar(), userPreferredCurrentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrePromptToDateValue</Name>
				<Source><![CDATA[
    private TransDate getPrePromptToDateValue()
    {
        // Get the default value for the To date to the last day of the current fiscal period.
        return FiscalCalendars::findLastDayOfMonth(Ledger::fiscalCalendar(), userPreferredCurrentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the report contract before it runs the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        LedgerTransListDateContract contract;

        contract = this.parmReportContract().parmRdpContract() as LedgerTransListDateContract;

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            contract.parmSysVersion(SysReportRun::sysVersion());
            contract.parmUserName(SysReportRun::userName());
            contract.parmDisplayDescription(true);
        }
        else
        {
            contract.parmDisplayDescription(false);
        }
        // </GEEPL>

        // if we are printing the tax information and InterCompany is enabled , we need to display the Company for ledger accounts on the report
        contract.parmDisplayCompanyForLedgerAccount(contract.parmTaxSpecification() && isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunValidate</Name>
				<Source><![CDATA[
    protected container preRunValidate()
    {
        // There was logic here to warn if too many records were selected. That's not applicable anymore.
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerTransListDateController controller = new LedgerTransListDateController();

        controller.parmReportName(ssrsReportStr(LedgerTransListDate, Report));
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>