<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GiroReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GiroReportController</c> class is the controller class for one of the <c>GiroReport</c>
///    reports.
/// </summary>
class GiroReportController extends SrsPrintMgmtController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes

        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes(
                    [ [#isoNO, GlobalizationConstants::FeatureReferenceNO00007] ],
                    funcName()
                );
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
        protected SRSCatalogItemName getReportName(PaymentStub _giroType)
    {
        switch (_giroType)
        {
            case PaymentStub::BBS:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00004, funcName());
                return ssrsReportStr(Giro, GiroBBS);
            case PaymentStub::ESR_orange:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00008, funcName());
                return ssrsReportStr(Giro, GiroESR_ORANGE);
            case PaymentStub::ESR_red_bank:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00007, funcName());
                return ssrsReportStr(Giro, GiroESR_RED);
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceDK00007, funcName());
                return ssrsReportStr(Giro, GiroFIK);
            case PaymentStub::Finnish:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFI00002, funcName());
                return ssrsReportStr(Giro, GiroFinnish);
            case PaymentStub::QRBill:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCH00014, funcName());
                return ssrsReportStr(Giro, GiroQRBill);
            default: throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        if (!printMgmtReportRun)
        {
            // The GIRO report is not really a Print Managment report but
            // we need to inherit from SrsPrintMgmtController to make use to
            // asynchronous report output to the screen.
            printMgmtReportRun = PrintMgmtReportRun::construct(0, 0, 0);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initController</Name>
				<Source><![CDATA[
    protected void initController(Args _args)
    {
        #ISOCountryRegionCodes

        // Validate the type of the object argument
        Debug::assert(_args.object() is SRSPrintDestinationSettings);

        // Use the GIRO type to determine the report name
        this.parmReportName(this.getReportName(_args.parmEnum()));
        this.parmArgs(_args);
        // Don't show the dialog since we will use the same settings as the "Main" report
        this.parmShowDialog(false);

        if (_args.parmEnum() == PaymentStub::QRBill
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCH]))
        {
            GiroReportTmp giroReportTmp;
            select firstonly LanguageId from giroReportTmp
                where giroReportTmp.RecId == str2Int64(_args.parm());

            if (giroReportTmp.LanguageId)
            {
                this.parmReportContract().parmRdlContract().parmLanguageId(giroReportTmp.LanguageId);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(giroReportTmp.LanguageId);
            }
        }

        this.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the print management functionality.
    /// </summary>
    /// <remarks>
    /// Override this method to provide print management-related logic. This method loads the print
    /// settings for the business object. It then invokes any necessary business logic and then calls the
    /// <c>outputReports</c> method.
    /// </remarks>
    protected void runPrintMgmt()
    {
        GiroReportContract contract = this.parmReportContract().parmRdpContract();
        // The GIRO report is not really a Print Managment report but
        // we need to inherit from SrsPrintMgmtController to make use to asynchronous report output
        // to the screen.
        PrintMgmtPrintSettingDetail printMgmtPrintSettingDetail = new PrintMgmtPrintSettingDetail();

        // Filter the report data to the proper GIRO record
        contract.parmGiroReportTmpRecId(str2int64(this.parmArgs().parm()));

        // apply the same print settings used in the "main" report to the GIRO report
        //this.parmReportContract().parmPrintSettings(this.parmArgs().object());

        printMgmtPrintSettingDetail.parmPrintJobSettings(this.parmArgs().object());
        printMgmtPrintSettingDetail.parmNumberOfCopies(1);
        printMgmtPrintSettingDetail.parmReportFormatName(this.parmReportName());
        printMgmtReportRun.loadSettingDetail(printMgmtPrintSettingDetail);

        this.outputReports();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        GiroReportController controller = new GiroReportController();

        controller.initController(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>needGiroReport</Name>
				<Source><![CDATA[
        public static boolean needGiroReport(PaymentStub _giroType)
    {
        return !(_giroType == PaymentStub::None || _giroType == PaymentStub::BelSMS101 || _giroType == PaymentStub::BelSMS102);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>