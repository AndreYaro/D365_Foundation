<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomSearch extends BOMSearchBase
{
    BOMId                       bomId;
    BOMTable                    bomTable;
    TransDate                   validDate;
    ItemId                      parentItemId;
    EcoResItemConfigurationName parentConfigId;
    boolean                     dontCheckApprove;
    boolean                     forcedSkipHierarchyCheck;
    boolean                     doSearch;                   // Disables call to super in search()
    boolean                     hierarchyCheckOnlyApproved;

    BOM                         bom;
    BOMSortedList               bomList;
    boolean                     first;
    boolean                     useRecordLevelSecurity;     // show only BOMline transactions which are legal regarding to the record level security setup.

    BOMDependencyManager        bomDependencyManager;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bom</Name>
				<Source><![CDATA[
    BOMMap bom()
    {
        return bom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomId</Name>
				<Source><![CDATA[
    BOMId bomId()
    {
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        if (!bomTable)
        {
            bomTable = BOMTable::find(bomId);
        }

        if (bomTable)
        {
            if (! dontCheckApprove)
            {
                if (! bomTable.isApproved())
                {
                    if (#PmfEnabled
                        && bomTable.PmfBOMFormula == PmfBOMFormula::Formula)
                    {
                        throw error(strfmt("@PRO1909",bomId));
                    }
                    else
                    {
                        throw error(strfmt("@SYS29115",bomId));
                    }
                }
            }

            boolean checkBOM = this.mustCheckBOM();

            if (checkBOM && FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                checkBOM = !KittingClassDelegateHelper::BomSearch_BOMIsKit(BOMTable);
            }

            if (checkBOM)
            {
                if (! BOMHierarchyCheck::checkBOM(bomId, true, false, dateNull(), hierarchyCheckOnlyApproved, bomDependencyManager))
                {
                    throw error("@SYS24847");
                }
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the BOM must be checked or not.
    /// </summary>
    /// <returns>true if the BOM must be checked; otherwise, false.</returns>
    protected boolean mustCheckBOM()
    {
        return bomTable.CheckBOM && ! forcedSkipHierarchyCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMList</Name>
				<Source><![CDATA[
    void initBOMList()
    {
        bomList = new BOMSortedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a <c>BOM</c> record into a <c>BOMSortedList</c> list.
    /// </summary>
    /// <param name="_bom">
    ///    A <c>BOM</c> record that represents a BOM line.
    /// </param>
    protected void insertBOM(BOM _bom)
    {
        bomList.addBOM(_bom.data());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    ItemId itemId()
    {
        return parentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>BomSearch</c>.
    /// </summary>
    /// <param name = "_bomId">The BOM ID.</param>
    /// <param name = "_validDate">A date for which the calculation applies.</param>
    /// <param name = "_itemId">The item ID.</param>
    /// <param name = "_configId">The Id of the configuration to search for.</param>
    /// <param name = "_dontCheckApprove">Determines whether to check if the BOM is approved.</param>
    /// <param name = "_forUpdate">Determines whether to update the record or not.</param>
    /// <param name = "_recordLevelSecurity">Determines whether to show only BOMline transactions which are legal regarding to the record level security setup.</param>
    /// <returns>A new instance of <c>BomSearch</c>.</returns>
    public static BOMSearch construct(
        BOMId                       _bomId,
        TransDate                   _validDate,
        ItemId                      _itemId                     = '',
        EcoResItemConfigurationName _configId                   = '',
        boolean                     _dontCheckApprove           = false,
        boolean                     _forUpdate                  = false,
        boolean                     _recordLevelSecurity        = false
        )
    {
        return new BOMSearch(_bomId, _validDate, _itemId, _configId, _dontCheckApprove, _forUpdate, _recordLevelSecurity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        BOMId                       _bomId,
        TransDate                   _validDate,
        ItemId                      _itemId                     = '',
        EcoResItemConfigurationName _configId                   = '',
        boolean                     _dontCheckApprove           = false,
        boolean                     _forUpdate                  = false,
        boolean                     _recordLevelSecurity        = false
        )
    {
        this.initBomSearch(_bomId, _validDate, _itemId, _configId, _dontCheckApprove, _recordLevelSecurity);

        super(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBomSearch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the <c>BOMSearch</c> instance.
    /// </summary>
    /// <param name = "_bomId">The BOM ID.</param>
    /// <param name = "_validDate">A date for which the calculation applies.</param>
    /// <param name = "_itemId">The item ID.</param>
    /// <param name = "_configId">The Id of the configuration to search for.</param>
    /// <param name = "_dontCheckApprove">Determines whether to check if the BOM is approved.</param>
    /// <param name = "_recordLevelSecurity">Determines whether to show only BOMline transactions which are legal regarding to the record level security setup.</param>
    protected void initBomSearch(
        BOMId                       _bomId,
        TransDate                   _validDate,
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        boolean                     _dontCheckApprove,
        boolean                     _recordLevelSecurity
        )
    {
        doSearch            = true;

        bomId               = _bomId;
        validDate           = _validDate;
        parentItemId        = _itemId;
        this.parmParentConfigId(_configId);
        dontCheckApprove    = _dontCheckApprove;

        bomList = new BOMSortedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    boolean next()
    {
        if (first)
        {
            if (bomList.first())
            {
                bom = bomList.parmBOM();
            }
            else
            {
                bom.clear();
            }
            first = false;
        }
        else
        {
            if (bomList.next())
            {
                bom = bomList.parmBOM();
            }
            else
            {
                bom.clear();
            }
        }

        if (bom)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack(boolean restorePosition = false)
    {
        container con;
        recId     positionRecId = restorePosition ? bom.RecId : 0;

        if (!bomList)
        {
            return con;
        }
        bom.clear();

        if (bomList.first())
        {
            do
            {
                bom = bomList.parmBOM();
                this.setData();
                con += [bom];
            }
            while (bomList.next());
        }
        bom.clear();

        if (positionRecId && bomList.first())
        {
            bom = bomList.parmBOM();
            while (bom.RecId && bom.RecId != positionRecId)
            {
                bomList.next();
                bom = bomList.parmBOM();
            }
        }

        if (bom.RecId)
        {
            this.setData();
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMDependencyManager</Name>
				<Source><![CDATA[
    public BOMDependencyManager parmBOMDependencyManager(BOMDependencyManager _bomDependencyManager = bomDependencyManager)
    {
        bomDependencyManager = _bomDependencyManager;
        return bomDependencyManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMId</Name>
				<Source><![CDATA[
    BOMId parmBOMId(BOMId _bomId = bomId)
    {
        bomId = _bomId;
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMSortedlist</Name>
				<Source><![CDATA[
    public BOMSortedList parmBOMSortedlist(BOMSortedList _bomList = null)
    {
        if (_bomList)
        {
            first = true;
            bomList = _bomList;
        }

        return bomList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMTable</Name>
				<Source><![CDATA[
    public BOMTable parmBOMTable(BOMTable _bomTable = bomTable)
    {
        bomTable = _bomTable;
        return bomTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoSearch</Name>
				<Source><![CDATA[
    public boolean parmDoSearch(boolean _doSearch = doSearch)
    {
        doSearch = _doSearch;
        return doSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForcedSkipHierarchy</Name>
				<Source><![CDATA[
    public boolean parmForcedSkipHierarchy(boolean _forcedSkipHierarchy = forcedSkipHierarchyCheck)
    {
        forcedSkipHierarchyCheck = _forcedSkipHierarchy;
        return forcedSkipHierarchyCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHierarchyCheckOnlyApproved</Name>
				<Source><![CDATA[
    public boolean parmHierarchyCheckOnlyApproved(boolean _hierarchyCheckOnlyApproved = hierarchyCheckOnlyApproved)
    {
        hierarchyCheckOnlyApproved = _hierarchyCheckOnlyApproved;
        return hierarchyCheckOnlyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName parmParentConfigId(EcoResItemConfigurationName _parentConfigId = parentConfigId)
    {
        parentConfigId = _parentConfigId;
        return parentConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentItemId</Name>
				<Source><![CDATA[
    public ItemId parmParentItemId(ItemId _parentItemId = parentItemId)
    {
        parentItemId = _parentItemId;
        return parentItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRecordLevelSecurity</Name>
				<Source><![CDATA[
    public boolean parmUseRecordLevelSecurity(boolean _useRecordLevelSecurity = useRecordLevelSecurity)
    {
        useRecordLevelSecurity = _useRecordLevelSecurity;
        return useRecordLevelSecurity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidDate</Name>
				<Source><![CDATA[
    public TransDate parmValidDate(TransDate _validDate = validDate)
    {
        validDate = _validDate;
        return validDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    protected void search()
    {
        #macrolib.BOM

        ConfigChoice        configChoice;

        InventDim           inventDim;

        if (! doSearch)
        {
            return;
        }

        if (! bomId)
        {
            select nofetch bom where bom.RecId == 0;
            return;
        }
        this.initBOMList();

        bom.selectForUpdate(update);
        bom.recordLevelSecurity(useRecordLevelSecurity);

        if (parentConfigId)
        {
            while select forceplaceholders bom
                index hint NumIdx
                where bom.bomId         == bomId    &&
                      bom.ConfigGroupId >  ''       &&
                      #BOMDateSelect(validDate)
            #ConfigChoiceJoinDirect(parentItemId,parentConfigId)
            join inventDim
                    index hint DimIdIdx
                    where inventDim.InventDimId == bom.InventDimId
            {
                if (!update)
                {
                    inventDim.ConfigId  = configChoice.ChosenConfigId;
                    bom.InventDimId     = InventDim::findOrCreate(inventDim).InventDimId;
                }
                this.insertBOM(bom);
            }
        }
        else
        {
            // Don't check configs
            while select bom
                index hint ConfigGroupIdx
                where bom.bomId         == bomId    &&
                    bom.ConfigGroupId >  ''       &&
                    #BOMDateSelect(validDate)
            {
                if (!update)
                {
                    bom.setConfigId(parentItemId,parentConfigId);
                }

                this.insertBOM(bom);
            }
        }

        // Without configs
        while select bom
            index hint ConfigGroupIdx
            where bom.bomId         == bomId   &&
                  bom.ConfigGroupId == ''      &&
                  #BOMDateSelect(validDate)
        {
            this.insertBOM(bom);
        }

        first = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setData</Name>
				<Source><![CDATA[
    void setData()
    {
        if (!update)
        {
            bom.setConfigId(parentItemId,parentConfigId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    void unpack(container con)
    {
        Integer x;
        this.initBOMList();
        bom.clear();
        for (x=1;x<=conlen(con);x++)
        {
            bom = conpeek(con,x);
            this.insertBOM(bom);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bomTreePackLevelConfig</Name>
				<Source><![CDATA[
    static container bomTreePackLevelConfig(BOMId                        _bomId,
                                                   TransDate                    _validDate,
                                                   ItemId                       _itemId,
                                                   EcoResItemConfigurationName  _configId,
                                                   boolean                      _skipCheck,
                                                   boolean                      _useRecordLevelSecurity
                                                  )
    {
        BOMSearch bomSearch = BOMSearch::construct(_bomId,_validDate,_itemId,_configId,true,false);

        bomSearch.parmForcedSkipHierarchy(_skipCheck);
        bomSearch.parmUseRecordLevelSecurity(_useRecordLevelSecurity);
        bomSearch.init();
        return bomSearch.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalc</Name>
				<Source><![CDATA[
    static BOMSearch newBOMCalc(
        BOMId                       _bomId,
        TransDate                   _validDate,
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId,
        BOMDependencyManager        _bomDependencyManager = null
        )
    {
        BOMSearch bomSearch = BOMSearch::construct(
                                            _bomId,
                                            _validDate,
                                            _itemId,
                                            _configId,
                                            true);

        bomSearch.parmBOMDependencyManager(_bomDependencyManager);
        bomSearch.init();

        return bomSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMReportFinish</Name>
				<Source><![CDATA[
    static BOMSearch newBOMReportFinish(
        BOMId                       _bomId,
        TransDate                   _validDate,
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId
        )
    {
        BOMSearch   bomSearch = BOMSearch::construct(
                                            _bomId,
                                            _validDate,
                                            _itemId,
                                            _configId,
                                            false);
        bomSearch.init();

        return bomSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMTree</Name>
				<Source><![CDATA[
    static BOMSearch newBOMTree(
        BOMId                       _bomId,
        TransDate                   _validDate,
        ItemId                      _itemId,
        EcoResItemConfigurationName _configId
        )
    {
        BOMSearch bomSearch = BOMSearch::construct(_bomId,_validDate, _itemId,_configId,true);

        bomSearch.init();
        return bomSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConfigGroupId</Name>
				<Source><![CDATA[
    static BOMSearch_ConfigGroup newConfigGroupId(
        BOMId               _bomId,
        TransDate           _validDate,
        ConfigGroupId       _groupId
        )
    {
        BOMSearch_ConfigGroup bomSearch_ConfigGroup;

        bomSearch_ConfigGroup = new BOMSearch_ConfigGroup(
                                                    _bomId,
                                                    _validDate,
                                                    _groupId);

        bomSearch_ConfigGroup.init();

        return bomSearch_ConfigGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates and initializes a new <c>BOMSearch</c> object for a <c>KanbanJobPickingList</c> object.
    /// </summary>
    /// <param name="_bomId">
    ///    The BOM used for the instantiation of the <c>BOMSearch</c> object.
    /// </param>
    /// <param name="_validDate">
    ///    The date used for the instantiation of the <c>BOMSearch</c> object.
    /// </param>
    /// <param name="_itemId">
    ///    The item used for the instantiation of the <c>BOMSearch</c> object.
    /// </param>
    /// <param name="_configId">
    ///    The configuration used for the instantiation of the <c>BOMSearch</c> object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BOMSearch</c> object.
    /// </returns>
    public static BOMSearch newKanbanJobPickingList(BOMId _bomId,TransDate _validDate,ItemId _itemId,EcoResItemConfigurationName _configId)
    {
        BOMSearch   bomSearch = BOMSearch::construct(_bomId,_validDate,_itemId,_configId,false);

        bomSearch.init();

        return bomSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdTable</Name>
				<Source><![CDATA[
    static BOMSearch newProdTable(ProdTable prodTable)
    {
        BOMSearch bomSearch = BOMSearch::construct(
                                        prodTable.bomId,
                                        prodTable.bomDate,
                                        prodTable.ItemId,
                                        prodTable.inventDim().ConfigId,
                                        false);

        bomSearch.parmHierarchyCheckOnlyApproved(true);
        bomSearch.init();

        return bomSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqCalculation</Name>
				<Source><![CDATA[
    static BOMSearch newReqCalculation(ReqPO _reqPO, ReqSetup _reqSetup, BOMTable _bomTable = null, BOMDependencyManager _bomDependencyManager = null)
    {
        BOMSearch            bomSearch;
        BOMId                bomId   = _reqSetup.bomId(_reqPO);

        bomSearch =  BOMSearch::construct(bomId,
                                   ReqTransPoMarkFirmUseDlvDateForBOMVersionFlight::instance().isEnabled() ? _reqPO.getBOMDate() : _reqPO.ReqDate,
                                   _reqPO.ItemId,
                                   _reqPO.inventDim().ConfigId,
                                   false,
                                   false);
        bomSearch.parmBOMTable(_bomTable);

        BOMSortedList bomList = _reqSetup.bomSortedList(bomId);
        bomSearch.parmDoSearch(bomList ? false : true);
        bomSearch.parmHierarchyCheckOnlyApproved(true);
        bomSearch.parmBOMDependencyManager(_bomDependencyManager);
        bomSearch.init();

        if (bomList)
        {
            bomSearch.parmBOMSortedlist(bomList);
        }
        else
        {
            _reqSetup.setSortedBOMList(bomlist,bomId);
        }

        return bomSearch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>