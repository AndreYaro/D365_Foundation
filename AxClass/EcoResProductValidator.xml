<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates essential field values being set for the products.
/// </summary>
class EcoResProductValidator
{
    InventTable                 inventTable;
    List                        invalidFieldList;
    // The below lists hold containers with 2 elements: message string and SysInfoAction
    List                        warningMessagesList;
    List                        infoMessagesList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkValidationRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the validation rules.
    /// </summary>
    /// <returns>
    /// true if all rules can be validated; false, otherwise.
    /// </returns>
    protected boolean checkValidationRules()
    {
        boolean                     result = true;
        SysInfoAction_TableField    infoAction = SysInfoAction_TableField ::newBuffer(inventTable);
        MCRInventTable              mcrInventTable;

        if (WHSInventEnabled::exist(inventTable.ItemId) &&
            InventModelGroup::find(inventTable.inventModelGroupItem().ModelGroupId).QuarantineControl)
        {
            infoMessagesList.addEnd([strFmt("@SYS4001369", inventTable.ItemId), infoAction.pack()]);
            result = false;
        }

        if (!inventTable.PrimaryVendorId)
        {
            select firstonly DropShipment from mcrInventTable
                where mcrInventTable.InventTable == inventTable.RecId;

            if (mcrInventTable.DropShipment)
            {
                warningMessagesList.addEnd([strFmt("@MCR4410369", inventTable.ItemId), SysInfoAction_TableField::newBufferField(inventTable, fieldNum(InventTable, PrimaryVendorID)).pack()]);
                result = false;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a concatenated list of invalid fields on a product.
    /// </summary>
    /// <returns>
    /// A string containing invalid field list.
    /// </returns>
    /// <remarks>
    /// Product validation should be performed prior executing this method.
    /// </remarks>
    public str getErrorFieldList()
    {
        return strList2str(invalidFieldList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a concatenated list of invalid fields on a product.
    /// </summary>
    /// <returns>A invalid field list.</returns>
    public List errorFieldList()
    {
        return invalidFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasValidationIssues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the product has validation issues.
    /// </summary>
    /// <returns>
    /// true if the product has validation issues; false, otherwise.
    /// </returns>
    public boolean hasValidationIssues()
    {
        boolean noIssuesFound = this.isEssentialFieldValuesSet();

        noIssuesFound = this.checkValidationRules() && noIssuesFound;

        return !noIssuesFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEssentialFieldValuesSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates essential field values being set for the products.
    /// </summary>
    /// <returns>
    /// true, if all essential fields are assigned; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If item is invalid, an invalid fields can be retrieved with <c>getErrorFieldList</c> method.
    /// </remarks>
    public boolean isEssentialFieldValuesSet()
    {
        this.buildInvalidEssentialFieldsList();

        if (invalidFieldList.elements())
        {
            SysInfoAction_TableField infoAction = SysInfoAction_TableField::newBuffer(inventTable);

            warningMessagesList.addEnd([strFmt("@SYS338493", inventTable.ItemId, this.getErrorFieldList()), infoAction.pack()]);
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInvalidEssentialFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the invalidFieldList <c>List</c> instance based on invalid essential fields.
    /// </summary>
    protected void buildInvalidEssentialFieldsList()
    {
        invalidFieldList = new List(Types::String);

        if (!inventTable.inventModelGroupItem().RecId)
        {
            invalidFieldList.addEnd("@SYS53818");
        }

        if (!inventTable.inventItemGroupItem().RecId)
        {
            invalidFieldList.addEnd("@SYS4922");
        }

        if (!inventTable.storageDimensionGroup())
        {
            invalidFieldList.addEnd("@SYS312237");
        }

        if (!inventTable.trackingDimensionGroup())
        {
            invalidFieldList.addEnd("@SYS312248");
        }

        if (!inventTable.inventUnitId() && inventTable.isStocked())
        {
            invalidFieldList.addEnd("@SYS16617");
        }

        if (inventTable.product().PdsCWProduct)
        {
            if (!PdsCatchWeightItem::find(inventTable.ItemId).PdsCWUnitId)
            {
                invalidFieldList.addEnd("@PDS3");
            }
        }

        if (WHSInventEnabled::exist(inventTable.ItemId))
        {
            // Validate that WHS enabled items have a reservation hierarchy.
            if (!inventTable.whsReservationHierarchy())
            {
                invalidFieldList.addEnd("@WAX4705");
            }

            if (!WHSInventTable::find(inventTable.ItemId).UOMSeqGroupId)
            {
                invalidFieldList.addEnd("@WAX254");
            }          

            if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled()
                && inventTable.product().PdsCWProduct
                && !WHSInventTable::find(inventTable.ItemId).CatchWeightItemHandlingPolicyName)
            {
                invalidFieldList.addEnd("@WAX:WHSCatchWeightItemHandlingPolicy");
            }
        }

        if (RetailParameters::isRetailEnabledAndInUse() && !inventTable.salesUnitId())
        {
            invalidFieldList.addEnd("@SYS14614");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        warningMessagesList = new List(Types::Container);
        infoMessagesList    = new List(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public InventTable parmInventTable(InventTable _inventTable = inventTable)
    {
        inventTable = _inventTable;
        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of validation information messagese.
    /// </summary>
    /// <returns>
    /// A collection of validation information messagese.
    /// </returns>
    public List validationInformation()
    {
        return infoMessagesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validationWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of validation warning messages.
    /// </summary>
    /// <returns>
    /// A collection of validation warning messages.
    /// </returns>
    public List validationWarnings()
    {
        return warningMessagesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of <c>EcoResProductValidator</c>.
    /// </summary>
    /// <param name="_inventTable">
    ///     <c>InventTable</c> to validate.
    /// </param>
    /// <returns>
    ///     New instance of <c>EcoResProductValidator</c>.
    /// </returns>
    public static EcoResProductValidator construct(InventTable _inventTable)
    {
        EcoResProductValidator productValidator = new EcoResProductValidator();
        productValidator.parmInventTable(_inventTable);
        return productValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>