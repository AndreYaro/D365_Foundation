<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PDSBalanceIngredient_None</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PDSBalanceIngredient_None</c> class provides balancing logic specific for normal, non-potency specific, ingredients.
/// </summary>
[PDSIngredientTypeFactoryAttribute(PDSIngredientTypeEnum::None)]
class PDSBalanceIngredient_None extends PDSBalanceIngredient
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceQty</Name>
				<Source><![CDATA[
    public Set balanceQty()
    {
        MapEnumerator                   me = noneIngList.getEnumerator();
        PDSTmpBatchSelection            buffer;
        ProdBom                         lclProdBom;
        UnitOfMeasureDecimalPrecision   precision;

        if (!result)
        {
            result = new Set(Types::container);
        }

        while (me.moveNext())
        {
            [buffer.ItemId,buffer.InventBatchId,buffer.Qty,buffer.InventTransId,buffer.NormalizedQty, buffer.InventDimId] = me.currentValue();

            select firstonly UnitId
                from lclProdBom
                where lclProdBom.InventTransId == buffer.InventTransId;

            precision = UnitOfMeasure::findBySymbol(lclProdBom.UnitId).DecimalPrecision;
            result.add(
                    [   buffer.InventTransId,
                        buffer.ItemId,
                        decround(buffer.Qty, precision),
                        buffer.InventBatchId,
                        decround(buffer.NormalizedQty, precision),
                        buffer.InventDimId]);
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIngredientList</Name>
				<Source><![CDATA[
    public Map getIngredientList(ProdId _prodId)
    {
        ProdBom     lclProdBom;
        Map         noneList = new Map(Types::Int64,Types::Container);

        while select ItemId, QtyBomCalc, BomQTY, InventTransId, RecId, InventDimId
            from lclProdBom
            where  lclProdBom.ProdId            == _prodId
                && lclProdBom.PDSIngredientType == PDSIngredientTypeEnum::None
        {
            if (!noneList.exists(lclProdBom.RecId))
            {
                noneList.insert(lclProdBom.RecId,[lclProdBom.ItemId,'',lclProdBom.QtyBOMCalc,lclProdBom.InventTransId,lclProdBom.QtyBOMCalc, lclProdBom.InventDimId]);
            }
        }

        return noneList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PDSBalanceIngredient_None construct()
    {
        return new PDSBalanceIngredient_None();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>