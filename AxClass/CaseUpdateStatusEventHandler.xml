<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CaseUpdateStatusEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler class for <c>CaseUpdateStatus</c> class.
/// </summary>
class CaseUpdateStatusEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CaseUpdateStatus_InProcess_onChangeStatusInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the in process status change event.
    /// </summary>
    /// <param name="_args">The <c>CaseUpdateStatusEventArgs</c> parameters for the event handler.</param>
    [SubscribesTo(classStr(CaseUpdateStatus_InProcess), delegateStr(CaseUpdateStatus_InProcess, onChangeStatusInProcess))]
    public static void CaseUpdateStatus_InProcess_onChangeStatusInProcess(CaseUpdateStatusEventArgs _args)
    {
        CaseDetail caseDetail;
        SMAServiceLevelAgreementLogEngineCommon logEngine;

        caseDetail = CaseDetail::find(_args.parmCaseDetailBase().CaseId);

        if (isConfigurationkeyEnabled(new DictTable(tableNum(SMAServiceLevelAgreementLogTable)).configurationKeyId()))
        {
            if (caseDetail.ServiceLevelAgreementId && caseDetail.ServiceLevelAgreementStatus != SMALogStatus::Open)
            {
                logEngine = SMAServiceLevelAgreementLogEngineCommon::construct(SMALogStatus::Open, caseDetail);
                logEngine.updateSLALog();

                // We do a re-select to have the correct recversion
                // The record has changed  in above code and the buffer is not aware
                caseDetail.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseUpdateStatus_Close_onChangeStatusClose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the close status change event.
    /// </summary>
    /// <param name="_args">The <c>CaseUpdateStatusEventArgs</c> parameters for the event handler.</param>
    [SubscribesTo(classStr(CaseUpdateStatus_Close), delegateStr(CaseUpdateStatus_Close, onChangeStatusClose))]
    public static void CaseUpdateStatus_Close_onChangeStatusClose(CaseUpdateStatusEventArgs _args)
    {
        CaseDetail currCaseDetail = _args.parmCaseDetailBase() as CaseDetail;

        if (isConfigurationkeyEnabled(new DictTable(tableNum(SMAServiceLevelAgreementLogTable)).configurationKeyId()))
        {
            if (currCaseDetail.Status == CaseStatus::Closed && currCaseDetail.ServiceLevelAgreementId && currCaseDetail.ServiceLevelAgreementStatus != SMALogStatus::Closed)
            {
                SMAServiceLevelAgreementLogEngineCommon logEngine =
                    SMAServiceLevelAgreementLogEngineCommon::construct(SMALogStatus::Closed, currCaseDetail);
                logEngine.updateSLALog();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseUpdateStatus_preUpdateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to run prior to the <c>CaseUpdateStatus</c> main method logic.
    /// </summary>
    /// <param name="_args">The <c>CaseUpdateStatusEventArgs</c> parameters for the event handler.</param>
    [SubscribesTo(classStr(CaseUpdateStatus), staticDelegateStr(CaseUpdateStatus, preUpdateStatus))]
    public static void CaseUpdateStatus_preUpdateStatus(CaseUpdateStatusEventArgs _args)
    {
        EngChgCaseValidator engChgCaseValidator;
        EngChgCaseValidatorRuleLevelResult engChgCaseValidatorRuleLevelResult;
        SMALogStatus logStatus;
        SMAServiceLevelAgreementLogEngineCommon logStatusEngine;

        switch (_args.parmCaseStatus())
        {
            case CaseStatus::Planned:
                if (isConfigurationkeyEnabled(new DictTable(tableNum(SMAServiceLevelAgreementLogTable)).configurationKeyId()))
                {
                    logStatus       = SMALogStatus::Open;
                    logStatusEngine = SMAServiceLevelAgreementLogEngineCommon::construct(logStatus, _args.parmCaseDetailBase());

                    if (logStatusEngine && _args.parmCaseDetail().ServiceLevelAgreementId)
                    {
                        logStatusEngine.runOperation();
                    }
                }
                break;

            case CaseStatus::Closed:
                // If the case is of category type Product change (EngineeringChange)
                // and there are validation rule errors, the case should not be closed.
                if (CaseCategoryHierarchyDetail::find(_args.parmCaseDetailBase().CategoryRecId, false).CategoryType == CaseCategoryType::EngineeringChange)
                {
                    engChgCaseValidator = EngChgCaseValidator::newValidatorAndLoadValidationRules(_args.parmCaseDetailBase().RecId);
                    engChgCaseValidator.parmIsCalledFromWorkFlow(_args.parmCalledFromClientWF());
                    engChgCaseValidatorRuleLevelResult = engChgCaseValidator.runCaseCloseRules();

                    if (engChgCaseValidatorRuleLevelResult != EngChgCaseValidatorRuleLevelResult::None)
                    {
                        if (engChgCaseValidatorRuleLevelResult == EngChgCaseValidatorRuleLevelResult::Error)
                        {
                            throw error("@SYS4006410");
                        }

                        if (engChgCaseValidatorRuleLevelResult == EngChgCaseValidatorRuleLevelResult::Warning
                                && !_args.parmCalledFromClientWF()
                                && (Box::yesNo("@SYS4006409", DialogButton::No, "@SYS4006411") == DialogButton::No))
                        {
                            _args.parmBreakStatementExecution(true);
                            break;
                        }
                    }
                }

                break;

            case CaseStatus::Cancelled:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CaseUpdateStatus_postUpdateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler to run afterthe <c>CaseUpdateStatus</c> main method logic.
    /// </summary>
    /// <param name="_args">The <c>CaseUpdateStatusEventArgs</c> parameters for the event handler.</param>
    [SubscribesTo(classStr(CaseUpdateStatus), staticDelegateStr(CaseUpdateStatus, postUpdateStatus))]
    public static void CaseUpdateStatus_postUpdateStatus(CaseUpdateStatusEventArgs _args)
    {
        SMALogStatus logStatus;
        SMAServiceLevelAgreementLogEngineCommon logStatusEngine;

        switch (_args.parmCaseStatus())
        {
            case CaseStatus::Closed:

                if (isConfigurationkeyEnabled(new DictTable(tableNum(SMAServiceLevelAgreementLogTable)).configurationKeyId()))
                {
                    logStatus       = SMALogStatus::Closed;
                    logStatusEngine = SMAServiceLevelAgreementLogEngineCommon::construct(logStatus, _args.parmCaseDetailBase());

                    //if a service level agreement is associated with the case update the SLA log
                    if (logStatusEngine && _args.parmCaseDetail().ServiceLevelAgreementId)
                    {
                        logStatusEngine.updateSLALog();
                    }
                }
                break;

            case CaseStatus::Cancelled:

                if (isConfigurationkeyEnabled(new DictTable(tableNum(SMAServiceLevelAgreementLogTable)).configurationKeyId()))
                {
                    logStatus       = SMALogStatus::Cancel;
                    logStatusEngine = SMAServiceLevelAgreementLogEngineCommon::construct(logStatus, _args.parmCaseDetailBase());
                    logStatusEngine.parmCallerFormDataSource(FormDataUtil::getFormDataSource(_args.parmCaseDetailBase()));

                    if (logStatusEngine && _args.parmCaseDetail().ServiceLevelAgreementId && !_args.parmCalledFromClientWF())
                    {
                        logStatusEngine.runOperation();
                    }
                    else if (_args.parmCalledFromClientWF() && _args.parmCaseDetail().ServiceLevelAgreementId)
                    {
                        logStatusEngine.updateSLALog();
                        logStatusEngine.parmIsActionDialogClosedOK(true);
                    }

                    //proceed further only if SLA dialog Ok button is clicked
                    if (logStatusEngine && logStatusEngine.parmIsActionDialogClosedOK())
                    {
                        boolean canDeleteActivities;

                        // show YesNo prompt for activities deletion
                        if (!_args.parmCalledFromClientWF() && _args.parmCaseDetailBase().Process)
                        {
                            canDeleteActivities = _args.parmCaseUpdateStatus().canDeleteActivities(_args.parmCaseDetailBase().RecId);
                        }

                        if (canDeleteActivities)
                        {
                            // Delete the primary activities attached
                            smmActivityParentLink::deletePrimaryActivities(_args.parmCaseDetailBase(), smmActivityParentType::Case);
                        }
                    }
                }
                break;
        }

        // Update the CaseStatus only if the status is not closed
        if (_args.parmCaseStatus() != CaseStatus::Closed)
        {
            if (_args.parmCalledFromClientWF()  ||                          // if called from WF recall OR
                    ( !_args.parmCalledFromClientWF() && logStatusEngine && logStatusEngine.parmIsActionDialogClosedOK() )  || // if not called from WF recall and Clicked OK in SLA cancel dialog OR
                    (   (logStatusEngine && logStatusEngine.parmIsActionDialogClosedOK())   // if the user clicked on dialog's OK button. OR
                        || (_args.parmCaseStatus() == CaseStatus::InProcess)                                // if the status is InProgress.               OR
                        || (!_args.parmCaseDetail().ServiceLevelAgreementId)                            // if there is no SLA agreement associated.
                    )
                    )
            {
                _args.parmCaseUpdateStatus().changeStatus();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>