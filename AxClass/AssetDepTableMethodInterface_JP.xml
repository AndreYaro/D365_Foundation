<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepTableMethodInterface_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// It is an interface that all adapter classes that between the standard depreciation
/// calculation framework and the Japan depreciation calculation framework. It helps the
/// communication between the two parts.
/// </summary>
interface AssetDepTableMethodInterface_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addExtraDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add amount for accumulated extra depreciation amount
    /// </summary>
    /// <param name="_extraDepAmount">
    /// The amount to be added to accumuldated extra depreciation amount
    /// </param>
    public void addExtraDepAmount(AssetAmount _extraDepAmount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedExtraDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposted amount for extra ordinary depreciation, it includes accelerated and special depreciation.
    /// </summary>
    /// <param name="_unpostedExtraDepAmount">
    /// Unposted amount for extra ordinary depreciation, it includes accelerated and special depreciation.
    /// </param>
    public void parmUnpostedExtraDepAmount(AssetAmount _unpostedExtraDepAmount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnpostedSpecialDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposted amount for special depreciation.
    /// </summary>
    /// <param name="_unpostedSpecialDepAmount">
    /// Unposted amount for special depreciation.
    /// </param>
    public void parmUnpostedSpecialDepAmount(AssetAmount _unpostedSpecialDepAmount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetIdlePeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Number of idle periods for an asset.
    /// </summary>
    /// <param name="_assetIdlePeriods">
    /// Number of idle periods for an asset.
    /// </param>
    public void parmAssetIdlePeriods(int _assetIdlePeriods)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAssetIdlePeriodActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Idle period active for an asset.
    /// </summary>
    /// <param name="_isAssetIdlePeriodActive">
    /// Idle period active for an asset.
    /// </param>
    public void parmIsAssetIdlePeriodActive(boolean _isAssetIdlePeriodActive)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the depreciation amount.
    /// </summary>
    /// <returns>
    /// The depreciation amount.
    /// </returns>
    public AssetAmount calc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllowableLimitForSumOfDepYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the allowable limit for summary of depreciation from beginning of current year to current period end.
    /// </summary>
    /// <returns>
    /// The allowable limit for summary of depreciation from beginning of current year to current period end.
    /// </returns>
    public AssetAmount calcAllowableLimitForSumOfDepYTD()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcYearBeginningBalanceOfAccumulatedDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated depreciation amountfor current year.
    /// </summary>
    /// <returns>
    /// The beginning balance of accumulated depreciation amountfor current year.
    /// </returns>
    public AssetAmount calcYearBeginningBalanceOfAccumulatedDep()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountToDepreciate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount to depreciation.
    /// </summary>
    /// <returns>
    /// The amount to depreciation.
    /// </returns>
    public AssetAmount getAmountToDepreciate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAcquisitionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset acquisition value
    /// </summary>
    /// <returns>
    /// Acquisition value of the fixed asset
    /// </returns>
    public AssetAmount getAssetAcquisitionValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetDocumentEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the asset document entry record.
    /// </summary>
    /// <returns>
    /// A record of <C>AssetDocumentEntry_JP</C>.
    /// </returns>
    public AssetDocumentEntry_JP getAssetDocumentEntry()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetTableInterval</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current in used instance of <C>AssetTableInterval</C> sub class.
    /// </summary>
    /// <param name="_date">
    /// The date used to get the asset table interval, optional.
    /// </param>
    /// <returns>
    /// The current in used instance of <C>AssetTableInterval</C> sub class.
    /// </returns>
    public AssetTableInterval getAssetTableInterval(AssetTransDate _date = dateNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBeginBalanceCalculationResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the beginning balance result which based on the cache calculated in process of calculation.
    /// </summary>
    /// <returns>
    /// The calculation cache of accumulated depreciation beginning balance amount
    /// </returns>
    public Map getBeginBalanceCalculationResult()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDepreciationDone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets if depreciation is done.
    /// </summary>
    /// <returns>
    /// Returns true if depreciation is done; else, returns false.
    /// </returns>
    public boolean getIsDepreciationDone()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecialDepAllocationStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the start date of special allocation depreciation
    /// </summary>
    /// <returns>
    /// The start date of special allocation depreciation
    /// </returns>
    public AssetTransDate getSpecialDepAllocationStartDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdditional</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do some additional initialization
    /// </summary>
    public void initAdditional()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecaptureDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whether it is doing a recapture depreciation calculation.
    /// </summary>
    /// <returns>
    /// true if it is doing a recapture depreciation calculation; otherwise, return fasle.
    /// </returns>
    /// <remarks>
    /// In the standard depreciation calculation framework, "recapture" is also called "true up" or "catch up".
    /// But as Japan has a "catch up method" function, to be clear, we call the standard one as "recapture" function.
    /// </remarks>
    public boolean isRecaptureDepreciation()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSpecialDepAllocationForReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if it is allocation for special reserve
    /// </summary>
    /// <returns>
    /// Returns true if it is allocation for special reserve; otherwise, returns false
    /// </returns>
    public boolean isSpecialDepAllocationForReserve()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes whtether it is allowed to do next loop calculation.
    /// </summary>
    /// <returns>
    /// true if allowed; otherwise, return false.
    /// </returns>
    public boolean next()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceleratedEntryContainer_JP</Name>
				<Source><![CDATA[
    public container parmAcceleratedEntryContainer_JP(container _acceleratedEntryContainer_JP = conNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAssetDocumentEntry_JP</Name>
				<Source><![CDATA[
    public AssetDocumentEntry_JP parmAssetDocumentEntry_JP(AssetDocumentEntry_JP _assetDocumentEntry_JP = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCatchUpDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsCatchUpDepreciation(boolean _isCatchUpDepreciation = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDepreciationAcceleratedProfile_JP</Name>
				<Source><![CDATA[
    public boolean parmIsDepreciationAcceleratedProfile_JP(boolean _isDepreciationAcceleratdeProfile_JP = true)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsRecaptureDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsRecaptureDepreciation(boolean _isRecaptureDep = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodEnd_JP</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodEnd_JP(AssetTransDate _periodEnd = dateNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodStart_JP</Name>
				<Source><![CDATA[
    public AssetTransDate parmPeriodStart_JP(AssetTransDate _periodStart = dateNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveAmount</Name>
				<Source><![CDATA[
    public AssetAmount parmSpecialDepReserveAmount(Assetamount _specialDepReserveAmount = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveDate</Name>
				<Source><![CDATA[
    public AssetTransDate parmSpecialDepReserveDate(AssetTransDate _specialDepReserveDate = dateNull())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveRecId</Name>
				<Source><![CDATA[
    public RecId parmSpecialDepReserveRecId(RecId _specialDepReserveRecId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecialDepReserveTableId</Name>
				<Source><![CDATA[
    public TableId parmSpecialDepReserveTableId(TableId _specialDepReserveTableId = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMainDepBeginBalanceMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the main depreciation beginning balance.
    /// </summary>
    /// <param name="_depBeginBalanceMap">
    /// The map contains main depreciation begin balance by date.
    /// </param>
    public void setMainDepBeginBalanceMap(Map _depBeginBalanceMap)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>