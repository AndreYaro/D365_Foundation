<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransExchAdjDistController_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Distribution controller with offset account
/// </summary>
class CustVendTransExchAdjDistController_RU extends CustVendTransDistributionController
{
    LedgerVoucherObject     ledgerVoucherObject;
    LedgerDimensionAccount  defaultOffsetLedgerDimension;
    boolean                 useGeneralJournal;
    SourceDocumentLine      sourceDocumentLine;
    MonetaryAmount          monetaryAmount;
    boolean                 preferNotDistributionForOffset;
    boolean                 ignoreMonetaryAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDimensionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills <c>Map</c> object which holds data about dimensions and amounts related to them.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// LedgerDimension account parameter.
    /// </param>
    /// <param name="_offsetDimension">
    /// Offset LedgerDimension account parameter.
    /// </param>
    /// <param name="_amount">
    /// Amount to be added to map amount;
    /// </param>
    /// <param name="_dimensionMap">
    /// <c>Map</c> object which holds data about dimensions and amounts related to them.
    /// </param>
    /// <param name="_oldTotal">
    /// Previous amount set in map for dimension combination
    /// </param>
    /// <returns>
    /// Total amount in map.
    /// </returns>
    protected Amount addDimensionAmount(LedgerDimensionAccount _ledgerDimension, LedgerDimensionAccount _offsetDimension, Amount _amount, Map _dimensionMap, Amount _oldTotal)
    {
        Amount              transAmount = _amount;
        Amount              ret         = _oldTotal;
        container           key         = [
            this.fireLedgerDimensionObtained(false, _ledgerDimension),
            this.fireLedgerDimensionObtained(true,  _offsetDimension)
        ];

        if (_amount)
        {
            if (_dimensionMap.exists(key))
            {
                transAmount += _dimensionMap.lookup(key);
            }

            _dimensionMap.insert(key, transAmount);
            ret += _amount;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMapToDistributionFactors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds data from <c>Map</c> object which holds data about dimensions and amounts to distributions factors list.
    /// </summary>
    /// <param name="_dimensionMap">
    /// <c>Map</c> object which holds data about dimensions and amounts.
    /// </param>
    /// <param name="_postedDistributionsTotal">
    /// Total amount which has been posted(denominator).
    /// </param>
    /// <param name="_distributionFactors">
    /// <c>List</c> object which holds distribution data.
    /// </param>
    protected void addMapToDistributionFactors(Map _dimensionMap, Amount _postedDistributionsTotal, List _distributionFactors)
    {
        MapEnumerator           me = _dimensionMap.getEnumerator();
        Money                   factor;
        LedgerDimensionAccount  ledgerDimension;
        LedgerDimensionAccount  offsetLedgerDimension;

        while (me.moveNext())
        {
            factor = _postedDistributionsTotal != 0 ? me.currentValue() / _postedDistributionsTotal : 0;
            [ledgerDimension, offsetLedgerDimension] = me.currentKey();
            _distributionFactors.addEnd(new CustVendTransCorrespondentDistribution(ledgerDimension, offsetLedgerDimension, factor));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fireLedgerDimensionObtained</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fires event that ledgerDimension has been obtained.
    /// </summary>
    /// <param name="_offset">
    /// True if dimension associated with offset account.
    /// </param>
    /// <param name="_ledgerDimension">
    /// Value of ledger dimension.
    /// </param>
    /// <returns>
    /// Processed value of ledgerDimension.
    /// </returns>
    protected LedgerDimensionAccount fireLedgerDimensionObtained(boolean _offset, LedgerDimensionAccount _ledgerDimension)
    {
        SysAnyType refDimension = new SysAnyType(_ledgerDimension);
        this.ledgerDimensionObtained(_offset, refDimension);
        return refDimension.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionFactors</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves information about the distribution factors based on what was originally posted for a
    ///    <c>CustVendTrans</c> record not for a specific <c>LedgerPostingType</c> enumeration value.
    /// </summary>
    /// <param name="_custVendTrans">
    ///    The <c>CustVendTrans</c> record that is associated with the originally posted distributions.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///    The posting type of the original distributions to consider. For example, the
    ///    <c>LedgerPostingType::CustBalance</c> enumeration value.
    /// </param>
    /// <param name="_defaultLedgerDimension">
    ///    The <c>LedgerDimensionAccount</c> value to use when the original distributions cannot be identified
    ///    or when requested to create a single distribution.
    /// </param>
    /// <param name="_forceSingleDistribution">
    ///    Indicates whether to force the process to only generate a single distribution.
    /// </param>
    /// <returns>
    ///    A <c>List</c> that contains the collection of <c>CustVendTransCorrespondingDistribution</c> objects that
    ///    represent the distribution factors.
    /// </returns>
    /// <param name="_mergeDefaultLedgerDimension">
    /// A Boolean value that indicates whether to merge the default ledger dimension and original distribution dimensions;
    /// optional.
    /// </param>
    /// <remarks>
    ///    The results of this invocation are cached on the object so that subsequent requests for the same
    ///    distribution information can reuse the previous results.
    /// </remarks>
    public List getDistributionFactors(
            CustVendTrans           _custVendTrans,
            LedgerPostingType       _ledgerPostingType,
            LedgerDimensionAccount  _defaultLedgerDimension,
            boolean                 _forceSingleDistribution,
            boolean                 _mergeDefaultLedgerDimension = false)
    {
        List        ledgerPostingTypes = new List(Types::Enum);

        ledgerPostingTypes.addEnd(_ledgerPostingType);

        return this.getDistributionFactorsForPostingTypes(_custVendTrans, ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution, _mergeDefaultLedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionFactorsForPostingTypes</Name>
				<Source><![CDATA[
        public List getDistributionFactorsForPostingTypes(
            CustVendTrans           _custVendTrans,
            List                    _ledgerPostingTypes,
            LedgerDimensionAccount  _defaultLedgerDimension,
            boolean                 _forceSingleDistribution,
            boolean                 _mergeDefaultWithOriginalDimension = false)
    {
        Money                               postedDistributionsTotal;
        List                                distributionFactors;
        Map                                 dimensionMap;
        LedgerPostingType                   ledgerPostingType;
        ListEnumerator                      ledgerPostingTypesEnumerator;

        ledgerPostingTypesEnumerator = _ledgerPostingTypes.getEnumerator();
        ledgerPostingTypesEnumerator.moveNext();
        ledgerPostingType = ledgerPostingTypesEnumerator.current();

        if (this.needToAcquireFactorsForPostingTypes(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution))
        {
            currentTransaction              = _custVendTrans;
            currentLedgerPostingTypes       = _ledgerPostingTypes;
            currentDefaultLedgerDimension   = _defaultLedgerDimension;
            currentForceSingleDistribution  = _forceSingleDistribution;
            currentLedger                   = Ledger::findByLegalEntity(CompanyInfo::current(_custVendTrans.company()));
            distributionFactors             = new List(Types::Class);

            if (! _forceSingleDistribution)
            {
                dimensionMap = new Map(Types::Container, Types::Real);

                if (CustVendTransDistributionController::custVendTransHasSourceDocumentData(_custVendTrans))
                {
                    postedDistributionsTotal = this.insertDistributionsFromSubledger(_custVendTrans, ledgerPostingType, currentLedger, dimensionMap);
                }
                else if (ledgerVoucherObject)
                {
                    postedDistributionsTotal = this.insertDistributionsFromVoucher(_custVendTrans, ledgerPostingType, dimensionMap);
                }
                else if (useGeneralJournal)
                {
                    postedDistributionsTotal = this.insertDistributionsFromGeneralJournal(_custVendTrans, ledgerPostingType, dimensionMap);
                }
            }

            if (dimensionMap && dimensionMap.elements())
            {
                this.addMapToDistributionFactors(dimensionMap, postedDistributionsTotal, distributionFactors);
            }
            else
            {
                distributionFactors.addEnd(new CustVendTransCorrespondentDistribution(
                    this.fireLedgerDimensionObtained(false, currentDefaultLedgerDimension),
                    this.fireLedgerDimensionObtained(true,  defaultOffsetLedgerDimension),
                    1.));
            }

            this.parmCurrentDistributionFactors(distributionFactors);
        }

        Debug::assert(this.parmCurrentDistributionFactors() != null);
        Debug::assert(this.needToAcquireFactorsForPostingTypes(_custVendTrans, _ledgerPostingTypes, _defaultLedgerDimension, _forceSingleDistribution) == false);

        return this.parmCurrentDistributionFactors();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDistributionsFromBondedSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates distribution data using subledger, when subledger records are bonded.
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustTrans</c> or <c>VendTrans</c> record with which subledger records are associated.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// <c>LedgerPostingType</c> used to calculate distibution.
    /// </param>
    /// <param name="_currentLedger">
    /// <c>Ledger</c> record subledger to which subledger records belong.
    /// </param>
    /// <param name="_dimensionMap">
    /// The <c>Map</c> object which hold data about distributions and their dimensions.
    /// </param>
    /// <returns>
    /// Total amount of distributions, which meet the criteria.
    /// </returns>
    protected AmountMST insertDistributionsFromBondedSubledger(CustVendTrans           _custVendTrans,
                                                               LedgerPostingType       _ledgerPostingType,
                                                               Ledger                  _currentLedger,
                                                               Map                     _dimensionMap)
    {
        SubledgerJournalAccountEntry                accountEntry;
        SubledgerJournalEntry                       entry;
        SubledgerJournalAccountEntry                offsetAccountEntry;
        SubledgerJournalAccountEntryDistribution    accountEntryDistribution;
        SubledgerJournalAccountEntryDistribution    offsetAccountEntryDistribution;
        AccountingDistribution                      distribution;

        SubledgerJournalAccountEntryBond            bond;
        SubledgerJournalAccountEntryBond            offsetBond;
        AmountMST                           total;

        while select LedgerDimension from accountEntry
            group by LedgerDimension
            join RecId from entry
            where accountEntry.PostingType      == _ledgerPostingType
               && entry.AccountingEvent        == _custVendTrans.AccountingEvent
               && entry.RecId                  == accountEntry.SubledgerJournalEntry
               && entry.Ledger                 == _currentLedger.RecId
            join sum(AccountingCurrencyAmount) from accountEntryDistribution
                where accountEntryDistribution.SubledgerJournalAccountEntry == accountEntry.RecId
            join TableId from distribution
                where distribution.RecId == accountEntryDistribution.AccountingDistribution
                   && (  sourceDocumentLine || ignoreMonetaryAmount ||distribution.MonetaryAmount      == monetaryAmount)
                   && (! sourceDocumentLine || distribution.SourceDocumentLine  == sourceDocumentLine.RecId)
            join sum(AccountingCurrencyAmount) from offsetAccountEntryDistribution
                where offsetAccountEntryDistribution.AccountingDistribution == distribution.RecId
            join LedgerDimension from offsetAccountEntry
                group by LedgerDimension
                where entry.RecId == offsetAccountEntry.SubledgerJournalEntry
                   && offsetAccountEntry.RecId == offsetAccountEntryDistribution.SubledgerJournalAccountEntry
                   && offsetAccountEntry.Side != accountEntry.Side
            join TableId from bond
                where bond.SubledgerJournalAccountEntry == accountEntry.RecId
            join TableId from offsetBond
                where offsetBond.SubledgerJournalAccountEntry   == offsetAccountEntry.RecId
                   && offsetBond.BondBatchTrans                 == bond.BondBatchTrans
        {
            Debug::assert(accountEntryDistribution.AccountingCurrencyAmount == -offsetAccountEntryDistribution.AccountingCurrencyAmount);
            total = this.addDimensionAmount(accountEntry.LedgerDimension, offsetAccountEntry.LedgerDimension, accountEntryDistribution.AccountingCurrencyAmount, _dimensionMap, total);
        }
        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDistributionsFromGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates distribution data using general journal entries.
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustTrans</c> or <c>VendTrans</c> record with which general journal records are associated.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// <c>LedgerPostingType</c> used to calculate distibution.
    /// </param>
    /// <param name="_dimensionMap">
    /// <c>Map</c> object which hold data about distributions and their dimensions.
    /// </param>
    /// <returns>
    /// Total amount of distributions, which meet the criteria.
    /// </returns>
    protected Amount insertDistributionsFromGeneralJournal(CustVendTrans _custVendTrans, LedgerPostingType _ledgerPostingType, Map _dimensionMap)
    {
        GeneralJournalAccountEntry  generalJournalAccountEntry;
        GeneralJournalEntry         generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherEntry;
        Amount                      ret;
        while select LedgerDimension, sum(AccountingCurrencyAmount) from generalJournalAccountEntry
            group by LedgerDimension
            join RecId from generalJournalEntry
            join TableId from subledgerVoucherEntry
            where generalJournalAccountEntry.PostingType    != _ledgerPostingType
                && generalJournalAccountEntry.PostingType   != LedgerPostingType::Tax
                && generalJournalAccountEntry.IsCredit       == NoYes::No
                && generalJournalEntry.RecId                 == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.Ledger                == currentLedger.RecId
                && subledgerVoucherEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && subledgerVoucherEntry.AccountingDate      == _custVendTrans.TransDate
                && subledgerVoucherEntry.Voucher             == _custVendTrans.Voucher
        {
            ret = this.addDimensionAmount(
                currentDefaultLedgerDimension,
                generalJournalAccountEntry.LedgerDimension,
                generalJournalAccountEntry.AccountingCurrencyAmount,
                _dimensionMap,
                ret
            );
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDistributionsFromSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates distribution data using subledger
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustTrans</c> or <c>VendTrans</c> record with which subledger records are associated.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// <c>LedgerPostingType</c> used to calculate distibution.
    /// </param>
    /// <param name="_currentLedger">
    /// <c>Ledger</c> record subledger to which subledger records belong.
    /// </param>
    /// <param name="_dimensionMap">
    /// <c>Map</c> object which hold data about distributions and their dimensions.
    /// </param>
    /// <returns>
    /// Total amount of distributions, which meet the criteria.
    /// </returns>
    protected AmountMST insertDistributionsFromSubledger(CustVendTrans           _custVendTrans,
                                                         LedgerPostingType       _ledgerPostingType,
                                                         Ledger                  _currentLedger,
                                                         Map                     _dimensionMap)
    {
        return this.isSubledgerBonded(_custVendTrans, _ledgerPostingType, _currentLedger) ?
            this.insertDistributionsFromBondedSubledger(_custVendTrans, _ledgerPostingType, _currentLedger, _dimensionMap) :
            this.insertDistributionsFromUnbondedSubledger(_custVendTrans, _ledgerPostingType, _currentLedger, _dimensionMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDistributionsFromUnbondedSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates distribution data using subledger, when bonding is not set for subledger records
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustTrans</c> or <c>VendTrans</c> record with which subledger records are associated.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// <c>LedgerPostingType</c> used to calculate distibution.
    /// </param>
    /// <param name="_currentLedger">
    /// <c>Ledger</c> record subledger to which subledger records belong.
    /// </param>
    /// <param name="_dimensionMap">
    /// <c>Map</c> object which hold data about distributions and their dimensions.
    /// </param>
    /// <returns>
    /// Total amount of distributions, which meet the criteria.
    /// </returns>
    protected AmountMST insertDistributionsFromUnbondedSubledger(
        CustVendTrans           _custVendTrans,
        LedgerPostingType       _ledgerPostingType,
        Ledger                  _currentLedger,
        Map                     _dimensionMap
    )
    {
        SubledgerJournalAccountEntry                accountEntry;
        SubledgerJournalEntry                       entry;
        SubledgerJournalAccountEntry                offsetAccountEntry;
        SubledgerJournalAccountEntryDistribution    accountEntryDistribution;
        SubledgerJournalAccountEntryDistribution    offsetAccountEntryDistribution;
        AccountingDistribution                      distribution;

        AmountMST                           total;

        while select LedgerDimension from accountEntry
            group by LedgerDimension
            join RecId from entry
            where accountEntry.PostingType      == _ledgerPostingType
               && entry.AccountingEvent        == _custVendTrans.AccountingEvent
               && entry.RecId                  == accountEntry.SubledgerJournalEntry
               && entry.Ledger                 == _currentLedger.RecId
            join sum(AccountingCurrencyAmount) from accountEntryDistribution
                where accountEntryDistribution.SubledgerJournalAccountEntry == accountEntry.RecId
            join LedgerDimension from distribution
                where distribution.RecId == accountEntryDistribution.AccountingDistribution
                   && (  sourceDocumentLine || distribution.MonetaryAmount      == monetaryAmount)
                   && (! sourceDocumentLine || distribution.SourceDocumentLine  == sourceDocumentLine.RecId)
            join sum(AccountingCurrencyAmount) from offsetAccountEntryDistribution
                where offsetAccountEntryDistribution.AccountingDistribution == distribution.RecId
            join LedgerDimension from offsetAccountEntry
                group by LedgerDimension
                where entry.RecId == offsetAccountEntry.SubledgerJournalEntry
                   && offsetAccountEntry.RecId == offsetAccountEntryDistribution.SubledgerJournalAccountEntry
                   && offsetAccountEntry.Side != accountEntry.Side
                   && (! preferNotDistributionForOffset || offsetAccountEntry.LedgerDimension != distribution.LedgerDimension)
        {
            total = this.addDimensionAmount(
                accountEntry.LedgerDimension,
                offsetAccountEntry.LedgerDimension ? offsetAccountEntry.LedgerDimension : distribution.LedgerDimension,
                accountEntryDistribution.AccountingCurrencyAmount, _dimensionMap, total);
        }
        return total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDistributionsFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates distribution data using current <c>LedgerVoucherObject</c>
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustTrans</c> or <c>VendTrans</c> record with which <c>LedgerVoucherObject</c> associated.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// <c>LedgerPostingType</c> used to calculate distibution.
    /// </param>
    /// <param name="_dimensionMap">
    /// <c>Map</c> object which hold data about distributions and their dimensions.
    /// </param>
    /// <returns>
    /// Total amount of distributions, which meet the criteria.
    /// </returns>
    protected Amount insertDistributionsFromVoucher(CustVendTrans _custVendTrans, LedgerPostingType _ledgerPostingType, Map _dimensionMap)
    {
        LedgerVoucherTransList     ledgerVoucherTransList;
        boolean                    more;
        LedgerVoucherTransObject   ledgerTransObject;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        Amount                     ret;
        if (ledgerVoucherObject.parmGeneralJournalEntry().AccountingDate == _custVendTrans.TransDate)
        {
            ledgerVoucherTransList = ledgerVoucherObject.transactionCollection_RU();

            for (more = ledgerVoucherTransList.first(); more; more = ledgerVoucherTransList.next())
            {
                ledgerTransObject = ledgerVoucherTransList.item();
                if (ledgerTransObject)
                {
                    generalJournalAccountEntry = ledgerTransObject.parmGeneralJournalAccountEntry();

                    if (generalJournalAccountEntry.PostingType != _ledgerPostingType)
                    {
                        ret = this.addDimensionAmount(
                            currentDefaultLedgerDimension,
                            generalJournalAccountEntry.LedgerDimension,
                            generalJournalAccountEntry.TransactionCurrencyAmount,
                            _dimensionMap,
                            ret
                        );
                    }
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubledgerBonded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if subledger records associated with <c>CustTrans</c> or <c>VendTrans</c> are bonded.
    /// </summary>
    /// <param name="_custVendTrans">
    /// <c>CustTrans</c> or <c>VendTrans</c> record to be checked.
    /// </param>
    /// <param name="_ledgerPostingType">
    /// <c>LedgerPostingType</c> to be checked.
    /// </param>
    /// <param name="_currentLedger">
    /// <c>Ledger</c> record postings to which postings belong.
    /// </param>
    /// <returns>
    /// True if records bonded; otherwise, false
    /// </returns>
    protected boolean isSubledgerBonded(CustVendTrans _custVendTrans, LedgerPostingType _ledgerPostingType, Ledger _currentLedger)
    {
        SubledgerJournalAccountEntry                accountEntry;
        SubledgerJournalEntry                       entry;
        SubledgerJournalAccountEntryDistribution    accountEntryDistribution;
        SubledgerJournalAccountEntryBond            accountEntryBond;
        AccountingDistribution                      distribution;

        select count(recID) from accountEntry
            join TableId from entry
            where accountEntry.PostingType      == _ledgerPostingType
               && entry.AccountingEvent        == _custVendTrans.AccountingEvent
               && entry.RecId                  == accountEntry.SubledgerJournalEntry
               && entry.Ledger                 == _currentLedger.RecId
            join TableId from accountEntryDistribution
                where accountEntryDistribution.SubledgerJournalAccountEntry == accountEntry.RecId
            join TableId from distribution
                where distribution.RecId == accountEntryDistribution.AccountingDistribution
                   && (  sourceDocumentLine || distribution.MonetaryAmount      == monetaryAmount)
                   && (! sourceDocumentLine || distribution.SourceDocumentLine  == sourceDocumentLine.RecId)
            notExists join accountEntryBond
                where accountEntryBond.SubledgerJournalAccountEntry == accountEntry.RecId;

        return accountEntry.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimensionObtained</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event indicates ledger dimension was obtained form the source
    /// handler can override dimension
    /// </summary>
    /// <param name="_isOffset">
    ///   Is that the offset ledger dimension
    /// </param>
    /// <param name="_refDimension">
    ///   SysAnyType has a value with ledger dimension account. Handler can override it with the new value
    /// </param>
    delegate void ledgerDimensionObtained(boolean _isOffset, SysAnyType _refDimension)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
        monetaryAmount = MonetaryAmount::ExtendedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultOffsetLedgerDimension</Name>
				<Source><![CDATA[
        public LedgerDimensionAccount parmDefaultOffsetLedgerDimension(LedgerDimensionAccount _value=defaultOffsetLedgerDimension)
    {
        defaultOffsetLedgerDimension = _value;
        return defaultOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIgnoreMonetaryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets ignoreMonetaryAmount parameter.
    /// </summary>
    /// <param name="_ignoreMonetaryAmount">
    /// Parameter value.
    /// </param>
    /// <returns>
    /// Value of ignoreMonetaryAmount parameter
    /// </returns>
    /// <remarks>
    /// Parameter used to determine if <c>MonetaryAmount</c> range should be added when
    /// calculating data using subledger.
    /// </remarks>
    public boolean parmIgnoreMonetaryAmount(boolean _ignoreMonetaryAmount = ignoreMonetaryAmount)
    {
        ignoreMonetaryAmount = _ignoreMonetaryAmount;
        return ignoreMonetaryAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerVoucherObject</Name>
				<Source><![CDATA[
        public LedgerVoucherObject parmLedgerVoucherObject(LedgerVoucherObject _ledgerVoucherObject = ledgerVoucherObject)
    {
        ledgerVoucherObject = _ledgerVoucherObject;
        return ledgerVoucherObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMonetaryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monetary amount used to filter source subledger journalizer
    /// </summary>
    /// <param name="_value">
    ///   new value
    /// </param>
    /// <returns>
    ///  current value
    /// </returns>
    public MonetaryAmount parmMonetaryAmount(MonetaryAmount _value)
    {
        monetaryAmount = _value;
        return monetaryAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreferNotDistributionForOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Source subledger is unbonded and has several candidate offset transactions,
    /// prefer those, that not equal to LedgerDimension in distribution
    /// </summary>
    /// <param name="_value">
    ///   new value
    /// </param>
    /// <returns>
    ///   current value
    /// </returns>
    public boolean parmPreferNotDistributionForOffset(boolean _value = preferNotDistributionForOffset)
    {
        preferNotDistributionForOffset = _value;
        return preferNotDistributionForOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Source document line to filter source subledgers
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///   new value
    /// </param>
    /// <returns>
    ///   current value
    /// </returns>
    public SourceDocumentLine parmSourceDocumentLine(SourceDocumentLine _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;
        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///  use distribution from general journal
    /// </summary>
    /// <param name="_value">
    ///    new value
    /// </param>
    /// <returns>
    ///  current value
    /// </returns>
    public boolean parmUseGeneralJournal(boolean _value=useGeneralJournal)
    {
        useGeneralJournal = _value;
        return useGeneralJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExtensibleFactors</Name>
				<Source><![CDATA[
        protected boolean useExtensibleFactors()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static CustVendTransExchAdjDistController_RU construct()
    {
        return new CustVendTransExchAdjDistController_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>