<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostControlPostingSourceDocumentLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CostControlPostingSourceDocumentLine extends CostControlPosting
{
    SourceDocumentLineItem      sourceDocumentLineItem;
    ProjTransIdBase             transactionId;
    ProjId                      projectId;
    ProjCategoryId              categoryId;
    smmActivityNumber           activityNumber;
    LedgerDimensionAccount      ledgerDimension;
    Qty                         quantity;
    CurrencyCode                transactionCostCurrency;
    AmountCur                   transactionCurrencyCostAmount;
    AmountMST                   accountingCurrencyCostAmount;
    AmountMST                   accountingCurrencySalesAmount;
    boolean                     skipCommittedCostParameter;
    boolean                     supressMessages;
    boolean                     trackBudgetStatus;
    Voucher                     voucher;
    TransDate                   ledgerTransDate;

    ProjOpsInstrumentationLogger logger = ProjOpsInstrumentationLogger::createLogger(classStr(CostControlPostingSourceDocumentLine));
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>afterPost</Name>
				<Source><![CDATA[
    void afterPost()
{
    throw error(strFmt("@SYS22828",funcName()));
}

]]></Source>
			</Method>
			<Method>
				<Name>createCommittedCost</Name>
				<Source><![CDATA[
    public boolean createCommittedCost(InventQty _qty = this.parmQuantity(), TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
{
    if (!this.parmSourceDocumentLineItem())
    {
        throw error("@SCM:SourceDocumentLineItemDoesNotExist");
    }

    if (!super(_qty))
    {
        return false;
    }

    if (_qty == 0)
    {
        return true;
    }

    CostControlTransCommittedCost costControlTransCommittedCost = this.initCostControlTransCommittedCost(_qty);
    this.insertCostControlTransCommittedCost(costControlTransCommittedCost);

    boolean useBudgeting = ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting;

    if (useBudgeting)
    {
        SourceDocumentLineItemIProject sourceDocumentLineItemIProject = this.parmSourceDocumentLineItem() as SourceDocumentLineItemIProject;

        ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
        ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine_Virtual::construct(
                                                                  this.projTransType(),
                                                                  costControlTransCommittedCost.CommittedDate,
                                                                  costControlTransCommittedCost.ProjTransId,
                                                                  costControlTransCommittedCost.ProjId,
                                                                  costControlTransCommittedCost.CategoryId,
                                                                  costControlTransCommittedCost.Qty,
                                                                  costControlTransCommittedCost.CurrencyCode,
                                                                  costControlTransCommittedCost.Amount,
                                                                  Ledger::accountingCurrency(),
                                                                  this.parmAccountingCurrencySalesAmount(),
                                                                  costControlTransCommittedCost.SourceDocumentLine,
                                                                  costControlTransCommittedCost.ActivityNumber,
                                                                  sourceDocumentLineItemIProject.parmProjectLineProperty()
                                                                  );

        projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);

        if (this.mustUpdateBudget(projBudgetTransactionLine.costAmount(), projBudgetTransactionLine.salesAmount()))
        {
            this.parmTrackingBudgetStatus(trackBudgetStatus);

            this.budgetUpdate(
                costControlTransCommittedCost.ProjId,
                projBudgetTransaction,
                ProjBudgetAdjustmentType::Decrement,
                false,
                supressMessages);
        }
    }
    else
    {
        if (this.mustUpdateForecast(costControlTransCommittedCost.Qty) && costControlTransCommittedCost.ProjTransType != ProjTransType::Revenue)
        {
            this.forecastUpdate(costControlTransCommittedCost, costControlTransCommittedCost.Qty, costControlTransCommittedCost.Amount);
        }
    }

    return true;
}

]]></Source>
			</Method>
			<Method>
				<Name>initCostControlTransCommittedCost</Name>
				<Source><![CDATA[
	/// <summary>
    /// Initializes the <c>CostControlTransCommittedCost</c> record.
	/// </summary>
    /// <param name = "_qty">The <c>InventQty</c> to be set on the <c>CostControlTransCommittedCost</c> record</param>
    /// <returns>A <c>CostControlTransCommittedCost</c> record.</returns>
    protected CostControlTransCommittedCost initCostControlTransCommittedCost(InventQty _qty)
    {
        CostControlTransCommittedCost costControlTransCommittedCost = this.initializeCostControlTransCommittedCost(_qty, this.parmSourceDocumentLineItem().parmAccountingDate());

        costControlTransCommittedCost.ProjTransId =   this.projTransId();
        costControlTransCommittedCost.SourceDocumentLine = this.parmSourceDocumentLineItem().parmSourceDocumentLine().RecId;
        costControlTransCommittedCost.ProjId = this.parmProjectId();
        costControlTransCommittedCost.ProjType = ProjTable::find(costControlTransCommittedCost.ProjId).Type;
        costControlTransCommittedCost.CategoryId = this.parmCategoryId();
        costControlTransCommittedCost.ActivityNumber = this.parmActivityNumber();
        costControlTransCommittedCost.LedgerDimension = this.parmLedgerDimension();
        costControlTransCommittedCost.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(this.parmLedgerDimension());
        costControlTransCommittedCost.CurrencyCode = this.parmTransactionCostCurrency();
		
		costControlTransCommittedCost.CommittedCostOrig = ProjectSourceDocumentLineItemHelper::committedCostOrig(sourceDocumentLineItem);

        SourceDocument sourceDocument = this.parmSourceDocumentLineItem().parmSourceDocument();
        costControlTransCommittedCost.RefId = sourceDocument.parmDocumentNumber();
        costControlTransCommittedCost.LineNum = this.parmSourceDocumentLineItem().parmLineNum();
        if (ProjectSourceDocumentLineItemHelper::projTransType(sourceDocumentLineItem) == ProjTransType::Item)
        {
            if (!(this.parmSourceDocumentLineItem() is SourceDocumentLineItemIProduct))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            SourceDocumentLineItemIProduct sourceDocumentLineItemIProduct = this.parmSourceDocumentLineItem() as SourceDocumentLineItemIProduct;

            if (this.parmSourceDocumentLineItem() is SourceDocumentLineItemIInventory)
            {
                SourceDocumentLineItemIInventory sourceDocumentLineItemIInventory = this.parmSourceDocumentLineItem() as SourceDocumentLineItemIInventory;
                costControlTransCommittedCost.InventTransId = sourceDocumentLineItemIInventory.parmLotId();
            }

            costControlTransCommittedCost.EmplItemId = sourceDocumentLineItemIProduct.parmItemId();
        }
        else
        {
            SourceDocumentLineItemIProject sourceDocumentLineItemIProject = this.parmSourceDocumentLineItem() as SourceDocumentLineItemIProject;

            costControlTransCommittedCost.Resource = sourceDocumentLineItemIProject.parmProjectResourceRecId();
            costControlTransCommittedCost.ResourceCategory = sourceDocumentLineItemIProject.parmProjectResourceCategoryRecId();
        }
        CustVendAC vendAccount = ProjectSourceDocumentLineItemHelper::vendAccount(this.parmSourceDocumentLineItem());

        costControlTransCommittedCost.VendAccount = vendAccount;
        costControlTransCommittedCost.Amount = this.parmTransactionCurrencyCostAmount();
        costControlTransCommittedCost.AmountMst = this.parmAccountingCurrencyCostAmount();

        return costControlTransCommittedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCostControlTransCommittedCost</Name>
				<Source><![CDATA[
    protected void insertCostControlTransCommittedCost(CostControlTransCommittedCost _costControlTransCommittedCost)
    {
        super(_costControlTransCommittedCost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActionType</Name>
				<Source><![CDATA[
    public ProjCommittedCostUpdateAction getActionType()
{
    throw error(strFmt("@SYS22828",funcName()));
}

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateBudget</Name>
				<Source><![CDATA[
    /// <summary>
///    Validates the cost and sales amounts of a transaction if a budget update is required.
/// </summary>
/// <param name="_costAmount">
///    The cost amount of the transaction.
/// </param>
/// <param name="_salesAmount">
///    The sales amount of the transaction.
/// </param>
/// <returns>
///    true if the amounts are valid; otherwise, false.
/// </returns>
public boolean mustUpdateBudget(AmountCur _costAmount = 0, AmountCur _salesAmount = 0)
{
    boolean ret = true;

    if (actionType == ProjCommittedCostUpdateAction::Create && _costAmount == 0 && _salesAmount == 0)
        ret = false;

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateForecast</Name>
				<Source><![CDATA[
    public boolean mustUpdateForecast(Qty _qty)
{
    if (actionType == ProjCommittedCostUpdateAction::Create && _qty < 0)
        return false;

    if ((actionType == ProjCommittedCostUpdateAction::UpdateReverse || actionType== ProjCommittedCostUpdateAction::Delete) && _qty < 0)
        return false;

    return true;

}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
{
}

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyCostAmount</Name>
				<Source><![CDATA[
    private AmountMST parmAccountingCurrencyCostAmount(AmountMST _accountingCurrencyCostAmount = accountingCurrencyCostAmount)
{
    accountingCurrencyCostAmount = _accountingCurrencyCostAmount;

    return accountingCurrencyCostAmount;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencySalesAmount</Name>
				<Source><![CDATA[
    private AmountMST parmAccountingCurrencySalesAmount(AmountMST _accountingCurrencySalesAmount = accountingCurrencySalesAmount)
{
    accountingCurrencySalesAmount = _accountingCurrencySalesAmount;

    return accountingCurrencySalesAmount;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityNumber</Name>
				<Source><![CDATA[
    private smmActivityNumber parmActivityNumber(smmActivityNumber _activityNumber = activityNumber)
{
    activityNumber = _activityNumber;

    return activityNumber;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryId</Name>
				<Source><![CDATA[
    private ProjCategoryId parmCategoryId(ProjCategoryId _categoryId = categoryId)
{
    categoryId = _categoryId;

    return categoryId;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount parmLedgerDimension(LedgerDimensionAccount _ledgerDimension = ledgerDimension)
{
    ledgerDimension = _ledgerDimension;

    return ledgerDimension;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerTransDate</Name>
				<Source><![CDATA[
    private TransDate parmLedgerTransDate(TransDate _ledgerTransDate = ledgerTransDate)
{
    ledgerTransDate = _ledgerTransDate;

    return ledgerTransDate;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    private ProjId parmProjectId(ProjId _projectId = projectId)
{
    projectId = _projectId;

    return projectId;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    private Qty parmQuantity(Qty _quantity = quantity)
{
    quantity = _quantity;

    return quantity;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCommittedCostParameter</Name>
				<Source><![CDATA[
    public boolean parmSkipCommittedCostParameter(boolean _skipCommittedCostParameter = skipCommittedCostParameter)
{
    skipCommittedCostParameter = _skipCommittedCostParameter;

    return skipCommittedCostParameter;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLineItem</Name>
				<Source><![CDATA[
    private SourceDocumentLineItem parmSourceDocumentLineItem(SourceDocumentLineItem _sourceDocumentLineItem = sourceDocumentLineItem)
{
    sourceDocumentLineItem = _sourceDocumentLineItem;

    return sourceDocumentLineItem;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmSupressMessages</Name>
				<Source><![CDATA[
    public boolean parmSupressMessages(boolean _supressMessages = supressMessages)
{
    supressMessages = _supressMessages;

    return supressMessages;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackBudgetStatus</Name>
				<Source><![CDATA[
    public boolean parmTrackBudgetStatus(boolean _trackBudgetStatus = trackBudgetStatus)
{
    trackBudgetStatus = _trackBudgetStatus;

    return trackBudgetStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCostCurrency</Name>
				<Source><![CDATA[
    private CurrencyCode parmTransactionCostCurrency(CurrencyCode _transactionCostCurrency = transactionCostCurrency)
{
    transactionCostCurrency = _transactionCostCurrency;

    return transactionCostCurrency;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCostAmount</Name>
				<Source><![CDATA[
    private AmountCur parmTransactionCurrencyCostAmount(AmountCur _transactionCurrencyCostAmount = transactionCurrencyCostAmount)
{
    transactionCurrencyCostAmount = _transactionCurrencyCostAmount;

    return transactionCurrencyCostAmount;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionId</Name>
				<Source><![CDATA[
    private ProjTransIdBase parmTransactionId(ProjTransIdBase _transactionId = transactionId)
{
    transactionId = _transactionId;

    return transactionId;
}

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    private Voucher parmVoucher(Voucher _voucher = voucher)
{
    voucher = _voucher;

    return voucher;
}

]]></Source>
			</Method>
			<Method>
				<Name>projTransId</Name>
				<Source><![CDATA[
    public TransactionID projTransId()
{
    return this.parmTransactionId();
}

]]></Source>
			</Method>
			<Method>
				<Name>projTransType</Name>
				<Source><![CDATA[
    public ProjTransType projTransType()
{
    if (!this.parmSourceDocumentLineItem())
    {
        throw error("@SCM:SourceDocumentLineItemDoesNotExist");
    }

    return ProjectSourceDocumentLineItemHelper::projTransType(this.parmSourceDocumentLineItem());
}

]]></Source>
			</Method>
			<Method>
				<Name>remainQty</Name>
				<Source><![CDATA[
    public InventQty remainQty()
{
    throw error(strFmt("@SYS22828",funcName()));
}

]]></Source>
			</Method>
			<Method>
				<Name>reverseCommittedCost</Name>
				<Source><![CDATA[
    public boolean reverseCommittedCost(NoYes isInvoiced)
{
    ProjOpsBudgetingInstrumentationActivites activity = ProjOpsBudgetingInstrumentationActivites::construct(logger);
    using (SysInstrumentationActivityContext activityContext = activity.activityContext(ProjOpsBudgetingInstrumentationActivites::ReverseCommittedCost))
        {
            PurchOrderLineSourceDocumentLineItem purchOrderLineSourceDocumentLineItem;            

            if (!super(isInvoiced)) {
                activityContext.addCustomProperty(ProjOpsBudgetingInstrumentationActivites::IsInvoicedProperty, any2Str(NoYes::No));
				return false;
			}

            NoYes localIsInvoiced;
            if (this.parmVoucher() && this.parmLedgerTransDate())
            {
                localIsInvoiced = NoYes::Yes;
            }

            CostControlTransCommittedCost costControlTransCommittedCost;
            while select forupdate costControlTransCommittedCost
				where costControlTransCommittedCost.ProjTransId == this.projTransId()
            {                
                // update the voucher/ledger information; not overwrite if partially invoice
                if (localIsInvoiced == NoYes::Yes && !costControlTransCommittedCost.Voucher)
                {
                    costControlTransCommittedCost.Voucher = this.parmVoucher();
                }

                // Clear the open
                if (costControlTransCommittedCost.Open == NoYes::Yes)
                {
                    costControlTransCommittedCost.Open = NoYes::No;
                    costControlTransCommittedCost.Reverse = NoYes::No;
                        
                    if (sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem
						|| sourceDocumentLineItem is BudgetReservationSourceDocumentLineItem_PSN)
                    {
                        AccountingDate closingDate;

                        if (sourceDocumentLineItem is PurchOrderLineSourceDocumentLineItem)
                        {
                            purchOrderLineSourceDocumentLineItem = sourceDocumentLineItem;
                            closingDate = purchOrderLineSourceDocumentLineItem.parmClosingDate();
                        }
                        else if (SourceDocumentLineItem is BudgetReservationSourceDocumentLineItem_PSN)
                        {
                            BudgetReservationSourceDocumentLineItem_PSN budgetReservationSourceDocumentLineItem = sourceDocumentLineItem;
                            closingDate = budgetReservationSourceDocumentLineItem.parmClosingDate();
                        }

                        if (sourceDocumentLineItem && closingDate)
                        {
                            CostControlTransCommittedCost costControlTransCommittedCostReverse;
                            costControlTransCommittedCostReverse.data(costControlTransCommittedCost);
                            costControlTransCommittedCostReverse.CommittedDate = closingDate;
                            CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCostReverse, localIsInvoiced, this.parmVoucher(), 0, this.parmLedgerTransDate());
                        }
                        else
                        {
                            CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, localIsInvoiced, this.parmVoucher(), 0, this.parmLedgerTransDate());
                        }
                    }
                    else
                    {
                        CostControlTransCommittedCost::addNegativeRecord(costControlTransCommittedCost, localIsInvoiced, this.parmVoucher(), 0, this.parmLedgerTransDate());
                    }

                    if (ProjTable::find(costControlTransCommittedCost.ProjId).UseBudgeting)
                    {
                        if (this.mustUpdateBudget())
                        {
                            ProjBudgetReductionHistory projBudgetReductionHistory;
                            select SalesAmountReduced from projBudgetReductionHistory where projBudgetReductionHistory.ProjTransId == this.projTransId();

                            SourceDocumentLineItemIProject sourceDocumentLineItemIProject = this.parmSourceDocumentLineItem() as SourceDocumentLineItemIProject;
                            ProjBudgetTransactionLine projBudgetTransactionLine = ProjBudgetTransactionLine_Virtual::construct(
                                                                              costControlTransCommittedCost.ProjTransType,
                                                                              costControlTransCommittedCost.CommittedDate,
                                                                              costControlTransCommittedCost.ProjTransId,
                                                                              costControlTransCommittedCost.ProjId,
                                                                              costControlTransCommittedCost.CategoryId,
                                                                              costControlTransCommittedCost.Qty,
                                                                              costControlTransCommittedCost.CurrencyCode,
                                                                              costControlTransCommittedCost.Amount,
                                                                              Ledger::accountingCurrency(),
                                                                              projBudgetReductionHistory.SalesAmountReduced,
                                                                              costControlTransCommittedCost.SourceDocumentLine,
                                                                              costControlTransCommittedCost.ActivityNumber,
                                                                              sourceDocumentLineItemIProject.parmProjectLineProperty());

                            ProjBudgetTransaction projBudgetTransaction = new ProjBudgetTransaction();
                            projBudgetTransaction.addBudgetTransactionLine(projBudgetTransactionLine);

                            this.parmTrackingBudgetStatus(trackBudgetStatus);

                            this.budgetUpdate(
                            costControlTransCommittedCost.ProjId,
                            projBudgetTransaction,
                            ProjBudgetAdjustmentType::Increment,
                            false,
                            supressMessages);
                        }
                    }
                    else
                    {
                        if (this.mustUpdateForecast(costControlTransCommittedCost.Qty) && costControlTransCommittedCost.ProjTransType != ProjTransType::Revenue)
                        {
                            this.forecastUpdate(costControlTransCommittedCost,
                                        -costControlTransCommittedCost.Qty,
                                        -costControlTransCommittedCost.Amount);
                        }
                    }
                }
                activity.instrumentCostControlTransCommittedCostForContext(activityContext, costControlTransCommittedCost);
                costControlTransCommittedCost.update();
            }

            return true;
        }
}

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run(ProjCommittedCostUpdateAction _actionType = ProjCommittedCostUpdateAction::Unknown)
{
    if (_actionType == ProjCommittedCostUpdateAction::Unknown ||
        _actionType == ProjCommittedCostUpdateAction::UpdateOnly ||
        _actionType == ProjCommittedCostUpdateAction::Post)
    {
        throw error(strFmt("@SYS22828", funcName()));
    }

    super(_actionType);
}

]]></Source>
			</Method>
			<Method>
				<Name>updateCommittedCost</Name>
				<Source><![CDATA[
    public void updateCommittedCost()
{
    throw error(strFmt("@SYS22828",funcName()));
}

]]></Source>
			</Method>
			<Method>
				<Name>validateCreate</Name>
				<Source><![CDATA[
    public boolean validateCreate()
{
    if (!this.parmSourceDocumentLineItem())
    {
        throw error("@SCM:SourceDocumentLineItemDoesNotExist");
    }

    boolean ret = super();

    if (ret && !this.parmSkipCommittedCostParameter())
    {
        ret = ProjectCommitmentFacade::parmCanBookCommitments(this.parmSourceDocumentLineItem(), curext());
    }

    return ret;
}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostControlPosting construct(
    SourceDocumentLineItem      _sourceDocumentLineItem,
    ProjTransIdBase             _transactionId,
    ProjId                      _projectId,
    ProjCategoryId              _categoryId,
    smmActivityNumber           _activityNumber,
    LedgerDimensionAccount      _ledgerDimension,
    Qty                         _quantity,
    CurrencyCode                _transactionCostCurrency,
    AmountCur                   _transactionCurrencyCostAmount,
    AmountMST                   _accountingCurrencyCostAmount,
    AmountMST                   _accountingCurrencySalesAmount,
    Voucher                     _voucher = '',
    TransDate                   _ledgerTransDate = dateNull()
)
{
    if (!_transactionId ||
        !_projectId ||
        !_categoryId ||
        !_transactionCostCurrency)
    {
        throw error(strFmt("@SYS22828", funcName()));
    }

    CostControlPostingSourceDocumentLine costControlPostingSourceDocumentLine = new CostControlPostingSourceDocumentLine();

    costControlPostingSourceDocumentLine.parmSourceDocumentLineItem(_sourceDocumentLineItem);
    costControlPostingSourceDocumentLine.parmTransactionId(_transactionId);
    costControlPostingSourceDocumentLine.parmProjectId(_projectId);
    costControlPostingSourceDocumentLine.parmCategoryId(_categoryId);
    costControlPostingSourceDocumentLine.parmActivityNumber(_activityNumber);
    costControlPostingSourceDocumentLine.parmLedgerDimension(_ledgerDimension);
    costControlPostingSourceDocumentLine.parmQuantity(_quantity);
    costControlPostingSourceDocumentLine.parmTransactionCostCurrency(_transactionCostCurrency);
    costControlPostingSourceDocumentLine.parmTransactionCurrencyCostAmount(_transactionCurrencyCostAmount);
    costControlPostingSourceDocumentLine.parmAccountingCurrencyCostAmount(_accountingCurrencyCostAmount);
    costControlPostingSourceDocumentLine.parmAccountingCurrencySalesAmount(_accountingCurrencySalesAmount);
    costControlPostingSourceDocumentLine.parmVoucher(_voucher);
    costControlPostingSourceDocumentLine.parmLedgerTransDate(_ledgerTransDate);

    return costControlPostingSourceDocumentLine;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>