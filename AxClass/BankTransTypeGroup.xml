<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankTransTypeGroup</Name>
	<SourceCode>
		<Declaration><![CDATA[
//this class must have RunOn property set to "Called From"
//to correct work on form as well as bank reports
//because method "calcUnpostedOperations_RU" works with filled cursor
public class BankTransTypeGroup
{
    TmpBankTransTypeSum     tmpBankTransTypeSum;
    BankAccountStatement    bankAccountStatement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankTransTypeSum</Name>
				<Source><![CDATA[
    TmpBankTransTypeSum bankTransTypeSum()
    {
        return tmpBankTransTypeSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankGroupSums</Name>
				<Source><![CDATA[
    public AmountCur createBankGroupSums()
    {
        AmountCur                   totalAmount;
        BankAccountTrans            bankAccountTrans;
        BankTransTypeGroupDetails   bankTransGroupDetails;

        // <GEERU>
        AmountCur                           tmpAmount;
        LedgerJournalTrans                  ledgerJournalTrans;
        LedgerJournalTable                  ledgerJournalTable;
        KeySum                              transGroupAmounts;
        int                                 i;
        container                           tmpCon;
        DimensionAttributeValueCombination  dimAttrValueCombo;

        #ISOCountryRegionCodes
        // </GEERU>

        tmpBankTransTypeSum = null;

        while select sum(AmountCur), sum(AmountCorrect), count(AmountMST) from bankAccountTrans
            where bankAccountTrans.AccountId             == bankAccountStatement.AccountId
                && bankAccountTrans.AccountStatement     == bankAccountStatement.AccountStatementNum
                && bankAccountTrans.AccountStatementDate == bankAccountStatement.AccountStatementDate
        outer join bankTransGroupDetails
            group by BankTransactionTypeGroup
            where bankTransGroupDetails.BankTransactionType == bankAccountTrans.BankTransType
        {
            totalAmount += (bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect);
            this.insertBankTransTypeSum(bankAccountTrans, bankTransGroupDetails.BankTransactionTypeGroup);
        }

        // <GEERU>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            select sum(AmountCur), sum(AmountCorrect) from  bankAccountTrans
                where bankAccountTrans.AccountId            == bankAccountStatement.AccountId           &&
                      bankAccountTrans.AccountStatement     == bankAccountStatement.AccountStatementNum &&
                      bankAccountTrans.AccountStatementDate == bankAccountStatement.AccountStatementDate;

            totalAmount = bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;

            select ledgerJournalTrans
                where ledgerJournalTrans.OffsetAccountType  == LedgerJournalACType::Bank
                   && ledgerJournalTrans.PaymentStatus      == CustVendPaymStatus::Confirmed
            join RecId from dimAttrValueCombo
                where dimAttrValueCombo.RecId               == ledgerJournalTrans.OffsetLedgerDimension
                   && dimAttrValueCombo.DisplayValue        == bankAccountStatement.AccountId
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum         == ledgerJournalTrans.JournalNum
                   && ledgerJournalTable.Posted             == NoYes::No;

            [tmpAmount, i, tmpCon] = BankTransTypeGroup::calcUnpostedOperations_RU(ledgerJournalTrans,
                                                                                   bankAccountStatement.CurrencyCode);
            totalAmount += tmpAmount;

            transGroupAmounts = KeySum::construct(1, 2);
            transGroupAmounts.import(tmpCon);

            for (i = 1; i <= transGroupAmounts.numOfTrans(); i ++)
            {
                tmpCon = transGroupAmounts.index2Data(i);
                this.insertOrUpdateBankTransTypeSum_RU(transGroupAmounts.index2Key(i),
                                                       conpeek(tmpCon, 1),
                                                       conpeek(tmpCon, 2));
            }
        }

        // </GEERU>
        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBankTransTypeSum</Name>
				<Source><![CDATA[
    void insertBankTransTypeSum(BankAccountTrans            _bankAccountTrans,
                                BankTransactionTypeGroup    _bankTransactionTypeGroup)
    {
        tmpBankTransTypeSum.clear();
        tmpBankTransTypeSum.AccountId                = bankAccountStatement.AccountId;
        tmpBankTransTypeSum.AccountStatementDate     = bankAccountStatement.AccountStatementDate;
        tmpBankTransTypeSum.BankTransactionTypeGroup = _bankTransactionTypeGroup;
        tmpBankTransTypeSum.ClearedAmountCur         = _bankAccountTrans.AmountCur + _bankAccountTrans.AmountCorrect;
        tmpBankTransTypeSum.Lines                    = any2int(_bankAccountTrans.AmountMST);
        tmpBankTransTypeSum.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateBankTransTypeSum_RU</Name>
				<Source><![CDATA[
    private void insertOrUpdateBankTransTypeSum_RU(BankTransactionTypeGroup    _bankTransactionTypeGroup,
                                                   AmountCur                   _amountCur,
                                                   int                         _numOfTrans)
    {
        select firstonly tmpBankTransTypeSum
            where tmpBankTransTypeSum.BankTransactionTypeGroup == _bankTransactionTypeGroup;

        if (tmpBankTransTypeSum.RecId)
        {
            tmpBankTransTypeSum.ClearedAmountCur += _amountCur;
            tmpBankTransTypeSum.Lines            += _numOfTrans;
            tmpBankTransTypeSum.update();
        }
        else
        {
            tmpBankTransTypeSum.clear();
            tmpBankTransTypeSum.AccountId                = bankAccountStatement.AccountId;
            tmpBankTransTypeSum.AccountStatementDate     = bankAccountStatement.AccountStatementDate;
            tmpBankTransTypeSum.BankTransactionTypeGroup = _bankTransactionTypeGroup;
            tmpBankTransTypeSum.ClearedAmountCur         = _amountCur;
            tmpBankTransTypeSum.Lines                    = _numOfTrans;
            tmpBankTransTypeSum.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(BankAccountStatement _bankAccountStatement)
    {
        bankAccountStatement = _bankAccountStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUnpostedOperations_RU</Name>
				<Source><![CDATA[
    // parameter _ledgerJournalTrans must be a filled cursor
    // Run mode - Called from
    public static container calcUnpostedOperations_RU(LedgerJournalTrans _ledgerJournalTrans,
                                                      CurrencyCode       _currencyCode)
    {
        KeySum                      transGroupAmounts;
        AmountCur                   totalAmount, tmpAmount;
        BankTransTypeGroupDetails   bankTransGroupDetails;
        int                         totalCount;
        boolean                     groupFound;

        transGroupAmounts = KeySum::construct(1, 2);

        while (_ledgerJournalTrans)
        {
            tmpAmount = - _ledgerJournalTrans.calcBankAmount_RU(_currencyCode);
            totalCount ++;

            groupFound = false;

            if (_ledgerJournalTrans.BankTransType)
            {
                while select BankTransactionTypeGroup from bankTransGroupDetails
                    where bankTransGroupDetails.BankTransactionType == _ledgerJournalTrans.BankTransType
                {
                    transGroupAmounts.updateNow(bankTransGroupDetails.BankTransactionTypeGroup, [tmpAmount, 1]);
                    groupFound = true;
                }
            }

            if (!groupFound)
            {
                transGroupAmounts.updateNow('', [tmpAmount, 1]);
            }

            totalAmount += tmpAmount;

            next _ledgerJournalTrans;
        }

        return [totalAmount, totalCount, transGroupAmounts.export()];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>