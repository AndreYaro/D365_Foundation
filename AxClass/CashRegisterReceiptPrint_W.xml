<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashRegisterReceiptPrint_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Class <c>CashRegisterReceiptPrint_W</c> contains methods for printing Cash Receipts.
/// </summary>
public class CashRegisterReceiptPrint_W extends RunBase
{
    private const str cashReceiptModelName = 'CashReceiptModel';
    private const str cashReceiptPrintingModeName = 'ReceiptPrintMode';

    LedgerJournalTrans ledgerJournalTrans;
    CustTrans custTrans;
    CashRegisterFiscalTrans_W cashRegisterFiscalTrans_W;
    Args args;
    PrintCopyOriginal printMode;
    PaidDocumentsTmp paidDocuments;

    Query queryLedgerJournalTrans;
    Query queryCustTrans;
    Query queryCashRegisterFiscalTrans_W;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCashRegisterFiscalTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CashRegisterFiscalTrans_W</c> parameter.
    /// </summary>
    /// <param name = "_cashRegisterFiscalTrans_W">New value of <c>CashRegisterFiscalTrans_W</c>.</param>
    /// <returns>Current <c>CashRegisterFiscalTrans_W</c> object.</returns>
    public CashRegisterFiscalTrans_W parmCashRegisterFiscalTrans_W(CashRegisterFiscalTrans_W _cashRegisterFiscalTrans_W)
    {
        cashRegisterFiscalTrans_W = _cashRegisterFiscalTrans_W;
        return cashRegisterFiscalTrans_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustTrans</c> parameter.
    /// </summary>
    /// <param name = "_custTrans">New value of <c>CustTrans</c>.</param>
    /// <returns>Current <c>CustTrans</c> object.</returns>
    public CustTrans parmCustTrans(CustTrans _custTrans)
    {
        custTrans = _custTrans;
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>Args</c> parameter.
    /// </summary>
    /// <param name = "_args">New value of <c>Args</c>.</param>
    /// <returns>Current value of arguments.</returns>
    public Args parmArgs(Args _args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>LedgerJournalTrans</c> parameter.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">New value of <c>LedgerJournalTrans</c>.</param>
    /// <returns>Current <c>ledgerJournalTrans</c> object</returns>
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpPaidDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selecte data form <c>PaidDocumentsTmp</c>.
    /// </summary>
    /// <returns>
    /// Data from <c>PaidDocumentsTmp</c> temporary table.
    /// </returns>
    public PaidDocumentsTmp getTmpPaidDocuments()
    {
        select paidDocuments;
        return paidDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates parameters, which will be used in GER-configurations for Cash Receipt.
    /// </summary>
    /// <returns>Parameters for GER-configuration.</returns>
    private ERModelDefinitionParamsUIActionComposite createParameters()
    {
        ERModelDefinitionParamsUIActionComposite parameters = new ERModelDefinitionParamsUIActionComposite();
        ERModelDefinitionDatabaseContext context = new ERModelDefinitionDatabaseContext();

        if (queryLedgerJournalTrans)
        {
            context.addQuery(tableNum(LedgerJournalTrans), queryLedgerJournalTrans);
        }

        if (queryCustTrans)
        {
            context.addQuery(tableNum(CustTrans), queryCustTrans)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext());
        }

        if (queryCashRegisterFiscalTrans_W)
        {
            context.addQuery(tableNum(CashRegisterFiscalTrans_W), queryCashRegisterFiscalTrans_W)
                .addValue(tableNum(CashRegisterFiscalTransCode_W), fieldNum(CashRegisterFiscalTransCode_W, FiscalTrans), cashRegisterFiscalTrans_W.RecId)
                .addValue(tableNum(CashRegisterFiscalTransTax_W), fieldNum(CashRegisterFiscalTransTax_W, FiscalTrans), cashRegisterFiscalTrans_W.RecId);
        }

        parameters.add(context);
        parameters.add(new ERModelDefinitionInputParametersAction()
                            .addParameter(ERPath::combine(cashReceiptModelName, cashReceiptPrintingModeName), printMode));
        
        var paidDocs = new ERModelDefinitionDatabaseContext().addTemporaryTable(this.getTmpPaidDocuments());
        parameters.add(paidDocs);
        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs GER-configuration for Cash Receipt.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Cash transaction for which receipt is requested wasn't registered in Fiscal Service.
    /// </exception>
    public void run()
    {
        super();

        this.preinit();

        if (cashRegisterFiscalTrans_W.Status != CashRegisterFiscalTransStatus_W::Registered)
        {
            throw error(strFmt("@FiscalServices:AS_RegisterReceipPrint_WClsss_Methodmain_Error"));
        }

        ERFormatMappingId formatMappingId = cashRegisterFiscalTrans_W.terminal().register().ReceiptFormatId;
        ERModelDefinitionParamsUIActionComposite parameters = this.createParameters();
        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId);
        formatMappingRun.parmShowPromptDialog(false);
        formatMappingRun.withParameter(parameters);
        formatMappingRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runElectronicReporting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs GER-configuration for Cash Receipt.
    /// Saves output of GER-configuration in remote repository.
    /// </summary>
    /// <param name="__cashRegisterFiscalTrans_W">
    /// <c>CashRegisterFiscalTrans_W</c> for which cash receipt should be printed.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Cash transaction for which receipt is requested wasn't registered in Fiscal Service.
    /// </exception>
    public str runElectronicReporting(CashRegisterFiscalTrans_W _cashRegisterFiscalTrans_W)
    {
        this.preinit();

        if (cashRegisterFiscalTrans_W.Status != CashRegisterFiscalTransStatus_W::Registered)
        {
            throw error(strFmt("@FiscalServices:AR_RegisterReceipPrint_WClsss_Methodmain_Error"));
        }

        ERFormatMappingId formatMappingId = cashRegisterFiscalTrans_W.terminal().register().ReceiptFormatId;
        ERIFormatMappingRun formatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(formatMappingId);
        ERModelDefinitionParamsUIActionComposite parameters = this.createParameters();
        ERFormatDestinationTable formatDestinationTable;
        select firstonly formatDestinationTable
            where formatDestinationTable.Format == formatMappingId;

        if (!formatDestinationTable)
        {
            var fileDestination = ERObjectsFactory::createFileDestinationAttachmentWithOtherDocuType(_cashRegisterFiscalTrans_W);
            formatMappingRun.withFileDestination(fileDestination);
        }
        formatMappingRun.parmShowPromptDialog(false);
        formatMappingRun.withParameter(parameters);
        return formatMappingRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes queries ranges.
    /// </summary>
    protected void initQueryRanges()
    {
        if (ledgerJournalTrans)
        {
            QueryBuildDataSource qbdsLedgerJournalTrans;
            queryLedgerJournalTrans = new Query();
            qbdsLedgerJournalTrans = queryLedgerJournalTrans.addDataSource(tablenum(LedgerJournalTrans));
            findOrCreateRange_W(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, JournalNum), ledgerJournalTrans.JournalNum);
            findOrCreateRange_W(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, Voucher), ledgerJournalTrans.Voucher);
            findOrCreateRange_W(qbdsLedgerJournalTrans, fieldNum(LedgerJournalTrans, TransDate), queryValue(ledgerJournalTrans.TransDate));
        }
        if (custTrans)
        {
            QueryBuildDataSource qbdsCustTrans;
            queryCustTrans = new Query();
            qbdsCustTrans = queryCustTrans.addDataSource(tablenum(CustTrans));
            findOrCreateRange_W(qbdsCustTrans, fieldNum(CustTrans, Voucher), custTrans.Voucher);
            findOrCreateRange_W(qbdsCustTrans, fieldNum(CustTrans, TransDate), queryValue(custTrans.TransDate));

            CustTrans custTransInvoice;
            CustSettlement custSettlement;

            while select TableId from custSettlement
                where custSettlement.TransRecId == custTrans.RecId
                    && custSettlement.TransCompany == custTrans.company()
                    && custSettlement.AccountNum == custTrans.AccountNum
                    && custSettlement.CanBeReversed == NoYes::Yes
                join custTransInvoice
                    where custTransInvoice.RecId == custSettlement.OffsetRecid
            {
                ttsbegin;

                paidDocuments.Invoice = custTransInvoice.Invoice;
                paidDocuments.TransDate = custTransInvoice.TransDate;
                paidDocuments.insert();

                ttscommit;
            }
        }

        if (cashRegisterFiscalTrans_W)
        {
            QueryBuildDataSource qbdsCashRegisterFiscalTrans;
            queryCashRegisterFiscalTrans_W = new Query();
            qbdsCashRegisterFiscalTrans = queryCashRegisterFiscalTrans_W.addDataSource(tablenum(CashRegisterFiscalTrans_W));
            findOrCreateRange_W(qbdsCashRegisterFiscalTrans, fieldNum(CashRegisterFiscalTrans_W, Voucher), cashRegisterFiscalTrans_W.Voucher);
            findOrCreateRange_W(qbdsCashRegisterFiscalTrans, fieldNum(CashRegisterFiscalTrans_W, TransDate), queryValue(cashRegisterFiscalTrans_W.TransDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablesFromCashRegisterFiscalTrans_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes related tables from <c>CashRegisterFiscalTrans_W</c>.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The mandatory parameters are missing.
    /// </exception>
    private void initTablesFromCashRegisterFiscalTrans_W()
    {
        if (!cashRegisterFiscalTrans_W)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        select firstonly custTrans
            where custTrans.Voucher == cashRegisterFiscalTrans_W.Voucher
                && custTrans.TransDate == cashRegisterFiscalTrans_W.TransDate;
            
        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.Voucher == cashRegisterFiscalTrans_W.Voucher
                && LedgerJournalTrans.TransDate == cashRegisterFiscalTrans_W.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablesFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes related tables from <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The mandatory parameters are missing.
    /// </exception>
    private void initTablesFromLedgerJournalTrans()
    {
        if (!ledgerJournalTrans)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        select firstonly cashRegisterFiscalTrans_W
            where cashRegisterFiscalTrans_W.Voucher == ledgerJournalTrans.Voucher
                &&  CashRegisterFiscalTrans_W.TransDate == ledgerJournalTrans.TransDate;

        select firstonly custTrans
            where custTrans.Voucher == ledgerJournalTrans.Voucher
                && custTrans.TransDate == ledgerJournalTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTablesFromCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes related tables from <c>CustTrans</c>.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The mandatory parameters are missing.
    /// </exception>
    private void initTablesFromCustTrans()
    {
        if (!custTrans)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        select firstonly cashRegisterFiscalTrans_W
            where cashRegisterFiscalTrans_W.Voucher == custTrans.Voucher
                && cashRegisterFiscalTrans_W.TransDate == custTrans.TransDate;

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.Voucher == custTrans.Voucher
                && ledgerJournalTrans.TransDate == custTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preinit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts initiation procedure - filles <c>LedgerJournalTrans</c>,
    /// <c>CustTrans</c>, <c>CashRegisterFiscalTrans_W</c>, set ups print mode,
    /// initializes queries for GER-formats.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// The mandatory parameters are missing.
    /// </exception>
    private void preinit()
    {
        if (!args)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        switch (args.dataset())
        {
            case tableNum(LedgerJournalTrans):
                this.parmLedgerJournalTrans(args.record());
                this.initTablesFromLedgerJournalTrans();
                break;

            case tableNum(CustTrans):
                this.parmCustTrans(args.record());
                this.initTablesFromCustTrans();
                break;

            case tableNum(CashRegisterFiscalTrans_W):
                this.parmCashRegisterFiscalTrans_W(args.record());
                this.initTablesFromCashRegisterFiscalTrans_W();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        printMode = PrintCopyOriginal::Original;
        if (args.parmEnumType() == enumNum(PrintCopyOriginal))
        {
            switch(args.parmEnum())
            {
                case PrintCopyOriginal::Copy:
                    printMode = PrintCopyOriginal::Copy;
                    break;

                case PrintCopyOriginal::Original:
                    printMode = PrintCopyOriginal::Original;
                    break;

                default:
                    break;
            }
        }
        this.initQueryRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CashRegisterReceiptPrint_W printReceipt = new CashRegisterReceiptPrint_W();
        printReceipt.parmArgs(_args);

        printReceipt.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>