<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollEarningReleaseForPayment</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollEarningReleaseForPayment</c> class is a wrapper class around the <c>PayrollEarningReleaseForPaymentTask</c> class
/// to provide a dialog to process the earning statement to release for payment or to hold from payment.
/// </summary>
class PayrollEarningReleaseForPayment extends PayrollStatementGeneration implements BatchRetryable
{
    PayrollEarningPaymentProcessingAction  payrollEarningPaymentProcessingAction;
    boolean     releaseOnHoldEarnings;

    FormBuildCheckBoxControl        filterCriteriaBuildCheckBox;
    FormCheckBoxControl             filterCriteriaCheckBox;

    private const str statusFilterCriteriaGroup = 'StatusFilterCriteriaGroup';
    private const str filterCriteriaControl = 'FilterCriteriaControl';
    private const int currentVersion = 1;

    #LOCALMACRO.CurrentList
        payPeriodRecId,
        payrollEarningPaymentProcessingAction,
        releaseOnHoldEarnings
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@PayrollProcessing:UpdateEarningStatementLines";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        dialog = super();

        filterCriteriaBuildCheckBox = dialog.curFormBuildGroup().addControl(FormControlType::CheckBox, filterCriteriaControl);
        filterCriteriaBuildCheckBox.Label("@SYS4090131");
        if (payrollEarningPaymentProcessingAction == PayrollEarningPaymentProcessingAction::ReleaseForPayment)
        {
            filterCriteriaBuildCheckBox.visible(true);
        }
        else
        {
            filterCriteriaBuildCheckBox.visible(false);
        }
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    protected str dialogCaption()
    {
        if (this.parmEarningPaymentProcessingAction() == PayrollEarningPaymentProcessingAction::ReleaseForPayment)
        {
            return "@Payroll:ReleaseEarningsForPayment";
        }
        else
        {
            return "@Payroll:HoldEarningsFromPaymentSubmission";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the input from the dialog which contains user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog which contains user input for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        filterCriteriaCheckBox = _dialog.dialogForm().formRun().control(filterCriteriaBuildCheckBox.id());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the status of Release on hold lines check box from the dialog.
    /// </summary>
    /// <returns>
    /// Return true if the operation succeeds.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        releaseOnHoldEarnings = filterCriteriaCheckBox.checked();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the <c>PayrollEarningReleaseForPaymentTask</c> class for release the earnings for payment or hold the earnings for payment.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// The list of workers and related positions for the <c>PayrollEarningReleaseForPaymentTask</c> class to process earnings statements.
    /// </param>
    /// <returns>
    /// The <c>PayrollEarningReleaseForPaymentTask</c> class.
    /// </returns>
    public RunBaseBatch initializeTask(container _batchTaskGroupList)
    {
        PayrollEarningReleaseForPaymentTask earningReleaseForPaymentTask;

        earningReleaseForPaymentTask = new PayrollEarningReleaseForPaymentTask();
        earningReleaseForPaymentTask.parmPayPeriodRecId(payPeriodRecId);
        earningReleaseForPaymentTask.parmBatchTaskGroupList(_batchTaskGroupList);
        earningReleaseForPaymentTask.parmEarningPaymentProcessingAction(payrollEarningPaymentProcessingAction);
        earningReleaseForPaymentTask.parmReleaseOnHoldEarnings(releaseOnHoldEarnings);

        return earningReleaseForPaymentTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [currentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEarningPaymentProcessingAction</Name>
				<Source><![CDATA[
    public PayrollEarningPaymentProcessingAction parmEarningPaymentProcessingAction(PayrollEarningPaymentProcessingAction _payrollEarningPaymentProcessingAction = payrollEarningPaymentProcessingAction)
    {
        payrollEarningPaymentProcessingAction = _payrollEarningPaymentProcessingAction;

        return payrollEarningPaymentProcessingAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayPeriodRecId</Name>
				<Source><![CDATA[
    public PayrollPayPeriodRecId parmPayPeriodRecId(PayrollPayPeriodRecId _payPeriodRecId = payPeriodRecId)
    {
        payPeriodRecId = _payPeriodRecId;

        return payPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseOnHoldEarnings</Name>
				<Source><![CDATA[
    public boolean parmReleaseOnHoldEarnings(boolean _releaseOnHoldEarnings = releaseOnHoldEarnings)
    {
        releaseOnHoldEarnings = _releaseOnHoldEarnings;

        return releaseOnHoldEarnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleHelpText</Name>
				<Source><![CDATA[
    protected str payCycleHelpText()
    {
        if (this.parmEarningPaymentProcessingAction() == PayrollEarningPaymentProcessingAction::ReleaseForPayment)
        {
            return "@Payroll:ThePayCycleOfTheEarningsStatementsToReleaseForPaymentProcess";
        }
        else
        {
            return "@Payroll:ThePayCycleOfTheEarningsStatementsToHoldForPaymentProcessing";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodHelpText</Name>
				<Source><![CDATA[
    protected str payPeriodHelpText()
    {
        if (this.parmEarningPaymentProcessingAction() == PayrollEarningPaymentProcessingAction::ReleaseForPayment)
        {
            return "@Payroll:ThePayPeriodOfTheEarningsStatementsToReleaseForPaymentProces";
        }
        else
        {
            return "@Payroll:ThePayPeriodOfTheEarningsStatementsToHoldFromPaymentProcessi";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        PayrollPayPeriodRecId payPeriodRecIdLast;
        PayrollEarningPaymentProcessingAction earningPaymentProcessingActionLast;
        boolean     releaseOnHoldEarningsLast;

        #LOCALMACRO.SaveLastList
            payPeriodRecIdLast,
            earningPaymentProcessingActionLast,
            releaseOnHoldEarningsLast
        #ENDMACRO

        switch (version)
        {
            case currentVersion:
                if (this.inGetSaveLast())
                {
                    // Only want the query from the save last values.
                    [version, #SaveLastList, queryCon] = packedClass;
                }
                else
                {
                    [version, #CurrentList, queryCon] = packedClass;
                }

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new QueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }

                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct an instance of the process class on server.
    /// </summary>
    /// <returns>
    /// An instance of the process class on server.
    /// </returns>
    public static PayrollEarningReleaseForPayment construct()
    {
        return (new PayrollEarningReleaseForPayment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        PayrollEarningReleaseForPayment        earningStatementGeneration;

        earningStatementGeneration = PayrollEarningReleaseForPayment::construct();

        if (_args.parmEnumType() == enumNum(PayrollEarningPaymentProcessingAction))
        {
            earningStatementGeneration.parmEarningPaymentProcessingAction(_args.parmEnum());
        }

        if (earningStatementGeneration.prompt())
        {
            earningStatementGeneration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>