<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCommitmentSourceDocLineItem_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchCommitmentSourceDocLineItem_PSN</c> class provides the information to handle the
///    distributions account entries for a purchase commitment line.
/// </summary>

[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_PurchCommitment), SourceDocumentLine_PurchCommitment::PurchCommitmentLine)]
public class PurchCommitmentSourceDocLineItem_PSN extends SourceDocumentLineItem
    implements SourceDocumentLineItemICommitment, SourceDocumentLineItemIFinalize
{
    PurchCommitmentLine_PSN purchCommitmentLine;
    PurchCommitmentHeader_PSN purchCommitmentHeader;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>RecId</c> value of the current legal entity.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> value of the current legal entity.
    /// </returns>
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap sourceDocumentAmountMap;
        SourceDocumentAmount extendedPrice;
        boolean includesTax = false;

        // Create map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        Amount lineAmount;
        if (purchCommitmentHeader.DocumentStatus == PurchCommitmentDocumentStatus_PSN::UnderRevision)
        {
            PurchCommitmentLineTmpBalanceSummary_PSN purchCommitmentLineTmpBalanceSummary = PurchCommitmentBalanceSummaryCalc_PSN::getBalancesForBalanceSummaryForm(purchCommitmentLine);
            lineAmount = purchCommitmentLineTmpBalanceSummary.ReservedCommitmentsAmount - purchCommitmentLineTmpBalanceSummary.TotalRelievedAmount;
            
            if (purchCommitmentLine.DraftAmount != 0)
            {
                lineAmount += purchCommitmentLineTmpBalanceSummary.DraftIncreasesAmount - purchCommitmentLineTmpBalanceSummary.DraftDecreasesAmount;
            }
        }
		else
        {
            lineAmount = purchCommitmentLine.LineAmount;
        }

        // Extended price source document monetary amount
        extendedPrice = SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), lineAmount, MonetaryAmount::ExtendedPrice, includesTax);
        sourceDocumentAmountMap.insert(extendedPrice);

        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent businessEvent;

        businessEvent = new BusinessEvent(enumnum(BusinessEvent_PurchCommitment),BusinessEvent_PurchCommitment::CommitBudgetFund);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        purchCommitmentLine = _sourceDocumentLineImplementation;
        purchCommitmentHeader = PurchCommitmentHeader_PSN::find(purchCommitmentLine.PurchCommitmentHeader_PSN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return purchCommitmentLine.LineDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension()
    {
        return purchCommitmentLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription()
    {
        return PurchCommitmentLine.Comment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        return purchCommitmentLine.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    public CompanyInfo parmLegalEntity()
    {
        return CompanyInfo::findDataArea(curext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return int642int(purchCommitmentLine.LineNumber);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordCommitmentBusinessEvent</Name>
				<Source><![CDATA[
    public boolean parmRecordCommitmentBusinessEvent()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        return purchCommitmentLine.LineDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return purchCommitmentHeader.CurrencyCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>