<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailFiscalIntegrationConfigurationLoadHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailFiscalIntegrationConfigurationLoadHelper</c> class is the hepler class about loading fiscal integration configuration.
/// </summary>
public class RetailFiscalIntegrationConfigurationLoadHelper
{
    private RetailFiscalIntegrationExtensionName extensionName;
    private Common common;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadConfiguration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads fiscal service configuration.
    /// </summary>
    /// <param name = "_common">
    /// A common record.
    /// </param>
    /// <returns>
    /// The common record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common loadConfiguration(Common _common)
    {
        FileUploadTemporaryStorageResult result = File::GetFileFromUser() as FileUploadTemporaryStorageResult;

        if (result && result.getUploadStatus())
        {
            using(System.IO.MemoryStream stream = result.openResult() as System.IO.MemoryStream)
            using(System.IO.StreamReader sreader = new System.IO.StreamReader(stream, System.Text.Encoding::UTF8, true))
            {
                if (sreader)
                {
                    XML filexml = sreader.ReadToEnd();
 
                    if (filexml)
                    {
                        // Valdiate configuration.
                        RetailFiscalIntegrationConfigurationValidationHelper validationHelper = new RetailFiscalIntegrationConfigurationValidationHelper();
                        validationHelper.validateStructure(filexml, _common);

                        this.getExtensionNameFromXML(filexml);

                        if (extensionName)
                        {
                            switch (_common.TableId)
                            {
                                case tableNum(RetailFiscalIntegrationConnectorTable) :
                                    validationHelper.validatePrivacyConsent(filexml);
                                    this.updateFiscalConnectorTable(filexml);
                                    break;
                                case tableNum(RetailFiscalIntegrationDocumentProviderTable) :
                                    this.updateFiscalDocumentProvider(filexml);
                                    break;
                                default :
                                    break;
                            }
                        }
                    }
                }
                else
                {
                    throw error("@RetailFiscalIntegration:IncorrectXMLConfigurationFile");
                }
            }
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates path.
    /// </summary>
    /// <param name = "_nameOfConfigurationProperty">
    /// A string value of the extension property name.
    /// </param>
    /// <returns>
    /// The created path string.
    /// </returns>
    private str createPath(str _nameOfConfigurationProperty)
    {
        return strFmt('//ConfigurationProperties//ConfigurationProperty[Name=\'%1\']//StringValue', _nameOfConfigurationProperty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtensionNameFromXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get extension name from XML configuration.
    /// </summary>
    /// <param name = "_filexml">
    /// The XML configuration.
    /// </param>
    private void getExtensionNameFromXML(XML _filexml)
    {
        XmlDocument doc = new XmlDocument();

        if (_fileXml)
        {
            doc.loadXml(_filexml);

            extensionName = doc.selectSingleNode(this.createPath(RetailFiscalIntegrationConnectorContants::Name)).text();
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalConnectorTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>RetailFiscalIntegrationConnectorTable</c>, If the <c>RetailFiscalIntegrationConnectorTable</c> object isn't null, connector existed, override; null, insert.
    /// </summary>
    private void updateFiscalConnectorTable(XML _filexml)
    {
        RetailFiscalIntegrationConnectorTable connectorTable = RetailFiscalIntegrationConnectorTable::findByName(extensionName);

        if (!connectorTable)
        {
            connectorTable.clear();
            connectorTable.Name = extensionName;
            connectorTable.Manifest = _filexml;
            connectorTable.insert();
        }
        else
        {
            RetailFiscalIntegrationTechnicalProfile technicalProfile;

            select firstonly RecId from technicalProfile where technicalProfile.ConnectorName == connectorTable.Name;

            DialogButton dialogButton = Box::yesNo(strFmt("@RetailFiscalIntegration:OverrideXMLConfiguration", connectorTable.Name) , DialogButton::Yes);

            if (dialogButton == DialogButton::Yes)
            {
                ttsbegin;
                connectorTable.selectForUpdate(true);
                connectorTable.Manifest = _filexml;
                connectorTable.update();
                ttscommit;

                if (technicalProfile.RecId)
                {
                    Box::info("@RetailFiscalIntegration:FiscalConnectorInUse");
                }
            }
        }

        common = connectorTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocumentProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>RetailFiscalIntegrationDocumentProviderTable</c>, If the <c>RetailFiscalIntegrationDocumentProviderTable</c> object isn't null, connector existed, override; null, insert.
    /// </summary>
    private void updateFiscalDocumentProvider(XML _filexml)
    {
        RetailFiscalIntegrationDocumentProviderTable provider = RetailFiscalIntegrationDocumentProviderTable::findByName(extensionName);

        if (!provider)
        {
            provider.clear();
            provider.Name = extensionName;
            provider.Manifest = _filexml;
            provider.insert();
        }
        else
        {
            RetailFiscalIntegrationFunctionalityProfile functionalProfile;

            select firstonly RecId from functionalProfile where functionalProfile.DocumentProviderName == provider.Name;

            DialogButton dialogButton = Box::yesNo(strFmt("@RetailFiscalIntegration:OverrideXMLConfiguration", provider.Name), DialogButton::Yes);

            if (dialogButton == DialogButton::Yes)
            {
                ttsbegin;
                provider.selectForUpdate(true);
                provider.Manifest = _filexml;
                provider.update();
                ttscommit;

                if (functionalProfile.RecId)
                {
                    Box::info("@RetailFiscalIntegration:FiscalDocumentProviderInUse");
                }
            }
        }

        common = provider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>