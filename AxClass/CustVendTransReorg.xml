<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransReorg</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendTransReorg
{
    CustVendTransOpen custVendTransOpen;
    CustVendTrans custVendTrans;
    CustVendTable custVendTable;
    TmpCustVendTransReorg tmpCustVendTransReorgNew;
    SpecTrans specTrans;
    CustVendAC accountNum;
    AmountCur amountCur;
    boolean reorganized;

    RecId refRecId;
    TableId refTableId;
    CompanyId specCompanyId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    AmountCur amountCur()
    {
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return custVendTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the transaction based <c>TmpCustVendTransReorg</c> table selected records.
    /// </summary>
    void end()
    {
        QueryRun queryRun = new QueryRun(this.buildQueryToGetTmpCustVendTransReorg());
        queryRun.setCursor(tmpCustVendTransReorgNew);
        while(queryRun.next())
        {
            tmpCustVendTransReorgNew = queryRun.get(tableNum(TmpCustVendTransReorg));
            this.post(tmpCustVendTransReorgNew);
        }
        reorganized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryToGetTmpCustVendTransReorg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the base query to select <c>TmpCustVendTransReorg</c> records grouped by RefRecId, DueDate, TransDate.
    /// </summary>
    /// <returns>
    /// Returns query instance to select <c>TmpCustVendTransReorg</c> records grouped by RefRecId, DueDate, TransDate.
    /// </returns>
    [Wrappable(true)]
    protected final Query buildQueryToGetTmpCustVendTransReorg()
    {
        Query query = new Query();

        QueryBuildDataSource tmpCustVendTransReorgQbds = query.addDataSource(tableNum(TmpCustVendTransReorg));
        tmpCustVendTransReorgQbds.addSelectionField(fieldNum(TmpCustVendTransReorg, AmountCur), SelectionField::Sum);
        tmpCustVendTransReorgQbds.addSelectionField(fieldNum(TmpCustVendTransReorg, AmountMST), SelectionField::Sum);
        tmpCustVendTransReorgQbds.addSelectionField(fieldNum(TmpCustVendTransReorg, ReportingCurrencyAmount), SelectionField::Sum);
        tmpCustVendTransReorgQbds.addSelectionField(fieldNum(TmpCustVendTransReorg, ExchAdjUnrealized), SelectionField::Sum);
        tmpCustVendTransReorgQbds.addSelectionField(fieldNum(TmpCustVendTransReorg, ExchAdjUnrealizedReporting), SelectionField::Sum);
        tmpCustVendTransReorgQbds.addGroupByField(fieldNum(TmpCustVendTransReorg, RefRecId));
        tmpCustVendTransReorgQbds.addGroupByField(fieldNum(TmpCustVendTransReorg, DueDate));
        tmpCustVendTransReorgQbds.addGroupByField(fieldNum(TmpCustVendTransReorg, TransDate));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(CustVendTrans _custVendTrans,
        AmountCur _amountCur,
        TableId _tableId,
        RecId _recId,
        CompanyId _specCompanyId)
    {
        CustVendTransData custVendTransData = CustVendTransData::construct(_custVendTrans);

        accountNum = _custVendTrans.AccountNum;
        amountCur = _amountCur;
        refTableId = _tableId;
        refRecId = _recId;
        specCompanyId = _specCompanyId;

        custVendTransOpen = custVendTransData.parmCustVendTransStatic().custVendTransOpen();
        custVendTable = custVendTransData.custVendTable();
        custVendTrans = _custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentSchedSplit</Name>
				<Source><![CDATA[
    void paymentSchedSplit(TmpCustVendTransReorg _tmpCustVendTransReorg)
    {
        Dialog dialog = new Dialog("@SYS23027");
        DialogField dialogPaymentSchedId;
        DialogField dialogTransDate;
        
        PaymSchedId paymSchedId;
        TransDate transDate;
        AmountCur remainAmountCur;

        remainAmountCur = this.reverseAmountCur(amountCur);

        dialogPaymentSchedId = dialog.addField(extendedTypeStr(PaymSchedId),"@SYS23027");
        dialogTransDate = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS28716");

        if (dialog.run())
        {
            paymSchedId = dialogPaymentSchedId.value();
            transDate = dialogTransDate.value();

            if (!paymSchedId || !transDate)
            {
                throw error("@SYS24640");
            }

            this.doPaymentScheduleSplit(_tmpCustVendTransReorg, paymSchedId, transDate, remainAmountCur);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPaymentScheduleSplit</Name>
				<Source><![CDATA[
    protected void doPaymentScheduleSplit(TmpCustVendTransReorg _tmpCustVendTransReorg, 
                                          PaymSchedId           _paymSchedId, 
                                          TransDate             _transDate, 
                                          AmountCur             _remainAmountCur)
    {
        PaymSched paymSched = PaymSched::find(_paymSchedId);

        if (!paymSched)
        {
            throw error(strFmt("@SYS28115", _paymSchedId));
        }

        CustVendTransReorgPaymSchedSplit custVendTransReorgPaymSchedSplit = CustVendTransReorgPaymSchedSplit::construct(paymSched.PaymBy);
        custVendTransReorgPaymSchedSplit.init(_tmpCustVendTransReorg, paymSched, _transDate, _remainAmountCur, this.amountCur(), this.currencyCode());
        custVendTransReorgPaymSchedSplit.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Post open transaction lines for a payment schedule line.
    /// </summary>
    /// <param name = "_tmpCustVendTransReorg">
    ///     A <c>TmpCustVendTransReorg</c> table buffer.
    /// </param>
    public void post(TmpCustVendTransReorg _tmpCustVendTransReorg)
    {
        this.populateCustVendTransOpenFromReorg(_tmpCustVendTransReorg);

        custVendTransOpen.insert();

        CustVendPaymSchedReorg custVendPaymSchedReorg = CustVendPaymSchedReorg::construct(custVendTrans);
        custVendPaymSchedReorg.createPaymSchedTransLine(custVendTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCustVendTransOpenFromReorg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>CustVendTransOpen</c> table buffer from <c>TmpCustVendTransReorg</c> table buffer.
    /// </summary>
    /// <param name = "_tmpCustVendTransReorg"><c>TmpCustVendTransReorg</c> table buffer.</param>
    [Wrappable(true)]
    protected final void populateCustVendTransOpenFromReorg(TmpCustVendTransReorg _tmpCustVendTransReorg)
    {
        custVendTransOpen.clear();
        custVendTransOpen.DueDate                       = _tmpCustVendTransReorg.DueDate;
        custVendTransOpen.RefRecId                      = _tmpCustVendTransReorg.RefRecId;
        custVendTransOpen.AccountNum                    = accountNum;
        custVendTransOpen.TransDate                     = _tmpCustVendTransReorg.TransDate;
        custVendTransOpen.AmountCur                     = _tmpCustVendTransReorg.AmountCur;
        custVendTransOpen.AmountMST                     = _tmpCustVendTransReorg.AmountMST;
        custVendTransOpen.ReportingCurrencyAmount       = _tmpCustVendTransReorg.ReportingCurrencyAmount;
        custVendTransOpen.ExchAdjUnrealized             = _tmpCustVendTransReorg.ExchAdjUnrealized;
        custVendTransOpen.ExchAdjUnrealizedReporting    = _tmpCustVendTransReorg.ExchAdjUnrealizedReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorganize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates amount values to <c>CustTransOpen</c> table buffer and create new record in <c>TmpCustVendTransReorg</c> table.
    /// </summary>
    /// <param name = "_tmpCustVendTransReorg">
    /// The <c>TmpCustVendTransReorg</c> table buffer used to populate the new <c>TmpCustVendTransReorg</c> record.
    /// </param>
    public void reorganize(TmpCustVendTransReorg _tmpCustVendTransReorg)
    {
        while (_tmpCustVendTransReorg.AmountCur)
        {
            custVendTransOpen = this.transOpen();

            // <GEEPL>
            if (!OverdueJournalSettings_W::canDueDateBeModified(custVendTransOpen, _tmpCustVendTransReorg.DueDate, custVendTransOpen.DueDate))
            {
                throw error("@SYS21533");
            }
            // </GEEPL>

            this.populateTmpCustVendTransRerorg(_tmpCustVendTransReorg);

            tmpCustVendTransReorgNew.insert();
            custVendTransOpen = this.transOpen();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpCustVendTransRerorg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes amount values to <c>CustTransOpen</c> table buffer and initializes new record values to the new <c>TmpCustVendTransReorg</c> table buffer.
    /// </summary>
    /// <param name = "_tmpCustVendTransReorg">
    /// The <c>TmpCustVendTransReorg</c> table buffer used to populate the new <c>TmpCustVendTransReorg</c> record.
    /// </param>
    [Wrappable(true)]
    protected final void populateTmpCustVendTransRerorg(TmpCustVendTransReorg _tmpCustVendTransReorg)
    {
        AmountMST amountMST;
        AmountMSTSecondary amountReporting;
        AmountMSTDebCred exchAdjUnrealized = 0.0;
        AmountMSTSecondary exchAdjUnrealizedReporting = 0.0;

        amountCur = this.setAmountCur(_tmpCustVendTransReorg, custVendTransOpen);
        if (amountCur == abs(custVendTransOpen.AmountCur))
        {
            amountMST = abs(custVendTransOpen.AmountMST);
            amountReporting = abs(custVendTransOpen.ReportingCurrencyAmount);
            exchAdjUnrealized = custVendTransOpen.ExchAdjUnrealized;
            exchAdjUnrealizedReporting = custVendTransOpen.ExchAdjUnrealizedReporting;
        }
        else
        {
            amountMST = CurrencyExchangeHelper::amount(custVendTransOpen.AmountMST / custVendTransOpen.AmountCur * amountCur);
            amountReporting = CurrencyExchangeHelper::amount(custVendTransOpen.ReportingCurrencyAmount / custVendTransOpen.AmountCur * amountCur);

            if (custVendTransOpen.AmountMST != 0.0 && custVendTransOpen.ExchAdjUnrealized != 0.0)
            {
                exchAdjUnrealized =  CurrencyExchangeHelper::amount(amountMST / abs(custVendTransOpen.AmountMST) * custVendTransOpen.ExchAdjUnrealized);
            }

            if (custVendTransOpen.ReportingCurrencyAmount != 0.0 && custVendTransOpen.ExchAdjUnrealizedReporting != 0.0)
            {
                exchAdjUnrealizedReporting = CurrencyExchangeHelper::amount(amountReporting / abs(custVendTransOpen.ReportingCurrencyAmount) * custVendTransOpen.ExchAdjUnrealizedReporting);
            }
        }
        
        this.initTmpCustVendTransReorg(_tmpCustVendTransReorg, amountCur, amountMST, amountReporting, exchAdjUnrealized, exchAdjUnrealizedReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpCustVendTransReorg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values to <c>TmpCustVendTransReorg</c> table buffer.
    /// </summary>
    /// <param name = "_tmpCustVendTransReorg">
    ///  A record of the <c>TmpCustVendTransReorg</c> table.
    /// </param>
    /// <param name = "_amountCur">
    /// The new value of the <c>AmountCur</c> parameter
    /// </param>
    /// <param name = "_amountMst">
    /// The new value of the <c>AmountMST</c> parameter
    /// </param>
    /// <param name = "_amountReporting">
    /// The new value of the <c>AmountMSTSecondary</c> parameter.
    /// </param>
    /// <param name = "_exchAdjUnrealized">
    /// The new value of the <c>AmountMSTDebCred</c> parameter.
    /// </param>
    /// <param name = "_exchAdjUnrealizedReporting">
    /// The new value of the <c>AmountMSTSecondary</c> parameter.
    /// </param>
    [Wrappable(true)]
    protected final void initTmpCustVendTransReorg(TmpCustVendTransReorg _tmpCustVendTransReorg, AmountCur _amountCur, AmountMST _amountMst, AmountMSTSecondary _amountReporting, AmountMSTDebCred _exchAdjUnrealized, AmountMSTSecondary _exchAdjUnrealizedReporting)
    {
        _tmpCustVendTransReorg.AmountCur -= _amountCur;

        if (custVendTransOpen.AmountCur < 0.0)
        {
            tmpCustVendTransReorgNew.AmountCur = -_amountCur;
            tmpCustVendTransReorgNew.AmountMST = -_amountMST;
            tmpCustVendTransReorgNew.ReportingCurrencyAmount = -_amountReporting;
        }
        else
        {
            tmpCustVendTransReorgNew.AmountCur = _amountCur;
            tmpCustVendTransReorgNew.AmountMST = _amountMST;
            tmpCustVendTransReorgNew.ReportingCurrencyAmount = _amountReporting;
        }

        tmpCustVendTransReorgNew.ExchAdjUnrealized = _exchAdjUnrealized;
        tmpCustVendTransReorgNew.ExchAdjUnrealizedReporting = _exchAdjUnrealizedReporting;

        this.adjustCustVendTransOpenAmounts(_amountCur, _amountMST, _amountReporting, _exchAdjUnrealized, _exchAdjUnrealizedReporting);

        tmpCustVendTransReorgNew.DueDate = _tmpCustVendTransReorg.DueDate;
        tmpCustVendTransReorgNew.RefTableId = custVendTransOpen.TableId;
        tmpCustVendTransReorgNew.RefRecId = custVendTransOpen.RefRecId;
        tmpCustVendTransReorgNew.TransDate = custVendTransOpen.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustCustVendTransOpenAmounts</Name>
				<Source><![CDATA[
    private void adjustCustVendTransOpenAmounts(AmountCur _amountCur, AmountMST _amountMst, AmountMSTSecondary _amountReporting, AmountMSTDebCred _exchAdjUnrealized, AmountMSTSecondary _exchAdjUnrealizedReporting)
    {
        if (custVendTransOpen.AmountCur < 0.0)
        {
            custVendTransOpen.AmountCur += _amountCur;
            custVendTransOpen.AmountMST += _amountMst;
            custVendTransOpen.ReportingCurrencyAmount += _amountReporting;
        }
        else
        {
            custVendTransOpen.AmountCur -= _amountCur;
            custVendTransOpen.AmountMST -= _amountMst;
            custVendTransOpen.ReportingCurrencyAmount -= _amountReporting;
        }
        custVendTransOpen.ExchAdjUnrealized -= _exchAdjUnrealized;
        custVendTransOpen.ExchAdjUnrealizedReporting -= _exchAdjUnrealizedReporting;

        if (custVendTransOpen.AmountCur == 0.0)
        {
            custVendTransOpen.delete();
            specTrans.delete();
        }
        else
        {
            custVendTransOpen.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAmountCur</Name>
				<Source><![CDATA[
    AmountCur reverseAmountCur(AmountCur _amountCur )
    {
        AmountCur reverseAmountCur = _amountCur;

        reverseAmountCur = abs(reverseAmountCur);
        return reverseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    boolean run()
    {
        Args parameters = new Args();
        FormRun custVendTransReorg;

        reorganized = false;
        parameters.name(formStr(CustVendTransReorg));
        parameters.caller(this);
        custVendTransReorg = classfactory.formRunClass(parameters);

        custVendTransReorg.init();
        custVendTransReorg.run();
        custVendTransReorg.wait();
        return reorganized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmountCur</Name>
				<Source><![CDATA[
    AmountCur setAmountCur(TmpCustVendTransReorg _tmpCustVendTransReorg, CustVendTransOpen _custVendTransOpen)
    {
        AmountCur reorgAmountCur;

        if ( _tmpCustVendTransReorg.AmountCur < abs(_custVendTransOpen.AmountCur))
        {
            reorgAmountCur = _tmpCustVendTransReorg.AmountCur;
        }
        else
        {
            reorgAmountCur = abs(_custVendTransOpen.AmountCur);
        }

        return reorgAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transOpen</Name>
				<Source><![CDATA[
    CustVendTransOpen transOpen()
    {
        select forupdate firstonly crossCompany specTrans
            where specTrans.SpecTableId == refTableId
                && specTrans.SpecRecId == refRecId
                && specTrans.SpecCompany == specCompanyId
        join forupdate custVendTransOpen
            where custVendTransOpen.TableId == specTrans.RefTableId
               && custVendTransOpen.RecId == specTrans.RefRecId
               && custVendTransOpen.DataAreaId == specTrans.RefCompany
               && custVendTransOpen.AccountNum == accountNum;

        return custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendTransOpen</c> record.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTransOpen</c> record.
    /// </returns>
    public CustVendTransOpen custVendTransOpen()
    {
        return custVendTransOpen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTrans</Name>
				<Source><![CDATA[
    internal CustVendTrans custVendTrans()
    {
        return custVendTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>