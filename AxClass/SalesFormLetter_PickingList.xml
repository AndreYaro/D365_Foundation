<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_PickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::PickingList)]
[SysOperationJournaledParametersAttribute(true)]
class       SalesFormLetter_PickingList
extends     SalesFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>beforeOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executed before a service operation is executed.
    /// </summary>
    /// <param name="_executionMode">
    /// The execution mode that the service operation will be executed with.
    /// </param>
    /// <remarks>
    /// Override this method to implement pre-processing logic before a service operation is called.
    /// </remarks>
    protected void beforeOperation(SysOperationExecutionMode _executionMode)
    {
        InventQualityManagementCreateHandler::createSalesPickingListBefore(this);

        super(_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A <c>ClassDescription</c> value.
    /// </returns>
    public ClassDescription caption()
    {
        return SalesFormLetter_PickingList::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkifWMSorder</Name>
				<Source><![CDATA[
    boolean checkifWMSorder()
    {
        SalesParmLine  salesParmLineLocal;

        select firstonly salesParmLineLocal
            where  salesParmLineLocal.ParmId == this.salesParmUpdate().ParmId
               && !salesParmLineLocal.wmsOrder;

        if (salesParmLineLocal)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::PickingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableUpdateNowField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to enable the Posting check box for a picking list.
    /// </summary>
    /// <param name="_enableUpdateNow">
    /// A Boolean value.
    /// </param>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean enableUpdateNowField(boolean _enableUpdateNow = enableUpdateNow)
    {
        enableUpdateNow = false;
        return enableUpdateNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesFormLetter_PickingList</c> class.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <remarks>
    /// The <c>initializeFromArgs</c> method can also be used to initialize a controller. If those options
    /// for initialization are used the default values can be used in the constructor.
    /// </remarks>
    void  new(
        IdentifierName _className = classStr(FormletterService),
        IdentifierName _methodName= methodStr(FormletterService, postSalesOrderPickingList),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for inventory picking list.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::InventPickList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management node type.
    /// </summary>
    /// <returns>
    /// The print management node type.
    /// </returns>
    protected PrintMgmtNodeType printMgmtNodeType()
    {
        return PrintMgmtNodeType::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        Integer  dlvDays;
        Code     dlvSpec;

        ParmId          parmId;
        SalesParmUpdate salesParmUpdate;
        Printout        printout;
        NoYes           printFormletter;
        container       printerSettingsFormletter;
        container       printerSettingsFormletterCopy;
        boolean         usePrintManagement;
        boolean         ret;

        #LOCALMACRO.ParmList_v25sp2
            parmId,
            salesParmUpdate.proforma,
            salesParmUpdate.specQty,
            dlvSpec,
            dlvDays,
            printout,
            printFormletter,
            printerSettingsFormletter,
            salesParmUpdate.reserve
        #ENDMACRO

        #LOCALMACRO.ParmList_v30
            parmId,
            salesParmUpdate,
            printout,
            printFormletter,
            printerSettingsFormletter,
            salesParmUpdate.reserve
        #ENDMACRO

        #LOCALMACRO.ParmList_v401
            parmId,
            salesParmUpdate,
            printout,
            printFormletter,
            printerSettingsFormletter,
            salesParmUpdate.reserve,
            printerSettingsFormletterCopy
        #ENDMACRO

        #LOCALMACRO.ParmList_v5
            parmId,
            salesParmUpdate,
            printout,
            printFormletter,
            printerSettingsFormletter,
            salesParmUpdate.reserve,
            printerSettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO

        switch (version)
        {
            case 5+1 /*case is old currentversion + old parentversion*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(SalesFormLetterContract::construct(DocumentStatus::PickingList));

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.salesParmUpdate(salesParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.usePrintManagement(usePrintManagement);
                break;

            case 4                  :   [version, #ParmList_v401]               = _packedClass;
                break;

            case 3                  :   [version, #ParmList_v30]                = _packedClass;
                printerSettingsFormletterCopy           = printerSettingsFormletter;
                break;

            case 2                  :   [version, #ParmList_v25sp2]             = _packedClass;
                break;

            default :
                ret = super(_packedClass);
        }

        if (salesParmUpdate.Proforma)
        {
            // Proforma printing of picking lists is no longer supported
            this.proforma(false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription  description()
    {
        return "@SYS11791";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPickingList</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesFormLetter::construct() instead.', false, 31\05\2017)]
    static public SalesFormLetter_PickingList newPickingList(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postSalesOrderPickingList),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return SalesFormLetter::construct(DocumentStatus::PickingList, _className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunAsRealAsync</Name>
				<Source><![CDATA[
    public boolean canRunAsRealAsync()
    {
        return SalesFormLetterPickingListRealAsyncFlight::instance().isEnabled()
            && !this.proforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysRealAsyncOperationId</Name>
				<Source><![CDATA[
    public SysRealAsyncOperationId getSysRealAsyncOperationId()
    {
        Common sourceTable = this.parmSourceTable();
        str operationId;

        if (sourceTable && sourceTable is SalesTable)
        {
            SalesTable salesTable = sourceTable;
            operationId = salesTable.SalesId;
        }
        else
        {
            operationId = this.parmId();
        }

        return operationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (SalesFormLetterErrorMessageHelpScopePickingListFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>