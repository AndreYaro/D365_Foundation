<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ePaymentPost_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
/// <summary>
/// The <c>EPaymentPost_MX</c> class handles the posting of electronic payments (ePayments).
/// </summary>
public class EPaymentPost_MX
{
    private XmlDocument xmlDocument;
    private str defaultNameSpace;
    private str xsi;
    private str schemaLocation;
    private const str PaymMethodPUE = 'PUE';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerJournalTransData</Name>
				<Source><![CDATA[
    protected void addLedgerJournalTransData(CustTrans _custTrans, CFDIDocType_MX _docType, TableId _specTableId)
    {
        if (_specTableId && _docType != CFDIDocType_MX::PaymentComplement)
        {
            return;
        }

        LedgerJournalTrans ledgerJournalTrans;
        CustTrans_W custTransW;

        select firstonly ledgerJournalTrans
        where ledgerJournalTrans.Voucher == _custTrans.Voucher
            && ledgerJournalTrans.TransDate == _custTrans.TransDate;

        if (!ledgerJournalTrans)
        {
            throw error(strFmt("@SYS76877", tableId2name(tableNum(LedgerJournalTrans))));
        }

        _custTrans.reread();
        custTransW = _custTrans.custTrans_W();

        if (custTransW.cfdiNumber_MX)
        {
            return;
        }

        ttsbegin;

        _custTrans.selectForUpdate(true);

        [custTransW.cfdiSeries_MX, custTransW.cfdiNumber_MX] = this.getPaymentSerieFolio(ledgerJournalTrans);
        custTransW.cfdiConfirmNumber_MX = ledgerJournalTrans.ledgerJournalTrans_W().ePaymCFDIConfirmNumber_MX;

        _custTrans.packCustTrans_W(custTransW);
        _custTrans.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reference to the original electronic invoice.
    /// </summary>
    /// <param name = "_custTrans">
    /// The <c>CustTrans</c> record.
	/// </param>
    /// <param name = "_eInvoiceJour">
    /// The <c>EInvoiceJour_MX</c> record
	/// </param>
    protected void createCFDIReference(CustTrans _custTrans, EInvoiceJour_MX _eInvoiceJour)
    {
        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findJournalForVoucher(_custTrans.Voucher, _custTrans.TransDate);

        if (ledgerJournalTrans)
        {
            EInvoiceCFDIReferenceParm_MX eInvoiceCFDIReferenceParm;
            EInvoiceCFDIReference_MX eInvoiceCFDIReference;

            delete_from eInvoiceCFDIReference
            where eInvoiceCFDIReference.eInvoiceJour_MX == _eInvoiceJour.RecId;

            while select eInvoiceCFDIReferenceParm
            where eInvoiceCFDIReferenceParm.RefTableId == ledgerJournalTrans.TableId
               && eInvoiceCFDIReferenceParm.RefRecId == ledgerJournalTrans.RecId
               && eInvoiceCFDIReferenceParm.cfdiuuid != ''
            {
                eInvoiceCFDIReference.cfdiuuid = eInvoiceCFDIReferenceParm.cfdiuuid;
                eInvoiceCFDIReference.ReferenceType = eInvoiceCFDIReferenceParm.ReferenceType;
                eInvoiceCFDIReference.eInvoiceJour_MX = _eInvoiceJour.RecId;
                eInvoiceCFDIReference.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUtcDateTime</Name>
				<Source><![CDATA[
    private utcdatetime createUtcDateTime(date _date)
    {
        TimeOfDay currentTimeWithTimeZone = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(
                                                                  DateTimeUtil::utcNow(),
                                                                  DateTimeUtil::getUserPreferredTimeZone()));

        utcdatetime dateTimeWithTimeZone = DateTimeUtil::newDateTime(_date, currentTimeWithTimeZone);

        return DateTimeUtil::removeTimeZoneOffset(dateTimeWithTimeZone, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    private XmlDocument generateXML(CustTrans _payment, CFDIDocType_MX _docType, CustSettlement _custSettlement = null)
    {
        XmlDocument xmlDoc = new XmlDocument();
        System.Diagnostics.Stopwatch stopwatch = System.Diagnostics.Stopwatch::StartNew();

        try
        {
            xmlDoc = EPaymentXMLFormat_MX::construct(_payment, _docType, _custSettlement).generateXML();
        }

        catch
        {
            stopwatch.Stop();
            this.updateTelemetry(false, stopwatch.ElapsedMilliseconds);
            throw Exception::Error;
        }

        finally
        {
            stopwatch.Stop();
            this.updateTelemetry(xmlDoc.outerXml() != '', stopwatch.ElapsedMilliseconds);
        }

        return xmlDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateInBase64</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsolete. Use CertificateHelper_MX::getCertificateInBase64 instead.',false, 30\11\2017)]
    public str getCertificateInBase64(X509Certificate2 _certificate)
    {
        return CertificateHelper_MX::getCertificateInBase64(_certificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateSerialNumber</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsolete. Use CertificateHelper_MX::getCertificateSerialNumber instead.',false, 30\11\2017)]
    public SerialCertificationNumber_MX getCertificateSerialNumber(X509Certificate2 _certificate)
    {
        return CertificateHelper_MX::getCertificateSerialNumber(_certificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocType</Name>
				<Source><![CDATA[
    private CFDIDocType_MX getDocType(RefTableId _specTableId, NoYes _prepayment)
    {
        CFDIDocType_MX ret;

        if (!_prepayment || _specTableId == tableNum(LedgerJournalTrans))
        {
            ret = CFDIDocType_MX::PaymentComplement;
        }
        else
        {
            switch (_specTableId)
            {
                case 0:
                    ret = CFDIDocType_MX::Advance;
                    break;
                case tableNum(SalesTable):
                case tableNum(CustInvoiceTable):
                case tableNum(CustTable):
                    ret = CFDIDocType_MX::AdvanceReverse;
                    break;
                default:
                    throw error(error::wrongUseOfFunction(funcName()));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvJourBySource</Name>
				<Source><![CDATA[
    private EInvoiceJour_MX getEInvJourBySource(Common _source, boolean _forUpdate = false)
    {
        EInvoiceJour_MX eInvoiceJour = EInvoiceJour_MX::findByRef(_source.TableId, _source.RecId, _forUpdate);

        if (eInvoiceJour.RecId)
        {
            return eInvoiceJour;
        }

        eInvoiceJour.clear();
        eInvoiceJour.initValue();
        eInvoiceJour.cfdi = true;
        eInvoiceJour.initFromElectronicInvoiceParameters();

        eInvoiceJour.cfdiStatus = EInvoiceCFDIStatus_MX::Blank;
        eInvoiceJour.cfdiMessageType = EInvoiceCFDIMessageType_MX::Submit;
        eInvoiceJour.cfdiMessageStatus = EInvoiceCFDIMessageStatus_MX::Waiting;

        eInvoiceJour.RefTableId = _source.TableId;
        eInvoiceJour.RefRecId = _source.RecId;

        CustTrans custTrans;
        CustSettlement custSettlement;

        switch (_source.TableId)
        {
            case tableNum(CustTrans):
                custTrans = _source;
                break;
            case tableNum(CustSettlement):
                custSettlement = _source;
                custTrans = custSettlement.custTrans();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        eInvoiceJour.InvoiceDateTime = this.createUtcDateTime(custTrans.TransDate);

        CustTrans_W custTransW = custTrans.custTrans_W();
        eInvoiceJour.cfdiConfirmNumber = custTransW.cfdiConfirmNumber_MX;

        eInvoiceJour.insert();

        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentSerieFolio</Name>
				<Source><![CDATA[
    protected container getPaymentSerieFolio(LedgerJournalTrans _ledgerJournalTrans)
    {
        RecId numSeqRecId = _ledgerJournalTrans.ledgerJournalTable().NumberSequenceTable;
        NumberSequenceTable numSeq = NumberSequenceTable::find(numSeqRecId);

        str voucher = _ledgerJournalTrans.Voucher;
        int folio = NumberSeq::numRemoveFormat(voucher, numSeq.Format);
        str serie = strRem(strRem(voucher, int2Str(folio)), '0');

        return [serie, folio];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLDataCon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>Container</c> with string XML document and string with the "Cadena Original" .
    /// </summary>
    /// <param name = "_payment">
    /// The <c>CustTrans</c> record.
    /// </param>
    /// <param name = "_docType">
    /// The CFDI document type.
    /// </param>
    /// <param name = "_custSettlement">
    /// The <c>CustSettlement</c> record.
    /// </param>
    /// <returns>
    ///  The <c>Container</c> with string with XML document and string with the "Cadena Original".
    /// </returns>
    public container getXMLDataCon(CustTrans _payment, CFDIDocType_MX _docType, CustSettlement _custSettlement = null)
    {
        X509Certificate2 certificate = CertificateHelper_MX::getCurrentDigitalCertificate();
        str certificateNumber = CertificateHelper_MX::getCertificateSerialNumber(certificate);
        str certificateBase64 = CertificateHelper_MX::getCertificateInBase64(certificate);

        XmlDocument document = this.generateXML(_payment, _docType, _custSettlement);
        XmlNamespaceManager namespaceManager = new XmlNamespaceManager(document.nameTable());
        namespaceManager.addNamespace('cfdi', document.root().getNamespaceOfPrefix('cfdi'));

        XmlElement comprobanteElementChanged = document.selectSingleNode('cfdi:Comprobante', namespaceManager);
        comprobanteElementChanged.setAttribute('NoCertificado', certificateNumber);
        comprobanteElementChanged.setAttribute('Certificado', certificateBase64);

        EInvoiceXMLDocReader_MX xmlEInvReader = EInvoiceXMLDocReader_MX::constructFromPaymentMessage(
            EInvoiceCFDIParameters_MX::find().CFDIVersion, document.toString());
        str origChain = xmlEInvReader.getOriginalChain();
        EInvoiceCFDIParameters_MX parameters = EInvoiceCFDIParameters_MX::find();
        str sello = EInvoiceSignXmlDoc_MX::getSello(origChain, parameters.cfdiDigestAlgorithm);

        comprobanteElementChanged.setAttribute('Sello', sello);

        str xmlDocStr = document.toString();
        if (parameters.EnabledXsdValidation)
        {
            this.validateXMLDoc(xmlDocStr, _docType);
        }

        return [document.toString(), origChain];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXmlValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialisates the <c>EInvoiceSchemaValidation_MX</c> class.
    /// </summary>
    /// <param name = "_docType">
    /// The CFDI document type.
    /// </param>
    /// <returns>
    ///  The <c>EInvoiceSchemaValidation_MX</c> instance.
    /// </returns>
    protected EInvoiceSchemaValidation_MX getXmlValidator(CFDIDocType_MX _docType)
    {
        EInvoiceSchemaValidation_MX validator;

        if (!EInvoiceCFDIParameters_MX::find().cfdiXsdFile)
        {
            throw error(
                strFmt("@SYS26332",
                       tableId2pname(tableNum(EInvoiceCFDIParameters_MX)) + '.' +
                       fieldId2pname(tableNum(EInvoiceCFDIParameters_MX),
                                     fieldNum(EInvoiceCFDIParameters_MX, cfdiXsdFile))));
        }

        validator = EInvoiceSchemaValidation_MX::construct(EInvoiceCFDIParameters_MX::find().cfdiXsdFile, true);
        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        xmlDocument = new XmlDocument();
        defaultNameSpace = 'http://www.sat.gob.mx/Pagos';
        xsi = 'http://www.w3.org/2001/XMLSchema-instance';
        schemaLocation = 'http://www.sat.gob.mx/cfd/2 http://www.sat.gob.mx/sitio_internet/cfd/2/cfdv2.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles payment event and creates appropriate CFDI document.
    /// </summary>
    /// <param name="_custTrans">
    /// The <c>CustTrans</c> record
    /// </param>
    /// <param name="_specTableId">
    /// The table id that indicates the context of settlement record.
    /// </param>
    /// <param name="_custSettlement">
    /// The <c>CustSettlement</c> record
    /// </param>
    public void processPayment(CustTrans _custTrans, TableId _specTableId = 0, CustSettlement _custSettlement = null)
    {
        if (_custTrans.RetailCustTrans)
        {
            return;
        }

        CFDIDocType_MX docType = this.getDocType(_specTableId, _custTrans.Prepayment);

        this.addLedgerJournalTransData(_custTrans, docType, _specTableId);
        if (!_specTableId)
        {
            if ( !_custTrans.Prepayment && CustPaymModeTable::find(_custTrans.PaymMode).PaymentType_MX == PaymentType_MX::Other)
            {
                throw error("@MexicoCFDIWithholding:DeferredPaymentCannotHaveOtherType_error");
            }
            if (docType == CFDIDocType_MX::PaymentComplement)
            {
                return; // _specTableId = 0 => no settlements => no Payment Complement doc sent
            }
        }

        Common source;
        if (_custSettlement)
        {
            source = _custSettlement;
        }
        else
        {
            source = _custTrans;
        }

        ttsbegin;
        EInvoiceJour_MX eInvoiceJour = this.getEInvJourBySource(source, true);

        if (eInvoiceJour.cfdiStatus != EInvoiceCFDIStatus_MX::Blank &&
            eInvoiceJour.cfdiStatus != EInvoiceCFDIStatus_MX::Rejected)
        {
            throw error(strFmt("@MexicoCFDIWithholding:CFDIalreadySubmitted_error", _custTrans.Voucher));
        }

        this.createCFDIReference(_custTrans, eInvoiceJour);

        [eInvoiceJour.xmlDoc, eInvoiceJour.cfdiOriginalString] = this.getXMLDataCon(_custTrans, docType, _custSettlement);
        eInvoiceJour.cfdiDocType = docType;
        eInvoiceJour.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles settlement event and creates appropriate CFDI document.
    /// </summary>
    /// <param name="_settlementList">
    /// A list of containers of [CustSettlement, company] form
    /// </param>
    /// <param name="_specTableId">
    /// The table id that indicates the context of settlement record specified in the <paramref name="_settlementList"/> elements.
    /// </param>
    /// <remarks>
    /// Assumes that settlements in <paramref name="_settlementList"/> created in one context
    /// Context is table such as <c>CustTable</c>, <c>SalesTable</c> or <c>LedgerJournalTrans</c> for that settlements creates
    /// </remarks>
    public void processSettlement(List _settlementList, TableId _specTableId)
    {
        Set processedSet = new Set(Types::Container);

        ListEnumerator enumerator = _settlementList.getEnumerator();
        while (enumerator.moveNext())
        {
            CustSettlement custSettlement;
            str company;

            [custSettlement, company] = enumerator.current();
            changecompany(company)
            {
                CustTrans payment;

                select firstonly payment
                    where payment.RecId == custSettlement.TransRecId
                      && payment.TransType == LedgerTransType::Payment;

                CFDIDocType_MX docType = this.getDocType(_specTableId, payment.Prepayment);
                RefRecId settlementRecId;

                if (docType != CFDIDocType_MX::PaymentComplement
                    || !this.isPUESettlement(custSettlement))
                {
                    if (docType == CFDIDocType_MX::AdvanceReverse ||
                        docType == CFDIDocType_MX::AdvanceSettle)
                    {
                        settlementRecId = custSettlement.RecId;
                    }
                    else
                    {
                        settlementRecId = 0;
                        custSettlement = null;
                    }
                    container key = [payment.RecId, settlementRecId];

                    if (!processedSet.in(key) && payment.RecId)
                    {
                        this.processPayment(payment, _specTableId, custSettlement);
                        processedSet.add(key);
                    }
                }
                else
                {
                    warning(strFmt("@MexicoCFDI:EInvoiceComplementDocumentNotCreated", payment.Voucher));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateXMLDoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the xml document.
    /// </summary>
    /// <param name="_xmlDoc">
    /// The string with xml document.
    /// </param>
    /// <param name="_docType">
    /// The document type.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The XML file does not match the government requirements. The schema validation failed.
    /// </exception>
    protected void validateXMLDoc(str _xmlDoc, CFDIDocType_MX _docType)
    {
        XMLSchemaValidator_W validator = XMLSchemaValidator_W::construct();
        EInvoiceCFDIParameters_MX parameters = EInvoiceCFDIParameters_MX::find();
        validator.tryAddSchemaFromStream(EInvoiceCFDIParameters_MX::getSchemaStream(parameters.DocuRefCFDI));
        if (_docType == CFDIDocType_MX::PaymentComplement)
        {
            validator.tryAddSchemaFromStream(EInvoiceCFDIParameters_MX::getSchemaStream(parameters.DocuRefPaym));
        }
        validator.validateXMLString(_xmlDoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EPaymentPost_MX construct()
    {
        return new EPaymentPost_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTelemetry</Name>
				<Source><![CDATA[
    private void updateTelemetry(boolean _result, int64 _elapsedTime)
    {
        GlobalizationInstrumentationHelper::featureRunWithPerformance(
                GlobalizationConstants::FeatureReferenceMX00012,
                funcName(),
                GlobalizationInstrumentationHelper::DefaultFeatureVersion,
                SysCountryRegionCode::countryInfo(),
                _elapsedTime,
                false,
                _result,
                _elapsedTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPUESettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether <c>CustSettlement</c> has settled transactions with method of payment 'PUE'.
    /// </summary>
    /// <param name = "_custSettlement">Settlement table record.</param>
    /// <returns>true if such transactions exist; otherwise false.</returns>
    private boolean isPUESettlement(CustSettlement _custSettlement)
    {
        CustTrans invoice;
        CustInvoiceJour custInvoiceJour;
        EInvoiceJour_MX eInvoiceJour;
        RefTableId tableId = tableNum(custInvoiceJour);

        select firstOnly crossCompany RecId from custInvoiceJour
            exists join invoice
                where custInvoiceJour.InvoiceId == invoice.Invoice
                    && custInvoiceJour.InvoiceAccount == invoice.AccountNum
                    && custInvoiceJour.InvoiceDate == invoice.TransDate
                    && custInvoiceJour.LedgerVoucher == invoice.Voucher
                    && invoice.RecId == _custSettlement.OffsetRecId
                    && invoice.dataAreaId == _custSettlement.OffsetCompany
            exists join eInvoiceJour
                where eInvoiceJour.RefRecId == custInvoiceJour.RecId
                    && eInvoiceJour.RefTableId == custInvoiceJour.TableId
                    && eInvoiceJour.PaymMethod == PaymMethodPUE;

        RefRecId recId = custInvoiceJour.RecId;

        if (!recId)
        {
            ProjInvoiceJour projInvoiceJour;
            select firstOnly crossCompany RecId from projInvoiceJour
                exists join invoice
                    where projInvoiceJour.InvoiceAccount == invoice.AccountNum
                        && projInvoiceJour.InvoiceDate == invoice.TransDate
                        && projInvoiceJour.LedgerVoucher == invoice.Voucher
                        && invoice.RecId == _custSettlement.OffsetRecId
                        && invoice.dataAreaId == _custSettlement.OffsetCompany
                exists join eInvoiceJour
                    where eInvoiceJour.RefRecId == projInvoiceJour.RecId
                        && eInvoiceJour.RefTableId == projInvoiceJour.TableId
                        && eInvoiceJour.PaymMethod == PaymMethodPUE;

            recId = projInvoiceJour.RecId;
        }

        return (recId != 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>