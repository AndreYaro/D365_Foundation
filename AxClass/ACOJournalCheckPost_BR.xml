<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AcoJournalCheckPost_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AcoJournalCheckPost_BR extends JournalCheckPostLedger implements BatchRetryable
{
    int                         month;
    Yr                          yr;
    FromDate                    fromDate;
    ToDate                      toDate;
    Map                         voucherUsed;
    ACOCapacityCalculator_BR    capacityCalculator;
    DimensionAttributeRecId     costCenterDimensionAttribute;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateVoucher</Name>
				<Source><![CDATA[
    protected NumberSeq  allocateVoucher()
    {
        NumberSeq tmpNumberSeq;

        tmpNumberSeq = NumberSeq::newGetVoucherFromId(ACOJournalName_BR::find(ACOJournalTable_BR::find(JournalId).JournalNameId).NumberSequenceTable,false);
        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalProductionHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total hours consumed in a cost center for a specific period.
    /// </summary>
    /// <returns>
    /// The total hours consumed in the cost center for the specific period.
    /// </returns>
    protected Hours calculateTotalProductionHours()
    {
        ProdRouteTrans          prodRouteTrans;
        Query                   query;
        QueryRun                queryRun;
        Hours                   totalProductionHours;

        query   = this.getQuery();

        query.dataSourceTable(tableNum(ProdRouteTrans)).addSelectionField(fieldNum(ProdRouteTrans, Hours), SelectionField::Sum);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            prodRouteTrans          = queryRun.get(tableNum(ProdRouteTrans));
            totalProductionHours    = prodRouteTrans.Hours;
        }

        return totalProductionHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    public boolean checkTrans(JournalTransData  _journalTransData)
    {
        ACOJournalTransOverHead_BR  journalTrans = _journalTransData.journalTrans();

        if (journalTrans.CostAmount <= 0)
            return checkFailed("@SYS6144");

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAbsorbedCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the absorbed costs.
    /// </summary>
    /// <param name="_journalTransOverHead">
    /// The absorption cost journal line that specifies the cost center and its type.
    /// </param>
    /// <param name="_totalHoursPosted">
    /// The input of total hours posted in the period for the cost center.
    /// </param>
    protected void createAbsorbedCosts(ACOJournalTransOverHead_BR  _journalTransOverHead, Hours _totalHoursPosted)
    {
        ACOCostCenterAttributeValue_BR  acoCostCenterAttributeValue;

        acoCostCenterAttributeValue = ACOCostCenterAttributeValue_BR::findByDimensionAttributeValue(_journalTransOverHead.DimensionAttributeValue);

        if (acoCostCenterAttributeValue)
        {
            this.createProdCostTable(_journalTransOverHead, _totalHoursPosted);

            if (acoCostCenterAttributeValue.CostType == ACOCostType_BR::Indirect)
            {
                this.indirectCost(_journalTransOverHead, _totalHoursPosted);
            }
            else
            {
                this.directCost(_journalTransOverHead);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHourPriceCorrectionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the transaction for the hour price correction of a resource.
    /// </summary>
    /// <param name="_costTable">
    /// The absorption cost journal line.
    /// </param>
    /// <param name="_prodId">
    /// The production order id.
    /// </param>
    /// <param name="_wrkCtrId">
    /// The resource id.
    /// </param>
    /// <param name="_newHourPrice">
    /// The recalculated hour price value.
    /// </param>
    /// <param name="_priceCorrection">
    /// The adjustment of the cost amount due to the hour price correction.
    /// </param>
    protected void createHourPriceCorrectionTrans(  ACOJournalTransOverHead_BR  _costTable,
                                                    ProdId                      _prodId,
                                                    WrkCtrId                    _wrkCtrId,
                                                    ProdHourPrice               _newHourPrice,
                                                    CostAmount                  _priceCorrection
                                                    )
    {
        ACOProdOverHeadCostTrans_BR prodOverHeadTrans;

        prodOverHeadTrans.ProdId                = _prodId;
        prodOverHeadTrans.WrkCtrId              = _wrkCtrId;
        prodOverHeadTrans.HourPrice             = _newHourPrice;
        prodOverHeadTrans.CostAmount            = _priceCorrection;

        prodOverHeadTrans.Voucher               = this.getVoucher(_prodId);
        prodOverHeadTrans.TransDate             = ACOJournalTable_BR::find(_costTable.JournalId).TransDate;

        prodOverHeadTrans.LedgerDimension       = this.defaultDimensionWithCostCenterAttrib(_costTable);

        prodOverHeadTrans.CostType              = ACOCostType_BR::HourPriceCorrection;

        prodOverHeadTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createIdlenessCostTrans</Name>
				<Source><![CDATA[
    protected void createIdlenessCostTrans(ACOJournalTransOverHead_BR   _costTable,
                                 ProdId                                 _prodId,
                                 WrkCtrId                               _wrkCtrId,
                                 Hours                                  _wrkCtrPlannedCapacity,
                                 Hours                                  _wrkCtrUsedCapacity,
                                 ProdHourPrice                          _realHourPrice,
                                 CostAmount                             _idlenessCost)
    {
        ACOProdOverHeadCostTrans_BR prodOverHeadTrans;

        prodOverHeadTrans.ProdId                = _prodId;
        prodOverHeadTrans.WrkCtrId              = _wrkCtrId;

        prodOverHeadTrans.WrkCtrPlannedCapacity = _wrkCtrPlannedCapacity;
        prodOverHeadTrans.WrkCtrUsedCapacity    = _wrkCtrUsedCapacity;

        prodOverHeadTrans.CostAmount            = _idlenessCost;
        prodOverHeadTrans.HourPrice             = _realHourPrice;

        prodOverHeadTrans.Voucher               = this.getVoucher(_prodId);
        prodOverHeadTrans.TransDate             = ACOJournalTable_BR::find(_costTable.JournalId).TransDate;

        prodOverHeadTrans.LedgerDimension       = this.defaultDimensionWithCostCenterAttrib(_costTable);

        prodOverHeadTrans.CostBaseAmount        = _costTable.CostAmount;
        prodOverHeadTrans.CostType              = ACOCostType_BR::Idleness;

        prodOverHeadTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProdCostTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the absorbed costs summary.
    /// </summary>
    /// <param name="_journalTransOverHead">
    /// The absorbed cost journal line.
    /// </param>
    /// <param name="_totalHoursPosted">
    /// The input of total hours posted in the period for the cost center.
    /// </param>
    protected void createProdCostTable(ACOJournalTransOverHead_BR _journalTransOverHead, Hours _totalHoursPosted)
    {
        ACOProdCostTable_BR             prodCostTable;
        Query                           query;
        QueryRun                        queryRun;
        QueryBuildDataSource            qbds;
        ProdTable                       prodTable;
        ProdId                          prodId;
        Hours                           hoursPerPO;

        query   = this.getQuery();
        qbds    = query.dataSourceTable(tableNum(ProdRouteTrans));

        qbds.joinMode(JoinMode::ExistsJoin);

        queryRun = new QueryRun(query);

        voucherUsed = new Map(Types::String,Types::String);

        while (queryRun.next())
        {
            prodTable       = queryRun.get(tableNum(ProdTable));
            prodId          = prodTable.ProdId;
            hoursPerPO      = this.totalHoursConsumedPerPO(prodId);

            prodCostTable.clear();

            prodCostTable.Voucher               = this.allocateVoucher().voucher();
            prodCostTable.TransDate             = _journalTransOverHead.TransDate;
            prodCostTable.ProdId                = prodId;
            prodCostTable.TotalHoursPosted      = _totalHoursPosted;
            prodCostTable.TotalHoursProdTable   = hoursPerPO;
            prodCostTable.CostStatus            = ACOCostStatus_BR::Created;

            prodCostTable.insert();

            voucherUsed.insert(prodCostTable.ProdId, prodCostTable.Voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimensionWithCostCenterAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Seting the new dimension with the cost center attribute
    /// </summary>
    /// <param name="_costTable">
    /// Absortion cost journal transaction
    /// </param>
    /// <returns>
    /// Dimension with cost center attribute
    /// </returns>
    public DimensionDefault defaultDimensionWithCostCenterAttrib(ACOJournalTransOverHead_BR _costTable)
    {
        DimensionDefault                    defaultDimension, ledgerDimension;
        DimensionAttributeValueSetStorage   valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValue             dimensionAttributeValue;
        ACOCostCenterAttributeValue_BR      costCenterAttributeValue;

        if (!_costTable.DimensionAttributeValue)
        {
            return _costTable.LedgerDimension;
        }

        costCenterAttributeValue = ACOCostCenterAttributeValue_BR::findByDimensionAttributeValue(_costTable.DimensionAttributeValue);
        //_attr is dimension name in table DimensionAttribute
        dimensionAttribute = dimensionAttribute::find(BrazilParameters::find().CostCenterDimensionAttribute);
        // _createIfNotFound is "true". A dimensionAttributeValue record will be created if not found.
        dimensionAttributeValue = dimensionAttributeValue::findByDimensionAttributeAndValue(
                                    dimensionAttribute,
                                    costCenterAttributeValue.dimensionAttributeValueValue(),
                                    false,
                                    true);
        // Add the dimensionAttibuteValue to the default dimension
        valueSetStorage.addItem(dimensionAttributeValue);

        defaultDimension = valueSetStorage.save();

        ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_costTable.LedgerDimension, defaultDimension);

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>directCost</Name>
				<Source><![CDATA[
    protected void directCost(ACOJournalTransOverHead_BR _journalTransOverHead)
    {
        ACOCostType_BR                      costType;
        boolean                             idleness = false;
        CostAmount                          idleCost, prodOrderResourceIdleCost, prodOrderResourceCorrectionCost;
        Hours                               costCenterPlannedCapacity, costCenterUsedCapacity, resourcePlannedCapacity, resourceUsedCapacity;
        ProdHourPrice                       realHourPrice;
        ProdRouteTrans                      prodRouteTrans;
        Query                               query;
        QueryRun                            queryRun;
        List                                resourceSubSet;
        ListEnumerator                      resourceEnumerator;

        costType                    = ACOCostCenterAttributeValue_BR::findByDimensionAttributeValue(_journalTransOverHead.DimensionAttributeValue).CostType;
        costCenterPlannedCapacity   = capacityCalculator.costCenterPlannedCapacity();

        if (costCenterPlannedCapacity == 0)
        {
            throw error("@GLS223379");
        }

        costCenterUsedCapacity      = capacityCalculator.costCenterUsedCapacity();

        if (costCenterUsedCapacity == 0)
        {
            throw error("@ApplicationSuite_Localization:NoProductionOrdersForCostCenter");
        }

        if (costCenterPlannedCapacity   > costCenterUsedCapacity)
        {
            idleness        = true;
            realHourPrice   = _journalTransOverHead.CostAmount / costCenterPlannedCapacity;
            idleCost        = realHourPrice * (costCenterPlannedCapacity - costCenterUsedCapacity);
        }
        else
        {
            idleness        = false;
            realHourPrice   = _journalTransOverHead.CostAmount / costCenterUsedCapacity;
        }

        resourceSubSet      = capacityCalculator.resourceSubSetList();
        resourceEnumerator  = resourceSubSet.getEnumerator();

        while (resourceEnumerator.moveNext())
        {
            query       = this.getQuery();

            query.dataSourceTable(tableNum(prodRouteTrans)).addRange(fieldNum(ProdRouteTrans, WrkCtrId)).value(resourceEnumerator.current());
            query.dataSourceTable(tableNum(ProdRouteTrans)).addGroupByField(fieldNum(ProdRouteTrans, TransRefId));
            query.dataSourceTable(tableNum(ProdRouteTrans)).addGroupByField(fieldNum(ProdRouteTrans, WrkCtrId));
            query.dataSourceTable(tableNum(ProdRouteTrans)).addGroupByField(fieldNum(ProdRouteTrans, HourPrice));
            query.dataSourceTable(tableNum(ProdRouteTrans)).addSelectionField(fieldNum(ProdRouteTrans, Hours), SelectionField::Sum);

            queryRun    = new QueryRun(query);

            while (queryRun.next())
            {
                prodRouteTrans  = queryRun.get(tableNum(ProdRouteTrans));

                resourcePlannedCapacity = capacityCalculator.resourcePlannedCapacity(prodRouteTrans.WrkCtrId);
                resourceUsedCapacity    = capacityCalculator.resourceUsedCapacity(prodRouteTrans.WrkCtrId);

                if (idleness && (costType == ACOCostType_BR::Direct || costType == ACOCostType_BR::Idleness))
                {
                    // create idleness
                    prodOrderResourceIdleCost   = idleCost * prodRouteTrans.Hours / costCenterUsedCapacity;

                    this.createIdlenessCostTrans(   _journalTransOverHead,
                                                prodRouteTrans.TransRefId,
                                                prodRouteTrans.WrkCtrId,
                                                resourcePlannedCapacity,
                                                resourceUsedCapacity,
                                                realHourPrice,
                                                prodOrderResourceIdleCost);
                }

                if (costType == ACOCostType_BR::Direct || costType == ACOCostType_BR::HourPriceCorrection)
                {
                    // create correction
                    prodOrderResourceCorrectionCost = (realHourPrice - prodRouteTrans.HourPrice) * prodRouteTrans.Hours;

                    this.createHourPriceCorrectionTrans(    _journalTransOverHead,
                                                        prodRouteTrans.TransRefId,
                                                        prodRouteTrans.WrkCtrId,
                                                        realHourPrice,
                                                        prodOrderResourceCorrectionCost);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsPostedProdCostTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if there is already an existing posted absorbed cost record for the period.
    /// </summary>
    /// <returns>
    /// True if it exists; otherwise, false.
    /// </returns>
    protected boolean existsPostedProdCostTable()
    {
        ACOProdCostTable_BR         prodCostTableCopy;
        ACOProdOverHeadCostTrans_BR prodOverheadCostTransCopy;

        select firstonly RecId, CostStatus, Voucher, ProdId from prodCostTableCopy
             exists join   prodOverheadCostTransCopy where
                    prodCostTableCopy.CostStatus            == ACOCostStatus_BR::Posted             &&
                    prodCostTableCopy.Voucher               == prodOverheadCostTransCopy.Voucher    &&
                    prodCostTableCopy.ProdId                == prodOverheadCostTransCopy.ProdId     &&
                    prodOverheadCostTransCopy.TransDate     >= fromDate                             &&
                    prodOverheadCostTransCopy.TransDate     <= toDate;

        return prodCostTableCopy.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the base query for the absorption costs calculation.
    /// </summary>
    /// <returns>
    /// The base query for the absorption costs calculation.
    /// </returns>
    /// <remarks>
    /// This query retrieves all production transactions in a specific date range.
    /// Additional constraints are added for the method caller.
    /// </remarks>

    protected Query getQuery()
    {
        Query                   query;
        QueryBuildDataSource    prodTableQbds, qbds;

        query = new Query();

        prodTableQbds = query.addDataSource(tableNum(ProdTable));

        prodTableQbds.addRange(fieldNum(ProdTable, ProdStatus)).value(queryValue(ProdStatus::Completed));
        prodTableQbds.addRange(fieldNum(ProdTable, StUpDate)).value(queryRange(fromDate, toDate));
        prodTableQbds.addRange(fieldNum(ProdTable, RealDate)).value(queryRange(fromDate, toDate));

        qbds = prodTableQbds.addDataSource(tableNum(ProdRouteTrans));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldNum(ProdRouteTrans, DateWIP)).value(queryRange(fromDate, toDate));
        qbds.addRange(fieldNum(ProdRouteTrans, TransType)).value(queryValue(ProdRouteTransType::Time));

        qbds = prodTableQbds.addDataSource(tableNum(InventTable));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tableNum(InventModelGroupItem));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds = qbds.addDataSource(tableNum(InventModelGroup));
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);

        qbds.addRange(fieldNum(InventModelGroup, InventModel)).value(SysQuery::valueNot(InventModel::StdCost));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    Voucher getVoucher(ProdId _prodId)
    {
        if (voucherUsed && voucherUsed.exists(_prodId))
            return voucherUsed.lookup(_prodId);

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasConcludedAllProductionOrdersInPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if all production orders of a specific period has been completed.
    /// </summary>
    /// <returns>
    /// True if all production orders of the period is completed; otherwise, false.
    /// </returns>
    protected boolean hasConcludedAllProductionOrdersInPeriod()
    {
        ProdTable   prodTable;

        while select StUpDate, ProdStatus, RealDate from prodTable
            where   prodTable.StUpDate >= fromDate  &&
                    prodTable.StUpDate <= toDate
        {
            if (prodTable.ProdStatus != ProdStatus::Completed || prodTable.RealDate > toDate)
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>indirectCost</Name>
				<Source><![CDATA[
    protected void indirectCost(ACOJournalTransOverHead_BR _costTable, Hours _totalProductionHours)
    {
        ACOProdOverHeadCostTrans_BR prodOverHeadTrans;
        Amount                      costAmount;
        Query                       query;
        QueryRun                    queryRun;
        ProdRouteTrans              prodRouteTrans;

        query = this.getQuery();

        query.dataSourceTable(tableNum(prodRouteTrans)).addGroupByField(fieldNum(ProdRouteTrans, TransRefId));
        query.dataSourceTable(tableNum(ProdRouteTrans)).addGroupByField(fieldNum(ProdRouteTrans, WrkCtrId));
        query.dataSourceTable(tableNum(ProdRouteTrans)).addSelectionField(fieldNum(ProdRouteTrans, Hours), SelectionField::Sum);

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            prodRouteTrans  = queryRun.get(tableNum(ProdRouteTrans));

            costAmount  = _costTable.CostAmount * prodRouteTrans.Hours / _totalProductionHours;

            if (costAmount)
            {
                if (voucherUsed.exists(prodRouteTrans.TransRefId))
                {
                    prodOverHeadTrans.Voucher           = voucherUsed.lookup(prodRouteTrans.TransRefId);
                }
                prodOverHeadTrans.TransDate             = ACOJournalTable_BR::find(_costTable.JournalId).TransDate;
                prodOverHeadTrans.ProdId                = prodRouteTrans.TransRefId;
                prodOverHeadTrans.LedgerDimension       = this.defaultDimensionWithCostCenterAttrib(_costTable);
                prodOverHeadTrans.CostBaseAmount        = _costTable.CostAmount;
                prodOverHeadTrans.CostType              = ACOCostType_BR::Indirect;
                prodOverHeadTrans.CostAmount            = costAmount;
                prodOverHeadTrans.WrkCtrId              = prodRouteTrans.WrkCtrId;

                prodOverHeadTrans.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSysModule</Name>
				<Source><![CDATA[
    public SysModule ledgerSysModule()
    {
        return SysModule::Prod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransTxtType</Name>
				<Source><![CDATA[
    public LedgerTransTxt ledgerTransTxtType()
    {
        return LedgerTransTxt::ProdHistoricalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    public void postTrans(JournalTransData _journalTransData)
    {
        ACOJournalTransOverHead_BR          journalTrans    = _journalTransData.journalTrans();
        ACOJournalTable_BR                  journalTable    = _journalTransData.journalTableData().journalTable();
        ttsbegin;

        month           = mthofyr(journalTable.TransDate);
        yr              = year(journalTable.TransDate);

        fromDate        = mkdate(01, month, yr);
        toDate          = endmth(fromDate);

        costCenterDimensionAttribute    = BrazilParameters::find().CostCenterDimensionAttribute;

        capacityCalculator  = new ACOCapacityCalculator_BR(fromDate, toDate, costCenterDimensionAttribute, journalTrans.DimensionAttributeValue);

        this.splitCosts(journalTable, journalTrans, _journalTransData);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostInit</Name>
				<Source><![CDATA[
    protected Integer runPostInit()
    {
        Integer ret;

        voucherUsed = new Map(Types::String,Types::String);

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitCosts</Name>
				<Source><![CDATA[
    public void splitCosts(ACOJournalTable_BR          _journalTable,
                    ACOJournalTransOverHead_BR  _journalTransOverHead,
                    JournalTransData            _journalTransData)
    {
        Hours   totalNonStandardCostHoursInPeriod;

        totalNonStandardCostHoursInPeriod   = this.calculateTotalProductionHours();

        if (!totalNonStandardCostHoursInPeriod)
        {
            throw error("@GLS177");
        }

        if (this.existsPostedProdCostTable())
        {
            throw error("@GLS935");
        }

        if (!this.hasConcludedAllProductionOrdersInPeriod())
        {
            throw error(strfmt("@GLS835", date2str(_journalTable.TransDate, 0, 0, 1, 4, 1, 4, DateFlags::None)));
        }

        this.createAbsorbedCosts(_journalTransOverHead, totalNonStandardCostHoursInPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalHoursConsumedPerPO</Name>
				<Source><![CDATA[
    protected Hours totalHoursConsumedPerPO(ProdId _prodId)
    {
        ProdRouteTrans  prodRouteTrans;

        select sum(Hours)
            from prodRouteTrans
                where   prodRouteTrans.TransRefType == ProdTransRefType::Production &&
                        prodRouteTrans.TransRefId   == _prodId &&
                        prodRouteTrans.DateWIP      >= fromDate &&
                        prodRouteTrans.DateWIP      <= toDate;

        return prodRouteTrans.Hours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ACOJournalCheckPost_BR   journalCheckPost;
        JournalForm              journalForm;

        journalForm      = JournalForm::fromArgs(args);
        journalCheckPost = ACOJournalCheckPost_BR::newFromForm(args,journalForm);

        journalForm.runbaseMainStart();

        if (!journalCheckPost.prompt())
        {
            if (! journalCheckPost.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
            }

            return;
        }

        try
        {
            journalCheckPost.runOperation();
            journalForm.runbaseMainEnd(journalCheckPost,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalCheckPost,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static ACOJournalCheckPost_BR newFromForm(Args _args,JournalForm _journalForm)
    {
        ACOJournalCheckPost_BR journalCheckPost;
        
        journalCheckPost = ACOJournalCheckPost_BR::constructByType(_args, _journalForm, journalCheckPost);

        if (!journalCheckPost)
        {
            throw error("@GLS254");
        }

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructByType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>ACOJournalCheckPost_BR</c> class from arguments based on type of journal.
    /// </summary>
    /// <param name = "_args">The <c>Args</c> object.</param>
    /// <param name = "_journalForm">The form of journal.</param>
    /// <param name = "_journalCheckPost">The instance of the <c>ACOJournalCheckPost_BR</c> class or null.</param>
    /// <returns>The new instance of <c>ACOJournalCheckPost_BR</c> or instance passed in parameter.</returns>
    protected static ACOJournalCheckPost_BR constructByType(Args _args, JournalForm _journalForm, ACOJournalCheckPost_BR _journalCheckPost)
    {
        JournalTransData                journalTransData;
        ACOJournalTable_BR              journalTable = _journalForm.journalTableData().journalTable();

        switch (journalTable.JournalType)
        {
            case ACOJournalType_BR::OverheadCosts:
                _journalCheckPost = ACOJournalCheckPost_BR::newJournalCheckPost(_args.parmEnum(),journalTable.TableId,journalTable.JournalId);
                journalTransData = _journalForm.journalTransData();
                if (journalTransData)
                {
                    _journalCheckPost.parmVoucher(journalTransData.journalTrans().Voucher);
                }
                break;
        }

        return _journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    public static ACOJournalCheckPost_BR newJournalCheckPost(
        JournalCheckPostType    _journalCheckPostType,
        tableId                 _tableId,
        JournalId               _journalId)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00051, funcName());

        ACOJournalCheckPost_BR journalCheckPost;

        journalCheckPost = new ACOJournalCheckPost_BR();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(false);
        journalCheckPost.parmShowInfoResult(true);
        journalCheckPost.parmJournalCheckPostType(_journalCheckPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>