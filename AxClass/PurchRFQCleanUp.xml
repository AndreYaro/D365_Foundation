<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQCleanUp extends RunBaseBatch implements BatchRetryable
{
    TransDate                   createDate;
    PurchRFQExpiryDateTime      expiryDateTime;

    DialogRunbase               dialog;

    DialogField                 dialogCreateDate;
    DialogField                 dialogExpiryDate;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        createDate,
        expiryDateTime
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deletePurchRFQTables</Name>
				<Source><![CDATA[
    protected void deletePurchRFQTables()
    {
        PurchRFQCaseTable   purchRFQCaseTable;
        utcdatetime         createDateTime = datetoendUtcDateTime(createDate, DateTimeUtil::getUserPreferredTimeZone());

        delete_from purchRFQCaseTable
        where (!createDate || purchRFQCaseTable.CreatedDateTime <= createDateTime)
           && (!expiryDateTime || purchRFQCaseTable.ExpiryDateTime <= expiryDateTime)
           && ((purchRFQCaseTable.StatusLow == PurchRFQStatus::Created
             && purchRFQCaseTable.StatusHigh == PurchRFQStatus::Created)
            || (purchRFQCaseTable.StatusLow >= PurchRFQStatus::Rejected
             && purchRFQCaseTable.StatusHigh >= PurchRFQStatus::Rejected));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dialogCreateDate = dialog.addFieldValue(extendedTypeStr(TransDate),createDate,"@SYS75241","@SYS107207");
        dialogExpiryDate = dialog.addFieldValue(extendedTypeStr(PurchRFQExpiryDateTime),expiryDateTime);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        createDate = dialogCreateDate.value();
        expiryDateTime = dialogExpiryDate.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.deletePurchRFQTables();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS107340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines  whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case 1 :
                [version,#CurrentList] = packedClass;
                break;

            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!createDate)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQCleanUp construct()
    {
        return new PurchRFQCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS107208";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PurchRFQCleanUp          purchRFQCleanUp = PurchRFQCleanUp::newStandard(args);

        if (purchRFQCleanUp.prompt())
            purchRFQCleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    static PurchRFQCleanUp newStandard(Args _args)
    {
        PurchRFQCleanUp          purchRFQCleanUp = PurchRFQCleanUp::construct();
        purchRFQCleanUp.getLast();
        purchRFQCleanUp.init();

        return purchRFQCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>