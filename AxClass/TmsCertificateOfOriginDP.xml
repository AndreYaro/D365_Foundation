<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmsCertificateOfOriginDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the data provider class for the Certificate of Origin Report
/// </summary>
[
    SRSReportQueryAttribute(queryStr(TMSCertificateOfOrigin))
]
class TmsCertificateOfOriginDP extends SRSReportDataProviderBase
{
    TMSCertificateOfOriginTmp tmsCertificateOfOriginTmp;
    WHSShipmentTable          whsShipmentTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTMSCertificateOfOriginTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temp table for the Certificate of Origin Report
    /// </summary>
    /// <returns>
    /// The temp table for the Certificate of Origin Report
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TMSCertificateOfOriginTmp))]
    public TMSCertificateOfOriginTmp getTMSCertificateOfOriginTmp()
    {
        select tmsCertificateOfOriginTmp;

        return tmsCertificateOfOriginTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTMSCertificateOfOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the fields into the temp table for the Certificate of Origin Report.
    /// </summary>
    /// <param name="_shipmentTable">
    /// The <c>WHSShipmentTable</c> record
    /// </param>
    /// <param name="_loadLine">
    /// The <c>WHSLoadLine</c> record
    /// </param>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record
    /// </param>
    /// <param name="_whsInventTable">
    /// The <c>WHSInventTable</c> record
    /// </param>
    /// <param name="_routeSegment">
    /// The first route segment
    /// </param>
    /// <param name="_routeSegment2">
    /// The second route segment
    /// </param>
    void insertTMSCertificateOfOrigin(WHSShipmentTable  _shipmentTable,
                                      WHSLoadLine       _loadLine,
                                      InventTable       _inventTable,
                                      WHSInventTable    _whsInventTable,
                                      TMSRouteSegment   _routeSegment,
                                      TMSRouteSegment   _routeSegment2)
    {
        CompanyInfo     companyInfo;

        ttsbegin;

        companyInfo = CompanyInfo::find();

        tmsCertificateOfOriginTmp.ExporterName    = companyInfo.Name;
        tmsCertificateOfOriginTmp.ExporterAddress = companyInfo.postalAddress().Address;
        tmsCertificateOfOriginTmp.ProducerName    = companyInfo.Name;
        tmsCertificateOfOriginTmp.ProducerAddress = companyInfo.postalAddress().Address;
        tmsCertificateOfOriginTmp.FromDate        = DateTimeUtil::date(_routeSegment.ScheduledShipUTCDateTime) - 5;
        tmsCertificateOfOriginTmp.ToDate          = DateTimeUtil::date(_routeSegment2.ScheduledArrivalUTCDateTime) + 5;
        tmsCertificateOfOriginTmp.ImporterName    = _shipmentTable.displayDropOffName();
        tmsCertificateOfOriginTmp.ImporterAddress = _shipmentTable.Address;

        tmsCertificateOfOriginTmp.ItemId         = _loadLine.ItemId;
        tmsCertificateOfOriginTmp.ItemName       = _loadLine.displayItemName();
        tmsCertificateOfOriginTmp.HarmonizedCode = _whsInventTable.displayHarmonizedCode();
        tmsCertificateOfOriginTmp.NetCost        = _loadLine.displayTotalValue();

        tmsCertificateOfOriginTmp.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    void processReport()
    {
        Query               query;
        QueryRun            queryRun;
        WHSShipmentTable    queryWHSShipmentTable;
        WHSLoadLine         queryWHSLoadLine;
        InventTable         queryInventTable;
        WHSInventTable      queryWHSInventTable;
        TMSRouteSegment     tmsRouteSegment;
        TMSRouteSegment     tmsRouteSegment2;
        TMSRouteSegmentLoad tmsRouteSegmentLoad;
        TMSRouteSegmentLoad tmsRouteSegmentLoad2;

        query    = this.parmQuery();
        queryRun = new QueryRun(query);

        queryRun.setRecord(whsShipmentTable);

        ttsbegin;

        while (queryRun.next())
        {
            tmsCertificateOfOriginTmp.clear();

            queryWHSShipmentTable = queryRun.get(tableNum(WHSShipmentTable));
            queryWHSLoadLine      = queryRun.get(tableNum(WHSLoadLine));
            queryInventTable      = queryRun.get(tableNum(InventTable));
            queryWHSInventTable   = queryRun.get(tableNum(WHSInventTable));

            select firstonly ScheduledShipUTCDateTime
                from tmsRouteSegment
                join RouteCode, Sequence, Id from tmsRouteSegmentLoad
                    where tmsRouteSegment.RouteCode == tmsRouteSegmentLoad.RouteCode &&
                          tmsRouteSegment.Sequence  == tmsRouteSegmentLoad.Sequence  &&
                          tmsRouteSegmentLoad.Id    == queryWHSLoadLine.LoadId;

            select reverse ScheduledArrivalUTCDateTime
                from tmsRouteSegment2
                order by ScheduledArrivalUTCDateTime
                join RouteCode, Sequence, Id from tmsRouteSegmentLoad2
                    where tmsRouteSegment2.RouteCode == tmsRouteSegmentLoad2.RouteCode &&
                          tmsRouteSegment2.Sequence  == tmsRouteSegmentLoad2.Sequence  &&
                          tmsRouteSegmentLoad2.Id    == queryWHSLoadLine.LoadId;

            this.insertTMSCertificateOfOrigin(queryWHSShipmentTable,
                                              queryWHSLoadLine,
                                              queryInventTable,
                                              queryWHSInventTable,
                                              tmsRouteSegment,
                                              tmsRouteSegment2);
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
