<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvCommonExpenseTypeVisibilityManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class controls visibility for common expense type fields.
/// </summary>
class TrvCommonExpenseTypeVisibilityManager extends TrvExpensesVisibilityManager
{
    Map         transactionCommonExpenseTypes, transactionItemizedLine, transactionCreditCard;
    const str   transactionCommonExpenseTypesGroupName = "Transaction_Expense";
    const str   transactionItemizedLineGroupName = "Transaction_ItemizedExpenseLine";
    const str   transactionCreditCardGroupName  = "CreditCard";

    boolean     isCreditCardDisabled = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionCommonExpenseTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for common expense type field group.
    /// </summary>
    /// <returns>
    /// A map of common expense fields.
    /// </returns>
    Map getTransactionCommonExpenseTypes()
    {
        if (!transactionCommonExpenseTypes)
        {
            transactionCommonExpenseTypes = this.getFieldGroup(trvExpTrans, transactionCommonExpenseTypesGroupName);
        }

        return transactionCommonExpenseTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReadOnlyFieldsItemizedLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for read only fields from itemized line field group.
    /// </summary>
    /// <returns>
    /// A map of read only fields for itemized lines transactions.
    /// </returns>
    Map getReadOnlyFieldsItemizedLine()
    {
        if (!transactionItemizedLine)
        {
            transactionItemizedLine = this.getFieldGroup(trvExpTrans, transactionItemizedLineGroupName);
        }

        return transactionItemizedLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCreditCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Getter method for uneditable fields from credit card import field group.
    /// </summary>
    /// <returns>
    /// A map of uneditable fields from credit card import.
    /// </returns>
    Map getTransactionCreditCard()
    {
        if (!transactionCreditCard)
        {
            transactionCreditCard = this.getFieldGroup(trvExpTrans, transactionCreditCardGroupName);
        }

        return transactionCreditCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldVisibilities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets visibility for common expense type fields.
    /// Read only fields of itemized line has the highest priority and will override common field groups and credit card.
    /// </summary>
    /// <param name = "_isVisible">
    /// Determines if we show or hide common expense type fields.
    /// </param>
    void setFieldVisibilities(boolean _isVisible = false)
    {
        this.setVisibilityForFieldGroup(this.getTransactionCommonExpenseTypes(), dataSourceName, _isVisible);

        if (_isVisible)
        {
            if (trvExpTrans.isCreditCardTransaction())
            {
                this.setVisibilityForFieldGroup(this.getTransactionCreditCard(), dataSourceName, _isVisible, false);
                isCreditCardDisabled = true;

                // Should not be able to edit category on credit card transactions that have an import only category
                if (TrvCostType::find(trvExpTrans.CostType).isImportOnly)
                {
                    this.setFormDataObjectVisibility(trvExpenseForm.dataSource(dataSourceName).object(fieldNum(TrvExpTrans, CostType)), true, false);
                }
            }

            if (trvexpTrans.LineType == TrvExpLineType::ItemizedLine)
            {
                this.setVisibilityForFieldGroup(this.getReadOnlyFieldsItemizedLine(), dataSourceName, true, false);
            }

            super();
        }
        else if (isCreditCardDisabled)
        {
            FormDataSource      formDataSource = trvExpenseForm.dataSource(dataSourceName);

            //
            // Since the previous expense type was a credit card expense,
            // enable TransDate field, which is the only non-credit card specific
            // field mandatory for all expense types and re-enable the category, which
            // might've been disabled based on import only.
            //
            this.setFormDataObjectVisibility(formDataSource.object(fieldnum(TrvExpTrans, TransDate)), true);
            this.setFormDataObjectVisibility(formDataSource.object(fieldnum(TrvExpTrans, CostType)), true);

            isCreditCardDisabled = false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>