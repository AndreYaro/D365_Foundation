<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rLedgerSheetEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rLedgerSheetEngine extends RunBaseBatch implements BatchRetryable
{
    DialogField              dialogFromDate;
    DialogField              dialogToDate;
    DialogField              dialogDeleteZero;
    DialogField              dialogShowSumAccount;
    DialogField              dialogShowSumAccountShrinked;
    DialogField              dialogCurrencyType;
    DialogField              dialogCurrencyCode;
    DialogField              dialogOperationTax;
    DialogField              dialogPrintRanges;
    DialogField              dialogMainAccountsOnly;

    TransDate                fromDate;
    TransDate                toDate;
    NoYes                    deleteZero;
    NoYes                    showSumAccount;
    NoYes                    showTotalsOnly;
    NoYes                    showDocument;
    MainAccountNum           mainAccountNum;
    CurrencyType_RU          currencyType;
    CurrencyCode             currencyCode;
    DimensionDefault         dimensionCriteria;
    OperationsTax            operationsTax;
    DateCode                 periodCode;
    SysQueryRun              queryRun;
    SysDictType              amountDictType;
    FormListControl          listControl;
    LedgerBalanceBase        ledgerBalance;

    boolean                  mainAccountsOnly;
    boolean                  sortOrder;
    str                      sortedColumnText;
    container                visibleRow, visibleCol;
    container                selectedFieldsOrder;
    CurrencyTypeBrief_RU     currencyTypeBrief;
    NoYes                    crediting;
    Object                   dialogFormRun;
    boolean                  printRanges;
    int                      row;
    str                      lastVouchersDialogValue;

    RLedgerSheetServer       rLedgerSheetServer;
    RLedgerSheetType         rLedgerSheetType;

    DialogGroup              dlgGroupBalance;
    DialogGroup              dlgGroupDimensionCriteria;
    DialogGroup              dlgGroupSetup;

    NoYes                    contragent;
    CustVendAC               custVendAC;
    Map                      filteredColumnsMap = new Map(Types::String, Types::Integer);

    CustVendDetailBalans_RU  custVendDetailBalans;

    private readonly int AmountLength = new DictType(extendedTypeNum(AmountCurLong)).displayLength();

    protected const str controlName = "ShowTransMode";
    protected const int currentVersion = 5;
    protected const str dialogMainAccountNum = "MainAccountNum";
    protected const str dialogCrediting = "Crediting";
    protected const str dialogMainAccountsOnlyConst = "dialogMainAccountsOnly";
    protected const str qBdGJAE_BondName = "GJAE_Bond";
    protected const str accountDebitDSName = "Debit account";
    protected const str accountCreditDSName = "Credit account";
    protected const str accountDebitDSLabel = "@SYS2019";
    protected const str accountCreditDSLabel = "@SYS3965";
    protected const int groupColumns = 2;
    protected const int value2 = 2;
    protected const int value3 = 3;
    protected const int value4 = 4;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAccountNumRange</Name>
				<Source><![CDATA[
    protected QueryBuildRange addAccountNumRange(QueryBuildDataSource _qBd, MainAccountNum _mainAccountNum)
    {
        MainAccount          mainAccount;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        DimensionAttributeValue dimensionAttributeValue;
        int                  i;
        QueryBuildRange      qBr;
        RangeStatus          rangeStatus = RangeStatus::Locked;

        mainAccount = MainAccount::findByMainAccountId(_mainAccountNum);

        qBr = _qBd.findRange(fieldNum(MainAccount, MainAccountId));

        if (qBr)
        {
            rangeStatus = qBr.status();
        }

        while (_qBd.findRange(fieldNum(MainAccount, MainAccountId)))
        {
            _qBd.clearRange(fieldNum(MainAccount, MainAccountId));
        }

        if (mainAccount.Type == DimensionLedgerAccountType::Total)
        {
            i = 1;
            while select TableId from dimensionAttributeValue
                 where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                    && dimensionAttributeValue.EntityInstance     == mainAccount.RecId
            join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
                where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
            {
                qBr = _qBd.addRange(fieldNum(MainAccount, MainAccountId));
                qBr.value(SysQuery::range(dimAttrValueTotCrit.FromValue, dimAttrValueTotCrit.ToValue));
                qBr.status(rangeStatus);
                i++;
            }
        }
        else
        {
            qBr = _qBd.addRange(fieldNum(MainAccount, MainAccountId));
            qBr.value(queryValue(_mainAccountNum));
            qBr.status(rangeStatus::Hidden);
        }

        return qBr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDimensionDisplayValueRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Added dimension display value range.
    /// </summary>
    /// <param name="_query">
    /// The query to update.
    /// </param>
    /// <param name="_qBd">
    /// The data source that contains the dimension information.
    /// </param>
    /// <param name="_dimensionDisplayValue">
    /// The dimension attribute for which the value should be applied.
    /// </param>
    protected void addDimensionDisplayValueRange(Query                 _query,
                                                 QueryBuildDataSource  _qBd,
                                                 DimensionDisplayValue _dimensionDisplayValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryOriginalDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add query ranges to original query.
    /// </summary>
    /// <param name="_queryOriginalDocuments">
    /// Original query,
    /// </param>
    /// <param name="_query">
    /// Source query.
    /// </param>
    /// <returns>
    /// A new original query with added ranges from source query.
    /// </returns>
    protected Query addQueryOriginalDocuments(Query _queryOriginalDocuments, Query _query)
    {
        QueryBuildDataSource        qBdGJAE,
                                    qBdGJAE_Bond,
                                    qBdGJAE_W,
                                    qBdGJAE_W_Bond,
                                    qBdDimComb_Bond,
                                    qBdMainAccount_Bond;

        QueryBuildRange             qBr;

        void addRange(TableId _tableId, int _occurrence = 1)
        {
            QueryBuildDataSource    qbds, qbdsParam;
            QueryBuildRange         qbrParam;
            Int                     i;

            qbdsParam = _query.dataSourceTable(_tableId, _occurrence);
            if (qbdsParam.rangeCount())
            {
                qbds = _queryOriginalDocuments.dataSourceTable(_tableId, _occurrence);
                for (i=1; i<= qbdsParam.rangeCount(); i++)
                {
                    qbrParam = qbdsParam.range(i);
                    if (qbrParam.value())
                    {
                        qbr = SysQuery::findOrCreateRange(qbds, qbrParam.field());
                        qbr.value(qbrParam.value());
                        qbr.status(RangeStatus::Locked);
                    }
                }
            }
        }

        void addDimensionRange(QueryBuildDataSource _qbdsParent, QueryBuildDataSource _qbdsOriginalDocuments)
        {
            QueryBuildDataSource    qbds;
            QueryBuildRange         qr;
            recId                   dimAttrId;
            Name                    dimensionAttributeName;
            int                     i, j;

            for (i = 1; i <= _qbdsParent.childDataSourceCount(); i++)
            {
                qbds = _qbdsParent.childDataSourceNo(i);
                if (qbds.table() == tableNum(DimensionAttributeLevelValueView))
                {
                    qr = qbds.findRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute));
                    if (qr)
                    {
                        dimAttrId = str2Int64(qr.value());
                        dimensionAttributeName = DimensionAttribute::find(dimAttrId).Name;
                        if (dimensionAttributeName)
                        {
                            j = 1;
                            qR = qbds.findRange(fieldId2Ext(fieldNum(DimensionAttributeLevelValueView, DisplayValue), 1), j);
                            while (qR)
                            {
                                SysQuery::addDimensionAttributeRange(_queryOriginalDocuments,
                                                                     _qbdsOriginalDocuments.name(),
                                                                     fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                                     DimensionComponent::DimensionAttribute,
                                                                     qR.value(),
                                                                     dimensionAttributeName);
                                j++;
                                qR = qbds.findRange(fieldId2Ext(fieldNum(DimensionAttributeLevelValueView, DisplayValue), 1), j);
                            }
                        }
                    }
                }
            }
        }

        addRange(tableNum(GeneralJournalEntry));
        addRange(tableNum(GeneralJournalAccountEntry_W));
        addRange(tableNum(DimensionAttributeValueCombination));
        addRange(tableNum(MainAccount));

        // Add Relation Bond
        // GJAE_Bond
        qBdGJAE = _queryOriginalDocuments.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        qBdGJAE_Bond = qBdGJAE.addDataSource(tableNum(GeneralJournalAccountEntry));
        qBdGJAE_Bond.name(qBdGJAE_BondName);
        qBdGJAE_Bond.fetchMode(QueryFetchMode::One2One);
        qBdGJAE_Bond.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        addRange(tableNum(GeneralJournalAccountEntry));
        addRange(tableNum(GeneralJournalAccountEntry), 2);

        // GJAE_W_Bond
        qBdGJAE_W_Bond = qBdGJAE_Bond.addDataSource(tableNum(GeneralJournalAccountEntry_W));
        qBdGJAE_W_Bond.fetchMode(QueryFetchMode::One2One);
        qBdGJAE_W_Bond.addLink(fieldNum(GeneralJournalAccountEntry, RecId), fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));
        addRange(tableNum(GeneralJournalAccountEntry_W), 2);

        qBdGJAE_W = _queryOriginalDocuments.dataSourceTable(tableNum(GeneralJournalAccountEntry_W));
        qBr = qBdGJAE_W_Bond.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU));
        qBr.value('(' + fieldStr(GeneralJournalAccountEntry_W, BondBatchTrans_RU) + '==' + qBdGJAE_W.name() + '.' + fieldStr(GeneralJournalAccountEntry_W, BondBatchTrans_RU) +')');

        // Dim comb Bond
        qBdDimComb_Bond = qBdGJAE_Bond.addDataSource(tableNum(DimensionAttributeValueCombination));
        qBdDimComb_Bond.fetchMode(QueryFetchMode::One2One);
        qBdDimComb_Bond.relations(true);
        addRange(tableNum(DimensionAttributeValueCombination), 2);

        // Main account Bond
        qBdMainAccount_Bond = qBdDimComb_Bond.addDataSource(tableNum(MainAccount));
        qBdMainAccount_Bond.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
        qBdMainAccount_Bond.fetchMode(QueryFetchMode::One2One);
        addRange(tableNum(MainAccount), 2);

        // Add Dimension Range
        addDimensionRange(_query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1), qBdGJAE);
        addDimensionRange(_query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2), qBdGJAE_Bond);
        this.setDimensionRange(_queryOriginalDocuments);

        return _queryOriginalDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalRow</Name>
				<Source><![CDATA[
    public void addTotalRow()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the calculation of balance amount.
    /// </summary>
    /// <param name="_ledgerBalance">
    /// An instance of LedgerBalanceBase class.
    /// </param>
    /// <param name="_mainAccountNum">
    /// The string value of the account.
    /// </param>
    /// <param name="_currencyType">
    /// A currency type: standard, secondary or currency.
    /// </param>
    /// <returns>
    /// The calculated balance amount.
    /// </returns>
    protected Amount calcBalance(LedgerBalanceBase _ledgerBalance  = ledgerBalance,
                                 MainAccountNum    _mainAccountNum = mainAccountNum,
                                 CurrencyType_RU   _currencyType   = currencyType)
    {
        LedgerBalanceDimAttrValueComboAmounts    ledgerBalanceDimAttrValueComboAmounts;
        LedgerBalanceDimAttrValueComboByCurrency ledgerBalanceDimAttrValueComboByCurrency;
        DimensionAttributeValueCombination       dimAttrValueComb;
        TmpAccountSum                            tmpData;
        Amount                                   balance;

        dimAttrValueComb = DimensionAttributeValueCombination::find(
           LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(MainAccount::findByMainAccountId(_mainAccountNum).RecId, DimensionHierarchy::getAccountStructure(MainAccount::findByMainAccountId(_mainAccountNum).RecId), dimensionCriteria));

        switch (_currencyType)
        {
            case CurrencyType_RU::Standard:
                ledgerBalanceDimAttrValueComboAmounts = _ledgerBalance as LedgerBalanceDimAttrValueComboAmounts;
                ledgerBalanceDimAttrValueComboAmounts.calculateBalance(dimAttrValueComb);

                balance = ledgerBalanceDimAttrValueComboAmounts.getAccountingCurrencyBalance();
                break;

            case CurrencyType_RU::Secondary:
                ledgerBalanceDimAttrValueComboAmounts = _ledgerBalance as LedgerBalanceDimAttrValueComboAmounts;
                ledgerBalanceDimAttrValueComboAmounts.calculateBalance(dimAttrValueComb);

                balance = ledgerBalanceDimAttrValueComboAmounts.getReportingCurrencyBalance();
                break;

            case CurrencyType_RU::Currency:
                ledgerBalanceDimAttrValueComboByCurrency = _ledgerBalance as LedgerBalanceDimAttrValueComboByCurrency;
                ledgerBalanceDimAttrValueComboByCurrency.calculateBalance(dimAttrValueComb);

                tmpData = ledgerBalanceDimAttrValueComboByCurrency.getTmpData();

                select sum(Balance01Cur) from tmpData
                    where  tmpData.AccountNum   == _mainAccountNum
                        && tmpData.CurrencyCode == currencyCode;

                balance = tmpData.Balance01Cur;

                break;
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBalanceForMainAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance for the main account.
    /// </summary>
    /// <param name="_mainAccountNum">
    /// The main account for which to calculate the balance.
    /// </param>
    /// <param name="_currencyType">
    /// A currency type: standard, secondary or currency.
    /// </param>
    /// <returns>
    /// The accounting currency balance.
    /// </returns>
    /// <remarks>
    /// Use the <c>LedgerBalanceMainAccountAmounts_W.calculateBalance</c> and
    /// <c>ledgerBalanceAmounts.getAccountingCurrencyBalance</c> methods to retrieve the results.
    /// </remarks>
    protected Amount calcBalanceForMainAccount(MainAccountNum _mainAccountNum = mainAccountNum, CurrencyType_RU _currencyType = currencyType)
    {
        LedgerBalanceMainAccountAmounts_W ledgerBalanceAmounts = LedgerBalanceMainAccountAmounts_W::construct();
        PeriodStart periodStart = this.findLastOpeningBalanceDate(fromDate - 1);
        ledgerBalanceAmounts.parmAccountingDateRange(periodStart, fromDate - 1);
        ledgerBalanceAmounts.parmIncludeRegularPeriod(true);
        ledgerBalanceAmounts.parmIncludeOpeningPeriod(periodStart != dateNull());
        ledgerBalanceAmounts.parmIncludeClosingPeriod(true);
        ledgerBalanceAmounts.parmPostingLayer(operationsTax);

        Query query = new Query(queryStr(GeneralJournalBalanceMainAccount));
        this.setDimensionRange(query);
        ledgerBalanceAmounts.parmGeneralJournalBaseQuery(query);

        ledgerBalanceAmounts.parmCurrencyType(_currencyType);
        ledgerBalanceAmounts.calculateBalance(MainAccount::findByMainAccountId(_mainAccountNum));
        Amount balance;

        switch (_currencyType)
        {
            case CurrencyType_RU::Standard:
                balance = ledgerBalanceAmounts.getAccountingCurrencyBalance();
                break;
            case CurrencyType_RU::Secondary:
                balance = ledgerBalanceAmounts.getReportingCurrencyBalance();
                break;
            case CurrencyType_RU::Currency:
                TmpAccountSum tmpData = ledgerBalanceAmounts.getTmpData();
                select sum(Balance01Cur) from tmpData where  tmpData.CurrencyCode == currencyCode;
                balance = tmpData.Balance01Cur;
                break;
            default:
                break;
        }
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumAccount</Name>
				<Source><![CDATA[
    protected void calcSumAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /*MAN
    The method must return false when the class is not batchable.
    */
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOperationTax</Name>
				<Source><![CDATA[
    protected boolean checkOperationTax()
    {
        boolean ret = true;

        if (operationsTax == OperationsTax::WarehouseCur_RU)
        {
            error("@GLS101314");
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>contextMenu</Name>
				<Source><![CDATA[
    public void contextMenu(HWND _hwnd,int _idx,int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExcelReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of excel report class.
    /// </summary>
    /// <returns>
    /// New instance of excel report class.
    /// </returns>
    /// <remarks>
    /// Should be overridden.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// If not overridden.
    /// </exception>
    protected OXMLExcelReport_LedgerSheet_RU createExcelReport()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerBalance</Name>
				<Source><![CDATA[
    protected void createLedgerBalance()
    {
        date fixedDate = fromDate == dateNull() ? dateNull() : fromDate - 1;
        PeriodStart             periodStart = this.findLastOpeningBalanceDate(fixedDate);
        QueryBuildDataSource    qbds        = this.queryRun().query().dataSourceNo(1);

        switch (currencyType)
        {
            case CurrencyType_RU::Standard:
            case CurrencyType_RU::Secondary:
                ledgerBalance = LedgerBalanceDimAttrValueComboAmounts::construct();
                break;
            case CurrencyType_RU::Currency:
                ledgerBalance = LedgerBalanceDimAttrValueComboByCurrency::construct();
                break;
        }

        ledgerBalance.parmAccountingDateRange(periodStart, fixedDate);
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmIncludeOpeningPeriod(periodStart != dateNull());
        ledgerBalance.parmIncludeClosingPeriod(true);
        ledgerBalance.parmPostingLayer(operationsTax);

        qbds.clearRange(fieldNum(GeneralJournalEntry, PostingLayer));
        if (operationsTax == OperationsTax::WarehouseCur_RU)
        {
            findOrCreateRange_W(qbds, fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(OperationsTax::WarehouseCur_RU));
        }
        else
        {
            this.q_addPostingLayer(qbds);
        }
        qbds.findRange(fieldNum(GeneralJournalEntry, PostingLayer)).status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCaption</Name>
				<Source><![CDATA[
    protected str datasourceCaption(int _dataSourceNo)
    {
        Str         datasourceCaption;

        Container   debitCon  = [2, 3, 6, 9],
                    creditCon = [4, 5, 7, 8];

        if (conFind(debitCon, _dataSourceNo))
        {
            datasourceCaption = "@GLS105001";
        }
        else if (conFind(creditCon, _dataSourceNo))
        {
            datasourceCaption = "@GLS105002";
        }

        return datasourceCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteColumn</Name>
				<Source><![CDATA[
    protected void deleteColumn(int _col)
    {
        listControl.deleteColumn(_col);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRow</Name>
				<Source><![CDATA[
    protected void deleteRow(int _idx)
    {
        listControl.delete(_idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotalRow</Name>
				<Source><![CDATA[
    public boolean deleteTotalRow(int  _column = -1)
    {
        listControl.delete(listControl.getCount() - 1);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroLine</Name>
				<Source><![CDATA[
    protected void deleteZeroLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog =  Dialog::newFormnameRunbase(formStr(RLedgerSheetDialog), this);

        dialog.caption(this.caption());
        dialog = this.dialogInternal(dialog);

        dlgGroupBalance     = dialog.addGroup("@SYS6350");
        dialogOperationTax  = dialog.addFieldValue(enumStr(OperationsTax),     operationsTax);

        dlgGroupDimensionCriteria = dialog.addGroup('');
        dlgGroupDimensionCriteria.hideIfEmpty(false);

        dlgGroupSetup = dialog.addGroup("@SYS29158");
        dlgGroupSetup.columns(groupColumns);
        dialogPrintRanges       = dialog.addFieldValue(enumStr(NoYes), printRanges,  "@SYS56502",   "@SYS68123");
        dialogDeleteZero        = dialog.addFieldValue(enumStr(NoYes), deleteZero,    "@GLS104958", "@GLS104959");
        dialogShowSumAccount    = dialog.addFieldValue(enumStr(NoYes), showSumAccount,"@SYS3783",   "@GLS104965");
        dialogShowSumAccountShrinked = dialog.addFieldValue(enumStr(NoYes), showTotalsOnly,"@GLS105022",   "@GLS105022");
        dialogShowSumAccountShrinked.enabled(showSumAccount);
        dialogShowSumAccount.registerOverrideMethod(methodStr(FormCheckBoxControl, modified), methodStr(RLedgerSheetEngine, dialogShowSumAccount_modified), this);
        dialog.customFieldName_RU(dialogMainAccountsOnlyConst);
        dialogMainAccountsOnly  = dialog.addFieldValue(enumStr(NoYes), mainAccountsOnly,"@SYS325919",   "@SYS325919");
        dialogMainAccountsOnly.enabled(false);
        dialogMainAccountsOnly.visible(false);
        dialogMainAccountsOnly.value(NoYes::Yes);

        dialogMainAccountsOnly.registerOverrideMethod(methodStr(FormStringControl, modified),
                                                      methodStr(rLedgerSheetEngine_AccountReview, dialogMainAccountsOnly_modified), this);
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdate</Name>
				<Source><![CDATA[
    public void dialogUpdate(DialogRunbase dialog = null)
    {
        super(dialog);
        if (dialogFormRun)
        {
            dialogFormRun.init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dialog form.
    /// </summary>
    /// <param name="_dialog">
    /// Instance of the <c>Dialog</c> class to update.
    /// </param>
    protected void dialogUpdateDesign(Dialog _dialog)
    {
        FormDesign            formDesign;

        dialogFormRun = _dialog.formRun();
        formDesign = dialogFormRun.design();
        formDesign.controlName(DialogCrediting).visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateQuery</Name>
				<Source><![CDATA[
    public void dialogUpdateQuery(Dialog _dialog,boolean _update = false)
    {
        Object formRun;

        if (_dialog)
        {
            formRun = _dialog.formRun();
            [periodCode, fromDate, toDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria] = formRun.getControlValue();
            this.updateQuery(_update);
        }
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionCriteriaDialogGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns a dialog group for dimension criteria.
    /// </summary>
    /// <returns>
    ///  A <c>DialogGroup</c> class instance.
    /// </returns>
    public DialogGroup dimensionCriteriaDialogGroup()
    {
        return dlgGroupDimensionCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableShrinkAllAccounts</Name>
				<Source><![CDATA[
    public boolean enableShrinkAllAccounts()
    {
        return this.getShowSumAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandColAccount</Name>
				<Source><![CDATA[
    protected void expandColAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandRowAccount</Name>
				<Source><![CDATA[
    protected void expandRowAccount(MainAccount _mainAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRows</Name>
				<Source><![CDATA[
    protected void fetchNextRows()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters container of strings with columns' labels to persist only those clicking which may result into displaying some vouchers.
    /// </summary>
    /// <param name = "_con">Container of strings corresponding to all columns' texts in <c>RLedgerSheet</c>; mandatory.</param>
    /// <returns>Filtred container of strings.</returns>
    public container filterValues(container _con)
    {
        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastOpeningBalanceDate</Name>
				<Source><![CDATA[
    protected PeriodStart findLastOpeningBalanceDate(PeriodStart _periodStart = fromDate)
    {
        GeneralJournalEntry generalJournalEntry;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        select firstonly AccountingDate from GeneralJournalEntry
            order by AccountingDate desc
            where generalJournalEntry.AccountingDate <= _periodStart &&
                generalJournalEntry.Ledger == Ledger::current()
            exists join fiscalCalendarPeriod
                where generalJournalEntry.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Opening;

        return generalJournalEntry.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formDesignCaption</Name>
				<Source><![CDATA[
    public str formDesignCaption(int _idx = -1)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode getCurrencyCode()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyType</Name>
				<Source><![CDATA[
    public CurrencyType_RU getCurrencyType()
    {
        return currencyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyTypeBrief</Name>
				<Source><![CDATA[
    public CurrencyTypeBrief_RU getCurrencyTypeBrief()
    {
        return currencyTypeBrief;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilteredColumnsMap</Name>
				<Source><![CDATA[
    public Map getFilteredColumnsMap()
    {
        return filteredColumnsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    public TransDate getFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean              ret;

        ret = super();
        [periodCode, fromDate, toDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria] = dialogFormRun.getControlValue();
        if (! toDate)
        {
            return checkFailed("@GLS105013");
        }
        if (fromDate > toDate)
        {
            return checkFailed("@GLS101164");
        }
        deleteZero     = dialogDeleteZero.value();
        showSumAccount = dialogShowSumAccount.value();
        if (currencyType == CurrencyType_RU::Currency && ! currencyCode)
        {
            return checkFailed("@GLS105020");
        }
        switch (currencyType)
        {
            case CurrencyType_RU::Standard:
                amountDictType = new SysDictType(extendedTypeNum(AmountMSTLong));
                break;
            case CurrencyType_RU::Secondary:
                amountDictType = new SysDictType(extendedTypeNum(AmountMSTSecondary));
                break;
            case CurrencyType_RU::Currency:
                amountDictType = new SysDictType(extendedTypeNum(AmountCurLong));
                break;
        }
        showTotalsOnly = dialogShowSumAccountShrinked.value() && showSumAccount;
        printRanges = dialogPrintRanges.value();
        operationsTax = dialogOperationTax.value();
        if (! this.checkOperationTax())
        {
            return false;
        }
        mainAccountsOnly = dialogMainAccountsOnly.value();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHelpText</Name>
				<Source><![CDATA[
    public str getHelpText(int _idx,int _col)
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets saved values.
    /// </summary>
    /// <returns>
    /// Container with saved values.
    /// </returns>
    public container getLastValue()
    {
        return [periodCode, fromDate, toDate, mainAccountNum, currencyType, currencyCode, crediting, selectedFieldsOrder, currencyTypeBrief, contragent, custVendAC, custVendDetailBalans, dimensionCriteria];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintRanges</Name>
				<Source><![CDATA[
    public boolean  getPrintRanges()
    {
        return printRanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowDocument</Name>
				<Source><![CDATA[
    public boolean getShowDocument()
    {
        return showDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShowSumAccount</Name>
				<Source><![CDATA[
    public boolean getShowSumAccount()
    {
        return showSumAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    public TransDate getToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransAmount</Name>
				<Source><![CDATA[
    protected Amount getTransAmount(Common _generalJournalAccountEntry)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry = _generalJournalAccountEntry;
        Amount      amount;

        switch (currencyType)
        {
            case CurrencyType_RU::Standard:
                amount = generalJournalAccountEntry.AccountingCurrencyAmount;
                break;
            case CurrencyType_RU::Secondary:
                amount = generalJournalAccountEntry.ReportingCurrencyAmount;
                break;
            case CurrencyType_RU::Currency:
                amount = generalJournalAccountEntry.TransactionCurrencyAmount;
                break;
        }

        return generalJournalAccountEntry.IsCredit ? - amount : amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    protected void initAccounts()
    {
        visibleRow = conNull();
        visibleCol = conNull();
        sortedColumnText = "";
        sortOrder        = true;
        this.createLedgerBalance();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListView</Name>
				<Source><![CDATA[
    protected void initListView()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRunQuery</Name>
				<Source><![CDATA[
    protected Query initRunQuery()
    {
        Query runQuery = queryRun.query();

        this.setDimensionRange(runQuery);

        return runQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRow</Name>
				<Source><![CDATA[
    protected void insertRow(int _row,int _idx = 0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSumAccountShrinked</Name>
				<Source><![CDATA[
    protected boolean isSumAccountShrinked(MainAccountNum _mainAccountNum,
                                           container      _visibleAccounts,
                                           boolean        _row = true)
    {
        int                 i;
        MainAccount         mainAccount = MainAccount::findByMainAccountId(_mainAccountNum);
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        DimensionAttributeValue dimensionAttributeValue;

        while select TableId from dimensionAttributeValue
             where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                && dimensionAttributeValue.EntityInstance     == mainAccount.RecId
        join FromValue, ToValue from dimAttrValueTotCrit
            where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
        {
            for (i = 1; i <= conLen(_visibleAccounts); i++)
            {
                if (conPeek(_visibleAccounts,i) != _mainAccountNum &&
                    conPeek(_visibleAccounts,i) >= dimAttrValueTotCrit.FromValue &&
                    conPeek(_visibleAccounts,i) <= dimAttrValueTotCrit.ToValue)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns identifier for serializing the class in the SysLastValue.
    /// </summary>
    /// <returns>
    /// The identifier name.
    /// </returns>
    public identifierName lastValueElementName()
    {
        return classId2Name(classidget(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>listControlRefresh</Name>
				<Source><![CDATA[
    public void listControlRefresh()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopAction</Name>
				<Source><![CDATA[
    protected void loopAction(QueryRun  _queryRun)
    {
        GeneralJournalAccountEntry parentEntry, childEntry;

        parentEntry = _queryRun.get(tableNum(GeneralJournalAccountEntry), 1);
        childEntry  = _queryRun.get(tableNum(GeneralJournalAccountEntry), value2);

        this.updateAccounts(parentEntry, childEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalDocuments</Name>
				<Source><![CDATA[
    public void originalDocuments(int _row, int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalDocumentsByRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates displaying vouchers of transactions corresponding to the chosen row.
    /// </summary>
    /// <param name="_idx">
    /// Index of the row in the displayed grid of <c>RLedgerSheet</c>.
    /// </param>
    public void originalDocumentsByRow(int _idx)
    {
        container colContainer;
        row = _idx;
        Args args = new Args();
        args.caller(this);
        int colAmount = listControl.getColumnCount();
        
        for (int it = 0; it < colAmount; it++)
        {
            colContainer += listControl.getColumn(it).text();
        }

        RLedgerSheetEngine_VouchersController::main(args, colContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, periodCode, fromDate, toDate, deleteZero, showSumAccount, showTotalsOnly, mainAccountNum, currencyType, currencyCode, operationsTax, dimensionCriteria, selectedFieldsOrder, currencyTypeBrief, printRanges, contragent, custVendAC, custVendDetailBalans, (queryRun) ? queryRun.pack() : conNull()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormListControl</Name>
				<Source><![CDATA[
    public FormListControl parmFormListControl(FormListControl _listControl = listControl)
    {
        listControl = _listControl;
        return listControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastVouchersDialogValue</Name>
				<Source><![CDATA[
    public str parmLastVouchersDialogValue(str _lastVouchersDialogValue = lastVouchersDialogValue)
    {
        lastVouchersDialogValue = _lastVouchersDialogValue;
        return lastVouchersDialogValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRLedgerSheetType</Name>
				<Source><![CDATA[
    public RLedgerSheetType parmRLedgerSheetType(RLedgerSheetType _rLedgerSheetType = rLedgerSheetType)
    {
        rLedgerSheetType = _rLedgerSheetType;
        return rLedgerSheetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Excel report.
    /// </summary>
    public void printReport()
    {
        OXMLExcelReport_LedgerSheet_RU  rLedgerSheetReport;

        rLedgerSheetReport = this.createExcelReport();
        rLedgerSheetReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>proceedDisplayingVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates displaying vouchers of transactions corresponding to the selected cell of the <c>RLedgerSheet</c> grid.
    /// </summary>
    /// <param name = "_col">Column number of the cell selected.</param>
    public void proceedDisplayingVouchers(int _col)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInc</Name>
				<Source><![CDATA[
    protected void progressInc(str _text)
    {
        progress.setText(_text);
        progress.incCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>q_addPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the posting layer range to the <c>QueryBuildDataSource</c> class instance provided.
    /// </summary>
    /// <param name="_qbds">
    /// The <c>QueryBuildDataSource</c> class instance to add range to.
    /// </param>
    protected void q_addPostingLayer(QueryBuildDataSource _qbds)
    {
        QueryBuildRange qr = _qbds.addRange(fieldNum(GeneralJournalEntry, PostingLayer));

        switch (operationsTax)
        {
            case OperationsTax::Current:
                qr.value(SysQuery::value(OperationsTax::Current));
                break;

            case OperationsTax::Operations:
                qr.value(strFmt('%1,%2', SysQuery::value(OperationsTax::Current), SysQuery::value(OperationsTax::Operations)));
                break;

            case OperationsTax::Tax :
                qr.value(strFmt('%1,%2', SysQuery::value(OperationsTax::Current), SysQuery::value(OperationsTax::Tax)));
                break;

            case OperationsTax::DminusS:
            case OperationsTax::OperationsPlusTax:
                qr.value(strFmt('%1,%2', SysQuery::value(OperationsTax::Operations), SysQuery::value(OperationsTax::Tax)));
                break;

            case OperationsTax::OnlyOperations:
                qr.value(SysQuery::value(OperationsTax::Operations));
                break;

            case OperationsTax::OnlyTax:
                qr.value(SysQuery::value(OperationsTax::Tax));
                break;

            case OperationsTax::Total:
                qr.value(strFmt('%1,%2,%3', SysQuery::value(OperationsTax::Current), SysQuery::value(OperationsTax::Operations), SysQuery::value(OperationsTax::Tax)));
                break;

            default:
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                query;
        QueryBuildDataSource qBdAccountEntry,
                             qBdAccountEntry_Bond,
                             qBdEntry,
                             qBdFiscalPeriod,
                             ds;
        QueryBuildRange      qBr;

        query = new Query(queryStr(GeneralJournalBondBatchTrans));

        // Entry
        qBdEntry = query.dataSourceTable(tableNum(GeneralJournalEntry));

        qBr = qBdEntry.addRange(fieldNum(GeneralJournalEntry, Ledger));
        qBr.value(queryValue(Ledger::current()));
        qBr.status(RangeStatus::Hidden);

        qBr = qBdEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate));
        qBr.status(RangeStatus::Hidden);

        qBdFiscalPeriod = qBdEntry.addDataSource(tableNum(FiscalCalendarPeriod));
        qBdFiscalPeriod.joinMode(JoinMode::ExistsJoin);
        qBdFiscalPeriod.fetchMode(QueryFetchMode::One2One);
        qBdFiscalPeriod.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));

        qBr = qBdFiscalPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type));
        qBr.status(RangeStatus::Hidden);
        qBr.value(queryRange(FiscalPeriodType::Operating, FiscalPeriodType::Closing));

        // Account (credit = No)
        qBdAccountEntry = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        qBdAccountEntry.fetchMode(QueryFetchMode::One2One);

        ds = query.dataSourceTable(tableNum(GeneralJournalAccountEntry_W), 1);
        qBr = ds.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU));
        qBr.status(RangeStatus::Hidden);
        qBr.value(SysQuery::valueNot(0));

        qBr = qBdAccountEntry.addRange(fieldNum(GeneralJournalAccountEntry, PostingType));
        qBr.status(RangeStatus::Hidden);
        qBr.value(strFmt("@GLS116885", SysQuery::value(LedgerPostingType::TransferOpeningClosing)));

        qBdAccountEntry.addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBr = qBdAccountEntry.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBr.value(queryValue(NoYes::No));
        qBr.status(RangeStatus::Locked);
        qBdAccountEntry.addSortField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        qBr = qBdAccountEntry.addRange(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));

        // Dim comb
        qBdAccountEntry = qBdAccountEntry.addDataSource(tableNum(DimensionAttributeValueCombination));
        qBdAccountEntry.fetchMode(QueryFetchMode::One2One);
        qBdAccountEntry.relations(true);

        // Main account
        qBdAccountEntry = qBdAccountEntry.addDataSource(tableNum(MainAccount));
        qBdAccountEntry.label(accountDebitDSLabel);
        qBdAccountEntry.name(accountDebitDSName);
        qBdAccountEntry.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
        qBdAccountEntry.fetchMode(QueryFetchMode::One2One);

        qBr = qBdAccountEntry.addRange(fieldNum(MainAccount, MainAccountId));
        qBr.status(RangeStatus::Hidden);
        qBdAccountEntry.addSortField(fieldNum(MainAccount, MainAccountId));
        qBr = qBdAccountEntry.addRange(fieldNum(MainAccount, LedgerChartOfAccounts));
        qBr.value(queryValue(LedgerChartOfAccounts::current()));
        qBr.status(RangeStatus::Hidden);

        // Account (credit = yes)
        qBdAccountEntry_Bond = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 2);
        qBdAccountEntry_Bond.fetchMode(QueryFetchMode::One2One);
        qBdAccountEntry_Bond.addSortField(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBr = qBdAccountEntry_Bond.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit));
        qBr.value(queryValue(NoYes::Yes));
        qBr.status(RangeStatus::Locked);

        qBdAccountEntry_Bond.addSortField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));

        // Dim comb
        qBdAccountEntry = qBdAccountEntry_Bond.addDataSource(tableNum(DimensionAttributeValueCombination));
        qBdAccountEntry.fetchMode(QueryFetchMode::One2One);
        qBdAccountEntry.relations(true);

        // Main account
        qBdAccountEntry = qBdAccountEntry.addDataSource(tableNum(MainAccount));
        qBdAccountEntry.label(accountCreditDSLabel);
        qBdAccountEntry.name(accountCreditDSName);
        qBdAccountEntry.addLink(fieldNum(DimensionAttributeValueCombination, MainAccount), fieldNum(MainAccount, RecId));
        qBdAccountEntry.fetchMode(QueryFetchMode::One2One);
        qBdAccountEntry.addSortField(fieldNum(MainAccount, MainAccountId));
        qBr = qBdAccountEntry.addRange(fieldNum(MainAccount, LedgerChartOfAccounts));
        qBr.value(queryValue(LedgerChartOfAccounts::current()));
        qBr.status(RangeStatus::Hidden);

        // Add not equality accounts
        qBdAccountEntry = query.dataSourceTable(tableNum(GeneralJournalAccountEntry), 1);
        qBr = qBdAccountEntry.addRange(fieldNum(GeneralJournalAccountEntry, RecId));
        qBr.value('(' + fieldStr(GeneralJournalAccountEntry, RecId) + '!=' + qBdAccountEntry_Bond.name() + '.' + fieldStr(GeneralJournalAccountEntry, RecId) +')');
        qBr.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        if (! queryRun)
        {
            queryRun = new SysQueryRun(this.query());
        }
        queryRun.promptShowSorting(true);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        super();
        queryRun = new SysQueryRun(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreSortOrder</Name>
				<Source><![CDATA[
    protected void restoreSortOrder(int _startColumn = 0, int _endColumn = listControl.getColumnCount())
    {
        int i;

        if (sortedColumnText)
        {
            for (i = _startColumn; i < _endColumn; i ++)
            {
                if (listControl.getColumn(i).text() == sortedColumnText)
                {
                    this.sortListControl(i);
                    return;
                }
            }
            sortedColumnText = "";
            sortOrder        = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        SysQueryRun     runQuery;

        this.initAccounts();

        runQuery = new SysQueryRun(this.initRunQuery());

        while (runQuery.next())
        {
            this.loopAction(runQuery);
        }
        if (deleteZero)
        {
            this.deleteZeroLine();
        }

        if (showSumAccount)
        {
            this.calcSumAccount();
        }
        this.initListView();
        this.fetchNextRows();
        this.setItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runBaseDialogModifyType_RU</Name>
				<Source><![CDATA[
    public RunBaseDialogModifyType runBaseDialogModifyType_RU()
    {
        return RunBaseDialogModifyType::DataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveListOrder</Name>
				<Source><![CDATA[
    protected void saveListOrder()
    {
        if (sortedColumnText)
        {
            this.sortListControl(0,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionRange</Name>
				<Source><![CDATA[
    protected void setDimensionRange(Query _query)
    {
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        int                  idx;
        str                  range;
        Name                 dimensionAttributeName;
        QueryBuildDataSource qbds;

        if (dimensionCriteria && _query)
        {
            qbds = _query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
            if (qbds)
            {
                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(dimensionCriteria);

                for (idx = 1; idx <= dimAttrValueSetStorage.elements(); idx++)
                {
                    dimensionAttributeName = DimensionAttribute::find(dimAttrValueSetStorage.getAttributeByIndex(idx)).Name;
                    range                  = dimAttrValueSetStorage.getDisplayValueByIndex(idx);

                    SysQuery::addDimensionAttributeRange(_query,
                        qbds.name(),
                        fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                        DimensionComponent::DimensionAttribute,
                        range,
                        dimensionAttributeName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    protected void setItem()
    {
        FormListItem item;

        item = listControl.getItem(0);
        if (item)
        {
            item.stateFocus(true);
            item.stateSelected(true);
            listControl.setItem(item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortedColumn</Name>
				<Source><![CDATA[
    public void setSortedColumn(int _sortedColumn)
    {
        sortOrder = (listControl.getItem(0,_sortedColumn).text() <= listControl.getItem(listControl.getCount() - 1,_sortedColumn).text());
        sortedColumnText = listControl.getColumn(_sortedColumn).text();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOriginalDocuments</Name>
				<Source><![CDATA[
    protected void showOriginalDocuments(MainAccountNum         _accountDebit,
                                         MainAccountNum         _accountCredit,
                                         DebCredProposal        _debCredProposal,
                                         DimensionDisplayValue  _dimensionDisplayValue = "")
    {
        Args                 args;
        Query                query, queryOriginalDocuments;
        QueryBuildDataSource qBd;
        FormRun              formRun;
        FormDataSource       formDataSource;
        QueryBuildRange      qBr;
        FormComboBoxControl  showTransMode;

        if (_accountDebit == queryValue(0))
        {
            return;
        }
        args = new Args();
        args.caller(this);

        query = new Query(this.initRunQuery());
        qBd   = query.dataSourceTable(tableNum(MainAccount), 1);
        qBd.orderMode(OrderMode::OrderBy);
        this.addAccountNumRange(qBd, _accountDebit);

        qBd = query.dataSourceTable(tableNum(MainAccount), value2);
        qBd.orderMode(OrderMode::OrderBy);
        qBd.fields().clearFieldList();
        if (_accountCredit == queryValue(0))
        {
            qBr = qBd.findRange(fieldNum(MainAccount, MainAccountId));
            if (! qBr)
            {
                qBr = qBd.addRange(fieldNum(MainAccount, MainAccountId));
            }
            qBr.value(SysQuery::valueUnlimited());
        }
        else
        {
            this.addAccountNumRange(qBd, _accountCredit);
        }

        qBd = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        this.addDimensionDisplayValueRange(query, qBd, _dimensionDisplayValue);

        MenuFunction mf = new MenuFunction(menuItemDisplayStr(LedgerTransVoucher), MenuItemType::Display);
        formRun = mf.create(args);
        
        formDataSource = formRun.dataSource(tableId2name(tableNum(GeneralJournalEntry)));

        queryOriginalDocuments = formDataSource.query();
        queryOriginalDocuments = this.addQueryOriginalDocuments(queryOriginalDocuments,query);
        formDataSource.query(queryOriginalDocuments);

        showTransMode = formRun.design().controlName(controlName);

        if (_debCredProposal == DebCredProposal::Credit)
        {
            showTransMode.selection(LedgerBondShowTransMode_RU::ShowCreditOnly);
        }
        showTransMode.enabled(false);
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkAllAccounts</Name>
				<Source><![CDATA[
    public void shrinkAllAccounts(boolean _shrink)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>leaveTotalAccountsOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cuts all the main accounts rows/columns in the grid of <c>RLedgerSheet</c> except total accounts.
    /// </summary>
    public void leaveTotalAccountsOnly()
    {
        MainAccount mainAccount;

        if (showTotalsOnly)
        {
            this.saveListOrder();

            while select mainAccount
                    where mainAccount.Type == DimensionLedgerAccountType::Total &&
                    mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
            {
                if (conFind(visibleRow, mainAccount.MainAccountId))
                {
                    visibleRow = this.shrinkRowAccount(mainAccount, visibleRow);
                }

                if (conFind(visibleCol, mainAccount.MainAccountId))
                {
                    visibleCol = this.shrinkColAccount(mainAccount, visibleCol);
                }
            }

            this.restoreSortOrder();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkColAccount</Name>
				<Source><![CDATA[
    protected container shrinkColAccount(MainAccount _mainAccount, container _visibleCol = conNull())
    {
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        DimensionAttributeValue dimensionAttributeValue;
        int                 i,itemPos;
        container           con;
        container           visibleColLocal = _visibleCol;

        while select TableId from dimensionAttributeValue
             where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                && dimensionAttributeValue.EntityInstance     == _mainAccount.RecId
        join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
            where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
        {
            con = visibleColLocal;
            for (i = 1; i <= conLen(con); i++)
            {
                if (conPeek(con,i) != _mainAccount.MainAccountId &&
                    conPeek(con,i) >= dimAttrValueTotCrit.FromValue &&
                    conPeek(con,i) <= dimAttrValueTotCrit.ToValue)
                {
                    itemPos = conFind(visibleColLocal,conPeek(con, i));
                    this.deleteColumn(itemPos);
                    visibleColLocal = conDel(visibleColLocal, itemPos, 1);
                }
            }
        }

        return visibleColLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shrinkRowAccount</Name>
				<Source><![CDATA[
    protected container shrinkRowAccount(MainAccount _mainAccount, container _visibleRow = conNull())
    {
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        DimensionAttributeValue dimensionAttributeValue;
        int                 i,itemPos;
        container           con;
        container           visibleRowLocal = _visibleRow;

        while select TableId from dimensionAttributeValue
             where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                && dimensionAttributeValue.EntityInstance     == _mainAccount.RecId
        join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
            where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
        {
            con = visibleRowLocal;
            for (i = 1; i <= conLen(con); i++)
            {
                if (conPeek(con,i) != _mainAccount.MainAccountId &&
                    conPeek(con,i) >= dimAttrValueTotCrit.FromValue &&
                    conPeek(con,i) <= dimAttrValueTotCrit.ToValue)
                {
                    itemPos = conFind(visibleRowLocal,conPeek(con, i));
                    this.deleteRow(itemPos);
                    visibleRowLocal = conDel(visibleRowLocal, itemPos, 1);
                }
            }
        }
        return visibleRowLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortListControl</Name>
				<Source><![CDATA[
    protected void sortListControl(int _col = 0,boolean _ascending = sortOrder)
    {
        this.deleteTotalRow();
        this.addTotalRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version = conPeek(packedClass,1);
        container   packedQuery;

        if (packedClass)
        {
            packedQuery = conPeek(packedClass, conLen(packedClass));
        }

        switch (version)
        {
            case currentVersion:
                [version, periodCode, fromDate, toDate, deleteZero, showSumAccount, showTotalsOnly, mainAccountNum, currencyType, currencyCode, operationsTax, dimensionCriteria, selectedFieldsOrder, currencyTypeBrief, printRanges, contragent, custVendAC, custVendDetailBalans] = packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccounts</Name>
				<Source><![CDATA[
    protected void updateAccounts(GeneralJournalAccountEntry _parentEntry,
                                  GeneralJournalAccountEntry _childEntry)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateListControl</Name>
				<Source><![CDATA[
    protected void updateListControl()
    {
        QueryRun     runQuery;

        this.initAccounts();
        runQuery = new QueryRun(this.initRunQuery());
        while (runQuery.next())
        {
            this.loopAction(runQuery);
        }
        if (deleteZero)
        {
            this.deleteZeroLine();
        }

        if (showSumAccount)
        {
            this.calcSumAccount();
        }
        this.initListView();
        this.fetchNextRows();
        this.setItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery(boolean _update = false)
    {
        QueryBuildRange      qbr;
        QueryBuildDataSource qbds;
        Query                query = queryRun.query();
        int                  i;

        if (mainAccountNum)
        {
            this.addAccountNumRange(query.dataSourceName(accountDebitDSName), mainAccountNum);
        }

        qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalEntry)), fieldNum(GeneralJournalEntry, AccountingDate));
        qbr.value(SysQuery::range(fromDate,toDate));

        qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalAccountEntry)), fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));

        if (currencyType == CurrencyType_RU::Currency)
        {
            qbr.value(queryValue(currencyCode));
            qbr.status(RangeStatus::Locked);
        }
        else
        {
            if (_update)
            {
                qbr.value(SysQuery::valueUnlimited());
            }
            qbr.status(RangeStatus::Open);
        }

        for (i = 1; i <= query.dataSourceCount(); i++)
        {
            qbds = query.dataSourceNo(i);
            if (qbds.table() == tableNum(DimensionAttributeLevelValueView))
            {
                qbr = qbds.findRange(fieldNum(DimensionAttributeLevelValueView, DisplayValue));
                if (qbr)
                {
                    if (qbr.value() == SysQuery::valueEmptyString())
                    {
                        qbds.joinMode(JoinMode::NoExistsJoin);
                    }
                    else
                    {
                        qbds.joinMode(JoinMode::InnerJoin);
                    }
                }
                else
                {
                    qbds.joinMode(JoinMode::OuterJoin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRangeStatus</Name>
				<Source><![CDATA[
    protected void updateRangeStatus(RangeStatus _rangeStatus)
    {
        QueryBuildRange qbr;

        qbr = findOrCreateRange_W(queryRun.query().dataSourceNo(1),fieldNum(GeneralJournalAccountEntry, IsCredit));
        qbr.status(_rangeStatus);

        qbr = findOrCreateRange_W(queryRun.query().dataSourceNo(value2),fieldNum(GeneralJournalAccountEntry, IsCredit));
        qbr.status(_rangeStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RLedgerSheetEngine construct(Args _args)
    {
        RLedgerSheetEngine  rLedgerSheetEngine;
        RLedgerSheetType    rLedgerSheetType = _args.parmEnum();

        switch (rLedgerSheetType)
        {
            case RLedgerSheetType::TurnoverBond  :
                rLedgerSheetEngine = new RLedgerSheetEngine_TurnoverBond();
                break;

            case RLedgerSheetType::AccountReview :
                rLedgerSheetEngine = new RLedgerSheetEngine_AccountReview();
                break;

            case RLedgerSheetType::AccountOrder  :
                rLedgerSheetEngine = new RledgerSheetEngine_AccountOrder();
                break;

            case RLedgerSheetType::GeneralLedger  :
                rLedgerSheetEngine = new RLedgerSheetEngine_GeneralLedger();
                break;

            case RLedgerSheetType::ActAdjustCust  :
                rLedgerSheetEngine = new RLedgerSheetEngine_ActAdjustCust();
                break;

            case RLedgerSheetType::ActAdjustVend  :
                rLedgerSheetEngine = new RLedgerSheetEngine_ActAdjustVend();
                break;

            default                              :
                throw error("@GLS103799");
        }

        rLedgerSheetEngine.parmRLedgerSheetType(rLedgerSheetType);

        return rLedgerSheetEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogFormName_RU</Name>
				<Source><![CDATA[
    public static TreeNodeName dialogFormName_RU()
    {
        return formStr(CustVendAutoSettlementDialog_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogShowSumAccount_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked on modified event in the dialog control.
    /// </summary>
    /// <param name="_value">
    /// The dialog control.
    /// </param>
    /// <returns>
    /// true if value in the dialog control is modified successfully; otherwise, false.
    /// </returns>
    protected boolean dialogShowSumAccount_modified(FormCheckBoxControl _value)
    {
        if (dialogShowSumAccount.value())
        {
            dialogShowSumAccountShrinked.enabled(true);
        }
        else
        {
            dialogShowSumAccountShrinked.enabled(false);
            dialogShowSumAccountShrinked.value(false);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RLedgerSheetEngine rLedgerSheetEngine = RLedgerSheetEngine::construct(_args);

        if (rLedgerSheetEngine.prompt())
        {
            rLedgerSheetEngine.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAmountItemToFormListControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets an item to form list control with amount.
    /// </summary>
    /// <param name="_amount">
    /// The amount.
    /// </param>
    /// <param name="_subItem">
    /// The sub-item number.
    /// </param>
    /// <param name="_idx">
    /// The index of element.
    /// </param>
    /// <returns>
    /// true if an item is contained in a form list control; otherwise, false.
    /// </returns>
    protected boolean addAmountItemToFormListControl(
        Amount _amount,
        int _subItem,
        int _idx)
    {
        boolean ret;

        FormListItem formListItem = new FormListItem(strRFix(strFmt('%1', _amount), AmountLength));
        formListItem.subItem(_subItem);
        formListItem.idx(_idx);
        ret = listControl.setItem(formListItem);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>