<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25StdChannel</Name>
	<SourceCode>
		<Declaration><![CDATA[
// Standard expenses output channel
abstract class rTax25StdChannel
{
    RTax25RegCalc_Std   regCalc;
    Map                 transMap;
    #RTax25
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean check()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean clear()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void clearData()
    {
        transMap = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void close()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean exist()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        transMap = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void open()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegCalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void parmRegCalc(RTax25RegCalc_Std _regCalc)
    {
        regCalc = _regCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public abstract void send()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocDesc</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setDocDesc(Name           _docName,
                           TransDate      _docDate)
    {
        this.setField(#DocNameOffset, _docName);
        this.setField(#DocDateOffset, _docDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setField(int _key, anytype _value)
    {
        COMVariant  variant;

        if (_key == 0)
            return;

        switch (typeof(_value))
        {
            case Types::Real :
                variant = new COMVariant(COMVariantInOut::In_out, COMVariantType::VT_DECIMAL);
                variant.decimal(_value);
                break;
            case Types::Integer :
                variant = new COMVariant(COMVariantInOut::In_out, COMVariantType::VT_INT);
                variant.int(_value);
                break;
            case Types::String :
                variant = new COMVariant(COMVariantInOut::In_out, COMVariantType::VT_BSTR);
                variant.bStr(_value);
                break;
            case Types::Date :
                variant = new COMVariant(COMVariantInOut::In_out, COMVariantType::VT_DATE);
                variant.date(_value);
                break;
            case Types::Int64 :
                variant = new COMVariant(COMVariantInOut::In_out, COMVariantType::VT_I8);
                variant.longLong(_value);
                break;
            default :
                throw error(strfmt("@GLS103886", typeof(_value)));
        }

        transMap.remove(_key);
        transMap.insert(_key, variant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSignature</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public void setSignature(
        tableId        _tableRefId,
        RecId          _fieldRefId,
        RefRecId       _profitTableRecId)
    {
        this.setField(#TableIdOffset,     _tableRefId);
        this.setField(#RecIdOffset,       _fieldRefId);
        this.setField(#ProfitRecIdOffset, _profitTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// put voucher and transDate values into transaction map
    /// </summary>
    /// <param name="_voucher">
    /// the voucher from original transaction
    /// </param>
    /// <param name="_transDate">
    /// the transaction date from original transaction
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTrans(Voucher _voucher, TransDate _transDate)
    {
        this.setField(#DocTransVoucher, _voucher);
        this.setField(#DocTransDate,    _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructChannel</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RTax25StdChannel constructChannel(RTax25StdChannelType _channelType,
                                                    RTax25RegCalc_Std    _regCalc)
    {
        RTax25StdChannel ret;

        switch (_channelType)
        {
            case RTax25StdChannelType::Register:
                ret = RTax25StdChannel_Register::construct();
                break;

            case RTax25StdChannelType::Deferral:
                ret = RTax25StdChannel_Deferral::construct();
                break;

            case RTax25StdChannelType::DeferralsFactor:
                ret = RTax25StdChannel_DeferralFactor::construct();
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        ret.parmRegCalc(_regCalc);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>