<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CommReportShipmentCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for creating report for principal lines.
/// </summary>
abstract class CommReportShipmentCalc_RU extends RunBaseBatch
{
    CustInvoiceJour     custInvoiceJour;
    CustInvoiceTrans    custInvoiceTrans;
    InventTrans         inventTrans;
    InventTransOrigin   inventTransOrigin;
    InventTrans         inventTransPurch;
    CommReportJour_RU   commReportJour;

    VendInvoiceTrans    vendInvoiceTrans;
    VendInvoiceJour     vendInvoiceJour;
    InventDim           inventDim;
    Map                 mapFactureIdDate;

    protected const str issueReceiptValue = '((\%1.StatusIssue == \%2) || (\%1.StatusReceipt == \%3))';
    protected const int currentVersion = 1;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanup</Name>
				<Source><![CDATA[
    private void cleanup()
    {
        CommReportTransItem_RU  reportTransItem;

        delete_from reportTransItem
            where reportTransItem.ReportId == commReportJour.ReportId
               && ! reportTransItem.Approved ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>combineLines</Name>
				<Source><![CDATA[
    private void combineLines()
    {
        CommReportTransItem_RU       reportTransItem;
        CommReportTransItem_RU       reportTrans;
        CommReportTransItemDetail_RU reportTransItemDetail;
        RecordSortedList             rslReportTrans;

        rslReportTrans  = new RecordSortedList(tableNum(CommReportTransItem_RU));
        rslReportTrans.sortOrder(fieldNum(CommReportTransItem_RU, RecId));

        while select reportTransItem
            where reportTransItem.ReportId == commReportJour.ReportId
                && reportTransItem.Approved == NoYes::No
        {
            rslReportTrans.ins(reportTransItem);
        }

        while (rslReportTrans.next(reportTransItem))
        {
            reportTransItem = CommReportTransItem_RU::find(reportTransItem.RecId, true);
            if (reportTransItem)
            {
                select 
                    sum(Qty),
                    sum(LineAmountMST),
                    sum(VATAmountMST),
                    sum(Margin),
                    sum(MarginVAT) from reportTrans
                where reportTrans.RefInvoiceTrans       == reportTransItem.RefInvoiceTrans
                    && reportTrans.RefVendInvoiceTrans   == reportTransItem.RefVendInvoiceTrans
                    && reportTrans.ReportId              == reportTransItem.ReportId
                    && reportTrans.RecId                 != reportTransItem.RecId
                    && reportTrans.Approved              == NoYes::No;

                if (reportTrans.Qty)
                {
                    reportTransItem.Qty             += reportTrans.Qty;
                    reportTransItem.LineAmountMST   += reportTrans.LineAmountMST;
                    reportTransItem.VATAmountMST    += reportTrans.VATAmountMST;
                    reportTransItem.Margin          += reportTrans.Margin;
                    reportTransItem.MarginVAT       += reportTrans.MarginVAT;

                    reportTransItem.doUpdate();

                    update_recordset reportTransItemDetail
                        setting RefReportTrans = reportTransItem.RecId
                    join reportTrans
                        where reportTrans.RecId                 == reportTransItemDetail.RefReportTrans
                            && reportTrans.RefInvoiceTrans       == reportTransItem.RefInvoiceTrans
                            && reportTrans.RefVendInvoiceTrans   == reportTransItem.RefVendInvoiceTrans
                            && reportTrans.ReportId              == reportTransItem.ReportId
                            && reportTrans.RecId                 != reportTransItem.RecId
                            && reportTrans.Approved              == NoYes::No;

                    delete_from reportTrans
                        where reportTrans.RefInvoiceTrans       == reportTransItem.RefInvoiceTrans
                            && reportTrans.RefVendInvoiceTrans   == reportTransItem.RefVendInvoiceTrans
                            && reportTrans.ReportId              == reportTransItem.ReportId
                            && reportTrans.RecId                 != reportTransItem.RecId
                            && reportTrans.Approved              == NoYes::No;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private boolean createLine()
    {
        CommReportTransItem_RU          reportTransItem;
        CommReportTransItemDetail_RU    reportTransItemDetail;
        SalesQty                        qty;
        AmountMST                       amount;
        CustVendInvoiceTrans            tmpInvoiceTrans;
        boolean                         ret;
        CustVendInvoiceTrans            invoiceTransExtParty;

        if (! inventTrans.Qty)
        {
            return false;
        }

        if (commReportJour.PartnerType == ModuleCustVend::Cust)
        {
            invoiceTransExtParty = vendInvoiceTrans;
        }
        else
        {
            invoiceTransExtParty = custInvoiceTrans;
        }

        reportTransItem.ReportId            = commReportJour.ReportId;
        reportTransItem.RefInventTrans      = inventTrans.RecId;
        reportTransItem.RefPurchInventTrans = inventTransPurch.RecId;
        reportTransItem.RefInvoiceJour      = custInvoiceJour.RecId;
        reportTransItem.CustAccount         = custInvoiceJour.InvoiceAccount;
        reportTransItem.RefInvoiceTrans     = custInvoiceTrans.RecId;
        reportTransItem.RefVendInvoiceTrans = vendInvoiceTrans.RecId;
        reportTransItem.RefVendInvoiceJour  = vendInvoiceJour.RecId;


        reportTransItem.Qty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(invoiceTransExtParty.ItemId,
                                                                                                    invoiceTransExtParty.InventDimId,
                                                                                                    -inventTrans.Qty,
                                                                                                    invoiceTransExtParty.inventTable().inventUnitId(),
                                                                                                    invoiceTransExtParty.Unit_RU,
                                                                                                    NoYes::Yes,
                                                                                                    NoYes::No);

        reportTransItem.Unit            = invoiceTransExtParty.Unit_RU;
        reportTransItem.Price           = invoiceTransExtParty.Price_RU;

        tmpInvoiceTrans = reportTransItem.initPartnerInvoiceTrans(commReportJour.PartnerType);

        reportTransItem.LineAmountMST   = tmpInvoiceTrans.LineAmountMST_W;
        reportTransItem.VATAmountMST    = tmpInvoiceTrans.CustVendInvoiceTrans::getVATAmountMST_RU();
        reportTransItem.VATValue        = tmpInvoiceTrans.CustVendInvoiceTrans::getVATValue_RU();


        qty   = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(custInvoiceTrans.ItemId,
                                                                                      custInvoiceTrans.InventDimId,
                                                                                      -inventTrans.Qty,
                                                                                      custInvoiceTrans.inventTable().inventUnitId(),
                                                                                      custInvoiceTrans.SalesUnit,
                                                                                      NoYes::Yes,
                                                                                      NoYes::No);

        reportTransItem.Margin          = CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.SalesPrice * qty,
                                                                                custInvoiceTrans.CurrencyCode,
                                                                                0,
                                                                                custInvoiceTrans.InvoiceDate) *
                                                                                (100.00 / (100 + (custInvoiceJour.InclTax ? custInvoiceTrans.custInvoiceTrans_RU().VATValue_RU : 0)));

        reportTransItem.Margin          = CurrencyExchangeHelper::amount(reportTransItem.Margin);

        qty   = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(vendInvoiceTrans.ItemId,
                                                                                      vendInvoiceTrans.InventDimId,
                                                                                      -inventTrans.Qty,
                                                                                      vendInvoiceTrans.inventTable().inventUnitId(),
                                                                                      vendInvoiceTrans.PurchUnit,
                                                                                      NoYes::Yes,
                                                                                      NoYes::No);

        amount                          = CurrencyExchangeHelper::amountCur2MST(vendInvoiceTrans.PurchPrice * qty,
                                                                                vendInvoiceTrans.CurrencyCode,
                                                                                0,
                                                                                vendInvoiceTrans.InvoiceDate) *
                                                                                (100.00 / (100 + (vendInvoiceJour.InclTax ? vendInvoiceTrans.VATValue_RU : 0)));

        reportTransItem.Margin         -= CurrencyExchangeHelper::amount(amount);
        reportTransItem.MarginVAT       = CurrencyExchangeHelper::amount(reportTransItem.Margin * reportTransItem.VATValue / 100);

        this.initVendor(reportTransItem);
        this.initFactureRef(reportTransItem);

        if ((reportTransItem.FactureDateExternal >= commReportJour.StartDate &&
             reportTransItem.FactureDateExternal <= commReportJour.EndDate)  ||
           ! reportTransItem.FactureDateExternal)
        {
            reportTransItem.insert();

            reportTransItemDetail.RefReportTrans        = reportTransItem.RecId;
            reportTransItemDetail.RefInventTrans        = reportTransItem.RefInventTrans;
            reportTransItemDetail.InventTransId         = inventTrans.inventTransOrigin().InventTransId;
            reportTransItemDetail.InvoiceId             = inventTrans.InvoiceId;
            reportTransItemDetail.RefPurchInventTrans   = reportTransItem.RefPurchInventTrans;
            reportTransItemDetail.Qty                   = reportTransItem.Qty;
            reportTransItemDetail.insert();
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method for creating report for principal lines.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void createReportLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLotRemainQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity from Inventory Transaction table which is not included into report for commissioner lines.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> value of Inventory transaction originator table
    /// </param>
    /// <param name="_invoiceId">
    /// The <c>InvoiceId</c> value of Inventory Transaction table
    /// </param>
    /// <returns>
    /// Quantity from Inventory Transaction table which is not included into report for commissioner lines
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Qty getLotRemainQty(InventTransId _inventTransId,
                              InvoiceId     _invoiceId)
    {
        CommReportTransItem_RU       transItem;
        CommReportTransItemDetail_RU transItemDetail;
        CommReportJour_RU            reportJour;
        InventTrans                  inventTransLocal;
        InventTransOrigin            inventTransOriginLocal;

        select sum(Qty) from transItemDetail
            where transItemDetail.InventTransId == _inventTransId
               && transItemDetail.InvoiceId     == _invoiceId
        exists join transItem
            where transItem.RecId == transItemDetail.RefReportTrans
        exists join reportJour
            where reportJour.ReportId    == transItem.ReportId
               && reportJour.PartnerType == commReportJour.PartnerType;

        select sum(Qty) from inventTransLocal
            where inventTransLocal.InvoiceId == _invoiceId
        exists join inventTransOriginLocal
            where inventTransOriginLocal.RecId          == inventTransLocal.InventTransOrigin
               && inventTransOriginLocal.InventTransId  == _inventTransId;

        return abs(inventTransLocal.Qty) - abs(transItemDetail.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransRemainQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Qty getTransRemainQty(InventTrans _inventTrans, SalesPurch _salesPurch = SalesPurch::Purch)
    {
        CommReportTransItem_RU       transItem;
        CommReportTransItemDetail_RU transItemDetail;
        CommReportJour_RU            reportJour;

        select sum(Qty) from transItemDetail
            where (_salesPurch                          == SalesPurch::Purch
               &&  transItemDetail.RefPurchInventTrans  == _inventTrans.RecId)
               || (_salesPurch                          == SalesPurch::Sales
               &&  transItemDetail.RefInventTrans       == _inventTrans.RecId)
        exists join transItem
            where transItem.RecId == transItemDetail.RefReportTrans
        exists join reportJour
            where reportJour.ReportId    == transItem.ReportId
               && reportJour.PartnerType == commReportJour.PartnerType;

        return abs(_inventTrans.Qty) - abs(transItemDetail.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method for facture reference initialization.
    /// </summary>
    /// <param name="_reportTransItem">
    /// The <c>CommReportTransItem_RU</c> record that requires facture reference.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void initFactureRef(CommReportTransItem_RU _reportTransItem)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Base method for vendor account number initialization.
    /// </summary>
    /// <param name="_reportTransItem">
    /// <c>CommReportTransItem_RU</c> record that requires vendor account number.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void initVendor(CommReportTransItem_RU _reportTransItem)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        mapFactureIdDate = new Map(Types::Int64, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, commReportJour];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendShipments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects goods receipts associated with the shipments selected in the createReportLines method. Associations are built based on inventory marking and inventory dimensions.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processVendShipments()
    {
        InventDimParm       inventDimParm;
        InventDim           inventDimPurch;
        Qty                 qtyTotal, qtyRemain, qtyLotRemain;
        Sign                sign;
        InventTransOrigin   inventTransOriginMarked;
        InventTransOrigin   inventTransOriginPurch;

        inventDimParm.ConfigIdFlag          = NoYes::Yes;
        inventDimParm.InventSizeIdFlag      = NoYes::Yes;
        inventDimParm.InventColorIdFlag     = NoYes::Yes;
        inventDimParm.InventOwnerIdFlag_RU  = NoYes::Yes;
        inventDimParm.InventBatchIdFlag     = NoYes::Yes;
        inventDimParm.InventSerialIdFlag    = NoYes::Yes;

        sign = (inventTrans.StatusIssue == StatusIssue::Sold ? -1 : 1);

        qtyTotal = this.getTransRemainQty(inventTrans, SalesPurch::Sales);

        qtyLotRemain = this.getLotRemainQty(inventTransOrigin.InventTransId, inventTrans.InvoiceId);

        if (! qtyLotRemain)
        {
            return;
        }

        if (inventTrans.MarkingRefInventTransOrigin)
        {
            inventTransOriginMarked = InventTransOrigin::find(inventTrans.MarkingRefInventTransOrigin);

            while select vendInvoiceTrans
                where vendInvoiceTrans.InventTransId == inventTransOriginMarked.InventTransId
            join InvoiceAccount, InclTax from vendInvoiceJour
                where vendInvoiceJour.PurchId               == vendInvoiceTrans.PurchID
                   && vendInvoiceJour.InvoiceId             == vendInvoiceTrans.InvoiceId
                   && vendInvoiceJour.InvoiceDate           == vendInvoiceTrans.InvoiceDate
                   && vendInvoiceJour.numberSequenceGroup   == vendInvoiceTrans.numberSequenceGroup
                   && vendInvoiceJour.InternalInvoiceId     == vendInvoiceTrans.InternalInvoiceId
                   &&(vendInvoiceJour.InventProfileType_RU  == InventProfileType_RU::CommissionAgent
                   || vendInvoiceJour.InventProfileType_RU  == InventProfileType_RU::CommissionPrincipalAgent)
            join Qty from inventTransPurch
                where ((sign == -1 && inventTransPurch.StatusReceipt == StatusReceipt::Purchased)
                   ||  (sign ==  1 && inventTransPurch.StatusIssue   == StatusIssue::Sold))
                   && ((sign == -1 && inventTransPurch.DateFinancial <= inventTrans.DateFinancial)
                   ||  (sign ==  1 && inventTransPurch.DateFinancial >= inventTrans.DateFinancial))
                   && inventTransPurch.DateFinancial                 <= commReportJour.EndDate
                   && inventTransPurch.MarkingRefInventTransOrigin   == inventTransOrigin.RecId
                   && inventTransPurch.InvoiceId                     == vendInvoiceTrans.InvoiceId
            join TableId from inventTransOriginPurch
                where inventTransOriginPurch.RecId          == inventTransPurch.InventTransOrigin
                   && inventTransOriginPurch.InventTransId  == vendInvoiceTrans.InventTransId
            {
                qtyRemain = this.getTransRemainQty(inventTransPurch);

                if (qtyRemain)
                {
                    inventTrans.Qty = sign * min(qtyTotal, qtyRemain);

                    if (this.createLine())
                    {
                        qtyTotal -= sign * inventTrans.Qty;
                    }

                    if (qtyTotal == 0)
                    {
                        break;
                    }
                }
            }
        }

        if (qtyTotal)
        {
            while select vendInvoiceTrans
                where vendInvoiceTrans.ItemId == custInvoiceTrans.ItemId
            join InvoiceAccount, InclTax from vendInvoiceJour
                where vendInvoiceJour.PurchId               == vendInvoiceTrans.PurchID
                   && vendInvoiceJour.InvoiceId             == vendInvoiceTrans.InvoiceId
                   && vendInvoiceJour.InvoiceDate           == vendInvoiceTrans.InvoiceDate
                   && vendInvoiceJour.numberSequenceGroup   == vendInvoiceTrans.numberSequenceGroup
                   && vendInvoiceJour.InternalInvoiceId     == vendInvoiceTrans.InternalInvoiceId
                   &&(vendInvoiceJour.InventProfileType_RU  == InventProfileType_RU::CommissionAgent
                   || vendInvoiceJour.InventProfileType_RU  == InventProfileType_RU::CommissionPrincipalAgent)
            join Qty from inventTransPurch
                where ((sign == -1 && inventTransPurch.StatusReceipt == StatusReceipt::Purchased)
                   ||  (sign ==  1 && inventTransPurch.StatusIssue   == StatusIssue::Sold))
                   && ((sign == -1 && inventTransPurch.DateFinancial <= inventTrans.DateFinancial)
                   ||  (sign ==  1 && inventTransPurch.DateFinancial >= inventTrans.DateFinancial))
                   && inventTransPurch.DateFinancial        <= commReportJour.EndDate
                   && inventTransPurch.InvoiceId            == vendInvoiceTrans.InvoiceId
            join TableId from inventTransOriginPurch
                where inventTransOriginPurch.RecId          == inventTransPurch.InventTransOrigin
                   && inventTransOriginPurch.InventTransId  == vendInvoiceTrans.InventTransId
            #InventDimExistsJoin(inventTransPurch.InventDimId, inventDimPurch, inventDim, inventDimParm)
            {
                qtyRemain = this.getTransRemainQty(inventTransPurch);

                if (qtyRemain)
                {
                    inventTrans.Qty = sign * min(qtyTotal, qtyRemain);

                    if (this.createLine())
                    {
                        qtyTotal -= sign * inventTrans.Qty;
                    }

                    if (qtyTotal == 0)
                    {
                        break;
                    }
                }
            }
        }

        if (qtyTotal && !(sign == 1 && commReportJour.PartnerType == ModuleCustVend::Cust))
        {
            select firstonly vendInvoiceTrans
                where vendInvoiceTrans.ItemId == custInvoiceTrans.ItemId
            join InvoiceAccount, InclTax from vendInvoiceJour
                where vendInvoiceJour.PurchId               == vendInvoiceTrans.PurchID
                   && vendInvoiceJour.InvoiceId             == vendInvoiceTrans.InvoiceId
                   && vendInvoiceJour.InvoiceDate           == vendInvoiceTrans.InvoiceDate
                   && vendInvoiceJour.numberSequenceGroup   == vendInvoiceTrans.numberSequenceGroup
                   && vendInvoiceJour.InternalInvoiceId     == vendInvoiceTrans.InternalInvoiceId
                   &&(vendInvoiceJour.InventProfileType_RU  == InventProfileType_RU::CommissionAgent
                   || vendInvoiceJour.InventProfileType_RU  == InventProfileType_RU::CommissionPrincipalAgent)
                   && vendInvoiceJour.CorrectionType_RU     == FactureCorrectionType_RU::Unknown
            exists join inventTransPurch
                where (inventTransPurch.StatusReceipt   == StatusReceipt::Purchased
                   ||  inventTransPurch.StatusIssue     == StatusIssue::Sold)
                   && inventTransPurch.InvoiceId        == vendInvoiceTrans.InvoiceId
            join TableId from inventTransOriginPurch
                where inventTransOriginPurch.RecId          == inventTransPurch.InventTransOrigin
                   && inventTransOriginPurch.InventTransId  == vendInvoiceTrans.InventTransId
            #InventDimExistsJoin(inventTransPurch.InventDimId, inventDimPurch, inventDim, inventDimParm);

            inventTrans.Qty = sign * qtyTotal;
            this.createLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            this.cleanup();
            this.createReportLines();
            this.combineLines();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes report for principal header as an input context.
    /// </summary>
    /// <param name="_packedReportJour">
    /// Report for principal header packed into container.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setReportJour(container _packedReportJour)
    {
        [commReportJour] = _packedReportJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case currentVersion :
                [version, commReportJour] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CommReportShipmentCalc_RU construct(ModuleCustVend _principalType)
    {
        CommReportShipmentCalc_RU reportShipmentCalc;

        switch (_principalType)
        {
            case ModuleCustVend::Cust :
                reportShipmentCalc = new CommReportShipmentCalcPurch_RU();
                break;
            case ModuleCustVend::Vend :
                reportShipmentCalc = new CommReportShipmentCalcSales_RU();
                break;
        }

        return reportShipmentCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    client server static public ClassDescription description()
    {
        return "@SalesPurchBook:GenerateReportForPrincipalShip";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CommReportJour_RU           commReportJour;
        CommReportShipmentCalc_RU   reportShipmentCalc;

        if (! _args          ||
            ! _args.record() ||
            _args.dataset() != tableNum(CommReportJour_RU))
        {
            throw error(Error::missingRecord(funcname()));
        }

        commReportJour = _args.record();

        reportShipmentCalc = CommReportShipmentCalc_RU::construct(commReportJour.PartnerType);
        reportShipmentCalc.setReportJour([commReportJour]);
        reportShipmentCalc.saveLast();

        if (reportShipmentCalc.prompt())
        {
            reportShipmentCalc.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>