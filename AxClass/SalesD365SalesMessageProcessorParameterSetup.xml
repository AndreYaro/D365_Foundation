<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesD365SalesMessageProcessorParameterSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesD365SalesMessageProcessorParameterSetup</c> class will set default message processor parameters in the <c>SalesParameter</c> table.
/// </summary>
[SysSetupTable(tableStr(SalesParameters))]
[SysSetupConfigKey(configurationKeyStr(CDSIntegration))]
[SysSetupConfig(true, 500, 1.1)]
internal final class SalesD365SalesMessageProcessorParameterSetup implements SysSetup
{
    public const int DefaultBatchTaskSize = 50;
    public const boolean DefaultAsyncProcessingEnabled = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void loadData()
    {
        if (!SalesD365SalesMessageProcessorParameterSetupFlight::instance().isEnabled())
        {
            return;
        }

        if (SalesD365SalesMessageProcessorParameterSetupCrossCompanyFlight::instance().isEnabled())
        {
            this.updateSalesParametersCrossCompany();
        }
        else
        {
            CompanyInfo companyInfo;

            while select companyInfo
            {
                changecompany(companyInfo.DataArea)
                {
                    this.updateSalesParameters();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesParametersCrossCompany</Name>
				<Source><![CDATA[
    private void updateSalesParametersCrossCompany()
    {
        SalesParameters parameters;

        ttsbegin;

        parameters.skipDatabaseLog(true);
        parameters.skipDataMethods(true);
        parameters.skipEvents(true);

        update_recordset crosscompany parameters
            setting MessageProcessorBatchTaskSize = DefaultBatchTaskSize,
                    MessageProcessorCreateQuotationJournalAsync = DefaultAsyncProcessingEnabled,
                    MessageProcessorCreateQuotationConfirmJournalAsync = DefaultAsyncProcessingEnabled,
                    MessageProcessorQuotationDefaultSalesOrderAsync = DefaultAsyncProcessingEnabled,
                    MessageProcessorQuotationDefaultSalesOrderLinesPerMessage = DefaultBatchTaskSize,
                    MessageProcessorCalculateSalesPricesAndTotalsAsync = DefaultAsyncProcessingEnabled,
                    MessageProcessorCalculateSalesPricesAndTotalsLinesPerMessage = DefaultBatchTaskSize;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesParameters</Name>
				<Source><![CDATA[
    private void updateSalesParameters()
    {
        SalesParameters parameters;

        ttsbegin;

        if (SalesD365SalesMessageProcessorParameterSetupTimeoutFlight::instance().isEnabled())
        {
            parameters.skipDataMethods(true);

            update_recordset parameters
                setting MessageProcessorBatchTaskSize = DefaultBatchTaskSize,
                        MessageProcessorCreateQuotationJournalAsync = DefaultAsyncProcessingEnabled,
                        MessageProcessorCreateQuotationConfirmJournalAsync = DefaultAsyncProcessingEnabled,
                        MessageProcessorQuotationDefaultSalesOrderAsync = DefaultAsyncProcessingEnabled,
                        MessageProcessorQuotationDefaultSalesOrderLinesPerMessage = DefaultBatchTaskSize,
                        MessageProcessorCalculateSalesPricesAndTotalsAsync = DefaultAsyncProcessingEnabled,
                        MessageProcessorCalculateSalesPricesAndTotalsLinesPerMessage = DefaultBatchTaskSize;
        }
        else
        {
            parameters = SalesParameters::find(true);

            parameters.MessageProcessorBatchTaskSize = DefaultBatchTaskSize;
            parameters.MessageProcessorCreateQuotationJournalAsync = DefaultAsyncProcessingEnabled;
            parameters.MessageProcessorCreateQuotationConfirmJournalAsync = DefaultAsyncProcessingEnabled;
            parameters.MessageProcessorQuotationDefaultSalesOrderAsync = DefaultAsyncProcessingEnabled;
            parameters.MessageProcessorQuotationDefaultSalesOrderLinesPerMessage = DefaultBatchTaskSize;
            parameters.MessageProcessorCalculateSalesPricesAndTotalsAsync = DefaultAsyncProcessingEnabled;
            parameters.MessageProcessorCalculateSalesPricesAndTotalsLinesPerMessage = DefaultBatchTaskSize;
            parameters.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>