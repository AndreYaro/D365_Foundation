<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSConfigurationKeyStageChangingContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSConfigurationKeyStageChangingContext</c> class is used to
/// provide a particular instance of the <c>SysConfigurationKeyTree</c> class
/// that should be used for handling configuration stage changes in the given context.
/// </summary>
internal final class WHSConfigurationKeyStageChangingContext implements System.IDisposable
{
    private static WHSConfigurationKeyStageChangingContext instance;
    private SysConfigurationKeyTree sysConfigurationKeyTree;
    private FormTreeControl formTreeControl;
    private boolean isCascade;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        instance = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        instance = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the class.
    /// </summary>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSConfigurationKeyStageChangingContext construct()
    {
        return WHSConfigurationKeyStageChangingContext::current() ? WHSConfigurationKeyStageChangingContext::current() : new WHSConfigurationKeyStageChangingContext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the instance of the class.
    /// </summary>
    /// <returns>The instance of the class. If no instance is created null is returned.</returns>
    [Hookable(false)]
    internal static WHSConfigurationKeyStageChangingContext current()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSysConfigurationKeyTree</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public SysConfigurationKeyTree parmSysConfigurationKeyTree(SysConfigurationKeyTree _sysConfigurationKeyTree = sysConfigurationKeyTree)
    {
        sysConfigurationKeyTree = _sysConfigurationKeyTree;

        return sysConfigurationKeyTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTreeControl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public FormTreeControl parmFormTreeControl(FormTreeControl _formTreeControl = formTreeControl)
    {
        formTreeControl = _formTreeControl;

        return formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCascade</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public boolean parmIsCascade(boolean _isCascade = isCascade)
    {
        isCascade = _isCascade;

        return isCascade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTreeItemByConfigurationKeyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find <c>FormTreeItem</c> in <c>FormTreeControl</c> by the configuration key Id.
    /// </summary>
    /// <param name = "_formTreeControl">Form tree control.</param>
    /// <param name = "_configurationKeyId">Configuration key id.</param>
    /// <param name = "_parentNode">Index number of the parent node of the tree control.</param>
    /// <returns>The <c>FormTreeItem</c> for the sought configuration key</returns>
    internal static FormTreeItem findTreeItemByConfigurationKeyId(FormTreeControl _formTreeControl, int _configurationKeyId, int _parentNode = 0)
    {
        FormTreeItem treeItem;
        int node = _formTreeControl.getChild(_parentNode);

        while (node)
        {
            FormTreeItem treeItemChild = _formTreeControl.getItem(node);

            if (treeItemChild.data() == _configurationKeyId)
            {
                treeItem = treeItemChild;
                break;
            }

            if (treeItemChild.children())
            {
                treeItem = WHSConfigurationKeyStageChangingContext::findTreeItemByConfigurationKeyId(_formTreeControl, _configurationKeyId, node);

                if (treeItem)
                {
                    break;
                }
            }

            node = _formTreeControl.getNextSibling(node);
        }

        return treeItem;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>