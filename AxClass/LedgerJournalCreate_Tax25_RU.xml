<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCreate_Tax25_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalCreate_Tax25_RU extends LedgerJournalCreate_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateJournal</Name>
				<Source><![CDATA[
    protected boolean canCreateJournal(boolean _showMessage = true)
    {
        return LedgerJournalCreate_Tax25_RU::canCreateJournalStatic(registerJournalTable,
                                                                    journalType,
                                                                    _showMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReverseJournal</Name>
				<Source><![CDATA[
    protected boolean canCreateReverseJournal(boolean _showMessage = true)
    {
        return LedgerJournalCreate_Tax25_RU::canCreateReverseJournalStatic(registerJournalTable,
                                                                           journalType,
                                                                           _showMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>LedgerJournalTable</c> record.
    /// </summary>
    protected void createLedgerJournalTable()
    {
        LedgerJournalTable_W    table_W;

        ttsbegin;
        ledgerJournalTable.clear();
        ledgerJournalTable.initFromLedgerJournalName((select firstonly JournalName from ledgerJournalName
                                                          where ledgerJournalName.JournalType == journalType).JournalName);
        table_W = ledgerJournalTable.ledgerJournalTable_W();
        table_W.ReportPeriod_RU  = registerJournalTable.EndDate;
        if (registerJournalTable.Version > 0)
        {
            table_W.ReportingDate_RU = registerJournalTable.EndDate;
        }
        if (reverseType == JournalReverseType_RU::Reversed)
        {
            table_W.ReverseType_RU = JournalReverseType_RU::Reversed;
        }
        ledgerJournalTable.packLedgerJournalTable_W(table_W);
        ledgerJournalTable.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReverseTrans</Name>
				<Source><![CDATA[
    protected void createReverseTrans()
    {
        LedgerJournalTrans      ledgerJournalTransReverse;
        LedgerJournalTrans      ledgerJournalTransMain;
        LedgerJournalTable      ledgerJournalTableMain;
        LedgerJournalTable_W    ledgerJournalTableMain_W;
        LedgerJournalTable_W    ledgerJournalTableReverse_W;
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        RecId                   calendarId = CompanyInfoHelper::fiscalCalendarRecId();

        try
        {
            ttsbegin;

            ledgerJournalTableMain = this.getMainJournal(journalType, registerJournalTable.EndDate, true);

            ledgerJournalTableReverse_W = ledgerJournalTable.ledgerJournalTable_W();
            ledgerJournalTableReverse_W.selectForUpdate(true);
            ledgerJournalTableReverse_W.RTax25RegVersion = ledgerJournalTableMain.ledgerJournalTable_W().RTax25RegVersion;
            ledgerJournalTableReverse_W.update();

            this.createVoucher(ledgerJournalTable.JournalNum);

            while select ledgerJournalTransMain
                where ledgerJournalTransMain.JournalNum == ledgerJournalTableMain.JournalNum
            {
                ledgerJournalTransReverse.data(ledgerJournalTransMain);
                ledgerJournalTransReverse.JournalNum      = ledgerJournalTable.JournalNum;
                ledgerJournalTransReverse.TransDate       = LedgerFiscalCalendar::findFirstOpenStartDateInYear(calendarId, ledgerJournalTransReverse.TransDate);
                ledgerJournalTransReverse.Voucher         = voucher;
                ledgerJournalTransReverse.AmountCurDebit  = - ledgerJournalTransMain.AmountCurDebit;
                ledgerJournalTransReverse.AmountCurCredit = - ledgerJournalTransMain.AmountCurCredit;
                ledgerJournalTransReverse.Txt             = this.stornoTxt();
                ledgerJournalTransReverse.insert();
            }

            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes, NoYes::No);
            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            ledgerJournalTableMain_W = ledgerJournalTableMain.ledgerJournalTable_W();
            ledgerJournalTableMain_W.selectForUpdate(true);
            ledgerJournalTableMain_W.Reverse_RU = NoYes::Yes;

            if (ledgerJournalTableMain_W.RecId)
            {
                ledgerJournalTableMain_W.update();
            }
            else
            {
                ledgerJournalTableMain_W.ReportPeriod_RU    = registerJournalTable.EndDate;
                ledgerJournalTableMain_W.LedgerJournalTable = ledgerJournalTableMain.RecId;
                ledgerJournalTableMain_W.insert();
            }

            ttscommit;
        }
        catch(Exception::Error)
        {
            ttsabort;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    #define.Value9(9)
    #define.Value7(7)
    #define.Value8(8)
    #define.Value4(4)
    #define.Value3(3)
    #define.Value2(2)
    #define.Value12(12)
    #define.Value11(11)
    #define.Value10(10)
    #AviFiles
    #define.CTA(1)
    #define.CTL(2)
    #define.formingDTA(3)
    #define.formingDTL(4)
    #define.payOffDTA(5)
    #define.payOffDTL(6)
    #define.writingOffDTA(7)
    #define.writingOffDTL(8)
    #define.tempAccountingObject(2)
    #define.constAccountingObject(3)
    protected void createTrans(JournalId  _journalNum)
    {
        SysOperationProgress          operationProgress;
        LineNum                       lineNum;
        LedgerJournalTrans            ledgerJournalTrans;
        RTax25PostingRoll             postingRoll = RTax25Parameters::find().PostingRoll;
        RTax25RegisterJournalTable    journalTable;
        RTax25RegisterJournalTrans    journalTrans;
        RTax25RegisterJournalLink     journalLink;
        RTax25LedgerAccountGroup      ledgerAccountGroup;
        TaxCode                       taxCode;
        Map                           mapTA            = new Map(Types::String, Types::Container),
                                      mapTL            = new Map(Types::String, Types::Container),
                                      mapPayOffDTA     = new Map(Types::String, Types::Container),
                                      mapPayOffDTL     = new Map(Types::String, Types::Container),
                                      mapWritingOffDTA = new Map(Types::String, Types::Container),
                                      mapWritingOffDTL = new Map(Types::String, Types::Container);
        int                           loop;
        str                           key;
        RTax25RegisterId              differences,
                                      constantDifferences = RTax25RegisterTable::find(RTax25RegisterType::ConstantDifferences).RegisterId,
                                      temporaryDifferences = RTax25RegisterTable::find(RTax25RegisterType::TemporaryDifferences).RegisterId;
        LedgerDimensionDefaultAccount taxOutgoingLedgerDimension;
        LedgerDimensionDefaultAccount defaultAccount;
        LedgerDimensionDefaultAccount offsetDefaultAccount;
        DimensionDefault              defaultDimension;
        RTax25Query                   query;

        void putToMap(Map _map, int _index)
        {
            container                   con;

            con = conIns(con, 1, query.getField(_index));
            con = conIns(con, #Value2, taxCode);

            if (postingRoll == RTax25PostingRoll::Source)
            {
                con = conIns(con, #Value3, query.getRecord().rTax25ProfitTable);
                if (differences == temporaryDifferences)
                {
                    con = conIns(con, #Value4, query.getField(#tempAccountingObject));
                }
                else
                {
                    con = conIns(con, #Value4, query.getField(#constAccountingObject));
                }
            }

            if (_map.exists(key))
            {
                con = conPoke(con, 1, conPeek(_map.lookup(key), 1) + conPeek(con, 1));
            }

            _map.insert(key, con);
        }

        void createLines(Map _map, int _operation)
        {
            MapIterator   mLoop = new MapIterator(_map);

            mLoop.begin();
            while (mLoop.more())
            {
                if (conPeek(mLoop.value(), 1) != 0)
                {
                    ledgerJournalTrans.clear();
                    ledgerJournalTrans.LineNum           = lineNum;
                    ledgerJournalTrans.JournalNum        = _journalNum;
                    ledgerJournalTrans.Voucher           = voucher;
                    ledgerJournalTrans.CurrencyCode      = CompanyInfoHelper::standardCurrency();
                    ledgerJournalTrans.TransDate         = LedgerFiscalCalendar::findFirstOpenStartDateInYear(CompanyInfoHelper::fiscalCalendarRecId(), registerJournalTable.EndDate);
                    ledgerJournalTrans.ExchRate          = ExchangeRateHelper::exchRate(ledgerJournalTrans.CurrencyCode, ledgerJournalTrans.TransDate);
                    ledgerJournalTrans.AccountType       = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.OffsetAccountType = LedgerJournalACType::Ledger;
                    ledgerJournalTrans.TaxCode           = conPeek(mLoop.value(), #Value2);

                    ledgerAccountGroup                   = RTax25LedgerAccountGroup::find(TaxTable::find(ledgerJournalTrans.TaxCode).TaxAccountGroup);
                    taxOutgoingLedgerDimension           = TaxLedgerAccountGroup::find(ledgerAccountGroup.TaxAccountGroup).TaxOutgoingLedgerDimension;

                    switch (_operation)
                    {
                        case #CTA:
                            defaultAccount                     = taxOutgoingLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.ctaLedgerDimension;
                            ledgerJournalTrans.AmountCurDebit  = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107820" + #Blank;
                            break;

                        case #CTL:
                            defaultAccount                     = taxOutgoingLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.ctlLedgerDimension;
                            ledgerJournalTrans.AmountCurCredit = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107821" + #Blank;
                            break;

                        case #formingDTA:
                            defaultAccount                     = taxOutgoingLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.dtaLedgerDimension;
                            ledgerJournalTrans.AmountCurCredit = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107124" + #Blank;
                            break;

                        case #formingDTL:
                            defaultAccount                     = taxOutgoingLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.dtlLedgerDimension;
                            ledgerJournalTrans.AmountCurDebit  = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107127" + #Blank;
                            break;

                        case #payOffDTA:
                            defaultAccount                     = taxOutgoingLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.dtaLedgerDimension;
                            ledgerJournalTrans.AmountCurDebit  = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107125" + #Blank;
                            break;

                        case #payOffDTL:
                            defaultAccount                     = taxOutgoingLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.dtlLedgerDimension;
                            ledgerJournalTrans.AmountCurCredit = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107128" + #Blank;
                            break;

                        case #writingOffDTA:
                            defaultAccount                     = ledgerAccountGroup.WritingOffDTALedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.dtaLedgerDimension;
                            ledgerJournalTrans.AmountCurDebit  = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107129" + #Blank;
                            break;

                        case #writingOffDTL:
                            defaultAccount                     = ledgerAccountGroup.dtlLedgerDimension;
                            offsetDefaultAccount               = ledgerAccountGroup.WritingOffDTLLedgerDimension;
                            ledgerJournalTrans.AmountCurDebit  = conPeek(mLoop.value(), 1);
                            ledgerJournalTrans.Txt             = "@GLS107130" + #Blank;
                            break;
                    }

                    switch (postingRoll)
                    {
                        case RTax25PostingRoll::Source:
                            defaultDimension        = RTax25ProfitTable::profitRecId2DefaultDimension(conPeek(mLoop.value(), #Value3));
                            ledgerJournalTrans.Txt += "@GLS107807" + #Blank + conPeek(mLoop.value(), #Value4);
                            break;

                        case RTax25PostingRoll::ExpenseAndIncome:
                            defaultDimension        = RTax25ProfitTable::profitRecId2DefaultDimension(RTax25ProfitTable::findByProfitId(mLoop.key()).RecId);
                            ledgerJournalTrans.Txt += "@GLS107808" + #Blank + mLoop.key();
                            break;

                        case RTax25PostingRoll::Tax:
                            ledgerJournalTrans.Txt += "@GLS107809" + #Blank + ledgerJournalTrans.TaxCode;
                            break;

                        case RTax25PostingRoll::Total:
                            ledgerJournalTrans.Txt += "@GLS107819";
                            break;
                    }

                    ledgerJournalTrans.parmLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(defaultAccount, defaultDimension));
                    ledgerJournalTrans.parmOffsetLedgerDimension(this.mergeLedgerDimensionAndDefaultDimension(offsetDefaultAccount, defaultDimension));

                    ledgerJournalTrans.insert();

                    lineNum ++;
                }

                mLoop.next();
            }
        }

        this.createVoucher(_journalNum);

        operationProgress = new SysOperationProgress();
        operationProgress.setCaption(strFmt("@SYS26868", "@GLS107812", registerJournalTable.EndDate));
        operationProgress.setAnimation(#AviUpdate);

        ttsbegin;

        differences = constantDifferences;

        select firstonly JournalNum, FiscalYear, PeriodType, PeriodNum, EnableCorrective, RecId from journalTable
            order by Version desc
            where journalTable.EndDate == registerJournalTable.EndDate &&
                  journalTable.RegisterJournalType == RTax25RegisterJournalType::ProfitTax;

        for (loop = 1; loop <= #Value2; loop++)
        {
            if (journalTable.EnableCorrective)
            {
                select journalTrans
                    where ! journalTrans.Cancelled                                    &&
                          journalTrans.RegisterId          == differences
                    exists join journalLink
                        where journalLink.TransRecId == journalTrans.RecId &&
                              journalLink.TableRecId == journalTable.RecId;
            }
            else
            {
                select journalTrans
                    where journalTrans.JournalNum          == journalTable.JournalNum &&
                      journalTrans.FiscalYear          == journalTable.FiscalYear &&
                      journalTrans.PeriodType          == journalTable.PeriodType &&
                      journalTrans.PeriodNum           == journalTable.PeriodNum  &&
                          ! journalTrans.Cancelled                                    &&
                          journalTrans.RegisterId          == differences;
            }
            while (journalTrans)
            {
                query = RTax25Query::newParameters(RTax25RegisterTable::registerId2Type(differences),
                                                   journalTrans,
                                                   ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                                   differences,
                                                                                   journalTrans.PeriodType,
                                                                                   journalTrans.PeriodNum,
                                                                                   journalTrans.FiscalYear));

                if (query.first())
                {
                    do
                    {
                        if (! query.getRecord().RTax25ProfitTable && differences == constantDifferences)
                        {
                            taxCode = RTax25RegisterParameters::find(differences, 1).Parameter;
                        }
                        else
                        {
                            taxCode = RTax25ProfitTable::find(query.getRecord().RTax25ProfitTable).taxCode();
                        }

                        if (!taxCode && differences == temporaryDifferences)
                        {
                            taxCode = RTax25RegisterParameters::find(differences, 5).Parameter;
                        }

                        switch (postingRoll)
                        {
                            case RTax25PostingRoll::Source:
                                key = int2str(query.getRecord().RefTableId) + int642str(query.getRecord().RefRecId);
                                break;

                            case RTax25PostingRoll::ExpenseAndIncome:
                                key = RTax25ProfitTable::find(query.getRecord().rTax25ProfitTable).ProfitId;
                                break;

                            case RTax25PostingRoll::Tax:
                                key = taxCode;
                                break;

                            case RTax25PostingRoll::Total:
                                key = TaxTable::find(taxCode).TaxAccountGroup;
                                break;
                        }

                        putToMap(mapTA, #Value7); // forming CTA/DTa
                        putToMap(mapTL, #Value9); // forming CTL/DTl

                        if (differences == temporaryDifferences)
                        {
                            putToMap(mapPayOffDTA, #Value8);  // pay off DTa
                            putToMap(mapPayOffDTL, #Value10); // pay off DTl
                            putToMap(mapWritingOffDTA, #Value11); // writing off DTa
                            putToMap(mapWritingOffDTL, #Value12); // writing off DTl
                        }
                    }
                    while (query.next());
                }

                next journalTrans;
            }

            if (differences == temporaryDifferences)
            {
                createLines(mapTA, #formingDTA);
                createLines(mapTL, #formingDTL);
                createLines(mapPayOffDTA, #payOffDTA);
                createLines(mapPayOffDTL, #payOffDTL);
                createLines(mapWritingOffDTA, #writingOffDTA);
                createLines(mapWritingOffDTL, #writingOffDTL);
            }
            else
            {
                createLines(mapTA, #CTA);
                createLines(mapTL, #CTL);
            }

            differences = temporaryDifferences;
            mapTA       = new Map(Types::String, Types::Container);
            mapTL       = new Map(Types::String, Types::Container);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stornoTxt</Name>
				<Source><![CDATA[
    protected str stornoTxt()
    {
        return "@GLS107822";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalStatic</Name>
				<Source><![CDATA[
    public static boolean canCreateJournalStatic(RTax25RegisterJournalTable _registerJournalTable,
                                                 LedgerJournalType          _type,
                                                 boolean                    _showMessage = true)
    {
        if (_registerJournalTable.RecId == 0)
        {
            return false;
        }

        if (_type == LedgerJournalType::RTax25TaxDiffByBalance)
        {
            if (!RTax25RegisterJournalTrans::findLink(
                    _registerJournalTable,
                    RTax25RegisterTable::find(RTax25RegisterType::ConstantDifferencesByBalance).RegisterId).Approved
                || !RTax25RegisterJournalTrans::findLink(
                    _registerJournalTable,
                    RTax25RegisterTable::find(RTax25RegisterType::TemporaryDifferencesByBalance).RegisterId).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }

            if (!LedgerJournalCreate_Tax25_RU::checkExistsLedgerJournalTableByLedgerJournalType(
                _registerJournalTable,
                LedgerJournalType::RTax25,
                _showMessage ? "@RTax25Registers:GLTransTaxDiffRegExists" : ''))
            {
                return false;
            }
        }
        else if (_type == LedgerJournalType::RTax25)
        {
            if (!RTax25RegisterJournalTrans::findLink(
                    _registerJournalTable,
                    RTax25RegisterTable::find(RTax25RegisterType::ConstantDifferences).RegisterId).Approved ||
                !RTax25RegisterJournalTrans::findLink(
                    _registerJournalTable,
                    RTax25RegisterTable::find(RTax25RegisterType::TemporaryDifferences).RegisterId).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }

            if (!LedgerJournalCreate_Tax25_RU::checkExistsLedgerJournalTableByLedgerJournalType(
                _registerJournalTable,
                LedgerJournalType::RTax25TaxDiffByBalance,
                _showMessage ? "@RTax25Registers:GLTransTaxDiffRegByBalExists" : ''))
            {
                return false;
            }
        }
        else if (_type == LedgerJournalType::RTax25AmountDifference)
        {
            if (!RTax25RegisterJournalTrans::find(_registerJournalTable.JournalNum,
                                                  _registerJournalTable.PeriodType,
                                                  _registerJournalTable.PeriodNum,
                                                  _registerJournalTable.FiscalYear,
                                                  RTax25RegisterTable::find(RTax25RegisterType::AmountDifference).RegisterId).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }
        }
        else if (_type == LedgerJournalType::RTax25ExchDifference)
        {
            if (!RTax25RegisterJournalTrans::find(_registerJournalTable.JournalNum,
                                                  _registerJournalTable.PeriodType,
                                                  _registerJournalTable.PeriodNum,
                                                  _registerJournalTable.FiscalYear,
                                                  RTax25RegisterTable::find(RTax25RegisterType::TaxExchangeAdj).RegisterId).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }
        }
        else if (_type == LedgerJournalType::RAssetAssessedTax)
        {
            if (!RTax25RegisterJournalTrans::find(_registerJournalTable.JournalNum,
                                                  _registerJournalTable.PeriodType,
                                                  _registerJournalTable.PeriodNum,
                                                  _registerJournalTable.FiscalYear,
                                                  new DictEnum(enumNum(RAssetAssessedTaxRegType)).value2Symbol(RAssetAssessedTaxRegType::AssessedTax)).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }
        }
        else if (_type == LedgerJournalType::RAssetTransportTax)
        {
            if (!RTax25RegisterJournalTrans::find(_registerJournalTable.JournalNum,
                                                  _registerJournalTable.PeriodType,
                                                  _registerJournalTable.PeriodNum,
                                                  _registerJournalTable.FiscalYear,
                                                  new DictEnum(enumNum(RAssetAssessedTaxRegType)).value2Symbol(RAssetAssessedTaxRegType::TransportTax)).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }
        }
        else if (_type == LedgerJournalType::RAssetLandTax)
        {
            if (!RTax25RegisterJournalTrans::find(_registerJournalTable.JournalNum,
                                                  _registerJournalTable.PeriodType,
                                                  _registerJournalTable.PeriodNum,
                                                  _registerJournalTable.FiscalYear,
                                                  new DictEnum(enumNum(RAssetAssessedTaxRegType)).value2Symbol(RAssetAssessedTaxRegType::LandTax)).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }
        }
        else if (_type == LedgerJournalType::RTax25DebtDebitReserve)
        {
            if (!RTax25RegisterJournalTrans::findLink(
                _registerJournalTable,
                RTax25RegisterTable::find(RTax25RegisterType::DebtDebitReservationDetail).RegisterId).Approved &&
            !RTax25RegisterJournalTrans::findLink(
                _registerJournalTable,
                RTax25RegisterTable::find(RTax25RegisterType::DebtDebitReservationDetailRAP).RegisterId).Approved)
            {
                return _showMessage ? checkFailed("@GLS107817") : false;
            }
        }

        return LedgerJournalCreate_Tax25_RU::checkExistsLedgerJournalTableByLedgerJournalType(
            _registerJournalTable,
            _type,
            _showMessage ? "@GLS107818" : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistsLedgerJournalTableByLedgerJournalType</Name>
				<Source><![CDATA[
    private static boolean checkExistsLedgerJournalTableByLedgerJournalType(
        RTax25RegisterJournalTable _registerJournalTable,
        LedgerJournalType _type,
        SysInfoLogStr _message = '')
    {
        boolean ret = true;

        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTable_W ledgerJournalTable_W;

        select firstonly ledgerJournalTable
            where ledgerJournalTable.JournalType == _type
            exists join ledgerJournalTable_W
                where ledgerJournalTable_W.LedgerJournalTable == ledgerJournalTable.RecId
                    && ledgerJournalTable_W.ReportPeriod_RU == _registerJournalTable.EndDate
                    && ledgerJournalTable_W.ReverseType_RU == JournalReverseType_RU::Main
                    && ledgerJournalTable_W.Reverse_RU == NoYes::No;

        if (ledgerJournalTable)
        {
            ret = _message ? checkFailed(_message) : false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReverseJournalStatic</Name>
				<Source><![CDATA[
    public static boolean canCreateReverseJournalStatic(RTax25RegisterJournalTable _registerJournalTable,
                                                        LedgerJournalType          _type,
                                                        boolean                    _showMessage = true)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTable_W ledgerJournalTable_W;

        select firstonly ledgerJournalTable
                 where ledgerJournalTable.JournalType          == _type                         &&
                       ledgerJournalTable.Posted               == NoYes::Yes

                 exists join ledgerJournalTable_W
                 where ledgerJournalTable_W.LedgerJournalTable == ledgerJournalTable.RecId      &&
                       ledgerJournalTable_W.ReportPeriod_RU    == _registerJournalTable.EndDate &&
                       ledgerJournalTable_W.ReverseType_RU     == JournalReverseType_RU::Main   &&
                       ledgerJournalTable_W.Reverse_RU         == NoYes::No;

        if (!ledgerJournalTable)
        {
            return _showMessage ? checkFailed("@GLS105881") : false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notExistReverseJournal</Name>
				<Source><![CDATA[
    public static boolean notExistReverseJournal(RTax25RegisterJournalTable _registerJournalTable,
                                                 LedgerJournalType          _type,
                                                 boolean                    _showMessage = true)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTable_W ledgerJournalTable_W;

        select firstonly ledgerJournalTable
                 where ledgerJournalTable.JournalType          == _type
                 exists join ledgerJournalTable_W
                 where ledgerJournalTable_W.LedgerJournalTable == ledgerJournalTable.RecId      &&
                       ledgerJournalTable_W.ReportPeriod_RU    == _registerJournalTable.EndDate &&
                       ledgerJournalTable_W.RTax25RegVersion   >= _registerJournalTable.Version &&
                       ledgerJournalTable_W.ReverseType_RU     == JournalReverseType_RU::Main   &&
                       ledgerJournalTable_W.Reverse_RU         == NoYes::No;

        if (ledgerJournalTable)
        {
            return _showMessage ? checkFailed("@GLS107818") : false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>