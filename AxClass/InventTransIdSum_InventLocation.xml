<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransIdSum_InventLocation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransIdSum_InventLocation</c> class calculates the sum of the <c>InventTrans</c>
/// records based on the <c>LocationType</c> value.
/// </summary>
/// <remarks>
/// Some modules, such as quarantine orders and transfer orders generate <c>InventTrans</c> record that
/// have the same <c>InventTransId</c> values but with <c>InventDimId</c> values that have different
/// <c>InventLocationId</c> values. The sum is for a specific <c>InventLocationType</c> value can be
/// found by using this class.
/// </remarks>
public class InventTransIdSum_InventLocation   extends InventTransIdSum
{
    InventLocationType inventLocationType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSumImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and stores the results that are shown in internal variables.
    /// </summary>
    [Replaceable]
    protected void calcSumImplementation()
    {
        InventTrans     inventTrans;
        InventDim       inventDim;
        InventDim       inventDimTest;
        InventLocation  inventLocation;

        if (filterDimensions)
        {
            while select sum(PdsCWQty), sum(Qty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where   inventTrans.InventTransOrigin     == transOriginId
                    && (inventTrans.TransChildType        == childType    || !perChildType)
                    && (inventTrans.TransChildRefId       == childRefId   || !perChildType)
                join TableId from inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                join TableId from inventLocation
                    where inventLocation.InventLocationId   == inventDim.InventLocationId   &&
                          inventLocation.InventLocationType == inventLocationType
                #InventDimExistsJoin(inventTrans.inventDimId, inventDimTest, inventDimCriteria, inventDimParmCriteria)
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
        else
        {
            while select sum(PdsCWQty), sum(Qty)
                from inventTrans
                group by StatusIssue, StatusReceipt
                where   inventTrans.InventTransOrigin     == transOriginId
                    && (inventTrans.TransChildType        == childType    || !perChildType)
                    && (inventTrans.TransChildRefId       == childRefId   || !perChildType)
                join TableId from inventDim
                    where inventDim.InventDimId == inventTrans.InventDimId
                join TableId from inventLocation
                    where inventLocation.InventLocationId   == inventDim.InventLocationId   &&
                          inventLocation.InventLocationType == inventLocationType
            {
                this.addInventTransToTotals(inventTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationType</Name>
				<Source><![CDATA[
        public InventLocationType parmInventLocationType(InventLocationType _inventLocationType = inventLocationType)
    {
        inventLocationType = _inventLocationType;

        return inventLocationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuarantine</Name>
				<Source><![CDATA[
        public static InventTransIdSum_InventLocation newQuarantine(
        InventTransOriginId   _transOriginId,
        boolean               _perChildType   = false,
        InventTransChildType  _childType      = InventTransChildType::None,
        InventTransChildRefId _childRefId     = '')
    {
        InventTransIdSum_InventLocation inventTransIdSum_InventLocation = InventTransIdSum_InventLocation::newTransOriginId(_transOriginId);
        inventTransIdSum_InventLocation.parmPerChildType(_perChildType);
        inventTransIdSum_InventLocation.parmChildType(_childType);
        inventTransIdSum_InventLocation.parmChildRefId(_childRefId);
        inventTransIdSum_InventLocation.parmInventLocationType(InventLocationType::Quarantine);

        return inventTransIdSum_InventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
        public static InventTransIdSum_InventLocation newStandard(
        InventTransOriginId   _transOriginId,
        boolean               _perChildType   = false,
        InventTransChildType  _childType      = InventTransChildType::None,
        InventTransChildRefId _childRefId     = '')
    {
        InventTransIdSum_InventLocation inventTransIdSum_InventLocation = InventTransIdSum_InventLocation::newTransOriginId(_transOriginId);
        inventTransIdSum_InventLocation.parmPerChildType(_perChildType);
        inventTransIdSum_InventLocation.parmChildType(_childType);
        inventTransIdSum_InventLocation.parmChildRefId(_childRefId);
        inventTransIdSum_InventLocation.parmInventLocationType(InventLocationType::Standard);

        return inventTransIdSum_InventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransit</Name>
				<Source><![CDATA[
        public static InventTransIdSum_InventLocation newTransit(
        InventTransOriginId   _transOriginId,
        boolean               _perChildType   = false,
        InventTransChildType  _childType      = InventTransChildType::None,
        InventTransChildRefId _childRefId     = '')
    {
        InventTransIdSum_InventLocation inventTransIdSum_InventLocation = InventTransIdSum_InventLocation::newTransOriginId(_transOriginId);
        inventTransIdSum_InventLocation.parmPerChildType(_perChildType);
        inventTransIdSum_InventLocation.parmChildType(_childType);
        inventTransIdSum_InventLocation.parmChildRefId(_childRefId);
        inventTransIdSum_InventLocation.parmInventLocationType(InventLocationType::Transit);

        return inventTransIdSum_InventLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTransOriginId</Name>
				<Source><![CDATA[
        public static InventTransIdSum_InventLocation newTransOriginId(InventTransOriginId _transOriginId)
    {
        return new InventTransIdSum_InventLocation(_transOriginId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
