<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvStateChangeManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvStateChangeManager</c> class handles all state changes for expense, both for the document
///    level and line item approval.
/// </summary>
public class TrvStateChangeManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the expense header status for expense line item approval.
    /// </summary>
    /// <param name="_expNumber">
    ///    The expense number of the document.
    /// </param>
    /// <param name="_trvAppStatus">
    ///    The status to be set on the header document.
    /// </param>
    public static void setDocumentStatus(TrvExpNumber _expNumber, TrvAppStatus _trvAppStatus)
    {
        TrvExpTable trvExpTable = TrvExpTable::find(_expNumber, true);
        TrvExpTrans trvExpTrans;

        if (trvExpTable.ApprovalStatus == _trvAppStatus || !trvExpTable.RecId)
        {
            // no need to go further
            return;
        }

        ttsbegin;

        switch (_trvAppStatus)
        {
            case TrvAppStatus::Returned:
            case TrvAppStatus::Submitted:
            case TrvAppStatus::Pending:
            case TrvAppStatus::Ready:
                if (!TrvStateChangeManager::validateStatusChange(trvExpTable.ApprovalStatus, _trvAppStatus))
                {
                    throw error(strFmt("@SYS108515",trvExpTable.ApprovalStatus, _trvAppStatus));
                }

                trvExpTable.ApprovalStatus = _trvAppStatus;
                trvExpTable.doUpdate();

                break;

            case TrvAppStatus::Approved:
            case TrvAppStatus::Create:
                select RecId from trvExpTrans where trvExpTrans.TrvExpTable == trvExpTable.RecId
                                                 && trvExpTrans.ApprovalStatus != _trvAppStatus
                                                 && trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger
                                                 && trvExpTrans.LineType != TrvExpLineType::ItemizedHeader;

                if (!trvExpTrans.RecId)
                {
                    if (!TrvStateChangeManager::validateStatusChange(trvExpTable.ApprovalStatus, _trvAppStatus))
                    {
                        throw error(strFmt("@SYS108515",trvExpTable.ApprovalStatus, _trvAppStatus));
                    }

                    trvExpTable.ApprovalStatus = _trvAppStatus;
                    trvExpTable.doUpdate();
                }

                break;

            case TrvAppStatus::Ledger:
                select RecId from trvExpTrans where trvExpTrans.TrvExpTable == trvExpTable.RecId
                                                 && trvExpTrans.ApprovalStatus != _trvAppStatus
                                                 && trvExpTrans.LineType != TrvExpLineType::ItemizedHeader;

                if (!trvExpTrans.RecId)
                {
                    if (!TrvStateChangeManager::validateStatusChange(trvExpTable.ApprovalStatus, _trvAppStatus))
                    {
                        throw error(strFmt("@SYS108515",trvExpTable.ApprovalStatus, _trvAppStatus));
                    }

                    trvExpTable.ApprovalStatus = _trvAppStatus;
                    trvExpTable.doUpdate();
                }

                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemHeaderLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the expense header status for expense line item approval.
    /// </summary>
    /// <param name="_expNumber">
    ///    The expense number of the document.
    /// </param>
    /// <param name="_trvAppStatus">
    ///    The status to be set on the header document.
    /// </param>
    /// <param name="_recId">
    ///    The parent record ID of the transaction line.
    /// </param>
    public static void setItemHeaderLine(TrvExpNumber _expNumber, TrvAppStatus _trvAppStatus, recId _recId)
    {
        TrvExpTrans trvExpTrans;
        TrvExpTrans trvLineHeaderType;
        TrvExpTable trvExpTable = TrvExpTable::find(_expNumber);

        if (!trvExpTable.RecId)
        {
            return;
        }

        select firstonly forupdate trvLineHeaderType where trvLineHeaderType.RecId == _recId;

        // if header line is not present or it is not of either header type
        if ( (!trvLineHeaderType.RecId) ||
            (trvLineHeaderType.LineType != TrvExpLineType::ItemizedHeader)
           )
        {
            return;
        }

        ttsbegin;

        switch (_trvAppStatus)
        {
            case TrvAppStatus::Returned:
            case TrvAppStatus::Submitted:
            case TrvAppStatus::Pending:
                trvLineHeaderType.ApprovalStatus = _trvAppStatus;
                trvLineHeaderType.doUpdate();
                break;

            case TrvAppStatus::Approved:
            case TrvAppStatus::Create: // if wf is cancelled
                select RecId from trvExpTrans where trvExpTrans.TrvExpTable == trvExpTable.RecId
                                                 && trvExpTrans.ApprovalStatus != _trvAppStatus
                                                 && (trvExpTrans.LineType == TrvExpLineType::ItemizedLine)
                                                 && trvExpTrans.ParentRecId == _recId;

                if (!trvExpTrans.RecId)
                {
                    trvLineHeaderType.ApprovalStatus = _trvAppStatus;
                    trvLineHeaderType.doUpdate();
                }

                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExpenseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the status for both expense header and expense lines.
    /// </summary>
    /// <param name="_tableId">
    ///    The table ID that was passed by a workflow context.
    /// </param>
    /// <param name="_recId">
    ///    The record ID that was passed by a workflow context.
    /// </param>
    /// <param name="_trvAppStatus">
    ///    The status that must be set to the expense workflow item.
    /// </param>
    public static void updateExpenseStatus(tableId _tableId, recId _recId, TrvAppStatus _trvAppStatus)
    {
        TrvExpTable trvExpTable;
        TrvExpTrans trvExpTrans;

        switch (_tableId)
        {
            case tableNum(TrvExpTable):
                trvExpTable = TrvExpTable::findRecId(_recId);
                trvExpTable.selectForUpdate(true);

                if (trvExpTable.RecId != 0)
                {
                    if (TrvStateChangeManager::validateStatusChange(trvExpTable.ApprovalStatus, _trvAppStatus))
                    {
                        trvExpTable.ApprovalStatus = _trvAppStatus;

                        ttsbegin;
                        trvExpTable.doUpdate();
                        TrvExpTable::updateLineStatus(trvExpTable.ExpNumber, _trvAppStatus);
                        ttscommit;
                    }
                    else
                    {
                        throw error(strFmt("@SYS108515",trvExpTable.ApprovalStatus, _trvAppStatus));
                    }
                }

                break;

            case tableNum(TrvExpTrans):
                select forupdate trvExpTrans where trvExpTrans.RecId == _recId;

                if (trvExpTrans.RecId != 0)
                {
                    if (TrvStateChangeManager::validateStatusChange(trvExpTrans.ApprovalStatus, _trvAppStatus))
                    {
                        trvExpTrans.ApprovalStatus = _trvAppStatus;

                        ttsbegin;
                        trvExpTrans.doUpdate();
                        ttscommit;
                    }
                    else
                    {
                        throw error(strFmt("@SYS108515",trvExpTrans.ApprovalStatus, _trvAppStatus));
                    }
                }

                if (trvExpTrans.LineType == TrvExpLineType::ItemizedLine)
                {
                    TrvStateChangeManager::setItemHeaderLine(trvExpTrans.ExpNumber, _trvAppStatus, trvExpTrans.ParentRecId);
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusChange</Name>
				<Source><![CDATA[
    public static boolean validateStatusChange(TrvAppStatus _current, TrvAppStatus _new)
    {
        boolean ret = true;

        if ( _current == _new)   // no need to validate
            return ret;

        switch (_new)
        {
            case TrvAppStatus::Submitted:
                ret = _current == TrvAppStatus::Create || _current == TrvAppStatus::Returned;
                // Some expense line is cancelled, while some other expense line in pending approval state.
                // The header is in pending state in this situation. When user resubmit the cancelled expense line,
                // We should allow user to change the header from pending to submitted.
                ret = ret || _current == TrvAppStatus::Pending;
                break;

            case TrvAppStatus::Pending:
                ret = _current == TrvAppStatus::Submitted || _current == TrvAppStatus::Returned;
                break;

            case TrvAppStatus::Create: //for cancelled wf item
                ret = _current == TrvAppStatus::Pending || _current == TrvAppStatus::Submitted || _current == TrvAppStatus::Returned;
                break;

            case TrvAppStatus::Approved:
            case TrvAppStatus::Returned:
                ret = _current == TrvAppStatus::Pending;
                break;

            case TrvAppStatus::Cancelled:
                ret = (_current == TrvAppStatus::Pending || _current == TrvAppStatus::Submitted || _current == TrvAppStatus::Returned);
                break;

            case TrvAppStatus::Ledger:
                ret = _current == TrvAppStatus::Approved || _current == TrvAppStatus::Ready;
                break;

            case TrvAppStatus::Ready:
                ret = _current == TrvAppStatus::Approved;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>