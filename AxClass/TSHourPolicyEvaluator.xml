<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSHourPolicyEvaluator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Evaluator for the hours per day and hours per week policies
/// </summary>
[TSPolicyEvaluatorExtensionAttribute(SysPolicyRuleTypeEnum::TSWeekHoursRule),
TSPolicyEvaluatorExtensionAttribute(SysPolicyRuleTypeEnum::TSDayHoursRule)]
class TSHourPolicyEvaluator extends TSPolicyEvaluator
{
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TSHourPolicyEvaluator construct()
    {
        return new TSHourPolicyEvaluator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateHourRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates the hour policy rule passed on the given tsTimesheetTable record
    /// </summary>
    /// <param name="_record">
    /// Record on which the hour rule needs to be evaluated
    /// </param>
    /// <param name="_tsPolicyRule">
    /// PolicyRule that needs to be evaluated
    /// </param>
    /// <param name="_ruleTypeName">
    /// Name of the ruleType that the passed rule corresponds to
    /// </param>
    private void evaluateHourRule(
        Common          _record,
        TSPolicyRule    _tsPolicyRule,
        str             _ruleTypeName)
    {
        TSTimesheetLine         tsTimesheetLine, tsTimesheetLineLocal;
        TSTimesheetLineWeek     tsTimesheetLineWeek;
        int                     i;
        int                     daysErrorCount      = 0;
        int                     weekErrorCount      = 0;
        int                     validDayCount       = -1;
        real                    totalHoursPerWeek   = 0;
        Array                   gridDays;
        str                     dayLabel,fromDayLabel,toDayLabel;
        DictEnum                ruleTypeEnum = new DictEnum(enumNum(SysPolicyRuleTypeEnum));
        ProjParameters          projParameters = ProjParameters::find();
        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;
        TSResourceRecId         resource;
        real                    maxCalHours, minCalHours;
        TSTimesheetTable        tsTimesheetTableLocal, tsTimesheetTable;
        WeekDays                startOfWeek;
        TSPolicyCalendarHours   calendarHours;
        date                    calendarFrom, calendarTo, dayViolationDate, weekViolationFromDate, weekViolationToDate;
        utcDateTime             currentDateTime, adjustedPolicyFromTime, adjustedPolicyToTime;
        boolean                 isWeekRule = (ruleTypeEnum.value2Symbol(enum2int(SysPolicyRuleTypeEnum::TSWeekHoursRule)) == _ruleTypeName);
        boolean                 isDayRule  = (ruleTypeEnum.value2Symbol(enum2int(SysPolicyRuleTypeEnum::TSDayHoursRule)) == _ruleTypeName);
        boolean                 isAutoSplitWeek;

        if (_record is TSTimesheetTable)
        {
            tsTimesheetTableLocal = _record as TSTimesheetTable;
            resource              = tsTimesheetTableLocal.Resource;
        }
        else if (_record is TSTimesheetLine)
        {
            tsTimesheetLineLocal    = _record as tsTimesheetLine;
            resource                = tsTimesheetLineLocal.Resource;
            tsTimesheetTableLocal   = TSTimesheetTable::find(tsTimesheetLineLocal.TimesheetNbr);
        }

        startOfWeek = ProjPeriodTable::find(tsTimesheetTableLocal.ProjPeriodId).WeekStart;
        isAutoSplitWeek = ProjPeriodTable::isAutoSplitWeek(tsTimesheetTableLocal.ProjPeriodId);
        
        while select RecId, PeriodFrom, PeriodTo from projPeriodTimesheetWeek
            exists join tsTimesheetTable 
                where tsTimesheetTable.ProjPeriodId == projPeriodTimesheetWeek.PeriodId 
                    && tsTimesheetTable.DataAreaId == projPeriodTimesheetWeek.DataAreaId 
                    && tsTimesheetTable.PeriodFrom <= projPeriodTimesheetWeek.PeriodFrom 
                    && tsTimesheetTable.PeriodTo >= projPeriodTimesheetWeek.PeriodTo
                    && tsTimesheetTable.TimesheetNbr == tsTimesheetTableLocal.TimesheetNbr
            notexists join tsTimesheetLine 
                where tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr
                    && tsTimesheetLine.DataAreaId == tsTimesheetTable.DataAreaId 
                    && tsTimesheetLine.ProjPeriodTimesheetWeek == projPeriodTimesheetWeek.RecId
        {
            var currentPolicyCalendarHours = this.getHoursFromCalendar(
                _tsPolicyRule.MaxCalendar, 
                _tsPolicyRule.MinCalendar, 
                _tsPolicyRule.CompanyId, 
                projPeriodTimesheetWeek.PeriodFrom, 
                projPeriodTimesheetWeek.PeriodTo);

            if (currentPolicyCalendarHours.getTotalMinHours() != 0)
            {     
                this.insertIntoCache(
                    _tsPolicyRule, 
                    tsTimesheetTableLocal, 
                    SysPolicyRuleTypeEnum::TSDayHoursRule, 
                    projPeriodTimesheetWeek.PeriodFrom, 
                    tsTimesheetTable.PeriodTo, 
                    projPeriodTimesheetWeek);

                this.insertViolationIntoList(
                    _tsPolicyRule, 
                    strFmt("@SYS76785",TSPeriods::getDateCaption(projPeriodTimesheetWeek.PeriodFrom), 
                    TSPeriods::getDateCaption(projPeriodTimesheetWeek.PeriodTo)));
                break;
            }
        }

        while select PeriodFrom, PeriodTo, PeriodId, RecId from  projPeriodTimesheetWeek
            where ((_record.TableId == tableNum(TSTimesheetTable)
                && projPeriodTimesheetWeek.PeriodFrom >= tsTimesheetTableLocal.PeriodFrom
                && projPeriodTimesheetWeek.PeriodTo  <= tsTimesheetTableLocal.PeriodTo
                && projPeriodTimesheetWeek.PeriodId == tsTimesheetTableLocal.ProjPeriodId)
                ||
                (_record.TableId == tableNum(tsTimesheetLine)
                    && projPeriodTimesheetWeek.RecId == tsTimesheetLineLocal.ProjPeriodTimesheetWeek))
            outer join Resource, ProjPeriodTimesheetWeek  from tsTimesheetLine
            where (tsTimesheetLine.ProjPeriodTimesheetWeek == projPeriodTimesheetWeek.RecId
                && tsTimesheetLine.Resource == resource)
            outer join sum(Hours), DayFrom, DayTo from tsTimesheetLineWeek
            where tsTimesheetLineWeek.TSTimesheetLine == tsTimesheetLine.RecId
            exists join tsTimesheetTable
            order by projPeriodTimesheetWeek.PeriodFrom
            group by tsTimesheetLine.Resource, tsTimesheetLine.ProjPeriodTimesheetWeek, tsTimesheetLineWeek.DayFrom, tsTimesheetLineWeek.DayTo, projPeriodTimesheetWeek.PeriodFrom,
                projPeriodTimesheetWeek.PeriodTo, projPeriodTimesheetWeek.PeriodId, projPeriodTimesheetWeek.RecId
            where tsTimesheetTable.TimesheetNbr == tsTimesheetLine.TimesheetNbr
                && (tsTimesheetTable.ApprovalStatus == TSAppStatus::Approved
                    || tsTimesheetTable.ApprovalStatus == TSAppStatus::Pending
                    || tsTimesheetTable.ApprovalStatus == TSAppStatus::Ledger
                    || tsTimesheetTable.TimesheetNbr == tsTimesheetTableLocal.TimesheetNbr)
        {
            gridDays            = TSPeriods::getLineWeekDates(startOfWeek, projPeriodTimesheetWeek.PeriodFrom, projPeriodTimesheetWeek.PeriodTo);
            totalHoursPerWeek   = 0;
            fromDayLabel        = '';
            toDayLabel          = '';
            validDayCount       = 0;

            // Determine the dates for which the calendar hours are to be retrieved based on date effectivity of the rules and the timesheet week dates
            if (_tsPolicyRule.ValidFrom > this.getAdjustedDateTime(projPeriodTimesheetWeek.PeriodFrom))
            {
                adjustedPolicyFromTime = DateTimeUtil::applyTimeZoneOffset(_tsPolicyRule.ValidFrom, DateTimeUtil::getUserPreferredTimeZone());
                calendarFrom = DateTimeUtil::date(adjustedPolicyFromTime);
            }
            else
            {
                calendarFrom = projPeriodTimesheetWeek.PeriodFrom;
            }

            if (_tsPolicyRule.ValidTo < this.getAdjustedDateTime(projPeriodTimesheetWeek.PeriodTo))
            {
                adjustedPolicyToTime = DateTimeUtil::applyTimeZoneOffset(_tsPolicyRule.ValidTo, DateTimeUtil::getUserPreferredTimeZone());
                calendarTo = DateTimeUtil::date(adjustedPolicyToTime);
            }
            else
            {
                calendarTo = projPeriodTimesheetWeek.PeriodTo;
            }

            if (isWeekRule && ProjPeriodTable::isAutoSplitWeek(projPeriodTimesheetWeek.PeriodId))
            {
                int daysCountInPeriod = (projPeriodTimesheetWeek.PeriodTo - projPeriodTimesheetWeek.PeriodFrom)+1;

                if (daysCountInPeriod < #daysPerWeek)
                {
                    date weekBeginDate = TSPeriods::getStartOfWeekOffset(startOfWeek, projPeriodTimesheetWeek.PeriodTo);

                    if (weekBeginDate != projPeriodTimesheetWeek.PeriodFrom)
                    {
                        calendarFrom = weekBeginDate;
                    }
                    else
                    {
                        calendarTo = ProjPeriodTimesheetWeek::findNextFromPeriodTo(projPeriodTimesheetWeek.PeriodId, projPeriodTimesheetWeek.PeriodTo).PeriodTo;
                    }
                }
            }

            calendarHours    = this.getHoursFromCalendar(_tsPolicyRule.MaxCalendar, _tsPolicyRule.MinCalendar, _tsPolicyRule.CompanyId, calendarFrom, calendarTo);

            for ( i = 1; i <= #daysPerWeek; i++ )
            {
                if (any2date(gridDays.value(i)) != dateNull())
                {
                    currentDateTime = this.getAdjustedDateTime(projPeriodTimesheetWeek.PeriodFrom+validDayCount);
                    utcdatetime dateToValidate = this.getAdjustedDateTime(projPeriodTimesheetWeek.PeriodFrom+(validDayCount-1));
                    
                    if (currentDateTime <= _tsPolicyRule.ValidTo &&  currentDateTime >= _tsPolicyRule.ValidFrom && this.checkValidEmploymentDate(dateToValidate, tsTimesheetTableLocal.Resource))
                    {
                        dayLabel = TSPeriods::getDateCaption(any2date(gridDays.value(i)));

                        // If the rule passed is a day hours rule
                        if (isDayRule)
                        {
                            minCalHours = calendarHours.getMinHours(projPeriodTimesheetWeek.PeriodFrom+validDayCount);
                            maxCalHours = calendarHours.getMaxHours(projPeriodTimesheetWeek.PeriodFrom+validDayCount);

                            if ((_tsPolicyRule.MinCalendar != '' && tsTimesheetLineWeek.Hours[i] < minCalHours)
                            || ( _tsPolicyRule.MaxCalendar != '' && tsTimesheetLineWeek.Hours[i] > maxCalHours))
                            {
                                dayViolationDate = any2date(gridDays.value(i));

                                this.insertIntoCache(_tsPolicyRule, tsTimesheetTableLocal, SysPolicyRuleTypeEnum::TSDayHoursRule, dayViolationDate, dayViolationDate, projPeriodTimesheetWeek);
                                this.insertViolationIntoList(_tsPolicyRule, dayLabel);
                            }
                        }

                        // If the rule passed is a week hours rule
                        if (isWeekRule)
                        {
                            totalHoursPerWeek = totalHoursPerWeek + tsTimesheetLineWeek.Hours[i];

                            dayLabel = TSPeriods::getDateCaption(any2date(gridDays.value(i)));

                            if (fromDayLabel == '')
                            {
                                fromDayLabel            = dayLabel;
                                toDayLabel              = dayLabel;
                                weekViolationFromDate   = any2date(gridDays.value(i));
                                weekViolationToDate     = any2date(gridDays.value(i));
                            }
                            else
                            {
                                toDayLabel = dayLabel;
                                weekViolationToDate     = any2date(gridDays.value(i));
                            }
                        }
                    }

                    validDayCount++;
                }
            }

            // Incase of week hour rules, we check the conditions after iterating through all days of the week
            if (isweekrule && projPeriodTimesheetWeek.PeriodTo == calendarTo)
            {
                minCalHours = calendarHours.getTotalMinHours();
                maxCalHours = calendarHours.getTotalMaxHours();

                if (isAutoSplitWeek)
                {
                    totalHoursPerWeek = this.calculateTimeSheetHours(resource, tsTimesheetTableLocal.ProjPeriodId, dateStartWk(calendarFrom), calendarTo);
                }

                if (( _tsPolicyRule.MinCalendar != '' && totalHoursPerWeek < minCalHours)
                || (_tsPolicyRule.MaxCalendar != '' && totalHoursPerWeek > maxCalHours))
                {
                    this.insertIntoCache(_tsPolicyRule, tsTimesheetTableLocal, SysPolicyRuleTypeEnum::TSWeekHoursRule, weekViolationFromDate, weekViolationToDate, projPeriodTimesheetWeek);
                    this.insertViolationIntoList(_tsPolicyRule, strFmt("@SYS76785",fromDayLabel,toDayLabel));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates hours rules of the given policyType and policyRuleType on the passed record
    /// </summary>
    /// <param name="_record">
    /// Record on which the policies are to be evaluated
    /// </param>
    /// <param name="_policyType">
    /// PolicyType of the rules to consider
    /// </param>
    /// <param name="_policyRuleType">
    /// PolicyRule type of the rules to consider
    /// </param>
    public void evaluate(
        Common             _record,
        SysPolicyTypeEnum  _policyType,
        SysPolicyRuleType  _policyRuleType)
    {
        int64                           orgIds[];
        Array                           applicablePolicyRules;
        int                             i;
        TSPolicyRule                    currentPolicyRule;
        TSTimesheetTable                tsTimesheetTableLocal;
        TSTimesheetLine                 tsTimesheetLineLocal;
        ProjPeriodTimesheetWeek         projPeriodTimesheetWeek;
        utcDateTime                     applyDate;
        date                            currentDate;
        Map                             rules =  new Map(Types::Int64, Types::Date);
        MapEnumerator                   ruleMapEnumerator;
        RefRecId                        recId;
        date                            dateFrom, dateTo;
        utcDateTime                     dateTimeFrom;
        utcDateTime                     dateTimeTo;
        DictEnum                        ruleTypeEnum    = new DictEnum(enumNum(SysPolicyRuleTypeEnum));
        SysPolicyRuleTypeEnum           policyRuleType  = any2Enum(ruleTypeEnum.symbol2Value(_policyRuleType.Name));
		
        dateFrom    = dateNull();
        dateTo      = dateMax();
        orgIds[1]   = CompanyInfo::current(curext());

        if (_record is TSTimesheetTable)
        {
            tsTimesheetTableLocal = _record as TSTimesheetTable;
        }
        else if (_record is TSTimesheetLine)
        {
            tsTimesheetLineLocal = _record as tsTimesheetLine;
            tsTimesheetTableLocal = TSTimesheetTable::find(tsTimesheetLineLocal.TimesheetNbr);
        }

        this.clearCacheForTimesheetOrTimesheetLineByPolicy(_policyType, policyRuleType, tsTimesheetTableLocal, tsTimesheetLineLocal);

        while select PeriodFrom, PeriodTo, PeriodId from  projPeriodTimesheetWeek
            where ((_record.TableId == tableNum(TSTimesheetTable)
                && projPeriodTimesheetWeek.PeriodFrom >= tsTimesheetTableLocal.PeriodFrom
                && projPeriodTimesheetWeek.PeriodTo  <= tsTimesheetTableLocal.PeriodTo
                && projPeriodTimesheetWeek.PeriodId == tsTimesheetTableLocal.ProjPeriodId)
                ||
                (_record.TableId == tableNum(tsTimesheetLine)
                    && projPeriodTimesheetWeek.RecId == tsTimesheetLineLocal.ProjPeriodTimesheetWeek))
        {
            for (currentDate = projPeriodTimesheetWeek.PeriodFrom; currentDate <=  projPeriodTimesheetWeek.PeriodTo; currentDate++)
            {
                applyDate = this.getAdjustedDateTime(currentDate);

                applicablePolicyRules = SysPolicies::getPolicyRuleIDsByRuleTypeName(orgIds, _policyRuleType.Name, _policyType, applyDate, true);

                for (i = 1; i <= applicablePolicyRules.lastIndex(); i++)
                {
                    if (!rules.exists(applicablePolicyRules.value(i)))
                    {
                        rules.insert(applicablePolicyRules.value(i), currentDate);
                    }
                }
            }
        }

        ruleMapEnumerator = rules.getEnumerator();

        while (ruleMapEnumerator.moveNext())
        {
            recId = ruleMapEnumerator.currentKey();

            dateTimeFrom        = DateTimeUtil::newDateTime(dateFrom,0);
            dateTimeTo          = DateTimeUtil::newDateTime(dateTo, #secondsPerDay-1);

            select validTimeState(dateTimeFrom, dateTimeTo) currentPolicyRule
                where currentPolicyRule.RecId == recId;

            if (currentPolicyRule)
            {
                this.evaluateHourRule(_record, currentPolicyRule, _policyRuleType.Name);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHoursFromCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets hours from given calendars for the given transaction dates
    /// </summary>
    /// <param name="_maxCalendar">
    /// Calendar from which the max hours are to be retrieved
    /// </param>
    /// <param name="_minCalendar">
    /// Calendar from which the min hours are to be retrieved
    /// </param>
    /// <param name="_companyId">
    /// Company Id in which the calendar is present
    /// </param>
    /// <param name="_fromDate">
    /// Date from which the calendar hours are required
    /// </param>
    /// <param name="_toDate">
    /// Date until which the calendar hours are required
    /// </param>
    /// <returns>
    /// Instance of TSPolicyCalendarHours that contains the hours corresponding to the transaction dates
    /// </returns>
    public TSPolicyCalendarHours getHoursFromCalendar(
        CalendarId _maxCalendar,
        CalendarId _minCalendar,
        CompanyId _companyId,
        TransDate _fromDate,
        TransDate _toDate)
    {
        WorkCalendarDate        workCalendarDate;
        TSPolicyCalendarHours   tsPolicyCalendarHours = TSPolicyCalendarHours::construct();
        Hours                   hours;

        while select crossCompany workCalendarDate
            where (workCalendarDate.CalendarId == _maxCalendar
                  || workCalendarDate.CalendarId == _minCalendar)
                && workCalendarDate.TransDate >= _fromDate
                && workCalendarDate.TransDate <= _toDate
                && workCalendarDate.dataAreaId == _companyId
        {
            hours = WorkCalendarDate::calcDefinedHours(workCalendarDate.CalendarId, workCalendarDate.TransDate, true, false, _companyId);

            if (workCalendarDate.CalendarId == _maxCalendar)
            {
                tsPolicyCalendarHours.insertMaxHours(workCalendarDate.TransDate, hours);
            }

            // There could be a case where both max and min hours refer to the same calendar. So have a separate 'if' to populate min hours map
            if (workCalendarDate.CalendarId == _minCalendar)
            {
                tsPolicyCalendarHours.insertMinHours(workCalendarDate.TransDate, hours);
            }
        }

        return tsPolicyCalendarHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDateTime</Name>
				<Source><![CDATA[
    private utcDateTime getAdjustedDateTime(date _applyDate)
    {
        utcDateTime                     adjustedDateTime;

        // transaction date is a date only field while policies have time as well.
        // we decided to apply all policies created in a day to a line created in that day
        // therefore we set the time of the transaction to the end of the day by adding the corresponding minute, hours.
        adjustedDateTime = DateTimeUtil::newDateTime(_applyDate, #secondsPerDay-1);

        // we remove the time zone offset to get the utc since the policy time is in utc
        adjustedDateTime = DateTimeUtil::removeTimeZoneOffset(adjustedDateTime, DateTimeUtil::getUserPreferredTimeZone());

        return adjustedDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheForTimesheetOrTimesheetLineByPolicy</Name>
				<Source><![CDATA[
    private void clearCacheForTimesheetOrTimesheetLineByPolicy(
        SysPolicyTypeEnum       _policyType,
        SysPolicyRuleTypeEnum   _policyRuleType,
        TSTimesheetTable        _tsTimesheetTableLocal,
        TSTimesheetLine         _tsTimesheetLineLocal)
    {
        TSPolicyViolationsCache cache;
        // Clear the cache for timesheet or period week (for timsheet line)
        ttsBegin;

        delete_from cache
            where cache.TimesheetNbr                == _tsTimesheetTableLocal.TimesheetNbr
                && (cache.ProjPeriodTimesheetWeek   == _tsTimesheetLineLocal.ProjPeriodTimesheetWeek || !_tsTimesheetLineLocal)
                && cache.PolicyType                 == _policyType
                && cache.PolicyRuleType             == _policyRuleType;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidEmploymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the date is matched with a valid employment record for the resource.
    /// </summary>
    /// <param name="dateToValidate">
    /// The timesheet date that needs to be validated on whether the worker is employed.
    /// </param>
    /// <param name="resource">
    /// The resource to validate the employment dates for.
    /// </param>
    private boolean checkValidEmploymentDate(utcdatetime dateToValidate, ResourceRecId resource)
    {
        HcmEmployment hcmEmployment;
        ValidFromDateTime dateFrom = DateTimeUtil::minValue();
        ValidToDateTime dateTo = DateTimeUtil::maxValue();
        Timezone usertimezone = DateTimeUtil::getUserPreferredTimeZone();
        utcdatetime utcFieldTimeBeginOfDay = DateTimeUtil::newDateTime(DateTimeUtil::date(datetoValidate), 0, usertimezone);
        utcdatetime utcFieldTimeEndOfDay = DateTimeUtil::newDateTime(DateTimeUtil::date(dateToValidate), #secondsPerDay - 1, usertimezone); // 23:59:59 of the day
        boolean validEmploymentDate = true;

        HcmWorkerRecId  hcmWorkerRecId = TSResource::workerRecId(resource);
            
        select validTimeState (dateFrom, dateTo) hcmEmployment
                        where hcmEmployment.Worker == hcmWorkerRecId &&
                            hcmEmployment.LegalEntity == CompanyInfo::current() &&
                                hcmEmployment.ValidFrom <= utcFieldTimeEndOfDay &&
                                    hcmEmployment.ValidTo >= utcFieldTimeBeginOfDay;
         
        if (!hcmEmployment && hcmWorkerRecId != HcmWorker::findByPersonnelNumber('xEmplId').RecId)
        {
            validEmploymentDate = false;
        }
        return validEmploymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTimeSheetHours</Name>
				<Source><![CDATA[
    private TSLineHoursTotal calculateTimeSheetHours(
        TSResourceRecId resource,
        ProjPeriodId _projPerioId,
        date _dayFrom,
        date _dayTo)
    {
        TSTimesheetLineWeek timesheetLineWeek;
        TSTimesheetLine timesheetLine;

        select sum(Hours) from timesheetLineWeek
            where timesheetLineWeek.ProjPeriodId == _projPerioId
                && timesheetLineWeek.DayFrom >= _dayFrom
                && timesheetLineWeek.DayTo <= _dayTo
             join timesheetLine
            where timesheetLineWeek.TSTimesheetLine == timesheetLine.RecId
                && timesheetLine.Resource == resource;


        return timesheetLineWeek.totalHours();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>