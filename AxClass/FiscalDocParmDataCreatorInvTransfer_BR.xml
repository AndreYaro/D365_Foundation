<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocParmDataCreatorInvTransfer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for creating a <c>FiscalDocumentParmData_BR</c> object and its
/// components for a inventory transfer posting scenario.
/// </summary>
public class FiscalDocParmDataCreatorInvTransfer_BR extends FiscalDocumentParmDataCreator_BR
{
    InventTransferUpdateType            updateType;
    InventTransferJour                  inventTransferJour;
    InventTransferTable                 inventTransferTable;
    InventTransferTableFiscalInfo_BR    inventTransferTableFiscalInfo;
    FiscalEstablishment_BR              thirdPartyFiscalEstablishment;
    SalesCarrier                        salesCarrier;
    InventTransferTotals_BR             totals;
    FiscalDocumentType_BR               fiscalDocumentType;
    InventTransferParmTable             inventTransferParmTable;
    InventTransferParmTableFiscalInfo_BR inventTransferParmTableFiscalInfo;

    InventLocation                      fromToInventLocation;
    CustTable                           custTable;
    VendTable                           vendTable;

    FiscalDocumentNumber_BR             fiscalDocumentNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmUpdateType</Name>
				<Source><![CDATA[
    public InventTransferUpdateType parmUpdateType(InventTransferUpdateType _updateType = updateType)
    {
        updateType = _updateType;
        return updateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferJour</Name>
				<Source><![CDATA[
    public InventTransferJour parmInventTransferJour(InventTransferJour _inventTransferJour = inventTransferJour)
    {
        inventTransferJour = _inventTransferJour;
        return inventTransferJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocumentType</Name>
				<Source><![CDATA[
    public FiscalDocumentType_BR parmFiscalDocumentType(FiscalDocumentType_BR _fiscalDocumentType = fiscalDocumentType)
    {
        fiscalDocumentType = _fiscalDocumentType;
        return fiscalDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHavePresumedTaxes</Name>
				<Source><![CDATA[
    protected boolean canHavePresumedTaxes()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmData</Name>
				<Source><![CDATA[
    public FiscalDocumentParmData_BR createParmData()
    {
        FiscalReferenceParm_BR      fiscalReference;
        FiscalDocument_BR           returnedReceivedFiscalDocument;
        FiscalDocument_BR           returnedShippedFiscalDocument;
        RecId                       firstLineCFOP;

        if (inventTransferTableFiscalInfo.InventTransferOrderType == InventTransferOrderType_BR::FiscalEstablishmentReturn && updateType == InventTransferUpdateType::Receive)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00046, funcName());

            // find the incoming fiscal document from the reference
            select firstonly FiscalEstablishmentCNPJCPF, FiscalDocumentNumber, FiscalDocumentSeries from returnedReceivedFiscalDocument
                join RecId from fiscalReference
                where fiscalReference.SourceRecId == inventTransferTable.RecId
                    && fiscalReference.SourceTableId == inventTransferTable.TableId
                    && returnedReceivedFiscalDocument.RecId == fiscalReference.RefRecID
                    && fiscalReference.RefTableId == tableNum(FiscalDocument_BR);

            // find the outgoing fiscal document
            select firstonly RecId from returnedShippedFiscalDocument
                where  returnedShippedFiscalDocument.Direction                  == FiscalDocDirection_BR::Outgoing
                    && returnedShippedFiscalDocument.FiscalDocumentAccountType  == CustVendType_BR::FiscalEstablishment
                    && returnedShippedFiscalDocument.FiscalDocumentIssuer       == FiscalDocumentIssuer_BR::OwnEstablishment
                    && returnedShippedFiscalDocument.ThirdPartyCNPJCPF          == returnedReceivedFiscalDocument.FiscalEstablishmentCNPJCPF
                    && returnedShippedFiscalDocument.FiscalDocumentNumber       == returnedReceivedFiscalDocument.FiscalDocumentNumber
                    && returnedShippedFiscalDocument.FiscalDocumentSeries       == returnedReceivedFiscalDocument.FiscalDocumentSeries;

            update_recordSet fiscalReference
                setting RefRecId = returnedShippedFiscalDocument.RecId
                where fiscalReference.RecId == fiscalReference.RecId;
        }

        if (inventTransferTable && inventTransferTableFiscalInfo.isReturnOrder())
        {
            firstLineCFOP = this.getFirstLineCFOP();

            update_recordSet fiscalReference
                setting LegalTextId = CFOPTable_BR::find(firstLineCFOP).FiscalRefLegalTxtId
                where fiscalReference.SourceRecId == inventTransferTable.RecId
                    && fiscalReference.SourceTableId == inventTransferTable.TableId;

            FiscalReferenceController_BR::construct(inventTransferTable).resolveLegalTextsToSourceTable();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal establishment of the site the transfer order is from/to.
    /// </summary>
    /// <returns>
    /// The fiscal establishment of the site the transfer order is from/to.
    /// </returns>
    protected FiscalEstablishment_BR fiscalEstablishment()
    {
        FiscalEstablishment_BR fiscalEstablishment;

        if (updateType == InventTransferUpdateType::Shipment)
        {
            fiscalEstablishment = InventSite::find(
                InventLocation::find(inventTransferJour.InventLocationIdFrom).InventSiteId).fiscalEstablishment();
        }
        else if (updateType == InventTransferUpdateType::Receive)
        {
            fiscalEstablishment = InventSite::find(
                InventLocation::find(inventTransferJour.InventLocationIdTo).InventSiteId).fiscalEstablishment();
        }

        return fiscalEstablishment;

        //return fiscalEstablishment.IsClosedWarehouse ? FiscalEstablishment_BR::find(fiscalEstablishment.FiscalEstablishmentSalesIssuer) : fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code of fiscal reference
    /// </summary>
    /// <returns>
    /// The currency code
    /// </returns>
    protected CurrencyCode fiscalReferenceSourceCurrencyCode()
    {
        return CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceRecId</Name>
				<Source><![CDATA[
    protected RecId fiscalReferenceSourceRecId()
    {
        return inventTransferTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalReferenceSourceTableId</Name>
				<Source><![CDATA[
    protected TableId fiscalReferenceSourceTableId()
    {
        return inventTransferTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLineCFOP</Name>
				<Source><![CDATA[
    private RecId getFirstLineCFOP()
    {
        InventTransferJourLine          inventTransferJourLine;
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo;
        InventTransferLine              inventTransferLine;

        select firstonly TransferId, VoucherId, InventTransId from inventTransferJourLine
            where inventTransferJourLine.TransferId == inventTransferJour.TransferId
                && inventTransferJourLine.VoucherId == inventTransferJour.VoucherId
                && inventTransferJourLine.TransDate == inventTransferJour.TransDate;

        inventTransferLine = inventTransferJourLine.inventTransferLine();

        inventTransferLineFiscalInfo = InventTransferLineFiscalInfo_BR::findByInventTransferLine(inventTransferLine.RecId);

        if (updateType == InventTransferUpdateType::Shipment)
        {
            return inventTransferLineFiscalInfo.ShipCfopTable_BR;
        }

        return inventTransferLineFiscalInfo.ReceiveCfopTable_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fiscal document number.
    /// </summary>
    /// <returns>
    /// The fiscal document number.
    /// </returns>
    protected InvoiceId getFiscalDocumentNumber()
    {
        return this.getInvoiceIdWithoutSeriesPrefix(fiscalDocumentNumber, FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipFiscalDocument</Name>
				<Source><![CDATA[
    private FiscalDocument_BR getShipFiscalDocument(Voucher _voucherId)
    {
        FiscalDocument_BR shipFiscaldocument;
        InventTransferJour shipInventTransferJour;

        select * from shipFiscaldocument
            exists join shipInventTransferJour
                where shipInventTransferJour.RecId == shipFiscaldocument.RefRecId
                    && shipInventTransferJour.TableId == shipFiscaldocument.RefTableId
                    && shipInventTransferJour.VoucherId == _voucherId
                    && shipInventTransferJour.UpdateType == InventTransferUpdateType::Shipment;

        return shipFiscaldocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustVendTrans</Name>
				<Source><![CDATA[
    protected boolean hasCustVendTrans()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTransParmData</Name>
				<Source><![CDATA[
    protected FiscalDocumentCustVendTransParmData_BR initCustVendTransParmData()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderParmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data of fiscal document. 
    /// </summary>
    /// <returns>The fiscal document header data.</returns>
    [Hookable]
    protected FiscalDocumentParmData_BR initHeaderParmData()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00049, funcName());

        FiscalDocument_BR shipFiscalDocument;

        FiscalDocumentParmData_BR fiscalDocument = new FiscalDocumentParmData_BR();

        fiscalDocument.parmAccountingDate                   (inventTransferJour.TransDate);

        fiscalDocument.parmFiscalEstablishmentName          (this.fiscalEstablishment().Name);
        fiscalDocument.parmFiscalEstablishmentID            (this.fiscalEstablishment().FiscalEstablishmentId);
        fiscalDocument.parmFiscalEstablishmentPostalAddress (this.fiscalEstablishment().postalAddress().RecId);
        fiscalDocument.parmFiscalEstablishmentCNPJCPF       (this.fiscalEstablishment().cnpjcpfNum_BR);
        fiscalDocument.parmFiscalEstablishmentIE            (this.fiscalEstablishment().ieNum_BR);
        fiscalDocument.parmFiscalEstablishmentCCMNum        (this.fiscalEstablishment().ccmNum_BR);

        fiscalDocument.parmFiscalDocumentAccountNum         (this.thirdyPartyAccountNum());
        fiscalDocument.parmFiscalDocumentAccountType        (this.thirdyPartyType());
        fiscalDocument.parmThirdPartyName                   (this.thirdPartyName());
        fiscalDocument.parmThirdPartyCNPJCPF                (this.thirdPartyCNPJCPF());
        fiscalDocument.parmThirdPartyIE                     (this.thirdPartyIE());
        fiscalDocument.parmThirdPartyCCMNum                 (this.thirdPartyCCMNum());
        fiscalDocument.parmThirdPartyPostalAddress          (this.thirdPartyPostalAddress());
        fiscalDocument.parmThirdPartyEmail                  (this.thirdPartyEmail());
        fiscalDocument.parmThirdPartyIcmsContributor        (this.thirdPartyICMSContributor());

        fiscalDocument.parmDeliveryMode                     (inventTransferJour.DlvModeId);
        fiscalDocument.parmDeliveryTerm                     (inventTransferJour.DlvTermId);

        fiscalDocument.parmPaymentMethod                    (EFDocPaymentMethod_BR::NoPayment);

        fiscalDocument.parmFiscalDocumentDate                   (inventTransferJour.TransDate);

        if (updateType == InventTransferUpdateType::Shipment)
        {
            fiscalDocument.parmFiscalDocumentNumber             (this.getFiscalDocumentNumber());

            fiscalDocument.parmDirection                            (FiscalDocDirection_BR::Outgoing);
            fiscalDocument.parmFiscalDocumentIssuer                 (FiscalDocumentIssuer_BR::OwnEstablishment);
            fiscalDocument.parmFiscalDocumentType                   (fiscalDocumentType);
            fiscalDocument.parmFinalUser                            (NoYes::No);

            fiscalDocument.parmModel(fiscalDocumentType.FiscalDocumentModel);

            fiscalDocument.parmFiscalDocumentSeries(FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId));

            fiscalDocument.parmSpecie(fiscalDocumentType.FiscalDocumentSpecie);
        }
        else if (updateType == InventTransferUpdateType::Receive && inventTransferTableFiscalInfo.InventTransferOrderType != InventTransferOrderType_BR::ThirdPartyReturn)
        {
            fiscalDocument.parmDirection                            (FiscalDocDirection_BR::Incoming);
            fiscalDocument.parmFiscalDocumentIssuer                 (FiscalDocumentIssuer_BR::ThirdParty);

            if (!inventTransferParmTable.VoucherShipmentId)
            {
                throw error("@GLS222428");
            }

            shipFiscalDocument = this.getShipFiscalDocument(inventTransferParmTable.VoucherShipmentId);

            if (shipFiscalDocument.Status != FiscalDocumentStatus_BR::Approved)
            {
                throw error("@SYS4001149");
            }

            if (inventTransferTableFiscalInfo.InventTransferOrderType == InventTransferOrderType_BR::FiscalEstablishmentTransfer)
            {
                fiscalDocument.parmFiscalDocumentDate(shipFiscalDocument.FiscalDocumentDate);
            }

            fiscalDocument.parmFiscalDocumentAccessKey          (shipFiscalDocument.AccessKey);
            fiscalDocument.parmFiscalDocumentNumber             (shipFiscalDocument.FiscalDocumentNumber);
            fiscalDocument.parmModel                            (shipFiscalDocument.Model);
            fiscalDocument.parmFiscalDocumentSeries             (shipFiscalDocument.FiscalDocumentSeries);
            fiscalDocument.parmSpecie                           (shipFiscalDocument.Specie);
            fiscalDocument.parmFinalUser                        (shipFiscalDocument.FinalUser);
        }
        else if (inventTransferTableFiscalInfo.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn)
        {
            fiscalDocument.parmDirection                            (FiscalDocDirection_BR::Incoming);
            fiscalDocument.parmFiscalDocumentIssuer                 (FiscalDocumentIssuer_BR::ThirdParty);
            fiscalDocument.parmFinalUser                            (NoYes::No);

            fiscalDocument.parmFiscalDocumentAccessKey          (inventTransferParmTableFiscalInfo.ThirdPartyEFDocAccessKey_BR);
            fiscalDocument.parmFiscalDocumentNumber             (inventTransferParmTableFiscalInfo.ThirdPartyFiscalDocumentNumber);
            fiscalDocument.parmModel                            (inventTransferParmTableFiscalInfo.ThirdPartyFiscalDocumentModel);
            fiscalDocument.parmFiscalDocumentSeries             (inventTransferParmTableFiscalInfo.ThirdPartyFiscalDocumentSeries);
            fiscalDocument.parmSpecie                           (inventTransferParmTableFiscalInfo.ThirdPartyFiscalDocumentSpecie);
            fiscalDocument.parmFiscalDocumentDate               (inventTransferParmTableFiscalInfo.ThirdPartyFiscalDocumentDate);
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var freightTerms = FiscalDocumentParmDataCreator_BR::convertToFiscalDocumentFreightTerms(inventTransferTableFiscalInfo.FreightChargeTerms);
        fiscalDocument.parmFreightChargeTerms(freightTerms);

        fiscalDocument.parmRefRecId                         (inventTransferJour.RecId);
        fiscalDocument.parmRefTableId                       (inventTransferJour.TableId);

        fiscalDocument.parmSalesCarrier                     (salesCarrier.RecId);
        fiscalDocument.parmSalesCarrierPostalAddress        (LogisticsPostalAddress::findByLocation(salesCarrier.Location).RecId);
        fiscalDocument.parmVehicleLicensePlateNumber        (inventTransferParmTableFiscalInfo.VehicleLicensePlate_BR);
        fiscalDocument.parmVehicleLicensePlateState         (inventTransferParmTableFiscalInfo.VehicleLicensePlateState_BR);

        fiscalDocument.parmVoucher                          (inventTransferJour.VoucherId);

        fiscalDocument.parmTotalAmount                      (totals.totalAmount());

        fiscalDocument.parmListOfTextsParmData().appendList(this.addTexts(InventTransferTable::find(inventTransferJour.TransferId)));

        return fiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesParmData</Name>
				<Source><![CDATA[
    protected List initLinesParmData()
    {
        InventTransferJourLine          inventTransferJourLine;
        InventTransferLine              inventTransferLine;
        InventTransferLineFiscalInfo_BR inventTransferLineFiscalInfo;
        InventTable                     inventTable;
        FiscalDocumentLineParmData_BR   fiscalDocumentLineParmData;
        LogisticsPostalAddress          logisticsPostalAddress;
        List                            ret = new List(Types::Class);

        AmountMST                       lineGrossAmountMST;
        CFOPId_BR                       cfopId;
        SalesPurchTrntype_BR            salesPurchTrntype_BR;

        CFOPId_BR cfop(RecId _cfopRecId)
        {
            return CFOPTable_BR::find(_cfopRecId).cfopId;
        }

        if (updateType == InventTransferUpdateType::Shipment)
        {
            logisticsPostalAddress = this.fiscalEstablishment().postalAddress();
        }
        else
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(this.thirdPartyPostalAddress());
        }

        TaxBenefitCodeSetupHeading_BR taxBenefitCodeSetupHeading = TaxBenefitCodeSetupHeading_BR::findByCountryRegionIdAndStateId(logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State);
        while select inventTransferJourLine
            where inventTransferJourLine.TransferId == inventTransferJour.TransferId
                && inventTransferJourLine.VoucherId == inventTransferJour.VoucherId
                && inventTransferJourLine.TransDate == inventTransferJour.TransDate
            join TaxFiscalClassification_BR, TaxationOrigin_BR, ExceptionCode_BR, ScaleIndicator_BR, CNPJ_BR, DataAreaId
                from inventTable where inventTable.ItemId == inventTransferJourLine.ItemId
        {
            inventTransferLine = inventTransferJourLine.inventTransferLine();

            inventTransferLineFiscalInfo = InventTransferLineFiscalInfo_BR::findByInventTransferLine(inventTransferLine.RecId);

            fiscalDocumentLineParmData = new FiscalDocumentLineParmData_BR();

            fiscalDocumentLineParmData.parmItemType             (FiscalDocumentLineItemType_BR::Product);
            fiscalDocumentLineParmData.parmFiscalClassification (inventTable.TaxFiscalClassification_BR);
            fiscalDocumentLineParmData.parmOrigin               (inventTable.TaxationOrigin_BR);
            fiscalDocumentLineParmData.parmExceptionCode        (inventTable.ExceptionCode_BR);

            fiscalDocumentLineParmData.parmItemId                   (inventTransferJourLine.ItemId);
            fiscalDocumentLineParmData.parmDescription              (inventTransferJourLine.itemName());

            if (updateType == InventTransferUpdateType::Shipment)
            {
                cfopId = cfop(inventTransferLineFiscalInfo.ShipCFOPTable_BR);
                fiscalDocumentLineParmData.parmQuantity                 (inventTransferJourLine.QtyShipped);
                lineGrossAmountMST = fiscalDocumentLineParmData.parmQuantity() * inventTransferLineFiscalInfo.ShipPrice;
                salesPurchTrntype_BR = SalesPurchTrntype_BR::Sales;
            }
            else
            {
                cfopId = cfop(inventTransferLineFiscalInfo.ReceiveCFOPTable_BR);
                fiscalDocumentLineParmData.parmQuantity                 (inventTransferJourLine.QtyReceived);
                lineGrossAmountMST = fiscalDocumentLineParmData.parmQuantity() * inventTransferLineFiscalInfo.ReceivePrice;
                salesPurchTrntype_BR = SalesPurchTrntype_BR::FiscalEstablishmentTransfer;
            }

            fiscalDocumentLineParmData.parmCFOP                     (cfopId);
            fiscalDocumentLineParmData.parmScaleIndicator           (inventTable.ScaleIndicator_BR);
            fiscalDocumentLineParmData.parmCNPJ                     (inventTable.CNPJ_BR);
            
            fiscalDocumentLineParmData.parmBenefitCode                (TaxBenefitCodeSetupData_BR::findAdjustmentCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        inventTransferJourLine.ItemId,
                                                                        this.thirdyPartyType(),
                                                                        this.thirdyPartyAccountNum(),
                                                                        cfopId,
                                                                        salesPurchTrntype_BR));
            fiscalDocumentLineParmData.parmAdjustmentCode53            (TaxBenefitCodeSetupData_BR::findAdjustmentCode53(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        inventTransferJourLine.ItemId,
                                                                        this.thirdyPartyType(),
                                                                        this.thirdyPartyAccountNum(),
                                                                        cfopId,
                                                                        salesPurchTrntype_BR));
            fiscalDocumentLineParmData.parmObservationCode            (TaxBenefitCodeSetupData_BR::findObservationCode(
                                                                        taxBenefitCodeSetupHeading.RecId,
                                                                        inventTransferJourLine.ItemId,
                                                                        this.thirdyPartyType(),
                                                                        this.thirdyPartyAccountNum(),
                                                                        cfopId,
                                                                        salesPurchTrntype_BR));

            if ((updateType == InventTransferUpdateType::Receive
                || inventTransferTableFiscalInfo.InventTransferOrderType == InventTransferOrderType_BR::ThirdPartyReturn)
                && ICMSSTAdditionalInfoFeature::isEnabled()
                && inventTransferLineFiscalInfo.hasReceiveICMSSTTax_BR())
            {
                InventTransferJourLine_BR inventTransferJourLineBR = inventTransferJourLine.inventTransferJourLine_BR();
                fiscalDocumentLineParmData.parmICMSSTCollectionPaymentMode(inventTransferJourLineBR.ICMSSTCollectionPaymentMode);
                fiscalDocumentLineParmData.parmICMSSTCollectionPaymentNumber(inventTransferJourLineBR.ICMSSTCollectionPaymentNumber);
                fiscalDocumentLineParmData.parmRespWithholdingICMSST(inventTransferJourLineBR.RespWithholdingICMSST);
                fiscalDocumentLineParmData.parmHasICMSSTAdditionalInfo(NoYes::Yes);
                fiscalDocumentLineParmData.parmNfeVbcstretVicmsstretTagsReported(inventTransferJourLineBR.NfeVbcstretVicmsstretTagsReported);
            }

            fiscalDocumentLineParmData.parmFinancialLedgerDimension (FiscalDocParmDataCreatorInvTransfer_BR::getFinancialDimension(inventTransferJourLine, inventTransferJour, inventTable));

            this.setTaxationOriginAndFciNumber(fiscalDocumentLineParmData);

            fiscalDocumentLineParmData.parmUnit                     (inventTransferJourLine.UnitId);

            fiscalDocumentLineParmData.parmLineAmount               (lineGrossAmountMST);

            if (fiscalDocumentLineParmData.parmQuantity())
            {
                fiscalDocumentLineParmData.parmUnitPrice            (fiscalDocumentLineParmData.parmLineAmount() / fiscalDocumentLineParmData.parmQuantity());
            }

            fiscalDocumentLineParmData.parmInventTransId            (inventTransferJourLine.InventTransId);

            fiscalDocumentLineParmData.parmRefTableId               (inventTransferJourLine.TableId);
            fiscalDocumentLineParmData.parmRefRecId                 (inventTransferJourLine.RecId);

            if (fiscalDocumentLineParmData.parmFciNumber() != '')
            {
                fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addFciTextLine(fiscalDocumentLineParmData, fiscalDocumentLineParmData.parmTextTagReplacer()));
            }

            fiscalDocumentLineParmData.parmListOfTextsParmData().appendList(this.addTexts(inventTransferLine));

            ret.addEnd(fiscalDocumentLineParmData);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfInstallments</Name>
				<Source><![CDATA[
    protected List initListOfInstallments()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initListOfShipmentStatParmData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a list of objects representing the shipment specifications for a given Fiscal Document.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of <c>FiscalDocumentParmData_BR</c> representing a specific Fiscal Document.
    /// </param>
    /// <returns>
    ///     A List of classes with instances of <c>FiscalDocumentParmData_BR</c> representing the
    ///     shipment specifications incurred for the Fiscal Document passed in as parameter.
    /// </returns>
    /// <remarks>
    /// If there is a single InventTransferParmTableFiscalInfo_BR record, then, net weight and gross weight will
    /// be retrieved from the totals helper object.
    /// If there are many InventTransferParmTableFiscalInfo_BR records, then, net weight and gross weight will be
    /// retrieved from the InventTransferParmTableShipStat_BR record that references the InventTransferParmTableFiscalInfo_BR.
    /// </remarks>
    protected List initListOfShipmentStatParmData(FiscalDocumentParmData_BR _fiscalDocumentParmData)
    {
        List shipmentStatList = new List(Types::Class);

        FiscalDocumentShipmentStatParmData_BR shipmentStatParmData;
        InventTransferParmTableFiscalInfo_BR  parmTableFiscalInfo;
        InventTransferParmTableShipStat_BR    parmTableShipStat;

        if (InventTransferParmTableFiscalInfo_BR::hasManyFiscalInfoForInventTransfer(inventTransferParmTable.RecId))
        {
            while select VolumeQty_BR, VolumeType_BR from parmTableFiscalInfo
                where parmTableFiscalInfo.InventTransferParmTable == inventTransferParmTable.RecId
            join NetWeight, GrossWeight from parmTableShipStat
                where parmTableShipStat.InventTransferParmTableFiscalInfo_BR == parmTableFiscalInfo.RecId
            {
                shipmentStatParmData = FiscalDocumentShipmentStatParmData_BR::construct(parmTableFiscalInfo.VolumeQty_BR,
                                                                                        parmTableFiscalInfo.VolumeType_BR,
                                                                                        parmTableShipStat.GrossWeight,
                                                                                        parmTableShipStat.NetWeight);

                shipmentStatList.addEnd(shipmentStatParmData);
            }
        }
        else
        {
            shipmentStatParmData = FiscalDocumentShipmentStatParmData_BR::construct(inventTransferParmTableFiscalInfo.VolumeQty_BR,
                                                                                    inventTransferParmTableFiscalInfo.VolumeType_BR,
                                                                                    totals.grossWeight(),
                                                                                    totals.transferWeight());

            shipmentStatList.addEnd(shipmentStatParmData);
        }

        return shipmentStatList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFiscalDocumentNumber</Name>
				<Source><![CDATA[
    private void setFiscalDocumentNumber(fiscalDocumentNumber_BR _fiscalDocumentNumber)
    {
        fiscalDocumentNumber = _fiscalDocumentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransferJour</Name>
				<Source><![CDATA[
    private void setInventTransferJour(InventTransferJour _inventTransferJour)
    {
        inventTransferJour = _inventTransferJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setinventTransferTableFiscalInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fiscal information for invent transfer table record.
    /// </summary>
    /// <param name = "_inventTransferTableFiscalInfo">The fiscal information to set.</param>
    [Hookable]
    protected void setinventTransferTableFiscalInfo(InventTransferTableFiscalInfo_BR _inventTransferTableFiscalInfo)
    {
        inventTransferTableFiscalInfo = _inventTransferTableFiscalInfo;

        select RecId from salesCarrier
            where salesCarrier.CarrierName == inventTransferTableFiscalInfo.SalesCarrier;

        fiscalDocumentType = FiscalDocumentType_BR::findRecId(_inventTransferTableFiscalInfo.ShipFiscalDocumentType_BR);

        inventTransferTable = inventTransferTableFiscalInfo.inventTransferTable();

        select inventTransferParmTableFiscalInfo
            where inventTransferParmTableFiscalInfo.InventTransferParmTable == inventTransferParmTable.RecId;

        if (inventTransferTableFiscalInfo.isThirdPartyOrder())
        {
            if (updateType == InventTransferUpdateType::Shipment)
            {
                fromToInventLocation = InventLocation::find(inventTransferJour.InventLocationIdTo);
            }
            else if (updateType == InventTransferUpdateType::Receive)
            {
                fromToInventLocation = InventLocation::find(inventTransferJour.InventLocationIdFrom);
            }

            if (fromToInventLocation.CustAccount_BR)
            {
                custTable = CustTable::find(fromToInventLocation.CustAccount_BR);
            }
            else
            {
                vendTable = VendTable::find(fromToInventLocation.VendAccount);
            }
        }
        else
        {
            if (updateType == InventTransferUpdateType::Shipment)
            {
                thirdPartyFiscalEstablishment = InventSite::find(
                    InventLocation::find(inventTransferJour.InventLocationIdTo).InventSiteId).fiscalEstablishment();
            }
            else if (updateType == InventTransferUpdateType::Receive)
            {
                thirdPartyFiscalEstablishment = InventSite::find(
                    InventLocation::find(inventTransferJour.InventLocationIdFrom).InventSiteId).fiscalEstablishment();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParmTable</Name>
				<Source><![CDATA[
    private void setParmTable(InventTransferParmTable _parmTable)
    {
        inventTransferParmTable = _parmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxationOriginAndFciNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches and set for FCI information if required
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    /// Line that may be updated
    /// </param>
    protected void setTaxationOriginAndFciNumber(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        ImportedContentPerItem_BR       importedContent;

        importedContent = FciIdentifier_BR::getFciAndTaxationOrigin(fiscalDocumentType.fiscalEstablishment().FiscalEstablishmentId,
                                                                    fiscalDocumentType.FiscalDocumentModel,
                                                                    FiscalDocumentIssuer_BR::OwnEstablishment,
                                                                    FiscalDocDirection_BR::Outgoing,
                                                                    inventTransferJour.TransDate,
                                                                    _fiscalDocumentLineParmData.parmCFOP(),
                                                                    _fiscalDocumentLineParmData.parmItemId());
        if (importedContent)
        {
            _fiscalDocumentLineParmData.parmOrigin            (importedContent.TaxationOrigin);
            _fiscalDocumentLineParmData.parmFciNumber         (importedContent.FCINumber);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotals</Name>
				<Source><![CDATA[
    private void setTotals(InventTransferTotals_BR _totals)
    {
        totals = _totals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpdateType</Name>
				<Source><![CDATA[
    private void setUpdateType(InventTransferUpdateType _updateType)
    {
        updateType = _updateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCCMNum</Name>
				<Source><![CDATA[
    private CCMNum_BR thirdPartyCCMNum()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.CCMNum_BR;
            }
            else
            {
                return vendTable.CCMNum_BR;
            }
        }

        return thirdPartyFiscalEstablishment.ccmNum_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyCNPJCPF</Name>
				<Source><![CDATA[
    private CNPJCPFNum_BR thirdPartyCNPJCPF()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.CNPJCPFNum_BR;
            }
            else
            {
                return vendTable.CNPJCPFNum_BR;
            }
        }

        return thirdPartyFiscalEstablishment.cnpjcpfNum_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyIE</Name>
				<Source><![CDATA[
    private IENum_BR thirdPartyIE()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.IENum_BR;
            }
            else
            {
                return vendTable.IENum_BR;
            }
        }

        return thirdPartyFiscalEstablishment.ieNum_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyName</Name>
				<Source><![CDATA[
    private Name thirdPartyName()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.name();
            }
            else
            {
                return vendTable.name();
            }
        }

        return thirdPartyFiscalEstablishment.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyPostalAddress</Name>
				<Source><![CDATA[
    private RecId thirdPartyPostalAddress()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.postalAddress().RecId;
            }
            else
            {
                return vendTable.postalAddress().RecId;
            }
        }

        return thirdPartyFiscalEstablishment.postalAddress().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdyPartyAccountNum</Name>
				<Source><![CDATA[
    private CustVendAC thirdyPartyAccountNum()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.AccountNum;
            }
            else
            {
                return vendTable.AccountNum;
            }
        }

        return thirdPartyFiscalEstablishment.FiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdyPartyType</Name>
				<Source><![CDATA[
    private CustVendType_BR thirdyPartyType()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return CustVendType_BR::Customer;
            }
            else
            {
                return CustVendType_BR::Vendor;
            }
        }

        return CustVendType_BR::FiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromInventTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of <c>FiscalDocParmDataCreatorInvTransfer_BR</c> class.
    /// </summary>
    /// <param name="_inventTransferJour">
    ///     The <c>InventTransferJour</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_parmTable">
    ///     The <c>InventTransferParmTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_inventTransferTable">
    ///     The <c>InventTransferTable</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_inventTransferTableFiscalInfo">
    ///     The <c>InventTransferTableFiscalInfo_BR</c> table buffer to be passed to the created instance.
    /// </param>
    /// <param name="_updateType">
    ///     The update type of the transfer order
    /// </param>
    /// <param name="_totals">
    ///     The <c>InventTransferTotals_BR</c> instance to be passed to the created instance.
    /// </param>
    /// <param name="_fiscalDocumentNumber_BR">
    ///     The fiscal document number to be passed to the created instance.
    /// </param>
    /// <returns>
    ///     An instance of <c>FiscalDocParmDataCreatorCustInvoice_BR</c> class with all auxiliary data sources properly set.
    /// </returns>
    public static FiscalDocumentParmData_BR fromInventTransferOrder(
        InventTransferJour                  _inventTransferJour,
        InventTransferParmTable             _parmTable,
        InventTransferTable                 _inventTransferTable,
        InventTransferTableFiscalInfo_BR    _inventTransferTableFiscalInfo,
        InventTransferUpdateType            _updateType,
        InventTransferTotals_BR             _totals,
        FiscalDocumentNumber_BR             _fiscalDocumentNumber_BR)
    {
        FiscalDocParmDataCreatorInvTransfer_BR  creator;

        creator = new FiscalDocParmDataCreatorInvTransfer_BR();

        creator.setUpdateType(_updateType);
        creator.setInventTransferJour(_inventTransferJour);
        creator.setParmTable(_parmTable);
        creator.setTotals(_totals);
        creator.setinventTransferTableFiscalInfo(_inventTransferTableFiscalInfo);
        creator.setFiscalDocumentNumber(_fiscalDocumentNumber_BR);

        return creator.createParmData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFDPresumedSourceDocumentType</Name>
				<Source><![CDATA[
    protected FDPresumedSourceDocumentType_BR getFDPresumedSourceDocumentType()
    {
        return updateType == InventTransferUpdateType::Shipment ?  FDPresumedSourceDocumentType_BR::Default : FDPresumedSourceDocumentType_BR::InTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalDocumentPurpose</Name>
				<Source><![CDATA[
    protected FiscalDocumentPurpose_BR getFiscalDocumentPurpose()
    {
        FiscalDocumentPurpose_BR fiscalDocumentPurpose;

        if (inventTransferTableFiscalInfo.isReturnOrder())
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Return;
        }
        else
        {
            fiscalDocumentPurpose = FiscalDocumentPurpose_BR::Regular;
        }

        return fiscalDocumentPurpose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyEmail</Name>
				<Source><![CDATA[
    private LogisticsElectronicAddressLocator thirdPartyEmail()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.email();
            }
            else
            {
                return vendTable.email();
            }
        }

        return thirdPartyFiscalEstablishment.email();
    }

]]></Source>
			</Method>
			<Method>
				<Name>thirdPartyICMSContributor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the boolean value of the ICMS contribution flag from the third party
    /// </summary>
    /// <returns>
    /// True if the third party is an ICMS contributor, false otherwise
    /// </returns>
    /// <remarks>
    /// This method will always return true when the third party is a fiscal establishment
    /// </remarks>
    protected ICMSContributor_BR thirdPartyICMSContributor()
    {
        if (!inventTransferTableFiscalInfo.isFiscalEstablishmentOrder())
        {
            if (fromToInventLocation.CustAccount_BR)
            {
                return custTable.ICMSContributor_BR;
            }
            else
            {
                return vendTable.ICMSContributor_BR;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinancialDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the financial dimension for the given a Transfer Order.
    /// </summary>
    /// <param name="_inventTransferJourLine">
    /// The InventTransferJourLine record.
    /// </param>
    /// <param name="_inventTransferJour">
    /// The InventTransferJour record.
    /// </param>
    /// <param name="_inventTable">
    /// The InventTable record.
    /// </param>
    /// <returns>
    /// The financial dimension record id.
    /// </returns>
    public static RecId getFinancialDimension(InventTransferJourLine _inventTransferJourLine, InventTransferJour _inventTransferJour, InventTable _inventTable = null)
    {
        InventTable inventTable = _inventTable ? _inventTable : InventTable::find(_inventTransferJourLine.ItemId);

        InventPostingItemLedgerDimensionParameters searchParameters = FiscalDocParmDataCreatorInvTransfer_BR::buildItemLedgerDimensionParameter(_inventTransferJourLine, _inventTransferJour, inventTable);

        RecId accountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(searchParameters);

        return LedgerDimensionFacade::serviceCreateLedgerDimension(accountBalanceSheet, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name="_inventTransferJourLine">The InventTransferJourLine record.</param>
    /// <param name="_inventTransferJour">The InventTransferJour record.</param>
    /// <param name="_inventTable">The InventTable record.</param>
    /// <returns>The built parameter instance.</returns>
    protected static InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventTransferJourLine  _inventTransferJourLine, 
        InventTransferJour      _inventTransferJour, 
        InventTable             _inventTable)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventTransferJour.UpdateType == InventTransferUpdateType::Shipment ? InventAccountType::InventIssue : InventAccountType::InventReceipt,
            _inventTransferJourLine.ItemId,
            _inventTable.itemGroupId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>