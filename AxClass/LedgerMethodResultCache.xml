<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMethodResultCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerMethodResultCache</c> class implements method result caching using the memoize pattern.
/// </summary>
/// <remarks>
///    Memoization is a design pattern that allows you to avoid re-executing a method or function multiple
///    times when the inputs are the same.
///    Perform a web search for 'memoization' to find the definition
///    of the memoize pattern.
/// </remarks>
public class LedgerMethodResultCache
{
    boolean isCacheInScope; // State flag that indicates whether or not the method result cache is currently in scope.
    str scopeIdentifier; // String that stores an identifier for the scope that the cache is currently in.
    Map cachedInputsList; // List for storing inputs needed for implementing the memoize pattern. The map stores a (string, container) pair which represents (method name, method inputs).
    Map cachedResultsList; // List for storing results needed for implementing the memoize pattern. The map stores a (string, container) pair which represents (method name, method results).
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the results of the specified method and inputs values to the cache.
    /// </summary>
    /// <param name="_methodName">
    ///    The name of the method to add to the cache.
    /// </param>
    /// <param name="_methodInputs">
    ///    The input values for the specified method.
    /// </param>
    /// <param name="_methodResults">
    ///    The results of the specified method.
    /// </param>
    public void add(str _methodName, container _methodInputs, container _methodResults)
    {
        ;

        Debug::assert(isCacheInScope);

        if (cachedInputsList.exists(_methodName))
        {
            // An existing cached result exists. Remove it.
            cachedInputsList.remove(_methodName);
            cachedResultsList.remove(_methodName);
        }

        cachedInputsList.insert(_methodName, _methodInputs);
        cachedResultsList.insert(_methodName, _methodResults);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache.
    /// </summary>
    /// <remarks>
    /// This may be called at any time to clear the cache.
    /// </remarks>
    public void clear()
    {
        ;

        cachedInputsList = new Map(Types::String, Types::Container);
        cachedResultsList = new Map(Types::String, Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>contains</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified method is cached for the given input values.
    /// </summary>
    /// <param name="_methodName">
    ///    The name of the method that may exist in the cache.
    /// </param>
    /// <param name="_methodInputs">
    ///    The input values for the specified method.
    /// </param>
    /// <returns>
    ///    true if the method is cached; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A method is only considered cached if the <c>LedgerMethodResultCache</c> object is in scope and the
    ///    inputs of the method are the same as the inputs to the method the last time it was run.
    /// </remarks>
    public boolean contains(str _methodName, container _methodInputs)
    {
        container cachedInputs;
        boolean isMethodCached = false;
        ;

        if (isCacheInScope && cachedInputsList.exists(_methodName))
        {
            // The method has been memoized. Verify that the memoized version
            // is still considered valid.
            cachedInputs = cachedInputsList.lookup(_methodName);

            if (cachedInputs == _methodInputs)
            {
                // The memoized inputs are the same as the current method inputs. The memoized
                // version is still considered valid.
                isMethodCached = true;
            }
        }

        return isMethodCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enterScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Puts the cache into scope.
    /// </summary>
    /// <param name="_scopeIdentifier">
    ///    A string identifier that indicates which process brought the cache into scope; typically a method
    ///    name.
    /// </param>
    /// <remarks>
    ///    This should be called before the beginning of a process that leverages caching.
    /// </remarks>
    public void enterScope(str _scopeIdentifier)
    {
        ;

        if (!isCacheInScope)
        {
            // This is not a nested event, so perform initialization.
            this.clear();
            scopeIdentifier = _scopeIdentifier;
            isCacheInScope = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>get</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cached results of a method.
    /// </summary>
    /// <param name="_methodName">
    ///    The name of the method for which to get the cached results.
    /// </param>
    /// <returns>
    ///    The cached results of a method.
    /// </returns>
    /// <remarks>
    ///    This should only be called after it has been determined that the results of the method have been
    ///    cached by calling the <c>contains</c> method.
    /// </remarks>
    public container get(str _methodName)
    {
        ;

        Debug::assert(isCacheInScope);

        return cachedResultsList.lookup(_methodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the cache is currently in scope.
    /// </summary>
    /// <returns>
    ///    true if the cache is in scope; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The <c>enterScope</c> method must be called before the cache can be in scope.
    /// </remarks>
    public boolean isInScope()
    {
        ;

        return isCacheInScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leaveScope</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the cache has come out of scope.
    /// </summary>
    /// <param name="_scopeIdentifier">
    ///    A string identifier that indicates which process brought the cache into scope.
    /// </param>
    /// <remarks>
    ///    The cache only comes out of scope if the <paramref name="_scopeIdentifier" /> parameter matches the
    ///    identifier given by the first call to <c>beginScope</c>. This allows nested calls to
    ///    <c>beginScope</c> and <c>endScope</c>.
    /// </remarks>
    public void leaveScope(str _scopeIdentifier)
    {
        ;

        if (scopeIdentifier == _scopeIdentifier)
        {
            // This is leaving the scope of the outer-most scope block.
            scopeIdentifier = '';
            isCacheInScope = false;
            cachedInputsList = null;
            cachedResultsList = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static LedgerMethodResultCache construct()
    {
        ;

        return new LedgerMethodResultCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>