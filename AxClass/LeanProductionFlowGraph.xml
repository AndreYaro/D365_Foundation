<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanProductionFlowGraph</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LeanProductionFlowGraph</c> class builds a graph of the production flow.
/// </summary>
/// <remarks>
/// Every end activity in a plan represents a root node a graph.
/// </remarks>
class LeanProductionFlowGraph extends PlanGraph
{
    LeanProductionFlow                  leanProductionFlow;

    LeanProductionFlowActivity          leanProductionFlowActivity;
    LeanProductionFlowActivity          relatedLeanProductionFlowActivity;
    LeanProdFlowPlanActivityRelation    leanProdFlowPlanActivityRelation;
    LeanCycleTimeInUnit                 leanProductionFlowRequiredTakt;

    Map                                 mapLeanProductionFlowRelations;     //map PlanActivityRelationship recId -> record
    Map                                 mapLeanProductionFlows;             //map PlanReference recId -> record
    Map                                 mapLeanProductionFlowActivities;    //map PlanActivity recId -> record
    Map                                 mapCalculatedRequiredTakt;          //map PlanActivity recId -> required takt
    Map                                 mapLeanProductionFlowRequiredTakt;  //map PlanReference recId -> required takt
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateRequiredTakt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the required takt time across the graph.
    /// </summary>
    /// <param name="_updateLeanProductionFlowActivities">
    ///    A Boolean value that indicates whether the calculated time must be persisted in the database.
    /// </param>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates if cycle times for already activated flows must recalculate.
    /// </param>
    /// <returns>
    ///    true if the calculation succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Initiates a bottoms up calculation.Forcing recalculation enables a global recalculation of all
    ///    connected plans.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean calculateRequiredTakt(
        boolean _updateLeanProductionFlowActivities,
        boolean _forceRecalc = false)
    {
        boolean result = this.isValid();

        if (result)
        {
            //calculate all nodes
            SetEnumerator se = setStartActivities.getEnumerator();
            while (se.moveNext())
            {
                this.calculateRequiredTaktNode(se.current(),
                                               leanProductionFlow.TaktUnitOfMeasure,
                                               _updateLeanProductionFlowActivities,
                                               _forceRecalc);
            }

            //set overall required takt for production flow if necessary
            if (   _updateLeanProductionFlowActivities
                && (plan.Status != PlanStatus::Active
                ||  _forceRecalc)
                && mapLeanProductionFlowRequiredTakt.elements())
            {
                ttsbegin;
                MapEnumerator me = mapLeanProductionFlowRequiredTakt.getEnumerator();
                while (me.moveNext())
                {
                    if (plan.PlanReference == me.currentKey())
                    {
                        LeanProductionFlow leanProductionFlowLocal = LeanProductionFlow::find(leanProductionFlow.RecId,true);
                        leanProductionFlowLocal.RequiredTakt = me.currentValue();
                        leanProductionFlowLocal.update();
                    }
                }
                ttscommit;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateRequiredTaktNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the required takt for a single activity.
    /// </summary>
    /// <param name="_nodeRefRecId">
    ///    A record ID of a record in the <c>PlanActivity</c> table.
    /// </param>
    /// <param name="_cycleTimeUnitOfMeasure">
    ///    The unit that the required takt must be calculated in.
    /// </param>
    /// <param name="_updateLeanProductionFlowActivity">
    ///    A Boolean value that indicates if the calculated time must be persisted into the database.
    /// </param>
    /// <param name="_forceRecalc">
    ///    A Boolean value that indicates if the takt must be recalculated even if it is also present in the
    ///    database.
    /// </param>
    /// <returns>
    ///    The required takt time in the requested time unit.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method was incorrectly called.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanCycleTimeInUnit calculateRequiredTaktNode(
        RefRecId _nodeRefRecId,
        RefRecId _cycleTimeUnitOfMeasure,
        boolean  _updateLeanProductionFlowActivity,
        boolean  _forceRecalc = false)
    {
        PlanActivityRelationship            planActivityRelationshipLocal;
        SetEnumerator                       se;
        RefRecId                            requiredTaktUnitOfMeasure;
        LeanCycleTimeInUnit                 requiredTakt;
        LeanCycleTimeInUnit                 requiredTaktConverted;
        LeanCycleTimeInUnit                 requiredTaktFlow;

        if (!_nodeRefRecId)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        PlanActivity               planActivityLocal               = mapPlanActivities.lookup(_nodeRefRecId);
        LeanProductionFlowActivity leanProductionFlowActivityLocal = mapLeanProductionFlowActivities.lookup(_nodeRefRecId);
        LeanProductionFlow         leanProductionFlowLocal         = mapLeanProductionFlows.lookup(planActivityLocal.PlanReference);
        Plan planLocal = mapPlans.lookup(planActivityLocal.PlanReference);

        Set setParents = mapParents.lookup(_nodeRefRecId);

        boolean doRecurse = setParents
                            && setParents.elements();
        boolean doUpdateRecord = _updateLeanProductionFlowActivity
                            && leanProductionFlowLocal.RecId == leanProductionFlow.RecId;

        //already a known value
        if (mapCalculatedRequiredTakt.exists(_nodeRefRecId))
        {
            requiredTakt              = mapCalculatedRequiredTakt.lookup(_nodeRefRecId);
            requiredTaktUnitOfMeasure = leanProductionFlowLocal.TaktUnitOfMeasure;
        }
        else
        {
            if (   !_forceRecalc
                && planLocal.Status == PlanStatus::Active)
            {
                //active plans have the required takt already set
                doUpdateRecord            = false;
                requiredTakt              = leanProductionFlowActivityLocal.CycleTime;
                requiredTaktUnitOfMeasure = leanProductionFlowLocal.TaktUnitOfMeasure;
                mapCalculatedRequiredTakt.insert(_nodeRefRecId,requiredTakt);               //no conversion required.
            }
            else
            {
                if (   !setParents
                    || !setParents.elements())
                {
                    //reached root
                    requiredTakt              = leanProductionFlowLocal.AverageTakt;
                    requiredTaktUnitOfMeasure = leanProductionFlowLocal.TaktUnitOfMeasure;
                    mapCalculatedRequiredTakt.insert(_nodeRefRecId,requiredTakt);           //no conversion required.
                }
                else
                {
                    //recurse
                    LeanCycleTimeInUnit sumCycleTime = 0;
                    doRecurse = false;

                    se = setParents.getEnumerator();
                    while (se.moveNext())
                    {
                        planActivityRelationshipLocal = se.current();
                        LeanProdFlowPlanActivityRelation leanProdFlowPlanActivityRelationLocal = mapLeanProductionFlowRelations.lookup(planActivityRelationshipLocal.RecId);

                        LeanCycleTimeInUnit parentCycleTime = this.calculateRequiredTaktNode(this.parent(planActivityRelationshipLocal),
                                                                                             _cycleTimeUnitOfMeasure,
                                                                                             _updateLeanProductionFlowActivity,
                                                                                             _forceRecalc);

                        sumCycleTime   += leanProdFlowPlanActivityRelationLocal.CycleTimeRatio /
                                          (parentCycleTime ? parentCycleTime : 1);
                    }

                    requiredTaktUnitOfMeasure = _cycleTimeUnitOfMeasure;
                    requiredTakt              = sumCycleTime
                                                        ? decround(1 / sumCycleTime,
                                                                   UnitOfMeasure::unitOfMeasureDecimalPrecision(requiredTaktUnitOfMeasure))
                                                        : 0;

                    if (leanProductionFlowLocal.TaktUnitOfMeasure != _cycleTimeUnitOfMeasure)
                    {
                        requiredTaktConverted = UnitOfMeasureConverter::convert(requiredTakt,
                                                                                requiredTaktUnitOfMeasure,
                                                                                leanProductionFlowLocal.TaktUnitOfMeasure,
                                                                                NoYes::No);
                    }
                    else
                    {
                        requiredTaktConverted = requiredTakt;
                    }

                    mapCalculatedRequiredTakt.insert(_nodeRefRecId,requiredTaktConverted);  //map holds required takt in flow unit
                }
            }
        }

        //If there are parents and not already recursed in above section, keep going. Need to ensure all nodes are visited.
        if (doRecurse)
        {
            se = setParents.getEnumerator();
            while (se.moveNext())
            {
                planActivityRelationshipLocal = se.current();
                this.calculateRequiredTaktNode(this.parent(planActivityRelationshipLocal),
                                               _cycleTimeUnitOfMeasure,
                                               _updateLeanProductionFlowActivity);          //don't use the result
            }
        }

        //production flow validation sets the required takt (only for the flow being validated)
        if (doUpdateRecord)
        {
            leanProductionFlowActivityLocal = mapLeanProductionFlowActivities.lookup(_nodeRefRecId);
            ttsbegin;
            leanProductionFlowActivityLocal           = LeanProductionFlowActivity::find(leanProductionFlowActivityLocal.RecId,true);
            leanProductionFlowActivityLocal.CycleTime = mapCalculatedRequiredTakt.lookup(_nodeRefRecId);
            leanProductionFlowActivityLocal.update();
            ttscommit;
        }

        //feeder flow, set required overall takt time to lowest of any feeder element in the flow.
        if (setCrossActivities.in(_nodeRefRecId))
        {
            if (mapLeanProductionFlowRequiredTakt.exists(planActivityLocal.PlanReference))
            {
                requiredTaktFlow = mapLeanProductionFlowRequiredTakt.lookup(planActivityLocal.PlanReference);
            }
            else
            {
                requiredTaktFlow = maxint();
            }

            if (requiredTaktFlow > requiredTakt)
            {
                mapLeanProductionFlowRequiredTakt.insert(planActivityLocal.PlanReference,requiredTakt);
            }
        }

        if (requiredTaktUnitOfMeasure != _cycleTimeUnitOfMeasure)
        {
            //convert to requested unit of measure
            requiredTakt = UnitOfMeasureConverter::convert(requiredTakt,requiredTaktUnitOfMeasure,_cycleTimeUnitOfMeasure,NoYes::No);
        }

        return requiredTakt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance variables.
    /// </summary>
    protected void init()
    {
        super();
        mapLeanProductionFlowActivities   = new Map(Types::Int64,Types::Record);
        mapLeanProductionFlows            = new Map(Types::Int64,Types::Record);
        mapLeanProductionFlowRelations    = new Map(Types::Int64,Types::Record);
        mapCalculatedRequiredTakt         = new Map(Types::Int64,Types::Real);
        mapLeanProductionFlowRequiredTakt = new Map(Types::Int64,Types::Real);

        //add current production flow to map
        mapLeanProductionFlows.insert(planReference.RecId,leanProductionFlow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the  table buffers.
    /// </summary>
    protected void initBuffers()
    {
        super();
        leanProductionFlowActivity.clear();
        relatedLeanProductionFlowActivity.clear();
        leanProdFlowPlanActivityRelation.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlow</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanProductionFlow parmLeanProductionFlow(LeanProductionFlow _leanProductionFlow = leanProductionFlow)
    {
        leanProductionFlow = _leanProductionFlow;
        return leanProductionFlow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPlanActivityRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>PlanActivityRelationship</c> table and related records for a specified plan.
    /// </summary>
    /// <param name="_plan">
    ///    A <c>Plan</c> record.
    /// </param>
    /// <remarks>
    ///    Use the <c>next</c> keyword to iterate over records.
    /// </remarks>
    protected void selectPlanActivityRelationship(Plan _plan)
    {
        select TableId from planPlanActivity
            where planPlanActivity.Plan == _plan.RecId
            join planActivity
                where planActivity.RecId             == planPlanActivity.PlanActivity
                  &&  (planActivity.PlanActivityType == PlanActivityType::Process
                  ||   planActivity.PlanActivityType == PlanActivityType::Transfer)
            join leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == planActivity.RecId
            join RecId, IndependentPlanActivity, DependentPlanActivity from planActivityRelationship
                where planActivityRelationship.IndependentPlanActivity  == planActivity.RecId
                   || planActivityRelationship.DependentPlanActivity    == planActivity.RecId
            join leanProdFlowPlanActivityRelation
                where leanProdFlowPlanActivityRelation.PlanActivityRelationship == planActivityRelationship.RecId
            join relatedPlanActivity
                where ((relatedPlanActivity.RecId                         == planActivityRelationship.IndependentPlanActivity
                   &&   (planActivityRelationship.IndependentPlanActivity != planActivity.RecId
                   ||    planActivityRelationship.IndependentPlanActivity == planActivityRelationship.DependentPlanActivity))
                   ||  (relatedPlanActivity.RecId                         == planActivityRelationship.DependentPlanActivity
                   &&   (planActivityRelationship.DependentPlanActivity   != planActivity.RecId
                   ||    planActivityRelationship.IndependentPlanActivity == planActivityRelationship.DependentPlanActivity)))
                   && (relatedPlanActivity.PlanActivityType               == PlanActivityType::Process
                   ||  relatedPlanActivity.PlanActivityType               == PlanActivityType::Transfer)
            join relatedLeanProductionFlowActivity
                where relatedLeanProductionFlowActivity.PlanActivity == relatedPlanActivity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPlanPlanActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects the <c>PlanPlanActivity</c> table and <c>LeanProductionFlowActivity</c> records for a
    ///    specified plan.
    /// </summary>
    /// <param name="_plan">
    ///    A <c>Plan</c> record.
    /// </param>
    /// <remarks>
    ///    Iterate over records using the <c>next</c> keyword.
    /// </remarks>
    protected void selectPlanPlanActivity(Plan _plan)
    {
        select TableId from planPlanActivity
            where planPlanActivity.Plan == _plan.RecId
            join planActivity
                where planActivity.RecId == planPlanActivity.PlanActivity
            join leanProductionFlowActivity
                where leanProductionFlowActivity.PlanActivity == planActivity.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Map</c> objects for plan and production flow activities.
    /// </summary>
    /// <param name="_initParentsAndChildren">
    ///    A Boolean value that indicates whether parent and child maps must be initialized.
    /// </param>
    protected void updatePlanActivities(boolean _initParentsAndChildren = false)
    {
        super(_initParentsAndChildren);

        if (leanProductionFlowActivity)
        {
            mapLeanProductionFlowActivities.insert(planActivity.RecId,leanProductionFlowActivity);
        }

        if (relatedLeanProductionFlowActivity)
        {
            mapLeanProductionFlowActivities.insert(relatedPlanActivity.RecId,relatedLeanProductionFlowActivity);
        }

        if (leanProdFlowPlanActivityRelation)
        {
            mapLeanProductionFlowRelations.insert(planActivityRelationship.RecId,leanProdFlowPlanActivityRelation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlanReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>Map</c> object for plan references.
    /// </summary>
    protected void updatePlanReference()
    {
        Plan        relatedPlan;
        boolean     newPlanReference        = !mapPlanReferences.exists(planActivity.PlanReference);
        boolean     newRelatedPlanReference = !mapPlanReferences.exists(relatedPlanActivity.PlanReference);

        super();

        if (newPlanReference)
        {
            relatedPlan = mapPlans.lookup(planActivity.PlanReference);
            mapLeanProductionFlows.insert(planActivity.PlanReference,LeanProductionFlow::findPlan(relatedPlan.RecId));
        }

        if (   planActivity.PlanReference != relatedPlanActivity.PlanReference
            && newRelatedPlanReference)
        {
            relatedPlan = mapPlans.lookup(relatedPlanActivity.PlanReference);
            mapLeanProductionFlows.insert(relatedPlanActivity.PlanReference,LeanProductionFlow::findPlan(relatedPlan.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static LeanProductionFlowGraph construct()
    {
        return new LeanProductionFlowGraph();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanProductionFlowGraph</c> class.
    /// </summary>
    /// <param name="_leanProductionFlow">
    ///    A <c>LeanProductionFlow</c> record buffer used to initialize the instance of the class.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that is used to initialize the instance of the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanProductionFlowGraph</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanProductionFlowGraph newLeanProductionFlow(
        LeanProductionFlow       _leanProductionFlow,
        boolean                  _silent = false)
    {
        LeanProductionFlowGraph     leanProductionFlowGraph = LeanProductionFlowGraph::construct();

        leanProductionFlowGraph.parmLeanProductionFlow(_leanProductionFlow);
        leanProductionFlowGraph.parmPlan(_leanProductionFlow.plan());
        leanProductionFlowGraph.parmSilent(_silent);

        return leanProductionFlowGraph;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
