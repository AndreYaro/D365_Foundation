<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableMethod_Fact_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class AssetTableMethod_Fact_HU extends AssetTableMethod
{
    private boolean theEnd;

    private AssetTransDate previousDepreciationDate;
    private AssetAmount yearlyAmount;
    private AssetTransDate assetLifeTimeEnd;
    private AssetTransDate nextYearChange;
    private AssetAmount prevDepAmountLoc;
    private AssetAmount periodCoefficientSum;

    private const int Monthly = 1;
    private const int Quarterly = 3;
    private const int HalfYearly = 6;
    private const int Yearly = 12;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public AssetAmount calc()
    {
        AssetAmount         assetAmount;
        AssetAmount         extraDepAmount;
        int                 numOfYearsDays = (depreciationDate - prevYr(depreciationDate));
        AssetTransDate      startOfPeriod  = deprInterval.startOfPeriod(periodstart);
        AssetParameters     assetParameters = AssetParameters::find();

        if (periodEnd <= parmRunDate)
        {
            this.setDepDate();

            this.setAmountToDepreciate();
            extraDepAmount = - AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId,
                                                                     periodEnd,
                                                                     assetBook.BookId,
                                                                     AssetTransType::ExtraordinaryDepreciation);

            if (calculatePrevPeriods == false)
            {
                prevPeriods = 0;
            }

            if (previousDepreciationDate && (nextYearChange < periodEnd))
            {
                prevPeriods = 0;
                nextYearChange = nextYr(nextYearChange);
            }

            restPeriod = ((periodEnd - periodstart + 1)/(periodEnd - startOfPeriod + 1));

            if (calculatePrevPeriods && ! amountToDepreciate)
            {
                prevPeriods += restPeriod;
            }
            else
            {
                if ( numOfYearsDays)
                {
                    assetAmount = ((amountToDepreciate - extraDepAmount) *
                                    this.percentage() / 100) / numOfYearsDays;
                    assetAmount = assetBook.roundOffDepreciation(assetAmount * (periodEnd - periodstart + 1));
                }
                else
                {
                    assetAmount = 0;
                }
                calculatePrevPeriods = false;
            }

            yearlyAmount += assetAmount;
            AssetAmount depreciateCoef = (amountToDepreciate - extraDepAmount) * this.percentage() / 100;
            int daysPeriod = (deprInterval.endPeriod(startOfPeriod) - startOfPeriod + 1);

            if (numOfYearsDays)
            {
                periodCoefficientSum += depreciateCoef * (daysPeriod / numOfYearsDays);
            }

            if ((nextYearChange - dayOfMth(nextYearChange)) < periodEnd)
            {
                if (yearlyAmount != depreciateCoef)
                {
                    assetAmount += (periodCoefficientSum - yearlyAmount);
                }
                yearlyAmount = 0;
                prevDepAmountLoc = 0;
                periodCoefficientSum = 0;
            }

            assetAmount = assetBook.roundOffDepreciation(assetAmount  * this.revaluationFactor());

            if (assetAmount < assetParameters.DepreciationMin)
            {
                assetAmount = min(assetParameters.DepreciationMin,
                                  amountToDepreciate - prevDepAmount - extraDepAmount);
            }

            periodEnd++;
            periodstart = periodEnd;
            periodEnd   = min(deprInterval.endPeriod(periodstart), assetLifeTimeEnd);
            previousDepreciationDate = depreciationDate;

            if (! prevPeriods)
            {
                assetAmount = assetBook.roundOffDepreciation(assetAmount);
            }

            depreciationThisRun += assetAmount;
        }
        if (! prevPeriods &&
            depreciationThisRun + prevDepAmountExternal + extraDepAmount + prevDepAmount >= amountToDepreciate)
        {
            assetAmount -= depreciationThisRun   +
                           prevDepAmountExternal +
                           prevDepAmount         +
                           extraDepAmount        -
                           amountToDepreciate;
            prevDepAmount       = amountToDepreciate - extraDepAmount;
            depreciationThisRun = amountToDepreciate - prevDepAmountExternal - extraDepAmount;
            theEnd = true;
        }
        return assetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        int h, periodFactor;

        super();

        switch (assetDepreciationProfile.Interval)
        {
            case AssetDepreciationInterval::Monthly:    periodFactor = Monthly; break;
            case AssetDepreciationInterval::Quarterly:  periodFactor = Quarterly; break;
            case AssetDepreciationInterval::HalfYearly: periodFactor = HalfYearly; break;
            case AssetDepreciationInterval::Yearly:     periodFactor = Yearly; break;
            default:                       periodFactor = 1;
        }
        periodFactor     = assetBook.LifeTime * periodFactor;
        assetLifeTimeEnd = (assetBook.DepreciationStartDate);
        nextYearChange   = nextYr(assetLifeTimeEnd - 1);
        for (h = 1; h <= periodFactor; h ++)
        {
            assetLifeTimeEnd += dayOfMth(endmth(assetLifeTimeEnd));
            if (! (h mod Yearly)                                   &&
                (assetBook.LastDepreciationDate > assetLifeTimeEnd) &&
                (assetBook.LastDepreciationDate < nextMth(assetLifeTimeEnd)))
            {
                nextYearChange = (assetLifeTimeEnd - 1);
            }
        }
        assetLifeTimeEnd = assetLifeTimeEnd;
        periodEnd        = min(periodEnd, assetLifeTimeEnd);
        periodEnd        = min(periodEnd, parmRunDate);
        prevDepAmountLoc = prevDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(AssetBook _assetBook, AssetTransDate _assetTransDate, boolean _dualDepreciation, boolean _depreciationAltProfile, boolean _depreciationExtProfile, AssetBudgetModelId _assetBudgetModelId)
    {
        // Needed to instantiate correct type when running under CIL
        super(_assetBook, _assetTransDate, _dualDepreciation, _depreciationAltProfile, _depreciationExtProfile, _assetBudgetModelId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (theEnd)
            return false;

        if (parmRunDate <= baseDate)
            return false;

        this.setDepDate();
        depreciationDate = min(assetLifeTimeEnd, periodEnd);
        depreciationDate = min(parmRunDate,      periodEnd);

        if (depreciationDate > parmRunDate)
        {
            return false;
        }

        if (periodEnd < periodstart || periodEnd >  parmRunDate)
            return false;

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>