<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashBalanceCur</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RCashBalanceCur extends RCashBalance
{
    AmountCur amountCur;
    AmountMSTExchAdjustment exchAdjustment;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountCur</Name>
				<Source><![CDATA[
    public AmountCur amountCur()
    {
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountExchAdjustment</Name>
				<Source><![CDATA[
    public AmountMSTExchAdjustment amountExchAdjustment()
    {
        return exchAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        super();

        Query query;
        QueryBuildDataSource qbds;

        if (qrCashBalances)
        {
            query = qrCashBalances.query();

            qbds = query.dataSourceNo(1);
            qbds.addRange(fieldnum(RCashBalances, CurrencyCode));
            qbds.addSelectionField(fieldnum(RCashBalances, AmountCur), SelectionField::Sum);

            qrCashBalances.query(query);
        }

        if (qrCashTrans)
        {
            query = qrCashTrans.query();

            qbds = query.dataSourceNo(1);
            qbds.addRange(fieldnum(RCashTrans, CurrencyCode));
            qbds.addSortField(fieldnum(RCashTrans, TransStatus));
            qbds.addSortField(fieldnum(RCashTrans, DocType));
            qbds.addSelectionField(fieldnum(RCashTrans, AmountCur), SelectionField::Sum);

            qrCashTrans.query(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(RCashAccount _accountNum, CurrencyCode _currencyCode = '')
    {
        this.clear();

        if (qrCashBalances)
        {
            qrCashBalances.query().dataSourceNo(1).findRange(fieldnum(RCashBalances, AccountNum)).value(_accountNum);
            qrCashBalances.query().dataSourceNo(1).findRange(fieldnum(RCashBalances, CurrencyCode)).value(_currencyCode);

            RCashBalances cashBalances;

            while (qrCashBalances.next())
            {
                cashBalances = qrCashBalances.getNo(1);
                amountMST += cashBalances.AmountMST;
                amountCur += cashBalances.AmountCur;
                exchAdjustment += cashBalances.ExchAdjustment;

                ledgerKeySum.updateNow(cashBalances.MainAccountId,
                    [cashBalances.AmountMST,
                    cashBalances.AmountCur,
                    cashBalances.ExchAdjustment]);
            }
        }

        if (qrCashTrans)
        {
            qrCashTrans.query().dataSourceNo(1).findRange(fieldnum(RCashTrans, AccountNum)).value(_accountNum);
            qrCashTrans.query().dataSourceNo(1).findRange(fieldnum(RCashTrans, CurrencyCode)).value(_currencyCode);

            RCashTrans cashTrans;
            DimensionProvider dimensionProvider = new DimensionProvider();
            DimensionAttribute dimAttribute = DimensionAttribute::find(
                DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));

            while (qrCashTrans.next())
            {
                cashTrans = qrCashTrans.get(tablenum(RCashTrans));

                if (cashTrans.TransStatus == RCashTransStatus::Canceled)
                    continue;

                qrCashTrans.get(tablenum(DimensionAttributeValueCombination));

                RecId entityInstance = dimensionProvider.getDimensionEntityInstanceFromQueryRun(
                    qrCashTrans,
                    qrCashTrans.query().dataSourceNo(1).name(),
                    fieldStr(RCashTrans, LedgerDimension),
                    dimAttribute.Name);
                
                this.updateAmounts(cashTrans, entityInstance);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculate amount values based on Document type of <c>RCashTrans</c>.
    /// </summary>
    /// <param name = "_cashTrans">
    ///    <c>RCashTrans</c> used to distinguish values to update.
    /// </param>
    /// <param name = "_entityInstance">
    ///    <c>RecId</c> value used to update values.
    /// </param>
    protected void updateAmounts(RCashTrans _cashTrans, RecId _entityInstance)
    {
        switch (_cashTrans.DocType)
        {
            case RCashDocType::Correction,
                 RCashDocType::DisbursementSlip,
                 RCashDocType::ReimbursementSlip:

                amountMST += _cashTrans.AmountMST;
                amountCur += _cashTrans.AmountCur;

                ledgerKeySum.updateNow(_entityInstance,
                            [_cashTrans.AmountMST,
                            _cashTrans.AmountCur,
                            0]);
                break;
            case RCashDocType::ExchRateDifference:
                exchAdjustment += _cashTrans.AmountMST;
                ledgerKeySum.updateNow(_entityInstance,
                            [0,
                            0,
                            _cashTrans.AmountMST]);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    protected void clear()
    {
        super();

        amountCur = 0;
        exchAdjustment = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAmountCur</Name>
				<Source><![CDATA[
    public AmountCur ledgerAmountCur(int _idx)
    {
        const int ConPos = 2;
        return conpeek(ledgerKeySum.index2Data(_idx), ConPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerExchAdjustment</Name>
				<Source><![CDATA[
    public AmountMSTExchAdjustment ledgerExchAdjustment(int _idx)
    {
        const int ConPos = 3;
        return conpeek(ledgerKeySum.index2Data(_idx), ConPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ToDate _toDate)
    {
        const int NumOfKeys = 1;
        const int NumData = 3;

        super(_toDate);

        ledgerKeySum = KeySum::construct(NumOfKeys, NumData);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>