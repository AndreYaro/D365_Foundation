<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHierarchyHelper_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a helper class is used to handle tax report hierarchy.
/// </summary>
public class TaxReportHierarchyHelper_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateTaxReportHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activate the <c>TaxReportHierarchyVersion_IN</c>.
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// RecId of the hierarchy version.
    /// </param>
    public static void activateTaxReportHierarchy(RecId _hierarchyVersionRecId)
    {
        TaxReportHierarchyVersion_IN    hierarchyVersion;

        ttsBegin;

        hierarchyVersion = TaxReportHierarchyVersion_IN::find(_hierarchyVersionRecId, true);

        hierarchyVersion.IsActive = NoYes::Yes;
        hierarchyVersion.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowToDeactivateHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified hierarchy version can be deactivated, which means the
    /// hierarchy version is not an active set off hierarchy.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The <c>TaxReportHierarchyVersion_IN</c> record.
    /// </param>
    /// <returns>
    /// True if the hierarchy version can be deactived, false otherwise.
    /// </returns>
    public static boolean allowToDeactivateHierarchyVersion(TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        return !TaxReportSetOffHierarchySetup_IN::isHierarchyVersionActive(_hierarchyVersion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowToDeleteHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified hierarchy version is allowed to be deleted.
    /// 1) The hierarchy version is not used as active setoff hierarchy
    /// 2) The hierarchy version is not used by any tax transactions
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// RecId of the <c>TaxReportHierarchyVersion_IN</c> record.
    /// </param>
    /// <returns>
    /// True if the hierarchy version is allowsed to be deleted, false otherwise.
    /// </returns>
    public static boolean allowToDeleteHierarchyVersion(TaxReportHierarchyVersionRecId_IN _hierarchyVersionRecId)
    {
        TaxTrans_IN                         taxTransIN;
        TaxReportHierarchyNode_IN           hierarchyNode;

        // Check active setoff hierarchies
        if (TaxReportSetOffHierarchySetup_IN::existHierarchyVersion(_hierarchyVersionRecId))
        {
            return false;
        }

        // Check tax transactions
        select firstOnly RecId from taxTransIN
            exists join RecId, TaxReportHierarchyVersion_IN from hierarchyNode
                where hierarchyNode.RecId == taxTransIN.TaxReportHierarchyNode_IN
                   && hierarchyNode.TaxReportHierarchyVersion_IN == _hierarchyVersionRecId;

        if (taxTransIN.RecId != 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowToEditHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the specified hierarchy version can be edited, which means the
    /// hierarchy version is not an active set off hierarchy.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// The <c>TaxReportHierarchyVersion_IN</c> record.
    /// </param>
    /// <returns>
    /// True if the hierarchy version can be edited, false otherwise.
    /// </returns>
    public static boolean allowToEditHierarchyVersion(TaxReportHierarchyVersion_IN _hierarchyVersion)
    {
        TaxTrans                            taxTrans;
        TaxTrans_IN                         taxTransIN;
        TaxReportPeriod_IN                  taxReportPeriodIN;
        TaxReportHierarchyNode_IN           hierarchyNode;

        if (TaxReportSetOffHierarchySetup_IN::isHierarchyVersionActive(_hierarchyVersion))
        {
            return false;
        }

        // Checks un-settled tax transactions in current hierarchy
        select firstOnly RecId, CompanyRegistrationNumber from taxTransIN
            where (taxTransIN.RecoverableLedgerDimension != 0 ||
                   taxTransIN.PayableLedgerDimension != 0) &&
                   taxTransIN.TaxReportPeriod_IN == 0
            exists join taxTrans
                where taxTransIN.RefRecId == taxTrans.RecId
            exists join taxReportPeriodIN
                where taxReportPeriodIN.TaxPeriod == taxTrans.TaxPeriod
                   && taxReportPeriodIN.TaxRegistrationNumberTable == taxTransIN.CompanyRegistrationNumber
                   && taxReportPeriodIN.FromDate <= taxTrans.TransDate
                   && taxReportPeriodIN.ToDate   >= taxTrans.TransDate
            exists join hierarchyNode
                where hierarchyNode.RecId == taxTransIN.TaxReportHierarchyNode_IN
                   && hierarchyNode.TaxReportHierarchyVersion_IN == _hierarchyVersion.RecId;

        if (taxTransIN.RecId != 0)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxReportHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the <c>TaxReportCodeStructure_IN</c>.
    /// </summary>
    /// <param name="_name">
    /// The name of <c>TaxReportCodeStructure_IN</c>.
    /// </param>
    /// <param name="_isSetoffable">
    /// The boolean value indicates if the <c>TaxReportCodeStructure_IN</c> isSetOffable or not.
    /// </param>
    /// <param name="_refClassId">
    /// The class id of TaxReportHrchyStructureDesign from which the <c>TaxReportCodeStructure_IN</c> is created.
    /// </param>
    /// <returns>
    /// The <c>TaxReportCodeStructure_IN</c>.
    /// </returns>
    public static TaxReportHierarchy_IN createTaxReportHierarchy(Name _name, boolean _isSetoffable, ClassId _refClassId)
    {
        TaxReportHierarchy_IN reportHierarchyBuf = TaxReportHierarchy_IN::initFromTaxSolutionScope();
        TaxReportHrchyStructureAttribute_IN taxReportHrchyStructureAttribute;
        TaxReportHierarchy_IN reportHierarchy;
        TaxSolutionScopeRecId taxSolutionScopeRecId;
        DictClass dictClass;

        dictClass = new DictClass(_refClassId);

        if (dictClass)
        {
            taxReportHrchyStructureAttribute = dictClass.getAttribute(classStr(TaxReportHrchyStructureAttribute_IN));

            if (taxReportHrchyStructureAttribute is TaxReportHrchyStructureAttribute_IN
                && taxReportHrchyStructureAttribute.parmHierarchyType() == TaxReportHrchyStructDesignType_IN::GTE)
            {
                taxSolutionScopeRecId = reportHierarchyBuf.TaxSolutionScope;
            }
        }

        reportHierarchy = TaxReportHierarchy_IN::findByKey(_name, _refClassId, taxSolutionScopeRecId);

        if(!reportHierarchy)
        {
            ttsBegin;

            reportHierarchy.Name = _name;
            reportHierarchy.IsSetoffable = _isSetoffable;
            reportHierarchy.IsActive = NoYes::No;
            reportHierarchy.RefClassId = _refClassId;

            if (taxSolutionScopeRecId)
            {
                TaxReportHierarchy_IN::initFromTaxSolutionScope(reportHierarchy, TaxSolutionScope::find(taxSolutionScopeRecId));
            }

            reportHierarchy.insert();

            ttsCommit;
        }
        return reportHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxReportHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new version of the specified tax report hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    /// Hierarchy for which the new version is created.
    /// </param>
    /// <returns>
    /// The newly-created hierarchy version.
    /// </returns>
    public static TaxReportHierarchyVersion_IN createTaxReportHierarchyVersion(TaxReportHierarchy_IN _hierarchy)
    {
        TaxReportHrchyStructureDesign_IN    design;
        TaxReportHierarchyVersion_IN        hierarchyVersion;
        TaxReportHrchyNode_IN               rootNode;
        List                                nodeList;
        ListEnumerator                      nodeListEnumerator;

        // Get the design object
        design = TaxReportHierarchyHelper_IN::lookupStructureDesign(_hierarchy);

        // Insert the TaxReportHierarchyVersion_IN record
        hierarchyVersion = TaxReportHierarchyHelper_IN::insertTaxReportHierarchyVersion(_hierarchy);

        // Insert nodes
        nodeList = design.getNextLevelNodes(null, true);
        nodeListEnumerator = nodeList.getEnumerator();
        while (nodeListEnumerator.moveNext())
        {
            rootNode = nodeListEnumerator.current();
            rootNode.parmTaxReportHierarchyVersion(hierarchyVersion.RecId);
        }

        // Iternatively insert the child nodes
        TaxReportHierarchyHelper_IN::persistTaxReportCodeNode(design, rootNode);

        return hierarchyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableHierarchyNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables/disables the specified node, as well as its sub-tree.
    /// </summary>
    /// <param name="_node">
    /// Node (design object) to be enabled/disabled.
    /// </param>
    /// <param name="_nodeEnabled">
    /// True if the node is to be enabled, false if the node is to be disabled.
    /// </param>
    public static void enableHierarchyNode(TaxReportHrchyNode_IN _node, NoYes _nodeEnabled)
    {
        TaxReportHierarchyNode_IN   nodeRecord;

        update_recordSet nodeRecord
            setting Enable = _nodeEnabled
            where nodeRecord.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion()
               && nodeRecord.LeftId >= _node.parmLeftId()
               && nodeRecord.RightId <= _node.parmRightId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllDescendants</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all descendants <c>TaxReportHrchyNode_IN</c>s of the specified <c>TaxReportHrchyNode_IN</c>.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// The list of all descendants <c>TaxReportHrchyNode_IN</c>s.
    /// </returns>
    public static List findAllDescendants(TaxReportHrchyNode_IN _node)
    {
        List                        descendantsList = new List(Types::Class);
        TaxReportHierarchyNode_IN   descendantTableNode;

        while select descendantTableNode
            order by descendantTableNode.LeftId asc
            where descendantTableNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion()
            && descendantTableNode.LeftId > _node.parmLeftId()
            && descendantTableNode.RightId < _node.parmRightId()
        {
            descendantsList.addEnd(TaxReportHierarchyHelper_IN::initNodeFromValueTable(descendantTableNode));
        }
        return descendantsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllDescendantsByDepth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all descendants <c>TaxReportHrchyNode_IN</c>s of the specified <c>TaxReportHrchyNode_IN</c> and depth.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <param name="_depth">
    /// The depth from the specified <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// The list of all descendants <c>TaxReportHrchyNode_IN</c>s.
    /// </returns>
    public static List findAllDescendantsByDepth(TaxReportHrchyNode_IN _node, int _depth)
    {
        List                        descendantsList;
        TaxReportHierarchyNode_IN   descendantTableNode;

        descendantsList = new List(Types::Class);

        while select descendantTableNode
            order by descendantTableNode.LeftId asc
            where descendantTableNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion()
               && descendantTableNode.LeftId > _node.parmLeftId()
               && descendantTableNode.RightId < _node.parmRightId()
               && descendantTableNode.Level == _node.parmLevel() + _depth
        {
            descendantsList.addEnd(TaxReportHierarchyHelper_IN::initNodeFromValueTable(descendantTableNode));
        }

        return descendantsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAllParents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find all parent <c>TaxReportHrchyNode_IN</c>s of the specified <c>TaxReportHrchyNode_IN</c>.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// The list of all parent <c>TaxReportHrchyNode_IN</c>s.
    /// </returns>
    public static List findAllParents(TaxReportHrchyNode_IN _node)
    {
        List                        parentNodesList = new List(Types::Class);
        TaxReportHierarchyNode_IN   parentTableNode;

        //Find all parents except the root node
        while select parentTableNode
            order by parentTableNode.LeftId asc
            where _node.parmTaxReportHierarchyVersion() == parentTableNode.TaxReportHierarchyVersion_IN
               && _node.parmLeftId() > parentTableNode.LeftId
               && _node.parmLeftId() < parentTableNode.RightId
               && parentTableNode.NodeType != TaxReportHierarchyNodeType_IN::Root
        {
            parentNodesList.addEnd(TaxReportHierarchyHelper_IN::initNodeFromValueTable(parentTableNode));
        }

        return parentNodesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDirectParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the direct parent <c>TaxReportHrchyNode_IN</c> of the specified <c>TaxReportHrchyNode_IN</c>.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// The direct parent <c>TaxReportHrchyNode_IN</c>.
    /// </returns>
    public static TaxReportHrchyNode_IN findDirectParent(TaxReportHrchyNode_IN _node)
    {
        TaxReportHierarchyNode_IN   parentTableNode;

        select firstonly parentTableNode
            where parentTableNode.NodeId == _node.parmParentId()
               && parentTableNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();

        return TaxReportHierarchyHelper_IN::initNodeFromValueTable(parentTableNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNodesByDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for a set of nodes in the hierarchy with the specified display value.
    /// </summary>
    /// <param name="_hierarchyVersion">
    /// RecId of the hierarchy version.
    /// </param>
    /// <param name="_value">
    /// Display value.
    /// </param>
    /// <returns>
    /// A set of nodes which has the same display value as the specified one.
    /// </returns>
    public static Array findNodesByDisplayValue(RefRecId _hierarchyVersion, TaxReportHrchyNodeDisplayValue_IN _value)
    {
        TaxReportHierarchyNode_IN   node;
        Array                       result;

        result = new Array(Types::Class);

        while select RecId from node
            where node.TaxReportHierarchyVersion_IN == _hierarchyVersion
               && node.DisplayValue == _value
        {
            result.value(result.lastIndex() + 1, TaxReportHierarchyHelper_IN::initNodeFromValueTable(node));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNodeValueReferenceTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the referenced table record for the specified refTableId and refRecId.
    /// </summary>
    /// <param name="_refTableId">
    /// The referred Table Id.
    /// </param>
    /// <param name="_refTableRecId">
    /// The referred RecId.
    /// </param>
    /// <returns>
    /// The referenced table record.
    /// </returns>
    public static Common findNodeValueReferenceTableRecord(
        RefTableId  _refTableId,
        RefRecId    _refTableRecId)
    {
        QueryBuildDataSource datasource;
        Query                query = new Query();
        QueryRun             queryRun;

        datasource = query.addDataSource(_refTableId);
        datasource.firstOnly(true);
        query.addQueryFilter(datasource, 'RecId').value(int642str(_refTableRecId));
        queryrun = new QueryRun(query);
        if (queryRun.next())
        {
            return queryRun.get(_refTableId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the root <c>TaxReportHrchyNode_IN</c> for the specified structure name
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// The recid of <c>TaxReportHierarchy_IN</c>.
    /// </param>
    /// <returns>
    /// The root <c>TaxReportHrchyNode_IN</c>.
    /// </returns>
    ///
    public static TaxReportHrchyNode_IN findRootNode(RefRecId _hierarchyVersionRecId)
    {
        return TaxReportHierarchyHelper_IN::findRootNodeByHierarchy(_hierarchyVersionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRootNodeByHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the root <c>TaxReportHrchyNode_IN</c> for the specified hierarchy recId
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// The RecId of <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    /// <returns>
    /// The root <c>TaxReportHrchyNode_IN</c>.
    /// </returns>
    private static TaxReportHrchyNode_IN findRootNodeByHierarchy(RefRecId _hierarchyVersionRecId)
    {
        TaxReportHierarchyNode_IN   rootNode;

        if (_hierarchyVersionRecId)
        {
            select rootNode
                where rootNode.TaxReportHierarchyVersion_IN == _hierarchyVersionRecId
                   && rootNode.NodeType == TaxReportHierarchyNodeType_IN::Root
                   && rootNode.NodeId == 1;
        }

        return TaxReportHierarchyHelper_IN::initNodeFromValueTable(rootNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a new node ID.
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// RecId of the hierarchy version.
    /// </param>
    /// <returns>
    /// The generated node ID.
    /// </returns>
    public static int generateNodeId(RefRecId _hierarchyVersionRecId)
    {
        TaxReportHierarchyNode_IN   hierarchyNode;

        select maxOf(NodeId) from hierarchyNode
            where hierarchyNode.TaxReportHierarchyVersion_IN == _hierarchyVersionRecId;

        return hierarchyNode.NodeId + 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComboDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the combination display value with the specified two display values.
    /// </summary>
    /// <param name="_parentComboDisplayValue">
    /// The 1st combination display value.
    /// </param>
    /// <param name="_nodeDisplayValue">
    /// The 2nd combination display value.
    /// </param>
    /// <returns>
    /// The combination display value.
    /// </returns>
    public static TaxReportHrchyNodeComboDisplayValue_IN getComboDisplayValue(
        TaxReportHrchyNodeComboDisplayValue_IN _parentComboDisplayValue,
        TaxReportHrchyNodeComboDisplayValue_IN _nodeDisplayValue)
    {
        str    reportCodeDelimiter = DimensionParameters::getDimensionSegmentDelimiter();

        Debug::assert(reportCodeDelimiter != '');

        return _parentComboDisplayValue + reportCodeDelimiter + _nodeDisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNodeFromValueTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init <c>TaxReportHrchyNode_IN</c> from the table record <c>TaxReportHierarchyNode_IN</c>.
    /// </summary>
    /// <param name="_tableNode">
    /// The table record <c>TaxReportHierarchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// The <c>TaxReportHrchyNode_IN</c>.
    /// </returns>
    public static TaxReportHrchyNode_IN initNodeFromValueTable(TaxReportHierarchyNode_IN _tableNode)
    {
        TaxReportHrchyNode_IN               node;
        TaxReportHrchyTableNode_IN          tableNode;
        TaxReportHrchyEnumNode_IN           enumNode;
        TaxReportHrchyGTENode_IN            gteNode;
        TaxReportHrchyGTEReferenceNode_IN   gteReferenceNode;

        //Add this line to make sure the record is always reading the refreshed data in DB
        _tableNode.reread();

        switch (_tableNode.NodeType)
        {
            case TaxReportHierarchyNodeType_IN::TableNode:
                tableNode = TaxReportHrchyTableNode_IN::constructFromBaseNode(TaxReportHrchyNode_IN::construct());
                tableNode.parmRefTableId(_tableNode.RefTableId);
                tableNode.parmRefFieldId(_tableNode.RefFieldId);
                tableNode.parmRefTableRecId(_tableNode.RefTableRecId);

                node = tableNode;
                break;

            case TaxReportHierarchyNodeType_IN::EnumNode:
                enumNode = TaxReportHrchyEnumNode_IN::constructFromBaseNode(TaxReportHrchyNode_IN::construct());
                enumNode.parmRefEnumId(_tableNode.RefEnumId);
                enumNode.parmRefEnumValue(_tableNode.RefEnumValue);

                node = enumNode;
                break;

            case TaxReportHierarchyNodeType_IN::Root:
                node = TaxReportHrchyRootNode_IN::construct();
                break;

            case TaxReportHierarchyNodeType_IN::GTENode:
                gteNode = TaxReportHrchyGTENode_IN::construct();
                gteNode.parmTaxRuntimeTableId(_tableNode.GTERuntimeTableId);
                gteNode.parmTaxRuntimeRecId(_tableNode.GTERuntimeRecId);
                node = gteNode;
                break;

            case TaxReportHierarchyNodeType_IN::GTEReferenceNode:
                gteReferenceNode = TaxReportHrchyGTEReferenceNode_IN::construct();
                gteReferenceNode.parmTaxRuntimeTableId(_tableNode.GTERuntimeTableId);
                gteReferenceNode.parmTaxRuntimeRecId(_tableNode.GTERuntimeRecId);
                gteReferenceNode.parmReferenceSequence(_tableNode.GTEReferenceSequence);
                gteReferenceNode.parmReferenceBindingVersion(_tableNode.GTEReferenceBindingVersion);
                node = gteReferenceNode;
                break;

            default:
                node = TaxReportHrchyNode_IN::construct();
        }

        node.parmNodeId(_tableNode.NodeId);
        node.parmNodeType(_tableNode.NodeType);
        node.parmCanMatch(_tableNode.CanMatch);
        node.parmCanSettle(_tableNode.CanSettle);
        node.parmCanPost(_tableNode.CanPost);
        node.parmEnable(_tableNode.Enable);
        node.parmParentId(_tableNode.ParentId);
        node.parmClassId(_tableNode.RefClassId);
        node.parmDisplayValue(_tableNode.DisplayValue);
        node.parmComboDisplayValue(_tableNode.ComboDisplayValue);
        node.parmComboDisplayValueStr(_tableNode.ComboDisplayValueStr);
        node.parmLevel(_tableNode.Level);
        node.parmLeftId(_tableNode.LeftId);
        node.parmRightId(_tableNode.RightId);
        node.parmTaxReportHierarchyVersion(_tableNode.TaxReportHierarchyVersion_IN);
        node.parmRecId(_tableNode.RecId);

        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportCodeHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the <c>TaxReportHierarchy_IN</c> with the specified <c>TaxReportHrchyStructureDesign_IN</c>.
    /// </summary>
    /// <param name="_structureDesign">
    /// The <c>TaxReportCodeStructureDesign_IN</c>.
    /// </param>
    public static void initReportCodeHierarchy(TaxReportHrchyStructureDesign_IN _structureDesign)
    {
        TaxReportHierarchy_IN               hierarchy;

        hierarchy = TaxReportHierarchyHelper_IN::createTaxReportHierarchy(
            _structureDesign.parmName(), _structureDesign.isSetoffable(), _structureDesign.parmRefClassId());

        if (hierarchy.RecId)
        {
            TaxReportHierarchyHelper_IN::createTaxReportHierarchyVersion(hierarchy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxReportHierarchyVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new version for the specified hierarchy.
    /// The version number is determined by the latest version.
    /// </summary>
    /// <param name="_hierarchy">
    /// Tax report hierarchy for which the new version is to be created.
    /// </param>
    /// <returns>
    /// The new hierarchy version.
    /// </returns>
    private static TaxReportHierarchyVersion_IN insertTaxReportHierarchyVersion(TaxReportHierarchy_IN _hierarchy)
    {
        TaxReportHierarchyVersion_IN    hierarchyVersion;
        Version                         versionNum;

        // Find the latest version, if exists
        select maxOf(Version) from hierarchyVersion
            where hierarchyVersion.TaxReportHierarchy_IN == _hierarchy.RecId;

        if (hierarchyVersion)
        {
            versionNum = hierarchyVersion.Version + 1;
        }
        else
        {
            versionNum = 1; // Initial creation
        }

        // Insert a new hierarchy version record
        ttsBegin;

        hierarchyVersion.clear();
        hierarchyVersion.TaxReportHierarchy_IN = _hierarchy.RecId;
        hierarchyVersion.Version = versionNum;

        if (_hierarchy.TaxSolutionScope)
        {
            TaxReportHierarchyVersion_IN::initFromTaxSolutionScope(hierarchyVersion, TaxSolutionScope::find(_hierarchy.TaxSolutionScope));
        }

        hierarchyVersion.insert();

        ttsCommit;

        return hierarchyVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupStructureDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up for the design class object of the specified tax report hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    /// A specified TaxReportHierarchy_IN record.
    /// </param>
    /// <returns>
    /// The design class object of the hierarchy.
    /// </returns>
    private static TaxReportHrchyStructureDesign_IN lookupStructureDesign(TaxReportHierarchy_IN _hierarchy)
    {
        DictClass                           designClass;
        TaxReportHrchyStructureAttribute_IN designAttr;
        TaxReportHrchyStructureDesign_IN    design;

        // Class > Attribute > Factory
        designClass = new DictClass(_hierarchy.RefClassId);
        designAttr = designClass.getAttribute(classStr(TaxReportHrchyStructureAttribute_IN));
        design = TaxReportHrchyStructDesignFactory_IN::getStructureDesign(designAttr.parmHierarchyType(), _hierarchy.Name);

        return design;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified record exists in the TaxReportHierarchyNode_IN table.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c>.
    /// </param>
    /// <returns>
    /// True if the node exists; otherwise, false.
    /// </returns>
    public static boolean nodeExists(TaxReportHrchyNode_IN _node)
    {
        TaxReportHierarchyNode_IN  tableNode;

        select firstOnly RecId from tableNode
            where tableNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion()
               && tableNode.ComboDisplayValue == _node.parmComboDisplayValue()
               && tableNode.ParentId  == _node.parmParentId();

        if (tableNode.RecId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistTaxReportCodeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persist all <c>TaxReportHrchyNode_IN</c>. with the specified <c>TaxReportHrchyStructureDesign_IN</c> and current <c>TaxReportCodeNode_IN</c>
    /// </summary>
    /// <param name="_structureDesign">
    /// The <c>TaxReportCodeStructureDesign_IN</c>.
    /// </param>
    /// <param name="_currentNode">
    /// The current <c>TaxReportHrchyNode_IN</c> that needs to be persisted to database.
    /// </param>
    /// <returns>
    /// The <c>TaxReportHrchyNode_IN</c> that has been persisted to database.
    /// </returns>
    public static TaxReportHrchyNode_IN persistTaxReportCodeNode(
        TaxReportHrchyStructureDesign_IN _structureDesign,
        TaxReportHrchyNode_IN _currentNode)
    {
        List                            nodeList;
        ListEnumerator                  listEnum;
        TaxReportHrchyNode_IN           childNode;

        //Persist current node

        _currentNode.persist();

        //Iternatively insert child nodes
        nodeList = _structureDesign.getNextLevelNodes(_currentNode);
        listEnum = nodeList.getEnumerator();
        while (listEnum.moveNext())
        {
            childNode = listEnum.current();
            childNode = _currentNode.append(childNode);
            TaxReportHierarchyHelper_IN::persistTaxReportCodeNode(_structureDesign, childNode);
        }

        return _currentNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalNodeCountByHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// The total count of <c>TaxReportHrchyNode_IN</c> in the specified <c>TaxReportHierarchy_IN</c> instance.
    /// </summary>
    /// <param name="_hierarchyVersionRecId">
    /// The recId of <c>TaxReportHierarchyVersion_IN</c>.
    /// </param>
    /// <returns>
    /// The total count of <c>TaxReportHrchyNode_IN</c>s.
    /// </returns>
    public static int totalNodeCountByHierarchy(RefRecId _hierarchyVersionRecId)
    {
        TaxReportHrchyNode_IN   rootNode;

        rootNode = TaxReportHierarchyHelper_IN::findRootNodeByHierarchy(_hierarchyVersionRecId);

        return real2int((rootNode.parmRightId() - rootNode.parmLeftId() + 1) / 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNodeValueAfterInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update existing values of table record <c>TaxReportHierarchyNode_IN</c> after the new <c>TaxReportHrchyNode_IN</c> is inserted.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c> that has been persisted to database.
    /// </param>
    public static void updateNodeValueAfterInsert(TaxReportHrchyNode_IN _node)
    {
        TaxReportHierarchyNode_IN  affectedNode;

        if (_node.parmTaxReportHierarchyVersion() != 0 &&
            _node.parmLeftId() != 0 &&
            _node.parmRightId() != 0)
        {
            // _newNode's descendant's level should be updated
            update_recordSet affectedNode
                setting Level = affectedNode.Level + 1
                where affectedNode.LeftId > _node.parmLeftId()
                   && affectedNode.RightId < _node.parmRightId()
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNodeValueAfterRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update existing values of table record <c>TaxReportHierarchyNode_IN</c> after the <c>TaxReportHrchyNode_IN</c> is removed.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c> that has been removed from database.
    /// </param>
    public static void updateNodeValueAfterRemove(TaxReportHrchyNode_IN _node)
    {
        TaxReportHierarchyNode_IN  affectedNode;
        int                        nodeWidth;

        if (_node.parmTaxReportHierarchyVersion() != 0 &&
            _node.parmLeftId() != 0 &&
            _node.parmRightId() != 0)
        {
            nodeWidth = _node.parmRightId() - _node.parmLeftId() + 1;

            update_recordSet affectedNode
                setting RightId = affectedNode.RightId - nodeWidth
                where affectedNode.RightId > _node.parmRightId()
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();

            update_recordSet affectedNode
                setting LeftId = affectedNode.LeftId - nodeWidth
                where affectedNode.LeftId > _node.parmRightId()
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();

            update_recordSet affectedNode
                setting NodeId = affectedNode.NodeId - real2int((nodeWidth / 2))
                where affectedNode.NodeId > _node.parmNodeId()
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNodeValueBeforeInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update existing values of table record <c>TaxReportHierarchyNode_IN</c> before the new <c>TaxReportHrchyNode_IN</c> is inserted.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c> that will be persisted to database.
    /// </param>
    public static void updateNodeValueBeforeInsert(TaxReportHrchyNode_IN _node)
    {
        TaxReportHierarchyNode_IN  affectedNode;

        if (_node.parmTaxReportHierarchyVersion() != 0 &&
            _node.parmLeftId() != 0 &&
            _node.parmRightId() != 0)
        {
            // All nodes with leftId/RightId > _newNode.leftId - 1 should be updated
            update_recordSet affectedNode
                setting RightId = affectedNode.RightId + 2
                where affectedNode.RightId > _node.parmLeftId() - 1
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();

            update_recordSet affectedNode
                setting LeftId = affectedNode.LeftId + 2
                where affectedNode.LeftId > _node.parmLeftId() - 1
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNodeValueBeforeRemove</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update existing values of table record <c>TaxReportHierarchyNode_IN</c> before the <c>TaxReportHrchyNode_IN</c> is removed.
    /// </summary>
    /// <param name="_node">
    /// The <c>TaxReportHrchyNode_IN</c> that will be removed from database.
    /// </param>
    public static void updateNodeValueBeforeRemove(TaxReportHrchyNode_IN _node)
    {
        TaxReportHierarchyNode_IN  affectedNode;

        if (_node.parmTaxReportHierarchyVersion() != 0 &&
            _node.parmLeftId() != 0 &&
            _node.parmRightId() != 0)
        {
            delete_from affectedNode
                where affectedNode.LeftId > _node.parmLeftId()
                   && affectedNode.RightId < _node.parmRightId()
                   && affectedNode.TaxReportHierarchyVersion_IN == _node.parmTaxReportHierarchyVersion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComboDisplayValueAfterDelimiterChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the record value after delimiter is changed.
    /// </summary>
    /// <param name="_updatedDisplayValues">
    /// The <c>_updatedDisplayValues</c> is updated delimiter info
    /// </param>
    [SubscribesTo(classStr(DimensionSegmentSeparatorDataUpdate), delegateStr(DimensionSegmentSeparatorDataUpdate, updateDisplayValueData))]
    public static void updateComboDisplayValueAfterDelimiterChange(DimensionSegmentSeparatorDataUpdateTmp _updatedDisplayValues)
    {
        TaxReportHierarchyNode_IN node;
        TaxReportHierarchyNode_IN parentNode;

        ttsbegin;
        while select forupdate crosscompany node 
            order by TaxReportHierarchyVersion_IN, NodeId asc
            where node.NodeId != TaxReportHierarchyNodeType_IN::Root
        {
            select firstonly crosscompany ComboDisplayValue, ComboDisplayValueStr from parentNode
                where parentNode.TaxReportHierarchyVersion_IN == node.TaxReportHierarchyVersion_IN
                    && parentNode.NodeId == node.ParentId
                    && parentNode.DataAreaId == node.DataAreaId;

            changecompany(node.company())
            {
                node.ComboDisplayValue = TaxReportHierarchyHelper_IN::getComboDisplayValue(parentNode.ComboDisplayValue, node.DisplayValue);
                node.ComboDisplayValueStr = TaxReportHierarchyHelper_IN::getComboDisplayValue(parentNode.ComboDisplayValueStr, node.DisplayValue);
                node.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>