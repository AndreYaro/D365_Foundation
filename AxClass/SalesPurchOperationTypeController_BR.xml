<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchOperationTypeController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class used to lookup and validate entered on operation type field.
/// Usage:
///     Declare <c>SalesPurchOperationTypeController_BR</c> on form class decalration.
///     Initializte the class on init method passing form name as argument.
///     Override method lookupreference on SalesPurchOperationType_BR data source field and call method lookupreference.
///     Override method validate on SalesPurchOperationType_BR data source field and call method validate.
/// </summary>
class SalesPurchOperationTypeController_BR
{
    SalesPurchTrntype_BR    transactionType;
    boolean                 useFilterCriteria;
    boolean                 createInventTransFilter;
    boolean                 createFinancialTransFilter;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the lookup of the operation type.
    /// </summary>
    /// <param name="_cfopAttributesDeterminer">
    /// A <c>CFOPAttributesDeterminer_BR</c> object. Optional.
    /// </param>
    /// <returns>
    /// The query for the lookup.
    /// </returns>
    protected Query buildQuery(CFOPAttributesDeterminer_BR _cfopAttributesDeterminer = null)
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesPurchOperationType_BR));
        qbds.addSortField(fieldnum(SalesPurchOperationType_BR, OperationTypeID));
        qbds.addSortField(fieldnum(SalesPurchOperationType_BR, Name));
        if (useFilterCriteria)
        {
            if (createInventTransFilter)
            {
                qbds.addRange(fieldNum(SalesPurchOperationType_BR, CreateInventTrans)).value(SysQuery::value(any2enum(NoYes::Yes)));
            }
            if (createFinancialTransFilter)
            {
                qbds.addRange(fieldNum(SalesPurchOperationType_BR, CreateFinancialTrans)).value(SysQuery::value(any2enum(NoYes::Yes)));
            }
        }

        qbds = qbds.addDataSource(tableNum(CFOPMatrix_BR));
        qbds.fetchMode(QueryFetchMode::One2Many);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(SalesPurchOperationType_BR, recId), fieldNum(CFOPMatrix_BR, SalesPurchOperationType_BR));
        qbds.addRange(fieldNum(CFOPMatrix_BR, Transactiontype)).value(SysQuery::value(any2int(transactionType)));

        qbds = qbds.addDataSource(tableNum(CFOPTable_BR));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.addLink(fieldNum(CFOPMatrix_BR, CFOPTable_BR), fieldNum(CFOPTable_BR, RecId));

        if (_cfopAttributesDeterminer && _cfopAttributesDeterminer.canDetermineLocation())
        {
            qbds.addRange(fieldNum(CFOPTable_BR, CUstVendLocation)).value(SysQuery::value(any2int(_cfopAttributesDeterminer.getLocation())));
            qbds.addRange(fieldNum(CFOPTable_BR, Direction)).value(SysQuery::value(any2int(_cfopAttributesDeterminer.getDirection())));
        }

        return Query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the operation type lookup reference for the form control.
    /// </summary>
    /// <param name="_control">
    /// The form control to display the lookup.
    /// </param>
    /// <param name="_cfopAttributesDeterminer">
    /// A <c>CFOPAttributesDeterminer_BR</c> object.
    /// </param>
    /// <returns>
    /// The lookup reference.
    /// </returns>
    [Hookable]
    protected SysReferenceTableLookup getReferenceLookup(FormReferenceControl _control, CFOPAttributesDeterminer_BR _cfopAttributesDeterminer = null)
    {
        SysReferenceTableLookup sysReferenceTableLookup = SysReferenceTableLookup::newParameters(tablenum(SalesPurchOperationType_BR), _control);

        sysReferenceTableLookup.addLookupfield(fieldnum(SalesPurchOperationType_BR, OperationTypeID));
        sysReferenceTableLookup.addLookupfield(fieldnum(SalesPurchOperationType_BR, Name));
        sysReferenceTableLookup.addLookupfield(fieldnum(SalesPurchOperationType_BR, CreateInventTrans));
        sysReferenceTableLookup.addLookupfield(fieldnum(SalesPurchOperationType_BR, CreateFinancialTrans));

        sysReferenceTableLookup.parmQuery(this.buildQuery(_cfopAttributesDeterminer));

        return sysReferenceTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the result of the operation type lookup.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form control to display the lookup.
    /// </param>
    /// <param name="_cfopAttributesDeterminer">
    /// A <c>CFOPAttributesDeterminer_BR</c> object.
    /// </param>
    /// <returns>
    /// The result of the lookup.
    /// </returns>
    public Common lookupReference(FormReferenceControl _formReferenceControl, CFOPAttributesDeterminer_BR _cfopAttributesDeterminer = null)
    {
        return this.getReferenceLookup(_formReferenceControl, _cfopAttributesDeterminer).performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
/// <summary>
    /// Returns a new instance of the <c>SalesPurchOperationTypeController_BR</c> class.
    /// </summary>
    /// <param name="_formName">
    /// The form name to customize the object.
    /// </param>
    public void new(str _formName)
    {
        switch (_formName)
        {
            case formStr(SalesTable):
            case formStr(SalesQuotationTable):
                transactionType = SalesPurchTrntype_BR::Sales;
                break;

            case formStr(PurchTable):
                transactionType = SalesPurchTrntype_BR::Purchase;
                break;

            case formStr(PurchRFQCaseTable):
            case formStr(PurchRFQReplyTable):
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00031, funcName());
            case formStr(PurchReqTable):
                transactionType = SalesPurchTrntype_BR::Purchase;
                useFilterCriteria           = true;
                createInventTransFilter     = true;
                createFinancialTransFilter  = true;
                break;

            case formStr(CustFreeInvoice):
                transactionType = SalesPurchTrntype_BR::FreeTextInvoice;
                break;

            default : error::wrongUseOfFunction(funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the content of salesPurchOperationType_BR data source field.
    /// </summary>
    /// <param name="_recId">RecId of operation type.</param>
    /// <param name="_cfopAttributesDeterminer">CFOP attributes determiner.</param>
    /// <returns>
    /// Returns true if the value entered matches the conditions set in the query
    /// Returns false if the value entered doesn't match with the condition set in the query
    /// </returns>
    public boolean validate(
        SalesPurchOperationTypeRecId_BR _recId,
        CFOPAttributesDeterminer_BR     _cfopAttributesDeterminer = null)
    {
        if (_recId)
        {
            Query query = this.buildQuery(_cfopAttributesDeterminer);

            QueryRun queryRun = new QueryRun(query);

            while (queryRun.next())
            {
                SalesPurchOperationType_BR salesPurchOperType = queryRun.get(tableNum(SalesPurchOperationType_BR));

                if (salesPurchOperType.RecId == _recId)
                {
                    return true;
                }
            }

            if (useFilterCriteria)
            {
                return checkFailed("@GLS222573");
            }
            else
            {
                return checkFailed("@GLS937");
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>