<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransReorgPaymSchedSplit_Specified</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>CustVendTransReorgPaymSchedSplit_AmountByPayment</c> class splits the payment schedule.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.CustVendTransReorgPaymSchedSplit)),
ExportMetadata(enumStr(PaymSchedBy), enumLiteralStr(PaymSchedBy, Specified))]
public final class CustVendTransReorgPaymSchedSplit_Specified extends CustVendTransReorgPaymSchedSplit
{
    protected Percent totalPercent = 0.0;
    protected AmountCur remainAmountCur;
    protected PaymSched paymSched;
    protected PaymSchedLine paymSchedLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new <c>TmpCustVendTransReorg</c> table records based on a specified amount.
    /// </summary>
    protected void doRun()
    {
        remainAmountCur = this.getRemainAmountCur();
        paymSched = this.getPaymSched();

        while select PercentAmount, Value, Qty from paymSchedLine
            where paymSchedLine.Name == paymSched.Name
        {
            this.initTmpCustVendTransReorg();

            tmpCustVendTransReorg.insert();

            if (remainAmountCur == 0.0)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpCustVendTransReorg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes fields for the <c>TmpCustVendTransReorg</c> table buffer.
    /// </summary>
    protected void initTmpCustVendTransReorg()
    {
        if (paymSchedLine.PercentAmount == PercentAmount::Percent)
        {
            totalPercent += paymSchedLine.Value;

            if (totalPercent != 100.0)
            {
                tmpCustVendTransReorg.AmountCur = CurrencyExchangeHelper::amount(abs(this.getAmountCur()) * paymSchedLine.Value / 100, this.getCurrencyCode());
            }
            else
            {
                tmpCustVendTransReorg.AmountCur = remainAmountCur;
            }

            tmpCustVendTransReorg.CustVendTransPct = paymSchedLine.Value;
        }
        else
        {
            tmpCustVendTransReorg.AmountCur = CurrencyExchangeHelper::amount(paymSchedLine.Value, this.getCurrencyCode());
            tmpCustVendTransReorg.CustVendTransPct = tmpCustVendTransReorg.AmountCur / abs(this.getAmountCur()) * 100;
        }

        if (tmpCustVendTransReorg.AmountCur > remainAmountCur)
        {
            tmpCustVendTransReorg.AmountCur = remainAmountCur;
            tmpCustVendTransReorg.CustVendTransPct = CurrencyExchangeHelper::amount(tmpCustVendTransReorg.AmountCur / abs(this.getAmountCur()) * 100);
        }

        remainAmountCur -= tmpCustVendTransReorg.AmountCur;

        Futures futures = Futures::construct(this.getTransDate(), paymSchedLine.Qty, paymSched.PeriodUnit);
        tmpCustVendTransReorg.DueDate = futures.next();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>