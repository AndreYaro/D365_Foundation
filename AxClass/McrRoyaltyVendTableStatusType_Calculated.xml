<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>McrRoyaltyVendTableStatusType_Calculated</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRRoyaltyVendTableStatusType_Calculated</c> class holds the rebate processes specific to royalty with status 'Calculated'.
/// </summary>
public class McrRoyaltyVendTableStatusType_Calculated extends MCRRoyaltyVendTableStatusType
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    public void inserted()
    {
        super();

        MCRRoyaltyTable     mcrRoyaltyTableLocal    = MCRRoyaltyTable::findByRecId(mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId);
        MCRRoyaltyContract  mcrRoyaltyContract      = MCRRoyaltyContract::find(mcrRoyaltyTableLocal.RoyaltyContract, mcrRoyaltyTableLocal.VendAccount);

        if (mcrRoyaltyContract.CumulateSalesBy      == MCRRoyaltyCumulationPeriod::Invoice
            && mcrRoyaltyContract.ApprovalRequired  == NoYes::No)
        {
            MCRRoyaltyVendTable mcrRoyaltyVendTableLocal = MCRRoyaltyVendTable::findByRecId(mcrRoyaltyVendTable.RecId, true);
            MCRRoyaltyVendTablePaymentPost mcrRoyaltyVendTablePaymentPost = new MCRRoyaltyVendTablePaymentPost();

            ttsbegin;
            mcrRoyaltyVendTablePaymentPost.main(mcrRoyaltyVendTableLocal);

            if (mcrRoyaltyVendTableLocal)
            {
                mcrRoyaltyVendTablePaymentPost.postVendorInvoice();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>royaltyStatus</Name>
				<Source><![CDATA[
    public MCRRoyaltyVendTableStatus royaltyStatus()
    {
        return MCRRoyaltyVendTableStatus::Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate to approved status and update the record if the record is unmark for credit.
    /// </summary>
    public void runApproved()
    {
        this.setNextStatus();
        mcrRoyaltyVendTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCumulated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate cumulation process.
    /// </summary>
    public void runCumulated()
    {
        #OCCRetryCount

        MCRRoyaltyVendTable     mcrRoyaltyVendTmpTable;
        MCRRoyaltyContract      mcrRoyaltyContract;

        real                    minValueSumQtyQuery;
        real                    minValueSumAmountQuery;

        MCRRoyaltyTable         mcrRoyaltyTable;

        // don't re-calculate if this royalty is not directly derived from a sales invoice
        if (!mcrRoyaltyVendTable.CustInvoiceTransRefRecId)
        {
            return;
        }

        mcrRoyaltyTable         = MCRRoyaltyTable::findByRecId(mcrRoyaltyVendTable.mcrRoyaltyTableRefRecId);
        mcrRoyaltyVendTmpTable  = mcrRoyaltyVendTable.royaltyTableSum();
        mcrRoyaltyContract      = mcrRoyaltyTable.royaltyContract();

        if (mcrRoyaltyContract.UnitType == MCRRoyaltyUnitType::CWUnit)
        {
            if (mcrRoyaltyVendTmpTable.cwSalesInvoicedQty == 0
                && mcrRoyaltyVendTable.RoyaltyStatus == MCRRoyaltyVendTableStatus::ToCalculate)
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTable.cwSalesInvoicedQty);
            }
            else
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTmpTable.cwSalesInvoicedQty);
            }
        }
        else
        {
            if (mcrRoyaltyVendTmpTable.SalesInvoicedQty == 0
                && mcrRoyaltyVendTable.RoyaltyStatus == MCRRoyaltyVendTableStatus::ToCalculate)
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTable.SalesInvoicedQty);
            }
            else
            {
                minValueSumQtyQuery = abs(mcrRoyaltyVendTmpTable.SalesInvoicedQty);
            }
        }

        if (mcrRoyaltyVendTmpTable.SalesAmount == 0
                && mcrRoyaltyVendTable.RoyaltyStatus == MCRRoyaltyVendTableStatus::ToCalculate)
        {
            minValueSumAmountQuery = abs(mcrRoyaltyVendTable.SalesAmount);
        }
        else
        {
            minValueSumAmountQuery = abs(mcrRoyaltyVendTmpTable.SalesAmount);
        }

        try
        {
            ttsbegin;
            this.updateRoyaltiesToCumulate();
            mcrRoyaltyVendTable.cumulateGapRoyaltyTotal(minValueSumQtyQuery, minValueSumAmountQuery);
            ttscommit;
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty payment process.
    /// </summary>
    public void runPayment()
    {
        MCRRoyaltyVendTable mcrRoyaltyVendTableLocal;

        using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().runPaymentCalculated(mcrRoyaltyVendTable))
        {
            ttsbegin;

            mcrRoyaltyVendTableLocal = MCRRoyaltyVendTable::findByRecId(mcrRoyaltyVendTable.RecId, true);

            mcrRoyaltyVendTableLocal.royaltyTableProcess().runPayment();

            if (mcrRoyaltyVendTableLocal.RoyaltyBalance == 0)
            {
                this.setFinalStatus();
            }

            if (mcrRoyaltyVendTableLocal.validateWrite())
            {
                mcrRoyaltyVendTableLocal.update();
            }
            else
            {
                error(strFmt("@MCR:MCRRoyaltyVendTableValidationError", mcrRoyaltyVendTableLocal.RoyaltyClaimId));
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the royalty processing.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A <c>Boolean</c> value that determines if the royalty is an adjustment.
    /// </param>
    public void runProcessed(boolean _forAdjustment  = false)
    {
        MCRRoyaltyVendTable     mcrRoyaltyVendTableLocal;
        #OCCRetryCount

        try
        {
            using (var activityContext = this.instrumentationLogger().royaltyClaimActivities().runProcessedCalculated(mcrRoyaltyVendTable))
            {
                ttsbegin;
                mcrRoyaltyVendTableLocal = MCRRoyaltyVendTable::findByRecId(mcrRoyaltyVendTable.RecId, true);
                mcrRoyaltyVendTableLocal.royaltyTableProcess().runProcess(_forAdjustment);

                if (mcrRoyaltyVendTableLocal.validateWrite())
                {
                    mcrRoyaltyVendTableLocal.update();
                }
                else
                {
                    error(strFmt("@MCR:MCRRoyaltyVendTableValidationError", mcrRoyaltyVendTableLocal.RoyaltyClaimId));
                }

                ttscommit;

                info(strFmt("@MCR4410141", mcrRoyaltyVendTableLocal.RoyaltyClaimId));
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate status as 'Approved'.
    /// </summary>
    public void setNextStatus()
    {
        mcrRoyaltyVendTable.RoyaltyStatus   = MCRRoyaltyVendTableStatus::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>MCRRoyaltyVendTableStatusType_Calculated</c> class.
    /// </summary>
    /// <returns>
    /// A class instance.
    /// </returns>
    public static MCRRoyaltyVendTableStatusType_Calculated construct()
    {
        return new MCRRoyaltyVendTableStatusType_Calculated();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>