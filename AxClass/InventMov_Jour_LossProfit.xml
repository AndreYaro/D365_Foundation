<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_LossProfit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Jour_LossProfit</c> class is used when it works with inventory journals.
/// </summary>
class InventMov_Jour_LossProfit extends InventMov_Journal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowNegativePhysicalForBlockingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if validation should allow a negative physical available quantity for inventory status blocking.
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    /// <remarks>
    ///     Availability validation must be skipped for issue transactions on certain inventory journal transactions with blocking status.
    /// </remarks>
    public boolean allowNegativePhysicalForBlockingStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateInventStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the movment can update inventory status blocking transactions
    /// </summary>
    /// <returns>
    ///     Always returns true.
    /// </returns>
    public boolean canUpdateInventStatusBlocking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckLocationBlocking</Name>
				<Source><![CDATA[
    protected NoYes mustCheckLocationBlocking()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }
        return new InventMov_Jour_LossProfit(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the original transactions.
    /// </summary>
    /// <returns>
    ///    The ID of the original transaction originator if there is an originator; otherwise, zero.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        if (!inventJournalTrans.InventTransIdReturn)
        {
            return 0;
        }

        if (!this.isReturned(this.transSign() * inventJournalTrans.Qty))
        {
            return 0;
        }

        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransIdReturn).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::InventLossProfit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Jour_LossProfit</c> class based on the specified
    ///    record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_LossProfit</c> class.
    /// </returns>
    public static InventMov_Jour_LossProfit newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_LossProfit(_inventJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>