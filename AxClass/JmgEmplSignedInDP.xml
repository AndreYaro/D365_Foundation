<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgEmplSignedInDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgEmplSignedInDP</c> class declares the variables and tables for the <c>JmgEmplSignedIn</c>
///    report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(JmgEmplSignedInQuery)),
    SRSReportParameterAttribute(classstr(JmgEmplSignedInContract))
]
public class JmgEmplSignedInDP extends SRSReportDataProviderBase
{
    JmgTmpEmplSignedIn  jmgTmpEmplSignedIn;
    JmgDate             currentDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary <c>JmgTmpEmplSignedIn</c> buffer from the specified query
    /// </summary>
    /// <param name="_q">
    /// The query to retrieve data from.
    /// </param>
    /// <param name="_date">
    /// The date used to filter out data.
    /// </param>
    /// <param name="filter">
    /// Only workers with the selected filter is added.
    /// </param>
    private void getDataFromQuery(Query _q, JmgDate _date, JmgEmplSignedInFilter filter)
    {
        JmgTmpEmplSignedIn  buffer;
        JmgEmployee         jmgEmployee;
        HcmWorker           hcmWorker;
        QueryRun            qr;
        JmgEmplSignedInForm jmgEmplSignedInForm = new JmgEmplSignedInForm();
        boolean             signedIn;

        qr = new SysQueryRun(_q);

        while (qr.next())
        {
            jmgEmployee             = qr.get(tablenum(JmgEmployee));
            hcmWorker               = qr.get(tablenum(HcmWorker));

            buffer.PersonnelNumber  = hcmWorker.PersonnelNumber;

            JmgEmplSignedInForm::addWorker(jmgEmployee, _date, buffer, true);

            signedIn = buffer.SignedIn == jmgEmplSignedInForm.clockedInValue();

            if (filter == JmgEmplSignedInFilter::All || (filter == JmgEmplSignedInFilter::Absent && !signedIn) || (filter == JmgEmplSignedInFilter::Present && signedIn))
            {
                this.insertJmgTmpEmplSignedIn(buffer);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJmgTmpEmplSignedIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>JmgTmpEmplSignedIn</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>JmgTmpEmplSignedIn</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('JmgTmpEmplSignedIn')
    ]
    public JmgTmpEmplSignedIn getJmgTmpEmplSignedIn()
    {
        select jmgTmpEmplSignedIn;
        return jmgTmpEmplSignedIn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJmgTmpEmplSignedIn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record into the <c>JmgTmpEmplSignedIn</c> temporary buffer
    /// </summary>
    /// <param name="_buffer">
    /// The buffer with values to insert.
    /// </param>
    private void insertJmgTmpEmplSignedIn(JmgTmpEmplSignedIn  _buffer)
    {
        jmgTmpEmplSignedIn.AbsenceDescription   = _buffer.AbsenceDescription;
        jmgTmpEmplSignedIn.EmplName             = _buffer.EmplName;
        jmgTmpEmplSignedIn.GroupCalcId          = _buffer.GroupCalcId;
        jmgTmpEmplSignedIn.ProfileId            = _buffer.ProfileId;
        jmgTmpEmplSignedIn.SignedIn             = _buffer.SignedIn;
        jmgTmpEmplSignedIn.SignInDate           = _buffer.SignInDate;
        jmgTmpEmplSignedIn.SignInTime           = _buffer.SignInTime;
        jmgTmpEmplSignedIn.SignOutDate          = _buffer.SignOutDate;
        jmgTmpEmplSignedIn.SignOutTime          = _buffer.SignOutTime;
        jmgTmpEmplSignedIn.Worker               = _buffer.Worker;
        jmgTmpEmplSignedIn.PersonnelNumber      = _buffer.PersonnelNumber;

        jmgTmpEmplSignedIn.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
        currentDate = JmgProfileSeconds::getSysDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentDate</Name>
				<Source><![CDATA[
        public JmgDate parmCurrentDate(JmgDate _currentDate = currentDate)
    {
        currentDate = _currentDate;
        return currentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the <c>JmgTmpEmplSignedIn</c> report.
    /// </summary>
    public void processReport()
    {
        Query                   query;
        JmgEmplSignedInContract contract;
        JmgEmplSignedInFilter   filter;

        contract            = this.parmDataContract() as JmgEmplSignedInContract;
        filter              = contract.parmFilter();
        query               = this.parmQuery();

        this.getDataFromQuery(query, currentDate, filter);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
