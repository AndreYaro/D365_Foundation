<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistRuleVendPaymentReqCharges</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccDistRuleVendPaymentReqCharges</c> class controls various accounting distribution
/// generation attributes that are used during the distribution of a vendor invoice line.
/// </summary>
[
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::Charge),
SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_VendorInvoice), BusinessEvent_VendorInvoice::VendorPaymentRequestForExpensedProducts, MonetaryAmount::ChargeVariance)
]
public class AccDistRuleVendPaymentReqCharges extends AccountingDistributionRule
{
    MarkupTrans                 markupTrans;
    MarkupTable                 markupTable;
    SourceDocumentLineItem      parentSourceDocumentLineItem;
    AccountingDistributionRule  parentAccountingDistributionRule;
    VendInvoiceLineMap          vendInvoiceLineMap;
    PurchLine                   purchLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseDiscountMainAccDimListProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a discount monetary amount specific main account dimension list provider can be used to
    /// derive main account dimension values that are required for classifying the financial consequences
    /// of a discount.
    /// </summary>
    /// <returns>
    /// true if the main account list provider can be used; otherwise, false.
    /// </returns>
    public boolean canUseDiscountMainAccDimListProvider()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoricalExchangeRateDate</Name>
				<Source><![CDATA[
    public HistoricalExchangeRateDate getHistoricalExchangeRateDate()
    {
        AssetBook assetBook;
        AssetGroupId assetGroupId;
        TransDate exchangeRateDate;
        boolean isFixedAssetAccount;
        VendorInvoiceLineSourceDocLineItem vendorInvoiceLineSourceDocLineItem;

        if (parentSourceDocumentLineItem is VendorInvoiceLineSourceDocLineItem)
        {
            vendorInvoiceLineSourceDocLineItem = parentSourceDocumentLineItem as VendorInvoiceLineSourceDocLineItem;
        }

        if (vendorInvoiceLineSourceDocLineItem)
        {
            if (VendorInvoiceLineSourceDocLineItem.parmAssetId()
                && VendorInvoiceLineSourceDocLineItem.parmValueModel())
            {
                assetBook = AssetBook::find(VendorInvoiceLineSourceDocLineItem.parmAssetId(),
                    VendorInvoiceLineSourceDocLineItem.parmValueModel());
            }

            assetGroupId = VendorInvoiceLineSourceDocLineItem.parmAssetGroupId();

            // If the line contains an asset, then capture the acquisition date of the asset.
            if (assetBook || assetGroupId)
            {
                isFixedAssetAccount = AssetLedgerAccounts::isFixedAssetAccount(
                    assetBook,
                    assetGroupId,
                    this.parmAccountingdistribution().LedgerDimension,
                    AssetTransType::Acquisition,
                    assetBook.currentOperationsTax());

                if (isFixedAssetAccount)
                {
                    exchangeRateDate = assetBook.exchangeRateDate();
                    if (!exchangeRateDate)
                    {
                        exchangeRateDate = VendorInvoiceLineSourceDocLineItem.parmAccountingDate();
                    }
                }
            }
        }

        return exchangeRateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting rule.
    /// </summary>
    protected void initialize()
    {
        VendInvoiceInfoTable                vendInvoiceInfoTable;
        ChargeSourceDocLineItem             chargeSourceDocumentLineItem;
        VendorInvoiceLineSourceDocLineItem  vendorInvoiceLineSourceDocumentLineItem;
        SourceDocumentLine                  sourceDocumentLine;
        SourceDocumentLineItem              sourceDocumentLineItemLocal;
        VendInvoiceJour                     vendInvoiceJour;

        sourceDocumentLineItemLocal         = this.parmSourceDocumentLineItem();
        sourceDocumentLine                  = sourceDocumentLineItem.parmSourceDocumentLine();
        if (sourceDocumentLine.SourceRelationType == tableNum(MarkupTrans))
        {
            chargeSourceDocumentLineItem = sourceDocumentLineItemLocal as ChargeSourceDocLineItem;
            Debug::assert(chargeSourceDocumentLineItem != null);
            markupTrans = chargeSourceDocumentLineItem.parmMarkupTrans();
            markupTable = chargeSourceDocumentLineItem.parmMarkupTable();

            switch (markupTrans.TransTableId)
            {
                case tableNum(VendInvoiceInfoTable):
                    vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(markupTrans.TransRecId);
                    parentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceInfoTable);
                    break;
                case tableNum(VendInvoiceInfoSubTable):
                    vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(markupTrans.TransRecId).vendInvoiceInfoTable();
                    parentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceInfoTable);
                    break;
                case tableNum(VendInvoiceInfoLine):
                    parentSourceDocumentLineItem = sourceDocumentLineItemLocal.parmParentSourceDocumentLineItem();
                    Debug::assert(parentSourceDocumentLineItem !=null);
                    break;
                case tableNum(VendInvoiceJour):
                    vendInvoiceJour = VendInvoiceJour::findRecId(markupTrans.TransRecId);
                    parentSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(vendInvoiceJour);
                    break;
                case tableNum(VendInvoiceTrans):
                    parentSourceDocumentLineItem = sourceDocumentLineItemLocal.parmParentSourceDocumentLineItem();
                    Debug::assert(parentSourceDocumentLineItem !=null);
                    break;
                default:
                    parentSourceDocumentLineItem = sourceDocumentLineItemLocal.parmParentSourceDocumentLineItem();
                    Debug::assert(parentSourceDocumentLineItem !=null);
            }

            // note a markuptrans attached to vendInvoiceInfoSubTable will have a SDL.ParentSDL that is the VendInvoiceInfoTable.SDL
            parentAccountingDistributionRule = AccountingDistributionRule::newRule(parentSourceDocumentLineItem, MonetaryAmount::ExtendedPrice);
        }
        else if ((sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine)) ||
            (sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceTrans)))
        {
            vendorInvoiceLineSourceDocumentLineItem = sourceDocumentLineItemLocal as VendorInvoiceLineSourceDocLineItem;
            Debug::assert(vendorInvoiceLineSourceDocumentLineItem != null);
            vendInvoiceLineMap = vendorInvoiceLineSourceDocumentLineItem.parmVendInvoiceLineMap();

            if (!vendInvoiceLineMap.isNonPO())
            {
                purchLine = vendInvoiceLineMap.purchLine();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType parmLedgerPostingType()
    {
        LedgerPostingType   ledgerPostingType;
        SourceDocumentLine  sourceDocumentLine;

        sourceDocumentLine  = this.parmSourceDocumentLineItem().parmSourceDocumentLine();

        if (sourceDocumentLine.SourceRelationType == tableNum(MarkupTrans))
        {
            switch (markupTable.CustType)
            {
                case MarkupType::LedgerAccount:
                    ledgerPostingType = markupTable.CustPosting;
                    break;

                case MarkupType::CustVend:
                    ledgerPostingType = markupTable.VendPosting;
                    break;

                case MarkupType::Item:
                    ledgerPostingType = parentAccountingDistributionRule.parmLedgerPostingType();
                    break;
            }
        }
        else if ((sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine)) ||
            (sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceTrans)))
        {
            switch (vendInvoiceLineMap.LineType)
            {
                case PurchInvoiceLineType::Standard:
                    if (purchLine && purchLine.StockedProduct)
                    {
                        ledgerPostingType = LedgerPostingType::PurchConsump;
                    }
                    else
                    {
                        ledgerPostingType = LedgerPostingType::PurchExpense;
                    }
                break;
            }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSide</Name>
				<Source><![CDATA[
    public DebitCredit parmSide()
    {
        DebitCredit side;

        if (this.parmAccountingdistribution().TransactionCurrencyAmount <= 0)
        {
            side = DebitCredit::Credit;
        }
        else
        {
            side = DebitCredit::Debit;
        }

        return side;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionAllocList</Name>
				<Source><![CDATA[
    public LedgerDimensionAllocationList parmLedgerDimensionAllocList()
    {
        LedgerDimensionAllocationList           returnedledgerDimensionAllocationList;
        VendInvoiceDistributionTemplate         vendInvoiceDistributionTemplate;
        VendInvoiceTableDistributionTemplate    vendInvoiceTableDistributionTemplate;
        LedgerDimensionAllocation               ledgerDimensionAllocation;
        RefRecId                                vendInvoiceLineTemplateRecId, vendInvoiceTableMarkupTransTemplateRecId;
        LedgerDimensionAccount                  ledgerDimensionAccount;
        VendInvoiceInfoTable                    vendInvoiceInfoTable;
        ChargeSourceDocLineItem                 chargeSourceDocumentLineItem;
        SourceDocumentLineItem                  sourceDocumentLineItemLocal = this.parmSourceDocumentLineItem();
        SourceDocumentLine                      sourceDocumentLine = sourceDocumentLineItemLocal.parmSourceDocumentLine();
        VendInvoiceInfoLine                     vendInvoiceInfoLine;

        if (sourceDocumentLine.SourceRelationType == tableNum(MarkupTrans))
        {
            chargeSourceDocumentLineItem = sourceDocumentLineItemLocal as ChargeSourceDocLineItem;
            switch (MarkupTrans.TransTableId)
            {
                case tableNum(VendInvoiceInfoSubTable):
                    vendInvoiceInfoTable = VendInvoiceInfoSubTable::findRecId(MarkupTrans.TransRecId).vendInvoiceInfoTable();
                    vendInvoiceTableMarkupTransTemplateRecId = chargeSourceDocumentLineItem.parmMarkUpTrans().VendInvoiceTableMarkupTrans;

                    while select LedgerDimension, Percentage from vendInvoiceTableDistributionTemplate
                        where vendInvoiceTableDistributionTemplate.VendInvoiceTableMarkupTrans == vendInvoiceTableMarkupTransTemplateRecId
                    {
                        if (!ledgerDimensionAllocationList)
                        {
                            ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                        }

                        ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(vendInvoiceTableDistributionTemplate.LedgerDimension, vendInvoiceInfoTable.DefaultDimension);

                        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimensionAccount, vendInvoiceTableDistributionTemplate.Percentage / 100, this.parmSide(), false);

                        ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                    }
                break;

            case tableNum(VendInvoiceInfoLine):
                    VendInvoiceInfoLine = VendInvoiceInfoLine::findRecId(MarkupTrans.TransRecId);
                    vendInvoiceLineTemplateRecId = chargeSourceDocumentLineItem.parmMarkUpTrans().VendInvoiceLineTemplate;

                    while select LedgerDimension, Percentage from vendInvoiceDistributionTemplate
                       where vendInvoiceDistributionTemplate.VendInvoiceLineTemplate == vendInvoiceLineTemplateRecId
                    {
                        if (!ledgerDimensionAllocationList)
                        {
                            ledgerDimensionAllocationList = LedgerDimensionAllocationList::construct();
                        }

                        ledgerDimensionAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(vendInvoiceDistributionTemplate.LedgerDimension, VendInvoiceInfoLine.DefaultDimension);

                        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimensionAccount, vendInvoiceDistributionTemplate.Percentage / 100, this.parmSide(), false);

                        ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
                    }
                    break;
            }
        }

        returnedledgerDimensionAllocationList = super();

        return returnedledgerDimensionAllocationList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>