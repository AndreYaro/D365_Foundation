<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseReportBarcodeCoverPage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvExpenseReportBarcodeCoverPage</c>class that is used for generating a bar code cover page
///    for the expense report
/// </summary>
/// <remarks>
///    It implements the <c>BarcodeCoverPage</c> class.
/// </remarks>
public class TrvExpenseReportBarcodeCoverPage extends BarcodeCoverPage
{
    #TrvReceiptsBarcodeCoverPage
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>additionalBarcodeStrings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets additional strings that will be barcoded on the bar code cover page.
    /// </summary>
    /// <returns>
    ///    An array of strings that will be bar coded on the bar code cover page.
    /// </returns>
    /// <remarks>
    ///    Based on the setup in the expense parameters form, the <c>UserId</c> value will be an additional
    ///    bar code on the bar code cover page.
    /// </remarks>
    Array additionalBarcodeStrings()
    {
        Array           barcodes = new Array(Types::String);
        TrvExpTable     expTable;
        SysUserId       userId;

        if (TrvParameters::find().IncludeUserIDInBarcode)
        {
            expTable = entityRecord;
            userId = DirPersonUserEx::worker2UserId(expTable.CreatingWorker);
            if (userId)
            {
                barcodes.value(1, userId);
            }
        }

        return barcodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeSetup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the bar code setup that must be used when generating the bar code for an expense report.
    /// </summary>
    /// <returns>
    ///    The bar code setup that must be used when generating the bar code for an expense report.
    /// </returns>
    /// <remarks>
    ///    The bar code setup has information about the bar code type, font, and size.
    /// </remarks>
    BarcodeSetup barcodeSetup()
    {
        return BarcodeSetup::find(TrvParameters::find().BarCodeSetupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>barCodeString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an unique identifying string for an expense report.
    /// </summary>
    /// <returns>
    ///    An unique identifying string for the expense report.
    /// </returns>
    /// <remarks>
    ///    The string will be bar coded on the bar code cover page. The bar code string contains a expense
    ///    number, personnel number, and the company.
    /// </remarks>
    BarCodeString barCodeString()
    {
        str         barcode;
        TrvExpTable expTable;

        expTable = entityRecord;
        if (expTable)
        {
            barcode = expTable.ExpNumber + #BarcodeStringSeparator
                    + HcmWorker::find(expTable.CreatingWorker).PersonnelNumber + #BarcodeStringSeparator
                    + CompanyInfo::findRecId(expTable.LegalEntity).DataArea;
        }

        return barcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldGroupForOverview</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the field group that will be used to display additional information about the bar code cover
    ///    page.
    /// </summary>
    /// <returns>
    ///    The name of the field group from the <c>TrvExpTable</c> table.
    /// </returns>
    fieldGroupName fieldGroupForOverview()
    {
        str fieldGroup = '';

        if (TrvParameters::find().IncludeOverviewInCoverPage)
        {
            fieldGroup = tableFieldgroupStr(TrvExpTable, BarcodeCoverPage);
        }

        return fieldGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instructions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the instructions that will be displayed on the bar code cover page.
    /// </summary>
    /// <returns>
    ///    The instructions that will be displayed on the bar code cover page.
    /// </returns>
    /// <remarks>
    ///    The instructions are generated for the expense report. They are in the language of the user, and
    ///    can be set up in the expense parameters setup form.
    /// </remarks>
    BarcodeCoverPageInstructions instructions()
    {
        // get the instructions in the user's language
        return TrvParametersTableHelper::userInstructions(TrvParameters::find());
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TrvExpTable _expTable)
    {
        entityRecord = _expTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the title for the bar code cover page.
    /// </summary>
    /// <returns>
    ///    The title for the bar code cover page.
    /// </returns>
    /// <remarks>
    ///    The title is generated for the expense report.
    /// </remarks>
    BarcodeCoverPageTitle title()
    {
        return "@Expense:ExpenseReportCoverPage1";
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvExpenseReportBarcodeCoverPage construct(TrvExpTable _exptable)
    {
        return new TrvExpenseReportBarcodeCoverPage(_exptable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEntityFromBarcodeString</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the entity ( the <c>TrvExpTable</c> or <c>HcmWorker</c> record) from the decoded bar code
    ///    string.
    /// </summary>
    /// <param name="_barcodeStr">
    ///    The string that is decoded from the bar code on the bar code cover page.
    /// </param>
    /// <returns>
    ///    The entity that the bar code identifies; otherwise, null.
    /// </returns>
    /// <remarks>
    ///    The imported receipts will get attached to this entity.Generally the <c>TrvExpTable</c> table will
    ///    be returned, but if the expense report was deleted after the bar code was generated, the
    ///    <c>HcmWorker</c> will be returned.
    /// </remarks>
    public static Common getEntityFromBarcodeString(str _barcodeStr)
    {
        TrvExpTable                    trvExpTable;
        HcmWorker                      hcmWorker;
        TrvExpNumber                   expNumber;
        HcmPersonnelNumberId           personnelNumber;
        dataAreaId                     dataAreaId;
        boolean                        convertReturnedContentToInt = false;

        [expNumber, personnelNumber, dataAreaId] = str2con(_barcodeStr, #BarcodeStringSeparator, convertReturnedContentToInt);

        select firstonly trvExpTable where trvExpTable.ExpNumber == expNumber &&
                                 trvExpTable.CreatingWorker == HcmWorker::findByPersonnelNumber(personnelNumber).RecId &&
                                 trvExpTable.LegalEntity == CompanyInfo::findDataArea(dataAreaId).RecId;
        if (!trvExpTable)
        {
            select firstonly hcmWorker where hcmworker.PersonnelNumber == personnelNumber;
        }

        if (trvExpTable)
        {
            return trvExpTable;
        }
        else
        {
            if (hcmWorker)
            {
                return hcmWorker;
            }
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>