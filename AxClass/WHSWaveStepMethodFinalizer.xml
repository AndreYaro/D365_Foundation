<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveStepMethodFinalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveStepMethodFinalizer</c> class, is the base class used to define the 
/// wave data finalize logic for the different wave steps.
/// </summary>
internal abstract class WHSWaveStepMethodFinalizer
{
    private WHSWaveId waveId;
    private WHSWaveExecutionID waveExecutionId;
    private WHSInstrumentationWaveStepMethodFinalizerPerformanceTask perfTask;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveId(WHSWaveId _waveId = waveId)
    {
        waveId = _waveId;
        return waveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveExecutionId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveExecutionID parmWaveExecutionId(WHSWaveExecutionID _waveExecutionId = waveExecutionId)
    {
        waveExecutionId = _waveExecutionId;
        return waveExecutionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerfTask</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInstrumentationWaveStepMethodFinalizerPerformanceTask parmPerfTask(WHSInstrumentationWaveStepMethodFinalizerPerformanceTask _perfTask = perfTask)
    {
        perfTask = _perfTask;
        return perfTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initFromParameters(WHSWaveId _waveId, WHSWaveExecutionID _waveExecutionId, WHSInstrumentationWaveStepMethodFinalizerPerformanceTask _perfTask)
    {
        if (_waveId == '' || _perfTask == null)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        this.parmWaveId(_waveId);
        this.parmWaveExecutionId(_waveExecutionId);
        this.parmPerfTask(_perfTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFinalizeStepMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the finalization for the wave step method.
    /// </summary>
    abstract internal void doFinalizeStepMethod()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finalize the wave step data.
    /// </summary>
    [Hookable(false)]
    internal void finalize()
    {
        this.checkTtsLevelIsNotZeroForMethod(funcName());

        this.doFinalizeStepMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTtsLevelIsNotZeroForMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tts level is not 0 and if it is throws an error.
    /// </summary>
    /// <param name = "_methodName">The name of the method whose tts level is checked.</param>
    private void checkTtsLevelIsNotZeroForMethod(str _methodName)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", _methodName));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>