<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for budget register data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaption("@Budget:BudgetDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterface(true)]
[DimensionStructureSynchronizationProviderV2Flight(classStr(BudgetDimensionStructureSynchronizationV2Flight))]
public class BudgetDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(BudgetDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(BudgetDimensionStructureSynchronizationProvider),
            staticMethodStr(BudgetDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(BudgetDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            BudgetTransactionLine budgetTransactionLine;
            BudgetTransactionHeader budgetTransactionHeader;
            DimensionAttributeValueCombination  dimAttrValueCombination;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            unchecked(Uncheck::XDS)
            {
                // Locate any LedgerDimension from unposted budgdet transaction lines
                select firstOnly RecId from budgetTransactionLine
                exists join budgetTransactionHeader
                    where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader
                        && budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                        && budgetTransactionHeader.PrimaryLedger == _ledger.RecId
                exists join LedgerDimensionType from dimAttrValueCombination
                    where dimAttrValueCombination.RecId == budgetTransactionLine.LedgerDimension
                        && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                        || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                exists join dimAttrValueGroupCombination
                    where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                exists join dimAttrValueGroup
                    where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                        && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;
            }

            if (budgetTransactionLine.RecId)
            {
                // The account structure is referenced by a budget transaction line
                checkFailed(strfmt("@Budget:BudgetTransactionLineLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                _ret.booleanResult(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                dimSynchronize;
            DimensionSynchronize                dimSynchronizeNotExists;
            DimensionSynchronizeLedger          dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            BudgetTransactionLine               budgetTransactionLine;
            BudgetTransactionHeader             budgetTransactionHeader;
            DimensionAttributeValueCombination  dimAttrValueCombination;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    // Extract LedgerDimension's from unposted budget lines
                    insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                        select LedgerDimension from budgetTransactionLine
                                group by budgetTransactionLine.LedgerDimension, dimSynchronizeLedger.DataArea, dimAttrValueCombination.LedgerDimensionType
                            join budgetTransactionHeader
                                where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                    budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                            join DataArea from dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetTransactionHeader.PrimaryLedger
                            join LedgerDimensionType from dimAttrValueCombination
                                where dimAttrValueCombination.RecId == budgetTransactionLine.LedgerDimension &&
                                    (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                    dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                            notexists join dimSynchronizeNotExists
                                where dimSynchronizeNotExists.OriginalLedgerDimension == budgetTransactionLine.LedgerDimension;

                    activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                    activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize        dimSynchronize;
            DimensionSynchronizeLedger  dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            BudgetTransactionLine       budgetTransactionLine;
            BudgetTransactionHeader     budgetTransactionHeader;
           
            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetDimensionStructureSynchronizationProvider, updateProviderReferences));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {

                    // Update unposted budget transactions with the new ledger dimension values
                    update_recordset budgetTransactionLine
                        setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                        join budgetTransactionHeader
                            where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                        join dimSynchronizeLedger
                            where dimSynchronizeLedger.Ledger == budgetTransactionHeader.PrimaryLedger
                        join dimSynchronize
                            where dimSynchronize.OriginalLedgerDimension == budgetTransactionLine.LedgerDimension &&
                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                    Info(strFmt("@Dimension:StructureSynchronizationProviderLog", budgetTransactionLine.rowCount(), tableId2PName(budgetTransactionLine.TableId)));

                    activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                    activityContext.addCustomProperty('WereRecordsUpdated', int2str(budgetTransactionLine.rowCount() > 0));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeDetail dimSynchronizeNotExists;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;
        DimensionAttributeValueCombination dimAttrValueCombination;
        RefRecId providerStatusTrackingId;
        DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetDimensionStructureSynchronizationProvider, insertDimensionSynchronize));
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
            unchecked(Uncheck::XDS)
            {
                select forupdate firstonly dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;

                    ttsbegin;

                    // Extract LedgerDimension's from unposted budget lines
                    insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                        select providerStatusTrackingId, LedgerDimension from budgetTransactionLine
                                group by budgetTransactionLine.LedgerDimension, dimSynchronizeLedger.DataArea, dimAttrValueCombination.LedgerDimensionType
                            join budgetTransactionHeader
                                where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                    budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                            join DataArea from dimSynchronizeLedger
                                where dimSynchronizeLedger.Ledger == budgetTransactionHeader.PrimaryLedger &&
                                    dimSynchronizeLedger.BatchJobId == batchJobId
                            join LedgerDimensionType from dimAttrValueCombination
                                where dimAttrValueCombination.RecId == budgetTransactionLine.LedgerDimension &&
                                    (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                    dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                            notexists join dimSynchronizeNotExists
                                where dimSynchronizeNotExists.OriginalLedgerDimension == budgetTransactionLine.LedgerDimension &&
                                    dimSynchronizeNotExists.ProviderStatusTrackingId == providerStatusTrackingId;

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();

                    ttscommit;
                }
                else
                {
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;
                }

                activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronizeV2');
                activityContext.addCustomProperty('WereRecordsInserted', int2str(dimSynchronize.rowCount() > 0));
            }
        }
        return providerStatusTrackingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
        BudgetTransactionLine budgetTransactionLine;
        BudgetTransactionHeader budgetTransactionHeader;
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
           
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(BudgetDimensionStructureSynchronizationProvider, updateProviderReferences));
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            unchecked(Uncheck::XDS)
            {
                // Skip event handlers to avoid falling back to row-by-row operation.
                budgetTransactionLine.skipEvents(true);
                budgetTransactionLine.skipPostLoad(true);

                try
                {
                    ttsbegin;

                    // Update unposted budget transactions with the new ledger dimension values
                    update_recordset budgetTransactionLine
                        setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                        join budgetTransactionHeader
                            where budgetTransactionHeader.RecId == budgetTransactionLine.BudgetTransactionHeader &&
                                budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft
                        join dimSynchronizeLedger
                            where dimSynchronizeLedger.Ledger == budgetTransactionHeader.PrimaryLedger &&
                                dimSynchronizeLedger.BatchJobId == batchJobId
                        join dimSynchronize
                            where dimSynchronize.OriginalLedgerDimension == budgetTransactionLine.LedgerDimension &&
                                dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                    ttscommit;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() > MaxRetryCount)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }

                Info(strFmt("@Dimension:StructureSynchronizationProviderLog", budgetTransactionLine.rowCount(), tableId2PName(budgetTransactionLine.TableId)));

                activityContext.addCustomProperty('MethodName', 'updateProviderReferencesV2');
                activityContext.addCustomProperty('WereRecordsUpdated', int2str(budgetTransactionLine.rowCount() > 0));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>