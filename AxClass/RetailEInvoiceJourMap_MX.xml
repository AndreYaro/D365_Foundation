<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEInvoiceJourMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailEInvoiceJourMap_MX</c> class extends <c>EInvoiceJourBaseMap_MX</c> with implementation of Retail EInvoice support for MX.
/// </summary>
public class RetailEInvoiceJourMap_MX extends EInvoiceJourBaseMap_MX
{
    private RetailEInvoiceAggregatedStatement_MX aggregatedStatement;
    RetailStatementJour statementJour;
    RetailStatementJourExt statementJourExt;
    RetailStoreTable storeTable;
    List journalLines;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAmountToLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds tax amount to the corresponding tax list.
    /// </summary>
    protected void addTaxAmountToLists()
    {
        TmpEInvoiceTaxTrans_MX tmpTaxTrans;
        RecordInsertList ril = new RecordInsertList(tableNum(TmpEInvoiceTaxTrans_MX), true, true, true, false, true, tmpTaxTrans);
        QueryRun queryRun = new QueryRun(this.getTaxTransBaseQuery());
        
        while (queryRun.next())
        {
            RetailTransactionTaxTrans transactionTaxTrans = queryRun.get(tableNum(RetailTransactionTaxTrans));
            TaxTable taxTable = queryRun.get(tableNum(TaxTable));
            RetailTransSalesTransAmountExclPrepView transactionSalesTrans = queryRun.get(tableNum(RetailTransSalesTransAmountExclPrepView));

            TaxQty taxBaseQty;
            TaxBaseCur taxBaseAmount;
            TaxValue taxValue;

            if (taxTable.TaxBase == TaxBaseType::AmountByUnit)
            {
                taxBaseQty = transactionSalesTrans.qty;
                taxValue = TaxData::find(transactionTaxTrans.TaxCode, transactionSalesTrans.transDate, 0).TaxValue;
            }
            else
            {
                taxBaseAmount = transactionTaxTrans.TaxBaseAmount ?  transactionTaxTrans.TaxBaseAmount : -1 * transactionSalesTrans.NetAmount;
                taxValue = TaxData::find(transactionTaxTrans.TaxCode, transactionSalesTrans.transDate, taxBaseAmount).TaxValue;
            }

            tmpTaxTrans.SourceTaxAmountCur = transactionTaxTrans.Amount;
            tmpTaxTrans.SourceBaseAmountCur = taxBaseAmount;
            tmpTaxTrans.TaxBaseQty = taxBaseQty;
            tmpTaxTrans.TaxValue = taxValue;
            tmpTaxTrans.SourceTableId = tableNum(RetailTransactionTable);
            tmpTaxTrans.SourceRecId = transactionSalesTrans.RetailTransactionTableRecId;
            tmpTaxTrans.OriginRecId = transactionTaxTrans.RecId;
            tmpTaxTrans.TaxType_MX = taxTable.TaxType_MX;
            tmpTaxTrans.TaxCode = transactionTaxTrans.TaxCode;
            tmpTaxTrans.NegativeTax = taxTable.NegativeTax;

            ril.add(tmpTaxTrans);
        }

        ril.insertDatabase();

        if (RetailRecalculateRoundingOfTaxBaseAmountsFeatureExposure_MX::isEnabled() && EInvoiceCFDIParameters_MX::find().RetailRecalculateRoundingOfTaxBaseAmount)
        {
            RetailEinvoiceCFDITaxAdjuster_MX::adjust(tmpTaxTrans, this.currencyCode());
        }

        while select tmpTaxTrans
        {
            // Create virtual taxTrans
            TaxTrans taxTrans;
            taxTrans.SourceTaxAmountCur = tmpTaxTrans.SourceTaxAmountCur;
            taxTrans.SourceBaseAmountCur = tmpTaxTrans.taxBaseAmountRegulated();
            taxTrans.TaxBaseQty = tmpTaxTrans.TaxBaseQty;
            taxTrans.TaxValue = tmpTaxTrans.TaxValue;
            taxTrans.SourceTableId = tableNum(RetailTransactionTable);
            taxTrans.SourceRecId = tmpTaxTrans.SourceRecId;
            taxTrans.RecId = tmpTaxTrans.OriginRecId;
            taxTrans.TaxType_MX = tmpTaxTrans.TaxType_MX;
            taxTrans.TaxCode = tmpTaxTrans.TaxCode;

            container keyCon = [taxTrans.SourceTableId, taxTrans.SourceRecId];
            List valueList = new List(Types::Record);

            if (tmpTaxTrans.NegativeTax)
            {
                positiveTaxAmountList.addEnd(taxTrans);

                if (positiveTaxAmountMap.exists(keyCon))
                {
                    valueList = positiveTaxAmountMap.lookup(keyCon);
                }

                valueList.addEnd(taxTrans);

                positiveTaxAmountMap.insert(keyCon, valueList);
            }
            else
            {
                negativeTaxAmountList.addEnd(taxTrans);

                if (negativeTaxAmountMap.exists(keyCon))
                {
                    valueList = negativeTaxAmountMap.lookup(keyCon);
                }

                valueList.addEnd(taxTrans);

                negativeTaxAmountMap.insert(keyCon, valueList);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return storeTable.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDateTime</Name>
				<Source><![CDATA[
    public utcdatetime documentDateTime()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscMST</Name>
				<Source><![CDATA[
    public SalesEndDiscAmount endDiscMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    public ExchRate exchangeRate()
    {
        return ExchangeRateHelper::exchRate(this.currencyCode(), this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> record of the posted document.
    /// </summary>
    /// <returns>
    /// Null.
    /// </returns>
    /// <remarks>
    /// There can be multiple customers in retail statement, and <c>CustTable</c> record is not specified because of that.
    /// </remarks>
    public CustTable getCustTable()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransBaseQuery</Name>
				<Source><![CDATA[
    protected Query getTaxTransBaseQuery(
        TaxType_MX _taxType         = TaxType_MX::Blank,
        RefTableId _sourceTableId   = 0,
        RefRecId   _sourceRecId     = 0)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsTransactionTaxTrans = query.addDataSource(tableNum(RetailTransactionTaxTrans));
        qbdsTransactionTaxTrans.addRange(fieldNum(RetailTransactionTaxTrans, TaxBaseAmount)).value(SysQuery::valueNot(0));

        QueryBuildDataSource qbdsTaxTable = qbdsTransactionTaxTrans.addDataSource(tableNum(TaxTable));
        qbdsTaxTable.relations(true);
        qbdsTaxTable.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsTransactionSalesTrans = qbdsTransactionTaxTrans.addDataSource(tableNum(RetailTransSalesTransAmountExclPrepView));

        if (aggregatedStatement)
        {
            QueryBuildDataSource qbdsAggregatedStatementRelation = qbdsTransactionSalesTrans.addDataSource(tableNum(RetailEInvoiceAggregatedStatementRelation_MX));
            qbdsAggregatedStatementRelation.addRange(fieldNum(RetailEInvoiceAggregatedStatementRelation_MX, AggregatedStatementId)).value(queryValue(aggregatedStatement.AggregatedStatementId));
            qbdsAggregatedStatementRelation.addLink(fieldNum(RetailTransSalesTransAmountExclPrepView, StatementId), fieldNum(RetailEInvoiceAggregatedStatementRelation_MX, StatementId));
            qbdsAggregatedStatementRelation.joinMode(JoinMode::ExistsJoin);
        }
        else
        {
            qbdsTransactionSalesTrans.addRange(fieldNum(RetailTransSalesTransAmountExclPrepView, StatementId)).value(queryValue(statementJour.statementId));
        }

        qbdsTransactionSalesTrans.addLink(fieldNum(RetailTransactionTaxTrans, TransactionId), fieldNum(RetailTransSalesTransAmountExclPrepView, TransactionId));
        qbdsTransactionSalesTrans.addLink(fieldNum(RetailTransactionTaxTrans, StoreId), fieldNum(RetailTransSalesTransAmountExclPrepView, Store));
        qbdsTransactionSalesTrans.addLink(fieldNum(RetailTransactionTaxTrans, TerminalId), fieldNum(RetailTransSalesTransAmountExclPrepView, Terminal));
        qbdsTransactionSalesTrans.addLink(fieldNum(RetailTransactionTaxTrans, SaleLineNum), fieldNum(RetailTransSalesTransAmountExclPrepView, LineNum));
        qbdsTransactionSalesTrans.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource qbdsEInvoiceTrans = qbdsTransactionSalesTrans.addDataSource(tableNum(EInvoiceTrans_MX));
        qbdsEInvoiceTrans.addRange(fieldNum(EInvoiceTrans_MX, RefEInvoiceJourRecId)).value(queryValue(eInvoiceJour.RecId));
        qbdsEInvoiceTrans.addRange(fieldNum(EInvoiceTrans_MX, RefTableId)).value(queryValue(tableNum(RetailTransactionTable)));
        qbdsEInvoiceTrans.addLink(fieldNum(RetailTransSalesTransAmountExclPrepView, RetailTransactionTableRecId), fieldNum(EInvoiceTrans_MX, RefRecId));
        qbdsEInvoiceTrans.joinMode(JoinMode::ExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransQuerySum</Name>
				<Source><![CDATA[
    protected Query getTaxTransQuerySum(
        TaxType_MX _taxType         = TaxType_MX::Blank,
        RefTableId _sourceTableId   = 0,
        RefRecId   _sourceRecId     = 0)
    {
        Query query;
        QueryBuildDataSource qbdsTransactionTaxTrans;
        QueryBuildDataSource qbdsTaxTable;
        
        query = this.getTaxTransBaseQuery();
        qbdsTransactionTaxTrans = query.dataSourceTable(tableNum(RetailTransactionTaxTrans));
        
        qbdsTransactionTaxTrans.addSelectionField(fieldNum(RetailTransactionTaxTrans, Amount), SelectionField::Sum);
        
        if (_taxType != TaxType_MX::Blank )
        {
            qbdsTaxTable = query.dataSourceTable(tableNum(TaxTable));
            qbdsTaxTable.addRange(fieldNum(TaxTable, TaxType_MX)).value(queryValue(_taxType));
        }
        
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes tax amount containers and emitent address from statement store.
    /// </summary>
    public void init()
    {
        negativeTaxAmountMap = new Map(Types::Container, Types::Class);
        positiveTaxAmountMap = new Map(Types::Container, Types::Class);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>EInvoiceJour_MX</c> record.
    /// </summary>
    /// <param name="_eInvoiceJour">
    /// The electronic invoice.
    /// </param>
    protected void initEInvoice(EInvoiceJour_MX _eInvoiceJour)
    {
        if (eInvoiceJour == null)
        {
            eInvoiceJour = _eInvoiceJour;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatementJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance variables.
    /// </summary>
    /// <param name = "_statementJour">
    /// The <c>RetailStatementJour</c> record that is used.
    /// </param>
    protected void initStatementJour(RetailStatementJour _statementJour)
    {
        statementJour = _statementJour;
        statementJourExt = RetailStatementJourExt::find(statementJour.statementId);
        storeTable = RetailStoreTable::find(statementJour.storeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    public CustVendAC invoiceAccount()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    public date invoiceDate()
    {
        return aggregatedStatement ? aggregatedStatement.PostedDate : statementJour.postedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    public InvoiceId invoiceId()
    {
        return aggregatedStatement ? aggregatedStatement.AggregatedStatementId : statementJour.statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceRFC</Name>
				<Source><![CDATA[
    public Rfc_MX invoiceRFC()
    {
        return EInvoiceCFDIParameters_MX::find().getRetailInvoiceRFC();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName</Name>
				<Source><![CDATA[
    public SATRegistrationName_MX invoicingName()
    {
        return EInvoiceCFDIParameters_MX::find().getRetailInvoicingName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    protected List journalLines()
    {
        EInvoiceTrans_MX invoiceTrans;
        RetailTransactionTable retailTransactionTable;
        
        if (!journalLines)
        {
            journalLines = new List(Types::Record);

            while select retailTransactionTable
                exists join invoiceTrans
                    where invoiceTrans.RefRecId == retailTransactionTable.RecId
                        && invoiceTrans.RefTableId == retailTransactionTable.TableId
                        && invoiceTrans.RefEInvoiceJourRecId == eInvoiceJour.RecId
            {
                journalLines.addEnd(retailTransactionTable);
            }
        }
        
        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddressRecId deliveryPostalAddressRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    protected LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    public TableId refTableId()
    {
        return aggregatedStatement ? aggregatedStatement.TableId : statementJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTransList</Name>
				<Source><![CDATA[
    public List markupTransList()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>methodOfPayment</Name>
				<Source><![CDATA[
    public Description methodOfPayment()
    {
        PaymentType_MX paymentType = CustPaymModeTable::find(eInvoiceJour.PaymMode).PaymentType_MX;
        if (!paymentType)
        {
            paymentType = PaymentType_MX::Other;
        }

        int paymentTypeValue = enum2int(paymentType);
        Description paymentTypeStr = int2Str(paymentTypeValue);

        if (paymentTypeValue < 10)
        {
            paymentTypeStr = '0' + paymentTypeStr;
        }

        return paymentTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfPayments</Name>
				<Source><![CDATA[
    public PositiveNumber numberOfPayments()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refNum</Name>
				<Source><![CDATA[
    public RefNum refNum()
    {
        return RefNum::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    public SalesType salesType()
    {
        return SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serieSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets serie siffix.
    /// </summary>
    /// <returns>
    /// I for sales, E for return.
    /// </returns>
    public str serieSuffix()
    {
        return EInvoiceJourBaseMap_MX::eInvoiceJournalType(eInvoiceJour.isReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
    public Amount subTotal()
    {
        return this.netAmountIncludeDiscount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>netAmountIncludeDiscount</Name>
				<Source><![CDATA[
    private Amount netAmountIncludeDiscount()
    {
        return aggregatedStatement ? -1 * aggregatedStatement.subTotalExclPrepayment(eInvoiceJour.isReturn) : -1 * statementJourExt.subTotalExclPrepayment(eInvoiceJour.isReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax amount field id.
    /// </summary>
    /// <returns>
    /// Tax amount field id.
    /// </returns>
    protected FieldId taxAmountField()
    {
        return fieldNum(RetailTransactionTaxTrans, Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>termOfPaymDesc</Name>
				<Source><![CDATA[
    public Description termOfPaymDesc()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    public AmountCur totalAmount()
    {
        return aggregatedStatement ? -1 * aggregatedStatement.salesTotalExclPrepayment(eInvoiceJour.IsReturn) : -1 * statementJourExt.salesTotalExclPrepayment(eInvoiceJour.IsReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total discount amount of the posted retail receipts.
    /// </summary>
    /// <returns>Total discount amount.</returns>
    public DiscAmount totalDiscountAmount()
    {
        return this.totalDiscountAmountWithoutTaxExcludePrepayments();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountExcludePrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount exclude prepayments.
    /// </summary>
    /// <returns>
    /// Tax total discount amount exclude prepayments.
    /// </returns>
    private DiscAmount totalDiscountAmountExcludePrepayments()
    {
        return aggregatedStatement ? aggregatedStatement.discAmountExclPrepayment(eInvoiceJour.IsReturn) : statementJourExt.discAmountExclPrepayment(eInvoiceJour.IsReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountWithoutTaxExcludePrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount without tax exclude prepayments.
    /// </summary>
    /// <returns>
    /// Tax total discount amount without tax exclude prepayments.
    /// </returns>
    private DiscAmount totalDiscountAmountWithoutTaxExcludePrepayments()
    {
        return aggregatedStatement ? aggregatedStatement.discAmountWithoutTaxExclPrepayment(eInvoiceJour.IsReturn) : statementJourExt.discAmountWithoutTaxExclPrepayment(eInvoiceJour.IsReturn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountMST</Name>
				<Source><![CDATA[
    public DiscAmount totalDiscountAmountMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    public RefRecId refRecId()
    {
        return aggregatedStatement ? aggregatedStatement.RecId : statementJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountRegular</Name>
				<Source><![CDATA[
    public TaxAmount totalTaxAmountRegular(
            TaxType_MX _taxType         = TaxType_MX::Blank,
            RefTableId _sourceTableId   = 0,
            RefRecId   _sourceRecId     = 0)
    {
        Query query;
        QueryRun queryRun;
        RetailTransactionTaxTrans transactionTaxTrans;
        TaxAmountCur totalTaxAmout;
        
        query = this.getTaxTransQuerySum(_taxType);
        query.dataSourceTable(tableNum(TaxTable)).addRange(fieldNum(TaxTable, NegativeTax)).value(queryValue(NoYes::No));
        
        queryRun = new QueryRun(query);
        
        while (queryRun.next())
        {
            transactionTaxTrans = queryRun.get(tableNum(RetailTransactionTaxTrans));
            totalTaxAmout += transactionTaxTrans.(this.taxAmountField());
        }
        
        return totalTaxAmout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountRetained</Name>
				<Source><![CDATA[
    public TaxAmount totalTaxAmountRetained(
            TaxType_MX _taxType         = TaxType_MX::Blank,
            RefTableId _sourceTableId   = 0,
            RefRecId   _sourceRecId     = 0)
    {
        Query query;
        QueryRun queryRun;
        RetailTransactionTaxTrans transactionTaxTrans;
        TaxAmountCur totalTaxAmout;
        
        query = this.getTaxTransQuerySum(_taxType);
        query.dataSourceTable(tableNum(TaxTable)).addRange(fieldNum(TaxTable, NegativeTax)).value(queryValue(NoYes::Yes));
        
        queryRun = new QueryRun(query);
        
        while (queryRun.next())
        {
            transactionTaxTrans = queryRun.get(tableNum(RetailTransactionTaxTrans));
            totalTaxAmout += transactionTaxTrans.(this.taxAmountField());
        }
        
        return totalTaxAmout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    public Voucher voucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailEInvoiceJourMap_MX</c> class.
    /// </summary>
    /// <param name="_statementJour">
    /// The <c>RetailStatementJour</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailEInvoiceJourMap_MX</c>.
    /// </returns>
    public static RetailEInvoiceJourMap_MX construct(RetailStatementJour _statementJour)
    {
        RetailEInvoiceJourMap_MX invoiceMap = new RetailEInvoiceJourMap_MX();

        invoiceMap.initStatementJour(_statementJour);

        return invoiceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromAggregatedStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailEInvoiceJourMap_MX</c> class.
    /// </summary>
    /// <param name="_aggregatedStatement">
    /// The <c>RetailEInvoiceAggregatedStatement_MX</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailEInvoiceJourMap_MX</c>.
    /// </returns>
    internal static RetailEInvoiceJourMap_MX constructFromAggregatedStatement(RetailEInvoiceAggregatedStatement_MX _aggregatedStatement)
    {
        RetailEInvoiceJourMap_MX invoiceMap = new RetailEInvoiceJourMap_MX();
        invoiceMap.initStatementJour(_aggregatedStatement.getLastPostedStatementJour());
        invoiceMap.aggregatedStatement = _aggregatedStatement;

        return invoiceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>RetailEInvoiceJourMap_MX</c> class.
    /// </summary>
    /// <param name="_eInvoiceJour">
    /// The <c>EInvoiceJour_MX</c> record that will be used as the data source.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailEInvoiceJourMap_MX</c>.
    /// </returns>
    public static RetailEInvoiceJourMap_MX constructFromEInvoice(EInvoiceJour_MX _eInvoiceJour)
    {
        RetailEInvoiceJourMap_MX invoiceMap = _eInvoiceJour.RefTableId == tableNum(RetailEInvoiceAggregatedStatement_MX)
            ? RetailEInvoiceJourMap_MX::constructFromAggregatedStatement(RetailEInvoiceAggregatedStatement_MX::findRecId(_eInvoiceJour.RefRecId))
            : RetailEInvoiceJourMap_MX::construct(RetailStatementJour::findRecId(_eInvoiceJour.RefRecId));

        invoiceMap.initEInvoice(_eInvoiceJour);

        return invoiceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emitentPostalAddress</Name>
				<Source><![CDATA[
    internal LogisticsPostalAddress emitentPostalAddress()
    {
        LogisticsPostalAddress postalAddress = RetailStoreTable::findInventLocation(storeTable.RecId).logisticsPostalAddress();

        return postalAddress ? postalAddress : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTimeZone</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the timezone applicable for the current <c>EInvoicejour_MX</c> record.
    /// </summary>
    /// <returns>The timeZone applicable for the current <c>EInvoicejour_MX</c> record.</returns>
    protected TimeZone documentTimeZone()
    {
        return RetailEInvoicePostService_MX::getEInvoiceTimezone(statementJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recipientTaxRegimeCode</Name>
				<Source><![CDATA[
    internal EInvoiceExtCodeId_MX recipientTaxRegimeCode()
    {
        return EInvoiceCFDIParameters_MX::find().getRetailRecipientTaxRegimeCode();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>