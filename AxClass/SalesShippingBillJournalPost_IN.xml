<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesShippingBillJournalPost_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesShippingBillJournalPost_IN</c> class is used to post the sales shipping bill journal.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::ShippingBill_IN)]
class SalesShippingBillJournalPost_IN
extends FormletterJournalPost
{
    SalesParmTable          salesParmTable;
    SalesParmLine           salesParmLine;

    CustomsShippingBillJour_IN      customsShippingBillJour;
    CustomsShippingBillTrans_IN     customsShippingBillTrans;
    SalesLine               salesLine;
    SalesTable              salesTable;
    CustomsExportOrderTable_IN  customsExportOrderTable;
    CustomsExportOrderLine_IN   customsExportOrderLine;

    SalesTotals             salesTotals;

    SalesQty                updateNow;
    SalesQty                invoiceUpdatedOnly;
    List                    journalLines;
    AmountCur               lineValue;
    InventMovement          inventMovement;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostToInventory</Name>
				<Source><![CDATA[
    protected boolean canPostToInventory()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePostingLine</Name>
				<Source><![CDATA[
    protected void checkBeforePostingLine()
    {
        if (TaxParameters::isCustomsEnable_IN())
        {
            this.checkCustomsFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomsFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the customs fields.
    /// </summary>
    private void checkCustomsFields()
    {
        EximSalesParmLine_IN eximSalesParmLine = EximSalesParmLine_IN::findBySalesParmLineRecId(salesParmLine.RecId);

        if (eximSalesParmLine)
        {
            if (TaxParameters::isEximIncentiveSchemEnable_IN() && !eximSalesParmLine.CustomsTariffCodeTable)
            {
                throw error(strfmt("@SYS26332", fieldpname(EximSalesParmLine_IN, CustomsTariffCodeTable)));
            }
            else if (!eximSalesParmLine.EximPorts)
            {
                throw error(strfmt("@SYS26332", fieldpname(EximSalesParmLine_IN, EximPorts)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultLedgerTransactionText</Name>
				<Source><![CDATA[
    protected LedgerTransTxt defaultLedgerTransactionText()
    {
        return (this.creditNote()  ? LedgerTransTxt::SalesCreditNoteLedger : LedgerTransTxt::SalesInvoiceLedger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFullyShippingBilled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes fully shipping bill.
    /// </summary>
    protected void deleteFullyShippingBilled()
    {
        SalesId                 previousSalesId = '';
        SalesId                 currentSalesId = '';
        CustomsExportOrderTable_IN  customsExportOrderTableLoc;

        if (!journalLines.elements())
            return;

        ListEnumerator le = journalLines.getEnumerator();

        if (SalesParameters::find().DeleteHeading == NoYes::Yes)
        {
            while (le.moveNext())
            {
                currentSalesId = this.getOrigSalesId(le);

                if (currentSalesId != previousSalesId)
                {
                    salesTable = SalesTable::find(currentSalesId, true);

                    if (salesTable && salesTable.CustomsShippingBill_IN == NoYes::Yes &&  salesTable.validateDelete())
                    {
                        delete_from customsExportOrderTableLoc
                            where customsExportOrderTableLoc.SalesId == salesTable.SalesId;

                        salesTable.delete();
                    }
                }

                previousSalesId = currentSalesId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    protected DocumentStatus  documentStatus()
    {
        return DocumentStatus::ShippingBill_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigSalesId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original sales id information.
    /// </summary>
    /// <param name="_le">
    /// The instance of the <c>ListEnumerator</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesIdOrig</c> class.
    /// </returns>
    protected SalesIdOrig getOrigSalesId(ListEnumerator _le)
    {
        CustomsShippingBillTrans_IN localCustomsShippingBillTrans = _le.current();

        return localCustomsShippingBillTrans.OrigSalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales line information.
    /// </summary>
    /// <param name="_le">
    /// The instance of the <c>ListEnumerator</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesLine</c> class.
    /// </returns>
    protected SalesLine getSalesLine(ListEnumerator _le)
    {
        CustomsShippingBillTrans_IN localCustomsShippingBillTrans = _le.current();

        salesLine = SalesLine::find(localCustomsShippingBillTrans.SalesId, true);

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    protected Num getVoucher()
    {
        return customsShippingBillJour.LedgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        customsExportOrderTable      = customsShippingBillJour.customsExportOrderTable();
        salesTable = SalesTable::find(customsExportOrderTable.SalesId);
        this.initTotals();
        super();
        journalLines = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormletterProvider</Name>
				<Source><![CDATA[
    protected void initFormletterProvider()
    {
        formletterProvider = FormletterProvider::newFormletterType(FormletterType::Sales, salesTable);
        formletterProvider.parmSkipCreditMaxCheck(this.skipCreditMaxCheck());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        super();

        salesLine = SalesLine::findInventTransId(customsShippingBillTrans.InventTransId, true);

        salesParmLine.clear();

        select firstonly salesParmLine
            where salesParmLine.ParmId == salesParmTable.ParmId &&
                  salesParmLine.TableRefId == salesParmTable.TableRefId &&
                  salesParmLine.SalesLineRecId == salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the sales total information.
    /// </summary>
    protected void initTotals()
    {
        if (this.parmTotals())
        {
            salesTotals = this.parmTotals() as SalesTotals;
        }
        else
        {
            salesTotals     = SalesTotals::construct(salesParmTable, any2Enum(this.parmSpecQty()), this.parmSumBy(), customsShippingBillJour.ParmId, this.parmSumOrderId(), this.documentStatus());
        }
        salesTotals.prepareTotalAmountCalculation();
        salesTotals.prepareQuantitiesCalculation();

        this.tax(salesTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransactionTxt</Name>
				<Source><![CDATA[
    protected TransactionTxt initTransactionTxt(LedgerTransTxt  _ledgerTransTxt)
    {
        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType          (_ledgerTransTxt);
        transactionTxt.setVoucher       (customsShippingBillJour.LedgerVoucher);
        transactionTxt.setFormLetter    (customsShippingBillJour.InvoiceId);
        transactionTxt.setKey1          (customsShippingBillJour.SalesId);
        transactionTxt.setKey2          (customsShippingBillJour.InvoiceAccount);
        transactionTxt.setKey3          (CustTable::groupId(customsShippingBillJour.InvoiceAccount));

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    protected Common journalLine(Common _journalLine = customsShippingBillTrans)
    {
        customsShippingBillTrans = _journalLine as CustomsShippingBillTrans_IN;
        journalLines.addEnd(customsShippingBillTrans);
        return customsShippingBillTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    protected tableId journalLineTableId()
    {
        return tablenum(CustomsShippingBillTrans_IN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerRefRecid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger reference rec id.
    /// </summary>
    /// <returns>
    /// The ledger reference rec id.
    /// </returns>
    protected recId ledgerRefRecid()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerRefTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger reference table id.
    /// </summary>
    /// <returns>
    /// The ledger reference table id.
    /// </returns>
    protected tableId ledgerRefTableId()
    {
        return salesLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = customsShippingBillJour)
    {
        customsShippingBillJour = _journalTable as CustomsShippingBillJour_IN;

        return customsShippingBillJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;

        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInventory</Name>
				<Source><![CDATA[
    protected void postInventory()
    {
        inventMovement = InventMovement::construct(salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournalPost</Name>
				<Source><![CDATA[
    public void postJournalPost()
    {
        super();

        //Identifies if shipping bill is completely done.
        if (CustomsShippingBillTrans_IN::checkSalesTableForUpdate(customsShippingBillJour))
        {
            ttsbegin;
                SalesTable salesTableLoc = SalesTable::find(salesParmTable.SalesId, true);
                salesTableLoc.CustomsShippingBill_IN = NoYes::Yes;
                salesTableLoc.update();
            ttscommit;
        }
        this.deleteFullyShippingBilled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup data on journal.
    /// </summary>
    /// <param name="_salesTableMarkup">
    /// The sales table markup information.
    /// </param>
    protected void postMarkupOnJour(SalesTable _salesTableMarkup)
    {
        markup.postInvoice(1,
                           salesTotals.totalOrderBalance(_salesTableMarkup.RecId),
                           _salesTableMarkup,
                           ledgerVoucher,
                           _salesTableMarkup.DefaultDimension,
                           customsShippingBillJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    protected void postMarkupOnTrans()
    {
        // <GTE>
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
        // </GTE>
            markup.postInvoice(updateNow,
                               lineValue,
                               salesLine,
                               ledgerVoucher,
                               salesLine.DefaultDimension,
                               customsShippingBillTrans,
                               salesLine.interCompanyLineAmount(updateNow, customsShippingBillTrans.ShippingBillDate, tax));
        // <GTE>
        }
        // </GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnProforma</Name>
				<Source><![CDATA[
    protected boolean postTaxOnProforma()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectFormletterJournalTrans</Name>
				<Source><![CDATA[
    protected void selectFormletterJournalTrans()
    {
        select forupdate formletterJournalTrans
            where formletterJournalTrans.JournalId           == formletterJournal.JournalId
               && formletterJournalTrans.OrderId             == formletterJournal.OrderId
               && formletterJournalTrans.TransDate           == formletterJournal.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    protected Common sourceLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    protected Common sourceTable()
    {
        return customsExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    protected Object tradeCalcTax()
    {
        return SalesCalcTax::construct(this.parmJournalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    protected TransTxt  transactionLogTxt()
    {
        return "@GLS5771";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::SalesCustomsShippingBill_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    TransDate  updateDate()
    {
        return customsShippingBillJour.ShippingBillDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesShippingStat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the sales shipping stat.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The sales parm table.
    /// </param>
    protected void  updateSalesShippingStat(SalesParmTable _salesParmTable)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    protected void updateSourceLine()
    {
        SalesLineType salesLineType = salesLine.type();

        salesLineType.updateSalesLine(inventMovement ? inventMovement.transIdSum() : null);

        if (salesTable.InterCompanyCompanyId)
        {
            salesLineType.interCompanyResetDeliverNow();
            if (!salesTable.InterCompanyDirectDeliveryOrig)
            {
                InterCompanyTransferInventDim::doTransfer(salesLine.DataAreaId,
                                                            salesLine.InventTransId,
                                                            salesTable.InterCompanyCompanyId,
                                                            salesLine.InterCompanyInventTransId,
                                                            salesTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External),
                                                            StatusIssue::Sold,
                                                            customsShippingBillJour.InvoiceId);
            }
        }
        salesLine.doUpdate();

        if (salesLine.LineDeliveryType == LineDeliveryType::DeliveryLine)
        {
            SalesLine orderLine = SalesDeliverySchedule::findOrderLineForDeliveryLine(salesLine.InventTransId, true);
            orderLine.setSalesStatus();
            orderLine.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new ()
    {
        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            throw error(strfmt("@SYS19306",funcname()));
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesShippingBillJournalPost_IN construct()
    {
        return new SalesShippingBillJournalPost_IN();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    // <GTE>
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(customsShippingBillJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    // </GTE>

    /// <summary>
    /// Performs tax postings.
    /// </summary>
    /// <param name="_post">
    /// A Boolean value that indicates whether posting should occur.
    /// </param>
    protected void  postTax(boolean _post)
    {
        super(_post);

        //<GTE>
        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            ITaxDocument taxDocument = TaxBusinessService::getTaxDocumentBySource(customsShippingBillJour.TableId, customsShippingBillJour.RecId);
            if (taxDocument)
            {
                CustomsShippingBillTrans_IN customsShippingBillTransLoc;
                while select forUpdate customsShippingBillTransLoc
                where customsShippingBillTransLoc.LedgerVoucher == customsShippingBillJour.LedgerVoucher
                    && customsShippingBillTransLoc.InvoiceDate == customsShippingBillJour.InvoiceDate
                    && customsShippingBillTransLoc.InvoiceId == customsShippingBillJour.InvoiceId
                    && customsShippingBillTransLoc.SalesId == customsShippingBillJour.SalesId
                {
                    ITaxDocumentLine taxDocumentLineObject = taxDocument.findLineBySource(customsShippingBillTransLoc.TableId, customsShippingBillTransLoc.RecId);
                    if (taxDocumentLineObject)
                    {
                        customsShippingBillTransLoc.TaxAmount = taxDocumentLineObject.getInvoiceTax().amountTransactionCurrency();
                        customsShippingBillTransLoc.TaxAmountMST = customsShippingBillJour.amountMST(customsShippingBillTransLoc.TaxAmount);
                        ttsbegin;
                        customsShippingBillTransLoc.update();
                        ttsCommit;
                    }
                }
            }
        }
        //</GTE>
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    protected void endUpdate()
    {
        super();

        if (FeatureStateProvider::isFeatureEnabled(EInvoice_IN_Feature::instance()))
        {
            OnlineInvoicingHelper_IN::createEInvoice(customsShippingBillJour);
            OnlineInvoicingHelper_IN::validateEInvoice(customsShippingBillJour);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>