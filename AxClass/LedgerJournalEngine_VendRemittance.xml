<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEngine_VendRemittance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEngine_VendRemittance</c> class supports journals for remitting promissory
/// notes.
/// </summary>
/// <remarks>
/// This class is an extension of the <see cref="T:LedgerJournalEngine" /> class.
/// </remarks>
public class LedgerJournalEngine_VendRemittance extends LedgerJournalEngine_VendPromissoryNote
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromVendTable</Name>
				<Source><![CDATA[
    protected void initFromVendTable(LedgerJournalTrans ledgerJournalTrans, Tax1099BoxDetail _tax1099Detail = null)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            super(ledgerJournalTrans, _tax1099Detail);
        }
        else
        {
            super(ledgerJournalTrans);
        }

        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfileNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendOffsetAccount</Name>
				<Source><![CDATA[
    protected void initVendOffsetAccount(LedgerJournalTrans ledgerJournalTrans)
    {
        super(ledgerJournalTrans);

        ledgerJournalTrans.parmOffsetAccount(ledgerJournalTrans.parmAccount(), LedgerJournalACType::Vend);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPostingProfile</Name>
				<Source><![CDATA[
    public void initVendPostingProfile(LedgerJournalTrans ledgerJournalTrans)
    {
        ledgerJournalTrans.PostingProfile = VendParameters::find().PostingProfileNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markedForSettlementWarning</Name>
				<Source><![CDATA[
    public boolean markedForSettlementWarning(LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret = true;

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact   &&
            _ledgerJournalTrans.amount()      != _ledgerJournalTrans.orig().amount())
        {
            ret = checkFailed("@SYS122495");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates settlement data for the journal line.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    A <c>LedgerJournalTrans</c> record buffer.
    /// </param>
    /// <remarks>
    ///    This method is used by the split payment feature.
    /// </remarks>
    public void settleTransUpdate(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans               specTrans;
        VendTransOpen           vendTransOpen;
        VendTrans               vendTrans;

        CustVendNegInstStatus   status;
        VATNum                  vatNum;
        VendTable               vendTableTaxId;

        super(_ledgerJournalTrans);

        while   select  crossCompany SpecCompany, SpecRecId, SpecTableId, RefCompany, RefTableId, RefRecId
                from specTrans
                where   specTrans.SpecCompany   == _ledgerJournalTrans.DataAreaId &&
                        specTrans.SpecRecId     == _ledgerJournalTrans.RecId    &&
                        specTrans.SpecTableId   == _ledgerJournalTrans.TableId
                join    DataAreaId, TableId, RecId, RefRecId, AccountNum
                from vendTransOpen
                where   vendTransOpen.DataAreaId == specTrans.RefCompany        &&
                        vendTransOpen.TableId   == specTrans.RefTableId         &&
                        vendTransOpen.RecId     == specTrans.RefRecId
                join    RecId, AccountNum, PromissoryNoteStatus
                from vendTrans
                where   vendTrans.RecId         == vendTransOpen.RefRecId       &&
                        vendTrans.AccountNum    == vendTransOpen.AccountNum
        {
            if (status  &&
                status != vendTrans.PromissoryNoteStatus &&
               (status == CustVendNegInstStatus::Invoiced ||
                vendTrans.PromissoryNoteStatus == CustVendNegInstStatus::Invoiced))
            {
                _ledgerJournalTrans.amountCur2DebCred(0);

                SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

                throw error("@SYS120649");
            }
            status      = vendTrans.PromissoryNoteStatus;
            vendTableTaxId = VendTable::find(vendTrans.AccountNum);
            vatNum      = vendTable.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _ledgerJournalTrans.TransDate);
        }
        select firstonly crossCompany RecId, SpecCompany, SpecRecId, SpecTableId, RefCompany, RefTableId, RefRecId, Balance01
        from specTrans
        where   specTrans.SpecCompany   == _ledgerJournalTrans.DataAreaId &&
                specTrans.SpecRecId     == _ledgerJournalTrans.RecId     &&
                specTrans.SpecTableId   == _ledgerJournalTrans.TableId
        join    DataAreaId, TableId, RecId, AmountCur
        from    vendTransOpen
        where   vendTransOpen.DataAreaId == specTrans.RefCompany        &&
                vendTransOpen.TableId   == specTrans.RefTableId         &&
                vendTransOpen.RecId     == specTrans.RefRecId           &&
                vendTransOpen.AmountCur != specTrans.Balance01;
        if (specTrans)
        {
            _ledgerJournalTrans.amountCur2DebCred(0);
            _ledgerJournalTrans.write();
            if (ledgerJournalTrans_ds)
            {
                ledgerJournalTrans_ds.refresh();
            }

            SpecTransManager::constructServer(_ledgerJournalTrans, false).deleteAll();

            throw error("@SYS122495");
        }

        if (status == CustVendNegInstStatus::Invoiced)
        {
            _ledgerJournalTrans.BankRemittanceType  = BankRemittanceType::Collection;

            if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(_ledgerJournalTrans.ledgerJournalTable().JournalType))
            {
                vendTableTaxId.copyPrimaryRegistrationNumberToVATMap(_ledgerJournalTrans, _ledgerJournalTrans.TransDate);
            }
            else
            {
                _ledgerJournalTrans.vatNumJournal = vatNum;
            }
        }
        else
        {
            _ledgerJournalTrans.BankRemittanceType = BankRemittanceType::None;
        }
        _ledgerJournalTrans.update();

        if (ledgerJournalTrans_ds)
        {
            ledgerJournalTrans_ds.reread();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>