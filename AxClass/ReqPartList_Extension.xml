<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPartList_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Utility class that provides convenience methods for the <c>PartList</c>
/// </summary>
public static class ReqPartList_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPartControlVisibilityByFormName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     <c>PartList</c> extension method that allows to set visibility of form part by name of the form hosted in the part.
    ///     Only works with LOCAL form parts.
    /// </summary>
    /// <param name = "_partList">
    ///     Implicit parameter, instance of the extended class.
    /// </param>
    /// <param name = "_formName">
    ///     Name of the form hosted in the form part.
    /// </param>
    /// <param name = "_visible">
    ///     Sets visibility of the form part.
    /// </param>
    public static void setPartControlVisibilityByFormName(PartList _partList, FormName _formName, boolean _visible)
    {
        if (_formName == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        FormPartReferenceControl part = ReqPartList_Extension::getPartControlByFormName(_partList, _formName);

        if (part)
        {
            part.visible(_visible);
        }
        else
        {
            throw error(strFmt('FormPart for form: %1 not found', _formName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPartControlVisibilityByPartName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     <c>PartList</c> extension method that allows to set visibility of form part by name of the form hosted in the part.
    ///     Works for Local and Remote parts.
    /// </summary>
    /// <param name = "_partList">
    ///     Implicit parameter, instance of the extended class.
    /// </param>
    /// <param name = "_partName">
    ///     Name of the the form part.
    /// </param>
    /// <param name = "_visible">
    ///     Sets visibility of the form part.
    /// </param>
    public static void setPartControlVisibilityByPartName(PartList _partList, str _partName, boolean _visible)
    {
        if (_partName == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        FormPartReferenceControl part = ReqPartList_Extension::getPartControlByPartName(_partList, _partName);

        if (part)
        {
            part.visible(_visible);
        }
        else
        {
            throw error(strFmt('FormPart: %1 not found', _partName));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartControlByFormName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     <c>PartList</c> extension method that allows to get form part by name of the form hosted in the part.
    /// </summary>
    /// <param name = "_partList">
    ///     Implicit parameter, instance of the extended class.
    /// </param>
    /// <param name = "_partName">
    ///     Name of the the form part.
    /// </param>
    /// <returns>
    ///     <c>FormPartReferenceControl</c> object.
    /// </returns>
    public static FormPartReferenceControl getPartControlByFormName(PartList _partList, FormName _formName)
    {
        for (int i = 1; i <= _partList.partCount(); i++)
        {
            FormPartReferenceControl part = _partList.getPartControlById(i);
            if (part.formName() == _formName)
            {
                return part;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartControlByPartName</Name>
				<Source><![CDATA[
    internal static FormPartReferenceControl getPartControlByPartName(PartList _partList, str _partName)
    {
        const str prefix = '__Generated_FormPart_';

        for (int i = 1; i <= _partList.partCount(); i++)
        {
            FormPartReferenceControl part = _partList.getPartControlById(i);
            str partName = part.name();

            if (strScan(partName, prefix, 1, 1))
            {
                partName = subStr(partName, strLen(prefix) + 1, strLen(partName) - strLen(prefix));
            }

            if (partName == _partName)
            {
                return part;
            }
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>