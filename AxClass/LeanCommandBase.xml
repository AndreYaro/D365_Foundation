<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCommandBase</c> class represents a command that can be executed by the
///    <c>LeanRulesEngine</c> class.
/// </summary>
abstract class LeanCommandBase
{
    LeanCommandBase nextCommand;
    LeanCommandBase previousCommand;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements business logic of the command.
    /// </summary>
    /// <returns>
    ///    true if the execution was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Most commands must override only this method if they are to be executed in a pipeline manner
    ///    (sequentially and unconditionally).
    /// </remarks>
    abstract protected boolean execute()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastInChain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the last element in a chain of commands
    /// </summary>
    /// <returns>
    ///    The last element in the chain of commands.
    /// </returns>
    public LeanCommandBase lastInChain()
    {
        LeanCommandBase leanCommandBase = this;

        while (leanCommandBase.parmNextCommand() != null)
        {
            leanCommandBase = leanCommandBase.parmNextCommand();
        }

        return leanCommandBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkToCommand</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Facilitates linking to a new command.
    /// </summary>
    /// <param name="_command">
    ///    The new command that should be linked to the existing one.
    /// </param>
    /// <remarks>
    ///    If there is an existing next command set, it is unlinked.
    /// </remarks>
    public void linkToCommand(LeanCommandBase _command)
    {
        // check input parameters
        if (!_command)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        // check and unlink existing command
        if (nextCommand)
        {
            nextCommand.parmPreviousCommand(null);
        }

        // adjust linkage
        this.parmNextCommand(_command);
        _command.parmPreviousCommand(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNextCommand</Name>
				<Source><![CDATA[
    public LeanCommandBase parmNextCommand(LeanCommandBase _nextCommand = nextCommand)
    {
        nextCommand = _nextCommand;

        return nextCommand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPreviousCommand</Name>
				<Source><![CDATA[
    public LeanCommandBase parmPreviousCommand(LeanCommandBase _previousCommand = previousCommand)
    {
        previousCommand = _previousCommand;

        return previousCommand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the execution of the current command and transitions the execution flow to the next one in
    ///    the pipeline.
    /// </summary>
    /// <returns>
    ///    true if the command was executed successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base implementation here provides unconditional and sequential execution of all pipelined
    ///    commands.If the execution order/logic must be changed, this method should be overriden.All commands
    ///    are executed in a common transaction scope provided by the <c>LeanRulesEngine</c> class.
    /// </remarks>
    public boolean run()
    {
        #OCCRetryCount
        boolean result = false;

        try
        {
            // the transaction scope for all commands execution is
            // provided by the LeanRulesEngine
            result = this.execute();

            if (result && nextCommand)
            {
                result = result && nextCommand.run();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch
        {
            // make sure that in case of error we return false
            result = false;
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>