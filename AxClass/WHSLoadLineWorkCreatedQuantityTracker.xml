<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadLineWorkCreatedQuantityTracker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLoadLineWorkCreatedQuantityTracker</c> is responsible for keeping
/// track of load lines work created quantities while work create wave process
/// is running and updating those quantities.
/// </summary>
public class WHSLoadLineWorkCreatedQuantityTracker
{
    private Map loadLinesWorkCreatedQuantities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLoadLineWorkCreatedQuantityTracker construct()
    {
        return new WHSLoadLineWorkCreatedQuantityTracker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.setupTracker();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTracker</Name>
				<Source><![CDATA[
    private void setupTracker()
    {
        loadLinesWorkCreatedQuantities = new Map(Types::Int64, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackWorkCreatedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the received quantity to the tracked 
    /// load line.
    /// </summary>
    /// <param name="_quantity">
    /// The quantity to track.
    /// </param>
    /// <param name="_loadLineRefRecId">
    /// The load line to track.
    /// </param>
    public void trackWorkCreatedQuantity(WHSWorkCreatedQty _quantity, RefRecId _loadLineRefRecId)
    {
        if (!this.shouldTrackWorkCreatedQuantity(_quantity, _loadLineRefRecId))
        {
            return;
        }
        this.insertOrUpdateWorkCreatedQuantitiesTracker(_quantity, _loadLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOrUpdateWorkCreatedQuantitiesTracker</Name>
				<Source><![CDATA[
    private void insertOrUpdateWorkCreatedQuantitiesTracker(WHSWorkCreatedQty _quantity, RefRecId _loadLineRefRecId)
    {
        if (loadLinesWorkCreatedQuantities.exists(_loadLineRefRecId))
        {
            loadLinesWorkCreatedQuantities.insert(_loadLineRefRecId, loadLinesWorkCreatedQuantities.lookup(_loadLineRefRecId) + _quantity);
        }
        else
        {
            loadLinesWorkCreatedQuantities.insert(_loadLineRefRecId, _quantity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldTrackWorkCreatedQuantity</Name>
				<Source><![CDATA[
    private boolean shouldTrackWorkCreatedQuantity(WHSWorkCreatedQty _quantity, RefRecId _loadLineRefRecId)
    {
        return _loadLineRefRecId != 0 && _quantity > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLinesWorkCreatedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load lines work created quantities
    /// based on the tracking done.
    /// </summary>
    public void updateLoadLinesWorkCreatedQuantities()
    {
        MapEnumerator enumerator = loadLinesWorkCreatedQuantities.getEnumerator();
        while (enumerator.moveNext())
        {
            WHSLoadLine::updateWorkCreatedQty(enumerator.currentKey(), enumerator.currentValue());
        }

        this.setupTracker();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>