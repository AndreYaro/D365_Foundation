<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTextUpdateTable_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FiscalDocumentTextUpdateTable_BR</c> is responsible for updating fiscal document texts
/// at header level with the automatically assigned texts comming from different sources.
/// </summary>
class FiscalDocumentTextUpdateTable_BR extends FiscalDocumentTextUpdate_BR
{
    FiscalDocumentTextUpdateTableMap_BR updateTableMap;
    CFOPTable_BR                        cFOPTable;
    CustSuframaNumber_BR                suframaNumber;
    CustVendTable                       custVendTable;
    boolean                             isForeignerVendor;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the object based on the mainRecord.
    /// </summary>
    public void init()
    {
        CustTable               custtable;
        CustPackingSlipJour     custPackingSlipJour;
        TaxFiscalDocument_BR    taxFiscalDocument;
        InventLocation          inventLocation;
        InventTransferTable     inventTransferTable;

        isForeignerVendor   = false;
        updateTableMap      = mainRecord;

        switch (updateTableMap.TableId)
        {
            case tableNum(SalesTable) :
            case tableNum(CustInvoiceTable) :
            case tableNum(SalesComplementaryInvoiceHeader) :
                custTable           = CustTable::find(updateTableMap.OrderAccount);
                suframaNumber       = custtable.SuframaNumber_BR;
                custVendTable       = custTable;
                break;

            case tableNum(CustPackingSlipJour):
                custPackingSlipJour = mainRecord;
                custtable           = CustTable::find(custPackingSlipJour.OrderAccount);
                custVendTable       = custTable;
                break;

            case tableNum(PurchTable) :
            case tableNum(PurchParmTable) :
            case tableNum(PurchComplementaryInvoiceHeader) :
            case tableNum(VendInvoiceInfoTable) :
                custVendTable       = VendTable::find(updateTableMap.OrderAccount);
                isForeignerVendor   = this.isForeignerVendor();
                break;

            case tableNum(TaxFiscalDocument_BR):
                taxFiscalDocument = mainRecord;
                if (taxFiscalDocument.AccountType == CustVendType_BR::Customer)
                {
                    custVendTable = CustTable::find(taxFiscalDocument.AccountNum);
                }
                else
                {
                    custVendTable = VendTable::find(taxFiscalDocument.AccountNum);
                }
                break;

            case tableNum(InventTransferTable) :
                inventTransferTable = mainRecord;

                select CustAccount_BR, VendAccount
                    from inventLocation
                    where inventLocation.InventLocationId == inventTransferTable.InventLocationIdTo;

                if (inventLocation.CustAccount_BR)
                {
                    custTable = CustTable::find(inventLocation.CustAccount_BR);
                    custVendTable = custtable;
                    suframaNumber = custTable.SuframaNumber_BR;
                }
                else
                {
                    custVendTable = VendTable::find(inventLocation.VendAccount);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForeignerVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the vendor is a foreigner.
    /// </summary>
    /// <returns>
    /// True if the vendor is a foreigner; false, otherwise.
    /// </returns>
    protected boolean isForeignerVendor()
    {
        LogisticsPostalAddress  vendorAddress, companyAddress;

        vendorAddress   = DirParty::primaryPostalAddress(custVendTable.Party);
        companyAddress  = DirParty::primaryPostalAddress(CompanyInfo::current());

        if (vendorAddress && companyAddress)
        {
            return vendorAddress.CountryRegionId != companyAddress.CountryRegionId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTexts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Fiscal document texts attached to the class' main record.
    /// </summary>
    /// <param name="_type">
    /// The type (<c>FiscalDocumentTextType_BR</c>) to be updated.
    /// </param>
    public void updateTexts( FiscalDocumentTextType_BR _type)
    {
        switch (_type)
        {
            case FiscalDocumentTextType_BR::CustVend:
                this.delete(FiscalDocumentTextType_BR::UserDef);

                this.delete(FiscalDocumentTextType_BR::CustVend);
                this.copy(custVendTable);

                this.delete(FiscalDocumentTextType_BR::Suframa);
                if (suframaNumber)
                {
                    this.add(BrazilParameters::find().SuframaFiscalDocumentTextID, FiscalDocumentTextType_BR::Suframa);
                }

                this.delete(FiscalDocumentTextType_BR::DirectImport);
                if (isForeignerVendor)
                {
                    this.add(BrazilParameters::find().ImportDeclarationTextID, FiscalDocumentTextType_BR::DirectImport);
                }
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>