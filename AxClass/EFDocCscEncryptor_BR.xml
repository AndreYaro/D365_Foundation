<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocCscEncryptor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Contributor Security Code encrypting process
/// </summary>
class EFDocCscEncryptor_BR
{
    public static const str EFDocCscEncryptionPurpose = "{C7719C27-9760-4A20-BEA9-E3212544BA7F}";

    FiscalEstablishment_BR              fiscalEstablishment;

    ConsumerEFDocCscToken               consumerEFDocCscToken;
    ConsumerEFDocCsc                    consumerEFDocCsc;
    ConsumerEFDocCsc                    consumerEFDocCscTypeCheck;
    ConsumerEFDocCsc                    consumerEFDocCscEncrypted;

    Object                              form;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>encryptCsc</Name>
				<Source><![CDATA[
    private ConsumerEFDocCsc encryptCsc()
    {
        return appl.EncryptToStringForPurpose(consumerEFDocCsc, EFDocCscEncryptionPurpose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCsc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the encrypted Contributor Security Code and updates the corresponding Fiscal Establishment.
    /// </summary>
    public void generateCsc()
    {
        consumerEFDocCscEncrypted = this.encryptCsc();

        this.updateFiscalEstablishment(consumerEFDocCscToken, consumerEFDocCscEncrypted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateParms</Name>
				<Source><![CDATA[
    private void populateParms()
    {
        IEFDocCscData cscData = form as IEFDocCscData;

        this.parmConsumerEFDocCscToken(cscData.getConsumerEFDocCscToken());
        this.parmConsumerEFDocCsc(cscData.getConsumerEFDocCsc());
        this.parmConsumerEFDocCscTypeCheck(cscData.getConsumerEFDocCscCheck());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumerEFDocCsc</Name>
				<Source><![CDATA[
    public ConsumerEFDocCsc parmConsumerEFDocCsc(ConsumerEFDocCsc _consumerEFDocCsc = consumerEFDocCsc)
    {
        consumerEFDocCsc = _consumerEFDocCsc;

        return consumerEFDocCsc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumerEFDocCscToken</Name>
				<Source><![CDATA[
    public ConsumerEFDocCscToken parmConsumerEFDocCscToken(ConsumerEFDocCscToken _consumerEFDocCscToken = consumerEFDocCscToken)
    {
        consumerEFDocCscToken = _consumerEFDocCscToken;

        return consumerEFDocCscToken;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsumerEFDocCscTypeCheck</Name>
				<Source><![CDATA[
    public ConsumerEFDocCsc parmConsumerEFDocCscTypeCheck(ConsumerEFDocCsc _consumerEFDocCscTypeCheck = consumerEFDocCscTypeCheck)
    {
        consumerEFDocCscTypeCheck = _consumerEFDocCscTypeCheck;

        return consumerEFDocCscTypeCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishment</Name>
				<Source><![CDATA[
    public FiscalEstablishment_BR parmFiscalEstablishment(FiscalEstablishment_BR _fiscalEstablishment = fiscalEstablishment)
    {
        fiscalEstablishment = _fiscalEstablishment;

        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts the user to input the Contributor Security Code and Token
    /// and then encrypts the data and store them on the database.
    /// </summary>
    public void run()
    {
        this.runForm();

        if (form.closedOk())
        {
            this.populateParms();

            if (this.validate())
            {
                this.generateCsc();
                info("@SYP4861396");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForm</Name>
				<Source><![CDATA[
    private void runForm()
    {
        Args args = new Args();
        args.name(formstr(EFDocCscEncryptor_BR));
        form = ClassFactory.formRunClass(args);
        form.init();
        form.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalEstablishment</Name>
				<Source><![CDATA[
    private void updateFiscalEstablishment(
        ConsumerEFDocCscToken token,
        ConsumerEFDocCsc encryptedCsc)
    {
        FiscalEstablishment_BR fiscalEstablishmentForUpdate = FiscalEstablishment_BR::findById(fiscalEstablishment.FiscalEstablishmentId, true);

        if (fiscalEstablishmentForUpdate)
        {
            fiscalEstablishmentForUpdate.ConsumerEFDocCsc = encryptedCsc;
            fiscalEstablishmentForUpdate.ConsumerEFDocCscToken = token;

            ttsBegin;
            fiscalEstablishmentForUpdate.update();
            handleEncryptedTablePostUpdate(fiscalEstablishmentForUpdate);
            ttsCommit;
        }
        else
        {
            throw error(strFmt("@SYP4861395", tablePName(FiscalEstablishment_BR)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate(Object _calledFrom = null)
    {
        boolean                             ret = true;

        if (consumerEFDocCscToken == nullValueFromType(typeOf(consumerEFDocCscToken)))
        {
            ret = checkFailed("@SYP4861399");
        }
        if (consumerEFDocCsc == nullValueFromType(typeOf(consumerEFDocCsc)))
        {
            ret = checkFailed("@SYP4861400");
        }
        if (consumerEFDocCsc != consumerEFDocCscTypeCheck)
        {
            ret = checkFailed("@SYP4861403");
        }

        /// This validation is put here because the encrypted value can big bigger than 36 characters,
        /// but hte unencrypted value cannot.
        if (strLen(consumerEFDocCsc) > 36)
        {
            ret = checkFailed("@SYP4861401");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EFDocCscEncryptor_BR construct()
    {
        return new EFDocCscEncryptor_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        EFDocCscEncryptor_BR    efdocCscEncryptor_BR;

        efdocCscEncryptor_BR = EFDocCscEncryptor_BR::construct();

        if (!args || !args.record() || args.dataset() != tableNum(FiscalEstablishment_BR))
        {
            throw error(strFmt("@SYS105865", classStr(EFDocCscEncryptor_BR), tablePName(FiscalEstablishment_BR)));
        }
        efdocCscEncryptor_BR.parmFiscalEstablishment(args.record());

        efdocCscEncryptor_BR.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>