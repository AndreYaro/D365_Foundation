<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmReport_6_2012</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmReport_6_2012 extends RHRMReport implements BatchRetryable
{
    ComExcelDocument_RU excelDocument;

    DialogField   dialogTransDate;
    TransDate     transDate;
    RHRMEmplTable emplTable;

    #define.TotalColumns(11)
    #define.TotalRows(21)
    #localmacro.Idx
        (#TotalColumns * (%1 - 1) + %2)
    #endmacro

    #define.StartRow(13)
    #define.StartColumn(3)

    int reportMatrix[#TotalColumns * #TotalRows];

    Map categories;

    SysDictEnum dictEnum;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1762";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1812";
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        return super() && this.checkAndPrepareParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAndPrepareParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkAndPrepareParameters()
    {
        boolean ret = true;
        int     i;

        RPayReportParameter get(int _pos, str _msg)
        {
            RPayReportTuningTable   rPayReportTuningTable = RPayReportTuningTable::find(RPayReportName::MilitaryReserve, _pos);
            RPayReportParameter     parameter;
            RPayReportParameterName parameterName;

            parameter       = rPayReportTuningTable.Parameter;
            parameterName   = rPayReportTuningTable.parmName();

            if (! parameter)
            {
                ret = checkFailed(strFmt("%1 '%2'", _msg, parameterName)) && ret;
            }
            return parameter;
        }

        setPrefix("@RUP1762");

        for (i = dictEnum.firstValue(); i <= dictEnum.lastValue(); i = dictEnum.nextValue(i))
        {
            get(i, "@RUP2170");

            if (i == dictEnum.lastValue())
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOfficeDocument</Name>
				<Source><![CDATA[
    protected ComOfficeDocument_RU createOfficeDocument()
    {
        excelDocument = new ComExcelDocument_RU();

        return excelDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.caption("@RUP1763");
        dialogTransDate = dialog.addField(extendedTypeStr(RPayYearPeriod), "@SYS32606", "@RUP1764");

        dialogTransDate.value(dateEndYr(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplHistoryStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayHistory emplHistoryStatus(RHRMPayMainEmplId _mainEmplId)
    {
        RPayHistory payHistory, payHistoryDismiss;
        RHRMEmplTable   emplTableEmployee;

        void findHistory(RHRMEmplId _emplId)
        {
            select firstonly payHistory
                order by StartDate desc, TransTime desc
                where payHistory.Number        == _emplId &&
                     (payHistory.OperationType == RHRMJournalType::Receive   ||
                      payHistory.OperationType == RHRMJournalType::Transfer) &&
                      payHistory.StartDate     <= transDate
                notexists join payHistoryDismiss
                    where payHistoryDismiss.Number          == payHistory.Number        &&
                          payHistoryDismiss.OperationType   == RHRMJournalType::Dismiss &&
                          payHistoryDismiss.StartDate       >  payHistory.StartDate     &&
                          payHistoryDismiss.StartDate       <= transDate;
        }

        if (emplTable.SortOfWork == RHRMSortOfWork::Direct)
        {
            findHistory(_mainEmplId);

            if (payHistory.RecId != 0 && payHistory.HrmKindOfWork == RHRMKindOfWork::Permanent)
            {
                return payHistory;
            }
        }

        while select EmployeeId from emplTableEmployee
            order by EmployeeId
            where emplTableEmployee.PayMainEmplId   == _mainEmplId &&
                  emplTableEmployee.EmployeeId      != _mainEmplId &&
                  emplTableEmployee.SortOfWork      == RHRMSortOfWork::Direct
        {
            findHistory(emplTableEmployee.EmployeeId);

            if (payHistory.RecId != 0 && payHistory.HrmKindOfWork == RHRMKindOfWork::Permanent)
            {
                return payHistory;
            }
        }

        payHistory.clear();

        return payHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        int i,j, delta;

        for (i = 1; i <= #TotalRows; ++i)
        {
            if (i > 19)
            {
                delta = 1;
            }

            for (j = 1; j <= #TotalColumns; ++j)
            {
                if (reportMatrix[#Idx(i, j)] != 0)
                {
                    excelDocument.insertValue(ComExcelDocument_RU::numToNameCell(j + #StartColumn - 1, i + #StartRow - 1 + delta), reportMatrix[#Idx(i, j)]);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooter</Name>
				<Source><![CDATA[
    #define.RPT_DIRECTOR('RPT_DIRECTOR')
    #define.RPT_DIRECTOR_TITLE('RPT_DIRECTOR_TITLE')
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillFooter()
    {
        excelDocument.insertValue(#RPT_DIRECTOR_TITLE, OfficialsTable_RU::findDirector().Title);
        excelDocument.insertValue(#RPT_DIRECTOR, OfficialsTable_RU::findDirector().Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    #define.RPT_YEAR('RPT_YEAR')
    #define.RPT_COMP_TITLE('RPT_COMP_TITLE')
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillHeader()
    {
        excelDocument.insertValue(#RPT_COMP_TITLE, CompanyInfo::find().rFullName);
        excelDocument.insertValue(#RPT_YEAR, year(transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        transDate = dateEndYr(dialogTransDate.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategories</Name>
				<Source><![CDATA[
    //travers category tree
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initCategories()
    {
        RHRMPersonnelCategory   category;
        RPayReportTuningTable   reportTuningTable;

        Stack   stack = new Stack();
        Map     vtx   = new Map(Types::String, Types::Enum);

        RHRMPersonnelCategoryId categoryId;
        RHRMForm6Titles         title;

        while select reportTuningTable
            order by Parameter
            where reportTuningTable.ReportName == RPayReportName::MilitaryReserve &&
                  reportTuningTable.Parameter
        {
            title = reportTuningTable.ParameterCode;
            vtx.insert(reportTuningTable.Parameter, title);
        }

        if (vtx.empty())
        {
            return;
        }

        stack.push([categoryId, title]);

        while (stack.qty())
        {
            [categoryId, title] = stack.pop();

            if (categoryId)
            {
                categories.insert(categoryId, title);
            }

            while select PersonnelCategoryId,  ParentPersonnelCategoryId from category
                order by Number desc
                where category.ParentPersonnelCategoryId == categoryId
            {
                if (vtx.exists(category.PersonnelCategoryId))
                {
                    title = vtx.lookup(category.PersonnelCategoryId);
                }

                stack.push([category.PersonnelCategoryId, title]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initColumns</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container initColumns(RHRMPersonTable _personTable, RHRMEmplTable _emplTableWrk)
    {
        RHRMMilitaryRank    militaryRank;
        container           columns;

        columns += 1;

        if (_personTable.MilitaryService == RHRMMilitaryService::NotLiable ||
            _personTable.MilitaryTakeOffRegister != RHRMMilitaryTakeOffRegister::Register)
        {
            return columns;
        }

        if (_personTable.MilitaryConscript)
        {
            columns += 11;
            return columns;
        }

        columns += 2;
        militaryRank = RHRMMilitaryRank::find(_personTable.MilitaryRankId);

        if (_personTable.MilitaryReserved)
        {
            columns += 6;
        }

        if (militaryRank)
        {
            switch (militaryRank.MilitaryStructure)
            {
                case RHRMMilitaryStructure::TopOfficers,
                     RHRMMilitaryStructure::JuniorOfficers,
                     RHRMMilitaryStructure::SeniorOfficers:

                     columns += 3;

                    if (_personTable.MilitaryReserved)
                    {
                        columns += 7;
                    }
                break;

                default:

                    columns += 4;

                    if (_personTable.MilitaryReserved)
                    {
                        columns += 8;
                    }

                    if (_personTable.MilitaryServiceAbleBodied != RHRMMilitaryServiceAbleBodied::Able)
                    {
                        columns += 5;
                    }
            }
        }
        else
        {
            warning(strFmt("@RUP3401", _personTable.PayMainEmplId, _personTable.name()));
        }

        if (!_personTable.MilitaryReserved)
        {
            if (_personTable.MilitaryMobilization)
            {
                columns += 10;
            }
            else
            {
                columns += 9;
            }
        }

        return columns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportMatrix</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initReportMatrix()
    {
        RPayHistory payHistory, payHistoryStatus;
        RHRMEmplTable           emplTableWrk;
        RHRMPersonTable         personTable;
        container i; //rows
        container j; //column

        this.initCategories();

        //select only primary ever worked employees
        while select MilitaryRankId, MilitarySpeciality, MilitaryServiceAbleBodied,  MilitaryConscript,
                     MilitaryReserved, MilitaryMobilization, MilitaryRegistrationOfficeId, MilitaryGroupId,
                     MilitaryCategoryId, MilitarySpecialRegistration, MilitaryService,
                     MilitaryTakeOffRegister, RecId, PayMainEmplId, PersonnelNumber  from personTable
            join EmployeeId, PayMainEmplId, SortOfWork, PersonnelCategoryId from emplTable
                where emplTable.rhrmPersonTable == personTable.RecId &&
                      emplTable.PayMainEmplId   == emplTable.EmployeeId
            exists join payHistory
                where payHistory.Number         == emplTable.EmployeeId &&
                      payHistory.StartDate      <= transDate            &&
                      payHistory.OperationType  == RHRMJournalType::Receive
        {
            payHistoryStatus = this.emplHistoryStatus(emplTable.PayMainEmplId);

            if (payHistoryStatus.RecId == 0)
            {
                continue;
            }

            if (emplTable.EmployeeId == payHistoryStatus.Number)
            {
                emplTableWrk = emplTable;
            }
            else
            {
                emplTableWrk = RHRMEmplTable::find(payHistoryStatus.Number);
            }

            i = this.initRows(payHistoryStatus, personTable, emplTableWrk);
            j = this.initColumns(personTable, emplTableWrk);

            if (conLen(j) != 0 && conLen(i) != 0)
            {
                this.updateMatrix(i, j);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRows</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container initRows(RPayHistory _emplStatus, RHRMPersonTable _personTable, RHRMEmplTable _emplTableWork)
    {
        RHRMPersonnelCategoryId emplCategoryId;
        RHRMFlySwimType         flySwimType;
        RHRMForm6Titles         personTitleType;
        RHRMPersonTitleTable    personTitleTable;
        container               rows;

        personTitleTable = RHRMPersonTitleTable::find(_emplStatus.HcmTitle);
        emplCategoryId = personTitleTable.PersonnelCategoryId;

        if (!emplCategoryId)
        {
            emplCategoryId = _emplTableWork.PersonnelCategoryId;
        }

        if (!emplCategoryId)
        {
            warning(strFmt("@RUP1781", _personTable.name(), _emplTableWork.EmployeeId));
            return conNull();
        }

        flySwimType = personTitleTable.FlySwimTypePersonnel;

        if (emplCategoryId && categories.exists(emplCategoryId))
        {
            personTitleType = categories.lookup(emplCategoryId);

            switch (personTitleType)
            {
                case RHRMForm6Titles::Manager:
                    rows += 1;
                    break;

                case RHRMForm6Titles::Attendant:
                    rows += 12;
                    break;

                case RHRMForm6Titles::Motormen:
                    rows += 17;
                    break;

                case RHRMForm6Titles::Driver:
                    rows += 18;
                    break;

                case RHRMForm6Titles::TractorDriver:
                    rows += 19;
                    break;

                case RHRMForm6Titles::Specialist:
                case RHRMForm6Titles::Worker:
                    rows += this.rowByOKDP(personTitleType, _emplStatus);
                    break;
            }

            switch (flySwimType)
            {
                case RHRMFlySwimType::Flying:
                    rows += 20;
                    break;

                case RHRMFlySwimType::Swimming:
                    rows += 21;
                    break;
            }
        }

        return rows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public IdentifierName name()
    {
        return resourceStr(RHRMReport_6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        dictEnum   = new SysDictEnum(enumNum(RHRMForm6Titles));
        categories = new Map(Types::String, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rowByOKDP</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected int rowByOKDP(RHRMForm6Titles _titleType, RPayHistory _emplStatus)
    {
        OKDP_RU codeOKDP;
        int     intCodeClass;

        codeOKDP = RPayHRMOrganization::find(_emplStatus.HrmOrganizationId).CodeOKDP;

        if (!codeOKDP)
        {
            codeOKDP = CompanyInfoHelper::partyOKDPasOfDate_RU(CompanyInfo::find(), transDate);
        }

        intCodeClass = str2int(subStr(codeOKDP, 1, 2));

        if (_titleType == RHRMForm6Titles::Specialist)
        {
            if (intCodeClass >=1 && intCodeClass <= 2)
            {
                return 3;
            }

            if (intCodeClass >=10 && intCodeClass <= 14)
            {
                return 4;
            }

            if (intCodeClass >=15 && intCodeClass <= 37)
            {
                return 5;
            }

            if (intCodeClass >=40 && intCodeClass <= 41)
            {
                return 6;
            }

            if (intCodeClass ==45)
            {
                return 7;
            }

            if (intCodeClass >=60 && intCodeClass <= 64)
            {
                return 8;
            }

            if (intCodeClass ==80)
            {
                return 9;
            }

            if (intCodeClass ==85)
            {
                return 10;
            }

            return 11;
        }
        else //workers
        {
            if (intCodeClass >=1 && intCodeClass <= 2)
            {
                return 16;
            }
            else
            {
                if (_emplStatus.TradeCategory)
                {
                    return 14;
                }
                else
                {
                    return 15;
                }
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.initReportMatrix();
        this.fillHeader();
        this.fillBody();
        this.fillFooter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str templateName()
    {
        return #personnel_6_2012;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMatrix</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateMatrix(container _rows, container _columns)
    {
        int i, j, lenRow, lenCol, row, col;

        lenRow = conLen(_rows);
        lenCol = conLen(_columns);

        for (i = 1; i <= lenRow; ++i)
        {
            for (j = 1; j<= lenCol; ++j)
            {
                row = conPeek(_rows, i);
                col = conPeek(_columns, j);

                reportMatrix[#Idx(row, col)] += 1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str fullTemplateName()
    {
        return GlobalEx::templateFolder_W() + #personnel_6_2012;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>