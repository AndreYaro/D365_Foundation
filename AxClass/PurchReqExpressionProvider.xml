<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqExpressionProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqExpressionProvider</c> class implements the <c>ExpressionHierarchyProvider</c>
/// interface to show lookups and resolve nodes in a hierarchy during condition authoring or condition
/// evaluation.
/// </summary>
class PurchReqExpressionProvider  implements ExpressionHierarchyProvider
{
    RecId selectedRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GetDistance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the distance of the target node from the source node in a hierarchy.
    /// </summary>
    /// <param name="field">
    ///    The field in the expression that represents a node in the hierarchy
    /// </param>
    /// <param name="target">
    ///    The <c>RecID</c> value of the FK field to which to compute the distance.
    /// </param>
    /// <param name="source">
    ///    The <c>RecID</c> value of the FK field from which to calculate the distance.
    /// </param>
    /// <returns>
    ///    The distance of the target node from the source node.
    /// </returns>
    /// <remarks>
    ///    If a direct path from the source node to the target node does not exist then a non-zero value will be
    ///    be returned.
    /// </remarks>
    public int GetDistance(Microsoft.Dynamics.AX.Framework.Expression.Model.Field field, RecID target, RecID source)
    {
        EcoRescategory      childCategory;
        EcoRescategory      parentCategory;
        int                 distance;
        boolean             isDescendant;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Datasource datasource;
        tableName           tableName;
        fieldName           fieldName;

        datasource = field.get_Parent();
        tableName = datasource.get_TableName();
        fieldName = field.get_Name();

        if (tableName == tableStr(PurchReqLine) || tableName == tableStr(VendInvoiceInfoLine))
        {
            switch (fieldName)
            {
                case fieldStr(PurchReqLine, ProcurementCategory),
                    fieldStr(VendInvoiceInfoLine, ProcurementCategory) :

                    childCategory       =   EcoResCategory::find(target);
                    parentCategory      =   EcoResCategory::find(source);
                    isDescendant        =   EcoResCategory::isDescendant(childCategory.RecId, parentCategory.RecId, false);

                    if (isDescendant)
                        distance        =   int642int(childCategory.Level - parentCategory.Level);
                    else
                        distance        =   -1;

                    break;

                default :
                    throw error(strfmt("@SYS334621",funcname(),tableName,fieldName));
            }
        }
        else
        {
            throw error(strfmt("@SYS334620",funcname(),tableName));
        }

        return distance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a lookup table that represents the hierarchy from which the user can select a node.
    /// </summary>
    /// <param name="field">
    ///    The field in the expression that represents a node in the hierarchy
    /// </param>
    /// <returns>
    ///    The <c>RecID</c> value of the selected field from the lookup table.
    /// </returns>
    /// <remarks>
    ///    The lookup table is typically the primary key table for this field in the FK table.
    /// </remarks>
    public RecID GetLookup(Microsoft.Dynamics.AX.Framework.Expression.Model.Field field)
    {
        FormRun     expressionBuilderLookup;
        Args        args;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Datasource datasource;
        tableName           tableName;
        fieldName           fieldName;

        datasource = field.get_Parent();
        tableName = datasource.get_TableName();
        fieldName = field.get_Name();

        if (tableName == tableStr(PurchReqLine) || tableName == tableStr(VendInvoiceInfoLine))
        {
            switch (fieldName)
            {
                case fieldStr(PurchReqLine, ProcurementCategory),
                    fieldStr(VendInvoiceInfoLine, ProcurementCategory) :

                    args = new args(formstr(PurchReqProcurementCategoryLookup));
                    args.caller(this);
                    expressionBuilderLookup = ClassFactory::formRunClassOnClient(args);
                    expressionBuilderLookup.init();
                    expressionBuilderLookup.run();
                    expressionBuilderLookup.wait();
                    break;

                default :
                    throw error(strfmt("@SYS334621",funcname(),tableName,fieldName));
            }
        }
        else
        {
            throw error(strfmt("@SYS334620",funcname(),tableName));
        }

        return selectedRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the selected RecId from the lookup
    /// </summary>
    /// <param name="_selectedRecId">selected RecId from the lookup opened</param>
    /// <returns>selected RecId from the lookup opened</returns>
    public RecId parmSelectedRecId(RecId _selectedRecId = selectedRecId)
    {
        selectedRecId = _selectedRecId;
        return selectedRecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>