<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to check if the ledger journal is validated.
/// </summary>
public class LedgerJournalCheckPost_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPositiveDRCR</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks positive debit and credit.
    /// </summary>
    /// <param name="ledgerJournalTrans">
    ///    The <c>LegderJournalTrans</c> to check.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    ///    The posting messages collection; optional.
    /// </param>
    /// <returns>
    ///    True if the both debit and credit are greater than or equal to zeor;
    ///    otherwise, false and post an error message.
    /// </returns>
    public static boolean checkPositiveDRCR(
        LedgerJournalTrans ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceJP00012, funcName());

        if (ledgerJournalTrans.AmountCurDebit < 0
                || ledgerJournalTrans.AmountCurCredit < 0)
        {
            if (_ledgerPostingMessageCollection)
            {
                return _ledgerPostingMessageCollection.logCheckFailed("@GLS60021");
            }
            {
                return checkFailed("@GLS60021");
            }
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerJournalTransIntercompanyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inter company transaction mapping.
    /// </summary>
    /// <param name = "_isIntercompanyMapNeeded">True if the inter company map needed, otherwise; false.</param>
    /// <param name = "_ledgerJournalTransIntercompanyMap">The inter company map.</param>
    /// <param name="_originalTransRecId">
    /// The transaction record id in original company.
    /// </param>
    /// <param name="_newTransRecId">
    /// The transaction record id in foreign company.
    /// </param>
    public static void updateLedgerJournalTransIntercompanyMap(
        boolean _isIntercompanyMapNeeded,
        Map _ledgerJournalTransIntercompanyMap,
        RefRecId _originalTransRecId,
        RefRecId _newTransRecId)
    {
        if (_isIntercompanyMapNeeded)
        {
            if (_ledgerJournalTransIntercompanyMap == null)
            {
                _ledgerJournalTransIntercompanyMap = new Map(typeName2Type(extendedTypeStr(RefRecId)), typeName2Type(extendedTypeStr(RefRecId)));
            }
            //for each inter company transaction, map to the unique original transaction
            _ledgerJournalTransIntercompanyMap.insert(_newTransRecId, _originalTransRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransUpdIntercompanyMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the inter company transaction mapping for the journal transaction update.
    /// </summary>
    /// <param name = "_isIntercompanyMapNeeded">True if the inter company map needed, otherwise; false.</param>
    /// <param name = "_ledgerJournalTransIntercompanyMap">The inter company map.</param>
    /// <param name="_ledgerJournalTransUpdate">
    /// The journal transaction update.
    /// </param>
    public static void setLedgerJournalTransUpdIntercompanyMap(
        boolean _isIntercompanyMapNeeded,
        Map _ledgerJournalTransIntercompanyMap,
        LedgerJournalTransUpdate _ledgerJournalTransUpdate)
    {
        if (_isIntercompanyMapNeeded)
        {
            _ledgerJournalTransUpdate.parmLedgerJournalTransIntercompanyMap(_ledgerJournalTransIntercompanyMap);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>