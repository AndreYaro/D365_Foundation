<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectWBSSQLObjects</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjectWBSSQLObjects</c> class manages the Project Workbreakdown Structure
/// SQL Server objects.
/// </summary>
public class ProjectWBSSQLObjects extends ApplicationSQLObjects
{
    private static const str WBSIDFromTaskIDProc = "ProjectGetWBSIDFromTaskID";
    private static const str ProjectWBSIDFunc = "ProjectCalculateWBSId";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaskIDFromWBSIDSql</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the T-Sql code for getting an existing Task ID from a given WBS ID.
    /// </summary>
    /// <returns>
    /// The WBS ID.
    /// </returns>
    public static str getTaskIDFromWBSIDSql()
    {
        return @"SELECT HIERARCHYTASKID FROM PROJPLANVERSION
                    WHERE DATAAREAID='%1' AND
                          PARTITION=%2 AND
                          HIERARCHYID='%3'AND
                          TASKSIBLINGNUMBER = %4 AND
                          PARENTHIERARCHYTASKID = (%5)";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectWBSIDFuncName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the SQL name of the Project WBSID function.
    /// </summary>
    /// <returns>
    ///    The SQL name of the Project WBSID function.
    /// </returns>
    [SysObsoleteAttribute('This store procedure / function should no longer be used. WBS ID should be retrieved from ProjPlanVersion.PathId table field.', false, 27\07\2019)]
    public static str getProjectWBSIDFuncName()
    {
        return ProjectWBSIDFunc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Project WBS SQL objects.
    /// </summary>
    /// <param name="_forceCreate">
    /// A Boolean value that indicates whether to force creating all the Project WBS SQL objects
    /// regardless of the state of the cache or the existing objects; optional.
    /// </param>
    /// <returns>
    /// true if the object creation was successful or already exists; False if the creation of the SQL objects failed.
    /// </returns>
    public static boolean createAll(boolean _forceCreate = false)
    {
        boolean isSuccessful = true;
        container cachedResult;
        SysGlobalObjectCache objectCache = ClassFactory.globalObjectCache();
        ProjectWBSSQLObjects wbsSQLObjects;

        cachedResult = objectCache.find(classStr(ProjectWBSSQLObjects), ApplicationSQLObjects::SQLObjectsCreatedKey);

        if (cachedResult == connull() || _forceCreate)
        {
            wbsSQLObjects = new ProjectWBSSQLObjects();
            wbsSQLObjects.initialize();

            if (_forceCreate ||
                !wbsSQLObjects.existProcedure(WBSIDFromTaskIDProc))
            {
                isSuccessful = wbsSQLObjects.createSqlObjects();
            }

            if (isSuccessful)
            {
                // Add the SQL objects created indicator to the cache.
                objectCache.insert(classStr(ProjectWBSSQLObjects), ApplicationSQLObjects::SQLObjectsCreatedKey, [true]);
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStoredProcedures</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Project WBS SQL stored procedures.
    /// </summary>
    /// <returns>
    /// true if the stored procedure creation commands were successful; otherwise, false.
    /// </returns>
    protected boolean createStoredProcedures()
    {
        boolean isSuccessful;

        isSuccessful = this.createWBSIDFromTaskIDProc();

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFunctions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Project WBS SQL function.
    /// </summary>
    /// <returns>
    /// true if the function creation commands were successful; otherwise, false.
    /// </returns>
    public boolean createFunctions()
    {
        boolean isSuccessful;

        isSuccessful = this.createProjectWBSIDFunction();

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWBSIDFromTaskIDProc</Name>
				<Source><![CDATA[
    private boolean createWBSIDFromTaskIDProc()
    {
        boolean isSuccessful;
        str sqlStatementText;

        // Drop the stored procedure.
        isSuccessful = this.dropProcedure(WBSIDFromTaskIDProc);

        if (isSuccessful)
        {
            sqlStatementText = this.getWBSIDFromTaskIDSql();
            isSuccessful = this.executeSqlStatement(sqlStatementText);
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectWBSIDFunction</Name>
				<Source><![CDATA[
    private boolean createProjectWBSIDFunction()
    {
        boolean isSuccessful;
        str sqlStatementText;

        // Drop the function.
        isSuccessful = this.dropFunction(ProjectWBSIDFunc);

        if (isSuccessful)
        {
            sqlStatementText = this.getProjectWBSIdSql();
            isSuccessful = this.executeSqlStatement(sqlStatementText);
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWBSIDFromTaskIDSql</Name>
				<Source><![CDATA[
    private str getWBSIDFromTaskIDSql()
    {
        str sqlStatementText;

        sqlStatementText = @"

        CREATE PROCEDURE ProjectGetWBSIDFromTaskID
        (
             @PartitionId                   BIGINT
            ,@DataAreaId                    NVARCHAR(8)
            ,@HierarchyId					NVARCHAR(50)
            ,@TaskId						INT
        )

        AS

        SET NOCOUNT ON

        DECLARE @ParentTaskId INT
        DECLARE @WBSID NVARCHAR(50)
        DECLARE @SiblingNumber NUMERIC
        DECLARE @Counter INT

        SET @WBSID = ''
        SET @Counter = 0

        WHILE (1= 1)
        BEGIN
            SELECT @ParentTaskId = PARENTHIERARCHYTASKID, @SiblingNumber = CONVERT(INT, TASKSIBLINGNUMBER)
                    FROM PROJPLANVERSION WITH (NOLOCK)
                WHERE PARTITION = @PartitionId AND
                      DATAAREAID = @DataAreaId AND
                      HIERARCHYID = @HierarchyId AND
                      HIERARCHYTASKID = @TaskId

            SET @TaskId = ISNULL(@ParentTaskId, 0)

            IF (@TaskId = 0)
                BREAK;

            IF (@WBSID = '')
                SET @WBSID = CONVERT(NVARCHAR(50),@SiblingNumber)
            ELSE
                SET @WBSID = CONVERT(NVARCHAR(50),@SiblingNumber) + '.' + @WBSID

            IF (@TaskId = 1)
                BREAK;

            -- Infinite loop prevention
            SET @Counter = @Counter + 1

            IF (@Counter > 1000)
                BREAK;
        END

        SELECT @WBSID AS WBSID";

        return sqlStatementText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectWBSIdSql</Name>
				<Source><![CDATA[
    private str getProjectWBSIdSql()
    {
        str sqlStatementText;

        sqlStatementText = @"

        CREATE FUNCTION ProjectCalculateWBSId
        (
             @PartitionId                   BIGINT
            ,@DataAreaId                    NVARCHAR(8)
            ,@HierarchyId					NVARCHAR(50)
            ,@TaskId						INT
        )

        RETURNS NVARCHAR(50)

        AS
        BEGIN
        DECLARE @ParentTaskId INT
        DECLARE @WBSID NVARCHAR(50)
        DECLARE @SiblingNumber NUMERIC
        DECLARE @Counter INT

        SET @WBSID = ''
        SET @Counter = 0

        WHILE (1= 1)
        BEGIN
            SELECT @ParentTaskId = PARENTHIERARCHYTASKID, @SiblingNumber = CONVERT(INT, TASKSIBLINGNUMBER)
                    FROM PROJPLANVERSION WITH (NOLOCK)
                WHERE PARTITION = @PartitionId AND
                      DATAAREAID = @DataAreaId AND
                      HIERARCHYID = @HierarchyId AND
                      HIERARCHYTASKID = @TaskId

            SET @TaskId = ISNULL(@ParentTaskId, 0)

            IF (@TaskId = 0)
                BREAK;

            IF (@WBSID = '')
                SET @WBSID = CONVERT(NVARCHAR(50),@SiblingNumber)
            ELSE
                SET @WBSID = CONVERT(NVARCHAR(50),@SiblingNumber) + '.' + @WBSID

            IF (@TaskId = 1)
                BREAK;

            -- Infinite loop prevention
            SET @Counter = @Counter + 1

            IF (@Counter > 1000)
                BREAK;
        END

        RETURN @WBSID
        END";

    return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>