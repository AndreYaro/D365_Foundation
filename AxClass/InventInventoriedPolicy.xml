<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoriedPolicy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventInventoriedPolicy</c> class governs the relation from the <c>InventTable</c> table to
///    the inventoried policy that is specified by the <c>StockedProduct</c> field in the
///    <c>InventModelGroup</c> table.
/// </summary>
/// <remarks>
///    This class is an abstract class and child classes will implement the checks on the
///    <c>InventTable</c> or <c>InventModelGroup</c> table.
/// </remarks>
abstract public class InventInventoriedPolicy
{
    InventModelGroup inventModelGroup;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPolicyForProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the policy on the <c>InventModelGroup</c> object is compatible with the product and
    ///    whether the policy can be changed.
    /// </summary>
    /// <param name="_productRecId">
    ///    The product to validate the selected policy against.
    /// </param>
    /// <param name="_origModelGroupId">
    ///    The currently selected item model group.
    /// </param>
    /// <returns>
    ///    true if the policy can be changed and is valid for the product; otherwise, false.
    /// </returns>
    public boolean checkPolicyForProduct(RefRecId _productRecId, InventModelGroupId _origModelGroupId)
    {
        EcoResProduct               product     = EcoResProduct::find(_productRecId);
        EcoResProductType           productType = product.ProductType;
        boolean                     ret = true;

        if (ret
            && !inventModelGroup.isStocked()
            && !product.isSupportedForNonInventoriedItems())
        {
            // Items based on a product to be configured using the Product configurator/Product Builder are not allowed for non-inventoried items
            ret = checkFailed(strFmt("@SYS303211", inventModelGroup.ModelGroupId));
        }
        if (ret && _origModelGroupId)
        {
            InventModelGroup origInventModelGroup = InventModelGroup::find(_origModelGroupId);
            // Check for policy change.
            if (inventModelGroup.StockedProduct != origInventModelGroup.StockedProduct)
            {
                if (productType == EcoResProductType::Service
                    && origInventModelGroup.StockedProduct)
                {
                    ret = checkFailed("@SYS324590");
                }
                else
                {
                    ret = checkFailed("@SYS183561");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventModelGroup</Name>
				<Source><![CDATA[
    public InventModelGroup parmInventModelGroup(InventModelGroup _inventModelGroup = inventModelGroup)
    {
        inventModelGroup = _inventModelGroup;

        return inventModelGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validate the changes to the inventoried policy in the <c>InventModelGroup</c> table relative to the
    ///    <c>InventTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    ///    The field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    ///    The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    ///    true if the values are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in derived classes to validate fields on either the
    ///    <c>InventModelGroup</c> or <c>InventTable</c> table.
    /// </remarks>
    abstract public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoriedRangeToInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range to the <paramref name="_inventTableQBDS" /> parameter to select only inventoried items.
    /// </summary>
    /// <param name="_inventTableQBDS">
    ///    The <c>QueryBuildDataSource</c> to add the range to.
    /// </param>
    /// <remarks>
    ///    The added range that is on an item model group is joined with the <c>InventTable</c> table.
    /// </remarks>
    public static void addInventoriedRangeToInventTable(QueryBuildDataSource _inventTableQBDS)
    {
        InventInventoriedPolicy::addStockedProductRangeToInventTable(_inventTableQBDS, queryValue(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNonStockedRangeToInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range to the <paramref name="_inventTableQBDS" /> parameter to select only non-stocked items.
    /// </summary>
    /// <param name="_inventTableQBDS">
    ///    The <c>QueryBuildDataSource</c> to which to add the range.
    /// </param>
    /// <remarks>
    ///    The added range is on an item model group exists joined with the <c>InventTable</c> table.
    /// </remarks>
    public static void addNonStockedRangeToInventTable(QueryBuildDataSource _inventTableQBDS)
    {
        InventInventoriedPolicy::addStockedProductRangeToInventTable(_inventTableQBDS, queryValue(NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStockedProductRangeToInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range for the <c>StockedProduct</c> field of the <c>InventModelGroup</c> table to the
    ///    <paramref name="_inventTableQBDS" /> parameter.
    /// </summary>
    /// <param name="_inventTableQBDS">
    ///    The <c>QueryBuildDataSource</c> to which to add the range.
    /// </param>
    /// <param name="_stockedProductValue">
    ///    The value to use on the <c>StockedProduct</c> range.
    /// </param>
    /// <remarks>
    ///    The added range that is on an item model group is joined with the <c>InventTable</c> table.
    /// </remarks>
    protected static void addStockedProductRangeToInventTable(
        QueryBuildDataSource _inventTableQBDS,
        str                  _stockedProductValue = '')
    {
        TableId tableId = _inventTableQBDS.table();

        if (tableId != tableNum(InventTable) &&
            tableId != tableNum(InventTableExpanded) &&
            tableId != tableNum(InventItemIdLookupSimpleView))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        QueryBuildDataSource inventModelGroupItem = _inventTableQBDS.addDataSource(tableNum(InventModelGroupItem));
        inventModelGroupItem.relations(true);
        inventModelGroupItem.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource inventModelGroup = inventModelGroupItem.addDataSource(tableNum(InventModelGroup));
        inventModelGroup.relations(true);
        inventModelGroup.joinMode(JoinMode::ExistsJoin);

        // Add an empty hidden range otherwise a range will be shown for ModelGroupId which is unwanted
        // since the join is only to filter non-inventoried lines.
        inventModelGroup.addRange(fieldNum(InventModelGroup, ModelGroupId)).status(RangeStatus::Hidden);

        if (_stockedProductValue != '')
        {
            QueryBuildRange inventModelRange = inventModelGroup.addRange(fieldNum(InventModelGroup,StockedProduct));
            inventModelRange.value(_stockedProductValue);
            inventModelRange.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
