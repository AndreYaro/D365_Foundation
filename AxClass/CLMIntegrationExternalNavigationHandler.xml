<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationExternalNavigationHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CLMIntegrationExternalNavigationHandler</c> class is an abstract class with core logic
/// of handling the external navigation for CLM integration.
/// </summary>
public abstract class CLMIntegrationExternalNavigationHandler
{
    protected CLMIntegrationNavigationType navigationType;
    protected Set supportedTableFields;
    protected Common contextRecord;

    private const char PlaceholderMark = '%';
    private const char PlaceholderDelimiter = '.';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromNavigationType</Name>
				<Source><![CDATA[
    public static CLMIntegrationExternalNavigationHandler newFromNavigationType(CLMIntegrationNavigationType _navigationType)
    {
        CLMIntegrationExternalNavigationAttribute attribute = new CLMIntegrationExternalNavigationAttribute(_navigationType);

        CLMIntegrationExternalNavigationHandler navigationHandler = 
            SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CLMIntegrationExternalNavigationHandler), attribute)
            as CLMIntegrationExternalNavigationHandler;

        if (!navigationHandler)
        {
            throw error(strFmt("@CLMIntegration:NavigationTypeNotSupportedError", _navigationType));
        }

        navigationHandler.parmNavigationType(_navigationType);
        navigationHandler.initializeSupportedPlaceholders();

        return navigationHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (_args.parmEnumType() != enumNum(CLMIntegrationNavigationType))
        {
            throw error(strFmt("@CLMIntegration:NavigationEnumTypeNotSupportedError", enum2Str(_args.parmEnumType())));
        }

        if (!_args.record())
        {
            throw error("@CLMIntegration:NoTableContextProvidedError");
        }

        CLMIntegrationNavigationType navigationType = _args.parmEnum();

        CLMIntegrationExternalNavigationHandler navigation = CLMIntegrationExternalNavigationHandler::newFromNavigationType(navigationType);
        navigation.parmContextRecord(_args.record());
        navigation.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run()
    {
        Browser b = new Browser();
        b.navigate(this.createNavigationLink(), /* openInNewTab */ true, /* showExitWarning */ true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNavigationLink</Name>
				<Source><![CDATA[
    internal URL createNavigationLink()
    {
        CLMIntegrationExternalNavigationLink navigationLink = CLMIntegrationExternalNavigationLink::findByNavigationType(this.navigationType);
        CLMIntegrationServiceInstance serviceInstance = navigationLink.serviceInstance();

        str baseURL = serviceInstance.ExternalNavigationBaseURL ? serviceInstance.ExternalNavigationBaseURL : serviceInstance.BaseURL;

        str url = CLMIntegrationUtilities::getAbsoluteUriFromRelativeUri(baseURL, navigationLink.RelativeURL, false);
        url = CLMIntegrationUtilities::getUriWithExternalNavigationLinkQueryParameters(navigationLink, url, this);

        return url;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces all placeholders from the parameter value with the actual values.
    /// 
    /// Examples of a parameter value:
    ///  - %CLMIntegrationContractTable.ContractId%
    ///  - FixedValue%CLMIntegrationContractTable.ContractId%-%CLMIntegrationContractTable.Type%OtherFixedValue
    /// </summary>
    /// <param name = "_parameterValue">Query string parameter value.</param>
    /// <returns>Query string parameter with filled data.</returns>
    internal str replacePlaceholders(str _parameterValue)
    {
        // No placeholders, skip the logic and return original value
        if (!strContains(_parameterValue, PlaceholderMark))
        {
            return _parameterValue;
        }

        List split = strSplit(_parameterValue, PlaceholderMark);

        ListIterator it = new ListIterator(split);
        str queryParameterValue = '';
        int counter = 1;

        while (it.more())
        {
            if (counter mod 2 != 0)
            {
                queryParameterValue += it.value();
            }
            else
            {
                str placeholder = it.value();

                if (!supportedTableFields.in(placeholder))
                {
                    throw error(strFmt("@CLMIntegration:PlaceholderNotSupported", placeholder));
                }

                queryParameterValue += this.replacePlaceholderWithValue(placeholder);
            }

            counter++;
            it.next();
        }

        return queryParameterValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlaceholderList</Name>
				<Source><![CDATA[
    internal container getPlaceholderList()
    {
        container lookup;
        SetIterator it = new SetIterator(supportedTableFields);

        while (it.more())
        {
            str placeholder = it.value();

            lookup += PlaceholderMark + placeholder + PlaceholderMark;

            it.next();
        }

        return lookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdAndFieldIdFromPlaceholder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected container getTableIdAndFieldIdFromPlaceholder(str _placeholder)
    {
        List split = strSplit(_placeholder, placeholderDelimiter);

        if (split.elements() != 2)
        {
            throw error(strFmt("@CLMIntegration:IncorrectPlaceholderFormatError"), _placeholder);
        }

        ListIterator it = new ListIterator(split);

        TableId tableId = tableName2Id(it.value());
        it.next();
        FieldId fieldId = fieldName2Id(tableId, it.value());

        if (!tableId)
        {
            throw error(strFmt("@CLMIntegration:InvalidTableIdError", _placeholder));
        }

        if (!fieldId)
        {
            throw error(strFmt("@CLMIntegration:InvalidFieldIdError", _placeholder));
        }

        return [tableId, fieldId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlaceholderStringForTableField</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected str createPlaceholderStringForTableField(TableId _tableId, FieldId _fieldId)
    {
        return tableId2Name(_tableId) + placeholderDelimiter + fieldId2Name(_tableId, _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>replacePlaceholderWithValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// An abstract method which should be implemented in the derived class to replace the placeholder with the actual value.
    /// </summary>
    /// <param name = "_placeholder">Placeholder string.</param>
    /// <returns>Actual value based on the data.</returns>
    protected abstract str replacePlaceholderWithValue(str _placeholder)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSupportedPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// An abstract method which should be implemented in the derived class to initialize the supported placeholders.
    /// </summary>
    protected abstract void initializeSupportedPlaceholders()
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNavigationType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public CLMIntegrationNavigationType parmNavigationType(CLMIntegrationNavigationType _navigationType = navigationType)
    {
        navigationType = _navigationType;
        return navigationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContextRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common parmContextRecord(Common _contextRecord = contextRecord)
    {
        contextRecord = _contextRecord;
        return contextRecord;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>