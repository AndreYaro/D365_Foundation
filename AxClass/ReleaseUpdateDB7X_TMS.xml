<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB7X_TMS</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class ReleaseUpdateDB7X_TMS extends ReleaseUpdateDB
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>commonDeleteDuplicatesTMSBreakDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSBreakDetail</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSBreakDetail()
    {
        TMSBreakDetail  breakDetail;
        TMSBreakDetail  breakDetailDuplicate;

        // Find duplicates
        while select BreakMasterCode, Value, minof(RecId) from breakDetail
            group by BreakMasterCode, Value
            exists join breakDetailDuplicate
                where breakDetailDuplicate.BreakMasterCode  == breakDetail.BreakMasterCode
                    && breakDetailDuplicate.Value           == breakDetail.Value
                    && breakDetailDuplicate.RecId           != breakDetail.RecId
        {
            this.deleteRecordDuplicatesTMSBreakDetail(breakDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSBreakDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_breakDetail">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSBreakDetail(TMSBreakDetail _breakDetail)
    {
        ttsbegin;
        
        TMSBreakDetail breakDetailDuplicate;

        this.callInsertUpdateRelatedSkipMethods(breakDetailDuplicate);

        delete_from breakDetailDuplicate
            where breakDetailDuplicate.BreakMasterCode  == _breakDetail.BreakMasterCode
                && breakDetailDuplicate.Value           == _breakDetail.Value
                && breakDetailDuplicate.RecId           != _breakDetail.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDeleteDuplicatesTMSTransitTimeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSTransitTimeDetail</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSTransitTimeDetail()
    {
        TMSTransitTimeDetail transitTimeDetail;
        TMSTransitTimeDetail transitTimeDetailDuplicate;

        // Find duplicates
        while select TransitTimeEngineCode, Service, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, Dimension7, Dimension8, Dimension9, Dimension10, minof(RecId)
			from transitTimeDetail
            group by TransitTimeEngineCode, Service, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, Dimension7, Dimension8, Dimension9, Dimension10
            exists join transitTimeDetailDuplicate
                where transitTimeDetailDuplicate.TransitTimeEngineCode  == transitTimeDetail.TransitTimeEngineCode
                    && transitTimeDetailDuplicate.Service               == transitTimeDetail.Service
                    && transitTimeDetailDuplicate.Dimension1            == transitTimeDetail.Dimension1
                    && transitTimeDetailDuplicate.Dimension2            == transitTimeDetail.Dimension2
                    && transitTimeDetailDuplicate.Dimension3            == transitTimeDetail.Dimension3
                    && transitTimeDetailDuplicate.Dimension4            == transitTimeDetail.Dimension4
                    && transitTimeDetailDuplicate.Dimension5            == transitTimeDetail.Dimension5
                    && transitTimeDetailDuplicate.Dimension6            == transitTimeDetail.Dimension6
                    && transitTimeDetailDuplicate.Dimension7            == transitTimeDetail.Dimension7
                    && transitTimeDetailDuplicate.Dimension8            == transitTimeDetail.Dimension8
                    && transitTimeDetailDuplicate.Dimension9            == transitTimeDetail.Dimension9
                    && transitTimeDetailDuplicate.Dimension10           == transitTimeDetail.Dimension10
                    && transitTimeDetailDuplicate.RecId                 != transitTimeDetail.RecId
        {
            this.deleteRecordDuplicatesTMSTransitTimeDetail(transitTimeDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSTransitTimeDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_transitTimeDetail">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSTransitTimeDetail(TMSTransitTimeDetail _transitTimeDetail)
    {
        ttsbegin;

        TMSTransitTimeDetail transitTimeDetailDuplicate;

        this.callInsertUpdateRelatedSkipMethods(transitTimeDetailDuplicate);

        delete_from transitTimeDetailDuplicate
            where transitTimeDetailDuplicate.TransitTimeEngineCode  == _transitTimeDetail.TransitTimeEngineCode
                && transitTimeDetailDuplicate.Service               == _transitTimeDetail.Service
                && transitTimeDetailDuplicate.Dimension1            == _transitTimeDetail.Dimension1
                && transitTimeDetailDuplicate.Dimension2            == _transitTimeDetail.Dimension2
                && transitTimeDetailDuplicate.Dimension3            == _transitTimeDetail.Dimension3
                && transitTimeDetailDuplicate.Dimension4            == _transitTimeDetail.Dimension4
                && transitTimeDetailDuplicate.Dimension5            == _transitTimeDetail.Dimension5
                && transitTimeDetailDuplicate.Dimension6            == _transitTimeDetail.Dimension6
                && transitTimeDetailDuplicate.Dimension7            == _transitTimeDetail.Dimension7
                && transitTimeDetailDuplicate.Dimension8            == _transitTimeDetail.Dimension8
                && transitTimeDetailDuplicate.Dimension9            == _transitTimeDetail.Dimension9
                && transitTimeDetailDuplicate.Dimension10           == _transitTimeDetail.Dimension10
                && transitTimeDetailDuplicate.RecId                 != _transitTimeDetail.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDeleteDuplicatesTMSCarrierTransportationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSCarrierTransportationStatus</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSCarrierTransportationStatus()
    {
        TMSCarrierTransportationStatus  carrierTransportationStatus;
        TMSCarrierTransportationStatus  carrierTransportationStatusDuplicate;

        // Find duplicates
        while select CarrierCode, CarrierServiceCode, ExternalCode, minof(RecId) from carrierTransportationStatus
            group by CarrierCode, CarrierServiceCode, ExternalCode
            exists join carrierTransportationStatusDuplicate
                where carrierTransportationStatusDuplicate.CarrierCode          == carrierTransportationStatus.CarrierCode
                    && carrierTransportationStatusDuplicate.CarrierServiceCode  == carrierTransportationStatus.CarrierServiceCode
                    && carrierTransportationStatusDuplicate.ExternalCode        == carrierTransportationStatus.ExternalCode
                    && carrierTransportationStatusDuplicate.RecId               != carrierTransportationStatus.RecId
        {
            this.deleteRecordDuplicatesTMSCarrierTransportationStatus(carrierTransportationStatus);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSCarrierTransportationStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_carrierTransportationStatus">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSCarrierTransportationStatus(TMSCarrierTransportationStatus _carrierTransportationStatus)
    {
        ttsbegin;

        TMSCarrierTransportationStatus carrierTransportationStatusDuplicate;

        this.callInsertUpdateRelatedSkipMethods(carrierTransportationStatusDuplicate);

        delete_from carrierTransportationStatusDuplicate
            where carrierTransportationStatusDuplicate.CarrierCode          == _carrierTransportationStatus.CarrierCode
                && carrierTransportationStatusDuplicate.CarrierServiceCode  == _carrierTransportationStatus.CarrierServiceCode
                && carrierTransportationStatusDuplicate.ExternalCode        == _carrierTransportationStatus.ExternalCode
                && carrierTransportationStatusDuplicate.RecId               != _carrierTransportationStatus.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDeleteDuplicatesTMSEngineParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSEngineParameter</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSEngineParameter()
    {
        TMSEngineParameter engineParameter;
        TMSEngineParameter engineParameterDuplicate;

        // Find duplicates
        while select Engine, EngineCode, ParamName, minof(RecId) from engineParameter
            group by Engine, EngineCode, ParamName
            exists join engineParameterDuplicate
                where engineParameterDuplicate.Engine       == engineParameter.Engine
                    && engineParameterDuplicate.EngineCode  == engineParameter.EngineCode
                    && engineParameterDuplicate.ParamName   == engineParameter.ParamName
                    && engineParameterDuplicate.RecId       != engineParameter.RecId
        {
            this.deleteRecordDuplicatesTMSEngineParameter(engineParameter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSEngineParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_engineParameter">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSEngineParameter(TMSEngineParameter _engineParameter)
    {
        ttsbegin;

        TMSEngineParameter engineParameterDuplicate;
		
        this.callInsertUpdateRelatedSkipMethods(engineParameterDuplicate);
		
        delete_from engineParameterDuplicate
            where engineParameterDuplicate.Engine       == _engineParameter.Engine
                && engineParameterDuplicate.EngineCode  == _engineParameter.EngineCode
                && engineParameterDuplicate.ParamName   == _engineParameter.ParamName
                && engineParameterDuplicate.RecId       != _engineParameter.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDeleteDuplicatesTMSRateBaseAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSRateBaseAssignment</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSRateBaseAssignment()
    {
        TMSRateBaseAssignment rateBaseAssignment;
        TMSRateBaseAssignment rateBaseAssignmentDuplicate;

        // Find duplicates
        while select RateMasterCode, Service, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, EffectiveUTCDateTimeFrom, EffectiveUTCDateTimeTo, minof(RecId)
            from rateBaseAssignment
            group by RateMasterCode, Service, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, EffectiveUTCDateTimeFrom, EffectiveUTCDateTimeTo
            exists join rateBaseAssignmentDuplicate
                where rateBaseAssignmentDuplicate.RateMasterCode            == rateBaseAssignment.RateMasterCode
                    && rateBaseAssignmentDuplicate.Service                  == rateBaseAssignment.Service
                    && rateBaseAssignmentDuplicate.Dimension1               == rateBaseAssignment.Dimension1
                    && rateBaseAssignmentDuplicate.Dimension2               == rateBaseAssignment.Dimension2
                    && rateBaseAssignmentDuplicate.Dimension3               == rateBaseAssignment.Dimension3
                    && rateBaseAssignmentDuplicate.Dimension4               == rateBaseAssignment.Dimension4
                    && rateBaseAssignmentDuplicate.Dimension5               == rateBaseAssignment.Dimension5
                    && rateBaseAssignmentDuplicate.Dimension6               == rateBaseAssignment.Dimension6
                    && rateBaseAssignmentDuplicate.EffectiveUTCDateTimeFrom == rateBaseAssignment.EffectiveUTCDateTimeFrom
                    && rateBaseAssignmentDuplicate.EffectiveUTCDateTimeTo   == rateBaseAssignment.EffectiveUTCDateTimeTo
                    && rateBaseAssignmentDuplicate.RecId                    != rateBaseAssignment.RecId
        {
            this.deleteRecordDuplicatesTMSRateBaseAssignment(rateBaseAssignment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSRateBaseAssignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_rateBaseAssignment">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSRateBaseAssignment(TMSRateBaseAssignment _rateBaseAssignment)
    {
        ttsbegin;

        TMSRateBaseAssignment rateBaseAssignmentDuplicate;

        this.callInsertUpdateRelatedSkipMethods(rateBaseAssignmentDuplicate);

        delete_from rateBaseAssignmentDuplicate
            where rateBaseAssignmentDuplicate.RateMasterCode            == _rateBaseAssignment.RateMasterCode
                && rateBaseAssignmentDuplicate.Service                  == _rateBaseAssignment.Service
                && rateBaseAssignmentDuplicate.Dimension1               == _rateBaseAssignment.Dimension1
                && rateBaseAssignmentDuplicate.Dimension2               == _rateBaseAssignment.Dimension2
                && rateBaseAssignmentDuplicate.Dimension3               == _rateBaseAssignment.Dimension3
                && rateBaseAssignmentDuplicate.Dimension4               == _rateBaseAssignment.Dimension4
                && rateBaseAssignmentDuplicate.Dimension5               == _rateBaseAssignment.Dimension5
                && rateBaseAssignmentDuplicate.Dimension6               == _rateBaseAssignment.Dimension6
                && rateBaseAssignmentDuplicate.EffectiveUTCDateTimeFrom == _rateBaseAssignment.EffectiveUTCDateTimeFrom
                && rateBaseAssignmentDuplicate.EffectiveUTCDateTimeTo   == _rateBaseAssignment.EffectiveUTCDateTimeTo
                && rateBaseAssignmentDuplicate.RecId                    != _rateBaseAssignment.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDeleteDuplicatesTMSZoneMasterDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSZoneMasterDetail</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSZoneMasterDetail()
    {
        TMSZoneMasterDetail zoneMasterDetail;
        TMSZoneMasterDetail zoneMasterDetailDuplicate;

        // Find duplicates
        while select ZoneMasterCode, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, Dimension7, Dimension8, minof(RecId)
			from zoneMasterDetail
            group by ZoneMasterCode, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, Dimension7, Dimension8
            exists join zoneMasterDetailDuplicate
                where zoneMasterDetailDuplicate.ZoneMasterCode  == zoneMasterDetail.ZoneMasterCode
                    && zoneMasterDetailDuplicate.Dimension1     == zoneMasterDetail.Dimension1
                    && zoneMasterDetailDuplicate.Dimension2     == zoneMasterDetail.Dimension2
                    && zoneMasterDetailDuplicate.Dimension3     == zoneMasterDetail.Dimension3
                    && zoneMasterDetailDuplicate.Dimension4     == zoneMasterDetail.Dimension4
                    && zoneMasterDetailDuplicate.Dimension5     == zoneMasterDetail.Dimension5
                    && zoneMasterDetailDuplicate.Dimension6     == zoneMasterDetail.Dimension6
                    && zoneMasterDetailDuplicate.Dimension7     == zoneMasterDetail.Dimension7
                    && zoneMasterDetailDuplicate.Dimension8     == zoneMasterDetail.Dimension8
                    && zoneMasterDetailDuplicate.RecId          != zoneMasterDetail.RecId
        {
            this.deleteRecordDuplicatesTMSZoneMasterDetail(zoneMasterDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSZoneMasterDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_zoneMasterDetail">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSZoneMasterDetail(TMSZoneMasterDetail _zoneMasterDetail)
    {
        ttsbegin;

        TMSZoneMasterDetail zoneMasterDetailDuplicate;

        this.callInsertUpdateRelatedSkipMethods(zoneMasterDetailDuplicate);

        delete_from zoneMasterDetailDuplicate
            where zoneMasterDetailDuplicate.ZoneMasterCode  == _zoneMasterDetail.ZoneMasterCode
                && zoneMasterDetailDuplicate.Dimension1     == _zoneMasterDetail.Dimension1
                && zoneMasterDetailDuplicate.Dimension2     == _zoneMasterDetail.Dimension2
                && zoneMasterDetailDuplicate.Dimension3     == _zoneMasterDetail.Dimension3
                && zoneMasterDetailDuplicate.Dimension4     == _zoneMasterDetail.Dimension4
                && zoneMasterDetailDuplicate.Dimension5     == _zoneMasterDetail.Dimension5
                && zoneMasterDetailDuplicate.Dimension6     == _zoneMasterDetail.Dimension6
                && zoneMasterDetailDuplicate.Dimension7     == _zoneMasterDetail.Dimension7
                && zoneMasterDetailDuplicate.Dimension8     == _zoneMasterDetail.Dimension8
                && zoneMasterDetailDuplicate.RecId          != _zoneMasterDetail.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonDeleteDuplicatesTMSMileageDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove duplicated records from the <c>TMSMileageDetail</c> table.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void commonDeleteDuplicatesTMSMileageDetail()
    {
        TMSMileageDetail mileageDetail;
        TMSMileageDetail mileageDetailDuplicate;

        // Find duplicates
        while select MileageEngineCode, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, Dimension7, Dimension8, minOf(RecId)
			from mileageDetail
            group by MileageEngineCode, Dimension1, Dimension2, Dimension3, Dimension4, Dimension5, Dimension6, Dimension7, Dimension8
            exists join mileageDetailDuplicate
                where mileageDetailDuplicate.MileageEngineCode  == mileageDetail.MileageEngineCode
                    && mileageDetailDuplicate.Dimension1        == mileageDetail.Dimension1
                    && mileageDetailDuplicate.Dimension2        == mileageDetail.Dimension2
                    && mileageDetailDuplicate.Dimension3        == mileageDetail.Dimension3
                    && mileageDetailDuplicate.Dimension4        == mileageDetail.Dimension4
                    && mileageDetailDuplicate.Dimension5        == mileageDetail.Dimension5
                    && mileageDetailDuplicate.Dimension6        == mileageDetail.Dimension6
                    && mileageDetailDuplicate.Dimension7        == mileageDetail.Dimension7
                    && mileageDetailDuplicate.Dimension8        == mileageDetail.Dimension8
                    && mileageDetailDuplicate.RecId             != mileageDetail.RecId
        {
            this.deleteRecordDuplicatesTMSMileageDetail(mileageDetail);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecordDuplicatesTMSMileageDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all duplicates for the specified record.
    /// </summary>
    /// <param name = "_mileageDetail">Record for which the duplicates are deleted.</param>
    private void deleteRecordDuplicatesTMSMileageDetail(TMSMileageDetail _mileageDetail)
    {
        ttsbegin;

        TMSMileageDetail mileageDetailDuplicate;

        this.callInsertUpdateRelatedSkipMethods(mileageDetailDuplicate);

        delete_from mileageDetailDuplicate
            where mileageDetailDuplicate.MileageEngineCode  == _mileageDetail.MileageEngineCode
                && mileageDetailDuplicate.Dimension1        == _mileageDetail.Dimension1
                && mileageDetailDuplicate.Dimension2        == _mileageDetail.Dimension2
                && mileageDetailDuplicate.Dimension3        == _mileageDetail.Dimension3
                && mileageDetailDuplicate.Dimension4        == _mileageDetail.Dimension4
                && mileageDetailDuplicate.Dimension5        == _mileageDetail.Dimension5
                && mileageDetailDuplicate.Dimension6        == _mileageDetail.Dimension6
                && mileageDetailDuplicate.Dimension7        == _mileageDetail.Dimension7
                && mileageDetailDuplicate.Dimension8        == _mileageDetail.Dimension8
                && mileageDetailDuplicate.RecId             != _mileageDetail.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>