<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimLPCleanupUpdateRefTableTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Should be deprecated after flight InventDimLPCleanupBundleUpdateRefTablesFlight is removed', false, 28\06\2024)]
public class InventDimLPCleanupUpdateRefTableTask extends InventDimLPCleanupInventDimIdRefTableUpdater
{
    private List taskList;

    #DEFINE.CURRENTVERSION(1)
    #LOCALMACRO.CurrentList
        inventDimIdFrom,
        inventDimIdTo
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventDimLPCleanupUpdateRefTableTask),
                                                          staticMethodStr(InventDimLPCleanupUpdateRefTableTask, runOperationAsync),
                                                          [this.pack()]);
        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimLPCleanupUpdateRefTableTask construct()
    {
        return new InventDimLPCleanupUpdateRefTableTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventDimLPCleanupUpdateRefTableTask newParameters(List _taskList, InventDimId _inventDimIdFrom, InventDimId _inventDimIdTo)
    {
        InventDimLPCleanupUpdateRefTableTask refTableTaskUpdater = InventDimLPCleanupUpdateRefTableTask::construct();
        refTableTaskUpdater.parmInventDimIdFrom(_inventDimIdFrom);
        refTableTaskUpdater.parmInventDimIdTo(_inventDimIdTo);
        refTableTaskUpdater.parmTaskList(_taskList);
        return refTableTaskUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static container runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        InventDimLPCleanupUpdateRefTableTask updateRefTableTask = new InventDimLPCleanupUpdateRefTableTask();
        container packedUpdateRefTableTask;

        try
        {
            [packedUpdateRefTableTask] = params;
            updateRefTableTask.unpack(packedUpdateRefTableTask);
            updateRefTableTask.execute();
            return [true];
        }
        catch
        {
            return [false];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    private void execute()
    {
        System.Exception ex;
        ListEnumerator taskEnumerator = taskList.getEnumerator();
        boolean allSuccess = true;

        while (taskEnumerator.moveNext())
        {
            TableId tableId;
            FieldId inventDimIdFieldId, dataAreaIdFieldId;
            try
            {
                [tableId, inventDimIdFieldId, dataAreaIdFieldId] = taskEnumerator.current();
                this.updateReferenceTable(tableId2Name(tableId), inventDimIdFieldId, dataAreaIdFieldId, inventDimIdFrom, inventDimIdTo);
            }
            catch (Exception::DuplicateKeyException)
            {
                // Ignore the duplicate key error
            }
            catch (ex)
            {
                warning(strFmt("@SCM:InventDimLPCleanupUpdateRefTableException", tableId2Name(tableId), inventDimIdFrom, inventDimIdTo));
                warning(ex.Message);
                allSuccess = false;
            }
        }

        if (!allSuccess)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaskList</Name>
				<Source><![CDATA[
    public List parmTaskList(List _taskList = taskList)
    {
        taskList = _taskList;
        return taskList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, taskList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);
        container taskListContainer;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, taskListContainer] = _packedClass;
                break;
            default:
                return false;
        }

        taskList = List::create(taskListContainer);

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>