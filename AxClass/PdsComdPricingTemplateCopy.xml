<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingTemplateCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PdsComdPricingTemplateCopy extends RunBase
{
    PdsComdPricingTemplateId    comdPricingTemplateIdCopyTo;
    PdsComdPricingTemplateId    comdPricingTemplateIdCopyFrom;
    DialogField                 dialogFieldTemplateCopyFrom;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        comdPricingTemplateIdCopyFrom,
        comdPricingTemplateIdCopyTo
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildCopyProgressTracker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a visual progress indicator to keep track of the progress of the copy process.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>SysOperationProgress</c> class.
    /// </returns>
    protected  SysOperationProgress buildCopyProgressTracker()
    {
        return SysOperationProgress::newGeneral(
            #AviFileCopy,
            strfmt("@PDS523", this.parmComdPricingTemplateIdCopyFrom()),
            0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the dialog to be presented to the user.
    /// </summary>
    /// <returns>
    ///     An object of the <c>DialogRunbase</c> class.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase   dialog;
        DialogField     fieldTemplateCopyFrom;
        Object          fieldTemplateCopyFromObj;

        dialog                      = new DialogRunbase("@PDS522", this);
        fieldTemplateCopyFrom       = dialog.addField(extendedtypestr(PdsComdPricingTemplateId));
        fieldTemplateCopyFromObj    = fieldTemplateCopyFrom.control();

        this.parmDialogFieldTemplateCopyFrom(fieldTemplateCopyFrom);

        fieldTemplateCopyFromObj.registerOverrideMethod(
            methodstr(FormStringControl, Lookup),
            methodstr(PdsComdPricingTemplateCopy, templateLookup),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes this instance of the <c>PdsComdPricingTemplateCopy</c> class.
    /// </summary>
    protected void execute()
    {
        if (this.prompt())
        {
            this.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the selected values from the dialog.
    /// </summary>
    /// <returns>
    ///     true
    /// </returns>
    /// <remarks>
    ///     Validation of the values is done by the <c>validate</c> method.
    /// </remarks>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmComdPricingTemplateIdCopyFrom(this.parmDialogFieldTemplateCopyFrom().value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComdPricingTemplateIdCopyFrom</Name>
				<Source><![CDATA[
    public PdsComdPricingTemplateId parmComdPricingTemplateIdCopyFrom(
        PdsComdPricingTemplateId _comdPricingTemplateIdCopyFrom = comdPricingTemplateIdCopyFrom)
    {
        comdPricingTemplateIdCopyFrom = _comdPricingTemplateIdCopyFrom;

        return comdPricingTemplateIdCopyFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComdPricingTemplateIdCopyTo</Name>
				<Source><![CDATA[
    public PdsComdPricingTemplateId parmComdPricingTemplateIdCopyTo(
        PdsComdPricingTemplateId _comdPricingTemplateIdCopyTo = comdPricingTemplateIdCopyTo)
    {
        comdPricingTemplateIdCopyTo = _comdPricingTemplateIdCopyTo;

        return comdPricingTemplateIdCopyTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogFieldTemplateCopyFrom</Name>
				<Source><![CDATA[
    public DialogField parmDialogFieldTemplateCopyFrom(
        DialogField _dialogFieldTemplateCopyFrom = dialogFieldTemplateCopyFrom)
    {
        dialogFieldTemplateCopyFrom = _dialogFieldTemplateCopyFrom;

        return dialogFieldTemplateCopyFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the copy operation after the dialog is closed.
    /// </summary>
    public void run()
    {
        super();
        this.runCopy(this.buildCopyProgressTracker());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCopy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes the copy process between the templates defined in the current instance.
    /// </summary>
    /// <param name="_copyProgressTracker">
    ///     The progress tracker instance used to display the copy progress.
    /// </param>
    protected void runCopy( SysOperationProgress _copyProgressTracker )
    {
        PdsComdPricingTemplateLine::copyTemplate(
            this.parmComdPricingTemplateIdCopyTo(),
            this.parmComdPricingTemplateIdCopyFrom(),
            _copyProgressTracker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateLookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs a lookup for a template
    /// </summary>
    /// <param name="_callerControl">
    ///     The control where the lookup is called from.
    /// </param>
    /// <remarks>
    ///     The lookup excludes the values of the IDs which are not valid for the copy process.
    /// </remarks>
    public void templateLookup(Object  _callerControl)
    {
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(PdsComdPricingTemplate), _callerControl);
        Query                   query = new Query();
        QueryBuildDataSource    qbds                = query.addDataSource(tablenum(PdsComdPricingTemplate));
        QueryBuildRange         qbrSourceDifferent  = qbds.addRange(fieldnum(PdsComdPricingTemplate, PricingTemplateId));

        //destination cannot be source
        qbrSourceDifferent.value(SysQuery::valueNot(this.parmComdPricingTemplateIdCopyTo()));

        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingTemplate, PricingTemplateId));
        sysTableLookup.addLookupfield(fieldnum(PdsComdPricingTemplate, Description));

        //the source must have data to copy from
        qbds = qbds.addDataSource(tablenum(PdsComdPricingTemplateLine));
        qbds.addLink(fieldnum(PdsComdPricingTemplate, PricingTemplateId), fieldnum(PdsComdPricingTemplateLine, PricingTemplateId));
        qbds.joinMode(JoinMode::ExistsJoin);

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the arguments required to perform the copy operation between the templates are correct.
    /// </summary>
    /// <param name="_calledFrom">
    ///     The object that called the current method.
    /// </param>
    /// <returns>
    ///     true if the validation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     The validation method is redirected from this method to be performed on the server.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        return PdsComdPricingTemplateCopy::validateOnServer(
            this.parmComdPricingTemplateIdCopyFrom(),
            this.parmComdPricingTemplateIdCopyTo());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the <c>PdsComdPricingTemplateCopy</c> class based on the specified arguments.
    /// </summary>
    /// <param name="_args">
    ///     The instance of the <c>Args</c> class needed to initialize the object.
    /// </param>
    /// <returns>
    ///     An instance of the <c>PdsComdPricingTemplateCopy</c> class.
    /// </returns>
    protected static PdsComdPricingTemplateCopy construct(Args _args)
    {
        PdsComdPricingTemplate      templateRecord;
        PdsComdPricingTemplateCopy  pdsComdPricingTemplateCopy = new PdsComdPricingTemplateCopy();

        templateRecord = _args.record() as PdsComdPricingTemplate;
        pdsComdPricingTemplateCopy.parmComdPricingTemplateIdCopyTo(templateRecord.PricingTemplateId);

        return pdsComdPricingTemplateCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PdsComdPricingTemplateCopy pdsComdPricingTemplateCopy;

        //throws on error
        PdsComdPricingTemplateCopy::validateInitArguments(_args);

        pdsComdPricingTemplateCopy = PdsComdPricingTemplateCopy::construct(_args);
        pdsComdPricingTemplateCopy.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInitArguments</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the arguments used to initialize the class.
    /// </summary>
    /// <param name="_args">
    ///     The instance of the <c>Args</c> class to validate.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     The specified instance of the arguments is null.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     The record included in the arguments is not valid.
    /// </exception>
    public static void validateInitArguments(Args _args)
    {
        Common argsRecord;

        if (_args == null)
        {
            throw error(Error::missingParameter(null));
        }

        argsRecord = _args.record();
        if (!argsRecord || argsRecord.TableId != tablenum(PdsComdPricingTemplate))
        {
            throw error(Error::missingRecord(classstr(PdsComdPricingTemplateCopy)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that the source and destination IDs are valid values for a copy process between templates.
    /// </summary>
    /// <param name="_copyFrom">
    ///     The ID of the template to copy from.
    /// </param>
    /// <param name="_copyTo">
    ///     The ID of the template to copy to.
    /// </param>
    /// <returns>
    ///     true if the values are correct; otherwise, false.
    /// </returns>
    /// <remarks>
    ///     Validation is composed of three checks:
    ///         1- Value is not empty;
    ///         2- Source and target IDs are not the same;
    ///         3- Source template has data available;
    ///         4- Target template is empty and accepts data;
    /// </remarks>
    protected static boolean validateOnServer(
        PdsComdPricingTemplateId    _copyFrom,
        PdsComdPricingTemplateId    _copyTo)
    {
        if (!_copyFrom)
        {
            //the value in the field pricing template is not valid
            warning(strfmt("@SYS78966", "@PDS433"));
            return false;
        }

        if (_copyFrom == _copyTo)
        {
            //it is not possible to copy to the same template
            warning("@SYS54294");
            return false;
        }

        if (!PdsComdPricingTemplateLine::hasDataForTemplate(_copyFrom))
        {
            warning(strfmt("@PDS1387", _copyFrom));
            return false;
        }

        if (PdsComdPricingTemplateLine::hasDataForTemplate(_copyTo))
        {
            warning(strfmt("@PDS1388", _copyTo));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>