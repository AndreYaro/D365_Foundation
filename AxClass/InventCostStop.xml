<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostStop</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostStop</c> class stops a currently running inventory closing or recalculation.
/// </summary>
/// <remarks>
///    Then the <see cref="T:InventClosing" /> table is updated, the <c>StopRunning</c> field is selected.
///    The code in <see cref="M:InventCostHelp.run" /> will investigate whether the <c>StopRunning</c>
///    field is selected after calculation of an item. If the <c>StopRunning</c> field is selected, the
///    current inventory closing or recalculation is stopped.The stopped inventory closing or
///    recalculation can be restarted again by the class <see cref="T:InventCostHelp" />.
/// </remarks>
class InventCostStop extends RunBase
{
    // Parameters

    InventClosing   inventClosing;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        inventClosing
     #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an instance of a class that contains the methods that are described by the
    ///    <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    ///    An instance of a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </returns>
    /// <remarks>
    ///    A dialog box can be built by using the dialog system or by using a class created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        dialog.addText(strFmt("@SYS78039",inventClosing.AdjustmentType));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the <c>RunBase</c> class.
    /// </summary>
    /// <returns>
    ///    A container of packed values.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to reinitialize the class after it is constructed must be
    ///    packed.Typically, a macro that is declared in the
    ///    <c>
    ///       classDeclaration
    ///    </c>
    ///     method is used to list the variables to pack. Another macro holds a version number. This number
    ///    refers to the version of the variable list.When a new variable is introduced, you should typically
    ///    follow these steps:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>RunBase.unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       RunBase.isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may have to pack some prompt-related variables.
    /// </remarks>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventClosing</Name>
				<Source><![CDATA[
    public  InventClosing parmInventClosing(InventClosing _inventClosing = inventClosing)
    {
        inventClosing = _inventClosing;
        return inventClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        setPrefix(InventCostStop::description());

        try
        {
            CostManagementInstrumentationLogger instrumentationLogger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostLedgerPostingTask));
            using (var stopActivityContext = instrumentationLogger.inventoryClosingStopActivities().run(inventClosing))
            {
                ttsbegin;

                if (! this.validate())
                    throw error("@SYS18722");

                inventClosing = InventClosing::find(inventClosing.Voucher,inventClosing.TransDate,true);
                inventClosing.setStopRunning(NoYes::Yes);
                inventClosing.update();

                ttscommit;
            }

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>RunBase.pack</c> method packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>RunBase.isSwappingPrompt</c> method returns a value of true, you may have to unpack
    ///    some prompt-related variables also.
    /// </remarks>
    public  boolean unpack(container packedClass)
    {
        Integer     version      = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the state of internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. Default value is null.
    /// </param>
    /// <returns>
    ///    true.
    /// </returns>
    /// <remarks>
    ///    This method is called before closing the dialog, and should be called in the <c>run</c> method. It must only contain code that adds warnings to the Infolog.
    ///    The method should generally return errors
    ///    by using the <c>Global::CheckFailed</c> method. Do not use the <c>throw</c> statement in this method.
    /// </remarks>
    boolean validate(Object _calledFrom = null)
    {
        ttsbegin;

        inventClosing = InventClosing::find(inventClosing.Voucher,inventClosing.TransDate,true);

        ttscommit;

        if (! inventClosing.RecId || ! inventClosing.Active)
            return checkFailed("@SYS78045");

        if (inventClosing.InventCostStatus == InventCostStatus::Ended)
            return checkFailed(strFmt("@SYS78046",inventClosing.InventCostStatus));

        if (inventClosing.StopRunning)
            return checkFailed("@SYS78040");

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>InventCostStop</c> class.
    /// </returns>
    /// <remarks>
    ///    Use the following procedure to customize or extend the
    ///    <c>
    ///       InventCostStop
    ///    </c>
    ///     class.
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Create a new class that derives from the <c>InventCostStop</c> class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Overlayer the <c>construct</c> method on the <c>InventCostStop</c> class so that it returns an
    ///             instance of the derived class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Override the methods from the <c>InventCostStop</c> class that you want to customize or extend in
    ///             your derived class.
    ///          </description>
    ///       </item>
    ///    </list>
    ///     This procedure helps make sure that your customizations are maintained if the base version of the
    ///    <c>
    ///       InventCostStop
    ///    </c>
    ///     class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///    .
    /// </remarks>
    static InventCostStop construct()
    {
        return new InventCostStop();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS78024";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        if (! args || args.dataset() != tableNum(InventClosing))
            throw error(strFmt("@SYS29104",classStr(InventCostStop)));

        InventCostStop inventCostStop = InventCostStop::newInventClosing(args.record());

        if (inventCostStop.prompt())
            inventCostStop.runOperation();

        if (args && args.caller() && args.dataset() == tableNum(InventClosing))
        {
            InventClosing inventClosing = args.record();

            if (FormDataUtil::getFormDataSource(inventClosing))
            {
                FormDataUtil::getFormDataSource(inventClosing).reread();
                FormDataUtil::getFormDataSource(inventClosing).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventClosing</Name>
				<Source><![CDATA[
    static InventCostStop newInventClosing(InventClosing _inventClosing)
    {
        InventCostStop inventCostStop = InventCostStop::construct();

        inventCostStop.getLast();
        inventCostStop.parmInventClosing(_inventClosing);
        inventCostStop.init();

        return inventCostStop;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>