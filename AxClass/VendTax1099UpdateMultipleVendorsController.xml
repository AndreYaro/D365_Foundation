<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTax1099UpdateMultipleVendorsController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendTax1099UpdateMultipleVendorsController</c> class is the controller class for updating 1099 box and transactions for multiple vendors.
/// </summary>
internal final class VendTax1099UpdateMultipleVendorsController extends SysOperationServiceController
{
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args args)
    {
        try
        {
            if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoUS], curExt()))
            {
                return;
            }

            VendTax1099UpdateMultipleVendorsController controller = VendTax1099UpdateMultipleVendorsController::construct();

            if (controller.prompt())
            {
                controller.runOperation();
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendTax1099UpdateMultipleVendorsController construct()
    {
        return new VendTax1099UpdateMultipleVendorsController(
            classStr(VendTax1099UpdateMultipleVendorsProcessor),
            methodStr(VendTax1099UpdateMultipleVendorsProcessor, run),
            SysOperationExecutionMode::ScheduledBatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected ClassDescription defaultCaption()
    {
        return "@AccountsPayable:Update1099InformationForMultipleVendors";
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ClassDescription caption()
    {
        return this.defaultCaption();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showBatchTab</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean showBatchTab(boolean _showBatchTab = showBatchTab)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadFromSysLastValue</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean parmLoadFromSysLastValue(boolean _loadFromSysLastValue = loadFromSysLastValue)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret = super();
        VendTax1099UpdateMultipleVendorsContract contract = this.getDataContractObject();

        if (contract.parmDoUpdateVendorBox() && contract.parmNewTax1099Box() == '')
        {
            ret = checkFailed("@AccountsPayable:New1099BoxValueRequired");
        }

        if (!contract.parmDoUpdateVendorBox() && !contract.parmDoUpdateTransaction1099())
        {
            ret = checkFailed("@AccountsPayable:NotSelectUpdateButton");
        }

        if (contract.parmDoUpdateTransaction1099() && contract.parmFromDate() > contract.parmToDate())
        {
            ret = checkFailed("@AccountsPayable:ToDateCanNotLessThanFromDate");
        }

        date earliestAllowableFromDate = DateTimeUtil::date(DateTimeUtil::addYears(DateTimeUtil::getStartOfYearDate(Global::currentUserLanguage(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())), -1));
        if (contract.parmDoUpdateTransaction1099() && contract.parmFromDate() < earliestAllowableFromDate)
        {
            ret = checkFailed(strFmt("@AccountsPayable:FromDateMustGreaterThanFirstDayOfLastYear", earliestAllowableFromDate));
        }

        // Create a copy of the query to count the number of records selected
        if (ret)
        {
            Query query = contract.getQuery();

            Query queryCopy = new Query(query.pack());
            QueryBuildDataSource dsVendTable = queryCopy.dataSourceTable(tableNum(VendTable));
            dsVendTable.addSelectionField(fieldNum(VendTable, RecId), SelectionField::Count);

            QueryRun queryRunCount = new QueryRun(queryCopy);
            queryRunCount.next();
            VendTable vendTable = queryRunCount.get(tableNum(VendTable));

            str prompt = strFmt("@AccountsPayable:CheckNumberOfUpdate1099Vendors", vendTable.RecId);
            if (Box::okCancel(prompt, DialogButton::Ok) == DialogButton::Cancel)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>