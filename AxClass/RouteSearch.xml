<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteSearch</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class RouteSearch extends RouteSearchBase
{
    RouteId     routeId;
    boolean     dontCheckApprove;

    Route       route;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init(boolean updateRoute = true)
    {
        RouteTable  routeTable;
        routeTable = RouteTable::find(routeId);
        if (updateRoute)
            routeTable.updateRoute(false);

        if (routeTable)
        {
            if (! dontCheckApprove)
            {
                if (! routeTable.isApproved())
                    throw error(strfmt("@SYS29134",routeId));
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        RouteId             _routeId,
        boolean             _dontCheckApprove,
        boolean             _forUpdate  = false
        )
    {
        routeId             = _routeId;
        dontCheckApprove    = _dontCheckApprove;

        super(_forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    boolean next()
    {
        next route;

        if (route)
            return true;
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDontCheckApprove</Name>
				<Source><![CDATA[
    public boolean parmDontCheckApprove(boolean _dontCheckApprove = dontCheckApprove)
    {
        dontCheckApprove = _dontCheckApprove;

        return dontCheckApprove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>route</Name>
				<Source><![CDATA[
    RouteMap route()
    {
        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeId</Name>
				<Source><![CDATA[
    RouteId routeId()
    {
        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    protected void search()
    {
        // The routeId filter is embedded inside the select statement
        // because returning null will cause the subsequent call of route.next() results an exception.
        select nofetch route
            order by OprNum, OprPriority
            where routeId
               && route.RouteId == routeId;

        route.selectForUpdate(update);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMCalc</Name>
				<Source><![CDATA[
    static RouteSearch newBOMCalc(
        RouteId     _routeId
        )
    {
        RouteSearch routeSearch = new RouteSearch(
            _routeId,
            true);
        routeSearch.init();
        return routeSearch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteId</Name>
				<Source><![CDATA[
    static RouteSearch newRouteId(
        RouteId     _routeId,
        boolean     _dontCheckApprove   = false,
        boolean     _forupdate          = false,
        boolean     _updateRoute        = true
        )
    {
        RouteSearch routeSearch = new RouteSearch(
            _routeId,
            _dontCheckApprove,
            _forupdate);
        routeSearch.init(_updateRoute);
        return routeSearch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>