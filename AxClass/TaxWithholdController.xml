<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdController</c> class is the controller class for the <c>TaxWithholdSlip</c> SSRS report.
/// </summary>
public class TaxWithholdController extends SrsReportRunController implements BatchRetryable
{
    private const SRSCatalogItemName SRSReportName = ssrsReportStr(TaxWithholdSlip, Report);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceGB00008, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canShowDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls the display of dialog box depending on the menu item name.
    /// </summary>
    /// <param name="_menuItemName">
    /// The menu item name.
    /// </param>
    public void canShowDialog(MenuItemName _menuItemName)
    {
        if (_menuItemName == menuitemOutputStr(TaxWithholdSlipReport))
        {
            this.parmShowDialog(false);
        }
        else
        {
            this.parmShowDialog(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        LedgerJournalTrans ledgerJournalTransloc, ledgerJournalTrans;

        if (this.parmArgs())
        {
            ledgerJournalTrans = this.parmArgs().record();
        }

        if (ledgerJournalTrans)
        {
            TaxWithholdContract taxWithholdContract = this.parmReportContract().parmRdpContract() as TaxWithholdContract;

            DimensionDisplayValue dimensionDisplayValue = LedgerDimensionFacade::getDisplayValueForLedgerDimension(ledgerJournalTrans.LedgerDimension);
            taxWithholdContract.parmVendAccount(dimensionDisplayValue);
            taxWithholdContract.parmledgerJournalId(ledgerJournalTrans.JournalNum);

            select maxOf(TransDate) from ledgerJournalTransloc
                where ledgerJournalTransloc.JournalNum == ledgerJournalTrans.JournalNum &&
                    ledgerJournalTransloc.dataAreaId == ledgerJournalTrans.dataAreaId;

            taxWithholdContract.parmToDate(endmth(ledgerJournalTransloc.TransDate));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        TaxWithholdController taxWithholdController = new TaxWithholdController();
        taxWithholdController.parmReportName(SRSReportName);
        taxWithholdController.parmArgs(_args);

        taxWithholdController.canShowDialog(taxWithholdController.parmArgs().menuItemName());

        taxWithholdController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>