<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostReconciliationMethodStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostReconciliationMethodStrategy</c> class is used to find conflicts
/// and reconcile with general ledger.
/// </summary>
public abstract class CostReconciliationMethodStrategy
{
    CostParameters                      parameters;
    LedgerBalanceQueryDimensionFocus    ledgerBalanceCalculator;
    DimensionAttribute                  mainDimensionAttribute;
    private LedgerBalanceQueryGeneralLedgerBalance generalLedgerBalanceCalculator;
    private boolean isGeneralLedgerBalanceFeatureEnabled = Dynamics.AX.Application.FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCostParameters</Name>
				<Source><![CDATA[
    protected CostParameters parmCostParameters(CostParameters _parameters = parameters)
    {
        parameters = _parameters;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBalanceCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the calculation of ledger balances.
    /// </summary>
    protected void initBalanceCalculation()
    {
        if (isGeneralLedgerBalanceFeatureEnabled)
        {
            if (!generalLedgerBalanceCalculator)
            {
                generalLedgerBalanceCalculator = LedgerBalanceQueryGeneralLedgerBalance::construct();
                generalLedgerBalanceCalculator.setIncludeValues(true, false, true, false);
                generalLedgerBalanceCalculator.setPostingLayerList(con2List([CurrentOperationsTax::Current]));
            }
        }
        else
        {
            if (!ledgerBalanceCalculator)
            {
                ledgerBalanceCalculator = LedgerBalanceQueryDimensionFocus::construct();
                ledgerBalanceCalculator.setIncludeValues(true, false, true, false);
                ledgerBalanceCalculator.setPostingLayerList(con2List([CurrentOperationsTax::Current]));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountsBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance for a set of main account IDs for a given date range.
    /// </summary>
    /// <param name = "_mainAccountIds">
    /// Set of the main account IDs to calculate the balance for.
    /// </param>
    /// <param name = "_fromDate">
    /// The start of the date range.
    /// </param>
    /// <param name = "_toDate">
    /// The end of the date range.
    /// </param>
    /// <returns>
    /// The balance for a main account ID for a given date range.
    /// </returns>
    protected Amount getMainAccountsBalance(
        Set             _mainAccountIds,
        FromDate        _fromDate,
        ToDate          _toDate)
    {
        this.initBalanceCalculation();

        AmountMST balance = 0;

        if (_mainAccountIds.elements())
        {
            var accountsRange = this.buildMainAccountIdRange(_mainAccountIds);

            if (isGeneralLedgerBalanceFeatureEnabled)
            {
                generalLedgerBalanceCalculator.setAccountingDateRange(_fromDate, _toDate);
                generalLedgerBalanceCalculator.calculateForMainAccountRange(accountsRange);

                balance = generalLedgerBalanceCalculator.getAccountingCurrencyBalance();
            }
            else
            {
                ledgerBalanceCalculator.setAccountingDateRange(_fromDate, _toDate);
                ledgerBalanceCalculator.calculateForMainAccountRange(accountsRange);

                balance = ledgerBalanceCalculator.getAccountingCurrencyBalance();
            }
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMainAccountIdRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the range for main account.
    /// </summary>
    /// <param name = "_mainAccountIds">
    /// Set of the main account IDs to build the range for.
    /// </param>
    /// <returns>
    /// The main account range.
    /// </returns>
    private str buildMainAccountIdRange(Set _mainAccountIds)
    {
        str range;
        var enumerator = _mainAccountIds.getEnumerator();

        while (enumerator.moveNext())
        {
            if (range)
            {
                range += ',';
            }

            MainAccountNum accountNum = enumerator.current();
            range += accountNum;
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to fetch a set of main account IDs to a data source.
    /// </summary>
    /// <param name = "_mainAccountQueryBuildDataSource">
    /// The data source to add the ranges to.
    /// </param>
    /// <param name = "_accounts">
    /// The set of main account IDs to add.
    /// </param>
    public void addRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource, Set _accounts)
    {
        int fieldNumber;
        switch (_mainAccountQueryBuildDataSource.table())
        {
            case tableNum(MainAccount):
                fieldNumber = fieldNum(MainAccount, MainAccountId);
                break;
            case tableNum(DimAttributeMainAccount):
                fieldNumber = fieldNum(DimAttributeMainAccount, Value);
                break;
            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        var enumerator = _accounts.getEnumerator();
        while (enumerator.moveNext())
        {
            _mainAccountQueryBuildDataSource.addRange(fieldNumber).value(queryValue(enumerator.current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory balance in general ledger.
    /// </summary>
    /// <param name = "_balanceDate">
    /// The date to calculate balance.
    /// </param>
    /// <returns>
    /// The inventory balance from general ledger.
    /// </returns>
    public abstract Amount getInventoryBalance(TransDate _balanceDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryMainAccountRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds inventory main account ranges to the data source.
    /// </summary>
    /// <param name = "_mainAccountQueryBuildDataSource">
    /// The data source to add the main account ranges to.
    /// </param>
    public abstract void addInventoryMainAccountRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates if a main account ID is a inventory account.
    /// </summary>
    /// <param name = "_mainAccountId">
    /// The main account ID.
    /// </param>
    /// <returns>
    /// true if a main account ID is a inventory account; otherwise, false.
    /// </returns>
    public abstract boolean isInventoryAccount(MainAccountNum _mainAccountId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWIPBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the WIP balance in general ledger.
    /// </summary>
    /// <param name = "_balanceDate">
    /// The date to calculate balance.
    /// </param>
    /// <returns>
    /// The WIP balance from general ledger.
    /// </returns>
    public abstract Amount getWIPBalance(TransDate _balanceDate)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPMainAccountRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds WIP main account ranges to the data source.
    /// </summary>
    /// <param name = "_mainAccountQueryBuildDataSource">
    /// The data source to add the ranges to.
    /// </param>
    public abstract void addWIPMainAccountRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates if a main account ID is a WIP account.
    /// </summary>
    /// <param name = "_mainAccountId">
    /// The main account ID.
    /// </param>
    /// <returns>
    /// true if a main account ID is a WIP account; otherwise, false.
    /// </returns>
    public abstract boolean isWIPAccount(MainAccountNum _mainAccountId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class <c>CostReconciliationMethodStrategy</c>.
    /// </summary>
    /// <returns>
    /// An instance of the class <c>CostReconciliationMethodStrategy</c>.
    /// </returns>
    public static CostReconciliationMethodStrategy newFromParameters()
    {
        CostReconciliationMethodStrategy costReconciliationMethodStrategy;
        var parameters = CostParameters::find();

        switch (parameters.ReconciliationMethod)
        {
            case CostReconciliationMethod::MainAccountCategory:
                costReconciliationMethodStrategy = CostReconciliationMethodStrategyAccountCategory::construct();
                break;
            case CostReconciliationMethod::MainAccount:
                costReconciliationMethodStrategy = CostReconciliationMethodStrategyTotalAccount::construct();
                break;
            default:
                // A default setup is expected to be available.
                throw error(error::wrongUseOfFunction(funcName()));
        }
        costReconciliationMethodStrategy.parmCostParameters(parameters);

        return costReconciliationMethodStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        mainDimensionAttribute = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>