<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDocumentsReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxDocumentsReportDP</c> class is the report data provider class for the
/// <c>TaxDocumentsReport</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classstr(TaxDocumentsReportContract))
]
class TaxDocumentsReportDP extends SrsReportDataProviderPreProcessTempDB
{
    CzTaxDocumentTable  taxDocumentTable;
    CzTaxCreditMemo     taxCreditMemo;
    TaxDocumentTableTmp taxDocumentTableTmp;
    TaxDocumentTransTmp taxDocumentTransTmp;
    CompanyInfo         companyInfo;
    CustVendTrans       custVendTrans;
    CustVendTable       custVendTable;
    Addressing          counteragentAddress;
    boolean             printInMST;
    String255           advanceInvoiceIdStr;

    TaxDocumentsReportContract  contract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAdvanceInvoiceLinkBuffer</Name>
				<Source><![CDATA[
    private CzCustVendAdvanceInvoiceLink getAdvanceInvoiceLinkBuffer()
    {
        TableId linkTableId;

        switch (custVendTable.TableId)
        {
            case tableNum(CustTable) :
                linkTableId = tablenum(CzCustAdvanceInvoiceLink);
                break;

            case tableNum(VendTable) :
            default :
                linkTableId = tablenum(CzVendAdvanceInvoiceLink);
                break;
        }

        return new DictTable(linkTableId).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentTableTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>TaxDocumentTableTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxDocumentTableTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxDocumentTableTmp))]
    public TaxDocumentTableTmp getTaxDocumentTableTmp()
    {
        select taxDocumentTableTmp;
        return taxDocumentTableTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDocumentTransTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>TaxDocumentTransTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxDocumentTransTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxDocumentTransTmp))]
    public TaxDocumentTransTmp getTaxDocumentTransTmp()
    {
        select taxDocumentTransTmp;
        return taxDocumentTransTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxDocumentTableTmp</Name>
				<Source><![CDATA[
    private void insertTaxDocumentTableTmp()
    {
        BankAccountTable        bankAccount;
        HcmWorker               worker;

        taxDocumentTableTmp.clear();

        // Set header fields
        bankAccount = BankAccountTable::find(companyInfo.Bank);

        taxDocumentTableTmp.CompanyLogo = FormLetter::companyLogo();
        taxDocumentTableTmp.CompanyName = companyInfo.name();
        taxDocumentTableTmp.CompanyAddress = companyInfo.postalAddress().Address;
        taxDocumentTableTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        taxDocumentTableTmp.CompanyRegNum = companyInfo.RegNum;
        taxDocumentTableTmp.CompanyEmail = companyInfo.email();
        taxDocumentTableTmp.CompanyPhone = companyInfo.phone();
        taxDocumentTableTmp.CompanyTelefax = companyInfo.teleFax();

        taxDocumentTableTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, custVendTrans.TransDate);

        taxDocumentTableTmp.CompanyBankAccountName = bankAccount.Name;
        taxDocumentTableTmp.CompanyBankAccountNum = bankAccount.AccountNum;
        taxDocumentTableTmp.CompanyBankAccountRoutingNum = bankAccount.RegistrationNum;
        taxDocumentTableTmp.CompanyBankIBAN = bankAccount.IBAN;
        taxDocumentTableTmp.CompanyBankSWIFTNo = bankAccount.SWIFTNo;
        taxDocumentTableTmp.CompanyBankSpecificSymbol = bankAccount.SpecificSymbol;

        // Set footer fields
        worker = HcmWorker::find(HcmWorkerLookup::currentWorker());
        taxDocumentTableTmp.WorkerName = worker.name();
        taxDocumentTableTmp.WorkerPhone = worker.phone();
        taxDocumentTableTmp.WorkerEmail = worker.email();

        // Set tax document body fields
        taxDocumentTableTmp.AccountingCurrency = Ledger::accountingCurrencyByLedger(Ledger::current());
        taxDocumentTableTmp.ReportCurrency = custVendTrans.CurrencyCode;

        if (taxDocumentTableTmp.AccountingCurrency != taxDocumentTableTmp.ReportCurrency)
        {
            printInMST = true;
            taxDocumentTableTmp.PrintInMST = NoYes::Yes;
        }

        taxDocumentTableTmp.PaymentDate = custVendTrans.TransDate;
        taxDocumentTableTmp.CounteragentName = custVendTable.name();
        taxDocumentTableTmp.CounteragentAddress = counteragentAddress;
        taxDocumentTableTmp.CounteragentRegNum = custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, custVendTrans.TransDate);
        taxDocumentTableTmp.CounteragentCoRegNum = custVendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, custVendTrans.TransDate);

        // Set tax document or tax credit memo specific fields
        if (contract.parmShowTaxCreditMemo() && contract.parmTaxCreditMemoId())
        {
            select firstonly taxCreditMemo
                where taxCreditMemo.RecId == contract.parmTaxCreditMemoId();

            taxDocumentTableTmp.DocumentDate = taxCreditMemo.TaxCreditMemoDate;
            taxDocumentTableTmp.DocumentText = taxCreditMemo.TaxCreditMemoNum;
        }
        else
        {
            taxDocumentTableTmp.DocumentDate = taxDocumentTable.TaxDocumentDate;
            taxDocumentTableTmp.DocumentText = taxDocumentTable.TaxDocumentNum;
        }

        taxDocumentTableTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxDocumentTransTmp</Name>
				<Source><![CDATA[
    private void insertTaxDocumentTransTmp(CzTaxDocumentTrans taxDocumentTrans)
    {
        taxDocumentTransTmp.clear();

        taxDocumentTransTmp.AdvanceInvoiceId = advanceInvoiceIdStr;
        taxDocumentTransTmp.VATValue = taxDocumentTrans.VATValue;

        if (printInMST)
        {
            taxDocumentTransTmp.VATBaseAmountMST = taxDocumentTrans.vatBaseMST();
            taxDocumentTransTmp.VATAmountMST = taxDocumentTrans.VATAmountMST;
            taxDocumentTransTmp.AmountMST = taxDocumentTrans.AmountMST;
        }

        taxDocumentTransTmp.VATBaseAmountCur = taxDocumentTrans.vatBaseCur();
        taxDocumentTransTmp.VATAmountCur = taxDocumentTrans.VATAmountCur;
        taxDocumentTransTmp.AmountCur = taxDocumentTrans.AmountCur;

        // Set tax document or tax credit memo specific fields
        if (contract.parmShowTaxCreditMemo())
        {
            taxDocumentTransTmp.SourceDescription = taxDocumentTable.TaxDocumentNum;
            taxDocumentTransTmp.SourceDate = taxDocumentTable.TaxDocumentDate;
        }
        else
        {
            taxDocumentTransTmp.SourceDescription = custVendTrans.Txt;
            taxDocumentTransTmp.SourceDate = custVendTrans.TransDate;
        }

        taxDocumentTransTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///     Provides the ability to write the report business logic. This method will be called by
    ///     SSRS at runtime. The method should compute data and populate the data tables that will be
    ///     returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        CzTaxDocumentTrans taxDocumentTrans;

        contract = this.parmDataContract() as TaxDocumentsReportContract;

        companyInfo = CompanyInfo::find();
        taxDocumentTable = CzTaxDocumentTable::findRecId(contract.parmTaxDocumentId());

        switch (contract.parmTransTableId())
        {
            case tableNum(CustTrans) :
                custVendTrans = CustTrans::find(contract.parmTransId());
                custVendTable = CustTable::find(custVendTrans.AccountNum);
                counteragentAddress = CustTable::find(custVendTrans.AccountNum).address();
                break;

            case tableNum(VendTrans) :
                custVendTrans = VendTrans::find(contract.parmTransId());
                custVendTable = VendTable::find(custVendTrans.AccountNum);
                counteragentAddress = VendTable::find(custVendTrans.AccountNum).invoiceAddress().Address;
                break;

            default :
                break;
        }

        this.insertTaxDocumentTableTmp();
        this.setAdvanceInvoiceIdStr();

        // Process all CzTaxDocumentTrans records
        while select taxDocumentTrans
            where taxDocumentTrans.HeaderRecId == taxDocumentTable.RecId
        {
            this.insertTaxDocumentTransTmp(taxDocumentTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdvanceInvoiceIdStr</Name>
				<Source><![CDATA[
    private void setAdvanceInvoiceIdStr()
    {
        CzCustVendAdvanceInvoiceLink origLink;
        #define.newline('\n')

        origLink = this.getAdvanceInvoiceLinkBuffer();

        advanceInvoiceIdStr = '';

        // Find all linked advance invoices and construct a string to print on the report
        while select origLink
            where origLink.Voucher   == custVendTrans.Voucher &&
                  origLink.TransDate == custVendTrans.TransDate
        {
            advanceInvoiceIdStr += (advanceInvoiceIdStr ? #newline : '') +
                origLink.advanceInvoiceTable().InvoiceId;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>