<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveConcurrencyFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WhsLocationDirectiveConcurrencyFilter
{
    private boolean isLocationAvailable;
    private boolean shouldLocationBeLockedForDockMgmtValidation;
    private boolean shouldLocationBeLockedForLocDirStrategy;
    private boolean shouldLocationBeLockedForMixedConstraint;
    private boolean locationLockAcquired;
    private boolean mixingConstraintLockAcquired;
    private boolean isMultiSKU;
    private str itemBatchStatusCombination;

    private WHSInstrumentationFindPickPutLocationPerformanceTask perfTask;
    private WhsLocationDirectiveMatch matchingDirective;
    private boolean canConvertStockingUOM;
    private boolean useStockingLimits;
    private WhsLocationDirective whsLocationDirective;

    private WhsLocationDirectiveMixingConstraintLock specificMixingConstraintLock;
    private WhsLocationDirectiveLocationTTSLock anyMixingConstraintLock;

    private str locationStrategyLockName;
    private boolean locationStrategyLockAcquired;

    const str AnyMixingConstraintLockPrefix = 'AnyMixLoc';
    const str SpecificMixingConstraintLockPrefix = 'SpecMixLoc'; 

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WhsLocationDirectiveConcurrencyFilter construct()
    {
        return new WhsLocationDirectiveConcurrencyFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void init(
        boolean _shouldLocationBeLockedForLocDirStrategy,
        WHSInstrumentationFindPickPutLocationPerformanceTask _perfTask,
        WhsLocationDirectiveMatch _matchingDirective,
        WhsLocationDirective _whsLocationDirective)
    {
        this.shouldLocationBeLockedForLocDirStrategy = _shouldLocationBeLockedForLocDirStrategy;
        this.perfTask = _perfTask;
        this.matchingDirective = _matchingDirective;
        this.whsLocationDirective = _whsLocationDirective;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLocationSpecificParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateLocationSpecificParameters(
        WhsLocationDirectiveConcurrencyFilterParameters _parameters)
    {
        this.shouldLocationBeLockedForDockMgmtValidation = _parameters.shouldLocationBeLockedForDockMgmtValidation;
        this.shouldLocationBeLockedForMixedConstraint = _parameters.shouldLocationBeLockedForMixedConstraint;
        this.itemBatchStatusCombination = _parameters.itemBatchStatusCombination;
        this.canConvertStockingUOM = _parameters.canConvertStockingUOM;
        this.useStockingLimits = _parameters.useStockingLimits;
        this.isMultiSKU = _parameters.isMultiSKU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocationApplicable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isLocationApplicable(WhsLocationDirectiveConcurrencyFilterParameters _parameters)
    {
        this.updateLocationSpecificParameters(_parameters);

        if (shouldLocationBeLockedForDockMgmtValidation || shouldLocationBeLockedForLocDirStrategy)
        {
            locationStrategyLockName = WhsLocationDirectiveStrategyUnallocationLocation::getLockName(_parameters.location);

            Connection connection = new Connection(); //use the current connection

            ReqReaderWriterLock reqReaderWriterLock = ReqReaderWriterLock::construct();
            reqReaderWriterLock.setConnection(locationStrategyLockName, connection);
            reqReaderWriterLock.parmForceUserConnectionLock(true);

            locationStrategyLockAcquired = reqReaderWriterLock.tryEnterWriterLock(locationStrategyLockName, shouldLocationBeLockedForDockMgmtValidation ? WHSParameters::find().PutLocationDirectiveLockWait : 0);
 
            connection.finalize();

            if (!locationStrategyLockAcquired)
            {
                if (shouldLocationBeLockedForDockMgmtValidation)
                {
                    if (isMultiSKU)
                    {
                        whsLocationDirective.createDockManagementViolationWorkHistoryLineMultiSKU();
                        perfTask.dockManagementMixingFailed();
                    }
                    else
                    {
                        whsLocationDirective.createDockManagementViolationWorkHistoryLine();
                        perfTask.unallocatedLocationSkipped();
                    }

                    return false;
                }

                whsLocationDirective.createLockStrategyViolationWorkHistoryLine();
                perfTask.unallocatedLocationSkipped();
                return false;
            }
        }

        if (isMultiSKU)
        {
            return true;
        }

        if (WHSParameters::find().PutLocationDirectiveConcStrictness == WHSPutLocationDirectiveConcStrictness::PerformanceOptimized)
        {
            return this.checkMixingConstraintsInCommittedData();
        }
        else
        {
            using (WhsLocationDirectiveCriticalSectionLock criticalSectionLock = WhsLocationDirectiveCriticalSectionLock::construct(_parameters.location))
            {
                if (criticalSectionLock.acquireLock(WHSParameters::find().PutLocationDirectiveLockWait))
                {
                    isLocationAvailable = this.checkMixingConstraints(_parameters.location);

                    if (!isLocationAvailable)
                    {
                        return false;
                    }

                    this.claimSharedSQLLocks();

                    return true;
                }

                return false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applicableLocationRejected</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void applicableLocationRejected()
    {
        if (locationStrategyLockAcquired)
        {
            ReqReaderWriterLock::releaseSQLLock(locationStrategyLockName);
            locationStrategyLockAcquired = false;
        }

        if (locationLockAcquired)
        {
            ReqReaderWriterLock::releaseSQLLock(anyMixingConstraintLock.lockName());
            locationLockAcquired = false;
        }

        if (mixingConstraintLockAcquired)
        {
            ReqReaderWriterLock::releaseSQLLock(specificMixingConstraintLock.lockName());
            mixingConstraintLockAcquired= false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMixingConstraints</Name>
				<Source><![CDATA[
    private boolean checkMixingConstraints(WMSLocation _location)
    {
        return this.checkMixingConstraintsInTransaction(_location) && this.checkMixingConstraintsInCommittedData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMixingConstraintsInTransaction</Name>
				<Source><![CDATA[
    private boolean checkMixingConstraintsInTransaction(WMSLocation _location)
    {
        if (!shouldLocationBeLockedForMixedConstraint)
        {
            return true;
        }

        anyMixingConstraintLock = WhsLocationDirectiveLocationTTSLock::newFromLocation(_location, AnyMixingConstraintLockPrefix);
        isLocationAvailable = anyMixingConstraintLock.canEnterLock();

        specificMixingConstraintLock = WhsLocationDirectiveMixingConstraintLock::newFromLocationAndItemBatchStatusCombination(_location, SpecificMixingConstraintLockPrefix, itemBatchStatusCombination);

        // This means that location is available for any item-batch-status combination.
        if (isLocationAvailable)
        {
            return true;
        }

        // If replenishment lock can be entered here it means that location was locked for another item-batch-status combination.
        if (specificMixingConstraintLock.canEnterLock())
        {
            whsLocationDirective.createMixingRulesViolationWorkHistoryLine();
            perfTask.unallocatedLocationSkipped();
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>claimSharedSQLLocks</Name>
				<Source><![CDATA[
    private void claimSharedSQLLocks()
    {
        if (shouldLocationBeLockedForMixedConstraint)
        {
            locationLockAcquired = anyMixingConstraintLock.acquireLock(0);
            mixingConstraintLockAcquired = specificMixingConstraintLock.acquireLock(0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMixingConstraintsInCommittedData</Name>
				<Source><![CDATA[
    private boolean checkMixingConstraintsInCommittedData()
    {
        return whsLocationDirective.testLocationMixingConstraintsInCommittedDelta(perfTask, matchingDirective, canConvertStockingUOM, useStockingLimits);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>