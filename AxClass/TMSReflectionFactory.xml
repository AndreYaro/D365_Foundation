<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSReflectionFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Ax.Xpp;
using Microsoft.Dynamics.AX.Metadata.MetaModel;

/// <summary>
/// The <c>TMSReflectionFactory</c> class creates objects through reflection.
/// </summary>
class TMSReflectionFactory
{
    private const str tmsDLLName = 'Microsoft.Dynamics.AX.Tms.dll';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTMSAssemblyPath</Name>
				<Source><![CDATA[
    private static str getTMSAssemblyPath()
    {
        // Assumes that Microsoft.Dynamics.AX.Tms.dll is a binary within the same application model as the current factory class
        AxClass axClass = new AxClass();
        str module = MetadataSupport::GetModuleOfMetadataArtifact(classStr(TMSReflectionFactory), axClass.GetType());
        str binDir = MetadataSupport::GetBinDirectoryForModule(module);
        return System.IO.Path::Combine(binDir, tmsDLLName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of specific class.
    /// </summary>
    /// <param name = "_typeName">The name of the type to instantiate.</param>
    /// <returns>A new instance of specific class.</returns>
    public static System.Object createObject(str _typeName)
    {
        System.Object result = null;

        try
        {
            str assemblyPath = TMSReflectionFactory::getTMSAssemblyPath();

            if (System.IO.File::Exists(assemblyPath))
            {
                System.Reflection.Assembly assembly = System.Reflection.Assembly::LoadFrom(assemblyPath);
                System.Type type = assembly.GetType(_typeName, true);
                result = System.Activator::CreateInstance(type);
            }
            else
            {
                throw error("@TRX:TMS_Engines_Execution_InvokeError_FileNotFound");
            }
        }
        catch (Exception::CLRError)
        {
            throw error("@TRX:TMS_Engines_Execution_InvokeError");
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>