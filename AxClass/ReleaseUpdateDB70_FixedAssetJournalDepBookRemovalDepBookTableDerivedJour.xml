<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookTableDerivedJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Upgrades data from <c>AssetDepBookTableDerivedJour</c> to <c>AssetBookTableDerivedJournal</c> table.
/// </summary>
class ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookTableDerivedJour extends ReleaseUpdateDB70_FixedAssets
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preSyncUpgradeAssetDepBookTableDerivedJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Move <c>AssetDepBookTableDerivedJour</c> data into a temporary table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PreSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeScriptTableAttribute('AssetDepBookTableDerivedJour', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void preSyncUpgradeAssetDepBookTableDerivedJour()
    {
        // Drop the AssetDepBookTableDerivedJourUpgradeTmp table if it exists.
        this.executeSqlStatement(this.getSQLDropAssetDepBookTableDerivedJourUpgradeTmp());

        // Create temp upgrade table.
        this.executeSqlStatement(this.getSQLCreateAssetDepBookTableDerivedJourUpgradeTmp());

        // Move AssetDepBookTableDerivedJour rows to temp table.
        this.executeSqlStatement(this.getSQLInsertAssetDepBookTableDerivedJourUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSyncUpgradeAssetDepBookTableDerivedJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the <c>AssetDepBookTableDerivedJour</c> data from the temporary table into <c>AssetBookTableDerivedJournal</c> table.
    /// </summary>
    [UpgradeScriptDescriptionAttribute("@FixedAssets:FA_MessageDeveloper_AssetDepBookTableUpgrade"),
     UpgradeScriptStageAttribute(ReleaseUpdateScriptStage::PostSyncUpdate),
     UpgradeScriptTypeAttribute(ReleaseUpdateScriptType::SharedScript),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans), methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncAllocateVoucherAssetDepBookJournalTrans)),
     UpgradeDependsOnModuleAttribute(classStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans), methodStr(ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalDepBookJournalTrans, postSyncUpgradeAssetDepBookJournalTrans)),
     UpgradeScriptTableAttribute(tableStr(AssetBookTableDerivedJournal), true, true, false, false),
     UpgradeScriptTableAttribute('AssetDepBookTableDerivedJour', false, true, false, false)
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void postSyncUpgradeAssetDepBookTableDerivedJour()
    {
        // Move the data into the AssetBookTableDerivedJournal from the AssetDepBookTableDerivedJourUpgradeTmp table
        this.executeSqlStatement(this.getSQLInsertAssetBookTableDerivedJournal());

        // drop temporary upgrade table
        this.executeSqlStatement(this.getSQLDropAssetDepBookTableDerivedJourUpgradeTmp());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLDropAssetDepBookTableDerivedJourUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLDropAssetDepBookTableDerivedJourUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP', 'U') IS NOT NULL
                DROP TABLE ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCreateAssetDepBookTableDerivedJourUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLCreateAssetDepBookTableDerivedJourUpgradeTmp()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.[ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP]', 'U') IS NULL
                CREATE TABLE [dbo].[ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP](
                    [AMOUNTCUR] [numeric](32, 6) NOT NULL,
                    [DEPRECIATIONBOOKID] [nvarchar](10) NOT NULL,
                    [REFRECID] [bigint] NOT NULL,
                    [DATAAREAID] [nvarchar](4) NOT NULL,
                    [PARTITION] [bigint] NOT NULL,
                 CONSTRAINT [I_5861REFRECIDDEPBOOKDERIVEDJOURUPGRADETMPIDIDX] PRIMARY KEY CLUSTERED
                (
                    [PARTITION] ASC,
                    [DATAAREAID] ASC,
                    [REFRECID] ASC,
                    [DEPRECIATIONBOOKID] ASC
                )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]
                ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertAssetDepBookTableDerivedJourUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLInsertAssetDepBookTableDerivedJourUpgradeTmp()
    {
        str sqlStatement = @"
            INSERT INTO [dbo].[ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP]
                       ([AMOUNTCUR]
                       ,[DEPRECIATIONBOOKID]
                       ,[REFRECID]
                       ,[DATAAREAID]
                       ,[PARTITION])
                SELECT [AMOUNTCUR]
                      ,[DEPRECIATIONBOOKID]
                      ,[REFRECID]
                      ,[DATAAREAID]
                      ,[PARTITION]
                FROM [dbo].[ASSETDEPBOOKTABLEDERIVEDJOUR]
                    WHERE NOT EXISTS
                        (SELECT RECID FROM [dbo].[ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP]
                        WHERE [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[DEPRECIATIONBOOKID] = [ASSETDEPBOOKTABLEDERIVEDJOUR].[DEPRECIATIONBOOKID]
                            AND [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[REFRECID] = [ASSETDEPBOOKTABLEDERIVEDJOUR].[REFRECID]
                            AND [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[DATAAREAID] = [ASSETDEPBOOKTABLEDERIVEDJOUR].[DATAAREAID]
                            AND [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[PARTITION] = [ASSETDEPBOOKTABLEDERIVEDJOUR].[PARTITION])
        ";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLInsertAssetBookTableDerivedJournal</Name>
				<Source><![CDATA[
    private str getSQLInsertAssetBookTableDerivedJournal()
    {
        str sqlStatement = @"
            INSERT INTO [dbo].[ASSETBOOKTABLEDERIVEDJOURNAL]
                       ([AMOUNTCUR]
                       ,[ASSETBOOKID]
                       ,[REFRECID]
                       ,[DATAAREAID]
                       ,[PARTITION])
                SELECT [AMOUNTCUR]
                      ,[DEPRECIATIONBOOKID]
                      ,[REFRECID]
                      ,[DATAAREAID]
                      ,[PARTITION]
                FROM [dbo].[ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP]
                WHERE NOT EXISTS
                    (SELECT RECID FROM [dbo].[ASSETBOOKTABLEDERIVEDJOURNAL]
                    WHERE [ASSETBOOKTABLEDERIVEDJOURNAL].[ASSETBOOKID] = [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[DEPRECIATIONBOOKID]
                        AND [ASSETBOOKTABLEDERIVEDJOURNAL].[REFRECID] = [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[REFRECID]
                        AND [ASSETBOOKTABLEDERIVEDJOURNAL].[DATAAREAID] = [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[DATAAREAID]
                        AND [ASSETBOOKTABLEDERIVEDJOURNAL].[PARTITION] = [ASSETDEPBOOKTABLEDERIVEDJOURUPGRADETMP].[PARTITION])
                ";

        return sqlStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>