<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocInvTransParmLineRowDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
using TC = Microsoft.Dynamics365.Tax.Core;
/// <summary>
/// Row data provider for invent transfer parm line.
/// </summary>
public class TaxableDocInvTransParmLineRowDP extends TaxableDocInvTransLineRowDP
{
    InventTransferParmLine  inventTransferParmLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInFields</Name>
				<Source><![CDATA[
    public void fillInFields(TaxableDocumentLineObject _lineObj)
    {
        super(_lineObj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidFields</Name>
				<Source><![CDATA[
    protected void initValidFields()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMainTable</Name>
				<Source><![CDATA[
    protected void initMainTable()
    {
        inventTransferParmLine = mainRecord as inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line adjustment from super, and if adjustmentObject is null, 
    /// it will keep the same rate between post shipment and post receipt.
    /// </summary>
    /// <param name = "_lineObj">Taxable document row instance</param>
    /// <returns>Line adjustment</returns>
    [Replaceable]
    protected TC.ITaxableDocumentLineAdjustment getLineAdjustment(TaxableDocumentLineObject _lineObj)
    {
        TC.TaxableDocumentLineAdjustmentObject adjustmentObject;

        adjustmentObject = super(_lineObj);

        if (!adjustmentObject)
        {
            InventTransferParmTable inventTransferParmTable = inventTransferParmLine.inventTransferParmTable();

            if (inventTransferParmTable.isReceiving())
            {
                adjustmentObject = this.adjustForReceiving(_lineObj, inventTransferParmTable);
            }
            else if(inventTransferParmTable.isShipmentCancellation())
            {
                adjustmentObject = this.adjustForCancellation(_lineObj, inventTransferParmTable);
            }
        }

        return adjustmentObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustForCancellation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts for cancellation. Transfer order cancellation will keep same amount of negative value as original shipment.
    /// </summary>
    /// <param name = "_lineObj">The line object.</param>
    /// <param name = "_inventTransferParmTable">The invent transfer parm table.</param>
    /// <returns>The <c>TC.ITaxableDocumentLineAdjustment</c>.</returns>
    private TC.ITaxableDocumentLineAdjustment adjustForCancellation(TaxableDocumentLineObject _lineObj, InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferJour inventTransferJourOrigin;
        InventTransferJourLine inventTransferJourLineOrigin;

        if (TaxGetOriginInventTransferJourWithInventDimIdIncludedFlight::instance().isEnabled())
        {
            select firstonly RecId from inventTransferJourOrigin
                where inventTransferJourOrigin.RecId == _inventTransferParmTable.CanceledShipmentJournalRecId
                join RecId from inventTransferJourLineOrigin
                    where inventTransferJourOrigin.VoucherId == inventTransferJourLineOrigin.VoucherId
                        && inventTransferJourOrigin.TransferId == inventTransferJourLineOrigin.TransferId
                        && inventTransferJourLineOrigin.InventTransId == this.inventTransferParmLine.InventTransId
                        && inventTransferJourLineOrigin.InventDimId == this.inventTransferParmLine.InventDimId;
        }
        else
        {
            select firstonly RecId from inventTransferJourOrigin
                where inventTransferJourOrigin.RecId == _inventTransferParmTable.CanceledShipmentJournalRecId
                join RecId from inventTransferJourLineOrigin
                    where inventTransferJourOrigin.VoucherId == inventTransferJourLineOrigin.VoucherId
                        && inventTransferJourOrigin.TransferId == inventTransferJourLineOrigin.TransferId
                        && inventTransferJourLineOrigin.InventTransId == this.inventTransferParmLine.InventTransId;
        }

        return this.adjustAccordingToJournalLine(inventTransferJourOrigin, inventTransferJourLineOrigin, classStr(TaxMeasureTaxAmount), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustForReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts for receiving. Transfer order receiving will keep same tax document as original shipment.
    /// </summary>
    /// <param name = "_lineObj">The line object.</param>
    /// <param name = "_inventTransferParmTable">The invent transfer parm table.</param>
    /// <returns>The <c>TC.ITaxableDocumentLineAdjustment</c>.</returns>
    private TC.ITaxableDocumentLineAdjustment adjustForReceiving(TaxableDocumentLineObject _lineObj, InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferJour inventTransferJourOrigin;
        InventTransferJourLine inventTransferJourLineOrigin;
        InventTransferLine inventTransferLineOrigin;

        select firstonly RecId from inventTransferJourOrigin
            where inventTransferJourOrigin.VoucherId == _inventTransferParmTable.VoucherShipmentId
                && inventTransferJourOrigin.UpdateType == InventTransferUpdateType::Shipment
            join RecId from inventTransferJourLineOrigin
                where inventTransferJourOrigin.VoucherId == inventTransferJourLineOrigin.VoucherId
                    && inventTransferJourOrigin.TransferId == inventTransferJourLineOrigin.TransferId
            join RecId from inventTransferLineOrigin
                where inventTransferJourLineOrigin.LineNum == inventTransferLineOrigin.LineNum
                    && inventTransferLineOrigin.InventTransIdReceive == this.inventTransferParmLine.InventTransId
                    && inventTransferLineOrigin.TransferId == this.inventTransferParmLine.TransferId;

        return this.adjustAccordingToJournalLine(inventTransferJourOrigin, inventTransferJourLineOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAccordingToJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts according to the tax document of the journal line specified.
    /// </summary>
    /// <param name = "_inventTransferJour">The invent transfer journal.</param>
    /// <param name = "_inventTransferJourLine">The invent transfer journal line.</param>
    /// <param name = "_measureType">The measure type will be adjusted. Adjust all measures if not specified.</param>
    /// <param name = "_shouldReverseValue">Should reverse value or not.</param>
    /// <returns>The <c>TC.ITaxableDocumentLineAdjustment</c>.</returns>
    private TC.ITaxableDocumentLineAdjustment adjustAccordingToJournalLine(
        InventTransferJour _inventTransferJour,
        InventTransferJourLine _inventTransferJourLine,
        str _measureType = '',
        boolean _shouldReverseValue = false)
    {
        int sign = 1;
         
        if (_shouldReverseValue)
        {
            sign = -1;
        }

        TaxableDocumentLineAdjustment adjLoc = new TaxableDocumentLineAdjustment();
        TaxDocumentExtension_IN taxDocumentExtension = TaxGSTInvoiceHelper_IN::findTaxDocumentExtension(_inventTransferJour);
        ITaxDocument taxDocumentObject = TaxDocument::findByGUID(taxDocumentExtension.TaxDocumentGUID).toObject();

        if (!taxDocumentObject
            && FeatureStateProvider::isFeatureEnabled(TaxRemoveDependenciesOnTaxDocumentJSONFlighting::instance()))
        {
            return this.adjustAccordingToCommponentTransaction(
                _inventTransferJourLine,
                _measureType,
                _shouldReverseValue);
        }

        if (taxDocumentObject)
        {
            ITaxDocumentLine lineObject = taxDocumentObject.findLineBySource(_inventTransferJourLine.TableId, _inventTransferJourLine.RecId);
            if (lineObject)
            {
                adjLoc.setIsApplicabilityDetermined(true);

                ITaxDocumentComponentLineEnumerator componentLineEnumerator= lineObject.componentLines();
                while (componentLineEnumerator.moveNext())
                {
                    ITaxDocumentComponentLine componentLineObject = componentLineEnumerator.current();
                    TaxRuntimeDocComponentVersion runtimeDocComponentVersion = TaxRuntimeDocComponentVersion::find(componentLineObject.identifier());
                    adjLoc.addTaxApplicibility(TaxRuntimeDocComponent::find(runtimeDocComponentVersion.TaxRuntimeDocComponent).Path);

                    ITaxDocumentMeasureEnumerator measureEnumerator = componentLineObject.measures();
                    while (measureEnumerator.moveNext())
                    {
                        ITaxDocumentMeasure measureObject = measureEnumerator.current();

                        if (measureObject.metaData().name()
                            && measureObject.metaData().type()
                            && (!_measureType || _measureType == measureObject.metaData().type()))
                        {
                            TaxRuntimeDocComponentMeasureVersion    taxDocComponentMeasureVer;
                            TaxRuntimeDocComponentMeasure           taxDocComponentMeasure;

                            select firstonly Path from taxDocComponentMeasure
                                exists join taxDocComponentMeasureVer
                                    where taxDocComponentMeasureVer.TaxRuntimeDocComponentMeasure == taxDocComponentMeasure.RecId
                                        && taxDocComponentMeasureVer.RecId == measureObject.metaData().id();

                            if (taxDocComponentMeasure.Path)
                            {
                                ITaxDocumentMeasureValue measureValue = measureObject.value();
                                adjLoc.addMeasureAdjustment(taxDocComponentMeasure.Path, measureValue.value() * sign);
                            }
                        }
                    }
                }
            }
        }

        return adjLoc.getCLRObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAccordingToCommponentTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the specified measure based on the original component transactions of the journal line specified.
    /// </summary>
    /// <param name = "_inventTransferJourLine">The invent transfer journal line.</param>
    /// <param name = "_measureType">The measure type will be adjusted. Adjust all measures if not specified.</param>
    /// <param name = "_shouldReverseValue">Should reverse value or not. It should not be specified when adjusting all measures.</param>
    /// <returns>The <c>TC.ITaxableDocumentLineAdjustment</c>.</returns>
    private TC.ITaxableDocumentLineAdjustment adjustAccordingToCommponentTransaction(
        InventTransferJourLine _inventTransferJourLine,
        str _measureType = '',
        boolean _shouldReverseValue = false)
    {
        int sign = 1;

        if (_shouldReverseValue)
        {
            sign = -1;
        }

        TaxableDocumentLineAdjustment adjLoc = new TaxableDocumentLineAdjustment();

        TaxDocumentRowTransaction taxDocumentRowTransaction;
        TaxDocumentComponentTransaction taxDocumentComponentTransaction;
        TaxDocumentComponentTransaction_IN taxDocumentComponentTransaction_IN;

        while select TaxCode, TaxRate, TaxAmountCur, TaxBaseAmountCur, ApplicablePercentageOfTax from taxDocumentComponentTransaction
            join TaxType, TaxComponent, ReverseChargePercentage from taxDocumentComponentTransaction_IN
                where taxDocumentComponentTransaction_IN.TaxDocumentComponnetTransactionRecId == taxDocumentComponentTransaction.RecId
            join RecId from taxDocumentRowTransaction
                where taxDocumentRowTransaction.RecId == taxDocumentComponentTransaction.TaxDocumentRowTransactionRecId
                    && taxDocumentRowTransaction.TransactionJourLineTableId == _inventTransferJourLine.TableId
                    && taxDocumentRowTransaction.TransactionJourLineRecId == _inventTransferJourLine.RecId
        {
            adjLoc.setIsApplicabilityDetermined(true);

            str taxRuntimeTaxType = TaxRuntimeSettingTaxTypeMapping_IN::findDocTaxTypeNameByScopeAndTaxType_IN(
                TaxSolutionScopeIntegrationUtil::getScope().RecId,
                taxDocumentComponentTransaction_IN.TaxType);
            RefRecId taxRuntimeComponentRecId = TaxComponentRelationTable_IN::findByTaxComponentTable(taxDocumentComponentTransaction_IN.TaxComponent).TaxRuntimeComponent;

            adjLoc.addTaxApplicibility(TaxIntegrationUtils::getComponentPath(taxRuntimeTaxType, taxRuntimeComponentRecId));

            if (_measureType == '' || _measureType == classStr(TaxMeasureRate))
            {
                adjLoc.addMeasureAdjustment(
                    TaxIntegrationUtils::getMeasurePath(classStr(TaxMeasureRate), taxRuntimeTaxType, taxRuntimeComponentRecId),
                    taxDocumentComponentTransaction.TaxRate);
            }

            if (_measureType == '' || _measureType == classStr(TaxMeasureTaxAmount))
            {
                adjLoc.addMeasureAdjustment(
                    TaxIntegrationUtils::getMeasurePath(classStr(TaxMeasureTaxAmount), taxRuntimeTaxType, taxRuntimeComponentRecId),
                    taxDocumentComponentTransaction.TaxAmountCur * sign);
            }

            if (_measureType == '' || _measureType == classStr(TaxMeasureBaseAmount))
            {
                adjLoc.addMeasureAdjustment(
                    TaxIntegrationUtils::getMeasurePath(classStr(TaxMeasureBaseAmount), taxRuntimeTaxType, taxRuntimeComponentRecId),
                    taxDocumentComponentTransaction.TaxBaseAmountCur);
            }

            if (_measureType == '' || _measureType == classStr(TaxMeasurePercentage))
            {
                // Applicable Percentage of tax
                adjLoc.addMeasureAdjustment(
                    TaxIntegrationUtils::getMeasurePath(classStr(TaxMeasurePercentage), taxRuntimeTaxType, taxRuntimeComponentRecId, TaxEngineIntegrationConstants::ApplicablePercentageOfTax),
                    taxDocumentComponentTransaction.ApplicablePercentageOfTax);

                // Reverse Charge Percentage
                adjLoc.addMeasureAdjustment(
                    TaxIntegrationUtils::getMeasurePath(classStr(TaxMeasurePercentage), taxRuntimeTaxType, taxRuntimeComponentRecId, TaxEngineModelLineMeasuresConstants::TaxReverseChargePercentage),
                    taxDocumentComponentTransaction_IN.ReverseChargePercentage);

                // Load on Inventory Percentage
                TaxTrans_IN taxTrans_IN;

                select firstonly LoadOnInventoryPercent, RecId from taxTrans_IN
                    where taxTrans_IN.SourceRecId == _inventTransferJourLine.RecId
                        && taxTrans_IN.SourceTableId == _inventTransferJourLine.TableId
                        && taxTrans_IN.TaxCode == taxDocumentComponentTransaction.TaxCode;

                if (taxTrans_IN)
                {
                    adjLoc.addMeasureAdjustment(
                        TaxIntegrationUtils::getMeasurePath(classStr(TaxMeasurePercentage), taxRuntimeTaxType, taxRuntimeComponentRecId, TaxEngineModelLineMeasuresConstants::LoadOnInventoryPercent),
                        taxTrans_IN.LoadOnInventoryPercent/100);
                }
            }
        }

        return adjLoc.getCLRObject();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>