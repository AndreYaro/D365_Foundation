<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RReportSectionControl_Merge</Name>
	<SourceCode>
		<Declaration><![CDATA[
//Create and print sections with merged controls
final class RReportSectionControl_Merge extends RReportSectionControl
{
    int         fromColumnNum;          //First column
    Set         setCreatedColumns;      //Keep all created columns

    Map         mapMergeControl;        //Contains merge columns.
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addConrol</Name>
				<Source><![CDATA[
    //  Key - number of merge column.
                                        //  Value - struct: number of first column to merge, number of last column.
    protected container addConrol(int   _iLeftPos,
                                  int   _curCol,
                                  int   _toColumnNum,
                                  Map   _mapCntrTemplate)
    {
        boolean         bOk;
        int             iCreatedCol, iLeftPos = _iLeftPos;
        container       con;

        ;

        if (_curCol > _toColumnNum)
            con = [false, iLeftPos, 0];

        if (mapMergeControl.exists(_curCol))
        {
            con = this.addMergedControl(iLeftPos, _curCol, _toColumnNum, _mapCntrTemplate);
        }
        else if (this.isInMergeMapRange(_curCol))
        {
            if (this.isColOnCurrPage(_curCol))
            {
                if (lastColumnOnPage >= _curCol)
                {
                    con = [true, iLeftPos, 0];
                }
                else
                {
                    con = this.addMergedControl(iLeftPos, _curCol, _toColumnNum, _mapCntrTemplate);
                }
            }
            else
            {
                con =  this.addMergedControl(iLeftPos, _curCol, _toColumnNum, _mapCntrTemplate);
            }
        }
        else
        {
            [bOk, iLeftPos, iCreatedCol] = super(iLeftPos, _curCol, _toColumnNum, _mapCntrTemplate);

            if (bOk)
            {
                setCreatedColumns.add(_curCol);
            }

            con = [bOk, iLeftPos, iCreatedCol];
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMergedControl</Name>
				<Source><![CDATA[
    private container addMergedControl(int      _iLeftPos,
                                       int      _curCol,
                                       int      _toColumnNum,
                                       Map      _mapCntrTemplate)
    {
        ReportControl   control;
        Struct          struct, structTemplate;
        int             colNum = 0, first, last, tmpFirst,iLeftPos = _iLeftPos;
        int             colWidth = 0;
        int             retColNum, iTmp;
        Set             set = new Set(Types::Integer), setTmp;
        boolean         bOk = false;

        boolean  createColumn()
        {
            if (setCreatedColumns.in(colNum) || setNotPrintColumn.in(colNum))
            {
                lastColumnOnPage = colNum;
                return true;
            }

            if (!this.checkAvailableSpace(iLeftPos + colWidth, colNum, _toColumnNum, _mapCntrTemplate))
            {
                return false;
            }

            set.add(colNum);

            structTemplate = this.getStructTemplate(colNum, _mapCntrTemplate);
            iTmp           = this.getControlWidth(structTemplate.value(#structWidth));

            colWidth += iTmp;

            lastColumnOnPage = colNum;

            return true;
        }

        ;
        retColNum  = 0;
        struct     = mapMergeControl.lookup(this.getMergeColNum(_curCol));

        first      = struct.value(#firstMergeCol);
        last       = struct.value(#lastMergeCol);

        if ((confind(conRepeatableColumn, _curCol) != 0) && (first < fromColumnNum))
        {
            colNum = first;
            createColumn();
        }

        tmpFirst  = max(first, fromColumnNum);
        retColNum = 0;

        for (colNum = tmpFirst; colNum <= last; colNum++)
        {
            if (! createColumn())
                break;
        }

        setTmp = Set::difference(set, setCreatedColumns);

        if (setTmp.elements() > 0)
        {
            colWidth -= #leftMarning + #rightMarning;

            structTemplate = Struct::create(this.getStructTemplate(_curCol, _mapCntrTemplate).pack());
            structTemplate.value(#structWidth, colWidth);

            control   =  this.createControl(iLeftPos + #leftMarning, structTemplate);
            iLeftPos += this.getControlWidth(control.width100mm());

            this.createVShapeControl(iLeftPos);

            this.addControlInList(_curCol, control);

            setCreatedColumns = Set::union(setCreatedColumns, set);
            bOk               = true;
        }

        return [bOk, iLeftPos, retColNum];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergeColNum</Name>
				<Source><![CDATA[
    private int getMergeColNum(int _curCol)
    {
        MapEnumerator   en;
        Struct          struct;

        ;

        en = mapMergeControl.getEnumerator();

        while (en.moveNext())
        {
            struct = en.currentValue();

            if (this.isInRange(_curCol, struct))
                return struct.value(#firstMergeCol);
        }

        throw error(error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isColOnCurrPage</Name>
				<Source><![CDATA[
    private boolean isColOnCurrPage(int _curCol)
    {
        Struct          tmpStruct;
        int             mergeColNum;

        ;

        mergeColNum = this.getMergeColNum(_curCol);

        if ((conRepeatableColumn != connull()) && confind(conRepeatableColumn, mergeColNum) != 0)
            return true;

        tmpStruct = mapMergeControl.lookup(mergeColNum);

        return (tmpStruct.value(#firstMergeCol) >= fromColumnNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInMergeMapRange</Name>
				<Source><![CDATA[
    private boolean isInMergeMapRange(int _colNum)
    {
        MapEnumerator   en;
        Struct          struct;
        ;

        en = mapMergeControl.getEnumerator();

        while (en.moveNext())
        {
            struct = en.currentValue();

            if (this.isInRange(_colNum, struct))
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInRange</Name>
				<Source><![CDATA[
    private boolean isInRange(int _iValue, Struct _struct)
    {
        return (_iValue >= _struct.value(#firstMergeCol)) && (_iValue <= _struct.value(#lastMergeCol));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    //  _reportRun              -> Report.
    //  _designName             -> Name of selected design.
    //  _mapCntrTemplate        -> Map keep templates to create conrol elements.
    //  _fromColumnNum          -> Number is for first originating column into section.
    //  _toColumnNum            -> Number is for last originating column.
    //  _conRepeatableColumn    -> Keep column repeatable.
    //  _conNotPrintColumn      -> Numbers of column are not printable
    //  _mapMergeColumn         -> map of merge columns.
    public void new(ReportRun       _reportRun,
                    identifiername  _designName,
                    Map             _mapCntrTemplate,
                    int             _fromColumnNum,
                    int             _toColumnNum,
                    container       _conRepeatableColumn,
                    Set             _setNotPrintColumn,
                    Map             _mapMergeControl)
    {
        ;

        setCreatedColumns = new Set(Types::Integer);

        mapMergeControl = _mapMergeControl;
        fromColumnNum   = _fromColumnNum;

        super(_reportRun,
              _designName,
              _mapCntrTemplate,
              _fromColumnNum,
              _toColumnNum,
              _conRepeatableColumn,
              _setNotPrintColumn);

        setCreatedColumns = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>