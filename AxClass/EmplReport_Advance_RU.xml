<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplReport_Advance_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EmplReport_Advance_RU extends RunBaseBatch implements BatchRetryable
{
    EmplAdvTable_RU         headerTable;
    EmplAdvLine_RU          lineTable;
    EmplSettlement_RU       settleTable;
    EmplTrans_RU            exchAdjUnrealizedTrans;

    AmountCur               amountSpendCur;
    AmountMST               amountSpendMst;
    AmountMST               amountReasonSum;
    AmountMST               amountCheckSum;

    container               contain;

    EmplAdvancePostedId_RU  advanceId;

    DialogRunbase           dialog;
    DialogField             dialogAdvanceId;

    boolean                 dialogOK;

    protected const Version CurrentVersion_EmplReport_Advance_RU = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dateToStr_LongFmt</Name>
				<Source><![CDATA[
    public str dateToStr_LongFmt(date _dt)
    {
        str sRet = "";
        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        if (_dt != dateNull())
        {
            sRet = converter.date2str(_dt, true);
        }
        return strReplace(sRet, '\'', '"');
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToStr_ShortFmt</Name>
				<Source><![CDATA[
    private str dateToStr_ShortFmt(date _dt)
    {
        str sRet = "";

        if (_dt != dateNull())
        {
            const int dateFormatSequence = 123;
            const int twoDigits = 2;
            const int fourDigits = 4;
            const DateSeparator separator = 2;
            sRet = date2str(_dt, dateFormatSequence, twoDigits, separator, twoDigits, separator, fourDigits, DateFlags::None);
        }
        return sRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(
        DialogRunbase   _dialog         = null,
        boolean         _forceOnClient  = false
        )
    {
        dialog = super();

        if (headerTable)
        {
            this.parmAdvanceId(headerTable.AdvanceId);
        }

        dialog.addGroup("@GLS101880");
        dialogAdvanceId = dialog.addFieldValue(extendedTypeStr(EmplAdvancePostedId_RU), this.parmAdvanceId());

        if (headerTable)
        {
            dialogAdvanceId.enabled(false);
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    public boolean dialogOk(boolean _ret = dialogOK)
    {
        dialogOK = _ret;

        return dialogOK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        this.parmAdvanceId(dialogAdvanceId.value());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(TableId  _tableId,
                               Common   _record)
    {
        boolean  ret = true;

        switch (_tableId)
        {
            case  tableNum(EmplAdvTable_RU) :
                headerTable = _record;
                break;
            case  tableNum(EmplAdvLine_RU) :
                headerTable = _record.advTable();
                break;
        }

        if (headerTable && headerTable.Status != EmplAdvStatus_RU::Posted)
        {
            select firstonly RecId from lineTable
                where lineTable.AdvanceId   == headerTable.AdvanceId      &&
                     (lineTable.LineType    == EmplAdvLineType_RU::Expend ||
                      lineTable.LineType    == EmplAdvLineType_RU::None);

            if (lineTable.RecId)
            {
                ret = checkFailed(strFmt("@GLS104815", headerTable.AdvanceId));
            }
        }

        if (ret)
        {
            ret = this.prompt();
        }

        if (ret && ! headerTable)
        {
            headerTable = EmplAdvTable_RU::find(this.parmAdvanceId());
        }

        this.dialogOk(ret);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.dialogOk(true);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion_EmplReport_Advance_RU, advanceId] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceId</Name>
				<Source><![CDATA[
    public EmplAdvancePostedId_RU parmAdvanceId(EmplAdvancePostedId_RU _advanceId = advanceId)
    {
        advanceId = _advanceId;
        return advanceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContain</Name>
				<Source><![CDATA[
    public container parmContain(container _contain = contain)
    {
        contain = _contain;
        return contain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchAdjUnrealizedTrans</Name>
				<Source><![CDATA[
    public EmplTrans_RU parmExchAdjUnrealizedTrans(EmplTrans_RU _exchAdjUnrealizedTrans = exchAdjUnrealizedTrans)
    {
        exchAdjUnrealizedTrans = _exchAdjUnrealizedTrans;

        return exchAdjUnrealizedTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeaderTable</Name>
				<Source><![CDATA[
    public EmplAdvTable_RU parmHeaderTable(EmplAdvTable_RU _table = headerTable)
    {
        if (_table)
        {
            headerTable = _table;
        }

        return headerTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSettleTable</Name>
				<Source><![CDATA[
    public EmplSettlement_RU parmSettleTable()
    {
        return settleTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        XMLExcelReport_AO1_RU     xmlExcelReport;
        Args                      args = new Args();

        OfficialsTrans_RU       officialsTrans = OfficialsTrans_RU::findSessionId(headerTable.OffSessionId, OffPosition_RU::Director);
        EmplSettleDynamicAdv_RU emplSettle     = new EmplSettleDynamicAdv_RU(headerTable.TransDate);

        HcmWorker worker = EmployeeTable_RU::findByEmployeeId(headerTable.EmplAccount).worker();
        OMOperatingUnit department = HcmWorkerHelper::getPrimaryDepartment(worker.RecId, headerTable.TransDate);

        contain = [
                    headerTable.AdvanceId,
                    this.dateToStr_ShortFmt(headerTable.TransDate),
                    this.dateToStr_LongFmt(headerTable.TransDate),
                    CompanyInfo::find().name(),
                    headerTable.EmplAccount,
                    HcmWorker::find(HcmEmployment::find(EmployeeTable_RU::findByEmployeeId(headerTable.EmplAccount).HcmEmployment).Worker).name(),
                    HcmWorkerHelper::getWorkerPrimaryPositionTitle(worker.RecId, headerTable.TransDate),
                    department.Name,
                    department.OMOperatingUnitNumber,
                    officialsTrans.Name,
                    officialsTrans.Title,
                    OfficialsTrans_RU::findSessionId(headerTable.OffSessionId, OffPosition_RU::Accountant).Name,
                    OfficialsTrans_RU::findSessionId(headerTable.OffSessionId, OffPosition_RU::AccountantJ).Name,
                    OfficialsTrans_RU::findSessionId(headerTable.OffSessionId, OffPosition_RU::Cashier).Name,
                    this.dateToStr_LongFmt(headerTable.ApprovalDate),
                    this.dateToStr_LongFmt(headerTable.CheckingDate),
                    headerTable.NotesLine,
                    headerTable.AmountMST,
                    headerTable.TransDate
        ];

        emplSettle.parmAdvanceId(headerTable.AdvanceId);
        emplSettle.settleNow();

        settleTable            = emplSettle.transSettle();
        exchAdjUnrealizedTrans = emplSettle.exchAdjUnrealizedTrans();

        this.parmContain(contain);

        args.caller(this);

        xmlExcelReport = XMLExcelReport_AO1_RU::construct();
        xmlExcelReport.parmArgs(args);
        xmlExcelReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version    = conPeek(_packedClass,1);

        switch (version)
        {
            case CurrentVersion_EmplReport_Advance_RU:
                [version, advanceId, base] = _packedClass;
                ret = super(base);
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Description of the report
    /// </summary>
    /// <returns>
    ///  Description
    /// </returns>
    public static Description description()
    {
        return "@GLS101897";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EmplReport_Advance_RU     report = new EmplReport_Advance_RU();

        report.initParameters(_args.dataset(), _args.record());

        if (report.dialogOk())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>