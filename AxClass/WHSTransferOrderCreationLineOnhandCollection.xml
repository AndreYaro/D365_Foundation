<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSTransferOrderCreationLineOnhandCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSTransferOrderCreationLineOnhandCollection</c> class contains information about the physical onhand for an item and used license plates.
/// </summary>
internal class WHSTransferOrderCreationLineOnhandCollection
{
    private Set licensePlates;
    private Map physicalOnhand;
    private Map lineCreationPolicy;
    private boolean isCatchWeightItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLicensePlates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of license plates.
    /// </summary>
    /// <returns>A collection of license plates.</returns>
    public Set getLicensePlates()
    {
        return licensePlates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysicalOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of <c>WHSTransferOrderCreationLineOnhandDimensionCollection</c> classes that contains onhand information.
    /// </summary>
    /// <returns>A collection of <c>WHSTransferOrderCreationLineOnhandDimensionCollection</c> classes.</returns>
    public WHSTransferOrderCreationLineOnhandDimensionCollection getPhysicalOnhand()
    {
        WHSTransferOrderCreationLineOnhandDimensionCollection onhand = WHSTransferOrderCreationLineOnhandDimensionCollection::construct();

        var physicalOnhandEnumerator = physicalOnhand.getEnumerator();
        while (physicalOnhandEnumerator.moveNext())
        {
            onhand.addOnhandCollection(physicalOnhandEnumerator.currentValue());
        }

        return onhand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysicalOnhandByLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a collection of <c>WHSTransferOrderCreationLineOnhandDimensionCollection</c> classes that contains onhand information for a license plate.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate ID for which to find the onhand.</param>
    /// <returns>A collection of <c>WHSTransferOrderCreationLineOnhandDimensionCollection</c> classes.</returns>
    public WHSTransferOrderCreationLineOnhandDimensionCollection getPhysicalOnhandByLicensePlate(WHSLicensePlateId _licensePlateId)
    {
        if (physicalOnhand.exists(_licensePlateId))
        {
            return physicalOnhand.lookup(_licensePlateId);
        }

        return WHSTransferOrderCreationLineOnhandDimensionCollection::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePhysicalOnhandByLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether license plate should be used when lookup onhand.
    /// </summary>
    /// <returns>true if the license plate should be used when lookup onhand; otherwise false</returns>
    public boolean usePhysicalOnhandByLicensePlate()
    {
        if (lineCreationPolicy.elements() > 1)
        {
            WHSTransferOrderLineCreationPolicy lastLineCreationPolicy;

            var lineCreationPolicyEnumerator = lineCreationPolicy.getEnumerator();

            lineCreationPolicyEnumerator.moveNext();

            lastLineCreationPolicy = lineCreationPolicyEnumerator.currentValue();

            while (lineCreationPolicyEnumerator.moveNext())
            {
                WHSTransferOrderLineCreationPolicy currentLineCreationPolicy = lineCreationPolicyEnumerator.currentValue();

                if (currentLineCreationPolicy != lastLineCreationPolicy)
                {
                    return true;
                }

                lastLineCreationPolicy = currentLineCreationPolicy;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineCreationPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line creation policy for a license plate.
    /// </summary>
    /// <param name = "_licensePlateId">The license plate ID for which to find the line creation policy.</param>
    /// <returns>The line creation policy.</returns>
    public WHSTransferOrderLineCreationPolicy getLineCreationPolicy(WHSLicensePlateId _licensePlateId)
    {
        if (lineCreationPolicy.exists(_licensePlateId))
        {
            return lineCreationPolicy.lookup(_licensePlateId);
        }

        return WHSTransferOrderLineCreationPolicy::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        physicalOnhand = new Map(Types::String, Types::Class);
        licensePlates = new Set(Types::String);
        lineCreationPolicy = new Map(Types::String, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds onhand information to the collection.
    /// </summary>
    /// <param name = "_onhandElement">The onhand information including dimensions.</param>
    /// <param name = "_licensePlateId">The license plate associated with the onhand.</param>
    /// <param name = "_lineCreationPolicy">The line creation policy to be used for the onhand.</param>
    public void addOnhand(WHSTransferOrderCreationLineOnhandElement _onhandElement, WHSLicensePlateId _licensePlateId, WHSTransferOrderLineCreationPolicy _lineCreationPolicy)
    {
        if (!licensePlates.in(_licensePlateId))
        {
            licensePlates.add(_licensePlateId);
            lineCreationPolicy.insert(_licensePlateId, _lineCreationPolicy);
        }

        WHSTransferOrderCreationLineOnhandDimensionCollection physicalOnhandByDimensions;

        if (physicalOnhand.exists(_licensePlateId))
        {
            physicalOnhandByDimensions = physicalOnhand.lookup(_licensePlateId);
            physicalOnhand.remove(_licensePlateId);
        }
        else
        {
            physicalOnhandByDimensions = WHSTransferOrderCreationLineOnhandDimensionCollection::construct();
        }

        physicalOnhandByDimensions.addOnhand(_onhandElement, _licensePlateId);

        physicalOnhand.insert(_licensePlateId, physicalOnhandByDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSTransferOrderCreationLineOnhandCollection construct()
    {
        return new WHSTransferOrderCreationLineOnhandCollection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSTransferOrderCreationLineOnhandCollection</c> class.
    /// </summary>
    /// <param name = "_itemId">The item ID for the onhand.</param>
    /// <returns>An instance of the <c>WHSTransferOrderCreationLineOnhandCollection</c> class.</returns>
    public static WHSTransferOrderCreationLineOnhandCollection newFromItem(ItemId _itemId)
    {
        WHSTransferOrderCreationLineOnhandCollection onhandElement = WHSTransferOrderCreationLineOnhandCollection::construct();

        onhandElement.isCatchWeightItem = PdsGlobal::pdsIsCWItem(_itemId);
        
        return onhandElement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>