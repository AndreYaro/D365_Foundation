<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PsaProjectTotals</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PsaProjectTotals
{
    ProjStatistic           m_oProjStatistic;
    projStatisticCalc       m_oProjStatisticCalc;
    TmpProjStatistic        m_tTmpProjStatistic;
    sequenceNum             m_iLastCalcSeqNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>projStatistic</Name>
				<Source><![CDATA[
    public TmpProjStatistic projStatistic()
    {
        return m_tTmpProjStatistic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedTotal</Name>
				<Source><![CDATA[
    // Description    : Calculate the total invoiced amount to date
    static Amount invoicedTotal(ProjId _sProjId, ProjCategoryId _sCategoryId = '')
    {
        Amount                  rAmount;
        ProjInvoiceCost         tProjInvoiceCost;
        ProjInvoiceEmpl         tProjInvoiceEmpl;
        ProjInvoiceEmplDetail   projInvoiceEmplDetail;
        ProjInvoiceRevenue      tProjInvoiceRevenue;
        ProjInvoiceOnAcc        tProjInvoiceOnAcc;
        ProjInvoiceItem         tProjInvoiceItem;
        ProjEmplTransSale       projEmplTransSale;

        while select tProjInvoiceCost
            where tProjInvoiceCost.ProjId == _sProjId
               && (tProjInvoiceCost.CategoryId == _sCategoryId || !_sCategoryId)
        {
            rAmount += tProjInvoiceCost.amountMST();
        }

        while select tProjInvoiceEmpl
            where tProjInvoiceEmpl.ProjId == _sProjId
               && (tProjInvoiceEmpl.CategoryId == _sCategoryId || !_sCategoryId)
            join InvoiceRefRecId,SaleRefRecId from projInvoiceEmplDetail
                where tProjInvoiceEmpl.RecId==projInvoiceEmplDetail.InvoiceRefRecId
        {
            rAmount += tProjInvoiceEmpl.transTurnover();

            // add indirect invoice amount
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                select psaIndirectInvoice from projEmplTransSale
                    where projEmplTransSale.RecId == projInvoiceEmplDetail.SaleRefRecId;

                rAmount += projEmplTransSale.psaIndirectInvoice;
            }
        }

        while select tProjInvoiceRevenue
            where tProjInvoiceRevenue.ProjId == _sProjId
               && (tProjInvoiceRevenue.CategoryId == _sCategoryId || !_sCategoryId)
               && tProjInvoiceRevenue.IsRetained == NoYes::No
               && tProjInvoiceRevenue.IsReleased == NoYes::No
        {
            rAmount += tProjInvoiceRevenue.transTurnover();
        }

        while select tProjInvoiceItem
            where tProjInvoiceItem.ProjId == _sProjId
               && (tProjInvoiceItem.CategoryId == _sCategoryId || !_sCategoryId)
        {
            rAmount += tProjInvoiceItem.amountMST();
        }

        while select sum(AmountMST) from tProjInvoiceOnAcc
            where tProjInvoiceOnAcc.ProjId == _sProjId
        {
            rAmount += tProjInvoiceOnAcc.AmountMST;
        }

        return rAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcProjProposalProj</Name>
				<Source><![CDATA[
    static void recalcProjProposalProj(Amount _rInvoiceNow, ProjProposalId _sProposalId, ProjId _sProjId)
    {
        PSAProjProposalProj tProjProposalProj;
        ProjProposalJour    tProjProposalJour;
        ProjProposalTotals  oProjProposalTotals;

        ttsbegin;

        // different adj. methods depending on the projTrans?

        select forupdate firstonly * from tProjProposalProj
            where tProjProposalProj.ProjProposalId == _sProposalId
            &&    tProjProposalProj.ProjId == _sProjId;

        // reduce invoice now, delete record if invoice now is 0?

        tProjProposalProj.InvoicedNow += _rInvoiceNow;
        // other fields that need to be updated??
        tProjProposalProj.update();

        // adjust the projProposalJournal itself
        select forupdate firstonly * from tProjProposalJour
            where tProjProposalJour.ProposalId == _sProposalId
            &&    tProjProposalJour.LineProperty == ProjLinePropertyCode::Open;

        // fields needed to be updated?: cashdisc, costvalue, sumlinedisc, salesorderbalance, enddisc, invoiceamount, onaccountamount, sumtax
        // based on ProjInvoiceChoose.setProjProposalTotals
        oProjProposalTotals = new ProjProposalTotals(tProjProposalJour);
        oProjProposalTotals.calc();

        tProjProposalJour.CostValue           = oProjProposalTotals.projInvoiceCostValue();
        tProjProposalJour.CashDisc            = oProjProposalTotals.projInvoiceCashDisc();
        tProjProposalJour.InvoiceRoundOff     = oProjProposalTotals.projInvoiceRoundOff();
        tProjProposalJour.InvoiceAmount       = oProjProposalTotals.projInvoiceTotalAmount();
        tProjProposalJour.OnAccountAmount     = oProjProposalTotals.projOnAccAmount();

        tProjProposalJour.calcDue();
        tProjProposalJour.calcCashDiscDate();
        tProjProposalJour.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjProposalContLine</Name>
				<Source><![CDATA[
    // Description    : summed invoice amount by contract line
    public static PSAProjProposalProj updateProjProposalContLine(PSAContractLineNum     _contLineNum,
                                                                 ProjProposalJour       _projProposalJour,
                                                                 PSAProjProposalProj    _projProposalCont)
    {
        ProjTrans               projTrans;

        ProjCostTrans           projCostTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjItemTrans           projItemTrans_Item;
        ProjOnAccTrans          projOnAccTrans;
        ProjEmplTrans           projEmplTrans;

        ProjInvoiceCost         projInvoiceCost;
        ProjInvoiceEmpl         projInvoiceEmpl;
        ProjInvoiceRevenue      projInvoiceRevenue;
        ProjInvoiceOnAcc        projInvoiceOnAcc;
        ProjInvoiceItem         projInvoiceItem;

        ProjEmplTransSale       projEmplTransSale;
        ProjCostTransSale       projCostTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjOnAccTransSale      projOnAccTransSale;
        ProjItemTransSale       projItemTransSale;

        ProjProposalItem        projProposalItem_SalesOrder;
        ProjProposalItem        projProposalItem_Item;
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalCost        projProposalCost;
        ProjProposalRevenue     projProposalRevenue;
        ProjProposalOnAcc       projProposalOnAcc;

        ProjInvoiceCostDetail       projInvoiceCostDetail;
        ProjInvoiceEmplDetail       projInvoiceEmplDetail;
        ProjInvoiceItemDetail       projInvoiceItemDetail;
        projInvoiceRevenueDetail    projInvoiceRevenueDetail;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;

        if (!_projProposalCont)
        {
            _projProposalCont.ContractLineNum = _contLineNum;
            _projProposalCont.ProjProposalId  = _projProposalJour.ProposalId;
        }

        // sum invoiced per BillingRule, only look at BillingRule that are likely to be inoviced
        // Expense Transaction
        select sum(LineAmount) from projInvoiceCostDetail
            join RecId from projCostTransSale
                where projCostTransSale.RecId == projInvoiceCostDetail.SaleRefRecId
                   && projCostTransSale.FundingSource == _projProposalCont.FundingSource
            join RecId from projInvoiceCost
                where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                   && projInvoiceCost.PSAContractLineNum == _contLineNum;

        _projProposalCont.Invoiced += projInvoiceCostDetail.LineAmount;

        // Hour Transaction
        while select LineAmount from projInvoiceEmplDetail
            join psaIndirectInvoice, RecId from projEmplTransSale
                where projEmplTransSale.RecId == projInvoiceEmplDetail.SaleRefRecId
                   && projEmplTransSale.FundingSource == _projProposalCont.FundingSource
            join recId from projInvoiceEmpl
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                   && projInvoiceEmpl.PSAContractLineNum == _contLineNum
        {
            _projProposalCont.Invoiced += projInvoiceEmplDetail.LineAmount;
            // add indirect invoice amount
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                if (projInvoiceEmplDetail.LineAmount < 0)
                {
                    _projProposalCont.Invoiced += projEmplTransSale.psaIndirectInvoice * -1;
                }
                else
                {
                    _projProposalCont.Invoiced += projEmplTransSale.psaIndirectInvoice;
                }
            }
        }

        // Fee Transaction
        select sum(LineAmount) from projInvoiceRevenueDetail
            join RecId from projRevenueTransSale
                where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                   && projRevenueTransSale.FundingSource == _projProposalCont.FundingSource
            join RecId from projInvoiceRevenue
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                   && projInvoiceRevenue.PSAContractLineNum == _contLineNum;

        _projProposalCont.Invoiced += projInvoiceRevenueDetail.LineAmount;

        // Item Transaction
        select sum(LineAmount) from projInvoiceItemDetail
            join RecId from projItemTransSale
                where projItemTransSale.RecId == projInvoiceItemDetail.SaleRefRecId
                   && projItemTransSale.FundingSource == _projProposalCont.FundingSource
            join RecId from projInvoiceItem
                where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                   && projInvoiceItem.PSAContractLineNum == _contLineNum;

        _projProposalCont.Invoiced += projInvoiceItemDetail.LineAmount;

        // OnAccount Transaction
        select sum(Amount) from projInvoiceOnAccDetail
            join RecId from projOnAccTransSale
                where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
                   && projOnAccTransSale.FundingSource == _projProposalCont.FundingSource
            join RecId from projInvoiceOnAcc
                where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                   && projInvoiceOnAcc.PSAContractLineNum == _contLineNum;

        _projProposalCont.Invoiced += projInvoiceOnAccDetail.Amount;

        //Proposal calculation
        while select projProposalItem_SalesOrder
            where projProposalItem_SalesOrder.ProposalId == _projProposalJour.ProposalId
               && projProposalItem_SalesOrder.ItemType   == ProjItemType::SalesOrder
               && projProposalItem_SalesOrder.PSAContractLineNum == _contLineNum
        {
            if (projProposalItem_SalesOrder.projId() == _projProposalCont.ProjId)
            {
                projTrans = ProjTrans::newProjProposalItem(projProposalItem_SalesOrder);
                _projProposalCont.InvoicedNow += projTrans.transTurnover();
            }
        }

        while select projProposalCost
            where projProposalCost.ProposalId == _projProposalJour.ProposalId
                join TransId, psaContractLineNum from projCostTrans
                    where projCostTrans.TransId            == projProposalCost.TransId
                       && projCostTrans.psaContractLineNum == _contLineNum
                       && projCostTrans.ProjId             == _projProposalCont.ProjId
        {
            projTrans = ProjTrans::newProjProposalCost(projProposalCost);
            if (!ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTrans.projTable(), ProjTransType::Cost))
            {
               _projProposalCont.InvoicedNow += projTrans.transTurnover();
            }
        }

        while select projProposalRevenue
            where projProposalRevenue.ProposalId == _projProposalJour.ProposalId
                join TransId, psaContractLineNum from projRevenueTrans
                    where projRevenueTrans.TransId            == projProposalRevenue.TransId
                       && projRevenueTrans.psaContractLineNum == _contLineNum
                       && projRevenueTrans.IsRetained         == NoYes::No
                       && projRevenueTrans.ProjId             == _projProposalCont.ProjId
        {
            projTrans = ProjTrans::newProjProposalRevenue(projProposalRevenue);
            _projProposalCont.InvoicedNow += projTrans.transTurnover();
        }

        while select projProposalEmpl
            where projProposalEmpl.ProposalId == _projProposalJour.ProposalId
                join TransId, psaContractLineNum from projEmplTrans
                    where projEmplTrans.TransId            == projProposalEmpl.TransId
                       && projEmplTrans.psaContractLineNum == _contLineNum
                       && projEmplTrans.ProjId == _projProposalCont.ProjId
        {
            projTrans = ProjTrans::newProjProposalEmpl(projProposalEmpl);
            _projProposalCont.InvoicedNow += projTrans.transTurnover();
        }

        while select projProposalItem_Item
            where projProposalItem_Item.ProposalId == _projProposalJour.ProposalId
               && (projProposalItem_Item.ItemType   == ProjItemType::Project
               || projProposalItem_Item.ItemType   == ProjItemType::PurchOrder
               || projProposalItem_Item.ItemType   == ProjItemType::InventJournal)
            join ProjTransId, psaContractLineNum from projItemTrans_Item
                where projItemTrans_Item.ProjTransId        == projProposalItem_Item.ProjTransId
                   && projItemTrans_Item.psaContractLineNum == _contLineNum
                   && projItemTrans_Item.ProjId             == _projProposalCont.ProjId
        {
            projTrans = ProjTrans::newProjProposalItem(projProposalItem_Item);
            _projProposalCont.InvoicedNow += projTrans.transTurnover();
        }

        while select projProposalOnAcc
            where projProposalOnAcc.ProposalId == _projProposalJour.ProposalId
                join TransId, psaContractLineNum from projOnAccTrans
                    where projOnAccTrans.TransId             == projProposalOnAcc.TransId
                       && projOnAccTrans.psaContractLineNum  == _contLineNum
                       && projOnAccTrans.ProjID              == _projProposalCont.ProjId
        {
            projTrans = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);
            _projProposalCont.InvoicedNow += projTrans.transTurnover();
        }

        return _projProposalCont;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjProposalProj</Name>
				<Source><![CDATA[
    static PSAProjProposalProj updateProjProposalProj(date _dToDate, ProjTable _projTable, ProjProposalJour _projProposalJour,  PSAProjProposalProj _projProposalProj)
    {
        SalesTable              salesTable;
        ProjTrans               projTrans;

        ProjCostTrans           projCostTrans;
        ProjEmplTrans           projEmplTrans;
        ProjRevenueTrans        projRevenueTrans;
        ProjItemTrans           projItemTrans_Item;
        ProjOnAccTrans          projOnAccTrans;

        ProjInvoiceCost         projInvoiceCost;
        ProjInvoiceEmpl         projInvoiceEmpl;
        ProjInvoiceRevenue      projInvoiceRevenue;
        ProjInvoiceOnAcc        projInvoiceOnAcc;
        ProjInvoiceItem         projInvoiceItem;

        ProjProposalItem        projProposalItem_SalesOrder;
        ProjProposalItem        projProposalItem_Item;
        ProjProposalEmpl        projProposalEmpl;
        ProjProposalCost        projProposalCost;
        ProjProposalRevenue     projProposalRevenue;
        ProjProposalOnAcc       projProposalOnAcc;

        ProjCostTransCost       projCostTransCost;
        ProjCostTransSale       projCostTransSale;
        ProjEmplTransCost       projEmplTransCost;
        ProjEmplTransSale       projEmplTransSale;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjItemTransSale       projItemTransSale;
        ProjOnAccTransSale      ProjOnAccTransSale;

        ProjInvoiceCostDetail       projInvoiceCostDetail;
        ProjInvoiceEmplDetail       projInvoiceEmplDetail;
        ProjInvoiceItemDetail       projInvoiceItemDetail;
        projInvoiceRevenueDetail    projInvoiceRevenueDetail;
        ProjInvoiceOnAccDetail      projInvoiceOnAccDetail;

        // <GBR>
        ProjinvoiceJour             projinvoiceJour;
        // </GBR>

        if (!_projProposalProj)
        {
            _projProposalProj.ProjId         = _projTable.ProjId;
            _projProposalProj.ProjProposalId = _projProposalJour.ProposalId;
        }

        if (!FeatureStateProvider::IsFeatureEnabled(ProjInvoiceProposalSkipTotalsFeature::instance()))
        {
            // Sums for Time And Material
            select sum(LineAmount) from projCostTransCost
            join projCostTrans
                where projCostTrans.TransDate   <= _dToDate
                   && projCostTrans.ProjId      == _projTable.ProjId
                   && projCostTransCost.TransId == projCostTrans.TransId;

            _projProposalProj.CostCostMst  += projCostTransCost.LineAmount;
            _projProposalProj.TotalCostMst += projCostTransCost.LineAmount;

            select sum(LineAmount) from projCostTransSale
            join recId from projCostTrans
                where projCostTrans.TransDate   <= _dToDate
                   && projCostTrans.ProjId      == _projTable.ProjId
                   && projCostTransSale.TransId == projCostTrans.TransId;

            _projProposalProj.CostRevenueMst  += projCostTransSale.LineAmount;
            _projProposalProj.TotalRevenueMst += projCostTransSale.LineAmount;

            select sum(Qty) from projEmplTrans
            join sum(LineAmount) from projEmplTransCost
                where projEmplTrans.TransDate   <= _dToDate
                   && projEmplTrans.ProjId      == _projTable.ProjId
                   && projEmplTransCost.TransId == projEmplTrans.TransId;

            _projProposalProj.HourQty      +=  projEmplTrans.Qty;
            _projProposalProj.HourCostMst  +=  projEmplTransCost.LineAmount;
            _projProposalProj.TotalCostMst +=  projEmplTransCost.LineAmount;

            select sum(LineAmount) from projEmplTransSale
            join  RecId from projEmplTrans
                where projEmplTrans.TransDate  <= _dToDate
                   && projEmplTrans.ProjId     == _projTable.ProjId
                   && projEmplTransSale.TransId == projEmplTrans.TransId;

            _projProposalProj.HourRevenueMst    +=  projEmplTransSale.LineAmount;
            _projProposalProj.TotalRevenueMst   +=  projEmplTransSale.LineAmount;

            select sum(LineAmount) from projRevenueTransSale
            join recId from projRevenueTrans
                where projRevenueTrans.TransDate <= _dToDate
                   && projRevenueTrans.ProjId    == _projTable.ProjId
                   && projRevenueTrans.TransId   == projRevenueTransSale.TransId;

            _projProposalProj.RevenueRevenueMst +=  projRevenueTransSale.LineAmount;
            _projProposalProj.TotalRevenueMst   +=  projRevenueTransSale.LineAmount;
        }

        // sum invoiced per project, only look at projects that are likely to be inoviced
        // Expense Transaction
        // <GBR>
        // sum debit note issued amounts per project.
        if (BrazilParameters::isEnabled())
        {
            if (_projProposalJour.InvoiceType ==  ProjInvoiceType::DebitNote_BR)
            {
                select sum(LineAmount) from projInvoiceCostDetail
                join RecId from projCostTransSale
                    where projCostTransSale.RecId == projInvoiceCostDetail.SaleRefRecId
                       && projCostTransSale.FundingSource == _projProposalProj.FundingSource
                join RecId from projInvoiceCost
                    where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                       && projInvoiceCost.ProjId == _projProposalProj.ProjId
                 join ProjInvoiceType,ProjInvoiceId from projinvoiceJour
                    where projInvoiceCost.ProjInvoiceId == projinvoiceJour.ProjInvoiceId &&
                    projinvoiceJour.ProjInvoiceType == ProjInvoiceType::DebitNote_BR;
            }
             // sum invoiced amounts per project.
            else
            {
                    select sum(LineAmount) from projInvoiceCostDetail
                    join RecId from projCostTransSale
                        where projCostTransSale.RecId == projInvoiceCostDetail.SaleRefRecId
                           && projCostTransSale.FundingSource == _projProposalProj.FundingSource
                    join RecId from projInvoiceCost
                        where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                           && projInvoiceCost.ProjId == _projProposalProj.ProjId
                     join ProjInvoiceType,ProjInvoiceId from projinvoiceJour
                        where projInvoiceCost.ProjInvoiceId == projinvoiceJour.ProjInvoiceId &&
                        ((projinvoiceJour.ProjInvoiceType == ProjInvoiceType::Invoice) ||
                        (projinvoiceJour.ProjInvoiceType ==  ProjInvoiceType::OnAccount));
            }
        }
        else
        {
        // <GBR>
        // sum invoiced amounts per project.
            select sum(LineAmount) from projInvoiceCostDetail
            join RecId from projCostTransSale
                where projCostTransSale.RecId == projInvoiceCostDetail.SaleRefRecId
                    && projCostTransSale.FundingSource == _projProposalProj.FundingSource
            join RecId from projInvoiceCost
                where projInvoiceCostDetail.InvoiceRefRecId == projInvoiceCost.RecId
                    && projInvoiceCost.ProjId == _projProposalProj.ProjId;
        // <GBR>
        }
        // </GBR>
                _projProposalProj.Invoiced     += projInvoiceCostDetail.LineAmount;
                _projProposalProj.InvoicedCost += projInvoiceCostDetail.LineAmount;

        // Hour Transaction
        while select LineAmount, RefRecId from projInvoiceEmplDetail
            join psaIndirectInvoice, RecId from projEmplTransSale
                where projEmplTransSale.RecId == projInvoiceEmplDetail.SaleRefRecId
                   && projEmplTransSale.FundingSource == _projProposalProj.FundingSource
            join recId from projInvoiceEmpl
                where projInvoiceEmplDetail.InvoiceRefRecId == projInvoiceEmpl.RecId
                   && projInvoiceEmpl.ProjId == _projProposalProj.ProjId
        {
            _projProposalProj.Invoiced += projInvoiceEmplDetail.LineAmount;
            // Add negative indirect invoice amount for credit note proposal transactions.
            if (projInvoiceEmplDetail.RefRecId && projInvoiceEmplDetail.LineAmount < 0)
            {
                _projProposalProj.Invoiced -= projEmplTransSale.psaIndirectInvoice;
            }
            else
            {
                _projProposalProj.Invoiced += projEmplTransSale.psaIndirectInvoice;
            }
        }

        // Fee Transaction
        select sum(LineAmount) from projInvoiceRevenueDetail
            join RecId, FundingSource from projRevenueTransSale
                where projRevenueTransSale.RecId == projInvoiceRevenueDetail.SaleRefRecId
                   && projRevenueTransSale.FundingSource == _projProposalProj.FundingSource
            join RecId from projInvoiceRevenue
                where projInvoiceRevenueDetail.InvoiceRefRecId == projInvoiceRevenue.RecId
                   && projInvoiceRevenue.ProjId == _projProposalProj.ProjId;

        _projProposalProj.Invoiced += projInvoiceRevenueDetail.LineAmount;

        // Item Transaction
        select sum(LineAmount) from projInvoiceItemDetail
            join RecId from projItemTransSale
                where projItemTransSale.RecId == projInvoiceItemDetail.SaleRefRecId
                   && projItemTransSale.FundingSource == _projProposalProj.FundingSource
            join RecId from projInvoiceItem
                where projInvoiceItemDetail.InvoiceRefRecId == projInvoiceItem.RecId
                   && projInvoiceItem.ProjId == _projProposalProj.ProjId;

        _projProposalProj.Invoiced += projInvoiceItemDetail.LineAmount;

        // OnAccount Transaction
        select sum(Amount) from projInvoiceOnAccDetail
            join RecId from projOnAccTransSale
                where projOnAccTransSale.RecId == projInvoiceOnAccDetail.SaleRefRecId
                   && projOnAccTransSale.FundingSource == _projProposalProj.FundingSource
            join RecId from projInvoiceOnAcc
                where projInvoiceOnAccDetail.InvoiceRefRecId == projInvoiceOnAcc.RecId
                   && projInvoiceOnAcc.ProjId == _projProposalProj.ProjId;

        _projProposalProj.Invoiced   += projInvoiceOnAccDetail.Amount;
        _projProposalProj.InvoicedCV += projInvoiceOnAccDetail.Amount;

        //Proposal calculation
        while select projProposalItem_SalesOrder
            where projProposalItem_SalesOrder.ProposalId == _projProposalJour.ProposalId
               && projProposalItem_SalesOrder.ItemType   == ProjItemType::SalesOrder
            exists join salesTable
                where salesTable.SalesId == projProposalItem_SalesOrder.SalesId
                    && salesTable.ProjId  == _projProposalProj.ProjId
        {
            projTrans = ProjTrans::newProjProposalItem(projProposalItem_SalesOrder);
            _projProposalProj.InvoicedNow += projTrans.transTurnover();

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                _projProposalProj.InvoicedNowLeadRetainage += projTrans.transTurnover();
            }
        }

        while select projProposalCost
            where projProposalCost.ProposalId == _projProposalJour.ProposalId
                join RecId from projCostTrans
                    where projCostTrans.TransId == projProposalCost.TransId
                       && projCostTrans.ProjId  == _projTable.ProjId
        {
            projTrans = ProjTrans::newProjProposalCost(projProposalCost);
            if (!ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTrans.projTable(), ProjTransType::Cost))
            {
               _projProposalProj.InvoicedNow += projTrans.transTurnover();
            }
            _projProposalProj.InvoicedNowCost += projTrans.transTurnover();
        }

        while select projProposalRevenue
            where projProposalRevenue.ProposalId == _projProposalJour.ProposalId
                join RecId, Qty from projRevenueTrans
                    where projRevenueTrans.TransId == projProposalRevenue.TransId
                       && projRevenueTrans.ProjId  == _projTable.ProjId
                       && projRevenueTrans.IsRetained == NoYes::No
        {
            projTrans = ProjTrans::newProjProposalRevenue(projProposalRevenue);
            _projProposalProj.InvoicedNow += projTrans.transTurnover();
        }

        while select projProposalEmpl
            where projProposalEmpl.ProposalId == _projProposalJour.ProposalId
                join ProjId from projEmplTrans
                    where projEmplTrans.TransId == projProposalEmpl.TransId
                       && projEmplTrans.ProjId  == _projTable.ProjId
        {
            projTrans = ProjTrans::newProjProposalEmpl(projProposalEmpl);
            _projProposalProj.InvoicedNow += projTrans.transTurnover();
        }

        while select projProposalItem_Item
            where projProposalItem_Item.ProposalId == _projProposalJour.ProposalId
               && (projProposalItem_Item.ItemType  == ProjItemType::Project
               || projProposalItem_Item.ItemType   == ProjItemType::PurchOrder
               || projProposalItem_Item.ItemType   == ProjItemType::InventJournal
               || projProposalItem_Item.ItemType   == ProjItemType::VendorInvoice
               || projProposalItem_Item.ItemType   == ProjItemType::BeginningBalance)
            join RecId from projItemTrans_Item
                where projItemTrans_Item.ProjTransId == projProposalItem_Item.ProjTransId
                   && projItemTrans_Item.ProjId      == _projTable.ProjId
        {
            projTrans = ProjTrans::newProjProposalItem(projProposalItem_Item);
            _projProposalProj.InvoicedNow += projTrans.transTurnover();
        }

        while select projProposalOnAcc
            where projProposalOnAcc.ProposalId == _projProposalJour.ProposalId
                join RecId, PSAIsOnAccount, TransactionOrigin from projOnAccTrans
                    where projOnAccTrans.TransId == projProposalOnAcc.TransId
                       && projOnAccTrans.ProjID  == _projTable.ProjId
                       && projOnAccTrans.TransactionOrigin != ProjOrigin::Deduction
        {
            projTrans = ProjTrans::newProjProposalOnAcc(projProposalOnAcc);
            _projProposalProj.InvoicedNow += projTrans.transTurnover();
        }

        _projProposalProj = _projTable.psaEstimate(_projTable.psaForecastModelId, false, _projProposalProj );

        return _projProposalProj;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>