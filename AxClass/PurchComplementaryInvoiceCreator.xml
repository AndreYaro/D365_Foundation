<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchComplementaryInvoiceCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class orchestrates the creation of a new complementary invoice for a fiscal document with vendor account type.
/// </summary>
class PurchComplementaryInvoiceCreator extends ComplementaryInvoiceCreator
{
    PurchComplementaryInvoiceHeader complementaryInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createComplementaryInvoiceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new purchase complementary invoice.
    /// </summary>
    /// <returns>
    /// New <c>PurchComplementaryInvoiceHeader</c> record.
    /// </returns>
    protected Common createComplementaryInvoiceHeader()
    {
        FiscalReferenceParmCreator_BR   fiscalReferenceCreator;
        FiscalDocument_BR               origFiscalDoc = this.parmComplementedFiscalDocument();
        FiscalDocument_BR               latestVendorIssuedFD;
        PurchTable                      purchTable;
        FiscalDocumentType_BR           fiscalDocType;
        VendInvoiceJour                 vendInvoiceJour;
        purchTable_BR                   purchTable_BR;
        FiscalEstablishment_BR          fiscalEstablishment = FiscalEstablishment_BR::findByCNPJ(origFiscalDoc.FiscalEstablishmentCNPJCPF);

        complementaryInvoice.ComplementaryType              = this.parmComplementaryType();
        complementaryInvoice.ComplementedFiscalDocument     = origFiscalDoc.RecId;
        complementaryInvoice.Issuer                         = origFiscalDoc.FiscalDocumentIssuer;
        complementaryInvoice.VendTable                      = origFiscalDoc.FiscalDocumentAccountNum;
        complementaryInvoice.ThirdPartyPostalAddress        = origFiscalDoc.ThirdPartyPostalAddress;
        complementaryInvoice.VendFinalUser                  = origFiscalDoc.FinalUser;
        complementaryInvoice.FiscalEstablishment_BR         = fiscalEstablishment.RecId;

        vendInvoiceJour = vendInvoiceJour::findRecId(origFiscalDoc.RefRecId);

        complementaryInvoice.AccountingDistributionTemplate = vendInvoiceJour.accDistributionTemplateRecId();
        complementaryInvoice.DefaultDimension               = vendInvoiceJour.DefaultDimension;
        complementaryInvoice.PostingProfile                 = vendInvoiceJour.PostingProfile;
        complementaryInvoice.DeliveryPostalAddress          = vendInvoiceJour.DeliveryPostalAddress;
        complementaryInvoice.Payment                        = vendInvoiceJour.Payment;
        complementaryInvoice.PaymId                         = vendInvoiceJour.PaymId;
        complementaryInvoice.PaymSched                      = vendInvoiceJour.PaymentSched;
        complementaryInvoice.Currency                       = Ledger::accountingCurrency();
        complementaryInvoice.Status                         = ComplementaryInvoiceStatus::Open;

        complementaryInvoice.DocumentDate                   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        complementaryInvoice.TransDate                      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        complementaryInvoice.calcPaymentDueDate();

        purchTable = vendInvoiceJour.purchTable();
        if (purchTable)
        {
            purchTable_BR = purchTable.purchTable_BR();
            complementaryInvoice.SettleVoucher              = purchTable.SettleVoucher;
            complementaryInvoice.VendPaymModeSpec           = purchTable.PaymSpec;
            complementaryInvoice.VendPaymModeTable          = purchTable.PaymMode;
        }

        if (complementaryInvoice.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            complementaryInvoice.FiscalDocumentType         = vendInvoiceJour.FiscalDocumentType_BR;

            fiscalDocType = FiscalDocumentType_BR::findRecId(complementaryInvoice.FiscalDocumentType);
            complementaryInvoice.Model                      = fiscalDocType.FiscalDocumentModel;
            complementaryInvoice.Specie                     = fiscalDocType.FiscalDocumentSpecie;
            complementaryInvoice.Number                     = "@SYS11318";
            if (fiscalDocType.InvoiceIssueDate &&
                BrazilParameters::find().ChronologicalInvoiceNumbering)
            {
                complementaryInvoice.DocumentDate           = fiscalDocType.InvoiceIssueDate;
            }
        }
        else
        {
            latestVendorIssuedFD = FiscalDocument_BR::findLastFiscalDocForVendorByFiscalEstab(fiscalEstablishment.FiscalEstablishmentId, complementaryInvoice.VendTable);
            complementaryInvoice.Model                      = latestVendorIssuedFD.Model;
            complementaryInvoice.Series                     = latestVendorIssuedFD.FiscalDocumentSeries;
            complementaryInvoice.Specie                     = latestVendorIssuedFD.Specie;
        }

        complementaryInvoice.insert();

        fiscalReferenceCreator = new FiscalReferenceParmCreator_BR(complementaryInvoice);
        fiscalReferenceCreator.addReference(this.parmComplementedFiscalDocument(),
                                            BrazilParameters::find().ComplementaryInvoiceSourceText);

        FiscalReferenceController_BR::construct(complementaryInvoice).resolveLegalTextsToSourceTable();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00025, funcName());

        return complementaryInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComplementaryInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a purchase complementary invoice line.
    /// </summary>
    /// <returns>
    /// A new <c>PurchComplementaryInvoiceLine</c> record.
    /// </returns>
    protected Common createComplementaryInvoiceLine()
    {
        PurchComplementaryInvoiceLine line;
        VendInvoiceTrans vendInvoiceTrans;
        FiscalDocumentLine_BR fiscalDocLine =  this.parmComplementedFiscalDocLine();
        PurchLine purchline;

        line.PurchComplementaryInvoiceHeader = complementaryInvoice.RecId;

        line.ComplementedFiscalDocumentLine = fiscalDocLine.RecId;
        line.CFOPTable_BR = CFOPTable_BR::findByCFOPId(fiscalDocLine.CFOP).RecId;
        line.Description = fiscalDocLine.Description;
        line.OriginalLineAmount = fiscalDocLine.LineAmount;
        line.Quantity = fiscalDocLine.Quantity;
        line.OriginalPurchUnit = fiscalDocLine.Unit;
        line.CorrectedAmount = fiscalDocLine.LineAmount;

        vendInvoiceTrans = VendInvoiceTrans::findRecId(this.parmComplementedFiscalDocLine().RefRecId);
        line.ItemId = vendInvoiceTrans.ItemId;
        line.isStocked = vendInvoiceTrans.isStocked();
        line.LineType = vendInvoiceTrans.LineType;
        line.ProcurementCategory = vendInvoiceTrans.ProcurementCategory;
        line.TaxGroup = vendInvoiceTrans.TaxGroup;
        line.TaxItemGroup = vendInvoiceTrans.TaxItemGroup;
        line.DefaultDimension = vendInvoiceTrans.DefaultDimension;
        line.LedgerDimension = vendInvoiceTrans.LedgerDimension;
        line.InventTransId = vendInvoiceTrans.InventTransId;
        line.InventDim = vendInvoiceTrans.InventDimId;

        purchline = vendInvoiceTrans.purchLine();
        if (purchline)
        {
            line.AssetBookId = purchline.AssetBookId;
            line.AssetGroup = purchline.AssetGroup;
            line.AssetId = purchline.AssetId;
        }

        line.insert();

        return line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the form name used to present the created complementary invoice to the user.
    /// </summary>
    /// <returns>
    /// Form name used to present the complementary invoice.
    /// </returns>
    public FormName getFormName()
    {
        return formStr(PurchComplementaryInvoice);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>