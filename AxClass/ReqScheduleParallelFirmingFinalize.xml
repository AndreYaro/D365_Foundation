<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqScheduleParallelFirmingFinalize</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqScheduleParallelFirmingFinalize</c> service class gets triggered when all parallel firming threads of a
/// particular parallel run finish execution and performs cleanup and end of processing run related logic.
/// </summary>
internal class ReqScheduleParallelFirmingFinalize extends RunBaseBatch implements BatchRetryable
{
    private ReqProcessId    processId;
    private ReqPlanId       planId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [processId, planId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _parameters)
    {
        [processId, planId] = _parameters;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@SCMPlanning:ReqScheduleParallelFirmingFinalize";
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ReqProcessId _processId, ReqPlanId _planId)
    {
        super();

        processId = _processId;
        planId = _planId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        // This checks needs to be done before cleanup as the cleanup will remove the data from the db
        boolean hasErrors = this.hasErrors();
        boolean isCancelled = this.isCancelled();

        this.performCleanup();

        if (isCancelled)
        {
            error("@SCMPlanning:ReqParallelFirmingCanceledErrorMessage");
        }

        // Throwing on errors is done so that the batch job will be set to state error
        if (hasErrors || isCancelled)
        {
            throw error("@SCMPlanning:ReqCalcParallelFirmingError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasErrors</Name>
				<Source><![CDATA[
    private boolean hasErrors()
    {
        var firmingRun = ReqProcessAutoFirmingRun::findByProcessId(processId);
        return firmingRun && firmingRun.HasErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelled</Name>
				<Source><![CDATA[
    private boolean isCancelled()
    {
        ReqProcessList processList = ReqProcessList::findWithoutParameters(processId, false);
        return processList && processList.Cancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCleanup</Name>
				<Source><![CDATA[
    private void performCleanup()
    {
        ttsbegin;
        ReqTransCache cache = ReqTransCache_Periodic::newProcessId(planId, processId);
        ReqCalcTaskController controller = ReqCalcTaskController::newController(planId, processId, 'cleanup');
        controller.deleteAllBundlesAndTasks();
        cache.endProcess();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>