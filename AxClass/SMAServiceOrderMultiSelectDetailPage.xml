<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceOrderMultiSelectDetailPage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SMAServiceOrderMultiSelectionDetailPage</c> class is an adapter that encapsulates iteration
/// through multiple selected records on a list page.
/// </summary>
class SmaServiceOrderMultiSelectDetailPage extends SMAServiceOrderMultiSelectContext
{
    List            serviceOrders;
    ListEnumerator  enumerator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFirst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first record from the selection.
    /// </summary>
    /// <returns>
    /// A <c>Common</c> record; otherwise, an empty record.
    /// </returns>
    public final Common getFirst()
    {
        // Sets enumerator just before the first record.
        enumerator = serviceOrders.getEnumerator();

        return this.getNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the next record from the selection.
    /// </summary>
    /// <returns>
    /// A <c>Common</c> record; otherwise, an empty record.
    /// </returns>
    public final Common getNext()
    {
        Common ret;

        if (enumerator && enumerator.moveNext())
        {
            ret = enumerator.current();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a records list from the specified data source.
    /// </summary>
    /// <param name="_serviceOrderTable_ds">
    /// A data source to use for the initialization.
    /// </param>
    /// <remarks>
    /// This method initializes an internal list of selected records.
    /// </remarks>
    public void initFromDatasource(FormDataSource _serviceOrderTable_ds)
    {
        SMAServiceOrderTable serviceOrder;

        // Initialize internal list of selected records.
        // Value 1 means multi selection
        serviceOrder = _serviceOrderTable_ds.getFirst(1);
        if (serviceOrder)
        // Multiple records selected
        {
            while (serviceOrder)
            {
                serviceOrders.addEnd(serviceOrder);
                serviceOrder = _serviceOrderTable_ds.getNext();
            }
        }
        else
        // One or no record selected
        {
            serviceOrders.addEnd(_serviceOrderTable_ds.cursor());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>SMAServiceOrderMultiSelectionDetailPage</c>.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    public void new(Args _args)
    {
        Object      caller = _args ? _args.caller() : null;
        FormRun     formRun;

        serviceOrders = new List(Types::Record);

        if (caller && caller.name() == formstr(SMAServiceOrderTable))
        {
            formRun = caller;
            this.initFromDatasource(formRun.dataSource(tablestr(SMAServiceOrderTable)));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>