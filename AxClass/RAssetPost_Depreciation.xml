<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_Depreciation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_Depreciation extends RAssetPost
{
    RAssetTransDate lastDeptDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
        public RAssetTrans initFromLedgerJournalTrans()
    {
        ;
        rAssetTrans = super();
        rAssetTrans.AssetDeprPeriod = ledgerJournalTrans_RAsset.DeprPeriod;
        if (this.isStornoTrans())
        {
            rAssetTrans.StornoRecId     = ledgerJournalTrans_RAsset.ToFromRecId;
        }
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBonusTrans</Name>
				<Source><![CDATA[
        private boolean isBonusTrans()
    {
        return ledgerJournalTrans_RAsset.ToFromRecId &&
               (RAssetTrans::find(ledgerJournalTrans_RAsset.ToFromRecId).AssetTransType == RAssetTransType::Acquisition ||
                RAssetTrans::find(ledgerJournalTrans_RAsset.ToFromRecId).AssetTransType == RAssetTransType::Revaluation ||
                ledgerJournalTrans_RAsset.DepreciationBonusId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStornoTrans</Name>
				<Source><![CDATA[
        private boolean isStornoTrans()
    {
        return ledgerJournalTrans_RAsset.ToFromRecId                          &&
               RAssetTrans::find(ledgerJournalTrans_RAsset.ToFromRecId).RecId &&
               RAssetTrans::find(ledgerJournalTrans_RAsset.ToFromRecId).AssetTransType == RAssetTransType::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
        public void post()
    {
        RAssetTrans         correctedTrans,
                            assetTransLocal;

        if (this.isStornoTrans())
        {
            correctedTrans = RAssetTrans::find(ledgerJournalTrans_RAsset.ToFromRecId, true);

            if (correctedTrans.DepreciationBonusCost)
            {
                select firstonly forupdate assetTransLocal
                    where assetTransLocal.LinkedTransRecId == correctedTrans.RecId         &&
                          (assetTransLocal.AssetTransType  == RAssetTransType::Acquisition ||
                           assetTransLocal.AssetTransType  == RAssetTransType::Revaluation);

                if (assetTransLocal.RecId)
                {
                    assetTransLocal.LinkedTransRecId = 0;
                    assetTransLocal.doUpdate();
                }

                rAssetTrans.DepreciationBonusCost = -correctedTrans.DepreciationBonusCost;
                rAssetTrans.PostingType           = RAssetPostingType::DepreciationBonus;
                rAssetTrans.doUpdate();
            }

            correctedTrans.StornoRecId = rAssetTrans.RecId;
            correctedTrans.doUpdate();

            select firstonly assetTransLocal
                order by AssetDeprPeriod desc
                where assetTransLocal.AccountNum      == correctedTrans.AccountNum      &&
                      assetTransLocal.AssetStandardId == correctedTrans.AssetStandardId &&
                      assetTransLocal.AssetTransType  == correctedTrans.AssetTransType  &&
                      assetTransLocal.AssetDeprPeriod <= correctedTrans.AssetDeprPeriod &&
                      ! assetTransLocal.StornoRecId;

            lastDeptDate = assetTransLocal.AssetDeprPeriod;
        }
        else
        {
            lastDeptDate = ledgerJournalTrans_RAsset.DeprPeriod;

            if (this.isBonusTrans())
            {
                if (rAssetTrans.CurrencyCode == ledgerJournalTrans.CurrencyCode)
                {
                    rAssetTrans.DepreciationBonusCost = ledgerJournalTrans.amount();
                }
                else
                {
                    rAssetTrans.DepreciationBonusCost = this.transAmountCur(ledgerJournalTrans.CurrencyCode,
                                                                            rAssetTrans.CurrencyCode,
                                                                            ledgerJournalTrans.amount(),
                                                                            ledgerJournalTrans.ExchRate);
                }

                rAssetTrans.PostingType = RAssetPostingType::DepreciationBonus;
                rAssetTrans.doUpdate();

                assetTransLocal = RAssetTrans::find(ledgerJournalTrans_RAsset.ToFromRecId, true);
                if (assetTransLocal)
                {
                    assetTransLocal.LinkedTransRecId = rAssetTrans.RecId;
                    assetTransLocal.doUpdate();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
        public void updateStatus()
    {
        RAssetSumCalc    assetSumTrans;
        ;

        if (! rAssetTable)
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);

        if (! rAssetStandards)
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);

        if (! rAssetTrans.DepreciationBonusCost)
            rAssetStandards.LastDepDate = lastDeptDate;

        assetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                            ledgerJournalTrans_RAsset.StandardId,
                                                            transDate);
        if (rAssetStandards.CostLimitDate)
        {
            if (this.isStornoTrans() && lastDeptDate < rAssetStandards.CostLimitDate)
                rAssetStandards.CostLimitDate = dateNull();
        }
        else if (! rAssetStandards.CostLimitDate         &&
                 rAssetStandards.isNonLinearDeprMethod(transDate - 1) &&
                 assetSumTrans.netBookValue() <= assetSumTrans.acquisitionValue() * rAssetStandards.costLimit(transDate - 1) / 100)
        {
            rAssetStandards.CostLimitDate = endmth(lastDeptDate) + 1;
        }

        rAssetStandards.doUpdate();
        rAssetTable.doUpdate();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    protected void createTransLink(RAssetTrans _rAssetTrans)
    {
        ;
        if (correct || this.isStornoTrans())
        {
            correct = true;
    
            if (this.isBonusTrans())
            {
                // Posting type is needed to find original transaction
                _rAssetTrans.PostingType = RAssetPostingType::DepreciationBonus;
            }
    
            super(_rAssetTrans);
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>