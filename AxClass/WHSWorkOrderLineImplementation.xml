<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkOrderLineImplementation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkOrderLineImplementation</c> class provides an abstraction for <c>WHSWorkLine</c> records.
/// </summary>
[WHSWorkOrderLineInterfaceFactoryAttribute(tableStr(WHSWorkLine))]
public final class WHSWorkOrderLineImplementation extends WHSWorkOrderLineInterface
{
    private WHSWorkLine workLine;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common buffer()
    {
        return workLine as Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkOrderInterface</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkOrderInterface createWorkOrderInterface()
    {
        return WHSWorkOrderInterface::createInstanceFromTableName(tableStr(WHSWorkTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkId parmWorkId(WHSWorkId _workId = '')
    {
        if (!prmIsDefault(_workId))
        {
            workLine.WorkId = _workId;
        }

        return workLine.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLineNum parmLineNum(WHSLineNum _lineNum = 0)
    {
        if (!prmIsDefault(_lineNum))
        {
            workLine.LineNum = _lineNum;
        }

        return workLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQtyWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventQtyWork parmInventQtyWork(WHSInventQtyWork _handlingQty = 0)
    {
        if (!prmIsDefault(_handlingQty))
        {
            workLine.InventQtyWork = _handlingQty;
        }

        return workLine.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WMSLocationId parmWMSLocationId(WMSLocationId _wmsLocationId = '')
    {
        if (!prmIsDefault(_wmsLocationId))
        {
            workLine.WMSLocationId = _wmsLocationId;
        }

        return workLine.WMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocatedWMSLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WMSLocationId parmAllocatedWMSLocationId(WMSLocationId _allocatedWmsLocationId = '')
    {
        if (!prmIsDefault(_allocatedWmsLocationId))
        {
            workLine.AllocatedWMSLocationId = _allocatedWmsLocationId;
        }

        return workLine.AllocatedWMSLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyRemain</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSQtyRemain parmQtyRemain(WHSQtyRemain _qtyRemain = 0)
    {
        if (!prmIsDefault(_qtyRemain))
        {
            workLine.QtyRemain = _qtyRemain;
        }

        return workLine.QtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSQtyWork parmQtyWork(WHSQtyWork _qtyWork = 0)
    {
        if (!prmIsDefault(_qtyWork))
        {
            workLine.QtyWork = _qtyWork;
        }

        return workLine.QtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQtyRemain</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSInventQtyRemain parmInventQtyRemain(WHSInventQtyRemain _inventQtyRemain = 0)
    {
        if (!prmIsDefault(_inventQtyRemain))
        {
            workLine.InventQtyRemain = _inventQtyRemain;
        }

        return workLine.InventQtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadId parmLoadId(WHSLoadId _loadId = '')
    {
        if (!prmIsDefault(_loadId))
        {
            workLine.LoadId = _loadId;
        }

        return workLine.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSOrderNum parmOrderNum(WHSOrderNum _orderNum = '')
    {
        if (!prmIsDefault(_orderNum))
        {
            workLine.OrderNum = _orderNum;
        }

        return workLine.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkType parmWorkType(WHSWorkType _workType = WHSWorkType::None)
    {
        if (!prmIsDefault(_workType))
        {
            workLine.WorkType = _workType;
        }

        return workLine.WorkType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WMSSortCode parmSortCode(WMSSortCode _sortCode = 0)
    {
        if (!prmIsDefault(_sortCode))
        {
            workLine.sortCode = _sortCode;
        }

        return workLine.sortCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZoneId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSZoneId parmZoneId(WHSZoneId _zoneId = '')
    {
        if (!prmIsDefault(_zoneId))
        {
            workLine.ZoneId = _zoneId;
        }

        return workLine.ZoneId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ItemId parmItemId(ItemId _itemId = '')
    {
        if (!prmIsDefault(_itemId))
        {
            workLine.ItemId = _itemId;
        }

        return workLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId parmInventDimId(InventDimId _inventDimId = '')
    {
        if (!prmIsDefault(_inventDimId))
        {
            workLine.InventDimId = _inventDimId;
        }

        return workLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSHighestUnitId parmUnitId(WHSHighestUnitId _unitId = '')
    {
        if (!prmIsDefault(_unitId))
        {
            workLine.UnitId = _unitId;
        }

        return workLine.UnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransId parmInventTransId(InventTransId _inventTransId = '')
    {
        if (!prmIsDefault(_inventTransId))
        {
            workLine.InventTransId = _inventTransId;
        }

        return workLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransOriginIdSupply</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransOriginIdMarked parmInventTransOriginIdSupply(InventTransOriginIdMarked _inventTransOriginIdSupply = 0)
    {
        if (!prmIsDefault(_inventTransOriginIdSupply))
        {
            workLine.InventTransOriginIdSupply = _inventTransOriginIdSupply;
        }

        return workLine.InventTransOriginIdSupply;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSShipmentId parmShipmentId(WHSShipmentId _shipmentId = '')
    {
        if (!prmIsDefault(_shipmentId))
        {
            workLine.ShipmentId = _shipmentId;
        }

        return workLine.ShipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerId parmContainerId(WHSContainerId _containerId = '')
    {
        if (!prmIsDefault(_containerId))
        {
            workLine.ContainerId = _containerId;
        }

        return workLine.ContainerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadLineRefRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal RefRecId parmLoadLineRefRecId(RefRecId _loadLineRefRecId = 0)
    {
        if (!prmIsDefault(_loadLineRefRecId))
        {
            workLine.LoadLineRefRecId = _loadLineRefRecId;
        }

        return workLine.LoadLineRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReplenDemand</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal NoYes parmReplenDemand(NoYes _replenDemand = NoYes::No)
    {
        if (!prmIsDefault(_replenDemand))
        {
            workLine.ReplenDemand = _replenDemand;
        }

        return workLine.ReplenDemand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailPhysical</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQtyAvailPhysical parmAvailPhysical(InventQtyAvailPhysical _availPhysical = 0)
    {
        if (!prmIsDefault(_availPhysical))
        {
            workLine.AvailPhysical = _availPhysical;
        }

        return workLine.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFefoBatchId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSFEFOBatchId parmFefoBatchId(WHSFEFOBatchId _fefoBatchId = '')
    {
        if (!prmIsDefault(_fefoBatchId))
        {
            workLine.FEFOBatchId = _fefoBatchId;
        }

        return workLine.FEFOBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocatedLPId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLocatedLPId parmLocatedLPId(WHSLocatedLPId _locatedLPId = '')
    {
        if (!prmIsDefault(_locatedLPId))
        {
            workLine.LocatedLPId = _locatedLPId;
        }

        return workLine.LocatedLPId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtraInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSExtraInventHandlingQty parmExtraInventHandlingQty(WHSExtraInventHandlingQty _extraInventHandlingQty = 0)
    {
        if (!prmIsDefault(_extraInventHandlingQty))
        {
            workLine.ExtraInventHandlingQty = _extraInventHandlingQty;
        }

        return workLine.ExtraInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutboundSortPosition</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSOutboundSortPositionRecId parmOutboundSortPosition(WHSOutboundSortPositionRecId _outboundSortPosition = 0)
    {
        if (!prmIsDefault(_outboundSortPosition))
        {
            workLine.OutboundSortPosition = _outboundSortPosition;
        }

        return workLine.OutboundSortPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderCommittedInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId parmOrderCommittedInventDimId(InventDimId _orderCommittedInventDimId = '')
    {
        if (!prmIsDefault(_orderCommittedInventDimId))
        {
            workLine.OrderCommittedInventDimId = _orderCommittedInventDimId;
        }

        return workLine.OrderCommittedInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markWorkOrderLineAsFailedDueToReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the work order line as failed fur to a reservation failure.
    /// </summary>
    [Hookable(false)]
    internal void markWorkOrderLineAsFailedDueToReservation()
    {
        ttsbegin;

        WhsWorkExecute::construct().updateWorkLineLocation(workLine.WorkId, workLine.LineNum, '');

        workLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum, true);
        workLine.WorkCreationFailedOnReservation = NoYes::Yes;
        workLine.update();

        WHSWorkTable workTable;
        update_recordset workTable
            setting WorkCreationFailedOnReservation = NoYes::Yes
            where workTable.WorkId == workLine.WorkId &&
                  workTable.WorkCreationFailedOnReservation == NoYes::No;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMarkWorkOrderLineAsFailedDueToReservation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canMarkWorkOrderLineAsFailedDueToReservation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWorkTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the underlying record using the <c>WHSWorkTemplateTable</c> provided.
    /// </summary>
    /// <param name = "_workTemplateLine">The <c>WHSWorkTemplateTable</c> to be used for the initialization.</param>
    [Hookable(false)]
    internal void initializeFromWorkTemplate(WHSWorkTemplateLine _workTemplateLine)
    {
        workLine.initFromWorkTemplateLineRecord(_workTemplateLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize the default values the buffer.
    /// </summary>
    [Hookable(false)]
    internal void initValue()
    {
        workLine.initValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventDim associated with the work line.
    /// </summary>
    /// <returns>The InventDim buffer associated with the work line.</returns>
    [Hookable(false)]
    internal InventDim inventDim()
    {
        return workLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the class based on the buffer.
    /// </summary>
    /// <param name = "_buffer">A record buffer.</param>
    [Hookable(false)]
    public void initializeFromBuffer(Common _buffer)
    {
        workLine = _buffer as WHSWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastPutWorkOrderLineForWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the final put work order line of the same work order.
    /// </summary>
    /// <returns>An instance of <c>WHSWorkOrderLineInterface</c> if a put work order line is found; otherwise null.</returns>
    [Hookable(false)]
    internal WHSWorkOrderLineInterface getLastPutWorkOrderLineForWork()
    {
        WHSWorkLine workLineBuffer;

        select firstonly workLineBuffer
            order by LineNum desc
            where workLineBuffer.WorkId   == this.parmWorkId()
                && workLineBuffer.WorkType == WHSWorkType::Put;

        WHSWorkOrderLineInterface workOrderLineInterface;

        if (workLineBuffer)
        {
            workOrderLineInterface = WHSWorkOrderLineInterface::createInstanceFromBuffer(workLineBuffer);
        }

        return workOrderLineInterface;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the work inventory transactions using the specified paramaters.
    /// </summary>
    /// <param name = "_witCreationParameters">
    /// An instance of <c>WHSWorkInventTransCreationParameters</c> with all the necessary parameters to create
    /// the work inventory transactions.
    /// </param>
    [Hookable(false)]
    internal void createWorkInventTrans(WHSWorkInventTransCreationParameters _witCreationParameters)
    {
        WHSWorkInventTransCreator witCreator = WHSWorkInventTransCreator::construct();
        witCreator.createFromWorkLine(this.buffer(), _witCreationParameters);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>