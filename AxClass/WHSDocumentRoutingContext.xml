<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDocumentRoutingContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSDocumentRoutingContext implements System.IDisposable
{
    private static WHSDocumentRoutingContext instance;
    private static StackBase instanceStack;

    private WHSUserId workUserId;
    private HcmWorkerRecId worker;
    private WHSMobileAppDeviceId mobileDeviceId;

    internal static boolean IsWhsMobileAppSessionDocumentRoutingContextFlightEnabled = WhsMobileAppSessionDocumentRoutingContextFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static WHSDocumentRoutingContext newFromParameters(WHSUserId _workUserid, HcmWorkerRecId _worker, WHSMobileAppDeviceId _mobileDeviceId)
    {
        WHSDocumentRoutingContext context = new WHSDocumentRoutingContext();

        context.worker = _worker;
        context.workUserId = _workUserid;
        context.mobileDeviceId = _mobileDeviceId;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPass</Name>
				<Source><![CDATA[
    internal static WHSDocumentRoutingContext newFromPass(WhsrfPassthrough _pass)
    {
        WHSDocumentRoutingContext context = new WHSDocumentRoutingContext();

        context.workUserId = _pass.parmUserId();
        context.worker = WHSWorkUser::find(context.workUserId).Worker;
        context.mobileDeviceId = _pass.parmDeviceId();

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        if (!instanceStack)
        {
            instanceStack = new StackBase(Types::Class);
        }

        instanceStack.push(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void Dispose()
    {
        if (instanceStack)
        {
            instanceStack.pop();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>current</Name>
				<Source><![CDATA[
    internal static WHSDocumentRoutingContext current()
    {
        if (instanceStack)
        {
            return instanceStack.peek(instanceStack.count());
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkUserId</Name>
				<Source><![CDATA[
    internal WHSUserId parmWorkUserId(WHSUserId _workUserId = workUserId)
    {
        workUserId = _workUserId;
        return workUserId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorker</Name>
				<Source><![CDATA[
    internal HcmWorkerRecId parmWorker(HcmWorkerRecId _worker = worker)
    {
        worker = _worker;
        return worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMobileDeviceId</Name>
				<Source><![CDATA[
    internal WHSMobileAppDeviceId parmMobileDeviceId(WHSMobileAppDeviceId _mobileDeviceId = mobileDeviceId)
    {
        mobileDeviceId = _mobileDeviceId;
        return mobileDeviceId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>