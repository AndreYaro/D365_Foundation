<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanItemMadeInProductionFlow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanItemMadeInProductionFlow</c> class determines whether specified items are made in a
///    specific production flow.
/// </summary>
public class LeanItemMadeInProductionFlow
{
    #TimeConstants
    InventItemParmData      itemParmData;
    InventItemParmData      parentItemParmData;
    TransDateTime           fromDateTime;
    TransDateTime           toDateTime;
    RefRecId                leanProductionFlowReferenceRecId;
    PlanActivityRefRecId    lastPlanActivityDownStreamRecId;

    List                    listParentItemLastPlanPlanActivities;   // PlanPlanActivity records of LastPlanPlanActivity in flows for parent item
    List                    listItemLastPlanPlanActivities;         // PlanPlanActivity record of LastPlanPlanActivity in flows for item
    Map                     mapKanbanRulePlanPlanActivity;          // KanbanRule.RecId -> PlanPlanActivity.RecId for items
    List                    listKanbanRules;                        // KanbanRule records for item
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getKanbanRuleData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the kanban rule and plan activity data for the specified parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> value that is used to find rules.
    /// </param>
    /// <param name="_inventDimId">
    /// The <c>InventDimId</c> that is used to find rules.
    /// </param>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> record that is used to find rules.
    /// </param>
    /// <param name="_listLastPlanActivities">
    /// A <c>List</c> object that is found to which <c>PlanPlanActivity</c> records will be added.
    /// </param>
    /// <param name="_mapKanbanRuleLastPlanActivity">
    /// A <c>Map</c> object that the found <c>KanbanRule</c> to <c>PlanPlanActivity</c> relations will be
    /// added.
    /// </param>
    /// <param name="_listKanbanRules">
    /// A <c>List</c> object that is found to which <c>KanbanRule</c> records will be added.
    /// </param>
    /// <returns>
    /// true if one or more applicable kanban rules were found; otherwise, false.
    /// </returns>
    private boolean getKanbanRuleData(
        ItemId        _itemId,
        InventDimId   _inventDimId,
        InventDimParm _inventDimParm,
        List          _listLastPlanActivities,
        Map           _mapKanbanRuleLastPlanActivity,
        List          _listKanbanRules)
    {
        boolean             result;

        if (_itemId)
        {
            KanbanFindRules kanbanFindRules = KanbanFindRules::newFromLeanProductionFlowReference(leanProductionFlowReferenceRecId,
                                                                                                  _itemId,
                                                                                                  fromDateTime,
                                                                                                  toDateTime,
                                                                                                  _inventDimId,
                                                                                                  _inventDimParm,
                                                                                                  false,
                                                                                                  true,
                                                                                                  false);
            kanbanFindRules.parmLastPlanActivityDownstreamRecId(lastPlanActivityDownStreamRecId);

            KanbanRule kanbanRule = kanbanFindRules.first();
            if (kanbanRule)
            {
                while (kanbanRule)
                {
                    PlanPlanActivity planPlanActivity = PlanPlanActivity::find(kanbanRule.kanbanFlow().LastPlanPlanActivity);
                    if (planPlanActivity)
                    {
                        result = true;

                        // add to list of last activities
                        if (_listLastPlanActivities)
                        {
                            _listLastPlanActivities.addEnd(planPlanActivity);
                        }

                        // maintain a map of rule -> last activity
                        if (_mapKanbanRuleLastPlanActivity)
                        {
                            _mapKanbanRuleLastPlanActivity.insert(kanbanRule.RecId,planPlanActivity.RecId);
                        }

                        // maintain a list of found rules in the original order
                        if (_listKanbanRules)
                        {
                            _listKanbanRules.addEnd(kanbanRule);
                        }
                    }

                    kanbanRule = kanbanFindRules.next();
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables.
    /// </summary>
    private void init()
    {
        listParentItemLastPlanPlanActivities = new List(Types::Record);
        listItemLastPlanPlanActivities       = new List(Types::Record);
        mapKanbanRulePlanPlanActivity        = new Map(Types::Int64,Types::Int64);
        listKanbanRules                      = new List(Types::Record);

        if (   parentItemParmData
            && parentItemParmData.parmItemId() != itemParmData.parmItemId())
        {
            this.getKanbanRuleData(parentItemParmData.parmItemId(),
                                   parentItemParmData.parmInventDimId(),
                                   parentItemParmData.parmInventDimParm(),
                                   listParentItemLastPlanPlanActivities,
                                   null,
                                   null);
        }

        this.getKanbanRuleData(itemParmData.parmItemId(),
                               itemParmData.parmInventDimId(),
                               itemParmData.parmInventDimParm(),
                               listItemLastPlanPlanActivities,
                               mapKanbanRulePlanPlanActivity,
                               listKanbanRules);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryControlledInProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified item is produced and inventory controlled in the production flow.
    /// </summary>
    /// <returns>
    ///    true if the item is produced and inventory controlled in the production flow; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isInventoryControlledInProductionFlow()
    {
        return this.madeInProductionFlowWithKanbanRule(false,true).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMadeInProductionFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified item is produced in the production flow.
    /// </summary>
    /// <returns>
    ///    true if the item is produced in the production flow; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isMadeInProductionFlow()
    {
        return this.madeInProductionFlowWithKanbanRule(true,true).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>madeInProductionFlowWithKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the item is produced in the production flow.
    /// </summary>
    /// <param name="_includeNotOnHandUpdateReceipt">
    /// A Boolean value that indicates whether activities that do not update on hand receipts must be
    /// included; optional.
    /// </param>
    /// <param name="_includeOnHandUpdateReceipt">
    /// A Boolean value that indicates whether activities that update on hand receipts must be included;
    /// optional.
    /// </param>
    /// <returns>
    /// true if the item is produced in the production flow; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule madeInProductionFlowWithKanbanRule(
        boolean _includeNotOnHandUpdateReceipt = true,
        boolean _includeOnHandUpdateReceipt    = true)
    {
        ListEnumerator      leItemLastPlanPlanActivities;
        KanbanRule          kanbanRule;
        PlanPlanActivity    planPlanActivityOnHandUpdateReceipt;
        PlanPlanActivity    planPlanActivityNotOnHandUpdateReceipt;
        PlanPlanActivity    planPlanActivityItem;
        boolean             onHandUpdateReceipt;

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        if (!listItemLastPlanPlanActivities)
        {
            this.init();
        }

        if (!listParentItemLastPlanPlanActivities ||
            listParentItemLastPlanPlanActivities.elements() == 0)
        {
            // no parent, check the item set
            leItemLastPlanPlanActivities = listItemLastPlanPlanActivities.getEnumerator();
            while (   (!planPlanActivityOnHandUpdateReceipt
                   ||  !planPlanActivityNotOnHandUpdateReceipt)
                   && leItemLastPlanPlanActivities.moveNext())
            {
                planPlanActivityItem = leItemLastPlanPlanActivities.current();
                onHandUpdateReceipt  = planPlanActivityItem.planActivity().onHandUpdate(PlanActivityType::Receive);

                if (   _includeNotOnHandUpdateReceipt
                    && !onHandUpdateReceipt)
                {
                    planPlanActivityNotOnHandUpdateReceipt.data(planPlanActivityItem);
                }

                if (    _includeOnHandUpdateReceipt
                    &&  onHandUpdateReceipt)
                {
                    planPlanActivityOnHandUpdateReceipt.data(planPlanActivityItem);
                }
            }
        }
        else
        {
            ListEnumerator leParentItemLastPlanPlanActivities = listParentItemLastPlanPlanActivities.getEnumerator();
            while (   (!planPlanActivityOnHandUpdateReceipt
                   ||  !planPlanActivityNotOnHandUpdateReceipt)
                   && leParentItemLastPlanPlanActivities.moveNext())
            {
                PlanPlanActivity planPlanActivityParent = leParentItemLastPlanPlanActivities.current();
                leItemLastPlanPlanActivities = listItemLastPlanPlanActivities.getEnumerator();

                while (   (!planPlanActivityOnHandUpdateReceipt
                       ||  !planPlanActivityNotOnHandUpdateReceipt)
                       && leItemLastPlanPlanActivities.moveNext())
                {
                    planPlanActivityItem = leItemLastPlanPlanActivities.current();

                    // check if there is a path from the item producing activity to the parent producing activity
                    if (   planPlanActivityItem.RecId == planPlanActivityParent.RecId
                        || LeanProductionFlowTraverser::pathExists(planPlanActivityItem,planPlanActivityParent))
                    {
                        // found an activity that produces the item upstream
                        onHandUpdateReceipt = planPlanActivityItem.planActivity().onHandUpdate(PlanActivityType::Receive);

                        if (   _includeNotOnHandUpdateReceipt
                            && !onHandUpdateReceipt)
                        {
                            planPlanActivityNotOnHandUpdateReceipt.data(planPlanActivityItem);
                        }

                        if (    _includeOnHandUpdateReceipt
                            &&  onHandUpdateReceipt)
                        {
                            planPlanActivityOnHandUpdateReceipt.data(planPlanActivityItem);
                        }
                    }
                }
            }
        }

        // prioritize activity that does update on hand
        PlanPlanActivity planPlanActivity = planPlanActivityOnHandUpdateReceipt ? planPlanActivityOnHandUpdateReceipt : planPlanActivityNotOnHandUpdateReceipt;

        // pick the first rule that ends with the selected planPlanActivity
        if (planPlanActivity)
        {
            ListEnumerator leKanbanRules = listKanbanRules.getEnumerator();
            while (   !kanbanRule
                   && leKanbanRules.moveNext())
            {
                KanbanRule kanbanRuleCheck = leKanbanRules.current();
                if (   mapKanbanRulePlanPlanActivity.exists(kanbanRuleCheck.RecId)
                    && mapKanbanRulePlanPlanActivity.lookup(kanbanRuleCheck.RecId) == planPlanActivity.RecId)
                {
                    kanbanRule = kanbanRuleCheck;
                }
            }
        }

        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDateTime parmFromDateTime(TransDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;
        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemParmData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventItemParmData parmItemParmData(InventItemParmData _itemParmData = itemParmData)
    {
        itemParmData = _itemParmData;

        return itemParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLastPlanActivityDownstreamRecId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivityRefRecId parmLastPlanActivityDownstreamRecId(RefRecId _lastPlanActivityDownstreamRecId = lastPlanActivityDownStreamRecId)
    {
        lastPlanActivityDownStreamRecId = _lastPlanActivityDownstreamRecId;
        return lastPlanActivityDownStreamRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanProductionFlowReferenceRecId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmLeanProductionFlowReferenceRecId(RefRecId _leanProductionFlowReferenceRecId = leanProductionFlowReferenceRecId)
    {
        leanProductionFlowReferenceRecId = _leanProductionFlowReferenceRecId;
        return leanProductionFlowReferenceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentItemParmData</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventItemParmData parmParentItemParmData(InventItemParmData _parentItemParmData = parentItemParmData)
    {
        parentItemParmData = _parentItemParmData;

        return parentItemParmData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public TransDateTime parmToDateTime(TransDateTime _toDateTime = toDateTime)
    {
        toDateTime = _toDateTime;
        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastPlanPlanActivities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the last plan activities of all manufacturing rules for the item are in the
    ///    production flow.
    /// </summary>
    /// <param name="_itemId">
    ///    The <c>ItemId</c> value that is used to find rules.
    /// </param>
    /// <param name="_inventDimId">
    ///    The <c>InventDimId</c> that is used to find rules.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The <c>InventDimParm</c> record that is used to find rules.
    /// </param>
    /// <returns>
    ///    A set that contains the record ID for <c>PlanPlanActivity</c> records.
    /// </returns>
    private Set setLastPlanPlanActivities(
        ItemId        _itemId,
        InventDimId   _inventDimId,
        InventDimParm _inventDimParm)
    {
        Set                 set = new Set(Types::Record);

        if (_itemId)
        {
            KanbanFindRules kanbanFindRules = KanbanFindRules::newFromLeanProductionFlowReference(leanProductionFlowReferenceRecId,
                                                                                                  _itemId,
                                                                                                  fromDateTime,
                                                                                                  toDateTime,
                                                                                                  _inventDimId,
                                                                                                  _inventDimParm,
                                                                                                  false,
                                                                                                  true,
                                                                                                  false);

            KanbanRule kanbanRule = kanbanFindRules.first();
            if (kanbanRule)
            {
                while (kanbanRule)
                {
                    set.add(PlanPlanActivity::find(kanbanRule.kanbanFlow().LastPlanPlanActivity));
                    kanbanRule = kanbanFindRules.next();
                }
            }
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the class parameters.
    /// </summary>
    /// <returns>
    ///    true if the specified parameters are valid; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validate()
    {
        boolean result = true;

        if (   leanProductionFlowReferenceRecId
            && LeanProductionFlowReference::find(leanProductionFlowReferenceRecId).legalEntity() != CompanyInfo::current())
        {
            result = checkFailed("@SYS332729");
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static LeanItemMadeInProductionFlow construct()
    {
        return new LeanItemMadeInProductionFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanProductionFlowItemParentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LeanItemMadeInProductionFlow</c> class.
    /// </summary>
    /// <param name="_leanProductionFlowReferenceRecId">
    /// A <c>RefRecId</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_itemParmData">
    /// An <c>InventItemParmData</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_parentItemParmData">
    /// An <c>InventItemParmData</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_date">
    /// A <c>TransDate</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_lastPlanActivityDownstreamRecId">
    /// A record ID for the <c>PlanActivity</c> table that is used to initialize the object; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>LeanItemMadeInProductionFlow</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanItemMadeInProductionFlow newLeanProductionFlowItemParentDate(
        RefRecId             _leanProductionFlowReferenceRecId,
        InventItemParmData   _itemParmData,
        InventItemParmData   _parentItemParmData,
        TransDate            _date,
        PlanActivityRefRecId _lastPlanActivityDownstreamRecId = 0)
    {
        TransDateTime   fromDateTime = DateTimeUtil::newDateTime(_date,0);
        TransDateTime   toDateTime   = DateTimeUtil::newDateTime(_date,#secondsPerDay-1);

        return LeanItemMadeInProductionFlow::newStandard(_leanProductionFlowReferenceRecId,
                                                         _parentItemParmData,
                                                         _itemParmData,
                                                         fromDateTime,
                                                         toDateTime,
                                                         _lastPlanActivityDownstreamRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>LeanItemMadeInProductionFlow</c> class.
    /// </summary>
    /// <param name="_leanProductionFlowReferenceRecId">
    /// A <c>RefRecId</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_parentItemParmData">
    /// A <c>InventItemParmData</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_itemParmData">
    /// A <c>InventItemParmData</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_fromDateTime">
    /// A <c>TransDateTime</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_toDateTime">
    /// A <c>TransDateTime</c> value that is used to initialize the object.
    /// </param>
    /// <param name="_lastPlanActivityDownstreamRecId">
    /// A record ID for the <c>PlanActivity</c> table that is used to initialize the object; optional.
    /// </param>
    /// <returns>
    /// A new instance of the <c>LeanItemMadeInProductionFlow</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanItemMadeInProductionFlow newStandard(
        RefRecId             _leanProductionFlowReferenceRecId,
        InventItemParmData   _parentItemParmData,
        InventItemParmData   _itemParmData,
        TransDateTime        _fromDateTime,
        TransDateTime        _toDateTime,
        PlanActivityRefRecId _lastPlanActivityDownstreamRecId = 0)
    {
        LeanItemMadeInProductionFlow    leanItemMadeInProductionFlow = LeanItemMadeInProductionFlow::construct();

        leanItemMadeInProductionFlow.parmLeanProductionFlowReferenceRecId(_leanProductionFlowReferenceRecId);
        leanItemMadeInProductionFlow.parmParentItemParmData(_parentItemParmData);
        leanItemMadeInProductionFlow.parmItemParmData(_itemParmData);
        leanItemMadeInProductionFlow.parmFromDateTime(_fromDateTime);
        leanItemMadeInProductionFlow.parmToDateTime(_toDateTime);
        leanItemMadeInProductionFlow.parmLastPlanActivityDownstreamRecId(_lastPlanActivityDownstreamRecId);

        return leanItemMadeInProductionFlow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
