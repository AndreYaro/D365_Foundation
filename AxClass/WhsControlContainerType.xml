<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlContainerType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlContainerType</c> class is responsible for handling the container type controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#ContainerType)]
public class WhsControlContainerType extends WhsControl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        fieldValues.insert(#ContainerType, this.parmData());
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessDefaultValue</Name>
				<Source><![CDATA[
    public boolean canProcessDefaultValue()
    {
        if (this.parmData())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultValueToBlank</Name>
				<Source><![CDATA[
    protected boolean defaultValueToBlank()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContainerType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes container type code.
    /// </summary>
    [Hookable(false)]
    internal void initializeContainerType()
    {
        WHSLicensePlate licensePlate = WHSLicensePlate::find(fieldValues.lookupStr(#LicensePlateId));

        if (licensePlate.RecId != 0 && !pass.hasValue(#SplittingLP))
        {
            fieldValues.insert(#ContainerType, licensePlate.ContainerTypeCode);
            pass.insert(#AlreadyHaveLP, 1); // container type should be disabled when using an existing LP.
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>