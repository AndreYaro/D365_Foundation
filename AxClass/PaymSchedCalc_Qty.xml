<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymSchedCalc_Qty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Subclass of <c>PaymSchedCalc</c>.
/// </summary>
public final class PaymSchedCalc_Qty extends PaymSchedCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates transactions.
    /// </summary>
    /// <param name = "_custVendPaymentSchedLine">The customer vendor payment schedule line.</param>
    public void createTransaction(CustVendPaymentSchedLine _custVendPaymSchedLine)
    {
        CustVendPaymentSchedLine    newCustVendPaymSchedLine;
        Counter                     counter;
        AmountCur                   remainAmountCur;
        AmountCur                   totalAmountCur;
        CashDiscAmount              appliedCashDiscAmount;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT])
            && splitPaymSumTax_IT)
        {
            this.adjustInvoiceAmountsSplitPaym_IT(AddRemove::Remove);
        }

        remainAmountCur = invoiceAmount;
        this.setDueDate();
        CustVendPaymSched::deletePaymSchedLines(custVendPaymSched, custVendPaymSchedLine, skipVersionChangeCheck);

        for (counter=1; counter <= custVendPaymSched.NumOfPayment; counter++)
        {
            switch (custVendPaymSched.TaxDistribution)
            {
                case PaymSchedTaxDistribution::FirstRate:
                    switch (counter)
                    {
                        case 1:
                            paymentAmountCur =
                                // <GBR>
                                BrazilParameters::isEnabled() ?
                                CurrencyExchangeHelper::amount((invoiceAmount + abs(totaltaxAmountRetained) - invoiceTaxAmount) / custVendPaymSched.NumOfPayment, currencyCode) + invoiceTaxAmount -  abs(totaltaxAmountRetained) :
                                // </GBR>
                                CurrencyExchangeHelper::amount((invoiceAmount - invoiceTaxAmount) / custVendPaymSched.NumOfPayment, currencyCode) + invoiceTaxAmount;
                            if (custVendPaymSched.lowestAmount > abs(paymentAmountCur))
                            {
                                paymentAmountCur = custVendPaymSched.LowestAmount * sign(paymentAmountCur);
                            }
                            break;
                        case 2:
                            this.setAmount();
                    }
                    break;
                case PaymSchedTaxDistribution::LastRate:
                    if (counter == custVendPaymSched.NumOfPayment)
                    {
                        paymentAmountCur =
                                // <GBR>
                                BrazilParameters::isEnabled() ?
                                CurrencyExchangeHelper::amount((invoiceAmount + abs(totaltaxAmountRetained) - invoiceTaxAmount) / custVendPaymSched.NumOfPayment, currencyCode) + invoiceTaxAmount -  abs(totaltaxAmountRetained) :
                                // </GBR>
                                CurrencyExchangeHelper::amount((invoiceAmount - invoiceTaxAmount) / custVendPaymSched.NumOfPayment, currencyCode) + invoiceTaxAmount;

                        if (custVendPaymSched.lowestAmount > abs(paymentAmountCur))
                        {
                            paymentAmountCur = custVendPaymSched.LowestAmount * sign(paymentAmountCur);
                        }
                    }
                    break;
            }

            if (abs(remainAmountCur) < abs(paymentAmountCur))
            {
                paymentAmountCur = remainAmountCur;
            }
            newCustVendPaymSchedLine = _custVendPaymSchedLine.data();

            newCustVendPaymSchedLine.DueDate    = dueDate;
            newCustVendPaymSchedLine.DiscDate   = this.nextDiscDate(newCustVendPaymSchedLine.DueDate);
            newCustVendPaymSchedLine.DueAmount  = paymentAmountCur;

            remainAmountCur -= paymentAmountCur;

            if (abs(remainAmountCur) < custVendPaymSched.LowestAmount)
            {
                newCustVendPaymSchedLine.DueAmount += remainAmountCur;
                paymentAmountCur                   += remainAmountCur;
                remainAmountCur                     = 0;
            }

            if (invoiceAmount)
            {
                newCustVendPaymSchedLine.DiscAmount = CurrencyExchangeHelper::amount(cashDiscAmount * newCustVendPaymSchedLine.DueAmount / invoiceAmount, currencyCode);
                appliedCashDiscAmount += newCustVendPaymSchedLine.DiscAmount;
            }

            if (newCustVendPaymSchedLine.DueAmount != 0)
            {
                newCustVendPaymSchedLine.insert();
            }

            totalAmountCur  += paymentAmountCur;
            if (abs(totalAmountCur) >= abs(invoiceAmount))
            {
                break;
            }

            dueDate = this.nextDueDate();

            if (isConfigurationkeyEnabled(configurationKeyNum(PaymCalendar))
                && this.parmDueDateUpdatePolicy() != PaymentDueDateUpdatePolicy::NoUpdate)
            {
                dueDate = paymCalendarProcessor.adjustDateForCalendar(dueDate, this.parmDueDateUpdatePolicy(), paymCalendarResults);
            }

            cashDiscDate = this.nextDiscDate(dueDate);
        }

        if (appliedCashDiscAmount != cashDiscAmount)
        {
            newCustVendPaymSchedLine.DiscAmount += (cashDiscAmount - appliedCashDiscAmount);
        }

        if (invoiceAmount != totalAmountCur)
        {
            this.remainAmountCur(newCustVendPaymSchedLine, (invoiceAmount - totalAmountCur));
        }

        if (MultipleTaxIdReportingHelper::isLegalEntityOrAddressInCountryRegion([#isoIT], MultipleTaxIdScope::VATDeclaration)
            && splitPaymSumTax_IT)
        {
            this.createTransactionSplitPaym_IT();
            this.adjustInvoiceAmountsSplitPaym_IT(AddRemove::Add);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the payment amount currence.
    /// </summary>
    public void setAmount()
    {
        if (custVendPaymSched.TaxDistribution != PaymSchedTaxDistribution::Proportional)
        {
            paymentAmountCur =
                // <GBR>
                BrazilParameters::isEnabled() ?
                CurrencyExchangeHelper::amount((invoiceAmount + abs(totaltaxAmountRetained) - invoiceTaxAmount) / custVendPaymSched.NumOfPayment, currencyCode) :
                // </GBR>
                CurrencyExchangeHelper::amount((invoiceAmount - invoiceTaxAmount) / custVendPaymSched.NumOfPayment, currencyCode);
        }
        else
        {
            paymentAmountCur = CurrencyExchangeHelper::amount(invoiceAmount / custVendPaymSched.NumOfPayment, currencyCode);
        }

        if (custVendPaymSched.lowestAmount > abs(paymentAmountCur))
        {
            paymentAmountCur = custVendPaymSched.LowestAmount * sign(invoiceAmount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>