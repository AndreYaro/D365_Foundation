<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqIntercompanyQueryFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqIntercompanyQueryFactory</c> class provides queries which are used to fetch intercompany related data.
/// </summary>
class ReqIntercompanyQueryFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the customer for the supplied vendor based on the trading relation.
    /// </summary>
    /// <param name="_vendor">
    ///     The vendor.
    /// </param>
    /// <returns>
    ///     The record in the <c>CustTable</c> table.
    /// </returns>
    public CustTable findCustomer(VendTable _vendor)
    {
        InterCompanyTradingPartner vendorPartner;
        InterCompanyTradingPartner customerPartner;
        InterCompanyTradingRelation tradingRelation;
        CustTable                   customer;

        select firstonly crossCompany CustomerParty, CustomerDataAreaId from customerPartner
        exists join tradingRelation
            where customerPartner.RecId == tradingRelation.InterCompanyTradingCustomer
            && tradingRelation.Active
        exists join vendorPartner
            where vendorPartner.RecId            == tradingRelation.InterCompanyTradingVendor
               && vendorPartner.VendorParty      == _vendor.Party
               && vendorPartner.VendorDataAreaId == _vendor.dataAreaId;

        select firstonly crossCompany  customer
        where customer.Party      == customerPartner.CustomerParty
           && customer.dataAreaId == customerPartner.CustomerDataAreaId;

        return customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBasicIncomingDemandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query which returns the incoming planned demand from the downstream customer company.
    /// </summary>
    /// <param name="_planVersions">
    ///     The set of plan versions to filter the incoming intercompany demand.
    /// </param>
    /// <param name="_considerOnlyMatchingProducts">
    ///     A boolean that indicates whether to consider only matching products in the 2 companies for the demand result set; optional.
    /// </param>
    /// <returns>
    ///     The query which returns the incoming planned demand from the downstream customer company.
    /// </returns>
    private Query getBasicIncomingDemandQuery(
        Set             _planVersions,
        boolean         _considerOnlyMatchingProducts   = true)
    {
        Query       incomingDemandQuery;

        SetEnumerator   planVersionsEnumerator;
        str             planVersionFilterString;

        QueryBuildDataSource    reqPOds;
        QueryBuildDataSource    inventDimDs;
        QueryBuildDataSource    vendTableds;
        QueryBuildDataSource    tradingPartnerVendords;
        QueryBuildDataSource    tradingPartnerCustomerds;
        QueryBuildDataSource    tradingRelationds;
        QueryBuildDataSource    itemInVendorCompanyDs;
        QueryBuildRange         planVersionRange;
        QueryBuildRange         tableIdRange;

        if (!_planVersions)
        {
            throw error("@SYS335482");
        }

        incomingDemandQuery = new Query();

        incomingDemandQuery.allowCrossCompany(true);

        reqPOds = incomingDemandQuery.addDataSource(tableNum(ReqPO));

        // exclude orders from current company
        reqPOds.addRange(fieldNum(ReqPO, DataAreaId)).value(SysQuery::valueNot(curext()));

        reqPOds.addRange(fieldNum(ReqPO, RefType)).value(queryValue(ReqRefType::ItemPlannedOrder));

        reqPOds.addSortField(fieldNum(ReqPO, DataAreaId));
        reqPOds.addSortField(fieldNum(ReqPO, RefId));

        inventDimDs = reqPOds.addDataSource(tableNum(InventDim));
        inventDimDs.joinMode(JoinMode::InnerJoin);
        inventDimDs.fetchMode(QueryFetchMode::One2One);
        inventDimDs.addLink(fieldNum(ReqPO, CovInventDimId), fieldNum(InventDim, InventDimId));
        inventDimDs.addLink(fieldNum(ReqPO, DataAreaId), fieldNum(InventDim, DataAreaId));

        // filter based on trading relations
        vendTableds = reqPOds.addDataSource(tableNum(VendTable));
        vendTableds.joinMode(JoinMode::ExistsJoin);
        vendTableds.addLink(fieldNum(ReqPO, VendId), fieldNum(VendTable, AccountNum));

        tradingPartnerVendords = vendTableds.addDataSource(tableNum(InterCompanyTradingPartner));
        tradingPartnerVendords.joinMode(JoinMode::ExistsJoin);
        tradingPartnerVendords.addLink(fieldNum(VendTable, Party), fieldNum(InterCompanyTradingPartner, VendorParty));
        tradingPartnerVendords.addLink(fieldNum(VendTable, DataAreaId), fieldNum(InterCompanyTradingPartner, VendorDataAreaId));

        tradingRelationds = tradingPartnerVendords.addDataSource(tableNum(InterCompanyTradingRelation));
        tradingRelationds.joinMode(JoinMode::ExistsJoin);
        tradingRelationds.addLink(fieldNum(InterCompanyTradingPartner, RecId), fieldNum(InterCompanyTradingRelation, InterCompanyTradingVendor));

        // only get active trading relations
        tradingRelationds.addRange(fieldNum(InterCompanyTradingRelation, Active)).value(queryValue(NoYes::Yes));

        tradingPartnerCustomerds = tradingRelationds.addDataSource(tableNum(InterCompanyTradingPartner));
        tradingPartnerCustomerds.joinMode(JoinMode::ExistsJoin);
        tradingPartnerCustomerds.addLink(fieldNum(InterCompanyTradingRelation, InterCompanyTradingCustomer), fieldNum(InterCompanyTradingPartner, RecId));

        // filter all customers that are in the current company
        var customerDataAreaIdRange = tradingPartnerCustomerds.addRange(fieldNum(InterCompanyTradingPartner, CustomerDataAreaId));
        customerDataAreaIdRange.value(queryValue(curext()));
        customerDataAreaIdRange.status(RangeStatus::Hidden);

        if (_considerOnlyMatchingProducts)
        {
            // filter on products released to the current company
            itemInVendorCompanyDs = reqPOds.addDataSource(tableNum(ReqIntercompanyProduct));
            itemInVendorCompanyDs.joinMode(JoinMode::ExistsJoin);
            var itemDataAreaIdRange = itemInVendorCompanyDs.addRange(fieldNum(ReqIntercompanyProduct, ItemDataAreaId));
            itemDataAreaIdRange.value(queryValue(curext()));
            itemDataAreaIdRange.status(RangeStatus::Hidden);
            tableIdRange = itemInVendorCompanyDs.addRange(fieldNum(ReqIntercompanyProduct, TableId));
            tableIdRange.status(RangeStatus::Hidden);
            tableIdRange.value(strFmt('((%1.%2 == %3.%4) || (%1.%2 == %3.%5))',
                    reqPOds.name(),
                    fieldStr(ReqPO, Product),
                    itemInVendorCompanyDs.name(),
                    fieldStr(ReqIntercompanyProduct, Product),
                    fieldStr(ReqIntercompanyProduct, DistinctProductVariant)));
        }

        // add plan version filter
        if (_planVersions.elements() > 0)
        {
            planVersionsEnumerator = _planVersions.getEnumerator();
            while (planVersionsEnumerator && planVersionsEnumerator.moveNext())
            {
                if (strLen(planVersionFilterString) > 0)
                {
                    planVersionFilterString += ' || ';
                }

                planVersionFilterString += strFmt('(%1.%2 == %3)',
                    reqPOds.name(),
                    fieldStr(ReqPO, PlanVersion),
                    queryValue(planVersionsEnumerator.current()));
            }
        }
        else
        {
            // no plan versions in the filter set, just make the query not return anything
            planVersionFilterString = strFmt('(%1.%2 != %1.%2)', reqPOds.name(), fieldStr(ReqPO, PlanVersion));
        }

        planVersionRange = reqPOds.addRange(fieldNum(ReqPO, PlanVersion));
        planVersionRange.status(RangeStatus::Hidden);
        planVersionRange.value(planVersionFilterString);

        return incomingDemandQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomingDemandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query which returns the incoming planned demand from the downstream customer company.
    /// </summary>
    /// <param name="_planVersions">
    ///     The set of plan versions to filter the incoming intercompany demand.
    /// </param>
    /// <param name="_considerOnlyMatchingProducts">
    ///     A boolean that indicates whether to consider only matching products in the 2 companies for the demand result set; optional.
    /// </param>
    /// <param name="_processId">
    ///     A master planning process ID used for filtering the vendor company items that are to be included in the query result; optional.
    /// </param>
    /// <param name="_callerReqTrans">
    ///     A caller intercompany planned demand record to use as filter; optional.
    /// </param>
    /// <returns>
    ///     The query which returns the incoming planned demand from the downstream customer company.
    /// </returns>
    public QueryRun getIncomingDemandQuery(
        Set             _planVersions,
        boolean         _considerOnlyMatchingProducts   = true,
        ReqProcessId    _processId                      = '',
        ReqTrans        _callerReqTrans                 = null)
    {
        Query       incomingDemandQuery;
        QueryRun    incomingDemandQueryRun;

        QueryBuildDataSource    reqPOds;
        QueryBuildDataSource    itemInVendorCompanyDs;
        QueryBuildDataSource    reqProcessItemDs;
        QueryBuildDataSource    ecoResDistinctProductVariantDs;
        QueryBuildRange         tableIdRange;

        incomingDemandQuery = this.getBasicIncomingDemandQuery(_planVersions, _considerOnlyMatchingProducts) ;

        reqPOds = incomingDemandQuery.dataSourceTable(tableNum(ReqPO));

        if (_callerReqTrans.IntercompanyPlannedOrder)
        {
            reqPOds.addRange(fieldNum(ReqPO, RecId)).value(queryValue(_callerReqTrans.IntercompanyPlannedOrder));
        }

        if (_processId)
        {
            // filter on products or product masters released to the current company
            ecoResDistinctProductVariantDs = reqPOds.addDataSource(tableNum(EcoResDistinctProductVariant));
            ecoResDistinctProductVariantDs.joinMode(JoinMode::OuterJoin);
            ecoResDistinctProductVariantDs.fetchMode(QueryFetchMode::One2One);
            ecoResDistinctProductVariantDs.addLink(fieldNum(ReqPO, Product), fieldNum(EcoResDistinctProductVariant, RecId));

            itemInVendorCompanyDs = ecoResDistinctProductVariantDs.addDataSource(tableNum(ReqIntercompanyProduct));
            itemInVendorCompanyDs.joinMode(JoinMode::ExistsJoin);
            itemInVendorCompanyDs.addRange(fieldNum(ReqIntercompanyProduct, ItemDataAreaId)).value(queryValue(curext()));
            tableIdRange = itemInVendorCompanyDs.addRange(fieldNum(ReqIntercompanyProduct, TableId));
            tableIdRange.status(RangeStatus::Hidden);
            tableIdRange.value(strFmt('((%1.%2 == %3.%4) || (%1.%2 == %5.%6))',
                    itemInVendorCompanyDs.name(),
                    fieldStr(ReqIntercompanyProduct, Product),
                    reqPOds.name(),
                    fieldStr(ReqPO, Product),
                    ecoResDistinctProductVariantDs.name(),
                    fieldStr(EcoResDistinctProductVariant, ProductMaster)));

            reqProcessItemDs = itemInVendorCompanyDs.addDataSource(tableNum(ReqProcessItem));
            reqProcessItemDs.joinMode(JoinMode::ExistsJoin);
            reqProcessItemDs.addLink(fieldNum(ReqIntercompanyProduct, ItemId), fieldNum(ReqProcessItem, ItemId));
            reqProcessItemDs.addLink(fieldNum(ReqIntercompanyProduct, ItemDataAreaId), fieldNum(ReqProcessItem, DataAreaId));
            reqProcessItemDs.addRange(fieldNum(ReqProcessItem, ProcessId)).value(queryValue(_processId));
        }

        incomingDemandQueryRun = new QueryRun(incomingDemandQuery);

        return incomingDemandQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIncomingDemandQueryForItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query which returns the incoming planned demand from the downstream customer company.
    /// </summary>
    /// <param name="_planVersions">
    ///     The set of plan versions to filter the incoming intercompany demand.
    /// </param>
    /// <param name="_itemId">
    ///     The item ID to filter the intercompany demand.
    /// </param>
    /// <returns>
    ///     The query which returns the incoming planned demand from the downstream customer company.
    /// </returns>
    public QueryRun getIncomingDemandQueryForItem(
        Set             _planVersions,
        ItemId          _itemId)
    {
        Query       incomingDemandQuery;
        QueryRun    incomingDemandQueryRun;

        QueryBuildDataSource    itemInVendorCompanyDs;

        incomingDemandQuery = this.getBasicIncomingDemandQuery(_planVersions, true);

        itemInVendorCompanyDs = incomingDemandQuery.dataSourceTable(tableNum(ReqIntercompanyProduct));
        itemInVendorCompanyDs.addRange(fieldNum(ReqIntercompanyProduct, ItemId)).value(_itemId);

        incomingDemandQueryRun = new QueryRun(incomingDemandQuery);
        return incomingDemandQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutboundDemandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query which returns the data about the outbound planned intercompany demand for the downstream company.
    /// </summary>
    /// <param name="_planId">
    ///     The plan ID to filter the data.
    /// </param>
    /// <returns>
    ///     The query which returns the data about the outbound planned intercompany demand for the downstream company.
    /// </returns>
    public QueryRun getOutboundDemandQuery(ReqPlanIdSched _planId)
    {
        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    outboundDemandDs;

        query = new Query();

        outboundDemandDs = query.addDataSource(tableNum(ReqIntercompanyOutboundDemand));

        outboundDemandDs.addRange(fieldNum(ReqIntercompanyOutboundDemand, ReqPlanId)).value(_planId);
        outboundDemandDs.addRange(fieldNum(ReqIntercompanyOutboundDemand, PlannedOrderDataAreaId)).value(curext());

        outboundDemandDs.addSortField(fieldNum(ReqIntercompanyOutboundDemand, RefId));

        queryRun = new QueryRun(query);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPlannedIntercompanyDemandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the query which returns the data about the planned intercompany demand in the upstream vendor company.
    /// </summary>
    /// <param name="_companyId">
    ///     The ID of the upstream vendor company.
    /// </param>
    /// <param name="_plannedOrderRecId">
    ///     The ID of the planned order which is the source of the planned intercompany demand.
    /// </param>
    /// <returns>
    ///     The query which returns the data about the planned intercompany demand in the upstream vendor company.
    /// </returns>
    public QueryRun getPlannedIntercompanyDemandQuery(dataAreaId _companyId, RefRecId _plannedOrderRecId)
    {
        QueryRun                queryRun;
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        query.allowCrossCompany(true);

        qbds = query.addDataSource(tableNum(ReqUpstreamIntercompanyDemand));
        qbds.addRange(fieldNum(ReqUpstreamIntercompanyDemand, IntercompanyPlannedOrder)).value(queryValue(_plannedOrderRecId));
        qbds.addRange(fieldNum(ReqUpstreamIntercompanyDemand, UpstreamDataAreaId)).value(_companyId);

        queryRun = new QueryRun(query);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqIntercompanyQueryFactory construct()
    {
        return new ReqIntercompanyQueryFactory();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>