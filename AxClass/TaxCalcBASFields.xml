<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCalcBASFields</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxCalcBASFields</c> class calculates the fields used in Australian tax reporting.
/// </summary>
class TaxCalcBASFields
{
    const int           fixedRate11 = 11;
    TmpTaxReportById    tmpTaxReportById;
    TmpTaxReportById    tmpTaxReportByIdNondeductible;

    TransDate           fromDate;
    TransDate           toDate;
    TaxPeriod           taxPeriod;
    TaxRepVersion       taxRepVersion;
    TaxVersion          taxRepCounter;
    TransDate           taxDueDate;
    TransDate           transDate;
    Voucher             voucher;
    boolean             updated;

    TaxDocumentIdNumber taxDocumentIdNumber;
    #TaxReportingCodesAU
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accumulates the adjustmments in the fields G7 and G18.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    /// A table containing records with all reportIds and Amounts for a specific period.
    /// </param>
    protected void addAdjustment(TmpTaxReportById _tmpTaxReportById)
    {
        TaxAmount amountPayableBase;
        TaxAmount amountPayableTax;
        TaxAmount amountRefundableBase;
        TaxAmount amountRefundableTax;

        select sum(Amount), sum(TaxAmount_AU)
            from _tmpTaxReportById
                where _tmpTaxReportById.TaxReportField  == #field_G1
                    || _tmpTaxReportById.TaxReportField == #field_G7;

        amountPayableBase = _tmpTaxReportById.Amount;
        amountPayableTax = _tmpTaxReportById.TaxAmount_AU;

        select sum(Amount), sum(TaxAmount_AU)
            from _tmpTaxReportById
                where _tmpTaxReportById.TaxReportField  == #field_G10
                    || _tmpTaxReportById.TaxReportField == #field_G11
                    || _tmpTaxReportById.TaxReportField == #field_G18;

        amountRefundableBase = _tmpTaxReportById.Amount;
        amountRefundableTax = _tmpTaxReportById.TaxAmount_AU;

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G7; // payable adjustments

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount += amountPayableBase;
            tmpTaxReportById.TaxAmount_AU += amountPayableTax;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportByIdWithOriginalTaxAmount(#field_G7, amountPayableBase, '', 0, amountPayableTax);
        }

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G18; // refundable adjustments

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount += amountRefundableBase;
            tmpTaxReportById.TaxAmount_AU += amountRefundableTax;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportByIdWithOriginalTaxAmount(#field_G18, amountRefundableBase, '', 0, amountRefundableTax);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the tax fields.
    /// </summary>
    public void calc()
    {
        tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(fromDate,
                                                               toDate,
                                                               taxPeriod,
                                                               taxRepVersion,
                                                               taxRepCounter,
                                                               updated);

        tmpTaxReportByIdNondeductible = this.calcNondeductibleTaxReportById();
        this.calcAdjustments(updated);
        this.calcExtraFields();
        this.calcTotalsAndRound();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNondeductibleTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the nondeductible tax report by id.
    /// </summary>
    /// <returns>buffer of <c>TmpTaxReportById</c></returns>
    protected TmpTaxReportById calcNondeductibleTaxReportById()
    {
        TmpTaxReportById tmpTaxReportByIdLoc;

        TaxTrans            taxTrans;
        TaxReportLayout     taxReportLayout;
        Counter             versionMin;
        Counter             versionMax;
        TaxData             taxData;

        [versionMin, versionMax] = TaxTransReportById::taxAmountByReportId_VersionMinMax(fromDate, taxPeriod, taxRepVersion, taxRepCounter, updated);

        taxReportLayout = TaxAuthorityAddress::find(TaxPeriodHead::find(taxPeriod).TaxAuthority).TaxReportLayout;

        //Selects only transactions that are not caused by credit notes.
        while select TaxAmount, TaxBaseAmount, TaxInCostPriceMST, TaxCode, TransDate
            from taxTrans
            where (taxTrans.TransDate    >= fromDate           &&
                taxTrans.TransDate       <= toDate)            &&
                taxTrans.TaxPeriod       == taxPeriod          &&
                taxTrans.TaxRepCounter   >= versionMin         &&
                taxTrans.TaxRepCounter   <= versionMax         &&
                taxTrans.Source          != TaxModuleType::Tax &&
                (
                    (
                        (taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction
                        )
                    )
                    ||
                    (
                        (taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction
                        )
                    )
                    ||
                    (
                        (taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales
                        )
                    )
                    ||
                    (
                        (taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales
                        )
                    )
                )
        {
            taxData = taxData::find(taxTrans.TaxCode, taxTrans.TransDate, 0);
            if (!taxData)
            {
                continue;
            }
            taxTrans.TaxAmount = taxTrans.TaxAmount * taxData.VATExemptPct / 100;
            TaxTrans.TaxBaseAmount = taxTrans.TaxBaseAmount * taxData.VATExemptPct / 100;
            tmpTaxReportByIdLoc = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportByIdLoc, NoYes::No, null, taxReportLayout);
        }

        //Selects only transactions there is caused by credit notes.
        while select TaxAmount, TaxBaseAmount, TaxInCostPriceMST, TaxCode, TransDate
            from taxTrans
            where (taxTrans.TransDate    >= fromDate        &&
                taxTrans.TransDate       <= toDate)         &&
                taxTrans.TaxPeriod       == taxPeriod       &&
                taxTrans.TaxRepCounter   >= versionMin      &&
                taxTrans.TaxRepCounter   <= versionMax      &&
                taxTrans.Source          != TaxModuleType::Tax              &&
                (
                    (
                        (taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax
                        )
                    )
                    ||
                    (
                        (taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax
                        )
                    )
                    ||
                    (
                        (taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales
                        )
                    )
                    ||
                    (
                        (taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                        (
                            taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales
                        )
                    )
                )
        {
            taxData = taxData::find(taxTrans.TaxCode, taxTrans.TransDate, 0);
            if (!taxData)
            {
                continue;
            }
            taxTrans.TaxAmount  = taxTrans.TaxAmount * taxData.VATExemptPct / 100;
            TaxTrans.TaxBaseAmount = taxTrans.TaxBaseAmount * taxData.VATExemptPct / 100;
            tmpTaxReportByIdLoc = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportByIdLoc, NoYes::Yes, null, taxReportLayout);
        }

        return tmpTaxReportByIdLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustments</Name>
				<Source><![CDATA[
    /* Calculates adjustments from specified previous periods, and fills these into tmpTaxTeportById */
    protected void calcAdjustments(boolean    _reported = false)
    {
        TmpTaxReportById            adjustments;
        TaxReportAdjustmentTrans    taxReportAdjustmentTrans;
        TaxReportPeriod             taxReportPeriodPrevious;

        /* If the tax is not reported, no registration of adjustment periods exist, meaning that
           this is determined here, the same way as in the tax reporting class
           When tax is reported, a  list of adjustments and periods exist */

        if (_reported)
        {
            while select FromDate, ToDate, TaxPeriod, TaxVersion
                from taxReportAdjustmentTrans
                    where taxReportAdjustmentTrans.Voucher    == voucher
                        && taxReportAdjustmentTrans.TransDate == transDate
                        && taxReportAdjustmentTrans.TaxPeriod == taxPeriod
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportAdjustmentTrans.FromDate,
                                                                  taxReportAdjustmentTrans.ToDate,
                                                                  taxReportAdjustmentTrans.TaxPeriod,
                                                                  TaxRepVersion::Correct,
                                                                  taxReportAdjustmentTrans.TaxVersion,
                                                                  _reported,
                                                                  DebCredProposal::None);
                this.addAdjustment(adjustments);
            }
        }
        else
        {
            while select FromDate, ToDate, TaxPeriod, VersionNum
                from taxReportPeriodPrevious
                    where taxReportPeriodPrevious.TaxPeriod  == taxPeriod
                        && taxReportPeriodPrevious.FromDate   < fromDate
                        && taxReportPeriodPrevious.VersionNum > 0
            {
                adjustments = null;
                adjustments = TaxTrans::taxAmountByReportId_Table(taxReportPeriodPrevious.FromDate,
                                                                  taxReportPeriodPrevious.ToDate,
                                                                  taxReportPeriodPrevious.TaxPeriod,
                                                                  TaxRepVersion::Correct,
                                                                  taxReportPeriodPrevious.VersionNum,
                                                                  _reported,
                                                                  DebCredProposal::None);
                this.addAdjustment(adjustments);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExtraFields</Name>
				<Source><![CDATA[
    protected void calcExtraFields()
    {
        TaxReportExtraFields    taxReportExtraFields;

        taxReportExtraFields = TaxReportExtraFields::find(taxPeriod, fromDate, toDate);
        if (taxReportExtraFields)
        {
            // BAS Front Page
            this.insertInTmpTaxReportById(#field_A1,0,taxReportExtraFields.TaxDocumentIdNumber);
            this.insertInTmpTaxReportById(#field_1G,taxReportExtraFields.WholesaleCredit);
            this.insertInTmpTaxReportById(#field_5B,taxReportExtraFields.PaygCredit);
            this.insertInTmpTaxReportById(#field_6B,taxReportExtraFields.FringeCredit);
            this.insertInTmpTaxReportById(#field_7,taxReportExtraFields.DeferredInstalment);
            this.insertInTmpTaxReportById(#field_7A,taxReportExtraFields.DeferredGSTOnImport);

            // Pay As You Go Withholding
            this.insertInTmpTaxReportById(#field_W1,taxReportExtraFields.PaygTotalSalary);
            this.insertInTmpTaxReportById(#field_W2,taxReportExtraFields.PaygWithheldSalary);
            this.insertInTmpTaxReportById(#field_W3,taxReportExtraFields.PaygWithheldInvestment);
            this.insertInTmpTaxReportById(#field_W4,taxReportExtraFields.PaygWithheldPayment);

            // Pay as you Go Instalment
            this.insertInTmpTaxReportById(#field_T1,taxReportExtraFields.PaygInstalment);
            this.insertInTmpTaxReportById(#field_T2,taxReportExtraFields.PaygCommRate);
            this.insertInTmpTaxReportById(#field_T3,taxReportExtraFields.PaygNewRate);
            this.insertInTmpTaxReportById(#field_T4,0,taxReportExtraFields.PaygVariationId);

            // Fringe benefits
            this.insertInTmpTaxReportById(#field_F1,taxReportExtraFields.FringeATO);
            this.insertInTmpTaxReportById(#field_F2,taxReportExtraFields.FringeEstimate);
            this.insertInTmpTaxReportById(#field_F3,taxReportExtraFields.FringeVaried);
            this.insertInTmpTaxReportById(#field_F4,0,taxReportExtraFields.FringeVariationId);

            // Fuel tax credits
            this.insertInTmpTaxReportById(#field_7C,taxReportExtraFields.FuelTaxCreditOverClaim);
            this.insertInTmpTaxReportById(#field_7D,taxReportExtraFields.FuelTaxCredit);

            taxDocumentIdNumber = taxReportExtraFields.TaxDocumentIdNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTotalsAndRound</Name>
				<Source><![CDATA[
    protected void calcTotalsAndRound()
    {
        TaxAmount   g1;
        TaxAmount   g5;
        TaxAmount   g6;
        TaxAmount   g8;
        TaxAmount   g9;
        TaxAmount   g10;
        TaxAmount   g11;
        TaxAmount   g12;
        TaxAmount   g13;
        TaxAmount   g14;
        TaxAmount   g15;
        TaxAmount   g16;
        TaxAmount   g17;
        TaxAmount   g19;
        TaxAmount   g20;
        TaxAmount   ft1;    // Id = 51
        Percent     ft2;    // Id = 52
        Percent     ft3;    // Id = 53
        TaxAmount   f1g;    // Id = 150
        TaxAmount   f2a;    // Id = 221
        TaxAmount   f2b;    // Id = 222
        TaxAmount   f2a_2b; // Id = 223
        TaxAmount   f4;     // Id = 400
        TaxAmount   f5a;    // Id = 501
        TaxAmount   f5b;    // Id = 502
        TaxAmount   f6a;    // Id = 601
        TaxAmount   f6b;    // Id = 602
        TaxAmount   f7;     // Id = 700
        TaxAmount   f7a;     // Id = 701
        TaxAmount   f7c;    // Id = 703
        TaxAmount   f7d;    // Id = 704
        TaxAmount   f8a;    // Id = 801
        TaxAmount   f8b;    // Id = 802
        TaxAmount   f9;     // Id = 900
        TaxAmount   deductibleTax;
        TaxReportExtraFields    taxReportExtraFields;

        taxReportExtraFields = TaxReportExtraFields::find(taxPeriod, fromDate, toDate);

        while select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField  != #field_T2
                && tmpTaxReportById.TaxReportField != #field_T3
        {
            tmpTaxReportById.Amount = trunc(tmpTaxReportById.Amount);
            tmpTaxReportById.TaxAmount_AU = trunc(tmpTaxReportById.TaxAmount_AU);
            
            if (tmpTaxReportById.TaxReportField    == #field_G1
                || tmpTaxReportById.TaxReportField == #field_G2
                || tmpTaxReportById.TaxReportField == #field_G3
                || tmpTaxReportById.TaxReportField == #field_G4
                || tmpTaxReportById.TaxReportField == #field_G7)
            {
                tmpTaxReportById.Amount = -tmpTaxReportById.Amount;
                tmpTaxReportById.TaxAmount_AU = -tmpTaxReportById.TaxAmount_AU;
            }

            tmpTaxReportById.update();
        }
        //    Field G1 = Field 1 + Field 2 + Field 3 + Field 4
        select sum(Amount)
         from tmpTaxReportById
            where tmpTaxReportById.TaxReportField  == #field_G1
                || tmpTaxReportById.TaxReportField == #field_G2
                || tmpTaxReportById.TaxReportField == #field_G3
                || tmpTaxReportById.TaxReportField == #field_G4;

        g1 = tmpTaxReportById.Amount;

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G1;
        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g1;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G1, g1);
        }

        //    Field G5 = Field 2 + Field 3 + Field 4
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField  == #field_G2
                    || tmpTaxReportById.TaxReportField == #field_G3
                    || tmpTaxReportById.TaxReportField == #field_G4;

        g5 = tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_G5, g5);

        // Field G6 = field G1 - field G5

        g6  = g1 - g5;
        this.insertInTmpTaxReportById(#field_G6, g6);

        // Field G8 = field G6 + G7
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_G7;
        g8 = g6 + tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_G8, g8);

        // Field G9 = tax amount of G1 + field G9
        select sum(TaxAmount_AU) from tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G1 ||
                  tmpTaxReportById.TaxReportField == #field_G7;

        g9 = tmpTaxReportById.TaxAmount_AU;

        select firstonly forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G9And1A;

        g9 = trunc(g9) + tmpTaxReportById.Amount;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g9;
            tmpTaxReportById.doUpdate();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G9And1A, g9);
        }

        //    G10 = 10 + 1015
        //    G11 = 11 + 13
        //    G13 = 13 * Rate
        //    G14 = 1014 +14
        //    G15 = 1015 * Rate + 11 * Rate
        //    G12 = G10 + G11
        select sum(Amount) from tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G11 ||
                  tmpTaxReportById.TaxReportField == #field_G13 ||
                  tmpTaxReportById.TaxReportField == #field_G14 ||
                  tmpTaxReportById.TaxReportField == #field_G15;

        g11 = tmpTaxReportById.Amount;

        select forupdate firstonly RecId from tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G11;
        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g11;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G11, g11);
        }

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_G13
                    || tmpTaxReportById.TaxReportField == #field_1013;

        g13 = tmpTaxReportById.Amount;

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G13;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g13;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G13, g13);
        }

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_1014;

        g14 = tmpTaxReportById.Amount;

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G14;
        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount += g14;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G14, g14);
        }

        select sum(Amount), sum(TaxAmount_AU)
            from tmpTaxReportByIdNondeductible
                where tmpTaxReportByIdNondeductible.TaxReportField == #field_1015 ||
                    tmpTaxReportByIdNondeductible.TaxReportField == #field_G15;

        select sum(TaxAmount_AU)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_1015 ||
                    tmpTaxReportById.TaxReportField == #field_G15;

        deductibleTax = tmpTaxReportById.TaxAmount_AU - tmpTaxReportByIdNondeductible.TaxAmount_AU;

        g15 = trunc(tmpTaxReportByIdNondeductible.Amount);

        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G15;
        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g15;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G15, g15);
        }

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_1015 ||
                    tmpTaxReportById.TaxReportField == #field_G10 ||
                    tmpTaxReportById.TaxReportField == #field_1013 ||
                    tmpTaxReportById.TaxReportField == #field_1014;

        g10 = tmpTaxReportById.Amount;

        // add to G10
        select forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G10;
        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g10;
            tmpTaxReportById.update();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G10, g10);
        }

        // Field G12 = field G10 + Field G11

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_G10;

        g12 = tmpTaxReportById.Amount + g11;
        this.insertInTmpTaxReportById(#field_G12, g12);

        // Field G16 = field G13 + Field G14 + Field G15

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField  == #field_G13
                    || tmpTaxReportById.TaxReportField == #field_G14
                    || tmpTaxReportById.TaxReportField == #field_G15;

        g16 = tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_G16, g16);

        // Field G17 = field G12 - Field G16
        g17 = g12 - g16;
        this.insertInTmpTaxReportById(#field_G17, g17);

        // Field G19 = field G17 + G18
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_G18;
        g19 = g17 + tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_G19, g19);

        // Field G20 = Total GST amount of creditable acquisitions
        select sum(TaxAmount_AU) from tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G10
                || tmpTaxReportById.TaxReportField == #field_G11
                || tmpTaxReportById.TaxReportField == #field_G18;

        g20 = trunc(tmpTaxReportById.TaxAmount_AU + deductibleTax);

        select firstonly forupdate tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_G20And1B;

        if (tmpTaxReportById)
        {
            tmpTaxReportById.Amount = g20;
            tmpTaxReportById.doUpdate();
        }
        else
        {
            this.insertInTmpTaxReportById(#field_G20And1B, g20);
        }

        // Field 1G (named 150)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_1G;
        f1g = tmpTaxReportById.Amount;

        // Field 2A (221) = field 1A (= field G9) + field 1C (101) + field 1E (201)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField  == #field_G9And1A
                    || tmpTaxReportById.TaxReportField == #field_1C
                    || tmpTaxReportById.TaxReportField == #field_1E;
        f2a = tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_2A, f2a);

        // Field 2B (222) = field 1B (= field G20) + field 1D (102) + field 1F (202) + field 1G (150)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField  == #field_G20And1B
                    || tmpTaxReportById.TaxReportField == #field_1D
                    || tmpTaxReportById.TaxReportField == #field_1F
                    || tmpTaxReportById.TaxReportField == #field_1G;
        f2b = tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_2B, f2b);
        // Field 2A - 2B is named 223

        f2a_2b = f2a - f2b;
        this.insertInTmpTaxReportById(#field_2A_2B, f2a_2b);

        // Field 4 (named 400) = field W2 (32) + field W3 (33) + field W4 (34)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField  == #field_W2
                    || tmpTaxReportById.TaxReportField == #field_W3
                    || tmpTaxReportById.TaxReportField == #field_W4;
        f4 = tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_4, f4);

        // Field 5A (501) = field T1 (51) * T2 (52) / 100 or field T1 * T3 (53) / 100, if T3 is filled
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_T1;
        ft1 = tmpTaxReportById.Amount;
        if (ft1)
        {
            select sum(Amount)
                from tmpTaxReportById
                    where tmpTaxReportById.TaxReportField == #field_T3;
            ft3 = tmpTaxReportById.Amount;
            if (ft3)
            {
                f5a = ft1 * ft3 / 100;
            }
            else
            {
                select sum(Amount) from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_T2;
                ft2 = tmpTaxReportById.Amount;
                f5a = ft1 * ft2 / 100;
            }
            f5a = CurrencyExchangeHelper::amount(f5a);
            this.insertInTmpTaxReportById(#field_5A, f5a);
        }

        // Field 6A (601) = field F3 (63) if this is filled otherwise field F1 (61)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_F3;
        if (!tmpTaxReportById.Amount)
        {
            select sum(Amount)
                from tmpTaxReportById
                    where tmpTaxReportById.TaxReportField == #field_F1;
        }
        f6a = tmpTaxReportById.Amount;
        this.insertInTmpTaxReportById(#field_6A, f6a);

        // Field 7 (named 700)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_7;
        f7 = tmpTaxReportById.Amount;

        // Field 7A (named 701)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_7A;
        f7a = tmpTaxReportById.Amount;

        // Field 7C (named 703)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_7C;
        f7c = tmpTaxReportById.Amount;

        // Field 7D (named 704)
        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_7D;
        f7d = tmpTaxReportById.Amount;

        // Field 8A (named 801) = Field 2A + Field 4 + Field 5A + Field 6A + Field 7 + Field 7a + Field 7c
        f8a = f2a + f4 + f5a + f6a + f7 + f7a + f7c;
        this.insertInTmpTaxReportById(#field_8A, f8a);

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_5B;
        f5b = tmpTaxReportById.Amount;

        select sum(Amount)
            from tmpTaxReportById
                where tmpTaxReportById.TaxReportField == #field_6B;
        f6b = tmpTaxReportById.Amount;

        // Field 8B (named 802) = Field 2B + Field 5B + Field 6b + Field 7d
        f8b = f2b + f5b + f6b + f7d;
        this.insertInTmpTaxReportById(#field_8B, f8b);

        // Field 9 (named 900) = Field 8A - field 8b
        f9 = f8a - f8b;
        this.insertInTmpTaxReportById(#field_9, f9);
    }

]]></Source>
			</Method>
			<Method>
				<Name>field1G</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 1G.
    /// </summary>
    /// <returns>
    ///    The value to report in field 1G.
    /// </returns>
    public TaxAmount field1G()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_1G;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field4</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 4.
    /// </summary>
    /// <returns>
    ///    The value to report in field 4.
    /// </returns>
    public TaxAmount field4()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_4;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field5A</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 5A.
    /// </summary>
    /// <returns>
    ///    The value to report in field 5A.
    /// </returns>
    public TaxAmount field5A()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_5A;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field5B</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 5B.
    /// </summary>
    /// <returns>
    ///    The value to report in field 5B.
    /// </returns>
    public TaxAmount field5B()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_5B;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field6A</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 6A.
    /// </summary>
    /// <returns>
    ///    The value to report in field 6A.
    /// </returns>
    public TaxAmount field6A()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_6A;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field6B</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 6B.
    /// </summary>
    /// <returns>
    ///    The value to report in field 6B.
    /// </returns>
    public TaxAmount field6B()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_6B;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field7</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the value to report in field 7.
    /// </summary>
    /// <returns>
    ///    The value to report in field 7.
    /// </returns>
    public TaxAmount field7()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_7;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field7A</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reports the value in field 7A.
    /// </summary>
    /// <returns>
    ///    The value to report in field 7A.
    /// </returns>
    public TaxAmount field7A()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_7A;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field7C</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reports the value in field 7C.
    /// </summary>
    /// <returns>
    ///    The value to report in field 7C.
    /// </returns>
    public TaxAmount field7C()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_7C;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>field7D</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reports the value in field 7D.
    /// </summary>
    /// <returns>
    ///    The value to report in field 7D.
    /// </returns>
    public TaxAmount field7D()
    {
        select firstonly tmpTaxReportById
            where tmpTaxReportById.TaxReportField == #field_7D;
        return tmpTaxReportById.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportById</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a tax report field in the <c>TmpTaxReportById</c> table.
    /// </summary>
    /// <param name="_field">
    ///    The field to insert.
    /// </param>
    /// <param name="_taxAmount">
    ///    The argument contains either the tax amount or the sum of the base amount and the tax amount.
    /// </param>
    /// <param name="_txt">
    ///    The text if the field is a text; optional.
    /// </param>
    /// <param name="_taxInCostPrice">
    ///    The adjusted tax amount if the field is a tax amount; optional.
    /// </param>
    protected void insertInTmpTaxReportById(
        TaxReportField _field,
        TaxAmount      _taxAmount,
        str            _txt = '',
        Amount         _taxInCostPrice = 0)
    {
        tmpTaxReportById.TaxReportField = _field;
        tmpTaxReportById.Amount         = _taxAmount;
        tmpTaxReportById.Description    = _txt;
        tmpTaxReportById.TaxInCostPrice = _taxInCostPrice;

        tmpTaxReportById.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInTmpTaxReportByIdWithOriginalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a tax report field in the <c>TmpTaxReportById</c> table.
    /// </summary>
    /// <param name="_field">
    ///    The field to insert.
    /// </param>
    /// <param name="_taxAmount">
    ///    A value keeps either the tax amount or the sum of the base amount and the tax amount.
    /// </param>
    /// <param name="_txt">
    ///    The text if the field is a text; optional.
    /// </param>
    /// <param name="_taxInCostPrice">
    ///    The adjusted tax amount if the field is a tax amount; optional.
    /// </param>
    /// <param name="_taxAmount_AU">
    ///    The argument contains the specific tax amount, essential for the Australian localization; optional.
    /// </param>
    /// <remarks>
    ///    Differs from the method insertInTmpTaxReportById by the additional parameter _taxAmount_AU.
    /// </remarks>
    protected void insertInTmpTaxReportByIdWithOriginalTaxAmount(
        TaxReportField _field,
        TaxAmount      _taxAmount,
        str            _txt = '',
        Amount         _taxInCostPrice = 0,
        TaxAmount      _taxAmount_AU = 0)
    {
        this.insertInTmpTaxReportById(_field, _taxAmount, _txt, _taxInCostPrice);
        tmpTaxReportById.TaxAmount_AU   = _taxAmount_AU;
        tmpTaxReportById.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDocumentIdNumber</Name>
				<Source><![CDATA[
    public TaxDocumentIdNumber parmTaxDocumentIdNumber(TaxDocumentIdNumber _taxDocumentIdNumber = taxDocumentIdNumber)
    {
        taxDocumentIdNumber = _taxDocumentIdNumber;
        return  taxDocumentIdNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPeriod</Name>
				<Source><![CDATA[
    public TaxPeriod parmTaxPeriod(TaxPeriod _taxPeriod = taxPeriod)
    {
        taxPeriod = _taxPeriod;
        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepCounter</Name>
				<Source><![CDATA[
    public TaxVersion parmTaxRepCounter(TaxVersion _taxRepCounter = taxRepCounter)
    {
        taxRepCounter = _taxRepCounter;
        return taxRepCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxRepVerison</Name>
				<Source><![CDATA[
    public TaxRepVersion parmTaxRepVerison(TaxRepVersion _taxRepVersion = taxRepVersion)
    {
        taxRepVersion = _taxRepVersion;
        return taxRepVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTaxReportById</Name>
				<Source><![CDATA[
    public TmpTaxReportById parmTmpTaxReportById(TmpTaxReportById _tmpTaxReportById = tmpTaxReportById)
    {
        tmpTaxReportById = _tmpTaxReportById;
        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdated</Name>
				<Source><![CDATA[
    public boolean parmUpdated(boolean _updated = updated)
    {
        updated = _updated;
        return updated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucher</Name>
				<Source><![CDATA[
    public Voucher parmVoucher(Voucher _voucher = voucher)
    {
        voucher = _voucher;
        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReport_AU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>TaxCalcBASFields</c> object.
    /// </summary>
    /// <param name="_taxReport_AU">
    ///    The <c>TaxReport_AU</c> object upon which the calculation should be based.
    /// </param>
    /// <returns>
    ///    A <c>TaxCalcBASFields</c> object.
    /// </returns>
    public static TaxCalcBASFields newTaxReport_AU(TaxReport_AU _taxReport_AU)
    {
        TaxCalcBASFields taxCalcBASFields = new TaxCalcBASFields();

        taxCalcBASFields.parmTaxRepVerison(_taxReport_AU.taxRepVersion());
        taxCalcBASFields.parmTaxPeriod(_taxReport_AU.taxPeriod());
        taxCalcBASFields.parmFromDate(_taxReport_AU.fromDate());
        taxCalcBASFields.parmToDate(_taxReport_AU.toDate());
        taxCalcBASFields.parmTransDate(_taxReport_AU.transDate());
        taxCalcBASFields.parmVoucher(_taxReport_AU.voucher());
        taxCalcBASFields.parmUpdated(_taxReport_AU.update());

        taxCalcBASFields.parmTaxRepCounter(0);

        return taxCalcBASFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReportExtraFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>TaxCalcBASFields</c> object.
    /// </summary>
    /// <param name="_taxReportExtraFields">
    ///    The <c>TaxReportExtraFields</c> record upon which the calculation should be based.
    /// </param>
    /// <returns>
    ///    A <c>TaxCalcBASFields</c> object.
    /// </returns>
    public static TaxCalcBASFields newTaxReportExtraFields(TaxReportExtraFields _taxReportExtraFields)
    {
        TaxCalcBASFields taxCalcBASFields = new TaxCalcBASFields();

        taxCalcBASFields.parmTaxPeriod(_taxReportExtraFields.TaxPeriod);
        taxCalcBASFields.parmFromDate(_taxReportExtraFields.FromDate);
        taxCalcBASFields.parmToDate(_taxReportExtraFields.ToDate);
        taxCalcBASFields.parmTransDate(_taxReportExtraFields.TransDate);
        taxCalcBASFields.parmVoucher(_taxReportExtraFields.Voucher);

        if (_taxReportExtraFields.Voucher)
        {
            taxCalcBASFields.parmUpdated(true);
        }
        else
        {
            taxCalcBASFields.parmUpdated(false);
        }

        taxCalcBASFields.parmTaxRepCounter(0);
        taxCalcBASFields.parmTaxRepVerison(TaxRepVersion::Original);

        return taxCalcBASFields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReportVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a <c>TaxCalcBASFields</c> object.
    /// </summary>
    /// <param name="_taxReportVoucher">
    ///    The <c>TaxReportVoucher</c> record upon which the calculation should be based.
    /// </param>
    /// <returns>
    ///    <c>TaxCalcBASFields</c> object.
    /// </returns>
    public static TaxCalcBASFields newTaxReportVoucher(TaxReportVoucher _taxReportVoucher)
    {
        TaxCalcBASFields  taxCalcBASFields = new TaxCalcBASFields();

        taxCalcBASFields.parmTaxRepVerison(_taxReportVoucher.TaxRepVersion);
        taxCalcBASFields.parmTaxPeriod(_taxReportVoucher.TaxPeriod);
        taxCalcBASFields.parmFromDate(_taxReportVoucher.FromDate);
        taxCalcBASFields.parmToDate(_taxReportVoucher.ToDate);
        taxCalcBASFields.parmTaxRepCounter(_taxReportVoucher.TaxRepCounter);
        taxCalcBASFields.parmTransDate(_taxReportVoucher.TransDate);
        taxCalcBASFields.parmVoucher(_taxReportVoucher.Voucher);
        taxCalcBASFields.parmUpdated(true);

        return taxCalcBASFields;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>