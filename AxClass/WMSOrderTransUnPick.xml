<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTransUnPick</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsOrderTransUnPick
{
    WMSOrderTrans           wmsOrderTransUnPick;
    InventDim               inventDimUnPickTo;
    InventDim               inventDimPick;
    InventQty               unPickQty;
    boolean                 cancelPickingLine;
    boolean                 mustAddTransToNewRoute;

    InventMovement          inventMovement;
    InventMovement          parentMovement;

    PdsCWInventQty          pdsCWUnPickQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInput</Name>
				<Source><![CDATA[
    protected boolean checkInput()
    {
        InventTrans         inventTrans;

        if (!unPickQty)
        {
            info("@SYS105860");
            return false;
        }

        if (!wmsOrderTransUnPick.canBeUnpicked())
        {
            throw error("@SYS105861");
        }

        if (unPickQty > wmsOrderTransUnPick.Qty)
        {
            throw error("@SYS105862");
        }

        if (unPickQty < 0)
        {
            throw error("@SYS105927");
        }

        if (!parentMovement)
        {
            throw error("@SYS105928");
        }

        if (wmsOrderTransUnPick.RecVersion != (select RecVersion from wmsOrderTrans
                                                where wmsOrderTrans.OrderId == wmsOrderTransUnPick.OrderId
                                                   && wmsOrderTrans.RecId == wmsOrderTransUnPick.RecId).RecVersion)
        {
            throw error(strFmt("@SYS105859",tableId2pname(tableNum(WMSOrderTrans))));
        }

        if (wmsOrderTransUnPick.InventTransId)
        {
            select sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin == parentMovement.inventTransOriginId()
                   && inventTrans.StatusIssue       == StatusIssue::Picked
                   && inventTrans.StatusReceipt     == StatusReceipt::None
                   && inventTrans.PickingRouteID    == wmsOrderTransUnPick.RouteId;

            if (-inventTrans.Qty < wmsOrderTransUnPick.Qty)
            {
                throw error(strFmt("@SYS106311",wmsOrderTransUnPick.Qty, StatusIssue::Picked));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddWMSOrderTransToNewRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>WMSOrderTrans</c> record that is being unpicked must be added to a
    ///    picking route other than the one it references.
    /// </summary>
    /// <param name="_wmsPickingRoute">
    ///    The picking route that the <c>WMSOrderTrans</c> record references.
    /// </param>
    /// <returns>
    ///    A <c>NoYes</c> enumeration value that indicates whether the <c>WMSOrderTrans</c> record should be
    ///    added to a new picking route.
    /// </returns>
    protected NoYes mustAddWMSOrderTransToNewRoute(WMSPickingRoute _wmsPickingRoute)
    {
        return (!_wmsPickingRoute.RecId || _wmsPickingRoute.ShipmentId != wmsOrderTransUnPick.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSOrderTransUnPick</Name>
				<Source><![CDATA[
    public WMSOrderTrans parmWMSOrderTransUnPick(WMSOrderTrans _wmsOrderTransUnPick = wmsOrderTransUnPick)
    {
        wmsOrderTransUnPick = _wmsOrderTransUnPick;
        return wmsOrderTransUnPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPick</Name>
				<Source><![CDATA[
    public void unPick(
        InventQty       _unPickQty,
        InventDim       _inventDimUnPickTo = wmsOrderTransUnPick.inventDim(),
        boolean         _cancelPickingLine = false,
        PdsCWInventQty  _pdsCWUnPickQty = 0
        )
    {
        #OCCRetryCount

        inventDimUnPickTo = InventDim::findOrCreate(_inventDimUnPickTo);
        unPickQty         = _unPickQty;

        pdsCWUnPickQty    = _pdsCWUnPickQty;

        cancelPickingLine = _cancelPickingLine;

        try
        {
            ttsbegin;
            inventMovement = InventMovement::construct(wmsOrderTransUnPick);
            if (!inventMovement)
            {
                throw error("@SYS79582");
            }

            parentMovement = inventMovement.parentMovement();

            if (!this.checkInput())
            {
                throw error("@SYS18447");
            }

            boolean needContext = WMSOrderTransUnpickForWarehouseCWItemFlight::instance().isEnabled()
                && PdsGlobal::pdsIsCWItem(wmsOrderTransUnPick.itemId)
                && WHSInventEnabled::exist(wmsOrderTransUnPick.itemId);

            using (WMSOrderUnpickUpdateCatchWeightUnpickQtyContext context = needContext ? WMSOrderUnpickUpdateCatchWeightUnpickQtyContext::construct() : null)
            {
                if (context)
                {
                    context.parmWmsOrderTransQty(-wmsOrderTransUnPick.qty);
                }
                this.updateInventory();
            }

            this.updateWMSOrderTrans();
            this.updatePickingRoute();
            this.updateShipment();
            ttscommit;
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventory</Name>
				<Source><![CDATA[
    protected void updateInventory()
    {
        InventDimParm           inventDimParm;
        InventUpd_Picked        inventUpd_Picked;

        if (!inventDimPick)
        {
            inventDimPick = InventDim::find(wmsOrderTransUnPick.InventDimId);
        }

        if (!inventDimUnPickTo)
        {
            inventDimUnPickTo = InventDim::findOrCreate(inventDimUnPickTo);
        }

        inventDimParm.setAllInventDim();

        ttsbegin;
        inventUpd_Picked = InventUpd_Picked::newParameters(parentMovement,
                           inventDimPick,     inventDimParm,
                           inventDimUnPickTo, inventDimParm,
                           unPickQty,
                           wmsOrderTransUnPick.RouteId,
                           pdsCWUnPickQty);

        inventUpd_Picked.parmChildMovement(inventMovement);
        inventUpd_Picked.parmUnPickInventDim(inventDimUnPickTo);
        if (wmsOrderTransUnPick.isReserved)
        {
            inventUpd_Picked.parmAutoReserveOnPickLess(UnknownNoYes::Yes);
        } 
        
        inventUpd_Picked.updateNow();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePickingRoute</Name>
				<Source><![CDATA[
    protected void updatePickingRoute()
    {
        WMSPickingRoute  wmsPickingRoute;

        ttsbegin;

        if (mustAddTransToNewRoute)
        {
            //line must be added to new or existing route for the shipment
            wmsOrderTransUnPick.createPickingLine(wmsOrderTransUnPick.wmsShipment(),WMSLocation::findPickingLocation(wmsOrderTransUnPick.ItemId,wmsOrderTransUnPick.inventDim()));
        }
        else
        {
            wmsPickingRoute = wmsOrderTransUnPick.wmsPickingRoute(true);
            wmsPickingRoute.setStatus();
            wmsPickingRoute.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipment</Name>
				<Source><![CDATA[
    protected void updateShipment()
    {
        WMSShipment wmsShipment;

        ttsbegin;
        wmsShipment = wmsOrderTransUnPick.wmsShipment(true);

        if (wmsShipment.RecId)
        {
            wmsShipment.notifyOfLineChange(NoYes::Yes, NoYes::No, NoYes::Yes);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWMSOrderTrans</Name>
				<Source><![CDATA[
    protected void updateWMSOrderTrans()
    {
        ttsbegin;
        if (unPickQty < wmsOrderTransUnPick.Qty)
        {
            wmsOrderTransUnPick = wmsOrderTransUnPick.split(unPickQty, pdsCWUnPickQty);
        }

        if (parentMovement.canBeReserved() && (parentMovement.mustBeAutoReserved() || wmsOrderTransUnPick.InventDimFixed))
        {
            wmsOrderTransUnPick.InventDimId = inventDimUnPickTo.InventDimId;
            wmsOrderTransUnPick.IsReserved = NoYes::Yes;
        }
        else
        {
            wmsOrderTransUnPick.InventDimId = parentMovement.inventdim().InventDimId;
            wmsOrderTransUnPick.IsReserved = NoYes::No;
        }

            //this is a pallet transport line that is unpicked, but we only support creating a new picking route for it.
        if (wmsOrderTransUnPick.FullPallet)
        {
            wmsOrderTransUnPick.FullPallet = NoYes::No;
            mustAddTransToNewRoute = true; //we cannot add to the old transport
        }
        else
        {
            mustAddTransToNewRoute = this.mustAddWMSOrderTransToNewRoute(wmsOrderTransUnPick.wmsPickingRoute());
        }

        wmsOrderTransUnPick.PalletIdPicked = '';
        wmsOrderTransUnPick.Qty = unPickQty;

        wmsOrderTransUnPick.PdsCWQty = pdsCWUnPickQty;

        if (!mustAddTransToNewRoute)
        {
            wmsOrderTransUnPick.activate();
        }
        else //if a new route is created it will have status registered
        {
            wmsOrderTransUnPick.changeStatus(WMSExpeditionStatus::Registered);
        }

        if (cancelPickingLine)
        {
            wmsOrderTransUnPick.cancel();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WMSOrderTransUnPick construct()
    {
        return new WMSOrderTransUnPick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSOrderTrans</Name>
				<Source><![CDATA[
    static WMSOrderTransUnPick newWMSOrderTrans(WMSOrderTrans _wmsOrderTrans)
    {
        WMSOrderTransUnPick    wmsOrderTransUnPick;

        wmsOrderTransUnPick = WMSOrderTransUnPick::construct();
        wmsOrderTransUnPick.parmWMSOrderTransUnPick(_wmsOrderTrans);

        return wmsOrderTransUnPick;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>