<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalTransList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalTransList</c> class is used to hold a list of the journalTrans.
/// </summary>
// This class contains a list of journalTrans
// It should normally not be extended.

class JournalTransList
{
    JournalTableData    journalTableData;
    JournalTransMap     journalTrans;

    Map                 lineNumIdx;             // index: LineNum , Voucher

    RecordSortedList    cacheJournalTrans;

    boolean             firstCalled;
    boolean             hasNext;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    public boolean add(JournalTransMap _journalTrans)
    {
        if (journalTableData.journalVoucherNum())
        {
            lineNumIdx.insert(_journalTrans.LineNum,_journalTrans.Voucher);
        }
        else
        {
            lineNumIdx.insert(_journalTrans.LineNum,'');
        }

        return cacheJournalTrans.ins(_journalTrans/*,true*/);
    }

]]></Source>
			</Method>
			<Method>
				<Name>count</Name>
				<Source><![CDATA[
    public Integer count()
    {
        return cacheJournalTrans.len();
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public boolean find(
        Voucher _voucher,
        LineNum _lineNum)
    {
        journalTrans.Voucher    = _voucher;
        journalTrans.LineNum    = _lineNum;

        return cacheJournalTrans.find(journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
    public boolean first()
    {
        firstCalled = true;

        hasNext = cacheJournalTrans.first(journalTrans);

        return hasNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDb</Name>
				<Source><![CDATA[
    public void initDb(Voucher _voucher = '')
    {
        this.selectDb(this.journalTableData().journalTable().JournalId,_voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>item</Name>
				<Source><![CDATA[
    public JournalTransMap item()
    {
        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTableData</Name>
				<Source><![CDATA[
    public JournalTableData journalTableData()
    {
        return journalTableData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTransData</Name>
				<Source><![CDATA[
    public JournalTransData journalTransData()
    {
        return journalTableData.journalStatic().newJournalTransData(this.item(),journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(JournalTableData  _journalTableData)
    {
        JournalStatic   journalStatic;

        journalTableData    = _journalTableData;
        journalStatic       = _journalTableData.journalStatic();

        lineNumIdx          = new Map(Types::Real,Types::String);

        cacheJournalTrans   = new RecordSortedList(journalStatic.journalTrans().TableId);

        if (_journalTableData.journalVoucherNum())
        {
            cacheJournalTrans.sortOrder(journalStatic.transFieldIdVoucher(),journalStatic.transFieldIdLineNum());
        }
        else
        {
            cacheJournalTrans.sortOrder(journalStatic.transFieldIdLineNum());
        }

        journalTrans = journalStatic.journalTrans();

        hasNext = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next()
    {
        if (! firstCalled)
        {
            return this.first();
        }

        hasNext = cacheJournalTrans.next(journalTrans);

        return hasNext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        firstCalled = false;
        hasNext     = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDb</Name>
				<Source><![CDATA[
    public void selectDb(
        JournalId   _journalId,
        Voucher     _voucher)
    {
        JournalTransMap         journalTransTmp        = journalTableData.journalStatic().journalTrans();

        while select forupdate journalTransTmp
            where journalTransTmp.JournalId == _journalId &&
                 (journalTransTmp.Voucher   == _voucher || ! _voucher)
        {
            if (! this.add(journalTransTmp))
            {
                throw error(strFmt("@SYS58214",journalTrans.LineNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the buffer with values passed in journalTrans
    /// </summary>
    /// <param name="_journalTrans">
    /// The JournalTrans buffer to be updated into the list
    /// </param>
    /// <returns>
    /// True if the record is updated, false otherwise
    /// </returns>
    public boolean update(JournalTransMap _journalTrans)
    {
        boolean ret;

        if (cacheJournalTrans.find(_journalTrans))
        {
            ret = cacheJournalTrans.ins(_journalTrans, true);
        }
        else
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>