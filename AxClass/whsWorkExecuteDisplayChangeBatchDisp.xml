<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsWorkExecuteDisplayChangeBatchDisp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Handles the logic behind the RF flow used to change batch disposition codes.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ChangeBatchDisposition)]
public class whsWorkExecuteDisplayChangeBatchDisp extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildChangeBatchDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the fields to be displayed on the batch disposition change screen.
    /// </summary>
    /// <param name="_con">
    ///     The RF container variable.
    /// </param>
    /// <returns>
    ///     Returns the updated RF container variable.
    /// </returns>
    protected container buildChangeBatchDisposition(container _con)
    {
        container   ret = _con;

        ret += [this.buildControl(#RFLabel, "@WAX5575", "@WAX5575", 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ItemId, "@SYS7407", 1, pass.lookupStr(#ItemID), extendedTypeNum(InventInventItemSearchItem), '', 0, true)];
        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookupStr(#BatchId), extendedTypeNum(InventBatchId), '', 0, true)];

        if (InventBatch::exist(pass.lookupStr(#BatchId), pass.lookupStr(#ItemId)))
        {
            // Build the from batch disposition control
            ret = this.buildBatchDisposition(ret, #FromBatchDisposition, "@WAX5567", false);

            // Build the to batch disposition control
            ret = this.buildBatchDisposition(ret, #BatchDisposition, "@WAX5568");
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the RF form used to change batch disposition codes.
    /// </summary>
    /// <param name="_con">
    ///     The RF container variable.
    /// </param>
    /// <param name="_buttonClicked">
    ///     The previously clicked button.
    /// </param>
    /// <returns>
    ///     Returns the updated RF form container.
    /// </returns>
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container           con = _con;
        container           ret = conNull();
        boolean             addCancel = true;
        boolean             hasError;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             complete;
        boolean             batchHasChanged;
        boolean             itemHasChanged;
        boolean             removeBatch;

        mode = conPeek(conPeek(_con, 1), 1);
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(con);

        switch (step)
        {
            case #InitializeBatchDispChange:
                ret = this.buildChangeBatchDisposition(ret);
                step = #ProcessBatchDispChange;
                break;
            case #ProcessBatchDispChange:
                if (hasError)
                {
                    con = conDel(con, #RFErrorLoc, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);

                // Check whether the item ID or batch ID values have changed.
                itemHasChanged  = this.fieldValueChanged(fieldValues, #ItemId);
                batchHasChanged = this.fieldValueChanged(fieldValues, #BatchId);

                pass = this.combineMaps(pass, fieldValues);
                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = con;

                    // If an invalid batch or item has been entered, remove the batch disposition fields; otherwise, rebuild them.
                    if (pass.hasValue(#BatchId) && pass.hasValue(#ItemId))
                    {
                        ret = this.rebuildBatchDisposition(ret);
                    }
                    else
                    {
                        ret = this.removeBatchDisposition(ret);
                    }

                    addCancel = false;
                    break;
                }

                con = this.buildChangeBatchDisposition(ret);

                if (!fieldValues.empty())
                {
                    [ret, complete] = this.processFieldValues(con, fieldValues);

                    // Rebuild the screen if batch or item have changed.
                    if (batchHasChanged || itemHasChanged)
                    {
                        complete    = false;
                        removeBatch = itemHasChanged ? true : false;

                        // Remove field values from the pass.
                        this.resetPassFieldValues(false, removeBatch);

                        // If a warning exists regarding the batch disposition code, remove it.
                        if (pass.exists(#BatchDispositionWarn))
                        {
                            pass.remove(#BatchDispositionWarn);
                        }

                        ret = conNull();
                        ret = this.buildChangeBatchDisposition(ret);
                    }

                    if (complete
                    &&  pass.hasValue(#BatchDisposition))
                    {
                        ret = conNull();

                        // Change the batch disposition code.
                        PdsResetDispositionStatus::setBatchDispositionCode(
                            pass.lookup(#ItemId),
                            pass.lookup(#BatchId),
                            pass.lookup(#BatchDisposition),
                            userId);

                        // Reset the field values in the pass.
                        this.resetPassFieldValues();

                        ret = this.addErrorLabel(ret, "@WAX5576", WHSRFColorText::Success);
                        ret = this.buildChangeBatchDisposition(ret);
                    }
                }
                break;
        }

        if (addCancel)
        {
            ret = this.addCancelButton(ret, 1, true);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBatchDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the batch disposition fields from the RF container.
    /// </summary>
    /// <param name="_con">
    ///     The RF container variable.
    /// </param>
    /// <returns>
    ///     Returns the updated RF container variable.
    /// </returns>
    protected container removeBatchDisposition(container _con)
    {
        container   ret = _con;
        int         batchDispLocation;

        batchDispLocation = this.getControlLocation(ret, #FromBatchDisposition);

        if (batchDispLocation > 0)
        {
            // If an invalid item or inventory batch was entered, clear out the disposition code values from the pass.
            this.resetPassFieldValues(false, false, true, true);

            // If a warning exists regarding the batch disposition code, remove it.
            if (pass.exists(#BatchDispositionWarn))
            {
                pass.remove(#BatchDispositionWarn);
            }

            ret = conDel(ret, batchDispLocation, 2);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reset the field values within the pass.
    /// </summary>
    /// <param name="_removeItem">
    ///     A Boolean value indicating whether to remove the item ID from the pass.
    /// </param>
    /// <param name="_removeBatch">
    ///     A Boolean value indicating whether to remove the inventory batch ID from the pass.
    /// </param>
    /// <param name="_removeFromBatchDisposition">
    ///     A Boolean value indicating whether to remove the original batch disposition code from the pass.
    /// </param>
    /// <param name="_removeToBatchDisposition">
    ///     A Boolean value indicating whether to remove the new batch disposition code from the pass.
    /// </param>
    protected void resetPassFieldValues(
        boolean _removeItem = true,
        boolean _removeBatch = true,
        boolean _removeFromBatchDisposition = true,
        boolean _removeToBatchDisposition = true)
    {
        // Remove the item ID.
        if (_removeItem && pass.exists(#ItemId))
        {
            pass.remove(#ItemId);
        }

        // Remove the inventory batch ID.
        if (_removeBatch && pass.exists(#BatchId))
        {
            pass.remove(#BatchId);
        }

        // Remove the original batch disposition code.
        if (_removeFromBatchDisposition && pass.exists(#FromBatchDisposition))
        {
            pass.remove(#FromBatchDisposition);
        }

        // Remove the new batch disposition code.
        if (_removeToBatchDisposition && pass.exists(#BatchDisposition))
        {
            pass.remove(#BatchDisposition);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>