<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjProfitLossCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjProfitLossCategoryDP</c> class provides data for the
///    <c>ProjListProjProfitLossCategory</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementCategory)),
    SRSReportParameterAttribute(classstr(ProjListProjProfitLossProjContract))
]

class ProjListProjProfitLossCategoryDP extends SrsReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    ProjOptionTime          time;
    ProjOptionHours         hour;
    ProjOptionCost          expenses;
    ProjOptionItem          item;
    ProjOptionRevenue       revenue;
    ProjOptionOnAcc         onAcc;
    TransDate               projFromDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    ProjListColumnData      actualVsBudget;
    ForecastModelId         forecastModelId;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;
    ProjListProfitFactor    profitFactor;

    ProjListProjTrans_ProfitLoss    listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           projHelpClass;
    ProjListProjProfitLossTmp       projListProjProfitLossTmp;
    projStatement                   projStatement;

    QueryRun                qrun;

    ProjCategoryId          id;
    ProjCategoryName        name;

    ProjQty                 tmpQtyHour;
    AmountMST               tmpSalary, tmpExpenses, tmpInventory, tmpTotalCost, tmpRevenue, tmpValueAdded, tmpMargin;

    int                     hourQtyDecimals, valueAddedDecimals, grossMarginDecimals, amountDecimals;
    int                     showContributionMargin, showCostExpense, showCostHour, showCostInventory, showGrossMarginPct,
                            showQtyHour, showRevenue, showTotalCost, showValueAdded, showValueFactor;
    str                     valueFactorLabel,grossMarginPctLabel, headerLabel, periodLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        projStatement.parmCategoryId(id);

        switch (amountQty)
        {
            case ProjAmountQty::Amount:
                tmpSalary      = projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
                break;
            case ProjAmountQty::Qty:
                tmpQtyHour     = projStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
                break;
            case ProjAmountQty::AmountQty:
                tmpSalary      = projStatement.a310_Cost_Hour(false,ProjListStateType::ProfitLoss);
                tmpQtyHour     = projStatement.a310_Cost_Hour_Qty(false,ProjListStateType::ProfitLoss);
                break;
        }

        tmpExpenses    = projStatement.a330_Cost_Expenses()+
                      projStatement.a335_Accrued_Cost();
        tmpInventory   = projStatement.a315_Item_Total();
        tmpTotalCost   = projStatement.a305_Cost();
        tmpRevenue     = projStatement.a100_Total_Revenue();
        tmpValueAdded  = projStatement.a400_Value_Added();
        tmpMargin      = projStatement.a500_Gross_Margin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateNoId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amounts for the blank IDs.
    /// </summary>
    void calculateNoId()
    {
        projStatement.parmCategoryId(SysQuery::valueEmptyString());

        tmpRevenue     = projStatement.a100_Total_Revenue();
        tmpValueAdded  = projStatement.a400_Value_Added();
        tmpMargin      = projStatement.a500_Gross_Margin();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>projListProjProfitLossTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>projListProjProfitLossTmp</c> table.
    /// </returns>

    [SRSReportDataSetAttribute('ProjListProjProfitLossTmp')]
    public ProjListProjProfitLossTmp getProjListProjProfitLossTmp()
    {
        select * from projListProjProfitLossTmp;
        return projListProjProfitLossTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans = ProjListProjTrans::construct(ProjListStateType::ProfitLoss, ProjListStateId::Category);
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);
        listProjTrans.parmInvestment(investment);
        listProjTrans.parmInternalCost(internalCost);
        listProjTrans.parmTime(time);

        listProjTrans.parmHour(hour);
        listProjTrans.parmExpenses(expenses);
        listProjTrans.parmItem(item);
        listProjTrans.parmRevenue(revenue);
        listProjTrans.parmOnAcc(onAcc);

        listProjTrans.parmProjFromDate(projFromDate);
        listProjTrans.parmProjToDate(projToDate);
        listProjTrans.parmLedgerFromDate(ledgerFromDate);
        listProjTrans.parmLedgerToDate(ledgerToDate);

        listProjTrans.parmColumnData(actualVsBudget);
        listProjTrans.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);
        listProjTransLayout.parmAmountQty(amountQty);
        listProjTransLayout.parmProfitFactor(profitFactor);

        listProjTransLayout.parmLevel(2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjProfitLossTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjProfitLossTmp()
    {
        projListProjProfitLossTmp.clear();

        projListProjProfitLossTmp.Id            = id;
        projListProjProfitLossTmp.IdLabel       = "@SYS69410";
        projListProjProfitLossTmp.Name          = name;

        projListProjProfitLossTmp.QtyHour       = tmpQtyHour;

        projListProjProfitLossTmp.CostHour      = listProjTransLayout.showAmountReport(tmpSalary, showAmount);
        projListProjProfitLossTmp.CostExpense   = listProjTransLayout.showAmountReport(tmpExpenses, showAmount);
        projListProjProfitLossTmp.CostInventory = listProjTransLayout.showAmountReport(tmpInventory, showAmount);
        projListProjProfitLossTmp.TotalCost     = listProjTransLayout.showAmountReport(tmpTotalCost, showAmount);
        projListProjProfitLossTmp.Revenue       = listProjTransLayout.showAmountReport(tmpRevenue, showAmount);
        projListProjProfitLossTmp.ValueAdded    = listProjTransLayout.showAmountReport(tmpValueAdded, showAmount);
        projListProjProfitLossTmp.ContributionMargin = listProjTransLayout.showAmountReport(tmpMargin, showAmount);

        projListProjProfitLossTmp.ValueFactor   = this.valueFactor();
        projListProjProfitLossTmp.GrossMarginPct= ProjParameters::grossMarginPct(tmpTotalCost,tmpRevenue,tmpMargin);

        // set labels
        projListProjProfitLossTmp.HeaderLabel   = headerLabel;
        projListProjProfitLossTmp.PeriodLabel   = periodLabel;
        projListProjProfitLossTmp.GrossMarginPctLabel = grossMarginPctLabel;
        projListProjProfitLossTmp.ValueFactorLabel = valueFactorLabel;

        // set decimal values
        projListProjProfitLossTmp.DecimalHourQty     = hourQtyDecimals;
        projListProjProfitLossTmp.DecimalValueAdded  = valueAddedDecimals;
        projListProjProfitLossTmp.DecimalGrossMargin = grossMarginDecimals;
        projListProjProfitLossTmp.DecimalAmount      = amountDecimals;

        // set field visibility
        projListProjProfitLossTmp.ShowContributionMargin = showContributionMargin;
        projListProjProfitLossTmp.ShowCostExpense        = showCostExpense;
        projListProjProfitLossTmp.ShowCostHour           = showCostHour;
        projListProjProfitLossTmp.ShowCostInventory      = showCostInventory;
        projListProjProfitLossTmp.ShowGrossMarginPct     = showGrossMarginPct;
        projListProjProfitLossTmp.ShowQtyHour            = showQtyHour;
        projListProjProfitLossTmp.ShowRevenue            = showRevenue;
        projListProjProfitLossTmp.ShowTotalCost          = showTotalCost;
        projListProjProfitLossTmp.ShowValueAdded         = showValueAdded;
        projListProjProfitLossTmp.ShowValueFactor        = showValueFactor;

        projListProjProfitLossTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return (tmpExpenses  != 0 || tmpSalary != 0 || tmpInventory != 0 || tmpRevenue != 0 || tmpQtyHour != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource    queryDataSource;
        QueryBuildRange         rangeHide, rangeEmptyString;

        queryDataSource     = qrun.query().dataSourceTable(tablenum(ProjCategory));

        queryDataSource.addSortField(fieldnum(ProjCategory,CategoryId));
        rangeHide           = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
        rangeHide.status(RangeStatus::Hidden);

        if (hour)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Hour));
        }

        if (expenses)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Cost));
        }

        if (item)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Item));
        }

        if (revenue)
        {
            queryDataSource.addRange(fieldnum(ProjCategory,CategoryType)).value(queryValue(ProjCategoryType::Revenue));
        }

        if (! (hour || expenses || item || revenue))
        {
            rangeEmptyString = queryDataSource.addRange(fieldnum(ProjCategory,CategoryType));
            rangeEmptyString.value(queryValue(SysQuery::valueEmptyString()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the category record and calls the <c>calculate</c> method.
    /// </summary>
    void printCategory()
    {
        ProjCategory       projCategoryLocal;

        projCategoryLocal   = qrun.get(tablenum(ProjCategory));

        id                  = projCategoryLocal.CategoryId;
        name                = projCategoryLocal.Name;

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListProjProfitLossTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. This method should compute the data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjListProjProfitLossProjContract contract = this.parmDataContract() as ProjListProjProfitLossProjContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();
        investment = contract.parmInvestment();
        internalCost = contract.parmInternalCost();
        time = contract.parmTime();

        hour = contract.parmHour();
        expenses = contract.parmExpenses();
        item = contract.parmItem();
        revenue = contract.parmRevenue();
        onAcc = contract.parmOnAcc();

        projFromDate = contract.parmProjFromDate();
        projToDate = contract.parmProjToDate();
        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelIdV2();

        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
        amountQty = contract.parmAmountQty();
        profitFactor = contract.parmProfitFactor();

        this.initProjListTrans();

        headerLabel   = listProjTrans.formatSelection(showAmount);
        periodLabel   = listProjTrans.formatPeriodLabel('',DateFlags::None);

        [valueFactorLabel, grossMarginPctLabel] = listProjTrans.setDisplayLabel(profitFactor);

        [showQtyHour, showCostHour, showCostExpense, showCostInventory,
         showTotalCost, showRevenue, showContributionMargin,
         showGrossMarginPct, showValueAdded, showValueFactor] = listProjTrans.setDisplayFlags(hour, expenses,
                                                                                              item, amountQty,
                                                                                              profitFactor);

        [hourQtyDecimals, amountDecimals,
        grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        projStatement = projStatement::newProjListProfitLoss(
                        listProjTrans,
                        ProjListStateProjType::Project,
                        projListProjTrans2Period::columnData2ActualBudget(actualVsBudget),
                        amountQty,
                        forecastModelId);

        qrun = new QueryRun(this.parmQuery());

        this.modifyQuery();

        //  print lines with no Id eg. cost and revenue with no Employee
        if (! skipBlankId)
        {
            this.calculateNoId();
            if (this.lineValue())
            {
                this.insertProjListProjProfitLossTmp();
            }
        }
        while (qrun.next())
        {
            this.printCategory();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueFactor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the value-added factor, based on the project parameter setup.
    /// </summary>
    /// <returns>
    ///    The value-added factor.
    /// </returns>
    private ProjFactorValueAdded valueFactor()
    {
        switch (ProjParameters::find().ValueAddedDisplay)
        {
            case ProjValueAddedDisplay::ValueAddedMarkup:
                if (tmpSalary)
                {
                    return (tmpValueAdded / tmpSalary);
                }
                break;
            case ProjValueAddedDisplay::ValueAddedRation:
                if (tmpRevenue)
                {
                    return (tmpValueAdded * 100 / tmpRevenue);
                }
                break;
            case ProjValueAddedDisplay::ValueAddedMarupPct:
                if (tmpSalary)
                {
                    return (tmpValueAdded * 100 / tmpSalary);
                }
                break;
        }

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>