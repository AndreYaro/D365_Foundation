<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeDocument_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustBillOfExchangeDocument_FR extends CustOutPaym
{
    TmpBankBillOfExchangePrintout   tmpBankBillOfExchangePrintout;
    AddressCity                     city;
    DialogField                     dialogCity;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        city
    #ENDMACRO

    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
         city
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens a printer settings dialog box for the specified payment document type.
    /// </summary>
    /// <param name="_documentType">
    ///    The payment document type.
    /// </param>
    /// <returns>
    ///    true if the printer settings dialog box was closed with the OK button; otherwise, false.
    /// </returns>
    public boolean callPrinterSettings(PaymDocumentType _documentType)
    {
        SrsPrintDestinationSettings printSettings;
        boolean ok;

        if (_documentType == PaymDocumentType::Document)
        {
            printSettings = new SrsPrintDestinationSettings();
            printSettings.unpack(this.getPrinterSettings(_documentType));

            printSettings.fromPage(1);
            printSettings.toPage(99999999);
            printSettings.printMediumType(SRSPrintMediumType::Printer);

            ok = SrsReportRunUtil::showSettingsDialog(printSettings);

            if (ok)
            {
                this.updatePrinterSettings(_documentType, printSettings.pack());
            }
        }
        else
        {
            ok = super(_documentType);
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDataOk</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the state of the _ledgerJournalTrans parameter.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    ///     The transaction detail information pertaining to a journal.
    /// </param>
    /// <returns>
    ///     true if the journal lines are correct; otherwise, false.
    /// </returns>
    protected boolean checkDataOk(LedgerJournalTrans  _ledgerJournalTrans)
    {
        setprefix(strfmt("@SYS25866", _ledgerJournalTrans.Voucher));

        if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Cust)
        {
            return checkFailed(strfmt("@SYS78853", LedgerJournalACType::Cust));
        }

        if (_ledgerJournalTrans.CustTransId   &&
            !CustTrans::find(_ledgerJournalTrans.CustTransId).Approved &&
            (_ledgerJournalTrans.SettleVoucher != SettlementType::None))
        {
            return checkFailed("@SYS3508");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    public boolean checkValues(LedgerJournalTrans  _ledgerJournalTrans = null,
                               RunbaseProgress     _progress           = null)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        AmountMST               paymAmountMST;

        paymAmountMST = _ledgerJournalTrans.calcAmountMST();

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
        {
            return BankAccountTable::checkIsActive(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.TransDate);
        }
        if (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
        {
            return BankAccountTable::checkIsActive(_ledgerJournalTrans.parmOffsetAccount(), _ledgerJournalTrans.TransDate);
        }

        if (paymAmountMST == 0)
        {
            return checkFailed(strfmt("@SYS82275", _ledgerJournalTrans.Voucher));
        }

        if (paymAmountMST > 0 &&
            _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::CustBillOfExchangeRedraw)
        {
            return checkFailed(strfmt("@SYS79383", _ledgerJournalTrans.Voucher));
        }

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::CustBillOfExchangeDraw &&
            _ledgerJournalTrans.ledgerJournalTable().JournalType != LedgerJournalType::CustBillOfExchangeRedraw)
        {
            return checkFailed(strfmt("@SYS74155", LedgerJournalType::CustBillOfExchangeDraw, LedgerJournalType::CustBillOfExchangeRedraw));
        }

        if (Currency::find(_ledgerJournalTrans.CurrencyCode).CurrencyCodeISO != ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::EUR))
        {
            return checkFailed(strfmt("@SYS97202",_ledgerJournalTrans.CurrencyCode));
        }

        ledgerJournalCheckPost   = LedgerJournalCheckPost::newLedgerJournalTrans(_ledgerJournalTrans,
                                                                                 LedgerJournalVoucher::Voucher,
                                                                                 NoYes::No,
                                                                                 NoYes::No,
                                                                                 NoYes::No);

        ledgerJournalCheckPost.parmShowErrorOk(false);
        ledgerJournalCheckPost.parmCheckPaymStatus(false);

        if (_progress)
        {
            ledgerJournalCheckPost.progress(_progress);
        }

        ledgerJournalCheckPost.runOperation();

        return ledgerJournalCheckPost.tableErrorLog() == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>city</Name>
				<Source><![CDATA[
    public AddressCity city()
    {
        return city;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    public void close()
    {
        this.printDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(CustBillOfExchange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The method should return the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c>
    ///    classes.
    /// </summary>
    /// <returns>
    ///    The class ID.
    /// </returns>
    /// <remarks>
    ///    The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(CustOutPaymRecord_BOE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the AOT.
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        dialogCity = dialog.addFieldValue(extendedtypestr(AddressCity), city,"@SYS22249","@SYS97169");
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillNote</Name>
				<Source><![CDATA[
    private void fillNote(LedgerJournalTrans    _ledgerJournalTrans)
    {
        CustTable                   custTableLocal;
        CustBankAccount             custBankAccount;
        AmountCur                   amountCur;
        LogisticsPostalAddress      postalAddress;
        custTableLocal  = CustTable::findByLedgerDimension(_ledgerJournalTrans.parmLedgerDimension());
        custBankAccount = CustBankAccount::find(_ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.CustVendBankAccountId);

        if (_ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::CustBillOfExchangeRedraw)
        {
            amountCur = _ledgerJournalTrans.AmountCurCredit - _ledgerJournalTrans.AmountCurDebit;
        }
        else
        {
            amountCur = _ledgerJournalTrans.AmountCurDebit - _ledgerJournalTrans.AmountCurCredit;
        }

        tmpBankBillOfExchangePrintout.clear();
        tmpBankBillOfExchangePrintout.RecipientName   = custTableLocal.name();
        postalAddress                                 = custTableLocal.postalAddress();
        tmpBankBillOfExchangePrintout.Address         = postalAddress.Address;
        tmpBankBillOfExchangePrintout.CountryRegionId = postalAddress.CountryRegionId;
        tmpBankBillOfExchangePrintout.State           = postalAddress.State;
        tmpBankBillOfExchangePrintout.County          = postalAddress.County;
        tmpBankBillOfExchangePrintout.Street          = postalAddress.Street;
        tmpBankBillOfExchangePrintout.Signature1      = NoYes::No;
        tmpBankBillOfExchangePrintout.Signature2      = NoYes::No;
        tmpBankBillOfExchangePrintout.TransDate       = _ledgerJournalTrans.TransDate;
        tmpBankBillOfExchangePrintout.DueDate         = _ledgerJournalTrans.Due;
        tmpBankBillOfExchangePrintout.AccountId       = accountId;
        tmpBankBillOfExchangePrintout.AmountCur       = amountCur;
        tmpBankBillOfExchangePrintout.AmountTxt       = strfmt('**%1', num2str(-_ledgerJournalTrans.amount(),0,2,0,0));
        tmpBankBillOfExchangePrintout.BankName        = custBankAccount.Name;
        tmpBankBillOfExchangePrintout.RegistrationNum = custBankAccount.RegistrationNum;
        tmpBankBillOfExchangePrintout.CustAccount     = _ledgerJournalTrans.parmAccount();
        tmpBankBillOfExchangePrintout.DocumentNum     = _ledgerJournalTrans.DocumentNum;

        unchecked (Uncheck::TableSecurityPermission)
        {
            tmpBankBillOfExchangePrintout.AccountNum = custBankAccount.AccountNum;
        }

        tmpBankBillOfExchangePrintout.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        this.updateQuery();

        ttsbegin;

        setprefix("@SYS17561");

        while (queryRun.next())
        {
            ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

            if (this.checkValues(ledgerJournalTrans,this.parmProgress()))
            {
                this.output(ledgerJournalTrans);
                outPaymRecordList.addEnd(CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                          ledgerJournalTrans.PaymSpec,
                                                                          this,
                                                                          this.custPaym(ledgerJournalTrans)));
            }
            else
            {
                throw error("@SYS18447");
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        city = dialogCity.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrinterSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the printer settings for the supplied payment document type.
    /// </summary>
    /// <param name = "_documentType">
    ///    The payment document type.
    /// </param>
    /// <returns>
    ///    The printer settings for the supplied payment document type.
    /// </returns>
    public container getPrinterSettings(PaymDocumentType _documentType)
    {
        return super(_documentType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the format to display in the user interface.
    /// </summary>
    /// <returns>
    ///    The name of the format to display in the user interface.
    /// </returns>
    /// <remarks>
    ///    The method must return the name of the format to be displayed in the user interface. Formats
    ///    without an interface name cannot be used in electronic banking as export formats. However, they can
    ///    serve as parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return "@SYS100430";
    }

]]></Source>
			</Method>
			<Method>
				<Name>multipleBankAccountsAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the payment export format is designed to handle payments from more than one bank
    ///    account per media.
    /// </summary>
    /// <returns>
    ///    true if the payment export format is designed to handle payments from multiple bank accounts;
    ///    otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The default value is false. This means that a payment export format generally only handles payments
    ///    from a single bank account.
    /// </remarks>
    public boolean multipleBankAccountsAllowed()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    void open()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    public void output(LedgerJournalTrans _ledgerJournalTrans)
    {
        this.fillNote(_ledgerJournalTrans);
        if (this.checkDataOk(_ledgerJournalTrans))
        {
            _ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
            _ledgerJournalTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, #SysLastValuesList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocument</Name>
				<Source><![CDATA[
    public void printDocument()
    {
        Args    args;

        if (tmpBankBillOfExchangePrintout)
        {
            args = new Args();
            args.caller(this);
            new MenuFunction(menuitemoutputstr(BankBillOfExchange_FR), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBankBillOfExchangePrintout</Name>
				<Source><![CDATA[
    public TmpBankBillOfExchangePrintout tmpBankBillOfExchangePrintout()
    {
        return tmpBankBillOfExchangePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);
        container base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList,base] = packedClass;
                super(base);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;

            default:
            //Nothing needs to be specified here.
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables applying export format specific criteria on the <c>QueryRun</c> class object supplied to
    ///    the class.
    /// </summary>
    protected void updateQuery()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        queryBuildDataSource = queryRun.query().dataSourceTable(tablenum(LedgerJournalTrans));

        queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldnum(LedgerJournalTrans, JournalNum));
        queryBuildRange.value(queryValue(ledgerJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    ///    true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method must validate the state of the internal variables. It is called before closing the
    ///    dialog, and should be called in the <c>run</c> method. It must only contain code that adds warnings
    ///    to the Infolog. The throw command is not allowed within this method. The method should generally
    ///    return errors using the <c>Global::CheckFailed</c> method. Export formats that are designed to
    ///    handle only one method of payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return new CustBillOfExchangeDocument_FR().interfaceName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>