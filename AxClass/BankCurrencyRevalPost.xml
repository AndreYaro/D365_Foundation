<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalPost</c> class handles the actual creation of the posted data for the bank - foreign currency revaluation process.
/// </summary>
internal final class BankCurrencyRevalPost
{
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;
    private BankCurrencyRevalTmp bankCurrencyRevalTmpByDimension;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalTmpInstances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankCurrencyRevalPost</c> class given two populated <c>BankCurrencyRevalTmp</c> table instances.
    /// The first containing the values for the entire bank accounts, and the second containing the values allocated across each ledger dimension.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmp">
    /// A <c>BankCurrencyRevalTmp</c> table buffer containing populated currency revaluation values per bank account.
    /// </param>
    /// <param name = "_bankCurrencyRevalTmpByDimension">
    /// A <c>BankCurrencyRevalTmp</c> table buffer containing populated currency revaluation values per bank account and ledger dimension combination.
    /// </param>
    /// <returns>A new instance of the <c>BankCurrencyRevalPost</c> class.</returns>
    internal static BankCurrencyRevalPost newFromBankCurrencyRevalTmpInstances(BankCurrencyRevalTmp _bankCurrencyRevalTmp, BankCurrencyRevalTmp _bankCurrencyRevalTmpByDimension)
    {
        BankCurrencyRevalPost bankCurrencyRevalPost = new BankCurrencyRevalPost();
        bankCurrencyRevalPost.initialize(_bankCurrencyRevalTmp, _bankCurrencyRevalTmpByDimension);

        return bankCurrencyRevalPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(BankCurrencyRevalTmp _bankCurrencyRevalTmp, BankCurrencyRevalTmp _bankCurrencyRevalTmpByDimension)
    {
        bankCurrencyRevalTmp.useExistingTempDBTable(_bankCurrencyRevalTmp.getPhysicalTableName());
        bankCurrencyRevalTmpByDimension.useExistingTempDBTable(_bankCurrencyRevalTmpByDimension.getPhysicalTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRevaluations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the revaluations to the general ledger, subledger, and creates the necessary revaluation historical records.
    /// </summary>
    /// <returns>true if there were revaluations posted; otherwise, false.</returns>
    internal boolean postRevaluations()
    {
        boolean hasRevaluations;
        int64 revaluationsPosted;
        BankCurrencyRevalLedgerVoucher bankCurrencyRevalLedgerVoucher;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(BankInstrumentationConstants::BankCurrencyRevaluationPostRevaluations, this.getCountOfRevaluations());

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            while select bankCurrencyRevalTmp
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
            {
                BankAccountTable bankAccountTableLocal = BankAccountTable::findByCompany(curExt(), bankCurrencyRevalTmp.BankAccountId);

                if (!BankCurrencyRevalTracking::lockBankAccountProcessingFCR(bankAccountTableLocal.RecId))
                {
                    warning(strFmt("@CashManagement:BankCurrencyRevalRequireLockFailed", bankAccountTableLocal.AccountID));
                    continue;
                }

                if (BankCurrencyRevalHistory::checkIsEligibleForRevaluation(curExt(), bankCurrencyRevalTmp.BankAccountId, bankCurrencyRevalTmp.TransDate))
                {
                    try
                    {
                        // The prefix for an error message needs to be set prior to processing each bank account. If no error occurs, the prefix is never displayed
                        // to the end user. By setting the prefix, our error messages gain the context necessary for users to understand what failed and why.
                        setPrefix(strFmt("@CashManagement:BankCurrencyRevalProcessingError", bankCurrencyRevalTmp.BankAccountId, curExt()));

                        ttsbegin;

                        hasRevaluations = true;

                        bankCurrencyRevalLedgerVoucher = BankCurrencyRevalLedgerVoucher::construct();
                        bankCurrencyRevalLedgerVoucher.addVoucher(bankCurrencyRevalTmp.TransDate);

                        BankCurrencyRevalPostTrans postTrans;
                        BankCurrencyRevalPostLedger postLedger;
                        boolean enhanceFeatureEnabled = FeatureStateProvider::isFeatureEnabled(BankCurrencyRevalEnhancementFeature::instance());

                        while select bankCurrencyRevalTmpByDimension
                            where bankCurrencyRevalTmpByDimension.LegalEntity == bankCurrencyRevalTmp.LegalEntity
                                && bankCurrencyRevalTmpByDimension.BankAccountId == bankCurrencyRevalTmp.BankAccountId
                        {
                            postLedger =
                                BankCurrencyRevalPostLedger::newFromBankCurrencyRevalTmpAndLedgerVoucher(bankCurrencyRevalTmpByDimension, bankCurrencyRevalLedgerVoucher);

                            postLedger.postRevaluations();

                            if (enhanceFeatureEnabled)
                            {
                                postTrans = BankCurrencyRevalPostTrans::newFromBankCurrencyRevalTmpAndLedgerVoucher(bankCurrencyRevalTmpByDimension, bankCurrencyRevalLedgerVoucher);
                                postTrans.createBankAccountTrans();
                            }

                            revaluationsPosted++;
                            progressLogger.trackProgress(revaluationsPosted);
                        }

                        bankCurrencyRevalLedgerVoucher.end();

                        if (!enhanceFeatureEnabled)
                        {
                            postTrans = BankCurrencyRevalPostTrans::newFromBankCurrencyRevalTmpAndLedgerVoucher(bankCurrencyRevalTmp, bankCurrencyRevalLedgerVoucher);
                            postTrans.createBankAccountTrans();
                        }

                        BankCurrencyRevalPostHistory postHistory =
                            BankCurrencyRevalPostHistory::newFromBankCurrencyRevalTmpAndVoucher(bankCurrencyRevalTmp, bankCurrencyRevalLedgerVoucher.getLastVoucher());

                        if (enhanceFeatureEnabled)
                        {
                            postHistory.createBankCurrencyRevalHistoryAfterEnhancementFeatureEnabled();
                        }
                        else
                        {
                            postHistory.createBankCurrencyRevalHistory();
                        }

                        ttscommit;

                    }
                    catch
                    {
                        exceptionTextFallThrough();
                    }
                }
                else
                {
                    warning(strFmt("@CashManagement:BankCurrencyRevalProcessedOnFutureDate", bankCurrencyRevalTmp.BankAccountId, curExt()));
                }

                BankCurrencyRevalTracking::unlockBankAccountProcessingFCR(bankAccountTableLocal.RecId);
            }
        }

        return hasRevaluations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(BankInstrumentationConstants::SourceNameBankCurrencyRevaluation, BankInstrumentationConstants::BankNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfRevaluations</Name>
				<Source><![CDATA[
    private int64 getCountOfRevaluations()
    {
        select count(RecId) from bankCurrencyRevalTmpByDimension;

        return bankCurrencyRevalTmpByDimension.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>