<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMShippingPrintText</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// HMIMShippingPrintText class generates/updates shipping print text for hazardous material.
/// </summary>
public class HMIMShippingPrintText extends HMIMShippingPrintTextBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateShippingPrintTxtLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates shipping print text translations.
    /// </summary>
    /// <param name = "_material">Item material</param>
    internal void generateShippingPrintTxtLanguage(HMIMItemMaterial _material)
    {
        HMIMMaterialTranslation materialTranslation = HMIMMaterialTranslation::findByItemMaterialRecId(_material.RecId);

        HMIMMaterialTranslation::createOrUpdateTranslation(_material.RecId, _material.MaterialDescription);

        ttsbegin;        
        while select LanguageId, MaterialDescription from materialTranslation
            where materialTranslation.Material == _material.RecId
        {
            // If there is a record update it otherwise insert. 
            HMIMItemShipTxtTranslation shipTxtTranslation = HMIMItemShipTxtTranslation::find( _material.RecId, materialTranslation.LanguageId, true);

            HMIMItemMaterialShippingPrintTextSource itemMaterialShippingPrintText = HMIMItemMaterialShippingPrintTextSource::newFromItemMaterial(_material);
            
            if (shipTxtTranslation.RecId)
            {
                shipTxtTranslation.ShippingPrintText = this.generateShippingPrintTxt(itemMaterialShippingPrintText, materialTranslation.MaterialDescription, materialTranslation.LanguageId);
                shipTxtTranslation.update();
            }
            else
            {
                shipTxtTranslation.initValue();
                shipTxtTranslation.Material = _material.RecId;
                shipTxtTranslation.LanguageId = materialTranslation.LanguageId;
                shipTxtTranslation.ShippingPrintText = this.generateShippingPrintTxt(itemMaterialShippingPrintText, materialTranslation.MaterialDescription, materialTranslation.LanguageId);
                shipTxtTranslation.insert();
            }
        }
        ttscommit;
   }

]]></Source>
			</Method>
			<Method>
				<Name>updateShippingPrintTxtLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates shipping print text translations for all items per regulation code
    /// </summary>
    /// <param name = "_regCode">Regulation Code</param>
   internal void updateShippingPrintTxtLanguage(HMIMRegCode _regCode)
   {
        HMIMItemMaterial            itemMaterial;
        HMIMMaterialTranslation     materialTranslation;
        HMIMItemShipTxtTranslation  shipTxtTranslation;
        boolean                     showConfirmation;

        ttsbegin;

        while select itemMaterial
            where itemMaterial.RegCode == _regCode
        join materialTranslation
            where materialTranslation.Material == itemMaterial.RecId
        {
            shipTxtTranslation = HMIMItemShipTxtTranslation::find(itemMaterial.RecId, materialTranslation.LanguageId, true);
            
            if (shipTxtTranslation.RecId)
            {
                HMIMItemMaterialShippingPrintTextSource itemMaterialShippingPrintText = HMIMItemMaterialShippingPrintTextSource::newFromItemMaterial(itemMaterial);

                shipTxtTranslation.ShippingPrintText = this.generateShippingPrintTxt(itemMaterialShippingPrintText, materialTranslation.MaterialDescription, materialTranslation.LanguageId);
                shipTxtTranslation.update();
                showConfirmation = true;
            }
        }

        ttscommit;

        info(showConfirmation ? "@SCM:ItemsUpdated" : "@SCM:NoItemsUpdate");

   }

]]></Source>
			</Method>
			<Method>
				<Name>copyShippingPrintTxtLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies shipping print text translations from material code.
    /// </summary>
    /// <param name = "_material">Item material</param>
    internal void copyShippingPrintTxtLanguage(HMIMItemMaterial _material)
    {    
        HMIMItemShipTxtTranslation shipTxtTranslation;
        HMIMItemMaterialCodeShipTxtTranslation itemMaterialCodeShipTxtTranslation;
        HMIMItemMaterial itemMaterial;

        delete_from shipTxtTranslation
            where shipTxtTranslation.Material == _material.RecId;

        HMIMMaterial material = HMIMMaterial::find(_material.MaterialCode);

        insert_recordset shipTxtTranslation(LanguageId, ShippingPrintText, Material)          
			select LanguageId, ShippingPrintText from itemMaterialCodeShipTxtTranslation
				where itemMaterialCodeShipTxtTranslation.Material == material.RecId
			join RecId from itemMaterial
				where itemMaterial.RecId == _material.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrintTxtByPrintField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is replaceable. It throws error and is the default case for getPrintTxtByPrintField method
    /// </summary>
    /// <param name = "_regPrintSetup">Regulation set up record</param>
    /// <param name = "_material">Item material record</param>
    /// <param name = "_materialDescription">Material description</param>
    [Replaceable, SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected Description255 getDefaultPrintTxtByPrintField(HMIMRegPrintSetup _regPrintSetup,
                                                            HMIMItemMaterial  _material,
                                                            Description255    _materialDescription)
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static HMIMShippingPrintText construct()
    {
        return new HMIMShippingPrintText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPrintTxtByPrintFieldForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultPrintTxtByPrintFieldForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material, Description255 _materialDescription)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultIdentificationTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultIdentificationTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTechnicalNameTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultTechnicalNameTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultClassTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultClassTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDivisionTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultDivisionTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLabelCodeTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultLabelCodeTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPackGroupTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultPackGroupTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTunnelCodeTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultTunnelCodeTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultTransportCategoryTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultTransportCategoryTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultStowageCodeTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultStowageCodeTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultPackDescriptionTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultPackDescriptionTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAirPackingTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultAirPackingTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAirPackingCargoOnlyTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultAirPackingCargoOnlyTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultAirPackingPassengerCargoTxtForMap</Name>
				<Source><![CDATA[
    [SysObsolete('Use the new extension points in HMIMShippingPrintTextBase and HMIMShippingPrintTextSource instead', true, 27\4\2022)]
    protected final Description255 getDefaultAirPackingPassengerCargoTxtForMap(HMIMRegPrintSetup _regPrintSetup, HMIMShippingPrintTextSource _material)
    {
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>