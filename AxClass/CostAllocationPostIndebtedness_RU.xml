<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationPostIndebtedness_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostAllocationPostIndebtedness_RU extends CostAllocationPost_RU
{
    ParmId              parmId;
    List                newSalesLineList;
    List                newPurchLineList;
    List                creditNotePurchLineList;

    LedgerJournalEngine ledgerJournalEngine;
    RefRecId            debtsTransitLedgerDimension;

    Dialog              dialog;
    boolean             factured;
    boolean             creditNoteStorno;
    boolean             createPayment;

    RecordSortedList    factureLedgerJournalList;
    RecordSortedList    factureCustInvoiceJournalList;

    Map                 creditNoteHistoryMap,
                        invoiceHistoryMap,
                        indebetnessHistoryMap,
                        invoice4PaymHistoryMap,
                        costAllocationParmIdMap;

    Set                 endInfologSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addHistoryList</Name>
				<Source><![CDATA[
    protected void addHistoryList(Map _historyList, RecId _sourceRecId, CustVendTrans _custVendTrans)
    {
        if (_historyList.exists(_sourceRecId))
        {
            throw error("@GLS114534");
        }

        _historyList.insert(_sourceRecId, _custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustTaxNoPOInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjust the tax transactions.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of tax transactions.
    /// </param>
    /// <param name="_date">
    /// The trans date of tax transactions.
    /// </param>
    /// <param name="_sourceTableId">
    /// The source table Id of tax transactions.
    /// </param>
    /// <param name="_sourceRecId">
    /// The source record Id of tax transactions.
    /// </param>
    /// <param name="_tableId">
    /// The heading table Id.
    /// </param>
    /// <param name="_recId">
    /// The heading record Id.
    /// </param>
    /// <param name="_qtyOrdered">
    /// Ordered quantity.
    /// </param>
    /// <param name="_qty">
    /// Quantity.
    /// </param>
    protected void adjustTaxNoPOInvoice(Voucher     _voucher,
                                        InvoiceDate _date,
                                        RefTableId  _sourceTableId,
                                        RefRecId    _sourceRecId,
                                        TableId     _tableId,
                                        RecId       _recId,
                                        Qty         _qtyOrdered,
                                        Qty         _qty)
    {
        TaxTrans                taxTrans;

        if (!_qty)
            return;

        if (!_tableId || !_recId)
            return;

        while select SourceRegulateAmountCur, SourceCurrencyCode, TaxCode, TaxDirection from taxTrans
            where  taxTrans.Voucher                 == _voucher
                && taxTrans.TransDate               == _date
                && taxTrans.SourceTableId           == _sourceTableId
                && taxTrans.SourceRecId             == _sourceRecId
                && taxTrans.TaxDirection            != TaxDirection::UseTax
                && taxTrans.TaxOrigin               != TaxOrigin::TaxReversed
                && taxTrans.TaxOrigin               != TaxOrigin::Transfer
                && !taxTrans.TaxAutogenerated
        {
            TaxRegulationAmountCur taxRegulationAmountCur = CurrencyExchangeHelper::amount(_qtyOrdered * taxTrans.SourceRegulateAmountCur / _qty, taxTrans.SourceCurrencyCode);

            if (!taxRegulationAmountCur)
                continue;

            // tax adjustments are stored in the taxWorkRegulation table grouped and summarized by Tax Code.
            // So, an adjustment may already exist.
            TaxWorkRegulation taxWorkRegulation = TaxWorkRegulation::findByTaxCodeTaxDirection(_tableId, _recId, taxTrans.TaxCode, taxTrans.TaxDirection, true);

            taxWorkRegulation.HeadingTableId         = _tableId;
            taxWorkRegulation.HeadingRecId           = _recId;
            taxWorkRegulation.TaxCode                = taxTrans.TaxCode;
            taxWorkRegulation.TaxDirection           = taxTrans.TaxDirection;
            taxWorkRegulation.TaxRegulationAmountCur += taxRegulationAmountCur;
            if (taxWorkRegulation)
            {
                taxWorkRegulation.update();
            }
            else
            {
                taxWorkRegulation.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditNotePurchLine</Name>
				<Source><![CDATA[
    protected Amount createCreditNotePurchLine(PurchTable _purchTable, VendInvoiceTrans _sourceVendInvoiceTrans, Amount _amountCur)
    {
        PurchLine                      purchLineCreditNote;
        PurchLine_W                    purchLineCreditNote_W;
        AmountCur                      amountInclTax;
        PurchLineForeignTradeCategory  purchLineForeignTradeCategory;
        PurchLineOrigin                purchLineOrigin;

        purchLineCreditNote.initFromPurchTable(_purchTable);
        purchLineCreditNote.initFromVendInvoiceTrans(_sourceVendInvoiceTrans);
        purchLineCreditNote.PurchQty      = sign * -purchLineCreditNote.PurchQty;
        purchLineCreditNote.QtyOrdered    = sign * -purchLineCreditNote.QtyOrdered;

        purchLineCreditNote.ItemRefType        = InventRefType::Purch;
        purchLineCreditNote.InventRefId        = _sourceVendInvoiceTrans.PurchID;
        purchLineCreditNote.InventRefTransId   = _sourceVendInvoiceTrans.InventTransId;

        if (_purchTable.InclTax)
        {
            TaxAmount taxAmount = Tax::calcTaxAmount(purchLineCreditNote.TaxGroup,
                                                     purchLineCreditNote.TaxItemGroup,
                                                     _sourceVendInvoiceTrans.InvoiceDate,
                                                     _sourceVendInvoiceTrans.CurrencyCode,
                                                     _amountCur,
                                                     _purchTable.taxModuleType(),
                                                     purchLineCreditNote.PurchQty,
                                                     purchLineCreditNote.PurchUnit,
                                                     purchLineCreditNote.ItemId);
            _amountCur += taxAmount;
        }

        purchLineCreditNote.LineAmount  = sign * CurrencyExchangeHelper::curAmount2CurAmount(_amountCur, _sourceVendInvoiceTrans.CurrencyCode, purchLineCreditNote.CurrencyCode);
        purchLineCreditNote.PurchPrice  = abs(purchLineCreditNote.LineAmount / purchLineCreditNote.PurchQty);
        purchLineCreditNote.LineAmount  = purchLineCreditNote.calcLineAmount();

        if (_sourceVendInvoiceTrans.RecId && purchLineCreditNote.QtyOrdered < 0)
        {
            purchLineCreditNote_W = purchLineCreditNote.purchLine_W();
            purchLineCreditNote_W.RefReturnInvoiceTrans_W = _sourceVendInvoiceTrans.RecId;
            purchLineCreditNote.packPurchLine_W(purchLineCreditNote_W);
        }

        if (purchLineCreditNote.isCategoryBased())
        {
            purchLineCreditNote_W = purchLineCreditNote.purchLine_W();
            purchLineCreditNote_W.InvoiceGTDId_RU      = _sourceVendInvoiceTrans.InvoiceGTDId_RU;
            purchLineCreditNote_W.CountryRegionName_RU = _sourceVendInvoiceTrans.CountryRegionName_RU;
            purchLineCreditNote.packPurchLine_W(purchLineCreditNote_W);
        }

        purchLineCreditNote.createLine(true, false, false, false, false, false);

        if (_purchTable.InclTax)
        {
            amountInclTax = purchLineCreditNote.LineAmount;
        }
        else
        {
            amountInclTax = purchLineCreditNote.LineAmount + Tax::calcTaxAmount(purchLineCreditNote.TaxGroup,
                                                                                purchLineCreditNote.TaxItemGroup,
                                                                                _sourceVendInvoiceTrans.InvoiceDate,
                                                                                purchLineCreditNote.CurrencyCode,
                                                                                purchLineCreditNote.LineAmount,
                                                                                _purchTable.taxModuleType(),
                                                                                purchLineCreditNote.PurchQty,
                                                                                purchLineCreditNote.PurchUnit,
                                                                                purchLineCreditNote.ItemId);
        }

        this.updateInvoiceCreditCopy(purchLineCreditNote, _sourceVendInvoiceTrans);

        creditNotePurchLineList.addEnd(purchLineCreditNote);

        if (purchLineCreditNote.isCategoryBased())
        {
            purchLineForeignTradeCategory.initFromvendInvoiceTrans(_sourceVendInvoiceTrans);
            purchLineForeignTradeCategory.initFromPurchLine(purchLineCreditNote);
            purchLineForeignTradeCategory.insert();
        }

        if (_sourceVendInvoiceTrans.SourceDocumentLine)
        {
            purchLineOrigin.OriginSourceDocumentLine = _sourceVendInvoiceTrans.SourceDocumentLine;
            purchLineOrigin.PurchLineInventTransId   = purchLineCreditNote.InventTransId;
            purchLineOrigin.PurchLineDataAreaId      = purchLineCreditNote.DataAreaId;
            purchLineOrigin.insert();
        }

        return amountInclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustInvoiceTable</Name>
				<Source><![CDATA[
    protected CustInvoiceTable createCustInvoiceTable(VendInvoiceJour           _sourceVendInvoiceJournal,
                                                      TmpCostAllocationBase_RU  _costAllocationBase)
    {
        CustInvoiceTable custInvoiceTableNew;
        CustTable        custTable = CustTable::find(_costAllocationBase.AccountNum);

        // Create invoice header
        custInvoiceTableNew.initFromCustTable(custTable);
        custInvoiceTableNew.InvoiceDate     = costAllocationForm.postingDate();

        DimensionDefault sourceDefaultDimension = _sourceVendInvoiceJournal.DefaultDimension;

        if (_costAllocationBase.AgreementHeaderExt)
        {
            custInvoiceTableNew.AgreementHeaderExt_RU = _costAllocationBase.AgreementHeaderExt;
            custInvoiceTableNew.setAgreement_RU();
        }
        else
        {
            sourceDefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(sourceDefaultDimension);
        }

        custInvoiceTableNew.PostingProfile      = _costAllocationBase.PostingProfile;
        custInvoiceTableNew.DefaultDimension    = custInvoiceTableNew.mergeDimension(custInvoiceTableNew.DefaultDimension, _costAllocationBase.DefaultDimension);
        custInvoiceTableNew.DefaultDimension    = custInvoiceTableNew.mergeDimension(custInvoiceTableNew.DefaultDimension, sourceDefaultDimension);

        // Calculate dates
        custInvoiceTableNew.calcDue();
        custInvoiceTableNew.calcCashDiscDate();

        // Fill in remaining fields for parity with application entered free text invoice
        custInvoiceTableNew.LanguageId = custTable.languageId();
        custInvoiceTableNew.setInvoiceAddress();
        custInvoiceTableNew.CurrencyCode    = _sourceVendInvoiceJournal.CurrencyCode;
        custInvoiceTableNew.ExchRate_W      = _sourceVendInvoiceJournal.ExchRate;

        custInvoiceTableNew.insert();

        if (factureCustInvoiceJournalList)
        {
            factureCustInvoiceJournalList.ins(custInvoiceTableNew);
        }

        return custInvoiceTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistory</Name>
				<Source><![CDATA[
    protected void createHistory()
    {
        CustVendTrans       custVendTrans;

        while select costAllocationBase
            join costAllocationResult
                where costAllocationBase.RecId == costAllocationResult.AllocBaseRecId   &&
                      costAllocationResult.Mark                                         &&
                      costAllocationResult.Amount
        {
            VendInvoiceTrans sourceVendInvoiceTrans = VendInvoiceTrans::findRecId(costAllocationResult.AllocSourceRecId);

            costAllocationHistory.clear();
            costAllocationHistory.AllocationType                = costAllocationForm.parmAllocationType().selection();
            costAllocationHistory.CostAllocationParmId          = costAllocationParmIdMap.lookup(costAllocationResult.AllocSourceRecId);
            costAllocationHistory.CurrencyCode                  = sourceVendInvoiceTrans.CurrencyCode;
            costAllocationHistory.AmountPosted                  = sign * costAllocationResult.Amount;
            costAllocationHistory.AllocatedInvoiceTransRecId    = sourceVendInvoiceTrans.RecId;
            costAllocationHistory.AllocatedInvoiceJourRecId     = costAllocationForm.sourceVendInvoiceJour().RecId;
            costAllocationHistory.VoucherSourceInvoice          = costAllocationForm.sourceVendInvoiceJour().LedgerVoucher;

            costAllocationHistory.CustVend                      = costAllocationBase.CustVend;
            costAllocationHistory.CustVendAccount               = costAllocationBase.AccountNum;

            if (creditNoteHistoryMap.exists(costAllocationResult.AllocSourceRecId))
            {
                custVendTrans                               = creditNoteHistoryMap.lookup(costAllocationResult.AllocSourceRecId);
                costAllocationHistory.CreditNoteTransRecId  = custVendTrans.RecId;
                costAllocationHistory.VoucherCreditNote     = custVendTrans.Voucher;
            }

            if (invoiceHistoryMap.exists(costAllocationResult.AllocSourceRecId))
            {
                custVendTrans                           = invoiceHistoryMap.lookup(costAllocationResult.AllocSourceRecId);
                costAllocationHistory.InvoiceTransRecId = custVendTrans.RecId;
                costAllocationHistory.VoucherInvoice    = custVendTrans.Voucher;
            }

            if (indebetnessHistoryMap.exists(costAllocationResult.AllocBaseRecId))
            {
                custVendTrans                                   = indebetnessHistoryMap.lookup(costAllocationResult.AllocBaseRecId);
                costAllocationHistory.IndebtednessTransRecId    = custVendTrans.RecId;
                costAllocationHistory.VoucherIndebtness         = custVendTrans.Voucher;
                costAllocationHistory.IndebtednessInvoiceId     = custVendTrans.Invoice;
            }

            if (invoice4PaymHistoryMap.exists(costAllocationResult.AllocBaseRecId))
            {
                costAllocationHistory.CustVendInvoice4PaymJourRecId = invoice4PaymHistoryMap.lookup(costAllocationResult.AllocBaseRecId);
            }

            costAllocationHistory.TransDate         = costAllocationForm.postingDate();
            costAllocationHistory.MarkupCode        = sourceVendInvoiceTrans.MarkupCode_RU;

            costAllocationHistory.PostingProfile    = costAllocationBase.PostingProfile;
            costAllocationHistory.DefaultDimension  = costAllocationBase.DefaultDimension;
            costAllocationHistory.EcoResCategory    = costAllocationResult.EcoResCategory;
            costAllocationHistory.insert();

            if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel)
            {
                costAllocationHistory.updateForStornoHistory(costAllocationResult.HistoryAllocRecId);
                setOrigReverseHistory.add([costAllocationResult.HistoryAllocRecId, costAllocationHistory.RecId]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerJournalTable</Name>
				<Source><![CDATA[
    protected LedgerJournalTable createLedgerJournalTable(LedgerJournalTable _sourceLedgerJournalTable)
    {
        LedgerJournalTable ledgerJournalTableNew;

        ledgerJournalTableNew.initFromLedgerJournalTable(_sourceLedgerJournalTable);
        ledgerJournalTableNew.JournalNum = JournalTableData::newTable(ledgerJournalTableNew).nextJournalId();
        ledgerJournalTableNew.insert();

        return ledgerJournalTableNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonPOLine</Name>
				<Source><![CDATA[
    private AmountCur createNonPOLine(VendInvoiceInfoTable _vendInvoiceInfoTable,
                                      VendInvoiceTrans     _sourceVendInvoiceTrans,
                                      Amount               _amountCur,
                                      Sign                 _sign       = sign,
                                      boolean              _creditNote = false)
    {
        VendInvoiceInfoLine                 vendInvoiceInfoLineNew;
        VendInvoiceInfoLine_W               vendInvoiceInfoLine_WNew;
        VendInvoiceLineForeignTradeCategory vendInvoiceLineForeignTradeCategory;
        AmountCur                           amountInclTax;
        TaxAmount                           taxAmount;

        vendInvoiceInfoLineNew.clear();
        vendInvoiceInfoLineNew.initValue();

        vendInvoiceInfoLineNew.ParmId                      = _vendInvoiceInfoTable.ParmId;
        vendInvoiceInfoLineNew.TableRefId                  = _vendInvoiceInfoTable.TableRefId;
        vendInvoiceInfoLineNew.CurrencyCode                = _vendInvoiceInfoTable.CurrencyCode;
        vendInvoiceInfoLineNew.OrderAccount                = _vendInvoiceInfoTable.OrderAccount;
        vendInvoiceInfoLineNew.InvoiceAccount              = _vendInvoiceInfoTable.InvoiceAccount;

        vendInvoiceInfoLineNew.InventDimId                 = _sourceVendInvoiceTrans.InventDimId;
        vendInvoiceInfoLineNew.ItemId                      = _sourceVendInvoiceTrans.ItemId;
        vendInvoiceInfoLineNew.ProcurementCategory         = _sourceVendInvoiceTrans.ProcurementCategory;
        vendInvoiceInfoLineNew.LineNum                     = any2real(_sourceVendInvoiceTrans.PurchaseLineLineNumber);
        vendInvoiceInfoLineNew.Description                 = _sourceVendInvoiceTrans.Name;
        vendInvoiceInfoLineNew.TaxGroup                    = _sourceVendInvoiceTrans.TaxGroup;
        vendInvoiceInfoLineNew.TaxItemGroup                = _sourceVendInvoiceTrans.TaxItemGroup;
        vendInvoiceInfoLineNew.PurchUnit                   = _sourceVendInvoiceTrans.PurchUnit;
        vendInvoiceInfoLineNew.DefaultDimension            = _sourceVendInvoiceTrans.DefaultDimension;
        vendInvoiceInfoLineNew.TransactionCode             = _sourceVendInvoiceTrans.TransactionCode;
        vendInvoiceInfoLineNew.Transport                   = _sourceVendInvoiceTrans.Transport;
        vendInvoiceInfoLineNew.Port                        = _sourceVendInvoiceTrans.Port;
        vendInvoiceInfoLineNew.StatProcId                  = _sourceVendInvoiceTrans.StatProcId;
        vendInvoiceInfoLineNew.IntrastatCommodity          = _sourceVendInvoiceTrans.IntrastatCommodity;
        vendInvoiceInfoLineNew.OrigCountryRegionId         = _sourceVendInvoiceTrans.OrigCountryRegionId;
        vendInvoiceInfoLineNew.OrigStateId                 = _sourceVendInvoiceTrans.OrigStateId;
        vendInvoiceInfoLineNew.DeliveryPostalAddress       = _sourceVendInvoiceTrans.DeliveryPostalAddress;
        vendInvoiceInfoLineNew.DeliveryName                = _sourceVendInvoiceTrans.DeliveryName;
        vendInvoiceInfoLineNew.LineType                    = _sourceVendInvoiceTrans.LineType;
        vendInvoiceInfoLineNew.ReasonTableRef              = _sourceVendInvoiceTrans.ReasonTableRef;
        vendInvoiceInfoLineNew.PurchMarkup                 = _sourceVendInvoiceTrans.PurchMarkup;
        vendInvoiceInfoLineNew.PriceUnit                   = _sourceVendInvoiceTrans.PriceUnit;
        vendInvoiceInfoLineNew.LineDisc                    = _sourceVendInvoiceTrans.LineDisc;
        vendInvoiceInfoLineNew.LinePercent                 = _sourceVendInvoiceTrans.LinePercent;
        vendInvoiceInfoLineNew.MultiLnDisc                 = _sourceVendInvoiceTrans.MultiLnDisc;
        vendInvoiceInfoLineNew.MultiLnPercent              = _sourceVendInvoiceTrans.MultiLnPercent;

        if (_creditNote)
        {
            vendInvoiceInfoLine_WNew = vendInvoiceInfoLineNew.vendInvoiceInfoLine_W();
            vendInvoiceInfoLine_WNew.MarkupCode_RU         = _sourceVendInvoiceTrans.MarkupCode_RU;
            vendInvoiceInfoLineNew.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_WNew);

            vendInvoiceInfoLineNew.ReceiveNow              = _sign * -_sourceVendInvoiceTrans.Qty;

            if (_vendInvoiceInfoTable.InclTax)
            {
                taxAmount = Tax::calcTaxAmount(vendInvoiceInfoLineNew.TaxGroup,
                                               vendInvoiceInfoLineNew.TaxItemGroup,
                                               _sourceVendInvoiceTrans.InvoiceDate,
                                               _sourceVendInvoiceTrans.CurrencyCode,
                                               _amountCur,
                                               TaxModuleType::Purch,
                                               vendInvoiceInfoLineNew.ReceiveNow,
                                               vendInvoiceInfoLineNew.PurchUnit,
                                               vendInvoiceInfoLineNew.ItemId);
                _amountCur += taxAmount;
            }
        }
        else
        {
            vendInvoiceInfoLineNew.TaxGroup           = this.getTaxGroupTransit(_sourceVendInvoiceTrans.TaxGroup, _sourceVendInvoiceTrans.LedgerDimension);
            vendInvoiceInfoLine_WNew = vendInvoiceInfoLineNew.vendInvoiceInfoLine_W();
            vendInvoiceInfoLine_WNew.LedgerDimension_RU = debtsTransitLedgerDimension;
            vendInvoiceInfoLineNew.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_WNew);

            vendInvoiceInfoLineNew.ReceiveNow         = _sign * _sourceVendInvoiceTrans.Qty;

            vendInvoiceInfoLineNew.DefaultDimension   = _vendInvoiceInfoTable.DefaultDimension;
            vendInvoiceInfoLineNew.DefaultDimension   = vendInvoiceInfoLineNew.mergeDimension(vendInvoiceInfoLineNew.DefaultDimension, _sourceVendInvoiceTrans.DefaultDimension);

            if (!_vendInvoiceInfoTable.vendInvoiceInfoTable_RU().AgreementHeaderExt_RU)
            {
                vendInvoiceInfoLineNew.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(vendInvoiceInfoLineNew.DefaultDimension);
            }
        }

        vendInvoiceInfoLineNew.LineAmount = _sign * CurrencyExchangeHelper::curAmount2CurAmount(_amountCur, _sourceVendInvoiceTrans.CurrencyCode, vendInvoiceInfoLineNew.CurrencyCode);
        if (vendInvoiceInfoLineNew.ReceiveNow)
        {
            vendInvoiceInfoLineNew.PurchPrice = abs(vendInvoiceInfoLineNew.LineAmount / vendInvoiceInfoLineNew.ReceiveNow);
        }
        vendInvoiceInfoLineNew.LineAmount = vendInvoiceInfoLineNew.calcLineAmount();

        if (vendInvoiceInfoLineNew.isCategoryBased())
        {
            vendInvoiceInfoLine_WNew = vendInvoiceInfoLineNew.vendInvoiceInfoLine_W();
            vendInvoiceInfoLine_WNew.InvoiceGTDId_RU      = _sourceVendInvoiceTrans.InvoiceGTDId_RU;
            vendInvoiceInfoLine_WNew.CountryRegionName_RU = _sourceVendInvoiceTrans.CountryRegionName_RU;
            vendInvoiceInfoLineNew.packVendInvoiceInfoLine_W(vendInvoiceInfoLine_WNew);
        }

        vendInvoiceInfoLineNew.insert();

        if (vendInvoiceInfoLineNew.isCategoryBased())
        {
            vendInvoiceLineForeignTradeCategory.clear();
            vendInvoiceLineForeignTradeCategory.initValue();

            vendInvoiceLineForeignTradeCategory.VendInvoiceInfoLine = vendInvoiceInfoLineNew.RecId;
            vendInvoiceLineForeignTradeCategory.ngpCodesTable_FR    = _sourceVendInvoiceTrans.ngpCodesTable_FR;

            if (_sourceVendInvoiceTrans.Qty)
            {
                vendInvoiceLineForeignTradeCategory.UnitWeight      = _sourceVendInvoiceTrans.Weight / _sourceVendInvoiceTrans.Qty;
            }

            vendInvoiceLineForeignTradeCategory.insert();
        }

        if (_creditNote)
        {
            if (_vendInvoiceInfoTable.InclTax)
            {
                amountInclTax = vendInvoiceInfoLineNew.LineAmount;
            }
            else
            {
                taxAmount = Tax::calcTaxAmount(vendInvoiceInfoLineNew.TaxGroup,
                                               vendInvoiceInfoLineNew.TaxItemGroup,
                                               _sourceVendInvoiceTrans.InvoiceDate,
                                               vendInvoiceInfoLineNew.CurrencyCode,
                                               vendInvoiceInfoLineNew.LineAmount,
                                               TaxModuleType::Purch,
                                               vendInvoiceInfoLineNew.ReceiveNow,
                                               vendInvoiceInfoLineNew.PurchUnit,
                                               vendInvoiceInfoLineNew.ItemId);

                amountInclTax = vendInvoiceInfoLineNew.LineAmount + taxAmount;
            }

            this.updateNonPOInvoiceCreditCopy(vendInvoiceInfoLineNew, _sourceVendInvoiceTrans);

            creditNotePurchLineList.addEnd(vendInvoiceInfoLineNew);
        }
        else
        {
            newPurchLineList.addEnd(vendInvoiceInfoLineNew);
        }

        return amountInclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonPOTable</Name>
				<Source><![CDATA[
    private VendInvoiceInfoTable createNonPOTable(VendInvoiceInfoTable      _sourceVendInvoiceInfoTable,
                                                  TmpCostAllocationBase_RU  _costAllocationBase,
                                                  VendInvoiceJour           _sourceVendInvoiceJour,
                                                  TransDate                 _invoiceDate)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (_costAllocationBase)
        {
            VendTable vendTable = VendTable::find(_costAllocationBase.AccountNum);

            if (!vendTable)
            {
                throw error(strFmt("@SYS11817", _costAllocationBase.AccountNum));
            }

            if (vendTable.Blocked == CustVendorBlocked::All)
            {
                throw error(strFmt("@SYS1138", _costAllocationBase.AccountNum));
            }

            vendInvoiceInfoTable.clear();
            vendInvoiceInfoTable.initValue();
            vendInvoiceInfoTable.InvoiceAccount = vendTable.AccountNum;
            vendInvoiceInfoTable.defaultRow();

            DimensionDefault sourceDefaultDimension = _sourceVendInvoiceJour.DefaultDimension;

            if (_costAllocationBase.AgreementHeaderExt)
            {
                vendInvoiceInfoTable.initFromPurchAgreementHeader_RU(
                    PurchAgreementHeaderExt_RU::purchAgreementHeader(_costAllocationBase.AgreementHeaderExt));
            }
            else
            {
                sourceDefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(sourceDefaultDimension);
            }

            vendInvoiceInfoTable.PostingProfile    = _costAllocationBase.PostingProfile;
            vendInvoiceInfoTable.DefaultDimension  = vendInvoiceInfoTable.mergeDimension(vendInvoiceInfoTable.DefaultDimension, _costAllocationBase.DefaultDimension);
            vendInvoiceInfoTable.DefaultDimension  = vendInvoiceInfoTable.mergeDimension(vendInvoiceInfoTable.DefaultDimension, sourceDefaultDimension);
            vendInvoiceInfoTable.CurrencyCode      = _sourceVendInvoiceJour.CurrencyCode;
            vendInvoiceInfoTable.FixedExchRate     = NoYes::Yes;
            vendInvoiceInfoTable.ExchRate          = _sourceVendInvoiceJour.ExchRate;
            vendInvoiceInfoTable.ExchRateSecondary = _sourceVendInvoiceJour.ExchRateSecondary;
            vendInvoiceInfoTable.setReportingCurrencyFixedExchangeRateFromAccounting();
        }
        else
        {
            vendInvoiceInfoTable.initFromActiveHeader(_sourceVendInvoiceInfoTable);
        }

        vendInvoiceInfoTable.TransDate     = _invoiceDate;
        vendInvoiceInfoTable.Num           = NumberSeq::newGetNum(VendParameters::numRefVendExternalInvoice_RU()).num();
        vendInvoiceInfoTable.ParmId        = formletterParmData::getNewParmId();
        vendInvoiceInfoTable.ParmJobStatus = ParmJobStatus::Waiting;
        vendInvoiceInfoTable.Ordering      = DocumentStatus::Invoice;

        vendInvoiceInfoTable.insert();

        VendInvoiceInfoSubTable::createFromVendInvoiceInfoTable(vendInvoiceInfoTable);

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchLine</Name>
				<Source><![CDATA[
    protected void createPurchLine(PurchTable       _purchTable,
                                   VendInvoiceTrans _sourceVendInvoiceTrans,
                                   Amount           _amountCur,
                                   Sign             _sign = sign)
    {
        PurchLine                      purchLineNew;
        PurchLineForeignTradeCategory  purchLineForeignTradeCategory;

        purchLineNew.initFromPurchTable(_purchTable);
        purchLineNew.initFromVendInvoiceTrans(_sourceVendInvoiceTrans);

        purchLineNew.PurchQty           = _sign * purchLineNew.PurchQty;
        purchLineNew.QtyOrdered         = _sign * purchLineNew.QtyOrdered;
        purchLineNew.LineAmount         = _sign * CurrencyExchangeHelper::curAmount2CurAmount(_amountCur, _sourceVendInvoiceTrans.CurrencyCode, purchLineNew.CurrencyCode);
        purchLineNew.PurchPrice         = abs(purchLineNew.LineAmount / purchLineNew.PurchQty);
        purchLineNew.TaxGroup           = this.getTaxGroupTransit(_sourceVendInvoiceTrans.TaxGroup, _sourceVendInvoiceTrans.LedgerDimension);
        purchLineNew.LedgerDimension    = debtsTransitLedgerDimension;
        purchLineNew.LineAmount         = purchLineNew.calcLineAmount();

        PurchLine_W purchLineNew_W = purchLineNew.purchLine_W();
        purchLineNew_W.MarkupCode_RU      = '';
        purchLineNew.packPurchLine_W(purchLineNew_W);

        purchLineNew.DefaultDimension   = _purchTable.DefaultDimension;
        purchLineNew.DefaultDimension   = purchLineNew.mergeDimension(purchLineNew.DefaultDimension, _sourceVendInvoiceTrans.DefaultDimension);

        if (!_purchTable.purchTable_RU().AgreementHeaderExt_RU)
        {
            purchLineNew.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(purchLineNew.DefaultDimension);
        }

        if (purchLineNew.isCategoryBased())
        {
            purchLineNew_W = purchLineNew.purchLine_W();
            purchLineNew_W.InvoiceGTDId_RU      = _sourceVendInvoiceTrans.InvoiceGTDId_RU;
            purchLineNew_W.CountryRegionName_RU = _sourceVendInvoiceTrans.CountryRegionName_RU;
            purchLineNew.packPurchLine_W(purchLineNew_W);
        }

        purchLineNew.createLine(true, false, false, false, false, false);

        newPurchLineList.addEnd(purchLineNew);

        if (purchLineNew.isCategoryBased())
        {
            purchLineForeignTradeCategory.initFromvendInvoiceTrans(_sourceVendInvoiceTrans);
            purchLineForeignTradeCategory.initFromPurchLine(purchLineNew);
            purchLineForeignTradeCategory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    protected PurchTable createPurchTable(PurchTable                _purchTable,
                                          TmpCostAllocationBase_RU  _costAllocationBase,
                                          VendInvoiceJour           _sourceVendInvoiceJour)
    {
        VendTable vendTable = VendTable::find(_costAllocationBase.AccountNum);

        if (!vendTable)
        {
            throw error(strFmt("@SYS11817", _costAllocationBase.AccountNum));
        }

        if (vendTable.Blocked == CustVendorBlocked::All)
        {
            throw error(strFmt("@SYS1138",_costAllocationBase.AccountNum));
        }

        _purchTable.clear();
        _purchTable.initValue();

        NumberSeq num = NumberSeq::newGetNum(PurchParameters::numRefPurchId());
        PurchId purchId = num.num();
        if (PurchTable::exist(purchId))
        {
            num.abort();
            checkFailed("@SYS19304");
            checkFailed(strFmt("@SYS24176", purchId));
            throw error("@SYS23020");
        }

        _purchTable.PurchId = purchId;
        num.used();

        _purchTable.initFromVendTable(vendTable);

        DimensionDefault sourceDefaultDimension = _sourceVendInvoiceJour.DefaultDimension;

        if (_costAllocationBase.AgreementHeaderExt)
        {
            _purchTable.initFromPurchAgreementHeader(
                PurchAgreementHeaderExt_RU::purchAgreementHeader(_costAllocationBase.AgreementHeaderExt));
        }
        else
        {
            sourceDefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(sourceDefaultDimension);
        }

        _purchTable.PostingProfile   = _costAllocationBase.PostingProfile;
        _purchTable.DefaultDimension = _purchTable.mergeDimension(_purchTable.DefaultDimension, _costAllocationBase.DefaultDimension);
        _purchTable.DefaultDimension = _purchTable.mergeDimension(_purchTable.DefaultDimension, sourceDefaultDimension);
        _purchTable.PurchaseType     = PurchaseType::Purch;
        _purchTable.CurrencyCode     = _sourceVendInvoiceJour.CurrencyCode;

        _purchTable.insert();

        return _purchTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    protected void createSalesLine(SalesTable       _salesTable,
                                   VendInvoiceTrans _sourceVendInvoiceTrans,
                                   Amount           _amountCur,
                                   EcoResCategoryId _ecoResCategoryId = 0)
    {
        SalesLine                      salesLineNew;
        PurchLine                      purchLineSource;
        SalesLineForeignTradeCategory  salesLineForeignTradeCategory;

        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        salesLineNew.initFromSalesTable(_salesTable);
        purchLineSource.clear();
        purchLineSource.initFromVendInvoiceTrans(_sourceVendInvoiceTrans);
        salesLineNew.initFromPurchLine(purchLineSource);
        salesLineNew.setInventDimIdFromInventDim(purchLineSource.inventDim());

        if (_ecoResCategoryId)
        {
            salesLineNew.initFromItemOrCategory('', _ecoResCategoryId, '');
            salesLineNew.Name = _sourceVendInvoiceTrans.Name;
        }

        salesLineNew.TaxItemGroup    = _sourceVendInvoiceTrans.TaxItemGroup;

        salesLineNew.SalesQty        = sign * _sourceVendInvoiceTrans.Qty;
        salesLineNew.QtyOrdered      = salesLineNew.calcQtyOrdered();
        salesLineNew.LineAmount      = sign * CurrencyExchangeHelper::curAmount2CurAmount(_amountCur, _sourceVendInvoiceTrans.CurrencyCode, salesLineNew.CurrencyCode);
        salesLineNew.SalesPrice      = abs(salesLineNew.LineAmount / salesLineNew.SalesQty);
        salesLineNew.TaxGroup        = this.getTaxGroupTransit(_sourceVendInvoiceTrans.TaxGroup, _sourceVendInvoiceTrans.LedgerDimension);
        salesLineNew.LedgerDimension = debtsTransitLedgerDimension;
        salesLineNew.LineAmount      = salesLineNew.calcLineAmount();

        salesLineNew.DefaultDimension = salesLineNew.mergeDimension(salesLineNew.DefaultDimension, _sourceVendInvoiceTrans.DefaultDimension);
        if (!_salesTable.salesTable_RU().AgreementHeaderExt_RU)
        {
            salesLineNew.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(salesLineNew.DefaultDimension);
        }

        if (salesLineNew.isCategoryBased())
        {
            salesLineNew.InvoiceGTDId_RU      = _sourceVendInvoiceTrans.InvoiceGTDId_RU;
            salesLineNew.CountryRegionName_RU = _sourceVendInvoiceTrans.CountryRegionName_RU;
        }

        salesLineNew.createLine(true, false, false, false, false, false);
        newSalesLineList.addEnd(salesLineNew);

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(_salesTable.TableId, _salesTable.RecId, salesLineNew.TableId, salesLineNew.RecId);
        }
        // </GEEPL>

        if (salesLineNew.isCategoryBased())
        {
            salesLineForeignTradeCategory.ngpCodesTable_FR     = _sourceVendInvoiceTrans.ngpCodesTable_FR;
            if (_sourceVendInvoiceTrans.Qty)
            {
                salesLineForeignTradeCategory.UnitWeight = _sourceVendInvoiceTrans.Weight / _sourceVendInvoiceTrans.Qty;
            }

            salesLineForeignTradeCategory.initFromSalesLine(salesLineNew);
            salesLineForeignTradeCategory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    protected SalesTable createSalesTable(SalesTable                _salesTable,
                                          TmpCostAllocationBase_RU  _costAllocationBase,
                                          VendInvoiceJour           _sourceVendInvoiceJour)
    {
        CustTable custTable = CustTable::find(_costAllocationBase.AccountNum);

        if (!custTable)
        {
            throw error(strFmt("@SYS23020", _costAllocationBase.AccountNum));
        }

        if (custTable.Blocked == CustVendorBlocked::All)
        {
            throw error(strFmt("@SYS7987",_costAllocationBase.AccountNum));
        }

        _salesTable.clear();
        _salesTable.initValue();

        NumberSeq num = NumberSeq::newGetNum(SalesParameters::numRefSalesId());
        SalesId salesId = num.num();
        if (SalesTable::exist(salesId))
        {
            num.abort();
            checkFailed("@SYS55111");
            checkFailed(strFmt("@SYS55112", salesId));
            throw error("@SYS23020");
        }

        _salesTable.SalesId = salesId;
        num.used();

        _salesTable.CustAccount = custTable.AccountNum;
        _salesTable.initFromCustTable();

        DimensionDefault sourceDefaultDimension = _sourceVendInvoiceJour.DefaultDimension;

        if (_costAllocationBase.AgreementHeaderExt)
        {
            _salesTable.initFromSalesAgreementHeader(
                SalesAgreementHeaderExt_RU::salesAgreementHeader(_costAllocationBase.AgreementHeaderExt));
        }
        else
        {
            sourceDefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(sourceDefaultDimension);
        }

        _salesTable.PostingProfile   = _costAllocationBase.PostingProfile;
        _salesTable.DefaultDimension = _salesTable.mergeDimension(_salesTable.DefaultDimension, _costAllocationBase.DefaultDimension);
        _salesTable.DefaultDimension = _salesTable.mergeDimension(_salesTable.DefaultDimension, sourceDefaultDimension);
        _salesTable.SalesType        = SalesType::Sales;
        _salesTable.CurrencyCode     = _sourceVendInvoiceJour.CurrencyCode;
        _salesTable.FixedExchRate    = _sourceVendInvoiceJour.ExchRate;

        _salesTable.insert();

        return _salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFactures</Name>
				<Source><![CDATA[
    protected void deleteFactures(CostAllocationHistory_RU _costAllocationHistory)
    {
        VendTrans           vendTrans;
        CustVendInvoiceJour invoiceJour;

        void deleteFacture(RecordSortedList _list)
        {
            FactureJour_RU          factureJour;
            FactureDelete_Vend_RU   factureDelete_Vend;
            FactureDelete_Cust_RU   factureDelete_Cust;

            while (_list.next(factureJour))
            {
                factureJour.selectForUpdate(true);
                switch (factureJour.Module)
                {
                    case FactureModule_RU::Vend:
                        factureDelete_Vend = new FactureDelete_Vend_RU(factureJour);
                        factureDelete_Vend.parmAllowDeleteCostAllocation(true);
                        factureDelete_Vend.runOperation();
                        break;

                    case FactureModule_RU::Cust:
                        factureDelete_Cust = new FactureDelete_Cust_RU(factureJour);
                        factureDelete_Cust.parmAllowDeleteCostAllocation(true);
                        factureDelete_Cust.runOperation();
                        break;

                    default:
                       throw error (Error::wrongUseOfFunction(funcName()));
                }
            }
        }

        void vendProcess(RecId _recId)
        {
            if (_recId)
            {
                vendTrans   = VendTrans::find(_recId);
                invoiceJour = VendInvoiceJour::findFromVendTrans(vendTrans.Invoice, vendTrans.TransDate, vendTrans.AccountNum);
                deleteFacture(invoiceJour.factureJourSortedList_RU());
            }
        }

        ttsbegin;

        vendProcess(_costAllocationHistory.CreditNoteTransRecId);
        vendProcess(_costAllocationHistory.InvoiceTransRecId);

        if (_costAllocationHistory.CustVend == CustVend_RU::Vend)
        {
            vendProcess(_costAllocationHistory.IndebtednessTransRecId);
        }
        else if (_costAllocationHistory.IndebtednessTransRecId)
        {
            CustTrans custTrans = CustTrans::find(_costAllocationHistory.IndebtednessTransRecId);
            invoiceJour = CustInvoiceJour::findFromCustTrans(custTrans.Invoice, custTrans.TransDate, custTrans.AccountNum);
            deleteFacture(invoiceJour.factureJourSortedList_RU());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureCreate</Name>
				<Source><![CDATA[
    protected void factureCreate(FactureModule_RU       _factureModule,
                                 FactureExternalId_RU   _factureExternalId,
                                 CustVendInvoiceJour    _source)
    {
        OffSessionId_RU             offsessionId;
        RecId                       deliveryPostalAddress;

        OffReportType_RU reportType = _source.creditNote()?
                     (_factureModule == FactureModule_RU::Vend ? OffReportType_RU::VendFactureCreditNote :  OffReportType_RU::CustFactureCreditNote):
                     (_factureModule == FactureModule_RU::Vend ? OffReportType_RU::VendFacture           :  OffReportType_RU::CustFacture);

        if (OfficialsServ_RU::isFeatureEnabled() && _source)
        {
            offSessionId = _source.CustVendInvoiceJour::getOffSessionId_RU();

            if (offSessionId)
            {
                OfficialsTrans_RU::copySessionId(offSessionId,
                                                 offSessionId,
                                                 OffPosition_RU::Director,
                                                 reportType);
                OfficialsTrans_RU::copySessionId(offSessionId,
                                                 offSessionId,
                                                 OffPosition_RU::Accountant,
                                                 reportType);
                // Responsible is created in editLines form
            }
            else
            {
                OfficialsServ_RU offServer = new OfficialsServ_RU();
                offServer.initTableFacture(_factureModule, _source.InvoiceAccount, true, _source.creditNote());
                offsessionId = offServer.newId();
            }
        }

        if (_source.TableId == tableNum(CustInvoiceJour))
        {
            deliveryPostalAddress = _source.DeliveryPostalAddress_RU;
        }
        else
        if (_source.TableId == tableNum(VendInvoiceJour))
        {
            VendInvoiceJour vendInvoiceJour = _source;
            deliveryPostalAddress = vendInvoiceJour.deliveryPostalAddressRecId_RU();
        }

        FactureJourCreate_RU jourCreate = FactureJourCreate_RU::construct(_factureModule);
        FactureEditLinesEngine_RU editLines = FactureEditLinesEngine_RU::construct(jourCreate);
        editLines.insertJour(_source, false);
        jourCreate.initParameters(NoYes::Yes,
                                  NoYes::No,
                                  Printout::After,
                                  NoYes::No,
                                  _factureExternalId,
                                  _source.InvoiceDate,
                                  _source.InvoiceAccount,
                                  _source.CurrencyCode,
                                  FactureType_RU::Invoice,
                                  _source.CustVendInvoiceJour::getConsigneeAccount_RU(),
                                  _source.CustVendInvoiceJour::getConsignorAccount_RU(),
                                  offsessionId,
                                  '',
                                  '',
                                  dateNull(),
                                  deliveryPostalAddress,
                                  _source.InvoiceDate,
                                  _source.NumberSequenceGroupId);

        jourCreate.parmVATOnPayment(_source.CustVendInvoiceJour::getVATOnPayment_RU());
        jourCreate.parmCorrect(_source.CustVendInvoiceJour::getCorrect_RU());

        if (_source.CustVendInvoiceJour::isInventProfileTypeMapped_RU())
        {
            jourCreate.parmInventProfileType(_source.CustVendInvoiceJour::getInventProfileType_RU());
        }

        jourCreate.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureCreateFromCustInvoiceTable</Name>
				<Source><![CDATA[
    protected void factureCreateFromCustInvoiceTable(CustInvoiceTable _custInvoiceTable)
    {
        _custInvoiceTable.reread();
        CustInvoiceJour tmpInvoiceJour = _custInvoiceTable.custInvoiceJour();
        if (tmpInvoiceJour)
        {
            this.factureCreate(FactureModule_RU::Cust, '', tmpInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureCreateFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void factureCreateFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        DictType                dictType;

        _ledgerJournalTrans.reread();

        VendInvoiceAccount invoiceAccount = _ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ?
                                                   _ledgerJournalTrans.parmAccount() : (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend ? _ledgerJournalTrans.parmOffsetAccount() : '');

        if (invoiceAccount)
        {
            VendInvoiceJour tmpInvoiceJour = VendInvoiceJour::findFromVendTransVoucher(_ledgerJournalTrans.Invoice,
                                                                                       _ledgerJournalTrans.Voucher,
                                                                                       _ledgerJournalTrans.TransDate,
                                                                                       invoiceAccount);

            if (tmpInvoiceJour)
            {
               NumberSeq_RU numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(),false,true);
                if (! numberSeq)
                {
                    dictType = new DictType(extendedTypeNum(VendFactureId_RU));
                    warning(strFmt("@SYS53911", dictType.label(), "@SYS25194"));
                    throw error("@GLS106933");
                }
                else
                {
                    if (numberSeq.parmNumTableNum(null).Manual)
                    {
                        dictType = new DictType(extendedTypeNum(VendFactureId_RU));
                        warning(strFmt("@GLS104926", dictType.label(), "@SYS25194"));
                        throw error("@GLS106933");
                    }
                }

                FactureExternalId_RU factureExternalId = numberSeq.num();
                this.factureCreate(FactureModule_RU::Vend, factureExternalId, tmpInvoiceJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroupTransit</Name>
				<Source><![CDATA[
    public TaxGroup getTaxGroupTransit(TaxGroup _taxGroup, RefRecId _ledgerDimension)
    {
        TaxGroupData taxGroupData;

        if (_ledgerDimension == debtsTransitLedgerDimension)
        {
            select firstonly taxGroupData
                where taxGroupData.TaxGroup == _taxGroup &&
                      !taxGroupData.ExemptTax;

            if (!taxGroupData)
            {
                return _taxGroup;
            }
        }

        return TaxGroupHeading::findTaxGroupDebtsTransit_RU(_taxGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAndPostIndebtednessInvoice</Name>
				<Source><![CDATA[
    protected void initAndPostIndebtednessInvoice(RefRecId _allocationBaseRecId)
    {
        PurchTable              purchTable;
        SalesTable              salesTable;
        LedgerJournalTable      ledgerJournalTable;
        VendInvoiceInfoTable    nonPOTable;
        CustInvoiceTable        custInvoiceTable;

        VendInvoiceTrans        sourceVendInvoiceTrans;
        VendInvoiceJour         sourceVendInvoiceJour;

        LedgerJournalTable      sourceLedgerJournalTable;
        LedgerJournalTrans      sourceLedgerJournalTrans, ledgerJournalTransNew;
        CustVendTrans           custVendTrans;
        ExchRate                sourceExchRate;
        ExchrateSecondary       sourceExchRateSecondary;

        newPurchLineList = new List(Types::Record);
        newSalesLineList = new List(Types::Record);

        select costAllocationBase where costAllocationBase.RecId == _allocationBaseRecId;

        switch (costAllocationBase.CustVend)
        {
            case CustVend_RU::Vend:

                while select costAllocationResult
                    where costAllocationResult.AllocBaseRecId == _allocationBaseRecId   &&
                          costAllocationResult.Amount                                   &&
                          costAllocationResult.Mark
                {
                    sourceVendInvoiceTrans  = VendInvoiceTrans::findRecId(costAllocationResult.AllocSourceRecId);
                    sourceVendInvoiceJour   = sourceVendInvoiceTrans.vendInvoiceJour();

                    if (sourceVendInvoiceTrans.PurchID && sourceVendInvoiceJour.PurchaseType == PurchaseType::Purch) //from Purch
                    {
                        if (! purchTable)
                        {
                            purchTable              = this.createPurchTable(purchTable, costAllocationBase, sourceVendInvoiceJour);
                            sourceExchRate          = sourceVendInvoiceJour.ExchRate;
                            sourceExchRateSecondary = sourceVendInvoiceJour.ExchRateSecondary;
                            endInfologSet.add(purchTable);
                        }
                        this.initIndebtednessPurchLine(purchTable, sourceVendInvoiceTrans, costAllocationResult.Amount);
                    }
                    else if (!sourceVendInvoiceTrans.PurchID && sourceVendInvoiceJour.PurchaseType == PurchaseType::Purch) //from NonPO
                    {
                        if (! nonPOTable)
                        {
                            nonPOTable      = this.createNonPOTable(nonPOTable, costAllocationBase, sourceVendInvoiceJour, costAllocationForm.postingDate());
                            endInfologSet.add(nonPOTable);
                        }
                        this.initIndebtednessNonPOLine(nonPOTable, sourceVendInvoiceTrans, costAllocationResult.Amount);
                    }
                    else if (sourceVendInvoiceJour.PurchaseType == PurchaseType::Journal) //from invoice journal
                    {
                        select sourceLedgerJournalTrans
                            where sourceLedgerJournalTrans.Voucher      == sourceVendInvoiceJour.LedgerVoucher &&
                                  sourceLedgerJournalTrans.TransDate    == sourceVendInvoiceJour.InvoiceDate
                            join  sourceLedgerJournalTable
                                where sourceLedgerJournalTable.JournalNum == sourceLedgerJournalTrans.JournalNum;

                        if (!ledgerJournalTable)
                        {
                            ledgerJournalTable = this.createLedgerJournalTable(sourceLedgerJournalTable);
                            if (ledgerJournalTable.OffsetAccountType == LedgerJournalACType::Vend)
                            {
                                ledgerJournalTable.OffsetAccountType        = LedgerJournalACType::Ledger;
                                ledgerJournalTable.OffsetLedgerDimension    = 0;
                                ledgerJournalTable.doUpdate();
                            }

                            endInfologSet.add(ledgerJournalTable);
                        }

                        this.initVendIndebtednessLedgerJournalTrans(ledgerJournalTable, ledgerJournalTransNew, sourceLedgerJournalTrans, costAllocationBase, costAllocationResult.Amount);
                    }
                }

                if (purchTable)
                {
                    this.paymentCreateFromPurchTable(purchTable, newPurchLineList);

                    custVendTrans = this.postVendInvoice(purchTable,
                                                         purchTable.PostingProfile,
                                                         purchTable.purchTable_RU().InventProfileType_RU,
                                                         newPurchLineList,
                                                         costAllocationForm.postingDate(),
                                                         sourceExchRate,
                                                         sourceExchRateSecondary,
                                                         false);

                    this.addHistoryList(indebetnessHistoryMap, grCostAllocationResult.AllocBaseRecId, custVendTrans);
                }
                else if (nonPOTable)
                {
                    custVendTrans = this.postNonPOInvoice(nonPOTable, false);

                    this.addHistoryList(indebetnessHistoryMap, grCostAllocationResult.AllocBaseRecId, custVendTrans);

                    this.paymentCreateFromNonPOInvoice(nonPOTable);
                }
                else if (ledgerJournalTable)
                {
                    LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
                    LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

                    ledgerJournalTransNew.reread();
                    custVendTrans = VendTrans::findVoucherDateType(ledgerJournalTransNew.Voucher, ledgerJournalTransNew.TransDate, ledgerJournalTransNew.TransactionType);
                    this.addHistoryList(indebetnessHistoryMap, grCostAllocationResult.AllocBaseRecId, custVendTrans);

                    this.paymentCreateFromLedgerJournalTable(ledgerJournalTable);
                }
                break;

            case CustVend_RU::Cust :
                while select costAllocationResult
                    where costAllocationResult.AllocBaseRecId == _allocationBaseRecId   &&
                          costAllocationResult.Amount                                   &&
                          costAllocationResult.Mark
                {
                    sourceVendInvoiceTrans  = VendInvoiceTrans::findRecId(costAllocationResult.AllocSourceRecId);
                    sourceVendInvoiceJour   = sourceVendInvoiceTrans.vendInvoiceJour();
                    if (sourceVendInvoiceJour.PurchaseType == PurchaseType::Purch) //from Purch or from NonPO
                    {
                        if (! salesTable.RecId)
                        {
                            salesTable = this.createSalesTable(salesTable, costAllocationBase, sourceVendInvoiceJour);
                            endInfologSet.add(salesTable);
                        }
                        this.initIndebtednessSalesLine(salesTable, sourceVendInvoiceTrans, costAllocationResult.Amount, costAllocationResult.EcoResCategory);
                    }
                    else if (sourceVendInvoiceJour.PurchaseType == PurchaseType::Journal)//from invoice journal
                    {
                        select sourceLedgerJournalTrans
                            where sourceLedgerJournalTrans.Voucher      == sourceVendInvoiceJour.LedgerVoucher &&
                                  sourceLedgerJournalTrans.TransDate    == sourceVendInvoiceJour.InvoiceDate
                            join  sourceLedgerJournalTable
                                where sourceLedgerJournalTable.JournalNum == sourceLedgerJournalTrans.JournalNum;

                        if (!custInvoiceTable.RecId)
                        {
                            custInvoiceTable = this.createCustInvoiceTable(sourceVendInvoiceJour, costAllocationBase);
                            endInfologSet.add(custInvoiceTable);
                        }

                        this.initCustIndebtednessInvoiceLine(custInvoiceTable, sourceLedgerJournalTrans, costAllocationBase, costAllocationResult.Amount);
                    }
                }

                if (salesTable)
                {
                    this.paymentCreateFromSalesTable(salesTable, newSalesLineList);

                    custVendTrans = this.postCustInvoice(salesTable,
                                                         newSalesLineList,
                                                         sign < 0 && creditNoteStorno);

                    this.addHistoryList(indebetnessHistoryMap, grCostAllocationResult.AllocBaseRecId, custVendTrans);
                }

                if (custInvoiceTable)
                {
                    this.paymentCreateFromCustInvoiceTable(custInvoiceTable);

                    CustPostInvoice custPostInvoice = CustPostInvoice::construct(custInvoiceTable,
                                                                                 CustParameters::find().CreditMaxCheck);

                    custPostInvoice.parmStorno_RU(sign < 0 && creditNoteStorno);
                    custPostInvoice.run();
                    custInvoiceTable.reread();
                    custVendTrans = custInvoiceTable.custInvoiceJour().custTrans();
                    this.addHistoryList(indebetnessHistoryMap, grCostAllocationResult.AllocBaseRecId, custVendTrans);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustIndebtednessInvoiceLine</Name>
				<Source><![CDATA[
    protected void initCustIndebtednessInvoiceLine(CustInvoiceTable         _custInvoiceTableNew,
                                                   LedgerJournalTrans       _sourceLedgerJournalTrans,
                                                   TmpCostAllocationBase_RU _costAllocationBase,
                                                   Amount                   _amountCur)
    {
        CustInvoiceLine custInvoiceLineNew;

        custInvoiceLineNew.initFromCustInvoiceTable(_custInvoiceTableNew);

        custInvoiceLineNew.LineNum          = CustInvoiceLine::lastLineNum_W(_custInvoiceTableNew.RecId);
        custInvoiceLineNew.Description      = _sourceLedgerJournalTrans.MarkupCode_RU;
        custInvoiceLineNew.InvoiceTxt       = _sourceLedgerJournalTrans.Txt;
        custInvoiceLineNew.LedgerDimension  = debtsTransitLedgerDimension;

        custInvoiceLineNew.DefaultDimension = custInvoiceLineNew.mergeDimension(custInvoiceLineNew.DefaultDimension, _sourceLedgerJournalTrans.DefaultDimension);
        if (!_custInvoiceTableNew.AgreementHeaderExt_RU)
        {
            custInvoiceLineNew.DefaultDimension = AgreementHeaderExt_RU::clearAgreementDimension(custInvoiceLineNew.DefaultDimension);
        }

        custInvoiceLineNew.TaxItemGroup     = _sourceLedgerJournalTrans.TaxItemGroup;
        custInvoiceLineNew.TaxGroup         = this.getTaxGroupTransit(_sourceLedgerJournalTrans.TaxGroup, debtsTransitLedgerDimension);
        custInvoiceLineNew.ParentRecId      = _custInvoiceTableNew.RecId;

        TaxAmount taxAmount = Tax::calcTaxAmount(_sourceLedgerJournalTrans.TaxGroup,
                                                 _sourceLedgerJournalTrans.TaxItemGroup,
                                                 costAllocationForm.postingDate(),
                                                 _sourceLedgerJournalTrans.CurrencyCode,
                                                 _amountCur,
                                                 TaxModuleType::Sales);

        custInvoiceLineNew.AmountCur = sign * (_amountCur + taxAmount);

        custInvoiceLineNew.Insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIndebtednessNonPOLine</Name>
				<Source><![CDATA[
    private void initIndebtednessNonPOLine(VendInvoiceInfoTable _vendInvoiceInfoTable,
                                           VendInvoiceTrans     _sourceVendInvoiceTrans,
                                           Amount               _amountCur)
    {
        TaxAmount taxAmount = Tax::calcTaxAmount(_sourceVendInvoiceTrans.TaxGroup,
                                       _sourceVendInvoiceTrans.TaxItemGroup,
                                       costAllocationForm.postingDate(),
                                       _sourceVendInvoiceTrans.CurrencyCode,
                                       _amountCur,
                                       TaxModuleType::Purch);

        this.createNonPOLine(_vendInvoiceInfoTable, _sourceVendInvoiceTrans, sign * (_amountCur + taxAmount), sign < 0 ? 1 : -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIndebtednessPurchLine</Name>
				<Source><![CDATA[
    protected void initIndebtednessPurchLine(PurchTable         _purchTable,
                                             VendInvoiceTrans   _sourceVendInvoiceTrans,
                                             Amount             _amountCur)
    {
        TaxAmount taxAmount = Tax::calcTaxAmount(_sourceVendInvoiceTrans.TaxGroup,
                                       _sourceVendInvoiceTrans.TaxItemGroup,
                                       costAllocationForm.postingDate(),
                                       _sourceVendInvoiceTrans.CurrencyCode,
                                       _amountCur,
                                       TaxModuleType::Purch);

        this.createPurchLine(_purchTable, _sourceVendInvoiceTrans, sign * (_amountCur + taxAmount), sign < 0 ? 1 : -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIndebtednessSalesLine</Name>
				<Source><![CDATA[
    protected void initIndebtednessSalesLine(SalesTable         _salesTable,
                                             VendInvoiceTrans   _sourceVendInvoiceTrans,
                                             Amount             _amountCur,
                                             EcoResCategoryId   _ecoResCategoryId = 0)
    {
        TaxAmount taxAmount = Tax::calcTaxAmount(_sourceVendInvoiceTrans.TaxGroup,
                                       _sourceVendInvoiceTrans.TaxItemGroup,
                                       costAllocationForm.postingDate(),
                                       _sourceVendInvoiceTrans.CurrencyCode,
                                       _amountCur,
                                       TaxModuleType::Sales);

        this.createSalesLine(_salesTable, _sourceVendInvoiceTrans, sign * (_amountCur + taxAmount), _ecoResCategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendIndebtednessLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void initVendIndebtednessLedgerJournalTrans(LedgerJournalTable        _ledgerJournalTableNew,
                                                          LedgerJournalTrans        _ledgerJournalTransNew,
                                                          LedgerJournalTrans        _sourceLedgerJournalTrans,
                                                          TmpCostAllocationBase_RU  _costAllocationBase,
                                                          Amount                    _amountCur)
    {
        OfficialsTrans_RU   officialsTrans;

        DictType            dictType;
        LedgerDimensionBase ledgerDimension;

        _ledgerJournalTransNew.clear();
        _ledgerJournalTransNew.data(_sourceLedgerJournalTrans);
        _ledgerJournalTransNew.JournalNum = _ledgerJournalTableNew.JournalNum;

        if (!ledgerJournalEngine)
        {
            ledgerJournalEngine = new LedgerJournalEngine(null);
            ledgerJournalEngine.newJournalActive(LedgerJournalTable::find(_ledgerJournalTableNew.JournalNum), false);
        }

        _ledgerJournalTransNew.Voucher = new JournalVoucherNum(JournalTableData::newTable(_ledgerJournalTableNew)).getNew(false);

        NumberSeq numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendExternalInvoice_RU(),false,true);
        if (!numberSeq)
        {
            dictType = new DictType(extendedTypeNum(VendExternalInvoiceId_RU));
            warning(strFmt("@SYS53911", dictType.label(), "@SYS25194"));
            throw error("@GLS106933");
        }
        else
        {
            if (numberSeq.parmNumTableNum(null).Manual)
            {
                dictType = new DictType(extendedTypeNum(VendExternalInvoiceId_RU));
                warning(strFmt("@GLS104926", dictType.label(), "@SYS25194"));
                throw error("@GLS106933");
            }
        }

        _ledgerJournalTransNew.Invoice = numberSeq.num();

        if (!_ledgerJournalTransNew.AcknowledgementDate)
        {
            _ledgerJournalTransNew.AcknowledgementDate = _ledgerJournalTransNew.TransDate;
        }

        _ledgerJournalTransNew.Approved = _sourceLedgerJournalTrans.Approved;
        _ledgerJournalTransNew.Approver = HcmWorker::userId2Worker(curUserId());

        ledgerJournalEngine.paymentModified(_ledgerJournalTransNew);

        if (_sourceLedgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
        {
            _ledgerJournalTransNew.AccountType     = LedgerJournalACType::Ledger;
            ledgerDimension                        = LedgerDimensionFacade::serviceCreateLedgerDimension(debtsTransitLedgerDimension, _costAllocationBase.DefaultDimension);
            _ledgerJournalTransNew.LedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(ledgerDimension, _ledgerJournalTransNew.LedgerDimension);

            _ledgerJournalTransNew.parmOffsetAccount(_costAllocationBase.AccountNum);

            if (_costAllocationBase.AgreementHeaderExt)
            {
                _ledgerJournalTransNew.OffsetAccountAgreementId_RU = AgreementHeaderExt_RU::find(_costAllocationBase.AgreementHeaderExt).AgreementId;
            }
            else
            {
                _ledgerJournalTransNew.OffsetAccountAgreementId_RU = '';
            }
            ledgerJournalEngine.setAgreement_RU(_ledgerJournalTransNew, AccountOffsetaccount::OffsetAccount);

            _ledgerJournalTransNew.OffsetDefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_costAllocationBase.DefaultDimension, _ledgerJournalTransNew.OffsetDefaultDimension);

            _ledgerJournalTransNew.OffsetPostingProfile_RU = _costAllocationBase.PostingProfile;
        }
        else if (_sourceLedgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            _ledgerJournalTransNew.parmAccount(_costAllocationBase.AccountNum);
           ledgerJournalEngine.accountModified(_ledgerJournalTransNew);

            _ledgerJournalTransNew.OffsetAccountType     = LedgerJournalACType::Ledger;
            ledgerDimension                              = LedgerDimensionFacade::serviceCreateLedgerDimension(debtsTransitLedgerDimension, _costAllocationBase.DefaultDimension);
            _ledgerJournalTransNew.OffsetLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(ledgerDimension, _ledgerJournalTransNew.OffsetLedgerDimension);

            if (_costAllocationBase.AgreementHeaderExt)
            {
                _ledgerJournalTransNew.AccountAgreementId_RU = AgreementHeaderExt_RU::find(_costAllocationBase.AgreementHeaderExt).AgreementId;
            }
            else
            {
                _ledgerJournalTransNew.AccountAgreementId_RU = '';
            }
            ledgerJournalEngine.setAgreement_RU(_ledgerJournalTransNew);

            _ledgerJournalTransNew.DefaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(_costAllocationBase.DefaultDimension, _ledgerJournalTransNew.DefaultDimension);

            _ledgerJournalTransNew.PostingProfile = _costAllocationBase.PostingProfile;
        }
        else
        {
            throw error("@GLS114535");
        }

        _ledgerJournalTransNew.TaxGroup      = _sourceLedgerJournalTrans.TaxGroup;
        _ledgerJournalTransNew.TaxItemGroup  = _sourceLedgerJournalTrans.TaxItemGroup;
        _ledgerJournalTransNew.modifyVatDueDate_W();

        if (!_ledgerJournalTransNew.ReverseEntry)
        {
            _ledgerJournalTransNew.ReverseEntry = _ledgerJournalTableNew.ReverseEntry;
            _ledgerJournalTransNew.ReverseDate  = _ledgerJournalTableNew.ReverseDate;
        }

        TaxAmount taxAmount = Tax::calcTaxAmount(_sourceLedgerJournalTrans.TaxGroup,
                                                 _sourceLedgerJournalTrans.TaxItemGroup,
                                                 costAllocationForm.postingDate(),
                                                 _sourceLedgerJournalTrans.CurrencyCode,
                                                 _amountCur,
                                                 TaxModuleType::Purch);

        AmountCur amountInclTax = _amountCur + taxAmount;

        if (sign > 0)
        {
            _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurCredit ? 0 : amountInclTax;
            _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurDebit  ? 0 : amountInclTax;
        }
        else
        {
            _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurDebit   ? 0 : amountInclTax;
            _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurCredit  ? 0 : amountInclTax;
        }

        _ledgerJournalTransNew.CurrencyCode     = _sourceLedgerJournalTrans.CurrencyCode;
        _ledgerJournalTransNew.ExchRate         = _sourceLedgerJournalTrans.ExchRate;
        _ledgerJournalTransNew.ExchRateSecond   = _sourceLedgerJournalTrans.ExchRateSecond;
        _ledgerJournalTransNew.Triangulation    = _sourceLedgerJournalTrans.Triangulation;

        _ledgerJournalTransNew.TaxGroup         = this.getTaxGroupTransit(_sourceLedgerJournalTrans.TaxGroup, debtsTransitLedgerDimension);
        _ledgerJournalTransNew.TransDate        = costAllocationForm.postingDate();

        if (_sourceLedgerJournalTrans.OffSessionId_RU)
        {
            _ledgerJournalTransNew.OffSessionId_RU = new OfficialsServ_RU().newId();

            while select officialsTrans
                where officialsTrans.OffSessionId == _sourceLedgerJournalTrans.OffSessionId_RU
            {
                OfficialsTrans_RU officialTransNew = officialsTrans.data();
                officialTransNew.OffSessionId = _ledgerJournalTransNew.OffSessionId_RU;
                officialTransNew.insert();
            }
        }

        _ledgerJournalTransNew.doInsert();

        if (factureLedgerJournalList)
        {
            factureLedgerJournalList.ins(_ledgerJournalTransNew);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCreateFromCustInvoiceTable</Name>
				<Source><![CDATA[
    protected void paymentCreateFromCustInvoiceTable(CustInvoiceTable _custInvoiceTable)
    {
        if (!createPayment)
        {
            return;
        }

        CustPostInvoice4Paym_RU custPostInvoice4Paym_RU = CustPostInvoice4Paym_RU::construct();
        custPostInvoice4Paym_RU.getLast();
        custPostInvoice4Paym_RU.updateQueryBuild(_custInvoiceTable);
        custPostInvoice4Paym_RU.parmInvoiceAccount(_custInvoiceTable.InvoiceAccount);
        custPostInvoice4Paym_RU.initOfficials();
        custPostInvoice4Paym_RU.runOperation();

        invoice4PaymHistoryMap.insert(grCostAllocationResult.AllocBaseRecId, custPostInvoice4Paym_RU.getFirstJournal().RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCreateFromLedgerJournalTable</Name>
				<Source><![CDATA[
    protected void paymentCreateFromLedgerJournalTable(LedgerJournalTable   _ledgerJournalTable)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        VendInvoice4PaymJour_RU     invoice4PaymJour;
        VendInvoice4PaymTrans_RU    invoice4PaymTrans;
        VendInvoiceJour             vendInvoiceJour;
        VendInvoiceTrans            vendInvoiceTrans;
        DictType                    dictType;
        PurchParmTable              purchParmTable;

        if (!createPayment)
        {
            return;
        }

        purchParmTable.Ordering = DocumentStatus::Invoice4Paym_RU;
        NumberSeq numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendInvoice4PaymId_RU(),false,true);
        if (!numberSeq)
        {
            dictType = new DictType(extendedTypeNum(VendInvoice4PaymId_RU));
            warning(strFmt("@SYS53911", dictType.label(), "@SYS25194"));
            throw error("@GLS106933");
        }
        else
        {
            if (numberSeq.parmNumTableNum(null).Manual)
            {
                dictType = new DictType(extendedTypeNum(VendInvoice4PaymId_RU));
                warning(strFmt("@GLS104926", dictType.label(), "@SYS25194"));
                throw error("@GLS106933");
            }
        }

        while select Voucher, TransDate from ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
        {
            select vendInvoiceJour
                where vendInvoiceJour.PurchaseType  == PurchaseType::Journal &&
                      vendInvoiceJour.LedgerVoucher == ledgerJournalTrans.Voucher &&
                      vendInvoiceJour.InvoiceDate   == ledgerJournalTrans.TransDate;

            LineNum lineNum = 0;

            invoice4PaymJour.clear();
            invoice4PaymJour.initValue();

            invoice4PaymJour.Invoice4PaymId = numberSeq.num();

            invoice4PaymJour.initFromVendInvoiceJour(vendInvoiceJour);

            purchParmTable.InvoiceAccount   = vendInvoiceJour.InvoiceAccount;
            OfficialsServ_RU offSrv = new OfficialsServ_RU();
            offSrv.initTablePurch(purchParmTable, null, true);
            invoice4PaymJour.OffSessionId = offSrv.newId();

            invoice4PaymJour.insert();

            while select vendInvoiceTrans
                where vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId &&
                      vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate &&
                      vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup &&
                      vendInvoiceTrans.InternalInvoiceId    == vendInvoiceJour.InternalInvoiceId
            {
                lineNum++;

                invoice4PaymTrans.initFromVendInvoice4PaymJour(invoice4PaymJour);
                invoice4PaymTrans.initFromVendInvoiceTrans(vendInvoiceTrans);
                invoice4PaymTrans.setLineNum(lineNum);

                invoice4PaymTrans.insert();
            }

           invoice4PaymHistoryMap.insert(grCostAllocationResult.AllocBaseRecId, invoice4PaymJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCreateFromNonPOInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create payment from non PO invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The record of <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <exception cref="Exception::Error">
    /// if a number sequence has not been set up.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If incorrect initialization of number sequence.
    /// </exception>
    protected void paymentCreateFromNonPOInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        VendInvoice4PaymJour_RU     invoice4PaymJour;
        VendInvoice4PaymTrans_RU    invoice4PaymTrans;
        VendInvoiceJour             vendInvoiceJour;
        VendInvoiceTrans            vendInvoiceTrans;
        DictType                    dictType;
        PurchParmTable              purchParmTable;

        if (!createPayment)
        {
            return;
        }

        purchParmTable.Ordering = DocumentStatus::Invoice4Paym_RU;
        NumberSeq numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendInvoice4PaymId_RU(),false,true);
        if (!numberSeq)
        {
            dictType = new DictType(extendedTypeNum(VendInvoice4PaymId_RU));
            warning(strFmt("@SYS53911", dictType.label(), "@SYS25194"));
            throw error("@GLS106933");
        }
        else
        {
            if (numberSeq.parmNumTableNum(null).Manual)
            {
                dictType = new DictType(extendedTypeNum(VendInvoice4PaymId_RU));
                warning(strFmt("@GLS104926", dictType.label(), "@SYS25194"));
                throw error("@GLS106933");
            }
        }

        select firstOnly vendInvoiceJour
            where vendInvoiceJour.ParmId == _vendInvoiceInfoTable.ParmId;

        if (vendInvoiceJour)
        {
            LineNum lineNum = 0;

            invoice4PaymJour.clear();
            invoice4PaymJour.initValue();

            invoice4PaymJour.Invoice4PaymId = numberSeq.num();

            invoice4PaymJour.initFromVendInvoiceJour(vendInvoiceJour);

            purchParmTable.InvoiceAccount   = vendInvoiceJour.InvoiceAccount;
            OfficialsServ_RU offSrv = new OfficialsServ_RU();
            offSrv.initTablePurch(purchParmTable, null, true);
            invoice4PaymJour.OffSessionId = offSrv.newId();

            invoice4PaymJour.insert();

            while select vendInvoiceTrans
                where vendInvoiceTrans.InvoiceId            == vendInvoiceJour.InvoiceId &&
                      vendInvoiceTrans.InvoiceDate          == vendInvoiceJour.InvoiceDate &&
                      vendInvoiceTrans.NumberSequenceGroup  == vendInvoiceJour.NumberSequenceGroup &&
                      vendInvoiceTrans.InternalInvoiceId    == vendInvoiceJour.InternalInvoiceId
            {
                lineNum++;

                invoice4PaymTrans.initFromVendInvoice4PaymJour(invoice4PaymJour);
                invoice4PaymTrans.initFromVendInvoiceTrans(vendInvoiceTrans);
                invoice4PaymTrans.setLineNum(lineNum);

                invoice4PaymTrans.insert();
            }

           invoice4PaymHistoryMap.insert(grCostAllocationResult.AllocBaseRecId, invoice4PaymJour.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCreateFromPurchTable</Name>
				<Source><![CDATA[
    protected void paymentCreateFromPurchTable(PurchTable   _purchTable,
                                               List         _sourcePurchLineList)
    {
        VendInvoice4PaymJour_RU vendInvoice4PaymJour;

        if (!createPayment)
        {
            return;
        }

        PurchFormLetter purchFormLetter = PurchFormLetter::construct(DocumentStatus::Invoice4Paym_RU);
        purchFormLetter.parmLineList(_sourcePurchLineList.pack());
        purchFormLetter.createFromLines(true);

        purchFormLetter.update(
            _purchTable,
            NumberSeq::newGetNum(VendParameters::numRefVendInvoice4PaymId_RU(), false, true).num(),
            costAllocationForm.postingDate(),
            PurchUpdate::All,
            AccountOrder::None,
            false,
            false,
            false,
            false);

        select firstonly RecId from vendInvoice4PaymJour
            where vendInvoice4PaymJour.ParmId == purchFormLetter.parmId();

        invoice4PaymHistoryMap.insert(grCostAllocationResult.AllocBaseRecId, vendInvoice4PaymJour.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentCreateFromSalesTable</Name>
				<Source><![CDATA[
    protected void paymentCreateFromSalesTable(SalesTable   _salesTable,
                                               List         _sourceSalesLineList)
    {
        CustInvoice4PaymJour_RU custInvoice4PaymJour;

        if (!createPayment)
        {
            return;
        }

        SalesFormLetter salesFormLetter = SalesFormLetter::construct(DocumentStatus::Invoice4Paym_RU);
        salesFormLetter.createFromLines(true);
        salesFormLetter.parmLineList(_sourceSalesLineList.pack());

        salesFormLetter.update(
            _salesTable,
            costAllocationForm.postingDate(),
            SalesUpdate::All,
            AccountOrder::None,
            false,
            false,
            false,
            false);

        select firstonly RecId from custInvoice4PaymJour
            where custInvoice4PaymJour.ParmId == salesFormLetter.parmId();

        invoice4PaymHistoryMap.insert(grCostAllocationResult.AllocBaseRecId, custInvoice4PaymJour.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCustInvoice</Name>
				<Source><![CDATA[
    protected CustTrans postCustInvoice(SalesTable              _salesTable,
                                        List                    _sourceSalesLineList,
                                        boolean                 _storno)
    {
        CustInvoiceJour             custInvoiceJour;

        SalesFormLetter::construct(DocumentStatus::Confirmation).update(_salesTable, costAllocationForm.postingDate());

        SalesFormLetter salesFormLetter = SalesFormLetter::construct(DocumentStatus::Invoice);
        salesFormLetter.reArrangeNow(false);
        salesFormLetter.createFromLines(true);
        salesFormLetter.parmLineList(_sourceSalesLineList.pack());

        salesFormLetter.update(
            _salesTable,
            costAllocationForm.postingDate(),
            SalesUpdate::All,
            AccountOrder::None,
            false,
            false,
            false,
            false,
            conNull(),
            _storno,
            false);

        select firstonly custInvoiceJour
            where custInvoiceJour.ParmId == salesFormLetter.parmId();

        if (factured)
        {
            OffReportType_RU reportType = custInvoiceJour.creditNote()             ?
                         OffReportType_RU::CustFactureCreditNote :
                         OffReportType_RU::CustFacture;

            CustInvoiceJour_RU custInvoiceJourRU = custInvoiceJour.custInvoiceJour_RU();
            CustInvoiceJour_Officials custInvoiceJour_Officials = custInvoiceJour.custInvoiceJour_Officials();

            if (OfficialsServ_RU::isFeatureEnabled() &&
                custInvoiceJour                       &&
                custInvoiceJour_Officials.OffSessionId)
            {
                OfficialsTrans_RU::copySessionId(custInvoiceJour_Officials.OffSessionId,
                                                 custInvoiceJour_Officials.OffSessionId,
                                                 OffPosition_RU::Director,
                                                 reportType);

                OfficialsTrans_RU::copySessionId(custInvoiceJour_Officials.OffSessionId,
                                                 custInvoiceJour_Officials.OffSessionId,
                                                 OffPosition_RU::Accountant,
                                                 reportType);
            }

            FactureJourCreate_RU jourCreate = FactureJourCreate_RU::construct(FactureModule_RU::Cust);
            FactureEditLinesEngine_RU editLines = FactureEditLinesEngine_RU::construct(jourCreate);
            editLines.insertJour(custInvoiceJour, false);

            jourCreate.initParameters(true,
                                      false,
                                      Printout::After,
                                      custInvoiceJourRU.PrintStandardCurrency_RU,
                                      '',
                                      custInvoiceJour.InvoiceDate,
                                      custInvoiceJour.InvoiceAccount,
                                      custInvoiceJour.CurrencyCode,
                                      FactureType_RU::Invoice,
                                      custInvoiceJourRU.ConsigneeAccount_RU,
                                      custInvoiceJourRU.ConsignorAccount_RU,
                                      custInvoiceJour_Officials.OffSessionId,
                                      custInvoiceJourRU.AttorneyId_RU,
                                      custInvoiceJourRU.AttorneyIssuedName_RU,
                                      custInvoiceJourRU.AttorneyDate_RU,
                                      custInvoiceJour.DeliveryPostalAddress,
                                      custInvoiceJour.InvoiceDate,
                                      custInvoiceJour.NumberSequenceGroup);

            jourCreate.parmPrinterSettings(salesFormLetter.printerSettingsFormletter());
            jourCreate.parmLanguageId(custInvoiceJour.LanguageId);
            jourCreate.parmVATOnPayment(custInvoiceJourRU.VATOnPayment_RU);
            jourCreate.parmCorrect(custInvoiceJourRU.Correct_RU);
            jourCreate.parmExportProcessing(custInvoiceJour.isExportInvoice_RU());
            jourCreate.parmInventProfileType(custInvoiceJourRU.InventProfileType_RU);
            jourCreate.runOperation();
        }

        return custInvoiceJour.custTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNonPOInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post non PO invoice.
    /// </summary>
    /// <param name="_vendInvoiceInfoTable">
    /// The record of <c>VendInvoiceInfoTable</c> table.
    /// </param>
    /// <param name="_storno">
    /// A Boolean value that indicates whether post as storno.
    /// </param>
    /// <returns>
    /// The record of <c>VendTrans</c> table.
    /// </returns>
    protected VendTrans postNonPOInvoice(VendInvoiceInfoTable _vendInvoiceInfoTable, boolean _storno)

    {
        VendInvoiceJour           vendInvoiceJour;

        PurchFormLetter_Invoice purchFormLetter = PurchFormLetter_Invoice::newInvoice();
        purchFormLetter.reArrangeNow(false);

        purchFormLetter.parmId(_vendInvoiceInfoTable.ParmId);
        purchFormLetter.initNewPurchParmUpdate();
        purchFormLetter.parmParmTableNum(NumberSeq::newGetNum(VendParameters::numRefVendExternalInvoice_RU()).num());

        PurchParmUpdate purchParmUpdate = purchFormLetter.purchParmUpdate();
        if (purchParmUpdate)
        {
            purchParmUpdate.selectForUpdate(true);
            purchParmUpdate.Storno = _storno;
            purchParmUpdate.SumNum = purchFormLetter.parmParmTableNum();
            purchParmUpdate.update();

            purchFormLetter.purchParmUpdate(purchParmUpdate);
        }

        purchFormLetter.run();

        select firstonly vendInvoiceJour
            where vendInvoiceJour.ParmId == purchFormLetter.parmId();

        if (factured)
        {
            OffReportType_RU reportType = vendInvoiceJour.creditNote()             ?
                         OffReportType_RU::VendFactureCreditNote :
                         OffReportType_RU::VendFacture;

            if (OfficialsServ_RU::isFeatureEnabled() && vendInvoiceJour)
            {
                OfficialsTrans_RU::copySessionId(vendInvoiceJour.OffsessionId_RU,
                                                 vendInvoiceJour.OffsessionId_RU,
                                                 OffPosition_RU::Director,
                                                 reportType);
                OfficialsTrans_RU::copySessionId(vendInvoiceJour.OffsessionId_RU,
                                                 vendInvoiceJour.OffsessionId_RU,
                                                 OffPosition_RU::Accountant,
                                                 reportType);
            }

            FactureJourCreate_RU jourCreate = FactureJourCreate_RU::construct(FactureModule_RU::Vend);
            FactureEditLinesEngine_RU editLines = FactureEditLinesEngine_RU::construct(jourCreate);
            editLines.insertJour(vendInvoiceJour, false);

            jourCreate.initParameters(true,
                                      false,
                                      Printout::After,
                                      false,
                                      NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(),false,true).num(),
                                      vendInvoiceJour.InvoiceDate,
                                      vendInvoiceJour.InvoiceAccount,
                                      vendInvoiceJour.CurrencyCode,
                                      FactureType_RU::Invoice,
                                      vendInvoiceJour.ConsigneeAccount_RU,
                                      vendInvoiceJour.ConsignorAccount_RU,
                                      vendInvoiceJour.OffsessionId_RU,
                                      '',
                                      '',
                                      dateNull(),
                                      vendInvoiceJour.deliveryPostalAddressRecId_RU(),
                                      vendInvoiceJour.InvoiceDate,
                                      vendInvoiceJour.NumberSequenceGroup);

            jourCreate.parmPrinterSettings(purchFormLetter.printerSettingsFormletter());
            jourCreate.parmVATOnPayment(vendInvoiceJour.vatOnPayment_RU);
            jourCreate.parmCorrect(vendInvoiceJour.Correct_RU);
            jourCreate.parmInventProfileType(vendInvoiceJour.InventProfileType_RU);
            jourCreate.runOperation();
        }

        return vendInvoiceJour.vendTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendInvoice</Name>
				<Source><![CDATA[
    protected VendTrans postVendInvoice(PurchTable              _purchTable,
                                        PostingProfile          _postingProfile,
                                        InventProfileType_RU    _inventProfileType,
                                        List                    _sourcePurchLineList,
                                        InvoiceDate             _invoiceDate,
                                        ExchRate                _exchRate,
                                        ExchRateSecondary       _exchRateSecondary,
                                        boolean                 _storno,
                                        CorrectedInvoiceId_RU   _correctedInvoiceId = '')

    {
        #ISOCountryRegionCodes

        VendInvoiceJour             vendInvoiceJour;

        VendInvoiceInfoTable        vendInvoiceInfoTable;

        PurchFormLetter::construct(DocumentStatus::PurchaseOrder).update(_purchTable, '', _invoiceDate);

        PurchFormLetter_Invoice purchFormLetter = PurchFormLetter::construct(DocumentStatus::Invoice);
        purchFormLetter.reArrangeNow(false);

        purchFormLetter.parmLineList(_sourcePurchLineList.pack());
        purchFormLetter.createFromLines(true);

        purchFormLetter.purchTable(_purchTable);
        purchFormLetter.parmParmTableNum(NumberSeq::newGetNum(VendParameters::numRefVendExternalInvoice_RU()).num());
        purchFormLetter.transDate(_invoiceDate);
        purchFormLetter.specQty(PurchUpdate::All);

        PurchParmUpdate purchParmUpdate = purchFormLetter.purchParmUpdate();
        purchFormLetter.initParameters(purchParmUpdate, Printout::Current);
        purchFormLetter.chooseLines(true);

        purchParmUpdate = PurchParmUpdate::find(purchFormLetter.parmId(), true);
        if (purchParmUpdate)
        {
            purchParmUpdate.selectForUpdate(true);
            purchParmUpdate.Storno = _storno;
            purchParmUpdate.SumNum = purchFormLetter.parmParmTableNum();
            purchParmUpdate.update();

            purchFormLetter.purchParmUpdate(purchParmUpdate);
        }

        select firstOnly forUpdate vendInvoiceInfoTable
            where vendInvoiceInfoTable.ParmId == purchFormLetter.parmId()
               && vendInvoiceInfoTable.PurchId == _purchTable.PurchId;
        if (vendInvoiceInfoTable)
        {
            vendInvoiceInfoTable.FixedExchRate        = NoYes::Yes;
            vendInvoiceInfoTable.ExchRate             = _exchRate;
            vendInvoiceInfoTable.ExchRateSecondary    = _exchRateSecondary;
            vendInvoiceInfoTable.setReportingCurrencyFixedExchangeRateFromAccounting();

            VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU = vendInvoiceInfoTable.vendInvoiceInfoTable_RU();
            vendInvoiceInfoTable_RU.InventProfileType_RU = _inventProfileType;
            vendInvoiceInfoTable_RU.CorrectedInvoiceId_RU = _correctedInvoiceId;
            vendInvoiceInfoTable.packVendInvoiceInfoTable_RU(vendInvoiceInfoTable_RU);

            vendInvoiceInfoTable.PostingProfile       = _postingProfile;
            vendInvoiceInfoTable.update();
        }

        purchFormLetter.run();

        select firstonly vendInvoiceJour
            where vendInvoiceJour.ParmId == purchFormLetter.parmId();

        if (factured)
        {
            OffReportType_RU reportType = vendInvoiceJour.creditNote()             ?
                         OffReportType_RU::VendFactureCreditNote :
                         OffReportType_RU::VendFacture;

            if (OfficialsServ_RU::isFeatureEnabled() && vendInvoiceJour)
            {
                OfficialsTrans_RU::copySessionId(vendInvoiceJour.OffsessionId_RU,
                                                 vendInvoiceJour.OffsessionId_RU,
                                                 OffPosition_RU::Director,
                                                 reportType);
                OfficialsTrans_RU::copySessionId(vendInvoiceJour.OffsessionId_RU,
                                                 vendInvoiceJour.OffsessionId_RU,
                                                 OffPosition_RU::Accountant,
                                                 reportType);
            }

            FactureJourCreate_RU jourCreate = FactureJourCreate_RU::construct(FactureModule_RU::Vend);
            FactureEditLinesEngine_RU editLines = FactureEditLinesEngine_RU::construct(jourCreate);
            editLines.insertJour(vendInvoiceJour, false);

            jourCreate.initParameters(true,
                                      false,
                                      Printout::After,
                                      false,
                                      NumberSeq::newGetNum(VendParameters::numRefVendFactureId_RU(),false,true).num(),
                                      vendInvoiceJour.InvoiceDate,
                                      vendInvoiceJour.InvoiceAccount,
                                      vendInvoiceJour.CurrencyCode,
                                      FactureType_RU::Invoice,
                                      vendInvoiceJour.ConsigneeAccount_RU,
                                      vendInvoiceJour.ConsignorAccount_RU,
                                      vendInvoiceJour.OffsessionId_RU,
                                      '',
                                      '',
                                      dateNull(),
                                      vendInvoiceJour.deliveryPostalAddressRecId_RU(),
                                      vendInvoiceJour.InvoiceDate,
                                      vendInvoiceJour.NumberSequenceGroup);

            jourCreate.parmPrinterSettings(purchFormLetter.printerSettingsFormletter());
            jourCreate.parmVATOnPayment(vendInvoiceJour.vatOnPayment_RU);
            jourCreate.parmCorrect(vendInvoiceJour.Correct_RU);
            jourCreate.parmInventProfileType(vendInvoiceJour.InventProfileType_RU);
            jourCreate.runOperation();
        }

        return vendInvoiceJour.vendTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    protected boolean prompt()
    {
        DialogField createPaymentDialogField;

        dialog = new Dialog("@SYS5943", this);
        dialog.addText("@GLS114536");
        DialogField creditNoteCorrectDialogField = dialog.addField(enumStr(NoYes), "@SYS6054", "@SYS10336");
        creditNoteCorrectDialogField.value(VendParameters::find().CreditError);
        if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Allocation)
        {
            createPaymentDialogField = dialog.addField(enumStr(NoYes), "@GLS114537", "@GLS114538");
        }

        if (dialog.run())
        {
            creditNoteStorno    = creditNoteCorrectDialogField.value();
            if (createPaymentDialogField)
            {
                createPayment = createPaymentDialogField.value();
            }
            else
            {
                createPayment = false;
            }

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCreateAndPostSourceInvoiceJournal</Name>
				<Source><![CDATA[
    protected void reCreateAndPostSourceInvoiceJournal(LedgerJournalTable   _sourceLedgerJournalTable,
                                                       LedgerJournalTrans   _sourceLedgerJournalTrans,
                                                       VendInvoiceTrans     _sourceVendInvoiceTrans,
                                                       Amount               _amountCur)
    {
        LedgerJournalTable      ledgerJournalTableNew = this.createLedgerJournalTable(_sourceLedgerJournalTable);
        LedgerJournalTrans      ledgerJournalTransCreditNote, ledgerJournalTransInvoice;

        ledgerJournalEngine = new LedgerJournalEngine(null);
        ledgerJournalEngine.newJournalActive(LedgerJournalTable::find(ledgerJournalTableNew.JournalNum), false);

        Amount amount = this.reCreateSourceLedgerJournalTrans(ledgerJournalTableNew,
                                                              ledgerJournalTransCreditNote,
                                                              _sourceLedgerJournalTrans,
                                                              _sourceVendInvoiceTrans,
                                                              _amountCur,
                                                              true);

        this.reCreateSourceLedgerJournalTrans(ledgerJournalTableNew,
                                              ledgerJournalTransInvoice,
                                              _sourceLedgerJournalTrans,
                                              _sourceVendInvoiceTrans,
                                              amount,
                                              false);

        LedgerJournalCheckPost ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTableNew, NoYes::Yes);
        ledgerJournalCheckPost.runOperation();

        ledgerJournalTransCreditNote.reread();
        VendTrans vendTrans = VendTrans::findVoucherDateType(ledgerJournalTransCreditNote.Voucher, ledgerJournalTransCreditNote.TransDate, ledgerJournalTransCreditNote.TransactionType);
        this.addHistoryList(creditNoteHistoryMap, grCostAllocationResult.AllocSourceRecId, vendTrans);

        ledgerJournalTransInvoice.reread();
        vendTrans = VendTrans::findVoucherDateType(ledgerJournalTransInvoice.Voucher, ledgerJournalTransInvoice.TransDate, ledgerJournalTransInvoice.TransactionType);
        this.addHistoryList(invoiceHistoryMap, grCostAllocationResult.AllocSourceRecId, vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCreateSourceLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected Amount reCreateSourceLedgerJournalTrans(LedgerJournalTable _ledgerJournalTableNew,
                                                      LedgerJournalTrans _ledgerJournalTransNew,
                                                      LedgerJournalTrans _sourceLedgerJournalTrans,
                                                      VendInvoiceTrans   _sourceVendInvoiceTrans,
                                                      Amount             _amountCur,
                                                      boolean            _creditNote)
    {
        OfficialsTrans_RU   officialsTrans,officialTransNew;
        AmountCur           amountInclTax;
        DictType            dictType;

        _ledgerJournalTransNew.clear();
        _ledgerJournalTransNew.data(_sourceLedgerJournalTrans);
        _ledgerJournalTransNew.JournalNum = _ledgerJournalTableNew.JournalNum;
        _ledgerJournalTransNew.Voucher    = new JournalVoucherNum(JournalTableData::newTable(_ledgerJournalTableNew)).getNew(false);

        NumberSeq numberSeq = NumberSeq::newGetNum(VendParameters::numRefVendExternalInvoice_RU(),false,true);
        if (! numberSeq)
        {
            dictType = new DictType(extendedTypeNum(VendExternalInvoiceId_RU));
            warning(strFmt("@SYS53911", dictType.label(), "@SYS25194"));
            throw error("@GLS106933");
        }
        else
        {
            if (numberSeq.parmNumTableNum(null).Manual)
            {
                dictType = new DictType(extendedTypeNum(VendExternalInvoiceId_RU));
                warning(strFmt("@GLS104926", dictType.label(), "@SYS25194"));
                throw error("@GLS106933");
            }
        }

        _ledgerJournalTransNew.Invoice = numberSeq.num();

        if (!_ledgerJournalTransNew.AcknowledgementDate)
        {
            _ledgerJournalTransNew.AcknowledgementDate = _ledgerJournalTransNew.TransDate;
        }

        _ledgerJournalTransNew.Approved = _sourceLedgerJournalTrans.Approved;
        _ledgerJournalTransNew.Approver = HcmWorker::userId2Worker(curUserId());
        ledgerJournalEngine.paymentModified(_ledgerJournalTransNew);
        ledgerJournalEngine.currencyModified(_ledgerJournalTransNew);

        if (!_ledgerJournalTransNew.ReverseEntry)
        {
            _ledgerJournalTransNew.ReverseEntry = _ledgerJournalTableNew.ReverseEntry;
            _ledgerJournalTransNew.ReverseDate  = _ledgerJournalTableNew.ReverseDate;
        }

        if (_creditNote)
        {
            TaxAmount taxAmount = Tax::calcTaxAmount(_ledgerJournalTransNew.TaxGroup,
                                                     _ledgerJournalTransNew.TaxItemGroup,
                                                     _sourceVendInvoiceTrans.InvoiceDate,
                                                     _sourceVendInvoiceTrans.CurrencyCode,
                                                     _amountCur,
                                                     TaxModuleType::Voucher);

            amountInclTax = _amountCur + taxAmount;

            if (sign < 0)
            {
                _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurCredit ? amountInclTax : 0;
                _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurDebit  ? amountInclTax : 0;
            }
            else
            {
                if (creditNoteStorno)
                {
                    _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurCredit ? - amountInclTax : 0;
                    _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurDebit  ? - amountInclTax : 0;
                }
                else
                {
                    _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurDebit   ? amountInclTax : 0;
                    _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurCredit  ? amountInclTax : 0;
                }
            }

            _ledgerJournalTransNew.CorrectionType_RU        = FactureCorrectionType_RU::Correction;
            _ledgerJournalTransNew.CorrectedInvoiceId_RU    = _sourceVendInvoiceTrans.InvoiceId;
            _ledgerJournalTransNew.CorrectedInvoiceDate_RU  = _sourceVendInvoiceTrans.InvoiceDate;
        }
        else
        {
            if (_sourceLedgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                _ledgerJournalTransNew.AccountType      = LedgerJournalACType::Ledger;
                _ledgerJournalTransNew.LedgerDimension  = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(
                    debtsTransitLedgerDimension,
                    _ledgerJournalTransNew.LedgerDimension);
            }
            else
            if (_sourceLedgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                _ledgerJournalTransNew.OffsetAccountType        = LedgerJournalACType::Ledger;
                _ledgerJournalTransNew.OffsetLedgerDimension    = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(
                    debtsTransitLedgerDimension,
                    _ledgerJournalTransNew.OffsetLedgerDimension);
            }
            else
            {
                throw error("@GLS114535");
            }

            amountInclTax = _amountCur;

            if (sign < 0)
            {
                if (creditNoteStorno)
                {
                    _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurCredit  ? -amountInclTax : 0;
                    _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurDebit   ? -amountInclTax : 0;
                }
                else
                {
                    _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurDebit   ? amountInclTax : 0;
                    _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurCredit  ? amountInclTax : 0;
                }
            }
            else
            {
                _ledgerJournalTransNew.AmountCurCredit = _sourceLedgerJournalTrans.AmountCurCredit ? amountInclTax : 0;
                _ledgerJournalTransNew.AmountCurDebit  = _sourceLedgerJournalTrans.AmountCurDebit  ? amountInclTax : 0;
            }

            _ledgerJournalTransNew.TaxGroup        = TaxGroupHeading::findTaxGroupDebtsTransit_RU(_sourceLedgerJournalTrans.TaxGroup);
            _ledgerJournalTransNew.TransDate       = costAllocationForm.postingDate();
        }

        _ledgerJournalTransNew.ExchRate         = _sourceLedgerJournalTrans.ExchRate;
        _ledgerJournalTransNew.ExchRateSecond   = _sourceLedgerJournalTrans.ExchRateSecond;
        _ledgerJournalTransNew.Triangulation    = _sourceLedgerJournalTrans.Triangulation;

        _ledgerJournalTransNew.modifyVatDueDate_W();
        if (_sourceLedgerJournalTrans.OffSessionId_RU)
        {
            _ledgerJournalTransNew.OffSessionId_RU = new OfficialsServ_RU().newId();
            while select officialsTrans
                where officialsTrans.OffSessionId == _sourceLedgerJournalTrans.OffSessionId_RU
            {
                officialTransNew = officialsTrans.data();
                officialTransNew.OffSessionId = _ledgerJournalTransNew.OffSessionId_RU;
                officialTransNew.insert();
            }
        }

        _ledgerJournalTransNew.doInsert();
        if (factureLedgerJournalList)
        {
            factureLedgerJournalList.ins(_ledgerJournalTransNew);
        }

        return amountInclTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #OCCRetryCount
    public void run()
    {
        if (!this.prompt())
        {
            checkFailed("@GLS113154");
            return;
        }

        factured = costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Allocation;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    #macrolib.AviFiles
    protected void runPost()
    {
        PurchTable           sourcePurchTable;
        VendInvoiceInfoTable sourceNonPOTable;
        VendInvoiceInfoLine  sourceNonPOLine;
        CustInvoiceTable     custInvoiceTableNew;
        CustVendTrans        custVendTrans;
        LedgerJournalTable   sourceLedgerJournalTable;
        LedgerJournalTrans   sourceLedgerJournalTrans, ledgerJournalTransNew;
        boolean              existFactureSource;

        debtsTransitLedgerDimension = VendParameters::find().DebtsTransitLedgerDimension_RU;
        if (! debtsTransitLedgerDimension)
        {
            throw error(strFmt("@GLS114543", "@GLS107795", ModuleAxapta::Vendor));
        }

        costAllocationParmIdMap = new Map(Types::Int64, Types::String);

        endInfologSet           = new Set(Types::Record);
        creditNoteHistoryMap    = new Map(Types::Int64, Types::Record);
        invoiceHistoryMap       = new Map(Types::Int64, Types::Record);
        indebetnessHistoryMap   = new Map(Types::Int64, Types::Record);
        invoice4PaymHistoryMap  = new Map(Types::Int64, Types::Int64);

        if (factured)
        {
            factureLedgerJournalList = new RecordSortedList(tableNum(LedgerJournalTrans));
            factureLedgerJournalList.sortOrder(fieldNum(LedgerJournalTrans, RecId));

            factureCustInvoiceJournalList = new RecordSortedList(tableNum(CustInvoiceTable));
            factureCustInvoiceJournalList.sortOrder(fieldNum(CustInvoiceTable, RecId));
        }

        while select sum(Amount) from grCostAllocationResult
            group by AllocSourceRecId
            where grCostAllocationResult.Mark   &&
                  grCostAllocationResult.Amount
        {
            creditNotePurchLineList = new List(Types::Record);
            newPurchLineList        = new List(Types::Record);

            VendInvoiceInfoTable creditNoteNonPOTable = null;
            VendInvoiceInfoTable nonPOTable = null;

            costAllocationParmIdMap.insert(grCostAllocationResult.AllocSourceRecId, this.generateParmId());

            VendInvoiceTrans sourceVendInvoiceTrans = VendInvoiceTrans::findRecId(grCostAllocationResult.AllocSourceRecId);
            VendInvoiceJour sourceVendInvoiceJour = sourceVendInvoiceTrans.vendInvoiceJour();
            if (!sourceVendInvoiceJour.RecId)
            {
                continue;
            }

            // check purch book
            if (!this.checkFactureBookProcessingNotExists(sourceVendInvoiceTrans))
            {
                throw error("@SYS25904");
            }

            // check tax
            if (sourceVendInvoiceTrans.LedgerDimension == debtsTransitLedgerDimension &&
                this.getTaxGroupTransit(sourceVendInvoiceTrans.TaxGroup, sourceVendInvoiceTrans.LedgerDimension) == sourceVendInvoiceTrans.TaxGroup)
            {
                continue;
            }

            // Credit-note and recreate Invoice
            if (sourceVendInvoiceTrans.PurchID && sourceVendInvoiceJour.PurchaseType == PurchaseType::Purch) //from Purch
            {
                sourcePurchTable = sourceVendInvoiceJour.purchTable();
                if (!sourcePurchTable.RecId)
                {
                    error(strFmt("@GLS114544", sourceVendInvoiceTrans.PurchID));
                    throw error("@SYS25904");
                }

                this.createPurchLine(sourcePurchTable,
                                     sourceVendInvoiceTrans,
                                     this.createCreditNotePurchLine(sourcePurchTable,
                                                                    sourceVendInvoiceTrans,
                                                                    grCostAllocationResult.Amount));
            }
            else if (!sourceVendInvoiceTrans.PurchID && sourceVendInvoiceJour.PurchaseType == PurchaseType::Purch) //from NonPO
            {
                select firstOnly sourceNonPOTable
                    join RecId from sourceNonPOLine
                        where sourceNonPOTable.ParmId            == sourceNonPOLine.ParmId
                           && sourceNonPOTable.TableRefId        == sourceNonPOLine.TableRefId
                           && sourceNonPOLine.SourceDocumentLine == sourceVendInvoiceTrans.SourceDocumentLine;

                if (!sourceNonPOTable.RecId)
                {
                    error(strFmt("@GLS222666", sourceVendInvoiceJour.InvoiceId));
                    throw error("@SYS25904");
                }

                if (!creditNoteNonPOTable)
                {
                    creditNoteNonPOTable = this.createNonPOTable(sourceNonPOTable, null, sourceVendInvoiceJour, sourceVendInvoiceJour.InvoiceDate);
                }

                AmountCur creditNoteAmount = this.createNonPOLine(creditNoteNonPOTable,
                                                                  sourceVendInvoiceTrans,
                                                                  grCostAllocationResult.Amount,
                                                                  sign,
                                                                  true);

                if (!nonPOTable)
                {
                    nonPOTable = this.createNonPOTable(sourceNonPOTable, null, sourceVendInvoiceJour, costAllocationForm.postingDate());
                }
                this.createNonPOLine(nonPOTable, sourceVendInvoiceTrans, creditNoteAmount);
            }
            else if (sourceVendInvoiceJour.PurchaseType == PurchaseType::Journal) //from invoice journal
            {
                select sourceLedgerJournalTrans
                    where sourceLedgerJournalTrans.Voucher      == sourceVendInvoiceJour.LedgerVoucher &&
                          sourceLedgerJournalTrans.TransDate    == sourceVendInvoiceJour.InvoiceDate
                    join  sourceLedgerJournalTable
                        where sourceLedgerJournalTable.JournalNum == sourceLedgerJournalTrans.JournalNum;

                if (!sourceLedgerJournalTrans.RecId)
                {
                    error(strFmt("@GLS114545", sourceVendInvoiceJour.LedgerVoucher));
                    throw error("@SYS25904");
                }

                this.reCreateAndPostSourceInvoiceJournal(sourceLedgerJournalTable,
                                                         sourceLedgerJournalTrans,
                                                         sourceVendInvoiceTrans,
                                                         grCostAllocationResult.Amount);
            }
            else
            {
                error("@GLS114535");
                throw error("@SYS25904");
            }

            SysTransactionScopeCache::clear(classStr(PurchTotals)+ '::' + staticmethodStr(PurchTotals, newParmTable));

            if (creditNotePurchLineList.elements())
            {
                if (sourcePurchTable)
                {
                    custVendTrans = this.postVendInvoice(sourcePurchTable,
                                                         sourceVendInvoiceJour.PostingProfile,
                                                         sourceVendInvoiceJour.InventProfileType_RU,
                                                         creditNotePurchLineList,
                                                         sourceVendInvoiceJour.InvoiceDate,
                                                         sourceVendInvoiceJour.ExchRate,
                                                         sourceVendInvoiceJour.ExchRateSecondary,
                                                         sign > 0 && creditNoteStorno,
                                                         sourceVendInvoiceJour.InvoiceId);
                }
                else
                if (creditNoteNonPOTable)
                {
                    custVendTrans = this.postNonPOInvoice(creditNoteNonPOTable, sign > 0 && creditNoteStorno);
                }

                this.addHistoryList(creditNoteHistoryMap, grCostAllocationResult.AllocSourceRecId, custVendTrans);
            }

            if (newPurchLineList.elements())
            {
                if (sourcePurchTable)
                {
                    custVendTrans = this.postVendInvoice(sourcePurchTable,
                                                         sourceVendInvoiceJour.PostingProfile,
                                                         sourceVendInvoiceJour.InventProfileType_RU,
                                                         newPurchLineList,
                                                         costAllocationForm.postingDate(),
                                                         sourceVendInvoiceJour.ExchRate,
                                                         sourceVendInvoiceJour.ExchRateSecondary,
                                                         sign < 0 && creditNoteStorno);
                }
                else
                if (nonPOTable)
                {
                    custVendTrans = this.postNonPOInvoice(nonPOTable, sign < 0 && creditNoteStorno);
                }

                this.addHistoryList(invoiceHistoryMap, grCostAllocationResult.AllocSourceRecId, custVendTrans);
            }
        }

        while select grCostAllocationResult
            group by grCostAllocationResult.AllocBaseRecId
            where grCostAllocationResult.Mark   &&
                  grCostAllocationResult.Amount
        {
            this.initAndPostIndebtednessInvoice(grCostAllocationResult.AllocBaseRecId);
        }

        if (factureLedgerJournalList)
        {
            existFactureSource = factureLedgerJournalList.first(ledgerJournalTransNew);
            while (existFactureSource)
            {
                this.factureCreateFromLedgerJournalTrans(ledgerJournalTransNew);
                existFactureSource = factureLedgerJournalList.next(ledgerJournalTransNew);
            }
        }

        if (factureCustInvoiceJournalList)
        {
            existFactureSource = factureCustInvoiceJournalList.first(custInvoiceTableNew);
            while (existFactureSource)
            {
                this.factureCreateFromCustInvoiceTable(custInvoiceTableNew);
                existFactureSource = factureCustInvoiceJournalList.next(custInvoiceTableNew);
            }
        }

        if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel)
        {
            while select grCostAllocationResult
                group by grCostAllocationResult.HistoryAllocRecId
                where grCostAllocationResult.Mark &&
                      grCostAllocationResult.Amount
            {
                this.deleteFactures(CostAllocationHistory_RU::findRecId(grCostAllocationResult.HistoryAllocRecId));
            }
        }

        this.createHistory();
        this.createTransLink();
        this.showEndInfolog();
        this.runEndActions();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00047,funcName());

        info("@GLS114531");
    }

]]></Source>
			</Method>
			<Method>
				<Name>showEndInfolog</Name>
				<Source><![CDATA[
    protected void showEndInfolog()
    {
        SetEnumerator   setEnumerator = endInfologSet.getEnumerator();

        infolog.clear(0);

        while (setEnumerator.moveNext())
        {
            Common common = setEnumerator.current();
            common.reread();
            switch (common.TableId)
            {
                case tableNum(SalesTable):
                    info(strFmt("@GLS114539", common.(fieldNum(SalesTable, SalesId))));
                    break;

                case tableNum(PurchTable):
                    info(strFmt("@GLS114540", common.(fieldNum(PurchTable, PurchId))));
                    break;

                case tableNum(LedgerJournalTable):
                    info(strFmt("@GLS114541", common.(fieldNum(LedgerJournalTable, JournalNum))));
                    break;

                case tableNum(CustInvoiceTable):
                    info(strFmt("@GLS114542", common.(fieldNum(CustInvoiceTable, InvoiceId))));
                    break;

                case tableNum(VendInvoiceInfoTable):
                    info(strFmt("@GLS222667", common.(fieldNum(VendInvoiceInfoTable, Num))));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceCreditCopy</Name>
				<Source><![CDATA[
    protected void updateInvoiceCreditCopy(PurchLine        _purchLine,
                                           VendInvoiceTrans _vendInvoiceTrans)
    {
        InventTrans         inventTransFrom;
        InventTrans         inventTransTo;
        InventTransOriginId purchLineInventTransOriginId = InventTransOrigin::findByInventTransId(_purchLine.InventTransId).RecId;

        while select RecId from inventTransFrom
            where inventTransFrom.InventTransOrigin             == InventTransOrigin::findByInventTransId(_vendInvoiceTrans.InventTransId).RecId
               && inventTransFrom.MarkingRefInventTransOrigin   == purchLineInventTransOriginId
            join RecId from inventTransTo
                where inventTransTo.InventTransOrigin           == purchLineInventTransOriginId
                   && inventTransTo.InventDimId                 == inventTransFrom.InventDimId
        {
            TransLink_RU::create(tableNum(InventTrans), inventTransFrom.RecId, inventTransTo.RecId);
        }

        VendInvoiceJour localVendInvoiceJour = VendInvoiceJour::findFromVendInvoiceTrans(_vendInvoiceTrans.PurchID,
                                                                                         _vendInvoiceTrans.InvoiceId,
                                                                                         _vendInvoiceTrans.InvoiceDate,
                                                                                         _vendInvoiceTrans.NumberSequenceGroup,
                                                                                         _vendInvoiceTrans.InternalInvoiceId);

        TaxRegulation::adjustTaxInvoice(localVendInvoiceJour.LedgerVoucher,
                                        _vendInvoiceTrans.InvoiceDate,
                                        _vendInvoiceTrans.InventTransId,
                                        tableNum(PurchTable),
                                        _purchLine.purchTable().RecId,
                                        _purchLine.QtyOrdered,
                                        _vendInvoiceTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNonPOInvoiceCreditCopy</Name>
				<Source><![CDATA[
    private void updateNonPOInvoiceCreditCopy(VendInvoiceInfoLine _vendInvoiceInfoLine,
                                              VendInvoiceTrans    _vendInvoiceTrans)
    {
        VendInvoiceJour localVendInvoiceJour = VendInvoiceJour::findFromVendInvoiceTrans(_vendInvoiceTrans.PurchID,
                                                                                         _vendInvoiceTrans.InvoiceId,
                                                                                         _vendInvoiceTrans.InvoiceDate,
                                                                                         _vendInvoiceTrans.NumberSequenceGroup,
                                                                                         _vendInvoiceTrans.InternalInvoiceId);

        this.adjustTaxNoPOInvoice(localVendInvoiceJour.LedgerVoucher,
                                  _vendInvoiceTrans.InvoiceDate,
                                  tableNum(VendInvoiceTrans),
                                  _vendInvoiceTrans.RecId,
                                  tableNum(VendInvoiceInfoLine),
                                  _vendInvoiceInfoLine.RecId,
                                  _vendInvoiceInfoLine.ReceiveNow,
                                  _vendInvoiceTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the allocation.
    /// </summary>
    /// <returns>
    ///     true if the allocation can be processed; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        VendInvoiceTrans sourceVendInvoiceTrans;

        boolean ret = super();

        if (ret)
        {
            select firstOnly RecId from costAllocationResult
                where costAllocationResult.Amount
                   && costAllocationResult.Mark
                   && !costAllocationResult.EcoResCategory
                exists join sourceVendInvoiceTrans
                    where sourceVendInvoiceTrans.RecId == costAllocationResult.AllocSourceRecId
                       && !sourceVendInvoiceTrans.ItemId
                       && sourceVendInvoiceTrans.ProcurementCategory;

            if (costAllocationResult.RecId)
            {
                ret = checkFailed("@GLS222668");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>