<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementTaxDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementTaxDocument</c> is tax document from bank statement.
/// </summary>
class BankStatementTaxDocument implements TaxableDocument
{
    BankStmtISOAccountStatement statement;
    BankStmtISOReportEntry statementLine;

    TaxCalculation tax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the amounts.
    /// </summary>
    /// <param name="_loadTaxUncommited">
    /// Indicates whether buffer <c>TaxUncommitted</c> is loaded.
    /// </param>
    /// <returns>
    /// Calculated amount.
    /// </returns>
    public amountCur calcTax(boolean _loadTaxUncommited = false)
    {
        TaxCalculation taxCalculation;
        TaxAmountCur amountCur;

        boolean loadTaxTrans;

        if (statement.Posted)
        {
            loadTaxTrans = true;
        }

        taxCalculation = TaxCalculation::newForSourceTypeWithTaxUncommitted(TaxSourceType::BankAccountReconcile, this, _loadTaxUncommited, false);

        if (!loadTaxTrans)
        {
            if (!_loadTaxUncommited)
            {
                amountCur = taxCalculation.calculateTax();
            }
            else
            {
                amountCur = taxCalculation.totalTaxAmount();
            }
        }
        else
        {
            amountCur = Tax::taxTotal(statement.Voucher, statement.getAccountingDate());
        }

        this.tax(taxCalculation);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines if tax groups are set on any line of the document.
    /// </summary>
    /// <returns>
    ///   true if tax groups exist on any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object that implements the <c>TaxableLine</c> interface that represents the current
    ///    transaction line.
    /// </summary>
    /// <returns>
    ///    An object that represents the current transaction line.
    /// </returns>
    /// <remarks>
    ///    If there is no current line, null may be returned.
    /// </remarks>
    public TaxableLine getCurrentLine()
    {
        TaxableLine taxableLine;

        if (statementLine)
        {
            taxableLine = BankStatementTaxLine::construct(statementLine);
        }
        return taxableLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object which implements the <c>TaxableLine</c> interface that represents the current
    ///    miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///    An object that represents the current miscellaneous charge line.
    /// </returns>
    /// <remarks>
    ///    If there is no current miscellaneous charge line or if miscellaneous charges are not supported,
    ///    then null may be returned.
    /// </remarks>
    public TaxableLine getCurrentMiscellaneousCharge()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the first transaction line.
    /// </summary>
    /// <returns>
    ///   true if the first transaction line was found; otherwise false.
    /// </returns>
    public boolean getFirstLine()
    {
        boolean result;

        select * from statementLine
            where statementLine.BankStmtISOAccountStatement == statement.RecId
                && statementLine.IsNewBankDocument
                && statementLine.Voucher == '';

        if (statementLine)
        {
            result = true;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the first miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///   true if the first miscellaneous charge line was found; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   Transactions which do not support Miscellaneous Charges may return false.
    /// </remarks>
    public boolean getFirstMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the Invoice ID.
    /// </summary>
    /// <returns>
    ///   The invoice ID if an invoice ID exists; otherwise, blank.
    /// </returns>
    public InvoiceId getInvoiceId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalizedDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table buffer that represents the journalized document header for the transaction.
    /// </summary>
    /// <returns>
    ///    The table buffer for the journalized document header.
    /// </returns>
    /// <remarks>
    ///    For example, this would typically be the <c>VendInvoiceJour</c> table if the transaction is
    ///    Purchase Order Invoice. This is used to set the grandparent of the <c>TaxTrans</c> record.The table
    ///    buffer must have a record ID assigned to it.
    /// </remarks>
    public Common getJournalizedDocument()
    {
        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an object that implements the <c>TaxableLine</c> interface that represents the transaction
    ///    line that is specified by the specified parameter.
    /// </summary>
    /// <param name="_recId">
    ///    The ID of the transaction line.
    /// </param>
    /// <returns>
    ///    An object that represents the transaction line.
    /// </returns>
    public TaxableLine getLineByRecId(RefRecId _recId)
    {
        BankStmtISOReportEntry statementLineLocal = BankStmtISOReportEntry::find(_recId);

        return BankStatementTaxLine::construct(statementLineLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the module type.
    /// </summary>
    /// <returns>
    ///   The module type.
    /// </returns>
    public TaxModuleType getModuleType()
    {
        return TaxModuleType::BankAccountReconcile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the next transaction line.
    /// </summary>
    /// <returns>
    ///   true if a transaction line was found; otherwise, false.
    /// </returns>
    public boolean getNextLine()
    {
        if (statementLine)
        {
            next statementLine;
        }

        return (statementLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextMiscellaneousCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Reads the next miscellaneous charge line.
    /// </summary>
    /// <returns>
    ///   true if a miscellaneous charge line was found; otherwise, false.
    /// </returns>
    public boolean getNextMiscellaneousCharge()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the reference number.
    /// </summary>
    /// <returns>
    ///   The reference number for the current document.
    /// </returns>
    public Voucher getReferenceNumber()
    {
        return statement.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines the source company in an intercompany document.
    /// </summary>
    /// <returns>
    ///   The source company.
    /// </returns>
    /// <remarks>
    ///   The source company is the company where the payable to the vendor or receivable to the customer is recorded.
    /// </remarks>
    public SelectableDataArea getSourceCompany()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table buffer that represents the source document header for the transaction.
    /// </summary>
    /// <returns>
    ///    The table buffer for the source document header.
    /// </returns>
    /// <remarks>
    ///    For example, for Purchase Order, the source document header is a <c>PurchTable</c> record.This
    ///    method is used before the document is journalized to determine the grandparent of the
    ///    <c>TaxUncommitted</c> record.The table buffer must have a record ID assigned to it.
    /// </remarks>
    public Common getSourceHeader()
    {
        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a flag that indicates whether the line amounts include taxes.
    /// </summary>
    /// <returns>
    ///    true if the line amounts include taxes; otherwise, false.
    /// </returns>
    public boolean getTaxIncluded()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxObligationCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company for which we have a tax obligation.
    /// </summary>
    /// <returns>
    ///   The <c>TaxObligationCompany</c> setting for the document.
    /// </returns>
    public TaxObligationCompany getTaxObligationCompany()
    {
        return TaxObligationCompany::Destination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the document that is being taxed is a payment.
    /// </summary>
    /// <returns>
    ///    true if the current document is a payment; otherwise, false.
    /// </returns>
    public boolean isPayment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatement</Name>
				<Source><![CDATA[
    public BankStmtISOAccountStatement parmStatement(BankStmtISOAccountStatement _statement = statement)
    {
        statement = _statement;
        return statement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the tax.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller.
    /// </param>
    /// <param name="_ispost">
    /// Whether to post.
    /// </param>
    public void post(LedgerPostingController _ledgerPostingController, boolean _ispost =true)
    {
        this.calcTax();
        TaxPost taxPost = TaxPost::newForSourceTypeWithTaxCalculation(TaxSourceType::BankAccountReconcile, this, _isPost, this.tax());
        taxPost.updateAndPost(_ledgerPostingController);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the taxcalculation instance.
    /// </summary>
    /// <param name="_tax">
    /// The taxcalculation instance.
    /// </param>
    /// <returns>
    /// The taxcalculation instance.
    /// </returns>
    public TaxCalculation tax(TaxCalculation _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSourceDocumentFramework</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the current transaction supports the Source Document Framework.
    /// </summary>
    /// <returns>
    ///    true if the current transaction supports the Source Document Framework; otherwise, false.
    /// </returns>
    public boolean useSourceDocumentFramework()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether taxes should allow the use of the <c>TaxUncommitted</c> table to store taxes
    ///    which have not yet been journalized.
    /// </summary>
    /// <returns>
    ///    true if taxes should let the user use of the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>BankStatementTaxDocument</c>.
    /// </summary>
    /// <param name="_statement">
    /// The bank statement buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>BankStatementTaxDocument</c>.
    /// </returns>
    public static BankStatementTaxDocument construct(BankStmtISOAccountStatement _statement)
    {
        BankStatementTaxDocument bankStatementTaxDocument;

        bankStatementTaxDocument = new BankStatementTaxDocument();
        bankStatementTaxDocument.parmStatement(_statement);
        return bankStatementTaxDocument;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>