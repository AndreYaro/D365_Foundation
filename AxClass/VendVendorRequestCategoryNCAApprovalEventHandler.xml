<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorRequestCategoryNCAApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class VendVendorRequestCategoryNCAApprovalEventHandler implements WorkflowElementCompletedEventHandler,
                                                                           WorkflowElementCanceledEventHandler,
                                                                           WorkflowElementDeniedEventHandler,
                                                                           WorkflowElementStartedEventHandler,
                                                                           WorkflowElementReturnedEventHandler

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that created the event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        ttsbegin;

        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (vendRequest.RecId)
        {
            vendRequest.RequestStatus = VendVendorRequestStatus::WorkflowCanceled;
            vendRequest.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the workflow context of the workflow item that created the event and sets the approval
    /// status to the <c>RequestApproved</c> record.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that created the event.
    /// </param>
    /// <remarks>
    /// This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        ttsbegin;

        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (vendRequest.RecId)
        {
            vendRequest.RequestStatus = VendVendorRequestStatus::Approved;
            vendRequest.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the workflow state to the <c>CategoryRequestRejected</c> record.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that created the event.
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        ttsbegin;

        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (vendRequest.RecId)
        {
            vendRequest.RequestStatus = VendVendorRequestStatus::Rejected;
            vendRequest.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>DocumentState</c> field on the <c>VendVendorRequestNewCategory</c> table to rejected.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the approval is returned.
    /// </remarks>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        ttsbegin;

        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (vendRequest.RecId)
        {
            vendRequest.RequestStatus = VendVendorRequestStatus::Rejected;
            vendRequest.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the workflow context of the workflow item that created the event and sets the workflow
    /// status to the <c>CategoryRequestPendingReview</c> enumeration value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that created the event.
    /// </param>
    /// <remarks>
    /// This method is called when a start event is created for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendVendorRequestNewCategory vendRequest = VendVendorRequestNewCategory::find(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), true) as VendVendorRequestNewCategory;

        if (!vendRequest)
        {
            throw error(Error::missingRecord(tableStr(VendVendorRequestNewCategory)));
        }

        ttsbegin;
        vendRequest.RequestStatus = VendVendorRequestStatus::PendingApproval;
        vendRequest.update();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>