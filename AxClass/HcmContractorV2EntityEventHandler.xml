<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmContractorV2EntityEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains event handlers for the HcmContractorV2Entity entity.
/// </summary>
class HcmContractorV2EntityEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmContractorV2Entity_onInsertingEntityDataSource</Name>
				<Source><![CDATA[
     /// <summary>
    /// Entity OnInsertingEntityDataSource event handler for HcmContractorV2Entity extension
    /// </summary>
    /// <param name="_sender">HcmContractorV2 Entity raising the event</param>
    /// <param name="_eventArgs">The args of this event</param>
    [DataEventHandler(tableStr(HcmContractorV2Entity), DataEventType::InsertingEntityDataSource), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void HcmContractorV2Entity_onInsertingEntityDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        DataEntityContextEventArgs contextEventArgs = _eventArgs as DataEntityContextEventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = contextEventArgs.parmEntityDataSourceContext();

        if (dataSourceCtx.name() == dataentitydatasourcestr(HcmContractorV2Entity, HcmEmploymentContractor))
        {
            HcmEmploymentContractor employmentContractor = dataSourceCtx.getBuffer();
            employmentContractor.ValidFrom = HcmWorkerEntityHelper::defaultValidFromDateTime(employmentContractor.ValidFrom);
            employmentContractor.ValidTo = HcmWorkerEntityHelper::defaultValidToDateTime(employmentContractor.ValidTo);
        }

        if (dataSourceCtx.name() == dataEntityDataSourceStr(HcmContractorV2Entity, WorkCalendarEmployment))
        {
            WorkCalendarEmployment workCalendarEmployment = dataSourceCtx.getBuffer();

            if (workCalendarEmployment.Employment)
            {
                //
                // Conflict detection to resolve inserts into updates. This is required since <c>WorkCalendarEmployment</c> is 1-1 joined to <c>HcmEmployment</c>,
                // and the entity framework only resolves inserts into updates automatically for datasources in the 1 side on a 1-many relationship.
                //
                WorkCalendarEmployment existingRecord = WorkCalendarEmployment::findByEmploymentRecId(workCalendarEmployment.Employment, true);

                if (existingRecord)
                {
                    // Merge user modified fields into the existing record (excluding system fields).
                    buf2Buf(workCalendarEmployment, existingRecord);

                    // Set the datasource context buffer to the final merged record.
                    dataSourceCtx.setBuffer(existingRecord);
                    dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmContractorV2Entity_onMappedEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entity onMappedEntityToDataSource event handler for HcmContractorV2Entity extension
    /// </summary>
    /// <param name="_sender">HcmContractorV2 Entity raising the event</param>
    /// <param name="_eventArgs">The args of this event</param>
    [DataEventHandler(tableStr(HcmContractorV2Entity), DataEventType::MappedEntityToDataSource), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void HcmContractorV2Entity_onMappedEntityToDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        DataEntityContextEventArgs contextEventArgs = _eventArgs as DataEntityContextEventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = contextEventArgs.parmEntityDataSourceContext();
        HcmContractorV2Entity contractorEntity = _sender as HcmContractorV2Entity;

        switch (dataSourceCtx.name())
        {    
            case dataentitydatasourcestr(HcmContractorV2Entity, WorkCalendarEmployment):

                contractorEntity.skipDataSourceValidateField(fieldNum(HcmContractorV2Entity, CalendarDataAreaId), true);

                WorkCalendarEmployment workCalendarEmployment = dataSourceCtx.getBuffer();
                workCalendarEmployment.CalendarDataAreaId = contractorEntity.EmploymentLegalEntityId;
                break;

            case dataentitydatasourcestr(HcmContractorV2Entity, HcmEmploymentContractor):
                HcmEmploymentContractor employmentContractor = dataSourceCtx.getBuffer();
 
                if (contractorEntity.ContractorVendorId != '')
                {
                    employmentContractor.VendorDataAreaID = contractorEntity.EmploymentLegalEntityId;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmContractorV2Entity_ValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entity ValidatedWrite event handler for HcmContractorV2Entity extension
    /// </summary>
    /// <param name="_sender">HcmContractorV2 Entity raising the event</param>
    /// <param name="_eventArgs">The args of this event</param>
    [DataEventHandler(tableStr(HcmContractorV2Entity), DataEventType::ValidatedWrite), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void HcmContractorV2Entity_ValidatedWrite(Common _sender, DataEventArgs _eventArgs)
    {
        HcmContractorV2Entity contractorEntity = _sender as HcmContractorV2Entity;
        ValidateEventArgs validateEventArgs = _eventArgs as ValidateEventArgs;

        boolean ret = ValidateEventArgs.parmValidateResult();

        boolean isExist = true;
        
        if (contractorEntity.CalendarId !='')
        {
            WorkCalendarEmployment workCalendarEmployment;
            workCalendarEmployment.CalendarDataAreaId = contractorEntity.EmploymentLegalEntityId;
            workCalendarEmployment.CalendarId = contractorEntity.CalendarId;
            isExist = workCalendarEmployment.validateField(fieldNum(WorkCalendarEmployment, CalendarId));
        }

        ret = ret && isExist;

        validateEventArgs.parmValidateResult(ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>