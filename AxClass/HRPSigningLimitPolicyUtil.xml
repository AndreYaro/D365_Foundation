<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HrpSigningLimitPolicyUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HRPSigningLimitPolicyUtil</c> class is used for the signing limit upgrade feature.
/// </summary>
class HrpSigningLimitPolicyUtil
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkLimitAgreementDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if any record exists in the <c>HRPLimitAgreementDetail</c> table for the specified authority
    ///    basis, signing limit rule, and document type.
    /// </summary>
    /// <param name="_tmpLimitAgreementRule">
    ///    An instance of the <c>HRPTmpLimitAgreementRule</c> table.
    /// </param>
    /// <param name="_authorityBasis">
    ///    A <c>HRPAuthorityBasis</c> enumeration value that specifies a job or compensation.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>HRPLimitAgreementDetail</c> table, which was retrieved in this method.
    /// </returns>
    [Wrappable(true)]
    protected final RefRecId checkLimitAgreementDetail
    (
        HRPTmpLimitAgreementRule    _tmpLimitAgreementRule,
        HRPAuthorityBasis           _authorityBasis
    )
    {
        HRPLimitAgreementDetail             limitAgreementDetail;
        HRPLimitAgreement                   limitAgreement;
        HRPLimitAgreementJobException       limitAgreementJobException;
        HRPLimitAgreementCompException      limitAgreementCompensationException;
        RefRecId                            signingLimitDocumentRecId, limitAgreementDetailRecId;

        signingLimitDocumentRecId = HRPLimitDocument::getLimitDocumentRecId(_tmpLimitAgreementRule.SigningLimitDocument);

        // checks if the limit agreement details are associated with more than one Job then it will return the details recid
        select firstonly RecId from limitAgreementDetail
            where limitAgreementDetail.SigningLimitAgreementRule    == _tmpLimitAgreementRule.SigningLimitAgreementRule
                && limitAgreementDetail.SigningLimitDocument        == signingLimitDocumentRecId
                && limitAgreementDetail.Exception                   == _authorityBasis
        join RecId from limitAgreement
            where limitAgreement.AgreementName                      == _tmpLimitAgreementRule.AgreementName
                && limitAgreementDetail.SigningLimitAgreement       == limitAgreement.RecId
                && limitAgreementDetail.AttestationPeriod           == _tmpLimitAgreementRule.AttestationPeriod
                && limitAgreementDetail.OpenAttestation             == _tmpLimitAgreementRule.OpenAttestation;

        if (limitAgreementDetail && strlen(_tmpLimitAgreementRule.SelectedElements) > 0)
        {
            if (_authorityBasis == HRPAuthorityBasis::Compensation)
            {
                select firstonly RecId from limitAgreementCompensationException
                    where limitAgreementCompensationException.LimitAgreementDetail == limitAgreementDetail.RecId;

                if (!limitAgreementCompensationException)
                {
                    limitAgreementDetailRecId = limitAgreementDetail.RecId;
                }
            }
            else if (_authorityBasis == HRPAuthorityBasis::Job)
            {
                select firstonly RecId from limitAgreementJobException
                    where limitAgreementJobException.LimitAgreementDetail == limitAgreementDetail.RecId;

                if (!limitAgreementJobException)
                {
                    limitAgreementDetailRecId = limitAgreementDetail.RecId;
                }
            }
        }
        else
        {
            limitAgreementDetailRecId = limitAgreementDetail.RecId;
        }

        return limitAgreementDetailRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultLimit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a default signing limit rule.
    /// </summary>
    /// <param name="_defaultSigningLimitRule">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_authorityBasis">
    ///    A <c>HRPAuthorityBasis</c> enumeration value that specifies a job or compensation.
    /// </param>
    /// <param name="_jobOrCompensationRecId">
    ///    The record ID of the <c>HcmJob</c> or <c>HcmCompensationLevel</c> tables.
    /// </param>
    public void createDefaultLimit
    (
        HRPTmpDefaultSigningLimitRule   _defaultSigningLimitRule,
        HRPAuthorityBasis               _authorityBasis,
        RefRecId                        _jobOrCompensationRecId
    )
    {
        RefRecId    defaultLimitDetailRecId;
        RefRecId    signingLimitDocumentRecId;

        defaultLimitDetailRecId = 0;

        signingLimitDocumentRecId =  HRPLimitDocument::getLimitDocumentRecId(_defaultSigningLimitRule.SigningLimitDocument);

        ttsbegin;

        //if approval amount entered is greater than zero
        if (_defaultSigningLimitRule.ApprovalAmount > 0)
        {
            //check if a record exists in HRPDefaultLimitDetail table for the DefaultSigningLimitRule and HRPLimitType::Approval combination
            defaultLimitDetailRecId = HRPSigningLimitPolicyUtil::getDefaultLimitDetail(_defaultSigningLimitRule.DefaultSigningLimitRule,
                                                                        signingLimitDocumentRecId,
                                                                        HRPLimitType::Approval,
                                                                        _defaultSigningLimitRule.ApprovalAmount,
                                                                        _defaultSigningLimitRule.ApprovalCurrency);

            //if not exists, insert record into HRPDefaultLimitDetail table
            if (!defaultLimitDetailRecId)
            {
                defaultLimitDetailRecId = this.insertDefaultLimitDetail(signingLimitDocumentRecId,
                                                                              _defaultSigningLimitRule.DefaultSigningLimitRule,
                                                                              _authorityBasis,
                                                                              HRPLimitType::Approval,
                                                                              _defaultSigningLimitRule.ApprovalAmount,
                                                                              _defaultSigningLimitRule.ApprovalCurrency,
                                                                              _defaultSigningLimitRule.Description);
            }

            //insert record into HRPDefaultLimitJobDetail or HRPDefaultLimitCompensationDetail table based on the authority basis set
            this.insertJobOrCompensationRule(defaultLimitDetailRecId, _authorityBasis, _jobOrCompensationRecId);
        }

        //if spending amount entered is greater than zero
        if (_defaultSigningLimitRule.SpendingAmount > 0)
        {
            //check if a record exists in HRPDefaultLimitDetail table for the DefaultSigningLimitRule and HRPLimitType::Spending combination
            defaultLimitDetailRecId = HRPSigningLimitPolicyUtil::getDefaultLimitDetail(_defaultSigningLimitRule.DefaultSigningLimitRule,
                                                                        signingLimitDocumentRecId,
                                                                        HRPLimitType::Spending,
                                                                        _defaultSigningLimitRule.SpendingAmount,
                                                                        _defaultSigningLimitRule.SpendingCurrency);

            //if not exists, insert record into HRPDefaultLimitDetail table
            if (!defaultLimitDetailRecId)
            {
                defaultLimitDetailRecId = this.insertDefaultLimitDetail(signingLimitDocumentRecId,
                                                                              _defaultSigningLimitRule.DefaultSigningLimitRule,
                                                                              _authorityBasis,
                                                                              HRPLimitType::Spending,
                                                                              _defaultSigningLimitRule.SpendingAmount,
                                                                              _defaultSigningLimitRule.SpendingCurrency,
                                                                              _defaultSigningLimitRule.Description);
            }

            //insert record into HRPDefaultLimitJobDetail or HRPDefaultLimitCompensationDetail table based on the authority basis set
            this.insertJobOrCompensationRule(defaultLimitDetailRecId, _authorityBasis, _jobOrCompensationRecId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLimitDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>HRPDefaultLimitDetailDescription</c> table for the approval limit and spending limit combination.
    /// </summary>
    /// <param name = "_defaultSigningLimitRule">An instance of the <c>HRPTmpDefaultSigningLimitRule</c> table.</param>
    internal void createLimitDetailDescription(HRPTmpDefaultSigningLimitRule _defaultSigningLimitRule)
    {
        if (_defaultSigningLimitRule)
        {
            RefRecId signingLimitDocumentRecId =  HRPLimitDocument::getLimitDocumentRecId(_defaultSigningLimitRule.SigningLimitDocument);

            RefRecId defaultApprovalLimitDetailRecId = HRPSigningLimitPolicyUtil::getDefaultLimitDetail(
                _defaultSigningLimitRule.DefaultSigningLimitRule,
                signingLimitDocumentRecId,
                HRPLimitType::Approval,
                _defaultSigningLimitRule.ApprovalAmount,
                _defaultSigningLimitRule.ApprovalCurrency);

            RefRecId defaultSpendingLimitDetailRecId = HRPSigningLimitPolicyUtil::getDefaultLimitDetail(
                _defaultSigningLimitRule.DefaultSigningLimitRule,
                signingLimitDocumentRecId,
                HRPLimitType::Spending,
                _defaultSigningLimitRule.SpendingAmount,
                _defaultSigningLimitRule.SpendingCurrency);

            HRPDefaultLimitDetailDescription defaultLimitDetailDescription = HRPDefaultLimitDetailDescription::findyByApprovalSpendingRecIds(defaultApprovalLimitDetailRecId, defaultSpendingLimitDetailRecId, true);

            ttsbegin;

            if (!defaultLimitDetailDescription)
            {
                defaultLimitDetailDescription.ApprovalDetailRecId = defaultApprovalLimitDetailRecId;
                defaultLimitDetailDescription.SpendingDetailRecId = defaultSpendingLimitDetailRecId;
            }

            defaultLimitDetailDescription.Description = _defaultSigningLimitRule.Description;
            defaultLimitDetailDescription.write();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJobOrCompensationDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a record in the <c>HRPLimitAgreementJobException</c> or
    ///    <c>HRPLimitAgreementCompException</c> tables, based on the authority basis set.
    /// </summary>
    /// <param name="_limitAgreementDetailRecId">
    ///    The record ID of the <c>HRPLimitAgreementDetail</c> table.
    /// </param>
    /// <param name="_jobOrCompensation">
    ///    A string value that contains the selected job or compensation.
    /// </param>
    /// <param name="_authorityBasis">
    ///    A <c>HRPAuthorityBasis</c> enumeration value that specifies a job or compensation.
    /// </param>
    public void createJobOrCompensationDetail
    (
        RefRecId            _limitAgreementDetailRecId,
        HcmJobId            _jobOrCompensation,
        HRPAuthorityBasis   _authorityBasis
    )
    {
        HRPLimitAgreementJobException   limitAgreementJobException;
        HRPLimitAgreementCompException  limitAgreementCompensationException;

        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            limitAgreementJobException.Job                  = HcmJob::findByJob(_jobOrCompensation).RecId;
            limitAgreementJobException.LimitAgreementDetail = _limitAgreementDetailRecId;
            limitAgreementJobException.insert();
        }
        else if (_authorityBasis == HRPAuthorityBasis::Compensation)
        {
            limitAgreementCompensationException.CompensationLevel       = HcmCompensationLevel::findByCompensationLevel(_jobOrCompensation).RecId;
            limitAgreementCompensationException.LimitAgreementDetail    = _limitAgreementDetailRecId;
            limitAgreementCompensationException.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLimitAgreementDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a record in the <c>HRPLimitAgreementDetail</c> table for the specified limit agreement rule
    ///    and authority basis.
    /// </summary>
    /// <param name="_tmpLimitAgreementRule">
    ///    An instance of the <c>HRPTmpLimitAgreementRule</c> table.
    /// </param>
    /// <param name="_authorityBasis">
    ///    A <c>HRPAuthorityBasis</c> enumeration value that specifies a job or compensation.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>HRPLimitAgreementDetail</c> table.
    /// </returns>
    public RefRecId createLimitAgreementDetail
    (
        HRPTmpLimitAgreementRule    _tmpLimitAgreementRule,
        HRPAuthorityBasis           _authorityBasis
    )
    {
        HRPLimitAgreementDetail limitAgreementDetail;
        HRPLimitAgreement       limitAgreement;
        RefRecId                signingLimitDocumentRecId;
        recId                   limitAgreementDetailRecId;

        limitAgreementDetailRecId = this.checkLimitAgreementDetail(_tmpLimitAgreementRule, _authorityBasis);

        if (limitAgreementDetailRecId == 0)
        {
            signingLimitDocumentRecId = HRPLimitDocument::getLimitDocumentRecId(_tmpLimitAgreementRule.SigningLimitDocument);

            limitAgreementDetail.SigningLimitAgreementRule  = _tmpLimitAgreementRule.SigningLimitAgreementRule;
            limitAgreementDetail.Exception                  = _authorityBasis;
            limitAgreementDetail.SigningLimitDocument       = signingLimitDocumentRecId;

            select firstonly RecId, AttestationPeriod,url from limitAgreement
                where limitAgreement.AgreementName == _tmpLimitAgreementRule.AgreementName;

            limitAgreementDetail.SigningLimitAgreement  =  limitAgreement.RecId;
            limitAgreementDetail.AttestationPeriod      =  _tmpLimitAgreementRule.AttestationPeriod;
            limitAgreementDetail.OpenAttestation        = _tmpLimitAgreementRule.OpenAttestation;
            limitAgreementDetail.insert();

            limitAgreementDetailRecId = limitAgreementDetail.RecId;
        }
        else
        {
            limitAgreementDetailRecId = _tmpLimitAgreementRule.DetailRecId;
        }

        return limitAgreementDetailRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSigningLimitRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a rule in the <c>HRPDefaultSigningLimitRule</c> table.
    /// </summary>
    /// <param name="_fromDate">
    ///    A valid from date for the rule.
    /// </param>
    /// <param name="_toDate">
    ///    A valid to date for the rule.
    /// </param>
    /// <param name="_sysPolicyId">
    ///    The record ID of the policy.
    /// </param>
    public void createSigningLimitRule
    (
        utcdatetime     _fromDate,
        utcdatetime     _toDate,
        RefRecId        _sysPolicyId
    )
    {
        HRPDefaultLimitRule             hrpDefaultLimitRule;
        SysPolicyRuleType               policyRuleType;

        policyRuleType = SysPolicyRuleType::findByRuleTypePolicyType(SysPolicyRuleTypeEnum::DefaultSigningLimit, SysPolicyTypeEnum::ApprovalPolicy);

        hrpDefaultLimitRule.ValidFrom       = _fromDate;
        hrpDefaultLimitRule.ValidTo         = _toDate;
        hrpDefaultLimitRule.IsInherited     = NoYes::No;
        hrpDefaultLimitRule.Policy          = _sysPolicyId;
        hrpDefaultLimitRule.PolicyRuleType  = policyRuleType.RecId;

        hrpDefaultLimitRule.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultLimitDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets first record in the <c>HRPDefaultLimitDetail</c> table for the specified parameters.
    /// </summary>
    /// <param name="_defaultSigningLimitRuleRecId">
    ///    The record ID of the <c>HRPDefaultLimit</c> table.
    /// </param>
    /// <param name="_signingLimitDocumentRecId">
    ///    The record ID of the <c>HRPLimitDocument</c> table.
    /// </param>
    /// <param name="_limitType">
    ///    A <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_amount">
    ///    The amount that is specified for the default signing limit.
    /// </param>
    /// <param name="_currency">
    ///    The currency that is specified for the default signing limit.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </returns>
    public static RefRecId getDefaultLimitDetail
    (
        RefRecId        _defaultSigningLimitRuleRecId,
        RefRecId        _signingLimitDocumentRecId,
        HRPLimitType    _limitType,
        AmountCur       _amount,
        CurrencyCode    _currency
    )
    {
        HRPDefaultLimitDetail   defaultLimitDetail;
        RefRecId                defaultLimitDetailRecId = 0;

        select firstonly RecId from defaultLimitDetail
            where defaultLimitDetail.DefaultSigningLimitRule    == _defaultSigningLimitRuleRecId
                && defaultLimitDetail.SigningLimitDocument      == _signingLimitDocumentRecId
                && defaultLimitDetail.LimitType                 == _limitType
                && defaultLimitDetail.Amount                    == _amount
                && defaultLimitDetail.Currency                  == _currency;

        if (defaultLimitDetail)
        {
            defaultLimitDetailRecId = defaultLimitDetail.RecId;
        }

        return defaultLimitDetailRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCompensationRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new compensation rule for the specified default signing limit detail.
    /// </summary>
    /// <param name="_defaultLimitDetailsRecId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_compensationRecId">
    ///    The record ID of the <c>HcmCompensationLevel</c> table.
    /// </param>
    private void insertCompensationRule
    (
        RefRecId    _defaultLimitDetailsRecId,
        RefRecId    _compensationRecId
    )
    {
        HRPDefaultLimitCompensationRule         defaultLimitCompensationRule;

        defaultLimitCompensationRule.CompensationLevel  = _compensationRecId;
        defaultLimitCompensationRule.DefaultLimitDetail = _defaultLimitDetailsRecId;
        defaultLimitCompensationRule.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefaultLimitDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>HRPDefaultLimitDetail</c> table.
    /// </summary>
    /// <param name="_signingLimitDocumentRecId">
    ///    The record ID of the <c>HRPLimitDocument</c> table.
    /// </param>
    /// <param name="_defaultSigningLimitRule">
    ///    The record ID of the <c>HRPDefaultLimitRule</c> table.
    /// </param>
    /// <param name="_limitBasisType">
    ///    A <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    /// <param name="_limitType">
    ///    A <c>HRPLimitType</c> enumeration value.
    /// </param>
    /// <param name="_amount">
    ///    The amount that is specified for the default signing limit.
    /// </param>
    /// <param name="_currency">
    ///    The currency that is specified for the default signing limit.
    /// </param>
    /// <param name="_description">
    ///    The description that is specified for the default signing limit.
    /// </param>
    /// <returns>
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </returns>
    private RefRecId insertDefaultLimitDetail
    (
        RefRecId            _signingLimitDocumentRecId,
        RefRecId            _defaultSigningLimitRule,
        HRPAuthorityBasis   _limitBasisType,
        HRPLimitType        _limitType,
        AmountCur           _amount,
        CurrencyCode        _currency,
        Description         _description
    )
    {
        HRPDefaultLimitDetail       defaultLimitDetail;

        defaultLimitDetail.DefaultSigningLimitRule = _defaultSigningLimitRule;
        defaultLimitDetail.LimitBasisType          = _limitBasisType;
        defaultLimitDetail.LimitType               = _limitType;
        defaultLimitDetail.SigningLimitDocument    = _signingLimitDocumentRecId;
        defaultLimitDetail.Amount                  = _amount;
        defaultLimitDetail.Currency                = _currency;
        defaultLimitDetail.Description             = _description;
        defaultLimitDetail.insert();

        return defaultLimitDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJobOrCompensationRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a new record into the <c>HRPDefaultLimitJobRule</c> or <c>HRPDefaultLimitCompensationRule</c> table.
    /// </summary>
    /// <param name="_defaultLimitDetailsRecId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_authorityBasis">
    ///    A <c>HRPAuthorityBasis</c> enumeration value.
    /// </param>
    /// <param name="_jobOrCompensationRecId">
    ///    The record ID of the <c>HcmJob</c> or <c>HcmCompensationLevel</c> table based on the authority basis.
    /// </param>
    [Wrappable(true)]
    protected final void insertJobOrCompensationRule
    (
        RefRecId            _defaultLimitDetailsRecId,
        HRPAuthorityBasis   _authorityBasis,
        RefRecId            _jobOrCompensationRecId
    )
    {
        if (_authorityBasis == HRPAuthorityBasis::Job)
        {
            if (this.isNewJobRule(_defaultLimitDetailsRecId, _jobOrCompensationRecId))
            {
                this.insertJobRule(_defaultLimitDetailsRecId, _jobOrCompensationRecId);
            }
        }
        else if (_authorityBasis == HRPAuthorityBasis::Compensation)
        {
            if (this.isNewCompensationRule(_defaultLimitDetailsRecId, _jobOrCompensationRecId))
            {
                this.insertCompensationRule(_defaultLimitDetailsRecId, _jobOrCompensationRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJobRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new job rule for the specified default signing limit detail.
    /// </summary>
    /// <param name="_defaultLimitDetailsRecId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_jobRecId">
    ///    The record ID of the <c>HcmJob</c> table.
    /// </param>
    private void insertJobRule
    (
        RefRecId    _defaultLimitDetailsRecId,
        RefRecId    _jobRecId
    )
    {
        HRPDefaultLimitJobRule defaultLimitJobRule;

        defaultLimitJobRule.Job                 = _jobRecId;
        defaultLimitJobRule.DefaultLimitDetail  = _defaultLimitDetailsRecId;
        defaultLimitJobRule.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewCompensationRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if  the given compensation already exists for an active default signing limit policy rule.
    /// </summary>
    /// <param name="_defaultLimitDetailRecId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_compensationRecId">
    ///    The record ID of the <c>HRPDefaultLimitCompensationRule</c> table.
    /// </param>
    /// <returns>
    ///    true if the compensation does not exist; otherwise, false.
    /// </returns>
    private boolean isNewCompensationRule
    (
        RefRecId    _defaultLimitDetailRecId,
        RefRecId    _compensationRecId
    )
    {
        HRPDefaultLimitCompensationRule defaultLimitCompensationRule;
        boolean                         ret = true;

        select firstonly RecId from defaultLimitCompensationRule
            where defaultLimitCompensationRule.DefaultLimitDetail == _defaultLimitDetailRecId
                && defaultLimitCompensationRule.CompensationLevel == _compensationRecId;

        if (defaultLimitCompensationRule)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewJobRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the given job already exists for an active default signing limit policy rule.
    /// </summary>
    /// <param name="_defaultLimitDetailRecId">
    ///    The record ID of the <c>HRPDefaultLimitDetail</c> table.
    /// </param>
    /// <param name="_jobRecId">
    ///    The record ID of the <c>HRPDefaultLimitJobRule</c> table.
    /// </param>
    /// <returns>
    ///    true if the job does not exist; otherwise, false.
    /// </returns>
    private boolean isNewJobRule
    (
        RefRecId                        _defaultLimitDetailRecId,
        RefRecId                        _jobRecId
    )
    {
        HRPDefaultLimitJobRule          defaultLimitJobRule;
        boolean                         ret = true;

        select firstonly RecId from defaultLimitJobRule
            where defaultLimitJobRule.DefaultLimitDetail == _defaultLimitDetailRecId
                && defaultLimitJobRule.Job == _jobRecId;

        if (defaultLimitJobRule)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>