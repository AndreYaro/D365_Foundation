<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyQuickCreateFormApplicationSuiteEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DirPartyQuickCreateFormApplicationSuiteEventHandlers</c> class defines event handlers
/// for <c>DirPartyQuickCreateForm</c> form events.
/// </summary>
public final class DirPartyQuickCreateFormApplicationSuiteEventHandlers
{
    FormDataSource      dirPartyEntityDataSource;
    FormDataSource      dirPartyTableDataSource;
    FormDataSource      dirPersonNameDataSource;

    boolean             initialized;

    boolean             isCustGroupValueSetOnce;

    FormRun             parentForm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRun">An instance of the form being extended.</param>
    public void new(FormRun _formRun)
    {
        initialized = false;

        parentForm = _formRun;

        // Register this event handlers with the main form
        _formRun.registerExtensionInstance(classStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingFormEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitializing event handler for the <c>DirPartyQuickCreateForm</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(DirPartyQuickCreateForm), FormEventType::Initializing)]
    public static void initializingFormEventHandler(xFormRun _sender, FormEventArgs _e)
    {
        DirPartyQuickCreateFormApplicationSuiteEventHandlers extensionInstance = new DirPartyQuickCreateFormApplicationSuiteEventHandlers(_sender as FormRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedFormEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// The OnInitialized event handler for the <c>DirPartyQuickCreateForm</c> form.
    /// </summary>
    /// <param name="_sender">The instance of the form being extended.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(DirPartyQuickCreateForm), FormEventType::Initialized)]
    public static void initializedFormEventHandler(xFormRun _sender, FormEventArgs _e)
    {
        FormRun formRun = _sender as FormRun;

        DirPartyQuickCreateFormApplicationSuiteEventHandlers extensionInstance = formRun.getExtensionInstance(classStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers));
        extensionInstance.registerInstanceEventHandlers(formRun);

        DirPartyQuickCreateFormApplicationSuiteEventHandlers::handleBusRelAccountSpecialCase(formRun);
        DirPartyQuickCreateFormApplicationSuiteEventHandlers::handleCustTableSpecialCase(formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerInstanceEventHandlers</Name>
				<Source><![CDATA[
    private void registerInstanceEventHandlers(FormRun _formRun)
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        this.retrieveFormDataSources(_formRun);

        this.registerCustTableEventHandlers(_formRun);

        this.registerCustomerServiceEventHandlers(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveFormDataSources</Name>
				<Source><![CDATA[
    private void retrieveFormDataSources(FormRun _formRun)
    {
        dirPartyEntityDataSource    = _formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPartyEntity)) as FormDataSource;
        dirPartyTableDataSource     = _formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPartyTable)) as FormDataSource;
        dirPersonNameDataSource     = _formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPersonName)) as FormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCustTableEventHandlers</Name>
				<Source><![CDATA[
    private void registerCustTableEventHandlers(FormRun _formRun)
    {
        if (dirPartyEntityDataSource.table() == tablenum(CustTable))
        {
            dirPartyEntityDataSource.object(fieldnum(CustTable, CustGroup)).registerOverrideMethod(methodstr(FormDataObject, modified), methodStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers, custGroupModifiedOverride), this);
            dirPartyEntityDataSource.object(fieldnum(CustTable, VATNum)).registerOverrideMethod(methodstr(FormDataObject, jumpRef), methodStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers, VATNumJumpRefOverride), this);

            var controlDetails = _formRun.form().design(1).control(formcontrolstr(DirPartyQuickCreateForm, DynamicDetail));

            for (Integer controlCount=1; controlCount <= controlDetails.controlCount(); controlCount++)
            {
                FormBuildStringControl fbc = controlDetails.controlNum(controlCount) as FormBuildStringControl;

                if (fbc && fbc.dataSource() == dirPartyEntityDataSource.id() && fbc.dataField() == fieldId2Ext(fieldNum(CustTable, VATNum), 1))
                {
                    FormStringControl fsc = _formRun.control(fbc.id()) as FormStringControl;

                    if  (fsc)
                    {
                        fsc.registerOverrideMethod(methodstr(FormStringControl, lookup), methodStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers, VATNumLookupOverride), this);
                    }
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCustomerServiceEventHandlers</Name>
				<Source><![CDATA[
    private void registerCustomerServiceEventHandlers(FormRun _formRun)
    {
        if (_formRun.args() && _formRun.args().caller() && _formRun.args().caller().name() == formStr(MCRCustomerService))
        {
            List controlList = _formRun.controlList();
            var listEnumerator = controlList.getEnumerator();
            FormStringControl nameControl;

            while (listEnumerator.moveNext())
            {
                nameControl = listEnumerator.current() as FormStringControl;
                if (nameControl)
                {
                    if (nameControl.dataSource() == dirPartyTableDataSource.id())
                    {
                        if (nameControl.dataField() == fieldId2Ext(fieldNum(DirPartyTable, Name), 1))
                        {
                            nameControl.registerOverrideMethod(methodstr(FormStringControl, lookup), methodStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers, noOpLookupOverride), this);
                        }
                    }
                    if (nameControl.dataSource() == dirPersonNameDataSource.id())
                    {
                        if (nameControl.dataField() == fieldId2Ext(fieldNum(DirPersonName, FirstName), 1) ||
                            nameControl.dataField() == fieldId2Ext(fieldNum(DirPersonName, MiddleName), 1) ||
                            nameControl.dataField() == fieldId2Ext(fieldNum(DirPersonName, LastName), 1))
                        {
                            nameControl.registerOverrideMethod(methodstr(FormStringControl, lookup), methodStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers, noOpLookupOverride), this);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>custGroupModifiedOverride</Name>
				<Source><![CDATA[
    private void custGroupModifiedOverride(FormDataObject _formDataObject)
    {
        _formDataObject.modified();

        boolean valueModified = CustTable::confirmAndSaveCustGroupChange(dirPartyEntityDataSource.cursor(), isCustGroupValueSetOnce);

        if (valueModified)
        {
            isCustGroupValueSetOnce = true;

            CustTable customer = dirPartyEntityDataSource.cursor() as CustTable;

            if (!customer && customer.CustGroup && CustTable::isDelayNumberSequenceGeneration())
            {
                NumberSeqFormHandler numSeqFormHandler = CustTable::getNumberSeqFormHandler(parentForm, dirPartyEntityDataSource);
                NumberSequenceTable numSequence = NumberSequenceTable::find(numSeqFormHandler.parmNumberSequenceId());
                FormDataObject numberSequenceFormDataObject = numSeqFormHandler.parmFormDataSource().object(numSeqFormHandler.parmFieldIdNum());

                if (numSequence.Manual)
                {
                    numberSequenceFormDataObject.allowEdit(true);
                }
                else
                {
                    numberSequenceFormDataObject.allowEdit(false);
                    numberSequenceFormDataObject.setValue('');
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>VATNumJumpRefOverride</Name>
				<Source><![CDATA[
    private void VATNumJumpRefOverride(FormDataObject _formDataObject)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            TaxVATNumTable::jumpRefVATNum(dirPartyEntityDataSource.cursor(), _formDataObject);
        }
        else
        {
            _formDataObject.jumpRef();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>noOpLookupOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form lookup which does nothing.
    /// </summary>
    /// <param name = "_formStringControl">The <c>FormStringControl</c> control to which to bind the lookup.</param>
    private void noOpLookupOverride(FormStringControl _formStringControl)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>VATNumLookupOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form lookup for the VatNum values.
    /// </summary>
    /// <param name = "_formStringControl">The <c>FormStringControl</c> control to which to bind the lookup.</param>
    private void VATNumLookupOverride(FormStringControl _formStringControl)
    {
        if (TaxVATNumTable::taxVATNumTableEnabled())
        {
            TaxVATNumTable::lookupVATNum(_formStringControl, dirPartyTableDataSource.cursor());
        }
        else
        {
            _formStringControl.lookup();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCustGroupValue</Name>
				<Source><![CDATA[
    private void initializeCustGroupValue()
    {
        isCustGroupValueSetOnce = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdMCRCustTableDataSourceEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic after creating a <c>MCRCustTable</c> record.
    /// </summary>
    /// <param name="_sender">The <c>MCRCustTable</c> data source.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyQuickCreateForm, MCRCustTable), FormDataSourceEventType::Created)]
    public static void createdMCRCustTableDataSourceEventHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        // Show that source is mandatory if source code requires, validateWrite will handle validation.
        if (RetailMCRChannelTable::mcrEnableDirectedSellingFindByUser() && 
            MCROrderParameters::find().mcrSourceCodeRequired)
        {
            _sender.object(fieldNum(MCRCustTable, OrigSourceId)).mandatory(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatingWriteDirPartyTableDataSourceEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic before validating write of <c>DirPartyTable</c> record.
    /// </summary>
    /// <param name="_sender">The <c>DirPartyTable</c> data source.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyQuickCreateForm, DirPartyTable), FormDataSourceEventType::ValidatingWrite)]
    public static void validatingWriteDirPartyTableDataSourceEventHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (RetailMCRChannelTable::mcrEnableDirectedSellingFindByUser() &&
            MCROrderParameters::find().mcrSourceCodeRequired)
        {
            var formRun = _sender.formRun();
            var MCRCustTableDatasource = formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, MCRCustTable)) as FormDataSource;
            var MCRCustTable = MCRCustTableDatasource.cursor() as MCRCustTable;

            if (!MCRCustTable.OrigSourceId)
            {
                throw warning("@MCR11408");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDirPartyTableDataSourceEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the default language from the <c>smmParametersTable</c> to the party when creating a prospect.
    /// </summary>
    /// <param name = "_sender">The <c>DirPartyTable</c> data source.</param>
    /// <param name = "_e">The arguments for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyQuickCreateForm, DirPartyTable), FormDataSourceEventType::InitValue)]
    public static void initValueDirPartyTableDataSourceEventHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        FormRun form = _sender.formRun();
        DirPartyTable dirPartyTable = _sender.cursor();

        // If creating a prospect, and smmParametersTable has a default language specified, then use this default language
        if (form.args().parm() == tableStr(smmBusRelTable))
        {
            LanguageId smmParametersDefaultLanguage = smmParametersTable::find().LanguageId;
            if (smmParametersDefaultLanguage)
            {
                dirPartyTable.LanguageId = smmParametersDefaultLanguage;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDirPartyEntityDataSourceEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic after initializing a generic record from the <c>DirPartyEntity</c> data source.
    /// </summary>
    /// <param name="_sender">The <c>DirPartyEntity</c> data source.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyQuickCreateForm, DirPartyEntity), FormDataSourceEventType::InitValue)]
    public static void initValueDirPartyEntityDataSourceEventHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var formRun = _sender.formRun() as FormRun;

        DirPartyQuickCreateFormApplicationSuiteEventHandlers extensionInstance = formRun.getExtensionInstance(classStr(DirPartyQuickCreateFormApplicationSuiteEventHandlers));
        extensionInstance.initializeCustGroupValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedWriteDirPartyEntityDataSourceEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic after validating write of a generic record from the <c>DirPartyEntity</c> data source.
    /// </summary>
    /// <param name="_sender">The <c>DirPartyEntity</c> data source.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyQuickCreateForm, DirPartyEntity), FormDataSourceEventType::ValidatedWrite)]
    public static void validatedWriteDirPartyEntityDataSourceEventHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        var formRun = _sender.formRun() as FormRun;
        
        DirPartyQuickCreateFormApplicationSuiteEventHandlers::validateNewCustomerAccountNum(formRun, _sender);

        DirPartyQuickCreateFormApplicationSuiteEventHandlers::validateVATNumber(formRun, _sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATNumber</Name>
				<Source><![CDATA[
    [Replaceable]
    public static void validateVATNumber(FormRun _formRun, FormDataSource _dataSource)
    {
        Common callerRecord;

        if (_formRun.args())
        {
            callerRecord = _formRun.args().record();
        }

        if (callerRecord.TableId == tableNum(CustTable) && _dataSource.table() == tableNum(CustTable))
        {
            var custTable = _dataSource.cursor() as CustTable;

            if (custTable.vatNum == '')
            {
                #isoCountryRegionCodes
                MandatoryVATNum mandatoryVATNum = CustParameters::find().MandatoryVATNum;
                var logisticsPostalAddressDataSource = _formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, LogisticsPostalAddress)) as FormDataSource;
                var logisticsPostalAddress = logisticsPostalAddressDataSource.cursor() as LogisticsPostalAddress;

                if (mandatoryVATNum == TaxVATNumCountryRegionType::None ||
                        (logisticsPostalAddress.CountryRegionId == #isoBE   &&
                         SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE])))
                {
                    return;
                }

                if (mandatoryVATNum == TaxVATNumCountryRegionType::EU)
                {
                    if (IntrastatCountryRegionParameters::isCountryRegionStateInEU(logisticsPostalAddress))
                    {
                        throw warning("@SYS54494");
                    }
                }
                if (mandatoryVATNum == TaxVATNumCountryRegionType::DomesticEU)
                {
                    if (IntrastatCountryRegionParameters::isCountryRegionStateInEU(LogisticsPostalAddress) ||
                            IntrastatCountryRegionParameters::isDomestic(LogisticsPostalAddress.CountryRegionId))
                    {
                        throw warning("@SYS54494");
                    }
                }
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNewCustomerAccountNum</Name>
				<Source><![CDATA[
    private static void validateNewCustomerAccountNum(FormRun _formRun, FormDataSource _dataSource)
    {
        Args formArgs = _formRun.args();
        
        if (!formArgs 
            || formArgs.parm() != tableStr(CustTable)
            || formArgs.openMode() != OpenMode::New)
        {
            return;
        }

        CustTable customer = _dataSource.cursor() as CustTable;
        
        if(customer.AccountNum && CustTable::exist(customer.AccountNum))
        {
            throw warning(strFmt("@SalesAndMarketing:DirPartyQuickCreateForm_CustomerAccountAlreadyExists", customer.AccountNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatedWriteLogisticsPostalAddressEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic before validating write of <c>LogisticsPostalAddress</c> record.
    /// </summary>
    /// <param name="_sender">The <c>LogisticsPostalAddress</c> data source.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(DirPartyQuickCreateForm, LogisticsPostalAddress), FormDataSourceEventType::ValidatedWrite)]
    public static void validatedWriteLogisticsPostalAddressEventHandler(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        if (BrazilParameters::isEnabled())
        {
            var logisticsPostalAddress = _sender.cursor() as LogisticsPostalAddress;
            if (!logisticsPostalAddress.City)
            {
                throw warning("@GlobalAddressBook:CityIsMandatoryForTransactionsInABrazilianLegalEntity");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDirPartyTableNameEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic after modifying the <c>Name</c> field of the <c>DirPartyTable</c> record.
    /// </summary>
    /// <param name="_sender">The <c>FormDataObject</c> object for the name.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(DirPartyQuickCreateForm, DirPartyTable, Name), FormDataFieldEventType::Modified)]
    public static void modifiedDirPartyTableNameEventHandler(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        var formRun = _sender.datasource().formRun() as FormRun;
        var dirPartyEntityDataSource    = formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPartyEntity)) as FormDataSource;

        if (formRun.args() && formRun.args().record().TableId == tableNum(CustTable))
        {
            var dirPartyTableDataSource     = formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPartyTable)) as FormDataSource;
            dirPartyEntityDataSource.cursor().setFieldValue(fieldStr(CustTable, vatNum), TaxRegistration::getPrimaryRegistrationNumber(dirPartyTableDataSource.cursor(), TaxRegistrationTypesList::TAXID));
        }

        if (dirPartyEntityDataSource.table() == tableNum(CustTable))
        {
            dirPartyEntityDataSource.cursor().modifiedField(fieldNum(CustTable, Party));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingFormEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic before closing the form.
    /// </summary>
    /// <param name="_sender">The form instance.</param>
    /// <param name="_e">The arguments for the event.</param>
    [FormEventHandler(formStr(DirPartyQuickCreateForm), FormEventType::Closing)]
    public static void closingFormEventHandler(xFormRun _sender, FormEventArgs _e)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            var formRun                     = _sender as FormRun;
            var dirPartyEntityDataSource    = formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPartyEntity)) as FormDataSource;

            if (dirPartyEntityDataSource.cursor().RecId && dirPartyEntityDataSource.table() == tableNum(CustTable))
            {
                var custTable = dirPartyEntityDataSource.cursor() as CustTable;
                MCRFullTextSearch::update(custTable);

                var mcrCustTableConfigure = new MCRCustTableConfigure();
                mcrCustTableConfigure.parmCustAccount(custTable.AccountNum);
                formRun.args().parmObject(mcrCustTableConfigure);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingRoleFromExistingPartyEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the the party role the calling record.
    /// </summary>
    /// <param name = "_sender">The <c>DirPartyEntity</c> data source.</param>
    [SubscribesTo(formStr(DirPartyQuickCreateForm), delegateStr(DirPartyQuickCreateForm, onInitializingRoleFromExistingParty))]
    public static void initializingRoleFromExistingPartyEventHandler(FormDataSource _sender)
    {
        var     formRun = _sender.formRun() as FormRun;
        Common  callerRecord;

        if (formRun.args())
        {
            callerRecord = formRun.args().record();
        }

        // If called by Lead or Opportunity, initialize dirpartyentity field values
        smmCreateEntity::initFromCommon(callerRecord, _sender.cursor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDirPersonNamesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic when the name of an existing person has been modified.
    /// </summary>
    /// <param name = "_sender">The <c>DirPerson</c> data source.</param>
    [SubscribesTo(formStr(DirPartyQuickCreateForm), delegateStr(DirPartyQuickCreateForm, onDirPersonNamesModifiedForExistingPerson))]
    public static void modifiedDirPersonNamesEventHandler(FormDataSource _sender)
    {
        var formRun                     = _sender.formRun() as FormRun;
        var dirPartyEntityDataSource    = formRun.dataSource(formDataSourceStr(DirPartyQuickCreateForm, DirPartyEntity)) as FormDataSource;

        if (BrazilParameters::isEnabled())
        {
            FieldId partyFieldId = DirParty::getPartyFieldId(dirPartyEntityDataSource.table());
            if (partyFieldId)
            {
                dirPartyEntityDataSource.cursor().modifiedField(partyFieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hideSaveAndOpenButtonEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic to hide the Save and Open button.
    /// </summary>
    /// <param name = "_formRun">The form instance</param>
    /// <param name = "_hideButtonResult">The <c>EventHandlerResult</c> object containing the result from the subscribing event handlers.</param>
    [SubscribesTo(formStr(DirPartyQuickCreateForm), delegateStr(DirPartyQuickCreateForm, onSaveAndOpenButtonHidden))]
    public static void hideSaveAndOpenButtonEventHandler(FormRun _formRun, EventHandlerResult _hideButtonResult)
    {
        if (_formRun.args() && _formRun.args().caller() && _formRun.args().caller().name() == formStr(MCRCustSearch))
        {
            _hideButtonResult.booleanResult(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableInstantCreateEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes Application Suite specific logic to enable instant creation of the party role.
    /// </summary>
    /// <param name = "_formRun">The form instance</param>
    /// <param name = "_enableInstanceCreate">The <c>EventHandlerResult</c> object containing the result from the subscribing event handlers.</param>
    [SubscribesTo(formStr(DirPartyQuickCreateForm), delegateStr(DirPartyQuickCreateForm, onEnablingInstantCreate))]
    public static void enableInstantCreateEventHandler(FormRun _formRun, EventHandlerResult _enableInstanceCreate)
    {
        if (_formRun.args() && _formRun.args().caller() && _formRun.args().caller().name() == formStr(MCRCustSearch))
        {
            _enableInstanceCreate.booleanResult(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleBusRelAccountSpecialCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// BusRelAccount has a formhelp as a legacy code that might be used in many areas of the app.
    /// The formhelp launches a lookup in case not overriden on the form.
    /// </summary>
    /// <param name = "_formRun">The current <c>FormRun</c> object.</param>
    private static void handleBusRelAccountSpecialCase(FormRun _formRun)
    {
        FormStringControl quickCreateHeader_BusRelAccount;

        quickCreateHeader_BusRelAccount = _formRun.control(_formRun.controlId('quickCreateHeader_BusRelAccount'));
        if (quickCreateHeader_BusRelAccount)
        {
            quickCreateHeader_BusRelAccount.lookupButton(1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCustTableSpecialCase</Name>
				<Source><![CDATA[
    /// <summary>
    /// 'Marketing_OrigSourceId' field is shown for CustTable
    /// </summary>
    /// <param name = "_formRun">The current <c>FormRun</c> object.</param>
    private static void handleCustTableSpecialCase(FormRun _formRun)
    {
        if (_formRun.args() && _formRun.args().record().TableId == tableNum(CustTable))
        {
            FormStringControl quickCreateCust_OrigSourceId;
            quickCreateCust_OrigSourceId = _formRun.control(_formRun.controlId('Marketing_OrigSourceId'));
            if (quickCreateCust_OrigSourceId)
            {
                quickCreateCust_OrigSourceId.visible(true);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>