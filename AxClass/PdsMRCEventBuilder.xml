<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsMRCEventBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the event builder for Material regalatory complice (MRC)
/// </summary>
class PdsMRCEventBuilder
{
    UserId              recipient;
    TableId             tableId;
    FieldId             fieldId;
    IdentifierName      formName;
    ClassId             eventTypeId;
    EventTypeTrigger    eventTrigger;
    str                 message;
    str                 subject;
    anytype             xValue;
    EventRule           eventRule;
    PdsMRCEventModule   eventModule;
    QueryBuildRange     documentRange;
    FieldId             filterFieldId;
    str                 filterValue;
    EventRuleCondition  eventRuleCondition;
    PdsMRCEventType     mrcEventType;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the basic event rule and returns it.
    /// </summary>
    /// <returns>EventRule that was created and built in the method.</returns>
    public EventRule build()
    {
        Query                   query;
        List                    actions = new List(Types::String);
        EventType               eventType;
        EventAlertField         eventAlertField;
        EventContextInformation eci;

        actions.addEnd(classStr(EventActionAlert));

        eventAlertField = EventAlertField::construct();
        eventAlertField.parmAlertField(this.buildEventAlertField());

        eci                         = this.buildEventContextInformation(this.buildEventAlertField());
        eventType                   = this.buildEventType();

        ttsbegin;
        if (!eventRule.RecId)
        {
            eventRule.clear();
        }
        else
        {
            eventRule               = EventRule::find(eventRule.RuleId,true);
            eventAlertField         = eventRule.alertField();
            eventType               = this.buildEventType();
        }

        eventRule.Enabled           = NoYes::Yes;
        eventRule.UserId            = recipient;
        eventRule.ActionNames       = actions.pack();

        eventRule.PrimTableId       = tableName2id(eventAlertField.parmAlertField().RefTableName);
        eventRule.AlertTableId      = tableName2id(eventAlertField.parmAlertField().RefTableName);
        eventRule.AlertFieldId      = fieldName2id(eventRule.AlertTableId, eventAlertField.parmAlertField().RefFieldName);
        eventRule.AlertQbdsNo       = 1;
        eventRule.FormName          = formName;
        eventRule.IsAggregated      = NoYes::No;

        eventRule.AlertFieldLabel   = eventAlertField.parmAlertField().Label;
        eventRule.TypeId            = eventTypeId;
        eventRule.TypeTrigger       = eventType.parmTypeTrigger();
        eventRule.RuleCondition     = eventRuleCondition;
        eventRule.Until             = EventUntil::Always;

        eventRule.Message           = message;
        eventRule.Subject           = subject;

        query                       = this.buildQuery();

        if (!eventRule.RecId)
        {
            eventRule.insert();
            eventType.setRule(eventRule);
            eventRule.typeValue(eventType.pack());
            eventRule.filterQuery(query);
            eventRule.alertField(eventAlertField);
            eci.setEventRuleId(eventRule.RuleId);
            eventRule.contextInfo(eci.pack());
        }
        else
        {
            eventRule.update();
        }
        ttscommit;

        return eventRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEventAlertField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the alert field based on the data gathered in the
    /// MRCEventTracker form.
    /// </summary>
    /// <returns>TmpEventAlertField record that was created.</returns>
    protected TmpEventAlertField buildEventAlertField()
    {
        TmpEventAlertField          alertField;
        EventBuildValidAlertFields  eventAlertField;
        FormRun                     fr;
        FormObjectSet               ds;
        int                         i;

        fr = this.getAlertFieldFormRun();

        for (i = 1; i <= fr.dataSourceCount(); i++)
        {
            if (fr.dataSource(i).cursor().TableId == tableId)
            {
                ds = fr.dataSource(i);
                break;
            }
        }

        // need to keep the source of the temp table around
        eventAlertField = EventBuildValidAlertFields::newFormDataSource(fr, ds);
        alertField      = eventAlertField.parmTmpEventAlertField();

        if (fieldId)
        {
            select alertField
                where  alertField.RefTableName == tableId2name(tableId)
                    && alertField.RefFieldName == fieldId2name(tableId, fieldId);
        }

        return alertField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEventContextInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds event context information based on the TmpEventAlertField parameter and info gathered on the MRCEventTracker form.
    /// </summary>
    /// <param name="_fld">TmpEventAlertField record that the EventContextInformation is build around.</param>
    /// <returns>new eventContextInformation record that was created.</returns>
    protected EventContextInformation buildEventContextInformation(TmpEventAlertField _fld)
    {
        EventContextInformation eci;
        FormRun                 fr;
        int                     i;
        FormObjectSet           ds;
        FormControl             fieldControl;

        fr = this.getAlertFieldFormRun();

        for (i = 1; i <= fr.dataSourceCount(); i++)
        {
            if (fr.dataSource(i).cursor().TableId == tableId)
            {
                ds = fr.dataSource(i);
                break;
            }
        }

        if (!ds)
        {
            warning("@PDS913");
            return null;
        }

        if (_fld.ControlId)
        {
            fieldControl = fr.control(_fld.ControlId);
        }

        eci = EventContextInformation::construct();
        eci.parmPackedArgs(fr.args());
        eci.parmFormRun(fr);
        eci.parmAlertFormDsName(ds ? ds.name() : '');
        eci.parmFormControlName(fieldControl ? fieldControl.name() : '');

        return eci;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and returns a new instance of the EventType class based on the global variables eventTypeid and eventTrigger.
    /// </summary>
    /// <returns>New EventType that was instantiated in the method.</returns>
    protected EventType buildEventType()
    {
        EventType   eventType;

        eventType = EventType::construct(eventTypeId, eventTrigger);

        return eventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method builds the query of events
    /// </summary>
    /// <returns>returns query</returns>
    public Query buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        QueryBuildRange         moduleRange;

        query = new Query();
        qbds = query.addDataSource(tableId);

        if (eventModule)
        {
            moduleRange = qbds.addRange(fieldNum(PdsMRCEventTracker, EventModule));
            moduleRange.value(enum2str(eventModule));
        }
        if (mrcEventType)
        {
            qbds.addRange(fieldNum(PdsMRCEventTracker, EventType)).
                value(queryValue(mrcEventType));
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAlertFieldFormRun</Name>
				<Source><![CDATA[
    private FormRun getAlertFieldFormRun()
    {
        Args            args;
        FormRun         fr;
        SysGlobalCache  globalCache = classfactory.globalCache();
        str             owner = classStr(PdsMRCEventBuilder);

        fr = globalCache.get(owner, formName, fr);

        if (!fr)
        {
            args = new Args(formName);
            fr = ClassFactory::formRunClassOnClient(args);
            fr.init();
            globalCache.set(owner, formName, fr);
        }

        return fr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        recipient           = curUserId();
        eventRuleCondition  = EventRuleCondition::All;
        formName            = formStr(PdsMRCEventTracker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event module
    /// </summary>
    /// <param name="_eventModule">event module</param>
    /// <returns>returns event module</returns>
    public PdsMRCEventModule parmEventModule(PdsMRCEventModule _eventModule = eventModule)
    {
        if (!prmisDefault(_eventModule))
        {
            eventModule = _eventModule;
            eventRuleCondition = EventRuleCondition::Custom;
        }

        return eventModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventTrigger</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event trigger
    /// </summary>
    /// <param name="_eventTrigger">event trigger</param>
    /// <returns>returns event trigger</returns>
    public EventTypeTrigger parmEventTrigger(EventTypeTrigger _eventTrigger = eventTrigger)
    {
        if (!prmisDefault(_eventTrigger))
        {
            eventTrigger = _eventTrigger;
        }

        return eventTrigger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event type
    /// </summary>
    /// <param name="_eventType">event type</param>
    /// <returns>returns event type</returns>
    public PdsMRCEventType parmEventType(PdsMRCEventType _eventType = mrcEventType)
    {
        if (!prmisDefault(_eventType))
        {
            mrcEventType = _eventType;
        }

        return mrcEventType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEventTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event type id (classId)
    /// </summary>
    /// <param name="_eventTypeId">event type id</param>
    /// <returns>returns event type id</returns>
    public ClassId parmEventTypeId(ClassId _eventTypeId = eventTypeId)
    {
        if (!prmisDefault(_eventTypeId))
        {
            eventTypeId = _eventTypeId;
        }

        return eventTypeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the field related to the event
    /// </summary>
    /// <param name="_fieldId">Field id</param>
    /// <returns>returns field id</returns>
    public FieldId parmFieldId(FieldId _fieldId = fieldId)
    {
        if (!prmisDefault(_fieldId))
        {
            fieldId = _fieldId;
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the form name related to the event
    /// </summary>
    /// <param name="_formName">form name</param>
    /// <returns>returns form name</returns>
    public IdentifierName parmFormName(IdentifierName _formName = formName)
    {
        if (!prmisDefault(_formName))
        {
            formName = _formName;
        }

        return formName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event message
    /// </summary>
    /// <param name="_message">event message</param>
    /// <returns>returns event message</returns>
    public str parmMessage(str _message = message)
    {
        if (!prmisDefault(_message))
        {
            message = _message;
        }

        return message;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecipient</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event recepient
    /// </summary>
    /// <param name="_recipient">event recepient</param>
    /// <returns>returns event recepient</returns>
    public UserId parmRecipient(UserId _recipient = recipient)
    {
        if (!prmisDefault(_recipient))
        {
            recipient = _recipient;
        }

        return recipient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubject</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event subject
    /// </summary>
    /// <param name="_subject">event subject</param>
    /// <returns>returns event subject</returns>
    public str parmSubject(str _subject = subject)
    {
        if (!prmisDefault(_subject))
        {
            subject = _subject;
        }

        return subject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the event table Id related to event
    /// </summary>
    /// <param name="_tableId">event table id</param>
    /// <returns>returns event table id</returns>
    public TableId parmTableId(TableId _tableId = tableId)
    {
        if (!prmisDefault(_tableId))
        {
            tableId = _tableId;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PdsMRCEventBuilder construct()
    {
        return new PdsMRCEventBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>