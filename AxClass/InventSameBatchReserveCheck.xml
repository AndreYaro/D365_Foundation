<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSameBatchReserveCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventSameBatchReserveCheck</c> class is responsible for verification of whether it's
/// possible to reserve an inventory movement that has same batch reservation requirements.
/// </summary>
class InventSameBatchReserveCheck implements InventISameBatchReserveCheck
{
    // Parameters of the check

    InventMovement                      movement;
    InventDim                           inventDimRequested;
    InventDimParm                       inventDimParmRequested;
    boolean                             showInfo;

    // Intermediate results

    boolean                             alreadyReservedBatchCached;
    InventBatch                         alreadyReservedBatch;

    boolean                             requestedBatchCached;
    InventBatch                         requestedBatch;

    boolean                             batchCriteriaCached;
    InventBatch                         batchCriteria;

    InventAvailableQtyCriteria          availableQtyCriteria;
    InventReservationCriteriaBuilder    criteriaBuilder;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>alreadyReservedBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the batch that has already been reserved for the inventory movement.
    /// </summary>
    /// <returns>
    /// The batch that has already been reserved for the inventory movement.
    /// </returns>
    public InventBatch alreadyReservedBatch()
    {
        if (!alreadyReservedBatchCached)
        {
            alreadyReservedBatch = movement.pdsSameLotReservationBatch();
            alreadyReservedBatchCached = true;
        }

        return alreadyReservedBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the specific batch that has to be reserved based on the parameters of the reservation check.
    /// </summary>
    /// <returns>
    /// The specific batch that has to be reserved based on the parameters of the reservation check.
    /// </returns>
    /// <remarks>
    /// In some cases batch criteria is empty which means
    /// that any single batch that satisfies the reservation check parameters can be selected.
    /// </remarks>
    public InventBatch batchCriteria()
    {
        if (!batchCriteriaCached)
        {
            batchCriteria = this.findBatchCriteria();
            batchCriteriaCached = true;
        }

        return batchCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAvailableQtyCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the criteria for the quantity that has to be available for the reservation check to succeed.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventAvailableQtyCriteria</c>.
    /// </returns>
    public InventAvailableQtyCriteria calculateAvailableQtyCriteria()
    {
        InventAvailableQtyCriteria result = new InventAvailableQtyCriteria();
        result.parmReserveOnOrdered(InventParameters::find().ReserveOnOrdered);

        InventMovement movement_Orig = InventMovement::construct(movement.buffer().orig());
        result.parmQty(movement.autoReserveQty(movement_Orig));

        result.parmIsCWItem(movement.pdsCWItem());
        result.parmCWQty(movement.pdsCWAutoReserveQty(movement_Orig));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFailed</Name>
				<Source><![CDATA[
    private void checkFailed(str _message)
    {
        if (showInfo)
        {
            checkFailed(_message);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequestedBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the requested batch does not have any conflicts
    /// with the batch that has already been reserved for the movement.
    /// </summary>
    /// <returns>
    /// true if there are no conflicts; otherwise, false.
    /// </returns>
    public boolean checkRequestedBatch()
    {
        if (this.alreadyReservedBatch().InventBatchId
            && this.requestedBatch().inventBatchId
            && this.alreadyReservedBatch().InventBatchId != this.requestedBatch().inventBatchId)
        {
            this.checkFailed(strFmt("@PDS980",
                             this.alreadyReservedBatch().InventBatchId,
                             this.requestedBatch().inventBatchId));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAvailableBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the batch that satisfies the parameters of the check.
    /// </summary>
    /// <returns>
    /// The batch that satisfies the parameters of the check.
    /// </returns>
    public InventBatch findAvailableBatch()
    {
        InventBatch     availableBatch;

        InventDimParm   selectedDimParm, groupByDimParm;

        ItemId itemId = movement.itemId();

        selectedDimParm.initFromInventDim(inventDimRequested);
        selectedDimParm.ItemIdFlag = NoYes::Yes;

        groupByDimParm.InventBatchIdFlag = NoYes::Yes;

        InventOnHandCompositeCriteria compositeCriteria = this.parmCriteriaBuilder().buildCriteria();
        Query query = InventSum::pdsSameLotQuery(itemId, inventDimRequested, selectedDimParm, groupByDimParm, InventDim::dimFieldsList());
        compositeCriteria.applyToOnHand(query);

        QueryRun queryRun = new QueryRun(query);
        while (queryRun.next() && !availableBatch.RecId)
        {
            InventSum inventSum = queryRun.get(tableNum(InventSum));
            InventDim inventSumDim = queryRun.get(tableNum(InventDim));
            InventSumAvailability inventSumAvailability = InventSumAvailability::newFromInventSum(inventSum);

            if (this.parmAvailableQtyCriteria().isMetByInventAvailability(InventAvailabilityByUnit::newFromParms(inventSumAvailability, inventSumAvailability))
                && compositeCriteria.isMatchedByInventDim(inventSumDim))
            {
                availableBatch = InventBatch::find(inventSumDim.InventBatchId, itemId);
            }
        }

        return availableBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specific batch that has to be reserved based on the parameters of the reservation check.
    /// </summary>
    /// <returns>
    /// The specific batch that has to be reserved based on the parameters of the reservation check.
    /// </returns>
    /// <remarks>
    /// In some cases batch criteria is empty which means
    /// that any single batch that satisfies the reservation check parameters can be selected.
    /// </remarks>
    public InventBatch findBatchCriteria()
    {
        return this.alreadyReservedBatch() ? this.alreadyReservedBatch() : this.requestedBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRequestedBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the requested batch based on the requested inventory dimensions parameter of the check.
    /// </summary>
    /// <returns>
    /// The requested batch based on the requested inventory dimensions parameter of the check.
    /// </returns>
    public InventBatch findRequestedBatch()
    {
        InventBatch inventBatch;

        if (inventDimParmRequested.InventBatchIdFlag)
        {
            inventBatch = InventBatch::find(inventDimRequested.inventBatchId, movement.itemId());
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the specified batch is available based on the parameters of the check.
    /// </summary>
    /// <param name="_batch">
    /// An inventory batch.
    /// </param>
    /// <returns>
    /// true if the specified batch is available; otherwise, false.
    /// </returns>
    public boolean isBatchAvailable(InventBatch _batch)
    {
        inventDimRequested.InventBatchId         = _batch.InventBatchId;
        inventDimParmRequested.InventBatchIdFlag = true;

        return this.findAvailableBatch().RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAvailableQtyCriteria</Name>
				<Source><![CDATA[
    public InventAvailableQtyCriteria parmAvailableQtyCriteria(InventAvailableQtyCriteria _availableQtyCriteria = availableQtyCriteria)
    {
        if (prmisDefault(_availableQtyCriteria) && !availableQtyCriteria)
        {
            availableQtyCriteria = this.calculateAvailableQtyCriteria();
        }
        else if (!prmisDefault(_availableQtyCriteria))
        {
            availableQtyCriteria = _availableQtyCriteria;
        }

        return availableQtyCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriteriaBuilder</Name>
				<Source><![CDATA[
    public InventReservationCriteriaBuilder parmCriteriaBuilder(
        InventReservationCriteriaBuilder _criteriaBuilder = null)
    {
        if (!prmisDefault(_criteriaBuilder))
        {
            criteriaBuilder = _criteriaBuilder;
        }
        else if (!criteriaBuilder)
        {
            criteriaBuilder = InventReservationCriteriaBuilder::newMovement(this.parmMovement());
        }

        return criteriaBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmRequested</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmRequested(InventDimParm _inventDimParmRequested = inventDimParmRequested)
    {
        inventDimParmRequested = _inventDimParmRequested;
        return inventDimParmRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimRequested</Name>
				<Source><![CDATA[
    public InventDim parmInventDimRequested(InventDim _inventDimRequested = inventDimRequested)
    {
        inventDimRequested = _inventDimRequested;
        return inventDimRequested;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    public InventMovement parmMovement(InventMovement _movement = movement)
    {
        movement = _movement;
        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowInfo</Name>
				<Source><![CDATA[
    public boolean parmShowInfo(boolean _showInfo = showInfo)
    {
        showInfo = _showInfo;
        return showInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestedBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the requested batch based on the requested inventory dimensions parameter of the check.
    /// </summary>
    /// <returns>
    /// The requested batch based on the requested inventory dimensions parameter of the check.
    /// </returns>
    public InventBatch requestedBatch()
    {
        if (!requestedBatchCached)
        {
            requestedBatch = this.findRequestedBatch();
            requestedBatchCached = true;
        }

        return requestedBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the same batch reservation check.
    /// </summary>
    /// <returns>
    /// The result of the check, a <c>PdsSameLotError</c> value.
    /// </returns>
    public PdsSameLotError run()
    {
        if (!this.checkRequestedBatch())
        {
            return PdsSameLotError::InvalidBatch;
        }

        if (this.parmAvailableQtyCriteria().isAlwaysMet())
        {
            return PdsSameLotError::None;
        }

        PdsSameLotError result = PdsSameLotError::None;

        InventBatch batchToReserve = this.batchCriteria();
        if (batchToReserve)
        {
            if (!this.isBatchAvailable(batchToReserve))
            {
                this.checkFailed(strFmt("@PDS1011", batchToReserve.InventBatchId));
                result = PdsSameLotError::NoInventory;
            }
        }
        else
        {
            batchToReserve = this.findAvailableBatch();

            if (!batchToReserve)
            {
                this.checkFailed("@PDS1012");
                result = PdsSameLotError::NoBatch;
            }
        }

        if (batchToReserve)
        {
            inventDimRequested.InventBatchId = batchToReserve.InventBatchId;
            inventDimParmRequested.InventBatchIdFlag = NoYes::Yes;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSameBatchReserveCheck construct()
    {
        return new InventSameBatchReserveCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the same batch reservation check class.
    /// </summary>
    /// <param name="_movement">
    /// The inventory movement for which the reservation is being requested.
    /// </param>
    /// <param name="_inventDimRequested">
    /// The inventory dimension from which the reservation is being requested.
    /// </param>
    /// <param name="_inventDimParmRequested">
    /// The flags for the inventory dimension values.
    /// </param>
    /// <param name="_showInfo">
    /// A Boolean value that indicates whether the message should be shown in the information log; optional.
    /// </param>
    /// <returns>
    /// A new instance of the same batch reservation check class based on the specified parameters.
    /// </returns>
    public static InventISameBatchReserveCheck newFromDim(
        InventMovement  _movement,
        InventDim       _inventDimRequested,
        InventDimParm   _inventDimParmRequested,
        boolean         _showInfo = true)
    {
        if (!_movement.pdsSameLotReservation())
        {
            return new InventSameBatchReserveNoCheck();
        }

        InventSameBatchReserveCheck result = _movement.isItemWHSEnabled() ? WHSInventSameBatchReserveCheck::construct() : InventSameBatchReserveCheck::construct();

        result.parmMovement(_movement);
        result.parmInventDimRequested(_inventDimRequested);
        result.parmInventDimParmRequested(_inventDimParmRequested);
        result.parmShowInfo(_showInfo);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the same batch reservation check class.
    /// </summary>
    /// <param name="_movement">
    /// The inventory movement for which the reservation is being requested.
    /// </param>
    /// <param name="_showInfo">
    /// A Boolean value that indicates whether the message should be shown in the information log; optional.
    /// </param>
    /// <returns>A new instance of the same batch reservation check class</returns>
    public static InventISameBatchReserveCheck newFromMovement(
        InventMovement  _movement,
        boolean         _showInfo = true)
    {
        InventDim                   inventDimRequested;
        InventDimParm               inventDimParmRequested;

        _movement.pdsInitDim(inventDimRequested, inventDimParmRequested);

        return InventSameBatchReserveCheck::newFromDim(_movement, inventDimRequested, inventDimParmRequested, _showInfo);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
