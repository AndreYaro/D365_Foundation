<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransDateSet_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransDateSet_RU extends RunBaseBatch implements BatchRetryable
{
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalEngine ledgerJournalEngine;

    TransDate           transDate;
    DialogField         dialogTransDate;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        transDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialogTransDate = dialog.addFieldValue(extendedtypestr(TransDate), transDate, "@GLS109297");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            transDate = dialogTransDate.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalEngine</Name>
				<Source><![CDATA[
    protected LedgerJournalEngine parmLedgerJournalEngine(LedgerJournalEngine _ledgerJournalEngine)
    {
        ;
        ledgerJournalEngine = _ledgerJournalEngine;

        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        ;
        ledgerJournalTrans = _ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        ;
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        FormDataSource     ledgerJournalTrans_ds;
        LedgerJournalTrans ledgerJournalTransUpdate, ledgerJournalTransRecord;
        ;

        #OCCRetryCount

        if (! this.validate())
        {
            throw error("@SYS18738");
        }

        try
        {
            ledgerJournalTrans_ds = FormDataUtil::getFormDataSource(ledgerJournalTrans);

            ttsbegin;

            if (ledgerJournalTrans_ds && ! ledgerJournalTrans.ledgerJournalTable().ledgerJournalName().MandatoryDate_RU)
            {
                ledgerJournalTransRecord = ledgerJournalTrans_ds.getFirst(1);
                if (! ledgerJournalTransRecord)
                {
                    ledgerJournalTransRecord = ledgerJournalTrans_ds.getFirst(0);
                }

                while (ledgerJournalTransRecord)
                {
                    ledgerJournalTransUpdate           = LedgerJournalTrans::findRecId(ledgerJournalTransRecord.RecId, true);
                    ledgerJournalTransUpdate.TransDate = transDate;

                    ledgerJournalEngine.transDateModified(ledgerJournalTransUpdate);

                    ledgerJournalTransUpdate.update();

                    ledgerJournalTransRecord = ledgerJournalTrans_ds.getNext();
                }
            }
            else
            {
                while select forupdate ledgerJournalTransUpdate
                    where ledgerJournalTransUpdate.JournalNum == ledgerJournalTrans.JournalNum
                {
                    ledgerJournalTransUpdate.TransDate = transDate;

                    ledgerJournalEngine.transDateModified(ledgerJournalTransUpdate);

                    ledgerJournalTransUpdate.update();
                }
            }

            ttscommit;

            if (ledgerJournalTrans_ds)
            {
                ledgerJournalTrans_ds.research();
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer   version = conpeek(_packedClass,1);
        boolean   ret = true;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean             ret;
        LedgerJournalTable  ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        ret = super(_calledFrom);

        if (! transDate)
        {
            ret = checkFailed("@SYS24455");
        }

        if (ledgerJournalTable.Posted)
        {
            ret = checkFailed(strfmt("@SYS18421", ledgerJournalTable.JournalNum));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerJournalTransDateSet_RU construct()
    {
        return new LedgerJournalTransDateSet_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS62336";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJournalTransDateSet_RU ledgerJournalTransDateSet;
        LedgerJournalTrans           ledgerJournalTrans, ledgerJournalTransCount;
        LedgerJournalEngine          ledgerJournalEngine;
        Object                       formRun;
        ;

        if (! _args.caller())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ledgerJournalTrans = _args.record();
        formRun            = _args.caller();

        select count(RecId) from ledgerJournalTransCount
            where ledgerJournalTransCount.JournalNum == ledgerJournalTrans.JournalNum;

        if (! ledgerJournalTransCount.RecId)
        {
            throw error("@GLS113710");
        }

        if (formHasMethod(formRun, identifierstr(ledgerJournalEngine)))
        {
            ledgerJournalEngine = formRun.ledgerJournalEngine();
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        ledgerJournalTransDateSet = LedgerJournalTransDateSet_RU::newFromForm(ledgerJournalTrans, ledgerJournalEngine);

        if (ledgerJournalTransDateSet.prompt())
        {
            ledgerJournalTransDateSet.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static LedgerJournalTransDateSet_RU newFromForm(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalEngine _ledgerJournalEngine)
    {
        LedgerJournalTransDateSet_RU ledgerJournalTransDateSet;

        ledgerJournalTransDateSet = LedgerJournalTransDateSet_RU::construct();

        ledgerJournalTransDateSet.parmLedgerJournalTrans(_ledgerJournalTrans);
        ledgerJournalTransDateSet.parmLedgerJournalEngine(_ledgerJournalEngine);

        return ledgerJournalTransDateSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>