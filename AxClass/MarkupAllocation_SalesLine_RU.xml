<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocation_SalesLine_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
[MarkupAllocationTableNameFactoryAttribute(tableStr(SalesTable))]
public class MarkupAllocation_SalesLine_RU extends MarkupAllocation
{
    SalesLine  salesLine;
    boolean    isTmpTablePopulated;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initMarkupTransFromLine</Name>
				<Source><![CDATA[
    protected void initMarkupTransFromLine()
    {
        markupTrans.initFromSalesLine(salesLine);
        markupTrans.ModuleCategory = HeadingLine::Line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    protected void initValues()
    {
        SalesTable  salesTable;
        salesTable = source;
        salesId = salesTable.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>QueryRun</c> object to use to determine which sales order lines are the target
    ///    of the allocation.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object that has the appropriate query ranges applied.
    /// </returns>
    public QueryRun  queryBuild()
    {
        QueryRun                    query;
        VendInvoiceTrans            vendInvoiceTrans;

        this.initValues();

        query                                                           = new QueryRun(querystr(SalesLine));
        QueryBuildDataSource queryBuildDataSourceSalesLine              = query.query().dataSourceTable(tablenum(SalesLine));
        QueryBuildDataSource queryBuildDataSourceMarkupTmpAllocaiton;

        queryBuildDataSourceSalesLine.rangeField(fieldnum(SalesLine, SalesId)).value(queryValue(salesId));
        queryBuildDataSourceSalesLine.addRange(fieldnum(SalesLine, LineDeliveryType)).value(SysQuery::valueNot(LineDeliveryType::OrderLineWithMultipleDeliveries));
        if (allocationRecIds != null && allocationRecIds.elements())
        {
            if (!isTmpTablePopulated)
            {
                this.populateMarkupTmpAllocation();
                isTmpTablePopulated = true;
            }
            queryBuildDataSourceMarkupTmpAllocaiton = queryBuildDataSourceSalesLine.addDataSource(markupTmpAllocation);
            query.setRecord(markupTmpAllocation);
            queryBuildDataSourceMarkupTmpAllocaiton.addLink(fieldNum(SalesLine, RecId), fieldNum(MarkupTmpAllocation, MarkupAllocationRecId));
            queryBuildDataSourceMarkupTmpAllocaiton.joinMode(JoinMode::ExistsJoin);
        }

        if (allocateInventoried == true)
        {
            queryBuildDataSourceSalesLine.addRange(fieldNum(SalesLine, StockedProduct)).value(enum2str(NoYes::Yes));
        }

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                while select InvoiceId, InvoiceDate, InterCompanyInventTransId from vendInvoiceTrans
                      where vendInvoiceTrans.InvoiceId   == interCompanyInvoiceId
                      &&    vendInvoiceTrans.InvoiceDate == interCompanyInvoiceDate
                {
                    queryBuildDataSourceSalesLine.addRange(fieldNum(SalesLine, InventTransId)).value(queryValue(vendInvoiceTrans.InterCompanyInventTransId));
                }
            }
        }
        else
        {
            queryBuildDataSourceSalesLine.addRange(fieldNum(SalesLine, SalesStatus)).value(strFmt('%1','..' + enum2str(SalesStatus::Delivered)));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    public Common queryGet(QueryRun transact)
    {
        salesLine = transact.get(tablenum(SalesLine));

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocation_SalesLine_RU construct()
    {
        return new MarkupAllocation_SalesLine_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the line amount of sales line item.
    /// </summary>
    /// <returns>
    /// The line amount of sales line item.
    /// </returns>
    AmountCur  lineAmount()
    {
        AmountCur           lineAmount;
        VendInvoiceTrans    vendInvoiceTrans;

        lineAmount = salesLine.LineAmount;

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                select firstonly InvoiceId, InvoiceDate, InterCompanyInventTransId, Qty from vendInvoiceTrans
                       where vendInvoiceTrans.InvoiceId                 == interCompanyInvoiceId
                       &&    vendInvoiceTrans.InvoiceDate               == interCompanyInvoiceDate
                       &&    vendInvoiceTrans.InterCompanyInventTransId == salesLine.InventTransId;
            }

            if (vendInvoiceTrans.Qty)
            {
                lineAmount = salesLine.calcLineAmount(vendInvoiceTrans.Qty);
            }
        }

        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the qty of sales line item.
    /// </summary>
    /// <returns>
    /// The qty of sales line item.
    /// </returns>
    Qty  qty()
    {
        Qty                 qty;
        VendInvoiceTrans    vendInvoiceTrans;
        
        qty = SalesLine.SalesQty;

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                select firstonly InvoiceId, InvoiceDate, InterCompanyInventTransId, Qty from vendInvoiceTrans
                       where vendInvoiceTrans.InvoiceId                 == interCompanyInvoiceId
                       &&    vendInvoiceTrans.InvoiceDate               == interCompanyInvoiceDate
                       &&    vendInvoiceTrans.InterCompanyInventTransId == salesLine.InventTransId;

                if (vendInvoiceTrans.Qty)
                {
                    qty = vendInvoiceTrans.Qty;
                }
            }
        }

        return qty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>