<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvListPageHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvListPageHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCompanyRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Filters the list page on the given company.
    /// </summary>
    /// <param name="_query">
    ///    The query to be updated.
    /// </param>
    /// <param name="_legalEntity">
    ///    The legal entity to filter by. Default value is the current company.
    /// </param>
    /// <remarks>
    ///    This method is called from the expense list pages that have the expense reports, and travel
    ///    requests global tables.
    /// </remarks>
    public static void addCompanyRange(Query _query, LegalEntity _legalEntity = CompanyInfo::current())
    {
        QueryBuildDataSource    rootDS;
        QueryBuildRange         companyRange;
        fieldId                 legalEntityFieldNum;

        if (!_query || _query.dataSourceCount() < 1)
        {
            return;
        }

        rootDS              = _query.dataSourceNo(1);
        legalEntityFieldNum = TrvListPageHelper::getLegalEntityFieldNum(rootDS.table());

        // the root table is not expected table
        if (!legalEntityFieldNum)
        {
            return;
        }

        companyRange = SysQuery::findOrCreateRange(_query.dataSourceNo(1), legalEntityFieldNum);
        companyRange.value(queryValue(_legalEntity));
        companyRange.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDelegateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges for the delegating worker for the expense list pages.
    /// </summary>
    /// <param name="_query">
    ///    The query to be updated.
    /// </param>
    /// <param name="_worker">
    ///    The worker record ID for whom the transaction is being entered.
    /// </param>
    private static void addDelegateRange(Query  _query, HCMWorkerRecId  _worker)
    {
        QueryBuildDataSource    rootDS;
        QueryBuildDataSource    delegateDS;
        QueryBuildDataSource    dirPersonUserDS;
        QueryBuildDataSource    hcmWorkerDS;
        QueryBuildRange         delegatedWorkerRange;
        str                     rootTableName;
        str                     delegateTableName;
        str                     hcmWorkerTableName;
        str                     qstr;
        FieldId                 creatingWorkerFieldNum;
        str                     createdDateTimeFieldName;

        rootDS                  = _query.dataSourceNo(1);
        rootTableName           = rootDS.name();

        creatingWorkerFieldNum  = TrvListPageHelper::getCreatingWorkerFieldNum(rootDS.table());

        if (_worker)
        {
            SysQuery::findOrCreateRange(rootDS, creatingWorkerFieldNum).value(queryValue(_worker));
        }

        delegateDS = rootDS.addDataSource(tablenum(TrvAppEmplSub));
        delegateDS.joinMode(JoinMode::ExistsJoin);
        delegateDS.addLink(creatingWorkerFieldNum, fieldnum(TrvAppEmplSub, DelegatingWorker));
        delegateTableName   = delegateDS.name();

        delegatedWorkerRange = delegateDS.addRange(fieldnum(TrvAppEmplSub, DelegatedUser));
        delegatedWorkerRange.status(RangeStatus::Hidden);
        delegatedWorkerRange.value(curuserid());

        dirPersonUserDS = delegateDS.addDataSource(tablenum(DirPersonUser));
        dirPersonUserDS.addLink(fieldnum(TrvAppEmplSub, DelegatedUser),fieldnum(DirPersonUser, User));

        hcmWorkerDS = dirPersonUserDS.addDataSource(tablenum(HcmWorker));
        hcmWorkerDS.addLink(fieldnum(DirPersonUser, PersonParty),fieldnum(HcmWorker, Person));
        hcmWorkerTableName = hcmWorkerDS.name();

        createdDateTimeFieldName = TrvListPageHelper::getCreatedDateTimeFieldStr(rootDS.table());
        
        qstr = strfmt ('((%1 != %2) && (%3 == %4) && ((%5 >= %6) || (%7 == %8)) && ((%9 <= %10) || (%11 == %12)))',
                    hcmWorkerTableName + '.' + fieldstr(HcmWorker, RecId),       // 1
                    delegateTableName + '.' + fieldstr(TrvAppEmplSub, DelegatingWorker),     // 2

                    delegateTableName + '.' + fieldstr(TrvAppEmplSub, DelegatedUser),       // 3
                    strFmt("%1%2%3",'"', curUserId(),'"'),                      // 4

                    rootTableName + '.' + createdDateTimeFieldName,  // 5
                    delegateTableName + '.' +  fieldstr(TrvAppEmplSub, FromDateUTC),      // 6

                    delegateTableName + '.' + fieldstr(TrvAppEmplSub, FromDateUTC),    // 7
                    date2StrXpp(dateNull()),                                      // 8

                    rootTableName + '.' + createdDateTimeFieldName,  // 9
                    delegateTableName + '.' + fieldstr(TrvAppEmplSub, ToDateUTC),      // 10

                    delegateTableName + '.' + fieldstr(TrvAppEmplSub, ToDateUTC),      // 11
                    date2StrXpp(dateNull())
                );

        delegatedWorkerRange.value(qstr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentUserNotWorkerErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the correct error message using the supplied table id reference.
    /// </summary>
    /// <param name="_rootDataSourceTableId">
    /// The supplied table id reference.
    /// </param>
    /// <returns>
    /// A specific error message.
    /// </returns>
    public static SysInfoLogStr getCurrentUserNotWorkerErrorMessage(TableId _rootDataSourceTableId = 0)
    {
        SysInfoLogStr stopMessage;

        switch (_rootDataSourceTableId)
        {
            case tablenum(TrvExpTable) :
                stopMessage = "@Expense:UserNotMappedToEmployeeExpenseReports";
                break;

            case tablenum(TrvCashAdvance) :
                stopMessage = "@Expense:UserNotMappedToEmployeeCashAdvances";
                break;

            case tablenum(TrvRequisitionTable) :
                stopMessage = "@Expense:UserNotMappedToEmployeeRequisition";
                break;

            default :
                stopMessage = "@Expense:UserNotMappedToEmployeeGeneric";
                break;
        }

        return stopMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkerRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds range based on the worker for the expense list pages.
    /// </summary>
    /// <param name="_query">
    ///    The query to be updated.
    /// </param>
    /// <param name="_worker">
    ///    The worker record ID for whom the transaction is being entered.
    /// </param>
    public static void addWorkerRange(Query _query,
                                      HCMWorkerRecId   _worker = HcmWorkerLookup::currentWorker())
    {
        QueryBuildDataSource    rootDS;
        FieldId                 creatingWorkerFieldNum;
        QueryBuildRange         workerRange;
        TrvHcmWorkerRecId       selfWorker  = HcmWorkerLookup::currentWorker();

        if (!_query || _query.dataSourceCount() < 1)
        {
            return;
        }

        rootDS  = _query.dataSourceNo(1);

        creatingWorkerFieldNum  = TrvListPageHelper::getCreatingWorkerFieldNum(rootDS.table());

        // the root table is not expected table
        if (!creatingWorkerFieldNum)
        {
            return;
        }

        if (_worker && _worker != selfWorker)
        {
            TrvListPageHelper::addDelegateRange(_query, _worker);
        }
        else
        {
            workerRange = SysQuery::findOrCreateRange(rootDS, creatingWorkerFieldNum);
            workerRange.value(queryValue(selfWorker));
            workerRange.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreatingWorkerFieldNum</Name>
				<Source><![CDATA[
    private static fieldId getCreatingWorkerFieldNum(RefTableId _tableId)
    {
        fieldId creatingWorkerFieldNum;

        switch (_tableId)
        {
            case (tablenum(TrvExpTable)):
                creatingWorkerFieldNum = fieldnum(TrvExpTable, CreatingWorker);
                break;

            case (tablenum(TrvRequisitionTable)):
                creatingWorkerFieldNum = fieldnum(TrvRequisitionTable, CreatingWorker);
                break;

            case (tablenum(TrvCashAdvance)):
                creatingWorkerFieldNum = fieldnum(TrvCashAdvance, RequestingWorker);
                break;

            case (tablenum(TrvAppEmplSub)):
                creatingWorkerFieldNum = fieldnum(TrvAppEmplSub, DelegatingWorker);
                break;

            case (tablenum(TrvUnreconciledExpenseTransUnion)):
                creatingWorkerFieldNum = fieldnum(TrvUnreconciledExpenseTransUnion, Worker);
                break;

            case (tableNum(TrvExpTableView)):
                creatingWorkerFieldNum = fieldNum(TrvExpTableView, CreatingWorker);
                break;
        }

        return creatingWorkerFieldNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreatingWorkerFieldStr</Name>
				<Source><![CDATA[
    private static str getCreatingWorkerFieldStr(RefTableId _tableId)
    {
        str creatingWorkerFieldStr;

        switch (_tableId)
        {
            case (tablenum(TrvExpTable)):
                creatingWorkerFieldStr = fieldstr(TrvExpTable, CreatingWorker);
                break;

            case (tablenum(TrvRequisitionTable)):
                creatingWorkerFieldStr = fieldstr(TrvRequisitionTable, CreatingWorker);
                break;

            case (tablenum(TrvCashAdvance)):
                creatingWorkerFieldStr = fieldstr(TrvCashAdvance, RequestingWorker);
                break;

            case (tablenum(TrvAppEmplSub)):
                creatingWorkerFieldStr = fieldstr(TrvAppEmplSub, DelegatingWorker);
                break;

            case (tablenum(TrvUnreconciledExpenseTransUnion)):
                creatingWorkerFieldStr = fieldstr(TrvUnreconciledExpenseTransUnion, Worker);
                break;

            case (tableNum(TrvExpTableView)):
                creatingWorkerFieldStr = fieldstr(TrvExpTableView, CreatingWorker);
                break;
        }

        return creatingWorkerFieldStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreatedDateTimeFieldStr</Name>
				<Source><![CDATA[
    private static str getCreatedDateTimeFieldStr(RefTableId _tableId)
    {
        str creatingDateTimeFieldStr;

        switch (_tableId)
        {
            case (tablenum(TrvExpTable)):
                creatingDateTimeFieldStr = fieldstr(TrvExpTable, CreatedDateTime);
                break;

            case (tablenum(TrvRequisitionTable)):
                creatingDateTimeFieldStr = fieldstr(TrvRequisitionTable, RequisitionDate);
                break;

            case (tablenum(TrvCashAdvance)):
                creatingDateTimeFieldStr = fieldstr(TrvCashAdvance, RequestedDate);
                break;

            case (tablenum(TrvUnreconciledExpenseTransUnion)):
                creatingDateTimeFieldStr = fieldstr(TrvUnreconciledExpenseTransUnion, TransDate);
                break;

            case (tableNum(TrvExpTableView)):
                creatingDateTimeFieldStr = fieldstr(TrvExpTableView, CreatedDateTime1);
                break;
        }

        return creatingDateTimeFieldStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLegalEntityFieldNum</Name>
				<Source><![CDATA[
    private static fieldId getLegalEntityFieldNum(RefTableId _tableId)
    {
        fieldId legalEntityFieldNum;

        switch (_tableId)
        {
            case (tablenum(TrvExpTable)):
                legalEntityFieldNum = fieldnum(TrvExpTable, LegalEntity);
                break;

            case (tablenum(TrvRequisitionTable)):
                legalEntityFieldNum = fieldnum(TrvRequisitionTable, LegalEntity);
                break;

            case (tablenum(TrvExpTableView)):
                legalEntityFieldNum = fieldnum(TrvExpTableView, LegalEntity);
                break;
            
        }

        return legalEntityFieldNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeDraftDocumentsForExpiredDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters the draft documents for expense reports, travel requisitions, and disputes when the user is
    /// not a current delegate for the worker.
    /// </summary>
    /// <param name="_query">
    /// The query to be updated.
    /// </param>
    /// <param name="_parmWorker">
    /// The record ID of the worker to check whether he still has delegation.
    /// </param>
    public static void removeDraftDocumentsForExpiredDelegate(Query                 _query,
                                                                        TrvHcmWorkerRecId   _parmWorker)
    {
        QueryBuildDataSource    rootDS;
        QueryBuildRange         draftRange;

        if (!_query || _query.dataSourceCount() < 1)
        {
            return;
        }

        rootDS  = _query.dataSourceNo(1);

        if (_parmWorker && ! TrvAccessHelper::userHasCurrentDelegateAccessFor(_parmWorker))
        {
            switch (rootDS.table())
            {
                case tablenum(TrvExpTable):
                    draftRange = rootDS.addRange(fieldNum(TrvExpTable, ApprovalStatus));
                    draftRange.value(SysQuery::valueNot(TrvAppStatus::Create));
                    break;
                case tablenum(TrvRequisitionTable):
                    draftRange = rootDS.addRange(fieldNum(TrvRequisitionTable, ApprovalStatus));
                    draftRange.value(SysQuery::valueNot(TrvRequisitionApprovalStatus::Create));
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDelegateRangeForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds range for all delegating worker for the current user.
    /// </summary>
    /// <param name = "_query">The query to be updated.</param>
    public static void addDelegateRangeForCurrentUser(Query _query)
    {
        TrvListPageHelper::addDelegateRange(_query, 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>