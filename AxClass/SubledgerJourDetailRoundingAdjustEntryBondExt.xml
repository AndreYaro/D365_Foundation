<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJourDetailRoundingAdjustEntryBondExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJourDetailRoundingAdjustEntryBondExt</c> class provides Russian specific extention for the c>SubledgerJourDetailRoundingAdjustEntry<c/>.
/// </summary>
[SourceDocumentExtension()]
public class SubledgerJourDetailRoundingAdjustEntryBondExt extends SubledgerJourDetailRoundingAdjustEntryExtension
{
    #ISOCountryRegionCodes

    SubledgerJournalAccountEntryTmpDetail tmpDetail;

    SubledgerJournalAccountEntryTmpDetail roundingAdjustmentEntryOffset;
    LedgerBondBatchTransNum_RU  bondBatchTrans;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCurrencyAmountsToSubledgerJournal</Name>
				<Source><![CDATA[
    public void addCurrencyAmountsToSubledgerJournal(
        SubledgerJournalAccountEntryTmpDetail _tmpDetailToAdjust,
        AmountMST _roundingAdjustmentAccountingCurrencyAmount,
        AmountMSTSecondary _roundingAdjustmentReportingCurrencyAmount,
        SubledgerJournalAccountEntryTmpDetail _roundingAdjustmentEntry)
    {
        this.initializeRoundingAdjustmentEntries(_tmpDetailToAdjust, _roundingAdjustmentEntry);

        this.setAdjustmentAmounts(_roundingAdjustmentAccountingCurrencyAmount, _roundingAdjustmentReportingCurrencyAmount);

        this.insertRoundingAdjEntryToSubledgerJournal(_roundingAdjustmentEntry);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether to subscribe the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && LedgerParameters::find().Correspondence_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// It is an event handler for the initialize method of the extending class.
    /// </summary>
    /// <param name="_tmpDetail">
    /// The Buffer of <c>SubledgerJournalAccountEntryTmpDetail</c> type.
    /// </param>
    public void initialized(SubledgerJournalAccountEntryTmpDetail _tmpDetail)
    {
        tmpDetail.linkPhysicalTableInstance(_tmpDetail);

        select maxOf(BondBatchTrans_RU) from tmpDetail;

        bondBatchTrans = tmpDetail.BondBatchTrans_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRoundingAdjustmentEntries</Name>
				<Source><![CDATA[
    private void initializeRoundingAdjustmentEntries(
        SubledgerJournalAccountEntryTmpDetail _tmpDetailToAdjust,
        SubledgerJournalAccountEntryTmpDetail _roundingAdjustmentEntry)
    {
        bondBatchTrans++;

        roundingAdjustmentEntryOffset.linkPhysicalTableInstance(tmpDetail);

        select firstOnly roundingAdjustmentEntryOffset
            where roundingAdjustmentEntryOffset.BondBatchTrans_RU == _tmpDetailToAdjust.BondBatchTrans_RU
                && roundingAdjustmentEntryOffset.RecId != _tmpDetailToAdjust.RecId;

        roundingAdjustmentEntryOffset.IsRoundingAdjustment = NoYes::Yes;
        roundingAdjustmentEntryOffset.AccountingCurrencyAmount = 0.00;
        roundingAdjustmentEntryOffset.AccountingCurrencyAmountUnrounded = 0.00;
        roundingAdjustmentEntryOffset.ReportingCurrencyAmount = 0.00;
        roundingAdjustmentEntryOffset.ReportingCurrencyAmountUnrounded = 0.00;

        // Rounding adjustments are for calculated accounting and reporting currency amounts only.
        // The rounding adjustment entry must not cause change in subledger journal transaction currency amount.
        roundingAdjustmentEntryOffset.TransactionCurrencyAmount = 0.00;

        _roundingAdjustmentEntry.BondBatchTrans_RU = bondBatchTrans;
        roundingAdjustmentEntryOffset.BondBatchTrans_RU = bondBatchTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRoundingAdjEntryToSubledgerJournal</Name>
				<Source><![CDATA[
    private void insertRoundingAdjEntryToSubledgerJournal(SubledgerJournalAccountEntryTmpDetail _roundingAdjustmentEntry)
    {
        if (_roundingAdjustmentEntry.AccountingCurrencyAmount || _roundingAdjustmentEntry.ReportingCurrencyAmount)
        {
            _roundingAdjustmentEntry.update();
            roundingAdjustmentEntryOffset.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailRoundingAdjustEntry</Name>
				<Source><![CDATA[
    public SubledgerJourDetailRoundingAdjustEntry parmDetailRoundingAdjustEntry(SubledgerJourDetailRoundingAdjustEntry _detailRoundingAdjustEntry = detailRoundingAdjustEntry)
    {
        detailRoundingAdjustEntry = _detailRoundingAdjustEntry;

        return detailRoundingAdjustEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAdjustmentAmounts</Name>
				<Source><![CDATA[
    private void setAdjustmentAmounts(
        AmountMST _roundingAdjustmentAccountingCurrencyAmount,
        AmountMSTSecondary _roundingAdjustmentReportingCurrencyAmount)
    {
        roundingAdjustmentEntryOffset.AccountingCurrencyAmount = -_roundingAdjustmentAccountingCurrencyAmount;
        roundingAdjustmentEntryOffset.ReportingCurrencyAmount = -_roundingAdjustmentReportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension events.
    /// </summary>
    protected void subscribe()
    {
        detailRoundingAdjustEntry.initialized                               += eventhandler(this.initialized);
        detailRoundingAdjustEntry.addedCurrencyAmountsToSubledgerJournal    += eventhandler(this.addCurrencyAmountsToSubledgerJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDetailRoundingAdjustEntry</Name>
				<Source><![CDATA[
    public static SubledgerJourDetailRoundingAdjustEntryBondExt newFromDetailRoundingAdjustEntry(SubledgerJourDetailRoundingAdjustEntry _detailRoundingAdjustEntry)
    {
        SubledgerJourDetailRoundingAdjustEntryBondExt subledgerJourDetailRoundAdjEntryBondExt = new SubledgerJourDetailRoundingAdjustEntryBondExt();
        subledgerJourDetailRoundAdjEntryBondExt.parmDetailRoundingAdjustEntry(_detailRoundingAdjustEntry);
        subledgerJourDetailRoundAdjEntryBondExt.initializeExtension();

        return subledgerJourDetailRoundAdjEntryBondExt;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>