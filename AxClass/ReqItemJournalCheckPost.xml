<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqItemJournalCheckPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqItemJournalCheckPost extends JournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    boolean checkTrans(JournalTransData     _journalTransData)
    {
        boolean             ok           = true;
        ReqItemJournalTrans journalTrans = _journalTransData.journalTrans();
        ReqItemTable        reqItemTable;

        ok = journalTrans.inventDim().checkDimFieldsValid(journalTrans.ItemId,null);

        ok = ok && ReqItemJournalTrans::checkDuplicates(journalTrans.JournalId,journalTrans.ItemId,journalTrans.InventDimId,journalTrans.RecId);

        if (ok && journalTrans.MinOnhandCurrent != journalTrans.MinOnhandNewValue)
        {
            reqItemTable = ReqItemTable::find(journalTrans.ItemId,journalTrans.InventDimId);

            if (reqItemTable.RecId)
            {
                if (reqItemTable.MaxInventOnhand < journalTrans.MinOnhandNewValue && reqItemTable.isMaxInventOnhandEditable())
                    ok = checkFailed(strfmt("@SCM:MustBeLessThanOrEqualToCoverage", fieldpname(ReqItemJournalTrans, MinOnhandNewValue), fieldpname(ReqItemTable, MaxInventOnhand)));

                if (journalTrans.MinOnhandNewValue < 0)
                    ok = checkFailed(strfmt("@SYS69681", fieldpname(ReqItemTable, MinInventOnhand)));
            }
        }

        if (! super(_journalTransData))
            return false;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    void postTrans(JournalTransData    _journalTransData)
    {
        ReqItemJournalTrans         journalTrans = _journalTransData.journalTrans();
        ReqItemTable                reqItemTable;

        super(_journalTransData);

        if (journalTrans.MinOnhandCurrent != journalTrans.MinOnhandNewValue)
        {
            reqItemTable = ReqItemTable::find(journalTrans.ItemId,journalTrans.InventDimId,true);

            if (reqItemTable.RecId)
            {
                reqItemTable.MinInventOnhand = journalTrans.MinOnhandNewValue;
                reqItemTable.update();
            }
            else
            {
                reqItemTable.ItemId = journalTrans.ItemId;
                reqItemTable.CovInventDimId = journalTrans.InventDimId;
                reqItemTable.MinInventOnhand = journalTrans.MinOnhandNewValue;
                reqItemTable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>super</c> method.
    /// </summary>
    /// <remarks>
    ///    This method may be is overwritten to add new attributes.
    /// </remarks>
    public void run()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS82798";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ReqItemJournalCheckPost         journalCheckPost;
        JournalForm                     journalForm;

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(args))
        {
            journalForm         = JournalForm::fromArgs(args);
            journalCheckPost    = ReqItemJournalCheckPost::newFromForm(args,journalForm);

            journalForm.runbaseMainStart();

            if (!journalCheckPost.prompt())
            {
                if (! journalCheckPost.batchInfo().parmBatchExecute())
                {
                    journalForm.runbaseMainCancel(journalCheckPost.parmJournalId());
                }
                return;
            }

            try
            {
                journalCheckPost.runOperation();
                journalForm.runbaseMainEnd(journalCheckPost,false);
            }
            catch (Exception::Error)
            {
                journalForm.runbaseMainEnd(journalCheckPost,true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for constructing an object of <c>ReqItemJournalCheckPost</c> or one of its subclasses.
    /// </summary>
    /// <param name = "_journalForm">The <c>JournalForm</c> object used to create a new <c>ReqItemJournalCheckPost</c>.</param>
    /// <param name = "_args">The <c>JournalForm</c> Args.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where an object of <c>ReqItemJournalCheckPost</c> or one of its subclasses can be returned.</param>
    static delegate void newFromFormDelegate(
        JournalForm         _journalForm,
        Args                _args,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static ReqItemJournalCheckPost newFromForm(Args _args,JournalForm _journalForm)
    {
        ReqItemJournalTable journalTable = _journalForm.journalTableData().journalTable();
        switch (journalTable.JournalType)
        {
            case ReqItemJournalType::SafetyStock :
                return ReqItemJournalCheckPost::newJournalCheckPost(false, true, _args.parmEnum(), journalTable.TableId, journalTable.JournalId);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ReqItemJournalCheckPost::newFromFormDelegate(_journalForm, _args, result);
                
                if (result.hasResult())
                {
                    return result.result() as ReqItemJournalCheckPost;
                }
                throw error(strfmt("@SYS23455",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalCheckPost</Name>
				<Source><![CDATA[
    static ReqItemJournalCheckPost newJournalCheckPost(
        boolean                 _autoBlock,
        boolean                 _showInfoResult,
        JournalCheckPostType    _journalCheckPostType,
        tableId                 _tableId,
        JournalId               _journalId
        )
    {
        ReqItemJournalCheckPost    journalCheckPost;
        journalCheckPost = new ReqItemJournalCheckPost();

        journalCheckPost.getLast();
        journalCheckPost.parmAutoBlock(_autoBlock);
        journalCheckPost.parmShowInfoResult(_showInfoResult);
        journalCheckPost.parmJournalCheckPostType(_journalCheckPostType);
        journalCheckPost.parmJournalTableId(_tableId);
        journalCheckPost.parmJournalId(_journalId);
        journalCheckPost.parmThrowCheckFailed(false);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>