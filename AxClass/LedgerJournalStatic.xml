<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalStatic</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysTableNameFactoryAttribute(tableStr(LedgerJournalTable))]
class LedgerJournalStatic extends JournalStatic
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>journalName</Name>
				<Source><![CDATA[
    public JournalNameMap journalName()
    {
        LedgerJournalName    ledgerJournalName;

        return ledgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTable</Name>
				<Source><![CDATA[
    public JournalTableMap journalTable()
    {
        LedgerJournalTable    ledgerJournalTable;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTrans</Name>
				<Source><![CDATA[
    public JournalTransMap journalTrans()
    {
        LedgerJournalTrans ledgerJournalTrans;

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTypeIdToEnum</Name>
				<Source><![CDATA[
    public LedgerJournalType journalTypeIdToEnum(Integer _journalTypeId)
    {
        LedgerJournalType journalType = any2Enum(_journalTypeId);

        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemStrLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the menu item for the passed in journal type's lines form.
    /// </summary>
    /// <param name="_journalType">
    ///    The type of the journal to obtain the lines form menu item for.
    /// </param>
    /// <returns>
    ///    The lines form's display menu item as a string.
    /// </returns>
    /// <remarks>
    ///    This method is used by the <c>LedgerJournalTable</c> form to set the <c>correctmenu</c> item on the
    ///    lines button.
    /// </remarks>
    public str menuItemStrLines(Integer _journalType = journalTable.JournalType)
    {
        switch (this.journalTypeIdToEnum(_journalType))
        {
            case LedgerJournalType::Periodic :
                return menuitemdisplaystr(LedgerJournalTransPeriodic);

            case LedgerJournalType::PurchaseLedger :
                return menuitemdisplaystr(LedgerJournalTransInvoiceregister);

            case LedgerJournalType::Daily :
                return menuitemdisplaystr(LedgerJournalTransDaily);

            case LedgerJournalType::Approval :
                return menuitemdisplaystr(LedgerJournalTransInvoiceApprove);

            case LedgerJournalType::Payment :
                return menuitemdisplaystr(LedgerJournalTransVendPaym);

            case LedgerJournalType::CustPayment :
                return menuitemdisplaystr(LedgerJournalTransCustPaym);

            case LedgerJournalType::Netting :
                return menuitemdisplaystr(LedgerJournalTransNetting);

            case LedgerJournalType::Cost :
                return menuitemdisplaystr(LedgerJournalTransCost);

            case LedgerJournalType::VendInvoiceRegister :
                return menuitemdisplaystr(LedgerJournalTransVendInvoice);

            case LedgerJournalType::Assets :
                return menuitemdisplaystr(LedgerJournalTransAsset);

            case LedgerJournalType::AssetBudgets :
                return menuitemdisplaystr(LedgerJournalTransAssetBudget);

            case LedgerJournalType::CustBillOfExchangeDraw :
                return menuitemdisplaystr(LedgerJournalTransCustBillDraw);

            case LedgerJournalType::VendPromissoryNoteDraw :
                return menuitemdisplaystr(LedgerJournalTransVendNoteDraw);

            case LedgerJournalType::CustBillOfExchangeProtest :
                return menuitemdisplaystr(LedgerJournalTransCustBillProtest);

            case LedgerJournalType::CustBillOfExchangeRedraw :
                return menuitemdisplaystr(LedgerJournalTransCustBillRedraw);

            case LedgerJournalType::VendPromissoryNoteRedraw :
                return menuitemdisplaystr(LedgerJournalTransVendNoteRedraw);

            case LedgerJournalType::CustPaymRemittance:
                return menuitemdisplaystr(LedgerJournalTransCustRemittance);

            case LedgerJournalType::VendPaymRemittance :
                return menuitemdisplaystr(LedgerJournalTransVendRemittance);

            case LedgerJournalType::CustBillOfExchangeSettle :
                return menuitemdisplaystr(LedgerJournalTransCustBillSettle);

            case LedgerJournalType::VendPromissoryNoteSettle :
                return menuitemdisplaystr(LedgerJournalTransVendNoteSettle);

            case LedgerJournalType::Allocation :
                return menuitemdisplaystr(LedgerJournalTransAllocation);

            case LedgerJournalType::Elimination :
                return menuitemdisplaystr(LedgerJournalTransElimination);

            case LedgerJournalType::BankChequeReversal :
                return menuitemdisplaystr(LedgerJournalTransBankChequeReversal);

            case LedgerJournalType::BankDepositPaymCancel :
                return menuitemdisplaystr(LedgerJournalTransBankDepositPaymCancel);

            case LedgerJournalType::ReportingCurrencyAdjustment :
                return menuitemdisplaystr(LedgerJournalTransReportingCurrencyAdjustment);

            case LedgerJournalType::Assets_RU :
                return menuitemdisplaystr(LedgerJournalTransAsset_RU);
  
            case LedgerJournalType::AssetBudgets_RU:
                return menuitemdisplaystr(LedgerJournalTransAssetBudget_RU);

            case LedgerJournalType::RCash :
                return menuitemdisplaystr(LedgerJournalTransRCash);

            case LedgerJournalType::RDeferrals :
                return menuitemdisplaystr(LedgerJournalTransRDeferrals);
            // <RUP>
            case LedgerJournalType::Payroll_RU :
                return menuitemdisplaystr(LedgerJournalTransRPay);
            // </RUP>

            case LedgerJournalType::PayrollDisbursement :
                return menuitemdisplaystr(LedgerJournalTransPayrollDisbursement);

            case LedgerJournalType::CustomsDeclaration_IT :
                return menuitemdisplaystr(LedgerJournalTrans_Customs_IT);
        }

        return menuitemdisplaystr(LedgerJournalTransDaily);
    }

]]></Source>
			</Method>
			<Method>
				<Name>menuItemNameForJournalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the menu item display string for the given ledger journal.
    /// </summary>
    /// <param name = "_ledgerJournalTable">
    /// The ledger journal to determine the menu item display for.
    /// </param>
    /// <returns>
    /// The menu item display string for the given ledger journal.
    /// </returns>
    public static str menuItemNameForJournalType(LedgerJournalTable _ledgerJournalTable)
    {
        switch (_ledgerJournalTable.JournalType)
        {
            case LedgerJournalType::Daily:
                return menuItemDisplayStr(LedgerJournalTable3);

            case LedgerJournalType::Periodic:
                return menuItemDisplayStr(LedgerJournalTable2);

            case LedgerJournalType::Approval:
                return menuItemDisplayStr(LedgerJournalTable4);

            case LedgerJournalType::Payment:
                return menuItemDisplayStr(LedgerJournalTable5);

            case LedgerJournalType::CustPayment:
                return menuItemDisplayStr(LedgerJournalTable_CustPaym);

            case LedgerJournalType::Cost:
                return menuItemDisplayStr(LedgerJournalTable7);

            case LedgerJournalType::VendInvoiceRegister:
                return menuItemDisplayStr(LedgerJournalTable9);

            case LedgerJournalType::Assets:
                return menuItemDisplayStr(LedgerJournalTableAssets);

            case LedgerJournalType::AssetBudgets:
                return menuItemDisplayStr(LedgerJournalTableAssetsBudget);

            // <GEERU>
            case LedgerJournalType::RCash:
                return menuItemDisplayStr(LedgerJournalTable10);
            // </GEERU>

            default:
                return menuItemDisplayStr(LedgerJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalTransData</Name>
				<Source><![CDATA[
    public JournalTransData newJournalTransData(JournalTransMap _journalTrans, JournalTableData _journalTableData)
    {
        return new JournalTransData(_journalTrans,_journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalVoucherObject</Name>
				<Source><![CDATA[
    public JournalVoucherObject newJournalVoucherObject(JournalVoucherList _journalVoucherList)
    {
        return new JournalVoucherObject(_journalVoucherList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefJournalId</Name>
				<Source><![CDATA[
    public NumberSequenceReference numRefJournalId()
    {
        return LedgerParameters::numRefJournalNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableFieldIdJournalId</Name>
				<Source><![CDATA[
    public FieldId tableFieldIdJournalId()
    {
        return fieldnum(LedgerJournalTable, JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transFieldIdJournalId</Name>
				<Source><![CDATA[
    public FieldId transFieldIdJournalId()
    {
        return fieldnum(LedgerJournalTrans, JournalNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>wrongJournalTypeMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an error message that is based on the <c>journalTypeId</c> parameter that is being passed.
    /// </summary>
    /// <param name="_journalTypeId">
    /// The ID of the journal type that is considered the wrong journal type.
    /// </param>
    /// <returns>
    /// The error message that is built.
    /// </returns>
    public str wrongJournalTypeMessage(int _journalTypeId)
    {
        return strfmt("@SYS22977", this.journalTypeIdToEnum(_journalTypeId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>