<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgBreaks</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgBreaks</c> class is used to handle calculation of breaks during calculation of daily registrations.
/// </summary>
/// <remarks>
/// The following issues concerning breaks can be handled.
/// <list type="bullet">
///   <item>
///   <description>Registered break time.</description>
///   </item>
///   <item>
///   <description>Break time defined in profile.</description>
///   </item>
///   <item>
///   <description>Cancellation of breaks.</description>
///   </item>
///  </list>
///  The calculation process is controlled by the <c>JmgProfiles</c> class, which utilizes this class in the <c>JmgProfiles.countProfileTimeEvent</c> method to get information about breaks. 
///  See the <see cref="M:JmgProfiles.countProfileTimeEvent" /> method, for how to use the <c>JmgBreaks</c> class to deduct break time from registrations.
/// </remarks>
class JmgBreaks
{
    Integer                 breakZoneFrom;
    Integer                 breakZoneTo;

    JmgProfileSpecTypeEnum  breakZoneBreakType[];
    JmgSeconds              breakZoneBreakTimeFrom[];
    JmgSeconds              breakZoneBreakTimeTo[];

    private Map             breakZoneTransIdToBreakZoneIndex = new Map(Types::String, Types::Integer);

    Integer                 breakDropCnt;
    Integer                 breakDropMax;
    boolean                 breakDropDropAllBreaks;
    boolean                 breakDropDropped;
    Integer                 breakDropDropBreakTime[];
    Integer                 breakDropDropBreaksUntilTime[];
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>breakCheckDropped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the time when the worker has created a drop break registration.
    /// </summary>
    /// <param name="fromSecIn">
    ///    The from time of the drop break registration.
    /// </param>
    /// <param name="toSecIn">
    ///    The to time of the drop break registration.
    /// </param>
    /// <returns>
    ///    true if a break has been dropped; otherwise, false.
    /// </returns>
    boolean breakCheckDropped(JmgSeconds fromSecIn, JmgSeconds toSecIn)
    {
        breakDropDropped = false;

        for (breakDropCnt = 1; breakDropCnt <= breakDropMax; breakDropCnt++)
        {
            if ((breakDropDropBreakTime[breakDropCnt]> toSecIn))
            {
                break;
            }
            if (((! breakDropDropBreaksUntilTime[breakDropCnt]) ||
               (toSecIn <= breakDropDropBreaksUntilTime[breakDropCnt])) &&
                (breakDropDropBreakTime[breakDropCnt]<= toSecIn))
            {
                breakDropDropped                            = true;
                breakDropDropBreaksUntilTime[breakDropCnt]  = toSecIn;
            }
        }
        return breakDropDropped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakIsDropped</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a break has been dropped.
    /// </summary>
    /// <returns>
    ///    true if a break has been dropped; otherwise, false.
    /// </returns>
    boolean breakIsDropped()
    {
        return breakDropDropped || breakDropDropAllBreaks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>breakloaddrop</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads drop break registrations for the specified worker and profile date.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker for which to load drop break registrations.
    /// </param>
    /// <param name="_startDate">
    ///    The profile date for which to load drop break registrations.
    /// </param>
    void breakloaddrop(JmgWorkerRecId _worker, StartDate _startDate)
    {
        JmgStampJournalTrans    jmgStampJournalTrans;
        JmgProfileSeconds       jmgProfileSeconds   = new JmgProfileSeconds();

        breakDropCnt              = 0;
        breakDropMax              = 0;
        breakDropDropAllBreaks    = false;
        breakDropDropped          = false;

        ttsbegin;

        while select forupdate jmgStampJournalTrans
            where jmgStampJournalTrans.Worker        == _worker                      &&
                  jmgStampJournalTrans.ProfileDate   == _startDate                   &&
                  jmgStampJournalTrans.JourRegType   == JmgJourRegTypeEnum::BreakReg &&
                  jmgStampJournalTrans.StampType     == JmgStampTypeEnum::Break

        {
            if (jmgStampJournalTrans.StampTypeSpec == JmgStampTypeSpecEnum::BreakDropAll)
            {
                breakDropDropAllBreaks = true;
            }
            else if (jmgStampJournalTrans.StampTypeSpec == JmgStampTypeSpecEnum::BreakDropOne)
            {
                breakDropMax++;
                breakDropDropBreakTime[breakDropMax]    = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StartDate, jmgStampJournalTrans.StartTime);
            }
            else if (jmgStampJournalTrans.BreakSeconds)
            {
                breakZoneTo++;
                breakZoneBreakType[breakZoneTo]         = jmgStampJournalTrans.StampTypeSpec == JmgStampTypeSpecEnum::BreakPayFlow ? JmgProfileSpecTypeEnum::BreakPay : JmgProfileSpecTypeEnum::Break;
                breakZoneBreakTimeFrom[breakZoneTo]     = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StartDate, jmgStampJournalTrans.StartTime);
                breakZoneBreakTimeTo[breakZoneTo]       = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StartDate, (jmgStampJournalTrans.StartTime + jmgStampJournalTrans.BreakSeconds));
                jmgStampJournalTrans.Seconds            = max((breakZoneBreakTimeTo[breakZoneTo] - breakZoneBreakTimeFrom[breakZoneTo]),0);

                if (jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StopDate, jmgStampJournalTrans.StopTime) > (breakZoneBreakTimeTo[breakZoneTo] + jmgStampJournalTrans.BreakTolerance))
                {
                    breakZoneTo++;
                    breakZoneBreakType[breakZoneTo]     = JmgProfileSpecTypeEnum::Break;
                    breakZoneBreakTimeFrom[breakZoneTo] = breakZoneBreakTimeTo[breakZoneTo - 1];
                    breakZoneBreakTimeTo[breakZoneTo]   = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StopDate, jmgStampJournalTrans.StopTime);
                    jmgStampJournalTrans.Seconds       += max((breakZoneBreakTimeTo[breakZoneTo] - breakZoneBreakTimeFrom[breakZoneTo]),0);
                }
                jmgStampJournalTrans.update();
                JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);
            }
            else
            {
                breakZoneTo++;
                breakZoneBreakType[breakZoneTo]         = jmgStampJournalTrans.StampTypeSpec == JmgStampTypeSpecEnum::BreakPayFlow ? JmgProfileSpecTypeEnum::BreakPay : JmgProfileSpecTypeEnum::Break;
                breakZoneBreakTimeFrom[breakZoneTo]     = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StartDate, jmgStampJournalTrans.StartTime);
                breakZoneBreakTimeTo[breakZoneTo]       = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StopDate, jmgStampJournalTrans.StopTime);
                jmgStampJournalTrans.Seconds            = max((breakZoneBreakTimeTo[breakZoneTo] - breakZoneBreakTimeFrom[breakZoneTo]),0);
                jmgStampJournalTrans.update();
                JmgCalcApproveForm::construct().transactionUpdated(jmgStampJournalTrans);
            }

            if (JmgBreakRegistrationsFlight::instance().isEnabled())
            {
                breakZoneTransIdToBreakZoneIndex.add(jmgStampJournalTrans.TransId, breakZoneTo);  
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertbreakEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert time events into the specified <c>JmgProfiles</c> object.
    /// </summary>
    /// <param name="profile">
    /// The <c>JmgProfiles></c> object to insert break time events into.
    /// </param>
    /// <param name="timeEventLowLimit_Save">
    /// The lower limit to search for break events.
    /// </param>
    /// <param name="timeEventLowLimit_B">
    /// The lower limit to search for break events.
    /// </param>
    /// <param name="timeEventUppLimit_B">
    /// The upper limit to search for break events.
    /// </param>
    /// <param name="timeEventSec">
    /// The amount of time to assign to the time event, if no breaks are found.
    /// </param>
    /// <param name="timeEventLowLimit_P">
    /// The lower limit in the profile.
    /// </param>
    /// <param name="timeEventUppLimit_P">
    /// The upper limit in the profile
    /// </param>
    /// <param name="profileSpecType">
    /// The profile specification type specified in the profile.
    /// </param>
    /// <param name="stampSpec">
    /// The registration specification made on the registration.
    /// </param>
    /// <param name="transIdIn">
    /// The transaction id to assign to the inserted time events.
    /// </param>
    /// <param name="jobPayType">
    /// The job pay type to assign to the inserted time events.
    /// </param>
    /// <param name="defaultDimension">
    /// The dimension values to assign to the inserted time events.
    /// </param>
    /// <param name="eventInsert">
    /// true, if time events must be inserted; otherwise, false.
    /// </param>
    /// <param name="_secondaryProfileSpecType">
    /// The secondary profile type specification to assign to inserted time events.
    /// </param>
    /// <param name="_profileType">
    /// The profile type ID to assign to inserted time events.
    /// </param>
    /// <returns>
    /// A container with summary of inserted events.
    /// </returns>
    container insertbreakEvents(JmgProfiles         profile,
                                Integer             timeEventLowLimit_Save,
                                Integer             timeEventLowLimit_B,
                                Integer             timeEventUppLimit_B,
                                JmgSeconds          timeEventSec,

                                Integer             timeEventLowLimit_P,
                                Integer             timeEventUppLimit_P,

                                JmgProfileSpecType  profileSpecType,
                                JmgStampTypeSpec    stampSpec,
                                JmgTransId          transIdIn,
                                JmgJobPayTypeEnum   jobPayType,
                                DimensionDefault    defaultDimension,
                                boolean             eventInsert,
                                JmgProfileSpecType  _secondaryProfileSpecType,
                                JmgProfileTypeRecId _profileType)
    {
        for (breakZoneFrom = 1; breakZoneFrom <= breakZoneTo; breakZoneFrom++)
        {
            if (breakZoneBreakTimeFrom[breakZoneFrom] >= timeEventUppLimit_P    ||
                profileSpecType == JmgProfileSpecTypeEnum::Break                ||
                profileSpecType == JmgProfileSpecTypeEnum::BreakPay)
            {
                break;
            }
            if (((breakZoneBreakTimeFrom[breakZoneFrom] >= timeEventLowLimit_P) && (breakZoneBreakTimeFrom[breakZoneFrom] <  timeEventUppLimit_P))  ||
                ((breakZoneBreakTimeTo  [breakZoneFrom] >  timeEventLowLimit_P) && (breakZoneBreakTimeTo  [breakZoneFrom] <= timeEventUppLimit_P))  ||
                ((breakZoneBreakTimeFrom[breakZoneFrom] <  timeEventLowLimit_P) && (breakZoneBreakTimeTo  [breakZoneFrom] >  timeEventUppLimit_P)))
            {
                if ((breakZoneBreakTimeFrom[breakZoneFrom] >= timeEventLowLimit_P) && (breakZoneBreakTimeFrom[breakZoneFrom] < timeEventUppLimit_P))
                {
                    if (breakZoneBreakTimeFrom[breakZoneFrom] > timeEventLowLimit_Save)
                    {
                        timeEventLowLimit_B   = max(timeEventLowLimit_P,timeEventLowLimit_Save);
                        timeEventUppLimit_B   = breakZoneBreakTimeFrom[breakZoneFrom];
                        timeEventSec          = max(0,(timeEventUppLimit_B - timeEventLowLimit_B));
                        profile.insertProfileTimeEvent(profileSpecType,timeEventLowLimit_B,timeEventUppLimit_B,timeEventSec,stampSpec,transIdIn,jobPayType,defaultDimension,eventInsert, _secondaryProfileSpecType, _profileType);
                    }
                    timeEventLowLimit_B = breakZoneBreakTimeFrom[breakZoneFrom];
                    timeEventUppLimit_B = min(breakZoneBreakTimeTo[breakZoneFrom],timeEventUppLimit_P);
                    timeEventSec        = max(0,(timeEventUppLimit_B - timeEventLowLimit_B));
                }
                else
                {
                    if ((breakZoneBreakTimeFrom[breakZoneFrom] < timeEventLowLimit_P) && (breakZoneBreakTimeTo[breakZoneFrom] > timeEventUppLimit_P))
                    {
                        timeEventLowLimit_B = timeEventLowLimit_P;
                        timeEventUppLimit_B = timeEventUppLimit_P;
                        timeEventSec        = max(0,(timeEventUppLimit_B - timeEventLowLimit_B));
                    }
                    else
                    {
                        timeEventLowLimit_B = timeEventLowLimit_P;
                        timeEventUppLimit_B = breakZoneBreakTimeTo[breakZoneFrom];
                        timeEventSec        = max(0,(timeEventUppLimit_B - timeEventLowLimit_B));
                    }
                }
                profile.insertProfileTimeEvent(breakZoneBreakType[breakZoneFrom],timeEventLowLimit_B,timeEventUppLimit_B,timeEventSec,stampSpec,transIdIn,jobPayType,defaultDimension,eventInsert, breakZoneBreakType[breakZoneFrom], _profileType);
            }

            timeEventLowLimit_Save = breakZoneBreakTimeTo[breakZoneFrom];
        }

        if (timeEventLowLimit_Save < timeEventUppLimit_P)
        {
            timeEventLowLimit_B   = max(timeEventLowLimit_P,timeEventLowLimit_Save);
            timeEventUppLimit_B   = timeEventUppLimit_P;
            timeEventSec          = max(0,(timeEventUppLimit_B - timeEventLowLimit_B));
            profile.insertProfileTimeEvent(profileSpecType,timeEventLowLimit_B,timeEventUppLimit_B,timeEventSec,stampSpec,transIdIn,jobPayType,defaultDimension,eventInsert, _secondaryProfileSpecType, _profileType);
        }

        return [timeEventLowLimit_Save,timeEventLowLimit_B,timeEventUppLimit_B,timeEventSec];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBreakRegInParallel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Given a break journal registration, check if the registration is in parallel with any other journal registration for the given day and worker.
    /// </summary>
    /// <param name = "_jmgStampJournalTable"> The JmgStampJournalTable record. </param>
    /// <param name = "_breakRegMap"> The JmgStampTransMap record for a break registration. </param>
    /// <returns> true if break registration is in parallel with a journal registration, otherwise false. </returns>
    [Hookable(false)]
    internal boolean isBreakRegInParallel(JmgStampJournalTable _jmgStampJournalTable, JmgStampTransMap _breakRegMap)
    {
        JmgProfileSeconds    jmgProfileSeconds   = new JmgProfileSeconds();

        // Find correct breakZone.
        breakZoneFrom = breakZoneTransIdToBreakZoneIndex.exists(_breakRegMap.TransId) ? breakZoneTransIdToBreakZoneIndex.lookup(_breakRegMap.TransId) : 0;

        JmgStampJournalTrans jmgStampJournalTrans;
        while select StartDate, StartTime, StopDate, StopTime from jmgStampJournalTrans
            where jmgStampJournalTrans.Worker        == _jmgStampJournalTable.Worker        &&
                  jmgStampJournalTrans.ProfileDate   == _jmgStampJournalTable.ProfileDate   &&
                  jmgStampJournalTrans.JourRegType   != JmgJourRegTypeEnum::BreakReg        
        {
            var jourRegLowerLimit = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StartDate, jmgStampJournalTrans.StartTime);
            var jourRegUpperLimit = jmgProfileSeconds.profileSeconds(jmgStampJournalTrans.StopDate, jmgStampJournalTrans.StopTime);

            // As soon as the current breakZone is in parallel with any registrations, then we return true.
            if (((breakZoneBreakTimeFrom[breakZoneFrom] >= jourRegLowerLimit) && (breakZoneBreakTimeFrom[breakZoneFrom] <  jourRegUpperLimit))  ||
                ((breakZoneBreakTimeTo  [breakZoneFrom] >  jourRegLowerLimit) && (breakZoneBreakTimeTo  [breakZoneFrom] <= jourRegUpperLimit))  ||
                ((breakZoneBreakTimeFrom[breakZoneFrom] <  jourRegLowerLimit) && (breakZoneBreakTimeTo  [breakZoneFrom] >  jourRegUpperLimit)))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>