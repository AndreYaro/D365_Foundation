<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalPrinterDailyReportProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Controller class for the service of retail summary numer regeneration.
/// </summary>
public class FBFiscalPrinterDailyReportProcessor_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMaxFiscalPrinterDailyReportNumber</Name>
				<Source><![CDATA[
        private PositiveNumber getMaxFiscalPrinterDailyReportNumber(FBBookingPeriod_BR fbBookingPeriod)
    {
        FBFiscalPrinterDailyReport_BR fbFiscalPrinterDailyReport;

        select maxOf(Number) from fbFiscalPrinterDailyReport
            where fbFiscalPrinterDailyReport.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        return fbFiscalPrinterDailyReport.Number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinFiscalPrinterDailyReportNumber</Name>
				<Source><![CDATA[
        private PositiveNumber getMinFiscalPrinterDailyReportNumber(FBBookingPeriod_BR fbBookingPeriod)
    {
        FBFiscalPrinterDailyReport_BR fbFiscalPrinterDailyReport;

        select minOf(Number) from fbFiscalPrinterDailyReport
            where fbFiscalPrinterDailyReport.FBBookingPeriod_BR == fbBookingPeriod.RecId;

        return fbFiscalPrinterDailyReport.Number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderFiscalPrinterDailyReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorder the ECF Daily Operations Report numbers of the booking period related to a record of FBEcfDailyOperationsReport_BR.
    /// </summary>
    /// <param name="_args">
    /// FBFiscalPrinterDailyReport_BR record whose booking period needs to have the ECF Daily Operations Report numbers reorderd.
    /// </param>
    public void reorderFiscalPrinterDailyReports(FBFiscalPrinterDailyReport_BR _args)
    {
        this.reorderFiscalPrinterDailyReportsBP(_args.bookingPeriod());
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderFiscalPrinterDailyReportsBP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reorder the ECF Daily Operations Report numbers of the booking period related to a record of FBEcfDailyOperationsReport_BR.
    /// </summary>
    /// <param name="fbBookingPeriod">
    /// Booking period which needs to have the ECF Daily Operations Report numbers reorderd.
    /// </param>
    public void reorderFiscalPrinterDailyReportsBP(FBBookingPeriod_BR fbBookingPeriod)
    {
        FbBookingPeriod_BR              fbBookingPeriodPrevious;
        FbBookingPeriod_BR              fbBookingPeriodNext;

        if (fbBookingPeriod.existsClosedTaxAssessment())
        {
            throw error(strFmt("@SYS4007088", fbBookingPeriod.PeriodMonth, fbBookingPeriod.PeriodYear));
        }

        fbBookingPeriodPrevious = fbBookingPeriod.getPreviousBookingPeriod();

        if (fbBookingPeriodPrevious &&
            this.getMaxFiscalPrinterDailyReportNumber(fbBookingPeriodPrevious) > this.getMinFiscalPrinterDailyReportNumber(fbBookingPeriod))
        {
            if (fbBookingPeriodPrevious.existsClosedTaxAssessment())
            {
                info(strFmt("@SYS4007088", fbBookingPeriodPrevious.PeriodMonth, fbBookingPeriodPrevious.PeriodYear));
                this.reorderOneBookingPeriod(fbBookingPeriod);
            }
            else
            {
                this.reorderTwoBookingPeriods(fbBookingPeriodPrevious, fbBookingPeriod);
            }
        }
        else
        {
            this.reorderOneBookingPeriod(fbBookingPeriod);
        }

        fbBookingPeriodNext = fbBookingPeriod.getNextBookingPeriod();

        if (fbBookingPeriodNext &&
            this.getMaxFiscalPrinterDailyReportNumber(fbBookingPeriod) > this.getMinFiscalPrinterDailyReportNumber(fbBookingPeriodNext))
        {
            if (fbBookingPeriodNext.existsClosedTaxAssessment())
            {
                info(strFmt("@SYS4007088", fbBookingPeriodNext.PeriodMonth, fbBookingPeriodNext.PeriodYear));
            }
            else
            {
                this.reorderTwoBookingPeriods(fbBookingPeriod, fbBookingPeriodNext);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderOneBookingPeriod</Name>
				<Source><![CDATA[
        private void reorderOneBookingPeriod(FBBookingPeriod_BR fbBookingPeriod)
    {
        FBFiscalPrinterDailyReport_BR   fbFiscalPrinterDailyReport;
        Map                             fbFiscalPrinterDailyReportList;
        MapEnumerator                   enumerator;
        PositiveNumber                  nextNumber;

        fbFiscalPrinterDailyReportList = new Map(Types::Integer, Types::Integer);

        while select Number from fbFiscalPrinterDailyReport
            where fbFiscalPrinterDailyReport.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            fbFiscalPrinterDailyReportList.insert(fbFiscalPrinterDailyReport.Number, fbFiscalPrinterDailyReport.Number);
        }

        enumerator = fbFiscalPrinterDailyReportList.getEnumerator();

        ttsBegin;

        while select forUpdate fbFiscalPrinterDailyReport
            order by AccountingDate
            where fbFiscalPrinterDailyReport.FBBookingPeriod_BR == fbBookingPeriod.RecId
        {
            enumerator.moveNext();
            nextNumber = enumerator.currentValue();

            if (fbFiscalPrinterDailyReport.Number != nextNumber)
            {
                fbFiscalPrinterDailyReport.Number = nextNumber;
                fbFiscalPrinterDailyReport.doUpdate();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reorderTwoBookingPeriods</Name>
				<Source><![CDATA[
        private void reorderTwoBookingPeriods(FBBookingPeriod_BR previousBookingPeriod, FBBookingPeriod_BR bookingPeriod)
    {
        FBFiscalPrinterDailyReport_BR   fbFiscalPrinterDailyReport;
        Map                             fbFiscalPrinterDailyReportList;
        MapEnumerator                   enumerator;
        PositiveNumber                  nextNumber;

        fbFiscalPrinterDailyReportList = new Map(Types::Integer, Types::Integer);

        while select Number from fbFiscalPrinterDailyReport
            where (fbFiscalPrinterDailyReport.FBBookingPeriod_BR == previousBookingPeriod.RecId
                || fbFiscalPrinterDailyReport.FBBookingPeriod_BR == bookingPeriod.RecId)
        {
            fbFiscalPrinterDailyReportList.insert(fbFiscalPrinterDailyReport.Number, fbFiscalPrinterDailyReport.Number);
        }

        enumerator = fbFiscalPrinterDailyReportList.getEnumerator();

        ttsBegin;

        while select forUpdate fbFiscalPrinterDailyReport
            order by AccountingDate
            where (fbFiscalPrinterDailyReport.FBBookingPeriod_BR == previousBookingPeriod.RecId
                || fbFiscalPrinterDailyReport.FBBookingPeriod_BR == bookingPeriod.RecId)
        {
            enumerator.moveNext();
            nextNumber = enumerator.currentValue();

            if (fbFiscalPrinterDailyReport.Number != nextNumber)
            {
                fbFiscalPrinterDailyReport.Number = nextNumber;
                fbFiscalPrinterDailyReport.doUpdate();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        FBFiscalPrinterDailyReportProcessor_BR processor = new FBFiscalPrinterDailyReportProcessor_BR();
        processor.reorderFiscalPrinterDailyReports(_args.record());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>