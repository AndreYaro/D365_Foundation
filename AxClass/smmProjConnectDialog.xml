<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmProjConnectDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmProjConnectDialog extends RunBase
{
    DialogRunbase   dialog;
    DialogGroup     dialogProj;
    DialogGroup     dialogOthers;

    DialogField fieldProjId;
    DialogField fieldProjType;
    DialogField fieldXferDocs;

    ProjId      projId;
    ProjType    projType;
    boolean     xferDocs;

    Common      common;

    smmProjConnect  projConnect;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        projId,
        projType,
        xferDocs
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden to not allow batch processing
    /// </summary>
    /// <returns>
    /// Boolean
    /// </returns>
    boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the dialog.
    /// </summary>
    void close()
    {
        dialog.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        projConnect = smmProjConnect::construct(common);

        dialog = super();

        dialog.alwaysOnTop(true);
        dialog.caption("@SYS80810");

        dialogProj = dialog.addGroup("@SYS81111"); // Existing project
        dialogProj.columns(2);
        dialogProj.frameType(FormFrameType::Auto);

        fieldProjId     = dialog.addFieldValue(extendedtypestr(ProjId),   projConnect.parmProjId());
        fieldProjType   = dialog.addFieldValue(enumstr(ProjType),         ProjTable::find(fieldProjId.value()).Type);
        fieldProjType.allowEdit(false);

        dialogOthers = dialog.addGroup();
        dialogOthers.frameType(FormFrameType::None);

        fieldXferDocs   =   dialog.addFieldValue(extendedtypestr(smmIncludeDocuments), xferDocs, "@SYS81109");

        dialog.allowUpdateOnSelectCtrl(true);
        this.dialogSelectCtrl();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS80810";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// When using the dialog class for dialog, this method is called whenever a control is selected.
    /// </summary>
    /// <remarks>
    /// To enable this callback, the <c>allowUpdateOnSelectCtrl</c> method must have a value of true.
    /// </remarks>
    public void dialogSelectCtrl()
    {
        super();

        fieldProjType.value(ProjTable::find(fieldProjId.value()).Type);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets input values from the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        projConnect.parmProjId(fieldProjId.value());
        projConnect.parmXferDocs(fieldXferDocs.value());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    private Common parmCommon(Common _common = common)
    {
        common = _common;

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();

        projConnect.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);
        boolean ret;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>ProjConnect</c> table.
    /// </summary>
    /// <param name="_calledFrom">
    /// The calling form.
    /// </param>
    /// <returns>
    /// true if the <c>ProjConnnect</c> record is valid; otherwise false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (ret)
        {
            if (!projConnect.parmProjId())
            {
                // Project ID must be filled in
                ret = checkFailed("@SYS81107");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the main entry point for the form.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the form.
    /// </param>
    /// <param name="_prompt">
    /// Flag to indicate prompting
    /// </param>
    static void main(Args _args, boolean _prompt = true)
    {
        smmProjConnectDialog    projConnectDialog;
        FormDataSource          datasource;

        if (!_args || !_args.record())
        {
            throw error(strfmt("@SYS29104", funcname())); // Class %1 must be called with a buffer.
        }

        projConnectDialog = new smmProjConnectDialog();
        projConnectDialog.parmCommon(_args.record());

        if (_prompt && projConnectDialog.prompt())
        {
            projConnectDialog.runOperation();

            datasource = FormDataUtil::getFormDataSource(_args.record());

            if (datasource)
            {
                datasource.refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>