<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeDisplayCalculatedColumnControlsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class TradeDisplayCalculatedColumnControlsForm implements SysPackable
{
    #define.CurrentVersion(1)

    private FormRun                             callerForm;
    private Map                                 callerDisplayCalculatedColumnControlsMap;
    private TradeDisplayCalculatedColumnParm    callerDisplayCalculatedColumnParmVisible;
    
    private boolean                             lastValueRead;

    private const int ShowBackOrder             = 2;
    private const int ShowQualityOrderStatus    = 3;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    internal FormRun parmCallerForm(FormRun _callerForm = callerForm)
    {
        callerForm = _callerForm;
        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerDisplayCalculatedColumnControls</Name>
				<Source><![CDATA[
    internal Map parmCallerDisplayCalculatedColumnControls(Map _callerDisplayCalculatedColumnControlsMap = callerDisplayCalculatedColumnControlsMap)
    {
        callerDisplayCalculatedColumnControlsMap = _callerDisplayCalculatedColumnControlsMap;
        return callerDisplayCalculatedColumnControlsMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDisplayCalculatedColumnControls</Name>
				<Source><![CDATA[
    internal boolean hasDisplayCalculatedColumnControls()
    {
        return callerDisplayCalculatedColumnControlsMap && callerDisplayCalculatedColumnControlsMap.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerDisplayCalculatedColumnParmVisible</Name>
				<Source><![CDATA[
    internal TradeDisplayCalculatedColumnParm parmCallerDisplayCalculatedColumnParmVisible(
        TradeDisplayCalculatedColumnParm _callerDisplayCalculatedColumnParmVisible = callerDisplayCalculatedColumnParmVisible)
    {
        if (this.sysLastValueExist())
        {
            return callerDisplayCalculatedColumnParmVisible;
        }

        callerDisplayCalculatedColumnParmVisible = _callerDisplayCalculatedColumnParmVisible;
        return callerDisplayCalculatedColumnParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMethodDisplayCalculatedColumnControlsFormSetupObjectMethod</Name>
				<Source><![CDATA[
    internal static boolean hasMethodDisplayCalculatedColumnControlsFormSetupObjectMethod(Object implementingObject)
    {
        FormRun formRun = implementingObject as FormRun;

        if (!formRun)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return formHasMethod(formRun, TradeDisplayCalculatedColumnControlsForm::displayCalculatedColumnControlsFormSetupObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayCalculatedColumnControlsFormSetupObject</Name>
				<Source><![CDATA[
    private static IdentifierName displayCalculatedColumnControlsFormSetupObject()
    {
        return staticMethodStr(TradeDisplayCalculatedColumnControlsForm, displayCalculatedColumnControlsFormSetupObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceFormControls</Name>
				<Source><![CDATA[
    internal void setSourceFormControls()
    {
        if (this.hasDisplayCalculatedColumnControls())
        {
            MapEnumerator displayCalculatedColumnControlsEnumerator = callerDisplayCalculatedColumnControlsMap.getEnumerator();

            while (displayCalculatedColumnControlsEnumerator.moveNext())
            {
                FieldId fieldNumber = displayCalculatedColumnControlsEnumerator.currentKey();

                FormControl formControl = displayCalculatedColumnControlsEnumerator.currentValue();
                if (formControl)
                {
                    boolean fieldVisible = callerDisplayCalculatedColumnParmVisible.(fieldNumber);
                    formControl.visible(fieldVisible);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    internal void init()
    {
        if (!callerForm)
        {
            throw error(strFmt("@SYS54101", funcName()));
        }

        this.initCallerDisplayCalculatedColumnParmVisible();
        this.initUserSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    internal void initParmDefault()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initUserSetup</Name>
				<Source><![CDATA[
    internal void initUserSetup()
    {
        if (!lastValueRead)
        {
            this.getLast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerDisplayCalculatedColumnParmVisible</Name>
				<Source><![CDATA[
    internal TradeDisplayCalculatedColumnParm initCallerDisplayCalculatedColumnParmVisible()
    {
        if (this.hasDisplayCalculatedColumnControls())
        {
            this.clearCallerDisplayCalculatedColumnParmVisible();

            MapEnumerator callerDisplayCalculatedColumnControlsEnumerator = callerDisplayCalculatedColumnControlsMap.getEnumerator();
            while (callerDisplayCalculatedColumnControlsEnumerator.moveNext())
            {
                FieldId fieldNumber = callerDisplayCalculatedColumnControlsEnumerator.currentKey();
                FormControl formControl = callerDisplayCalculatedColumnControlsEnumerator.currentValue();
                if (formControl)
                {
                    callerDisplayCalculatedColumnParmVisible.(fieldNumber) = formControl.visible();
                }
            }
        }

        return callerDisplayCalculatedColumnParmVisible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCallerDisplayCalculatedColumnParmVisible</Name>
				<Source><![CDATA[
    private void clearCallerDisplayCalculatedColumnParmVisible()
    {
        MapEnumerator displayFieldParmControlsEnumerator = callerDisplayCalculatedColumnControlsMap.getEnumerator();
        while (displayFieldParmControlsEnumerator.moveNext())
        {
            FieldId fieldNumber = displayFieldParmControlsEnumerator.currentKey();
            if (fieldNumber)
            {
                callerDisplayCalculatedColumnParmVisible.(fieldNumber) = NoYes::Yes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delLast</Name>
				<Source><![CDATA[
    internal void delLast()
    {
        xSysLastValue::deleteLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    internal  void getLast(boolean _forUpdate = false)
    {
        xSysLastValue::getLast(this);

        lastValueRead = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    internal DataAreaId lastValueDataAreaId()
    {
        return curext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    internal IdentifierName lastValueDesignName()
    {
        str nameExtension = formStr(TradeDisplayCalculatedColumns);

        if (callerForm && callerForm.args() && callerForm.args().caller())
        {
            nameExtension += callerForm.args().caller().name();
        }

        return int2str(strHash(nameExtension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    internal IdentifierName lastValueElementName()
    {
        return callerForm.name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    internal UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    internal  UserId lastValueUserId()
    {
        return curUserId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, TradeDisplayCalculatedColumnControlsForm::packDisplayFieldParm(callerDisplayCalculatedColumnParmVisible)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    internal void saveLast()
    {
        xSysLastValue::saveLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysLastValueExist</Name>
				<Source><![CDATA[
    internal boolean sysLastValueExist()
    {
        return xSysLastValue::existLast(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        if (!_packedClass)
        {
            return false;
        }

        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                container showFields;
                [version, showFields] = _packedClass;
                if (!showFields)
                {
                    return false;
                }

                TradeDisplayCalculatedColumnControlsForm::unpackDisplayFieldParm(callerDisplayCalculatedColumnParmVisible, showFields);
                break;

            default:
                return false;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLastValueRead</Name>
				<Source><![CDATA[
    internal void resetLastValueRead()
    {
        lastValueRead = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packDisplayFieldParm</Name>
				<Source><![CDATA[
    internal static container packDisplayFieldParm(TradeDisplayCalculatedColumnParm _displayCalculatedColumnParmVisible)
    {
        return [#currentVersion, _displayCalculatedColumnParmVisible.ShowBackOrder, _displayCalculatedColumnParmVisible.ShowQualityOrderStatus];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackDisplayFieldParm</Name>
				<Source><![CDATA[
    internal static void unpackDisplayFieldParm(
        TradeDisplayCalculatedColumnParm    _displayCalculatedColumnParmVisible,
        container                           _fieldFlags)
    {
        _displayCalculatedColumnParmVisible.ShowBackOrder = conPeek(_fieldFlags, ShowBackOrder);
        _displayCalculatedColumnParmVisible.ShowQualityOrderStatus = conPeek(_fieldFlags, ShowQualityOrderStatus);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>