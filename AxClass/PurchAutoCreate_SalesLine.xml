<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAutoCreate_SalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchAutoCreate_SalesLine extends PurchAutoCreate_Sales
{
    boolean purchTableCreated = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateForICSO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Automatically creates the intercompany chain for the newly created intercompany sales order line
    /// if the intercompany sales order is set for InterCompanyAutoCreateOrders = true.
    /// </summary>
    protected void autoCreateForICSO()
    {
        SalesTable icsoSalesTable = purchTable.interCompanySalesTable();
        salesLine icsoSalesLine = salesLine.interCompanySalesLine();

        if (icsoSalesTable && icsoSalesTable.InterCompanyAutoCreateOrders && icsoSalesLine)
        {
            boolean chainCreated;

            changecompany(icsoSalesTable.DataAreaId)
            {
                if (!icsoSalesLine.interCompanySalesLineExist() && !this.interCompanyCycleExists(icsoSalesTable))
                {
                    TradeInterCompany::autoCreateOrder(icsoSalesLine);

                    // If nested chain has beed created recalculate delivery dates
                    if (icsoSalesLine.interCompanySalesLineExist())
                    {
                        chainCreated = true;
                    }
                }
            }

            if (chainCreated)
            {
                this.recalculateSalesLineDatesForOriginalSalesLine(salesLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchTable</Name>
				<Source><![CDATA[
    void createPurchTable()
    {
        if (!purchTable.RecId)
        {
            super();
            purchTableCreated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyNewSalesLine</Name>
				<Source><![CDATA[
    protected boolean interCompanyNewSalesLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TmpPurchLinePrice          _tmpPurchLinePrice,
             PurchCreateFromSalesOrder  _purchCreateFromSalesOrder = null)
    {
        super(_tmpPurchLinePrice, _purchCreateFromSalesOrder);

        salesTable = _purchCreateFromSalesOrder.parmSalesLine().salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTable</Name>
				<Source><![CDATA[
    void setPurchTable()
    {
        purchTable = this.findPurchTable();

        if (!purchTable.RecId)
        {
            // There are no POs associated to IC or external vendor chain where to add new lines. It's necessary to create a new PO header.
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the associated purchase order to which the new lines are added.
    /// </summary>
    /// <returns>The associated purchase order to which the new lines are added.</returns>
    [Replaceable]
    protected PurchTable findPurchTable()
    {
        return InterCompanyPurchSalesReference::findPurchTableForIntercompanyReuse(tmpPurchLinePrice.SalesId, tmpPurchLinePrice.AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    boolean showInfo()
    {
        // Only show information about purchase order creation if this line forced the creation of a purchase order
        return purchTableCreated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>