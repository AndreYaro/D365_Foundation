<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowTimeSeriesService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowTimeSeriesService
{
    private readonly int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);
    private SysInstrumentationProgressLogger progressLogger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>refreshAggregates</Name>
				<Source><![CDATA[
    internal void refreshAggregates(CashFlowTimeSeriesDataContract _batchContract)
    {
        CashFlowForecastProcessBalanceContract processBalanceContract = CashFlowForecastProcessBalanceContract::construct();
        processBalanceContract.periodOpenDate = _batchContract.parmStartDate();
        processBalanceContract.periodCloseDate = _batchContract.parmEndDate();
        processBalanceContract.deleteMode = CashFlowProcessBalanceDeleteMode::DeletePeriod;

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowTimeSeriesActivityNameRefreshAggregates))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashFlowTimeSeriesProcessBalanceDeleteMode, enum2Symbol(enumNum(CashFlowProcessBalanceDeleteMode), processBalanceContract.deleteMode));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashFlowTimeSeriesProcessBalanceStartDate, date2StrXpp(_batchContract.parmStartDate()));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashFlowTimeSeriesProcessBalanceEndDate, date2StrXpp(_batchContract.parmEndDate()));

            DataArea dataArea;
            while select id from dataArea
            where !dataArea.isVirtual
            {
                changecompany(dataArea.id)
                {
                    this.regenerateAggregates(processBalanceContract);

                    this.transformAggregatesToTimeSeries();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    internal void initialize(CashFlowTimeSeriesDataContract _batchContract)
    {
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowTimeSeriesActivityNameInitialize))
        {
            this.runFullAggregation(_batchContract, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    internal void reset(CashFlowTimeSeriesDataContract _batchContract)
    {
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowTimeSeriesActivityNameReset))
        {
            this.runFullAggregation(_batchContract, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFullAggregation</Name>
				<Source><![CDATA[
    private void runFullAggregation(CashFlowTimeSeriesDataContract _batchContract, boolean _initialAggregation)
    {
        PowerAIInsightsStateMachineFacade stateMachineFacade = PowerAIInsightsStateMachineFacade::newForFeatureName(FinanceInsightsConstants::CashFlowInsightsFeatureNameV2);
        stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::BatchJobStarted));

        CashFlowForecastProcessBalanceContract processBalanceContract = CashFlowForecastProcessBalanceContract::construct();
        processBalanceContract.periodOpenDate = _batchContract.parmStartDate();
        processBalanceContract.periodCloseDate = _batchContract.parmEndDate();
        processBalanceContract.deleteMode = CashFlowProcessBalanceDeleteMode::DeleteAll;

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashFlowTimeSeriesActivityNameRunFullAggregation))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashFlowTimeSeriesProcessBalanceDeleteMode, enum2Symbol(enumNum(CashFlowProcessBalanceDeleteMode), processBalanceContract.deleteMode));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashFlowTimeSeriesProcessBalanceStartDate, date2StrXpp(_batchContract.parmStartDate()));
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CashFlowTimeSeriesProcessBalanceEndDate, date2StrXpp(_batchContract.parmEndDate()));

            DataArea dataArea;
            try
            {
                while select id from dataArea
                where !dataArea.isVirtual
                {
                    changecompany(dataArea.id)
                    {
                        this.regenerateAggregates(processBalanceContract);

                        this.clearTimeSeries();

                        this.clearTimeSeriesResult();

                        this.transformAggregatesToTimeSeries();
                    }
                }

                stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::BatchJobSucceeded));

                if (_initialAggregation)
                {
                    stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::TriggerDataFlow));
                }
                else
                {
                    stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::RetriggerDataFlow));
                }
            }
            catch
            {
                stateMachineFacade.processEvent(PowerAIInsightsEventNoArgs::newFromEvent(PowerAIInsightsEventConstants::BatchJobFailed));
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateAggregates</Name>
				<Source><![CDATA[
private void regenerateAggregates(CashFlowForecastProcessBalanceContract _contract)
    {
        #OCCRetryCount

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashflowTimeSeriesActivityNameRegenerateAggregates))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::CurrentLedger, int642Str(Ledger::current()));

            try
            {
                CashFlowForecastProcessBalance::run(_contract, classStr(CashFlowForecastProcessTimeSeriesWeeklyActualsBalanceStrategy));
            }
            #StandardRetryCatchBlock
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    progressLogger.logRetryOnDeadlock();

                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformAggregatesToTimeSeries</Name>
				<Source><![CDATA[
    private void transformAggregatesToTimeSeries()
    {
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashFlowTimeSeriesActivityNameTransformAggregatesToTimeSeries))
        {
            CashFlowTimeSeriesTransformationPipeline::transformAggregatesToTimeSeries();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTimeSeries</Name>
				<Source><![CDATA[
    private void clearTimeSeries()
    {
        CashFlowTimeSeries cashFlowTimeSeries;

        cashFlowTimeSeries.skipAosValidation(true);
        cashFlowTimeSeries.skipBusinessEvents(true);
        cashFlowTimeSeries.skipDatabaseLog(true);
        cashFlowTimeSeries.skipDataMethods(true);
        cashFlowTimeSeries.skipEvents(true);

        delete_from cashFlowTimeSeries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTimeSeriesResult</Name>
				<Source><![CDATA[
    private void clearTimeSeriesResult()
    {
        CashFlowTimeSeriesResult cashFlowTimeSeriesResult;

        cashFlowTimeSeriesResult.skipAosValidation(true);
        cashFlowTimeSeriesResult.skipBusinessEvents(true);
        cashFlowTimeSeriesResult.skipDatabaseLog(true);
        cashFlowTimeSeriesResult.skipDataMethods(true);
        cashFlowTimeSeriesResult.skipEvents(true);

        delete_from cashFlowTimeSeriesResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new()
    {
        progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashflowTimeSeriesService, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>