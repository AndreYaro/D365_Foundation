<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankReconAdjustedStatementTotalAfterRecon</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankReconAdjustedStatementTotalAfterRecon</c> class contains logic for finding the adjusted statement total after reconciliation.
/// </summary>
public final class BankReconAdjustedStatementTotalAfterRecon
{
    protected Query adjustedStatementTotalAfterReconQuery;

    private QueryBuildRange debitCreditRange;
    private QueryBuildRange bankReconciliationHeaderRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBankReconciliationHeaderRange</Name>
				<Source><![CDATA[
    internal void setBankReconciliationHeaderRange(RecId _bankReconciliationHeaderRecId)
    {
        bankReconciliationHeaderRange.value(queryValue(_bankReconciliationHeaderRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedCreditAmount</Name>
				<Source><![CDATA[
    internal BankStmtISODecimal getAdjustedCreditAmount()
    {
        debitCreditRange.value(queryValue(DebitCredit::Credit));

        return this.getAdjustedAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedDebitAmount</Name>
				<Source><![CDATA[
    internal BankStmtISODecimal getAdjustedDebitAmount()
    {
        debitCreditRange.value(queryValue(DebitCredit::Debit));

        return this.getAdjustedAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustedAmount</Name>
				<Source><![CDATA[
    private BankStmtISODecimal getAdjustedAmount()
    {
        QueryRun qr = new QueryRun(this.adjustedStatementTotalAfterReconQuery);

        BankStmtISOReportEntry reportEntry;
        if (qr.next())
        {
            reportEntry = qr.get(tableNum(BankStmtISOReportEntry));
        }

        return reportEntry.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BankReconAdjustedStatementTotalAfterRecon construct()
    {
        BankReconAdjustedStatementTotalAfterRecon instance = new BankReconAdjustedStatementTotalAfterRecon();
        instance.initQuery();

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query.
    /// </summary>
    [Wrappable(true)]
    protected final void initQuery()
    {
        adjustedStatementTotalAfterReconQuery = new Query();

        QueryBuildDataSource bankStmtISOReportEntryDS = adjustedStatementTotalAfterReconQuery.addDataSource(tableNum(BankStmtISOReportEntry));

        QueryBuildDataSource bankReconciliationHistoryDetailsDS = bankStmtISOReportEntryDS.addDataSource(tableNum(BankReconciliationHistoryDetails));
        bankReconciliationHistoryDetailsDS.joinMode(JoinMode::ExistsJoin);

        adjustedStatementTotalAfterReconQuery.clearAllFields();

        bankStmtISOReportEntryDS.addSelectionField(fieldNum(BankStmtISOReportEntry, Amount), SelectionField::Sum);

        bankStmtISOReportEntryDS.addRange(fieldNum(BankStmtISOReportEntry, IsNewBankDocument)).value(queryValue(NoYes::Yes));
        debitCreditRange = bankStmtISOReportEntryDS.addRange(fieldNum(BankStmtISOReportEntry, AmountCreditDebitIndicator));

        bankReconciliationHistoryDetailsDS.addLink(fieldNum(BankStmtISOReportEntry, RecId), fieldNum(BankReconciliationHistoryDetails, BankStmtISOReportEntry));
        bankReconciliationHeaderRange = bankReconciliationHistoryDetailsDS.addRange(fieldNum(BankReconciliationHistoryDetails, BankReconciliationHeader));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>