<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementTransactionReversalDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// LedgerTransSettlement plugin for the transaction reversal dialog.
/// </summary>
[ExportMetadataAttribute(enumStr(TransactionReversalSourceType), TransactionReversalSourceType::LedgerSettlementsTransactions)]
[ExportAttribute('Dynamics.AX.Application.TransactionReversalBaseDialog')]
internal final class LedgerSettlementTransactionReversalDialog extends TransactionReversalBaseDialog
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preProcessingValidate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean preProcessingValidate()
    {
        if (this.settlementVarianceTransactionsExist())
        {
            TransDate reversingDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            
            FormControlName useExistingDateControlName = formControlStr(TransactionReversalDialog, UseExistingDate);
            FormControlName reversalDateControlName = formControlStr(TransactionReversalDialog, ReversalDate);

            FormCheckBoxControl useExistingDateControl = this.parmFormRun().control(this.parmFormRun().controlId(useExistingDateControlName));
            FormDateControl reversalDateControl = this.parmFormRun().control(this.parmFormRun().controlId(reversalDateControlName));

            if (useExistingDateControl && reversalDateControl)
            {
                if (useExistingDateControl.value() == NoYes::No)
                {
                    reversingDate = reversalDateControl.DateValue();
                }
            }

            // Check the date to make sure it is set to be the latest date (no other dates can be before it)
            this.validateSettlementReversalDate(reversingDate);
        }

        boolean isReversalAllowed = super();

        isReversalAllowed = isReversalAllowed && this.validateSettlementRecordsAreMarkedForReversal();

        return isReversalAllowed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettlementReversalDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the date referenced is after all transactions to be reversed.
    /// </summary>
    /// <param name = "_reversalDate"></param>
    [Hookable(false)]
    public void validateSettlementReversalDate(TransDate _reversalDate)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerTransSettlement ledgerTransSettlement;
        LedgerTransSettlementWork ledgerTransSettlementWork;

        select maxof(AccountingDate) from generalJournalEntry
            join generalJournalAccountEntry
            join ledgerTransSettlement
            join ledgerTransSettlementWork
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && generalJournalEntry.JournalCategory == LedgerTransType::LedgerSettlement
                && generalJournalEntry.AccountingDate > _reversalDate
                && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                && ledgerTransSettlement.SettleId == ledgerTransSettlementWork.settleId
                && ledgerTransSettlementWork.Marked == NoYes::Yes
                && ledgerTransSettlementWork.UserId == curUserId();

        if (generalJournalEntry)
        {
            throw error(strFmt("@GeneralLedger:LedgerSettlementReversalDateValidationError", generalJournalEntry.AccountingDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSettlementRecordsAreMarkedForReversal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateSettlementRecordsAreMarkedForReversal()
    {
        boolean isValid = true;

        LedgerTransSettlementWork ledgerTransSettlementWork;

        select firstonly SettleId from ledgerTransSettlementWork
            where ledgerTransSettlementWork.Marked == NoYes::Yes
                && ledgerTransSettlementWork.UserId == curUserId();

        if (!ledgerTransSettlementWork)
        {
            isValid = checkFailed("@GeneralLedger:LedgerSettlementReversalNoRecordsMarked");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReversalAndPopulateReversalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validateReversalAndPopulateReversalTable()
    {
        boolean isValidReversal = true;

        this.populateReversalTable();

        if (this.determineIfReversalCollidesWithActiveReversal() || this.determineIfReversalCollidesWithActiveBatchReversal())
        {
            isValidReversal = checkFailed("@GeneralLedger:TransactionReversalTransactionsInReversalWarning");
        }

        return isValidReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReversalTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void populateReversalTable()
    {
        // Get all Unique SettleIDs from Work table where Marked=True and userId = curUser 
        // Loop through all of these Settle ID's to run isSettleIdAlreadyReversed()
        // Then update all Work records with the same SettleID, set marked=1
        // Now, take this result, and find transactions whose parent GJE record's JournalCategory is of type "LedgerSettlement"
        // Then, loop through these records and create TransactionReversalExecutionDetail records
        boolean alreadyReversed = false;
        LedgerTransSettlementWork ledgerTransSettlementWork;
        LedgerTransSettlementWork ledgerTransSettlementWorkGoodSettleIds;

        while select SettleId from ledgerTransSettlementWork
            group by SettleId
            where ledgerTransSettlementWork.Marked == NoYes::Yes
                && ledgerTransSettlementWork.UserId == curUserId()
        {
            if (this.isSettleIdAlreadyReversed(ledgerTransSettlementWork.SettleId))
            {
                alreadyReversed = true;
            }
            else
            {
                // Only update the records we will potentially reverse.  No need to update already-reversed records.
                update_recordset ledgerTransSettlementWorkGoodSettleIds
                    setting  Marked = NoYes::Yes
                where ledgerTransSettlementWorkGoodSettleIds.SettleId == ledgerTransSettlementWork.SettleId;
            }
        }

        GeneralJournalEntry generalJournalEntrySettle;
        GeneralJournalAccountEntry generalJournalAccountEntrySettle;
        LedgerTransSettlement ledgerTransSettlementSettle;
        LedgerTransSettlementWork ledgerTransSettlementWorkSettle;

        Voucher currentSubledgerVoucher = '';

        while select * from generalJournalAccountEntrySettle
            join generalJournalEntrySettle
            join ledgerTransSettlementSettle
            join ledgerTransSettlementWorkSettle
            order by generalJournalEntrySettle.SubLedgerVoucher
            where generalJournalAccountEntrySettle.GeneralJournalEntry == generalJournalEntrySettle.RecId
                && generalJournalEntrySettle.JournalCategory == LedgerTransType::LedgerSettlement
                && ledgerTransSettlementSettle.DataAreaId == curExt()
                && ledgerTransSettlementSettle.TransRecId == generalJournalAccountEntrySettle.RecId
                && ledgerTransSettlementWorkSettle.GeneralJournalAccountEntry == ledgerTransSettlementSettle.TransRecId
                && ledgerTransSettlementSettle.SettleId == ledgerTransSettlementWorkSettle.settleId
                && ledgerTransSettlementWorkSettle.Marked == NoYes::Yes
        // These should be all the candidate records to work with, only need to add one Voucher per GJAE 
        if ((generalJournalAccountEntrySettle) && !(this.isSettleIdAlreadyReversed(ledgerTransSettlementWorkSettle.SettleId)))
        {
            if (generalJournalEntrySettle.SubledgerVoucher != currentSubledgerVoucher)
            {
                currentSubledgerVoucher = generalJournalEntrySettle.SubledgerVoucher;
                TransactionReversalExecutionDetail reversalExecutionDetail = this.initWorkTable(ledgerTransSettlementSettle, generalJournalEntrySettle, generalJournalAccountEntrySettle.PostingType);
                reversalExecutionDetail.insert();
            }
        }

        if (alreadyReversed)
        {
            warning("@GeneralLedger:LedgerSettlementsTransactionReversalNotAllowedWarning");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCount</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public RecIdCount lineCount()
    {
        // For ledger settlement reversals, set the lineCount to 1 to prevent running in batch.
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentlyProcessingReversalContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public TransactionReversalContract getCurrentlyProcessingReversalContract()
    {
        guid stagedReversalExecutionId = this.getExecutionId();
        guid activeReversalExecutionId;

        activeReversalExecutionId = TransactionReversalExecutionDetail::getActiveReversalExecutionId(stagedReversalExecutionId);

        return TransactionReversalContract::newFromExecutionId(activeReversalExecutionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormAfterReversal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void refreshFormAfterReversal()
    {
        if (formHasMethod(this.parmFormRun().args().caller(), identifierStr(refresh)))
        {
            this.clearSettlementReversalsMarkedStatus();
            this.parmFormRun().args().caller().refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkTable</Name>
				<Source><![CDATA[
    private TransactionReversalExecutionDetail initWorkTable(LedgerTransSettlement _ledgerTransSettlement, GeneralJournalEntry _generalJournalEntry, LedgerPostingType _postingType)
    {
        TransactionReversalExecutionDetail reversalExecutionDetail;

        reversalExecutionDetail.ExecutionId = this.getExecutionId();
        reversalExecutionDetail.PostingType = _postingType;
        reversalExecutionDetail.ReferenceRecId = _ledgerTransSettlement.RecId;
        reversalExecutionDetail.ReferenceTableId = _ledgerTransSettlement.TableId;
        reversalExecutionDetail.Status = TransactionReversalStatus::Waiting;
        reversalExecutionDetail.Result = strFmt("@GeneralLedger:TransactionReversalNoReverseMessage", _generalJournalEntry.JournalNumber, _generalJournalEntry.SubledgerVoucher, _postingType);
        reversalExecutionDetail.SubledgerVoucher = _generalJournalEntry.SubledgerVoucher;
        reversalExecutionDetail.TransactionDate = _generalJournalEntry.AccountingDate;
        reversalExecutionDetail.JournalNumber = _generalJournalEntry.JournalNumber;
        reversalExecutionDetail.TransactionAmount = conPeek(GeneralJournalAccountEntry::sumOfPostedAmountByGJE(_generalJournalEntry.RecId), 1);
        reversalExecutionDetail.JournalCategory = _generalJournalEntry.JournalCategory;

        return reversalExecutionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldShowTransactionCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if we should show the transaction count text.
    /// </summary>
    /// <returns>True.</returns>
    [Hookable(false)]
    public boolean shouldShowTransactionCount()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableReverseButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if we should enable the reverse button.
    /// </summary>
    /// <returns>True.</returns>
    [Hookable(false)]
    public boolean shouldEnableReverseButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the process that reverses the settlements.
    /// </summary>
    [Hookable(false)]
    public void postProcessing()
    {
        if (this.baseSettlementTransactionsExist())
        {
            MainAccountRecId currMainAccountId = this.parmFormRun().args().caller().getMainAccountRecId();

            LedgerSettleReverseProcessor ledgerSettleReverseProcessor;
            ledgerSettleReverseProcessor = LedgerSettleReverseProcessor::construct(currMainAccountId);
            ledgerSettleReverseProcessor.runOperation();

            this.parmFormRun().args().caller().postSettle();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementVarianceTransactionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if we have any settlement transactions that were created from a currency variance.
    /// </summary>
    /// <returns>True if any GJE records have a JournalCategory of "LedgerSettlement", otherwise false.</returns>
    private boolean settlementVarianceTransactionsExist()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerTransSettlement ledgerTransSettlement;
        LedgerTransSettlementWork ledgerTransSettlementWork;

        select firstOnly generalJournalEntry
            join generalJournalAccountEntry
            join ledgerTransSettlement
            join ledgerTransSettlementWork
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && generalJournalEntry.JournalCategory == LedgerTransType::LedgerSettlement
                && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                && ledgerTransSettlement.SettleId == ledgerTransSettlementWork.settleId
                && ledgerTransSettlementWork.Marked == NoYes::Yes
                && ledgerTransSettlementWork.UserId == curUserId();
        
        return (generalJournalEntry.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseSettlementTransactionsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if we have any settlement transactions that have no variance transactions.
    /// </summary>
    /// <returns>True if any GJE records do NOT have a JournalCategory of "LedgerSettlement", otherwise false.</returns>
    private boolean baseSettlementTransactionsExist()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerTransSettlement ledgerTransSettlement;
        LedgerTransSettlementWork ledgerTransSettlementWork;

        select firstOnly generalJournalEntry
            join generalJournalAccountEntry
            join ledgerTransSettlement
            join ledgerTransSettlementWork
            where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                && generalJournalEntry.JournalCategory != LedgerTransType::LedgerSettlement
                && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId
                && ledgerTransSettlement.SettleId == ledgerTransSettlementWork.settleId
                && ledgerTransSettlementWork.Marked == NoYes::Yes
                && ledgerTransSettlementWork.UserId == curUserId();
        
        return (generalJournalEntry.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSettleIdAlreadyReversed</Name>
				<Source><![CDATA[
    private boolean isSettleIdAlreadyReversed(Num _settleId)
    {
        GeneralJournalEntry generalJournalEntrySettled;
        GeneralJournalAccountEntry generalJournalAccountEntrySettled;
        LedgerTransSettlement ledgerTransSettlement;

        select count(RecId) from generalJournalAccountEntrySettled
            join generalJournalEntrySettled
            join ledgerTransSettlement
                where generalJournalAccountEntrySettled.GeneralJournalEntry == generalJournalEntrySettled.RecId
                    && generalJournalEntrySettled.JournalCategory == LedgerTransType::LedgerSettlementReversal
                    && ledgerTransSettlement.SettleId == _settleId
                    && ledgerTransSettlement.TransRecId == generalJournalAccountEntrySettled.RecId;

        return (generalJournalAccountEntrySettled.RecId > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSettlementReversalsMarkedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unmarks all settled transactions relating to a specific settleId.
    /// </summary>
    private void clearSettlementReversalsMarkedStatus()
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerTransSettlement ledgerTransSettlement;
        LedgerTransSettlementWork ledgerTransSettlementWork;
        LedgerTransSettlementWork ledgerTransSettlementWorkFinal;

        while select SettleId from ledgerTransSettlementWork
            group by SettleId
            where ledgerTransSettlementWork.Marked == NoYes::Yes
                && ledgerTransSettlementWork.UserId == curUserId()
        {
            select firstOnly generalJournalAccountEntry
                join generalJournalEntry
                join ledgerTransSettlement
                    where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                        && generalJournalEntry.JournalCategory == LedgerTransType::LedgerSettlementReversal
                        && ledgerTransSettlement.SettleId == ledgerTransSettlementWork.SettleId
                        && ledgerTransSettlement.TransRecId == generalJournalAccountEntry.RecId;
            if (generalJournalAccountEntry)
            {
                update_recordset ledgerTransSettlementWorkFinal
                    setting Marked = NoYes::No
                        where ledgerTransSettlementWorkFinal.SettleId == ledgerTransSettlementWork.SettleId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>previewReversalCount</Name>
				<Source><![CDATA[
    public boolean previewReversalCount()
    {
        return this.settlementVarianceTransactionsExist();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>