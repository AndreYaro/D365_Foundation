<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalInstrumentationConstants</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// For tracking common constant variables used throughout Journal telemetry.
/// </summary>
internal static class LedgerJournalInstrumentationConstants
{
    // Namespace
    internal const str InstrumentationNamespace = 'Journal';

    // LedgerJournalParmPost properties
    internal const str IsBatch = 'IsBatch';
    internal const str IsLateSelection = 'IsLateSelection';
    internal const str BatchJobId = 'BatchJobId';
    internal const str Error = 'Error';
    internal const str TransferErrors = 'TransferErrors';
    internal const str MagnitudeOfJournalLines = 'MagnitudeOfJournalLines';
    internal const str JournalMaxLineLimit = 'JournalMaxLineLimit';
    internal const str RetryCount = 'RetryCount';
    internal const str TimeforJournalPostingValidationStep = 'TimeforJournalPostingValidationStep';
    internal const str TimeforJournalPostingStep = 'TimeforJournalPostingStep';
    internal const str TimeforJournalPostProcessingStep = 'TimeforJournalPostProcessingStep';
    internal const str TimeforCompleteJournalProcessing = 'TimeforCompleteJournalProcessing';
    internal const str CanUseTopPicking = 'CanUseTopPicking';
    internal const str IsMultiCompanyPost = 'IsMultiCompanyPost';
    internal const str TopPickingProcessId = 'TopPickingProcessId';
    internal const str HasPostedJournalSkipped = 'HasPostedJournalSkipped';

    // Journal framework - activity
    internal const str GetJournalFromTopPickingQueue = 'GetJournalFromTopPickingQueue';
    internal const str AddJournalToTopPickingQueue = 'AddJournalToTopPickingQueue';

    // Shared Custom Properties
    internal const str CustomPropertyJournalRecId = 'JournalRecId';
    internal const str ParmPostRecId = 'ParmPostRecId';

    // Journal framework - Performance monitoring
    internal const str SourceNameLedgerJournalPosting = 'LedgerJournalPosting';
    internal const str ActivityNamePostJournal = 'PostJournal';
    internal const str LedgerJournalPerformanceMonitor = 'LedgerJournalPerformanceMonitor';
    internal const str JournalActionValidateJournal = 'ValidateJournal';
    internal const str JournalActionPostJournal = 'PostJournal';
    internal const str SubmoduleDurationFormat = '%1_DurationMs';

    internal const int JournalLineCountWarningThreshold = 2000;
    internal const str JournalLineCountWarning = 'This journal has more than 2000 lines. Performance impact is possible. Please split the journal into smaller journals.';
    internal const int JournalLineCountErrorThreshold = 5000;
    internal const str JournalLineCountError = 'This journal has more than 5000 lines. Performance impact is guaranteed. Please split the journal into smaller journals.';

    internal const str WarningJournalHasTmpVoucherWithContinuousNumberSequence = 'This journal uses temporary vouchers with a continuous number sequence. Please change the number sequence for temporary vouchers to no longer be continuous.';
    internal const str ErrorJournalAlreadyPosted = 'This journal has already been posted. No action will be taken.';
    internal const str ErrorPostedFlagNotSetOnHeader = 'Journal posting has completed but the Posted flag has not been set on the journal header.';
    internal const str ErrorTransactionScopeLevelMismatch = 'Unbalanced ttsCommit identified. Expected = %2, Actual = %3.';

    // Journal framework - Delete journal
    internal const str ActivityTypeDeleteJournal = 'DeleteJournal';
    internal const str DeleteJournalIsSetBasedDelete = 'IsSetBasedDelete';
    internal const str DeleteJournalNumOfLines = 'NumOfLines';
    internal const str DeleteTransactionsRowByRow = 'DeleteTransactionsRowByRow';
    internal const str DeleteJournalRelatedRowByRow = 'DeleteJournalRelatedRowByRow';
    internal const str ShouldDeleteJournal = 'ShouldDeleteJournal';

    // Journal framework - Unlock journal
    internal const str ActivityTypeUnlockJournal = 'Unlock journal';

    // Ledger voucher metrics
    internal const str SourceNameLedgerVoucher = 'LedgerVoucher';

    // Ledger voucher errors
    internal const str VoucherErrorLedgerHasNoFiscalCalendar = 'Voucher Error: No fiscal calendar has been defined for this ledger';
    internal const str VoucherErrorJournalEntryFiscalCalendarPeriodZero = 'Voucher Error: No fiscal calendar period exists for the journal entry on the given accounting date';
    internal const str VoucherErrorJournalEntryFiscalCalendarYearZero = 'Voucher Error: No fiscal calendar year exists for the journal entry on the given accounting date';
    internal const str VoucherErrorFiscalCalendarPeriodNotFound = 'Voucher Error: A fiscal calendar period could not be found for the journal entry';
    internal const str VoucherErrorFiscalCalendarYearNotFound = 'Voucher Error: A fiscal calendar year could not be found for the journal entry';
    internal const str VoucherErrorFiscalCalendarPeriodDoesNotMatchYear = 'Voucher Error: The fiscal calendar period does not relate to the fiscal calendar year';
    internal const str VoucherErrorAccountingDateBeyondFiscalPeriodEndDate = 'Voucher Error: The accounting date for the journal entry exceeds the end date of the fiscal calendar period';
    internal const str VoucherErrorFiscalPeriodIsNotOpen = 'Voucher Error: The fiscal period for the given accounting date is not open';
    internal const str VoucherErrorPostingNotPermittedInOpeningFiscalPeriod = 'Voucher Error: Posting is not permitted in an opening fiscal period';
    internal const str VoucherErrorNoVoucherSpecified = 'Voucher Error: No voucher was specified for posting';
    internal const str VoucherErrorOutOfBalanceAccountingCurrency = 'Voucher Error: One or more vouchers do not balance on the accounting currency';
    internal const str VoucherErrorOutOfBalanceReportingCurrency = 'Voucher Error: One or more vouchers do not balance on the reporting currency';
    internal const str VoucherErrorDuplicateVoucher = 'Voucher Error: The given voucher has already been used. Duplicate vouchers are not allowed for this transaction';
    internal const str VoucherErrorDuplicateVoucherInYear = 'Voucher Error: The given voucher has already been used. Duplicate vouchers are not allowed within the same fiscal year for this transaction';
    internal const str VoucherErrorMissingAccountNumber = 'Voucher Error: Account number does not exists for the transaction type';
    internal const str VoucherErrorInvalidLedgerDimensionCombination = 'Voucher Error: Account structure %1 for the ledger dimension combination %2 not valid for chart of accounts';
    internal const str VoucherErrorCrossCompanyDimensionCorruption = 'Voucher Error: Possible corruption in cross-company dimension reference. DisplayValue = %1, ImpliedDataAreaId = %2, CompanyId = %3, DAVC RecId = %4';
}
]]></Declaration>
		<Methods />
	</SourceCode>
</AxClass>