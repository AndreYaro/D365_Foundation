<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTruncateRRW</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSTruncateRRW</c> class is used to purge rate related records.
/// </summary>
class TMSTruncateRRW extends RunBaseBatch implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        this.truncateRouteLines();
        this.truncateRateDetails();
        this.truncateRouteSegmentTable();
        this.truncateRouteTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateRateDetails</Name>
				<Source><![CDATA[
    private void truncateRateDetails()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(TMSRateDetails), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateRouteLines</Name>
				<Source><![CDATA[
    private void truncateRouteLines()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(TMSRateRouteLine), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateRouteSegmentTable</Name>
				<Source><![CDATA[
    private void truncateRouteSegmentTable()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(TMSRouteSegmentTable), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>truncateRouteTable</Name>
				<Source><![CDATA[
    private void truncateRouteTable()
    {
        SQLDataDictionary sqlDict = new SQLDataDictionary();

        new SQLDataDictionaryPermission(methodstr(SQLDataDictionary, tableTruncate)).assert();
        sqlDict.tableTruncate(tableNum(TMSRouteTable), false);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret = true;
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version] = _packedClass;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TMSTruncateRRW construct()
    {
        return new TMSTruncateRRW();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    Static ClassDescription description()
    {
        return "@TRX906";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TMSTruncateRRW      truncateRRW;

        truncateRRW = TMSTruncateRRW::construct();

        if (truncateRRW.prompt())
        {
            truncateRRW.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>