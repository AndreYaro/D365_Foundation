<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NumberSeqModuleBudget</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class NumberSeqModuleBudget extends NumberSeqApplicationModule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Configures all the data types that are being used by the module.
    /// </summary>
    /*
    Detailed description of how to setup references for number sequences can
    be found in method loadModule() on the superclass: NumberSeqApplicationModule.
    */
    protected void loadModule()
    {
        NumberSeqDatatype datatype = NumberSeqDatatype::construct();

        /* Setup budget transaction id */
        datatype.parmDatatypeId(extendedtypenum(BudgetTransactionId));
        datatype.parmReferenceLabel(literalstr("@SYS127773"));
        datatype.parmReferenceHelp(literalstr("@SYS127803"));
        datatype.parmWizardIsContinuous(true);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(1);
        datatype.parmSortField(1);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        /* Setup budget plan id  */
        datatype.parmDatatypeId(extendedtypenum(BudgetPlanDocumentNumber));
        datatype.parmReferenceLabel(literalstr("@GLS70075"));
        datatype.parmReferenceHelp(literalstr("@GLS70198"));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(1);
        datatype.parmSortField(2);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            datatype.parmDatatypeId(extendedtypenum(PurchCommitmentNumber_PSN));
            datatype.parmReferenceLabel(literalstr("@SPS1931"));
            datatype.parmReferenceHelp(literalstr("@SPS1835"));
            datatype.parmConfigurationKeyId(configurationkeynum(PublicSector));
            datatype.parmWizardIsContinuous(false);
            datatype.parmWizardIsManual(NoYes::No);
            datatype.parmWizardfetchAheadQty(10);
            datatype.parmWizardIsChangeDownAllowed(NoYes::No);
            datatype.parmWizardIsChangeUpAllowed(NoYes::No);
            datatype.parmWizardLowest(1);
            datatype.parmSortField(2);

            datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
            this.create(datatype);
        }

        // Setup budget reservation
        datatype.parmDatatypeId(extendedTypeNum(BudgetReservationDocumentNumber_PSN));
        datatype.parmReferenceLabel(literalStr("@Budgeting_BudgetReservationPS:BudgetReservationsPluralLabel"));
        datatype.parmReferenceHelp(literalStr("@FieldDescriptions_Budgeting_BudgetReservationPS:BudgetParameters_DocumentNumber"));
        datatype.parmConfigurationKeyId(configurationKeyNum(BudgetReservation_PSN));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(1);
        datatype.parmSortField(3);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);

        // Budget reservation voucher
        datatype.parmDatatypeId(extendedTypeNum(BudgetReservationVoucher_PSN));
        datatype.parmReferenceLabel(literalStr("@Budgeting_BudgetReservationPS:BudgetReservationVouchers"));
        datatype.parmReferenceHelp(literalStr("@FieldDescriptions_Budgeting_BudgetReservationPS:BudgetParameters_BudgetReservationVoucher"));
        datatype.parmConfigurationKeyId(configurationKeyNum(BudgetReservation_PSN));
        datatype.parmWizardIsContinuous(false);
        datatype.parmWizardIsManual(NoYes::No);
        datatype.parmWizardfetchAheadQty(10);
        datatype.parmWizardIsChangeDownAllowed(NoYes::No);
        datatype.parmWizardIsChangeUpAllowed(NoYes::No);
        datatype.parmWizardLowest(1);
        datatype.parmSortField(4);

        datatype.addParameterType(NumberSeqParameterType::DataArea, true, false);
        this.create(datatype);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeqModule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the application-specific module for this class.
    /// </summary>
    /// <returns>
    ///    The module-specific ID.
    /// </returns>
    public NumberSeqModule numberSeqModule()
    {
        ;

        return NumberSeqModule::Budget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildModulesMapSubsciber</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Appends the current class to the map that links modules to number sequence data type generators.
    /// </summary>
    [SubscribesTo(classstr(NumberSeqGlobal),delegatestr(NumberSeqGlobal,buildModulesMapDelegate))]
    static void buildModulesMapSubsciber(Map numberSeqModuleNamesMap)
    {
        NumberSeqGlobal::addModuleToMap(classnum(NumberSeqModuleBudget), numberSeqModuleNamesMap);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>