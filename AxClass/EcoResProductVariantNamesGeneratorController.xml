<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductVariantNamesGeneratorController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductVariantNamesGeneratorController</c> class acts as a controller for the <c>EcoResProductVariantNamesGeneratorService</c> service.
/// </summary>
public class EcoResProductVariantNamesGeneratorController extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EcoResProductVariantNameGeneratorController</c> class.
    /// </summary>
    /// <param name = "_args">A controller arguments.</param>
    /// <returns>A instance of <c>SysOperationController</c> class.</returns>
    public static SysOperationController construct(Args _args)
    {
        EcoResProductVariantNamesGeneratorController controller = new EcoResProductVariantNamesGeneratorController(classstr(EcoResProductVariantNamesGeneratorService),
                                                            methodstr(EcoResProductVariantNamesGeneratorService, updateProductVariantNames),
                                                            SysOperationExecutionMode::Synchronous);
        controller.parmArgs(_args);
        controller.initializeContract(controller);       
        controller.parmShowDialog(_args.caller().name() == formstr(EcoResProductListPage));

        if (!controller.canGoBatch())
        {
            controller.batchInfo().parmBatchExecute(NoYes::No);
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeContract</Name>
				<Source><![CDATA[
    private void initializeContract(EcoResProductVariantNamesGeneratorController _controller)
    {
        EcoResProductVariantNamesGeneratorContract contract = _controller.getDataContractObject() as EcoResProductVariantNamesGeneratorContract;

        if (contract)
        {
            EcoResIProductVariantsProvider productVariantsProvider = args.caller() as EcoResIProductVariantsProvider;
            
            if (!productVariantsProvider)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
            
            List productVariantRecIdList = productVariantsProvider.parmProductVariantRecIdList();

            if (productVariantRecIdList.empty())
            {
                info("@SCM:NoProductVariantsSelected");
            }           
            else 
            {
                contract.parmProductVariantRecIdList(productVariantRecIdList);
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return args.caller().name() != formstr(EcoResProductVariants);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the operation to update variant name(s).
    /// </summary>
    /// <param name = "_args">The arguments for which to generate the variant name(s).</param>
    public static void main(Args _args)
    {
        EcoResProductVariantNamesGeneratorController::construct(_args).startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>