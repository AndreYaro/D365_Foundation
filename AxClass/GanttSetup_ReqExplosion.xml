<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttSetup_ReqExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttSetup_ReqExplosion extends GanttSetup
{
    NoYes                   showLinks;
    NoYes                   showLinksChanged;

    #define.CurrentVersion(4)
    #localmacro.CurrentList
        // General
        showLinks,

        // Time scale
        timescaleUnit,
        timescaleStep
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ganttVisualization</Name>
				<Source><![CDATA[
    public GanttVisualization ganttVisualization()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        // Setup form settings
        this.initParmDefaultGeneral();

        // Other settings
        this.initParmDefaultTimeScale();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultGeneral</Name>
				<Source><![CDATA[
    protected void initParmDefaultGeneral()
    {
        showLinks       = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefaultTimeScale</Name>
				<Source><![CDATA[
    protected void initParmDefaultTimeScale()
    {
        timescaleUnit = GanttTimescale::Days;
        timescaleStep = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowLinks</Name>
				<Source><![CDATA[
    public NoYes parmShowLinks(NoYes _showLinks = showLinks)
    {
        if (showLinks != _showLinks)
        {
            showLinksChanged = NoYes::Yes;
            showLinks        = _showLinks;
        }

        return showLinks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetChangedValues</Name>
				<Source><![CDATA[
    protected void resetChangedValues()
    {
        super();

        // General
        showLinksChanged            = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the form that contains the setup options for work center Gantt to the user.
    /// </summary>
    protected void runForm()
    {
        Args    args = new Args(formstr(ganttReqExplosionSetup));
        FormRun formRun;
        args.caller(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.detach();
        formRun.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   base;
        boolean     ret;
        Integer     version    = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttSetup_ReqExplosion construct()
    {
        return new GanttSetup_ReqExplosion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        #define.ganttClient('ganttClient')

        GanttClient_ReqExplosion    ganttClient;
        GanttSetup_ReqExplosion     ganttSetup;

        if (!args || !args.caller())
        {
            throw error(strfmt("@SYS53926", classstr(GanttSetup_ReqExplosion)));
        }

        if (args.caller() is FormRun)
        {
            if (!SysFormRun::hasMethod(args.caller(), #ganttClient))
            {
                throw error(strfmt("@SYS73945",args.caller().name(), #ganttClient));
            }

            ganttClient = args.caller().ganttClient();
        }
        else
        {
            ganttClient = args.caller();
        }

        ganttSetup = ganttClient.parmGanttSetup();

        ganttSetup.runForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newGanttClient</Name>
				<Source><![CDATA[
    public static GanttSetup_ReqExplosion newGanttClient(GanttClient_ReqExplosion _ganttClient)
    {
        GanttSetup_ReqExplosion ganttSetup = GanttSetup_ReqExplosion::construct();
        ganttSetup.parmGanttClient(_ganttClient);

        return ganttSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>