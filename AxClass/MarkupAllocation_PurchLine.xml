<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocation_PurchLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
[MarkupAllocationTableNameFactoryAttribute(tableStr(PurchTable)),
MarkupAllocationTableNameFactoryAttribute(tableStr(VendInvoiceInfoLine))]
public class MarkupAllocation_PurchLine extends MarkupAllocation
{
    PurchLine   purchLine;
    boolean     isTmpTablePopulated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAllocate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether allocation is possible for the given record.
    /// </summary>
    /// <returns>
    /// true if allocation is possible; otherwise, false.
    /// </returns>
    public boolean canAllocate()
    {
        boolean         found = false;
        // <GEERU>
        #ISOcountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        if (!super())
        {
            return false;
        }
        this.initValues();
        found = MarkupAllocation_PurchLine::isConnectedFrom(source, allocateAll);
        found = MarkupAllocation_PurchLine::hasSavedInvoice(source, this.queryBuild())|| found;
        // <GEERU>
        if (countryRegion_RU)
        {
            if (!this.checkCustomJournal_RU())
            {
                return false;
            }
            switch (this.checkCostAdjustmentLock_RU())
            {
                case UnknownNoYes::Unknown:
                    return false;
                case UnknownNoYes::Yes:
                    found = true;
                    break;
            }
            switch (this.checkMarkupCustVendLock_RU())
            {
                case UnknownNoYes::Unknown:
                    return false;
                case UnknownNoYes::Yes:
                    found = true;
                    break;
            }
        }
        // </GEERU>
        if (found)
        {
            return Box::okCancel("@SYS120663", DialogButton::Cancel) == DialogButton::Ok;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustomJournalPosted_RU</Name>
				<Source><![CDATA[
    public boolean checkCustomJournalPosted_RU(boolean _showWarning = false)
    {
        CustomJournalTable_RU       customJournalTable;
        CustomJournalTrans_RU       customJournalTrans;

        select firstonly CustomJournalStatus, DlvTermId from customJournalTable
        exists join customJournalTrans
            where customJournalTrans.CustomJournalId            == customJournalTable.CustomJournalId   &&
                  customJournalTrans.SalesPurchInventTransId    == purchLine.InventTransId              &&
                  customJournalTrans.SalesPurchId               == purchLine.PurchId;

        if (customJournalTable.CustomJournalStatus == CustomJournalStatus_RU::Posted && customJournalTable.DlvTermId)
        {
            if (MarkupDlvTermConnection_RU::exist(customJournalTable.DlvTermId, markupTransAllocate.MarkupCode))
            {
                if (_showWarning)
                    warning(strFmt("@GLS115428", markupTransAllocate.MarkupCode, purchLine.LineNumber));

                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustVendAllocNeed_RU</Name>
				<Source><![CDATA[
    protected boolean checkCustVendAllocNeed_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAdjustmentLocked_RU</Name>
				<Source><![CDATA[
    protected boolean costAdjustmentLocked_RU()
    {
        return purchLine.inventDim().inventProfile_RU().LockCostAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        return purchLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupTransFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>MarkupTrans</c> record from the line to which it is allocated.
    /// </summary>
    protected void initMarkupTransFromLine()
    {
        // <GIN>
        #ISOcountryRegionCodes
        boolean         countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        markupTrans.initFromPurchLine(purchLine);
        markupTrans.ModuleCategory = HeadingLine::Line;
        
        // <GIN>
        if (countryRegion_IN && LedgerParameters::find().Miscellaneouscharges_IN)
        {
            markupTrans.MarkUpAllocateAfter_IN     = markupTransAllocate.MarkUpAllocateAfter_IN;
            if(markupTrans.NotionalCharges_IN == true || markupTrans.CustomsAssessableValue_IN == true)
            {
                markupTrans.updateAssessableValue_IN();
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs initialization.
    /// </summary>
    protected void initValues()
    {
        PurchTable          purchTable;
        // <GIN>
        MarkupTrans         markupTransLoc;
        #ISOcountryRegionCodes
        boolean         countryRegion_IN = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]);
        // </GIN>

        // <GIN>
        switch (source.TableId)
        {
            case(tableNum(MarkupTrans))     :   if (countryRegion_IN && LedgerParameters::find().Miscellaneouscharges_IN)
                                                {
                                                    markupTransLoc  = source;
                                                    purchTable      = PurchTable::findRecId(markupTransLoc.TransRecId);
                                                    purchId         = purchTable.PurchId;
                                                    invoiceId       = '';
                                                    this.parmInterCompanyDirectDelivery(purchTable.InterCompanyDirectDelivery
                                                    && purchTable.interCompanyEndpointActionPolicy().PostPurchInvoice);
                                                }
                                                break;
            default                         :
        // </GIN>
                                                purchTable = PurchTable::findRecId(source.RecId, true);
                                                purchId = purchTable.PurchId;
                                                invoiceId = '';
                                                this.parmInterCompanyDirectDelivery(purchTable.InterCompanyDirectDelivery && purchTable.interCompanyEndpointActionPolicy().PostPurchInvoice);
                                                VersioningPurchaseOrder::newPurchaseOrder(purchTable).archiveOnDemand();
        // <GIN>
                                                break;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventCategoryWeight_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns unit weight of the category based item.
    /// </summary>
    /// <returns>
    /// The gross weight of the item.
    /// </returns>
    protected ItemGrossWeight inventCategoryWeight_RU()
    {
        return PurchLineForeignTradeCategory::find(purchLine.InventTransId, purchLine.DataAreaId).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventPostingProfile_RU</Name>
				<Source><![CDATA[
    protected PostingProfile inventPostingProfile_RU(InventProfileId_RU _inventProfileId)
    {
        return InventProfileCustVendLedger_RU::vendPostingProfile(_inventProfileId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    protected Qty inventQty()
    {
        Qty ret = this.qty();

        if (purchLine.ItemId && purchLine.PurchUnit)
        {
            ret = InventTableModule::unitConvert(purchLine.ItemId,
                                                 ModuleInventPurchSales::Invent,
                                                 purchLine.PurchUnit,
                                                 ret,
                                                 purchLine.InventDimId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable_RU</Name>
				<Source><![CDATA[
    protected InventTable inventTable_RU()
    {
        return purchLine.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    AmountCur  lineAmount()
    {
        AmountCur           lineAmount;
        CustInvoiceTrans    custInvoiceTrans;
        if (allocateOnlyReceived)
            lineAmount = purchLine.calcLineAmount(purchLine.RemainPurchFinancial);
        else
            lineAmount = purchLine.LineAmount;

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                select firstonly InvoiceId, InvoiceDate, InterCompanyInventTransId, Qty from custInvoiceTrans
                       index hint InvoiceIdx
                       where custInvoiceTrans.InvoiceId                 == interCompanyInvoiceId
                       &&    custInvoiceTrans.InvoiceDate               == interCompanyInvoiceDate
                       &&    custInvoiceTrans.InterCompanyInventTransId == purchLine.InventTransId;
            }
            if (custInvoiceTrans.Qty)
            {
                lineAmount = purchLine.calcLineAmount(custInvoiceTrans.Qty);
            }
        }
        return lineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupCustVendLocked_RU</Name>
				<Source><![CDATA[
    protected boolean markupCustVendLocked_RU()
    {
        return purchLine.inventDim().inventProfile_RU().LockMarkupCustVend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    Qty  qty()
    {
        Qty                 qty;
        CustInvoiceTrans    custInvoiceTrans;
        if (allocateOnlyReceived)
            qty = purchLine.RemainPurchFinancial;
        else
            qty = purchLine.PurchQty;

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                select firstonly InvoiceId, InvoiceDate, InterCompanyInventTransId from custInvoiceTrans
                       index hint InvoiceIdx
                       where custInvoiceTrans.InvoiceId                 == interCompanyInvoiceId
                       &&    custInvoiceTrans.InvoiceDate               == interCompanyInvoiceDate
                       &&    custInvoiceTrans.InterCompanyInventTransId == purchLine.InventTransId;
                if (custInvoiceTrans.Qty)
                {
                    qty = custInvoiceTrans.Qty;
                }
            }
        }
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>QueryRun</c> object to use to determine which purchase order lines are the target
    ///    of the allocation.
    /// </summary>
    /// <returns>
    ///    A <c>QueryRun</c> object that has the appropriate query ranges applied.
    /// </returns>
    QueryRun  queryBuild()
    {
        QueryRun                    query;
        CustInvoiceTrans            custInvoiceTrans;

        query = new QueryRun(queryStr(PurchLine));
        query.query().dataSourceTable(tableNum(PurchLine)).rangeField(fieldNum(PurchLine,PurchId)).value(queryValue(purchId));
        query.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, LineDeliveryType)).value(SysQuery::valueNot(LineDeliveryType::OrderLineWithMultipleDeliveries));
        if (allocationRecIds != null && allocationRecIds.elements())
        {
            if (!isTmpTablePopulated)
            {
                this.populateMarkupTmpAllocation();
                isTmpTablePopulated = true;
            }
            query.query().dataSourceTable(tableNum(PurchLine)).addDataSource(markupTmpAllocation);
            query.setRecord(markupTmpAllocation);
            query.query().dataSourceTable(tableNum(MarkupTmpAllocation)).addLink(fieldNum(PurchLine, RecId), fieldNum(MarkupTmpAllocation, MarkupAllocationRecId));
            query.query().dataSourceTable(tableNum(MarkupTmpAllocation)).joinMode(JoinMode::ExistsJoin);
        }

        if (allocateInventoried == true)
        {
            query.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, StockedProduct)).value(enum2str(NoYes::Yes));
        }

        if (interCompanyInvoiceId)
        {
            changecompany(interCompanyCompanyId ? interCompanyCompanyId : curext())
            {
                while select InvoiceId, InvoiceDate, InterCompanyInventTransId from custInvoiceTrans
                      where custInvoiceTrans.InvoiceId   == interCompanyInvoiceId
                      &&    custInvoiceTrans.InvoiceDate == interCompanyInvoiceDate
                {
                    query.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, InventTransId)).value(queryValue(custInvoiceTrans.InterCompanyInventTransId));
                }
            }
        }
        else
        {
            query.query().dataSourceTable(tableNum(PurchLine)).addRange(fieldNum(PurchLine, PurchStatus)).value(strFmt('%1','..'+enum2str(PurchStatus::Received)));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    Common  queryGet(QueryRun  transact)
    {
        purchLine = transact.get(tableNum(PurchLine));

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcCustomJournal_RU</Name>
				<Source><![CDATA[
    public void recalcCustomJournal_RU()
    {
        CustomJournalCalc_RU    customJournalCalc;
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;

        while select customJournalTable
        exists join customJournalTrans
            where customJournalTable.CustomJournalId            == customJournalTrans.CustomJournalId   &&
                  customJournalTrans.SalesPurchId               == purchLine.PurchId                    &&
                  customJournalTrans.SalesPurchInventTransId    == purchLine.InventTransId
        {
            customJournalCalc = CustomJournalCalc_RU::construct();
            customJournalCalc.initFromTable(customJournalTable);
            customJournalCalc.recalc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocation_PurchLine construct()
    {
        return new MarkupAllocation_PurchLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSavedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there are unposted invoices for a purchase order and displays a warning.
    /// </summary>
    /// <param name="_purchTable">
    ///    A <c>PurchTable</c> record.
    /// </param>
    /// <param name="_queryRun">
    ///    A <c>QueryRun</c> object that is used to determine which purchase order lines are the target of the
    ///    allocation.
    /// </param>
    /// <returns>
    ///    true if unposted invoices exist; otherwise, false.
    /// </returns>
    protected static boolean hasSavedInvoice(PurchTable _purchTable, QueryRun _queryRun)
    {
        PurchLine purchLine;
        VendInvoiceInfoTable activeVendInvoiceInfoTable;
        VendInvoiceInfoLine activeVendInvoiceInfoLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        boolean found;

        while (_queryRun.next())
        {
            purchLine = _queryRun.get(tableNum(PurchLine));

            while select RecId from activeVendInvoiceInfoLine
                where activeVendInvoiceInfoLine.InventTransId == purchLine.InventTransId
                join Num from activeVendInvoiceInfoTable
                    where activeVendInvoiceInfoTable.ParmId == activeVendInvoiceInfoLine.ParmId &&
                        activeVendInvoiceInfoTable.TableRefId == activeVendInvoiceInfoLine.TableRefId &&
                        activeVendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
            {
                warning(strFmt("@SYS120638", strLen(activeVendInvoiceInfoTable.Num) ? activeVendInvoiceInfoTable.Num : "@SYS119279", purchLine.ItemId));
                found = true;
            }
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConnectedFrom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks for connected <c>MarkupTrans</c> records on invoices for a purchase order and displays a
    ///    warning.
    /// </summary>
    /// <param name="_purchTable">
    ///    A <c>PurchTable</c> table record.
    /// </param>
    /// <param name="_allocateAll">
    ///    A Boolean value that determines whether the allocation should include all MarkupTrans records.
    /// </param>
    /// <returns>
    ///    true if connected <c>MarkupTrans</c> records exist; otherwise, false.
    /// </returns>
    protected static boolean isConnectedFrom(PurchTable _purchTable, boolean _allocateAll)
    {
        MarkupTrans markupTrans;
        Set allNums = new Set(Types::String);
        SetEnumerator numsEnum;
        while select TransTableId, TransRecId, IsDeleted, Value from markupTrans
                where
                        markupTrans.TransTableId == _purchTable.TableId &&
                        markupTrans.TransRecId == _purchTable.RecId &&
                       !markupTrans.IsDeleted &&
                        markupTrans.Value != 0
        {
            if (_allocateAll || markupTrans.markupTypeItem())
            {
                numsEnum = markupTrans.connectedFromSet().getEnumerator();
                while (numsEnum.moveNext())
                {
                    if (strLen(numsEnum.current()))
                    {
                        allNums.add(numsEnum.current());
                    }
                    else
                    {
                        allNums.add("@SYS119279");
                    }
                }
            }
        }

        numsEnum = allNums.getEnumerator();
        while (numsEnum.moveNext())
        {
            warning(strFmt("@SYS120664", numsEnum.current()));
        }
        return allNums.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>