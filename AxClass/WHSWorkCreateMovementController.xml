<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateMovementController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkCreateMovementController</c> class is responsible for coordination of warehouse inventory movememnt work creation.
/// </summary>
public final class WHSWorkCreateMovementController
{
    private WHSInventoryMovementOperationParameters movementParameters;

    internal const boolean ForceExecuteNow = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processMovementWork</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void processMovementWork(boolean _forceExecuteNow = false)
    {
        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));

        using (var activityContext = logger.executeMovementActivities().executeMovement())
        {
            logger.logInformation(strFmt('forceExecuteNow: %1', _forceExecuteNow));

            this.validateMovementWork();

            if (   !_forceExecuteNow
                && this.shouldDeferMovementExecution())
            {
                logger.logInformation(strFmt('isDeferredExecution: %1', true));

                this.queueInventMovementExecution();
            }
            else
            {
                logger.logInformation(strFmt('isDeferredExecution: %1', false));

                if (movementParameters.IsNestedLPMove)
                {
                    this.processNestedMovementWorkImpl();
                }
                else
                {
                    this.processMovementWorkImpl();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queueInventMovementExecution</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void queueInventMovementExecution()
    {
        ttsbegin;

        WHSMobileDeviceQueueMessageCollection mobileDeviceQueueMessageCollection;
        mobileDeviceQueueMessageCollection.EventType = WHSMobileDeviceQueueEventType::InventoryMovement;
        mobileDeviceQueueMessageCollection.InventLocationId = movementParameters.FromInventDim.InventLocationId;      // has no functional impact, setting only for consistency.
        mobileDeviceQueueMessageCollection.InventLocationIdTo = movementParameters.FromInventDim.InventLocationId;    // has no functional impact, setting only for consistency.
        mobileDeviceQueueMessageCollection.Identifier = NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();;
        mobileDeviceQueueMessageCollection.insert();

        WHSMobileDeviceQueueMessage mobileDeviceQueueMessage;
        mobileDeviceQueueMessage.RegisteringUserId = movementParameters.UserId;
        mobileDeviceQueueMessage.QueueMessageCollectionRecId = mobileDeviceQueueMessageCollection.RecId;
        mobileDeviceQueueMessage.MenuItemName = movementParameters.MenuItemName;
        mobileDeviceQueueMessage.LicensePlateId = movementParameters.FromInventDim.LicensePlateId;
        mobileDeviceQueueMessage.insert();

        WHSMobileDeviceQueueInventoryMovementMessage mobileDeviceQueueInventoryMovementMessage;
        mobileDeviceQueueInventoryMovementMessage.MobileDeviceQueueMessageRecId = mobileDeviceQueueMessage.RecId;
        mobileDeviceQueueInventoryMovementMessage.FromInventDimId = InventDim::findOrCreate(movementParameters.FromInventDim).inventDimId;  // make sure inventDim is created in DB.
        mobileDeviceQueueInventoryMovementMessage.ItemId = movementParameters.ItemId;
        mobileDeviceQueueInventoryMovementMessage.Qty = movementParameters.Qty;
        mobileDeviceQueueInventoryMovementMessage.UOM = movementParameters.Uom;
        mobileDeviceQueueInventoryMovementMessage.SelectedValueUOM = movementParameters.SelectedValueUom;
        mobileDeviceQueueInventoryMovementMessage.ToLocationId = movementParameters.ToLocationId;
        mobileDeviceQueueInventoryMovementMessage.ToInventStatusId = movementParameters.ToInventStatusId;
        mobileDeviceQueueInventoryMovementMessage.ToLicensePlateId = movementParameters.ToLicensePlateId;
        mobileDeviceQueueInventoryMovementMessage.MergeContainerId = movementParameters.MergeContainerId;
        mobileDeviceQueueInventoryMovementMessage.CapturedWeight = movementParameters.CapturedWeight;
        mobileDeviceQueueInventoryMovementMessage.ScannedTags = movementParameters.ScannedTags;
        mobileDeviceQueueInventoryMovementMessage.IsMoveLP = movementParameters.IsMoveLP;
        mobileDeviceQueueInventoryMovementMessage.IsNestedLPMove = movementParameters.IsNestedLPMove;
        mobileDeviceQueueInventoryMovementMessage.IsAnchoringConfirmed = movementParameters.IsAnchoringConfirmed;
        mobileDeviceQueueInventoryMovementMessage.IsLocationAndLicensePlateConfirmed = movementParameters.IsLocationAndLicensePlateConfirmed;
        mobileDeviceQueueInventoryMovementMessage.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeferMovementExecution</Name>
				<Source><![CDATA[
    private boolean shouldDeferMovementExecution()
    {
        var evaluator = WHSWorkDeferredInventoryMovementProcessingRuleEvaluator::newFromMovementParameters(movementParameters);

        return evaluator.canUseDeferredProcessing();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMovementWork</Name>
				<Source><![CDATA[
    private void validateMovementWork()
    {
        WHSWorkCreateMovementValidator::validateNotMovingContainerGroupWithOpenContainers(
            movementParameters.FromInventDim.LicensePlateId);

        WHSWorkCreateMovementValidator::validateNotMovingContainerThatIsPartOfContainerGroup(
            movementParameters.FromInventDim.LicensePlateId);

        WHSWorkCreateMovementValidator::validateToLocation(
            movementParameters.FromInventDim.InventLocationId,
            movementParameters.ToLocationId,
            movementParameters.FromInventDim.LicensePlateId,
            movementParameters.IsNestedLPMove);

        if (!movementParameters.IsNestedLPMove)
        {
            WHSWorkCreateMovementValidator::validateToLicensePlateId(
                movementParameters.FromInventDim.InventLocationId,
                movementParameters.ToLicensePlateId,
                movementParameters.IsLocationAndLicensePlateConfirmed);

            WHSWorkCreateMovementValidator::validateLicensePlateOnMultipleLocations(
                movementParameters.FromInventDim,
                movementParameters.ToLicensePlateId,
                movementParameters.ToLocationId,
                movementParameters.ItemId,
                movementParameters.Qty,
                movementParameters.SelectedValueUom,
                movementParameters.IsMoveLP);

            if ((movementParameters.FromInventDim.LicensePlateId && WHSWorkTable::findByTargetLicensePlate(movementParameters.FromInventDim.LicensePlateId))
                || (movementParameters.ToLicensePlateId && WHSWorkTable::findByTargetLicensePlate(movementParameters.ToLicensePlateId)))
            {
                WHSStageWorkMovement::validateLicensePlatesAndAssociatedWork(
                    movementParameters.FromInventDim.LicensePlateId,
                    movementParameters.ToLicensePlateId,
                    movementParameters.FromInventDim.wmsLocationId,
                    movementParameters.ToLocationId,
                    movementParameters.FromInventDim.InventLocationId,
                    movementParameters.MergeContainerId,
                    movementParameters.UserId,
                    true);
            }

            // Currently can not change status for a catch weight item unless feature enabled
            if (   movementParameters.FromInventDim.InventStatusId != movementParameters.ToInventStatusId
                && PdsGlobal::pdsIsCWItem(movementParameters.ItemId))
            {
                WHSWorkCreateMovementValidator::validateStatusChangeAllowedForCatchWeightItemOrLP(movementParameters);
            }

            if (   !movementParameters.IsAnchoringCheckedInCurrentTransaction
                && !movementParameters.IsAnchoringConfirmed)
            {
                WHSWorkCreateMovementBasic createMovement = this.createWorkCreateMovementBasicForNonNestedLPMove();
                WHSWorkInventTransReservationCollectionBuilder workInventTransReservationCollectionBuilder = createMovement.getWorkInventTransReservationCollectionBuilder();

                if (!createMovement.validateAnchoring(workInventTransReservationCollectionBuilder.getWorkLineEnumerator()))
                {
                    throw error("@WAX:MoveInventoryWithWork_FailAnchoredWorkMove");
                }
            }
        }
        else
        {
            WHSWorkCreateMovementValidator::validateAnyInventoryOnParentLicensePlate(
                movementParameters.FromInventDim.InventLocationId,
                movementParameters.FromInventDim.wMSLocationId,
                movementParameters.FromInventDim.LicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkCreateMovementBasicForNonNestedLPMove</Name>
				<Source><![CDATA[
    private WHSWorkCreateMovementBasic createWorkCreateMovementBasicForNonNestedLPMove()
    {
        WHSWorkCreateMovementBasic createMovement = WHSWorkCreateMovementBasic::newFromParms(
            movementParameters.UserId,
            movementParameters.IsMoveLP ? '' : movementParameters.ItemId,
            movementParameters.Qty,
            movementParameters.Uom,
            movementParameters.FromInventDim,
            movementParameters.FromInventDim.LicensePlateId,
            movementParameters.FromInventDim.wmsLocationId,
            movementParameters.ToLocationId,
            movementParameters.ToLicensePlateId,
            movementParameters.FromInventDim.InventStatusId,
            movementParameters.ToInventStatusId);

        if (this.shouldMoveByContainer())
        {
            createMovement.parmContainerId(movementParameters.MergeContainerId);
        }

        createMovement.parmSkipAnchoringValidation(true); // Skip validation of anchoring, because we have already done it above if necessary
        createMovement.parmCapturedWeight(movementParameters.CapturedWeight);
        createMovement.parmScannedTags(movementParameters.ScannedTags);

        return createMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMovementWorkImpl</Name>
				<Source><![CDATA[
    private void processMovementWorkImpl()
    {
        WHSWorkCreateMovementBasic createMovement = this.createWorkCreateMovementBasicForNonNestedLPMove();

        createMovement.createWork();

        if (   movementParameters.FromInventDim.LicensePlateId
            && WHSLicensePlate::find(movementParameters.FromInventDim.LicensePlateId).LicensePlateParent
            && (   movementParameters.FromInventDim.LicensePlateId == movementParameters.ToLicensePlateId
                || !WMSLocation::find(movementParameters.ToLocationId, movementParameters.FromInventDim.InventLocationId).whsLocationIsLPControlled()
                || !WHSLicensePlate::getTotalHandlingQtyOnLicensePlateWithDelta(movementParameters.FromInventDim.LicensePlateId)))
        {
            WHSLicensePlate::removeFromParentLP(movementParameters.FromInventDim.LicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNestedMovementWorkImpl</Name>
				<Source><![CDATA[
    private void processNestedMovementWorkImpl()
    {
        if (WHSContainerTable::isLicensePlateIdUsedForContainerGroupingWithNonCompletedWork(movementParameters.FromInventDim.LicensePlateId))
        {
            WHSWorkCreateMovement::createGroupedContainersMovementWork(
                movementParameters.FromInventDim.LicensePlateId,
                movementParameters.ToLocationId,
                movementParameters.UserId);
        }
        else
        {
            if (!WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(movementParameters.FromInventDim.LicensePlateId))
            {
                WHSWorkCreateMovementBasic::createBasicMovementWork(movementParameters.UserId,
                                                                    '',
                                                                    movementParameters.Qty,
                                                                    movementParameters.Uom,
                                                                    movementParameters.FromInventDim,
                                                                    movementParameters.FromInventDim.LicensePlateId,
                                                                    movementParameters.FromInventDim.wmsLocationId,
                                                                    movementParameters.ToLocationId,
                                                                    movementParameters.FromInventDim.LicensePlateId,
                                                                    movementParameters.FromInventDim.InventStatusId,
                                                                    movementParameters.ToInventStatusId);
            }
            
            WHSWorkCreateMovement::createNestedMovementWork(
                movementParameters.FromInventDim.LicensePlateId,
                movementParameters.FromInventDim.InventLocationId,
                movementParameters.ToLocationId,
                movementParameters.UserId);
        }

        if (WHSLicensePlate::find(movementParameters.FromInventDim.LicensePlateId).LicensePlateParent)
        {
            WHSLicensePlate::removeFromParentLP(movementParameters.FromInventDim.LicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldMoveByContainer</Name>
				<Source><![CDATA[
    private boolean shouldMoveByContainer()
    {
        if (movementParameters.MergeContainerId && movementParameters.FromInventDim.LicensePlateId)
        {
            WHSContainerLine containerLine;
            Qty containerQty;

            // If moving the container is the entire LP, just move by LP
            while select ItemId, UnitId, Qty, InventDimId from containerLine
                where containerLine.ContainerId == movementParameters.MergeContainerId
            {
                containerQty += InventTableModule::unitConvert(containerLine.ItemId, ModuleInventPurchSales::Invent, containerLine.UnitId, containerLine.Qty, containerLine.InventDimId);
            }
    
            return containerQty != WHSLicensePlate::getTotalQtyOnLicensePlate(movementParameters.FromInventDim.LicensePlateId);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new() { }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovementParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSWorkCreateMovementController newFromMovementParameters(WHSInventoryMovementOperationParameters _movementParameters)
    {
        WHSWorkCreateMovementController controller = new WHSWorkCreateMovementController();
        controller.movementParameters = _movementParameters;

        return controller;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>