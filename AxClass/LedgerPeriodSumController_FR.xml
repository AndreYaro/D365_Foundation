<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPeriodSumController_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerPeriodSumController_FR</c> class is a controller class for the <c>LedgerPeriodSum_FR</c> report.
/// </summary>
class LedgerPeriodSumController_FR  extends SrsReportRunController implements BatchRetryable
{
    private const SRSCatalogItemName LedgerPeriodSumReportName = 'LedgerPeriodSum_FR.Report';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoFR, GlobalizationConstants::FeatureReferenceFR00007] ],
            funcName()
        );
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoFR, GlobalizationConstants::FeatureReferenceFR00017] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides this method to change the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        this.setParameterValue(this.parmReportContract().parmRdpContract());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameterValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the UI Parameters for the SSRS report.
    /// </summary>
    /// <param name="_ledgerPeriodSumContract_FR">
    ///    An instance of the <c>LedgerPeriodSumContract_FR</c> contract class.
    /// </param>
    public void setParameterValue(LedgerPeriodSumContract_FR _ledgerPeriodSumContract_FR)
    {
        FiscalCalendarRecId calendarRecId;
        boolean             isCloseYearExist;
        LedgerRecId         ledgerRecId = Ledger::current();

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        isCloseYearExist = LedgerFiscalCalendar::existYearByYearStatusDates(
                                calendarRecId,
                                ledgerRecId,
                                _ledgerPeriodSumContract_FR.parmStartDate(),
                                _ledgerPeriodSumContract_FR.parmEndDate() ,
                                FiscalYearStatus::Close);

        if (isCloseYearExist)
        {
            _ledgerPeriodSumContract_FR.parmPeriodStatus("@SYS77870");
        }
        else
        {
            _ledgerPeriodSumContract_FR.parmPeriodStatus("@SYS19731");
        }

        _ledgerPeriodSumContract_FR.parmUserId(curuserid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerPeriodSumController_FR ledgerPeriodSumController_FR = new LedgerPeriodSumController_FR();
        ledgerPeriodSumController_FR.parmReportName(LedgerPeriodSumReportName);
        ledgerPeriodSumController_FR.parmArgs(_args);
        ledgerPeriodSumController_FR.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>