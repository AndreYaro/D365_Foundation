<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>eInvoiceFreeTextController_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceFreeTextController_MX</c> class is the controller class for the
/// <c>EInvoiceReport_MX</c> report.
/// </summary>
public class eInvoiceFreeTextController_MX extends EInvoiceCFDIFreeTextController_MX implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the print management configuration into <c>FormLetterReport.</c>
    /// </summary>
    /// <param name = "_formLetterReport">The  <c>FormLetterReport.</c> that will be used in report printing.</param>
    /// <remarks>
    /// Override this method to set print management configuration specific.
    /// </remarks>
    protected void setPrintMgmt(FormLetterReport _formLetterReport)
    {
        // if we were called from posting, we have a form letter
        if (classIdGet(this.parmArgs().caller()) == classNum(SalesFormLetter_FreeText))
        {
            SalesFormLetter_FreeText salesFormLetter  = this.parmArgs().caller();

            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Copy)));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesFormLetter.printerSettingsFormletter(PrintSetupOriginalCopy::Original)));
            formLetterReport.parmUsePrintMgmtDestinations(salesFormLetter.usePrintManagement());
            formLetterReport.parmUseUserDefinedDestinations(salesFormLetter.parmUseUserDefinedDestinations());
            usePrintMgmtDestinations = salesFormLetter.usePrintManagement();
        }
        else
        {
            super(_formLetterReport);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId2RecID</Name>
				<Source><![CDATA[
    protected recId invoiceId2RecID(InvoiceId _invoiceId)
    {
        //  When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is concatenation of # and the custInvoiceJour.RecId
        //  This method will strip the leading # and cast the string to a int64.
        return str2int64(subStr(_invoiceId, 2, strLen(_invoiceId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected void outputReport()
    {
        EInvoiceJourBaseMap_MX eInvoiceJourMapping;
        SRSPrintDestinationSettings printerSettings = formLetterReport.getCurrentPrintSetting().parmPrintJobSettings();

        EInvoiceJour_MX eInvoiceJour_MX = this.getEInvoiceJour();
        eInvoiceJourMapping = EInvoiceJourBaseMap_MX::construct(eInvoiceJour_MX);

        EInvoiceFreeTextController_MX::addInvoiceIdToFileName(eInvoiceJourMapping, printerSettings);

        if (sendMailCalled)
        {
            printerSettings.parmPrintToArchive(true);
            printerSettings.printMediumType(SRSPrintMediumType::Archive);
        }

        super();

        this.sendPDFEmail(eInvoiceJourMapping, printerSettings);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCFDI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the invoice to be printed is CFDI or CFD.
    /// </summary>
    /// <returns>True if the invoice is a CFDI, false if is CFD.</returns>
    protected boolean isCFDI()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInvoiceIdToFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the invoice ID to file name.
    /// </summary>
    /// <param name="_eInvoiceJourMapping">The eInvoice record.</param>
    /// <param name="_printSettings">The printer settings.</param>
    /// <returns>The composed string.</returns>
    public static str addInvoiceIdToFileName(EInvoiceJourBaseMap_MX _eInvoiceJourMapping, SRSPrintDestinationSettings _printSettings)
    {
        #file
        #define.separator('_')

        Filename    reportFile = _printSettings.fileName();
        Filename    localfilepath;
        Filename    localfileName;
        Filename    localfileExt;

        Filename    newReportFilename;

        [localfilepath, localfileName, localfileExt] = fileNameSplit(reportFile);

        localfileName = localfileName + #separator + _eInvoiceJourMapping.invoiceId();

        newReportFilename = localfilepath + localfileName + localfileExt;

        _printSettings.fileName(newReportFilename);

        return newReportFilename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasEInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tests if the <c>CustInvoiceJour</c> record in the <c>Args</c> object has a related <c>EInvoice</c>
    /// record and the journal list does not contain a <c>Proforma</c> invoice
    /// </summary>
    /// <param name="_args">The arguments parameter</param>
    /// <returns>true if the <c>CustInvoiceJour</c> record in the <c>Args</c> objecT has a related <c>EInvoice</c> record</returns>
    public static boolean hasEInvoice(Args _args)
    {
        EInvoiceJour_MX eInvoiceJour_MX;
        CustInvoiceJour custInvoiceJour;
        RecordSortedList journalList;

        // if we have a record, get a journal list, else posting sent a journa list
        journalList = _args.record() ? FormLetter::createJournalListCopy(_args.record()) : _args.object();

        if (!journalList || !journalList.first(custInvoiceJour))
        {
            throw error("@SYS26348");
        }

        do
        {
            eInvoiceJour_MX = EInvoiceJour_MX::findByRef(tableNum(CustInvoiceJour), custInvoiceJour.RecId);

            if (!eInvoiceJour_MX || custInvoiceJour.isProforma())
            {
                return false;
            }
        }
        while (journalList.next(custInvoiceJour));

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the <c>EInvoiceReport_MX</c> SRS Report.
    /// </summary>
    /// <param name="_args">Args object.</param>
    public static void main(Args _args)
    {
        EInvoiceControllerBase_MX controller = new EInvoiceFreeTextController_MX();

        controller.initialize(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>