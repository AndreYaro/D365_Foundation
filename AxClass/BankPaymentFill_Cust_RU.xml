<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymentFill_Cust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankPaymentFill_Cust_RU extends BankPaymentFill_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getForeignRecipientName</Name>
				<Source><![CDATA[
        protected Name getForeignRecipientName()
    {
        return CustTable::findByCompany(paymentOrderJour.CompanyRecipient, paymentOrderJour.AccountNumForeignRecipient).name();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankAccountMap</Name>
				<Source><![CDATA[
        protected BankAccountMap initBankAccountMap()
    {
        BankAccountMap    tmpBankAccountMap;

        tmpBankAccountMap = CustBankAccount::findByCompany(paymentOrderJour.CompanyRecipient,
                                                           paymentOrderJour.CustVendPaymAccount,
                                                           paymentOrderJour.BankIdRecipient);

        return tmpBankAccountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendPaymModeTable</Name>
				<Source><![CDATA[
        protected CustVendPaymModeTable initCustVendPaymModeTable()
    {
        return CustPaymModeTable::find(paymentOrderJour.PaymMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendTable</Name>
				<Source><![CDATA[
        protected CustVendTable initCustVendTable()
    {
        CustVendTable   tmpCustVendTable;

        tmpCustVendTable = CustTable::findByCompany(paymentOrderJour.CompanyRecipient, paymentOrderJour.AccountNumRecipient);

        return tmpCustVendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWePayer</Name>
				<Source><![CDATA[
        protected boolean isWePayer()
    {
        return (paymentOrderJour.AmountCur <= 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BankPaymentFill_Cust_RU construct(BankPaymentOrderJour_RU  _paymentOrderJour)
    {
        BankPaymentFill_Cust_RU     bankPaymentFill;

        switch (_paymentOrderJour.PaymOrderType)
        {
            case PaymOrderType_RU::MST :
                bankPaymentFill = new BankPaymentFill_Cust_RU(_paymentOrderJour);
            break;

            case PaymOrderType_RU::Cur :
                bankPaymentFill = new BankPaymentFill_Cust_Cur_RU(_paymentOrderJour);
            break;

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return bankPaymentFill;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>