<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerReconciliation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerReconciliation</c> class handles ledger transactions for the reconciliation process.
/// </summary>
abstract class LedgerReconciliation
{
    TransDate           fromDate;
    TransDate           toDate;
    Voucher             fromVoucher;
    Voucher             toVoucher;
    NoYes               includeDetails;
    NoYes               showDifferencesOnly;
    MainAccountNum      fromMainAccount;
    MainAccountNum      toMainAccount;
    PostingProfile      fromPostingProfile;
    PostingProfile      toPostingProfile;
    LedgerCurrencySelection ledgerCurrencySelection;
    Query               ledgerQuery;
    Query               subledgerQuery;

    LedgerReconciliationLedgerTmp ledgerReconciliationLedgerTmp;
    LedgerReconciliationLedgerTmp ledgerReconciliationLedgerTmpSummary;
    LedgerReconcileAccountsTmp ledgerReconcileAccountsTmp;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        fromDate,
        toDate,
        fromVoucher,
        toVoucher,
        includeDetails,
        showDifferencesOnly,
        fromPostingProfile,
        toPostingProfile,
        fromMainAccount,
        toMainAccount
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerReconcileAccountsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the records to the <c>LedgerReconciliationAccountsTmp</c> table.
    /// </summary>
    protected abstract void createLedgerReconcileAccountsTmp()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerReconciliationLedgerTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the records to the <c>LedgerReconciliationLedgerTmp</c> table.
    /// </summary>
    /// <param name="_separateIsCorrectionValues">
    /// A boolean value that indicates whether to separate correction and non-correction values; optional.
    /// </param>
    protected void createLedgerReconciliationLedgerTmp(boolean _separateIsCorrectionValues = false)
    {
        this.createLedgerReconcileAccountsTmp();

        this.setQueryUpperRange();

        //Use the new way of pulling data for report for more accuracy on the report including data corruption scenarios
        if (FeatureStateProvider::isFeatureEnabled(EnableReconciliationReportToPullDataFromGLForMoreAccuracy::instance()))
        {
            if (includeDetails)
            {
                this.insertGLTransactionsIncludingSourceDocumentDetailThatAreNotSummarizedInGL(_separateIsCorrectionValues);
                this.insertSourceDocumentBasedGLTrxDetailForTransactionsThatAreSummarizedInGL(_separateIsCorrectionValues);
            }
            else
            {
                this.insertGLTransactionsIncludingSourceDocumentSummaryThatAreNotSummarizedInGL();
                this.insertSourceDocumentBasedGLTrxSummaryForTransactionsThatAreSummarizedInGL();
                this.mergeLedgerReconciliationLedgerTmp();
            }
        }
        else
        {
            if (includeDetails)
            {
                this.insertNonSourceDocumentDetail(_separateIsCorrectionValues);
                this.insertSourceDocumentDetail(_separateIsCorrectionValues);
            }
            else
            {
                this.insertNonSourceDocumentSummary();
                this.insertSourceDocumentSummary();
                this.mergeLedgerReconciliationLedgerTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger balance.
    /// </summary>
    /// <param name="_mainAccount">
    /// The main account for the ledger balance.
    /// </param>
    /// <param name="_journalNumber">
    /// The journal number for the ledger balance.
    /// </param>
    /// <param name="_voucher">
    /// The voucher number for the ledger balance.
    /// </param>
    /// <param name="_transDate">
    /// The transaction date for the ledger balance.
    /// </param>
    /// <param name="_ledgerAccountingCurrencyAmount">
    /// The ledger accounting currency amount for the ledger balance.
    /// </param>
    /// <param name="_isCorrection">
    /// A Boolean value that indicates whether the ledger balance is a correction.
    /// </param>
    protected void initializeLedgerBalance(MainAccount _mainAccount,
                                                GeneralJournalEntryJournalNumber _journalNumber,
                                                Voucher _voucher,
                                                TransDate _transDate,
                                                AmountMSTDebCred _ledgerAccountingCurrencyAmount,
                                                boolean _isCorrection)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNonSourceDocumentDetail</Name>
				<Source><![CDATA[
    private void insertNonSourceDocumentDetail(boolean _separateIsCorrectionValues)
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;

        if (_separateIsCorrectionValues)
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                IsCorrection,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                JournalNumber,
                AccountingDate,
                Voucher,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select IsCorrection, sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.AccountingDate,
                    generalJournalEntry.SubledgerVoucher,
                    generalJournalAccountEntry.IsCorrection
            join JournalNumber, AccountingDate, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.SubledgerVoucher >= fromVoucher
                    && generalJournalEntry.SubledgerVoucher <= toVoucher
                    && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                    && generalJournalEntry.TransferId == 0
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == generalJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
        else
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                JournalNumber,
                AccountingDate,
                Voucher,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.AccountingDate,
                    generalJournalEntry.SubledgerVoucher
            join JournalNumber, AccountingDate, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.SubledgerVoucher >= fromVoucher
                    && generalJournalEntry.SubledgerVoucher <= toVoucher
                    && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                    && generalJournalEntry.TransferId == 0
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == generalJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNonSourceDocumentSummary</Name>
				<Source><![CDATA[
    private void insertNonSourceDocumentSummary()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;

        insert_recordset ledgerReconciliationLedgerTmpSummary
        (
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            MainAccount,
            MainAccountId,
            MainAccountName
        )
        select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
            group by davc.MainAccount,
                mainAccount.MainAccountId,
                mainAccount.Name
        join generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.Ledger == Ledger::current()
                && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                && generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate
                && generalJournalEntry.SubledgerVoucher >= fromVoucher
                && generalJournalEntry.SubledgerVoucher <= toVoucher
                && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                && generalJournalEntry.TransferId == 0
        join fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
        join MainAccount from davc
            where davc.RecId == generalJournalAccountEntry.LedgerDimension
        join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
        exists join LedgerReconcileAccountsTmp
            where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocumentDetail</Name>
				<Source><![CDATA[
    private void insertSourceDocumentDetail(boolean _separateIsCorrectionValues)
    {
        SubledgerJournalEntry               subledgerJournalEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        AccountingEvent                     accountingEvent;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        
        if (_separateIsCorrectionValues)
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                IsCorrection,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                JournalNumber,
                Voucher,
                AccountingDate,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select isCorrection, sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    subledgerJournalEntry.JournalNumber,
                    accountingEvent.AccountingDate,
                    subledgerJournalEntry.Voucher,
                    subledgerJournalAccountEntry.IsCorrection
            join JournalNumber, Voucher from subledgerJournalEntry
                where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry
                    && subledgerJournalEntry.Ledger == Ledger::current()
                    && subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && subledgerJournalEntry.Voucher >= fromVoucher
                    && subledgerJournalEntry.Voucher <= toVoucher
                    && subledgerJournalEntry.VoucherDataAreaId == curext()
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    && accountingEvent.AccountingDate >= fromDate
                    && accountingEvent.AccountingDate <= toDate
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == subledgerJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
        else
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                SubledgerJourId,
                Voucher,
                JournalNumber,
                AccountingDate,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    subledgerJournalEntry.JournalNumber,
                    accountingEvent.AccountingDate,
                    subledgerJournalEntry.Voucher,
                    generalJournalEntry.JournalNumber
            join JournalNumber, Voucher from subledgerJournalEntry
                where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry
                    && subledgerJournalEntry.Ledger == Ledger::current()
                    && subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && subledgerJournalEntry.Voucher >= fromVoucher
                    && subledgerJournalEntry.Voucher <= toVoucher
                    && subledgerJournalEntry.VoucherDataAreaId == curext()
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join JournalNumber from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    && accountingEvent.AccountingDate >= fromDate
                    && accountingEvent.AccountingDate <= toDate
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == subledgerJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocumentSummary</Name>
				<Source><![CDATA[
    private void insertSourceDocumentSummary()
    {
        SubledgerJournalEntry               subledgerJournalEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        AccountingEvent                     accountingEvent;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;

        insert_recordset ledgerReconciliationLedgerTmpSummary
        (
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            MainAccount,
            MainAccountId,
            MainAccountName
        )
        select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
            group by davc.MainAccount,
                mainAccount.MainAccountId,
                mainAccount.Name
        join subledgerJournalEntry
            where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.subledgerJournalEntry
                && subledgerJournalEntry.Ledger == Ledger::current()
                && subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
                && subledgerJournalEntry.Voucher >= fromVoucher
                && subledgerJournalEntry.Voucher <= toVoucher
                && subledgerJournalEntry.VoucherDataAreaId == curext()
        join accountingEvent
            where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                && accountingEvent.AccountingDate >= fromDate
                && accountingEvent.AccountingDate <= toDate
        join fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == subledgerJournalEntry.FiscalCalendarPeriod
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
        join MainAccount from davc
            where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
        join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
        exists join LedgerReconcileAccountsTmp
            where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGLTransactionsIncludingSourceDocumentDetailThatAreNotSummarizedInGL</Name>
				<Source><![CDATA[
    private void insertGLTransactionsIncludingSourceDocumentDetailThatAreNotSummarizedInGL(boolean _separateIsCorrectionValues)
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;
        SubledgerJournalEntry               subLedgerJournalEntry;
        AccountingEvent                     accountingEvent;

        if (_separateIsCorrectionValues)
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                IsCorrection,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                JournalNumber,
                AccountingDate,
                Voucher,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select IsCorrection, sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.AccountingDate,
                    generalJournalEntry.SubledgerVoucher,
                    generalJournalAccountEntry.IsCorrection
            join JournalNumber, AccountingDate, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.SubledgerVoucher >= fromVoucher
                    && generalJournalEntry.SubledgerVoucher <= toVoucher
                    && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                    && generalJournalEntry.SubledgerVoucher != ''
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == generalJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
        else
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                JournalNumber,
                AccountingDate,
                Voucher,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    generalJournalEntry.JournalNumber,
                    generalJournalEntry.AccountingDate,
                    generalJournalEntry.SubledgerVoucher
            join JournalNumber, AccountingDate, SubledgerVoucher from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.Ledger == Ledger::current()
                    && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.SubledgerVoucher >= fromVoucher
                    && generalJournalEntry.SubledgerVoucher <= toVoucher
                    && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                    && generalJournalEntry.SubledgerVoucher != ''
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == generalJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }

        update_recordset ledgerReconciliationLedgerTmp
            setting SubledgerJourId = subledgerJournalEntry.JournalNumber
        join subledgerJournalEntry
            where subledgerJournalEntry.Voucher == ledgerReconciliationLedgerTmp.Voucher &&
                subledgerJournalEntry.Ledger == Ledger::current() &&
                subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
        exists join accountingEvent
            where accountingEvent.AccountingDate == ledgerReconciliationLedgerTmp.AccountingDate &&
                accountingEvent.RecId == subledgerJournalEntry.AccountingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGLTransactionsIncludingSourceDocumentSummaryThatAreNotSummarizedInGL</Name>
				<Source><![CDATA[
    private void insertGLTransactionsIncludingSourceDocumentSummaryThatAreNotSummarizedInGL()
    {
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;

        insert_recordset ledgerReconciliationLedgerTmpSummary
        (
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            MainAccount,
            MainAccountId,
            MainAccountName
        )
        select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from generalJournalAccountEntry
            group by davc.MainAccount,
                mainAccount.MainAccountId,
                mainAccount.Name
        join generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.Ledger == Ledger::current()
                && generalJournalEntry.PostingLayer == CurrentOperationsTax::Current
                && generalJournalEntry.AccountingDate >= fromDate
                && generalJournalEntry.AccountingDate <= toDate
                && generalJournalEntry.SubledgerVoucher >= fromVoucher
                && generalJournalEntry.SubledgerVoucher <= toVoucher
                && generalJournalEntry.SubledgerVoucherDataAreaId == curext()
                && generalJournalEntry.SubledgerVoucher != ''
        join fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == generalJournalEntry.FiscalCalendarPeriod
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
        join MainAccount from davc
            where davc.RecId == generalJournalAccountEntry.LedgerDimension
        join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
        exists join LedgerReconcileAccountsTmp
            where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocumentBasedGLTrxDetailForTransactionsThatAreSummarizedInGL</Name>
				<Source><![CDATA[
    private void insertSourceDocumentBasedGLTrxDetailForTransactionsThatAreSummarizedInGL(boolean _separateIsCorrectionValues)
    {
        SubledgerJournalEntry               subledgerJournalEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        AccountingEvent                     accountingEvent;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        
        if (_separateIsCorrectionValues)
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                IsCorrection,
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                SubledgerJourId,
                Voucher,
                JournalNumber,
                AccountingDate,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select isCorrection, sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    subledgerJournalEntry.JournalNumber,
                    accountingEvent.AccountingDate,
                    subledgerJournalEntry.Voucher,
                    subledgerJournalAccountEntry.IsCorrection,
                    generalJournalEntry.JournalNumber
            join JournalNumber, Voucher from subledgerJournalEntry
                where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry
                    && subledgerJournalEntry.Ledger == Ledger::current()
                    && subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && subledgerJournalEntry.Voucher >= fromVoucher
                    && subledgerJournalEntry.Voucher <= toVoucher
                    && subledgerJournalEntry.VoucherDataAreaId == curext()
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join JournalNumber from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.SubledgerVoucher == ''
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    && accountingEvent.AccountingDate >= fromDate
                    && accountingEvent.AccountingDate <= toDate
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == subledgerJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
        else
        {
            insert_recordset ledgerReconciliationLedgerTmp
            (
                AccountingCurrencyAmount,
                ReportingCurrencyAmount,
                SubledgerJourId,
                Voucher,
                JournalNumber,
                AccountingDate,
                MainAccount,
                MainAccountId,
                MainAccountName
            )
            select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
                group by davc.MainAccount,
                    mainAccount.MainAccountId,
                    mainAccount.Name,
                    subledgerJournalEntry.JournalNumber,
                    accountingEvent.AccountingDate,
                    subledgerJournalEntry.Voucher,
                    generalJournalEntry.JournalNumber
            join JournalNumber, Voucher from subledgerJournalEntry
                where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.SubledgerJournalEntry
                    && subledgerJournalEntry.Ledger == Ledger::current()
                    && subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
                    && subledgerJournalEntry.Voucher >= fromVoucher
                    && subledgerJournalEntry.Voucher <= toVoucher
                    && subledgerJournalEntry.VoucherDataAreaId == curext()
            join generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
            join JournalNumber from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                    && generalJournalEntry.SubledgerVoucher == ''
            join AccountingDate from accountingEvent
                where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                    && accountingEvent.AccountingDate >= fromDate
                    && accountingEvent.AccountingDate <= toDate
            join fiscalCalendarPeriod
                where fiscalCalendarPeriod.RecId == subledgerJournalEntry.FiscalCalendarPeriod
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
            join MainAccount from davc
                where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
            join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
            exists join LedgerReconcileAccountsTmp
                where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSourceDocumentBasedGLTrxSummaryForTransactionsThatAreSummarizedInGL</Name>
				<Source><![CDATA[
    private void insertSourceDocumentBasedGLTrxSummaryForTransactionsThatAreSummarizedInGL()
    {
        SubledgerJournalEntry               subledgerJournalEntry;
        SubledgerJournalAccountEntry        subledgerJournalAccountEntry;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        AccountingEvent                     accountingEvent;
        FiscalCalendarPeriod                fiscalCalendarPeriod;
        DimensionAttributeValueCombination  davc;
        MainAccount                         mainAccount;

        insert_recordset ledgerReconciliationLedgerTmpSummary
        (
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            MainAccount,
            MainAccountId,
            MainAccountName
        )
        select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount) from subledgerJournalAccountEntry
            group by davc.MainAccount,
                mainAccount.MainAccountId,
                mainAccount.Name
        join subledgerJournalEntry
            where subledgerJournalEntry.RecId == subledgerJournalAccountEntry.subledgerJournalEntry
                && subledgerJournalEntry.Ledger == Ledger::current()
                && subledgerJournalEntry.PostingLayer == CurrentOperationsTax::Current
                && subledgerJournalEntry.Voucher >= fromVoucher
                && subledgerJournalEntry.Voucher <= toVoucher
                && subledgerJournalEntry.VoucherDataAreaId == curext()
        join accountingEvent
            where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                && accountingEvent.AccountingDate >= fromDate
                && accountingEvent.AccountingDate <= toDate
        join fiscalCalendarPeriod
            where fiscalCalendarPeriod.RecId == subledgerJournalEntry.FiscalCalendarPeriod
                && fiscalCalendarPeriod.Type == FiscalPeriodType::Operating
        join MainAccount from davc
            where davc.RecId == subledgerJournalAccountEntry.LedgerDimension
        join MainAccountId, Name from mainAccount
                where mainAccount.RecId == davc.MainAccount
        exists join LedgerReconcileAccountsTmp
            where LedgerReconcileAccountsTmp.MainAccount == davc.MainAccount
        exists join generalJournalAccountEntry
            where generalJournalAccountEntry.RecId == subledgerJournalAccountEntry.GeneralJournalAccountEntry
        exists join generalJournalEntry
            where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
                && generalJournalEntry.SubledgerVoucher == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeLedgerReconciliationLedgerTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the temp table <c>LedgerReconciliationLedgerTmp</c> by merging the records from
    /// source document and non-source document based on MainAccountId for Summary report.
    /// </summary>
    private void mergeLedgerReconciliationLedgerTmp()
    {
        insert_recordset ledgerReconciliationLedgerTmp
        (
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            MainAccount,
            MainAccountId,
            MainAccountName
        )
        select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount),
            MainAccount,
            MainAccountId,
            MainAccountName
        from ledgerReconciliationLedgerTmpSummary
            group by ledgerReconciliationLedgerTmpSummary.MainAccount,
                ledgerReconciliationLedgerTmpSummary.MainAccountId,
                ledgerReconciliationLedgerTmpSummary.MainAccountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromMainAccount</Name>
				<Source><![CDATA[
    public MainAccountNum parmFromMainAccount(MainAccountNum _fromMainAccount = fromMainAccount)
    {
        fromMainAccount = _fromMainAccount;
        return fromMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile parmFromPostingProfile(PostingProfile _fromPostingProfile = fromPostingProfile)
    {
        fromPostingProfile = _fromPostingProfile;
        return fromPostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>FromVoucher</c> parameter.
    /// </summary>
    /// <param name="_fromVoucher">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>FromVoucher</c> parameter.
    /// </returns>
    public Voucher parmFromVoucher(Voucher _fromVoucher = fromVoucher)
    {
        fromVoucher =_fromVoucher;
        return fromVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeDetails</Name>
				<Source><![CDATA[
    public NoYes parmIncludeDetails(NoYes _includeDetails = includeDetails)
    {
        includeDetails = _includeDetails;
        return includeDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDifferencesOnly</Name>
				<Source><![CDATA[
    public NoYes parmShowDifferencesOnly(NoYes _showDifferencesOnly = showDifferencesOnly)
    {
        showDifferencesOnly = _showDifferencesOnly;
        return showDifferencesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencySelection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ledgerCurrencySelection</c> parameter.
    /// </summary>
    /// <param name="_ledgerCurrencySelection">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>ledgerCurrencySelection</c> parameter.
    /// </returns>
    public LedgerCurrencySelection parmCurrencySelection(LedgerCurrencySelection _ledgerCurrencySelection = ledgerCurrencySelection)
    {
        ledgerCurrencySelection = _ledgerCurrencySelection;
        return ledgerCurrencySelection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <paramref name="toDate" /> parameter.
    /// </summary>
    /// <param name="_toDate">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <paramref name="toDate" /> parameter.
    /// </returns>
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate =_toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToMainAccount</Name>
				<Source><![CDATA[
    public MainAccountNum parmToMainAccount(MainAccountNum _toMainAccount = toMainAccount)
    {
        toMainAccount = _toMainAccount;
        return toMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToPostingProfile</Name>
				<Source><![CDATA[
    public PostingProfile parmToPostingProfile(PostingProfile _toPostingProfile = toPostingProfile)
    {
        toPostingProfile = _toPostingProfile;
        return toPostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>ToVoucher</c> parameter.
    /// </summary>
    /// <param name="_toVoucher">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>ToVoucher</c> parameter.
    /// </returns>
    public Voucher parmToVoucher(Voucher _toVoucher = toVoucher)
    {
        toVoucher =_toVoucher;
        return toVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerReconciliationAccountingCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>LedgerReconciliationLedgerCurrencyTmp</c> record with <c>LedgerReconciliationLedgerTmp</c>.
    /// </summary>
    /// <param name="_ledgerReconciliationLedgerTmp">The General ledger reconciliation record which holds the ledger transaction information.</param>
    /// <param name="_ledgerReconciliationLedgerCurrencyTmp">The General ledger reconciliation currency record which holds the ledger transaction information for accounting currency.</param>
    internal final void populateLedgerReconciliationAccountingCurrencyTmp(LedgerReconciliationLedgerTmp _ledgerReconciliationLedgerTmp, LedgerReconciliationLedgerCurrencyTmp _ledgerReconciliationLedgerCurrencyTmp)
    {
        insert_recordset _ledgerReconciliationLedgerCurrencyTmp
        (
            CurrencyAmount,
            AccountingDate,
            IsCorrection,
            JournalNumber,
            MainAccount,
            MainAccountId,
            MainAccountName,
            Voucher,
            SubledgerJourId
        )
        select AccountingCurrencyAmount,
            AccountingDate,
            IsCorrection,
            JournalNumber,
            MainAccount,
            MainAccountId,
            MainAccountName,
            Voucher,
            SubledgerJourId
        from _ledgerReconciliationLedgerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateLedgerReconciliationReportingCurrencyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the <c>LedgerReconciliationLedgerCurrencyTmp</c> record with <c>LedgerReconciliationLedgerTmp</c>.
    /// </summary>
    /// <param name="_ledgerReconciliationLedgerTmp">The General ledger reconciliation record which holds the ledger transaction information.</param>
    /// <param name="_ledgerReconciliationLedgerCurrencyTmp">The General ledger reconciliation currency record which holds the ledger transaction information for reporting currency.</param>
    internal final void populateLedgerReconciliationReportingCurrencyTmp(LedgerReconciliationLedgerTmp _ledgerReconciliationLedgerTmp, LedgerReconciliationLedgerCurrencyTmp _ledgerReconciliationLedgerCurrencyTmp)
    {
        insert_recordset _ledgerReconciliationLedgerCurrencyTmp
        (
            CurrencyAmount,
            AccountingDate,
            IsCorrection,
            JournalNumber,
            MainAccount,
            MainAccountId,
            MainAccountName,
            Voucher,
            SubledgerJourId
        )
        select ReportingCurrencyAmount,
            AccountingDate,
            IsCorrection,
            JournalNumber,
            MainAccount,
            MainAccountId,
            MainAccountName,
            Voucher,
            SubledgerJourId
        from _ledgerReconciliationLedgerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryUpperRange</Name>
				<Source><![CDATA[
    private void setQueryUpperRange()
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        if (!toVoucher)
        {
            select maxof(Voucher) from subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == curext();

            toVoucher = subledgerVoucherGeneralJournalEntry.Voucher;
        }

        if (!toDate)
        {
            toDate = dateMax();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUpQuery</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('This method is no longer supported.', false, 25\06\2020)]
    void setUpQuery()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if query values are shown.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Integer     version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                ret                     = true;
                break;

            case 1:
                [version,
                fromDate,
                toDate,
                fromVoucher,
                toVoucher,
                includeDetails,
                showDifferencesOnly,
                fromPostingProfile,
                toPostingProfile,
                fromMainAccount,
                toMainAccount] = packedClass;

                // We have reversed the functionality from zeroBalances to showDifferencesnly
                if (showDifferencesOnly == NoYes::No)
                {
                    showDifferencesOnly = NoYes::Yes;
                }
                else
                {
                    showDifferencesOnly = NoYes::No;
                }

                ret  = true;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>