<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetterContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFormLetterContract</c> class is the data contract class for the
/// <c>FormletterService</c> service when posting sales orders.
/// </summary>
[DataContractAttribute]
abstract class SalesFormLetterContract
extends FormLetterContract
{
    SalesTable          salesTable;
    NoYes               editLinesChanged;
    NoYes               defaultGiroType;
    PaymentStub         giroType;

    WMSShipmentId       shipmentId;
    str                 chooseLinesPacked;
    NoYes               directDeliveryUpdate;

    NoYes               creditRemaining;
    WHSLoadId           whsLoadId;
    Common              relatedJournal;
    SalesUpdate         specQty;
    boolean             mrcPostingErr;
    boolean             mrcPrintOnPack;
    boolean             validateLoadStatus;
    boolean             isPostingTransportLoads;

    private TradeLineRefId parmTableRefIdSynched;

    //PrintJobSettings
    NoYes           printShippingLabel;
    str             printerSettingsShippingLabel;
    NoYes           printCODLabel;
    str             printerSettingsCODLabel;
    NoYes           printEntryCertificate_W;
    str             printerSettingsEntryCertificate_W;

    // If calling SalesFormLetter from picking workbench, this value will be set and
    // used in multiple places to add or remove functionality used with workbench.
    MCRPickingWave              mcrPickWaveReference;
    MCRMiscChargePrintOption    mcrMiscChargePrintOption;
    PaymMode                    paymMode;
    RecId                       inventTransRecId;

    // <GTH>
    TaxUnrealizedDocuId                 docuSetCode;
    TaxUnrealizedDocuPrintHeader        printHeader;
    TaxUnrealizedDocuProdType           prodType;
    TaxUnrealizedDocuPrintLocation      location;
    TaxUnrealizedDocuText               miscText;
    // </GTH>

    // <GEERU>
    CustInvoicePrintoutType_RU  invoicePrintoutType;
    boolean                     extraPrintoutLineExists;
    GoodsInRouteId_RU           goodsInRouteId;
    Num                         documentStornoId;
    Correct_RU                  correct;
    CorrectedInvoiceId_RU       corrInvoiceId;
    CorrectedInvoiceDate_RU     corrInvoiceDate;
    boolean                     needTransIDTransit;
    // </GEERU>

    // <GEEPL>
    PlFiscalDocType             fiscalDocType;
    // </GEEPL>

    // <GEEU>
    str                         advanceInvoiceSettlementPacked;
    ProjInvoiceParmTable        projInvoiceParmTable;
    LtDocNumberingCode          ltDocNumberingCode;
    // </GEEU>

    #define.CurrentVersion(8)

    #LOCALMACRO.ParmListSales
        salesTable,
        editLinesChanged,
        defaultGiroType,
        giroType,
        shipmentId,
        chooseLinesPacked,
        directDeliveryUpdate,
        creditRemaining,
        relatedJournal,
        specQty,
        printShippingLabel,
        printerSettingsShippingLabel,
        printCODLabel,
        printerSettingsCODLabel,
        mrcPostingErr,
        mrcPrintOnPack
        // <GTH>
        ,docuSetCode,
        printHeader,
        prodType,
        location,
        miscText
        // </GTH>
        // <GEERU>
        ,invoicePrintoutType,
        extraPrintoutLineExists,
        goodsInRouteId,
        documentStornoId,
        correct,
        corrInvoiceId,
        corrInvoiceDate,
        needTransIDTransit,
        printBillOfLading
        // </GEERU>
        // <GEEPL>
        ,fiscalDocType
        // </GEEPL>
        // <GEEU>
        ,advanceInvoiceSettlementPacked
        ,projInvoiceParmTable
        // </GEEU>
        ,printEntryCertificate_W
        ,printerSettingsEntryCertificate_W
        ,mcrPickWaveReference
        ,inventTransRecId
        ,mcrMiscChargePrintOption
        ,whsLoadId
        ,validateLoadStatus
        ,isPostingTransportLoads
        ,parmTableRefIdSynched
    #ENDMACRO

    //List of parameters common for FormLetter contract classes that needs to be packed
    //for the correct class transition between client and server.
    //If you need some additional parameters on the client, add them to this list.
    // <GEERU>
    #define.Version7(7)
    // </GEERU>
    #define.Version6(6)

    #LOCALMACRO.ParmListSalesV6
        salesTable,
        editLinesChanged,
        defaultGiroType,
        giroType,
        shipmentId,
        chooseLinesPacked,
        directDeliveryUpdate,
        creditRemaining,
        relatedJournal,
        specQty,
        printShippingLabel,
        printerSettingsShippingLabel,
        printCODLabel,
        printerSettingsCODLabel,
        mrcPostingErr,
        mrcPrintOnPack
        // <GTH>
        ,docuSetCode,
        printHeader,
        prodType,
        location,
        miscText
        // </GTH>
        // <GEERU>
        ,invoicePrintoutType,
        extraPrintoutLineExists,
        goodsInRouteId,
        documentStornoId,
        correct,
        corrInvoiceId,
        corrInvoiceDate,
        needTransIDTransit,
        printBillOfLading
        // </GEERU>
        // <GEEPL>
        ,fiscalDocType
        // </GEEPL>
        // <GEEU>
        ,advanceInvoiceSettlementPacked
        ,projInvoiceParmTable
        // </GEEU>
        ,printEntryCertificate_W
        ,printerSettingsEntryCertificate_W
        ,mcrPickWaveReference
        ,inventTransRecId
        ,mcrMiscChargePrintOption
        ,whsLoadId
        ,validateLoadStatus
        ,isPostingTransportLoads
    #ENDMACRO

    #define.Version5(5)
        // </GEERU>
    #LOCALMACRO.ParmListSalesV5
        salesTable,
        editLinesChanged,
        defaultGiroType,
        giroType,
        shipmentId,
        chooseLinesPacked,
        directDeliveryUpdate,
        creditRemaining,
        relatedJournal,
        specQty,
        printShippingLabel,
        printerSettingsShippingLabel,
        printCODLabel,
        printerSettingsCODLabel,
        mrcPostingErr,
        mrcPrintOnPack
        // <GTH>
        ,docuSetCode,
        printHeader,
        prodType,
        location,
        miscText
        // </GTH>
        // <GEERU>
        ,invoicePrintoutType,
        extraPrintoutLineExists,
        goodsInRouteId,
        documentStornoId,
        correct,
        corrInvoiceId,
        corrInvoiceDate,
        needTransIDTransit,
        printBillOfLading
        // </GEERU>
        // <GEEPL>
        ,fiscalDocType
        // </GEEPL>
        // <GEEU>
        ,advanceInvoiceSettlementPacked
        ,projInvoiceParmTable
        // </GEEU>
        ,printEntryCertificate_W
        ,printerSettingsEntryCertificate_W
        ,mcrPickWaveReference
        ,inventTransRecId
        ,mcrMiscChargePrintOption
        ,whsLoadId
        ,validateLoadStatus
    #ENDMACRO

    // <GEERU>
    #define.Version4(4)
    // </GEERU>
    #LOCALMACRO.ParmListSalesV4
        salesTable,
        editLinesChanged,
        defaultGiroType,
        giroType,
        shipmentId,
        chooseLinesPacked,
        directDeliveryUpdate,
        creditRemaining,
        relatedJournal,
        specQty,
        printShippingLabel,
        printerSettingsShippingLabel,
        printCODLabel,
        printerSettingsCODLabel,
        sendByMail_MX,
        mrcPostingErr,
        mrcPrintOnPack
        // <GTH>
        ,docuSetCode,
        printHeader,
        prodType,
        location,
        miscText
        // </GTH>
        // <GEERU>
        ,invoicePrintoutType,
        extraPrintoutLineExists,
        goodsInRouteId,
        documentStornoId,
        correct,
        corrInvoiceId,
        corrInvoiceDate,
        needTransIDTransit,
        printBillOfLading
        // </GEERU>
        // <GEEPL>
        ,fiscalDocType
        // </GEEPL>
        // <GEEU>
        ,advanceInvoiceSettlementPacked
        ,projInvoiceParmTable
        // </GEEU>
        ,printEntryCertificate_W
        ,printerSettingsEntryCertificate_W
        ,mcrPickWaveReference
        ,inventTransRecId
        ,mcrMiscChargePrintOption
        ,whsLoadId
        ,validateLoadStatus
    #ENDMACRO


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFormLetterType</Name>
				<Source><![CDATA[
    public FormletterType getFormLetterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLateSelectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query that is used for late selection.
    /// </summary>
    /// <returns>
    /// The query that is used for late selection.
    /// </returns>
    public LateSelectionQuery getLateSelectionQuery()
    {
        SalesParmUpdate salesParmUpdate = this.parmParmUpdate() as SalesParmUpdate;

        return salesParmUpdate.LateSelectionQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderBatchTaskSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of orders to have in each batch task when posting in batch.
    /// </summary>
    /// <returns>
    /// The number of orders to have in each batch task.
    /// </returns>
    public FormletterBatchTaskSize getOrderBatchTaskSize()
    {
        return SalesParameters::find().OrderBatchTaskSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderBatchTaskLineNumberSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of order lines to have in each batch task when posting in batch.
    /// </summary>
    /// <returns>
    /// The number of order lines to have in each batch task.
    /// </returns>
    internal FormletterBatchTaskSizeLines getOrderBatchTaskLineNumberSize()
    {
        return SalesParameters::find().OrderBatchTaskSizeLines; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        //<GMX>
        NoYes sendByMail_MX;
        //</GMX>

        documentStatus = this.getDocumentStatus();

        return [#CurrentVersion, #ParmListCommon, #ParmListSales] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceSettlementPacked</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmAdvanceInvoiceSettlementPacked(str _advanceInvoiceSettlementPacked = advanceInvoiceSettlementPacked)
    {
        advanceInvoiceSettlementPacked = _advanceInvoiceSettlementPacked;
        return advanceInvoiceSettlementPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Correct_RU parmCorrect_RU(Correct_RU _correct = correct)
    {
        correct = _correct;
        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceDate_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public CorrectedInvoiceDate_RU parmCorrectedInvoiceDate_RU(CorrectedInvoiceDate_RU _corrInvoiceDate = corrInvoiceDate)
    {
        corrInvoiceDate = _corrInvoiceDate;
        return corrInvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedInvoiceId_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public CorrectedInvoiceId_RU parmCorrectedInvoiceId_RU(CorrectedInvoiceId_RU _corrInvoiceId = corrInvoiceId)
    {
        corrInvoiceId = _corrInvoiceId;
        return corrInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreditRemaining</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmCreditRemaining(NoYes _creditRemaining = creditRemaining)
    {
        creditRemaining = _creditRemaining;
        return creditRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoicePrintoutType_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public CustInvoicePrintoutType_RU parmCustInvoicePrintoutType_RU(CustInvoicePrintoutType_RU _invoicePrintoutType = invoicePrintoutType)
    {
        invoicePrintoutType = _invoicePrintoutType;
        return invoicePrintoutType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultGiroType</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmDefaultGiroType(NoYes _defaultGiroType = defaultGiroType)
    {
        defaultGiroType = _defaultGiroType;
        return defaultGiroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirectDeliveryUpdate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmDirectDeliveryUpdate(NoYes _directDeliveryUpdate = directDeliveryUpdate)
    {
        directDeliveryUpdate = _directDeliveryUpdate;
        return directDeliveryUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStornoId_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Num parmDocumentStornoId_RU(Num _documentStornoId = documentStornoId)
    {
        documentStornoId = _documentStornoId;
        return documentStornoId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuSetCode</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuId parmDocuSetCode(TaxUnrealizedDocuId _docuSetCode = docuSetCode)
    {
        docuSetCode = _docuSetCode;
        return docuSetCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtraPrintoutLineExists_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmExtraPrintoutLineExists_RU(boolean _extraPrintoutLineExists = extraPrintoutLineExists)
    {
        extraPrintoutLineExists = _extraPrintoutLineExists;
        return extraPrintoutLineExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalDocType_PL</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PlFiscalDocType parmFiscalDocType_PL(PlFiscalDocType _fiscalDocType = fiscalDocType)
    {
        fiscalDocType = _fiscalDocType;
        return fiscalDocType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGiroType</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public PaymentStub parmGiroType(PaymentStub _giroType = giroType)
    {
        giroType = _giroType;
        return giroType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGoodsInRouteId_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public GoodsInRouteId_RU parmGoodsInRouteId_RU(GoodsInRouteId_RU _goodsInRouteId = goodsInRouteId)
    {
        goodsInRouteId = _goodsInRouteId;
        return goodsInRouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintLocation parmLocation(TaxUnrealizedDocuPrintLocation _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLtDocNumberingCode</Name>
				<Source><![CDATA[
    public LtDocNumberingCode parmLtDocNumberingCode(LtDocNumberingCode _ltDocNumberingCode = ltDocNumberingCode)
    {
        ltDocNumberingCode = _ltDocNumberingCode;
        return ltDocNumberingCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRInventTransRecid</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets and returns the record ID for the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_inventTransRecId">
    ///     The <c>InventTrans</c> record ID to be set and returned.
    /// </param>
    /// <returns>
    ///     The record ID for the <c>InventTrans</c> buffer.
    /// </returns>
    /// <remarks>
    ///     This is needed for the unship process. When the unship process runs,
    ///     the system needs to look for the specific trans recid and only
    ///     process the inventtrans record selected during the packing slip
    ///     return process.
    /// </remarks>
    [DataMemberAttribute]
    public Recid parmMCRInventTransRecid(Recid _inventTransRecId =  inventTransRecId)
    {
        inventTransRecId = _inventTransRecId;
        return inventTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRMiscChargePrintOption</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    MCRMiscChargePrintOption parmMCRMiscChargePrintOption(MCRMiscChargePrintOption _mcrMiscChargePrintOption = mcrMiscChargePrintOption)
    {
        mcrMiscChargePrintOption = _mcrMiscChargePrintOption;
        return mcrMiscChargePrintOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPaymMode</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    PaymMode parmMCRPaymMode(PaymMode _paymMode = paymMode)
    {
        paymMode = _paymMode;
        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRPickWaveReference</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets or returns the variable MCRPickWaveReference to the pickwave that is being
    ///     processed.
    /// </summary>
    /// <param name="_mcrPickWaveReference">
    ///     The MCRPickingWaveReference vairal to be set or returned; optional.
    /// </param>
    /// <returns>
    ///     The newly set <c>MCRPickingWave</c> variable.
    /// </returns>
    /// <remarks>
    ///     Only used when <c>SalesFormLetter</c> is called by the picking workbench.
    ///     This field will be used to decide flow for orders that are picked using workbench,
    ///     such as progress bar being displayed during posting, selecting only lines needed
    ///     for the wave, and updating the correct quantity to pick.
    /// </remarks>
    [DataMemberAttribute]
    public MCRPickingWave parmMCRPickWaveReference(MCRPickingWave _mcrPickWaveReference = mcrPickWaveReference)
    {
        mcrPickWaveReference = _mcrPickWaveReference;

        return mcrPickWaveReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscText</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuText parmMiscText(TaxUnrealizedDocuText _miscText = miscText)
    {
        miscText = _miscText;
        return miscText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMrcPostingErr</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmMrcPostingErr(NoYes _mrcPostingErr = mrcPostingErr)
    {
        mrcPostingErr = _mrcPostingErr;
        return mrcPostingErr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMrcPrintOnPack</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmMrcPrintOnPack(NoYes _mrcPrintOnPack = mrcPrintOnPack)
    {
        mrcPrintOnPack = _mrcPrintOnPack;
        return mrcPrintOnPack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNeedTransIDTransit_RU</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmNeedTransIDTransit_RU(boolean _needTransIDTransit = needTransIDTransit)
    {
        needTransIDTransit = _needTransIDTransit;
        return needTransIDTransit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCODLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintCODLabel(NoYes _printCODLabel = printCODLabel)
    {
        printCODLabel = _printCODLabel;
        return printCODLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintEntryCertificate_W</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintEntryCertificate_W(NoYes _printEntryCertificate_W = printEntryCertificate_W)
    {
        printEntryCertificate_W = _printEntryCertificate_W;
        return printEntryCertificate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsCODLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmPrinterSettingsCODLabel(str _printerSettingsCODLabel = printerSettingsCODLabel)
    {
        printerSettingsCODLabel = _printerSettingsCODLabel;
        return printerSettingsCODLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsEntryCertificate_W</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmPrinterSettingsEntryCertificate_W(str _printerSettingsEntryCertificate_W = printerSettingsEntryCertificate_W)
    {
        printerSettingsEntryCertificate_W = _printerSettingsEntryCertificate_W;
        return printerSettingsEntryCertificate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsShippingLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public str parmPrinterSettingsShippingLabel(str _printerSettingsShippingLabel = printerSettingsShippingLabel)
    {
        printerSettingsShippingLabel = _printerSettingsShippingLabel;
        return printerSettingsShippingLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintHeader</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintHeader parmPrintHeader(TaxUnrealizedDocuPrintHeader _printHeader = printHeader)
    {
        printHeader = _printHeader;
        return printHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintShippingLabel</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public NoYes parmPrintShippingLabel(NoYes _printShippingLabel = printShippingLabel)
    {
        printShippingLabel = _printShippingLabel;
        return printShippingLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdType</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuProdType parmProdType(TaxUnrealizedDocuProdType _prodType = prodType)
    {
        prodType = _prodType;
        return prodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTableRefIdSynched</Name>
				<Source><![CDATA[
    [DataMember]
    public TradeLineRefId parmParmTableRefIdSynched(TradeLineRefId _parmTableRefIdSynched = parmTableRefIdSynched)
    {
        parmTableRefIdSynched = _parmTableRefIdSynched;
        return parmTableRefIdSynched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceParmTable</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ProjInvoiceParmTable parmProjInvoiceParmTable(ProjInvoiceParmTable _parmProjInvoiceParmTable = null)
    {
        if ( !prmisDefault(_parmProjInvoiceParmTable))
        {
            projInvoiceParmTable = _parmProjInvoiceParmTable;
        }

        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelatedJournal</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public Common parmRelatedJournal(Common _relatedJournal = relatedJournal)
    {
        relatedJournal = _relatedJournal;
        return relatedJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public WMSShipmentId  parmShipmentId(WMSShipmentId _shipmentId = shipmentId)
    {
        shipmentId = _shipmentId;
        return shipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpecQty</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public SalesUpdate parmSpecQty(SalesUpdate _specQty = specQty)
    {
        specQty = _specQty;
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidateLoadStatus</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmValidateLoadStatus(boolean _validateLoadStatus = validateLoadStatus)
    {
        validateLoadStatus = _validateLoadStatus;
        return validateLoadStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSLoadId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public WHSLoadId parmWHSLoadId(WHSLoadId _whsLoadId = whsLoadId)
    {
        whsLoadId = _whsLoadId;

        return whsLoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPostingTransportLoads</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmIsPostingTransportLoads(boolean _isPostingTransportLoads = isPostingTransportLoads)
    {
        isPostingTransportLoads = _isPostingTransportLoads;

        return isPostingTransportLoads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer         version = RunBase::getVersion(_packedClass);
        container       packedBase;

        //<GMX>
        NoYes           sendByMail_MX;
        //</GMX>

        switch (version)
        {
            case #CurrentVersion:
                [version, #ParmListCommon, #ParmListSales, packedBase] = _packedClass;
                return super(packedBase);

            case #Version7:
            case #Version6:
                [version, #ParmListCommon, #ParmListSalesV6, packedBase] = _packedClass;
                return super(packedBase);
        
            case #Version5:
                [version, #ParmListCommon, #ParmListSalesV5, packedBase] = _packedClass;
                return super(packedBase);

            case #Version4:
                [version, #ParmListCommon, #ParmListSalesV4, packedBase] = _packedClass;
                return super(packedBase);

            default :
                return super(_packedClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesFormLetterContract</c> object from the given <c>DocumentStatus</c>.
    /// </summary>
    /// <param name="_documentStatus">
    /// The <c>DocumentStatus</c> used to determine the subclass to return.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesFormLetterContract</c> class.
    /// </returns>
    public static SalesFormLetterContract construct(DocumentStatus _documentStatus)
    {
        DocumentStatusFactoryAttribute  attribute   = new DocumentStatusFactoryAttribute(_documentStatus);
        SalesFormLetterContract         instance    = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesFormLetterContract), attribute) as SalesFormLetterContract;

        if(!instance)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedVersion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesFormLetterContract</c> object from the given container.
    /// </summary>
    /// <param name="_salesFormLetterContractPacked">
    /// A container with a packed <c>SalesFormLetterContract</c> object.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesFormLetterContract</c> class.
    /// </returns>
    public static SalesFormLetterContract newFromPackedVersion(container _salesFormLetterContractPacked)
    {
        DocumentStatus          documentStatus          = conPeek(_salesFormLetterContractPacked, #DocumentStatusPosition);
        SalesFormLetterContract salesFormLetterContract = SalesFormLetterContract::construct(documentStatus);

        salesFormLetterContract.unpack(_salesFormLetterContractPacked);

        return salesFormLetterContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>