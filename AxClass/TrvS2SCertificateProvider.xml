<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvS2SCertificateProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using Microsoft.Dynamics.AX.Configuration.CertificateHandler;
using Microsoft.Dynamics.ApplicationPlatform.Environment;

/// <summary>
/// the environment-specific certificate that can be used to ensure secure service-to-service communication.
/// </summary>
public class TrvS2SCertificateProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the certificate that can be used to ensure secure service-to-service communication.
    /// </summary>
    /// <returns>The certificate that can be used to ensure secure service-to-service communication.</returns>
    public static System.Security.Cryptography.X509Certificates.X509Certificate2 getCertificate()
    {
        utcdatetime publishedCertificateExpiryDateTime = DateTimeUtil::utcNow();
        
        X509Certificate2 s2sCertificate = TrvS2SCertificateProvider::getCertificateFromLocalStore();

        if (!TrvPublishedS2SCertificate::findActiveCertificateByThumbprint(s2sCertificate.Thumbprint).isActive())
        {
            TrvPublishedS2SCertificate::publishCertificate(s2sCertificate);
            TrvPublishedS2SCertificate::deleteExpiredCertificates();
        }

        return s2sCertificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificateFromLocalStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and return a new certificate from local store.
    /// </summary>
    /// <param name = "environment">LCS environment object.</param>
    /// <param name = "thumbprint">Thumbprint from the web config file.</param>
    /// <returns>A certificate to generate the token.</returns>
    private static System.Security.Cryptography.X509Certificates.X509Certificate2 getCertificateFromLocalStore()
    {
        X509Certificate2 cert;

        try
        {
            Microsoft.Dynamics.ApplicationPlatform.Environment.IApplicationEnvironment applicationEnvironment = TrvS2SCertificateProvider::getEnvironment();

            var thumbprint = applicationEnvironment.get_Infrastructure().get_S2SCertThumbprint();

            var certificateHandler = CertificateHandlerFactory::CreateCertificateHandler(
                applicationEnvironment.CertificateHandler.GetCertificateHandlerSettings());

            cert = certificateHandler.GetSingleCertificateForId(thumbprint);

            if (!cert)
            {
                error("@Expense:ExpenseCertifcateRetrieveFailed");
            }
        }
        catch
        {
            error("@Expense:ExpenseCertifcateRetrieveFailed");
        }

        return cert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnvironment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object containing the application environment variables, sepcific to the environment.
    /// </summary>
    /// <returns>Returns an application environment object.</returns>
    private static Microsoft.Dynamics.ApplicationPlatform.Environment.IApplicationEnvironment getEnvironment()
    {
        return EnvironmentFactory::GetApplicationEnvironment();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>