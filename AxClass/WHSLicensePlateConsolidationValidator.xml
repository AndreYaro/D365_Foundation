<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateConsolidationValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains validation logic for consolidating license plates.
/// </summary>
public class WHSLicensePlateConsolidationValidator
{
    WHSLicensePlateId   targetLicensePlateId;
    WHSLicensePlateId   mergeFromLicensePlateId;

    WHSLicensePlate     targetLicensePlate;
    WHSLicensePlate     mergeFromLicensePlate;

    WMSLocation         locationWithOnHandForTargetLP;
    WMSLocation         locationWithOnHandForMergeFromLP;

    WHSWorkTable        workWithTargetLP;
    WHSWorkTable        workWithMergeFromLP;

    WHSWorkLine         openPickWorkLineMergeFromLP;
    WHSWorkLine         openPickWorkLineTargetLP;

    WHSLicensePlateConsolidationOptions consolidationOptions;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findTargetLicensePlate</Name>
				<Source><![CDATA[
    private void findTargetLicensePlate()
    {
        if (!targetLicensePlate)
        {
            targetLicensePlate = WHSLicensePlate::find(targetLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationWithOnHandForTargetLP</Name>
				<Source><![CDATA[
    private void findLocationWithOnHandForTargetLP()
    {
        if (!locationWithOnHandForTargetLP)
        {
            locationWithOnHandForTargetLP = WHSLicensePlate::getWMSLocationWithOnHand(targetLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkWithTargetLP</Name>
				<Source><![CDATA[
    private void findWorkWithTargetLP()
    {
        if (!workWithTargetLP)
        {
            workWithTargetLP = WHSWorkTable::findByTargetLicensePlate(targetLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMergeFromLicensePlate</Name>
				<Source><![CDATA[
    private void findMergeFromLicensePlate()
    {
        if (!mergeFromLicensePlate)
        {
            mergeFromLicensePlate = WHSLicensePlate::find(mergeFromLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationWithOnHandForMergeFromLP</Name>
				<Source><![CDATA[
    private void findLocationWithOnHandForMergeFromLP()
    {
        if (!locationWithOnHandForMergeFromLP)
        {
            locationWithOnHandForMergeFromLP = WHSLicensePlate::getWMSLocationWithOnHand(mergeFromLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkWithMergeFromLP</Name>
				<Source><![CDATA[
    private void findWorkWithMergeFromLP()
    {
        if (!workWithMergeFromLP)
        {
            workWithMergeFromLP = WHSWorkTable::findByTargetLicensePlate(mergeFromLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextOpenPickWorkLineTargetLP</Name>
				<Source><![CDATA[
    private void findNextOpenPickWorkLineTargetLP()
    {
        if (!openPickWorkLineTargetLP)
        {
            openPickWorkLineTargetLP = WHSWorkTable::getNextOpenPickWorkLine(workWithTargetLP.WorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNextOpenPickWorkLineMergeFromLP</Name>
				<Source><![CDATA[
    private void findNextOpenPickWorkLineMergeFromLP()
    {
        if (!openPickWorkLineMergeFromLP)
        {
            openPickWorkLineMergeFromLP = WHSWorkTable::getNextOpenPickWorkLine(workWithMergeFromLP.WorkId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the target license plate aka the license plate that we are going to merge to.
    /// </summary>
    /// <returns>True, if the Target LP is OK; otherwise, false.</returns>
    public boolean validateTargetLicensePlate()
    {
        this.findTargetLicensePlate();

        if (targetLicensePlate)
        {
            if (!this.validateLicensePlateIsNotRelatedToContainers(targetLicensePlate.LicensePlateId))
            {
                return false;
            }

            this.findLocationWithOnHandForTargetLP();

            if (locationWithOnHandForTargetLP)
            {
                if (!this.validateLicensePlateLocation(locationWithOnHandForTargetLP, targetLicensePlateId))
                {
                    return false;
                }

                this.findWorkWithTargetLP();

                if (!workWithTargetLP)
                {
                    return checkFailed(strFmt("@WAX:MergeLP_WorkNotFoundForLP", targetLicensePlateId));
                }

                if (!this.validateTargetLicensePlateSupportedWorkTransType())
                {
                    return false;
                }

                if (workWithTargetLP.Frozen)
                {
                    return checkFailed(strFmt("@WAX:MergeLP_RelatedWorkIsBlocked", targetLicensePlateId, workWithTargetLP.WorkId));
                }

                this.findNextOpenPickWorkLineTargetLP();

                if (!openPickWorkLineTargetLP)
                {
                    return checkFailed(strFmt("@WAX:MergeLP_NoOpenWorkLineFound", workWithTargetLP.WorkId));
                }
                
                if (!this.validateCatchWeightItemNotOnLP(targetLicensePlateId))
                {
                    return false;
                }

                boolean ret = this.validateWorkDoesNotUseContainers(workWithTargetLP);

                return ret;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateMergeFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the LP to merge aka the license plate we are going to merge from.
    /// </summary>
    /// <returns>True, if the LP to merge is OK; otherwise, false.</returns>
    public boolean validateLicensePlateMergeFrom()
    {
        if (mergeFromLicensePlateId == targetLicensePlateId)
        {
            return checkFailed(strFmt("@WAX:MergeLP_MergeFromLPSameAsTargetLP", mergeFromLicensePlateId, targetLicensePlateId));
        }

        this.findMergeFromLicensePlate();

        if (!mergeFromLicensePlate)
        {
            return checkFailed(strFmt("@WAX363", mergeFromLicensePlateId));
        }

        if (!this.validateCatchWeightItemNotOnLP(mergeFromLicensePlateId))
        {
            return false;
        }

        if (!this.validateLicensePlateIsNotRelatedToContainers(mergeFromLicensePlateId))
        {
            return false;
        }

        this.findLocationWithOnHandForMergeFromLP();

        if (!locationWithOnHandForMergeFromLP)
        {
            return checkFailed(strFmt("@WAX:LPMerge_MergeFromLPEmpty", mergeFromLicensePlateId));
        }

        if (!this.validateLicensePlateLocation(locationWithOnHandForMergeFromLP, mergeFromLicensePlateId))
        {
            return false;
        }

        this.findWorkWithMergeFromLP();

        if (!workWithMergeFromLP)
        {
            return checkFailed(strFmt("@WAX:MergeLP_WorkNotFoundForLP", mergeFromLicensePlateId));
        }

        if (!this.validateMergeFromLicensePlateSupportedWorkTransType())
        {
            return false;
        }

        if (workWithMergeFromLP.Frozen)
        {
            return checkFailed(strFmt("@WAX:MergeLP_RelatedWorkIsBlocked", mergeFromLicensePlateId, workWithMergeFromLP.WorkId));
        }

        this.findNextOpenPickWorkLineMergeFromLP();

        if (!openPickWorkLineMergeFromLP)
        {
            return checkFailed(strFmt("@WAX:MergeLP_NoOpenWorkLineFound", workWithMergeFromLP.WorkId));
        }

        boolean ret = this.validateRemainingStepsCanBeCancelled();

        if (ret)
        {
            this.findTargetLicensePlate();

            if (targetLicensePlate)
            {
                this.findLocationWithOnHandForTargetLP();

                if (locationWithOnHandForTargetLP)
                {
                    if (locationWithOnHandForTargetLP.RecId != locationWithOnHandForMergeFromLP.RecId)
                    {
                        return checkFailed(strFmt("@WAX:MergeLP_LicensePlatesInDifferentLocations", mergeFromLicensePlateId, targetLicensePlateId,
                                                locationWithOnHandForMergeFromLP.wMSLocationId, locationWithOnHandForMergeFromLP.inventLocationId,
                                                locationWithOnHandForTargetLP.wMSLocationId, locationWithOnHandForTargetLP.inventLocationId));
                    }

                    this.findWorkWithTargetLP();
                    this.findNextOpenPickWorkLineTargetLP();

                    ret = ret && this.validateLoadInfo();
                    ret = ret && this.validateWorkDoesNotUseContainers(workWithMergeFromLP);
                    ret = ret && this.validateShipmentInfoFast();
                    ret = ret && this.validateWorksUseTheSameInventoryMechanism();
                    ret = ret && this.validateRemainingWorkLinesMatch();
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadInfo</Name>
				<Source><![CDATA[
    private boolean validateLoadInfo()
    {
        if (WHSLicensePlateConsolidationValidator::isSupportedWorkTransType(workWithTargetLP.WorkTransType))
        {
            // We expect the LoadId is specified directly on the work header for both work orders.
            if (!workWithTargetLP.LoadId || !workWithMergeFromLP.LoadId || workWithTargetLP.LoadId != workWithMergeFromLP.LoadId)
            {
                return checkFailed(strFmt("@WAX:MergeLP_LicensePlatesOnDifferentLoads", mergeFromLicensePlateId, targetLicensePlateId, workWithMergeFromLP.LoadId, workWithTargetLP.LoadId));
            }

            return true;
        }
        
        throw error(Error::wrongUseOfFunction("@WAX:ConsolidateLP"));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingStepsCanBeCancelled</Name>
				<Source><![CDATA[
    private boolean validateRemainingStepsCanBeCancelled()
    {
        if (!consolidationOptions.parmCancelRemainingOriginWorkLines())
        {
            WHSWorkLine remainingWorkLine;
            // If there are additional pick/put pairs after our pair
            // If there are Custom work steps / Print steps in between
            select firstonly RecId from remainingWorkLine
                where remainingWorkLine.WorkId == openPickWorkLineMergeFromLP.WorkId
                    && remainingWorkLine.LineNum > openPickWorkLineMergeFromLP.LineNum
                    && remainingWorkLine.WorkType != WHSWorkType::Put;

            if (remainingWorkLine)
            {
                return checkFailed(strFmt("@WAX:MergeLP_CancelRemainingWorkLinesNotAllowedButTheyExist", mergeFromLicensePlateId));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRemainingWorkLinesMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the number of remaining steps and the actual path match for both license plates
    /// </summary>
    private boolean validateRemainingWorkLinesMatch()
    {
        // Select all remaining non-skipped and non-cancelled work lines for the respective work orders
        WHSWorkLine workLineMergeFromLP = this.selectWorkLinesAfterAndIncludingLine(openPickWorkLineMergeFromLP);
        WHSWorkLine workLineTargetLP = this.selectWorkLinesAfterAndIncludingLine(openPickWorkLineTargetLP);

        while (workLineMergeFromLP || workLineTargetLP)
        {
            // If either of the two records is null (means we ran out of steps)
            // Or the location on the two lines does not match, or the WorkType is different
            if (!workLineMergeFromLP
                || !workLineTargetLP
                || workLineMergeFromLP.WMSLocationId != workLineTargetLP.WMSLocationId
                || workLineMergeFromLP.WorkType != workLineTargetLP.WorkType
                || workLineMergeFromLP.WorkClassId != workLineTargetLP.WorkClassId)
            {
                return checkFailed(strFmt("@WAX:MergeLP_OriginAndTargetWorkLinesDoNotMatch", mergeFromLicensePlateId, targetLicensePlateId));
            }

            next workLineMergeFromLP;
            next workLineTargetLP;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorksUseTheSameInventoryMechanism</Name>
				<Source><![CDATA[
    private boolean validateWorksUseTheSameInventoryMechanism()
    {
        if (WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(workWithTargetLP.WorkId)
            != WHSInventoryTransactionConfigurationProvider::shouldUseWarehouseInventoryTransactionStack(workWithMergeFromLP.WorkId))
        {
            return checkFailed(strFmt("@WHSInventory:MergeLP_MixedWarehouseInventoryTransactionMechanismForbidden", targetLicensePlateId, workWithMergeFromLP.WorkId, mergeFromLicensePlateId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectWorkLinesAfterAndIncludingLine</Name>
				<Source><![CDATA[
    private WHSWorkLine selectWorkLinesAfterAndIncludingLine(WHSWorkLine _workLine)
    {
        WHSWorkLine workLinesRemaining;

        select workLinesRemaining
            order by LineNum
            where workLinesRemaining.WorkId == _workLine.WorkId
                && workLinesRemaining.WorkStatus != WHSWorkStatus::Cancelled
                && workLinesRemaining.WorkStatus != WHSWorkStatus::Skipped
                && workLinesRemaining.LineNum >= _workLine.LineNum;

        return workLinesRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateIsNotRelatedToContainers</Name>
				<Source><![CDATA[
    private boolean validateLicensePlateIsNotRelatedToContainers(WHSLicensePlateId _licensePlateId)
    {
        if (WHSContainerTable::isLicensePlateIdAssociatedToContainer(_licensePlateId)
			|| WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(_licensePlateId))
        {
            return checkFailed(strFmt("@WAX:MergeLP_WorkToMovePackedContainer", _licensePlateId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkDoesNotUseContainers</Name>
				<Source><![CDATA[
    private boolean validateWorkDoesNotUseContainers(WHSWorkTable _workTable)
    {
        // In case of containerization, ContainerId will be stamped on initial pick workLines, so we just find one like that and fail
        WHSWorkLine workLine;
        select firstonly RecId from workLine
            where workLine.WorkId == _workTable.WorkId
                && workLine.ContainerId != '';

        if (workLine.RecId != 0)
        {
            return checkFailed(strFmt("@WAX:MergeLP_WorkHasContainerization", _workTable.TargetLicensePlateId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateLocation</Name>
				<Source><![CDATA[
    private boolean validateLicensePlateLocation(WMSLocation _locationWithOnHandForLP, WHSLicensePlateId _licensePlateId)
    {
        if (_locationWithOnHandForLP.whsLocationIsUserLocation())
        {
            return checkFailed(strFmt("@WAX:LPMerge_LPisOnUserLoc", _licensePlateId, _locationWithOnHandForLP.wMSLocationId));
        }

        if (_locationWithOnHandForLP.whsLocationType() == WHSParameters::find().ShipFinalLocType)
        {
            return checkFailed(strFmt("@WAX:LPMerge_LPisOnFinalShipLoc", _licensePlateId, _locationWithOnHandForLP.wMSLocationId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShipmentInfoFast</Name>
				<Source><![CDATA[
    private boolean validateShipmentInfoFast()
    {
        if (!WHSLicensePlateConsolidationValidator::isSupportedWorkTransType(workWithMergeFromLP.WorkTransType))
        {
            throw error(Error::wrongUseOfFunction("@WAX:ConsolidateLP"));
        }

        WHSShipmentTable    shipmentTableTargetLP;
        WHSShipmentTable    shipmentTableMergeFromLP;
        WHSWorkLine         workLineTargetLP;
        WHSWorkLine         workLineMergeFromLP;
        boolean             shipmentDeliveryInfoDifferent;

        #localmacro.ShipmentDeliveryInfoDifferent
            shipmentTableTargetLP.AccountNum != shipmentTableMergeFromLP.AccountNum
            || shipmentTableTargetLP.DeliveryName != shipmentTableMergeFromLP.DeliveryName
            || shipmentTableTargetLP.DeliveryPostalAddress != shipmentTableMergeFromLP.DeliveryPostalAddress
            || shipmentTableTargetLP.ModeCode != shipmentTableMergeFromLP.ModeCode
            || shipmentTableTargetLP.InventLocationId != shipmentTableMergeFromLP.InventLocationId
        #endmacro

        #localmacro.WhereExistWorkLinesWithShipmentsForWork
            exists join ShipmentId from %1
                where %1.ShipmentId == %2.ShipmentId
                    && %1.WorkId == %3.WorkId
                    && %1.WorkStatus == WHSWorkStatus::Closed
                    && %1.ShipmentId != ''
                    && %1.InventQtyWork > 0
        #endmacro

        // If we have ShipmentId set on both work headers, we are safe to use that for evaluation
        if (workWithTargetLP.ShipmentId && workWithMergeFromLP.ShipmentId)
        {
            shipmentTableTargetLP = WHSShipmentTable::find(workWithTargetLP.ShipmentId);
            shipmentTableMergeFromLP = WHSShipmentTable::find(workWithMergeFromLP.ShipmentId);

            shipmentDeliveryInfoDifferent = #ShipmentDeliveryInfoDifferent;
        }
        else // otherwise, we need to look at work lines, since we have more than 1 shipment for one or more of the work orders
        {
            select firstonly ShipmentId from shipmentTableTargetLP
                join ShipmentId from shipmentTableMergeFromLP
                    where #ShipmentDeliveryInfoDifferent
                #WhereExistWorkLinesWithShipmentsForWork(workLineTargetLP, shipmentTableTargetLP, workWithTargetLP)
                    #WhereExistWorkLinesWithShipmentsForWork(workLineMergeFromLP, shipmentTableMergeFromLP, workWithMergeFromLP);

            shipmentDeliveryInfoDifferent = (shipmentTableTargetLP && shipmentTableMergeFromLP);
        }

        if (shipmentDeliveryInfoDifferent)
        {
            return checkFailed(strFmt("@WAX:MergeLP_LicensePlatesHaveDifferentDeliveryInfo", mergeFromLicensePlateId, targetLicensePlateId,
                                shipmentTableMergeFromLP.ShipmentId, shipmentTableTargetLP.ShipmentId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightItemNotOnLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if invalid catch weight item are not physically on a license plate.
    /// </summary>
    /// <param name = "_licensePlateId">
    /// The license plate to check for an invalid catch weight item.
    /// </param>
    /// <returns>
    /// true if no invalid catch weight items are physically on the license plate; otherwise false.
    /// </returns>
    private boolean validateCatchWeightItemNotOnLP(WHSLicensePlateId _licensePlateId)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            return true;
        }

        InventSum           inventSum;

        WHSInventTable whsInventTable;
        WHSCatchWeightItemHandlingPolicy policy;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventSum
            where inventSum.PhysicalInvent != 0
                && inventSum.ClosedQty      == NoYes::No
                && inventSum.LicensePlateId  == _licensePlateId
            exists join whsInventTable
                where whsInventTable.ItemId == inventSum.ItemId
            exists join policy
                where policy.PolicyName == whsInventTable.CatchWeightItemHandlingPolicyName
                    && policy.CatchWeightTagTracking == NoYes::Yes;
        }
        else
        {
            InventDim           inventDim;

            select firstonly RecId from inventSum
            where inventSum.PhysicalInvent != 0
                && inventSum.ClosedQty      == NoYes::No
            exists join inventDim
                where  inventDim.inventDimId     == inventSum.InventDimId
                    && inventDim.LicensePlateId  == _licensePlateId
            exists join whsInventTable
                where whsInventTable.ItemId == inventSum.ItemId
            exists join policy
                where policy.PolicyName == whsInventTable.CatchWeightItemHandlingPolicyName
                    && policy.CatchWeightTagTracking == NoYes::Yes;
        }

        if (inventSum.RecId)
        {
            return checkFailed(strFmt("@WAX:Error_WHSConsolidateLPFeatureDoesNotSupportCWTag", _licensePlateId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetLicensePlateSupportedWorkTransType</Name>
				<Source><![CDATA[
    private boolean validateTargetLicensePlateSupportedWorkTransType()
    {
        if (!WHSLicensePlateConsolidationValidator::isSupportedWorkTransType(workWithTargetLP.WorkTransType))
        {
            return checkFailed(strFmt("@WAX:Error_WHSConsolidateLPFeatureDoesNotSupportWorkTransType", targetLicensePlateId, workWithTargetLP.WorkId, workWithTargetLP.WorkTransType));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMergeFromLicensePlateSupportedWorkTransType</Name>
				<Source><![CDATA[
    private boolean validateMergeFromLicensePlateSupportedWorkTransType()
    {
        if (!WHSLicensePlateConsolidationValidator::isSupportedWorkTransType(workWithMergeFromLP.WorkTransType))
        {
            return checkFailed(strFmt("@WAX:Error_WHSConsolidateLPFeatureDoesNotSupportWorkTransType", mergeFromLicensePlateId, workWithMergeFromLP.WorkId, workWithMergeFromLP.WorkTransType));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSupportedWorkTransType</Name>
				<Source><![CDATA[
    private static boolean isSupportedWorkTransType(WHSWorkTransType _workTransType)
    {
        WhsWorkTransactionType workTransactionType = WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType);
        return workTransactionType.isLicensePlateConsolidationSupported();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLicensePlateConsolidationValidator construct()
    {
        return new WHSLicensePlateConsolidationValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetLicensePlateId</Name>
				<Source><![CDATA[
    public WHSLicensePlateId parmTargetLicensePlateId(WHSLicensePlateId _targetLP = targetLicensePlateId)
    {
        targetLicensePlateId = _targetLP;
        return targetLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMergeFromLicensePlateId</Name>
				<Source><![CDATA[
    public WHSLicensePlateId parmMergeFromLicensePlateId(WHSLicensePlateId _mergeFromLP = mergeFromLicensePlateId)
    {
        mergeFromLicensePlateId = _mergeFromLP;
        return mergeFromLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkWithMergeFromLP</Name>
				<Source><![CDATA[
    public WHSWorkTable parmWorkWithMergeFromLP(WHSWorkTable _workWithMergeFromLP = workWithMergeFromLP)
    {
        workWithMergeFromLP = _workWithMergeFromLP;
        return workWithMergeFromLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkWithTargetLP</Name>
				<Source><![CDATA[
    public WHSWorkTable parmWorkWithTargetLP(WHSWorkTable _workWithTargetLP = workWithTargetLP)
    {
        workWithTargetLP = _workWithTargetLP;
        return workWithTargetLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocationWithOnHandForMergeFromLP</Name>
				<Source><![CDATA[
    public WMSLocation parmLocationWithOnHandForMergeFromLP(WMSLocation _locationWithOnHandForMergeFromLP = locationWithOnHandForMergeFromLP)
    {
        locationWithOnHandForMergeFromLP = _locationWithOnHandForMergeFromLP;
        return locationWithOnHandForMergeFromLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocationWithOnHandForTargetLP</Name>
				<Source><![CDATA[
    public WMSLocation parmLocationWithOnHandForTargetLP(WMSLocation _locationWithOnHandForTargetLP = locationWithOnHandForTargetLP)
    {
        locationWithOnHandForTargetLP = _locationWithOnHandForTargetLP;
        return locationWithOnHandForTargetLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpenPickWorkLineMergeFromLP</Name>
				<Source><![CDATA[
    public WHSWorkLine parmOpenPickWorkLineMergeFromLP(WHSWorkLine _openPickWorkLineMergeFromLP = openPickWorkLineMergeFromLP)
    {
        openPickWorkLineMergeFromLP = _openPickWorkLineMergeFromLP;
        return openPickWorkLineMergeFromLP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConsolidationOptions</Name>
				<Source><![CDATA[
    public WHSLicensePlateConsolidationOptions parmConsolidationOptions(WHSLicensePlateConsolidationOptions _consolidationOptions = consolidationOptions)
    {
        consolidationOptions = _consolidationOptions;
        return consolidationOptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTargetLicensePlateId</Name>
				<Source><![CDATA[
    public static WHSLicensePlateConsolidationValidator newFromTargetLicensePlateId(WHSLicensePlateId _targetLP)
    {
        WHSLicensePlateConsolidationValidator validator = WHSLicensePlateConsolidationValidator::construct();

        validator.parmTargetLicensePlateId(_targetLP);

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMergeFromLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new <c>WHSLicensePlateConsolidationValidator</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_mergeFromLP">From license plate Id.</param>
    /// <param name = "_targetLP">To license plate Id.</param>
    /// <param name = "_consolidationOptions">License plate consolidation options.</param>
    /// <param name = "_workWithMergeFromLP"><c>WHSWorkTable</c> record for the Merge from LP. Optional, can be specified to improve performance.</param>
    /// <param name = "_workWithTargetLP"><c>WHSWorkTable</c> record for the Target LP. Optional, can be specified to improve performance.</param>
    /// <param name = "_locationWithOnHandForMergeFromLP"><c>WMSLocation</c> record with on-hand for the Merge from LP. Optional, can be specified to improve performance.</param>
    /// <param name = "_locationWithOnHandForTargetLP"><c>WMSLocation</c> record with on-hand for the Target LP. Optional, can be specified to improve performance.</param>
    /// <param name = "_openPickWorkLineMergeFromLP">Next open Pick work line on the work associated with the Merge From LP.</param>
    /// <returns>A new instance of the validator for consolidating license plates.</returns>
    public static WHSLicensePlateConsolidationValidator newFromMergeFromLicensePlateId(
        WHSLicensePlateId                   _mergeFromLP,
        WHSLicensePlateId                   _targetLP,
        WHSLicensePlateConsolidationOptions _consolidationOptions,
        WHSWorkTable                        _workWithMergeFromLP = null,
        WHSWorkTable                        _workWithTargetLP = null,
        WMSLocation                         _locationWithOnHandForMergeFromLP = null,
        WMSLocation                         _locationWithOnHandForTargetLP = null,
        WHSWorkLine                         _openPickWorkLineMergeFromLP = null)
    {
        WHSLicensePlateConsolidationValidator validator = WHSLicensePlateConsolidationValidator::construct();

        validator.parmTargetLicensePlateId(_targetLP);
        validator.parmMergeFromLicensePlateId(_mergeFromLP);
        validator.parmConsolidationOptions(_consolidationOptions);
        validator.parmWorkWithMergeFromLP(_workWithMergeFromLP);
        validator.parmWorkWithTargetLP(_workWithTargetLP);
        validator.parmLocationWithOnHandForMergeFromLP(_locationWithOnHandForMergeFromLP);
        validator.parmLocationWithOnHandForTargetLP(_locationWithOnHandForTargetLP);
        validator.parmOpenPickWorkLineMergeFromLP(_openPickWorkLineMergeFromLP);

        return validator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>