<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGEDatasourceVATDecl501S3_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerRRGEDatasourceVATDecl501S3_W</c> class calculates values for the third section of VAT declaration.
/// </summary>
public class LedgerRRGEDatasourceVATDecl501S3_W extends LedgerRRGEDatasourceVATDeclarationBase_W
{
    private const TaxValue vatValue20 = 20;

    Map                 valuesMap;
    boolean             hasData;

    private const str   Worksheet       = 'стр.4';
    private const int   S3TableId       = 3000;
    private const str   BelarusISOCode  = 'BY';
    private const int   Field1Id        = 1;
    private const int   Field2Id        = 2;
    private const int   Field3Id        = 3;
    private const int   Field4Id        = 4;
    private const int   Field5Id        = 5;
    private const int   Field6Id        = 6;
    private const int   Field7Id        = 7;
    private const int   Field8Id        = 8;
    private const int   Field9Id        = 9;
    private const int   Field10Id       = 10;
    private const int   Field11Id       = 11;
    private const int   Field12Id       = 12;
    private const int   Field14Id       = 14;
    private const int   Field15Id       = 15;
    private const int   Field16Id       = 16;
    private const int   Field17Id       = 17;
    private const int   Field18Id       = 18;
    private const int   Field19Id       = 19;
    private const int   Field20Id       = 20;
    private const int   Field21Id       = 21;
    private const int   Field22Id       = 22;
    private const int   Field23Id       = 23;
    private const int   Field24Id       = 24;

    private Set customDataMethods;
          
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCustomDataMethod</Name>
				<Source><![CDATA[
    private void addCustomDataMethod(str _dataMethodName)
    {
        str dataMethodName = this.normalizeMethodName(_dataMethodName);

        SysDictClass dictClass = new SysDictClass(classIdGet(this));
        if (!dictClass.hasObjectMethod(dataMethodName))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
     
        if (!customDataMethods)
        {
            customDataMethods = new Set(Types::String);
        }

        customDataMethods.add(dataMethodName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>normalizeMethodName</Name>
				<Source><![CDATA[
    private str normalizeMethodName(str _methodName)
    {
        str methodName = strUpr(_methodName);

        int separatorPos = strFind(methodName, '.', 1, strLen(methodName));
        methodName = separatorPos ? subStr(methodName, separatorPos + 1, strLen(methodName)) : methodName;

        const str dataMethodPrefix = 'CAN';
        if (subStr(methodName, 1, strLen(dataMethodPrefix)) == dataMethodPrefix)
        {
            methodName = subStr(methodName, strLen(dataMethodPrefix) + 1, strLen(methodName));
        }

        return methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunCustomDataMethod</Name>
				<Source><![CDATA[
    private boolean canRunCustomDataMethod(str _dataMethodName)
    {
        if (!customDataMethods)
            return true;

        return customDataMethods.in(this.normalizeMethodName(_dataMethodName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCollectValuesDomesticVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines, if the Domestic VAT section values can be collected.
    /// </summary>
    /// <param name = "_allow">
    /// Pass true to allow the values to be collected.
    /// </param>
    /// <returns>
    /// true, if the values can be collected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Either all sections values are collected (this is the default behavior) or only explicitly selected sections values are collected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCollectValuesDomesticVAT(boolean _allow = this.canRunCustomDataMethod(funcName()))
    {
        if (!prmIsDefault(_allow) && _allow)
        {
            this.addCustomDataMethod(funcName());
        }
        return _allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCollectValuesPrepayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines, if the Prepayments section values can be collected.
    /// </summary>
    /// <param name = "_allow">
    /// Pass true to allow the values to be collected.
    /// </param>
    /// <returns>
    /// true, if the values can be collected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Either all sections values are collected (this is the default behavior) or only explicitly selected sections values are collected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCollectValuesPrepayments(boolean _allow = this.canRunCustomDataMethod(funcName()))
    {
        if (!prmIsDefault(_allow) && _allow)
        {
            this.addCustomDataMethod(funcName());
        }
        return _allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCollectValuesRestoredVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines, if the Restored VAT section values can be collected.
    /// </summary>
    /// <param name = "_allow">
    /// Pass true to allow the values to be collected.
    /// </param>
    /// <returns>
    /// true, if the values can be collected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Either all sections values are collected (this is the default behavior) or only explicitly selected sections values are collected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCollectValuesRestoredVAT(boolean _allow = this.canRunCustomDataMethod(funcName()))
    {
        if (!prmIsDefault(_allow) && _allow)
        {
            this.addCustomDataMethod(funcName());
        }
        return _allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCollectValuesPurchVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines, if the Purchase VAT section values can be collected.
    /// </summary>
    /// <param name = "_allow">
    /// Pass true to allow the values to be collected.
    /// </param>
    /// <returns>
    /// true, if the values can be collected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Either all sections values are collected (this is the default behavior) or only explicitly selected sections values are collected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCollectValuesPurchVAT(boolean _allow = this.canRunCustomDataMethod(funcName()))
    {
        if (!prmIsDefault(_allow) && _allow)
        {
            this.addCustomDataMethod(funcName());
        }
        return _allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCollectValuesTaxAgentDeductible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines, if the Tax agent deductible section values can be collected.
    /// </summary>
    /// <param name = "_allow">
    /// Pass true to allow the values to be collected.
    /// </param>
    /// <returns>
    /// true, if the values can be collected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Either all sections values are collected (this is the default behavior) or only explicitly selected sections values are collected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCollectValuesTaxAgentDeductible(boolean _allow = this.canRunCustomDataMethod(funcName()))
    {
        if (!prmIsDefault(_allow) && _allow)
        {
            this.addCustomDataMethod(funcName());
        }
        return _allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCollectValuesCustoms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines, if the Customs section values can be collected.
    /// </summary>
    /// <param name = "_allow">
    /// Pass true to allow the values to be collected.
    /// </param>
    /// <returns>
    /// true, if the values can be collected; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Either all sections values are collected (this is the default behavior) or only explicitly selected sections values are collected.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canCollectValuesCustoms(boolean _allow = this.canRunCustomDataMethod(funcName()))
    {
        if (!prmIsDefault(_allow) && _allow)
        {
            this.addCustomDataMethod(funcName());
        }
        return _allow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookAmounts</Name>
				<Source><![CDATA[
    private container bookAmounts(SalesPurch _bookType, SalesPurchBookTransType_RU _transType)
    {
        AmountMST               amountLiableToVAT;
        TaxAmount               taxAmount;
        FactureJour_RU          factureJourCorr;
        SalesPurchBookTrans_RU  salesPurchBookTransOrig;
        SalesPurchBookTable_RU  salesPurchBookTable = new DictTable(_bookType == SalesPurch::Sales ? tablenum(SalesBookTable_RU) : tablenum(PurchBookTable_RU)).makeRecord();
        SalesPurchBookTrans_RU  salesPurchBookTrans = new DictTable(_bookType == SalesPurch::Sales ? tablenum(SalesBookTrans_RU) : tablenum(PurchBookTrans_RU)).makeRecord();

        salesPurchBookTransOrig = salesPurchBookTrans.data();

        select sum(AmountLiableToVAT10),
               sum(AmountLiableToVAT20),
               sum(TaxAmountVAT10),
               sum(TaxAmountVAT20) from salesPurchBookTrans
            where ! salesPurchBookTrans.CorrectedFactureExternalId &&
                    salesPurchBookTrans.TransType == _transType
        exists join salesPurchBookTable
            where salesPurchBookTable.RecId       == salesPurchBookTrans.SalesPurchBookTable_RU &&
                  salesPurchBookTable.ClosingDate >= periodStart                                &&
                  salesPurchBookTable.ClosingDate <= periodEnd;

        amountLiableToVAT   += salesPurchBookTrans.AmountLiableToVAT10  + salesPurchBookTrans.AmountLiableToVAT20;
        taxAmount           += salesPurchBookTrans.TaxAmountVAT10       + salesPurchBookTrans.TaxAmountVAT20;

        select sum(AmountLiableToVAT10),
               sum(AmountLiableToVAT20),
               sum(TaxAmountVAT10),
               sum(TaxAmountVAT20) from salesPurchBookTrans
            where salesPurchBookTrans.CorrectedFactureExternalId &&
                  salesPurchBookTrans.TransType != SalesPurchBookTransType_RU::VATExportConfirmation
        exists join salesPurchBookTransOrig
            where salesPurchBookTransOrig.FactureExternalId == salesPurchBookTrans.CorrectedFactureExternalId &&
                  salesPurchBookTransOrig.FactureDate       == salesPurchBookTrans.CorrectedFactureDate       &&
                  salesPurchBookTransOrig.TransType         == _transType
        exists join salesPurchBookTable
            where salesPurchBookTable.RecId       == salesPurchBookTransOrig.SalesPurchBookTable_RU &&
                  salesPurchBookTable.ClosingDate >= periodStart                                    &&
                  salesPurchBookTable.ClosingDate <= periodEnd
        exists join factureJourCorr
            where factureJourCorr.FactureId       == salesPurchBookTrans.FactureId   &&
                  factureJourCorr.FactureDate     == salesPurchBookTrans.FactureDate &&
                  factureJourCorr.CorrectedPeriod >= periodStart;

        amountLiableToVAT   += salesPurchBookTrans.AmountLiableToVAT10  + salesPurchBookTrans.AmountLiableToVAT20;
        taxAmount           += salesPurchBookTrans.TaxAmountVAT10       + salesPurchBookTrans.TaxAmountVAT20;

        return [amountLiableToVAT, taxAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValue</Name>
				<Source><![CDATA[
    private void addValue(int _fieldId, Amount _amount, Map _map)
    {
        _map.insert(_fieldId, _amount + this.getValue(_fieldId, _map));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValue</Name>
				<Source><![CDATA[
    private Amount getValue(int _fieldId, Map _map)
    {
        if (_map.exists(_fieldId))
        {
            return _map.lookup(_fieldId);
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValues</Name>
				<Source><![CDATA[
    private void collectValues()
    {
        void addTotalValue(int _totalFieldId, container _fields)
        {
            int i;
        
            for (i = 1; i <= conlen(_fields); i++)
            {
                this.addValue(_totalFieldId, this.getValue(conpeek(_fields, i), valuesMap), valuesMap);
            }
        }

        void roundValues(Map _localvaluesMap)
        {
            Amount          amount;
            MapEnumerator   me = _localvaluesMap.getEnumerator();

            while (me.moveNext())
            {
                amount = me.currentValue();
                amount = decround(amount, 0);

                valuesMap.insert(me.currentKey(), amount);

                if (!hasData && amount)
                {
                    hasData = true;
                }
            }
        }

        Map locValuesMap = new Map(Types::Integer, Types::Real);

        this.collectValuesDomesticVAT       (locValuesMap);
        this.collectValuesPrepayments       (locValuesMap);
        this.collectValuesRestoredVAT       (locValuesMap);
        this.collectValuesPurchVAT          (locValuesMap);
        this.collectValuesTaxAgentDeductible(locValuesMap);
        this.collectValuesCustoms           (locValuesMap);

        roundValues(locValuesMap);

        addTotalValue(Field10Id, [ Field22Id, Field24Id, Field2Id, Field4Id, Field6Id, Field7Id ]);
        addTotalValue(Field10Id, [ Field11Id, Field12Id, Field14Id, Field15Id, Field16Id, Field17Id ]);

        TaxAmount taxAmount = this.getValue(Field10Id, valuesMap) - this.getValue(Field18Id, valuesMap);
        this.addValue(taxAmount >= 0 ? Field19Id : Field20Id, abs(taxAmount), valuesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValuesDomesticVAT</Name>
				<Source><![CDATA[
    private void collectValuesDomesticVAT(Map _locValuesMap)
    {
        SalesBookTable_RU   salesBookTable;
        SalesBookTrans_RU   salesBookTrans,
                            salesBookTransOrig;
        FactureJour_RU      factureJour,
                            factureJourCorr;
        FactureTrans_RU     factureTrans;
        FactureJournalVATView_RU factureTransView;
        CustTable           custTable;

        AmountMST   amountLiableToVAT10,
                    amountLiableToVAT18,
                    amountLiableToVAT20,
                    amountLiableToVAT20Foreigner;
        TaxAmount   taxAmountVAT10,
                    taxAmountVAT18,
                    taxAmountVAT20,
                    taxAmountVAT20Foreigner;

        if (!this.canCollectValuesDomesticVAT())
            return;

        while select sum(AmountLiableToVAT10),
               sum(AmountLiableToVAT20),
               sum(TaxAmountVAT10),
               sum(TaxAmountVAT20) from salesBookTrans
            where ! salesBookTrans.CorrectedFactureExternalId &&
                    salesBookTrans.TransType != SalesPurchBookTransType_RU::CreditNote
        outer join ForeignResident_RU from custTable
            group by ForeignResident_RU
            where custTable.AccountNum      == salesBookTrans.AccountNum
        join TableId from salesBookTable
            where salesBookTable.RecId       == salesBookTrans.SalesBookTable_RU &&
                  salesBookTable.ClosingDate >= periodStart                      &&
                  salesBookTable.ClosingDate <= periodEnd
        join HasVATValue20 from factureTransView
            group by HasVATValue20
            where factureTransView.FactureJourRecId  == salesBookTrans.FactureJour_RU &&
                 (factureTransView.FactureJourModule == FactureModule_RU::Cust                     ||
                  factureTransView.FactureJourModule == FactureModule_RU::TaxCorrectionSales       ||
                  factureTransView.FactureJourModule == FactureModule_RU::TaxCorrectionSales_Vend) &&
                  factureTransView.FactureJourFactureType != FactureType_RU::Prepayment                 &&
                  factureTransView.FactureJourFactureType != FactureType_RU::AdvanceReport              &&
                  factureTransView.FactureJourFactureType != FactureType_RU::VATAdjustment              &&
                  factureTransView.FactureJourFactureType != FactureType_RU::Facture                    &&
                  factureTransView.FactureJourFactureType != FactureType_RU::GTD                        &&
                  factureTransView.FactureJourFactureType != FactureType_RU::CustomCorrection           &&
                  factureTransView.FactureJourVATTaxAgent != NoYes::Yes
        {
            if (factureTransView.HasVATValue20)
            {
                if (custTable.ForeignResident_RU)
                {
                    this.addValue(Field23Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                    this.addValue(Field24Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
                }
                else
                {
                    this.addValue(Field21Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                    this.addValue(Field22Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
                }
            }
            else
            {
                this.addValue(Field1Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                this.addValue(Field2Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
            }
            this.addValue(Field3Id, salesBookTrans.AmountLiableToVAT10, _locValuesMap);
            this.addValue(Field4Id, salesBookTrans.TaxAmountVAT10,      _locValuesMap);
        }

        [ amountLiableToVAT10, taxAmountVAT10,
          amountLiableToVAT18, taxAmountVAT18,
          amountLiableToVAT20, taxAmountVAT20,
          amountLiableToVAT20Foreigner, taxAmountVAT20Foreigner ] = this.creditNoteAmounts(SalesPurch::Purch);

        this.addValue(Field21Id, - amountLiableToVAT20, _locValuesMap);
        this.addValue(Field22Id, - taxAmountVAT20,      _locValuesMap);
        this.addValue(Field23Id, - amountLiableToVAT20Foreigner, _locValuesMap);
        this.addValue(Field24Id, - taxAmountVAT20Foreigner,      _locValuesMap);
        this.addValue(Field1Id, - amountLiableToVAT18, _locValuesMap);
        this.addValue(Field2Id, - taxAmountVAT18,      _locValuesMap);
        this.addValue(Field3Id, - amountLiableToVAT10, _locValuesMap);
        this.addValue(Field4Id, - taxAmountVAT10,      _locValuesMap);

        [ amountLiableToVAT10, taxAmountVAT10, 
          amountLiableToVAT18, taxAmountVAT18, 
          amountLiableToVAT20, taxAmountVAT20,
          amountLiableToVAT20Foreigner, taxAmountVAT20Foreigner ] = this.creditNoteAmounts(SalesPurch::Sales, true);

        this.addValue(Field21Id, - amountLiableToVAT20, _locValuesMap);
        this.addValue(Field22Id, - taxAmountVAT20,      _locValuesMap);
        this.addValue(Field23Id, - amountLiableToVAT20Foreigner, _locValuesMap);
        this.addValue(Field24Id, - taxAmountVAT20Foreigner,      _locValuesMap);
        this.addValue(Field1Id, - amountLiableToVAT18, _locValuesMap);
        this.addValue(Field2Id, - taxAmountVAT18,      _locValuesMap);
        this.addValue(Field3Id, - amountLiableToVAT10, _locValuesMap);
        this.addValue(Field4Id, - taxAmountVAT10,      _locValuesMap);

        while select sum(AmountLiableToVAT10),
               sum(AmountLiableToVAT20),
               sum(TaxAmountVAT10),
               sum(TaxAmountVAT20) from salesBookTrans
            group by TransType
            where salesBookTrans.CorrectedFactureExternalId &&
                  salesBookTrans.TransType != SalesPurchBookTransType_RU::SumDiff
        outer join ForeignResident_RU from custTable
            group by ForeignResident_RU
            where custTable.AccountNum      == salesBookTrans.AccountNum
        join TableId from salesBookTransOrig
            where salesBookTransOrig.FactureExternalId == salesBookTrans.CorrectedFactureExternalId &&
                  salesBookTransOrig.FactureDate       == salesBookTrans.CorrectedFactureDate
        join TableId from salesBookTable
            where salesBookTable.RecId       == salesBookTrans.SalesBookTable_RU &&
                  salesBookTable.ClosingDate >= periodStart                      &&
                  salesBookTable.ClosingDate <= periodEnd
        join TableId from factureJour
            where factureJour.RecId           == salesBookTransOrig.FactureJour_RU          &&
                 (factureJour.Module          == FactureModule_RU::Cust                     ||
                  factureJour.Module          == FactureModule_RU::TaxCorrectionSales       ||
                  factureJour.Module          == FactureModule_RU::TaxCorrectionSales_Vend) &&
                  factureJour.FactureType     != FactureType_RU::Prepayment                 &&
                  factureJour.FactureType     != FactureType_RU::AdvanceReport              &&
                  factureJour.FactureType     != FactureType_RU::VATAdjustment              &&
                  factureJour.FactureType     != FactureType_RU::Facture                    &&
                  factureJour.FactureType     != FactureType_RU::GTD                        &&
                  factureJour.FactureType     != FactureType_RU::CustomCorrection           &&
                  factureJour.VATTaxAgent     != NoYes::Yes
        outer join VATValue from factureTrans
            group by VATValue
            where factureTrans.FactureId    == factureJour.FactureId
                && factureTrans.Module      == factureJour.Module
                && factureTrans.VATType     == VATType_RU::Full
                && factureTrans.VATValue    == vatValue20
        join TableId from factureJourCorr
            where factureJourCorr.RecId           == salesBookTrans.FactureJour_RU   &&
                  factureJourCorr.CorrectedPeriod >= periodStart
        {
            if (factureTrans.VATValue == vatValue20)
            {
                if (custTable.ForeignResident_RU)
                {
                    this.addValue(Field23Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                    this.addValue(Field24Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
                }
                else
                {
                    if (salesBookTrans.TransType == SalesPurchBookTransType_RU::CreditNote)
                    {
                        this.addValue(Field11Id, - salesBookTrans.TaxAmountVAT20, _locValuesMap);
                    }
                    else
                    {
                        this.addValue(Field21Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                        this.addValue(Field22Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
                    }
                }
            }
            else
            {
                this.addValue(Field1Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                this.addValue(Field2Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
            }
            this.addValue(Field3Id, salesBookTrans.AmountLiableToVAT10, _locValuesMap);
            this.addValue(Field4Id, salesBookTrans.TaxAmountVAT10,      _locValuesMap);
        }

        // In sales book AD's printed at the same period they were created
        while select sum(AmountLiableToVAT10),
               sum(AmountLiableToVAT20),
               sum(TaxAmountVAT10),
               sum(TaxAmountVAT20) from salesBookTrans
            where salesBookTrans.CorrectedFactureExternalId &&
                  salesBookTrans.TransType == SalesPurchBookTransType_RU::SumDiff
        outer join ForeignResident_RU from custTable
            group by ForeignResident_RU
            where custTable.AccountNum      == salesBookTrans.AccountNum
        join TableId from salesBookTable
            where salesBookTable.RecId       == salesBookTrans.SalesBookTable_RU &&
                  salesBookTable.ClosingDate >= periodStart                      &&
                  salesBookTable.ClosingDate <= periodEnd
        join TableId from salesBookTransOrig
            where salesBookTransOrig.FactureExternalId == salesBookTrans.CorrectedFactureExternalId &&
                  salesBookTransOrig.FactureDate       == salesBookTrans.CorrectedFactureDate
        join TableId from factureJour
            where factureJour.RecId           == salesBookTransOrig.FactureJour_RU          &&
                 (factureJour.Module          == FactureModule_RU::Cust                     ||
                  factureJour.Module          == FactureModule_RU::TaxCorrectionSales       ||
                  factureJour.Module          == FactureModule_RU::TaxCorrectionSales_Vend) &&
                  factureJour.FactureType     != FactureType_RU::Prepayment                 &&
                  factureJour.FactureType     != FactureType_RU::AdvanceReport              &&
                  factureJour.FactureType     != FactureType_RU::VATAdjustment              &&
                  factureJour.FactureType     != FactureType_RU::Facture                    &&
                  factureJour.FactureType     != FactureType_RU::GTD                        &&
                  factureJour.FactureType     != FactureType_RU::CustomCorrection           &&
                  factureJour.VATTaxAgent     != NoYes::Yes
        outer join VATValue from factureTrans
            group by VATValue
            where factureTrans.FactureId    == factureJour.FactureId
                && factureTrans.Module      == factureJour.Module
                && factureTrans.VATType     == VATType_RU::Full
                && factureTrans.VATValue    == vatValue20
        {
            if (factureTrans.VATValue == vatValue20)
            {
                if (custTable.ForeignResident_RU)
                {
                    this.addValue(Field23Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                    this.addValue(Field24Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
                }
                else
                {
                    this.addValue(Field21Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                    this.addValue(Field22Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
                }
            }
            else
            {
                this.addValue(Field1Id, salesBookTrans.AmountLiableToVAT20, _locValuesMap);
                this.addValue(Field2Id, salesBookTrans.TaxAmountVAT20,      _locValuesMap);
            }

            this.addValue(Field3Id, salesBookTrans.AmountLiableToVAT10, _locValuesMap);
            this.addValue(Field4Id, salesBookTrans.TaxAmountVAT10,      _locValuesMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValuesPrepayments</Name>
				<Source><![CDATA[
    private void collectValuesPrepayments(Map _locValuesMap)
    {
        AmountMST   amountLiableToVAT;
        TaxAmount   taxAmount;

        if (!this.canCollectValuesPrepayments())
            return;

        [amountLiableToVAT, taxAmount] = this.bookAmounts(SalesPurch::Sales, SalesPurchBookTransType_RU::Prepayment);

        this.addValue(Field5Id, amountLiableToVAT, _locValuesMap);
        this.addValue(Field6Id, taxAmount, _locValuesMap);

        [amountLiableToVAT, taxAmount] = this.bookAmounts(SalesPurch::Sales, SalesPurchBookTransType_RU::PrepaymentStorno);

        this.addValue(Field9Id, taxAmount, _locValuesMap);
        this.addValue(Field7Id, taxAmount, _locValuesMap);

        this.addValue(Field12Id, conpeek(this.bookAmounts(SalesPurch::Purch, SalesPurchBookTransType_RU::Prepayment), 2), _locValuesMap);
        this.addValue(Field16Id, conpeek(this.bookAmounts(SalesPurch::Purch, SalesPurchBookTransType_RU::PrepaymentStorno), 2), _locValuesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValuesRestoredVAT</Name>
				<Source><![CDATA[
    private void collectValuesRestoredVAT(Map _locValuesMap)
    {
        RestoredVATLogTable_RU              restoredVATLogTable;
        RestoredVATLogTransOper_RU          restoredVATLogTransOper;
        RestoredVATLogTransOperAsset_RU     restoredVATLogTransOperAsset;
        AssetTable                          assetTable;
        
        if (!this.canCollectValuesRestoredVAT())
            return;

        select sum(TaxAmount), sum(TaxAmountNotLiable) from restoredVATLogTransOper
            where restoredVATLogTransOper.Include &&
                ! restoredVATLogTransOper.Asset
        exists join restoredVATLogTable
            where restoredVATLogTable.TransDate == restoredVATLogTransOper.TransDate &&
                  restoredVATLogTable.TransDate >= periodStart                       &&
                  restoredVATLogTable.TransDate <= periodEnd                         &&
                  restoredVATLogTable.Approved;

        this.addValue(Field7Id, restoredVATLogTransOper.TaxAmount + restoredVATLogTransOper.TaxAmountNotLiable, _locValuesMap);
        this.addValue(Field8Id, restoredVATLogTransOper.TaxAmount, _locValuesMap);

        select sum(TaxAmount), sum(TaxAmountNotLiable) from restoredVATLogTransOperAsset
            exists join restoredVATLogTransOper
                where restoredVATLogTransOper.RecId     == restoredVATLogTransOperAsset.LogTransOperRefRecId &&
                      restoredVATLogTransOper.LineType  == RestoredVATLineType_RU::Indirect                  &&
                      restoredVATLogTransOper.Asset                                                          &&
                      restoredVATLogTransOper.Include
            exists join restoredVATLogTable
                where restoredVATLogTable.TransDate == restoredVATLogTransOper.TransDate &&
                      restoredVATLogTable.TransDate >= periodStart                       &&
                      restoredVATLogTable.TransDate <= periodEnd                         &&
                      restoredVATLogTable.Approved
            exists join assetTable
                where assetTable.AssetId   == restoredVATLogTransOperAsset.AssetId &&
                      assetTable.AssetType == AssetType::LandBuilding;

        this.addValue(Field7Id, restoredVATLogTransOperAsset.TaxAmount + restoredVATLogTransOperAsset.TaxAmountNotLiable, _locValuesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValuesPurchVAT</Name>
				<Source><![CDATA[
    private void collectValuesPurchVAT(Map _locValuesMap)
    {
        FactureJour_RU      factureJour,
                            factureJourCorr;

        PurchBookTable_RU   purchBookTable;
        PurchBookTrans_RU   purchBookTrans,
                            purchBookTransOrig;

        if (!this.canCollectValuesPurchVAT())
            return;

        select sum(TaxAmountVAT10), sum(TaxAmountVAT20) from purchBookTrans
            where ! purchBookTrans.CorrectedFactureExternalId                          &&
                    purchBookTrans.TransType != SalesPurchBookTransType_RU::CreditNote &&
                    purchBookTrans.TransType != SalesPurchBookTransType_RU::VATExportConfirmation
        exists join purchBookTable
            where purchBookTable.RecId       == purchBookTrans.PurchBookTable_RU &&
                  purchBookTable.ClosingDate >= periodStart                      &&
                  purchBookTable.ClosingDate <= periodEnd
        exists join factureJour
            where factureJour.RecId         == purchBookTrans.FactureJour_RU              &&
                 (factureJour.Module        == FactureModule_RU::Vend                     ||
                  factureJour.Module        == FactureModule_RU::Empl                     ||
                  factureJour.Module        == FactureModule_RU::TaxCorrectionPurch       ||
                  factureJour.Module        == FactureModule_RU::TaxCorrectionPurch_Cust) &&
                  factureJour.FactureType   != FactureType_RU::Prepayment                 &&
                  factureJour.FactureType   != FactureType_RU::VATAdjustment              &&
                  factureJour.FactureType   != FactureType_RU::Facture                    &&
                  factureJour.FactureType   != FactureType_RU::GTD                        &&
                  factureJour.FactureType   != FactureType_RU::CustomCorrection           &&
                  factureJour.VATTaxAgent   != NoYes::Yes;

        this.addValue(Field11Id, purchBookTrans.TaxAmountVAT10 + purchBookTrans.TaxAmountVAT20, _locValuesMap);

        select sum(TaxAmountVAT10), sum(TaxAmountVAT20) from purchBookTrans
            where purchBookTrans.CorrectedFactureExternalId &&
                  purchBookTrans.TransType != SalesPurchBookTransType_RU::VATExportConfirmation
        exists join purchBookTransOrig
            where purchBookTransOrig.FactureExternalId == purchBookTrans.CorrectedFactureExternalId &&
                  purchBookTransOrig.FactureDate       == purchBookTrans.CorrectedFactureDate       &&
                  purchBookTransOrig.TransType         != SalesPurchBookTransType_RU::VATExportConfirmation
        exists join purchBookTable
            where purchBookTable.RecId       == purchBookTrans.PurchBookTable_RU &&
                  purchBookTable.ClosingDate >= periodStart                      &&
                  purchBookTable.ClosingDate <= periodEnd
        exists join factureJour
            where factureJour.RecId           == purchBookTransOrig.FactureJour_RU          &&
                 (factureJour.Module          == FactureModule_RU::Vend                     ||
                  factureJour.Module          == FactureModule_RU::Empl                     ||
                  factureJour.Module          == FactureModule_RU::TaxCorrectionPurch       ||
                  factureJour.Module          == FactureModule_RU::TaxCorrectionPurch_Cust) &&
                  factureJour.FactureType     != FactureType_RU::Prepayment                 &&
                  factureJour.FactureType     != FactureType_RU::VATAdjustment              &&
                  factureJour.FactureType     != FactureType_RU::Facture                    &&
                  factureJour.FactureType     != FactureType_RU::GTD                        &&
                  factureJour.FactureType     != FactureType_RU::CustomCorrection           &&
                  factureJour.VATTaxAgent     != NoYes::Yes
        exists join factureJourCorr
            where factureJourCorr.FactureId       == purchBookTrans.FactureId   &&
                  factureJourCorr.CorrectedPeriod >= periodStart;

        this.addValue(Field11Id, purchBookTrans.TaxAmountVAT10 + purchBookTrans.TaxAmountVAT20, _locValuesMap);

        AmountMST   amountLiableToVAT10,
                    amountLiableToVAT18,
                    amountLiableToVAT20,
                    amountLiableToVAT20Foreigner;
        TaxAmount   taxAmountVAT10,
                    taxAmountVAT18,
                    taxAmountVAT20,
                    taxAmountVAT20Foreigner;

        [ amountLiableToVAT10, taxAmountVAT10, 
          amountLiableToVAT18, taxAmountVAT18, 
          amountLiableToVAT20, taxAmountVAT20,
          amountLiableToVAT20Foreigner, taxAmountVAT20Foreigner ] = this.creditNoteAmounts(SalesPurch::Sales);

        this.addValue(Field11Id, - taxAmountVAT10 - taxAmountVAT18 - taxAmountVAT20 - taxAmountVAT20Foreigner, _locValuesMap);

        [ amountLiableToVAT10, taxAmountVAT10,
          amountLiableToVAT18, taxAmountVAT18,
          amountLiableToVAT20, taxAmountVAT20,
          amountLiableToVAT20Foreigner, taxAmountVAT20Foreigner ] = this.creditNoteAmounts(SalesPurch::Purch, true);

        this.addValue(Field11Id, - taxAmountVAT10 - taxAmountVAT18 - taxAmountVAT20 - taxAmountVAT20Foreigner, _locValuesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValuesTaxAgentDeductible</Name>
				<Source><![CDATA[
    private void collectValuesTaxAgentDeductible(Map _locValuesMap)
    {
        PurchBookTable_RU   purchBookTable;
        PurchBookTrans_RU   purchBookTrans,
                            purchBookTransOrig;
        FactureJour_RU      factureJour,
                            factureJourCorr;

        if (!this.canCollectValuesTaxAgentDeductible())
            return;

        select sum(TaxAmountVAT10), sum(TaxAmountVAT20) from purchBookTrans
            where ! purchBookTrans.CorrectedFactureExternalId &&
                    purchBookTrans.TransType == SalesPurchBookTransType_RU::TaxCorrection
        exists join purchBookTable
            where purchBookTable.RecId       == purchBookTrans.PurchBookTable_RU &&
                  purchBookTable.ClosingDate >= periodStart                      &&
                  purchBookTable.ClosingDate <= periodEnd
        exists join factureJour
            where factureJour.RecId       == purchBookTrans.FactureJour_RU &&
                  factureJour.VATTaxAgent == NoYes::Yes;

        this.addValue(Field17Id, purchBookTrans.TaxAmountVAT10 + purchBookTrans.TaxAmountVAT20, _locValuesMap);

        select sum(TaxAmountVAT10), sum(TaxAmountVAT20) from purchBookTrans
            where purchBookTrans.CorrectedFactureExternalId &&
                  purchBookTrans.TransType != SalesPurchBookTransType_RU::VATExportConfirmation
        exists join purchBookTransOrig
            where purchBookTransOrig.FactureExternalId == purchBookTrans.CorrectedFactureExternalId &&
                  purchBookTransOrig.FactureDate       == purchBookTrans.CorrectedFactureDate       &&
                  purchBookTransOrig.TransType         == SalesPurchBookTransType_RU::TaxCorrection
        exists join purchBookTable
            where purchBookTable.RecId       == purchBookTransOrig.PurchBookTable_RU &&
                  purchBookTable.ClosingDate >= periodStart                          &&
                  purchBookTable.ClosingDate <= periodEnd
        exists join factureJour
            where factureJour.RecId       == purchBookTransOrig.FactureJour_RU &&
                  factureJour.VATTaxAgent == NoYes::Yes
        exists join factureJourCorr
            where factureJourCorr.RecId           == purchBookTrans.FactureJour_RU   &&
                  factureJourCorr.CorrectedPeriod >= periodStart;

        this.addValue(Field17Id, purchBookTrans.TaxAmountVAT10 + purchBookTrans.TaxAmountVAT20, _locValuesMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectValuesCustoms</Name>
				<Source><![CDATA[
    private void collectValuesCustoms(Map _locValuesMap)
    {
        PurchBookTable_RU   purchBookTable;
        PurchBookTrans_RU   purchBookTrans,
                            purchBookTransOrig;
        FactureJour_RU      factureJourCorr;

        if (!this.canCollectValuesCustoms())
            return;

        Map vendCountryMap = new Map(Types::String, Types::String);
        AddressCountryRegionISOCode getISOCode(CustVendAC _vendAccount)
        {
            AddressCountryRegionISOCode countryISOCode;

            if (vendCountryMap.exists(_vendAccount))
            {
                countryISOCode = vendCountryMap.lookup(_vendAccount);
            }
            else
            {
                countryISOCode = LogisticsAddressCountryRegion::find(VendTable::find(_vendAccount).postalAddress().CountryRegionId).ISOcode;
                vendCountryMap.insert(_vendAccount, countryISOCode);
            }

            return countryISOCode;
        }
        
        while select sum(TaxAmountVAT10), sum(TaxAmountVAT20) from purchBookTrans
            group by AccountNum
            where ! purchBookTrans.CorrectedFactureExternalId                   &&
                   (purchBookTrans.TransType == SalesPurchBookTransType_RU::GTD ||
                    purchBookTrans.TransType == SalesPurchBookTransType_RU::CustomCorrection)
        exists join purchBookTable
            where purchBookTable.RecId       == purchBookTrans.PurchBookTable_RU &&
                  purchBookTable.ClosingDate >= periodStart                      &&
                  purchBookTable.ClosingDate <= periodEnd
        {
            this.addValue(getISOCode(purchBookTrans.AccountNum) == BelarusISOCode ? Field15Id : Field14Id,
                     purchBookTrans.TaxAmountVAT10 + purchBookTrans.TaxAmountVAT20,
                     _locValuesMap);
        }

        while select sum(TaxAmountVAT10), sum(TaxAmountVAT20) from purchBookTrans
            group by AccountNum
            where purchBookTrans.CorrectedFactureExternalId &&
                  purchBookTrans.TransType != SalesPurchBookTransType_RU::VATExportConfirmation
        exists join purchBookTransOrig
            where purchBookTransOrig.FactureExternalId == purchBookTrans.CorrectedFactureExternalId &&
                  purchBookTransOrig.FactureDate       == purchBookTrans.CorrectedFactureDate       &&
                 (purchBookTransOrig.TransType         == SalesPurchBookTransType_RU::GTD           ||
                  purchBookTransOrig.TransType         == SalesPurchBookTransType_RU::CustomCorrection)
        exists join purchBookTable
            where purchBookTable.RecId       == purchBookTransOrig.PurchBookTable_RU &&
                  purchBookTable.ClosingDate >= periodStart                          &&
                  purchBookTable.ClosingDate <= periodEnd
        exists join factureJourCorr
            where factureJourCorr.RecId           == purchBookTrans.FactureJour_RU &&
                  factureJourCorr.CorrectedPeriod >= periodStart
        {
            this.addValue(getISOCode(purchBookTrans.AccountNum) == BelarusISOCode ? Field15Id : Field14Id,
                     purchBookTrans.TaxAmountVAT10 + purchBookTrans.TaxAmountVAT20,
                     _locValuesMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates credit note amounts.
    /// </summary>
    /// <param name = "_bookType">
    /// The book type: sles or purchase.
    /// </param>
    /// <param name = "_amountAdjOnly">
    /// true, if adjustments only are to be calculated.
    /// </param>
    /// <returns>
    /// A container formed as VAT base and amount pairs.
    /// </returns>
    private container creditNoteAmounts(SalesPurch _bookType, boolean _amountAdjOnly = false)
    {
        AmountMST   amountLiableToVAT10 = 0,
                    amountLiableToVAT18 = 0,
                    amountLiableToVAT20 = 0,
                    amountLiableToVAT20Foreigner = 0;

        TaxAmount   taxAmountVAT10 = 0,
                    taxAmountVAT18 = 0,
                    taxAmountVAT20 = 0,
                    taxAmountVAT20Foreigner = 0;

        SalesPurchBookTrans_RU  salesPurchBookTransAD;
        SalesPurchBookTable_RU  salesPurchBookTableAD;
        SalesPurchBookTable_RU  salesPurchBookTable = new DictTable(_bookType == SalesPurch::Sales ? tablenum(SalesBookTable_RU) : tablenum(PurchBookTable_RU)).makeRecord();
        SalesPurchBookTrans_RU  salesPurchBookTrans = new DictTable(_bookType == SalesPurch::Sales ? tablenum(SalesBookTrans_RU) : tablenum(PurchBookTrans_RU)).makeRecord();
        FactureJour_RU          factureJour;
        FactureTrans_RU         factureTrans;
        FactureJournalVATView_RU factureTransView;

        salesPurchBookTransAD = salesPurchBookTrans.data();
        salesPurchBookTableAD = salesPurchBookTable.data();

        if (! _amountAdjOnly)
        {
            while select sum(AmountLiableToVAT10),
                   sum(AmountLiableToVAT20),
                   sum(TaxAmountVAT10),
                   sum(TaxAmountVAT20) from salesPurchBookTrans
                where  salesPurchBookTrans.TransType  == SalesPurchBookTransType_RU::CreditNote &&
                     ! salesPurchBookTrans.ReverseTrans                                         &&
                     ! salesPurchBookTrans.CorrectedFactureExternalId
            join TableId from salesPurchBookTable
                where salesPurchBookTable.RecId       == salesPurchBookTrans.SalesPurchBookTable_RU &&
                      salesPurchBookTable.ClosingDate >= periodStart                                &&
                      salesPurchBookTable.ClosingDate <= periodEnd
            join HasVATValue20 from factureTransView
            group by HasVATValue20
                where factureTransView.FactureJourRecId  == salesPurchBookTrans.FactureJour_RU
            {
                if (factureTransView.HasVATValue20)
                {
                    amountLiableToVAT20 += salesPurchBookTrans.AmountLiableToVAT20;
                    taxAmountVAT20      += salesPurchBookTrans.TaxAmountVAT20;
                }
                else
                {
                    amountLiableToVAT18 += salesPurchBookTrans.AmountLiableToVAT20;
                    taxAmountVAT18      += salesPurchBookTrans.TaxAmountVAT20;
                }
                amountLiableToVAT10 += salesPurchBookTrans.AmountLiableToVAT10;
                taxAmountVAT10      += salesPurchBookTrans.TaxAmountVAT10;
            }            
        }

        while select sum(AmountLiableToVAT10),
                sum(AmountLiableToVAT20),
                sum(TaxAmountVAT10),
                sum(TaxAmountVAT20) from salesPurchBookTransAD
            where salesPurchBookTransAD.TransType == SalesPurchBookTransType_RU::SumDiff &&
                ! salesPurchBookTransAD.ReverseTrans
        join TableId from salesPurchBookTrans
            where salesPurchBookTrans.FactureId == salesPurchBookTransAD.FactureId        &&
                  salesPurchBookTrans.TransType == SalesPurchBookTransType_RU::CreditNote &&
                ! salesPurchBookTrans.CorrectedFactureExternalId
        join TableId from salesPurchBookTable
            where salesPurchBookTable.RecId       == salesPurchBookTrans.SalesPurchBookTable_RU &&
                  salesPurchBookTable.ClosingDate <= periodEnd
        join TableId from salesPurchBookTableAD
            where salesPurchBookTableAD.RecId       == salesPurchBookTransAD.SalesPurchBookTable_RU &&
                    salesPurchBookTableAD.ClosingDate >= periodStart                                &&
                    salesPurchBookTableAD.ClosingDate <= periodEnd
        join TableId from factureJour
                where factureJour.RecId         == salesPurchBookTrans.FactureJour_RU
        outer join VATValue from factureTrans
            group by VATValue
            where factureTrans.FactureId    == factureJour.FactureId
                && factureTrans.Module      == factureJour.Module
                && factureTrans.VATType     == VATType_RU::Full
                && factureTrans.VATValue    == vatValue20
        {
            if (factureTrans.VATValue == vatValue20)
            {
                amountLiableToVAT20 += salesPurchBookTrans.AmountLiableToVAT20;
                taxAmountVAT20      += salesPurchBookTrans.TaxAmountVAT20;
            }
            else
            {
                amountLiableToVAT18 += salesPurchBookTrans.AmountLiableToVAT20;
                taxAmountVAT18      += salesPurchBookTrans.TaxAmountVAT20;
            }
            amountLiableToVAT10 += salesPurchBookTrans.AmountLiableToVAT10;
            taxAmountVAT10      += salesPurchBookTrans.TaxAmountVAT10;
        }

        return [ 
            amountLiableToVAT10, taxAmountVAT10,
            amountLiableToVAT18, taxAmountVAT18,
            amountLiableToVAT20, taxAmountVAT20,
            amountLiableToVAT20Foreigner, taxAmountVAT20Foreigner             
            ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultWorksheet</Name>
				<Source><![CDATA[
    public str defaultWorksheet(int _tableId)
    {
        return Worksheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTables</Name>
				<Source><![CDATA[
    public void initTables()
    {
        const str TableName     = 'Раздел 3';
        const str Field21Req    = 'РеалТов20НалБаза';
        const str Field21Name   = 'Реализация товаров, передача имущественных прав по ставке налога 20%, Налоговая база';
        const str Field22Req    = 'РеалТов20СумНал';
        const str Field22Name   = 'Реализация товаров, передача имущественных прав по ставке налога 20%, Сумма НДС';
        const str Field1Req     = 'РеалТов18НалБаза';
        const str Field1Name    = 'Реализация товаров, передача имущественных прав по ставке налога 18%, Налоговая база';
        const str Field2Req     = 'РеалТов18СумНал';
        const str Field2Name    = 'Реализация товаров, передача имущественных прав по ставке налога 18%, Сумма НДС';
        const str Field3Req     = 'РеалТов10НалБаза';
        const str Field3Name    = 'Реализация товаров, передача имущественных прав по ставке налога 10%, Налоговая база';
        const str Field4Req     = 'РеалТов10СумНал';
        const str Field4Name    = 'Реализация товаров, передача имущественных прав по ставке налога 10%, Сумма НДС';
        const str Field5Req     = 'ОплПредПостНалБаза';
        const str Field5Name    = 'Суммы полученной оплаты, частичной оплаты в счет предстоящих поставок товаров, передачи имущественных прав, Налоговая база';
        const str Field6Req     = 'ОплПредПостСумНал';
        const str Field6Name    = 'Суммы полученной оплаты, частичной оплаты в счет предстоящих поставок товаров, передачи имущественных прав, Сумма НДС';
        const str Field7Req     = 'СумНалВосстСумНалВс';
        const str Field7Name    = 'Суммы налога, подлежащие восстановлению, всего';
        const str Field8Req     = 'СумНалВосстСумНалОперСт0';
        const str Field8Name    = 'Суммы налога, подлежащие восстановлению при совершении операций, облагаемых по налоговой ставке 0 процентов';
        const str Field9Req     = 'СумНалВосстСумНал170.3.3';
        const str Field9Name    = 'Суммы налога, подлежащие восстановлению в соответствии с подпунктом 3 пункта 3 статьи 170 НК РФ';
        const str Field10Req    = 'НалВосстОбщ';
        const str Field10Name   = 'Общая сумма НДС, исчисленная с учетом восстановленных сумм налога';
        const str Field11Req    = 'НалПредНППриоб';
        const str Field11Name   = 'Сумма налога, предъявленная налогоплательщику при приобретении на территории Российской Федерации товаров, имущественных прав, подлежащая вычету в соответствии с п. 2,4,13 ст. 171 НК РФ';
        const str Field12Req    = 'НалПредНППок';
        const str Field12Name   = 'Сумма налога, предъявленная налогоплательщику - покупателю при перечислении суммы оплаты, частичной оплаты  в счет предстоящих поставок товаров, передачи имущественных прав, подлежащая вычету у покупателя';
        const str Field14Req    = 'НалУплТамож';
        const str Field14Name   = 'Сумма налога, уплаченная налогоплательщиком таможенным органам при ввозе товаров на территорию Российской Федерации, переработки для внутреннего потребления, временного ввоза и переработки вне таможенной территории';
        const str Field15Req    = 'НалУплНОТовТС';
        const str Field15Name   = 'Сумма налога, уплаченная налогоплательщиком налоговым органам при ввозе товара на территорию Российской Федерации и иные территории, находящиеся под ее юрисдикцией, с территории государств - членов Таможенного союза';
        const str Field16Req    = 'НалИсчПрод';
        const str Field16Name   = 'Сумма налога, исчисленная продавцом с сумм оплаты, частичной оплаты, подлежащая вычету у продавца с даты отгрузки соответствующих товаров';
        const str Field17Req    = 'НалУплПокНА';
        const str Field17Name   = 'Сумма налога, уплаченная в бюджет налогоплательщиком в качестве покупателя – налогового агента, подлежащая вычету';
        const str Field18Req    = 'НалВычОбщ';
        const str Field18Name   = 'Общая сумма налога, подлежащая вычету';
        const str Field19Req    = 'НалПУ164';
        const str Field19Name   = 'Итого сумма налога, подлежащая уплате в бюджет по разделу 3';
        const str Field20Req    = 'НалПУ1641';
        const str Field20Name   = 'Итого сумма налога, исчисленная к возмещению по разделу 3';
        const str Field23Req    = 'РеалТов7.164НалБаза';
        const str Field23Name   = 'Реализация товаров (работ, услуг) в соответствии с пунктом 7 статьи 164 Налогового кодекса Российской Федерации, Налоговая база';
        const str Field24Req    = 'РеалТов7.164СумНал';
        const str Field24Name   = 'Реализация товаров (работ, услуг) в соответствии с пунктом 7 статьи 164 Налогового кодекса Российской Федерации, Сумма НДС';

        super();

        this.addTable(S3TableId, TableName);

        this.addField(S3TableId, Field21Id, Field21Req,  Field21Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field22Id, Field22Req,  Field22Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field1Id,  Field1Req,   Field1Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field2Id,  Field2Req,   Field2Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field3Id,  Field3Req,   Field3Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field4Id,  Field4Req,   Field4Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field23Id, Field23Req,  Field23Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field24Id, Field24Req,  Field24Name,   '', SysAlignment::AlignLeft,   12, Minus);

        this.addField(S3TableId, Field5Id,  Field5Req,   Field5Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field6Id,  Field6Req,   Field6Name,    '', SysAlignment::AlignLeft,   12, Minus);
                                                                        
        this.addField(S3TableId, Field7Id,  Field7Req,   Field7Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field8Id,  Field8Req,   Field8Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field9Id,  Field9Req,   Field9Name,    '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field10Id, Field10Req,  Field10Name,   '', SysAlignment::AlignLeft,   12, Minus);

        this.addField(S3TableId, Field11Id, Field11Req,  Field11Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field12Id, Field12Req,  Field12Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field14Id, Field14Req,  Field14Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field15Id, Field15Req,  Field15Name,   '', SysAlignment::AlignLeft,   12, Minus);

        this.addField(S3TableId, Field16Id, Field16Req,  Field16Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field17Id, Field17Req,  Field17Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field18Id, Field18Req,  Field18Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field19Id, Field19Req,  Field19Name,   '', SysAlignment::AlignLeft,   12, Minus);
        this.addField(S3TableId, Field20Id, Field20Req,  Field20Name,   '', SysAlignment::AlignLeft,   12, Minus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    public boolean next(int _tableId)
    {
        MapEnumerator me;

        if (hasData && vatDeclaration && ! this.initialized(S3TableId))
        {
            this.setInitialized(S3TableId);

            me = valuesMap.getEnumerator();

            while (me.moveNext())
            {
                vatDeclaration.setValue(me.currentKey(), S3TableId, me.currentValue());
            }

            return true;
        }

        this.checkDynamicWorkdsheetInitialized(S3TableId);

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageCount</Name>
				<Source><![CDATA[
    public int pageCount(int _tableId)
    {
        return _tableId == S3TableId && ! worksheetDeleted ? 1 : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset(int _tableId)
    {
        super(S3TableId);

        if (! worksheetDeleted)
        {
            valuesMap = new Map(Types::Integer, Types::Real);

            hasData = false;

            this.collectValues();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S3_W construct()
    {
        return new LedgerRRGEDatasourceVATDecl501S3_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromVATDeclaration</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGEDatasourceVATDecl501S3_W newFromVATDeclaration(LedgerRRGEDatasourceVATDeclaration_W _vatDeclaration)
    {
        LedgerRRGEDatasourceVATDecl501S3_W section = LedgerRRGEDatasourceVATDecl501S3_W::construct();

        section.parmVATDeclaration(_vatDeclaration);

        return section;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>