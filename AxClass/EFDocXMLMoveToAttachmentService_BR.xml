<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocXMLMoveToAttachmentService_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Service class part of the SysOperationFramework that is responsible for delegating the
/// NF-e XML moving to attachment process.
/// </summary>
public class EFDocXMLMoveToAttachmentService_BR extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAttachment</Name>
				<Source><![CDATA[
    private void addAttachment(str _name, str _xml, RefRecId _recId, DataAreaId _dataAreaId)
    {
        using (System.IO.Stream stream = new System.IO.MemoryStream(System.Text.Encoding::UTF8.GetBytes(_xml)))
        {
            DocumentManagement::attachFile(
                tableNum(EFDocumentXML_BR),
                _recId,
                _dataAreaId,
                DocuType::typeFile(),
                stream,
                System.IO.Path::GetFileName(_name),
                System.Web.MimeMapping::GetMimeMapping(_name),
                System.IO.Path::GetFileNameWithoutExtension(_name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    private Query buildQuery(EFDocXMLMoveToAttachmentContract_BR _contract)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsEFDocumentXML = query.addDataSource(tableNum(EFDocumentXML_BR));
        findOrCreateRange_W(qbdsEFDocumentXML, fieldNum(EFDocumentXML_BR, Moved), queryValue(NoYes::No));

        QueryBuildDataSource qbdsEFDocument = qbdsEFDocumentXML.addDataSource(tableNum(EFDocument_BR));
        qbdsEFDocument.relations(true);
        qbdsEFDocument.joinMode(JoinMode::InnerJoin);

        QueryBuildDataSource qbdsFiscalDocument = qbdsEFDocument.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFiscalDocument.relations(true);
        qbdsFiscalDocument.joinMode(JoinMode::InnerJoin);
        qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, AccessKey));
        qbdsFiscalDocument.addSelectionField(fieldNum(FiscalDocument_BR, Status));
        findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, Status), SysQuery::valueNot(FiscalDocumentStatus_BR::Created));
        findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, FiscalDocumentDate), queryRange(_contract.parmFromDate(), _contract.parmToDate()));

        if (_contract.parmFiscalEstablishmentId())
        {
            findOrCreateRange_W(qbdsFiscalDocument, fieldNum(FiscalDocument_BR, FiscalEstablishment), queryValue(_contract.parmFiscalEstablishmentId()));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>move</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports the archieve with NF-e XML files.
    /// </summary>
    /// <param name="_contract">
    /// An instance of the <c>FBSpedContribFileContract_BR</c> contract class.
    /// </param>
    [Hookable(false)]
    public void move(EFDocXMLMoveToAttachmentContract_BR _contract)
    {
        DialogButton diagBut = Box::okCancel(
            "@NFE:XMLMoveToAttachmentWarning",
            DialogButton::Cancel,
            "@NFE:XMLMoveToAttachment");

        if (diagBut == DialogButton::Ok)
        {
            this.moveXmlToAttachment(_contract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveXmlToAttachment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void moveXmlToAttachment(EFDocXMLMoveToAttachmentContract_BR _contract)
    {
        QueryRun queryRun = new QueryRun(this.buildQuery(_contract));

        ttsbegin;

        while (queryRun.next())
        {
            EFDocumentXML_BR efDocumentXML = queryRun.get(tableNum(EFDocumentXML_BR));
            FiscalDocument_BR fiscalDocument = queryRun.get(tableNum(FiscalDocument_BR));

            if (efDocumentXML.Submission
                    || efDocumentXML.Cancel)
            {
                if (efDocumentXML.Submission)
                {
                    this.addAttachment(
                        this.getXMLName(EFDocConstants_BR::SubmitRequest),
                        efDocumentXML.Submission,
                        efDocumentXML.RecId,
                        efDocumentXML.DataAreaId);
                }

                if (efDocumentXML.SubmissionResponse)
                {
                    this.addAttachment(
                        this.getXMLName(EFDocConstants_BR::SubmitResponce),
                        efDocumentXML.SubmissionResponse,
                        efDocumentXML.RecId,
                        efDocumentXML.DataAreaId);
                }

                if (efDocumentXML.SubmitReturn)
                {
                    this.addAttachment(
                        this.getXMLName(EFDocConstants_BR::SubmitReturnRequest),
                        efDocumentXML.SubmitReturn,
                        efDocumentXML.RecId,
                        efDocumentXML.DataAreaId);
                }

                if (efDocumentXML.SubmitReturnResponse)
                {
                    this.addAttachment(
                        this.getXMLName(EFDocConstants_BR::SubmitReturnResponce),
                        efDocumentXML.SubmitReturnResponse,
                        efDocumentXML.RecId,
                        efDocumentXML.DataAreaId);
                }

                if (efDocumentXML.Cancel)
                {
                    this.addAttachment(
                        this.getXMLName(fiscalDocument.Status == FiscalDocumentStatus_BR::Discarded ? EFDocConstants_BR::DiscardRequest : EFDocConstants_BR::CancelRequest),
                        efDocumentXML.Cancel,
                        efDocumentXML.RecId,
                        efDocumentXML.DataAreaId);
                }

                if (efDocumentXML.CancelResponse)
                {
                    this.addAttachment(
                        this.getXMLName(fiscalDocument.Status == FiscalDocumentStatus_BR::Discarded ? EFDocConstants_BR::DiscardResponce : EFDocConstants_BR::CancelResponce),
                        efDocumentXML.CancelResponse,
                        efDocumentXML.RecId,
                        efDocumentXML.DataAreaId);
                }

                efDocumentXML.selectForUpdate(true);
                efDocumentXML.Submission = null;
                efDocumentXML.SubmissionResponse = null;
                efDocumentXML.SubmitReturn = null;
                efDocumentXML.SubmitReturnResponse = null;
                efDocumentXML.Cancel = null;
                efDocumentXML.CancelResponse = null;
                efDocumentXML.Moved = NoYes::Yes;
                efDocumentXML.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getXMLName</Name>
				<Source><![CDATA[
    private str getXMLName(str _type)
    {
        return strFmt('%1%2', _type, EFDocConstants_BR::XMLExtension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>