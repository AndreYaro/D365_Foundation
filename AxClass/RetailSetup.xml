<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSetup</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>RetailSetup</c> class is responsible for setting up part of the seed data required by the retail module.
/// </summary>
[
SysSetupConfigKeyAttribute(configurationkeystr(Retail)),
SysSetupTableAttribute(tableStr(RetailTableIdTable)),
SysSetupTableAttribute(tableStr(RetailOfflineSwitchErrors)),
SysSetupTableAttribute(tableStr(RetailPostSetupActions))
]
public final class RetailSetup implements SysSetup
{
    private RetailSetupLogger retailSetupLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>RetailSetup</c> class.
    /// </summary>
    public void new()
    {
        super();

        // initialize the retail setup logger.
        retailSetupLogger = new RetailSetupLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads part of the master/seed data required by the retail application.
    /// </summary>
    [Hookable(false)]
    public void loadData()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            retailSetupLogger.logSetupLoadRetailSeedDataStart();
            if (RetailUtilities::isRetailEnabled())
            {
                this.loadRetailData();
            }
        }
        catch (xppEx)
        {
            ex = xppEx;
            retailSetupLogger.logSetupLoadRetailSeedDataFailure(ex);
        }
        catch (ex)
        {
            retailSetupLogger.logSetupLoadRetailSeedDataFailure(ex);
        }
        finally
        {
            retailSetupLogger.logSetupLoadRetailSeedDataFinish(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadRetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads part of the master/seed data required by the retail application.
    /// </summary>
    public void loadRetailData()
    {
        this.populateExtensibleEnumMetadata();
        this.initializeCommerceScheduler();
        this.populateRetailReceiptTypeConfigurationTable();
        this.populateRetailTableIdTable();
        this.populateOfflineSwitchErrors();
        this.posOperationDataUpgrade_v1();
        this.loadTableFieldMetadata();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRetailTableIdTable</Name>
				<Source><![CDATA[
    private void populateRetailTableIdTable()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            retailSetupLogger.logPopulateRetailTableIdTableStart();

            RetailTableIdTable::populateTableIdMetadata();
            RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, populateRetailTableIdTable), RetailPostSetupActionStatusType::Processed);
        }
        catch (xppEx)
        {
            ex = xppEx;
            retailSetupLogger.logRetailTableIdTableFailure(ex);
            throw error('Failed to populate RetailTableIdTable metadata.');
        }
        catch (ex)
        {
            retailSetupLogger.logRetailTableIdTableFailure(ex);
            throw error('Failed to populate RetailTableIdTable metadata.');
        }
        finally
        {
            retailSetupLogger.logRetailSetupRetailTableIdTableFinish(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTableFieldMetadata</Name>
				<Source><![CDATA[
    private void loadTableFieldMetadata()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            retailSetupLogger.logLoadTableFieldMetadataStart();

            RetailTableFieldIdHelper::loadTableFieldMetadata();
            RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, loadTableFieldMetadata), RetailPostSetupActionStatusType::Processed);
        }
        catch (xppEx)
        {
            ex = xppEx;
            retailSetupLogger.logLoadTableFieldMetadataFailure(ex);
            throw error('Failed to load RetailTableFieldId metadata.');
        }
        catch (ex)
        {
            retailSetupLogger.logLoadTableFieldMetadataFailure(ex);
            throw error('Failed to load RetailTableFieldId metadata.');
        }
        finally
        {
            retailSetupLogger.logLoadTableFieldMetadataFinish(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRetailReceiptTypeConfigurationTable</Name>
				<Source><![CDATA[
    private void populateRetailReceiptTypeConfigurationTable()
    {
        System.Exception ex;

        try
        {
            retailSetupLogger.logPopulateRetailReceiptTypeConfigurationTableStart();

            RetailReceiptTypeConfiguration::populateRetailReceiptTypeConfigurationTable();
            RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, populateRetailReceiptTypeConfigurationTable), RetailPostSetupActionStatusType::Processed);
        }
        catch (ex)
        {
            retailSetupLogger.logPopulateRetailReceiptTypeConfigurationTableFailure(ex);
        }
        finally
        {
            retailSetupLogger.logPopulateRetailReceiptTypeConfigurationTableFinish(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateExtensibleEnumMetadata</Name>
				<Source><![CDATA[
    private void populateExtensibleEnumMetadata()
    {
        RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, populateExtensibleEnumMetadata), RetailPostSetupActionStatusType::Queued);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCommerceScheduler</Name>
				<Source><![CDATA[
    private void initializeCommerceScheduler()
    {
        RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, initializeCommerceScheduler), RetailPostSetupActionStatusType::Queued);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateOfflineSwitchErrors</Name>
				<Source><![CDATA[
    private void populateOfflineSwitchErrors()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            ApplicationEventSource::EventWriteRetailSetupPopulateOfflineSwitchErrorsStart(true, '', '');

            RetailOfflineSwitchErrors::populateErrorCodes();
            RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, populateOfflineSwitchErrors), RetailPostSetupActionStatusType::Processed);
        }
        catch (xppEx)
        {
            ex = xppEx;
            ApplicationEventSource::EventWriteRetailSetupPopulateOfflineSwitchErrorsFailure(false, ex ? ex.Message : '', ex ? ex.StackTrace : '');
            throw error('Failed to populate offline switch error codes.');
        }
        catch (ex)
        {
           ApplicationEventSource::EventWriteRetailSetupPopulateOfflineSwitchErrorsFailure(false, ex ? ex.Message : '', ex ? ex.StackTrace : '');
           throw error('Failed to populate offline switch error codes.');
        }
        finally
        {
            ApplicationEventSource::EventWriteRetailSetupPopulateOfflineSwitchErrorsStop(ex == null, ex ? ex.Message : '', ex ? ex.StackTrace : '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>posOperationDataUpgrade_v1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the data upgrade related to POS Operations.
    /// </summary>
    /// <remarks>
    /// This is used as data upgrade procedure for existing customers when task management feature is shipped.
    /// The data upgrade work can be done for only once.
    /// Use TaskManagementInitialized property in <c>RetailSharedParameters</c> to indicate whether the upgrade has been done before.
    /// The Pos operation which can be linked in the task is defined in the following document
    /// https://microsoft.sharepoint.com/teams/D365-Retail-Squads/_layouts/15/Doc.aspx?sourcedoc={1f65117c-68c7-48da-a369-89c1904f0897}&action=edit&wd=target%28Cloud%20-%20Task%20Management.one%7C0c55dcfb-c0d0-474e-b2e0-5e050b684f26%2FPOS%20Operations%20for%20Task%20Management%7Cfa82a110-7df7-47d3-8c53-61fd3d81568a%2F%29
    /// </remarks>
    private void posOperationDataUpgrade_v1()
    {
        RetailSharedParameters parameter = RetailSharedParameters::find(true);
        if (parameter && !parameter.TaskManagementInitialized)
        {
            ttsbegin;

            this.markRetailOperationsForTaskLink(108);//Product search
            this.markRetailOperationsForTaskLink(115);//Show journal
            this.markRetailOperationsForTaskLink(516);//Sales invoice
            this.markRetailOperationsForTaskLink(600);//Customer
            this.markRetailOperationsForTaskLink(1003);//View reports
            this.markRetailOperationsForTaskLink(1056);//Print X
            this.markRetailOperationsForTaskLink(1057);//Reprint Z
            this.markRetailOperationsForTaskLink(1058);//Print fiscal X
            this.markRetailOperationsForTaskLink(1059);//Print fiscal Z
            this.markRetailOperationsForTaskLink(2000);//Schedule management

            parameter.TaskManagementInitialized = NoYes::Yes;
            parameter.doUpdate();
            RetailPostSetupActions::registerRetailPostSetupAction(classStr(RetailSetup), methodStr(RetailSetup, posOperationDataUpgrade_v1), RetailPostSetupActionStatusType::Processed);
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markRetailOperationsForTaskLink</Name>
				<Source><![CDATA[
    private void markRetailOperationsForTaskLink(int operationId)
    {
        RetailOperations retailOperations = RetailOperations::find(operationId, true);
        if (retailOperations)
        {
            retailOperations.AllowTaskLink = NoYes::Yes;
            retailOperations.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>