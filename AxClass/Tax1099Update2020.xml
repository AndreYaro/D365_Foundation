<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099Update2020</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>Tax1099Update2020</c> class extends <c>Tax1099Update</c> and performs 1099 updates for tax year 2020.
/// </summary>
[ExportMetadata(classStr(Tax1099Update), 2020)]
[Export("Dynamics.AX.Application.Tax1099Update")]
internal final class Tax1099Update2020 extends Tax1099Update
{
    private Tax1099FieldsTmp tax1099FieldsTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the performUpdate method of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns>true as updates are executed; otherwise, false.</returns>
    internal boolean performUpdate()
    {
        boolean isPerformUpdateExecuted;

        this.initTax1099TmpTable();

        ttsbegin;
        this.updateTax1099Fields();
        this.updateVendorTransactionsFor1099();
        this.removeNoUsedTax1099Fields();
        ttscommit;

        isPerformUpdateExecuted = true;

        return isPerformUpdateExecuted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099UpdateInstanceClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ClassName</c> of the instance of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns><c>ClassName</c> of the instance of <c>Tax1099Update</c> class.</returns>
    internal ClassName getTax1099UpdateInstanceClassName()
    {
        return classStr(Tax1099Update2020);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099UpdateMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>MethodName</c> that performs 1099 updates in the instance of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns><c>MethodName</c> of the method that implements 1099 updates.</returns>
    internal MethodName getTax1099UpdateMethodName()
    {
        return methodStr(Tax1099Update2020, performUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099TaxYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax year that performs 1099 updates in the instance of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns>The tax year that implements 1099 updates.</returns>
    internal year getTax1099TaxYear()
    {
        return 2020;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs 2020 changes in <c>Tax1099Fields</c>
    /// </summary>
    private void updateTax1099Fields()
    {
        ttsbegin;
        this.updatePrevTax1099Fields();
        this.insertNewTax1099Fields();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewTax1099Fields</Name>
				<Source><![CDATA[
    private void insertNewTax1099Fields()
    {
        Tax1099Fields tax1099Fields;
        Tax1099Fields localTax1099Fields;
        this.setSkipMethods(tax1099Fields);

        insert_recordset tax1099Fields
            (
                Tax1099Box,
                Tax1099Type,
                Tax1099Amount,
                Description
            )
            select Tax1099Box, Tax1099Type, Tax1099Amount, Description from tax1099FieldsTmp
                where tax1099FieldsTmp.Tax1099Box != ''
                notexists join localTax1099Fields
                    where localTax1099Fields.Tax1099Box == tax1099FieldsTmp.Tax1099Box
                        && localTax1099Fields.Tax1099Type == tax1099FieldsTmp.Tax1099Type;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePrevTax1099Fields</Name>
				<Source><![CDATA[
    private void updatePrevTax1099Fields()
    {
        Tax1099Fields tax1099Fields;
        this.setSkipMethods(tax1099Fields);

        update_recordset tax1099Fields
            setting
                Tax1099Amount = tax1099FieldsTmp.Tax1099Amount,
                Description = tax1099FieldsTmp.Description
            join tax1099FieldsTmp
            where tax1099Fields.Tax1099Box == tax1099FieldsTmp.Tax1099Box
                && tax1099Fields.Tax1099Type == tax1099FieldsTmp.Tax1099Type
                && tax1099FieldsTmp.Status == Tax1099FieldStatus::Changed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorTransactionsFor1099</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>Tax1099Fields</c> in vendor transactions for 1099 form changes in 2020.
    /// </summary>
    private void updateVendorTransactionsFor1099()
    {
        Tax1099FieldsTmp changedTax1099Fields = tax1099FieldsTmp.getTax1099FieldsTmpByStatus(Tax1099FieldStatus::Changed);

        while select changedTax1099Fields
        {
            tax1099FieldsTmp = tax1099FieldsTmp.findTax1099FieldsTmp(changedTax1099Fields.Tax1099Box, changedTax1099Fields.Tax1099Type);
            if (tax1099FieldsTmp.UpdateStatus != Tax1099FieldUpdateStatus::Updated)
            {
                tax1099FieldsTmp.setUpdateStatus(Tax1099FieldUpdateStatus::Pending);
                this.updateTax1099FieldsForVendorTransactionsByReverse(
                    tax1099FieldsTmp.PreviousBox,
                    tax1099FieldsTmp.PreviousType,
                    tax1099FieldsTmp.Tax1099Box,
                    tax1099FieldsTmp.Tax1099Type);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099FieldsForVendorTransactionsByReverse</Name>
				<Source><![CDATA[
    private void updateTax1099FieldsForVendorTransactionsByReverse(
        Tax1099Box _sourceTax1099Box,
        Tax1099Type _sourceTax1099Type,
        Tax1099Box _destinationTax1099Box,
        Tax1099Type _destinationTax1099Type)
    {
        // The order of updating should be reversed in order to avoid conflicts of Tax1099Boxes.
        // This finds the last Tax1099Box in an updating chain by recursion of this method,
        // and run <c>updateTax1099FieldsForVendorTransactions</c> to update by reversed order.
        // This method can exit when there is no more following tax 1099 box found in updating chain
        // and updating transactions for this tax 1099 box('_sourceTax1099Box') is done.
        //
        // i.e. when the updates are needed from Tax1099Box C to B and from B to A,
        // the order of updates should be from B to A first, then C to B.
        // So this method traces back each recod, of which status is 'ready', in an updating chain by recursion.
        // It updates from B to A first, then changes B's status to 'updated.'
        // After that, it updates from C to B, then changes C's status to 'updated.'

        select firstonly tax1099FieldsTmp
            where tax1099FieldsTmp.PreviousBox == _destinationTax1099Box
                && tax1099FieldsTmp.PreviousType == _destinationTax1099Type
                && tax1099FieldsTmp.UpdateStatus == Tax1099FieldUpdateStatus::Ready
                && tax1099FieldsTmp.Status != Tax1099FieldStatus::Removed;

        if (tax1099FieldsTmp)
        {
            tax1099FieldsTmp.setUpdateStatus(Tax1099FieldUpdateStatus::Pending);
            this.updateTax1099FieldsForVendorTransactionsByReverse(
                tax1099FieldsTmp.PreviousBox,
                tax1099FieldsTmp.PreviousType,
                tax1099FieldsTmp.Tax1099Box,
                tax1099FieldsTmp.Tax1099Type);
        }

        this.updateTax1099FieldsForVendorTransactions(_sourceTax1099Box, _sourceTax1099Type, _destinationTax1099Box, _destinationTax1099Type);
        tax1099FieldsTmp = tax1099FieldsTmp.findTax1099FieldsTmp(_destinationTax1099Box, _destinationTax1099Type);
        tax1099FieldsTmp.setUpdateStatus(Tax1099FieldUpdateStatus::Updated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNoUsedTax1099Fields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the no used fields in <c>Tax1099Fields</c> for tax year 2020.
    /// </summary>
    private void removeNoUsedTax1099Fields()
    {
        Tax1099Fields tax1099Fields;
        this.setSkipMethods(tax1099Fields);

        delete_from tax1099Fields
            exists join tax1099FieldsTmp
                where tax1099Fields.Tax1099Box == tax1099FieldsTmp.PreviousBox
                    && tax1099FieldsTmp.Status == Tax1099FieldStatus::Removed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the necessary skip methods on the given buffer.
    /// </summary>
    /// <param name = "_common"> Buffer on which the skip methods should be set.</param>
    private void setSkipMethods(Common _common)
    {
        _common.skipAosValidation(true);
        _common.skipDatabaseLog(true);
        _common.skipDataMethods(true);
        _common.skipEvents(true);
        _common.skipPostLoad(true);
        _common.skipNumberSequenceCheck(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099FieldsForVendorTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>Tax1099Fields</c> for vendor transactions that occurred in 2020.
    /// </summary>
    /// <param name = "sourceTax1099Box">Source <c>Tax1099Box</c>.</param>
    /// <param name = "destinationTax1099Box">Destination <c>Tax1099Box</c>.</param>
    private void updateTax1099FieldsForVendorTransactions(Tax1099Box _sourceTax1099Box,  Tax1099Type _sourceTax1099Type, Tax1099Box _destinationTax1099Box, Tax1099Type _destinationTax1099Type)
    {
        Tax1099FieldsRecId sourceTax1099FieldsRecId = Tax1099Fields::findByTax1099Box(_sourceTax1099Box, _sourceTax1099Type).RecId;
        Tax1099FieldsRecId destinationTax1099FieldsRecId = Tax1099Fields::findByTax1099Box(_destinationTax1099Box, _destinationTax1099Type).RecId;

        if (!sourceTax1099FieldsRecId || !destinationTax1099FieldsRecId)
        {
            return;
        }

        TransDate firstDayOfPeriod = mkDate(1, 1, this.getTax1099TaxYear());
        TransDate lastDayOfPeriod = mkDate(31, 12, this.getTax1099TaxYear());

        if (sourceTax1099FieldsRecId != destinationTax1099FieldsRecId)
        {
            // Update 1099 fields for vendor and vendor transactions.
            VendTable vendTable;
            VendTrans vendTrans;

            // Vendor
            this.setSkipMethods(vendTable);

            update_recordset vendTable
                setting
                    Tax1099Fields = destinationTax1099FieldsRecId
                where vendTable.Tax1099Fields == sourceTax1099FieldsRecId;

            // Transactions
            this.setSkipMethods(vendTrans);

            update_recordset vendTrans
                setting
                    Tax1099Fields = destinationTax1099FieldsRecId
                where vendTrans.Tax1099Fields == sourceTax1099FieldsRecId
                    && vendTrans.TransDate >= firstDayOfPeriod
                    && vendTrans.TransDate <= lastDayOfPeriod;

            // Tax1099Summary
            Tax1099Summary tax1099Summary;
            this.setSkipMethods(tax1099Summary);

            update_recordset tax1099Summary
                setting
                    Tax1099Fields = destinationTax1099FieldsRecId
                where tax1099Summary.Tax1099Fields == sourceTax1099FieldsRecId
                    && tax1099Summary.TransDate >= firstDayOfPeriod
                    && tax1099Summary.TransDate <= lastDayOfPeriod;

            // VendSettlementTax1099
            VendSettlementTax1099 vendSettlementTax1099;
            this.setSkipMethods(vendSettlementTax1099);

            update_recordset vendSettlementTax1099
                setting
                    Tax1099Fields = destinationTax1099FieldsRecId
                where vendSettlementTax1099.Tax1099Fields == sourceTax1099FieldsRecId
                    && vendSettlementTax1099.TransDate >= firstDayOfPeriod
                    && vendSettlementTax1099.TransDate <= lastDayOfPeriod;
        }

        // In this file, as Tax1099Fields updates in set-based, IRSReportable in VendSettlementTax1099 records have not been updated.
        // This handles to update IRSReportable in VendSettlementTax1099 records if necessary.
        this.updateIRSReportableVendSettlementTax1099(destinationTax1099FieldsRecId, firstDayOfPeriod, lastDayOfPeriod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIRSReportableVendSettlementTax1099</Name>
				<Source><![CDATA[
    private void updateIRSReportableVendSettlementTax1099(RecId _tax1099FieldsRecId, TransDate _firstDayOfPeriod, TransDate _lastDayOfPeriod)
    {
        VendSettlementTax1099 vendSettlementTax1099;
        VendSettlementTax1099 localVendSettlementTax1099;
        Tax1099Fields tax1099Fields = Tax1099Fields::find(_tax1099FieldsRecId);

        Tax1099IRSReportable irsReportable = NoYes::No;
        this.setSkipMethods(localVendSettlementTax1099);

        switch (tax1099Fields.Tax1099Type)
        {
            case Tax1099Type::F1099S:
                while select  VendAccount, Tax1099Fields, VendInvoiceId, sum(SettleTax1099Amount) from vendSettlementTax1099
                    group by vendSettlementTax1099.VendAccount, vendSettlementTax1099.Tax1099Fields, vendSettlementTax1099.VendInvoiceId
                    where vendSettlementTax1099.Tax1099Fields == _tax1099FieldsRecId
                        && vendSettlementTax1099.TransDate >= _firstDayOfPeriod
                        && vendSettlementTax1099.TransDate <= _lastDayOfPeriod
                {
                    irsReportable = vendSettlementTax1099.SettleTax1099Amount >= tax1099Fields.Tax1099Amount ? NoYes::Yes : NoYes::No;

                    VendSettlementTax1099 vendSettlementTax1099SetIRSRReportable;

                    select firstOnly RecId from vendSettlementTax1099SetIRSRReportable
                        where vendSettlementTax1099SetIRSRReportable.VendAccount == vendSettlementTax1099.VendAccount
                            && vendSettlementTax1099SetIRSRReportable.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                            && vendSettlementTax1099SetIRSRReportable.TransDate >= _firstDayOfPeriod
                            && vendSettlementTax1099SetIRSRReportable.TransDate <= _lastDayOfPeriod
                            && vendSettlementTax1099SetIRSRReportable.IRSReportable != irsReportable;

                    if (vendSettlementTax1099SetIRSRReportable.RecId != 0)
                    {
                        update_recordset localVendSettlementTax1099
                            setting IRSReportable = irsReportable
                            where localVendSettlementTax1099.VendAccount == vendSettlementTax1099.VendAccount
                                && localVendSettlementTax1099.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                                && localVendSettlementTax1099.VendInvoiceId == vendSettlementTax1099.VendInvoiceId
                                && localVendSettlementTax1099.TransDate >= _firstDayOfPeriod
                                && localVendSettlementTax1099.TransDate <= _lastDayOfPeriod;
                    }

                }
                break;

            case Tax1099Type::F1099G:
                while select VendAccount, Tax1099Fields, Tax1099TaxYear, sum(SettleTax1099Amount) from vendSettlementTax1099
                    group by vendSettlementTax1099.VendAccount, vendSettlementTax1099.Tax1099Fields, vendSettlementTax1099.Tax1099TaxYear
                    where vendSettlementTax1099.Tax1099Fields == _tax1099FieldsRecId
                        && vendSettlementTax1099.TransDate >= _firstDayOfPeriod
                        && vendSettlementTax1099.TransDate <= _lastDayOfPeriod
                {
                    irsReportable = vendSettlementTax1099.SettleTax1099Amount >= tax1099Fields.Tax1099Amount ? NoYes::Yes : NoYes::No;

                    VendSettlementTax1099 vendSettlementTax1099SetIRSRReportable;

                    select firstOnly RecId from vendSettlementTax1099SetIRSRReportable
                        where vendSettlementTax1099SetIRSRReportable.VendAccount == vendSettlementTax1099.VendAccount
                            && vendSettlementTax1099SetIRSRReportable.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                            && vendSettlementTax1099SetIRSRReportable.TransDate >= _firstDayOfPeriod
                            && vendSettlementTax1099SetIRSRReportable.TransDate <= _lastDayOfPeriod
                            && vendSettlementTax1099SetIRSRReportable.IRSReportable != irsReportable;

                    if (vendSettlementTax1099SetIRSRReportable.RecId != 0)
                    {
                        update_recordset localVendSettlementTax1099
                            setting IRSReportable = irsReportable
                            where localVendSettlementTax1099.VendAccount == vendSettlementTax1099.VendAccount
                                && localVendSettlementTax1099.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                                && localVendSettlementTax1099.Tax1099TaxYear == vendSettlementTax1099.Tax1099TaxYear
                                && localVendSettlementTax1099.TransDate >= _firstDayOfPeriod
                                && localVendSettlementTax1099.TransDate <= _lastDayOfPeriod;
                    }
                }
                break;

            default:
                while select VendAccount, Tax1099Fields, sum(SettleTax1099Amount) from vendSettlementTax1099
                    group by vendSettlementTax1099.VendAccount, vendSettlementTax1099.Tax1099Fields
                    where vendSettlementTax1099.Tax1099Fields == _tax1099FieldsRecId
                        && vendSettlementTax1099.TransDate >= _firstDayOfPeriod
                        && vendSettlementTax1099.TransDate <= _lastDayOfPeriod
                {
                    irsReportable = vendSettlementTax1099.SettleTax1099Amount >= tax1099Fields.Tax1099Amount ? NoYes::Yes : NoYes::No;

                    VendSettlementTax1099 vendSettlementTax1099SetIRSRReportable;

                    select firstOnly RecId from vendSettlementTax1099SetIRSRReportable
                        where vendSettlementTax1099SetIRSRReportable.VendAccount == vendSettlementTax1099.VendAccount
                            && vendSettlementTax1099SetIRSRReportable.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                            && vendSettlementTax1099SetIRSRReportable.TransDate >= _firstDayOfPeriod
                            && vendSettlementTax1099SetIRSRReportable.TransDate <= _lastDayOfPeriod
                            && vendSettlementTax1099SetIRSRReportable.IRSReportable != irsReportable;

                    if (vendSettlementTax1099SetIRSRReportable.RecId != 0)
                    {
                        update_recordset localVendSettlementTax1099
                            setting IRSReportable = irsReportable
                            where localVendSettlementTax1099.VendAccount == vendSettlementTax1099.VendAccount
                                && localVendSettlementTax1099.Tax1099Fields == vendSettlementTax1099.Tax1099Fields
                                && localVendSettlementTax1099.TransDate >= _firstDayOfPeriod
                                && localVendSettlementTax1099.TransDate <= _lastDayOfPeriod;
                    }
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTax1099TmpTable</Name>
				<Source><![CDATA[
    private void initTax1099TmpTable()
    {
        tax1099FieldsTmp =  Tax1099FieldsUpdate2020::construct().createUpdatedTax1099FieldsTmp();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>