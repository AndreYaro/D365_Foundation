<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBalancesPeriodDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetBalancePeriodDP</c> class declares the global variables and tables.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetBalancesPeriod)),
    SRSReportParameterAttribute(classstr(AssetBalancesPeriodContract))
]
public class AssetBalancesPeriodDP extends SRSReportDataProviderPreProcessTempDb
{
    AssetSumCalc assetSumCalc;
    FromDate fromDate;
    ToDate toDate;
    // <GIN>
    boolean incomeTaxActDepEnabled;
    AssetSumCalc_Trans_IN        assetSumCalc_Trans_IN;
    // </GIN>

    // French derogatory information.
    PrintFASetupInfo_FR printFAInfo_FR;
    AssetBookTable assetBookTable;
    AssetBook assetBook;
    AssetTable assetTable;
    AssetBalancesPeriodTmp assetBalancesPeriodTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetSetupValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the value for the <c>assetsetupvalue</c> field.
    /// </summary>
    /// <returns>
    ///    A string that gives the display format.
    /// </returns>
    private AssetDerogatorySetupInfo_FR assetSetupValue()
    {
        str displayAssetSetupFormat;

        AssetDepreciationProfile depreciationProfile;
        AssetDepreciationMethod profileMethod;

        // Print FA information if the user chooses to do so.
        if (printFAInfo_FR)
        {
            // The setup infor will have the following values:
            // Value model code;Depreciation method;Start Date;Service Life;RBSL %.

     		depreciationProfile = assetBook.depreciationProfile();

            if (depreciationProfile)
            {
                profileMethod = depreciationProfile.Method;
            }

            displayAssetSetupFormat = '%1;%2;%3;%4;%5';
            displayAssetSetupFormat =  strfmt(displayAssetSetupFormat, assetBook.BookId, profileMethod,
                assetBook.DepreciationStartDate, assetBook.LifeTime, assetBook.rbslFactor );
        }

        return displayAssetSetupFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetBalancesPeriodTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the <c>AssetBalancesPeriodTmp</c> table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>AssetBalancesPeriodTmp</c> table for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetBalancesPeriodTmp))
    ]
    public AssetBalancesPeriodTmp getAssetBalancesPeriodTmp()
    {
        select assetBalancesPeriodTmp;
        return assetBalancesPeriodTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBalancesPeriodTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts all the values into the <c>AssetBalancesPeriodTmp</c> temporary table.
    /// </summary>
    /// <param name="isLatvia">
    ///     Indicates whether the current country context is Latvia or not.
    /// </param>
    private void insertAssetBalancesPeriodTmp(
    boolean isLatvia = false
    )
    {
        assetBalancesPeriodTmp.AssetSetup = this.assetSetupValue();
        assetBalancesPeriodTmp.FromDate = fromDate;
        assetBalancesPeriodTmp.ToDate = toDate;
        assetBalancesPeriodTmp.AssetName = assetTable.Name;

        if (isLatvia)
        {
            assetBalancesPeriodTmp.AcquisitionValue = assetSumCalc.acquisitionValue();
            assetBalancesPeriodTmp.WriteUpAdjValue = assetSumCalc.writeUpAdjValue() +
                                                        assetSumCalc.writeDownAdjValue() +
                                                        assetSumCalc.acquisitionAdjValue() +
                                                        assetSumCalc.capitalReserveTransferValue();
        }
        else
        {
            assetBalancesPeriodTmp.AcquisitionValue = assetSumCalc.acquisitionValueAll();
            assetBalancesPeriodTmp.WriteUpAdjValue = assetSumCalc.writeUpDownAdjValue();
        }

        assetBalancesPeriodTmp.Bonus = assetSumCalc.bonusDepreciationValue();
        assetBalancesPeriodTmp.DepreciationValue = assetSumCalc.depreciationValueAll() + assetSumCalc.extraDepreciationValue();
        assetBalancesPeriodTmp.DerogatoryValue = assetSumCalc.derogatoryValue();
        assetBalancesPeriodTmp.DisposalSaleValue = assetSumCalc.disposalValue();
        assetBalancesPeriodTmp.RevaluationValue = assetSumCalc.revaluationValue();
        assetBalancesPeriodTmp.ProfitLossValue = assetSumCalc.profitLossValue() + assetSumCalc.capitalReserveValue();
        assetBalancesPeriodTmp.NetBookValue = assetSumCalc.netBookValue();
        assetBalancesPeriodTmp.AssetGroup = assetBook.AssetGroup;
        assetBalancesPeriodTmp.AssetId = assetBook.AssetId;
        assetBalancesPeriodTmp.Status = assetBook.Status;
        assetBalancesPeriodTmp.CurrentOperationsTax = assetBookTable.CurrentOperationsTax;
        assetBalancesPeriodTmp.BookId = assetBook.BookId;
        // <GIN>
        if (incomeTaxActDepEnabled)
        {
            assetSumCalc_Trans_IN.parmGroup_IN(NoYes::Yes);
            assetBalancesPeriodTmp.ShowGroupNetBookValue_IN     = NoYes::Yes;
            // Calculates the profit loss value first, because it affects the amount of group net book value.
            assetSumCalc_Trans_IN.profitLossValue();
            // Returns the group net book value to tmp table.
            assetBalancesPeriodTmp.AssetGroupNetBookValue_IN    = assetSumCalc_Trans_IN.netBookValue();
        }
        // </GIN>

        assetBalancesPeriodTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        // <GEELV>
        #ISOCountryRegionCodes
        boolean isLatvia;
        // </GEELV>

        Query    q = new Query(this.parmQuery());
        QueryRun qr = new QueryRun(q);

        AssetBalancesPeriodContract contract = this.parmDataContract() as AssetBalancesPeriodContract;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();
        LedgerCurrencySelection currencySelected = contract.parmCurrencySelection();

        if (contract.parmPrint() == true)
        {
            printFAInfo_FR = NoYes::Yes;
        }
        else
        {
            printFAInfo_FR = NoYes::No;
        }

        // <GEELV>
        isLatvia = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]);
        // </GEELV>

        // <GIN>
        incomeTaxActDepEnabled = AssetParameters::isDepreciationIncomeTaxActEnable_IN();
        // </GIN>

        while (qr.next())
        {
            assetBookTable = qr.get(tableNum(AssetBookTable)) as AssetBookTable;
            assetBook = qr.get(tablenum(AssetBook)) as AssetBook;
            assetTable = qr.get(tablenum(AssetTable)) as AssetTable;

            if (currencySelected == LedgerCurrencySelection::Accounting)
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetPeriod(assetBook.AssetId, assetBook.BookId, fromDate, toDate);
            }
            else
            {
                assetSumCalc = AssetSumCalc_Trans::newAssetPeriodByCurrency(assetBook.AssetId, assetBook.BookId, fromDate, toDate, AssetSumCalcType::Reporting);
            }

            // <GIN>
            if (incomeTaxActDepEnabled)
            {
                // Used to get group net book value.
                assetSumCalc_Trans_IN = AssetSumCalc_Trans_IN::newAssetPeriod(
                    assetBook.AssetGroup,
                    assetBook.bookId,
                    fromDate,
                    toDate);
            }
            // </GIN>

            this.insertAssetBalancesPeriodTmp(
            // <GEEU>
            isLatvia
            // </GEEU>
            );
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>