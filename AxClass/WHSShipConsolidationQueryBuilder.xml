<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSShipConsolidationQueryBuilder</c> class is used as a base class for classes creating shipment consolidation queries.
/// </summary>
public abstract class WHSShipConsolidationQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQueryChildDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource findQueryChildDataSource(QueryBuildDataSource _parentDataSource, TableId _childTableId)
    {
        for (int dsIdx = _parentDataSource.childDataSourceCount(); dsIdx > 0; dsIdx--)
        {
            QueryBuildDataSource qbDS = _parentDataSource.childDataSourceNo(dsIdx);

            if (qbDS.table() == _childTableId)
            {
                return qbDS;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateQueryChildDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates data source.
    /// </summary>
    /// <param name = "_parentDataSource">Parent data source.</param>
    /// <param name = "_childTableId">Child table id.</param>
    /// <param name = "_joinMode">Join mode.</param>
    /// <returns>Found or created data source.</returns>
    protected QueryBuildDataSource findOrCreateQueryChildDataSource(QueryBuildDataSource _parentDataSource, TableId _childTableId, JoinMode _joinMode)
    {
        QueryBuildDataSource qbDS = this.findQueryChildDataSource(_parentDataSource, _childTableId);

        if (!qbDS)
        {
            qbDS = _parentDataSource.addDataSource(_childTableId);
            qbDS.joinMode(_joinMode);
            qbDS.fetchMode(QueryFetchMode::One2One);
            qbDS.relations(true);
        }

        return qbDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocationData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the ranges for an address to query on.
    /// </summary>
    /// <param name="_logisticsPostalAddressDS">
    /// The datasource to populate.
    /// </param>
    /// <param name="_country">
    /// The country region to query on.
    /// </param>
    /// <param name="_postalCodeFrom">
    /// The starting postal code to query on.
    /// </param>
    /// <param name="_postalCodeTo">
    /// The end postal code to query on.
    /// </param>
    protected void addLocationData(
        QueryBuildDataSource            _logisticsPostalAddressDS,
        TMSCountryRegion                _country,
        TMSPostalCodeFromRegExpression  _postalCodeFrom,
        TMSPostalCodeToRegExpression    _postalCodeTo)
    {
        QueryBuildRange qr;

        if (_country)
        {
            qr = SysQuery::findOrCreateRange(_logisticsPostalAddressDS, fieldNum(logisticsPostalAddress, CountryRegionId));

            if (!qr.value())
            {
                qr.value(_country);
            }
        }

        if (_postalCodeFrom && _postalCodeTo)
        {
            qr = SysQuery::findOrCreateRange(_logisticsPostalAddressDS, fieldNum(logisticsPostalAddress, ZipCode));

            if (!qr.value())
            {
                qr.value(queryRange(_postalCodeFrom, _postalCodeTo));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLocationDataFromWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the ranges for a warehouse address to query on.
    /// </summary>
    /// <param name="_inventLocationDS">
    /// The datasource to populate.
    /// </param>
    /// <param name="_country">
    /// The country region to query on.
    /// </param>
    /// <param name="_postalCodeFrom">
    /// The starting postal code to query from.
    /// </param>
    /// <param name="_postalCodeTo">
    /// The end postal code to query to.
    /// </param>
    protected void addLocationDataFromWarehouse(
        QueryBuildDataSource            _inventLocationDS,
        TMSCountryRegion                _country,
        TMSPostalCodeFromRegExpression  _postalCodeFrom,
        TMSPostalCodeToRegExpression    _postalCodeTo)
    {
        QueryBuildDataSource inventLocationLogisticsLocationDS;
        QueryBuildDataSource logisticLocationDS;
        QueryBuildDataSource logisticsPostalAddressDS;

        if (_country || (_postalCodeFrom && _postalCodeTo))
        {
            inventLocationLogisticsLocationDS = _inventLocationDS.addDataSource(tableNum(InventLocationLogisticsLocation));
            logisticLocationDS                = inventLocationLogisticsLocationDS.addDataSource(tableNum(LogisticsLocation));
            logisticsPostalAddressDS          = logisticLocationDS.addDataSource(tableNum(LogisticsPostalAddress));

            inventLocationLogisticsLocationDS.joinMode(JoinMode::ExistsJoin);
            inventLocationLogisticsLocationDS.relations(true);

            logisticLocationDS.joinMode(JoinMode::ExistsJoin);
            logisticLocationDS.relations(true);

            logisticsPostalAddressDS.joinMode(JoinMode::ExistsJoin);
            logisticsPostalAddressDS.relations(true);

            this.addLocationData(logisticsPostalAddressDS, _country, _postalCodeFrom, _postalCodeTo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterCodeRange</Name>
				<Source><![CDATA[
    private void addFilterCodeRange(
        QueryBuildDataSource                _dsWHSInventTable,
        WHSFilterNum                        _filterCode,
        int                                 _filterCodeArrayIndex)
    {
        QueryBuildRange qr;

        if (_filterCode)
        {
            qr = SysQuery::findOrCreateRange(_dsWHSInventTable, fieldNum(WHSInventTable, FilterCode), 1, _filterCodeArrayIndex);

            if (!qr.value())
            {
                qr.value(queryValue(_filterCode));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilterCodeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a query on the filter codes to the datasource.
    /// </summary>
    /// <param name="_dsWHSInventTable">
    /// A reference to the table to query on.
    /// </param>
    /// <param name="_loadBuildSrcLineQueryCriteria">
    /// The criteria object containing the filter code information.
    /// </param>
    /// <returns>
    /// A <c>QueryBuildDataSource</c> withe the relevant queries populated.
    /// </returns>
    protected QueryBuildDataSource addFilterCodeRanges(
        QueryBuildDataSource              _dsWHSInventTable,
        WHSShipConsolidationQueryCriteria _loadBuildSrcLineQueryCriteria)
    {
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode1(), 1);
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode2(), 2);
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode3(), 3);
        this.addFilterCodeRange(_dsWHSInventTable, _loadBuildSrcLineQueryCriteria.parmFilterCode4(), 4);

        return _dsWHSInventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query using the supplied data.
    /// </summary>
    /// <param name="_queryCriteria">
    /// Data to generate the query from.
    /// </param>
    /// <returns>
    /// Generated Query.
    /// </returns>
    internal Query buildQuery(WHSShipConsolidationQueryCriteria _queryCriteria)
    {
        if (!_queryCriteria)
        {
            throw error (Error::wrongUseOfFunction(funcName()));
        }

        Query                queryBaseQueryCopy = new Query(_queryCriteria.parmBaseQuery().pack()); //take a copy of the query since we don't want the changes we apply here to surface back to the query the user can manipulate
        QueryBuildDataSource shipmentDS  = queryBaseQueryCopy.dataSourceTable(tableNum(WHSShipmentTable));
        QueryBuildDataSource loadLineDS  = queryBaseQueryCopy.dataSourceTable(tableNum(WHSLoadLine));
        QueryBuildRange      qr;

        //we need to use findOrCreate in the below code since we follow a pattern where we don't override values that the user have specified on the query
        if (_queryCriteria.parmCustomerAccount())
        {
            qr = SysQuery::findOrCreateRange(shipmentDS, fieldNum(WHSShipmentTable, AccountNum));

            if (!qr.value())
            {
                qr.value(_queryCriteria.parmCustomerAccount());
            }
        }

        if (_queryCriteria.parmOriginLocationId()
            || _queryCriteria.parmOriginSiteId()
            || _queryCriteria.parmOriginCountry()
            || _queryCriteria.parmOriginPostalCodeFrom()
            || _queryCriteria.parmOriginPostalCodeTo())
        {
            QueryBuildDataSource inventDimDS = this.findOrCreateQueryChildDataSource(loadLineDS, tableNum(InventDim), JoinMode::ExistsJoin);

            if (_queryCriteria.parmOriginLocationId())
            {
                qr = SysQuery::findOrCreateRange(inventDimDS, fieldNum(InventDim, InventLocationId));

                if (!qr.value())
                {
                    qr.value(_queryCriteria.parmOriginLocationId());
                }
            }

            if (_queryCriteria.parmOriginSiteId())
            {
                qr = SysQuery::findOrCreateRange(inventDimDS, fieldNum(InventDim, InventSiteId));

                if (!qr.value())
                {
                    qr.value(_queryCriteria.parmOriginSiteId());
                }
            }

            // Query should not include from warehouse location data if a scheduled route has been selected since this should reflect all scheduled route segments.
            if (!_queryCriteria.parmOriginLocationId()
                && (   _queryCriteria.parmOriginCountry()
                    || _queryCriteria.parmOriginPostalCodeFrom()
                    || _queryCriteria.parmOriginPostalCodeTo()))
            {
                QueryBuildDataSource inventLocationDS = this.findOrCreateQueryChildDataSource(inventDimDS, tableNum(InventLocation), JoinMode::InnerJoin);

                this.addLocationDataFromWarehouse(inventLocationDS, _queryCriteria.parmOriginCountry(), _queryCriteria.parmOriginPostalCodeFrom(), _queryCriteria.parmOriginPostalCodeTo());
            }
        }

        if (_queryCriteria.parmDestinationPostalCodeFrom()
            || _queryCriteria.parmDestinationPostalCodeTo()
            || _queryCriteria.parmDestinationCountry())
        {
            QueryBuildDataSource destLogisticsPostalAddressDS = this.findOrCreateQueryChildDataSource(shipmentDS, tableNum(LogisticsPostalAddress), JoinMode::ExistsJoin);

            this.addLocationData(destLogisticsPostalAddressDS, _queryCriteria.parmDestinationCountry(), _queryCriteria.parmDestinationPostalCodeFrom(), _queryCriteria.parmDestinationPostalCodeTo());
        }

        if (_queryCriteria.parmFilterCode1()
            || _queryCriteria.parmFilterCode2()
            || _queryCriteria.parmFilterCode3()
            || _queryCriteria.parmFilterCode4())
        {
            QueryBuildDataSource whsInventTableDS = this.findOrCreateQueryChildDataSource(loadLineDS, tableNum(WHSInventTable), JoinMode::ExistsJoin);

            this.addFilterCodeRanges(whsInventTableDS, _queryCriteria);
        }

        QueryBuildDataSource qbDS = shipmentDS.addDataSource(tableNum(WHSLoadTable));

        qbDS.joinMode(JoinMode::NoExistsJoin);
        qbDS.fetchMode(QueryFetchMode::One2One);
        qbDS.relations(true);

        qbDS.addRange(fieldNum(WHSLoadTable, LoadingStrategy)).value(SysQuery::value(WHSLoadingStrategy::PartialLoadShippingAllowed));

        return queryBaseQueryCopy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>