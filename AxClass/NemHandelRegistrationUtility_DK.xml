<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NemHandelRegistrationUtility_DK</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class NemHandelRegistrationUtility_DK
{

    private static SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(NemHandelRegistrationUtility_DK));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCvrRegistered</Name>
				<Source><![CDATA[
    public static boolean isCvrRegistered(TaxRegistrationNumber _cvr)
    {
        using (SysInstrumentationActivityContext context = logger.activityContext('CVRRegistration', 'CVRRegistrationInsights'))
        {
            boolean isCvrRegistered;

            if (NemHandelRegistrationUtility_DK::getPrivacyConsentForExistingLegalEntities())
            {
                System.Exception exception;

                try
                {
                    System.Net.HttpWebRequest cvrLookupRequest = System.Net.WebRequest::Create(NemHandelConstants_DK::CvrLookupLink + _cvr) as System.Net.HttpWebRequest;
                    cvrLookupRequest.set_Method(NemHandelConstants_DK::CvrLookupRequestMethod);
                    cvrLookupRequest.set_ContentType(NemHandelConstants_DK::CvrLookupRequestContentType);

                    System.Net.HttpWebResponse cvrLookupResponse = cvrLookupRequest.GetResponse();

                    if (cvrLookupResponse)
                    {
                        logger.logInformation(strFmt('Verified CVR registration in NemHandel for registration number %1 with response code %2 and description %3.', _cvr, cvrLookupResponse.StatusCode, cvrLookupResponse.StatusDescription));

                        if (cvrLookupResponse.StatusCode == System.Net.HttpStatusCode::OK)
                        {
                            isCvrRegistered = true;
                        }
                    }
                }
                catch(exception)
                {
                    logger.logException(Exception, strFmt('Could not verify CVR registration in NemHandel for registration number %1.', _cvr));
                    warning(strFmt("@RegistrationNumbers:CVRLookupError", _cvr));
                }
            }

            return isCvrRegistered;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEanPresent</Name>
				<Source><![CDATA[
    public static boolean isEanPresent()
    {
        TaxRegistrationNumber ean = NemHandelRegistrationUtility_DK::getTaxRegistrationNumber(TaxRegistrationTypesList::EAN);
        return ean != null || ean != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCvr</Name>
				<Source><![CDATA[
    public static TaxRegistrationNumber getCvr()
    {
        TaxRegistrationNumber cvr = NemHandelRegistrationUtility_DK::getTaxRegistrationNumber(TaxRegistrationTypesList::TAXID);
        return cvr != null || cvr != '' ? cvr : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrivacyConsent</Name>
				<Source><![CDATA[
    public static boolean getPrivacyConsent(Args _args)
    {
        if (_args.caller() && _args.caller().name() == formStr(OMNewLegalEntity))
        {
            return NemHandelRegistrationUtility_DK::getPrivacyConsentForNewLegalEntities(_args.caller());
        }
        return NemHandelRegistrationUtility_DK::getPrivacyConsentForExistingLegalEntities();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrivacyConsentForNewLegalEntities</Name>
				<Source><![CDATA[
    private static boolean getPrivacyConsentForNewLegalEntities(FormRun _omNewLegalEntity)
    {
        TaxRegistrationNumber company = _omNewLegalEntity.parmNewLegalEntityFormView().parmCompanyStringControl().text();

        if (_omNewLegalEntity.parmCompany() != company && _omNewLegalEntity.parmPrivacyConsent())
        {
            _omNewLegalEntity.parmPrivacyConsent(NoYes::No);
        }

        if (!_omNewLegalEntity.parmPrivacyConsent() && NemHandelRegistrationUtility_DK::isPrivacyConsentYes())
        {
            _omNewLegalEntity.parmPrivacyConsent(NoYes::Yes);
        }

        _omNewLegalEntity.parmCompany(company);

        return _omNewLegalEntity.parmPrivacyConsent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrivacyConsentForExistingLegalEntities</Name>
				<Source><![CDATA[
    public static boolean getPrivacyConsentForExistingLegalEntities()
    {
        ttsbegin;

        CompanyInfo companyInfo = CompanyInfo::findDataArea(curExt());
        companyInfo.selectForUpdate(true);

        if (!companyInfo.PrivacyConsent_DK && NemHandelRegistrationUtility_DK::isPrivacyConsentYes())
        {
            companyInfo.PrivacyConsent_DK = NoYes::Yes;
            companyInfo.update();
        }

        ttscommit;

        return companyInfo.PrivacyConsent_DK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrivacyConsentYes</Name>
				<Source><![CDATA[
    private static boolean isPrivacyConsentYes()
    {
        Args args = new Args();
        args.name(formstr(SysBoxForm));

        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();

        Object formRunObject = formRun;
        formRunObject.setText("@RegistrationNumbers:DenmarkPrivacyConsentTitle");
        formRunObject.setSecondTextVisible(true);
        formRunObject.setSecondText("@RegistrationNumbers:DenmarkPrivacyConsentBody");
        formRunObject.setType(DialogBoxType::YesNoBox);

        HyperLinkControl hyperLinkControl = formRunObject.getGroupControl().addControlEx(classStr(HyperLinkControl), '');

        BuildHyperLinkControl buildHyperLinkControl = hyperLinkControl.build();
        buildHyperLinkControl.baseUrl(NemHandelConstants_DK::MicrosoftPrivacyLink);
        buildHyperLinkControl.text("@RegistrationNumbers:MicrosoftPrivacyStatement");

        hyperLinkControl.applyBuild();

        formRunObject.run();
        formRunObject.wait();

        return formRun.dialogButton() == DialogButton::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRegistrationNumber</Name>
				<Source><![CDATA[
    private static TaxRegistrationNumber getTaxRegistrationNumber(TaxRegistrationTypesList _taxRegistrationTypesList)
    {
        TaxRegistrationNumber taxRegistrationNumber;

        CompanyInfo companyInfo = CompanyInfo::findDataArea(curExt());
        DirPartyLocation dirPartyLocation = DirPartyLocation::findByPartyLocation(companyInfo.RecId, companyInfo.PrimaryAddressLocation);

        if (dirPartyLocation)
        {
            TaxRegistrationLegislationTypes taxRegistrationLegislationTypes;
            TaxRegistrationTypeApplicabilityRule taxRegistrationTypeApplicabilityRule;
            TaxRegistration taxRegistration;

            date currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

            select firstonly TaxRegistrationTypesList from taxRegistrationLegislationTypes
                where taxRegistrationLegislationTypes.TaxRegistrationTypesList == _taxRegistrationTypesList
                join taxRegistrationTypeApplicabilityRule
                    where taxRegistrationTypeApplicabilityRule.RecId == taxRegistrationLegislationTypes.TaxRegistrationTypeApplicabilityRule
                    join taxRegistration
                        where taxRegistration.TaxRegistrationTypeApplicabilityRule == taxRegistrationTypeApplicabilityRule.RecId
                            && taxRegistration.DirPartyLocation == dirPartyLocation.RecId
                            && taxRegistration.ValidFrom <= currentDate
                            && taxRegistration.ValidTo >= currentDate;

            if (taxRegistrationLegislationTypes)
            {
                taxRegistrationNumber = taxRegistration.RegistrationNumber;
            }
        }

        return taxRegistrationNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>