<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEditArrangeMultipleDoc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchEditArrangeMultipleDoc</c> class lets the user set document arranging options for
///    posting document.
/// </summary>

public class PurchEditArrangeMultipleDoc extends PurchEditSetup
{
    // <GIN>
    #DEFINE.CurrentVersion(2)
    // </GIN>
    #LOCALMACRO.CurrentList
        sumBy,
        sumPurchId,
        sumNum,
        sumIncludePending

        // <GIN>
        ,customsImportOrderType
        // </GIN>
    #ENDMACRO

    Object          callerForm;

    DialogField     dialogSumBy;
    DialogField     dialogSumPurchId;
    DialogField     dialogSumNum;
    DialogField     dialogSumIncludePending;

    AccountOrder       sumBy;
    PurchId            sumPurchId;
    Num                sumNum;
    NoYesId            sumIncludePending;

    DialogEnumComboBox  dialogEnumComboBox;

    // <GIN>
    DialogField                 dialogCustomsImportOrderType;
    CustomsImportOrderType_IN   customsImportOrderType;
    boolean                     indiaTaxParameterMarked;
    #ISOCountryRegionCodes
    // </GIN>
    PurchParmUpdate purchParmUpdate;

    boolean visible;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds fields to the dialog box.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>DialogRunBase</c> class.
    /// </returns>
    Object dialog()
    {
        Set enumSet = new Set(Types::Enum);
        menuItemNameAction callerMenuItem;
        boolean allowEdit = true;

        dialog = super();

        dialog.caption(PurchEditArrangeMultipleDoc::description());
        dialog.addGroup("@SYS24162");

        sumBy = purchParmUpdate.SumBy;
        sumIncludePending = purchParmUpdate.SumIncludePending;

        // <GIN>
        if (indiaTaxParameterMarked)
        {
            customsImportOrderType = purchParmUpdate.CustomsImportOrderType_IN;
        }
        // </GIN>

        if (sumBy == AccountOrder::Order)
            visible = true;

        callerMenuItem = purchFormLetter.parmCallerMenuItem();

        if (callerMenuItem == menuitemdisplaystr(PurchFormLetter_ApproveJournal))
        {
            sumBy = AccountOrder::Account;
            allowEdit = false;
        }

        dialogSumBy = dialog.addFieldValue(enumstr(AccountOrder), sumBy ,"@SYS128944", "@SYS128948");
        dialogSumBy.allowEdit(allowEdit);

        dialogSumPurchId = dialog.addFieldValue(extendedtypestr(PurchId), purchFormLetter.sumPurchId(sumPurchId), "", "@SYS25650");
        dialogSumPurchId.visible(visible);

        // <GIN>
        if (indiaTaxParameterMarked)
        {
            dialogCustomsImportOrderType = dialog.addFieldValue(enumstr(CustomsImportOrderType_IN), customsImportOrderType);
        }
        // </GIN>

        if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
        {
            dialogSumNum = dialog.addFieldValue(extendedtypestr(Num), purchFormLetter.sumNum(sumNum), "", "@SYS25651");
            dialogSumNum.label(purchEditLinesForm.sumNumCaption());
            dialogSumNum.visible(visible);
        }

        if (this.isDocumentInvoice(documentStatus))
        {
            dialogSumIncludePending = dialog.addFieldValue(extendedtypestr(NoYesId), sumIncludePending, "@SYS128949", "@SYS122796");
        }

        enumSet.add(AccountOrder::None);
        enumSet.add(AccountOrder::Account);
        enumSet.add(AccountOrder::Order);
        enumSet.add(AccountOrder::Auto);

        dialogEnumComboBox = DialogEnumComboBox::newParameters(null, dialogSumBy.control().id(), enumnum(AccountOrder), enumSet, dialog.form());
        dialogSumBy.label("@SYS128944");
        dialogSumBy.helpText("@SYS128948");

        this.modifyButtonHelpTexts();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        if (dialogEnumComboBox)
        {
            // allow the dialog infrastructure to raise dialog field events
            dialogEnumComboBox.parmFormRun(dialog.dialogForm().formRun());
            dialogEnumComboBox.select(sumBy);
        }

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld1_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the visible status of the <c>SumPurchId</c> field and the <c>SumNum</c> field based on the
    ///    value of the <c>SumBy</c> field.
    /// </summary>
    /// <returns>
    ///    true if value was modified; otherwise, false.
    /// </returns>
    private boolean fld1_1_modified()
    {
        Object control;
        boolean valueWasModified;
        PurchParmUpdate purchParmUpdateLocal;

        control = dialog.formRun().controlCallingMethod();
        valueWasModified = control.modified();

        if (valueWasModified)
        {
            this.updatePurchParmUpdateSumBy(purchParmUpdateLocal);

            if (dialogEnumComboBox.selection() == AccountOrder::Order)
            {
                visible = true;
                dialogSumPurchId.visible(visible);

                if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
                    dialogSumNum.visible(visible);
            }
            else
            {
                visible = false;
                dialogSumPurchId.visible(visible);

                if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
                    dialogSumNum.visible(visible);
            }
        }

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld3_1_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the choose lines query of a <c>purchFormLetter</c> record that is based on a
    /// <c>CustomsImportOrderType_IN</c> value.
    /// </summary>
    /// <returns>
    /// true if value was modified; otherwise, false.
    /// </returns>
    private boolean fld3_1_modified()
    {
        Object control;
        boolean valueWasModified;

        control = dialog.formRun().controlCallingMethod();
        if (control)
        {
            valueWasModified = control.modified();
        }

        if (valueWasModified)
        {
            purchFormLetter.initLinesQuery_IN(dialogCustomsImportOrderType.value());
        }

        return valueWasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the fields from the dialog box.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (dialogEnumComboBox)
        {
            sumBy = dialogEnumComboBox.selection();
            sumPurchId = dialogSumPurchId.value();

            if (this.isDocumentInvoice(documentStatus) || this.isDocumentPackingSlip(documentStatus))
                sumNum = dialogSumNum.value();
        }

        if (this.isDocumentInvoice(documentStatus))
            sumIncludePending = dialogSumIncludePending.value();

        // <GIN>
        if (indiaTaxParameterMarked)
        {
            customsImportOrderType = dialogCustomsImportOrderType.value();
        }
        // </GIN>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(PurchParmUpdate _purchParmUpdate)
    {
        super();

        purchParmUpdate = _purchParmUpdate;

        // <GIN>
        indiaTaxParameterMarked = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxParameters::find().Customs_IN;
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>callerForm</c> object.
    /// </summary>
    /// <param name="_callerForm">
    ///    The value to set.
    /// </param>
    protected void parmCallerForm(Object _callerForm = callerForm)
    {
        callerForm = _callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets various member variables of the  <c>PurchFormLetter</c> class and updates the
    ///    <c>PurchParmUpdate</c> table.
    /// </summary>
    public void run()
    {
        PurchParmUpdate purchParmUpdateLocal;

        //calling form method to depict the method calling from control prev
        if (callerForm && formHasMethod(callerForm, identifierstr(sumByChanged)))
            callerForm.sumByChanged(false);

        ttsbegin;

        if (purchParmUpdate.RecId)
        {
            select forupdate firstonly purchParmUpdateLocal
                where purchParmUpdateLocal.ParmId == purchParmUpdate.ParmId;

                purchParmUpdateLocal.SumBy = sumBy;
                purchParmUpdateLocal.SumIncludePending = sumIncludePending;

                // <GIN>
                if (indiaTaxParameterMarked)
                {
                    purchParmUpdateLocal.CustomsImportOrderType_IN = customsImportOrderType;
                }
                // </GIN>

                if (sumBy != AccountOrder::None)
                {
                    purchParmUpdateLocal.SumPurchId = sumPurchId;
                    purchParmUpdateLocal.SumNum = sumNum;
                }
                else
                {
                    purchParmUpdateLocal.SumPurchId = '';
                    purchParmUpdateLocal.SumNum = '';
                }

            purchParmUpdateLocal.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :

                [version, #CurrentList] = _packedClass;
                break;

            default :

                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePurchParmUpdateSumBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>PurchParmUpdate</c> table with the dialog field value.
    /// </summary>
    /// <param name="_purchParmUpdate">
    /// A <c>PurchParmUpdate</c> table buffer.
    /// </param>
    /// <remarks>
    /// This method is called when the user modifies the <c>SumBy</c> field in the dialog box.
    /// </remarks>
    protected void updatePurchParmUpdateSumBy(PurchParmUpdate _purchParmUpdate)
    {
        if (purchParmUpdate.RecId)
        {
            ttsbegin;

            select forupdate firstonly _purchParmUpdate
                where _purchParmUpdate.ParmId == purchParmUpdate.ParmId;

            _purchParmUpdate.SumBy = dialogSumBy.value();

            _purchParmUpdate.update();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS128943";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        PurchEditArrangeMultipleDoc arrangeMultiDoc;
        PurchFormLetter    purchFormLetterLocal;
        DocumentStatus     documentStatusLocal;
        Common             record;
        Object             callerForm;
        str                callerFormName;

        if (!args)
        {
            throw error("@SYS25407");
        }

        callerForm = args.caller();

        if (callerForm)
        {
            callerFormName    = args.caller().name();
        }

        if (callerFormName == formstr(PurchEditLines) || callerFormName == formstr(VendEditInvoice))
        {
            record = args.record();

            if (record && args.dataset() == tablenum(PurchParmUpdate))
            {
                arrangeMultiDoc = new PurchEditArrangeMultipleDoc(record);

                if (args.parmObject() && args.caller())
                {
                    arrangeMultiDoc.parmCallerForm(args.caller());
                    purchFormLetterLocal = args.parmObject();
                    arrangeMultiDoc.parmPurchFormLetter(purchFormLetterLocal);
                    documentStatusLocal = purchFormLetterLocal.documentStatus();
                    arrangeMultiDoc.parmDocumentStatus(documentStatusLocal);
                    arrangeMultiDoc.parmPurchEditLinesForm(PurchEditLinesForm::construct(documentStatusLocal));
                }
            }
        }

        if (arrangeMultiDoc)
        {
            if (arrangeMultiDoc.prompt())
            {
                arrangeMultiDoc.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>