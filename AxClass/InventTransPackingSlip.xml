<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransPackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventTransPackingSlip
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cost price for a packing slip from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_packingSlipId">
    ///    The packing slip ID.
    /// </param>
    /// <param name="_packingSlipDate">
    ///    The date of issue for the packing slip.
    /// </param>
    /// <returns>
    ///    The cost price for a packing slip.
    /// </returns>
    public static CostAmount costAmount(
        InventTransOriginId     _transOriginId,
        PackingSlipId           _packingSlipId,
        TransDate               _packingSlipDate)
    {
        InventTrans         inventTrans;
        CostAmount          costAmount;

        while select CostAmountPosted, CostAmountAdjustment from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId
               && inventTrans.DatePhysical          == _packingSlipDate
               && inventTrans.Qty                   != 0
               && inventTrans.PackingSlipReturned   == 0
               &&(inventTrans.StatusReceipt        == StatusReceipt::None
               || inventTrans.StatusReceipt        == StatusReceipt::Received
               || inventTrans.StatusReceipt        == StatusReceipt::Purchased)
               &&(inventTrans.StatusIssue          == StatusIssue::None
               || inventTrans.StatusIssue          == StatusIssue::Deducted
               || inventTrans.StatusIssue          == StatusIssue::Sold)
        {
            costAmount+= inventTrans.costValue();
        }
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the physical cost price for a packing slip from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_packingSlipId">
    ///    The packing slip ID.
    /// </param>
    /// <param name="_packingSlipDate">
    ///    The date of issue for the packing slip.
    /// </param>
    /// <returns>
    ///    The physical cost price for a packing slip line.
    /// </returns>
    static CostAmount costAmountPhysical(
        InventTransOriginId     _transOriginId,
        PackingSlipId           _packingSlipId,
        TransDate               _packingSlipDate)
    {
        InventTrans     inventTrans;

        select sum(CostAmountPhysical) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId
               && inventTrans.DatePhysical          == _packingSlipDate
               && inventTrans.Qty                   != 0
               && inventTrans.PackingSlipReturned   == 0
               &&(inventTrans.StatusReceipt        == StatusReceipt::None
               || inventTrans.StatusReceipt        == StatusReceipt::Received
               || inventTrans.StatusReceipt        == StatusReceipt::Purchased)
               &&(inventTrans.StatusIssue          == StatusIssue::None
               || inventTrans.StatusIssue          == StatusIssue::Deducted
               || inventTrans.StatusIssue          == StatusIssue::Sold);

        return inventTrans.CostAmountPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the actual inventory delivery date for a packing slip line.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_packingSlipId">
    ///    The packing slip ID.
    /// </param>
    /// <param name="_packingSlipDate">
    ///    The expected and default date of issue for the packing slip.
    /// </param>
    /// <returns>
    ///    The actual delivery date if any exists; otherwise, the default date.
    /// </returns>
    public static TransDate inventDate(
        InventTransOriginId     _transOriginId,
        PackingSlipId           _packingSlipId,
        TransDate               _packingSlipDate)
    {
        InventTrans inventTrans;

        select firstonly RecId, DatePhysical from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId
               && inventTrans.DatePhysical          == _packingSlipDate;

        if (inventTrans.RecId)
        {
            return inventTrans.DatePhysical;
        }

        select firstonly RecId, DatePhysical from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId;

        if (inventTrans.RecId)
        {
            return inventTrans.DatePhysical;
        }

        return _packingSlipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inventory quantity for a packing slip from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_packingSlipId">
    ///    The packing slip ID.
    /// </param>
    /// <param name="_packingSlipDate">
    ///    The date of issue for the packing slip.
    /// </param>
    /// <returns>
    ///    The inventory quantity for a packing slip line.
    /// </returns>
    public static InventQty inventQty(
        InventTransOriginId     _transOriginId,
        PackingSlipId           _packingSlipId,
        TransDate               _packingSlipDate)
    {
        InventTrans         inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId
               && inventTrans.DatePhysical          == _packingSlipDate
               && inventTrans.Qty                   != 0
               && inventTrans.PackingSlipReturned   == 0
               &&(inventTrans.StatusReceipt        == StatusReceipt::None
               || inventTrans.StatusReceipt        == StatusReceipt::Received
               || inventTrans.StatusReceipt        == StatusReceipt::Purchased)
               &&(inventTrans.StatusIssue          == StatusIssue::None
               || inventTrans.StatusIssue          == StatusIssue::Deducted
               || inventTrans.StatusIssue          == StatusIssue::Sold);

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity for a packing slip from the journal which has been invoiced.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_packingSlipId">
    ///    The packing slip ID.
    /// </param>
    /// <param name="_packingSlipDate">
    ///    The date of issue for the packing slip.
    /// </param>
    /// <param name="_voucherPhysical">
    ///    The voucher used when doing the packing slip posting; optional.
    /// </param>
    /// <returns>
    ///    The invoiced quantity for a packing slip line.
    /// </returns>
    /// <remarks>
    ///    If the physical voucher is not specified any voucher will be accepted.
    /// </remarks>
    public static InventQty invoicedQty(
        InventTransOriginId     _transOriginId,
        PackingSlipId           _packingSlipId,
        TransDate               _packingSlipDate,
        Voucher                 _voucherPhysical    = '')
    {
        InventTrans         inventTrans;

        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId
               && inventTrans.DatePhysical          == _packingSlipDate
               && inventTrans.Qty                   != 0
               && inventTrans.Voucher                                                           // Invoice ledger voucher must be present
               &&(inventTrans.VoucherPhysical       == _voucherPhysical || !_voucherPhysical)   // Packing slip ledger voucher
               &&(inventTrans.StatusReceipt         == StatusReceipt::None
               || inventTrans.StatusReceipt         == StatusReceipt::Received
               || inventTrans.StatusReceipt         == StatusReceipt::Purchased)
               &&(inventTrans.StatusIssue           == StatusIssue::None
               || inventTrans.StatusIssue           == StatusIssue::Deducted
               || inventTrans.StatusIssue           == StatusIssue::Sold);

        return inventTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity for a packing slip from the journal in the catch weight unit.
    /// </summary>
    /// <param name="_transOriginId">
    /// The transaction originator ID.
    /// </param>
    /// <param name="_packingSlipId">
    /// The packing slip ID.
    /// </param>
    /// <param name="_packingSlipDate">
    /// The date of issue for the packing slip.
    /// </param>
    /// <returns>
    /// The quantity for a packing slip line in catch weight unit.
    /// </returns>
    public static PdsCWInventQty pdsCWQty(
        InventTransOriginId     _transOriginId,
        PackingSlipId           _packingSlipId,
        TransDate               _packingSlipDate)
    {
        InventTrans         inventTrans;

        select sum(PdsCWQty) from inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.PackingSlipId         == _packingSlipId
               && inventTrans.DatePhysical          == _packingSlipDate
               && inventTrans.PdsCWQty              != 0
               && inventTrans.PackingSlipReturned   == 0
               &&(inventTrans.StatusReceipt        == StatusReceipt::None
               || inventTrans.StatusReceipt        == StatusReceipt::Received
               || inventTrans.StatusReceipt        == StatusReceipt::Purchased)
               &&(inventTrans.StatusIssue          == StatusIssue::None
               || inventTrans.StatusIssue          == StatusIssue::Deducted
               || inventTrans.StatusIssue          == StatusIssue::Sold);

        return inventTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cost price for a packing slip from the journal.
    /// </summary>
    /// <param name="_transOriginId">
    ///    The transaction originator ID.
    /// </param>
    /// <param name="_projAdjustRefId">
    ///    The project reference for the packing slip.
    /// </param>
    /// <returns>
    ///    The cost price for a packing slip line.
    /// </returns>
    public static CostAmount projCostAmount(
        InventTransOriginId     _transOriginId,
        ProjAdjustRefId         _projAdjustRefId)
    {
        InventTrans     inventTrans;
        CostAmount      costAmount;

        while select inventTrans
            where inventTrans.InventTransOrigin     == _transOriginId
               && inventTrans.ProjAdjustRefId       == _projAdjustRefId
               && inventTrans.Qty                   != 0
               && inventTrans.PackingSlipReturned   == 0
               &&(inventTrans.StatusReceipt        == StatusReceipt::None
               || inventTrans.StatusReceipt        == StatusReceipt::Purchased)
               &&(inventTrans.StatusIssue          == StatusIssue::None
               || inventTrans.StatusIssue          == StatusIssue::Sold)
        {
            costAmount+= inventTrans.costValue();
        }
        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCostAmountPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the physical cost price for a project transaction
    /// </summary>
    /// <param name = "_transOriginId">
    /// The transaction originator ID.
    /// </param>
    /// <param name = "_projAdjustRefId">
    /// The project reference for the packing slip.
    /// </param>
    /// <returns>
    /// The cost price for a packing slip line.
    /// </returns>
    [Hookable(false)]
    public static CostAmount projCostAmountPhysical(
        InventTransOriginId _transOriginId,
        ProjAdjustRefId _projAdjustRefId)
    {
        InventTrans inventTrans;
        
        select sum(CostAmountPhysical) from inventTrans
            where inventTrans.InventTransOrigin == _transOriginId
               && inventTrans.ProjAdjustRefId == _projAdjustRefId
               && inventTrans.PackingSlipReturned == NoYes::No;

        return inventTrans.CostAmountPhysical;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>