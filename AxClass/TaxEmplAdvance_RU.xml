<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxEmplAdvance_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TaxEmplAdvance_RU extends TaxCalculation
{
    EmplAdvLine_RU  lineTable;
    EmplAdvTable_RU headerTable;
    boolean         amountInclTax;
    AmountCur       baseAmountCur;
    AmountCur       taxAmountCur;
    AmountMST       baseAmountMst;
    AmountMST       taxAmountMst;
    LedgerPostingController ledgerPostingController;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTaxAdjustmentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the collection of tax adjustment types that can be used to make tax adjustments.
    /// </summary>
    protected void addTaxAdjustmentTypes()
    {
        super();

        this.addTaxAdjustmentType(TaxAdjustmentType::Detail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the transaction supports adjusting a single line.
    /// </summary>
    /// <returns>
    ///   Always returns true.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    public AmountCur baseAmount()
    {
        return baseAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountMst</Name>
				<Source><![CDATA[
    public AmountMST baseAmountMst()
    {
        return baseAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    public TaxAmount calcAndPost(boolean  _calcEnteredOnly = false)
    {
        AmountCur    baseAmount;
        AmountCur    lineAmountInclTax;

        if (! headingRecId)
            return 0;

        this.initializeCalculation();

        if (post)
        {
            this.initLedgerPosting(ledgerPostingController);
            temporaryLedgerPostingJournal = ledgerPostingController.getJournal();
        }

        baseAmount = _calcEnteredOnly ? lineTable.AmountCur : lineTable.AmountCurApproved;

        if (this.determineAmountInclTax())
        {
            lineAmountInclTax = baseAmount;
            baseAmount = Tax::baseAmountExclTax(lineTable.TaxGroup,
                                                lineTable.TaxItemGroup,
                                                lineTable.DocumentDate,
                                                lineTable.CurrencyCode,
                                                _calcEnteredOnly ? lineTable.AmountCur : lineTable.AmountCurApproved,
                                                TaxModuleType::PurchInvoice,
                                                0,
                                                '',
                                                '',
                                                TaxDirection::OutgoingTax,
                                                0,
                                                false);
        }
        this.initializeTaxForLine(this.determineAmountInclTax(),
                                  baseAmount,
                                  lineAmountInclTax,
                                  lineTable.DefaultDimension,
                                  LedgerDimensionFacade::serviceCreateLedgerDimension(lineTable.LedgerDimension, lineTable.DefaultDimension),
                                  LedgerPostingType::None,
                                  (lineTable.Qty ? baseAmount/lineTable.Qty : baseAmount),
                                  '',
                                  lineTable.Qty
                                  );
        this.calculateLineSpecificTaxCodes();

        taxAmountCur = this.calculateTotalTaxCodes();

        taxAmountCur = this.finalizeCalculation();

        if (post)
        {
            this.saveAndPost(ledgerPostingController);
        }

        taxAmountCur  = this.totalTaxAmount();

        if (lineAmountInclTax)
        {
            baseAmountCur = lineAmountInclTax - taxAmountCur;
        }
        else
        {
            baseAmountCur = baseAmount;
        }

        if (lineTable.CurrencyCode != CompanyInfoHelper::standardCurrency())
        {
            baseAmountMst = CurrencyExchangeHelper::amountCur2MST(baseAmountCur, lineTable.CurrencyCode, lineTable.ExchRate, headerTable.TransDate, lineTable.ExchRateSecond, lineTable.Triangulation);
            taxAmountMst  = CurrencyExchangeHelper::amountCur2MST(taxAmountCur, lineTable.CurrencyCode, lineTable.ExchRate, headerTable.TransDate, lineTable.ExchRateSecond, lineTable.Triangulation);
        }
        else
        {
            taxAmountMst  = taxAmountCur;
            baseAmountMst = baseAmountCur;
        }

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs tax calculation
    /// </summary>
    /// <returns>
    ///  Tax amount
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return this.calcAndPost();
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    public boolean checkParameters()
    {
        boolean ok      = true;

        if (! headerTable   || ! lineTable)
            throw error("@GLS105546");

        if (post && ! ledgerPostingController)
        {
            ok  = checkFailed(strFmt("@SYS19386", funcName()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAmountInclTax</Name>
				<Source><![CDATA[
    protected boolean determineAmountInclTax()
    {
        return lineTable.TaxIncluded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDirection</Name>
				<Source><![CDATA[
    protected TaxDirection determineDirection(TaxGroupData _taxGroupData)
    {
        return _taxGroupData.ExemptTax == NoYes::No ? TaxDirection::IncomingTax : TaxDirection::TaxExemptPurchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    ExchRate exchRate()
    {
        return lineTable.ExchRate?lineTable.ExchRate:super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary()
    {
        return lineTable.ExchRateSecond?lineTable.ExchRateSecond:super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription taxAdjustmentDetailDescription;

        if (_sourceTableId == tablenum(EmplAdvLine_RU))
        {
            taxAdjustmentDetailDescription = (select firstOnly DocumentName from EmplAdvLine_RU
                                              where EmplAdvLine_RU.RecId == _sourceRecId).DocumentName;
        }

        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference taxAdjustmentDetailReference;

        if (_sourceTableId == tablenum(EmplAdvLine_RU))
        {
            taxAdjustmentDetailReference = (select firstOnly DocumentNum from EmplAdvLine_RU
                                            where EmplAdvLine_RU.RecId == _sourceRecId).DocumentNum;
        }

        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the tax adjustment detail for the specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table identity of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record identity of the specified tax source.
    /// </param>
    /// <returns>
    /// Always returns <c>TaxAdjustmentDetailType::Item</c>.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        return TaxAdjustmentDetailType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(NoYes                   _post,
                    EmplAdvLine_RU          _line,
                    EmplAdvTable_RU         _table,
                    LedgerPostingController _ledgerPostingController = null,
                    boolean                 _insTaxes = true,
                    recId                   _headingRecId = 0,
                    boolean                 _useTaxUncommitted = true,
                    boolean                 _loadTaxUncommittedOnInit = TaxUncommitted::existByDocumentId(_line.TableId, _line.RecId),
                    boolean                 _skipInit = false
                    )
    {
        post               = _post;
        lineTable          = _line;
        headerTable        = _table;
        triangulation      = false;
        taxCalculateLine   = true;
        taxCalculateTotal  = false;
        taxModuleType      = TaxModuleType::Voucher;
        headingRecId       = _headingRecId ? _headingRecId : headerTable.RecId;
        headingTableId     = headerTable.TableId;

        if (! headingRecId)
            throw error("@SYS18447");

        super(this, _useTaxUncommitted, _loadTaxUncommittedOnInit, _skipInit);

        sourceCurrencyCode  = lineTable.CurrencyCode;
        ledgerPostingController = _ledgerPostingController;

        if (ledgerPostingController)
        {
            voucher = ledgerPostingController.getReference().parmVoucher();
            taxDate = ledgerPostingController.getReference().parmAccountingDate();
        }
        else
        {
            taxDate = headerTable.TransDate;
        }

        if (! this.checkParameters())
            throw error("@SYS18447");

        amountInclTax =  lineTable.TaxIncluded ? true : this.determineAmountInclTax();

        if (_insTaxes)
        {
            this.insertIntersection(lineTable.TaxGroup,
                                    lineTable.TaxItemGroup,
                                    "",
                                    lineTable.Description,
                                    lineTable.DocumentDate);

            if (! this.checkTaxCodesByLine())
                throw error("@SYS22772");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeadingRecId</Name>
				<Source><![CDATA[
    protected recId parmHeadingRecId(recId _headingRecId = headingRecId)
    {
        headingRecId = _headingRecId;
        return headingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxesNotSourceSingleLine</Name>
				<Source><![CDATA[
    public container showTaxesNotSourceSingleLine()
    {
        return [sourceSingleLine,
                this.totalTaxAmountCalculated()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTaxesSourceSingleLine</Name>
				<Source><![CDATA[
    public container showTaxesSourceSingleLine(tableId _sourceTableId, recId _sourceRecId, boolean _includeUseTax = false)
    {
        return [this.totalTaxAmountCalculated(),
                this.totalRegulatedTaxAmountCalculated()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    recId sourceRecId()
    {
        return lineTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    tableId sourceTableId()
    {
        return lineTable.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    public AmountMST taxAmount()
    {
        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountMst</Name>
				<Source><![CDATA[
    public AmountMST taxAmountMst()
    {
        return taxAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    public TmpTaxWorkTrans tmpTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans = taxWorkTrans)
    {
        taxWorkTrans.setTmpData(_tmpTaxWorkTrans);

        select taxWorkTrans;

        return taxWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalRegulatedTaxAmountCalculated</Name>
				<Source><![CDATA[
    private TaxAmountCur totalRegulatedTaxAmountCalculated()
    {
        TaxAmountCur    taxAmount;

        while select taxWorkTrans
            where taxWorkTrans.TaxDirection != TaxDirection::UseTax &&
                  taxWorkTrans.TaxOrigin    != TaxOrigin::TaxReversed
        {
            taxAmount += this.taxAmountSign(taxWorkTrans.SourceRegulateAmountCur,
                                            taxWorkTrans.TaxDirection);
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a Boolean value that indicates whether the current transaction being calculated
    /// supports sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the current transaction supports sales tax adjustment; otherwise, false.
    /// </returns>
    public boolean useSalesTaxAdjustments()
    {
        return !sourceSingleLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns a boolean indicating whether the current transaction being posted supports
    ///    SubLedgerDistributions/SubLedgerJournalLines.  By default, this base implementation is that they don't.
    ///    As the individual transaction support the SubLedger, they will need to override this and return true.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to post supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///   True if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndFillWorkTrans</Name>
				<Source><![CDATA[
    public static TaxEmplAdvance_RU calcAndFillWorkTrans(EmplAdvTable_RU _emplAdvTable,
                                                                EmplAdvLine_RU  _emplAdvLine = null)
    {
        TaxEmplAdvance_RU       taxEmplAdvance;
        TaxTrans                taxTrans;
        TmpTaxWorkTrans         tmpTaxWorkTrans;
        EmplAdvLine_RU          emplAdvLine, emplAdvLineLocal;
        EmplTrans_RU            emplTrans;

        void mergeTaxWorkTrans(TmpTaxWorkTrans _tmpTaxWorkTrans)
        {
            int         i;
            DictField   dictField;
            DictTable   dictTable;

            dictTable = new DictTable(_tmpTaxWorkTrans.TableId);

            while select _tmpTaxWorkTrans
            {
                for (i = 1; i <= dictTable.fieldCnt(); i ++)
                {
                    dictField = new DictField(_tmpTaxWorkTrans.TableId, dictTable.fieldCnt2Id(i));
                    if (! dictField.isSystem())
                    {
                        tmpTaxWorkTrans.(dictField.id()) = _tmpTaxWorkTrans.(dictField.id());
                    }
                }
                tmpTaxWorkTrans.insert();
            }
        }

        while select emplAdvLine
            where emplAdvLine.AdvanceId == _emplAdvTable.AdvanceId &&
                  emplAdvLine.TaxGroup                             &&
                  emplAdvLine.TaxItemGroup                         &&
                  ! emplAdvLine.EmplTransRecId                     &&
                  ((_emplAdvLine ? false : true)                   ||
                  (emplAdvLine.RecId == _emplAdvLine.RecId))
        {
            taxEmplAdvance = new TaxEmplAdvance_RU(NoYes::No, emplAdvLine, _emplAdvTable, null, true, emplAdvLine.RecId);
            taxEmplAdvance.calcAndPost();
            taxEmplAdvance.sourceSingleLine(true, false);
            mergeTaxWorkTrans(taxEmplAdvance.tmpTaxWorkTrans());
        }

        while select emplAdvLine
            group by EmplTransRecId
            where emplAdvLine.AdvanceId == _emplAdvTable.AdvanceId &&
                  emplAdvLine.TaxGroup                             &&
                  emplAdvLine.TaxItemGroup                         &&
                  emplAdvLine.EmplTransRecId                       &&
                  ((_emplAdvLine ? false : true)                   ||
                  (emplAdvLine.EmplTransRecId == _emplAdvLine.EmplTransRecId))
        {
            emplTrans        = EmplTrans_RU::findRecId(emplAdvLine.EmplTransRecId);
            emplAdvLineLocal = EmplAdvLine_RU::findTransEmplRecId(emplAdvLine.EmplTransRecId);

            while select * from taxTrans
                where taxTrans.Voucher   == emplTrans.Voucher  &&
                      taxTrans.TransDate == emplTrans.TransDate
            {
                tmpTaxWorkTrans.HeadingRecId                    = emplAdvLineLocal.LineType == EmplAdvLineType_RU::None ?
                                                                  emplAdvLineLocal.RecId : _emplAdvTable.RecId;
                tmpTaxWorkTrans.HeadingTableId                  = taxTrans.HeadingTableId;
                tmpTaxWorkTrans.SourceTableId                   = taxTrans.SourceTableId;
                tmpTaxWorkTrans.SourceRecId                     = emplAdvLine.EmplTransRecId;
                tmpTaxWorkTrans.Source                          = taxTrans.Source;
                tmpTaxWorkTrans.TransDate                       = taxTrans.TransDate;
                tmpTaxWorkTrans.Voucher                         = taxTrans.Voucher;
                tmpTaxWorkTrans.InventTransId                   = taxTrans.InventTransId;
                tmpTaxWorkTrans.TaxCode                         = taxTrans.TaxCode;
                tmpTaxWorkTrans.TaxGroup                        = taxTrans.TaxGroup;
                tmpTaxWorkTrans.TaxItemGroup                    = taxTrans.TaxItemGroup;
                tmpTaxWorkTrans.TaxBaseAmount                   = taxTrans.TaxBaseAmount;
                tmpTaxWorkTrans.TaxBaseAmountCur                = taxTrans.TaxBaseAmountCur;
                tmpTaxWorkTrans.TaxBaseAmountRep                = taxTrans.TaxBaseAmountRep;
                tmpTaxWorkTrans.SourceBaseAmountCur             = taxTrans.SourceBaseAmountCur;
                tmpTaxWorkTrans.TaxBaseQty                      = taxTrans.TaxBaseQty;
                tmpTaxWorkTrans.TaxAmount                       = taxTrans.TaxAmount;
                tmpTaxWorkTrans.TaxAmountCur                    = taxTrans.TaxAmountCur;
                tmpTaxWorkTrans.TaxAmountRep                    = taxTrans.TaxAmountRep;
                tmpTaxWorkTrans.SourceTaxAmountCur              = taxTrans.SourceTaxAmountCur;
                tmpTaxWorkTrans.TaxInCostPrice                  = taxTrans.TaxInCostPrice;
                tmpTaxWorkTrans.TaxInCostPriceMST               = taxTrans.TaxInCostPriceMST;
                tmpTaxWorkTrans.TaxInCostPriceCur               = taxTrans.TaxInCostPriceCur;
                tmpTaxWorkTrans.TaxInCostPriceRep               = taxTrans.TaxInCostPriceRep;
                tmpTaxWorkTrans.CurrencyCode                    = taxTrans.CurrencyCode;
                tmpTaxWorkTrans.SourceCurrencyCode              = taxTrans.SourceCurrencyCode;
                tmpTaxWorkTrans.TaxDirection                    = taxTrans.TaxDirection;

                tmpTaxWorkTrans.LedgerDimension                 = TaxTransGeneralJournalAccountEntry::getTaxLedgerDimensionForTaxTrans(taxTrans.RecId);
                tmpTaxWorkTrans.TaxOffsetUseTaxLedgerDimension  = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(taxTrans.RecId, TaxTransRelationshipType::UseTaxPayable);
                tmpTaxWorkTrans.OperationLedgerDimension        = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(taxTrans.RecId, TaxTransRelationshipType::TransactionLineAccount);
                tmpTaxWorkTrans.OffsetLedgerDimension_RU        = TaxTransGeneralJournalAccountEntry::getLedgerDimensionForTaxTrans(taxTrans.RecId, TaxTransRelationshipType::Offset_RU);

                tmpTaxWorkTrans.ExemptTax                       = taxTrans.ExemptTax;
                tmpTaxWorkTrans.TaxAutogenerated                = taxTrans.TaxAutogenerated;
                tmpTaxWorkTrans.SourceRegulateAmountCur         = taxTrans.SourceRegulateAmountCur;
                tmpTaxWorkTrans.TaxInCostPriceRegulated         = taxTrans.TaxInCostPriceRegulated;
                tmpTaxWorkTrans.euroTriangulation               = taxTrans.euroTriangulation;
                tmpTaxWorkTrans.TaxOrigin                       = taxTrans.TaxOrigin;
                tmpTaxWorkTrans.TaxReports                      = NoYes::Yes;
                tmpTaxWorkTrans.CalculationDate                 = taxTrans.TransDate;

                tmpTaxWorkTrans.insert();
            }
        }

        if (! taxEmplAdvance)
        {
            select firstonly emplAdvLine
                where emplAdvLine.AdvanceId == _emplAdvTable.AdvanceId &&
                      emplAdvLine.EmplTransRecId;

            taxEmplAdvance = new TaxEmplAdvance_RU(NoYes::No, emplAdvLine, _emplAdvTable, null, false);
            taxEmplAdvance.sourceSingleLine(true, true);
        }

        if (! _emplAdvLine)
        {
            taxEmplAdvance.sourceSingleLine(true, true);
            taxEmplAdvance.parmHeadingRecId(_emplAdvTable.RecId);
        }

        taxEmplAdvance.tmpTaxWorkTrans(tmpTaxWorkTrans);

        return taxEmplAdvance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Static method to perform tax calculation
    /// </summary>
    /// <param name="_advTable">
    ///  Advance report table
    /// </param>
    /// <param name="_advLine">
    ///  Line of advance repport
    /// </param>
    /// <returns>
    ///  Tax amount
    /// </returns>
    static TaxAmountCur calculate(EmplAdvTable_RU _advTable, EmplAdvLine_RU _advLine)
    {
        TaxAmountCur        amountCur;
        boolean             loadTaxUncommitted = TaxUncommitted::existByDocumentId(_advLine.TableId, _advLine.RecId);
        TaxEmplAdvance_RU   taxCalc = new TaxEmplAdvance_RU(false,
                                                            _advLine,
                                                            _advTable,
                                                            null,
                                                            true,
                                                            _advLine.RecId
                                                            );
        if (!TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            if (! loadTaxUncommitted)
            {
                amountCur       = taxCalc.calculateTax();
            }
            else
            {
                amountCur       = taxCalc.totalTaxAmount();
            }
        }

        return -amountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>