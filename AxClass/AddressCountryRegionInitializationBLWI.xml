<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AddressCountryRegionInitializationBLWI</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AddressCountryRegionInitializationBLWI extends RunBase
{
  #DEFINE.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCodeList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the groups of countries from a list of country codes.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void checkCodeList()
    {
        #isoCountryRegionCodes
        #CountryRegionNamesBLWI
        ;
        this.progressInit("@SYS92186", 52, #AviFindFile);

        this.createGroup(#isoAT, #AustriaEN, #AustriaNL, #AustriaFR, 1);
        this.createGroup(#isoAU, #AustraliaEN, #AustraliaNL, #AustraliaFR, 2);
        this.createGroup(#isoBG, #BulgariaEN, #BulgariaNL, #BulgariaFR, 3);
        this.createGroup(#isoCA, #CanadaEN, #CanadaNL, #CanadaFR, 4);
        this.createGroup(#isoCH, #SwitserlandEN, #SwitserlandNL, #SwitserlandFR, 5);
        this.createGroup(#isoCN, #ChinaEN, #ChinaNL, #ChineFR, 6);
        this.createGroup(#isoCY, #CyprusEN, #CyprusNL, #CyprusFR, 7);
        this.createGroup(#isoCZ, #CzechiaEN, #CzechiaNL, #CzechiaFR, 8);
        this.createGroup(#isoDE, #GermanyEN, #GermanyNL, #GermanyFR, 9);
        this.createGroup(#isoDK, #DenmarkEN, #DenmarkNL, #DenmarkFR, 10);
        this.createGroup(#isoEE, #EstoniaEN, #EstoniaNL, #EstoniaFR, 11);
        this.createGroup(#isoES, #SpainEN, #SpainNL, #SpainFR, 12);
        this.createGroup(#isoFI, #FinlandEN, #FinlandNL, #FinlandFR, 13);
        this.createGroup(#isoFR, #FranceEN, #FranceNL, #FranceFR, 14);
        this.createGroup(#isoGB, #UKEN, #UKNL, #UKFR, 15);
        this.createGroup(#isoGR, #GreeceEN, #GreeceNL, #GreeceFR, 16);
        this.createGroup(#isoHU, #HungaryEN, #HungaryNL, #HungaryFR, 17);
        this.createGroup(#isoID, #IndonesiaEN, #IndonesiaNL, #IndonesiaFR, 18);
        this.createGroup(#isoIE, #IrelandEN, #IrelandNL, #IrelandFR, 19);
        this.createGroup(#isoIN, #IndiaEN, #IndiaNL, #IndiaFR, 20);
        this.createGroup(#isoIS, #IcelandEN, #IcelandNL, #IcelandFR, 21);
        this.createGroup(#isoIT, #ItalyEN, #ItalyNL, #ItalyFR, 22);
        this.createGroup(#isoJP, #JapanEN, #JapanNL, #JapanFR, 23);
        this.createGroup(#isoKR, #SouthKoreaEN, #SouthKoreaNL, #SouthKoreaFR, 24);
        this.createGroup(#isoLI, #LiechtensteinEN, #LiechtensteinNL, #LiechtensteinFR, 25);
        this.createGroup(#isoLT, #LithuaniaEN, #LithuaniaNL, #LithuaniaFR, 26);
        this.createGroup(#isoLU, #LuxemburgEN, #LuxemburgNL, #LuxemburgFR, 27);
        this.createGroup(#isoLV, #LatviaEN, #LatviaNL, #LatviaFR, 28);
        this.createGroup(#isoMT, #MaltaEN, #MaltaNL, #MaltaFR, 29);
        this.createGroup(#isoMX, #MexicoEN, #MexicoNL, #MexicoFR, 30);
        this.createGroup(#isoNL, #NetherlandsEN, #NetherlandsNL, #NetherlandsFR, 31);
        this.createGroup(#isoNO, #NorwayEN, #NorwayNL, #NorwayFR, 32);
        this.createGroup(#isoNZ, #NewZealandEN, #NewZealandNL, #NewZealandFR, 33);
        this.createGroup(#isoPL, #PolandEN, #PolandNL, #PolandFR, 34);
        this.createGroup(#isoPT, #PortugalEN, #PortugalNL, #PortugalFR, 35);
        this.createGroup(#isoRO, #RomaniaEN, #RomaniaNL, #RomaniaFR, 36);
        this.createGroup(#isoRU, #RussiaEN, #RussiaNL, #RussiaFR, 37);
        this.createGroup(#isoSE, #SwedenEN, #SwedenNL, #SwedenFR, 38);
        this.createGroup(#isoSG, #SingaporeEN, #SingaporeNL, #SingaporeFR, 39);
        this.createGroup(#isoSL, #SloveniaEN, #SloveniaNL, #SloveniaFR, 40);
        this.createGroup(#isoSK, #SlovakiaEN, #SlovakiaNL, #SlovakiaFR, 41);
        this.createGroup(#isoTR, #TurkeyEN, #TurkeyNL, #TurkeyFR, 42);
        this.createGroup(#isoUS, #USEN, #USNL, #USFR, 43);
        this.createGroup(#isoZA, #SouthAfrikaEN, #SouthAfrikaNL, #SouthAfrikaFR, 44);
        this.createGroup(#isoA1, #A1EN, #A1NL, #A1FR, 45);
        this.createGroup(#isoA2, #A2EN, #A2NL, #A2FR, 46);
        this.createGroup(#isoA3, #A3EN, #A3NL, #A3FR, 47);
        this.createGroup(#isoB1, #B1EN, #B1NL, #B1FR, 48);
        this.createGroup(#isoB2, #B2EN, #B2NL, #B2FR, 49);
        this.createGroup(#isoB3, #B3EN, #B3NL, #B3FR, 50);
        this.createGroup(#isoB4, #B4EN, #B4NL, #B4FR, 51);
        this.createGroup(#isoB5, #B5EN, #B5NL, #B5FR, 52);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForeignDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a foreign description of an address.
    /// </summary>
    /// <param name="_txt">
    ///    The text to be changed.
    /// </param>
    /// <param name="_languageId">
    ///    The language to which to change.
    /// </param>
    /// <param name="_recId">
    ///    The ID of the record to be changed.
    /// </param>
    private void createForeignDescription (TradeBLWIDescription _txt, LanguageId _languageId, recId _recId)
    {
        LanguageTxt languageTxt;
        ;
        if (_recId && _txt && ! LanguageTxt::find(tableNum(AddressCountryRegionGroupBLWI), _recId, _languageId))
        {
            languageTxt.clear();
            languageTxt.TxtTableId = tableNum(AddressCountryRegionGroupBLWI);
            languageTxt.TxtRecId   = _recId;
            languageTxt.LanguageId = _languageId;
            languageTxt.Txt        = _txt;
            languageTxt.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a trade group.
    /// </summary>
    /// <param name="_groupId">
    ///    A group ID.
    /// </param>
    /// <param name="_description">
    ///    A description of the trade group.
    /// </param>
    /// <param name="_nl">
    ///    A <c>nl</c> value.
    /// </param>
    /// <param name="_fr">
    ///    A <c>fr</c> value.
    /// </param>
    /// <param name="_row">
    ///    The row of the trade group that is being created.
    /// </param>
    private void createGroup (TradeBLWIGroupID     _groupId,
                              TradeBLWIDescription _description,
                              TradeBLWIDescription _nl,
                              TradeBLWIDescription _fr,
                              int _row)
    {
        AddressCountryRegionGroupBLWI countryRegionGroup;
        TradeBLWIDescription          formDescription;
        #Define.NL('nl')
        #Define.FR('fr')
        #Define.NLBE('nl-be')
        #Define.FRBE('fr-be')
        ;

        this.displayProgress(_row, _groupId);

        switch (subStr(infolog.language(), 1, 2))
        {
            case #NL: formDescription    = _nl; break;
            case #FR: formDescription    = _fr; break;
            default: formDescription = _description;break;
        }

        if (! AddressCountryRegionGroupBLWI::findByGroup(_groupId))
        {
            countryRegionGroup.clear();
            countryRegionGroup.GroupID      = _groupId;
            countryRegionGroup.Description  = formDescription;
            countryRegionGroup.Reporting    = true;
            countryRegionGroup.ReportRowNum = _row;
            countryRegionGroup.insert();
        }

        this.createForeignDescription(_nl, #NLBE, countryRegionGroup.RecId);
        this.createForeignDescription(_nl, #NL  , countryRegionGroup.RecId);
        this.createForeignDescription(_fr, #FRBE, countryRegionGroup.RecId);
        this.createForeignDescription(_fr, #FR  , countryRegionGroup.RecId);

        this.createLinkedBLWICountryRegion(_groupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLinkedBLWICountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a linked <c>countryRegion</c> list.
    /// </summary>
    /// <param name="_groupId">
    ///    A group ID.
    /// </param>
    private void createLinkedBLWICountryRegion(TradeBLWIGroupID _groupId)
    {
        AddressCountryRegionBLWI                    countryRegion;
        LogisticsAddressCountryRegion               addressCountryRegion;
        LogisticsAddressCountryRegionTranslation    logisticsAddressCountryRegionTranslation;

        if (!AddressCountryRegionBLWI::exist(_groupId))
        {
            select firstonly CountryRegionId from addressCountryRegion
                join CountryRegionId, ShortName from logisticsAddressCountryRegionTranslation
                    where logisticsAddressCountryRegionTranslation.CountryRegionId == addressCountryRegion.CountryRegionId
                        && logisticsAddressCountryRegionTranslation.LanguageId == currentUserLanguage()
                        && addressCountryRegion.isOcode == _groupId;
            if (addressCountryRegion)
            {
                countryRegion.clear();
                countryRegion.CountryRegionId               = addressCountryRegion.CountryRegionId;
                countryRegion.CountryRegionName             = logisticsAddressCountryRegionTranslation.ShortName;
                countryRegion.AddressCountryRegionGroupBLWI = AddressCountryRegionGroupBLWI::findByGroup(_groupId).RecId;
                countryRegion.insert();
            }
            else
            {
                info(strFmt("@SYS92187", _groupId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the progress of the address initialization.
    /// </summary>
    /// <param name="_line">
    ///    A counter that iterates the progress of the initialization.
    /// </param>
    /// <param name="_groupId">
    ///    The ID of the group of addresses that is being initialized.
    /// </param>
    private void displayProgress(Counter          _line,
                                 TradeBLWIGroupID _groupId)
    {
        this.progressUpdate(strFmt("@SYS92188", _line, _groupId), _line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the progress of initializing the addresses.
    /// </summary>
    /// <param name="_text">
    ///    The text with which to update.
    /// </param>
    /// <param name="_line">
    ///    The line to update.
    /// </param>
    private void progressUpdate(str _text,Counter _line)
    {
        progress.setCount(_line);
        progress.setText(_text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, base] = _packedClass;
                ret = super(base);
                break;

            default :
                this.initParmDefault();
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static AddressCountryRegionInitializationBLWI construct()
    {
        ;
        return new AddressCountryRegionInitializationBLWI();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBLWIGroups</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the groups of addresses.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void initBLWIGroups()
    {
        AddressCountryRegionInitializationBLWI countryRegionInitialization = AddressCountryRegionInitializationBLWI::construct();
        ;
        countryRegionInitialization.checkCodeList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>