<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTotals_Trans extends SalesTotals_Sales
{
    SalesLine           salesLine;
    SalesQuantity       salesQuantityStatusInvoicedCached;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>categoryWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the weight of a category-based order line.
    /// </summary>
    /// <returns>
    ///    The weight of the category-based order line.
    /// </returns>
    protected Weight categoryWeight()
    {
        return SalesLineForeignTradeCategory::findSalesLine(salesLine).UnitWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        return SalesCalcTax::construct(salesTable, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct  discPercent()
    {
        return salesTable.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tableNum(SalesLine));

        recordSortedListLine.sortOrder      (fieldNum(SalesLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyLineAmount</Name>
				<Source><![CDATA[
    LineAmount interCompanyLineAmount(SalesQty _salesQty, InvoiceDate _invoiceDate)
    {
        return salesLine.interCompanyLineAmount(_salesQty,_invoiceDate, tax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>InventDimId</c> field of the current order line.
    /// </summary>
    /// <returns>
    ///    The <c>InventDimId</c> field of the current order line.
    /// </returns>
    protected InventDimId inventDimId()
    {
        return salesLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected TradeInventTransId inventTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the order line is category-based.
    /// </summary>
    /// <returns>
    ///    true if the order line is category-based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        return salesLine.isCategoryBased();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is tracked in inventory.
    /// </summary>
    /// <returns>
    /// true if the order line is tracked in inventory; otherwise, false.
    /// </returns>
    protected boolean isStocked()
    {
        return salesLine.isStocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount  lineAmount(SalesQty _salesQty, TransDate _transDate)
    {
        if (skipTaxCalculations)
        {
            return salesLine.LineAmount;
        }
        else
        {
            //If sales tax is included in the price, the result we get is the calculated tax base + the discount added back on.
            //If we round the number at the end, we will get the inconsistency with invoiced amount which is already rounded per line.
            //To get the totals right we need to round it now.            
            return salesLine.calcLineAmountExclTax(_salesQty, _transDate, tax, trackUnroundedBalances);            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    protected CostPrice lineCostPrice()
    {
        return salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty _unitQty, TransDate _transDate)
    {
        DiscAmount  discAmount = 0;

        if (this.shouldCalculateLineDiscountAmount())
        {
            discAmount += salesLine.calcLineDiscExclTax(_unitQty, _transDate, tax);
        }

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateLineDiscountAmount</Name>
				<Source><![CDATA[
    protected boolean shouldCalculateLineDiscountAmount()
    {
        return salesLine.SalesPrice != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineHasDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a discount is applied to the line.
    /// </summary>
    /// <returns>
    ///     true if a discount amount, a discount percentage, a multi line discount amount or a multi line discount percentage is applied; otherwise, false.
    /// </returns>
    protected boolean lineHasDiscount()
    {
        return (salesLine.LineDisc
                || salesLine.LinePercent
                || salesLine.MultiLnDisc
                || salesLine.MultiLnPercent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    protected Common lineQueryRunGet(TradeTotalsIQueryRun _lineQueryRun)
    {
        salesLine = super(_lineQueryRun);

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
    protected TradeTotalsIContract  parmContract()
    {
        SalesTotalsTransContract totalsTransContract = SalesTotalsTransContract::newFromSalesTable(salesTable);
        totalsTransContract.parmCalcEstimate(this.parmCalcEstimate());

        return totalsTransContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the remaining quantity in catch weight units.
    /// </summary>
    /// <returns>
    ///     The remaining quantity in catch weight units.
    /// </returns>
    [Hookable]
    protected PdsCWInventQty pdsCWQtyRemain()
    {
        PdsCWInventQty  qtyRemain;

        switch (specQty)
        {
            case SalesUpdate::DeliverNow:
                if (salesLine.PdsCWInventDeliverNow * salesLine.PdsCWRemainInventPhysical < 0)
                {
                    qtyRemain = salesLine.PdsCWRemainInventPhysical;
                }
                else
                {
                    if (abs(salesLine.PdsCWInventDeliverNow) < abs(salesLine.PdsCWRemainInventPhysical))
                    {
                        qtyRemain = salesLine.PdsCWInventDeliverNow;
                    }
                    else
                    {
                        qtyRemain = salesLine.PdsCWRemainInventPhysical;
                    }
                }
                break;

            case SalesUpdate::All:
                qtyRemain = salesLine.PdsCWRemainInventPhysical;
                break;
        }

        return qtyRemain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total catch weight inventory quantity sales parameter.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return SalesQuantity::construct(
                    DocumentStatus::Invoice).pdsCWCalcInventQty(
                                                salesLine,
                                                specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return this.salesQuantityStatusInvoicedCached().calcInventQty(salesLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInventRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in inventory units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in inventory units.
    /// </returns>
    [Hookable] 
    protected InventQty qtyInventRemain()
    {
        InventQty           qtyUpdate;

        switch (specQty)
        {
            case SalesUpdate::DeliverNow:
                if (salesLine.InventDeliverNow * salesLine.RemainInventPhysical < 0)
                {
                    qtyUpdate = salesLine.RemainInventPhysical;
                }
                else
                {
                    if (abs(salesLine.InventDeliverNow) < abs(salesLine.RemainInventPhysical))
                    {
                        qtyUpdate = salesLine.InventDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = salesLine.RemainInventPhysical;
                    }
                }
                break;

            case SalesUpdate::All:
                qtyUpdate = salesLine.RemainInventPhysical;
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return this.salesQuantityStatusInvoicedCached().calcSalesQty(salesLine, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnitRemain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the remaining quantity in order line units.
    /// </summary>
    /// <returns>
    /// The remaining quantity in order line units.
    /// </returns>
    [Hookable]
    protected SalesQty qtyUnitRemain()
    {
        SalesQty qtyUpdate;

        switch (specQty)
        {
            case SalesUpdate::DeliverNow:
                if (salesLine.SalesDeliverNow * salesLine.RemainSalesPhysical < 0)
                {
                    qtyUpdate = salesLine.RemainSalesPhysical;
                }
                else
                {
                    if (abs(salesLine.SalesDeliverNow) < abs(salesLine.RemainSalesPhysical))
                    {
                        qtyUpdate = salesLine.SalesDeliverNow;
                    }
                    else
                    {
                        qtyUpdate = salesLine.RemainSalesPhysical;
                    }
                }
                break;

            case SalesUpdate::All:
                qtyUpdate = salesLine.RemainSalesPhysical;
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        QueryRun queryRun = new QueryRun(queryStr(SalesTableSelect));
        queryRun.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesId)).value(queryValue(salesTable.SalesId));
        queryRun.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, SalesStatus)).value(SalesQueryRangeUtil::salesStatusCanBeInvoiced());

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        SalesTable querySalesTable;

        if (_queryRun.changed(tableNum(SalesTable)))
        {
            querySalesTable = _queryRun.get(tableNum(SalesTable));
        }

        return querySalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesQuantityStatusInvoicedCached</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates an object of the <c>SalesQuantity</c> class if it does not exist.
    /// </summary>
    /// <returns>
    ///     A <c>PurchQuantity</c> class object.
    /// </returns>
    protected SalesQuantity salesQuantityStatusInvoicedCached()
    {
        if (!salesQuantityStatusInvoicedCached)
        {
            salesQuantityStatusInvoicedCached = SalesQuantity::construct(DocumentStatus::Invoice);
        }
        return salesQuantityStatusInvoicedCached;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLine</Name>
				<Source><![CDATA[
    protected boolean skipLine(Common  _orderLine)
    {
        boolean skipLine = super(_orderLine);

        if (!skipLine && _orderLine is SalesLine)
        {
            SalesLine skipSalesLine = _orderLine as SalesLine;
            skipLine = skipSalesLine.SalesStatus == SalesStatus::Invoiced;
        }

        return skipLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unitQtyInInventoryUnits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity from order line units to inventory units.
    /// </summary>
    /// <param name="_unitQty">
    /// The order line quantity to convert.
    /// </param>
    /// <returns>
    /// The order line quantity in inventory units.
    /// </returns>
    protected InventQty unitQtyInInventoryUnits(UnitQty _unitQty)
    {
        Debug::assert(inventTable != null);
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTable.ItemId,
																					 salesLine.InventDimId,
																					 _unitQty,
																					 salesLine.SalesUnit,
																					 inventTable.inventUnitId(),
																					 NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCalculateMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any order table record is related to any header of the order.
    /// </summary>
    /// <returns>
    ///     true if an order table record is related to any header of the order; otherwise, false.
    /// </returns>
    public boolean canCalculateMarkupTable()
    {
        if (salesTable.SalesStatus == SalesStatus::Invoiced)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSkipMarkupLineAmountCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the calculation of charges in sales lines can be skipped.
    /// </summary>
    /// <returns>
    /// True if the calculation of charges in sales lines is skipped; otherwise, false.
    /// </returns>
    protected boolean mustSkipMarkupLineAmountCalculation(Common _orderLine)
    {
        SalesLine skipSalesLine = _orderLine as SalesLine;;

        return salesLine.SalesStatus == SalesStatus::Canceled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>