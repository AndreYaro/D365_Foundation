<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailRecommendationsFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The <c>RetailRecommendationsFeature</c> class defines the product recommendations feature and its prerequisites.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class RetailRecommendationsFeature implements IFeatureMetadata, IFeaturePrerequisites, IFeatureMetadataEnablementNotifiable
{
    private static RetailRecommendationsFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new RetailRecommendationsFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static RetailRecommendationsFeature instance()
    {
        return RetailRecommendationsFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Retail:RecoListProductRecommendations");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Retail:RecoListDescriptionText");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://go.microsoft.com/fwlink/?linkid=2100618";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        // Upgrade scenario: If an environment already had recommendations enabled as part of the Retail shared parameters 
        // form then we honor that setting since feature management is replacing that form. In all other cases, we default to false.
        RetailSharedParameters parameters = RetailSharedParameters::find();
        return parameters.RecoListEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cannotEnableMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public LabelString cannotEnableMessage()
    {
        return "@Retail:RetailFeatureManagementDataLakePrereqErrorMessage";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canEnable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canEnable()
    {
        // Ensure that Azure Data Lake has been configured prior to enabling recommendations.
        BIMeasurementParameters entityStore = BIMeasurementParameters::find();
        return entityStore.CDSAEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        ttsbegin;
        RetailSharedParameters parameters = RetailSharedParameters::find(true);
        parameters.RecoListEnabled = true;

        if (parameters.RecoListTrendingMaxAgeDays == 0)
        {
            parameters.RecoListTrendingMaxAgeDays = 180;
        }

        if (parameters.RecoListTrendingTransactionsIntervalDays == 0)
        {
            parameters.RecoListTrendingTransactionsIntervalDays = 30;
        }

        if (parameters.RecoListBestsellingTransactionsIntervalDays == 0)
        {
            parameters.RecoListBestsellingTransactionsIntervalDays = 30;
        }

        parameters.update();
        ttscommit;

        this.addRecommendationLists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        ttsbegin;
        RetailSharedParameters parameters = RetailSharedParameters::find(true);
        parameters.RecoListEnabled = false;
        parameters.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecommendationLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the algo/ML based list definitions if they have not yet been defined.
    /// </summary>
    /// <remarks>
    /// This method is re-entrant and can be called multiple times without side-effect.
    /// </remarks>
    private void addRecommendationLists()
    {
        RetailRecoListsTable listsTable;

        // These are system identifiers and should not be translated.
        const str NewListId = 'new';
        const str TrendingListId = 'trending';
        const str BestsellingListId = 'bestselling';
        const str FrequentlyBoughtTogetherListId = 'fbt';
        const str PeopleAlsoBuyListId = 'pal';

        select firstonly listsTable where listsTable.ListId == NewListId;
        if (!listsTable)
        {
            listsTable.ListId = NewListId;
            listsTable.ListTitle = "@Retail:RecoListTypeNew";
            listsTable.ListType = RetailRecoListTypeBase::New;
            listsTable.insert();
        }

        select firstonly listsTable where listsTable.ListId == TrendingListId;
        if (!listsTable)
        {
            listsTable.ListId = TrendingListId;
            listsTable.ListTitle = "@Retail:RecoListTypeTrending";
            listsTable.ListType = RetailRecoListTypeBase::Trending;
            listsTable.insert();
        }

        select firstonly listsTable where listsTable.ListId == BestsellingListId;
        if (!listsTable)
        {
            listsTable.ListId = BestsellingListId;
            listsTable.ListTitle = "@Retail:RecoListTypeBestselling";
            listsTable.ListType = RetailRecoListTypeBase::Bestselling;
            listsTable.insert();
        }

        select firstonly listsTable where listsTable.ListId == FrequentlyBoughtTogetherListId;
        if (!listsTable)
        {
            listsTable.ListId = FrequentlyBoughtTogetherListId;
            listsTable.ListTitle = "@Retail:RecoListTypeCart";
            listsTable.ListType = RetailRecoListTypeBase::Cart;
            listsTable.insert();
        }

        select firstonly listsTable where listsTable.ListId == PeopleAlsoBuyListId;
        if (!listsTable)
        {
            listsTable.ListId = PeopleAlsoBuyListId;
            listsTable.ListTitle = "@Retail:RecoListTypePeopleAlsoBuy";
            listsTable.ListType = RetailRecoListTypeBase::PeopleAlsoBuy;
            listsTable.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>