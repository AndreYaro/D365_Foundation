<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerMatrixReportHelper_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerMatrixReportHelper_CN</c> class provides some helper methods for Ledger martix report
/// </summary>
class LedgerMatrixReportHelper_CN
{
    #Dimensions
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkExistDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a dimension attribute validate
    /// </summary>
    /// <param name="_localizedName">
    /// The localized dimension attribute name
    /// </param>
    /// <param name="_name">
    /// Dimension attribute field name
    /// </param>
    /// <returns>
    /// Return validation result
    /// </returns>
    public static boolean checkExistDimensionAttribute(Name _localizedName, str _name = "@SYS56299")
    {
        DimensionAttribute dimensionAttribute;

        boolean ret = true;

        if (_localizedName)
        {
            dimensionAttribute = DimensionAttribute::findByLocalizedName(
                _localizedName,
                false,
                currentUserLanguage());

            if (!dimensionAttribute)
            {
                //The value '%1' in field '%2' is not found in the related table '%3'.
                ret = checkFailed(strFmt(
                    "@GLS180006",
                    _localizedName,
                    _name,
                    tableStr(DimensionAttribute)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkExistDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a dimension value validate
    /// </summary>
    /// <param name="_dimensionValue">
    /// The dimension value control
    /// </param>
    /// <param name="_localizedName">
    /// The localized dimension attribute name
    /// </param>
    /// <param name="_name">
    /// Dimension value field name
    /// </param>
    /// <returns>
    /// Return validation result
    /// </returns>
    public static boolean checkExistDimensionValue(
        DimensionValue  _dimensionValue,
        Name            _localizedName,
        str             _name = "@SYS135846")
    {
        DimensionAttribute  dimensionAttribute;
        Common              common;

        boolean ret = true;

        if (_dimensionValue)
        {
            dimensionAttribute = DimensionAttribute::findByLocalizedName(
                _localizedName,
                false,
                currentUserLanguage());

            if (dimensionAttribute)
            {
                DimensionAttributeValue dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(dimensionAttribute, _dimensionValue);
                if (dimAttrValue)
                {
                    common = dimAttrValue.getEntityInstance();
                }
                if (!dimAttrValue || !common)
                {
                    //The value '%1' in field '%2' is not found in the related table '%3'.
                    ret = checkFailed(strFmt(
                        "@GLS180006",
                        _dimensionValue,
                        _name,
                        dimensionAttribute.BackingEntityTableName));
                }
            }
            else
            {
                //Please choose a value for "Dimension type" first!
                ret = checkFailed("@GLS100015");
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionValueLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the look-up interaction for the individual dimension value lookup controls.
    /// </summary>
    /// <param name="_dimensionValueControl">
    /// The <c>FormStringControl</c> enumeration value that triggers this event.
    /// </param>
    /// <param name="_localizedName">
    /// The localized dimension attribute name
    /// </param>
    /// <param name="_promptErrorMessage">
    /// Whether prompt the error message if the dimension type is empty.
    /// </param>
    public static void dimensionValueLookup(
        FormStringControl   _dimensionValueControl,
        Name                _localizedName,
        boolean             _promptErrorMessage = false)
    {
        Query                   query = new Query();
        SysTableLookup          sysTableLookup;
        QueryBuildDataSource    qbds;

        DimensionAttribute      dimensionAttribute;
        RecId                   dimensionAttributeId;
        DataAreaId              dataAreaId = curext();

        if (_localizedName)
        {
            dimensionAttribute      = DimensionAttribute::findByLocalizedName(_localizedName, false, currentUserLanguage());
            dimensionAttributeId    = dimensionAttribute.RecId;
        }

        if (dimensionAttributeId)
        {
            sysTableLookup = SysTableLookup::newParameters(DimensionCache::instance().dimensionAttributeBackingTable(dimensionAttributeId), _dimensionValueControl);

            sysTableLookup.addLookupfield(dimensionAttribute.ValueAttribute);
            LedgerDimensionTranslationLookupHelper::addLookupTranslation(sysTableLookup, dimensionAttributeId);
            sysTableLookup.addSelectionField(dimensionAttribute.NameAttribute);

            changeCompany(dataAreaId)
            {
                qbds = query.addDataSource(DimensionCache::instance().dimensionAttributeBackingTable(dimensionAttributeId));
                qbds.addOrderByField(DimensionCache::instance().dimensionAttributeValueField(dimensionAttributeId));
                DimensionAttribute::restrictQueryToCategorizedValues(qbds, dimensionAttributeId);
            }

            sysTableLookup.parmQuery(query);
            sysTableLookup.performFormLookup();
        }
        else if (_promptErrorMessage)
        {
            //Please choose a value for "Dimension type" first!
            checkFailed("@GLS100015");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromToDateForYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides if "From date" is not in the same natural year with "To date", change the "From date" to the "To date" natural year start date.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date
    /// </param>
    /// <param name="_toDate">
    /// The to date
    /// </param>
    /// <returns>
    /// The container of the changed from date and to date
    /// </returns>
    public static container getFromToDateForYear(FromDate _fromDate, ToDate _toDate)
    {
        if (year(_fromDate) != year(_toDate))
        {
            _fromDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _toDate);
        }

        return [_fromDate, _toDate];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>