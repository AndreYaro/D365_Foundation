<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanHCMReportController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanHCMReportController</c> class is responsible for modifying the query based on input by the user.
/// </summary>
public class BudgetPlanHCMReportController extends SrsReportRunController implements BatchRetryable
{
    BudgetPlanHCMReportContract budgetPlanHCMReportContract;
    BudgetPlanningProcess       budgetPlanningProcess;
    Query                       budgetPlanHCMReportQuery;
    BudgetPlanningProcessName   budgetPlanningProcessRange;
    BudgetPlanScenarioName      budgetPlanMonetaryScenarioRange;
    BudgetPlanScenarioName      budgetPlanQuantityScenarioRange;

    str                         budgetPlanLineDatasource;
    str                         hcmForecastScenarioDatasource;
    str                         budgetPlanScenarioDatasource;
    str                         budgetPlanHeaderDatasource;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        super();

        budgetPlanLineDatasource        = tableStr(BudgetPlanLine);
        hcmForecastScenarioDatasource   = tableStr(HcmForecastScenario);
        budgetPlanScenarioDatasource    = tableStr(BudgetPlanScenario);
        budgetPlanHeaderDatasource      = tableStr(BudgetPlanHeader);

        budgetPlanHCMReportQuery        = this.getFirstQuery();

        budgetPlanHCMReportContract     = this.parmReportContract().parmRdpContract();

        // Get the parameters from the contract.
        budgetPlanningProcessRange      = budgetPlanHCMReportContract.parmBudgetPlanningProcess();
        budgetPlanMonetaryScenarioRange = budgetPlanHCMReportContract.parmBudgetPlanMonetaryScenario();
        budgetPlanQuantityScenarioRange = budgetPlanHCMReportContract.parmBudgetPlanQuantityScenario();

        // Set the process range on both the monetary and quantity datasource.
        this.setBudgetPlanningProcessRange();

        // Clearing ranges for the budget scenarios
        // before apply the ranges in setBudgetPlanQuantityScenarioRange and setBudgetPlanMonetaryScenarioRange method.
        budgetPlanHCMReportQuery.dataSourceName(tableStr(HcmPositionForecastScenario)).clearRanges();

        // Now set the individual scenario ranges.
        this.setBudgetPlanMonetaryScenarioRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOrCreateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a budget plan scenario to a range for a given <c>QueryBuildDataSource</c>.
    /// </summary>
    /// <param name="_budgetPlanScenarioDataSource">The <c>QueryBuildDataSource</c> object.</param>
    /// <param name="_budgetPlanScenarioRecId">The <c>BudgetPlanScenarioRecId</c> that uniquely identitifies the <c>BudgetPlanScenario</c>.</param>
    /// <returns>The <c>QueryBuildRange</c> object.</returns>
    protected QueryBuildRange addOrCreateRange(QueryBuildDataSource _budgetPlanScenarioDataSource, BudgetPlanScenarioRecId _budgetPlanScenarioRecId)
    {
        QueryBuildRange range;

        range = SysQuery::findOrCreateRange(_budgetPlanScenarioDataSource, fieldNum(HcmForecastScenario, BudgetPlanScenario));
        if (range.value())
        {
            _budgetPlanScenarioDataSource.addRange(fieldNum(HcmForecastScenario, BudgetPlanScenario)).value(SysQuery::value(_budgetPlanScenarioRecId));
        }
        else
        {
            range.value(SysQuery::value(_budgetPlanScenarioRecId));
        }

        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanMonetaryScenarioRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range to the monetary scenario selected by the user.
    /// </summary>
    protected void setBudgetPlanMonetaryScenarioRange()
    {
        BudgetPlanScenario   budgetPlanScenario;
        QueryBuildDataSource budgetPlanMonetaryScenarioDataSource;

        budgetPlanMonetaryScenarioDataSource = budgetPlanHCMReportQuery.dataSourceName(hcmForecastScenarioDatasource);

        if (budgetPlanMonetaryScenarioDataSource != null)
        {
            select firstonly RecId from budgetPlanScenario
                where budgetPlanScenario.Name == budgetPlanMonetaryScenarioRange;

            this.addOrCreateRange(budgetPlanMonetaryScenarioDataSource, budgetPlanScenario.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanningProcessRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range to the budget planning process selected by the user.
    /// </summary>
    protected void setBudgetPlanningProcessRange()
    {
        QueryBuildDataSource    localHcmForecastScenarioDataSource = budgetPlanHCMReportQuery.dataSourceName(hcmForecastScenarioDatasource);
        QueryBuildRange         range;

        if (localHcmForecastScenarioDataSource != null)
        {
            select firstonly RecId from budgetPlanningProcess
                where budgetPlanningProcess.Name == budgetPlanningProcessRange;

            range = SysQuery::findOrCreateRange(localHcmForecastScenarioDataSource, fieldNum(HcmForecastScenario, BudgetPlanningProcess));
            range.value(SysQuery::value(budgetPlanningProcess.RecId));
            range.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BudgetPlanHCMReportController controller = new BudgetPlanHCMReportController();

        controller.parmArgs(_args);

        if (BudgetLinkPositionToMultipleForecastDetailsFlight::instance().isEnabled())
        {
            controller.parmReportName(ssrsReportStr(BudgetPlanHCMReportV2, Report));
        }
        else
        {
            controller.parmReportName(ssrsReportStr(BudgetPlanHCMReport, Report));
        }

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>