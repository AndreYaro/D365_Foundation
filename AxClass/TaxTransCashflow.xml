<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransCashflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[ExportMetadata(classStr(LedgerCovIDocument), tableStr(TaxTrans)), ExportAttribute(identifierStr(Dynamics.AX.Application.LedgerCovIDocument))]
internal class TaxTransCashflow implements LedgerCovIDocument, LedgerCovIDocumentSingleTransactionScope
{
    Map taxPeriodMap = new Map(Types::String, Types::Date);

    private LedgerCovContext ledgerCovContext;
    private SysInstrumentationProgressLogger progressLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateCashFlow</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void generateCashFlow(AllNew _allNew)
    {
        this.init();

        if (LedgerCovDocumentSingleTransactionScopeKillSwitchFlight::isEnabled())
        {
            this.generateCashFlowSetBased(_allNew);
        }
        else
        {
            if (FeatureStateProvider::isFeatureEnabled(TaxTransCashflowEnableFeature::instance()))
            {
                this.generateCashFlowForProcessSet(_allNew);
                this.deleteCompletedRows();
            }
            else
            {
                this.deleteExistingRows();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        progressLogger = this.createProgressLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void generateCashFlowForProcessSet(AllNew _allNew)
    {
        const int SetSize = 1000;

        TmpDataAreaRecIdFilter taxPeriodLineFilter;
        this.determineTaxPeriodLineFilter(taxPeriodLineFilter, this.determineFromDate(), this.determineToDate());

        TmpDataAreaRecIdFilter taxTransFilter;
        this.determineTaxTransFilter(taxTransFilter, taxPeriodLineFilter);

        TmpDataAreaRecIdFilter taxTransProcesFilter;
        this.determineTaxTransProcessFilter(_allNew, taxTransProcesFilter, taxTransFilter);

        TmpDataAreaRecIdFilter taxTransProcessFilterSet;

        int i = 0;

        while select taxTransProcesFilter
            order by taxTransProcesFilter.RefRecId
        {
            i++;

            taxTransProcessFilterSet.RefDataAreaId = taxTransProcesFilter.RefDataAreaId;
            taxTransProcessFilterSet.RefTableId = taxTransProcesFilter.RefTableId;
            taxTransProcessFilterSet.RefRecId = taxTransProcesFilter.RefRecId;
            taxTransProcessFilterSet.doInsert();

            if (i == SetSize)
            {
                this.processCashFlowForProcessSet(taxTransProcessFilterSet);

                i = 0;

                delete_from taxTransProcessFilterSet;
            }

        }

        if (i > 0)
        {
            this.processCashFlowForProcessSet(taxTransProcessFilterSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashFlowForProcessSet</Name>
				<Source><![CDATA[
    private void processCashFlowForProcessSet(TmpDataAreaRecIdFilter _taxTransProcessFilterSet)    
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowTaxAuthority))
        {
            System.Exception exception;
            RecId taxTransRecId;
            try
            {
                TaxTrans taxTrans;

                ttsbegin;

                LedgerCoverage ledgerCoverage = LedgerCoverage::construct(taxTrans, NoYes::Yes);

                while select TaxDirection, TaxPeriod, TransDate, TaxCode, CurrencyCode, TaxAmountCur, TaxInCostPriceCur, RecId
                    from taxTrans
                    join _taxTransProcessFilterSet
                        where taxTrans.RecId == _taxTransProcessFilterSet.RefRecId
                {
                    taxTransRecId = taxTrans.RecId;
                    this.processTaxTrans(ledgerCoverage, taxTrans);

                    LedgerCov::deleteForTransTableIdAndFilter(tableNum(TaxTrans), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                    ledgerCoverage.insertDatabase();

                    LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(TaxTrans), ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                    this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(TaxTrans), taxTransRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(TaxTrans), taxTransRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initLedgerCovContext(LedgerCovContext _ledgerCovContext)
    {
        this.ledgerCovContext = _ledgerCovContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessExecutionMessage</Name>
				<Source><![CDATA[
    private void logProcessExecutionMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (ledgerCovContext != null && ledgerCovContext.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(ledgerCovContext.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingRows</Name>
				<Source><![CDATA[
    private void deleteExistingRows()
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            LedgerCov::deleteForTransTableId(tableNum(TaxTrans));
            LedgerCovDocument::deleteForTransTableId(tableNum(TaxTrans));

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedRows</Name>
				<Source><![CDATA[
    private void deleteCompletedRows()
    {
        TmpDataAreaRecIdFilter taxPeriodLineFilter;
        this.determineTaxPeriodLineFilter(taxPeriodLineFilter, this.determineFromDate(), this.determineToDate());

        TmpDataAreaRecIdFilter taxTransFilter;
        this.determineTaxTransFilter(taxTransFilter, taxPeriodLineFilter);

        #OCCRetryCount
        try
        {
            ttsbegin;

            this.deleteCompletedLedgerCovRows(taxTransFilter);
            this.deleteCompletedLedgerCovDocumentRows(taxTransFilter);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                sleep(xSession::currentRetryCount() * backOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovRows(TmpDataAreaRecIdFilter _taxTransFilter)
    {
        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(TaxTrans)
                notexists join _taxTransFilter
                    where ledgerCov.TransTableId == tableNum(TaxTrans)
                        && ledgerCov.TransRecId == _taxTransFilter.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCompletedLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteCompletedLedgerCovDocumentRows(TmpDataAreaRecIdFilter _taxTransFilter)
    {
        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        delete_from ledgerCovDocument
            where ledgerCovDocument.TransTableId == tableNum(TaxTrans)
                notexists join _taxTransFilter
                    where ledgerCovDocument.TransTableId == tableNum(TaxTrans)
                        && ledgerCovDocument.TransRecId == _taxTransFilter.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateCashFlowSetBased</Name>
				<Source><![CDATA[
    private void generateCashFlowSetBased(AllNew _allNew)
    {
        #OCCRetryCount
        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::ActivityNameCashFlowTaxAuthority))
        {
            System.Exception exception;
            RecId taxTransRecId;
            try
            {
                TaxTrans taxTrans;

                ttsbegin;

                if (FeatureStateProvider::isFeatureEnabled(TaxTransCashflowEnableFeature::instance()))
                {
                    LedgerCoverage ledgerCoverage = LedgerCoverage::construct(taxTrans, NoYes::Yes);

                    TmpDataAreaRecIdFilter taxPeriodLineFilter;
                    this.determineTaxPeriodLineFilter(taxPeriodLineFilter, this.determineFromDate(), this.determineToDate());

                    TmpDataAreaRecIdFilter taxTransFilter;
                    this.determineTaxTransFilter(taxTransFilter, taxPeriodLineFilter);

                    TmpDataAreaRecIdFilter taxTransProcesFilter;
                    this.determineTaxTransProcessFilter(_allNew, taxTransProcesFilter, taxTransFilter);

                    while select TaxDirection, TaxPeriod, TransDate, TaxCode, CurrencyCode, TaxAmountCur, TaxInCostPriceCur, RecId
                        from taxTrans
                        join taxTransProcesFilter
                        where taxTrans.RecId == taxTransProcesFilter.RefRecId
                    {
                        taxTransRecId = taxTrans.RecId;
                        this.processTaxTrans(ledgerCoverage, taxTrans);
                    }

                    this.deleteLedgerCovRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows(), taxTransFilter);
                    ledgerCoverage.insertDatabase();

                    this.deleteLedgerCovDocumentRows(_allNew, ledgerCoverage.parmUpdatedCashFlowDocumentRows(), taxTransFilter);
                    this.insertLedgerCovDocumentRows(ledgerCoverage.parmUpdatedCashFlowDocumentRows());
                }
                else
                {
                    this.deleteLedgerCovRows(AllNew::Total, null, null);
                    this.deleteLedgerCovDocumentRows(AllNew::Total, null, null);
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    int backOffWait = RandomGenerate::construct().randomInt(50, 1000);
                    sleep(xSession::currentRetryCount() * backOffWait);
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }

            #StandardRetryCatchBlock

            catch (Exception)
            {
                this.logProcessExecutionMessage(Exception::Error, strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedError", this.getDocumentName(), this.getDocumentNum(tableNum(TaxTrans), taxTransRecId), exception.Message));
                progressLogger.logError(strFmt("@CashFlowManagement:CashFlowGenerateUnexpectedErrorLocked", identifierStr(TaxTrans), taxTransRecId, exception.Message));

                exceptionTextFallThrough();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineFromDate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TransDate determineFromDate()
    {
        const int NumberOfDaysInThePast = 100;

        return DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - NumberOfDaysInThePast;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineToDate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TransDate determineToDate()
    {
        const int NumberOfDaysInTheFuture = 60;

        return DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) + NumberOfDaysInTheFuture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxPeriodLineFilter</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void determineTaxPeriodLineFilter(
        TmpDataAreaRecIdFilter _taxPeriodLineFilter,
        TransDate _fromDate,
        TransDate _toDate)
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            DataAreaId currentCompany = curExt();
            TableId taxReportPeriodTableId = tableNum(TaxReportPeriod);

            TaxReportPeriod taxPeriodLine;
            insert_recordset _taxPeriodLineFilter (RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, taxReportPeriodTableId, RecId
                from taxPeriodLine
                    where taxPeriodLine.ToDate >= _fromDate
                        && taxPeriodLine.FromDate <= _toDate;

            ttscommit;
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter, TmpDataAreaRecIdFilter _taxTransFilter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCov::deleteForTransTableId(tableNum(TaxTrans));
        }
        else
        {
            this.deleteLedgerCovRowsForNew(_filter, _taxTransFilter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovRowsForNew</Name>
				<Source><![CDATA[
    private void deleteLedgerCovRowsForNew(TmpDataAreaRecIdFilter _filter, TmpDataAreaRecIdFilter _taxTransFilter)
    {
        LedgerCov::deleteForTransTableIdAndFilter(tableNum(TaxTrans), _filter);

        LedgerCov ledgerCov = LedgerCov::initializeForSetBasedDelete();

        delete_from ledgerCov
            where ledgerCov.TransTableId == tableNum(TaxTrans)
                notexists join _taxTransFilter
                    where ledgerCov.TransTableId == tableNum(TaxTrans)
                        && ledgerCov.TransRecId == _taxTransFilter.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRows(AllNew _allNew, TmpDataAreaRecIdFilter _filter, TmpDataAreaRecIdFilter _taxTransFilter)
    {
        if (_allNew == AllNew::Total)
        {
            LedgerCovDocument::deleteForTransTableId(tableNum(TaxTrans));
        }
        else
        {
            this.deleteLedgerCovDocumentRowsNew(_filter, _taxTransFilter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovDocumentRowsNew</Name>
				<Source><![CDATA[
    private void deleteLedgerCovDocumentRowsNew(TmpDataAreaRecIdFilter _filter, TmpDataAreaRecIdFilter _taxTransFilter)
    {
        LedgerCovDocument::deleteForTransTableIdAndFilter(tableNum(TaxTrans), _filter);

        LedgerCovDocument ledgerCovDocument = LedgerCovDocument::initializeForSetBasedDelete();

        delete_from ledgerCovDocument
                where ledgerCovDocument.TransTableId == tableNum(TaxTrans)
                    notexists join _taxTransFilter
                        where ledgerCovDocument.TransTableId == tableNum(TaxTrans)
                            && ledgerCovDocument.TransRecId == _taxTransFilter.RefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCovDocumentRows</Name>
				<Source><![CDATA[
    private void insertLedgerCovDocumentRows(TmpDataAreaRecIdFilter _filter)
    {
        LedgerCovDocument ledgerCovDocument;
        TaxTrans taxTrans;
        TaxReportPeriod taxPeriodLine;
        TaxPeriodHead taxPeriod;
        TaxAuthorityAddress taxAuthority;

        TableId taxTransTableId = tableNum(TaxTrans);
        LedgerCovDocumentType type = LedgerCovDocumentType::TaxTrans;
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        insert_recordset ledgerCovDocument
            (TransTableId,
            TransRecId,
            TransDate,
            Type,
            AccountingCurrency,
            Voucher,
            Number,
            DueDate,
            AccountNumber,
            AccountName)
            select taxTransTableId,
                RecId,
                TransDate,
                type,
                accountingCurrency,
                Voucher,
                TaxCode
            from taxTrans
            join _filter
                where taxTrans.TableId == _filter.RefTableId
                    && taxTrans.RecId == _filter.RefRecId
            join ToDate
                from taxPeriodLine
                where taxTrans.TaxPeriod == taxPeriodLine.TaxPeriod
                    && taxTrans.TransDate >= taxPeriodLine.FromDate
                    && taxTrans.TransDate <= taxPeriodLine.ToDate
            join taxPeriod
                where taxPeriod.TaxPeriod == taxPeriodLine.TaxPeriod
            join TaxAuthority, Name
                from taxAuthority
                where taxAuthority.TaxAuthority == taxPeriod.TaxAuthority;

    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxTrans</Name>
				<Source><![CDATA[
    private void processTaxTrans(LedgerCoverage _ledgerCoverage, TaxTrans _taxTrans)
    {
        if ((_taxTrans.TaxDirection == TaxDirection::OutgoingTax
            || !TaxParameters::find().PurchTaxOnOperations))
        {
            TaxDirection taxDirection = _taxTrans.TaxDirection;
            TaxPeriod taxPeriod = _taxTrans.TaxPeriod;
            TransDate transDate = _taxTrans.TransDate;
            TaxCode taxCode = _taxTrans.TaxCode;
            CurrencyCode currencyCode = _taxTrans.CurrencyCode;
            TaxAmountCur taxAmountCur = _taxTrans.TaxAmountCur;
            TaxAmountCur taxInCostPriceCur = _taxTrans.TaxInCostPriceCur;
            RefRecId taxTransRecId = _taxTrans.RecId;

            Common taxTransWithOnlyTableIdRecId = _taxTrans;

            _ledgerCoverage.init(taxTransWithOnlyTableIdRecId);

            LedgerDimensionAccount taxLedgerDimension = this.determineTaxLedgerDimension(taxTransRecId);
            DimensionDefault taxDimensionDefault = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(taxLedgerDimension);
            taxLedgerDimension = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(taxLedgerDimension);

            TransDate dueDate = this.determineDueDate(taxPeriod, transDate);
            TransDate paymentDueDate = this.adjustDueDateByClearingPeriod(_ledgerCoverage, taxPeriod, dueDate);

            TaxAuthorityAddress taxAuthority = this.findTaxAuthority(taxPeriod);

            LedgerPostingType summaryPostingType = this.determineSummaryPostingType(taxAuthority.AccountNum);

            LedgerDimensionDefaultAccount summaryLedgerDimension = this.determineSummaryLedgerDimension(
                taxAuthority.AccountNum,
                taxLedgerDimension);

            //Payment summary
            _ledgerCoverage.updateSum(
                paymentDueDate,
                summaryPostingType,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(summaryLedgerDimension).RecId,
                taxDimensionDefault,
                currencyCode,
                -(taxAmountCur - taxInCostPriceCur));

            LedgerPostingType clearingPostingType = this.determineClearingPostingType(taxAuthority.AccountNum);

            LedgerDimensionDefaultAccount clearingLedgerDimension = this.determineClearingLedgerDimension(
                taxAuthority.AccountNum,
                taxCode);

            //Payment Clearing
            _ledgerCoverage.updateSum(
                paymentDueDate,
                clearingPostingType,
                LedgerDimensionFacade::getMainAccountFromLedgerDimension(clearingLedgerDimension).RecId,
                taxDimensionDefault,
                currencyCode,
                taxAmountCur - taxInCostPriceCur);

            _ledgerCoverage.endCov();

        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSummaryLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount determineSummaryLedgerDimension(
        VendAccount _accountNum, 
        LedgerDimensionAccount _taxLedgerDimension)
    {
        LedgerDimensionDefaultAccount summaryLedgerDimension;

        if (_accountNum != '')
        {
            summaryLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(
                VendLedgerAccounts::summaryLedgerDimension(_accountNum),
                _taxLedgerDimension);
        }
        else
        {
            summaryLedgerDimension = _taxLedgerDimension;
        }

        return summaryLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineClearingLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount determineClearingLedgerDimension(
        VendAccount _accountNum, 
        TaxCode _taxCode)
    {
        LedgerDimensionDefaultAccount clearingLedgerDimension;

        if (_accountNum != '')
        {
            clearingLedgerDimension = LedgerDimensionFacade::serviceLedgerDimensionFromLedgerDims(
                VendLedgerAccounts::clearingLedgerDimension(_accountNum, VendParameters::find().PostingProfile));
        }
        else
        {
            clearingLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(
                TaxLedgerAccountGroup::clearingLedgerDimension(_taxCode));
        }

        return clearingLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSummaryPostingType</Name>
				<Source><![CDATA[
    private LedgerPostingType determineSummaryPostingType(VendAccount _accountNum)
    {
        LedgerPostingType summaryPostingType;

        if (_accountNum != '')
        {
            summaryPostingType = LedgerPostingType::VendBalance;
        }
        else
        {
            summaryPostingType = LedgerPostingType::Tax;
        }

        return summaryPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineClearingPostingType</Name>
				<Source><![CDATA[
    private LedgerPostingType determineClearingPostingType(VendAccount _accountNum)
    {
        LedgerPostingType clearingPostingType;

        if (_accountNum != '')
        {
            clearingPostingType = LedgerPostingType::VendBalance;
        }
        else
        {
            clearingPostingType = LedgerPostingType::Tax;
        }

        return clearingPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxAuthority</Name>
				<Source><![CDATA[
    private TaxAuthorityAddress findTaxAuthority(TaxPeriod _taxPeriod)
    {
        TaxAuthorityAddress taxAuthority;
        TaxPeriodHead taxPeriodHeader;

        select firstonly AccountNum
            from taxAuthority
            join taxPeriodHeader
                where taxPeriodHeader.TaxAuthority == taxAuthority.TaxAuthority
                    && taxPeriodHeader.TaxPeriod == _taxPeriod;

        return taxAuthority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDueDate</Name>
				<Source><![CDATA[
    private TransDate determineDueDate(TaxPeriod _taxPeriod, TransDate _transDate)
    {
        TransDate toDate = this.findTaxReportPeriodToDate(_taxPeriod, _transDate);

        return this.adjustDateInPast(toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxReportPeriodToDate</Name>
				<Source><![CDATA[
    private TransDate findTaxReportPeriodToDate(TaxPeriod _taxPeriod, TransDate _transDate)
    {
        TransDate toDate;
        str key = _taxPeriod + ':' + any2Str(_transDate);

        if (taxPeriodMap.exists(key))
        {
            toDate = taxPeriodMap.lookup(key);
        }
        else
        {
            TaxReportPeriod taxPeriodLine = TaxReportPeriod::find(_taxPeriod, _transDate);
            
            toDate = taxPeriodLine.ToDate;

            taxPeriodMap.insert(key, toDate);
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDueDateByClearingPeriod</Name>
				<Source><![CDATA[
    private TransDate adjustDueDateByClearingPeriod(LedgerCoverage _ledgerCoverage, TaxPeriod _taxPeriod, TransDate _dueDate)
    {
        TaxPeriodHead taxPeriodHeader = TaxPeriodHead::find(_taxPeriod);
        PaymTermId clearingPeriod = taxPeriodHeader.PaymentCode;

        TransDate paymentDate = _ledgerCoverage.adjustDueDateByClearingPeriod(_dueDate, clearingPeriod);
           
        return this.adjustDateInPast(paymentDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDateInPast</Name>
				<Source><![CDATA[
    private TransDate adjustDateInPast(TransDate _transDate)
    {
        TransDate transDate = _transDate;

        date systemDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (transDate <= systemDate)
        {
            transDate = systemDate;
        }

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount determineTaxLedgerDimension(RefRecId _taxTransRecId)
    {
        TaxTransGeneralJournalAccountEntryView taxTransGeneralJournalAccountEntryView;

        select firstonly LedgerDimension 
            from taxTransGeneralJournalAccountEntryView
            where taxTransGeneralJournalAccountEntryView.TaxTrans == _taxTransRecId
                && taxTransGeneralJournalAccountEntryView.TaxTransRelationship == TaxTransRelationshipType::Tax;

        return taxTransGeneralJournalAccountEntryView.LedgerDimension;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxTransFilter</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void determineTaxTransFilter(TmpDataAreaRecIdFilter _taxTransFilter, TmpDataAreaRecIdFilter _taxPeriodLineFilter)
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            DataAreaId currentCompany = curExt();
            TableId taxTransTableId = tableNum(TaxTrans);

            TaxTrans taxTrans;
            TaxReportPeriod taxPeriodLine;

            insert_recordset _taxTransFilter (RefDataAreaId, RefTableId, RefRecId)
            select currentCompany, taxTransTableId, RecId
            from taxTrans
                join taxPeriodLine
                where taxTrans.TaxPeriod == taxPeriodLine.TaxPeriod
                    && taxTrans.TransDate >= taxPeriodLine.FromDate
                    && taxTrans.TransDate <= taxPeriodLine.ToDate
                    && taxTrans.TaxRepCounter >= taxPeriodLine.VersionNum
                    && taxTrans.TaxRepCounter <= taxPeriodLine.VersionNum
                    && taxTrans.Source != TaxModuleType::Tax
                    && (taxTrans.TaxAmountCur != 0
                        || (taxTrans.TaxAmount != 0)
                        || taxTrans.TaxBaseQty != 0
                        || taxTrans.TaxBaseAmount != 0
                        || taxTrans.TaxBaseAmountCur != 0
                        || taxTrans.TaxInCostPrice != 0
                        || taxTrans.TaxInCostPriceMST != 0
                        || taxTrans.TaxInCostPriceCur != 0)
                    && (taxTrans.TaxDirection == TaxDirection::IncomingTax
                        || TaxTrans.TaxDirection == TaxDirection::OutgoingTax)
                join _taxPeriodLineFilter
                    where _taxPeriodLineFilter.RefRecId == taxPeriodLine.RecId;

            ttscommit;
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxTransProcessFilter</Name>
				<Source><![CDATA[
    private void determineTaxTransProcessFilter(AllNew _allNew, TmpDataAreaRecIdFilter _taxTransProcessFilter, TmpDataAreaRecIdFilter _taxTransFilter)
    {
        #OCCRetryCount
        try
        {
            ttsbegin;

            DataAreaId currentCompany = curExt();
            TableId taxTransTableId = tableNum(TaxTrans);

            LedgerCov ledgerCov;

            if (_allNew == AllNew::New)
            {
                insert_recordset _taxTransProcessFilter (RefDataAreaId, RefTableId, RefRecId)
                select currentCompany, taxTransTableId, RefRecId
                from _taxTransFilter
                    notexists join ledgerCov
                        where ledgerCov.TransTableId == tableNum(TaxTrans)
                            && ledgerCov.TransRecid == _taxTransFilter.RefRecId;
            }
            else
            {
                insert_recordset _taxTransProcessFilter (RefDataAreaId, RefTableId, RefRecId)
                select RefDataAreaId, RefTableId, RefRecId
                from _taxTransFilter;
            }

            ttscommit;
        }

        #StandardRetryCatchBlock
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentName</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public str getDocumentName()
    {
        return "@CashManagement:CashBankMgmt_CashFlow_EntityField_TaxTransaction";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentNum</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public Name getDocumentNum(TableId _tableId, RecId _recId)
    {
        Name documentNum;

        if (_tableId == tableNum(TaxTrans))
        {
            TaxTrans taxTrans;
            select firstonly taxTrans
                where taxTrans.RecId == _recId;

            if (taxTrans)
            {
                documentNum = taxTrans.sourceInvoiceNo();
            }
        }

        return documentNum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>