<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendTransOpenPerDateDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendTransOpenPerDateDP</c> class contains the logic that is specific to the
///    <c>VendTransOpenPerDate</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(VendTransOpenStatementQuery)),
    SRSReportParameterAttribute(classstr(VendTransOpenPerDateContract))
]
public class VendTransOpenPerDateDP extends SrsReportDataProviderPreProcessTempDB
{
    private TransDate       transDate;
    private Query           query;
    private CustVendACType  vendActType;
    private CompanyInfo     companyInfo;
    private Phone           companyPhoneNumber;
    private Phone           vendPhoneNumber;
    private Name            vendName;
    private TeleFax         senderTeleFax;
    private Email           senderEmail;
    private TransDate       excludeFutureSettlementDate;

    private LogisticsAddressing             companyPostalAddress;
    private LogisticsAddressing             vendPostalAddress;
    private CustVendTransDetails            vendTransDetails;
    private VendTransOpenPerDateContract    vendTransOpenPerDateContract;
    protected CustVendTransOpenStmtTmp      vendTransOpenStmtTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the settled <c>AmountCur</c> and settled <c>AmountMST</c> amounts based on a
    /// <c>VendTrans</c> record.
    /// </summary>
    /// <param name="_vendTrans">
    /// The <c>VendTrans</c> record that is used for the calculation.
    /// </param>
    /// <returns>
    /// A <c>Container</c> that contains settled <c>AmountCur</c> and settled <c>AmountMST</c> .
    /// </returns>
    protected Container calculateAmounts(VendTrans _vendTrans)
    {
        AmountCur settledAmountCur;
        AmountMST settledAmountMST;

        this.initializeVendTransDetails(_vendTrans);

        [settledAmountCur, settledAmountMST] = vendTransDetails.amountCurMSTSettled();

        return [settledAmountCur, settledAmountMST];
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTableRecordChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies that a <c>VendTable</c> record is modified when you execute the
    /// query.
    /// </summary>
    /// <param name="_vendTable">
    /// The <c>VendTable</c> record that is used to obtain vendor information.
    /// </param>
    /// <remarks>
    /// The subclasses can override this method to perform any custom logic.
    /// </remarks>
    protected void vendTableRecordChanged(VendTable _vendTable)
    {
        VendName = _vendTable.name();
        vendPostalAddress   = DirParty::getAddress(_vendTable.Party);
        vendPhoneNumber     = _vendTable.phone();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpenTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether there are any open transactions based on the passed in buffer.
    /// </summary>
    /// <param name="_vendTrans">
    /// The <c>VendTrans</c> record which is used to determine whether there are any open transactions.
    /// </param>
    /// <returns>
    /// true if there is any open transaction; otherwise, false.
    /// </returns>
    protected boolean existsOpenTransactions(VendTrans _vendTrans)
    {
        return (vendTransOpenStmtTmp.BalanceDebitAmountMST || vendTransOpenStmtTmp.BalanceCreditAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTableID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the appropriate table id based on the type of the report.
    /// </summary>
    /// <returns>
    ///    The appropriate table id.
    /// </returns>
    private TableId getVendTableID()
    {
        TableId tableId = tableNum(VendTable);

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the <c>CustVendTransOpenStmtTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data for the report in the <c>CustVendTransOpenStmtTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(CustVendTransOpenStmtTmp))
    ]
    public CustVendTransOpenStmtTmp getVendTransOpenStmtTmp()
    {
        select  vendTransOpenStmtTmp;
        return  vendTransOpenStmtTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTransTableID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the appropriate transaction table id based on the type of the report.
    /// </summary>
    /// <returns>
    ///    The appropriate transaction table id.
    /// </returns>
    private TableId getVendTransTableID()
    {
        TableId tableId = tableNum(VendTrans);

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlementSumDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Date used to set how far forward we look for settlements.
    /// </summary>
    protected date settlementSumDate()
    {
        VendTransOpenPerDateContract contract = this.parmDataContract() as VendTransOpenPerDateContract;
        PerDate perDate = contract.parmPerDate();
        NoYes excludeFutureSettlements = contract.parmExcludeFutureSettlements();

        return excludeFutureSettlements ? perDate : dateMax();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TransDate</c> value from the contract class.
    /// </summary>
    /// <returns>
    /// The <c>TransDate</c> value from the contract.
    /// </returns>
    protected TransDate getPerDate()
    {
        vendTransOpenPerDateContract = this.parmDataContract() as VendTransOpenPerDateContract;

        return vendTransOpenPerDateContract.parmPerDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the report parameter values from the contract class.
    /// </summary>
    protected void getReportParameters()
    {
        query       = this.parmQuery();
        transDate   = this.getPerDate();
        excludeFutureSettlementDate = this.settlementSumDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeVendTransDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines which helper class to instantiate based on the report type.
    /// </summary>
    /// <param name="_vendTrans">
    ///    The vendor transaction record which is used to instantiate
    ///    the class.
    /// </param>
    private void initializeVendTransDetails(VendTrans _vendTrans)
    {
        vendTransDetails = new CustVendTransDetails(_vendTrans, excludeFutureSettlementDate);

        vendTransDetails.setCustVendTrans(_vendTrans);
        vendTransDetails.setTransDate(excludeFutureSettlementDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the <c>CustVendTransOpenStmtTmp</c> record.
    /// </summary>
    protected void insertVendTransOpenStmtTmp()
    {
        ttsBegin;
        vendTransOpenStmtTmp.insert();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query before it executes it.
    /// </summary>
    /// <remarks>
    /// The subclasses can override this method to perform any custom logic.
    /// </remarks>
    protected void modifyQuery()
    {
        VendTransOpenPerDateController::addQueryRanges(query, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the <c>Query</c> and makes necessary method calls to set the
    ///    <c>CustVendTransOpenStmtTmp</c> table fields and insert it.
    /// </summary>
    protected void processData()
    {
        QueryRun        qr = new QueryRun(query);
        CustVendTable   vendTable;
        CustVendTrans   vendTrans;

        while (qr.next())
        {
            if (qr.changed(this.getVendTableID()))
            {
                vendTable = qr.get(this.getVendTableID());
                this.vendTableRecordChanged(vendTable);
            }

            vendTrans = qr.get(this.getVendTransTableID());

            this.setVendTransOpenStmtTmp(vendTable, vendTrans);

            if (this.existsOpenTransactions(vendTrans))
            {
                this.insertVendTransOpenStmtTmp();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic of the report.
    /// </summary>
    public void processReport()
    {
        // Improve performance by getting company address and name
        // outside the loop.
        companyInfo = CompanyInfo::find();
        companyPostalAddress    = companyInfo.postalAddress().Address;
        companyPhoneNumber      = companyInfo.phone();
        senderTeleFax           = companyInfo.teleFax();
        senderEmail             = companyInfo.email();

        this.setUpReport();
        this.processData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVendTransOpenStmtTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>CustVendTransOpenStmtTmp</c> fields for the statement reports.
    /// </summary>
    /// <param name="_vendTable">
    /// The <c>vendTable</c> record from which the details about the vendor are obtained.
    /// </param>
    /// <param name="_vendTrans">
    /// The <c>VendTrans</c> record from which the details about the vendor transactions
    /// are obtained.
    /// </param>
    protected void setVendTransOpenStmtTmp(VendTable _vendTable, VendTrans _vendTrans)
    {
        AmountCur   settledAmountCur;
        AmountMST   settledAmountMST;

        vendTransOpenStmtTmp.clear();

        vendTransOpenStmtTmp.SenderCompanyName              = companyInfo.Name();
        vendTransOpenStmtTmp.SenderCompanyAddress           = companyPostalAddress;
        vendTransOpenStmtTmp.SenderPhoneNumber              = companyPhoneNumber;
        vendTransOpenStmtTmp.SenderVATNum                   = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, VendTransOpenPerDateContract.parmPerDate());
        vendTransOpenStmtTmp.SenderTaxRegistrationNumber    = companyInfo.CoRegNum;
        vendTransOpenStmtTmp.SenderRegNum                   = companyInfo.RegNum;
        vendTransOpenStmtTmp.SenderTeleFax                  = senderTeleFax;
        vendTransOpenStmtTmp.SenderEmail                    = senderEmail;

        vendTransOpenStmtTmp.RecipientCompanyName           = vendName;
        vendTransOpenStmtTmp.RecipientCompanyAddress        = vendPostalAddress;
        vendTransOpenStmtTmp.RecipientPhoneNumber           = vendPhoneNumber;
        vendTransOpenStmtTmp.RecipientVATNum                = _vendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, VendTransOpenPerDateContract.parmPerDate());

        #ISOCountryRegionCodes
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            vendTransOpenStmtTmp.RecipientEnterpriseCode        = _vendTable.CustVendTable::getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, VendTransOpenPerDateContract.parmPerDate());
        }

        vendTransOpenStmtTmp.AccountNum = _vendTable.AccountNum;
        vendTransOpenStmtTmp.TransDate  = _vendTrans.TransDate;
        vendTransOpenStmtTmp.Voucher    = _vendTrans.Voucher;
        vendTransOpenStmtTmp.Invoice    = _vendTrans.Invoice;

        vendTransOpenStmtTmp.Currency   = _vendTrans.CurrencyCode;
        vendTransOpenStmtTmp.AmountMST  = _vendTrans.AmountMST;
        vendTransOpenStmtTmp.AmountCur  = _vendTrans.AmountCur;

        [settledAmountCur, settledAmountMST] = this.calculateAmounts(_vendTrans);

        vendTransOpenStmtTmp.SettledAmountCur   = settledAmountCur;
        vendTransOpenStmtTmp.SettledAmountMST   = settledAmountMST;
        vendTransOpenStmtTmp.CustVendActType    = vendActType;

        AmountCur amountCurOpen;
        AmountMST amountMSTOpen;

        amountCurOpen = vendTransOpenStmtTmp.AmountCur - vendTransOpenStmtTmp.SettledAmountCur;
        amountMSTOpen = vendTransOpenStmtTmp.AmountMST - vendTransOpenStmtTmp.SettledAmountMST;

        vendTransOpenStmtTmp.TransText = _vendTrans.Txt;
        vendTransOpenStmtTmp.DueDate   = vendTransDetails.firstDueDate();

        vendTransOpenStmtTmp.ApprovedBy  = _vendTrans.Approver ? HcmWorker::worker2Name(_vendTrans.Approver) : '';
        vendTransOpenStmtTmp.MainAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(VendLedgerAccounts::summaryLedgerDimension(vendTransOpenStmtTmp.AccountNum, _vendTrans.PostingProfile));

        if ((amountCurOpen > 0 && _vendTrans.Correct == NoYes::No) ||
            (amountCurOpen < 0 && _vendTrans.Correct == NoYes::Yes))
        {
            vendTransOpenStmtTmp.BalanceDebitAmountCur  = amountCurOpen;
            vendTransOpenStmtTmp.BalanceDebitAmountMST  = amountMSTOpen;

            vendTransOpenStmtTmp.BalanceCreditAmountCur = 0;
            vendTransOpenStmtTmp.BalanceCreditAmountMST = 0;
        }
        else
        {
            vendTransOpenStmtTmp.BalanceDebitAmountCur  = 0;
            vendTransOpenStmtTmp.BalanceDebitAmountMST  = 0;

            vendTransOpenStmtTmp.BalanceCreditAmountCur = -1 * amountCurOpen;
            vendTransOpenStmtTmp.BalanceCreditAmountMST = -1 * amountMSTOpen;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the report type based on the datasource present in the query.
    /// </summary>
    private void setReportType()
    {
        vendActType = CustVendAcType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up the report parameters, query and report type.
    /// </summary>
    private void setupReport()
    {
        this.getReportParameters();

        this.setReportType();

        this.modifyQuery();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>