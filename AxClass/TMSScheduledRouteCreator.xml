<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSScheduledRouteCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TMSScheduledRouteCreator extends RunBaseBatch implements BatchRetryable
{
    TMSRouteSchedule    tmsRouteSchedule;
    RecId               routeScheduleRecId;
    container           activeDays;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
            routeScheduleRecId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///  ScheduledRoute route is created for a given date.
    /// </summary>
    /// <param name="_shipDateTime">
    ///  Date for when scheduledRoute route should be shipped.
    /// </param>
    protected void createRoute(utcDateTime _shipDateTime)
    {
        TMSRoute                tmsRoute;
        TMSRouteConfig          tmsRouteConfig;
        TMSRouteGuide           tmsRouteGuide;
        TMSRouteSegment         tmsRouteSegement;
        TMSRouteSegmentConfig   tmsRouteSegmentConfig;
        TMSHubMaster            originHub;
        TMSHubMaster            destHub;
        TMSSequence             sequence = 0;

        select firstOnly Name,RouteConfigCode from tmsRouteConfig
            where tmsRouteConfig.RecId      == tmsRouteSchedule.RefRecId
            &&    tmsRouteConfig.TableId    == tmsRouteSchedule.RefTableId
            outer join InventSiteId,InventLocationId,RouteGuideCode,RecId from tmsRouteGuide
                where tmsRouteGuide.RouteConfigCode == tmsRouteConfig.RouteConfigCode;

        ttsbegin;

        tmsRoute.setRouteCode();
        tmsRoute.RouteSchedule          = tmsRouteSchedule.RecId;
        tmsRoute.Description            = tmsRouteSchedule.Name;
        tmsRoute.RouteConfigCode        = tmsRouteConfig.RouteConfigCode;
        tmsRoute.RoutePlanName          = tmsRouteConfig.Name;
        tmsRoute.CurrencyCode           = CompanyInfoHelper::standardCurrency();
        tmsRoute.Name                   = tmsRouteGuide.RouteGuideCode;
        tmsRoute.RouteGuideRecId        = tmsRouteGuide.RecId;
        tmsRoute.InventSiteId           = tmsRouteGuide.InventSiteId;
        tmsRoute.InventLocationId       = tmsRouteGuide.InventLocationId;
        tmsRoute.ApptUTCDateTime        = _shipDateTime;
        tmsRoute.ShipUTCDateTime        = _shipDateTime;

        if (!tmsRoute.validateWrite())
        {
            throw error(strFmt("@TRX:TMSCannotInsertRecordInTable", tablePName(TMSRoute)));
        }
        else
        {
            tmsRoute.insert();
        }

        while select CarrierCode,CarrierServiceCode,ModeCode,RecId,RouteEndHubCode,RouteStartHubCode from tmsRouteSegmentConfig
            where tmsRouteSegmentConfig.RouteConfigCode == tmsRouteConfig.RouteConfigCode
        {
            sequence                                += 1;
            originHub                               = TMSHubMaster::find(tmsRouteSegmentConfig.RouteStartHubCode);
            destHub                                 = TMSHubMaster::find(tmsRouteSegmentConfig.RouteEndHubCode);

            tmsRouteSegement.clear();
            tmsRouteSegement.RouteCode              = tmsRoute.RouteCode;
            tmsRouteSegement.CurrencyCode           = tmsRoute.CurrencyCode;
            tmsRouteSegement.Sequence               = sequence;
            tmsRouteSegement.OriginName             = originHub.HubMasterCode;
            tmsRouteSegement.OriginHubCode          = originHub.HubMasterCode;
            tmsRouteSegement.OriginLocation         = originHub.Location;
            tmsRouteSegement.DestinationName        = destHub.HubMasterCode;
            tmsRouteSegement.DestinationHubCode     = destHub.HubMasterCode;
            tmsRouteSegement.DestinationLocation    = destHub.Location;
            tmsRouteSegement.CarrierCode            = tmsRouteSegmentConfig.CarrierCode;
            tmsRouteSegement.CarrierServiceCode     = tmsRouteSegmentConfig.CarrierServiceCode;
            tmsRouteSegement.ModeCode               = tmsRouteSegmentConfig.ModeCode;
            tmsRouteSegement.Manual                 = NoYes::No;
            tmsRouteSegement.TMSRouteSegmentConfig  = tmsRouteSegmentConfig.RecId;

            if (!tmsRouteSegement.validateWrite())
            {
                throw error(strFmt("@TRX:ErrorCreateSegmentsForRoute", tmsRoute.RouteCode));
            }

            tmsRouteSegement.insert();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActiveDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates a reference for which days of the week should a scheduledRoute be created for.
    /// </summary>
    /// <returns>
    ///  Returns a container with the active days within the scheduledRoute.
    /// </returns>
    private container getActiveDays()
    {
        return [tmsRouteSchedule.Monday,
                tmsRouteSchedule.Tuesday,
                tmsRouteSchedule.Wednesday,
                tmsRouteSchedule.Thursday,
                tmsRouteSchedule.Friday,
                tmsRouteSchedule.Saturday,
                tmsRouteSchedule.Sunday];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActiveRouteScheduleDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks to see if date is a part of a scheduledRoute's active days.
    /// </summary>
    /// <param name="_date">
    ///  Current date being evaluated.
    /// </param>
    /// <returns>
    ///  Returns true if date is on an active day, false otherwise.
    /// </returns>
    private boolean isActiveRouteScheduleDay(utcDateTime _date)
    {
        return conPeek(activeDays, dayOfWk(DateTimeUtil::date(_date)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteScheduleRecId</Name>
				<Source><![CDATA[
    public RecId parmRouteScheduleRecId(RecId _routeScheduleRecId = routeScheduleRecId)
    {
        routeScheduleRecId = _routeScheduleRecId;

        return routeScheduleRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        #TimeConstants

        utcDateTime     currentDate;
        int             weekDayCounter = 0;
        int             daysToSkip;

        tmsRouteSchedule = TMSRouteSchedule::find(routeScheduleRecId);

        try
        {
            // Assign first day in the scheduledRoute date range
            currentDate = tmsRouteSchedule.ActualStartUTCDateTime;

            // Retrieve active days
            activeDays = this.getActiveDays();

            // For the span of the scheduledRoute date range, create routes for active days
            while (currentDate <= tmsRouteSchedule.ActualEndUTCDateTime)
            {
                if (this.isActiveRouteScheduleDay(currentDate))
                {
                    this.createRoute(currentDate);
                }

                currentDate = DateTimeUtil::addDays(currentDate, 1);

                weekDayCounter++;

                // An entire week has passed, which in this context, a week is being considered as 7 days after the route schedule starting date
                if (weekDayCounter == #daysPerWeek)
                {
                    // Increase the date by the specified weekly interval
                    daysToSkip = #daysPerWeek * tmsRouteSchedule.WeeklyInterval;

                    if (daysToSkip > 0)
                    {
                        currentDate = DateTimeUtil::addDays(currentDate, daysToSkip);
                    }

                    // Reset the number of days to count back up to a week
                    weekDayCounter = 0;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch
        {
            throw error(strFmt("@TRX:ErrorRouteScheduleProcessing", tmsRouteSchedule.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion:
            [version, #CurrentList] = _packedClass;
            break;

            default:
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TMSScheduledRouteCreator construct()
    {
        return new TMSScheduledRouteCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@TRX:BatchDescriptionRouteScheduleProcessing";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        TMSScheduledRouteCreator   scheduledRoute;

        if (args.record())
        {
            scheduledRoute = TMSScheduledRouteCreator::newFromRouteSchedule(args.record());
        }
        else
        {
            scheduledRoute = TMSScheduledRouteCreator::construct();
        }

        if (scheduledRoute.prompt())
        {
            scheduledRoute.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromRouteSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates an instance of <c>TMSCreatScheduledRoute</c> from a route schedule.
    /// </summary>
    /// <param name="_routeSchedule">
    ///  Route schedule for creating a scheduledRoute.
    /// </param>
    /// <returns>
    ///  Returns an instance of the <c>TMSCreatScheduledRoute</c> class.
    /// </returns>
    public static TMSScheduledRouteCreator newFromRouteSchedule(TMSRouteSchedule _routeSchedule)
    {
        TMSScheduledRouteCreator   scheduledRoute;

        scheduledRoute = TMSScheduledRouteCreator::construct();
        scheduledRoute.runBase().getLast();
        scheduledRoute.parmRouteScheduleRecId(_routeSchedule.RecId);
        scheduledRoute.batchInfo().parmCaption(strFmt("@TRX:BatchCaptionRouteScheduleProcessing", _routeSchedule.Name));

        return scheduledRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>