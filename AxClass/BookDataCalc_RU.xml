<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookDataCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class BookDataCalc_RU extends RunBaseBatch
{
    SalesPurchBookTable_RU      bookTable;

    DialogField                 fromDateCtrl;
    DialogField                 toDateCtrl;
    DialogField                 closeBookCtrl;
    DialogField                 fullCheckCtrl;
    DialogField                 inclPrevPeriodsExpFactCtrl;

    TransDate                   fromDate;
    TransDate                   toDate;
    NoYes                       closeBook;
    NoYes                       fullCheck;

    RecordSortedList            recordSortedList;
    SalesPurchBookDataMap_RU    salesPurchBookData;
    BookTransCalc_RU            bookTransCalc;

    Integer                     logPoint;
    boolean                     bookTableMode;
    boolean                     closeBookCheck;
    SalesPurchBookRecId_RU      bookRecId;

    protected const int currentVersion = 5;

    #AviFiles
    #VATTransitionPeriod_RU

    SalesPurchBookLineNum_RU    lineNum;
    NoYes                       includePrevPeriodsExportFactures;
    NoYes                       outgoingVAT;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>begin</Name>
				<Source><![CDATA[
    abstract protected void begin()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineData</Name>
				<Source><![CDATA[
    protected void calcLineData()
    {
        bookTransCalc  = this.initBookTransCalcClass();

        if (bookTransCalc)
        {
            bookTransCalc.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcGTDTraceableInfo</Name>
				<Source><![CDATA[
    protected void calcGTDTraceableInfo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    abstract public boolean check()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog dialog = super();

        if (this.canGoBatch())
        {
            dialog.addText("@GLS101158");
            dialog.addText("@SYS60031");
        }

        fromDateCtrl = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
        toDateCtrl   = dialog.addFieldValue(extendedTypeStr(ToDate), toDate);

        if (bookTableMode)
        {
            dialog.caption(strFmt("@SYS76498", dialog.caption(), bookTable.BookId));
            closeBookCtrl = dialog.addFieldValue(enumStr(NoYes), closeBook, "@GLS101817", "@GLS101817");
            fullCheckCtrl = dialog.addFieldValue(enumStr(NoYes), fullCheck, "@GLS102557", "@GLS102558");

            fromDateCtrl.allowEdit(false);

            if (this.existPrevBook())
            {
                toDateCtrl.allowEdit(false);
                toDateCtrl.value(this.getToDate());
            }
        }
        else
        {
            if (outgoingVAT)
            {
                inclPrevPeriodsExpFactCtrl = dialog.addFieldValue(enumStr(NoYes), NoYes::No, "@SYS4083085", "@SYS4083086");
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    protected void end()
    {
        Integer  x = logPoint;
        Integer  y = infolog.num();

        if (closeBook)
        {
            bookTable.ClosingDate = toDate;
        }

        bookTable.Log = '';

        while (x < y)
        {
            x += 1;

            bookTable.Log += strFmt("@GLS106745", infolog.level(x))+ "@GLS111192" + strReplace(infolog.text(x), '\t', '\n') + '\n';
        }

        bookTable.LastUpdateDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        bookTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPrevBook</Name>
				<Source><![CDATA[
    abstract protected boolean existPrevBook()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRecord</Name>
				<Source><![CDATA[
    abstract protected boolean fetchNextRecord()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    abstract protected FromDate getFromDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            fromDate = fromDateCtrl.value();
            toDate   = toDateCtrl.value();

            if (! bookTableMode && outgoingVAT)
            {
                includePrevPeriodsExportFactures = inclPrevPeriodsExpFactCtrl.value();
            }

            if (closeBookCtrl)
            {
                closeBook = closeBookCtrl.value();
            }

            if (fullCheckCtrl)
            {
                fullCheck = fullCheckCtrl.value();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologPrefix</Name>
				<Source><![CDATA[
    abstract protected InfologText getInfologPrefix()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    protected ToDate getToDate()
    {
        TaxPeriodDate localFromDate, localToDate;

        [localFromDate, localToDate] = BookDataCalc_RU::datePeriodBook(this.getFromDate());

        return localToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookTable</Name>
				<Source><![CDATA[
    abstract protected void initBookTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookTransCalcClass</Name>
				<Source><![CDATA[
    protected BookTransCalc_RU initBookTransCalcClass()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret;

        ret = super();

        if (bookTableMode)
        {
            logPoint = infolog.num();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes record in sales or purchase books with values related to payment information.
    /// </summary>
    /// <param name="_salesPurchBookDataMap">
    ///   <c>SalesPurchBookDataMap_RU</c> record.
    /// </param>
    /// <param name="_custVendTrans">
    ///   <c>CustVendTrans</c> record related to payment.
    /// </param>
    protected void initPaymentInfo(SalesPurchBookDataMap_RU _salesPurchBookDataMap, CustVendTrans _custVendTrans)
    {
        salesPurchBookData.PaymentDate     = _custVendTrans.DocumentDate ? _custVendTrans.DocumentDate : (salesPurchBookData.PaymentDate ? salesPurchBookData.PaymentDate : _custVendTrans.TransDate);
        salesPurchBookData.PaymDocumentNum = _custVendTrans.DocumentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        this.initBookTable();

        if (bookTableMode)
        {
            fromDate = this.getFromDate();
            logPoint = infolog.num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransForProcess</Name>
				<Source><![CDATA[
    protected boolean isTransForProcess()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [
            currentVersion, 
            fromDate,
            toDate,
            bookRecId,
            bookTableMode,
            closeBook,
            fullCheck];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookRecId</Name>
				<Source><![CDATA[
    public SalesPurchBookRecId_RU parmBookRecId(SalesPurchBookRecId_RU _bookRecId = bookRecId)
    {
        bookRecId = _bookRecId;

        return bookRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookTableMode</Name>
				<Source><![CDATA[
    public boolean parmBookTableMode(boolean _bookTableMode = bookTableMode)
    {
        bookTableMode = _bookTableMode;

        return bookTableMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCloseBook</Name>
				<Source><![CDATA[
    public NoYes parmCloseBook(NoYes _closeBook = closeBook)
    {
        closeBook = _closeBook;

        return closeBook;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCloseBookCheck</Name>
				<Source><![CDATA[
    public boolean parmCloseBookCheck(boolean _closeBookCheck = closeBookCheck)
    {
        closeBookCheck = _closeBookCheck;
        return closeBookCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        ;
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>previousPolicy</Name>
				<Source><![CDATA[
    protected CustTaxation_RU previousPolicy()
    {
        SalesBookTable_RU salesBookTable, previousBook;

        previousBook = SalesBookTable_RU::getLastClosedBook();

        if (fromDate < #TransitionStartDate && previousBook && previousBook.Policy == CustTaxation_RU::OnPayment)
        {
            return CustTaxation_RU::OnPayment;
        }

        if (year(fromDate) == year(#TransitionEndDateOld) + 1)
        {
            select firstonly RecId from salesBookTable
                where salesBookTable.ClosingDate > #TransitionEndDateOld;

            if (! salesBookTable)
            {
                select firstonly Policy, RecId from salesBookTable
                    order by ClosingDate desc
                    where salesBookTable.ClosingDate < #TransitionStartDate;

                if (salesBookTable)
                {
                    return salesBookTable.Policy;
                }
            }
        }

        return CustTaxation_RU::OnDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.init();

        this.progressInit("@SYS8516", recordSortedList.len(), #AviUpdate);

        progress.setText("@SYS26577");

        try
        {
            ttsbegin;

            this.initBookTable();

            this.begin();

            while (this.fetchNextRecord())
            {
                lineNum++;

                this.calcLineData();
                progress.incCount();

                if (closeBookCheck &&
                    bookTable.TableId == tableNum(SalesBookTable_RU) &&
                    this.isTransForProcess())
                {
                    break;
                }
            }

            this.end();

            ttscommit;

            this.calcGTDTraceableInfo();

        }
        catch (Exception::Deadlock)
        {
            retry;
        }

        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInfologPrefix</Name>
				<Source><![CDATA[
    abstract protected void setInfologPrefix()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean                ret;
        Integer                version = conPeek(packedClass,1);
        SalesPurchBookRecId_RU bookRecIdNew;

        switch (version)
        {
            case currentVersion:
                bookRecIdNew = this.parmBookRecId();

                [   version, 
                    fromDate,
                    toDate,
                    bookRecId,
                    bookTableMode,
                    closeBook,
                    fullCheck] = packedClass;

                if (bookRecIdNew)
                {
                    this.parmBookRecId(bookRecIdNew);
                    closeBook = NoYes::No;
                }
                this.initBookTable();
 
                if (bookTableMode)
                {
                    fromDate = this.getFromDate();
                }

                ret = true;
                break;
 
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean   ret = super(_calledFrom);
        TransDate localFromDate, localToDate;

        this.setInfologPrefix();

        if (ret)
        {
            if (toDate < fromDate)
            {
                throw error("@GLS101164");
            }

            if ( ! toDate)
            {
                throw error("@GLS101163");
            }

            if (fromDate &&
               ((fromDate < #TransitionStartDate && toDate >= #TransitionStartDate) ||
               (fromDate <= #TransitionEndDate  && toDate > #TransitionEndDate)    ||
               (fromDate >= #TransitionStartDate && toDate <= #TransitionEndDate   &&
                year(fromDate) != year(toDate))))
            {
                throw error("@GLS110906");
            }

            if (fromDate > #TransitionEndDate && CustParameters::find().CustTaxation_RU == CustTaxation_RU::OnPayment)
            {
                if (Box::yesNo(strFmt("@GLS110907",
                                      year(#AfterTransitionEndDate),
                                      CustTaxation_RU::OnDelivery),
                               DialogButton::No) == DialogButton::No)
                {
                    return false;
                }
            }

            if (bookTableMode)
            {
                if (! this.existPrevBook())
                {
                    [localFromDate, localToDate] = BookDataCalc_RU::datePeriodBook(toDate);

                    if (localToDate == dateNull())
                    {
                        error(strFmt("@GLS104935", toDate));
                        ret = false;
                    }
                    else if (toDate != localToDate)
                    {
                        error(strFmt("@GLS104898", localToDate, toDate));
                        ret = false;
                    }
                }

                ret = ret && this.check();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datePeriodBook</Name>
				<Source><![CDATA[
    public static container datePeriodBook(TaxPeriodDate _dt)
    {
        container       taxPeriod;
        SysGlobalCache  cache        = classfactory.globalCache();
        Map             taxPeriodMap = cache.get(classStr(BookDataCalc_RU), identifierStr(TaxPeriodMap), null);

        if (! taxPeriodMap)
        {
            taxPeriodMap = new Map(Types::Date, Types::Container);
        }

        if (! taxPeriodMap.exists(_dt))
        {
            taxPeriod = TaxReportPeriod::datePeriodPurchSalesBook_RU(_dt);
            taxPeriodMap.insert(_dt, taxPeriod);
            cache.set(classStr(BookDataCalc_RU), identifierStr(TaxPeriodMap), taxPeriodMap);
        }
        else
        {
            taxPeriod = taxPeriodMap.lookup(_dt);
        }

        return taxPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBookTable</Name>
				<Source><![CDATA[
    static public BookDataCalc_RU newFromBookTable(SalesPurchBookTable_RU _bookTable)
    {
        BookDataCalc_RU bookDataCalc;

        switch (_bookTable.TableId)
        {
            case tableNum(PurchBookTable_RU)    :
                bookDataCalc = new BookDataCalc_Purch_RU();
                break;

            case tableNum(SalesBookTable_RU)    :
                bookDataCalc = new BookDataCalc_Sales_Export_RU();
                break;

            default                             :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        bookDataCalc.parmBookRecId(_bookTable.RecId);
        bookDataCalc.parmFromDate(dateNull());
        bookDataCalc.parmToDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        bookDataCalc.parmBookTableMode(true);

        return bookDataCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastPaymDateNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates last payment date and document number for specified <c>FactureJour_RU</c> record.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record.
    /// </param>
    /// <param name="_toDate">
    /// Maximum payment date.
    /// </param>
    /// <returns>
    /// Maximum payment date for facture journal.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If Facture has unsuitable module.
    /// </exception>
    server static container getLastPaymDateNum(FactureJour_RU _factureJour, ToDate _toDate)
    {
        CustVendInvoiceJour     custVendInvoiceJour;
        CustVendTrans           custVendTrans;
        CustVendTrans           custVendTransOffset;
        CustVendSettlement      custVendSettlement;
        RecordSortedList        invoiceSortedList;
        PaymDate                lastPaymentDate;
        DocumentNum             lastDocumentNum;
        FactureJour_RU          factureJour = _factureJour;

        if (factureJour.CorrectedFactureExternalId)
        {
            factureJour = factureJour.getCorrectedFacture(true);
        }

        switch (factureJour.Module)
        {
            case FactureModule_RU::Cust :
                custVendInvoiceJour = new DictTable(tableNum(CustInvoiceJour)).makeRecord();
                custVendTrans       = CustVendTransStatic::newModuleCustVend(ModuleCustVend::Cust).custVendTrans();
                custVendSettlement  = CustVendTransStatic::newModuleCustVend(ModuleCustVend::Cust).custVendSettlement();
                break;

            case FactureModule_RU::Vend :
                custVendInvoiceJour = new DictTable(tableNum(VendInvoiceJour)).makeRecord();
                custVendTrans       = CustVendTransStatic::newModuleCustVend(ModuleCustVend::Vend).custVendTrans();
                custVendSettlement  = CustVendTransStatic::newModuleCustVend(ModuleCustVend::Vend).custVendSettlement();
                break;

            default                     :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        custVendTransOffset = custVendTrans.data();

        while (factureJour)
        {
            invoiceSortedList = factureJour.invoiceJourSortedList_CustVend();
            while (invoiceSortedList.next(custVendInvoiceJour))
            {
                custVendTrans = custVendInvoiceJour.CustVendInvoiceJour::custVendTrans(custVendTrans);

                while select sum(SettleAmountCur) from custVendSettlement
                    group by TransRecId, TransCompany, OffsetRecId, OffsetCompany
                    where custVendSettlement.TransRecId     == custVendTrans.RecId              &&
                          custVendSettlement.TransCompany   == custVendTrans.DataAreaId         &&
                          custVendSettlement.TransDate      <= _toDate
                join maxof(TransDate) from custVendTransOffset
                    where custVendTransOffset.RecId         == custVendSettlement.OffsetRecId   &&
                          custVendTransOffset.DataAreaId    == custVendSettlement.OffsetCompany &&
                          custVendTransOffset.TransDate     <= _toDate
                {
                    if (custVendSettlement.SettleAmountCur)
                    {
                        if (custVendTransOffset.TransDate > lastPaymentDate)
                        {
                            lastPaymentDate = custVendTransOffset.TransDate;
                            lastDocumentNum = custVendTransOffset.DocumentNum;
                        }
                    }
                }
            }

            if (_factureJour.CorrectedFactureExternalId)
            {
                next factureJour;
            }
            else
            {
                break;
            }
        }

        return [lastPaymentDate, lastDocumentNum];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>