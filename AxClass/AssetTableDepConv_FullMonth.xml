<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableDepConv_FullMonth</Name>
	<SourceCode>
		<Declaration><![CDATA[
//
//  The primary functionality of this class type is to calculate the
//  asset depreciation amounts for fixed assets employing a depreciation
//  convention of 'Full-Month'. For this purpose this class type must
//  always be used in conjuction with the AssetTableMethod_SL and
//  AssetTableMethod_RB asset depreciation amount calculation classes.
//
//  This secondary functionality of this class type is to calculate the
//  asset depreciation start date for fixed assets employing a depreciation
//  convention.
//
[AssetTableDepConvAttribute(AssetDepreciationConvention::FullMonth)]
public class AssetTableDepConv_FullMonth extends AssetTableDepConv
{
    /// <summary>
    /// Calculates the number of depreciation periods used in the final year of the disposal.
    /// </summary>
    /// <param name="_disposalTransDate">
    /// The disposal transaction date.
    /// </param>
    /// <param name="_projectedLastDayOfDepreciation">
    /// The expected last date of depreciation.
    /// </param>
    /// <param name="_isDisposalSameYear">
    /// Indicates whether asset acquisition and disposal are in same year.
    /// </param>
    /// <returns>
    /// The number of periods that is based on mid-quarter convention rule.
    /// </returns>
    /// <remarks>
    /// When the Full month depreciation convention is in play, no depreciation is allowed in the month of the disposal.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcDisposalNumberDepreciationPeriods</Name>
				<Source><![CDATA[
    public AssetDepreciationTime calcDisposalNumberDepreciationPeriods(
        TransDate       _disposalTransDate,
        AssetTransDate  _projectedLastDayOfDepreciation,
        boolean         _isDisposalSameYear)
    {
        AssetDepreciationTime   numberOfMonths;
        int                     disposalPeriodNumber;

        if (_isDisposalSameYear)
        {
            disposalPeriodNumber = depreciationInterval.periodOfYear(_disposalTransDate)
                - depreciationInterval.periodOfYear(assetBook.DepreciationStartDate) + 1;
        }
        else
        {
            disposalPeriodNumber = depreciationInterval.periodOfYear(_disposalTransDate);
        }

        numberOfMonths = disposalPeriodNumber - 1;

        if (numberOfMonths < 0)
        {
            numberOfMonths = 0;
        }

        return numberOfMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRestPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment to asset's remaining life.
    /// </summary>
    /// <param name="_restPeriod">
    /// Number of remaining periods.
    /// </param>
    /// <param name="_periodstart">
    /// Starting date of the period.
    /// </param>
    /// <param name="_periods">
    /// Number of periods.
    /// </param>
    /// <returns>
    /// Adjusted asset's remaining life.
    /// </returns>
    /// <remarks>
    /// For Full Month convention, number of periods over the total number of periods in the current year,
    /// determines the adjusted asset remaining life.
    /// Monthly and Fiscal Period frequency should always return 1 as they will always represent fully depreciated month/period.
    /// Thus, the base class calculation is used for these frequencies.
    /// </remarks>
    public AssetDepreciationTime calcRestPeriod(AssetDepreciationTime   _restPeriod,
                                                AssetTransDate          _periodstart,
                                                AssetDepreciationTime   _periods)
    {
        int                     periodsInYear;
        int                     periodInInterval;
        AssetDepreciationTime   restPeriod = _restPeriod;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
                if (depreciationProfile.Accrual == AssetAccrual::Yearly)
                {
                    periodsInYear = depreciationInterval.numberOfPeriodsInYear(_periodstart);
                    restPeriod = (periodsInYear - depreciationInterval.dateToPeriod(_periodstart) + 1) / periodsInYear;
                }
                break;

            case AssetDepreciationYear::Calendar:
                switch (depreciationProfile.Accrual)
                {
                    case AssetAccrual::Quarterly:
                        periodInInterval = depreciationInterval.dateToPeriod(_periodstart);
                        periodInInterval = (depreciationInterval.indexofPeriod(_periodstart) * 3 - periodInInterval) + 1;
                        restPeriod = periodInInterval / 3;
                        break;

                    case AssetAccrual::HalfYearly:
                        periodInInterval = depreciationInterval.dateToPeriod(_periodstart);
                        periodInInterval = (depreciationInterval.indexofPeriod(_periodstart) * 6 - periodInInterval) + 1;
                        restPeriod = periodInInterval / 6;
                        break;

                    case AssetAccrual::Yearly:
                        restPeriod = (#MonthsInYear - mthOfYr(_periodstart) + 1) / #monthsInYear;
                        break;
                }
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return restPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStartDate</Name>
				<Source><![CDATA[
    //
    //  This method calculates the asset's starting depreciation date.
    //
    //  The "Full Month" depreciation convention will always calculate the "depreciation run date"
    //  based off the day of the month the asset was placed in service.
    //
    //  The AssetBook.usedFromDate is considered to be the "placed in service date".
    //
    protected AssetDepreciationStartDate calcStartDate(AssetUsedFromDate _usedFromDate)
    {
        AssetDepreciationStartDate startDate;

        switch (depreciationProfile.DepreciationYear)
        {
            case AssetDepreciationYear::Fiscal:
                startDate = depreciationInterval.startingPeriodDate(_usedFromDate);
                break;

            case AssetDepreciationYear::Calendar:
                startDate = mkDate(1, mthOfYr(_usedFromDate), year(_usedFromDate));
                break;

            default:
                //  The enumeration is unknown, throw an error;
                throw error(strFmt("@SYS99083", depreciationProfile.Profile));
        }

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalLastDepreciationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the date of the last depreciation for a given value model that uses fiscal calendar.
    /// </summary>
    /// <param name = "_depreciationDate">The date of the transaction.</param>
    /// <param name = "_lifeTimeRest">The number of remaining depreciation periods.</param>
    /// <returns>The date of the last depreciation transaction in the final year of depreciation.</returns>
    /// <remarks>For this convention and yearly frequency, the depreciation engine requires the last period date instead of the last day of the year.</remarks>
    protected TransDate getFiscalLastDepreciationDate(AssetTransDate _depreciationDate, AssetDepreciationTime _lifeTimeRest)
    {
        TransDate returnDate;
        AssetDepreciationTime numberPeriodsForward = _lifeTimeRest;
        RefRecId calendarRecId = AssetBookTable::find(assetBook.BookId).getFiscalCalendar();

        if (depreciationProfile.Accrual == AssetAccrual::Yearly)
        {
            numberPeriodsForward = this.adjustLifeTimeRest(numberPeriodsForward * LedgerFiscalCalendar::numberOfPeriodsLeftInYear(calendarRecId, depreciationInterval.openingPeriodDate(_depreciationDate)));
        }
        returnDate = LedgerFiscalCalendar::findStartDatePeriodFwd(calendarRecId, _depreciationDate, real2int(numberPeriodsForward));

        return returnDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>