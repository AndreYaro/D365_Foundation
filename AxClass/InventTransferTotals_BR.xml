<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferTotals_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Calculates the transfer order totals
/// </summary>
abstract class InventTransferTotals_BR
{
    Common              orderTable;
    Common              orderLine;

    RecordSortedList    recordSortedListLine;

    Tax tax;
    InventTransferCalcTax_BR  transferCalcTax;

    QueryRun            queryTransact;

    ParmId              parmId;

    boolean             taxAmountCalculated;
    boolean             balanceCalculated;
    boolean             costValueCalculated;
    boolean             quantitiesCalculated;

    boolean             totalAmountUnRoundedCalculated;
    boolean             roundOffCalculated;
    boolean             totalAmountCalculated;

    boolean             calculateCostValue;
    boolean             calculateBalance;
    boolean             calculateQuantities;
    boolean             calculateTaxAmount;

    UnitQty             qty;
    InventQty           qtyInvent;
    Weight              netWeight;
    Weight              grossWeight;
    Volume              volume;

    CostAmount          costValue;

    TaxAmount           taxTotal;

    AmountCur           balance;
    Map                 orderBalances;
    AmountCur           totalAmount;
    AmountMst           totalAmountUnRounded;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the transfer order totals
    /// </summary>
    public void  calc()
    {
        InventQty           inventQty;

        // Used for calculating costvalue
        InventQty          costInventQty;
        AmountCur          costInventValue;

        if (!calculateBalance           && !balanceCalculated           &&
            !calculateQuantities        && !quantitiesCalculated        &&
            !calculateTaxAmount         && !taxAmountCalculated)
        {
            calculateBalance            = true;
            calculateCostValue          = true;
            calculateQuantities         = true;
            calculateTaxAmount          = true;
        }

        if (calculateTaxAmount          && !taxAmountCalculated)
        {
            calculateBalance = true;
        }

        if (calculateBalance)
        {
            calculateBalance                = !balanceCalculated;
        }

        if (calculateQuantities)
        {
            calculateQuantities         = !quantitiesCalculated;
        }

        if (calculateTaxAmount)
            calculateTaxAmount          = !taxAmountCalculated;

        if (!(calculateBalance              ||
              calculateCostValue            ||
              calculateQuantities           ||
              calculateTaxAmount))
        {
            return;
        }

        transferCalcTax      = this.constructTransferCalcTax();

        if (calculateTaxAmount)
        {
            taxTotal             = transferCalcTax.calcTax(null);
            this.tax(transferCalcTax.tax());
        }

        if (calculateBalance            ||
            calculateCostValue          ||
            calculateQuantities)
        {
            this.initCursor();

            while (this.nextLine())
            {
                orderLine = this.queryGet(queryTransact);

                if (calculateQuantities)
                {
                    InventTable inventTable = InventTable::find(this.itemId());

                    if (calculateBalance)
                        recordSortedListLine.ins(orderLine);

                    UnitQty unitQty = this.qtyUnit();

                    if (calculateQuantities || calculateCostValue)
                    {
                        inventQty      = this.qtyInvent();
                    }

                    if (calculateQuantities)
                    {
                        qty                 += unitQty;
                        qtyInvent           += inventQty;
                        netWeight           += inventQty  * inventTable.NetWeight;
                        grossWeight         += inventQty  * inventTable.grossWeight();
                        volume              += inventQty  * inventTable.UnitVolume;
                    }

                    if (calculateBalance)
                    {
                        AmountCur lineAmount = this.lineAmount(unitQty);

                        if (calculateBalance)
                        {
                            this.updateOrderBalances(lineAmount);
                        }
                    }

                    if (calculateCostValue)
                    {
                        if (inventQty > 0)
                        {
                            [costInventQty, costInventValue] = this.lineCostPrice();
                            if (costInventQty)
                                costValue += CurrencyExchangeHelper::amount(inventQty * costInventValue / costInventQty);
                        }
                    }
                }
            }
        }

        if (calculateBalance)
            balanceCalculated           = true;

        if (calculateTaxAmount)
            taxAmountCalculated         = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    private void calculateBalance()
    {
        if (!balanceCalculated)
        {
            this.prepareBalanceCalculation();
            this.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxAmount</Name>
				<Source><![CDATA[
    private void calculateTaxAmount()
    {
        if (!taxAmountCalculated)
        {
            this.prepareTaxAmountCalculation();
            this.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalAmount</Name>
				<Source><![CDATA[
    private void calculateTotalAmount()
    {
        if (!taxAmountCalculated || !balanceCalculated)
        {
            this.prepareTotalAmountCalculation();
            this.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructTransferCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferCalcTax_BR</c> object
    /// </summary>
    /// <returns>
    ///     A new instance of <c>InventTransferCalcTax_BR</c>
    /// </returns>
    protected InventTransferCalcTax_BR constructTransferCalcTax()
    {
        return InventTransferCalcTax_BR::construct(orderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the gross weight of the transfer order
    /// </summary>
    /// <returns>
    ///     The gross weight of the transfer order
    /// </returns>
    public Weight grossWeight()
    {
        return grossWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query used to calculate the totals
    /// </summary>
    protected void  initCursor()
    {
        queryTransact = this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transaction <c>inventTransId</c>
    /// </summary>
    /// <returns>
    ///     The inventory transaction id
    /// </returns>
    abstract protected InventTransId inventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transaction <c>itemId</c>
    /// </summary>
    /// <returns>
    ///     The item id
    /// </returns>
    abstract protected ItemId itemId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the line amount for a given quantity
    /// </summary>
    /// <param name="salesQty">
    ///     The inventory quantity
    /// </param>
    /// <returns>
    ///     The line amount
    /// </returns>
    abstract protected LineAmount lineAmount(SalesQty salesQty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the inventTrans cost amounts
    /// </summary>
    /// <returns>
    ///     The container containing the cost amounts
    /// </returns>
    protected container lineCostPrice()
    {
        return InventTrans::calcCostValue(InventTrans::findTransId(this.inventTransId()).InventTransOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>InventTransferTotals_BR</c> object
    /// </summary>
    /// <param name="_common">
    ///     The source record
    /// </param>
    /// <param name="_parmId">
    ///     The parmId, when called from transfer order update
    /// </param>
    ///
    void new(Common           _common,
             ParmId           _parmId        = '')
    {
        orderBalances           = new Map(Types::Int64, Types::Real);

        parmId = _parmId;

        orderTable = _common;

        totalAmountUnRoundedCalculated = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fetches the next record
    /// </summary>
    /// <returns>
    ///     True when the record is found, otherwise false.
    /// </returns>
    ///
    abstract protected boolean nextLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer order totals
    /// </summary>
    /// <param name="_recId">
    ///     The order recId
    /// </param>
    /// <returns>
    ///     The order balance for the given RecId
    /// </returns>
    protected AmountCur orderBalance(recId _recId)
    {
        AmountCur   orderBalance;

        if (orderBalances.exists(_recId))
        {
            orderBalance = orderBalances.lookup(_recId);
        }

        return orderBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the order record
    /// </summary>
    /// <returns>
    ///     The order record
    /// </returns>
    abstract protected common orderLine_orderTable()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareBalanceCalculation</Name>
				<Source><![CDATA[
    private void prepareBalanceCalculation()
    {
        calculateBalance  = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxAmountCalculation</Name>
				<Source><![CDATA[
    private void prepareTaxAmountCalculation()
    {
        calculateTaxAmount  = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTotalAmountCalculation</Name>
				<Source><![CDATA[
    private void prepareTotalAmountCalculation()
    {
        this.prepareBalanceCalculation();
        this.prepareTaxAmountCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transfer line quantity
    /// </summary>
    /// <returns>
    ///     The line quantity
    /// </returns>
    abstract protected InventQty qtyInvent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current transfer line quantity
    /// </summary>
    /// <returns>
    ///     The line quantity
    /// </returns>
    abstract protected UnitQty qtyUnit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>queryRun</c> object containing the order lines
    /// </summary>
    /// <returns>
    ///     The <c>queryRun</c> object
    /// </returns>
    abstract protected QueryRun queryBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the current record
    /// </summary>
    /// <param name="_queryRun">
    ///     The <c>queryRun</c> object
    /// </param>
    /// <returns>
    ///     The current record
    /// </returns>
    abstract protected common queryGet(QueryRun  _queryRun)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the <c>Tax</c> class
    /// </summary>
    /// <param name="_tax">
    ///     The <c>Tax</c> class
    /// </param>
    /// <returns>
    ///     The <c>Tax</c> class
    /// </returns>
    public TaxInventTransfer_BR tax(TaxInventTransfer_BR _tax = tax)
    {
        if (!tax && !_tax)
        {
            this.calculateTotalAmount();
            _tax = tax;
        }

        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer order total amount
    /// </summary>
    /// <returns>
    ///     The total amount
    /// </returns>
    public AmountCur totalAmount()
    {
        if (!totalAmountCalculated)
        {
            this.calculateTotalAmount();
            totalAmount = this.totalAmountUnRounded();
            totalAmountCalculated = true;
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountUnRounded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer order total amount without rounding
    /// </summary>
    /// <returns>
    ///     The total amount
    /// </returns>
    public AmountCur totalAmountUnRounded()
    {
        if (!totalAmountUnRoundedCalculated)
        {
            this.calculateTotalAmount();
            totalAmountUnRounded            = this.totalBalance() + this.totalTaxAmount();
            totalAmountUnRoundedCalculated  = true;
        }

        return totalAmountUnRounded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the order amount
    /// </summary>
    /// <returns>
    ///     The order amount
    /// </returns>
    public AmountCur totalBalance()
    {
        this.calculateBalance();

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total tax amount
    /// </summary>
    /// <returns>
    ///     The tax amount
    /// </returns>
    public TaxAmountCur  totalTaxAmount()
    {
        this.calculateTaxAmount();

        return taxTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxAmountByType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the total tax amount by type
    /// </summary>
    /// <param name="_taxType">
    ///     The taxType
    /// </param>
    /// <returns>
    ///     The total tax amount
    /// </returns>
    public TaxAmountCur totalTaxAmountByType(TaxType_BR _taxType)
    {
        this.calculateTaxAmount();

        return -this.tax().totalTaxAmountByType_BR(_taxType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer quantity
    /// </summary>
    /// <returns>
    ///     The transfer quantity
    /// </returns>
    public PurchQty transferQty()
    {
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferVolume</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transfer order items volume
    /// </summary>
    /// <returns>
    ///     The items volume
    /// </returns>
    public Volume transferVolume()
    {
        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the net weight of the transfer order
    /// </summary>
    /// <returns>
    ///     The gross net of the transfer order
    /// </returns>
    ///
    public Weight transferWeight()
    {
        return netWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderBalances</Name>
				<Source><![CDATA[
    private void updateOrderBalances(AmountCur _amountCur)
    {
        recId       recId = this.orderLine_orderTable().RecId;

        AmountCur orderBalance = this.orderBalance(recId);

        balance         += _amountCur;
        orderBalance    += _amountCur;

        orderBalances.insert(recId, orderBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the <c>InventTransferTotals_BR</c> object
    /// </summary>
    /// <param name="_common">
    ///     The record used to initialize the <c>InventTransferTotals_BR</c> class
    /// </param>
    /// <param name="_parmId">
    ///     The parmId, when called from transfer order update
    /// </param>
    /// <returns>
    ///     A new instance of <c>InventTransferCalcTax_BR</c>
    /// </returns>
    public static InventTransferTotals_BR construct(Common           _common,
                                                    ParmId           _parmId = '')
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00049, funcName());

        switch (_common.TableId)
        {
            case tablenum(inventTransferParmTable)  :  return new InventTransferTotals_Parm_BR(_common, _parmId);
            case tablenum(inventTransferTable)      :  return new InventTransferTotals_Order_BR(_common, _parmId);
        }

        throw error(Error::wrongUseOfFunction(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Shows the temporary sales tax form
    /// </summary>
    /// <param name="_menuItemDisplayStr">
    ///     The menu item that opens the <c>TaxTmpWorkTrans</c> form
    /// </param>
    /// <param name="_inventTransferTable">
    ///     The <c>InventTransferTable</c> record
    /// </param>
    /// <returns>
    ///     The <c>FormRun</c> object
    /// </returns>
    public static FormRun showTax(str _menuItemDisplayStr,
                                  InventTransferTable _inventTransferTable)
    {
        InventTransferTotals_BR inventTransferTotals = InventTransferTotals_BR::construct(_inventTransferTable);
        inventTransferTotals.calc();
        return Tax::showTaxes(_menuItemDisplayStr, inventTransferTotals.tax(), _inventTransferTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>