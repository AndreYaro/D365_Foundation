<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementCustomerInvoiceHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailStatementCustomerInvoiceHelper</c> is used for shared logic across Retail for Customer Invoices.
/// </summary>
internal class RetailStatementCustomerInvoiceHelper
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInvoiceFromOriginalSalesIdInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first custInvoiceJour by salesId and invoiceDate, when given
    /// the originalSalesId that may not match the custInvoiceJour salesId.
    /// </summary>
    /// <param name="_originalSalesId">
    /// The sales id.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date.
    /// </param>
    /// <returns>
    /// The first custInvoiceJour with the salesId and InvoiceDate.
    /// </returns>
    internal static CustInvoiceJour findInvoiceFromOriginalSalesIdInvoiceDate(
        SalesIdBase _originalSalesId,
        TransDate _invoiceDate)
    {
        CustInvoiceSalesLink custInvoiceSalesLink;
        SalesId salesIdOnCustInvoiceJour;
        CustInvoiceJour custInvoiceJour;
  
        if (_originalSalesId && _invoiceDate)
        {
            // Use CustInvoiceSalesLink to find the salesId that will be on the custInvoiceJour,
            // as custInvoiceJour may have invoiced more than one sales order.
            select firstonly custInvoiceSalesLink
                where custInvoiceSalesLink.OrigSalesId == _originalSalesId
                    && custInvoiceSalesLink.invoiceDate == _invoiceDate
            join custInvoiceJour
                where custInvoiceJour.SalesId == custInvoiceSalesLink.salesId
                   && custInvoiceJour.InvoiceId == custInvoiceSalesLink.invoiceId
                   && custInvoiceJour.InvoiceDate == custInvoiceSalesLink.invoiceDate;
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInvoiceFromOriginalSalesIdInvoiceIdInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first custInvoiceJour by salesId, invoiceID and invoiceDate, when given
    /// the originalSalesId that may not match the custInvoiceJour salesId.
    /// </summary>
    /// <param name="_originalSalesId">
    /// The sales id.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice id.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date.
    /// </param>
    /// <returns>
    /// The first custInvoiceJour with the salesId and InvoiceDate.
    /// </returns>
    internal static CustInvoiceJour findInvoiceFromOriginalSalesIdInvoiceIdInvoiceDate(
        SalesIdBase _originalSalesId,
        InvoiceId _invoiceId,
        TransDate _invoiceDate)
    {
        CustInvoiceSalesLink custInvoiceSalesLink;
        CustInvoiceJour custInvoiceJour;
  
        if (_originalSalesId && _invoiceId && _invoiceDate)
        {
            // Use CustInvoiceSalesLink to find the salesId that will be on the custInvoiceJour,
            // as custInvoiceJour may have invoiced more than one sales order.
            select firstonly custInvoiceSalesLink
                where custInvoiceSalesLink.OrigSalesId == _originalSalesId
                    && custInvoiceSalesLink.invoiceId == _invoiceId
                    && custInvoiceSalesLink.invoiceDate == _invoiceDate
            join custInvoiceJour
                where custInvoiceJour.SalesId == custInvoiceSalesLink.salesId
                   && custInvoiceJour.InvoiceId == custInvoiceSalesLink.invoiceId
                   && custInvoiceJour.InvoiceDate == custInvoiceSalesLink.invoiceDate;
        }
        
        return custInvoiceJour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>