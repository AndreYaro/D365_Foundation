<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentLineSource_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntgExportDocumentLineSource_CN</c> is representing a source of export document line.
/// </summary>
class TaxIntgrExportDocumentLineSource_CN
{
    private const LanguageId LanguageId = 'zh-hans';

    TaxIntgrExportDocumentSourceType_CN exportDocumentSource;
    TaxIntgrExportDocumentLineSourceMap_CN exportDocumentLineSourceMap;
    TaxIntgrExportDocLineSourceChargesMap_CN exportDocLineChargesSourceMap;

    Description description;
    Description descriptionCharges;
    SalesUnit unit;
    Qty quantity;
    AmountCur transactionCurrencyNetAmount;
    AmountCur transactionCurrencyTaxAmount;
    AmountCur transactionCurrencyChargesNetAmount;
    AmountCur transactionCurrencyChargesTaxAmount;
    EcoResCategoryCommodityCode intraCode;
    ItemId itemId;
    TaxValue taxValue;
    TaxExemptTax exemptTax;
    LineNum miscChargesLineNum;

    TaxProfileTable_CN  taxProfile;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyDefaultValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default value for properties which is still empty.
    /// </summary>
    protected void applyDefaultValue()
    {
        UnitOfMeasureTranslation unitOfMeasureTranslation;

        if (!intraCode)
        {
            intraCode = this.getTaxProfile().DefaultCommodity;
        }

        if (!description)
        {
            description = TaxIntgrTaxProfileDefaultValue_CN::findByLineSourceType(
                this.getTaxProfile().RecId,
                TaxIntgrTaxProfileDefaultValue_CN::getLineSourceType(
                    exportDocumentLineSourceMap.SourceRelationType)).Description;
        }

        if (!unit)
        {
            unit = TaxIntgrTaxProfileDefaultValue_CN::findByLineSourceType(
                this.getTaxProfile().RecId,
                TaxIntgrTaxProfileDefaultValue_CN::getLineSourceType(
                    exportDocumentLineSourceMap.SourceRelationType)).SalesUnit;
        }

        if (unit)
        {
            unitOfMeasureTranslation = UnitOfMeasureTranslation::findByTranslation(UnitOfMeasure::findBySymbol(unit).RecId, LanguageId);
            if (unitOfMeasureTranslation)
            {
                unit = unitOfMeasureTranslation.Description;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxProfile</Name>
				<Source><![CDATA[
    private TaxProfileTable_CN getTaxProfile()
    {
        if (!taxProfile)
        {
            taxProfile = TaxProfileTable_CN::findByTaxCode(exportDocumentSource.parmTaxCode());
        }

        return taxProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inistialize the instance.
    /// </summary>
    /// <remarks>
    /// Must be callsed before an instance can be used.
    /// </remarks>
    protected void initialize()
    {
        this.initializeProperty();

        this.retrieveTaxAmount();

        this.applyDefaultValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the properties.
    /// </summary>
    protected void initializeProperty()
    {
        TaxIntgrExportDocLineSourceChargesMap_CN taxIntgrExportDocLineSourceChargesMap = exportDocLineChargesSourceMap;
        description = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getDescription();
        descriptionCharges = taxIntgrExportDocLineSourceChargesMap.DescriptionCharges;
        unit = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getUnit();
        quantity = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getQuantity();
        intraCode = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getIntraCode();
        itemId = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getItemId();
        miscChargesLineNum = taxIntgrExportDocLineSourceChargesMap.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public Description parmDescription(Description _description = description)
    {
        description = _description;

        return description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescriptionCharges</Name>
				<Source><![CDATA[
    public Description parmDescriptionCharges(Description _descriptionCharges = descriptionCharges)
    {
        descriptionCharges = _descriptionCharges;
        
        return descriptionCharges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocLineSourceChargesMap</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocLineSourceChargesMap_CN parmExportDocLineSourceChargesMap(TaxIntgrExportDocLineSourceChargesMap_CN _exportDocLineSourceChargesMap = exportDocLineChargesSourceMap)
    {
        exportDocLineChargesSourceMap = _exportDocLineSourceChargesMap;
        
        return exportDocLineChargesSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscChargesLineNum</Name>
				<Source><![CDATA[
    public LineNum parmMiscChargesLineNum(LineNum _miscChargesLineNum = miscChargesLineNum)
    {
        miscChargesLineNum = _miscChargesLineNum;
    
        return miscChargesLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyChargesNetAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTransactionCurrencyChargesNetAmount(AmountCur _transactionCurrencyChargesNetAmount = transactionCurrencyChargesNetAmount)
    {
        transactionCurrencyChargesNetAmount = _transactionCurrencyChargesNetAmount;
        
        return transactionCurrencyChargesNetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyChargesTaxAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTransactionCurrencyChargesTaxAmount(AmountCur _transactionCurrencyChargesTaxAmount = transactionCurrencyChargesTaxAmount)
    {
        transactionCurrencyChargesTaxAmount = _transactionCurrencyChargesTaxAmount;
        
        return transactionCurrencyChargesTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentLineSourceMap</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocumentLineSourceMap_CN parmExportDocumentLineSourceMap(TaxIntgrExportDocumentLineSourceMap_CN _exportDocumentLineSourceMap = exportDocumentLineSourceMap)
    {
        exportDocumentLineSourceMap = _exportDocumentLineSourceMap;

        return exportDocumentLineSourceMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExportDocumentSource</Name>
				<Source><![CDATA[
    public TaxIntgrExportDocumentSourceType_CN parmExportDocumentSource(TaxIntgrExportDocumentSourceType_CN _exportDocumentSource = exportDocumentSource)
    {
        exportDocumentSource = _exportDocumentSource;

        return exportDocumentSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIntraCode</Name>
				<Source><![CDATA[
    public EcoResCategoryCommodityCode parmIntraCode(EcoResCategoryCommodityCode _intraCode = intraCode)
    {
        intraCode = _intraCode;

        return intraCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity(Qty _quantity = quantity)
    {
        quantity = _quantity;

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxValue</Name>
				<Source><![CDATA[
    public TaxValue parmTaxValue(TaxValue _taxValue = taxValue)
    {
        taxValue = _taxValue;

        return taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExemptTaxe</Name>
				<Source><![CDATA[
    public TaxExemptTax parmExemptTaxe(TaxExemptTax _exemptTax = exemptTax)
    {
        exemptTax = _exemptTax;

        return exemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyNetAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTransactionCurrencyNetAmount(AmountCur _transactionCurrencyNetAmount = transactionCurrencyNetAmount)
    {
        transactionCurrencyNetAmount = _transactionCurrencyNetAmount;

        return transactionCurrencyNetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyTaxAmount</Name>
				<Source><![CDATA[
    public AmountCur parmTransactionCurrencyTaxAmount(AmountCur _transactionCurrencyTaxAmount = transactionCurrencyTaxAmount)
    {
        transactionCurrencyTaxAmount = _transactionCurrencyTaxAmount;

        return transactionCurrencyTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmUnit(SalesUnit _unit = unit)
    {
        unit = _unit;

        return unit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax amount and net amount.
    /// </summary>
    protected void retrieveTaxAmount()
    {
        int         displaySign;

        displaySign = Tax::changeDisplaySign(exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getTaxDirection());
        transactionCurrencyNetAmount = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getSourceBaseAmountCur() * displaySign;
        transactionCurrencyTaxAmount = exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getSourceRegulateAmountCur() * displaySign;
        TaxIntgrExportDocLineSourceChargesMap_CN taxIntgrExportDocLineSourceChargesMap = exportDocLineChargesSourceMap;
        transactionCurrencyChargesTaxAmount = taxIntgrExportDocLineSourceChargesMap.SourceRegulateAmountCur * displaySign;
        transactionCurrencyChargesNetAmount = taxIntgrExportDocLineSourceChargesMap.SourceBaseAmountCur * displaySign;
        taxValue = TaxIntgrUtility_CN::roundAmount(exportDocumentLineSourceMap.TaxIntgrExportDocumentLineSourceMap_CN::getTaxValue());
        exemptTax = exportDocumentLineSourceMap.ExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>TaxIntgExportDocumentLineSource_CN</c>.
    /// </summary>
    /// <param name="_exportDocumentSource">
    /// The export document source.
    /// </param>
    /// <param name="_exportDocumentLineSourceMap">
    /// The export document line source map.
    /// </param>
    /// <param name="_exportDocLineSourceChargesMap">
    /// The export document source charges map.
    /// </param>
    /// <returns>
    /// An instance of <c>TaxIntgExportDocumentLineSource_CN</c>.
    /// </returns>
    public static TaxIntgrExportDocumentLineSource_CN construct(
        TaxIntgrExportDocumentSourceType_CN      _exportDocumentSource,
        TaxIntgrExportDocumentLineSourceMap_CN   _exportDocumentLineSourceMap,
        TaxIntgrExportDocLineSourceChargesMap_CN _exportDocLineSourceChargesMap = null)
    {
        TaxIntgrExportDocumentLineSource_CN exportDocumentLineSource;

        switch (_exportDocumentLineSourceMap.SourceRelationType)
        {
            case tableNum(VATInvoiceDescTable_CN):
                exportDocumentLineSource = new TaxIntgrExportDocumentLineSourceSum_CN();
                break;
            default:
                exportDocumentLineSource = new TaxIntgrExportDocumentLineSource_CN();
                break;
        }

        exportDocumentLineSource.parmExportDocumentSource(_exportDocumentSource);
        exportDocumentLineSource.parmExportDocumentLineSourceMap(_exportDocumentLineSourceMap);
        exportDocumentLineSource.parmExportDocLineSourceChargesMap(_exportDocLineSourceChargesMap);
        exportDocumentLineSource.initialize();
        return exportDocumentLineSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>