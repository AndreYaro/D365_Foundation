<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCreateItemLabelByItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Create item label based on the item and store selected.
/// </summary>
/// <remarks>
/// Calls the method in the class <c>RetailLabelUtils</c> to create labels for items.
/// </remarks>
class RetailCreateItemLabelByItem extends RunBaseBatch implements BatchRetryable
{
    ItemId              itemId;
    RetailStoreId          storeId;
    RetailLabelTypeBase    labelType;

    DialogRunbase   dialog;
    DialogField     fieldItemId;
    DialogField     fieldStoreId;

    Object          callerForm;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        itemId,
        labelType,
        storeId
    #endmacro

    #define.Version1(1)
    #localmacro.PreviousListVersion1
        itemId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        ;

        dialog = super();

        dialog.caption("@RET4120");

        dialog.addGroup("@RET3783");
        fieldStoreId = dialog.addFieldValue(extendedtypestr(RetailStoreId),storeId,"@RET3003","@RET4121");
        fieldItemId = dialog.addFieldValue(extendedtypestr(ItemId),itemId,"@RET3059","@RET4122");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes the item ID entered in the dialog.
    /// </summary>
    /// <returns>
    /// A boolean value returned from the super().
    /// </returns>
    boolean getFromDialog()
    {
        itemId = fieldItemId.value();
        storeId = fieldStoreId.value();

        // LabelType is initialised here, need to get this value from caller otherwise previous packed value will be fetched.
        if (callerForm && callerForm.name() == formstr(RetailInventItemLabelPrinting))
        {
            labelType = callerForm.args().parmEnum();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the labelType and StoreID with the caller form parm Enum.
    /// </summary>
    /// <param name="_args">
    /// A caller arguments.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the caller form is not <c>RetailInventItemLabelPrinting</c>.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If there is no caller to the class.
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.caller())
        {
            callerForm = _args.caller();

            if (callerForm.name() == formstr(RetailInventItemLabelPrinting))
            {
                labelType = _args.parmEnum();
                storeId   = _args.parm();
            }
            else
                throw error ("@RET4123");
        }
        else
        {
            throw error ("@RET4123");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the RetailCreateItemLabelByItem class.
    /// </summary>
    /// <returns>A container that contains the current instance of the RetailCreateItemLabelByItem report.</returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds if the label setup made for the item selected. If yes create the labels for items based on the store ID.
    /// </summary>
    /// <remarks>
    /// The class <c>RetailLabelUtils</c> is initialized and called for processing labels of items.
    /// </remarks>
    void run()
    {
        RetailLabelUtils rboLabelUtils = new RetailLabelUtils();

        // Update and generate labels
        rboLabelUtils.UpdLabelBeforeToday(labelType, storeId);
        rboLabelUtils.generateNewLabels(labelType);

        if (RetailLabelUtils::findLabelSetup(labelType,itemId,storeId))
        {
            ttsbegin;
            rboLabelUtils.specificLabelOrder(labelType,storeId,itemId,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
            ttscommit;
        }
        else
        {
            if (hasGUI())
            {
                box::info("@RET4124");
            }
        }

        if (callerForm && callerForm.name() == formstr(RetailInventItemLabelPrinting))
        {
            callerForm.datasource().refresh();
            callerForm.datasource().reread();
            callerForm.datasource().research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes the <paramref name="packedClass"/> parameter to the current instance of the RetailCreateItemLabelByItem class.
    /// </summary>
    /// <param name = "packedClass">The container from which to deserialize the instance.</param>
    /// <returns>true if deserialization was successful; otherwise, false.</returns>
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;

            case #Version1:
                [version,#PreviousListVersion1] = packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(args args)
    {
        RetailCreateItemLabelByItem rboCreateItemLabelByItem = new RetailCreateItemLabelByItem();

        rboCreateItemLabelByItem.initFromArgs(args);

        if (rboCreateItemLabelByItem.prompt())
        {
            rboCreateItemLabelByItem.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>