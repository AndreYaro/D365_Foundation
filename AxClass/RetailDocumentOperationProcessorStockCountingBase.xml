<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorStockCountingBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

internal abstract class RetailDocumentOperationProcessorStockCountingBase extends RetailDocumentOperationProcessorInventoryJournalBase
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcessInternalResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get process internal result.
    /// </summary>
    /// <returns>The result.</returns>
    protected str getProcessInternalResult()
    {
        System.Type[] typeArray = new System.Type[1]();
        System.Type sourceDocumentType = new Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument().GetType();
        typeArray.SetValue(sourceDocumentType, 0);
        str result = RetailTransactionServiceJsonHelper::SerializeToJson(retailInventoryCommitDocument, typeArray);
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document.
    /// </summary>
    protected void createOrUpdateJournal()
    {
        super();

        InventJournalTable::initTotal(inventJournalTable);
        inventJournalTable.IsRetailCommitted = NoYes::Yes;
        HcmWorker hcmWorker = HcmWorker::findByPersonnelNumber(this.retailDocumentOperation.RetailStaffId);
        inventJournalTable.Worker = hcmWorker.RecId;
        inventJournalTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    protected void createOrUpdateJournalLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        InventJournalTrans inventJournalTrans;
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine = _line.SourceDocumentLine;

        boolean isFlattenSerialNumberEnabled = RetailStockCountingFlattenSerialNumberLinesFlight::instance().isEnabled();
        RefRecId productId = this.getProductIdFromLine(_line);
        EcoResDistinctProduct product = EcoResDistinctProduct::find(productId);
        ItemId itemId;
        InventDimCombination inventDimCombination;
        if (product.isDistinctProduct())
        {
            InventTable inventTable = InventTable::findByProduct(productId);
            itemId = inventTable.ItemId;
        }
        else
        {
            inventDimCombination = InventDimCombination::findByDistinctProductVariant(productId);
            itemId = inventDimCombination.ItemId;
        }

        EcoResTrackingDimensionGroupRecId trackingDimensionGroupRecId = InventTable::find(itemId).trackingDimensionGroup();
        EcoResTrackingDimensionGroupFldSetup trackingDimensionGroupFldSetup = EcoResTrackingDimensionGroupFldSetup::findByDimensionGroupFieldId(trackingDimensionGroupRecId, fieldNum(InventDim, inventSerialId));
        // If flatten serial number is enalbed, the serial numbers are handled before the journal line is updated and against onhand quantity under site, warehouse and serial number
        if (isFlattenSerialNumberEnabled && trackingDimensionGroupFldSetup.IsActive)
        {
            this.createOrUpdateJournalLineWithSerialNumbers(_line, product, itemId, inventDimCombination);
            return;
        }

        InventDim inventDim = this.getInventDimFromLine(_line);
        InventDim newDim;

        CommerceRuntimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRuntimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        CommerceRuntimeDataModel.InventoryInboundOutboundSourceDocument sourceDocument = document.SourceDocument;
        RecId productRecordId;
        boolean hasExistingLine;

        newDim = InventDim::findOrCreate(inventDim);

        // Synced lines from HQ for save or post stock counting
        if (sourceDocumentLine && sourceDocumentLine.RecordId != 0)
        {
            RecId lineRecId = sourceDocumentLine.RecordId;
            select forupdate inventJournalTrans where inventJournalTrans.RecId == lineRecId;

            if (inventJournalTrans)
            {
                this.updateExistingJournalLine(_line, inventJournalTrans, newDim, false /* _createSourceDocumentLine */, this.getQuantityToUpdate(_line));
            }
            else
            {
                // Otherwise, the source line has been deleted, update is ignored
            }
        }
        // Ad-hoc added lines for save or post stock counting
        else if (sourceDocument && sourceDocumentLine && sourceDocumentLine.RecordId == 0)
        {
            // For ad-hoc created lines, merge into existing lines by matching product id and location id
            if (product.isDistinctProduct())
            {
                select forupdate inventJournalTrans 
                    where inventJournalTrans.JournalType == InventJournalType::Count
                        && inventJournalTrans.JournalId == sourceDocument.DocumentId 
                        && inventJournalTrans.ItemId == itemId
                    join inventDim 
                        where inventDim.inventDimId == inventJournalTrans.InventDimId
                            && inventDim.InventLocationId == newDim.InventLocationId
                            && inventDim.wMSLocationId == _line.LocationId;
            }
            else
            {
                InventDim inventDimForVariant = InventDim::find(inventDimCombination.InventDimId);
                select forupdate inventJournalTrans 
                    where inventJournalTrans.JournalType == InventJournalType::Count
                        && inventJournalTrans.JournalId == sourceDocument.DocumentId 
                        && inventJournalTrans.ItemId == itemId
                    join inventDim 
                        where inventDim.inventDimId == inventJournalTrans.InventDimId
                            && inventDim.InventLocationId == newDim.InventLocationId
                            && inventDim.wMSLocationId == _line.LocationId
                            && inventDim.configId == inventDimForVariant.configId
                            && inventDim.InventColorId == inventDimForVariant.InventColorId
                            && inventDim.InventSizeId == inventDimForVariant.InventSizeId
                            && inventDim.InventStyleId == inventDimForVariant.InventStyleId
                            && inventDim.InventVersionId == inventDimForVariant.InventVersionId;
            }

            if (inventJournalTrans)
            {
                this.updateExistingJournalLine(_line, inventJournalTrans, newDim, true /* _createSourceDocumentLine */, this.getQuantityToUpdate(_line));
            }
            else
            {
                inventJournalTrans = this.addNewJournalLine(_line, newDim, itemId, sourceDocumentLine.ProductId, true /* _createSourceDocumentLine */, this.getQuantityToUpdate(_line));
            }
        }
        // Lines added by create stock counting
        else
        {
            inventJournalTrans = this.addNewJournalLine(_line, newDim, itemId, productId, true /* _createSourceDocumentLine */, this.getQuantityToUpdate(_line));
        }

        // If flatten serial number is not enabled, the serial numbers are handled after journal line is updated and against onhand quantity under site and warehouse
        if (!isFlattenSerialNumberEnabled)
        {
            IEnumerable serialNumberlineList = _line.SerialNumberLines as IEnumerable;
            IEnumerator enumerator = serialNumberlineList.GetEnumerator();
            boolean hasSerialNumberLine = false;
            while (enumerator.MoveNext())
            {
                hasSerialNumberLine = true;
                CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
                this.createOrUpdateJournalSerialNumberLine(serialLine, newDim, inventJournalTrans);
            }

            if (hasSerialNumberLine)
            {
                Map submittedSerialNumbersMap = new Map(Types::String, Types::Real);
                Map onHandSerialNumbersMap = new Map(Types::String, Types::Real);
                this.getSubmittedSerialNumbersMap(_line, submittedSerialNumbersMap);
                this.getOnHandSerialNumbersMap(inventJournalTrans, onHandSerialNumbersMap);
                this.registerOrPickUpSerialNumbersForJournalLine(_line, inventJournalTrans, submittedSerialNumbersMap, onHandSerialNumbersMap);
            }
        }

        var parameters = RetailDocumentOperationPostCreateOrUpdateInventoryJournalLineParameters::construct();
        parameters.inventoryCommitDocument = inventoryCommitDocument;
        parameters.documentLine = _line;
        parameters.journalLine = inventJournalTrans;
        this.executePostCreateOrUpdateInventoryJournalLine(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the existing journal line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_inventJournalTrans">The journal line.</param>
    /// <param name = "_lineInventDim">The journal line invent dim.</param>
    /// <param name = "_createSourceDocumentLine">Whether creates a new source document line. Legacy serial number handling requires to push source lines back to Channel.</param>
    /// <param name = "_countedQuantity">The counted quantity.</param>
    protected void updateExistingJournalLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, InventDim _lineInventDim, boolean _createSourceDocumentLine, Qty _countedQuantity)
    {
        InventOnhandQty inventOnHandQty;
        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine;
        _inventJournalTrans.setInventDimId(_lineInventDim.inventDimId);

        [_inventJournalTrans.InventOnHand, _inventJournalTrans.PdsCWInventOnHand] = this.pdsCWDateOnHandPhysical(_lineInventDim, _inventJournalTrans.ItemId, _inventJournalTrans.TransDate);
        _inventJournalTrans.Counted += _countedQuantity;
        _inventJournalTrans.Qty = decRound(_inventJournalTrans.Counted, InventTable::inventDecimals(_inventJournalTrans.ItemId)) - _inventJournalTrans.InventOnHand;
        _inventJournalTrans.CostAmount = _inventJournalTrans.calcCostAmount(_inventJournalTrans.Qty);

        HcmWorker hcmWorker = HcmWorker::findByPersonnelNumber(this.retailDocumentOperation.RetailStaffId);
        if (hcmWorker)
        {
            _inventJournalTrans.Worker = hcmWorker.RecId;
        }

        var parameters = RetailDocumentOperationPreCreateOrUpdateInventoryJournalLineParameters::construct();
        parameters.inventoryCommitDocument = this.retailInventoryCommitDocument;
        parameters.documentLine = _line;
        parameters.journalLine = _inventJournalTrans;
        this.executePreCreateOrUpdateInventoryJournalLine(parameters);

        _inventJournalTrans.update();

        if (_createSourceDocumentLine)
        {
            sourceDocumentLine = new CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine();
            sourceDocumentLine.RecordId = _inventJournalTrans.RecId;
            sourceDocumentLine.DocumentId = inventJournalTable.JournalId;
            sourceDocumentLine.DocumentRecordId = inventJournalTable.RecId;
            sourceDocumentLine.DocumentType = CommerceRunTimeDataModel.InventorySourceDocumentType::StockCounting;
            _line.SourceDocumentLine = sourceDocumentLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addNewJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a new journal line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_lineInventDim">The invent dim.</param>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_productId">The product id.</param>
    /// <param name = "_createSourceDocumentLine">Whether creates a new source document line. Legacy serial number handling requires to push source lines back to Channel.</param>
    /// <param name = "_countedQuantity">The counted quantity.</param>
    /// <returns>The new journal line.</returns>
    protected InventJournalTrans addNewJournalLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventDim _lineInventDim, ItemId _itemId, RefRecId _productId, boolean _createSourceDocumentLine, Qty _countedQuantity)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = this.retailInventoryCommitDocument;
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument document = inventoryCommitDocument.Document;
        InventJournalTrans inventJournalTrans;
        InventOnhandQty inventOnHandQty;
        InventTable inventTable;

        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine;

        inventJournalTrans.initFromInventJournalTable(inventJournalTable);
        inventJournalTrans.ItemId = _itemId;
        inventJournalTrans.setInventDimId(_lineInventDim.inventDimId);
        inventJournalTrans.setCostPrice(_lineInventDim.inventDimId, _lineInventDim);
        if (document.TransactionDate)
        {
            System.Nullable<System.DateTimeOffset> transacationDate = document.TransactionDate;
            System.DateTimeOffset datetime = transacationDate.get_Value();
            System.String strDateTime = datetime.ToString(RetailDocumentOperationProcessorTransferOrderBase::DateFormat);
            inventJournalTrans.TransDate = str2Date(strDateTime, DateFormat::MDY);
        }
        else
        {
            inventJournalTrans.TransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        this.createOrUpdateToInventDimId(_line, inventJournalTrans, _lineInventDim);

        [inventJournalTrans.InventOnHand, inventJournalTrans.PdsCWInventOnHand] = this.pdsCWDateOnHandPhysical(_lineInventDim, _itemId, inventJournalTrans.TransDate);
        inventJournalTrans.Counted = _countedQuantity;
        inventJournalTrans.Qty = decRound(inventJournalTrans.Counted, InventTable::inventDecimals(_itemId)) - inventJournalTrans.InventOnHand;
        inventJournalTrans.CostAmount = inventJournalTrans.calcCostAmount(inventJournalTrans.Qty);

        HcmWorker hcmWorker = HcmWorker::findByPersonnelNumber(this.retailDocumentOperation.RetailStaffId);
        if (hcmWorker)
        {
            inventJournalTrans.Worker = hcmWorker.RecId;
        }

        EcoResProductRecId masterProductRecId =  _productId;
        EcoResDistinctProduct product = EcoResDistinctProduct::find(_productId);
        if (!product.isDistinctProduct())
        {
            masterProductRecId = InventTable::find(_itemId).Product;
        }

        DimensionDefault mergedDimension = this.getMergedFinancialDimensions(inventoryCommitDocument.ChannelId, masterProductRecId);
        if  (mergedDimension)
        {
            inventJournalTrans.DefaultDimension = inventJournalTrans.copyDimension(mergedDimension);
        }

        var parameters = RetailDocumentOperationPreCreateOrUpdateInventoryJournalLineParameters::construct();
        parameters.inventoryCommitDocument = inventoryCommitDocument;
        parameters.documentLine = _line;
        parameters.journalLine = inventJournalTrans;
        this.executePreCreateOrUpdateInventoryJournalLine(parameters);

        inventJournalTrans.insert();

        if (_createSourceDocumentLine)
        {
            sourceDocumentLine = new CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine();
            sourceDocumentLine.RecordId = inventJournalTrans.RecId;
            sourceDocumentLine.DocumentId = inventJournalTable.JournalId;
            sourceDocumentLine.DocumentRecordId = inventJournalTable.RecId;
            sourceDocumentLine.DocumentType = CommerceRunTimeDataModel.InventorySourceDocumentType::StockCounting;
            _line.SourceDocumentLine = sourceDocumentLine;
        }

        return inventJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalSerialNumberLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document serial number line.
    /// </summary>
    /// <param name="_serialNumberline">
    /// The inventory journal serial number line.
    /// </param>
    /// <param name="_lineInventDim">
    /// The <c>InventDim</c> of <c>InventJournalTrans</c>.
    /// </param>
    /// <param name="_inventJournalTrans">
    /// The inventory journal line.
    /// </param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    protected void createOrUpdateJournalSerialNumberLine(CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine _serialNumberline, InventDim _lineInventDim, InventJournalTrans _inventJournalTrans)
    {
        _serialNumberline.SourceDocumentRecordId = inventJournalTable.RecId;
        _serialNumberline.SourceDocumentType = CommerceRunTimeDataModel.InventorySourceDocumentType::StockCounting;
        _serialNumberline.SourceDocumentLineRecordId = _inventJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDateOnHandPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the on-hand quantity and catch weight on-hand quantity for the item associated with the <c>InventJournalTrans</c> record with the specified dimensions.
    /// </summary>
    /// <param name="_inventDim">The dimensions used to check the catch weight on-hand quantity.</param>
    /// <param name="_itemId">The item id.</param>
    /// <param name="_transactionDate">The transaction date.</param>
    /// <returns>A container that contains the standard physical on-hand quantity and catch weight physical on-hand quantity.</returns>
    protected container pdsCWDateOnHandPhysical(InventDim _inventDim, ItemId _itemId, date _transactionDate)
    {
        InventDimParm   inventDimParm;

        inventDimParm.initFromInventDim(_inventDim);
        inventDimParm = InventDimParm::orParms(
            inventDimParm,
            InventJournalTable::journalId2inventDimParm(
                inventJournalTable.JournalId));

        return InventSumDatePhysicalDim::pdsCWOnHandQty(
                        _transactionDate,
                        _itemId,
                        _inventDim,
                        inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubmittedSerialNumbersMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the submitted serial numbers map.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_submittedSerialNumbersMap">The map to save the result.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    protected void getSubmittedSerialNumbersMap(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, Map _submittedSerialNumbersMap)
    {
        IEnumerable serialNumberlineList = _line.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberlineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            if (_submittedSerialNumbersMap.exists(serialLine.SerialNumber))
            {
                InventQty quantity = _submittedSerialNumbersMap.lookup(serialLine.SerialNumber);
                _submittedSerialNumbersMap.insert(serialLine.SerialNumber, quantity + serialLine.Quantity);
            }
            else
            {
                _submittedSerialNumbersMap.insert(serialLine.SerialNumber, serialLine.Quantity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnHandSerialNumbersMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the on-hand serial numbers map.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_onHandSerialNumbersMap">The map to save the result.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    protected void getOnHandSerialNumbersMap(InventJournalTrans _inventJournalTrans, Map _onHandSerialNumbersMap)
    {
        InventDim lineInventDimCriteria = InventDim::find(_inventJournalTrans.InventDimId);
        InventDimParm lineInventDimParm;
        lineInventDimParm.initFromInventDim(lineInventDimCriteria);
        InventSum inventSum;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select sum(PhysicalInvent) from inventSum
                group by inventSum.InventSerialId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.ItemId == _inventJournalTrans.ItemId
                    && #InventDimFieldsFilter(inventSum, lineInventDimCriteria, lineInventDimParm)
            {
                _onHandSerialNumbersMap.add(inventSum.InventSerialId, inventSum.PhysicalInvent);
            }
        }
        else
        {
            InventDim inventDim;
            while select sum(PhysicalInvent) from inventSum
                group by inventSum.InventSerialId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.ItemId == _inventJournalTrans.ItemId
                    #InventDimExistsJoin(inventSum.InventDimId, inventDim, lineInventDimCriteria, lineInventDimParm)
            {
                _onHandSerialNumbersMap.add(inventSum.InventSerialId, inventSum.PhysicalInvent);
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOrPickUpSerialNumbersForJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers or picks up serial numbers for a journal line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_inventJournalTrans">The journal line.</param>
    /// <param name = "_submittedSerialNumbersMap">The submitted serial numbers map.</param>
    /// <param name = "_onHandSerialNumbersMap">The on-hand serial numbers map.</param>
    /// <remarks>Not used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    protected abstract void registerOrPickUpSerialNumbersForJournalLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, InventJournalTrans _inventJournalTrans, Map _submittedSerialNumbersMap, Map _onHandSerialNumbersMap)
    {
        // Implemented by child classes
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateJournalLineWithSerialNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update journal document line which has serial numbers.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <param name = "_product">The product.</param>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_inventDimCombination">The invent dim combination.</param>
    /// <remarks>Used if RetailStockCountingFlattenSerialNumberLinesFlight is enabled.</remarks>
    protected void createOrUpdateJournalLineWithSerialNumbers(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line, EcoResDistinctProduct _product, ItemId _itemId, InventDimCombination _inventDimCombination)
    {
        // CSU compatible: legacy serial number posting will submit all work lines no matter they are edited or not, should ignore the lines which are not edited.
        if (_line.WorkDocumentId == null || _line.WorkDocumentId == '')
        {
            return;
        }

        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine = _line.SourceDocumentLine;
        // For lines with quantity as 0, create new lines if there is no source line; otherwise, should ignore.
        if (_line.QuantityToUpdate == 0)
        {
            if (sourceDocumentLine == null || sourceDocumentLine.RecordId == 0)
            {
                InventDim newLineInventDim = this.getInventDimFromLine(_line);
                InventDim createdInventDim = InventDim::findOrCreate(newLineInventDim);
                this.addNewJournalLine(_line, createdInventDim, _itemId, _line.ProductId, true /* _createSourceDocumentLine */, _line.QuantityToUpdate);
            }

            return;
        }

        IEnumerable serialNumberlineList = _line.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberlineList.GetEnumerator();
        boolean isFirstSerialNumber = true;
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine serialLine = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            // CSU compatible: legacy serial number posting will submit all serial numbers from previous commits, should ignore if the WorkDocument or WorkDocumentLineId doesn't match
            if (serialLine.WorkDocumentId != _line.WorkDocumentId || serialLine.WorkDocumentLineId != _line.LineId)
            {
                continue;
            }

            if (isFirstSerialNumber)
            {
                isFirstSerialNumber = false;
                // Set serial number to journal line's InventDim if there is no serial number associated yet
                if (sourceDocumentLine && sourceDocumentLine.RecordId != 0)
                {
                    InventJournalTrans inventJournalTrans;
                    select forupdate inventJournalTrans where inventJournalTrans.RecId == sourceDocumentLine.RecordId;
                    if (inventJournalTrans)
                    {
                        InventDim lineInventDim = InventDim::find(inventJournalTrans.InventDimId);
                        if (lineInventDim.InventSerialId == '')
                        {
                            lineInventDim.InventSerialId = serialLine.SerialNumber;
                            InventDim createdInventDim = InventDim::findOrCreate(lineInventDim);
                            inventJournalTrans.setInventDimId(createdInventDim.inventDimId);
                            InventJournalTrans.update();
                        }
                    }
                }
            }

            InventDim inventDim;
            InventJournalTrans inventJournalTrans;
            InventDim newLineInventDim = this.getInventDimFromLine(_line);
            if (_product.isDistinctProduct())
            {
                select forupdate inventJournalTrans
                    where inventJournalTrans.JournalType == InventJournalType::Count
                        && inventJournalTrans.JournalId == inventJournalTable.JournalId
                        && inventJournalTrans.ItemId == _itemId
                    join inventDim
                        where inventDim.inventDimId == inventJournalTrans.InventDimId
                            && inventDim.InventLocationId == newLineInventDim.InventLocationId
                            && inventDim.wMSLocationId == _line.LocationId
                            && inventDim.InventSerialId == serialLine.SerialNumber;
            }
            else
            {
                InventDim inventDimForVariant = InventDim::find(_inventDimCombination.InventDimId);
                select forupdate inventJournalTrans
                    where inventJournalTrans.JournalType == InventJournalType::Count
                        && inventJournalTrans.JournalId == inventJournalTable.JournalId
                        && inventJournalTrans.ItemId == _itemId
                    join inventDim
                        where inventDim.inventDimId == inventJournalTrans.InventDimId
                            && inventDim.InventLocationId == newLineInventDim.InventLocationId
                            && inventDim.wMSLocationId == _line.LocationId
                            && inventDim.configId == inventDimForVariant.configId
                            && inventDim.InventColorId == inventDimForVariant.InventColorId
                            && inventDim.InventSizeId == inventDimForVariant.InventSizeId
                            && inventDim.InventStyleId == inventDimForVariant.InventStyleId
                            && inventDim.InventVersionId == inventDimForVariant.InventVersionId
                            && inventDim.InventSerialId == serialLine.SerialNumber;
            }

            if (inventJournalTrans)
            {
                InventDim existingLineInventDim = InventDim::find(inventJournalTrans.InventDimId);
                this.updateExistingJournalLine(_line, inventJournalTrans, existingLineInventDim, false /* _createSourceDocumentLine */, serialLine.Quantity);
            }
            else
            {
                newLineInventDim.InventSerialId = serialLine.SerialNumber;
                InventDim createdInventDim = InventDim::findOrCreate(newLineInventDim);
                inventJournalTrans = this.addNewJournalLine(_line, createdInventDim, _itemId, _line.ProductId, true /* _createSourceDocumentLine */, serialLine.Quantity);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductIdFromLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product id from line.
    /// </summary>
    /// <param name = "_line">The inventory document line.</param>
    /// <returns>The product record id.</returns>
    protected RefRecId getProductIdFromLine(CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _line)
    {
        if (_line.ProductId)
        {
            return _line.ProductId;
        }

        CommerceRunTimeDataModel.InventoryInboundOutboundSourceDocumentLine sourceDocumentLine = _line.SourceDocumentLine;
        if (sourceDocumentLine && sourceDocumentLine.ProductId)
        {
            return sourceDocumentLine.ProductId;
        }

        throw error("@RetailInventory:ProductIdMissingOnInventoryDocumentLine");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>