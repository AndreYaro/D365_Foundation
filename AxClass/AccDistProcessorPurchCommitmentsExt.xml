<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistProcessorPurchCommitmentsExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AccDistProcessorPurchCommitmentsExt</c> class is the extension of the Accounting
/// distribution processor.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice),
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder)]
class AccDistProcessorPurchCommitmentsExt extends AccDistProcessorExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLedgerDimensionFromCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ledger dimension to be the same as the commitment ledger dimension if the commitments
    /// feature is enabled and the current document is a purchase order line, invoice line, or a related amount to either a purchase order line or an invoice line.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table to be updated before being inserted into the database.
    /// </param>
    /// <remarks>
    /// This should only be used for the French regulatory commitments feature.
    /// </remarks>
    private void initLedgerDimensionFromCommitment(AccountingDistribution _accountingDistribution)
    {
        AccountingDistribution  referenceAccountingDistribution;
        AccountingDistribution  referenceAccountingDistributionForParent;
        AccountingDistribution  referenceAccountingDistributionForGrandparent;
        AccountingDistribution  accountingDistributionForParent;
        AccountingDistribution  accountingDistributionForGrandparent;
        SourceDocumentLine      currentSourceDocumentLine;
        SourceDocumentLine      parentSourceDocumentLine;
        SourceDocumentLine      grandParentSourceDocumentLine;
        SourceDocumentLine      referenceSourceDocumentLine;

        // retrieve the source document lines and reference distributions.
        select firstonly SourceRelationType from currentSourceDocumentLine
            where currentSourceDocumentLine.RecId == _accountingDistribution.SourceDocumentLine
        outer join firstonly SourceRelationType from parentSourceDocumentLine // used for charges and sales tax on line
            where parentSourceDocumentLine.RecId == currentSourceDocumentLine.ParentSourceDocumentLine
        outer join firstonly SourceRelationType from grandParentSourceDocumentLine // used for sales tax on charges.
            where grandParentSourceDocumentLine.RecId == parentSourceDocumentLine.ParentSourceDocumentLine
        outer join firstonly RecId from accountingDistributionForParent // never actually use this distribution, but need it to get to the reference distribution
            where accountingDistributionForParent.SourceDocumentLine == parentSourceDocumentLine.RecId
        outer join firstonly RecId from accountingDistributionForGrandparent // never actually use this distribution, but need it to get to the reference distribution
            where accountingDistributionForGrandparent.SourceDocumentLine == grandParentSourceDocumentLine.RecId
        outer join firstonly LedgerDimension from referenceAccountingDistribution // This is the reference distribution for the main line
            where referenceAccountingDistribution.RecId == _accountingDistribution.ReferenceDistribution
        outer join firstonly LedgerDimension from referenceAccountingDistributionForParent // this is the reference distribution for charges and sales tax on line
            where referenceAccountingDistributionForParent.RecId == accountingDistributionForParent.ReferenceDistribution
        outer join firstonly LedgerDimension from referenceAccountingDistributionForGrandparent // this is the reference distribution for salex tax on charges.
            where referenceAccountingDistributionForGrandparent.RecId == accountingDistributionForGrandparent.ReferenceDistribution
        outer join firstonly SourceRelationType from referenceSourceDocumentLine // the source document line for the reference distribution.
            where referenceSourceDocumentLine.RecId == referenceAccountingDistribution.SourceDocumentLine;

        // We only want to default the ledger dimension if the referenced distribution is a commitment.
        if (referenceSourceDocumentLine.SourceRelationType == tableNum(PurchCommitmentLine_PSN))
        {
            // if the current source document line is for a Purchase Order or Invoice and the referenced Source Document Line is a commitment then set the ledger
            // dimension to the one on the referenced distribution.
            if (currentSourceDocumentLine.SourceRelationType == tableNum(PurchLine)
                || currentSourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine)
                || currentSourceDocumentLine.SourceRelationType == tableNum(VendInvoiceTrans))
            {
                _accountingDistribution.LedgerDimension = referenceAccountingDistribution.LedgerDimension;
            }
            // if the current distribution is for a related amount for the PO or Invoice line then we want to copy the ledger dimension
            else if ((currentSourceDocumentLine.SourceRelationType == tableNum(MarkupTrans) // charges on PO line or invoice line
                        && (parentSourceDocumentLine.SourceRelationType == tableNum(PurchLine)
                        || parentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceInfoLine)
                        || parentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceTrans)
                        || parentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceInfoSubLine))
                    || (currentSourceDocumentLine.SourceRelationType == tableNum(TaxUncommitted)  // taxes on po line or invoice line
                        && (parentSourceDocumentLine.SourceRelationType == tableNum(PurchLine)
                        || parentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceInfoLine)
                        || parentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceTrans)
                        || (parentSourceDocumentLine.SourceRelationType == tableNum(MarkupTrans)  // taxes on charges.
                            && (grandParentSourceDocumentLine.SourceRelationType == tableNum(PurchLine)
                            || grandParentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceInfoLine)
                            || grandParentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceTrans)
                            || grandParentSourceDocumentLine.SourceRelationType  == tableNum(VendInvoiceInfoSubLine)))))))
            {
                if (referenceAccountingDistributionForGrandparent.LedgerDimension)
                {
                    _accountingDistribution.LedgerDimension = referenceAccountingDistributionForGrandparent.LedgerDimension;
                }
                else if (referenceAccountingDistributionForParent.LedgerDimension)
                {
                    _accountingDistribution.LedgerDimension = referenceAccountingDistributionForParent.LedgerDimension;
                }
                else if (referenceAccountingDistribution.LedgerDimension)
                {
                    _accountingDistribution.LedgerDimension = referenceAccountingDistribution.LedgerDimension;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates processed source document line records and related records.
    /// </summary>
    /// <param name="_sourceDocumentLineItemList">
    /// A call to the <c>SourceDocumentLineItemList</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processed(SourceDocumentLineItemList _sourceDocumentLineItemList)
    {
        SourceDocumentLineItemListEnumerator    sourceDocumentLineItemListEnumerator;
        SourceDocumentLineItem                  accDistSourceDocumentLineItem;
        AccountingDistribution                  accountingDistribution;
        AccountingDistribution                  ledgerDimensionAccountingDistribution;
        AccountingDistribution                  commitmentAccountingDistribution;
        VendInvoiceInfoLine                     vendInvoiceInfoLine;
        DimensionAttributeValueCombination      dimensionAttributeValueCombination;
        MainAccount                             mainAccount;
        SourceDocumentLine                      sourceDocumentLine;

        if (_sourceDocumentLineItemList)
        {
            sourceDocumentLineItemListEnumerator = _sourceDocumentLineItemList.getEnumerator();

            while (sourceDocumentLineItemListEnumerator.moveNext())
            {
                accDistSourceDocumentLineItem = sourceDocumentLineItemListEnumerator.current();

                sourceDocumentLine = accDistSourceDocumentLineItem.parmSourceDocumentLine();

                // Force the update of the VendInvoiceInfoLine distribution on Non-PO Vendor invoice lines in France
                if (sourceDocumentLine.SourceRelationType == tableNum(VendInvoiceInfoLine))
                {
                    vendInvoiceInfoLine = VendInvoiceInfoLine::findSourceDocumentLine(sourceDocumentLine.RecId);

                    if (vendInvoiceInfoLine && vendInvoiceInfoLine.isNonPO())
                    {
                       commitmentAccountingDistribution = vendInvoiceInfoLine.getPurchCommitmentLine_PSN().getAccountingDistribution();

                        ttsbegin;

                        update_recordset accountingDistribution setting
                            ReferenceDistribution = commitmentAccountingDistribution.RecId,
                            LedgerDimension = commitmentAccountingDistribution.LedgerDimension
                        exists join ledgerDimensionAccountingDistribution
                            where sourceDocumentLine.RecId == accountingDistribution.SourceDocumentLine
                        exists join dimensionAttributeValueCombination
                            where dimensionAttributeValueCombination.RecId == accountingDistribution.LedgerDimension
                        exists join mainAccount
                            where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount
                                &&  (mainAccount.Type == DimensionLedgerAccountType::Expense
                                ||  mainAccount.Type == DimensionLedgerAccountType::Revenue
                                ||  mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss);

                        ttscommit;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceDistributionForCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReferenceDistribution</c> field for miscellaneous charge distributions to reference the related commitment distribution.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The current <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_parentSourceDocumentLine">
    /// The current parent <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table to be updated before being inserted into the database.
    /// </param>
    private void setReferenceDistributionForCharges(
        SourceDocumentLine      _sourceDocumentLine,
        SourceDocumentLine      _parentSourceDocumentLine,
        AccountingDistribution  _accountingDistribution)
    {
        PurchLine           purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceTrans    vendInvoiceTrans;

        switch (_parentSourceDocumentLine.SourceRelationType)
        {
            //PO Line Charge
            case (tableNum(PurchLine)):
                select firstonly PurchCommitmentLine_PSN from purchLine
                    where purchLine.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                if (purchLine.PurchCommitmentLine_PSN != 0)
                {
                    _accountingDistribution.ReferenceDistribution  = purchLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                    _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                }
                break;

            //New PO vendor invoice line charge && Non-PO vendor invoice line charge
            case (tableNum(VendInvoiceInfoLine)) :
                select firstonly PurchCommitmentLine_PSN from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                if (vendInvoiceInfoLine.PurchCommitmentLine_PSN != 0)
                {
                    _accountingDistribution.ReferenceDistribution  = vendInvoiceInfoLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                    _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                }
                break;

            //New PO posted vendor invoice line charge && Non-PO posted vendor invoice line charge && posted vendor invoice line charge
            case (tableNum(VendInvoiceTrans)) :
                select firstonly PurchCommitmentLine_PSN from vendInvoiceTrans
                    where vendInvoiceTrans.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                if (vendInvoiceTrans.PurchCommitmentLine_PSN != 0)
                {
                    _accountingDistribution.ReferenceDistribution  = vendInvoiceTrans.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                    _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReferenceDistributionForSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReferenceDistribution</c> field for sales tax distributions to reference the related commitment distribution.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// The current <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_parentSourceDocumentLine">
    /// The current parent <c>SourceDocumentLine</c> record.
    /// </param>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table to be updated before being inserted into the database.
    /// </param>
    private void setReferenceDistributionForSalesTax(
        SourceDocumentLine      _sourceDocumentLine,
        SourceDocumentLine      _parentSourceDocumentLine,
        AccountingDistribution  _accountingDistribution)
    {
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        MarkupTrans             markupTrans;
        PurchLine               purchLine;
        VendInvoiceInfoSubLine  vendInvoiceInfoSubLine;
        VendInvoiceTrans        vendInvoiceTrans;

        switch (_parentSourceDocumentLine.SourceRelationType)
        {
            // invoice line sales tax
            case (tableNum(VendInvoiceInfoLine)) :
                select firstonly PurchCommitmentLine_PSN from vendInvoiceInfoLine
                    where vendInvoiceInfoLine.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                if (vendInvoiceInfoLine.PurchCommitmentLine_PSN != 0)
                {
                    _accountingDistribution.ReferenceDistribution  = vendInvoiceInfoLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                    _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                }
                break;

            // posted invoice line sales tax
            case (tableNum(VendInvoiceTrans)) :
                select firstonly PurchCommitmentLine_PSN from vendInvoiceTrans
                    where vendInvoiceTrans.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                if (vendInvoiceTrans.PurchCommitmentLine_PSN != 0)
                {
                    _accountingDistribution.ReferenceDistribution  = vendInvoiceTrans.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                    _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                }
                break;

            // PO Sales Tax
            case (tableNum(PurchLine)) :
                select firstonly PurchCommitmentLine_PSN from purchLine
                    where purchLine.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                if (purchLine.PurchCommitmentLine_PSN != 0)
                {
                    _accountingDistribution.ReferenceDistribution  = purchLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                    _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                }
                break;

            // charge sales tax
            case (tableNum(MarkupTrans)) :
                select firstonly TransTableId, TransRecId from markupTrans
                    where markupTrans.SourceDocumentLine == _sourceDocumentLine.ParentSourceDocumentLine;

                switch (markupTrans.TransTableId)
                {
                    // invoice-only charge sales tax.
                    case (tableNum(VendInvoiceInfoLine)) :
                        select firstonly PurchCommitmentLine_PSN from vendInvoiceInfoLine
                            where vendInvoiceInfoLine.RecId == markupTrans.TransRecId;

                        if (vendInvoiceInfoLine.PurchCommitmentLine_PSN != 0)
                        {
                            _accountingDistribution.ReferenceDistribution  = vendInvoiceInfoLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                            _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                        }
                        break;

                    // posted invoice-only charge sales tax.
                    case (tableNum(VendInvoiceTrans)) :
                        select firstonly PurchCommitmentLine_PSN from vendInvoiceTrans
                            where vendInvoiceTrans.RecId == markupTrans.TransRecId;

                        if (vendInvoiceTrans.PurchCommitmentLine_PSN != 0)
                        {
                            _accountingDistribution.ReferenceDistribution  = vendInvoiceTrans.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                            _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                        }
                        break;

                    // invoice-only charge sales tax from subLine.
                    case (tableNum(VendInvoiceInfoSubLine)) :
                        select firstonly RecId from vendInvoiceInfoSubLine
                            where vendInvoiceInfoSubLine.RecId == markupTrans.TransRecId
                        join firstonly PurchCommitmentLine_PSN from vendInvoiceInfoLine
                            where vendInvoiceInfoLine.RecId == vendInvoiceInfoSubLine.LineRefRecId;

                        if (vendInvoiceInfoLine.PurchCommitmentLine_PSN != 0)
                        {
                            _accountingDistribution.ReferenceDistribution  = vendInvoiceInfoLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                            _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                        }
                        break;

                    // PO Line Charge Sales Tax
                    case (tableNum(PurchLine)) :
                        select firstonly PurchCommitmentLine_PSN from purchLine
                            where purchLine.RecId == markupTrans.TransRecId;

                        if (purchLine.PurchCommitmentLine_PSN != 0)
                        {
                            _accountingDistribution.ReferenceDistribution  = purchLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                            _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                        }
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the accounting distribution processor events.
    /// </summary>
    protected void subscribe()
    {
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            accountingDistributionProcessor.processedEventHandler += eventhandler(this.processed);
            accountingDistributionProcessor.addingAccountingDistribution += eventhandler(this.updateAccountingDistributionByCommitment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccountingDistributionByCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the accounting distributions with reference to the commitments on the source document lines.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table to be updated before being inserted into the database.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateAccountingDistributionByCommitment(AccountingDistribution _accountingDistribution)
    {
        this.updateReferenceDistributionForCommitment(_accountingDistribution);
        this.initLedgerDimensionFromCommitment(_accountingDistribution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceDistributionForCommitment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>ReferenceDistribution</c> field on the accounting distribution record to reference the related commitment record for relief.
    /// </summary>
    /// <param name="_accountingDistribution">
    /// A record of the <c>AccountingDistribution</c> table to be updated before being inserted into the database.
    /// </param>
    private void updateReferenceDistributionForCommitment(AccountingDistribution _accountingDistribution)
    {
        SourceDocumentLine                  sourceDocumentLine;
        SourceDocumentLine                  parentSourceDocumentLine;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        MainAccount                         mainAccount;
        AccountingDistribution              parentDistribution;

        VendInvoiceInfoLine                 vendInvoiceInfoLine;
        PurchLine                           purchLine;
        VendInvoiceTrans                    vendInvoiceTrans;
        boolean                             isDistributionForCreditNote = PurchLine::isDistributionForCreditNote(_accountingDistribution);

        if (_accountingDistribution.ReferenceDistribution == 0 || isDistributionForCreditNote)
        {
            // get the main account type, we only want to fill the referenceDistribution in some cases.
            select firstonly RecId from dimensionAttributeValueCombination
                where dimensionAttributeValueCombination.RecId == _accountingDistribution.LedgerDimension
            join firstonly Type from mainAccount
                where mainAccount.RecId == dimensionAttributeValueCombination.MainAccount;

            if (mainAccount.Type == DimensionLedgerAccountType::Expense
                    || mainAccount.Type == DimensionLedgerAccountType::Revenue
                    || mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss)
            {
                select firstonly SourceRelationType, RecId, ParentSourceDocumentLine from sourceDocumentLine
                    where sourceDocumentLine.RecId == _accountingDistribution.SourceDocumentLine
                outer join firstonly SourceRelationType from parentSourceDocumentLine
                    where parentSourceDocumentLine.RecId == sourceDocumentLine.ParentSourceDocumentLine;

                switch (sourceDocumentLine.SourceRelationType)
                {
                    // Taxes (all)
                    case (tableNum(TaxUncommitted)), 
                        (tableNum(TaxTrans)) :
                        this.setReferenceDistributionForSalesTax(sourceDocumentLine, parentSourceDocumentLine, _accountingDistribution);
                        break;

                    // Charges (all)
                    case (tableNum(MarkupTrans)) :
                        this.setReferenceDistributionForCharges(sourceDocumentLine, parentSourceDocumentLine, _accountingDistribution);
                        break;

                    // PO Discounts and Credit notes
                    case (tableNum(PurchLine)) :
                        // credit note
                        if (isDistributionForCreditNote)
                        {
                            select firstonly PurchCommitmentLine_PSN from purchLine
                                where purchLine.SourceDocumentLine == sourceDocumentLine.RecId;

                            if (purchLine.PurchCommitmentLine_PSN != 0)
                            {
                                _accountingDistribution.ReferenceDistribution  = purchLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                                _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                            }
                        }
                        // Discount
                        else
                        {
                            select firstonly ReferenceDistribution from  parentDistribution
                                where parentDistribution.RecId == _accountingDistribution.ParentDistribution;

                            if (parentDistribution.ReferenceDistribution != 0)
                            {
                                _accountingDistribution.ReferenceDistribution  = parentDistribution.ReferenceDistribution;
                                _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                            }
                        }
                        break;

                    // Invoice Discounts
                    case (tableNum(VendInvoiceInfoLine)) :
                        select firstonly PurchCommitmentLine_PSN from vendInvoiceInfoLine
                            where vendInvoiceInfoLine.SourceDocumentLine == sourceDocumentLine.RecId;

                        if (vendInvoiceInfoLine.PurchCommitmentLine_PSN != 0)
                        {
                            _accountingDistribution.ReferenceDistribution  = vendInvoiceInfoLine.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                            _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                        }
                        break;

                    // Invoice discounts on posted invoice
                    case (tableNum(VendInvoiceTrans)) :
                        select firstonly PurchCommitmentLine_PSN from vendInvoiceTrans
                            where vendInvoiceTrans.SourceDocumentLine == sourceDocumentLine.RecId;

                        if (vendInvoiceTrans.PurchCommitmentLine_PSN != 0)
                        {
                            _accountingDistribution.ReferenceDistribution  = vendInvoiceTrans.getPurchCommitmentLine_PSN().getAccountingDistribution().RecId;
                            _accountingDistribution.ReferenceRole          = AccountingDistributionReferenceRole::Matching;
                        }
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>