<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayNDFL2Report</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class RPayNDFL2Report extends RunBaseBatch implements IRPayNDFLDocument, IRPayEmplTaxInfo
{
    DialogField             periodField,
                            emplIdField,
                            officialsNameField,
                            officialsPersonTitleField,
                            reportTypeField,
                            refNumberField,
                            refDateField,
                            emplSelectionField,
                            taxByBranchField;
    ReportPeriod_RU         payPeriod;
    RHRMEmplId              emplId;
    ComExcelDocument_RU     excelDocument;
    RPayTaxNDFLReportData   taxReportData;
    RpayTaxReportValue      rpayTaxReportValue;
    RHRMEmplTable               emplTable;
    Name                    officialsName;
    TitleId                 officialsPersonTitle;
    RpayTaxParameters       rPayTaxParameters;
    RPayRateCode            taxRateCode;
    TaxCode                 taxCode;
    RPayNDFLType            reportType;
    int                     refNumber;
    TransDate               refDate;
    RPayNDFLSelectEmpl      selectEmpl;
    RPayEmplTaxStatus       taxStatus;
    BranchId_RU             branchId;
    boolean                 taxByBranch;
    boolean                 calcTaxPayment;
    container               reportValues, pos;
    Integer                 inquireNumber, reportSign;
    boolean                 newDocument, applyStdDed;
    Map                     calculatedValues;

    #RPay2NDFLExcel

    #define.CurrentVersion(6)
    #localmacro.CurrentList
          PayPeriod,
          emplId,
          officialsName,
          officialsPersonTitle,
          reportType,
          selectEmpl,
          taxByBranch
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>budgetTransferedTaxAmount</Name>
				<Source><![CDATA[
    protected RPayAmount budgetTransferedTaxAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcEmplRates</Name>
				<Source><![CDATA[
    protected void calcEmplRates()
    {
        RPayTaxListTrans            taxListTrans;
        RPayCreateEmplTaxListTrans  createTaxListTrans;
        Integer                     tempRefNumber;
        RPayTaxIncomeGroupTable     incomeGroupTable;

        createTaxListTrans = RPayCreateEmplTaxListTrans::construct(payPeriod,
                                                                   endmth(this.inquireDate()),
                                                                   selectEmpl,
                                                                   reportType,
                                                                   0,
                                                                   true,
                                                                   taxByBranch,
                                                                   connull(),
                                                                   calcTaxPayment);
        createTaxListTrans.setEmpl(emplId);
        createTaxListTrans.setFirstRefNumber(refNumber);
        createTaxListTrans.create();

        taxReportData = RPayTaxNDFLReportData::construct(
            emplId,
            payPeriod,
            endmth(this.inquireDate()),
            selectEmpl,
            reportType,
            taxByBranch);

        taxListTrans  = createTaxListTrans.tmpTaxListTrans();
        excelDocument = NULL;

        taxStatus       = taxReportData.taxEmplStatus();

        while select taxListTrans
            order by ReferenceNumber
        {
            if (taxListTrans.ReportSign == 2 &&
                !taxListTrans.isNotZeroTrans())
            {
                continue;
            }

            reportValues    = connull();
            taxRateCode     = taxListTrans.TaxRateCode;
            branchId        = taxListTrans.BranchId;

            select firstonly incomeGroupTable
                where (incomeGroupTable.RateCode      == taxRateCode ||
                       incomeGroupTable.RateCodeGroup == taxRateCode) &&
                       incomeGroupTable.EmplTaxStatus == taxStatus;
            if (!incomeGroupTable)
            {
                select firstonly TaxCode, StandardDeductions from incomeGroupTable
                    where (incomeGroupTable.RateCode      == taxRateCode ||
                           incomeGroupTable.RateCodeGroup == taxRateCode);
            }
            taxCode             = incomeGroupTable.TaxCode;
            reportSign          = taxListTrans.ReportSign;

            this.calcReportData();
            this.initTotalAmount(taxListTrans);

            if (tempRefNumber != taxListTrans.ReferenceNumber)
            {
                newDocument = true;

                if (excelDocument)
                {
                    this.endDocument();
                    excelDocument.visible(true);
                    excelDocument = NULL;
                }

                if (this.makeDocument())
                {
                    tempRefNumber = taxListTrans.ReferenceNumber;
                }
            }
            else
            {
                newDocument = false;
            }

            if (excelDocument)
            {
                applyStdDed = incomeGroupTable.StandardDeductions;
                this.fillDocument();
            }
        }

        if (excelDocument)
        {
            this.endDocument();
            excelDocument.visible(true);
            excelDocument = NULL;
        }
        else
        {
            info ("@GLS101546");
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReportData</Name>
				<Source><![CDATA[
    protected void calcReportData()
    {
         reportValues = RPayTaxReportValue::getTotalAmounts(
            emplId,
            taxRateCode,
            branchId,
            payPeriod,
            endmth(this.inquireDate()),
            endmth(dateStartYr(payPeriod)),
            false,
            calcTaxPayment,
            taxByBranch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog  dialog = super();
        dialog.addGroup("@SYS7764");
        refNumberField              = dialog.addFieldValue(ExtendedTypeStr(Integer), refNumber, "@RUP3207", "@RUP2767");
        refDateField                = dialog.addFieldValue(ExtendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS54385", "@RUP710");
        periodField                 = dialog.addFieldValue(ExtendedTypeStr(ReportPeriod_RU), payPeriod ? payPeriod :  RpayParameters::payPeriod());
        emplIdField                 = dialog.addFieldValue(ExtendedTypeStr(RHRMEmplId),emplId);
        taxByBranchField           = dialog.addFieldValue(EnumStr(NoYes), taxByBranch, "@RUP3471", "@RUP3472");
        taxByBranchField.visible(RPayTaxParameters::find().CalcByBranch);

        officialsName               = officialsName ? officialsName : OfficialsTable_RU::find(OffReportType_RU::RPayTaxList, OffPosition_RU::Responsible).Name;
        officialsPersonTitle        = officialsPersonTitle ? officialsPersonTitle : OfficialsTable_RU::find(OffReportType_RU::RPayTaxList, OffPosition_RU::Responsible).Title;

        dialog.addGroup("@GLS105362");
        reportTypeField             = dialog.addFieldValue(EnumStr(RPayNDFLType), reportType);
        emplSelectionField          = dialog.addFieldValue(EnumStr(RPayNDFLSelectEmpl), selectEmpl);

        dialog.addGroup("@GLS102057");
        officialsNameField          = dialog.addFieldValue(ExtendedTypeStr(Name),officialsName,"@GLS102223","@GLS103779");
        officialsPersonTitleField   = dialog.addFieldValue(ExtendedTypeStr(PersonTitle),officialsPersonTitle,"@GLS106403","@GLS103779");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTable</Name>
				<Source><![CDATA[
    public RHRMEmplTable emplTable(RHRMEmplTable _emplTable = emplTable)
    {
        emplTable = _emplTable;
        return emplTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTaxStatus</Name>
				<Source><![CDATA[
    public RPayEmplTaxStatus emplTaxStatus()
    {
        return taxStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDocument</Name>
				<Source><![CDATA[
    protected void endDocument()
    {
        if (excelDocument && excelDocument.getWorkSheetsCount() > 1)
        {
            excelDocument.deleteWorkSheet(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills document based on prepared data.
    /// </summary>
    protected void fillDocument()
    {
        SysDictEnum         dictEnum = new SysDictEnum(enumnum(RPayNDFLSectionType));
        RPayNDFLSection     reportSection;
        RPayNDFLSectionType sectionType;
        int i;

        rpayTaxReportValue = new RpayTaxReportValue(
            emplTable.EmployeeId,
            endmth(payPeriod),
            0,
            taxByBranch,
            endmth(this.inquireDate()),
            endmth(payPeriod));
        reportSection      = RPayNDFLSection::construct(this, this, taxReportData);
        applyStdDed        = (reportSign == 1 && (applyStdDed || rpayTaxReportValue.totalStdDeductionAmount(taxRateCode, branchId))) ||
                             (reportSign == 2 && applyStdDed);

        reportSection.parmIsFirstTaxRateToPrint(newDocument);

        if (newDocument)
        {
            pos = [#IncomeStartRow];

            for (sectionType = RPayNDFLSectionType::Header; i < dictEnum.values() - 1; sectionType = dictEnum.nextValue(sectionType))
            {
                pos = reportSection.add(sectionType, pos);
                ++i;
            }
        }
        else
        {
            pos = reportSection.add(RPayNDFLSectionType::Income, pos);
            pos = reportSection.add(RPayNDFLSectionType::StandardDeductions, pos);
            pos = reportSection.add(RPayNDFLSectionType::TotalAmounts, pos);
        }

        reportSection.add(RPayNDFLSectionType::Officials, pos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ret = super();

        if (periodField.value())
        {
            payPeriod = endmth(periodField.value());
        }
        else
        {
            payPeriod = RpayParameters::payPeriod();
        }

        emplId                 = emplIdField.value();
        officialsName          = officialsNameField.value();
        officialsPersonTitle   = officialsPersonTitleField.value();
        reportType             = reportTypeField.value();
        refNumber              = refNumberField.value();
        refDate                = refDateField.value();
        selectEmpl             = emplSelectionField.value();
        if (rPayTaxParameters::find().CalcByBranch)
        {
            taxByBranch           = taxByBranchField.value();
        }
        else
        {
            taxByBranch           = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotalAmount</Name>
				<Source><![CDATA[
    protected void initTotalAmount(RPayTaxListTrans _taxListTrans)
    {
        reportValues = conpoke(reportValues, 1, _taxListTrans.IncomeSum);
        if (_taxListTrans.ReportSign == 2)
        {
            reportValues = conpoke(reportValues, 2, _taxListTrans.IncomeSum);
        }
        reportValues = conpoke(reportValues, 3, _taxListTrans.AddTaxSum);
        reportValues = conpoke(reportValues, 4, _taxListTrans.TaxSum);

        if (calcTaxPayment)
        {
            reportValues = conpoke(reportValues, 5, _taxListTrans.BudgetTransferedTaxAmount);
        }
        else
        {
            reportValues = conpoke(reportValues, 5, _taxListTrans.TaxSum);
        }

        if (reportSign == 2)
        {
            reportValues = conpoke(reportValues, 7,  _taxListTrans.AddTaxSum - _taxListTrans.TaxSum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireDate</Name>
				<Source><![CDATA[
    public date inquireDate()
    {
        return refDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inquireNumber</Name>
				<Source><![CDATA[
    public str  inquireNumber()
    {
        return refNumber ? int2str(refNumber) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyReport</Name>
				<Source><![CDATA[
    protected boolean isEmptyReport()
    {
        RPayTaxReportValue  taxReportValue;
        RPayAmount  amount;
        int         i;

        for (i = 2; i <= conlen(reportValues); i++)
        {
            amount += abs(conpeek(reportValues, i));
        }

        if (amount == 0)
        {
            taxReportValue = new RPayTaxReportValue(emplId, payPeriod, 0, false, this.inquireDate(), payPeriod);
            amount = taxReportValue.totalDeductionAmount(taxrateCode);
        }

        return amount == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument(boolean _visible = false)
    {
        str filename = RPayNDFL2Report::fullTemplateName();

        if (! WinAPI::fileExists(filename))
        {
            return checkFailed(strfmt("@SYS60367", filename));
        }

        excelDocument = new ComExcelDocument_RU();

        if (! excelDocument.newFile(filename, _visible))
        {
            return false;
        }

        excelDocument.insertSheet(1, 1);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>media</Name>
				<Source><![CDATA[
    public Object media()
    {
        return excelDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mediaType</Name>
				<Source><![CDATA[
    public RPayNDFLMediaType mediaType()
    {
        return RPayNDFLMediaType::Excel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        rPayTaxParameters = RpayTaxParameters::find();
        calcTaxPayment = rPayTaxParameters.CalcTaxPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfficialsName</Name>
				<Source><![CDATA[
    protected Name parmOfficialsName()
    {
        return officialsName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfficialsPersonTitle</Name>
				<Source><![CDATA[
    protected TitleId parmOfficialsPersonTitle()
    {
        return officialsPersonTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriod</Name>
				<Source><![CDATA[
    ReportPeriod_RU payPeriod()
    {
        return payPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportSign</Name>
				<Source><![CDATA[
    public Integer reportSign()
    {
        return reportSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType2Value</Name>
				<Source><![CDATA[
    protected int reportType2Value()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportValues</Name>
				<Source><![CDATA[
    container reportValues()
    {
        return reportValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsibleName</Name>
				<Source><![CDATA[
    Name responsibleName()
    {
        return this.parmOfficialsName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>responsibleTitle</Name>
				<Source><![CDATA[
    TitleId responsibleTitle()
    {
        return this.parmOfficialsPersonTitle();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rpayTaxListTable</Name>
				<Source><![CDATA[
    protected void rpayTaxListTable(RpayTaxListTable _rpayTaxListTable)
    {
         throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RPayTaxIncomeGroupTable::checkTaxAuthority();

        this.calcEmplRates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    // can not be run on server because displays excel report
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBranchId</Name>
				<Source><![CDATA[
    public BranchId_RU taxBranchId()
    {
        return branchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCode</Name>
				<Source><![CDATA[
    TaxCode taxCode()
    {
        return taxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxRateCode</Name>
				<Source><![CDATA[
    public RPayRateCode taxRateCode()
    {
        return taxRateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReportValue</Name>
				<Source><![CDATA[
    public RpayTaxReportValue  taxReportValue()
    {
        return rpayTaxReportValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer          version        = conpeek(_packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!RPayTaxReportValue::allowParmIntersection(selectEmpl, reportType))
        {
            ret = checkFailed(strfmt("@RUP3203", "@RUP3213", "@RUP3206"));
        }

        if (this.inquireDate() == dateNull() || endmth(this.inquireDate()) < payPeriod)
        {
            ret = checkFailed(strfmt("@SYS91558", "@SYS54385", "@GLS105772"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static RPayNDFL2Report construct(Common _common)
    {
        RPayNDFL2Report rPayNDFL2Report;

        switch (_common.TableId)
        {
            case tablenum(RpayTaxListTable):
                rPayNDFL2Report = new RpayNDFL2ReportTaxTable();
                rPayNDFL2Report.rpayTaxListTable(_common);
                break;
            case tablenum(RHRMEmplTable):
                rPayNDFL2Report = new RpayNDFL2ReportEmplTable();
                rPayNDFL2Report.emplTable(_common);
                break;
            default:
                throw Error(Error::missingParameter(NULL));
        }

        return rPayNDFL2Report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RUP597";
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullTemplateName</Name>
				<Source><![CDATA[
    public static str fullTemplateName()
    {
        resourceNode rn = SysResource::getResourceNode(resourceStr(RPayNDFL2Report));
        rn.AOTload();
        return SysResource::saveToTempFile(rn, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayNDFL2Report rPayNDFL2Report;
        Common          common;

        common = _args.record();

        rPayNDFL2Report = RPayNDFL2Report::construct(common);

        if (rPayNDFL2Report.prompt())
        {
            rPayNDFL2Report.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>