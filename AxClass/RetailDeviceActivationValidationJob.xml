<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDeviceActivationValidationJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailDeviceActivationValidationJob</c> performs Device Activation Validation on a set of devices and updates the Activation Validation status for each device accordingly.
/// </summary>
class RetailDeviceActivationValidationJob extends RunBaseBatch implements BatchRetryable
{
    Map cachedResults;
    List validationResultMessages;
    RetailDevice theDevice;

    //Cached validation results
    #define.CachedIsoCodes(0)
    #define.CachedLegalEntityAddress(4)

    container packedDeviceIdList;
    RetailStaffId packedStaffId;

    #define.RetryNum(3)
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        packedDeviceIdList,
        packedStaffId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPackedDeviceIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// List of devices to be validated.
    /// </summary>
    /// <param name = "_packedDeviceIdList">Packed list of device ids to validate.</param>
    /// <returns>The packed list of device ids.</returns>
    public container parmPackedDeviceIdList(container _packedDeviceIdList = packedDeviceIdList)
    {
        packedDeviceIdList = _packedDeviceIdList;
        return packedDeviceIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedStaffId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Optional staff id to be evaluated in the context of activating the devices.
    /// </summary>
    /// <param name = "_packedStaffId">Staff id to validate against.</param>
    /// <returns>The staff id.</returns>
    public RetailStaffId parmPackedStaffId(RetailStaffId _packedStaffId = packedStaffId)
    {
        packedStaffId = _packedStaffId;
        return packedStaffId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Retail:RetailDeviceActivationValidationJobDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version thisVersion = RunBase::getVersion(packedClass);

        switch (thisVersion)
        {
            case #CurrentVersion:
                [thisVersion, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the class.
    /// </summary>
    public void run()
    {
        RetailDevice deviceTable;
        RetailDeviceId deviceId;
        RetailStaffId staffId;
        RetailDeviceValidationStatus statusResult;
        utcDateTime precheckDateTime = DateTimeUtil::getSystemDateTime();

        List deviceIdList;
        ListEnumerator enumerator;

        staffId = this.packedStaffId;
        deviceIdList = List::create(this.packedDeviceIdList);
        enumerator = deviceIdList.getEnumerator();
        this.clearCachedResults();

        while (enumerator.moveNext())
        {
            try
            {
                deviceId = enumerator.current();

                statusResult = RetailDeviceValidationStatus::Failed; //Failed
                validationResultMessages = new List(Types::String);

                //cache the device
                theDevice = RetailDevice::find(deviceId);

                if (theDevice)
                {
                    //Perform PreCheck Validation for deviceId, staffId

                    this.validateDevice_All(staffId);

                    //If there are no validation error messages, then validation was a success.
                    if (validationResultMessages.empty())
                    {
                        statusResult = RetailDeviceValidationStatus::Passed; //Passed
                    }

                    ttsbegin;
                    deviceTable = RetailDevice::find(deviceId, true);
                    deviceTable.ActivationValidationStatus = statusResult;
                    deviceTable.ActivationValidationStaffId = staffId;
                    deviceTable.ActivationValidationDateTime = precheckDateTime;
                    deviceTable.update();
                    ttscommit;
                }

                //Log Results
                //'Pre-Activation validation completed for device %1 and staff %2.  Validation: %3, Messages: %4'
                info(strFmt("@Retail:RetailDeviceActivationValidationJob_ResultMessage", deviceId, staffId, statusResult, validationResultMessages.toString()));
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        //'The attempt to save device activation validation results for device %1 failed due to update conflicts, and the retry limit was exceeded.'
                        error(strFmt("@Retail:RetailDeviceActivationValidationJob_ErrorUpdateRetryExceeded", deviceId));
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    //'The attempt to save device activation validation results for device %1 failed due to update conflicts.'
                    error(strFmt("@Retail:RetailDeviceActivationValidationJob_ErrorUpdateConflict", deviceId));
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                //Log failure: 'The attempt to save device activation validation results for device %1 failed.'
                error(strFmt("@Retail:RetailDeviceActivationValidationJob_ErrorMessage", deviceId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCachedResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear any cached validation results.
    /// </summary>
    private void clearCachedResults()
    {
        this.cachedResults = new Map(Types::Integer, Types::Enum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDevice_All</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform all validation checks.
    /// </summary>
    /// <param name = "_staffId"></param>
    private void validateDevice_All(RetailStaffId _staffId = '')
    {
        if (theDevice)
        {
            //call individual validation methods for device...
            this.validate_ChannelPublished();
            this.validate_CountryRegionIsoCodes();
            this.validate_LegalEntityAddress();
            this.validate_OperationsCount();
            this.validate_RegisterInUse();
            this.validate_RegisterLayoutMissing();
            this.validate_RegisterMissing();
            this.validate_StoreChannelConfig();
            this.validate_StoreFunctionalityProfile();
            this.validate_StoreHardwareProfile();
            this.validate_StoreLanguage();
            this.validate_TerminalVisualProfile();

            if (_staffId)
            {
                //call device+staffId permissions validations...
                this.validate_WorkerRegisterAddressbook(_staffId);
                this.validate_WorkerExternalIdentity(_staffId);
                this.validate_WorkerPermissions(_staffId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_StoreLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that Store language is set.
    /// </summary>
    private void validate_StoreLanguage()
    {
        if (!RetailDeviceActivationValidationJob::ValidateStoreLanguage(theDevice.Terminal))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_StoreLanguage");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_StoreChannelConfig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the store has a channel profile.
    /// </summary>
    private void validate_StoreChannelConfig()
    {
        RetailTerminalTable terminalTable;
        RetailStoreTable storeTable;
        RetailChannelTable channel;
        RetailChannelTableExt channelExt;
        RetailChannelProfile profileTable;

        select firstonly RecId from profileTable
        join RecId from channelExt where profileTable.RecId == channelExt.ChannelProfile
        join RecId from channel where channelExt.Channel == channel.RecId
        join RecId from storeTable where channel.OMOperatingUnitID == storeTable.OMOperatingUnitID
        join RecId from terminalTable where storeTable.RecId == terminalTable.StoreRecId
            && terminalTable.terminalId == theDevice.Terminal;

        if (!profileTable)
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_StoreChannelConfig");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_TerminalVisualProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the terminal has a visual profile.
    /// </summary>
    private void validate_TerminalVisualProfile()
    {
        if (!RetailDeviceActivationValidationJob::ValidateTerminalVisualProfile(theDevice.Terminal))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_TerminalVisualProfile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_StoreFunctionalityProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the store has a functionality profile.
    /// </summary>
    private void validate_StoreFunctionalityProfile()
    {
        if (!RetailDeviceActivationValidationJob::ValidateStoreFunctionalityProfile(theDevice.Terminal))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_FunctionalityProfile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_StoreHardwareProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the terminal has a hardware profile set
    /// </summary>
    private void validate_StoreHardwareProfile()
    {
        if (!RetailDeviceActivationValidationJob::ValidateStoreHardwareProfile(theDevice.Terminal))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_HardwareProfile");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_WorkerPermissions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the worker with given staff id has the 'manage devices' permission.
    /// </summary>
    private void validate_WorkerPermissions(RetailStaffId _staffId = '')
    {
        HcmWorker worker;
        HcmPositionWorkerAssignment assignment;
        HcmPositionDetail positionDetail;

        RetailPositionPosPermission permission;
        RetailJobPosPermissionGroup jobPermissionGroup;
        RetailPosPermissionGroup permissionGroup;

        boolean hasPermission = false;

        if (_staffId)
        {
            // Get the worker.
            worker = HcmWorker::findByPersonnelNumber(_staffId);

            if (worker)
            {
                // Get assignment for the worker.
                assignment = HcmWorkerHelper::getWorkerPrimaryPositionAssignment(worker.RecId);;

                if (assignment)
                {
                    // Get permissions for the assignment's position.
                    permission = RetailPositionPosPermission::find(assignment.Position);

                    // If the worker doesn't have Manage Device permission
                    if (permission && permission.manageDevice)
                    {
                        //validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_WorkerPermissions");
                        hasPermission = true;
                    }

                    // Get the permissions for the position's job group
                    positionDetail = HcmPositionDetail::findByPosition(assignment.Position);
                    if (positionDetail)
                    {
                        select RecId, ManageDevice from permissionGroup
                            join RecId, Job from jobPermissionGroup
                            where permissionGroup.RecId == jobPermissionGroup.RetailPosPermissionGroup
                                && jobPermissionGroup.Job == positionDetail.Job;

                        if (permissionGroup && permissionGroup.manageDevice)
                        {
                            hasPermission = true;
                        }
                    }
                }

                // If the worker doesn't have at least one position with the Manage Device permission, then fail.
                if (!hasPermission)
                {
                    validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_WorkerPermissions");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RegisterInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the terminal is already associated with a device.
    /// </summary>
    private void validate_RegisterInUse()
    {
        RetailDevice otherDevice;

        if (theDevice)
        {
            select firstOnly RecId from otherDevice where
            otherDevice.Terminal == theDevice.Terminal
            && otherDevice.RecId != theDevice.RecId;
        }

        if (otherDevice)
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_RegisterInUse");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RegisterMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the terminal exists.
    /// </summary>
    private void validate_RegisterMissing()
    {
        RetailTerminalTable terminal;

        if (theDevice)
        {
            select RecId from terminal where terminal.terminalId == theDevice.Terminal;
        }

        if (!terminal)
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_RegisterMissing");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_RegisterLayoutMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if a layout exists for the register or store.
    /// </summary>
    private void validate_RegisterLayoutMissing()
    {
        if (theDevice)
        {
            if (!RetailDeviceActivationValidationJob::ValidateRegisterLayoutMissing(theDevice.Terminal))
            {
                validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_RegisterLayoutMissing");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_WorkerExternalIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the staff has an External Identity.
    /// </summary>
    private void validate_WorkerExternalIdentity(RetailStaffId _staffId = '')
    {
        if (!RetailDeviceActivationValidationJob::ValidateWorkerExternalIdentity(_staffId))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_WorkerExternalIdentity");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_OperationsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if there are any POS operations defined.
    /// </summary>
    private void validate_OperationsCount()
    {
        if (!RetailDeviceActivationValidationJob::ValidateOperationsCount())
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_OperationsCount");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_ChannelPublished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the store channel has been published
    /// </summary>
    private void validate_ChannelPublished()
    {
        RetailTerminalTable terminal;
        RetailChannelTable channel;
        RetailStoreTable store;
        RetailInternalOrganization org;

        if (theDevice)
        {
            select firstonly * from org
            join RecId from store where org.InternalOrganization == store.OMOperatingUnitID
            join RecId from terminal where store.RecId == terminal.StoreRecId
                && terminal.terminalId == theDevice.Terminal;
        }

        //If the last modified/published date hasn't been set...
        if (!org.LastModifiedDateTime)
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_ChannelNotPublished");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_WorkerRegisterAddressbook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the worker and register are in the same address book.
    /// </summary>
    private void validate_WorkerRegisterAddressbook(RetailStaffId _staffId)
    {
        boolean commonAddressBook;

        if (theDevice && _staffId)
        {
            commonAddressBook = RetailDeviceActivationValidationJob::WorkerAllowedForTerminal(theDevice.Terminal, _staffId);
        }

        //If the worker and terminal do not have a common address book...
        if (!commonAddressBook)
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_WorkerAndTerminalDoNotShareAddressbook");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_CountryRegionIsoCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if there are any CountryRegion records with duplicate ISO Codes.
    /// </summary>
    private void validate_CountryRegionIsoCodes()
    {
        if (!cachedResults.exists(#CachedIsoCodes))
        {
            cachedResults.insert(#CachedIsoCodes, RetailDeviceActivationValidationJob::ValidateCountryRegionIsoCodes());
        }

        if (!cachedResults.lookup(#CachedIsoCodes))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_DuplicateBlankIsoCodes");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate_LegalEntityAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate whether or not the Legal Entity has a primary address defined.
    /// </summary>
    private void validate_LegalEntityAddress()
    {
        int key = #CachedLegalEntityAddress;

        if (!cachedResults.exists(key))
        {
            // Validate the LE Address
            SelectableDataArea dataAreaId = curExt();
            if (CompanyInfo::findDataArea(dataAreaId, false).postalAddress())
            {
                cachedResults.insert(key, true);
            }
            else
            {
                cachedResults.insert(key, false);
            }
        }

        //Profile is missing laungauge
        if (!cachedResults.lookup(key))
        {
            validationResultMessages.addEnd("@Retail:RetailDeviceActivationValidationJob_MissingLegalEntityAddress");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateStoreLanguage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that if the store has a default language set which is used for channel localization.
    /// </summary>
    /// <param name = "_terminalId">The terminal id.</param>
    /// <returns>true if the store language is set; otherwise, false.</returns>
    public static boolean ValidateStoreLanguage(RetailTerminalId _terminalId)
    {
        RetailStoreTable storeTable;
        RetailTerminalTable terminalTable;

        select firstonly * from storeTable
        join RecId from terminalTable
        where
            storeTable.RecId == terminalTable.StoreRecId
            && terminalTable.terminalId == _terminalId;

        // If the store does not have a language set, the company language is treated as default for the store.
        if (storeTable.cultureName || storeTable.companyInfo().LanguageId)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateTerminalVisualProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the terminal has a visual profile which is used for defining appearance of a register.
    /// </summary>
    /// <param name = "_terminalId">The terminal id.</param>
    /// <returns>true if the terminal has a visual profile; otherwise, false.</returns>
    public static boolean ValidateTerminalVisualProfile(RetailTerminalId _terminalId)
    {
        RetailTerminalTable terminalTable;
        RetailVisualProfile profileTable;

        select firstOnly RecId from profileTable
        join RecId from terminalTable
        where
            terminalTable.visualProfile == profileTable.profileId
            && terminalTable.terminalId == _terminalId;

        if (profileTable)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateStoreFunctionalityProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate that the store has a functionality profile properly set up.
    /// </summary>
    /// <param name = "_terminalId">The terminal id.</param>
    /// <returns>true if the store has a functionality profile; otherwise, false.</returns>
    public static boolean ValidateStoreFunctionalityProfile(RetailTerminalId _terminalId)
    {
        RetailStoreTable storeTable;
        RetailTerminalTable terminalTable;
        RetailFunctionalityProfile profileTable;

        select firstonly RecId from profileTable
        join RecId from storeTable
        join RecId from terminalTable
        where
            storeTable.functionalityProfile == profileTable.profileId
            && storeTable.RecId == terminalTable.StoreRecId
            && terminalTable.terminalId == _terminalId;

        if (profileTable)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateStoreHardwareProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the terminal has a hardware profile set which is used for using any external hardware peripheral.
    /// </summary>
    /// <param name = "_terminalId">The terminal id.</param>
    /// <returns>true if the terminal has a hardware profile set; otherwise, false.</returns>
    public static boolean ValidateStoreHardwareProfile(RetailTerminalId _terminalId)
    {
        RetailTerminalTable terminalTable;
        RetailHardwareProfile profileTable;

        select firstOnly RecId from profileTable
        join RecId from terminalTable
        where
            terminalTable.hardwareProfile == profileTable.profileId
            && terminalTable.terminalId == _terminalId;

        if (profileTable)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateRegisterLayoutMissing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if a layout exists for the register or store which is required by POS to display proper UI objects' screen postition and color.
    /// </summary>
    /// <param name = "_terminalId">The terminal id.</param>
    /// <returns>true if a layout exists for the register or store; otherwise, false.</returns>
    public static boolean ValidateRegisterLayoutMissing(RetailTerminalId _terminalId)
    {
        RetailStoreTable storeTable;
        RetailTerminalTable terminal;

        //Layout defined at the terminal level
        select firstonly RecId, layoutId, StoreRecId from terminal where terminal.terminalId == _terminalId;

        if (!terminal.layoutId)
        {
            //Layouts defined at the store level
            select firstonly recid from storeTable where storeTable.RecId == terminal.StoreRecId;
        }

        if (terminal.layoutId || storeTable.layoutId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateWorkerExternalIdentity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the staff has an External Identity defined which is required for user log on authentication.
    /// </summary>
    /// <param name = "_staffId">The staff Id.</param>
    /// <returns>true if there the staff has an External Identity defined; otherwise, false.</returns>
    public static boolean ValidateWorkerExternalIdentity(RetailStaffId _staffId = '')
    {
        //External Identity only supported in AX7
        RetailStaffTable staffTable;

        if (_staffId)
        {
            select firstonly RecId from staffTable
                where staffTable.staffId == _staffId
                && (staffTable.ExternalIdentityId != '' || staffTable.ExternalIdentitySubId != '');

            if (staffTable)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateOperationsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if there are any POS operations defined which are required for performing any POS operation.
    /// </summary>
    /// <returns>true if there are any POS operations defined; otherwise, false.</returns>
    public static boolean ValidateOperationsCount()
    {
        RetailOperations ops;

        select firstonly recid from ops;
        if (ops)
        {
            // If the operations exists, then validation is succussful.
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCountryRegionIsoCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if there are any CountryRegion records with duplicate ISO codes which is used for device activation.
    /// </summary>
    /// <returns>true if there are any CountryRegion records with duplicate ISO codes; otherwise, false.</returns>
    public static boolean ValidateCountryRegionIsoCodes()
    {
        int64 blankIsoCount = (select count(RecId) from LogisticsAddressCountryRegion where LogisticsAddressCountryRegion.ISOcode == '').recid;
        if (blankIsoCount <= 1)
        {
            //If There are 1 or less (blanks), then ISO code validation is successful
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>WorkerAllowedForTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the worker is allowed to activate device on the terminal.
    /// </summary>
    /// <param name = "_terminalId">Terminal Id.</param>
    /// <param name = "_staffId">Worker/Staff Id.</param>
    /// <returns>true if the worker is allowed to activate device on the terminal; otherwise, false.</returns>
    public static boolean WorkerAllowedForTerminal(RetailTerminalId _terminalId, RetailStaffId _staffId)
    {
        RetailTerminalTable terminalTable;
        RetailStaffTable staffTable;
        DirAddressBook dirAddressBook;
        DirAddressBookParty dirAddressBookParty;
        RetailStoreAddressBook retailStoreAddressBook;
        HcmWorker hcmWorker;

        // Check if the Staff and Terminal (via Store) have at least one common Address Book
        // Terminal-> Store -> StoreAddressBook (type: employee) -> Addressbook
        // Staff -> Worker -> AddressBookParty -> Addressbook
        select firstOnly dirAddressBook
            exists join retailStoreAddressBook
                where dirAddressBook.RecId == retailStoreAddressBook.AddressBook
                    && retailStoreAddressBook.AddressBookType == RetailAddressBookType::Employee
            exists join terminalTable
                where retailStoreAddressBook.StoreRecId == terminalTable.StoreRecId
                    && terminalTable.terminalId == _terminalId
            exists join dirAddressBookParty
                where dirAddressBook.RecId == dirAddressBookParty.AddressBook
            exists join hcmWorker
                where dirAddressBookParty.Party == hcmWorker.Person
                    && hcmWorker.PersonnelNumber == _staffId;

        if (dirAddressBook)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailDeviceActivationValidationJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailDeviceActivationValidationJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>