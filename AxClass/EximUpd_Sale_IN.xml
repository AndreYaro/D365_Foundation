<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximUpd_Sale_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim update sale class.
/// </summary>
class EximUpd_Sale_IN extends EximUpdate_IN implements BatchRetryable
{
    EximValue_IN saleValue;
    EximTxt_IN   saleTxt;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>depbBalanaceProductGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets balance product group.
    /// </summary>
    /// <param name="_dutyEntitlement">
    /// The duty entitlement.
    /// </param>
    /// <param name="_productGroup">
    /// The product group.
    /// </param>
    /// <returns>
    /// The instance of the <c>AmountMST</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST depbBalanaceProductGroup(
        AmountMST  _dutyEntitlement,
        RefRecId   _productGroup)
    {
        AmountMST   balance;
        ;

        balance = EximDEPBDetailsTable_IN::findBySchemesTableProductGroupId(schemeTableRecId, _productGroup).balanceLicenseAmount();

        return (_dutyEntitlement > balance) ? balance : _dutyEntitlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impExpiryDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports expiry date time.
    /// </summary>
    /// <returns>
    /// The date time of the transaction.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDateTime impExpiryDateTime()
    {
        EximDEPBSchemesLine_IN     eximDEPBSchemesLine;
        ;

        select maxof(ImportExpiryDateTime) from eximDEPBSchemesLine
            where eximDEPBSchemesLine.SchemeTableRecId  == schemeTableRecId
               && eximDEPBSchemesLine.RecId             != depbSchemesLine.RecId ;

        return eximDEPBSchemesLine.ImportExpiryDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Imports assessable value.
    /// </summary>
    /// <returns>
    /// The collection of the assessable value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container importValues()
    {
        return [authorizationSchemesLine.ImportExpiryDate, importAssessableValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize authorization scheme.
    /// </summary>
    public void initAuthorizationScheme()
    {
        super();

        if (schemeType == EximAuthorizationType_IN::AA
            || schemeType == EximAuthorizationType_IN::DFIA)
        {
            importAssessableValue = EximImportDetails_IN::balanceAmount(schemeTableRecId);
            this.parmTmpEximImportableItems(this.insertTmpImportableItems());
        }
        else
        {
            this.insertDEPBDetails();
            depbSchemesTable     = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId);
            importExpiryDateTime = this.impExpiryDateTime();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDEPBDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts DEPB details.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertDEPBDetails()
    {
        TmpEximEntitlementDetails_IN tmpEximEntitlementDetailsLoc;

        while select eximDEPBDetails
            where eximDEPBDetails.SchemesTableRecId == schemeTableRecId
        {
            tmpEximEntitlementDetailsLoc.EximProductGroupTable    = eximDEPBDetails.EximProductGroupTable;
            tmpEximEntitlementDetailsLoc.DutyEntitlement = eximDEPBDetails.DutyEntitlement - (eximDEPBDetails.DutyAvailed + eximDEPBDetails.Sold);
            totalDutyAmount                             += tmpEximEntitlementDetailsLoc.DutyEntitlement;
            tmpEximEntitlementDetailsLoc.insert();
        }

        this.parmTmpEximEntitlementDetails(tmpEximEntitlementDetailsLoc);

        totalDutyEntitlement = totalDutyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpImportableItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts import table items.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TmpEximImportableItems_IN</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximImportableItems_IN insertTmpImportableItems()
    {
        EximImportDetails_IN importDetails;
        EximValue_IN         netBalValue;
        Qty                  netBalQty;
        ;

        while select importDetails
           where importDetails.AuthorizationSchemesTableRecId == schemeTableRecId
        {
            netBalValue = 0;
            netBalQty   = 0;

            netBalValue = importDetails.displayNetBalValue();

            if (!netBalValue)
            {
                netBalQty = importDetails.displayNetBalQty();
            }

            if (netBalValue || netBalQty)
            {
                tmpImportableItems.ItemId = importDetails.ItemId;
                tmpImportableItems.Unit   = importDetails.Unit;
                tmpImportableItems.Qty    = netBalQty;
                tmpImportableItems.Value  = netBalValue;
                tmpImportableItems.insert();
            }
        }

        return tmpImportableItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>licenseStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the license status.
    /// </summary>
    /// <returns>
    /// The instance of the <c>EximLicenseStatus_IN</c> class.
    /// </returns>
    protected EximLicenseStatus_IN licenseStatus()
    {
        return EximLicenseStatus_IN::Sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaleTxt</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximTxt_IN parmSaleTxt(EximTxt_IN _saleTxt = saleTxt)
    {
        saleTxt = _saleTxt;

        return saleTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaleValue</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximValue_IN parmSaleValue(EximValue_IN _saleValue = saleValue)
    {
        saleValue = _saleValue;

        return saleValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        container schemeValues;
        ;

        if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            licenseNum,
                            issueDate,
                            importAssessableValue,
                            importExpiryDate,
                            saleValue,
                            saleTxt,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }
        else
        {
            schemeValues = [schemeTableId,
                            schemeTableRecId,
                            saleValue,
                            txt,
                            totalDutyEntitlement,
                            totalComponentAmount,
                            taxAccountGroup,
                            iECNumber,
                            transDate];
        }

        EximUpd_Sale_IN::runOnServer(
            schemeType,
            schemeValues,
            tmpTaxDetails,
            tmpImportableItems,
            tmpEximEntitlementDetails);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates and posts.
    /// </summary>
    public void updateAndPost()
    {
        super();

        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):
                if (authorizationSchemesLine)
                {
                    authorizationSchemesLine.SaleValue = saleValue;
                    authorizationSchemesLine.Text      = saleTxt;
                    authorizationSchemesLine.update();
                }
                break;

            case tablenum(EximDEPBSchemesTable_IN) :
                if (depbSchemesLine)
                {
                    depbSchemesLine.ImportExpiryDateTime = this.impExpiryDateTime();
                    depbSchemesLine.update();

                    update_recordset eximEntitlementDetails
                        setting
                            SaleValue            = saleValue,
                            ImportExpiryDateTime = this.impExpiryDateTime()
                            where eximEntitlementDetails.SchemesLineRecId == depbSchemesLine.RecId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAuthorizationScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates authorization scheme.
    /// </summary>
    protected void updateAuthorizationScheme()
    {
        switch (schemeTableId)
        {
            case tablenum(EximAuthorizationSchemesTable_IN):
                this.insertAuthorizationSchemeLine();
                break;
            case tablenum(EximDEPBSchemesTable_IN):
                this.updateDEPBSchemeLine();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateIncentiveScheme</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates incentive scheme.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateIncentiveScheme()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.updateAuthorizationScheme();

            this.updateAndPost();

            if (schemeType == EximAuthorizationType_IN::AA || schemeType == EximAuthorizationType_IN::DFIA)
            {
                this.insertSummaryImportableItems();
                this.writeImportDetails();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method run on the server side.
    /// </summary>
    /// <param name="_schemeType">
    /// The scheme type.
    /// </param>
    /// <param name="_schemeValues">
    /// The scheme values.
    /// </param>
    /// <param name="_tmpTaxDetails">
    /// The tmp tax details information.
    /// </param>
    /// <param name="_tmpImportableItems">
    /// The tmp importable items.
    /// </param>
    /// <param name="_tmpEximEntitlementDetails">
    /// The tmp exim entitlement details.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void runOnServer(
        EximAuthorizationType_IN     _schemeType,
        container                    _schemeValues,
        TmpEximTaxDetails_IN         _tmpTaxDetails,
        TmpEximImportableItems_IN    _tmpImportableItems,
        TmpEximEntitlementDetails_IN _tmpEximEntitlementDetails)
    {
        EximUpd_Sale_IN eximUpdSale = new EximUpd_Sale_IN();

        eximUpdSale.parmSchemeType(_schemeType);
        eximUpdSale.parmTmpEximTaxDetails(_tmpTaxDetails);
        eximUpdSale.parmTmpEximImportableItems(_tmpImportableItems);
        eximUpdSale.parmTmpEximEntitlementDetails(_tmpEximEntitlementDetails);

        if (_schemeType == EximAuthorizationType_IN::AA || _schemeType == EximAuthorizationType_IN::DFIA)
        {
            eximUpdSale.parmSchemeTableId(conpeek(_schemeValues, 1));
            eximUpdSale.parmSchemeTableRecId(conpeek(_schemeValues, 2));
            eximUpdSale.parmLicenseNumber(conpeek(_schemeValues, 3));
            eximUpdSale.parmIssueDate(conpeek(_schemeValues, 4));
            eximUpdSale.parmImportAssessableValue(conpeek(_schemeValues, 5));
            eximUpdSale.parmImportExpiryDate(conpeek(_schemeValues, 6));
            eximUpdSale.parmSaleValue(conpeek(_schemeValues, 7));
            eximUpdSale.parmSaleTxt(conpeek(_schemeValues, 8));
            eximUpdSale.parmTaxAccountGroup(conpeek(_schemeValues, 9));
            eximUpdSale.parmIECNumber(conpeek(_schemeValues, 10));
            eximUpdSale.parmTransDate(conpeek(_schemeValues, 11));
        }
        else
        {
            eximUpdSale.parmSchemeTableId(conpeek(_schemeValues, 1));
            eximUpdSale.parmSchemeTableRecId(conpeek(_schemeValues, 2));
            eximUpdSale.parmSaleValue(conpeek(_schemeValues, 3));
            eximUpdSale.parmTxt(conpeek(_schemeValues, 4));
            eximUpdSale.parmTotalDutyEntitlement(conpeek(_schemeValues, 5));
            eximUpdSale.parmTotalComponentAmount(conpeek(_schemeValues, 6));
            eximUpdSale.parmTaxAccountGroup(conpeek(_schemeValues, 7));
            eximUpdSale.parmIECNumber(conpeek(_schemeValues, 8));
            eximUpdSale.parmTransDate(conpeek(_schemeValues, 9));
        }

        eximUpdSale.updateIncentiveScheme();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>