<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsControlUOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsControlUOM</c> class is responsible for handling the UOM controls on the mobile device.
/// </summary>
#WHSRF
[WhsControlFactory(#UOM)]
class WhsControlUOM extends WhsControl
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValueSelected</Name>
				<Source><![CDATA[
    public boolean isValueSelected()
    {
        return mode == WHSWorkExecuteMode::ProductionScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessDefaultValue</Name>
				<Source><![CDATA[
    public boolean canProcessDefaultValue()
    {
        if (step == #OverPickStep ||
            step == #ShortPick ||
            pass.exists(#SelectedValueUOM))
        {
            return true;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFullQty</Name>
				<Source><![CDATA[
    private boolean processFullQty()
    {
        // Validate the fullQty with selected unit of measure.
        if (pass.exists(#FullQty))
        {
            InventUnitId inventUnitId = WHSCatchWeightHelper::inventHandlingUnitId(pass.parmItemId());

            // If the selected unit is not the invent unit then convert the fullQty.
            if (pass.parmSelectedValueUOM() != '' &&
                data != inventUnitId)
            {
                EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

                Qty fullQty = releasedProductUnitConverter.convert(WHSWorkExecuteDisplay::str2numDisplay(fieldValues.lookupStr(#FullQty)),
                                                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(data),
                                                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(inventUnitId),
                                                                                    NoYes::No,
                                                                                    pass.parmItemId(),
                                                                                    pass.parmInventDimId(),
                                                                                    NoYes::No);

                // If the fullQty exceeds the remaining quantity throw an error.
                if (controlData.parmWorkLine().InventQtyRemain - fullQty < 0)
                {
                    return this.fail("@WAX:MobileDevice_FullQtyExceedsRemaining_Error");
                }
                        
                fieldValues.insert(WHSWorkExecuteDisplayUserDirectedControls::FullInventQty, fullQty);
            }
            else if (data == inventUnitId)
            {
                fieldValues.insert(WHSWorkExecuteDisplayUserDirectedControls::FullInventQty, WHSWorkExecuteDisplay::str2numDisplay(fieldValues.lookupStr(#FullQty)));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processShortPick</Name>
				<Source><![CDATA[
    private boolean processShortPick()
    {
        UnitOfMeasureSymbol inventUOM = WHSCatchWeightHelper::inventHandlingUnitId(pass.lookupStr(#ItemId));
                
        InventHandlingQty origQtyToPick;

        if (mode == WHSWorkExecuteMode::ClusterPicking || mode == WHSWorkExecuteMode::SystemDirectedClusterPicking)
        {
            origQtyToPick = pass.parmQty();
        }
        else 
        {
            origQtyToPick = controlData.parmWorkLine().InventQtyRemain;
        }

        if (pass.isGroupPick())
        {
            origQtyToPick = WHSGroupPickLineDetails::newFromWorkLine(controlData.parmWorkLine()).inventQty;
        }

        if (data == inventUOM)
        {
            fieldValues.insert(#QtyShort, origQtyToPick - fieldValues.parmQtyToPick());
        }
        else
        {
            EcoResReleasedProductUnitConverter releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

            UnitOfMeasureRecId fromUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(inventUOM);
            UnitOfMeasureRecId toUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(data);

            if (releasedProductUnitConverter.canBeConverted(
                    fromUnitOfMeasure,
                    toUnitOfMeasure,
                    pass.parmItemId(),
                    pass.parmInventDimId()))
            {
                real convertedOrigQtyToPick = releasedProductUnitConverter.convert(
                                                    origQtyToPick,
                                                    fromUnitOfMeasure,
                                                    toUnitOfMeasure,
                                                    NoYes::No,
                                                    pass.parmItemId(),
                                                    pass.parmInventDimId());

                fieldValues.insert(#QtyShort, convertedOrigQtyToPick - fieldValues.parmQtyToPick());
            }
            else
            {
                return this.fail(strFmt("@SYS92102", inventUOM, data));
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public boolean process()
    {
        if (!this.processFullQty())
        {
            return false;
        }

        // Set the selected unit of measure if splitting work.
        if (step == #SplitWork)
        {
            fieldValues.parmSelectedValueUOM(data);
        }

        if (!fieldValues.parmItemId())
        {
            fieldValues.remove(#UOM);
        }
        else
        {
            if (!super())
            {
                return false;
            }

            if (step == #ShortPick)
            {
                if (!this.processShortPick())
                {
                    return false;
                }
            }

            // If a new item was scanned with a different default UOM it was already set as the selected UOM.
            if (!controlData.parmSaveUOMValue())
            {
                fieldValues.parmUOM(data);
                
                if (data && WhsMobileUOMPreventListOfValuesAsSelectedUOMFlight::instance().isEnabled() && !UnitOfMeasure::unitOfMeasureIdBySymbol(data))
                {
                    fieldValues.parmSelectedValueUOM('');
                }
                else 
                {
                    fieldValues.parmSelectedValueUOM(data);
                }
                
            }
        }
            
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
    public void populate()
    {
        fieldValues.parmUOM('');

        // Only blank selected UOM if it was automatically set with the scanned item.
        if (!controlData.parmSaveUOMValue())
        {
            fieldValues.parmSelectedValueUOM('');            
        }

        if (controlData.parmDefaulting() &&
            (pass.parmItemId() || 
             fieldValues.parmItemId()  ||
             this.isDefaultingSupported()))
        {
            UnitOfMeasureSymbol uom = WHSRFDefaultData::getDefaultValue(controlData.parmMenuItemName(),              
                                                            WHSDefaultDataField::UOM,
                                                            pass.parmUserId(),
                                                            fieldValues.parmInventLocationId(),
                                                            fieldValues.parmWMSLocationId());
            controlData.parmUOM(uom);
            if (uom)
            {
                controlData.processControl(#UOM, uom);
                fieldValues.parmSelectedValueUOM(uom);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDefaultingSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if defaulting is supported.
    /// </summary>
    /// <returns>true if supported; otherwise, false.</returns>
    protected boolean isDefaultingSupported()
    {
        return WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>