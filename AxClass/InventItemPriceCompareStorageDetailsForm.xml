<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceCompareStorageDetailsForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceCompareStorageDetailsForm</c> class handles business logic for the <c>InventItemPriceCompareStorageDetails</c> form.
/// </summary>
internal class InventItemPriceCompareStorageDetailsForm
{
    private InventItemPriceCompareStorage inventItemPriceCompareStorage;
    private InventItemPriceCompareStorageDetails inputInventItemPriceCompareStorageDetails;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>InventItemPriceCompareStorageDetailsForm</c> class based on the specified parameters.
    /// </summary>
    /// <param name = "_inventItemPriceCompareStorage">The parent storage record.</param>
    /// <param name = "_inputInventItemPriceCompareStorageDetails">The storage details record from which the form was opened.</param>
    /// <returns>A new instance of the <c>InventItemPriceCompareStorageDetailsForm</c> class.</returns>
    internal static InventItemPriceCompareStorageDetailsForm newFromParameters(InventItemPriceCompareStorage _inventItemPriceCompareStorage, InventItemPriceCompareStorageDetails _inputInventItemPriceCompareStorageDetails)
    {
        InventItemPriceCompareStorageDetailsForm inventItemPriceCompareStorageDetailsForm = new InventItemPriceCompareStorageDetailsForm();

        inventItemPriceCompareStorageDetailsForm.inventItemPriceCompareStorage = _inventItemPriceCompareStorage;
        inventItemPriceCompareStorageDetailsForm.inputInventItemPriceCompareStorageDetails = _inputInventItemPriceCompareStorageDetails;

        return inventItemPriceCompareStorageDetailsForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregates the storage data associated with the form.
    /// </summary>
    /// <param name = "_aggregateByCostGroupType">true if the data should be aggregated by cost group type; otherwise false. Optional.</param>
    /// <returns>A temporary storage details buffer containing the aggregated data.</returns>
    internal InventItemPriceCompareStorageDetails populateData(boolean _aggregateByCostGroupType = false)
    {
        InventItemPriceCompareStorageDetails localInventItemPriceCompareStorageDetails;
        InventItemPriceCompareStorageDetails tmpInventItemPriceCompareStorageDetails;
        tmpInventItemPriceCompareStorageDetails.setTmp();

        if (!_aggregateByCostGroupType)
        {
            insert_recordset tmpInventItemPriceCompareStorageDetails
                (TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty,
                NetChangeOnhandValue, OnhandValue, CompareToOnhandValue, UnitPrice, CompareToUnitPrice, NetChange)
            select
                TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty,
                sum(NetChangeOnhandValue), sum(OnhandValue), sum(CompareToOnhandValue), sum(UnitPrice), sum(CompareToUnitPrice), sum(NetChange)
            from localInventItemPriceCompareStorageDetails
            group by
                TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty
            where localInventItemPriceCompareStorageDetails.TransactionId == inventItemPriceCompareStorage.TransactionId;
        }
        else if (inputInventItemPriceCompareStorageDetails)
        {
            insert_recordset tmpInventItemPriceCompareStorageDetails
                (TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty, CostGroupType,
                NetChangeOnhandValue, OnhandValue, CompareToOnhandValue, UnitPrice, CompareToUnitPrice, NetChange)
            select
                TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup,  InventQty, CostGroupType,
                sum(NetChangeOnhandValue), sum(OnhandValue), sum(CompareToOnhandValue), sum(UnitPrice), sum(CompareToUnitPrice), sum(NetChange)
            from localInventItemPriceCompareStorageDetails
            group by
                TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty, CostGroupType
            where localInventItemPriceCompareStorageDetails.TransactionId == inventItemPriceCompareStorage.TransactionId
               && localInventItemPriceCompareStorageDetails.ItemId == inputInventItemPriceCompareStorageDetails.ItemId
               && localInventItemPriceCompareStorageDetails.InventDimId == inputInventItemPriceCompareStorageDetails.InventDimId;
        }
        else
        {
            insert_recordset tmpInventItemPriceCompareStorageDetails
                (TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty, CostGroupType,
                NetChangeOnhandValue, OnhandValue, CompareToOnhandValue, UnitPrice, CompareToUnitPrice, NetChange)
            select
                TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup,  InventQty, CostGroupType,
                sum(NetChangeOnhandValue), sum(OnhandValue), sum(CompareToOnhandValue), sum(UnitPrice), sum(CompareToUnitPrice), sum(NetChange)
            from localInventItemPriceCompareStorageDetails
            group by
                TransactionId, DefaultOrderType, ItemId, ItemName, UnitID, InventDimId, Price, PriceUnit, Markup, MarkupQty, PriceAllocateMarkup,
                CompareToPrice, CompareToPriceUnit, CompareToMarkup, CompareToMarkupQty, CompareToPriceAllocateMarkup, InventQty, CostGroupType
            where localInventItemPriceCompareStorageDetails.TransactionId == inventItemPriceCompareStorage.TransactionId;
        }

        return tmpInventItemPriceCompareStorageDetails;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>