<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateLocDirInformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLicensePlateLocDirInformation</c> clase builds up information about an entire license plate when the location directive is locating by full LP.
/// </summary>
abstract class WHSLicensePlateLocDirInformation
{
    UnitOfMeasureSymbol lastPutawayUnit;
    WHSLicensePlateId   licensePlateId;
    WHSShipmentId       shipmentId;
    RecId               mixedLPRecId;
    Volume              minRequiredVolume;
    Weight              minRequiredWeight;
    boolean             mixedItem;
    boolean             mixedBatch;
    boolean             mixedStatus;
    boolean             weightVolumeFound;

    private WHSModule whsModule;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWhsModule</Name>
				<Source><![CDATA[
    internal WHSModule parmWhsModule(WHSModule _whsModule = whsModule)
    {
        whsModule = _whsModule;

        return whsModule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWeightVolumeTotals</Name>
				<Source><![CDATA[
    protected void addWeightVolumeTotals(
        ItemId              _itemId,
        Qty                 _qty,
        UnitOfMeasureSymbol _putawayUnitId,
        UnitOfMeasureSymbol _qtyUnitId,
        InventDimId         _inventDimId,
        boolean             _flexibleContainer)
    {
        WHSPhysDimUOM physDimUOM;
        Qty           convertedQty;

        if (_putawayUnitId)
        {
            physDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _putawayUnitId);

            EcoResReleasedProductUnitConverter  releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

            convertedQty = releasedProductUnitConverter.convert(_qty,
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_qtyUnitId),
                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_putawayUnitId),
                                                                NoYes::No, // _roundAbsoluteValue
                                                                _itemId,
                                                                _inventDimId,
                                                                NoYes::No); // _applyRounding
        }
        else
        {
            physDimUOM   = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _qtyUnitId);
            convertedQty = _qty;
        }

        minRequiredWeight += physDimUOM.Weight * convertedQty;

        if (_flexibleContainer)
        {
            minRequiredVolume += physDimUOM.displayVolume() * convertedQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected abstract Query buildQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinRequiredWeightVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the LP is from mixed license plate receiving or ASN receiving
    /// and then finds the mininum weight and volume for the LP.
    /// </summary>
    /// <param name="_putawayUnitId">
    /// The unit to convert the quantity to.
    /// </param>
    /// <returns>
    /// A container with the minimum required weight and volume for the full LP.
    /// </returns>
    public container getMinRequiredWeightVolume(UnitOfMeasureSymbol _putawayUnitId)
    {
        if (lastPutawayUnit != _putawayUnitId)
        {
            lastPutawayUnit   = _putawayUnitId;
            weightVolumeFound = false;
            minRequiredWeight = 0;
            minRequiredVolume = 0;
        }

        if (weightVolumeFound)
        {
            return [minRequiredWeight, minRequiredVolume];
        }

        WHSLicensePlate  licensePlate = WHSLicensePlate::find(licensePlateId);
        WHSContainerType containerType;
        boolean          flexibleContainerVolume = true;

        if (licensePlate.ContainerTypeCode)
        {
            containerType = WHSContainerType::find(licensePlate.ContainerTypeCode);
            flexibleContainerVolume = containerType.FlexibleVolumeDimensions;
        }

        this.calculateWeightVolume(_putawayUnitId, flexibleContainerVolume);

        if (containerType)
        {
            minRequiredVolume += containerType.ContainerVolume;
            minRequiredWeight += containerType.TareWeight;
        }

        weightVolumeFound = true;

        return [minRequiredWeight, minRequiredVolume];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyOnLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the total invent quantity on the license plate.
    /// </summary>
    /// <returns>
    /// The invent quantity of a license plate.
    /// </returns>
    public abstract InventQty getQtyOnLicensePlate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWeightVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the weight and volume of license plate
    /// </summary>
    /// <param name = "_putawayUnitId">
    /// Storage unit Id of the location.
    /// </param>
    /// <param name = "_flexibleContainerVolume">
    /// Specifies if container is flexible.
    /// </param>
    public abstract void calculateWeightVolume(
        UnitOfMeasureSymbol _putawayUnitId,
        boolean             _flexibleContainerVolume)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLicensePlate</Name>
				<Source><![CDATA[
    protected void initLicensePlate(
        WHSLicensePlateId _licensePlateId,
        WHSShipmentId     _shipmentId = '')
    {
        licensePlateId = _licensePlateId;
        shipmentId     = _shipmentId;
        mixedLPRecId   = WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(licensePlateId).RecId;

        this.setFlags();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMixedBatch</Name>
				<Source><![CDATA[
    public boolean parmMixedBatch(boolean _mixedBatch = mixedBatch)
    {
        mixedBatch = _mixedBatch;

        return mixedBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMixedItem</Name>
				<Source><![CDATA[
    public boolean parmMixedItem(boolean _mixedItem = mixedItem)
    {
        mixedItem = _mixedItem;

        return mixedItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMixedStatus</Name>
				<Source><![CDATA[
    public boolean parmMixedStatus(boolean _mixedStatus = mixedStatus)
    {
        mixedStatus = _mixedStatus;

        return mixedStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFlags</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the license plate needs the location to allow mixed items, batches, statuses.
    /// </summary>
    public void setFlags()
    {
        WHSInventStatusId inventStatus;
        InventBatchId     batchId;
        QueryRun          setFlagsRun = new QueryRun(this.buildQuery());
        ItemId            currentItem;
        ItemId            firstItem;
        boolean           isFirst = true;

        while (setFlagsRun.next())
        {
            if (mixedLPRecId)
            {
                WHSMixedLicensePlateReceiptLine mixedLPLines = setFlagsRun.get(tableNum(WHSMixedLicensePlateReceiptLine));
                currentItem  = InventTransOrigin::findByInventTransId(mixedLPLines.InventTransId).ItemId;
            }
            else
            {
                WHSASNItem asnItem = setFlagsRun.get(tableNum(WHSASNItem));
                currentItem = asnItem.ItemId;
            }

            InventDim inventDim = setFlagsRun.get(tableNum(InventDim));

            if (mixedStatus
            &&  mixedBatch
            &&  mixedItem)
            {
                break;
            }

            if (!isFirst)
            {
                if (!mixedStatus
                &&  inventDim.InventStatusId != inventStatus)
                {
                    mixedStatus = true;
                }

                if (!mixedBatch
                &&  inventDim.inventBatchId != batchId)
                {
                    mixedBatch = true;
                }

                if (!mixedItem
                &&  currentItem != firstItem)
                {
                    mixedItem = true;
                }
            }
            else
            {
                isFirst = false;

                inventStatus = inventDim.InventStatusId;
                batchId      = inventDim.inventBatchId;
                firstItem    = currentItem;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSLicensePlateLocDirInformation</c> class.
    /// </summary>
    /// <param name="_locateBy">
    /// Enum to determine how to build instance of class.
    /// </param>
    /// <param name="_licensePlateId">
    /// The ID of the license plate.
    /// </param>
    /// <param name="_shipmentId">
    /// The ID of the shipment, this will be required if the LP is coming from an ASN.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLicensePlateLocDirInformation</c> class.
    /// If the parameters can not find a matching record, return null.
    /// </returns>
    public static WHSLicensePlateLocDirInformation newLicensePlate(
        WHSLocDirLocateBy _locateBy,
        WHSLicensePlateId _licensePlateId,
        WHSShipmentId     _shipmentId = '')
    {
        WHSLicensePlateLocDirInformation lpInformation;

        switch (_locateBy)
        {
            case WHSLocDirLocateBy::MixedLP:
                lpInformation = WHSLicensePlateLocDirInformationMixedLP::construct();
                break;

            case WHSLocDirLocateBy::ASN:
                lpInformation = WHSLicensePlateLocDirInformationASN::construct();
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        WHSLicensePlateLocDirInformationContext context = WHSLicensePlateLocDirInformationContext::current();

        if (context)
        {
            lpInformation.parmWhsModule(context.whsModule);
        }

        lpInformation.initLicensePlate(_licensePlateId, _shipmentId);

        return lpInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWholeLPAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines how to locate license plate information.
    /// </summary>
    /// <param name="_licensePlateId">
    /// The ID of the license plate.
    /// </param>
    /// <param name="_shipmentId">
    /// The ID of the shipment, this will be required if the LP is coming from an ASN.
    /// </param>
    /// <returns>
    /// Enum to determine how to build class.
    /// </returns>
    public static WHSLocDirLocateBy isWholeLPAvailable(
        WHSLicensePlateId _licensePlateId,
        WHSShipmentId     _shipmentId = '')
    {
        WHSLocDirLocateBy locateBy;

        if (WHSMixedLicensePlateReceipt::hasOpenRecord(_licensePlateId))
        {
            locateBy = WHSLocDirLocateBy::MixedLP;
        }
        else if (_shipmentId)
        {
            locateBy = WHSLocDirLocateBy::ASN;
        }
        else
        {
            locateBy = WHSLocDirLocateBy::Standard;
        }

        return locateBy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>