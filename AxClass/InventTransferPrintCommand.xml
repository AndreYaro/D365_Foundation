<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferPrintCommand</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferPrintCommand</c> class is responsible for printing transfer order reports.
/// </summary>
public abstract class InventTransferPrintCommand
{
    private InventTransferParmTable         inventTransferParmTable;
    private InventTransferPrintDataProvider printDataProvider;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>printerSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the printer settings for the update.
    /// </summary>
    /// <returns>
    /// The printer settings for the update.
    /// </returns>
    public container printerSettings()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePrintManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is selected for the current report printing to use the print management destination.
    /// </summary>
    /// <returns>True if it is selected to use the print management destination; otherwise false.</returns>
    public PrintMgmtUsePrintManagementDestination usePrintManagement()
    {
        return inventTransferParmTable.UsePrintManagementDestination;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>InventTransferParmTable</c> record that is needed for getting the data when printing a report.
    /// </summary>
    /// <param name = "_inventTransferParmTable">The current <c>InventTransferParmTable</c> record</param>
    /// <returns>The current <c>InventTransferParmTable</c> record</returns>
    public InventTransferParmTable parmInventTransferParmTable(InventTransferParmTable _inventTransferParmTable = inventTransferParmTable)
    {
        inventTransferParmTable = _inventTransferParmTable;

        return inventTransferParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the instance of the <c>InventTransferPrintDataProvider</c> which contains all the additional data needed to print
    /// a transfer order report.
    /// </summary>
    /// <param name = "_printDataProvider">The instance of the <c>InventTransferPrintDataProvider</c> class</param>
    /// <returns>The instance of the <c>InventTransferPrintDataProvider</c> class</returns>
    public InventTransferPrintDataProvider parmPrintDataProvider(InventTransferPrintDataProvider _printDataProvider = printDataProvider)
    {
        printDataProvider = _printDataProvider;

        return printDataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the output menu items which are responsible for printing a transfer order reports
    /// and passes the data needed.
    /// </summary>
    public abstract void printOut()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and instantiates a <c>InventTransferPrintCommand</c> class based on the update type of the passed <c>InventTransferParmTable</c> record.
    /// </summary>
    /// <param name = "_parmTable">The current transfer order parm table.</param>
    /// <param name = "_dataProvider">The instance of the current print data provider class</param>
    /// <returns>An instance of <c>InventTransferPrintCommand</c> class</returns>
    public static InventTransferPrintCommand newFromParmTable(InventTransferParmTable _parmTable, InventTransferPrintDataProvider _dataProvider)
    {
        InventTransferPrintAttribute printAttribute = new InventTransferPrintAttribute(_parmTable.UpdateType);

        InventTransferPrintCommand printCommand = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventTransferPrintCommand), printAttribute);

        if (!printCommand)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        printCommand.parmInventTransferParmTable(_parmTable);
        printCommand.parmPrintDataProvider(_dataProvider);

        return printCommand;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>