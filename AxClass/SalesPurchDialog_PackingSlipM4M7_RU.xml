<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchDialog_PackingSlipM4M7_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class SalesPurchDialog_PackingSlipM4M7_RU extends SalesPurchDialog_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJour</Name>
				<Source><![CDATA[
    protected boolean checkJour(CustVendInvoiceJour _jour)
    {
        VendPackingSlipJour jour = _jour;
        return PrintoutTable_RU::existAnyPckSlipJour(jour.PackingSlipId,
                                                     jour.DeliveryDate,
                                                     jour.PurchId,
                                                     VendPackingSlipVersion::findLatest(jour.RecId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findJour</Name>
				<Source><![CDATA[
    protected CustVendInvoiceJour findJour(PrintoutTable_RU _table)
    {
        VendPackingSlipJour  vendPackingSlipJour;

        select firstonly vendPackingSlipJour
            where vendPackingSlipJour.PurchId                   == _table.SalesPurchId      &&
                  vendPackingSlipJour.PackingSlipId             == _table.DocumentId        &&
                  vendPackingSlipJour.DeliveryDate              == _table.DocumentDate      &&
                  vendPackingSlipJour.InvoiceAccount            == _table.CustVendAccount   &&
                  vendPackingSlipJour.OffSessionId_RU           == _table.OffSessionId;

        return vendPackingSlipJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRecIdField</Name>
				<Source><![CDATA[
    protected fieldId jourRecIdField()
    {
        return fieldnum(VendPackingSlipJour, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopPrintoutTable</Name>
				<Source><![CDATA[
    protected void loopPrintoutTable(Set _typeSet,
                                     Set _locationSet,
                                     Set _numSet,
                                     Set _recIdSet)
    {
        PrintoutTable_RU     printout;

        while select InventLocationId, JournalType, JournalNum, RecId from printout
            where printout.DocumentId      == invoiceJour.InvoiceId   &&
                  printout.DocumentDate    == invoiceJour.InvoiceDate &&
                  printout.SalesPurchId    == invoiceJour.Num         &&
                  printout.CustVendAccount == invoiceJour.InvoiceAccount &&
                 (printout.RefTableId      != tableNum(VendPackingSlipJour) ||
                  printout.VendPackingSlipVersion == VendPackingSlipVersion::findLatest(invoiceJour.RecId).RecId)
        {
            _locationSet.add(printout.InventLocationId);
            _typeSet.add    (enum2str(printout.JournalType));
            _numSet.add     (printout.JournalNum);
            _recIdSet.add   (printout.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RecordSortedList    _journalList = new RecordSortedList(tablenum(VendPackingSlipJour)),
                    CustVendInvoiceJour _invoiceJour = null)
    {
        super(_journalList, _invoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReport</Name>
				<Source><![CDATA[
    protected void runReport(Args _args)
    {
        PurchReport_PackingSlipM4M7_RU::main(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS107043";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>