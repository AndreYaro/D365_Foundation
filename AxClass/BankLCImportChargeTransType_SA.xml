<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLCImportChargeTransType_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the bank charge for different transaction type.
/// </summary>
class BankLCImportChargeTransType_SA extends BankLCImportTransType
{
    BankLCImportChargeRefRecId_SA bankLCImportChargeRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateMarkupTransToPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the markup transaction to the purchase table header.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of bank letter of credit import line.
    /// </param>
    public void allocateMarkupTransToPurch(BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        this.doAllocateMarkupTransToPurch(_bankLCImportLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the transaction to the bank letter of credit lines.
    /// </summary>
    /// <param name="_allocationType">
    ///    The allocation type.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the bank letter of credit import line.
    /// </param>
    public void allocateTransaction(
        BankLCImportTransAllocationType _allocationType,
        BankLCLineRefRecId              _bankLCImportLineRefRecId)
    {
        this.doAllocateTransactions(_allocationType, _bankLCImportLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a miscellaneous charge allocation transaction in the <c>BankLCImportChargeAllocation_SA</c>
    ///    table.
    /// </summary>
    /// <param name="_bankLCImportChargeRefRecId">
    ///    The record ID of the bank letter of credit import charge.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the bank letter of credit import line.
    /// </param>
    /// <param name="_amount">
    ///    The amount to be allocated.
    /// </param>
    /// <remarks>
    ///    The caller needs to invoke this method in a TTS scope.
    /// </remarks>
    private void createTransAllocation(
        BankLCImportChargeRefRecId_SA       _bankLCImportChargeRefRecId,
        bankLCLineRefRecId                  _bankLCImportLineRefRecId,
        BankLCImportTransAllocatedAmountCur _amount)
    {
        BankLCImportChargeAllocation_SA bankLCImportChargeAllocation;

        bankLCImportChargeAllocation.clear();
        bankLCImportChargeAllocation.BankLCImportCharge = _bankLCImportChargeRefRecId;
        bankLCImportChargeAllocation.BankLCImportLine   = _bankLCImportLineRefRecId;
        bankLCImportChargeAllocation.AllocatedAmountCur = _amount;
        bankLCImportChargeAllocation.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllocateMarkupTransToPurch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the markup transaction to the purchase table.
    /// </summary>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of bank letter of credit import line.
    /// </param>
    private void doAllocateMarkupTransToPurch(BankLCLineRefRecId _bankLCImportLineRefRecId)
    {
        #OCCRetryCount

        BankLCImport                    bankLCImportLocal;
        BankLCImportChargeAllocation_SA bankLCImportChargeAllocation;
        BankLCImportCharge_SA           bankLCImportCharge;
        MarkupTrans                     newMarkupTrans;
        PurchTable                      purchTableLocal;

        try
        {
            ttsbegin;

            bankLCImportLocal   = BankLCImport::find(this.parmBankLCImportRecId());
            purchTableLocal     = bankLCImportLocal.getPurchTable();

            while select forupdate bankLCImportChargeAllocation
                where bankLCImportChargeAllocation.Settled              == NoYes::No
                    && bankLCImportChargeAllocation.BankLCImportLine    == _bankLCImportLineRefRecId
                join bankLCImportCharge
                    where bankLCImportCharge.RecId          == bankLCImportChargeAllocation.BankLCImportCharge
                        && bankLCImportCharge.BankLCImport  == bankLCImportLocal.RecId
            {
                newMarkupTrans.clear();
                newMarkupTrans.initFromBankLCImportMarkupTrans_SA(
                    purchTableLocal,
                    bankLCImportChargeAllocation);
                newMarkupTrans.insert();

                bankLCImportChargeAllocation.updateSettleStatus(true);
                bankLCImportChargeAllocation.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAllocateTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the bank letter of credit charge to lines.
    /// </summary>
    /// <param name="_allocationType">
    ///    The allocation type.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of bank letter of credit import line.
    /// </param>
    protected void doAllocateTransactions(
        BankLCImportTransAllocationType _allocationType,
        BankLCLineRefRecId              _bankLCImportLineRefRecId)
    {
        #OCCRetryCount

        BankLCImport                            bankLCImportLocal;
        BankLCImportTransAllocatedAmountCur     amountToLocate;
        BankLCImportTransAllocatedAmountCur     remainingAmountToLocate;
        BankLCShipmentAmountCur                 totalShipmentAmount;
        BankLCImportLine                        bankLCImportLineLocal;
        BankLCImportCharge_SA                   bankLCImportChargeLocal;
        int                                     countOfBankLCImportLines;

        try
        {
            ttsbegin;

            switch (_allocationType)
            {
                case BankLCImportTransAllocationType::Dedicated:
                    bankLCImportLineLocal = BankLCImportLine::find(_bankLCImportLineRefRecId);
                    if (bankLCImportLineLocal
                        && bankLCImportLineLocal.RecId != 0
                        && this.isAllocateTransactionAllowed(bankLCImportLineLocal))
                    {
                        while select bankLCImportChargeLocal
                            where bankLCImportChargeLocal.BankLCImport    == bankLCImportRecId
                                && bankLCImportChargeLocal.Selected       == NoYes::Yes
                                && bankLCImportChargeLocal.TransStatus    == BankLCImportTransStatusType::Posted
                        {
                            remainingAmountToLocate = bankLCImportChargeLocal.getBalanceAmount();
                            if (remainingAmountToLocate > 0)
                            {
                                this.createTransAllocation(
                                    bankLCImportChargeLocal.RecId,
                                    bankLCImportLineLocal.RecId,
                                    remainingAmountToLocate);
                            }
                        }
                    }
                    break;
                case BankLCImportTransAllocationType::Distributed:
                    bankLCImportLocal   = BankLCImport::find(bankLCImportRecId);
                    totalShipmentAmount = bankLCImportLocal.getTotalShipmentAmount();
                    if (totalShipmentAmount > 0)
                    {
                        while select bankLCImportChargeLocal
                            where bankLCImportChargeLocal.BankLCImport    == bankLCImportRecId
                                && bankLCImportChargeLocal.Selected       == NoYes::Yes
                                && bankLCImportChargeLocal.TransStatus    == BankLCImportTransStatusType::Posted
                        {
                            remainingAmountToLocate = bankLCImportChargeLocal.getBalanceAmount();
                            if (remainingAmountToLocate > 0)
                            {
                                countOfBankLCImportLines = this.getNumberOfShipmentsToAllocate();

                                while select bankLCImportLineLocal
                                    where bankLCImportLineLocal.BankLC == bankLCImportRecId
                                {
                                    if (this.isAllocateTransactionAllowed(bankLCImportLineLocal))
                                    {
                                        countOfBankLCImportLines --;

                                        if (bankLCImportLineLocal.ShipmentAmountCur != 0)
                                        {
                                            amountToLocate = round(remainingAmountToLocate * ( bankLCImportLineLocal.ShipmentAmountCur / totalShipmentAmount), 0.01);

                                            // the logic to make sure the reminding amount could all be included.
                                            if (countOfBankLCImportLines == 0)
                                            {
                                                this.createTransAllocation(
                                                    bankLCImportChargeLocal.RecId,
                                                    bankLCImportLineLocal.RecId,
                                                    remainingAmountToLocate);
                                            }
                                            else
                                            {
                                                this.createTransAllocation(
                                                    bankLCImportChargeLocal.RecId,
                                                    bankLCImportLineLocal.RecId,
                                                    amountToLocate);

                                                remainingAmountToLocate = remainingAmountToLocate - amountToLocate;
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }
                    break;
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportChargeRecId</Name>
				<Source><![CDATA[
    public BankLCImportChargeRefRecId_SA parmBankLCImportChargeRecId(BankLCImportChargeRefRecId_SA _bankLCImportChargeRecId = bankLCImportChargeRecId)
    {
        bankLCImportChargeRecId = _bankLCImportChargeRecId;
        return bankLCImportChargeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankLCImportRecId</Name>
				<Source><![CDATA[
    public BankLCRefRecId parmBankLCImportRecId(BankLCRefRecId _bankLCImportRecId = bankLCImportRecId)
    {
        bankLCImportRecId = _bankLCImportRecId;
        return bankLCImportRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does the actions after the Journal has been posted.
    /// </summary>
    public void postedActions()
    {
        BankLCImportType        bankLCImportType;
        BankLCImportCharge_SA   bankLCImportCharge;

        if (!ledgerJournalTransBankLC.BankLC
            || !ledgerJournalTrans.JournalNum
            || !ledgerJournalTrans.Voucher)
        {
            return;
        }

        if (BankLCImportCharge_SA::existVoucher(
                ledgerJournalTransBankLC.BankLC,
                ledgerJournalTrans.JournalNum,
                ledgerJournalTrans.Voucher,
                ledgerJournalTrans.TransDate))
        {
            return;
        }

        bankLCImportType = BankLCImportType::construct(ledgerJournalTransBankLC.BankLC, true);

        bankLCImportCharge.clear();
        bankLCImportCharge.BankLCImport = bankLCImportType.parmBankLCImport().RecId;
        bankLCImportCharge.JournalNum   = ledgerJournalTrans.JournalNum;
        bankLCImportCharge.Voucher      = ledgerJournalTrans.Voucher;
        bankLCImportCharge.AmountCur    = this.getAmount();
        bankLCImportCharge.CurrencyCode = bankLCImportType.parmBankLCImport().getCurrencyCode();
        bankLCImportCharge.MarkupCode   = ledgerJournalTransBankLC.MarkupCode_SA;
        bankLCImportCharge.ModuleType   = ledgerJournalTransBankLC.ModuleType_SA;
        bankLCImportCharge.PostedDate   = ledgerJournalTrans.TransDate;
        bankLCImportCharge.TransStatus  = BankLCImportTransStatusType::Posted;
        bankLCImportCharge.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the transaction will be posted.
    /// </summary>
    /// <returns>
    ///    true if the transaction will posted; otherwise, false.
    /// </returns>
    public boolean validateLedgerPosting()
    {
        boolean             allOk = true;
        BankLCImport        bankLCImportLocal;
        MarkupTable         markupTableLocal;
        CurrencyCode        currencyCodeLC;
        LedgerJournalType   ledgerJournalType;

        bankLCImportLocal = BankLCImport::find(ledgerJournalTransBankLC.BankLC);

        if (!bankLCImportLocal || bankLCImportLocal.RecId == 0)
        {
            // System could not find the required Letter of Cedit.
            allOk = checkFailed("@SYS332211");
        }

        if (allOk)
        {
            if (!bankLCImportLocal.isMarkupTransactionAllowed_SA())
            {
                // Misc.Charge transaction could not be posted due to Letter of Credit is
                // either not confirmed or not synchronized with purchase order.
                allOk = checkFailed("@SYS332245");
            }
        }

        if (allOk)
        {
            ledgerJournalType = ledgerJournalTrans.ledgerJournalTable().JournalType;
            if (ledgerJournalType       != LedgerJournalType::Daily
                && ledgerJournalType    != LedgerJournalType::VendInvoiceRegister)
            {
                // Only Daily Journal or Vend Invoice could be used to post Letter of Credit Misc.Charge transactions.
                allOk = checkFailed("@SYS332246");
            }
        }

        if (allOk)
        {
            currencyCodeLC = bankLCImportLocal.getCurrencyCode();
            if (ledgerJournalTrans.CurrencyCode != currencyCodeLC)
            {
                // The offset bank account used for Letter of Credit Misc.Charge transaction
                // does not have same currecy code with Letter of Credit.
                allOk = checkFailed("@SYS332249");
            }
        }

        if (allOk)
        {
            markupTableLocal = MarkupTable::find(MarkupModuleType::Vend,
                                                 ledgerJournalTransBankLC.MarkupCode_SA);
            if (!markupTableLocal.IsLetterOfCredit_SA)
            {
                // The Misc.Charge code is not marked for Letter of Credit
                allOk = checkFailed(strfmt("@SYS332255"));
            }
        }

        return allOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateTransactionOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Allocates the transactions on the server side.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the bank letter of credit import.
    /// </param>
    /// <param name="_allocationType">
    ///    The allocation type.
    /// </param>
    /// <param name="_bankLCImportLineRefRecId">
    ///    The record ID of the bank import letter of credit line.
    /// </param>
    private static void allocateTransactionOnServer(
        BankLCRefRecId                  _bankLCImportRecId,
        BankLCImportTransAllocationType _allocationType,
        BankLCLineRefRecId              _bankLCImportLineRefRecId)
    {
        BankLCImportChargeTransType_SA::constructFromBankLCImport(
            _bankLCImportRecId).doAllocateTransactions(
                _allocationType,
                _bankLCImportLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankLCImportChargeTransType_SA construct()
    {
        return new BankLCImportChargeTransType_SA();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromBankLCImport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BankLCImportMarginTransType</c> class.
    /// </summary>
    /// <param name="_bankLCImportRecId">
    ///    The record ID of the bank letter of credit import.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BankLCImportMarginTransType</c> class.
    /// </returns>
    public static BankLCImportChargeTransType_SA constructFromBankLCImport(BankLCRefRecId _bankLCImportRecId)
    {
        BankLCImportChargeTransType_SA ret;

        ret = new BankLCImportChargeTransType_SA();
        ret.parmBankLCImportRecId(_bankLCImportRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromBankLCImportCharge</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BankLCImportChargeTransType_SA</c> class.
    /// </summary>
    /// <param name="_bankLCImportChargeRecId">
    /// The record ID of the letter of credit charge transactions.
    /// </param>
    /// <returns>
    /// A new instance of the <c>BankLCImportChargeTransType_SA</c> class.
    /// </returns>
    public static BankLCImportChargeTransType_SA constructFromBankLCImportCharge(BankLCImportChargeRefRecId_SA _bankLCImportChargeRecId)
    {
        BankLCImportChargeTransType_SA ret;

        ret = BankLCImportChargeTransType_SA::constructFromBankLCImport(
            BankLCImportCharge_SA::find(_bankLCImportChargeRecId).BankLCImport);
        ret.parmBankLCImportChargeRecId(_bankLCImportChargeRecId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultChargeAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default margin account from bank posting profile.
    /// </summary>
    /// <param name="_bankLCRefRecId">
    ///    The record ID of bank letter of credit.
    /// </param>
    /// <returns>
    ///    A <c>LedgerDimensionAccount</c> record.
    /// </returns>
    public static LedgerDimensionAccount getDefaultChargeAccount(BankLCRefRecId _bankLCRefRecId)
    {
        BankDocumentPosting     bankDocumentPosting;
        LedgerDimensionAccount  miscChargeAccount;

        bankDocumentPosting = BankLCImportTransType::getBankDocumentPosting(_bankLCRefRecId);

        if (bankDocumentPosting && bankDocumentPosting.RecId != 0)
        {
            miscChargeAccount = LedgerDimensionFacade::serviceCreateLedgerDimension(bankDocumentPosting.MiscChargesLedgerDimension);
        }
        return miscChargeAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default ledger and offset dimension account.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    The ledger journal transaction to be set.
    /// </param>
    /// <param name="_ledgerJournalTransBankLC">
    ///    The bank letter of credit.
    /// </param>
    public static void setDefaultAccounts(
        LedgerJournalTrans          _ledgerJournalTrans,
        LedgerJournalTransBankLC    _ledgerJournalTransBankLC)
    {
        if (_ledgerJournalTransBankLC.TransType == BankLCLedgerJournalTransType::MiscCharge_SA
            && _ledgerJournalTransBankLC.BankLC)
        {
            if (_ledgerJournalTrans.AccountType != LedgerJournalACType::Ledger)
            {
                _ledgerJournalTrans.AccountType     = LedgerJournalACType::Ledger;
                _ledgerJournalTrans.LedgerDimension = BankLCImportChargeTransType_SA::getDefaultChargeAccount(_ledgerJournalTransBankLC.BankLC);
            }
            else
            {
                if (!_ledgerJournalTrans.LedgerDimension)
                {
                    _ledgerJournalTrans.LedgerDimension = BankLCImportChargeTransType_SA::getDefaultChargeAccount(_ledgerJournalTransBankLC.BankLC);
                }
            }
        }

        if (_ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Bank)
        {
            _ledgerJournalTrans.setOffsetLedgerDimension(
                _ledgerJournalTrans.ledgerJournalTable(),
                LedgerJournalACType::Bank,
                BankLCImportTransType::getBankAccountLedgerDim(_ledgerJournalTransBankLC.BankLC));
        }
        else
        {
            if (!_ledgerJournalTrans.OffsetLedgerDimension)
            {
                _ledgerJournalTrans.setOffsetLedgerDimension(
                    _ledgerJournalTrans.ledgerJournalTable(),
                    LedgerJournalACType::Bank,
                    BankLCImportTransType::getBankAccountLedgerDim(_ledgerJournalTransBankLC.BankLC));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>