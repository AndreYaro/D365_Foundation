<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceReportUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The UI builder for retail price report.
/// </summary>
internal class RetailPriceReportUIBuilder extends SrsReportDataContractUIBuilder
{
    DialogField dialogFieldFromDate, dialogFieldToDate;
    private RetailPriceReportRDPContract contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the layout for the report dialog.
    /// </summary>
    public void build()
    {
        super();

        Dialog dialogLocal = this.dialog();
        contract = this.dataContractObject() as RetailPriceReportRDPContract;

        dialogFieldFromDate = dialogLocal.addFieldValue(extendedTypeStr(FromDate), contract.parmCalculationStartDate(), "@RetailPricing:PriceReportFromDate");
        dialogFieldToDate = dialogLocal.addFieldValue(extendedTypeStr(ToDate), contract.parmCalculationEndDate(), "@RetailPricing:PriceReportToDate");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enforce greater than or equal to relation on to date and from date.
    /// </summary>
    /// <param name="_control">
    /// The <c>FormDateControl</c> object that has changed.
    /// </param>
    /// <returns>
    /// true if the control value has been modified; otherwise false.
    /// </returns>
    public boolean dateModified(FormDateControl _control)
    {
        boolean isModified = _control.modified();
        date fromDate = dialogFieldFromDate.value();
        date toDate = dialogFieldToDate.value();
        // Only check date value if date value is modified.
        // From date should not be greater than to date. The date range should not be greater than 7 days.
        boolean isDateValueInvalid = isModified && (fromDate > toDate || fromDate + 6 < toDate);
        if (isDateValueInvalid)
        {
            dialogFieldToDate.value(dialogFieldFromDate.value());
        }

        return isModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the dialog field methods to capture events.
    /// </summary>
    public void postRun()
    {
        Dialog dialogLocal = this.dialog();

        super();

        // This method should be called in order to handle events on dialogs.
        dialogLocal.dialogForm().formRun().controlMethodOverload(false);

        dialogFieldFromDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(RetailPriceReportUIBuilder, dateModified), this);
        dialogFieldToDate.registerOverrideMethod(methodStr(FormDateControl, modified), methodStr(RetailPriceReportUIBuilder, dateModified), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the dialog box and assigns the values to the contract parameters.
    /// </summary>
    public void getFromDialog()
    {
        super();

        contract.parmCalculationStartDate(dialogFieldFromDate.value());
        contract.parmCalculationEndDate(dialogFieldToDate.value());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>