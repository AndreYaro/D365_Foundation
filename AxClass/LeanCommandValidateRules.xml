<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandValidateRules</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanCommandValidateRules extends LeanCommandBase
{
    Plan    plan;
    int     logCount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the business logic of the command.
    /// </summary>
    /// <returns>
    ///    true if the execution was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Most commands must override this method if they are to be executed in a pipeline manner,
    ///    sequentially and unconditionally.
    /// </remarks>
    protected boolean execute()
    {
        KanbanFlow                  kanbanFlow;
        PlanPlanActivity            planPlanActivity;
        KanbanRule                  kanbanRule;
        LeanCoverageKanbanRule      leanCoverageKanbanRule;
        Plan                        planLocal;
        utcdatetime                 emptyDateTime = utcDateTimeNull();
        LegalEntity                 legalEntity   = CompanyInfo::current();
        boolean                     result        = true;

        if (plan.legalEntity() != legalEntity)
        {
            result = checkFailed(strfmt("@SYS332728",plan.VersionNum));
        }

        if (result)
        {
            logCount = 0;

            while select RuleId from kanbanRule
                group by kanbanRule.RecId
                order by kanbanRule.RecId
                where kanbanRule.LegalEntity                == legalEntity
                exists join leanCoverageKanbanRule
                    where leanCoverageKanbanRule.KanbanRule == kanbanRule.RecId
                exists join kanbanFlow
                    where kanbanFlow.RecId                  == kanbanRule.KanbanFlow
                exists join planPlanActivity
                    where planPlanActivity.RecId            == kanbanFlow.FirstPlanPlanActivity
                       || planPlanActivity.RecId            == kanbanFlow.LastPlanPlanActivity
                exists join planLocal
                    where planLocal.RecId                   == plan.RecId
                       && planLocal.RecId                   == planPlanActivity.Plan
                       && (planLocal.ValidFrom              >  leanCoverageKanbanRule.ValidFrom
                       ||  (planLocal.ValidTo               <  leanCoverageKanbanRule.ValidTo
                       &&   planLocal.ValidTo               != emptyDateTime)
                       ||  (planLocal.ValidTo               != emptyDateTime
                       &&   leanCoverageKanbanRule.ValidTo  == emptyDateTime))
            {
                error(strfmt("@SYS136479", kanbanRule.RuleId));
                logCount++;
            }

            result = logCount == 0;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLogCount</Name>
				<Source><![CDATA[
        public int parmLogCount(int _logCount = logCount)
    {
        logCount = _logCount;
        return logCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlan</Name>
				<Source><![CDATA[
        public Plan parmPlan(Plan _plan = plan)
    {
        plan = _plan;
        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static LeanCommandValidateRules construct()
    {
        return new LeanCommandValidateRules();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanCommandValidateRules</c> class.
    /// </summary>
    /// <param name="_plan">
    ///    A plan of the production flow type.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanCommandValidateRules</c> class.
    /// </returns>
    public static LeanCommandValidateRules newStandard(Plan _plan)
    {
        LeanCommandValidateRules leanCommandValidateRules = LeanCommandValidateRules::construct();

        leanCommandValidateRules.parmPlan(_plan);

        return leanCommandValidateRules;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>