<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMMultimodalDGDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HMIMMultimodalDGDP</c> DataProvider class for HMIMMultimodalDG Report
/// </summary>
[SRSReportQueryAttribute(queryStr(HMIMMultimodalDGReportQuery))]
public class HMIMMultimodalDGDP extends SRSReportDataProviderBase
{
    HMIMMultimodalDG        multimodalDG;
    HMIMMultimodalDGItem    multimodalDGItems;
    HMIMMultimodalDGTmp     multimodalDGTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getHMIMMultimodalDGTmp</Name>
				<Source><![CDATA[
    [SrsReportDataSetAttribute(tableStr(HMIMMultimodalDGTmp))]
    public HMIMMultimodalDGTmp getHMIMMultimodalDGTmp()
    {
        select multimodalDGTmp;
        return multimodalDGTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());
        while(queryRun.next())
        {
            multimodalDG       = queryRun.get(tableNum(HMIMMultimodalDG));
            multimodalDGItems  = queryRun.get(tableNum(HMIMMultimodalDGItem));
            this.insertMultimodalDGTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMultimodalDGTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts <c>HMIMMultimodalDGTmp</c> record.
    /// </summary>
    private void insertMultimodalDGTmp()
    {
        multimodalDGTmp.clear();
        multimodalDGTmp.MMDGDocumentId                = multimodalDG.MMDGDocumentId;
        multimodalDGTmp.ShipmentId                    = multimodalDG.ShipmentId;

        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(multimodalDG.ShippingPostalAddress);
        multimodalDGTmp.ShipFromName                  = multimodalDG.shippingAddressName();
        multimodalDGTmp.FromStreet                    = address.Street;
        multimodalDGTmp.FromCity                      = address.City;
        multimodalDGTmp.FromState                     = address.State;
        multimodalDGTmp.FromZipCode                   = address.ZipCode;
        
        address = LogisticsPostalAddress::findRecId(multimodalDG.DeliveryPostalAddress);
        multimodalDGTmp.ShipToName                    = multimodalDG.deliveryAddressName();
        multimodalDGTmp.ToCity                        = address.City;
        multimodalDGTmp.ToStreet                      = address.Street;
        multimodalDGTmp.ToState                       = address.State;
        multimodalDGTmp.ToZipCode                     = address.ZipCode;

        multimodalDGTmp.CustAccount                   = multimodalDG.CustAccount;
        multimodalDGTmp.FreightForwarderReference     = multimodalDG.FreightForwarderReference;
        multimodalDGTmp.Forwarder                     = multimodalDG.Forwarder;
        multimodalDGTmp.Movement                      = multimodalDG.Movement;
        multimodalDGTmp.AdditionalHandlingInfo        = multimodalDG.AdditionalHandlingInfo;
        multimodalDGTmp.TransportNumber               = multimodalDG.TransportNumber;
        multimodalDGTmp.TransportDate                 = multimodalDG.TransportDate;
        multimodalDGTmp.LoadingPort                   = multimodalDG.LoadingPort;
        multimodalDGTmp.DischargePort                 = multimodalDG.DischargePort;
        multimodalDGTmp.Destination                   = multimodalDG.Destination;
        multimodalDGTmp.ContainerIdentificationNumber = multimodalDG.ContainerIdentificationNumber;
        multimodalDGTmp.SealNum                       = multimodalDG.SealNum;
        multimodalDGTmp.ContainerInfo                 = multimodalDG.ContainerInfo;
        multimodalDGTmp.ContainerTareWeight           = multimodalDG.ContainerTareWeight;
        multimodalDGTmp.TotalGrossWeight              = multimodalDG.TotalGrossWeight;
        multimodalDGTmp.CompanyName                   = multimodalDG.CompanyName;
        multimodalDGTmp.ReceivingOrganization         = multimodalDG.ReceivingOrganization;
        multimodalDGTmp.ShipperPreparation            = multimodalDG.ShipperPreparation;
        multimodalDGTmp.CarrierCode                   = multimodalDG.CarrierCode;
        multimodalDGTmp.CarrierServiceCode            = multimodalDG.CarrierServiceCode;
        multimodalDGTmp.ItemId                        = multimodalDG.ShipmentId;
        multimodalDGTmp.GrossWeight                   = multimodalDGItems.GrossWeight;
        multimodalDGTmp.NetWeight                     = multimodalDGItems.NetWeight;
        multimodalDGTmp.Description                   = multimodalDGItems.Description;
        multimodalDGTmp.ItemVolume                    = multimodalDGItems.ItemVolume;
        if (HMIMTransportNumberDateCertificateToggle::instance().isEnabled())
        {
            multimodalDGTmp.ContainerVehicleCertificate   = multimodalDG.ContainerVehicleCertificate;
        }
        
        this.initializeEMSCodes();

        this.insertTable(multimodalDGTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEMSCodes</Name>
				<Source><![CDATA[
    protected void initializeEMSCodes()
    {
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         whsLoadLine;
        HMIMItemMaterial    itemMaterial;
        HMIMEMS             hmimEMS;

        multimodalDGTmp.FooterDescription = HMIMEMS::find(WHSParameters::find().HMIMEMSCode).Description;

        while select EMSCode from itemMaterial
            group by EMSCode
            where itemMaterial.EMSCode      !=  ''
               && itemMaterial.RegCode      ==  WHSShipmentTable::find(multimodalDG.ShipmentId).HMIMGetRegCode()
        join RecId from whsLoadLine
            where whsLoadLine.ItemId        ==  itemMaterial.ItemId
        join RecId from shipmentTable
            where shipmentTable.ShipmentId  ==  multimodalDG.ShipmentId
               && shipmentTable.LoadId      ==  whsLoadLine.LoadId
        {
            multimodalDGTmp.FooterDescription += multimodalDGTmp.FooterDescription ? ' ' : '';
            multimodalDGTmp.FooterDescription += HMIMEMS::find(itemMaterial.EMSCode).Description;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTable</Name>
				<Source><![CDATA[
    private void insertTable(HMIMMultimodalDGTmp _multimodalDGTmp)
    {
        _multimodalDGTmp.insert();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>