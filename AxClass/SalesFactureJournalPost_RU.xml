<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFactureJournalPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesFactureJournalPost_RU</c> class is used to post customer facture.
/// </summary>
[DocumentStatusFactoryAttribute(DocumentStatus::Facture_RU)]
class SalesFactureJournalPost_RU extends SalesInvoiceJournalPost
{
    boolean printFacture;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInventProfileType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates kind of activity for the invoice.
    /// </summary>
    /// <returns>
    ///     false if kind of activity is bailee; otherwise, true.
    /// </returns>
    protected boolean checkInventProfileType()
    {
        if (custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU == InventProfileType_RU::Bailee)
        {
            return checkFailed(strFmt("@GLS115665", custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFacture_RU</Name>
				<Source><![CDATA[
    protected FactureJour_RU createFacture_RU()
    {
        CustInvoiceJour                 tmpInvoiceJour = CustInvoiceJour::findRecId(custInvoiceJour.RecId);

        if (! this.checkInventProfileType() || (this.isProforma() && !printFacture))
        {
            return null;
        }

        OffReportType_RU reportType = tmpInvoiceJour.creditNote()              ?
                                      OffReportType_RU::CustFactureCreditNote  :
                                      OffReportType_RU::CustFacture;

        CustInvoiceJour_Officials tmpInvoiceJour_Officials = tmpInvoiceJour.custInvoiceJour_Officials();

        if (OfficialsServ_RU::isFeatureEnabled() &&
            tmpInvoiceJour                       &&
            tmpInvoiceJour_Officials.OffSessionId)
        {
            OfficialsTrans_RU::copySessionId(tmpInvoiceJour_Officials.OffSessionId,
                                             tmpInvoiceJour_Officials.OffSessionId,
                                             OffPosition_RU::Director,
                                             reportType);
            OfficialsTrans_RU::copySessionId(tmpInvoiceJour_Officials.OffSessionId,
                                             tmpInvoiceJour_Officials.OffSessionId,
                                             OffPosition_RU::Accountant,
                                             reportType);
        }

        FactureJourCreate_RU jourCreate = this.initFactureJourCreate_RU(tmpInvoiceJour, tmpInvoiceJour_Officials);

        jourCreate.runOperation();
        custInvoiceJour.reread();

        FactureCalcAmountAdjustments_RU factureCalcAmountAdj = FactureCalcAmountAdjustments_RU::newCustVendTrans(tmpInvoiceJour.custTrans());
        factureCalcAmountAdj.calc();

        factureJour = jourCreate.getFactureJour();

        FactureJour_RU::handleOperationTypeCodes(factureJour);

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureJourCreate_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes an instance of the class <c>FactureJourCreate_RU</c>.
    /// </summary>
    /// <param name = "_tmpInvoiceJour">The buffer of the <c>CustInvoiceJour</c> table.</param>
    /// <param name = "_tmpInvoiceJour_Officials">The buffer of the <c>CustInvoiceJour_Officials</c> table.</param>
    /// <returns>Instance of the class <c>FactureJourCreate_RU</c>.</returns>
    protected FactureJourCreate_RU initFactureJourCreate_RU(CustInvoiceJour _tmpInvoiceJour, CustInvoiceJour_Officials _tmpInvoiceJour_Officials)
    {
        FactureJourCreate_RU        jourCreate = FactureJourCreate_RU::construct(FactureModule_RU::Cust);
        CustInvoiceJour_RU          tmpInvoiceJourRU = _tmpInvoiceJour.custInvoiceJour_RU();
        FactureEditLinesEngine_RU   editLines = FactureEditLinesEngine_RU::construct(jourCreate);

        editLines.insertJour(_tmpInvoiceJour, this.parmProforma());

        jourCreate.initParameters(this.parmProforma() ? NoYes::No : NoYes::Yes,
                                NoYes::No,
                                this.isProforma() ? Printout::Current : Printout::After,
                                tmpInvoiceJourRU.PrintStandardCurrency_RU,
                                this.factureExternalId(_tmpInvoiceJour),
                                _tmpInvoiceJour.InvoiceDate,
                                _tmpInvoiceJour.InvoiceAccount,
                                _tmpInvoiceJour.CurrencyCode,
                                FactureType_RU::Invoice,
                                tmpInvoiceJourRU.ConsigneeAccount_RU,
                                tmpInvoiceJourRU.ConsignorAccount_RU,
                                _tmpInvoiceJour_Officials.OffSessionId,
                                tmpInvoiceJourRU.AttorneyId_RU,
                                tmpInvoiceJourRU.AttorneyIssuedName_RU,
                                tmpInvoiceJourRU.AttorneyDate_RU,
                                _tmpInvoiceJour.DeliveryPostalAddress,
                                _tmpInvoiceJour.InvoiceDate,
                                _tmpInvoiceJour.NumberSequenceGroup,
                                salesParmTable.CorrectedFactureExternalId_RU,
                                salesParmTable.CorrectedFactureDate_RU,
                                salesParmTable.CorrectedPeriod_RU,
                                salesParmTable.CorrectionType_RU);

        jourCreate.parmLanguageId       (_tmpInvoiceJour.LanguageId);
        jourCreate.parmVATOnPayment     (tmpInvoiceJourRU.vatOnPayment_RU);
        jourCreate.parmCorrect          (tmpInvoiceJourRU.Correct_RU);
        jourCreate.parmExportProcessing (custInvoiceJour.isExportInvoice_RU());
        jourCreate.parmInventProfileType(tmpInvoiceJourRU.InventProfileType_RU);
        jourCreate.parmInventOwnerId    (tmpInvoiceJourRU.InventOwnerId_RU);

        jourCreate.parmUseOriginalDocumentAsFacture(salesParmTable.UseOriginalDocumentAsFacture_RU);

        return jourCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFormLetterContract</Name>
				<Source><![CDATA[
    protected void initFromFormLetterContract(SalesFormLetterContract _formletterContract)
    {
        this.parmPrintFacture(_formletterContract.parmPrintFacture_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus  documentStatus()
    {
        return DocumentStatus::Facture_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintFacture</Name>
				<Source><![CDATA[
    public boolean parmPrintFacture(boolean _printFacture = printFacture)
    {
        printFacture = _printFacture;
        return printFacture;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesFactureJournalPost_RU construct()
    {
        return new SalesFactureJournalPost_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>factureExternalId</Name>
				<Source><![CDATA[
    private FactureExternalId_RU factureExternalId(CustInvoiceJour _custInvoiceJour)
    {
        if (salesParmTable.UseOriginalDocumentAsFacture_RU && salesParmTable.CorrectionType_RU == FactureCorrectionType_RU::Unknown)
        {
            return _custInvoiceJour.InvoiceId;
        }
        return '';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>