<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagCreationSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightTagCreationSource</c> class is responsible for capturing details from the source to create the tag.
/// </summary>
abstract public class WHSCatchWeightTagCreationSource
{
    private ItemId itemId;
    private InventDim inventDim;
    private InventTransId inventTransId;
    private WHSReceiptDetailsRecId receiptRecId;
    private WHSRFPassthrough pass;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instantiateFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a instance of <c>WHSCatchWeightTagCreationSource.</c>.
    /// </summary>
    /// <param name = "_common">A source line to create the tags from.</param>
    /// <param name = "_pass">The pass through state for the form.</param>
    /// <returns>An instance of the <c>WHSCatchWeightTagCreationSource</c> class.</returns>
    [Hookable(false)]
    public static WHSCatchWeightTagCreationSource instantiateFromSource(Common _common, WHSRFPassthrough _pass = null)
    {
        WHSCatchWeightTagCreationSourceFactoryAttribute attr = new WHSCatchWeightTagCreationSourceFactoryAttribute(tableId2Name(_common.TableId));
        WHSCatchWeightTagCreationSource tagCreationSource = SysExtensionAppClassFactory::getClassFromSysAttribute(
                                                                classStr(WHSCatchWeightTagCreationSource), attr) as WHSCatchWeightTagCreationSource;

        if (!tagCreationSource)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        tagCreationSource.initializeFromSource(_common);
        tagCreationSource.parmPassthrough(_pass);
        return tagCreationSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the parameters.
    /// </summary>
    /// <param name = "_common">Source line buffer.</param>
    [Hookable(false)]
    internal void initializeFromSource(Common _common)
    {
        // Initialize the variables based on the source buffer.
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        inventDim = _inventDim;
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventTransId parmInventTransId(InventTransId _inventTransId = inventTransId)
    {
        inventTransId = _inventTransId;
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptDetailsRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSReceiptDetailsRecId parmReceiptDetailsRecId(WHSReceiptDetailsRecId _receiptRecId = receiptRecId)
    {
        receiptRecId = _receiptRecId;
        return receiptRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPassthrough</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSRFPassthrough parmPassthrough(WHSRFPassthrough _pass = pass)
    {
        pass = _pass;
        return pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transformInventDimForTagCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transforms the <c>InventDim</c> table buffer in preparation for creating tag records.
    /// </summary>
    [Hookable(false)]
    internal void transformInventDimForTagCreation()
    {
        if (!this.applyDimensionsFromReceiptDetails())
        {
            this.applyStorageDimensionsExceptStatusFromPass();
            this.applyTrackingDimensionsFromPass();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDimensionsFromReceiptDetails</Name>
				<Source><![CDATA[
    private boolean applyDimensionsFromReceiptDetails()
    {
        boolean ret = false;

        InventDimId receiptInventDimId;

        if (receiptRecId)
        {
            WHSReceiptDetails receiptDetails = WHSReceiptDetails::findByRecId(receiptRecId);

            if (receiptDetails.InventDimId)
            {
                InventDim receiptInventDim = InventDim::find(receiptDetails.InventDimId);
                receiptInventDim.InventStatusId = inventDim.InventStatusId;
                inventDim = InventDim::findOrCreate(receiptInventDim);

                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyStorageDimensionsExceptStatusFromPass</Name>
				<Source><![CDATA[
    private void applyStorageDimensionsExceptStatusFromPass()
    {
        if (pass && WHSInventTable::catchWeightTagDimensionTrackingMethod(this.parmItemId()) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            InventDimParm inventDimParm;
            inventDimParm.setAllStorageDimensions();
            InventDimParm.InventStatusFlag = NoYes::No;

            pass.initInventDimFromPassParm(inventDim, inventDimParm);
            inventDim = InventDim::findOrCreate(inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyTrackingDimensionsFromPass</Name>
				<Source><![CDATA[
    private void applyTrackingDimensionsFromPass()
    {
        if (pass)
        {
            InventDimParm inventDimParm;
            inventDimParm.setAllTrackingDimensions();

            pass.initInventDimFromPassParm(inventDim, inventDimParm);
            inventDim = InventDim::findOrCreate(inventDim);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>