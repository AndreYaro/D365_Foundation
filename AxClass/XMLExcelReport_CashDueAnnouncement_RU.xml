<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlExcelReport_CashDueAnnouncement_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>XmlExcelReport_CashDueAnnouncement_RU</c> used for output of cash due announcement to excel
/// </summary>
public class XmlExcelReport_CashDueAnnouncement_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    LedgerJournalTrans ledgerJournalTrans;
    CashDueAnnouncementJournal_RU cashDueAnnouncementJournal;
    RNumDateInWordConverter converter;

    protected const str report = 'REPORT';
    protected const int maxLen_PayerName = 18;
    protected const int maxLen_CompanyName = 18;
    protected const int maxLen_BankName = 42;
    protected const int maxLen_TicketBankName = 66;
    protected const int maxLen_TransTxt = 70;
    protected const int maxLen_AmountText = 70;
    protected const str announcementDateYear = "AnnouncementDateYear";
    protected const str ticketDateYear = "TicketDateYear";
    protected const str orderDateYear = "OrderDateYear";
    protected const str announcementINN = "AnnouncementINN";
    protected const str orderINN = "OrderINN";
    protected const str announcementBankName1 = "AnnouncementBankName1";
    protected const str ticketBankName1 = "TicketBankName1";
    protected const str orderBankName1 = "OrderBankName1";
    protected const str announcementNumber = "AnnouncementNumber";
    protected const str ticketNumber = "TicketNumber";
    protected const str orderNumber = "OrderNumber";
    protected const str ticketKPP = "TicketKPP";
    protected const str ticketOKATO = "TicketOKATO";
    protected const str announcementFromName2 = "AnnouncementFromName2";
    protected const str announcementCompanyName2 = "AnnouncementCompanyName2";
    protected const str announcementBankName2 = "AnnouncementBankName2";
    protected const str announcementAmountText2 = "AnnouncementAmountText2";
    protected const str announcementPaymentSource2 = "AnnouncementPaymentSource2";
    protected const str ticketBankName2 = "TicketBankName2";
    protected const str ticketAmountText2 = "TicketAmountText2";
    protected const str ticketPaymentSource2 = "TicketPaymentSource2";
    protected const str orderFromName2 = "OrderFromName2";
    protected const str orderCompanyName2 = "OrderCompanyName2";
    protected const str orderBankName2 = "OrderBankName2";
    protected const str orderAmountText2 = "OrderAmountText2";
    protected const str orderPaymentSource2 = "OrderPaymentSource2";
    protected const str announcementKPP = "AnnouncementKPP";
    protected const str announcementBIK = "AnnouncementBIK";
    protected const str orderKPP = "OrderKPP";
    protected const str orderBIK = "OrderBIK";
    protected const str announcementOKATO = "AnnouncementOKATO";
    protected const str orderAccount = "OrderAccount";
    protected const str ticketAmountDigit = "TicketAmountDigit";
    protected const str announcementDateDay = "AnnouncementDateDay";
    protected const str ticketDateDay = "TicketDateDay";
    protected const str orderDateDay = "OrderDateDay";
    protected const str announcementAmountDigit = "AnnouncementAmountDigit";
    protected const str announcementCurrency = "AnnouncementCurrency";
    protected const str ticketBIK = "TicketBIK";
    protected const str ticketCurrency = "TicketCurrency";
    protected const str orderAmountDigit = "OrderAmountDigit";
    protected const str orderCurrency = "OrderCurrency";
    protected const str announcementAmountPenny = "AnnouncementAmountPenny";
    protected const str ticketAmountPenny = "TicketAmountPenny";
    protected const str orderAmountPenny = "OrderAmountPenny";
    protected const str announcementCurrencyPenny = "AnnouncementCurrencyPenny";
    protected const str ticketCurrencyPenny = "TicketCurrencyPenny";
    protected const str orderCurrencyPenny = "OrderCurrencyPenny";
    protected const str ticketINN = "TicketINN";
    protected const str announcementDateMonth = "AnnouncementDateMonth";
    protected const str ticketDateMonth = "TicketDateMonth";
    protected const str orderDateMonth = "OrderDateMonth";
    protected const str announcementFromName1 = "AnnouncementFromName1";
    protected const str announcementBankAccountNo = "AnnouncementBankAccountNo";
    protected const str ticketFromName = "TicketFromName";
    protected const str ticketBankAccountNo = "TicketBankAccountNo";
    protected const str orderFromName1 = "OrderFromName1";
    protected const str orderBankAccountNo = "OrderBankAccountNo";
    protected const str announcementCompanyName1 = "AnnouncementCompanyName1";
    protected const str ticketCompanyName = "TicketCompanyName";
    protected const str orderCompanyName = "OrderCompanyName1";
    protected const str announcementAmountText1 = "AnnouncementAmountText1";
    protected const str ticketAmountText1 = "TicketAmountText1";
    protected const str orderAmountText1 = "OrderAmountText1";
    protected const str announcementPaymentSource1 = "AnnouncementPaymentSource1";
    protected const str ticketPaymentSource1 = "TicketPaymentSource1";
    protected const str orderPaymentSource1 = "OrderPaymentSource1";
    protected const str zero = "0";
    protected const str mark = "=";
    protected const str marks = "=====";
    protected const str preMarks = " =====";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountInWords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Coverts numberic amount value to value written in words
    /// </summary>
    /// <param name="_amount">
    /// Amount to be converted
    /// </param>
    /// <returns>
    /// String containing written representation of number
    /// </returns>
    protected str amountInWords(Amount _amount)
    {
        return converter.numeralsToTxt(_amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        curWorkSheetNum = 1;
        this.initSectionMap();

        const int widthColsCashDueAnnouncement = 105;
        widthCols = widthColsCashDueAnnouncement;

        document.setWorksheetSpans(widthCols);

        this.execute(report);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RU_AnnouncementCashDue';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + cashDueAnnouncementJournal.AnnouncementNum +
               '_' + date2str(cashDueAnnouncementJournal.TransDate, 321, 2, 0, 2, 0, 2, DateFlags::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'CashDueAnnouncement';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case report:
                this.fillReport();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReport</Name>
				<Source><![CDATA[
    private void fillReport()
    {
        CompanyInfo companyInfo;
        companyInfo = CompanyInfo::find();

        str firstWordsOfPayerName;
        str leftTextOfPayerName;
        str payerName = this.getNameOfPayer();
        [ firstWordsOfPayerName, leftTextOfPayerName ] = this.splitText(payerName, maxLen_PayerName);

        str firstWordsOfCompany;
        str leftTextOfCompany;
        [ firstWordsOfCompany, leftTextOfCompany ] = this.splitText(companyInfo.name(), maxLen_CompanyName);

        int amountWhole = real2int(trunc(abs(cashDueAnnouncementJournal.Amount)));
        str amountDigitTruncated = int2str(amountWhole);

        int amountPenny = real2int(trunc((abs(cashDueAnnouncementJournal.Amount) - amountWhole) * 100));
        str amountDigitFractional = int2str(amountPenny);
        amountDigitFractional += strRep(zero, 2 - strLen(amountDigitFractional));

        str firstWordOfBankName;
        str leftWordsOfBankName;
        BankAccountTable bankAccountTable = BankAccountTable::find(cashDueAnnouncementJournal.BankAccountId);
        [ firstWordOfBankName, leftWordsOfBankName ] = this.splitText(bankAccountTable.Name, maxLen_BankName);

        str firstWordOfTicketBankName;
        str leftWordsOfTicketBankName;
        [ firstWordOfTicketBankName, leftWordsOfTicketBankName ] = this.splitText(bankAccountTable.Name, maxLen_TicketBankName);

        str amountInText1;
        str amountInText2;
        [ amountInText1, amountInText2 ] = this.splitText(this.amountInWords(amountWhole), maxLen_AmountText);

        CurrencyNameDeclension_RU currencyNameDeclension = CurrencyNameDeclension_RU::find(ledgerJournalTrans.CurrencyCode, CompanyInfo::languageId());

        str firstWordOfTransTxt;
        str leftWordsOfTransTxt;
        [ firstWordOfTransTxt, leftWordsOfTransTxt ] = this.splitText(cashDueAnnouncementJournal.Txt, maxLen_TransTxt);

        void insertValues(Bookmark _bookMark1, Bookmark _bookMark2, Bookmark _bookMark3, anytype _value)
        {
            this.insertValueToSection(_bookMark1, _value);
            this.insertValueToSection(_bookMark2, _value);
            this.insertValueToSection(_bookMark3, _value);
        }

        insertValues(announcementNumber,    ticketNumber,    orderNumber,    cashDueAnnouncementJournal.AnnouncementNum);
        insertValues(announcementDateDay,   ticketDateDay,   orderDateDay,   dayOfMth(cashDueAnnouncementJournal.TransDate));
        insertValues(announcementDateMonth, ticketDateMonth, orderDateMonth, converter.date2strMonth(cashDueAnnouncementJournal.TransDate));
        insertValues(announcementDateYear,  ticketDateYear,  orderDateYear,  year(cashDueAnnouncementJournal.TransDate));

        this.insertValueToSection(announcementFromName1, firstWordsOfPayerName);
        this.insertValueToSection(orderFromName1,        firstWordsOfPayerName);
        this.insertValueToSection(ticketFromName,        payerName);
        this.insertValueToSection(announcementFromName2, leftTextOfPayerName);
        this.insertValueToSection(orderFromName2,        leftTextOfPayerName);

        insertValues(announcementAmountDigit, ticketAmountDigit, orderAmountDigit, marks + amountDigitTruncated + mark + amountDigitFractional + marks);

        this.insertValueToSection(announcementCompanyName1, firstWordsOfCompany);
        this.insertValueToSection(orderCompanyName,         firstWordsOfCompany);
        this.insertValueToSection(ticketCompanyName,        companyInfo.name());

        this.insertValueToSection(announcementCompanyName2, leftTextOfCompany);
        this.insertValueToSection(orderCompanyName2,        leftTextOfCompany);

        insertValues(announcementINN,            ticketINN,            orderINN,            CompanyInfoHelper::partyINNasOfDate_RU(companyInfo, cashDueAnnouncementJournal.TransDate));
        insertValues(announcementKPP,            ticketKPP,            orderKPP,            CompanyInfoHelper::partyKPPasOfDate_RU(companyInfo, cashDueAnnouncementJournal.TransDate));
        insertValues(announcementBankAccountNo,  ticketBankAccountNo,  orderBankAccountNo,  BankAccountTable::accountNum(cashDueAnnouncementJournal.BankAccountId));
        insertValues(announcementOKATO,          ticketOKATO,          orderAccount,        CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, cashDueAnnouncementJournal.TransDate));

        this.insertValueToSection(announcementBankName1, firstWordOfBankName);
        this.insertValueToSection(orderBankName1,        firstWordOfBankName);
        this.insertValueToSection(ticketBankName1,       firstWordOfTicketBankName);

        insertValues(announcementBankName2,      orderBankName2,       ticketBankName2,     leftWordsOfTicketBankName);
        insertValues(announcementBIK,            ticketBIK,            orderBIK,            bankAccountTable.bankBIC_RU());
        insertValues(announcementAmountText1,    ticketAmountText1,    orderAmountText1,    preMarks + amountInText1 + marks);
        insertValues(announcementAmountText2,    ticketAmountText2,    orderAmountText2,    amountInText2);
        insertValues(announcementAmountPenny,    ticketAmountPenny,    orderAmountPenny,    amountDigitFractional);

        insertValues(announcementCurrency,       ticketCurrency,       orderCurrency,       currencyNameDeclension.ShortName);
        insertValues(announcementCurrencyPenny,  ticketCurrencyPenny,  orderCurrencyPenny,  currencyNameDeclension.ShortNamePenny);

        insertValues(announcementPaymentSource1, ticketPaymentSource1, orderPaymentSource1, firstWordOfTransTxt);
        insertValues(announcementPaymentSource2, ticketPaymentSource2, orderPaymentSource2, leftWordsOfTransTxt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNameOfPayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payer name for printout purposes
    /// </summary>
    /// <returns>
    /// Payer name
    /// </returns>
    protected str getNameOfPayer()
    {
        str ret;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
        {
            ret = ledgerJournalTrans.accountNameFind(ledgerJournalTrans.OffsetAccountType, ledgerJournalTrans.parmOffsetLedgerDimension(), curext());
        }
        else
        {
            ret = ledgerJournalTrans.accountNameFind(ledgerJournalTrans.AccountType, ledgerJournalTrans.parmLedgerDimension(), curext());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class with data from <c>Args</c> object
    /// </summary>
    /// <param name="_args">
    /// The data class should be initialized with
    /// </param>
    /// <exception cref="Exception::Error">
    /// If <c>Args</c> object doesn't nave record set
    /// </exception>
    /// <exception cref="Exception::Error">
    /// If <c>Args</c> record is not <c>CashDueAnnouncementJournal_RU</c> or <c>LedgerJournalTrans</c>
    /// </exception>

    public void initFromArgs(Args _args)
    {
        if (! _args || ! _args.record())
            throw error(Error::wrongUseOfFunction(funcName()));

        switch (_args.dataset())
        {
            case tableNum(CashDueAnnouncementJournal_RU):
                cashDueAnnouncementJournal = _args.record();
                select firstonly ledgerJournalTrans
                    where ledgerJournalTrans.JournalNum == cashDueAnnouncementJournal.JournalNum &&
                        ledgerJournalTrans.AnnouncementNum_RU == cashDueAnnouncementJournal.AnnouncementNum;
                break;

            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = _args.record();
                select firstonly cashDueAnnouncementJournal
                    where cashDueAnnouncementJournal.AnnouncementNum == ledgerJournalTrans.AnnouncementNum_RU;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        converter = RNumDateInWordConverter::construct(CompanyInfo::languageId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(report);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits string containing text into two strings of given maximum length
    /// </summary>
    /// <param name="_str">
    /// String to be splitted
    /// </param>
    /// <param name="_maxlen">
    /// maximum length of resulting string
    /// </param>
    /// <returns>
    /// Container with resulting strings
    /// </returns>
    protected container splitText(str _str, int _maxlen)
    {
        return XMLExcelReport_RU::splitStrByLines(_str, [_maxlen]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(CashDueAnnouncement_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int totalCells = 68;
        return totalCells;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_CashDueAnnouncement_RU construct()
    {
        return new XMLExcelReport_CashDueAnnouncement_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args && _args.record().RecId)
        {
            XMLExcelReport_CashDueAnnouncement_RU rep = XMLExcelReport_CashDueAnnouncement_RU::construct();
            rep.initFromArgs(_args);
            rep.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>