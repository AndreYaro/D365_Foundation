<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class BankVoucher
{
    BankAccountTrans        bankAccountTrans;
    AmountCur               amountCur;
    CurrencyCode            currencyCode;
    AccountNum              accountID;
    PaymMode                paymMode;
    PaymReference           paymReference;
    BankChequeNum           chequeNum;
    BankDepositNum          depositNum;
    TransactionTextLarge    transactionTxt;
    LedgerPostingType       posting;
    Dimension               dimension;
    DimensionDefault        defaultDimension;
    LedgerAccount           ledgerAccount;
    LedgerDimensionDefaultAccount ledgerDimension;
    BankTransactionType     bankTransactionType;
    ExchRate                exchRate;
    ExchRate                exchRateSecond;
    ExchRatesTriangulation  exchRatesTriangulation;
    ReportingCurrencyExchRate reportingCurrencyexchRate;
    ReportingCurrencyExchRateSecondary reportingCurrencyexchRateSecondary;
    LedgerJournalACType     ledgerJournalACType;
    TransDate               transDate;
    TransDate               reverseTransDate;
    LedgerJournalType       journalType;
    ReasonRefRecID          reasonRefRecID;
    private FinTagRecId     finTag;
    NoYes                   reconcile;

    // <GEERU>
    RecId                   bankClientPaymentRecId_RU;
    boolean                 countryRegion_RU;
    // </GEERU>

    NoYes                   reconcileFromStatement;
    RefRecId                sourceRecId;
    RefTableId              sourceTableId;
    amountCur               bankCurrencyAmount;
    AmountMSTSecondary      reportingCurrencyAmount;
    // <GIN>
    #ISOCountryRegionCodes
    // </GIN>

    // <GEELV>
    BankCentralBankPurposeText      bankCentralBankPurposeText_LV;
    BankCentralBankPurposeCode      bankCentralBankPurposeCode_LV;
    AddressCountryRegionId          addressCountryRegionId_LV;
    LvBankPaymentRegistrationNum    bankPaymentRegistrationNum_LV;
    // </GEELV>

    // <GEEU>
    PlExcludeExchAdj                excludeExchAdj_PL;
    // </GEEU>

    boolean                         skipDimensionValidation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    public boolean checkParameters()
    {
        boolean             ok = true;
        BankAccountTable    bankAccountTable;

        if (! accountID)
        {
            ok = checkFailed(strfmt("@SYS17167",accountID));
        }

        bankAccountTable = BankAccountTable::find(accountID);

        if (bankAccountTable)
        {
            ledgerJournalACType = LedgerJournalACType::Bank;
            if (currencyCode != bankAccountTable.CurrencyCode && !bankAccountTable.BankMultiCurrency)
            {
                ok = checkFailed(strfmt("@SYS19244", currencyCode, accountID));
            }
            if (!bankAccountTable.CurrencyCode )
            {
                ok  = checkFailed(strfmt("@SYS71041", bankAccountTable.AccountID));
            }
        }
        else
        {
            if (MainAccount::findByMainAccountId(accountID).RecId)
            {
                ledgerJournalACType = LedgerJournalACType::Ledger;
                ledgerAccount = accountID;
            }
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankAccountTrans</Name>
				<Source><![CDATA[
    public void createBankAccountTrans(LedgerVoucher _ledgerPostingJournal)
    {
        this.initBankAccountTrans(_ledgerPostingJournal);

        if (!this.validateBankAccountTrans())
        {
            throw error("@SYS21533");
        }

        if (BrazilParameters::isEnabled() && this.isOneVoucher_BR())
        {
            if (!_ledgerPostingJournal.bankAccountTransSum_BR(bankAccountTrans))
            {
                bankAccountTrans.insert();
            }
        }
        else
        {
            _ledgerPostingJournal.parmExcludeExchAdj_PL(excludeExchAdj_PL);

            if (!_ledgerPostingJournal.bankAccountTransSum(bankAccountTrans))
            {
                bankAccountTrans.insert();

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoHU]))
                {
                    BankAccountTransPL bankAccountTransPL;
                    bankAccountTransPL.ExcludeExchAdj_PL = excludeExchAdj_PL;
                    bankAccountTransPL.BankAccountTrans = bankAccountTrans.RecId;
                    bankAccountTransPL.insert();
                }

                if (countryRegion_RU)
                {
                    BankClientPayment_RU::setRefByRecId(bankClientPaymentRecId_RU, bankAccountTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('Method init has been deprecated. Please use initV2 method instead.', true, 30\5\2022)]
    protected void init(
         AmountCur                      _amountCur,
         CurrencyCode                   _currencyCode,
         AccountNum                     _accountID,
         PaymMode                       _paymMode,
         PaymReference                  _paymReference,
         BankDepositNum                 _depositNum,
         TransactionTextLarge           _transactionTxt,
         LedgerPostingType              _posting,
         DimensionDefault               _defaultDimension,
         LedgerDimensionDefaultAccount  _ledgerDimension,
         BankTransactionType            _bankTransactionType,
         ExchRate                       _exchRate               = 0,
         ExchRate                       _exchRateSecond         = 0,
         ExchRatesTriangulation         _exchRatesTriangulation = UnknownNoYes::Unknown,
         BankChequeNum                  _chequeNum              = ''
         )
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initV2</Name>
				<Source><![CDATA[
    protected void initV2(
         AmountCur                      _amountCur,
         CurrencyCode                   _currencyCode,
         AccountNum                     _accountID,
         PaymMode                       _paymMode,
         PaymReference                  _paymReference,
         BankDepositNum                 _depositNum,
         TransactionTextLarge           _transactionTxt,
         LedgerPostingType              _posting,
         DimensionDefault               _defaultDimension,
         LedgerDimensionDefaultAccount  _ledgerDimension,
         BankTransactionType            _bankTransactionType,
         ExchRate                       _exchRate               = 0,
         ExchRate                       _exchRateSecond         = 0,
         ExchRatesTriangulation         _exchRatesTriangulation = UnknownNoYes::Unknown,
         ReportingCurrencyExchRate      _reportingCurrencyexchRate  = 0,
         ReportingCurrencyExchRateSecondary _reportingCurrencyexchRateSecondary = 0,
         BankChequeNum                  _chequeNum              = ''
         )
    {
        amountCur               =   _amountCur;
        currencyCode            =   _currencyCode;
        paymMode                =   _paymMode;
        paymReference           =   _paymReference;
        chequeNum               =   _chequeNum;
        depositNum              =   _depositNum;
        transactionTxt          =   _transactionTxt;
        posting                 =   _posting;
        defaultDimension        =   _defaultDimension;
        ledgerDimension         =   _ledgerDimension;
        bankTransactionType     =   _bankTransactionType;
        accountID               =   _accountID;
        exchRate                =   _exchRate;
        exchRateSecond          =   _exchRateSecond;
        exchRatesTriangulation  =   _exchRatesTriangulation;
        reportingCurrencyexchRate = _reportingCurrencyexchRate;
        reportingCurrencyExchRateSecondary = _reportingCurrencyExchRateSecondary;

        // <GEERU>
        countryRegion_RU        =  SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRu]);
        // </GEERU>
        if (! this.checkParameters())
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOneVoucher_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the Brazilian context and the posting status of the payment mode.
    /// </summary>
    /// <returns>
    /// True if Brazilian context is enabled and posting status is "None"; otherwise, false.
    /// </returns>
    public boolean isOneVoucher_BR()
    {
        return BrazilParameters::isEnabled() && VendPaymModeTable::find(paymMode).Posting_BR != Posting_BR::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddressCountryRegionId_LV</Name>
				<Source><![CDATA[
    public AddressCountryRegionId parmAddressCountryRegionId_LV(AddressCountryRegionId _text = addressCountryRegionId_LV)
    {
        addressCountryRegionId_LV = _text;

        return addressCountryRegionId_LV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCentralBankPurposeCode_LV</Name>
				<Source><![CDATA[
    public BankCentralBankPurposeCode parmBankCentralBankPurposeCode_LV(BankCentralBankPurposeCode _text = bankCentralBankPurposeCode_LV)
    {
        bankCentralBankPurposeCode_LV = _text;

        return bankCentralBankPurposeCode_LV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinTag</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FinTagRecId parmFinTag(FinTagRecId _finTag = finTag)
    {
        finTag = _finTag;
        return finTag ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCentralBankPurposeText_LV</Name>
				<Source><![CDATA[
    public BankCentralBankPurposeText parmBankCentralBankPurposeText_LV(BankCentralBankPurposeText _text = bankCentralBankPurposeText_LV)
    {
        bankCentralBankPurposeText_LV = _text;

        return bankCentralBankPurposeText_LV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankClientPaymentRecId_RU</Name>
				<Source><![CDATA[
    public RecId parmBankClientPaymentRecId_RU(RecId _bankClientPaymentRecId_RU = bankClientPaymentRecId_RU)
    {
        ;
        bankClientPaymentRecId_RU = _bankClientPaymentRecId_RU;

        return bankClientPaymentRecId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankCurrencyAmount</Name>
				<Source><![CDATA[
    public AmountCur parmBankCurrencyAmount(AmountCur _bankCurrencyAmount = bankCurrencyAmount)
    {
        bankCurrencyAmount = _bankCurrencyAmount;
        return bankCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankPaymentRegistrationNum_LV</Name>
				<Source><![CDATA[
    public LvBankPaymentRegistrationNum parmBankPaymentRegistrationNum_LV(LvBankPaymentRegistrationNum _bankPaymentRegistrationNum = bankPaymentRegistrationNum_LV)
    {
        bankPaymentRegistrationNum_LV = _bankPaymentRegistrationNum;

        return bankPaymentRegistrationNum_LV;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the reporting currency amount.
    /// </summary>
    /// <param name="_reportingCurrencyAmount">
    /// The new value of the parameter reportingCurrencyAmount; optional.
    /// </param>
    /// <returns>
    ///  The current value of parameter reportingCurrencyAmount.
    /// </returns>
    public AmountMSTSecondary parmReportingCurrencyAmount(AmountMSTSecondary _reportingCurrencyAmount = reportingCurrencyAmount)
    {
        reportingCurrencyAmount = _reportingCurrencyAmount;
        return reportingCurrencyAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeExchAdj_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the <c>excludeExchAdj</c> parameter.
    /// </summary>
    /// <param name="_excludeExchAdj_PL">
    /// The new value of the <c>excludeExchAdj_PL</c> parameter; optional.
    /// </param>
    /// <returns>
    /// The current value of <c>excludeExchAdj_PL</c> parameter.
    /// </returns>
    public PlExcludeExchAdj parmExcludeExchAdj_PL(PlExcludeExchAdj _excludeExchAdj_PL = excludeExchAdj_PL)
    {
        excludeExchAdj_PL = _excludeExchAdj_PL;
        return excludeExchAdj_PL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalType</Name>
				<Source><![CDATA[
    public LedgerJournalType parmJournalType(LedgerJournalType _journalType = journalType)
    {
        ;
        journalType = _journalType;

        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecID</Name>
				<Source><![CDATA[
    public ReasonRefRecID parmReasonRefRecID(ReasonRefRecID _reasonRefRecID = reasonRefRecID)
    {
        ;
        reasonRefRecID = _reasonRefRecID;

        return reasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconcile</Name>
				<Source><![CDATA[
    public NoYes parmReconcile(NoYes _reconcile = reconcile)
    {
        ;
        reconcile = _reconcile;

        return reconcile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReconcileFromStatement</Name>
				<Source><![CDATA[
    public NoYes parmReconcileFromStatement(NoYes _reconcileFromStatement = reconcileFromStatement)
    {
        reconcileFromStatement = _reconcileFromStatement;

        return reconcileFromStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipDimensionValidation</Name>
				<Source><![CDATA[
    public boolean parmSkipDimensionValidation(boolean _skipDimensionValidation = skipDimensionValidation)
    {
        skipDimensionValidation = _skipDimensionValidation;

        return skipDimensionValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmSourceRecId(RefRecId _sourceRecId = sourceRecId)
    {
        sourceRecId = _sourceRecId;

        return sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTableId</Name>
				<Source><![CDATA[
    public RefTableId parmSourceTableId(RefTableId _sourceTableId = sourceTableId)
    {
        sourceTableId = _sourceTableId;

        return sourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(TransDate _transDate = transDate)
    {
        ;
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReverseTransDate</Name>
				<Source><![CDATA[
    public TransDate parmReverseTransDate(TransDate _transDate = reverseTransDate)
    {
        reverseTransDate = _transDate;

        return reverseTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymReference</Name>
				<Source><![CDATA[
    internal PaymReference parmPaymReference(PaymReference _paymReference = paymReference)
    {
        paymReference = _paymReference;

        return paymReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChequeNum</Name>
				<Source><![CDATA[
    internal BankChequeNum parmChequeNum(BankChequeNum _chequeNum = chequeNum)
    {
        chequeNum = _chequeNum;

        return chequeNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionTxt</Name>
				<Source><![CDATA[
    internal TransactionTextLarge parmTransactionTxt(TransactionTextLarge _transactionTxt = transactionTxt)
    {
        transactionTxt = _transactionTxt;

        return transactionTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerPostingJournal)
    {
        if (_ledgerPostingJournal == null)
        {
            // two messages is the legacy behavior
            warning("@SYS19386");
            throw error("@SYS18447");
        }

        ttsbegin;

        LedgerVoucherObject ledgerVoucherObject = _ledgerPostingJournal.findLedgerVoucherObject();
        CurrencyExchangeHelper  exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), reverseTransDate ? reverseTransDate : ledgerVoucherObject.parmAccountingDate());
        exchangeRateHelper.parmExchangeRate1(exchRate);
        exchangeRateHelper.parmExchangeRate2(exchRateSecond);
        exchangeRateHelper.parmReportingExchangeRate1(reportingCurrencyExchRate);
        exchangeRateHelper.parmReportingExchangeRate2(reportingCurrencyExchRateSecondary);

        LedgerVoucherTransObject ledgerVoucherTransObject = this.initializeLedgerVoucherTransObjectForPosting(ledgerVoucherObject, exchangeRateHelper);
        ledgerVoucherTransObject.parmFinTag(finTag);

        _ledgerPostingJournal.addTrans(ledgerVoucherTransObject);

        if (ledgerJournalACType == LedgerJournalACType::Bank)
        {
            this.createBankAccountTrans(_ledgerPostingJournal);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerVoucherTransObjectForPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>LedgerVoucherTransObject</c> object for posting the ledger.
    /// </summary>
    /// <param name = "_ledgerVoucherObject">
    ///     An instance of <c>LedgerVoucherObject</c> class.
    /// </param>
    /// <param name = "_exchangeRateHelper">
    ///     An instance of <c>CurrencyExchangeHelper</c> class.
    /// </param>
    /// <returns>
    ///     The initialized <c>LedgerVoucherTransObject</c> object.
    /// </returns>
    [Wrappable(true)]
    protected final LedgerVoucherTransObject initializeLedgerVoucherTransObjectForPosting(LedgerVoucherObject _ledgerVoucherObject, CurrencyExchangeHelper _exchangeRateHelper)
    {
        LedgerDimensionAccount ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimension, defaultDimension);
        LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
            _ledgerVoucherObject,
            posting,
            ledgerDimensionMerged,
            currencyCode,
            amountCur,
            _exchangeRateHelper);

        if (reportingCurrencyAmount)
        {
            ledgerVoucherTransObject.parmReportingCurrencyAmount(reportingCurrencyAmount);
        }

        ledgerVoucherTransObject.parmReasonCode(reasonRefRecID);
        ledgerVoucherTransObject.parmPaymentReference(paymReference);
        ledgerVoucherTransObject.parmTransTxt(transactionTxt);
        ledgerVoucherTransObject.parmDiscardLastTransTxt(true);
        ledgerVoucherTransObject.parmSkipDimensionValidation(skipDimensionValidation);

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            if (this.isOneVoucher_BR())
            {
                ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::Summary);
            }
            else
            {
                ledgerVoucherTransObject.parmLedgerDetailLevel(LedgerDetailLevel::AsDefault);
            }
        }
        // </GBR>

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            ledgerVoucherTransObject.parmIgnoreAllocation(true);
        }
        // </GIN>

        return ledgerVoucherTransObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('Method construct has been deprecated. Please use newBankVoucher method instead.', false, 30\6\2020)]
    public static BankVoucher construct(
         AmountCur                      _amountCur,
         CurrencyCode                   _currencyCode,
         AccountNum                     _accountID,
         PaymMode                       _paymMode,
         PaymReference                  _paymReference,
         BankDepositNum                 _depositNum,
         TransactionTextLarge           _transactionTxt,
         LedgerPostingType              _posting,
         DimensionDefault               _defaultDimension,
         LedgerDimensionDefaultAccount  _ledgerDimension,
         BankTransactionType            _bankTransactionType,
         ExchRate                       _exchRate               = 0,
         ExchRate                       _exchRateSecond         = 0,
         ExchRatesTriangulation         _exchRatesTriangulation = UnknownNoYes::Unknown,
         BankChequeNum                  _chequeNum              = ''
         )
    {
        BankVoucher bankVoucher;

        bankVoucher = new BankVoucher();

        bankVoucher.initV2(
            _amountCur,
            _currencyCode,
            _accountID,
            _paymMode,
            _paymReference,
            _depositNum,
            _transactionTxt,
            _posting,
            _defaultDimension,
            _ledgerDimension,
            _bankTransactionType,
            _exchRate,
            _exchRateSecond,
            _exchRatesTriangulation,
            0,
            0,
            _chequeNum
            );


        return bankVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBankAccountTrans</Name>
				<Source><![CDATA[
    protected void initBankAccountTrans(LedgerVoucher _ledgerPostingJournal)
    {
        BankAccountTable bankAccountTable = BankAccountTable::find(accountID);

        bankAccountTrans.clear();
        bankAccountTrans.Voucher = _ledgerPostingJournal.lastVoucher();
        bankAccountTrans.TransDate = _ledgerPostingJournal.lastTransDate();
        bankAccountTrans.DepositNum = depositNum;
        bankAccountTrans.BankTransType = bankTransactionType;
        bankAccountTrans.AccountId = accountID;
        bankAccountTrans.BankTransCurrencyCode = currencyCode;
        bankAccountTrans.BankTransAmountCur = amountCur;
        bankAccountTrans.AmountMST = CurrencyExchangeHelper::mstAmount(amountCur, currencyCode, _ledgerPostingJournal.lastTransDate(), exchRatesTriangulation, exchRate, exchRateSecond);

        CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), _ledgerPostingJournal.lastTransDate());
        currencyExchangeHelper.parmErrorType(AifErrorType::Exception);
        currencyExchangeHelper.parmReportingExchangeRate1(reportingCurrencyExchRate);
        currencyExchangeHelper.parmReportingExchangeRate2(reportingCurrencyExchRateSecondary);
        if (reportingCurrencyAmount)
        {
            bankAccountTrans.AmountReportingCurrency = reportingCurrencyAmount;
        }
        else
        {
            bankAccountTrans.AmountReportingCurrency = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(currencyCode, amountCur);
        }

        if (bankAccountTrans.shouldCalculateReportingCurrencyAmount_RU())
        {
            bankAccountTrans.ReportingCurrencyAmount_RU = bankAccountTrans.AmountReportingCurrency;
        }

        bankAccountTrans.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonRefRecID, bankAccountTrans.DataAreaId);

        if (journalType == LedgerJournalType::BankChequeReversal)
        {
            bankAccountTrans.Reconciled = reconcile;
            bankAccountTrans.Included = reconcile;
            bankAccountTrans.AccountStatementDate = reconcile ? transDate : dateNull();
            bankAccountTrans.Cancel = NoYes::Yes;
        }
        else if (journalType == LedgerJournalType::BankDepositPaymCancel)
        {
            bankAccountTrans.Cancel = NoYes::Yes;
        }

        if (bankAccountTable)
        {
            bankAccountTrans.CurrencyCode = bankAccountTable.CurrencyCode;
        }
        else
        {
            bankAccountTrans.CurrencyCode = currencyCode;
        }

        if (BankStmtReconcileRecordPostingExchangeRateFlight::instance().isEnabled()
            && !bankAccountTable.BankReconciliationEnabled
            && bankAccountTrans.CurrencyCode)
        {
            if (bankAccountTrans.CurrencyCode == bankAccountTrans.BankTransCurrencyCode)
            {
                bankAccountTrans.ExchRateMST = exchRate;
                bankAccountTrans.ExchRateRep = reportingCurrencyexchRate;
            }
            else
            {
                ExchangeRateHelper helper = ExchangeRateHelper::construct();
                helper.parmFromCurrency(bankAccountTrans.CurrencyCode);
                helper.parmExchangeDate(bankAccountTrans.TransDate);
                if (Ledger::accountingCurrency())
                {
                    helper.parmToCurrency(Ledger::accountingCurrency());
                    bankAccountTrans.ExchRateMST = helper.getExchangeRate1();
                }

                helper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                if (Ledger::reportingCurrency())
                {
                    helper.parmToCurrency(Ledger::reportingCurrency());
                    bankAccountTrans.ExchRateRep = helper.getExchangeRate1();
                }
            }
        }

        Ledger ledger = Ledger::find(Ledger::current());

        if (currencyCode == bankAccountTable.CurrencyCode)
        {
            bankAccountTrans.AmountCur = amountCur;
        }
        else if (ledger.AccountingCurrency == bankAccountTable.CurrencyCode)
        {
            bankAccountTrans.AmountCur = bankAccountTrans.AmountMST;
        }
        else if (ledger.ReportingCurrency == bankAccountTable.CurrencyCode
            && (!ledger.ReportingCurrencyExchangeRateType || ledger.ReportingCurrencyExchangeRateType == ledger.DefaultExchangeRateType))
        {
            bankAccountTrans.AmountCur = bankAccountTrans.AmountReportingCurrency;
        }
        else
        {
            if (this.parmBankCurrencyAmount())
            {
                bankAccountTrans.AmountCur = this.parmBankCurrencyAmount();
            }
            else
            {
                bankAccountTrans.AmountCur = CurrencyExchangeHelper::curAmount(bankAccountTrans.AmountMST, bankAccountTable.CurrencyCode, _ledgerPostingJournal.lastTransDate());
            }
        }

        bankAccountTrans.PaymentMode = paymMode;
        bankAccountTrans.PaymReference = paymReference;
        bankAccountTrans.ChequeNum = chequeNum;
        bankAccountTrans.DefaultDimension = defaultDimension;
        bankAccountTrans.Txt = transactionTxt;

        if (reconcileFromStatement)
        {
            bankAccountTrans.Reconciled = true;
        }

        if (sourceRecId && sourceTableId)
        {
            //Record the source record id
            bankAccountTrans.SourceRecId = sourceRecId;
            bankAccountTrans.SourceTableId = sourceTableId;
        }

        // <GEELV>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
        {
            bankAccountTrans.CentralBankPurposeCode_LV = bankCentralBankPurposeCode_LV;
            bankAccountTrans.CentralBankPurposeText_LV = bankCentralBankPurposeText_LV;
            bankAccountTrans.CorrespondentCountry_LV = addressCountryRegionId_LV;
            bankAccountTrans.BankPaymentRegistrationNum_LV = bankPaymentRegistrationNum_LV;
        } 
        // </GEELV>
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBankVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new bank voucher class object.
    /// </summary>
    /// <param name = "_amountCur"> 
    /// The transaction currency amount.
    /// </param>
    /// <param name = "_currencyCode">
    /// The transaction currency code.
    /// </param>
    /// <param name = "_accountID">
    /// The bank account number.
    /// </param>
    /// <param name = "_paymMode">
    /// The bank payment mode.
    /// </param>
    /// <param name = "_paymReference">
    /// The bank payment reference.
    /// </param>
    /// <param name = "_depositNum">
    /// The bank deposit number.
    /// </param>
    /// <param name = "_transactionTxt">
    /// The bank Transaction text.
    /// </param>
    /// <param name = "_posting">
    /// The ledger posting type.
    /// </param>
    /// <param name = "_defaultDimension">
    /// The default dimension.
    /// </param>
    /// <param name = "_ledgerDimension">
    /// The ledger dimension.
    /// </param>
    /// <param name = "_bankTransactionType">
    /// The bank transaction type.
    /// </param>
    /// <param name = "_exchRate">
    /// The accounting currency exchange rate.
    /// </param>
    /// <param name = "_exchRateSecond">
    /// The accounting currency exchange rate secondary.
    /// </param>
    /// <param name = "_exchRatesTriangulation">
    /// The exchange rate triangulation.
    /// </param>
    /// <param name = "_reportingCurrencyexchRate">
    /// The reporting currency exchange rate.
    /// </param>
    /// <param name = "_reportingCurrencyexchRateSecondary">
    /// The reporting currency exchange rate secondary.
    /// </param>
    /// <param name = "_chequeNum">
    /// The bank account cheque number.
    /// </param>
    /// <returns>
    /// Returns the BankVoucher class object.
    /// </returns>
    public static BankVoucher newBankVoucher(
         AmountCur                      _amountCur,
         CurrencyCode                   _currencyCode,
         AccountNum                     _accountID,
         PaymMode                       _paymMode,
         PaymReference                  _paymReference,
         BankDepositNum                 _depositNum,
         TransactionTextLarge           _transactionTxt,
         LedgerPostingType              _posting,
         DimensionDefault               _defaultDimension,
         LedgerDimensionDefaultAccount  _ledgerDimension,
         BankTransactionType            _bankTransactionType,
         ExchRate                       _exchRate                   = 0,
         ExchRate                       _exchRateSecond             = 0,
         ExchRatesTriangulation         _exchRatesTriangulation     = UnknownNoYes::Unknown,
         ReportingCurrencyExchRate      _reportingCurrencyexchRate  = 0,
         ReportingCurrencyExchRateSecondary _reportingCurrencyexchRateSecondary = 0,
         BankChequeNum                  _chequeNum                  = ''
         )
    {
        BankVoucher bankVoucher;

        bankVoucher = new BankVoucher();
        bankVoucher.initV2(
            _amountCur,
            _currencyCode,
            _accountID,
            _paymMode,
            _paymReference,
            _depositNum,
            _transactionTxt,
            _posting,
            _defaultDimension,
            _ledgerDimension,
            _bankTransactionType,
            _exchRate,
            _exchRateSecond,
            _exchRatesTriangulation,
            _reportingCurrencyexchRate,
            _reportingCurrencyexchRateSecondary,
            _chequeNum
            );

        return bankVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the bank transaction.
    /// </summary>
    /// <returns>true if validation passed; otherwise, false.</returns>
    internal boolean validateBankAccountTrans()
    {
        boolean ret = true;

        if (ret && FeatureStateProvider::isFeatureEnabled(MandatoryBankTransactionDescriptionBrazilFeature::instance()))
        {
            ret = bankAccountTrans.validateDescription_BR();
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>