<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastPostCost extends ProjForecastPost
{
    ProjForecastCost  projForecastCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateTransBudget</Name>
				<Source><![CDATA[
    protected boolean canCreateTransBudget()
    {
        boolean ret = false;

        if ((projForecastCost.ExpandId == 0 && projForecastCost.AllocateMethod == BudgetAllocateMethod::None)
            || (projForecastCost.ExpandId != 0))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteTransBudget</Name>
				<Source><![CDATA[
    protected boolean canDeleteTransBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreditCost</Name>
				<Source><![CDATA[
    protected boolean checkCreditCost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
    protected boolean checkEnterCost()
    {
        boolean ret = super();

        if (ret)
        {
            if (projTrans.transCost() == 0)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPostingType</Name>
				<Source><![CDATA[
    public LedgerPostingType costPostingType()
    {
        LedgerPostingType ledgerPostingType;

        switch (this.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
            case ProjLedgerStatus::Operations:
                ledgerPostingType = LedgerPostingType::ProjCost;
                break;

            default:
                if (this.shouldThrowInvalidCostLedgerStatusErrorForCost())
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowInvalidCostLedgerStatusErrorForCost</Name>
				<Source><![CDATA[
    protected boolean shouldThrowInvalidCostLedgerStatusErrorForCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger account that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <param name="_categoryID">
    /// The project category id value.
    /// </param>
    /// <returns>
    /// The ledger account used for posting debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCost(ProjFundingSourceRefId _fundingSourceId, ProjCategoryId _categoryID = '')
    {
        LedgerDimensionDefaultAccount ledgerAccount;

        switch (this.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet:
                if (ProjDebitAccountCostBalanceSheetStatusFlight::instance().isEnabled())
				{
                    ledgerAccount = projTrans.statusAccountLedgerDimension(_fundingSourceId);
				}
				else
				{
                    ledgerAccount = projTrans.costAccountLedgerDimension(_fundingSourceId);
				}
                break;

            case ProjLedgerStatus::Operations:
                ledgerAccount = projTrans.costAccountLedgerDimension(_fundingSourceId);
               break;

            default:
                if (this.shouldThrowInvalidCostLedgerStatusErrorForCost())
                {
                    throw error(strFmt("@SYS50933","@SYS50276"));
                }
        }

        return ledgerAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the payment date for the given <c>LedgerPostingType</c>.
    /// </summary>
    /// <param name = "_postingType">The <c>LedgerPostingType</c> to looking the payment date for.</param>
    /// <returns>The <c>TransDate</c> found.</returns>
    public TransDate getPaymentDate(LedgerPostingType _postingType)
    {
        TransDate paymentDate;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjCost,
                 LedgerPostingType::ProjWIPCostvalue:
                paymentDate = projForecastCost.CostPaymDate;
                break;

            case LedgerPostingType::ProjTurnover:
                paymentDate = projForecastCost.SalesPaymDate;
                break;
        }

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentStatus</Name>
				<Source><![CDATA[
    // Method to get the payment status as per the crieteria
    public ProjPaymentStatus getPaymentStatus(LedgerPostingType _postingType)
    {
        ProjPaymentStatus paymentStatus;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjCost,
                 LedgerPostingType::ProjWIPCostvalue,
                 LedgerPostingType::ProjTurnover:
                paymentStatus = ProjPaymentStatus::Paid;
                break;

            case LedgerPostingType::ProjAccruedCost,
                 LedgerPostingType::ProjWIPCost,
                 LedgerPostingType::ProjSalesvalue,
                 LedgerPostingType::ProjSalesvalueOffset:
                paymentStatus = ProjPaymentStatus::NoPayment;
                break;
        }

        return paymentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    ProjLedgerStatus ledgerStatusCost()
    {
        ProjLedgerStatus costLS;
        if (isMultipleContractLineFeatureEnabled)
        {
            costLS = this.isIncludedInProjectContractForMultipleContractLines(projTable, ProjTransType::Cost) ?
                ProjRevRecHelper::cost2LedgerStatus(projRevProfile.CostLedgerStatus) : ProjLedgerStatus::Operations;
        }
        else
        {
            costLS = projGroup.costTransCost;
        }

        return costLS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelId</Name>
				<Source><![CDATA[
    ForecastModelId modelId()
    {
        return projTrans.forecastModelId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _buffer)
    {
        projForecastCost = _buffer;
        projTrans = ProjTrans::newProjForecastCost(projForecastCost);
        this.parmContractLineItems(projForecastCost.getContractLineItems(projForecastCost));

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public ProjQty qty(ProjQty _qty  = qty)
    {
        qty = _qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default dimension for the forecast line with worker resoruce default dimension.
    /// </summary>
    /// <returns>The <c>DimensionDefault</c> value for the <c>ProjTrans</c> record.</returns>
    public DimensionDefault ledgerDimension()
    {
        DimensionDefault defaultDimension = super();
        ResourceRecId resourceRecId = projTrans.resource();

        // With the new feature we want to use the dimensions from the resource as the secondary dimension set to use.
        if (resourceRecId
            && ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled() 
            && FeatureStateProvider::isFeatureEnabled(ProjAdvancedJournalEmployeeDimensionFeature::instance()))
        {
            DimensionDefault projDims = ProjTable::find(projTrans.projId()).DefaultDimension;
            DimensionDefault resourceDims = ResourceFacade::getDefaultDimensionByDate(resourceRecId, DateTimeUtil::newDateTime(projTrans.transDate(), 0));

            defaultDimension = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(projDims, resourceDims);
        }

        return defaultDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>