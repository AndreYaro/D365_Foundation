<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25DebtAmortisation</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rTax25DebtAmortisation extends  RTax25DebtReverse
{
    // Common
    CurrencyCode        currencyCode;
    TransTxt            transTxt;

    // Current transaction data
    CustVendTrans               custVendTrans;
    CustVendTransOpen           custVendTransOpen;
    CustVendTable               custVendTable;
    SysModule                   sysModule;
    CustVendVoucher             custVendVoucher;
    LedgerVoucher               ledgerVoucher;
    Voucher                     voucher;
    LedgerPostingType           ledgerPostingType;
    LedgerBondClient_RU         ledgerBondClient;
    ExchRate                    exchRate;
    AmountMST                   hopelessDebtMST;
    DimensionDefault            defaultDimension;
    boolean                     skipReversePrePaymentTax;
    boolean                     initCustVendVoucherInvoiceLedgerDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTransAmounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void calcTransAmounts()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault parmDefaultDimension(DimensionDefault _defaultDimension = defaultDimension)
    {
        defaultDimension = _defaultDimension;
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustVendVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createCustVendVoucher(AmountMST _amountMST = hopelessDebtMST)
    {
        if (! _amountMST)
            return;

        custVendVoucher = CustVendVoucher::constructRTax25(sysModule,
                                                           ledgerVoucher,
                                                           custVendTrans.AccountNum,
                                                           _amountMST,
                                                           currencyCode,
                                                           LedgerTransTxt::None,
                                                           defaultDimension ? 
                                                           defaultDimension :
                                                           custVendTrans.DefaultDimension,
                                                           custVendTrans.PostingProfile,
                                                           ledgerPostingType,
                                                           "",
                                                           SettlementType::SelectedTransact,
                                                           HcmWorker::userId2Worker(curUserId()),
                                                           false,
                                                           ledgerVoucher.findLedgerVoucherObject().parmReferenceNumber(),
                                                           dateNull(),
                                                           0,
                                                           transDate,
                                                           custVendTable);
        custVendVoucher.parmTransTxt(transTxt);
        custVendVoucher.parmTypeOfCreditmaxCheck(TypeOfCreditmaxCheck::None);

        custVendVoucher.parmExchRate(custVendTrans.ExchRate);
        custVendVoucher.parmExchRateSecondary(custVendTrans.ExchRateSecond);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createLedgerTrans(LedgerDimensionDefaultAccount _ledgerDimension,
                                     AmountMST                     _amountMST,
                                     DimensionDefault              _defaultDimension = defaultDimension)
    {
        LedgerVoucherTransObject ledgerVoucherTransObject;
        LedgerVoucherObject      ledgerVoucherObject;
        CurrencyExchangeHelper   currencyExchHelper;

        if (! _amountMST)
            return;

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();

        currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                     ledgerVoucherObject.parmAccountingDate());
        currencyExchHelper.parmExchangeRate1(exchRate);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                ledgerPostingType,
                LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimension, _defaultDimension),
                currencyCode,
                _amountMST,
                currencyExchHelper);

        ledgerVoucherTransObject.parmSourceTableId(custVendTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(custVendTrans.RecId);
        ledgerVoucherTransObject.parmTransTxt(transTxt);

        ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void end()
    {
        CustVendSettle      custVendSettle;
        OffsetVoucher       offsetVoucher;
        LedgerVoucherGroup  ledgerVoucherGroup;
        CustVendTrans       custVendTransOffset = custVendTrans.data();
        CustVendTrans       custVendTransOpenOffset;

        if ( ! custVendVoucher || ! ledgerVoucher)
        {
            return;
        }

        ledgerVoucherGroup  = LedgerVoucherGroup::construct();

        custVendVoucher.post(ledgerVoucher, custVendTransOffset);
        this.updateOffsetTrans(custVendTransOffset);
        this.markCustVendTrans();
        custVendTransOpenOffset = custVendTransOffset.transOpen();
        this.markCustVendTrans(-hopelessDebtMST, custVendTransOpenOffset.RecId);
        offsetVoucher = OffsetVoucher::construct(sysModule,SettlementType::SelectedTransact, custVendTransOffset);
        offsetVoucher.updateNow(custVendTransOffset, SettlementType::SelectedTransact);
        offsetVoucher.parmUseDatePrinciple_RU(false);

        custVendSettle = CustVendSettle::newOffsetVoucher(sysModule, offsetVoucher, ledgerVoucherGroup);
        custVendSettle.parmLedgerVoucher_W(custVendTable.company(), ledgerVoucher, ledgerVoucherGroup);
        custVendSettle.parmSkipReversePrePaymentTax_W(skipReversePrePaymentTax);
        custVendSettle.settleNow(custVendTable.company(), custVendTable.TableId, custVendTable.RecId, true);

        if (ledgerBondClient)
        {
            ledgerBondClient.bondLastVRef2CurrentLog();
            ledgerBondClient.removeCurrentLogObject();
        }

        ledgerVoucherGroup.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        ;
        currencyCode = CompanyInfoHelper::standardCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromTrans(CustVendTrans _custVendTrans)
    {
        ;
        ledgerVoucher      = null;
        ledgerBondClient   = null;
        custVendVoucher    = null;

        custVendTrans = _custVendTrans;

        // calc exchange rate -->
        if (custVendTrans.CurrencyCode == currencyCode)
        {
            exchRate = 100;
        }
        else
        {
            if (custVendTrans.ExchRate)
            {
                exchRate = custVendTrans.ExchRate;
            }
            else
            {
                exchRate = ExchangeRateHelper::exchRate(custVendTrans.CurrencyCode, custVendTrans.TransDate);
            }
        }
        // calc exchange rate <--

        custVendTransOpen = CustVendTransOpen::findRefId(custVendTrans.TableId, custVendTrans.RecId);

        // prepare module data -->
        switch (custVendTrans.TableId)
        {
            case tableNum(CustTrans) :
                sysModule         = SysModule::Cust;
                ledgerPostingType = LedgerPostingType::CustPayment;
                custVendTable     = CustTable::find(custVendTrans.AccountNum);
            break;
            case tableNum(VendTrans) :
                sysModule         = SysModule::Vend;
                ledgerPostingType = LedgerPostingType::VendPayment;
                custVendTable     = VendTable::find(custVendTrans.AccountNum);
            break;
        }
        // prepare module data <--
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerVoucher(NumberSeq _numberSeq)
    {
        LedgerVoucherObject ledgerVoucherObject;

        if (! voucher)
        {
            voucher = _numberSeq.voucher();
        }

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher,
                                                              transDate,
                                                              SysModule::Vend,
                                                              LedgerTransType::RTax25_BadDebtDebitAmortisation,
                                                              this.isReverseMode());
        ledgerVoucherObject.parmVoucherCheck(false);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Vend, _numberSeq.parmVoucherSequenceCode());

        ledgerVoucher.addVoucher(ledgerVoucherObject);
        ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isReverseMode()
    {
        return custVendTrans.TransType == LedgerTransType::RTax25_BadDebtCreditAmortisation ||
               custVendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markCustVendTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void markCustVendTrans(AmountMST _amountMST = hopelessDebtMST,
                                     RefRecId  _recid     = custVendTransOpen.RecId)
    {
        SpecTransManager specTransManager;
        ;
        if (! _amountMST)
            return;

        specTransManager = SpecTransManager::newFromSpec(custVendTable);
        if (SpecTrans::getSpecTransCount(custVendTable.company(), custVendTable.TableId, custVendTable.RecId) && _recid == custVendTransOpen.RecId)
        {
            specTransManager.deleteAll();
        }

        specTransManager.insert(custVendTransOpen.company(), custVendTransOpen.TableId, _recid, _amountMST, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSeq</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected NumberSeq numberSeq()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAmounts</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void postAmounts()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processTrans()
    {
        this.calcTransAmounts();
        this.initLedgerVoucher(this.numberSeq());
        this.postAmounts();
        this.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public boolean updateNow()
    {
        #Macrolib.AviFiles

        MapIterator             it;
        SetIterator             setIt;
        CustTrans               custTrans;
        VendTrans               vendTrans;
        SysOperationProgress    progress;

        if (custMarkTrans.empty() && vendMarkTrans.empty())
            return true;

        try
        {
            ttsbegin;

            setIt = new SetIterator(custMarkTrans.valueSet());

            if (setIt.more())
            {
                transDate = setIt.value();
            }
            else
            {
                setIt = new SetIterator(vendMarkTrans.valueSet());

                if (setIt.more())
                {
                    transDate = setIt.value();
                }
                else
                {
                    ttscommit;
                    return false;
                }
            }

            this.init();

            progress = new SysOperationProgress();

            progress.setAnimation(#AviUpdate);
            progress.setCaption(strFmt("@SYS53184", "@GLS103847", "@SYS11307"));
            progress.setTotal(custMarkTrans.elements());

            it = new MapIterator(custMarkTrans);

            while (it.more())
            {
                transDate = it.value();

                select forceplaceholders firstonly custTrans
                    where custTrans.RecId == it.key();

                if (custTrans)
                {
                    progress.setText(custTrans.AccountNum);
                    this.initFromTrans(custTrans);
                    this.processTrans();
                }
                it.next();
                progress.incCount();
            }

            progress.setCount(0);
            progress.setCaption(strFmt("@SYS53184", "@GLS103847", "@SYS9449"));
            progress.setTotal(vendMarkTrans.elements());

            it = new MapIterator(vendMarkTrans);

            while (it.more())
            {
                transDate = it.value();
                select forceplaceholders firstonly vendTrans
                    where vendTrans.RecId == it.key();

                if (vendTrans)
                {
                    progress.setText(vendTrans.AccountNum);
                    this.initFromTrans(vendTrans);
                    this.processTrans();
                }
                it.next();
                progress.incCount();
            }

            this.clearMarkups();

            ttscommit;
            return true;
        }
        catch(Exception::Error)
        {
            ttsabort;
            return false;
        }

        catch(Exception::Break)
        {
            ttsabort;
            return false;
        }

        catch(Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOffsetTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void updateOffsetTrans(CustVendTrans _custVendTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtAmortisation construct(RTax25DebtType _debtType)
    {
        RTax25DebtAmortisation ret;

        switch (_debtType)
        {
            case RTax25DebtType::Debit  :
                ret = new RTax25DebtDebitAmortisation();
                break;
            case RTax25DebtType::Credit :
                ret = RTax25DebtCreditAmortisation::construct();
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructReverse</Name>
				<Source><![CDATA[
    public static RTax25DebtAmortisation constructReverse(RTax25DebtType _debtType)
    {
        switch (_debtType)
        {
            case RTax25DebtType::Debit  :
                return new RTax25DebtDebitReverse();
            case RTax25DebtType::Credit :
                return new RTax25DebtCreditReverse();
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitCustVendVoucherInvoiceLedgerDim</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmInitCustVendVoucherInvoiceLedgerDim(boolean _initCustVendVoucherInvoiceLedgerDim = initCustVendVoucherInvoiceLedgerDim)
    {
        initCustVendVoucherInvoiceLedgerDim = _initCustVendVoucherInvoiceLedgerDim;
        return initCustVendVoucherInvoiceLedgerDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReversePrePaymentTax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmSkipReversePrePaymentTax(boolean _skipReversePrePaymentTax = skipReversePrePaymentTax)
    {
        skipReversePrePaymentTax = _skipReversePrePaymentTax;
        return skipReversePrePaymentTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>