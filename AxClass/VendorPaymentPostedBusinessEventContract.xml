<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendorPaymentPostedBusinessEventContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data contract for a <c>VendorPaymentPostedBusinessEvent</c>.
/// </summary>
[DataContract]
public final class VendorPaymentPostedBusinessEventContract extends BusinessEventsContract
{
    private VendAccount paymentAccount;
    private PaymId paymentId;
    private PaymReference paymentReference;
    private TransDate paymentDate;
    private AmountCurDebit paymentAmount;
    private PaymMode paymentMethod;
    private CashDiscAmount cashDiscount;
    private SelectableDataArea legalEntity;
    private CurrencyCode currencyCode;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>VendorPaymentPostedBusinessEventContract</c> from a <c>LedgerJournalTrans</c> record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans"> A <c>LedgerJournalTrans</c> record.</param>
    /// <returns>A <c>VendorPaymentPostedBusinessEventContract</c>.</returns>
    public static VendorPaymentPostedBusinessEventContract newFromLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        var contract = new VendorPaymentPostedBusinessEventContract();
        contract.initialize(_ledgerJournalTrans);

        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(LedgerJournalTrans _ledgerJournalTrans)
    {
        paymentAccount = LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(_ledgerJournalTrans.LedgerDimension);
        paymentId = _ledgerJournalTrans.PaymId;
        paymentReference = _ledgerJournalTrans.PaymReference;
        paymentDate = _ledgerJournalTrans.TransDate;

        if (_ledgerJournalTrans.AmountCurDebit != 0)
        {
            paymentAmount = _ledgerJournalTrans.AmountCurDebit;
        }
        else if (_ledgerJournalTrans.AmountCurCredit != 0)
        {
            paymentAmount = _ledgerJournalTrans.AmountCurCredit * -1;
        }

        paymentMethod = _ledgerJournalTrans.PaymMode;
        cashDiscount = this.getCashDiscountAmount(_ledgerJournalTrans);
        legalEntity = _ledgerJournalTrans.DataAreaId;
        currencyCode = _ledgerJournalTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountAmount</Name>
				<Source><![CDATA[
    private CashDiscAmount getCashDiscountAmount(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans specTrans;
        
        select sum(CashDiscToTake) from specTrans
            where specTrans.SpecRecId == _ledgerJournalTrans.RecId &&
                specTrans.SpecTableId == _ledgerJournalTrans.TableId &&
                specTrans.SpecCompany == _ledgerJournalTrans.DataAreaId;
    
        return specTrans.CashDiscToTake;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentAccount</Name>
				<Source><![CDATA[
    [DataMember('PaymentAccount'), BusinessEventsDataMember("@AccountsPayable:PaymentAccount")]
    public VendAccount parmPaymentAccount(VendAccount _paymentAccount = paymentAccount)
    {
        paymentAccount = _paymentAccount;

        return paymentAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentId</Name>
				<Source><![CDATA[
    [DataMember('PaymentId'), BusinessEventsDataMember("@AccountsPayable:PaymentId")]
    public PaymReference parmPaymentId(PaymId _paymentId = paymentId)
    {
        paymentId = _paymentId;

        return paymentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentReference</Name>
				<Source><![CDATA[
    [DataMember('PaymentReference'), BusinessEventsDataMember("@AccountsPayable:PaymentReference")]
    public PaymReference parmPaymentReference(PaymReference _paymentReference = paymentReference)
    {
        paymentReference = _paymentReference;

        return paymentReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDate</Name>
				<Source><![CDATA[
    [DataMember('PaymentDate'), BusinessEventsDataMember("@AccountsPayable:PaymentDate")]
    public TransDate parmInvoiceDate(TransDate _paymentDate = paymentDate)
    {
        paymentDate = _paymentDate;

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceDueDate</Name>
				<Source><![CDATA[
    [DataMember('PaymentAmount'), BusinessEventsDataMember("@AccountsPayable:PaymentAmount")]
    public AmountCurDebit parmInvoiceDueDate(AmountCurDebit _paymentAmount = paymentAmount)
    {
        paymentAmount = _paymentAmount;

        return paymentAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymentMethod</Name>
				<Source><![CDATA[
    [DataMember('PaymentMethod'), BusinessEventsDataMember("@AccountsPayable:PaymentMethod")]
    public PaymMode parmPaymentMethod(PaymMode _paymentMethod = paymentMethod)
    {
        paymentMethod = _paymentMethod;

        return paymentMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCashDiscount</Name>
				<Source><![CDATA[
    [DataMember('CashDiscount'), BusinessEventsDataMember("@AccountsPayable:CashDiscount")]
    public CashDiscAmount parmCashDiscount(CashDiscAmount _cashDiscount = cashDiscount)
    {
        cashDiscount = _cashDiscount;

        return cashDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    [DataMember('LegalEntity'), BusinessEventsDataMember("@AccountsPayable:LegalEntity")]
    public SelectableDataArea parmLegalEntity(SelectableDataArea _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    [DataMember('CurrencyCode'), BusinessEventsDataMember("@AccountsPayable:CurrencyCode")]
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>