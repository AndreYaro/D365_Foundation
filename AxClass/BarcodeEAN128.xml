<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BarcodeEAN128</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BarcodeTypeFactory(BarcodeType::EAN128)]
public class BarcodeEAN128 extends BarcodeCode128
{
    // The Application Identifiers for the EAN128 codes here
    // since the decoding function only looks at two digits.
    #DEFINE.SSCC(0)
    #DEFINE.EAN(1)
    #DEFINE.EAN2(2)
    #DEFINE.BATCH(10)
    #DEFINE.PRODUCTION_DATE(11)
    #DEFINE.PACKING_DATE(13)
    #DEFINE.SELL_BY_DATE(15)
    #DEFINE.EXPIRATION_DATE(17)
    #DEFINE.VARIANT(20)
    #DEFINE.SERIAL_NUMBER(21)
    #DEFINE.HIBCC(22)
    #DEFINE.LOT_NUMBER(23)
    #DEFINE.ADD_PRODUCT_ID(24)
    #DEFINE.SEC_SERIAL_NUMBER(25)
    #DEFINE.QUANTITY(30)
    #DEFINE.DIMENSION1(31)
    #DEFINE.DIMENSION2(32)
    #DEFINE.DIMENSION3(33)
    #DEFINE.DIMENSION4(34)
    #DEFINE.DIMENSION5(35)
    #DEFINE.DIMENSION6(36)
    #DEFINE.SUBQUANTITY(37)
    #DEFINE.FOURTY(40)
    #DEFINE.LOCATION(41)
    #DEFINE.POSTAL_CODE(42)
    #DEFINE.EIGHTY(80)
    #DEFINE.COUPON_EXTENDED_CODE(81)

    // Subtypes
    #DEFINE.BILL_OF_LADING(402)
    #DEFINE.ROLL_PRODUCTS(8001)
    #DEFINE.ESNCMT(8002)
    #DEFINE.N_SN_RA(8003)
    #DEFINE.SERIAL_ID(8004)
    #DEFINE.PRICE_PER_UNIT(8005)
    #DEFINE.NSCO(8100)
    #DEFINE.NSCOE(8101)
    #DEFINE.NSCZ(8102)

    // Define lengths of fixed length entries
    #DEFINE.SSCC_LEN(18)
    #DEFINE.EAN_LEN(14)
    #DEFINE.DATE_LEN(6)
    #DEFINE.VARIANT_LEN(2)
    #DEFINE.DIMENSION_LEN(6)
    #DEFINE.LOCATION_LEN(13)
    #DEFINE.ROLL_PRODUCTS_LEN(14)
    #DEFINE.PRICE_PER_UNIT_LEN(6)
    #DEFINE.NSCO_LEN(6)
    #DEFINE.NSCOE_LEN(10)
    #DEFINE.NSCZ_LEN(2)
    #DEFINE.BILL_OF_LADING_LEN(17)
    #DEFINE.41_LEN(13)

    #DEFINE.F1_DECODE(']C1')

    TmpBarcodeEAN128    tmpBarcodeEAN128;
    boolean             inserted_any;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isValidLocationLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for location labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidLocationLabelBarcodeType()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidAssetLabelBarcodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes if the bar code type is valid for fixed asset labels.
    /// </summary>
    /// <returns>true, if is valid; otherwise, false.</returns>
    public boolean isValidAssetLabelBarcodeType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ai2Str</Name>
				<Source><![CDATA[
    protected str ai2Str(Integer aI)
    {
        str temp  = int2str(aI);

        while (strLen(temp) < 2)
        {
            temp = '0' + temp;
        }

        return temp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>aiData</Name>
				<Source><![CDATA[
    protected BarcodeEAN128AIData aiData(BarcodeEAN128AI aI, boolean set = false, BarcodeEAN128AIData _barcodeEAN128AIData = null)
    {
        #OCCRetryCount
        BarcodeEAN128AIData     barcodeEAN128AIData;

        TmpBarcodeEAN128 find(boolean _forUpdate = false)
        {
            if (!inserted_any)
            {
                tmpBarcodeEAN128.clear();
                return tmpBarcodeEAN128;
            }
            tmpBarcodeEAN128.selectForUpdate(_forUpdate);

            select firstonly tmpBarcodeEAN128
            index hint AIIdx
            where tmpBarcodeEAN128.ai == aI;

            return tmpBarcodeEAN128;
        }

        try
        {
            if (set)
            {
                ttsbegin;
                barcodeEAN128AIData = _barcodeEAN128AIData;
                tmpBarcodeEAN128 = find(true);
                if (_barcodeEAN128AIData)
                {
                    if (tmpBarcodeEAN128)
                    {
                        tmpBarcodeEAN128.Value = barcodeEAN128AIData.value();
                        tmpBarcodeEAN128.update();
                    }
                    else
                    {
                        tmpBarcodeEAN128.ai = aI;
                        tmpBarcodeEAN128.Value = barcodeEAN128AIData.value();
                        tmpBarcodeEAN128.insert();
                        inserted_any = true;
                    }
                }
                else
                {
                    if (tmpBarcodeEAN128)
                    {
                        tmpBarcodeEAN128.delete();
                    }
                }
                ttscommit;
            }
            else
            {
                tmpBarcodeEAN128 = find();
                if (tmpBarcodeEAN128)
                {
                    barcodeEAN128AIData = new BarcodeEAN128AIData();
                    barcodeEAN128AIData.value(tmpBarcodeEAN128.Value);
                }
            }
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        return barcodeEAN128AIData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeType</Name>
				<Source><![CDATA[
    public BarcodeType barcodeType()
    {
        return BarcodeType::EAN128;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batch</Name>
				<Source><![CDATA[
    public InventBatchId batch(boolean set = false, InventBatchId _inventBatchId = '')
    {
        BarcodeEAN128AIData     barcodeEAN128AIData;
        InventBatchId           inventBatchId;

        if (set)
        {
            barcodeEAN128AIData = new BarcodeEAN128AIData();
            barcodeEAN128AIData.value(_inventBatchId);
        }

        barcodeEAN128AIData = this.aIData(#BATCH, set, barcodeEAN128AIData);

        if (barcodeEAN128AIData)
        {
            inventBatchId = barcodeEAN128AIData.value();
        }

        return inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    public void clear()
    {
        if (inserted_any)
        {
            ttsbegin;
            delete_from tmpBarcodeEAN128;
            inserted_any = false;
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>decode</Name>
				<Source><![CDATA[
    public void decode(BarCodeEAN128String barCodeEAN128String)
    {
        boolean             useF1 = false;
        Integer             ss = 1;     // Start segment
        Integer             es = 2;     // End segment
        BarcodeEAN128AI     aI;         // Application Identifier
        //Integer             maxStringLength = strLen(barCodeEAN128String);

        if (subStr(barCodeEAN128String,1,3) == #F1_DECODE)
        {
            ss += 3;
            es += 3;
            useF1 = true;
        }

        while (strLen(barCodeEAN128String) >= es)
        {
            aI = str2int(subStr(barCodeEAN128String,ss,2));
            switch (aI)
            {
                case #SSCC:
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, #SSCC_LEN, aI, ss, es);
                    break;
                case #EAN:
                case #EAN2:
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, #EAN_LEN, aI, ss, es);
                    break;
                case #PRODUCTION_DATE:
                case #PACKING_DATE:
                case #SELL_BY_DATE:
                case #EXPIRATION_DATE:
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, #DATE_LEN, aI, ss, es);
                    break;
                case #VARIANT:
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, #VARIANT_LEN, aI, ss, es);
                    break;

                case #BATCH:
                case #SERIAL_NUMBER:
                case #HIBCC:
                case #QUANTITY:
                case #SUBQUANTITY:
                    [ss, es] = this.decodeVarLength(useF1, barCodeEAN128String, aI, ss, es);
                    break;
                case #LOT_NUMBER:
                    es++;
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, str2int(subStr(barCodeEAN128String, es, 1)), aI, ss, es);
                    break;
                case #ADD_PRODUCT_ID:
                case #SEC_SERIAL_NUMBER:
                    es++;
                    [ss, es] = this.decodeVarLength(useF1, barCodeEAN128String, aI, ss, es);
                    break;
                case #DIMENSION1:
                case #DIMENSION2:
                case #DIMENSION3:
                case #DIMENSION4:
                case #DIMENSION5:
                case #DIMENSION6:
                    es++;
                    aI = 10 * aI + str2int(subStr(barCodeEAN128String, es, 1));
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, #DIMENSION_LEN + 1, aI, ss, es);
                    break;
                case #FOURTY:
                    es++;
                    aI = 10 * aI + str2int(subStr(barCodeEAN128String, es, 1));
                    switch (aI)
                    {
                        case #BILL_OF_LADING:
                            [ss, es] = this.decodeFixedLength(barCodeEAN128String, #BILL_OF_LADING_LEN, aI, ss, es);
                            break;
                    }
                    break;
                case #LOCATION:
                    es++;
                    aI = 10 * aI + str2int(subStr(barCodeEAN128String, es, 1));
                    [ss, es] = this.decodeFixedLength(barCodeEAN128String, #LOCATION_LEN + 1, aI, ss, es);
                    break;
                case #POSTAL_CODE:
                    aI = 10 * aI + str2int(subStr(barCodeEAN128String, es, 1));
                    [ss, es] = this.decodeVarLength(useF1, barCodeEAN128String, aI, ss, es);
                    break;
                case #EIGHTY:
                    es += 2;
                    aI = 100 * aI + str2int(subStr(barCodeEAN128String, es, 1));
                    switch (aI)
                    {
                        case #ROLL_PRODUCTS:
                            [ss, es] = this.decodeFixedLength(barCodeEAN128String, #ROLL_PRODUCTS_LEN, aI, ss, es);
                            break;
                        case #ESNCMT:
                        case #N_SN_RA:
                        case #SERIAL_ID:
                            [ss, es] = this.decodeVarLength(useF1, barCodeEAN128String, aI, ss, es);
                            break;
                        case #PRICE_PER_UNIT:
                            [ss, es] = this.decodeFixedLength(barCodeEAN128String, #PRICE_PER_UNIT_LEN, aI, ss, es);
                            break;
                        default:
                            [ss, es] = this.decodeDefaultCase(barCodeEAN128String, aI, ss, es);
                            break;
                    }
                    break;
                case #COUPON_EXTENDED_CODE:
                    es += 2;
                    aI = 100 * aI + str2int(subStr(barCodeEAN128String, es, 1));
                    switch (aI)
                    {
                        case #NSCO:
                            [ss, es] = this.decodeFixedLength(barCodeEAN128String, #NSCO_LEN, aI, ss, es);
                            break;
                        case #NSCOE:
                            [ss, es] = this.decodeFixedLength(barCodeEAN128String, #NSCOE_LEN, aI, ss, es);
                            break;
                        case #NSCZ:
                            [ss, es] = this.decodeFixedLength(barCodeEAN128String, #NSCZ_LEN, aI, ss, es);
                            break;
                        default:
                            [ss, es] = this.decodeDefaultCase(barCodeEAN128String, aI, ss, es);
                            break;
                    }
                    break;
                case 90:
                case 91:
                case 92:
                case 93:
                case 94:
                case 95:
                case 96:
                case 97:
                case 98:
                case 99:
                    [ss, es] = this.decodeVarLength(useF1, barCodeEAN128String, aI, ss, es);
                    break;
                default:
                    [ss, es] = this.decodeDefaultCase(barCodeEAN128String, aI, ss, es);
                    break;
            }
            ss = es + 1;
            es = ss + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findF1</Name>
				<Source><![CDATA[
    protected Integer findF1(BarCodeEAN128String _barCodeEAN128String, str _bar)
    {
        Integer res = strScan(_bar, #F1_DECODE, 1, strLen(_barCodeEAN128String));
        if (res <= 0)
        {
            res = strLen(_bar) + 1;
        }
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValue</Name>
				<Source><![CDATA[
    protected void setValue(BarCodeEAN128String _barCodeEAN128String, BarcodeEAN128AI _aI, Integer _ss, Integer _es)
    {
        BarcodeEAN128AIData     barcodeEAN128AIDataLocal;
        barcodeEAN128AIDataLocal = new BarcodeEAN128AIData();
        barcodeEAN128AIDataLocal.value(subStr(_barCodeEAN128String, _ss, _es - _ss + 1));
        this.aIData(_aI, true, barcodeEAN128AIDataLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeFixedLength</Name>
				<Source><![CDATA[
    protected container decodeFixedLength(BarCodeEAN128String _barCodeEAN128String, Integer _length, BarcodeEAN128AI _aI, Integer _ss, Integer _es)
    {
        _ss = _es + 1;
        _es = _ss + _length - 1;
        this.setValue(_barCodeEAN128String, _aI, _ss, _es);

        return [_ss, _es];
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeVarLength</Name>
				<Source><![CDATA[
    protected container decodeVarLength(boolean _useF1, BarCodeEAN128String _barCodeEAN128String, BarcodeEAN128AI _aI, Integer _ss, Integer _es)
    {
        _ss = _es + 1;
        if (_useF1)
        {
            _es = _ss + this.findF1(_barCodeEAN128String, subStr(_barCodeEAN128String, _ss, maxStringLength)) - 2;
            this.setValue(_barCodeEAN128String, _aI, _ss, _es);
            _es += 3;
        }
        else
        {
            _es = maxStringLength;
            this.setValue(_barCodeEAN128String, _aI, _ss, _es);
        }

        return [_ss, _es];
    }

]]></Source>
			</Method>
			<Method>
				<Name>decodeDefaultCase</Name>
				<Source><![CDATA[
    protected container decodeDefaultCase(BarCodeEAN128String _barCodeEAN128String, BarcodeEAN128AI _aI, Integer _ss, Integer _es)
    {
        if (this.shouldThrowInfoWhenDecoding())
        {
            info(strFmt("@SYS50515", _barCodeEAN128String));
        }
        _es = strLen(_barCodeEAN128String);

        return [_ss, _es];
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldThrowInfoWhenDecoding</Name>
				<Source><![CDATA[
    protected boolean shouldThrowInfoWhenDecoding()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>encode</Name>
				<Source><![CDATA[
    public void encode()
    {
        Integer             noOfAIs = 0;
        Integer             noOfAIsPrinted = 0;
        Integer             length;
        str                 aiStr;
        str                 segment;
        str                 fillChr;

        while select forupdate tmpBarcodeEAN128
        {
            noOfAIs++;
            length = BarcodeEAN128::lenght(tmpBarcodeEAN128.ai);
            if (length == 0)
            {
                length = strLen(this.aI2Str(tmpBarcodeEAN128.ai));
                if (length < 2) length = 2;
                length += strLen(tmpBarcodeEAN128.Value);
                tmpBarcodeEAN128.VarLength = NoYes::Yes;
            }
            else
            {
                tmpBarcodeEAN128.VarLength = NoYes::No;
            }
            tmpBarcodeEAN128.Encoded = NoYes::No;
            tmpBarcodeEAN128.update();
        }

        barcodeStr = '';
        while select tmpBarcodeEAN128
        index varLength
        {
            aiStr = this.aI2Str(tmpBarcodeEAN128.ai);
            segment = tmpBarcodeEAN128.Value;
            length = BarcodeEAN128::lenght(tmpBarcodeEAN128.ai);
            fillChr = BarcodeEAN128::fillChar(tmpBarcodeEAN128.ai);
            if (length)
            {
                while (strLen(segment) + strLen(aiStr) < length)
                {
                    switch (fillChr)
                    {
                        case '0':
                            segment = fillChr + segment;
                            break;
                        default:
                            segment += fillChr;
                            break;
                    }
                }
            }
            tmpBarcodeEAN128.Encoded = NoYes::Yes;
            tmpBarcodeEAN128.update();
            barcodeStr += aiStr + segment;
            barcodeStrHR += '(' + aiStr + ')' + tmpBarcodeEAN128.Value;
            noOfAIsPrinted++;
            if (tmpBarcodeEAN128.VarLength && (noOfAIs > noOfAIsPrinted))
            {
                barcodeStr += #F1_ENCODE;
            }
        }

        if (strLen(barcodeStr) > MaxStringLength)
        throw(error("@SYS90717"));

        barcodeStr = this.encodeString(barcodeStr, true);
        encoded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemInfo</Name>
				<Source><![CDATA[
    public InventItemBarcode getItemInfo()
    {
        BarcodeEAN128AIData     barcodeEAN128AIData = this.aIData(#EAN, false);
        ItemId                  itemIdTmp;
        InventItemBarcode       inventItemBarcode;
        InventTable             inventTable;

        if (barcodeEAN128AIData)
        {
            itemIdTmp = barcodeEAN128AIData.value();
            inventItemBarcode = InventItemBarcode::findInputBarcode(itemIdTmp);
            if (!inventItemBarcode)
            {
                inventTable = InventTable::find(itemIdTmp);
                if (inventTable)
                {
                    inventItemBarcode.ItemId = inventTable.ItemId;
                }
            }
        }

        return inventItemBarcode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId itemId(boolean set = false, ItemId _itemId = '')
    {
        BarcodeEAN128AIData     barcodeEAN128AIData;
        ItemId                  itemIdLocal = _itemId;
        InventItemBarcode       inventItemBarcode;
        InventTable             inventTable;

        if (set)
        {
            inventItemBarcode = InventItemBarcode::findPrintItemId(_itemId);

            if (inventItemBarcode)
            {
                itemIdLocal = inventItemBarcode.ItemBarCode;
            }

            if (strLen(itemIdLocal) > #EAN_LEN)
            {
                warning(strFmt("@SYS106556", _itemId, itemIdLocal, subStr(itemIdLocal, 1, #EAN_LEN)));
                itemIdLocal = subStr(itemIdLocal, 1, #EAN_LEN);
            }

            if (strLen(itemIdLocal) < #EAN_LEN && isInteger(itemIdLocal))
            {
                if (strLen(itemIdLocal) < #EAN_LEN)
                {
                    itemIdLocal += '0';
                }

                while (strLen(itemIdLocal) < #EAN_LEN)
                {
                    itemIdLocal = '0' + itemIdLocal;
                }
                itemIdLocal = Barcode::insertModulo10CheckDigit(itemIdLocal, #EAN_LEN);
            }

            barcodeEAN128AIData = new BarcodeEAN128AIData();
            barcodeEAN128AIData.value(itemIdLocal);
        }

        barcodeEAN128AIData = this.aIData(#EAN, set, barcodeEAN128AIData);
        if (barcodeEAN128AIData)
        {
            itemIdLocal = barcodeEAN128AIData.value();
            if (!set)
            {
                inventTable = InventTable::find(itemIdLocal);

                if (inventTable)
                {
                    itemIdLocal = inventTable.ItemId;
                }
                else
                {
                    inventItemBarcode = InventItemBarcode::findInputBarcode(itemIdLocal);
                    if (inventItemBarcode)
                    {
                        itemIdLocal = inventItemBarcode.ItemId;
                    }
                }
            }
        }
        return itemIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        inserted_any = false;
        this.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public InventQty qty(boolean set = false, InventQty _qty = 0)
    {
        BarcodeEAN128AIData     barcodeEAN128AIData;
        InventQty               qty;

        if (set)
        {
            barcodeEAN128AIData = new BarcodeEAN128AIData();
            barcodeEAN128AIData.value(int2str(real2int(_qty)));
        }

        barcodeEAN128AIData = this.aIData(#QUANTITY, set, barcodeEAN128AIData);

        if (barcodeEAN128AIData)
        {
            qty = str2num(barcodeEAN128AIData.value());
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialId</Name>
				<Source><![CDATA[
    public InventSerialId serialId(boolean set = false, InventSerialId _inventSerialId = '')
    {
        BarcodeEAN128AIData     barcodeEAN128AIData;
        InventSerialId          inventSerialId;

        if (set)
        {
            barcodeEAN128AIData = new BarcodeEAN128AIData();
            barcodeEAN128AIData.value(_inventSerialId);
        }

        barcodeEAN128AIData = this.aIData(#SERIAL_NUMBER, set, barcodeEAN128AIData);

        if (barcodeEAN128AIData)
        {
            inventSerialId = barcodeEAN128AIData.value();
        }

        return inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves a bar code string.
    /// </summary>
    /// <param name = "_string">The string to resolve.</param>
    /// <param name = "_barcodeContentType">The content type of the string to resolve.</param>
    /// <returns>true when resolved; otherwise, false.</returns>
    [Hookable]    
    protected boolean resolveString(str _string, BarcodeContentType _barcodeContentType)
    {
        switch (_barcodeContentType)
        {
            case BarcodeContentType::Item:
                this.itemId(true, _string);
                return true;

            case BarcodeContentType::Qty:
                this.qty(true, str2int(_string));
                return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>string</Name>
				<Source><![CDATA[
    public str string(boolean set = false, str _string = '', BarcodeContentType _barcodeContentType = BarcodeContentType::Undefined)
    {
        if (set)
        {
            string              = _string;
            barcodeContentType  = _barcodeContentType;
            encoded             = false;
            
            if (!this.resolveString(_string, _barcodeContentType))
            {
                throw(error(strFmt("@SYS19306", funcName())));
            }
        }

        return string;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsBillOfLadingId</Name>
				<Source><![CDATA[
    public WMSBillOfLadingId wmsBillOfLadingId(boolean set = false, WMSBillOfLadingId _wmsBillOfLadingId = '')
    {
        BarcodeEAN128AIData     barcodeEAN128AIData;
        WMSBillOfLadingId       wmsBillOfLadingId = _wmsBillOfLadingId;
        WMSBOLIdGenerate        wmsbolIdGenerate;

        if (set)
        {
            if (strLen(wmsBillOfLadingId) < #BILL_OF_LADING_LEN)
            {
                wmsbolIdGenerate = WMSBOLIdGenerate::construct();
                wmsbolIdGenerate.parmWMSBillOfLadingId(wmsBillOfLadingId);
                wmsbolIdGenerate.makeBOL17();
                wmsBillOfLadingId = wmsbolIdGenerate.parmWMSBillOfLadingId();
            }
            barcodeEAN128AIData = new BarcodeEAN128AIData();
            barcodeEAN128AIData.value(wmsBillOfLadingId);
        }

        barcodeEAN128AIData = this.aIData(#BILL_OF_LADING, set, barcodeEAN128AIData);

        if (barcodeEAN128AIData)
        {
            wmsBillOfLadingId = barcodeEAN128AIData.value();
        }

        return wmsBillOfLadingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BarcodeEAN128 construct()
    {
        return new BarcodeEAN128();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillChar</Name>
				<Source><![CDATA[
    protected static str 1 fillChar(Integer aI)
    {
        switch (aI)
        {
            case #BATCH:
            case #SERIAL_NUMBER:
            case #HIBCC:
            case 240:
            case 250:
            case 400:
            case 420:
            case 421:
            case #ESNCMT:
            case #N_SN_RA:
            case #SERIAL_ID:
            case 90:
            case 91:
            case 92:
            case 93:
            case 94:
            case 95:
            case 96:
            case 97:
            case 98:
            case 99:
                return ' ';

            case #LOT_NUMBER:
            case #QUANTITY:
            case #BILL_OF_LADING:
            case 414:
                return '0';

            default:
                return '-';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lenght</Name>
				<Source><![CDATA[
    protected static Integer lenght(Integer aI)
    {
        switch (aI)
        {
            case 0:
                return #SSCC_LEN + 2;
            case 1:
                return #EAN_LEN + 2;
            case 2:
                return #EAN_LEN + 2;
            case 11:
            case 13:
            case 15:
            case 17:
                return #DATE_LEN + 2;
            case 20:
                return #VARIANT_LEN + 2;
            case 310:
            case 311:
            case 312:
            case 313:
            case 314:
            case 315:
            case 316:
            case 320:
            case 321:
            case 322:
            case 323:
            case 324:
            case 325:
            case 326:
            case 327:
            case 328:
            case 329:
            case 330:
            case 331:
            case 332:
            case 333:
            case 334:
            case 335:
            case 336:
            case 340:
            case 341:
            case 342:
            case 343:
            case 344:
            case 345:
            case 346:
            case 347:
            case 348:
            case 349:
            case 350:
            case 351:
            case 352:
            case 353:
            case 354:
            case 355:
            case 356:
            case 360:
            case 361:
            case 362:
            case 363:
            case 364:
            case 365:
            case 366:
            case 367:
            case 368:
            case 369:
                return #DIMENSION_LEN + 2;
            case 402:
                return #BILL_OF_LADING_LEN + 2;
            case 410:
            case 411:
            case 412:
            case 414:
                return #41_LEN + 3;
            default:        // Variable length
                return 0;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>