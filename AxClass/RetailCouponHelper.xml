<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCouponHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The class <c>RetailCouponHelper</c> has helper methods for various retail coupon functions.
/// </summary>
public class RetailCouponHelper
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validateCoupon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the coupon and if it can be applied to the sales order.
    /// </summary>
    /// <param name="_retailCouponCodeTable">
    /// The <c>RetailCouponCodeTable</c> buffer containing the coupon information.
    /// </param>
    /// <param name = "_retailChannel">The retail channel for which the coupon must be validated.</param>
    /// <param name = "_checkDate">The date that to validate the whether the coupon is valid at this time.</param>
    /// <returns> true if the coupon is valid; otherwise, false.</returns>
    public static boolean validateCoupon(RetailCouponCodeTable _retailCouponCodeTable, RefRecId _retailChannel, date _checkDate = dateNull())
    {
        boolean result = true;
        RetailChannelTable retailChannelTable = RetailChannelTable::findByRecId(_retailChannel);

        if(!RetailCouponHelper::hasChannel(retailChannelTable.RecId))
        {
            throw error("@Retail:CouponChannelNotFound");
        }
        else if (!_retailCouponCodeTable.RecId)
        {
            throw error("@Retail:CouponNotFound");
        }
        else if (_retailCouponCodeTable.Status != RetailCouponStatus::Active)
        {
            // Verify the coupon is active.
            result = checkFailed(strFmt("@MCR25974", _retailCouponCodeTable.CouponCodeId));
        }
        else
        {
            if (_checkDate == dateNull())
            {
                System.DateTimeOffset channelDateTime = RetailPricingEngineHelper::getSessionDateTimeInChannelTimeZone(_retailChannel);
                _checkDate = mkDate(channelDateTime.get_Day(), channelDateTime.get_Month(), channelDateTime.get_Year());
            }
            
            // Validate that the the current channel date matches the coupon time frame.
            RetailCoupon retailCoupon = RetailCoupon::find(_retailCouponCodeTable.CouponNumber);
            date validFrom = _retailCouponCodeTable.ValidFrom ? _retailCouponCodeTable.ValidFrom : retailCoupon.ValidFrom;
            date validTo = _retailCouponCodeTable.ValidTo ? _retailCouponCodeTable.ValidTo : retailCoupon.ValidTo;
            if ((validFrom && validFrom > _checkDate) || (validTo && validTo < _checkDate))
            {
                result = checkFailed(strFmt("@Retail:CouponnotValid", _retailCouponCodeTable.CouponCode, _checkDate));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChannel</Name>
				<Source><![CDATA[
    public static boolean hasChannel(RecId _retailChannelRecId)
    {
        return _retailChannelRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCouponLimits</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the coupon has reached its maximum usage limit.
    /// </summary>
    /// <param name = "_couponCodeId">The coupon code id.</param>
    /// <param name = "_retailChannelId">The retail channel id of the transaction.</param>
    /// <param name = "_custAccount">The customer account number.</param>
    /// <param name = "_salesId"> The sales order id.</param>
    /// <returns>True if the coupon has not reached the usage limit; false otherwise./</returns>
    public static boolean ValidateCouponLimits(RetailCouponCodeId _couponCodeId, RetailChannelId _retailChannelId, CustAccount _custAccount, SalesIdBase _salesId = '')
    {
        return RetailCouponHelper::ValidateCouponLimitsV2(
            _couponCodeId,
            _retailChannelId,
            _custAccount,
            _salesId,
            ''); // TransactionId
    }

]]></Source>
			</Method>
			<Method>
				<Name>ValidateCouponLimitsV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the coupon has reached its maximum usage limit.
    /// </summary>
    /// <param name = "_couponCodeId">The coupon code id.</param>
    /// <param name = "_retailChannelId">The retail channel id of the transaction.</param>
    /// <param name = "_custAccount">The customer account number.</param>
    /// <param name = "_salesId"> The sales order id.</param>
    /// <param name = "_transactionId"> The transaction id.</param>
    /// <returns>True if the coupon has not reached the usage limit; false otherwise./</returns>
    public static boolean ValidateCouponLimitsV2(
        RetailCouponCodeId _couponCodeId,
        RetailChannelId _retailChannelId,
        CustAccount _custAccount,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        boolean result = true;

        RetailCouponCodeTable couponCodeTable;
        RetailCoupon coupon;

        select firstonly *
            from couponCodeTable
                join coupon
            where couponCodeTable.CouponCodeId == _couponCodeId
                && coupon.CouponNumber == couponCodeTable.CouponNumber;

        if(!coupon.RecId)
        {
            result = false;
            throw error("@Retail:CouponNotFound");
        }
        else if(coupon.UsageLimit > 0)
        {
            switch (coupon.UsageLimitType)
            {
                case RetailCouponUsageLimitType::ChannelSpecific:
                    result = RetailCouponHelper::validateChannelSpecificLimits(_couponCodeId, _retailChannelId, coupon.UsageLimit, _salesId, _transactionId);
                    break;
                case RetailCouponUsageLimitType::CompanySpecific:
                    result = RetailCouponHelper::validateCompanySpecificLimits(_couponCodeId, coupon.UsageLimit, _salesId, _transactionId);
                    break;
                case RetailCouponUsageLimitType::CustomerSpecific:
                    result = RetailCouponHelper::validateCustomerSpecificLimits(_couponCodeId, _custAccount, coupon.UsageLimit, _salesId, _transactionId);
                    break;
                default:
                    result = false;
                    throw error(strFmt("@Retail:CouponLimitTypeNotSupportedException", coupon.UsageLimitType));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChannelSpecificLimits</Name>
				<Source><![CDATA[
    private static boolean validateChannelSpecificLimits(
        RetailCouponCodeId _couponCodeId,
        RetailChannelId _retailChannelId,
        RetailUsageLimit _usageLimit,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        if (!RetailCouponUsage::exist(_transactionId, _salesId, _couponCodeId, RetailCouponUsageStatus::Completed))
        {
            int64 usageCount = 0;
            RetailCouponCodeTable    couponCodeTable;
            RetailCouponUsage        retailCouponUsage;

            while select count(RecId), Status
                from retailCouponUsage
            exists join couponCodeTable
            group by retailCouponUsage.Status
            where retailCouponUsage.CouponCodeId == couponCodeTable.CouponCodeId
                && couponCodeTable.CouponCodeId == _couponCodeId
                && retailCouponUsage.RetailChannelId == _retailChannelId
                && (retailCouponUsage.SalesId != _salesId || !retailCouponUsage.SalesId)
            {
                if (retailCouponUsage.Status == RetailCouponUsageStatus::Completed)
                {
                    usageCount += retailCouponUsage.RecId;
                }
                else if (retailCouponUsage.Status == RetailCouponUsageStatus::Returned
                        || retailCouponUsage.Status == RetailCouponUsageStatus::Canceled)
                {
                    usageCount -= retailCouponUsage.RecId;
                }
            }

            return usageCount < _usageLimit;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanySpecificLimits</Name>
				<Source><![CDATA[
    private static boolean validateCompanySpecificLimits(
        RetailCouponCodeId _couponCodeId,
        RetailUsageLimit _usageLimit,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        if (!RetailCouponUsage::exist(_transactionId, _salesId, _couponCodeId, RetailCouponUsageStatus::Completed))
        {
            int64 usageCount = 0;

            RetailCouponCodeTable    couponCodeTable;
            RetailCouponUsage        retailCouponUsage;
     
            while select count(RecId), Status
                from retailCouponUsage
            exists join couponCodeTable
            group by retailCouponUsage.Status
            where retailCouponUsage.CouponCodeId == couponCodeTable.CouponCodeId
                && couponCodeTable.CouponCodeId == _couponCodeId
                && (retailCouponUsage.SalesId != _salesId || !retailCouponUsage.SalesId)
            {
                if (retailCouponUsage.Status == RetailCouponUsageStatus::Completed)
                {
                    usageCount += retailCouponUsage.RecId;
                }
                else if (retailCouponUsage.Status == RetailCouponUsageStatus::Returned
                        || retailCouponUsage.Status == RetailCouponUsageStatus::Canceled)
                {
                    usageCount -= retailCouponUsage.RecId;
                }
            }

            return usageCount < _usageLimit;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerSpecificLimits</Name>
				<Source><![CDATA[
    private static boolean validateCustomerSpecificLimits(
        RetailCouponCodeId _couponCodeId,
        CustAccount _custAccount,
        RetailUsageLimit _usageLimit,
        SalesIdBase _salesId,
        TransactionID _transactionId)
    {
        if (!RetailCouponUsage::exist(_transactionId, _salesId, _couponCodeId, RetailCouponUsageStatus::Completed))
        {
            int64 usageCount = 0;
            RetailCouponCodeTable    couponCodeTable;
            RetailCouponUsage        retailCouponUsage;

            while select count(RecId), Status
                from retailCouponUsage
            exists join couponCodeTable
            group by retailCouponUsage.Status
            where retailCouponUsage.CouponCodeId == couponCodeTable.CouponCodeId
                && couponCodeTable.CouponCodeId == _couponCodeId
                && retailCouponUsage.CustomerAccount == _custAccount
                && (retailCouponUsage.SalesId != _salesId || !retailCouponUsage.SalesId)
            {
                if (retailCouponUsage.Status == RetailCouponUsageStatus::Completed)
                {
                    usageCount += retailCouponUsage.RecId;
                }
                else if (retailCouponUsage.Status == RetailCouponUsageStatus::Returned
                        || retailCouponUsage.Status == RetailCouponUsageStatus::Canceled)
                {
                    usageCount -= retailCouponUsage.RecId;
                }
            }

            return usageCount < _usageLimit;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateCouponUsage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update coupon usage for the sales order.
    /// </summary>
    /// <param name = "_salesTransaction">The crt sales transaction.</param>
    /// <param name = "_salesId">Sales id for the transaction.</param>
    public static void UpdateCouponUsage(Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction _salesTransaction, SalesIdBase _salesId)
    {
        RetailCouponUsage couponUsage;
        RetailCouponCodeTable couponCodeTable;
        RetailCoupon coupon;
        boolean couponApplied = false;

        while select forupdate couponUsage
                join couponCodeTable
                join coupon
            where couponUsage.salesId == _salesId
                && couponUsage.CouponCodeId == couponCodeTable.CouponCodeId
                && coupon.CouponNumber == couponCodeTable.CouponNumber
        {
        
            CLRObject salesLinesEnumerator = _salesTransaction.SalesLines.GetEnumerator();
            couponApplied = false;


            // Iterate through sales lines.
            while(salesLinesEnumerator.MoveNext() && !couponApplied)
            {
                Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine line = salesLinesEnumerator.get_Current();
                
                CLRObject discountsEnumerator = line.DiscountLines.GetEnumerator();

                // Iterate through applied discount lines.
                while(discountsEnumerator.MoveNext() && !couponApplied)
                {
                    CommerceRunTimeDataModel.DiscountLine discountLine = discountsEnumerator.get_Current();
                
                    // If coupon is used, then set it to completed.
                    if(discountLine.OfferId == coupon.DiscountOfferId
                        && discountLine.DiscountCode == couponCodeTable.CouponCode)
                    {
                        couponUsage.Status = RetailCouponUsageStatus::Completed;
                        couponApplied = true;
                    }
                }
            }

            if(!couponApplied)
            {
                couponUsage.Status = RetailCouponUsageStatus::NotApplied;
            }

            ttsbegin;
            couponUsage.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBarCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new barcode of <c>RetailCouponCodeTable</c>
    /// </summary>
    /// <param name="_couponCode">
    /// Coupon Code of the current <c>RetailCouponCodeTable</c> record.
    /// </param>
    /// <returns>New barcode for couponcode.</returns>
    public static ItemBarCode createBarCode(RetailCouponCode _couponCode)
    {
        RetailParameters params;
        BarcodeSetup barcodeSetup;
        RetailBarcodeManagement barcodeManagement;
        ItemBarCode barCode;

        if (_couponCode)
        {
            // Get selected barcode
            select firstOnly CouponBarcodeSetupId from params
            join RetailBarcodeMask, fontName, fontSize from barcodeSetup
            where params.CouponBarcodeSetupId == barcodeSetup.barcodeSetupId;

            if (params.RecId)
            {
                // Calculate barcode
                barcodeManagement = new RetailBarcodeManagement();

                using (var context = RetailCreateBarcodesWithPrefixContext::construct())
                {
                    context.initializeBarcodeMaskPrefixValue(barcodeSetup.RetailBarcodeMask, RetailBarcodeMaskTypeBase::Coupon);
                    barCode = barcodeManagement.createBarcodeNoDim(barcodeSetup.RetailBarcodeMask, _couponCode, '', '');
                }
            }
        }

        return barCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAssociatedDiscountValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the discount Id associated with coupon is valid.
    /// </summary>
    /// <param name = "_discountId">Discount Id</param>
    /// <returns>True if valid; otherwise, false.</returns>
    internal static boolean isAssociatedDiscountValid(RetailOfferIdEx3 _discountId)
    {
        if (_discountId != '')
        {
            RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(_discountId);
            if (discount.RecId > 0 && discount.IsDiscountCodeRequired == NoYes::Yes)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>