<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25InventoryAct</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rTax25InventoryAct extends RunBase
{
    RTax25InventoryDate inventoryDate;
    DialogField         dlgInventoryDate;
    NoYesId             groupAgreement;
    DialogField         dlgGroupAgreement;
    NoYesId             groupDocument;
    DialogField         dlgGroupDocument;

    RTax25PeriodType            periodType;
    RTax25RegisterJournalTable  registerJournalTable;
    RTax25TmpInventoryActLine   inventoryActLine;

    ModuleCustVend      moduleType;
    RTax25InventoryDate nextPeriodStartDate;
    RTax25PeriodNum     nextPeriodNum;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        groupAgreement,
        groupDocument
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRegisters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void calcRegisters()
    {
        RTax25RegisterJournalTrans  journalTrans;
        RTax25RegCalc               regCalc;
        RTax25RegisterTable         registerTable;

        ttsbegin;

        if(!registerJournalTable)
        {
            this.createJournal();
        }

        while select forupdate journalTrans
            where journalTrans.JournalNum == registerJournalTable.JournalNum &&
                  journalTrans.FiscalYear == registerJournalTable.FiscalYear &&
                  journalTrans.PeriodNum  == registerJournalTable.PeriodNum  &&
                  journalTrans.PeriodType == registerJournalTable.PeriodType &&
                  ! journalTrans.Cancelled
        join registerTable
            where registerTable.RegisterId    == journalTrans.RegisterId                 &&
                  (registerTable.RegisterType == RTax25RegisterType::DebtCreditInventory ||
                   registerTable.RegisterType == RTax25RegisterType::DebtDebitInventoryRAP)
        {
            regCalc = RTax25RegCalc::construct(registerTable.RegisterType);
            regCalc.init(journalTrans);
            regCalc.calc();
            regCalc.postCalc();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void createActLines()
    {
        RTax25RegisterTrans_DebtCreditInventory regTransCredit;
        RTax25RegisterTrans_DebtDebInventoryRAP regTransDebit;
        RefRecId                                debtCreditInvRecId,
                                                debtDebitInvRecId;

        debtCreditInvRecId = RTax25RegisterJournalTrans::find(registerJournalTable.JournalNum,
                                                          registerJournalTable.PeriodType,
                                                          registerJournalTable.PeriodNum,
                                                          registerJournalTable.FiscalYear,
                                                          RTax25RegisterTable::registerType2Id(RTax25RegisterType::DebtCreditInventory)).RecId;

        debtDebitInvRecId = RTax25RegisterJournalTrans::find(registerJournalTable.JournalNum,
                                                         registerJournalTable.PeriodType,
                                                         registerJournalTable.PeriodNum,
                                                         registerJournalTable.FiscalYear,
                                                         RTax25RegisterTable::registerType2Id(RTax25RegisterType::DebtDebitInventoryRAP)).RecId;

        while select regTransCredit
            where regTransCredit.BlockType            == ReportBlockType::Body &&
                  regTransCredit.JournalTransRefRecId == debtCreditInvRecId
        {
            inventoryActLine.clear();
            inventoryActLine.initFromSourceDocument(RTax25TmpInventoryActLine::sourceRecord(regTransCredit.RefTableId,
                                                                                        regTransCredit.RefRecId));
            inventoryActLine.DebtType                = RTax25DebtType::Credit;
            inventoryActLine.initLineAmountFromRegisterTransMap(regTransCredit);
            inventoryActLine.RegisterTransRefRecId   = regTransCredit.RecId;
            inventoryActLine.RegisterTransRefTableId = regTransCredit.TableId;
            inventoryActLine.insert();
        }

        while select regTransDebit
            where regTransDebit.BlockType            == ReportBlockType::Body &&
                  regTransDebit.JournalTransRefRecId == debtDebitInvRecId
        {
            inventoryActLine.clear();
            inventoryActLine.initFromSourceDocument(RTax25TmpInventoryActLine::sourceRecord(regTransDebit.RefTableId,
                                                                                        regTransDebit.RefRecId));
            inventoryActLine.DebtType                = RTax25DebtType::Debit;
            inventoryActLine.initLineAmountFromRegisterTransMap(regTransDebit);
            inventoryActLine.RegisterTransRefRecId   = regTransDebit.RecId;
            inventoryActLine.RegisterTransRefTableId = regTransDebit.TableId;
            inventoryActLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createJournal()
    {
        NumberSeq               numberSeq;
        RTax25RegCalcController regCalcController;

        numberSeq = NumberSeq::newGetNum(RTax25Parameters::numRefRegisterJournalNum(), true);
        registerJournalTable.JournalNum             = numberSeq.num();
        registerJournalTable.RegisterJournalType    = RTax25RegisterJournalType::ProfitTax;
        registerJournalTable.PeriodType             = periodType;
        registerJournalTable.FiscalYear             = year(nextPeriodStartDate);
        registerJournalTable.PeriodNum              = nextPeriodNum;
        registerJournalTable.EndDate                = registerJournalTable.makeEndDate();
        registerJournalTable.CalculationDate        = registerJournalTable.EndDate;
        registerJournalTable.EnableCorrective       = true;
        registerJournalTable.Name                   = registerJournalTable.defaultName();

        if (registerJournalTable.validateWrite())
        {
            registerJournalTable.write();
            numberSeq.used();

            regCalcController = new RTax25RegCalcController();
            regCalcController.rTax25RegisterJournalTable(registerJournalTable);
            if (! regCalcController.createJournalTrans(false))
            {
                numberSeq.abort();
                throw info("@GLS104094");
            }
            numberSeq.used();
        }
        else
        {
            numberSeq.abort();
            throw warning(strfmt("@GLS112782", nextPeriodStartDate));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.addGroup("@SYS7402");
        dlgInventoryDate = dialog.addFieldValue(extendedtypestr(RTax25InventoryDate), inventoryDate);
        dialog.addGroup("@SYS29158");
        dlgGroupAgreement = dialog.addFieldValue(extendedtypestr(NoYesId), groupAgreement, "@SYS87179", "@GLS110507");
        dlgGroupDocument = dialog.addFieldValue(extendedtypestr(NoYesId), groupDocument, "@SYS54210", "@GLS110508");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        inventoryDate = dlgInventoryDate.value();
        groupAgreement = dlgGroupAgreement.value();
        groupDocument = dlgGroupDocument.value();
        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNextPeriod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initNextPeriod()
    {
        int periodLag;

        periodType  = RTax25RegisterTable::find(RTax25RegisterType::DebtDebitInventoryRAP).PeriodType;
        nextPeriodStartDate = conPeek(RTax25DebtModel::periodDates(periodType, inventoryDate), 2);

        periodLag   = RTax25RegisterJournalTable::periodMthLength(periodType);
        nextPeriodNum   = (mthofyr(inventoryDate) - 1) div periodLag + 1;

        registerJournalTable = this.nextPeriodJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>msgBoxTxt</Name>
				<Source><![CDATA[
    private TempStr msgBoxTxt()
    {
        return moduleType == ModuleCustVend::Cust ? "@GLS112780" :
                                                    "@GLS112781";
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextPeriodJournal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RTax25RegisterJournalTable nextPeriodJournal()
    {
        RTax25RegisterJournalTable  registerJournalTableLocal;

        select firstonly registerJournalTableLocal
                 order by EndDate
                 where registerJournalTableLocal.EndDate             >= nextPeriodStartDate                        &&
                       registerJournalTableLocal.RegisterJournalType == RTax25RegisterJournalType::ProfitTax &&
                       registerJournalTableLocal.PeriodType          == periodType;

        return registerJournalTableLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupAgreement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    NoYesId parmGroupAgreement()
    {
        return groupAgreement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupDoc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    NoYesId parmGroupDoc()
    {
        return groupDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RTax25InventoryDate parmInventoryDate(RTax25InventoryDate _inventoryDate = inventoryDate)
    {
        inventoryDate = _inventoryDate;
        return inventoryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ModuleCustVend parmModuleType(ModuleCustVend  _moduleType = moduleType)
    {
        moduleType = _moduleType;
        return moduleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegisterJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RTax25RegisterJournalTable parmRegisterJournalTable()
    {
        return registerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        DialogButton  recalcButton, showButton = DialogButton::Yes;

        this.initNextPeriod();

        if (registerJournalTable.approved())
        {
            showButton = Box::yesNo(strfmt("@GLS112779", registerJournalTable.toDate()),
                                    DialogButton::Yes,
                                    "@GLS112773");
        }
        else
        {
            recalcButton = Box::yesNo(strfmt(this.msgBoxTxt(),registerJournalTable ? registerJournalTable.toDate() : nextPeriodStartDate),
                                      DialogButton::Yes,
                                      "@GLS112773");
            if (recalcButton == DialogButton::Yes)
            {
                this.calcRegisters();
            }
        }
        if (showButton == DialogButton::Yes)
        {
            this.createActLines();
            this.runActLineForm();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runActLineForm</Name>
				<Source><![CDATA[
    private void runActLineForm()
    {
        Args args;
        FormRun formRun;

        args = new Args(formstr(RTax25InventoryActLines));
        args.caller(this);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpInventoryActLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25TmpInventoryActLine tmpInventoryActLine()
    {
        return inventoryActLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNonApprovedAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateNonApprovedAmount(RefRecId                    _recId,
                                    RTax25NonApprovedDebtAmount _amount,
                                    RefTableId                  _tableId = 0)
    {
        RTax25RegisterTrans_DebtCreditInventory regTransCredit;
        RTax25RegisterTrans_DebtDebInventoryRAP regTransDebit;

        if(_tableId && _recId)
        {
            ttsbegin;

            if (_tableId == tablenum(RTax25RegisterTrans_DebtCreditInventory))
            {
                regTransCredit = RTax25RegisterTrans_DebtCreditInventory::findRecId(_recId, true);
                regTransCredit.NonConfirmedDebt = _amount;
                regTransCredit.doUpdate();
            }
            else
            {
                regTransDebit  = RTax25RegisterTrans_DebtDebInventoryRAP::findRecId(_recId, true);
                regTransDebit.NonConfirmedDebt = _amount;
                regTransDebit.doUpdate();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);
        if (inventoryDate == dateNull())
        {
            ret = checkFailed("@GLS112777");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RTax25InventoryAct construct()
    {
        RTax25InventoryAct  inventoryAct = new RTax25InventoryAct();
        inventoryAct.parmInventoryDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return inventoryAct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@GLS112773";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        RTax25InventoryAct    inventoryAct = RTax25InventoryAct::construct();

        if (!_args)
        {
            throw error(Error::missingParameter(inventoryAct));
        }

        inventoryAct.parmModuleType(_args.parmEnum());
        if (inventoryAct.prompt())
        {
            inventoryAct.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>