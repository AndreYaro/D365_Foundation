<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smaSubscriptionCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class smaSubscriptionCreate extends SMASubscriptionBase implements BatchRetryable
{
    SMASubscriptionPeriodType       periodType;
    ProjPeriodId                    invoicePeriod;
    TransDate                       startDate;
    TransDate                       endDate;
    ProjPeriodTo                    projPeriodTo;
    ProjPeriodFrom                  projPeriodFrom;
    NoYes                           continues;
    SMAGetPriceFrom                 getPriceFrom;
    Amount                          pctPriceChange;
    TransTxt                        transTxt;
    TransDate                       postingDate;
    NoYes                           noPrice;
    RecordSortedList                recordSortedList;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        periodType,
        invoicePeriod,
        startDate,
        endDate,
        projPeriodTo,
        projPeriodFrom,
        continues,
        getPriceFrom,
        pctPriceChange,
        transTxt,
        postingDate,
        showInfolog,
        noPrice,
        showQtx
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>action</Name>
				<Source><![CDATA[
    protected void action()
    {
        ProjId      projId = SMASubscriptionTable::find(this.smaSubscriptionId()).ProjId;
        ProjTable   projTable = ProjTable::find(projId);

        if (projTable.status().checkRule(ProjStatusRule::CreateJournal))
        {
            SMASubscriptionGenerator::generate(this);
        }
        else
        {
            // The subscription %1 cannot be posted on because of an incorrect project stage on project %2. The project stage must be %3.
            error(strfmt("@SYS89005", this.smaSubscriptionId(), projId, enum2str(ProjStatus::InProcess)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToRecordSortedList</Name>
				<Source><![CDATA[
    public void addToRecordSortedList(ProjRevenueTrans _projRevenueTrans)
    {
        recordSortedList.ins(_projRevenueTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        // Create subscription fee transactions
        return "@SYS84217";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(SMASubscriptionCreateDialog), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaults</Name>
				<Source><![CDATA[
    public void initDefaults(Args _args)
    {
        SMASubscriptionTable    subscriptionTable;
        FormDataSource          formDataSource;

        super(_args);

        this.parmPeriodType(SMASubscriptionPeriodType::Regular);
        this.parmpctPriceChange(0);
        this.parmTransTxt('');
        this.parmpostingDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (_args.dataset() == tablenum(SMASubscriptionTable) && _args.record() && FormDataUtil::getFormDataSource(_args.record()))
        {
            formDataSource = FormDataUtil::getFormDataSource(_args.record());
            if (!formDataSource.anyMarked())
            {
                subscriptionTable = _args.record();
                this.smaSubscriptionId(subscriptionTable.SubscriptionId);
            }
        }

        if (!SMASubscriptionTable::canDoIndexation())
        {
            this.parmGetPriceFrom(SMAGetPriceFrom::SMAPriceSetting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    public void initFromArgs(Args _args = null)
    {
        SMASubscriptionTable        subscriptionTable;
        SMASubscriptionGroup        subscriptionGroup;
        TransDate                   fromDate;
        TransDate                   toDate;
        FormDataSource              formDataSource;

        super(_args);

        if (_args.record() && FormDataUtil::getFormDataSource(_args.record()))
        {
            formDataSource = FormDataUtil::getFormDataSource(_args.record());

            if (!formDataSource.anyMarked())
            {
                switch (_args.dataset())
                {
                    case tablenum(SMASubscriptionTable) :
                        subscriptionTable = _args.record();
                        [fromDate, toDate] = this.initNextDates(subscriptionTable.invoicePeriodCode(), subscriptionTable.LatestEnddate ? subscriptionTable.LatestEnddate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                        this.parmInvoicePeriod(subscriptionTable.invoicePeriodCode());
                        break;

                    case tablenum(SMASubscriptionGroup) :
                        subscriptionGroup = _args.record();
                        [fromDate, toDate] = this.initNextDates(subscriptionGroup.InvoicePeriodcode);
                        this.parmInvoicePeriod(subscriptionGroup.InvoicePeriodcode);
                        break;

                    default :
                        [fromDate, toDate] = this.initNextDates();
                        break;
                }
                this.parmProjPeriodFrom(fromDate);
                this.parmProjPeriodTo(toDate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNextDates</Name>
				<Source><![CDATA[
    public container initNextDates(ProjPeriodId _projPeriodId = this.parmInvoicePeriod(), TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TransDate       fromDate;
        TransDate       toDate;
        ProjPeriodLine  projPeriodLine = ProjPeriodLine::smaFindNextFromDate(_projPeriodId, _transDate);

        if (!projPeriodLine)
        {
            fromDate    = dateNull();
            toDate      = dateNull();
        }
        else
        {
            fromDate    = projPeriodLine.PeriodFrom;
            toDate      = projPeriodLine.PeriodTo;
        }

        return [fromDate, toDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        recordSortedList = new RecordSortedList(tablenum(ProjRevenueTrans));

        recordSortedList.sortOrder(fieldnum(ProjRevenueTrans, TransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmallowZeroSalesPrice</Name>
				<Source><![CDATA[
    public NoYes parmallowZeroSalesPrice(NoYes _noPrice = noPrice)
    {
        noPrice = _noPrice;

        return noPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContinues</Name>
				<Source><![CDATA[
    public NoYes parmContinues(NoYes _continues = continues)
    {
        continues = _continues;

        return continues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGetPriceFrom</Name>
				<Source><![CDATA[
    public SMAGetPriceFrom parmGetPriceFrom(SMAGetPriceFrom _getPriceFrom = getPriceFrom)
    {
        getPriceFrom = _getPriceFrom;

        return getPriceFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoicePeriod</Name>
				<Source><![CDATA[
    public ProjPeriodId parmInvoicePeriod(ProjPeriodId _projPeriodId = invoicePeriod)
    {
        invoicePeriod = _projPeriodId;

        return invoicePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmpctPriceChange</Name>
				<Source><![CDATA[
    public Amount parmpctPriceChange(Amount _pctPriceChange = pctPriceChange)
    {
        pctPriceChange = _pctPriceChange;

        return pctPriceChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodType</Name>
				<Source><![CDATA[
    public SMASubscriptionPeriodType parmPeriodType(SMASubscriptionPeriodType _subscriptionPeriodType = periodType)
    {
        periodType = _subscriptionPeriodType;

        return periodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmpostingDate</Name>
				<Source><![CDATA[
    public TransDate parmpostingDate(TransDate _postingDate = postingDate)
    {
        postingDate = _postingDate;

        return postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodFrom</Name>
				<Source><![CDATA[
    public ProjPeriodFrom parmProjPeriodFrom(ProjPeriodFrom _projPeriodFrom = projPeriodFrom)
    {
        projPeriodFrom = _projPeriodFrom;

        return projPeriodFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodTo</Name>
				<Source><![CDATA[
    public ProjPeriodTo parmProjPeriodTo(ProjPeriodTo _projPeriodTo = projPeriodTo)
    {
        projPeriodTo = _projPeriodTo;

        return projPeriodTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransTxt</Name>
				<Source><![CDATA[
    public TransTxt parmTransTxt(TransTxt _transTxt = transTxt)
    {
        transTxt = _transTxt;

        return transTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedList</Name>
				<Source><![CDATA[
    public RecordSortedList recordSortedList()
    {
        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRangeFromInvoicePeriod</Name>
				<Source><![CDATA[
    public void setQueryRangeFromInvoicePeriod()
    {
        QueryBuildRange         qBrInvPeriod;
        QueryBuildRange         qBrActive;
        QueryBuildRange         qBrProject;
        QueryBuildRange         qBrCategory;
        QueryBuildDataSource    qBdGroup;

        this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable));

        qBrActive       = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).findRange(fieldnum(SMASubscriptionTable, Active));
        qBrProject      = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).findRange(fieldnum(SMASubscriptionTable, ProjId));
        qBrCategory     = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).findRange(fieldnum(SMASubscriptionTable, ProjCategoryId));
        qBdGroup        = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionGroup));
        qBrInvPeriod    = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionGroup)).findRange(fieldnum(SMASubscriptionGroup, InvoicePeriodcode));

        if (!qBrInvPeriod)
        {
            qBrInvPeriod = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionGroup)).addRange(fieldnum(SMASubscriptionGroup, InvoicePeriodcode));
            qBrInvPeriod.status(RangeStatus::Locked);
        }

        if (!qBrActive)
        {
            qBrActive = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, Active));
        }

        if (!qBrProject)
        {
            qBrProject = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, ProjId));
        }

        if (!qBrCategory)
        {
            qBrCategory = this.queryRun().query().dataSourceTable(tablenum(SMASubscriptionTable)).addRange(fieldnum(SMASubscriptionTable, ProjCategoryId));
        }

        if (this.parmInvoicePeriod())
        {
            qBrInvPeriod.value((this.parmInvoicePeriod()));
            qBrActive.value(queryValue(NoYes::Yes));

            if (this.smaSubscriptionId())
            {
                qBrProject.value((SMASubscriptionTable::find(this.smaSubscriptionId()).ProjId));
                qBrCategory.value((SMASubscriptionTable::find(this.smaSubscriptionId()).ProjCategoryId));
            }
        }
        else
        {
            qBdGroup.clearRange(fieldnum(SMASubscriptionGroup, InvoicePeriodcode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = conpeek(_packedClass, 1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        ret = this.validateInvoicePeriod()          &&
              this.validateProjInvoicePeriodFrom()  &&
              this.validateProjInvoicePeriodTo()    &&
              this.validateDateConsistensy()        &&
              this.validatePriceBasis()             &&
              this.validatePostingBasis();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDateConsistensy</Name>
				<Source><![CDATA[
    public boolean validateDateConsistensy()
    {
        if (this.parmInvoicePeriod())
        {
            if (this.parmProjPeriodTo() && this.parmProjPeriodFrom() > this.parmProjPeriodTo())
            {
                // From date must be before To date
                return checkFailed("@SYS91020");
            }
        }
        else
        {
            if (this.parmEndDate() && this.parmStartDate() > this.parmEndDate())
            {
                // From date must be before To date
                return checkFailed("@SYS91020");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInvoicePeriod</Name>
				<Source><![CDATA[
    public boolean validateInvoicePeriod()
    {
        if (this.parmPeriodType() == SMASubscriptionPeriodType::Regular && !this.parmInvoicePeriod())
        {
            // When the option Regular is selected in the Subscription Type, the field Invoice period code is mandatory.
            return checkFailed("@SYS84220");
        }

        if (!ProjPeriodTable::exist(this.parmInvoicePeriod()) && this.parmInvoicePeriod())
        {
            // The Invoice period is not valid.
            return checkFailed("@SYS84222");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostingBasis</Name>
				<Source><![CDATA[
    public boolean validatePostingBasis()
    {
        if (!this.parmpostingDate())
        {
            // The posting date field is mandatory.
            return checkFailed("@SYS84240");
        }

        if (this.parmInvoicePeriod())
        {
            if (!this.parmProjPeriodFrom())
            {
                // The Start date field is mandatory.
                return checkFailed("@SYS84241");
            }

            if (!this.parmProjPeriodTo())
            {
                // The End date field is mandatory.
                return checkFailed("@SYS84242");
            }
        }
        else
        {
            if (!this.parmStartDate())
            {
                // From date must be specified.
                return checkFailed("@SYS91557");
            }

            if (!this.parmEndDate())
            {
                // To date must be specified.
                return checkFailed("@SYS90868");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePriceBasis</Name>
				<Source><![CDATA[
    public boolean validatePriceBasis()
    {
        if (this.parmGetPriceFrom() == SMAGetPriceFrom::None)
        {
            if (this.parmPeriodType() == SMASubscriptionPeriodType::Regular || this.parmPeriodType() == SMASubscriptionPeriodType::NonRegular)
            {
                // The Get pricing from field is mandatory.
                return checkFailed("@SYS84236");
            }
        }

        switch (this.parmPeriodType())
        {
            case SMASubscriptionPeriodType::ReductionDays :
                if ( this.parmpctPriceChange())
                {
                    // The percent price change must be zero when the subscription type %1 is used.
                    return checkFailed(strfmt("@SYS84238", SMASubscriptionPeriodType::ReductionDays));
                }
                break;

            case SMASubscriptionPeriodType::PriceChange :
                if (! this.parmpctPriceChange())
                {
                    // Percent price change cannot be zero when using the subscription type %1.
                    return checkFailed(strfmt("@SYS84239", SMASubscriptionPeriodType::PriceChange));
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjInvoicePeriodFrom</Name>
				<Source><![CDATA[
    public boolean validateProjInvoicePeriodFrom()
    {
        ProjPeriodLine      projPeriodLine;

        if (this.parmInvoicePeriod())
        {
            if (this.parmContinues() && SMASubscriptionTable::find(this.smaSubscriptionId()).LatestEnddate && (this.parmProjPeriodFrom() - 1 != SMASubscriptionTable::find(this.smaSubscriptionId()).LatestEnddate))
            {
                // If continuous, the from date must be the date after latest end date.
                return checkFailed(strfmt("@SYS89052", this.smaSubscriptionId()));
            }

            projPeriodLine = ProjPeriodLine::findFromPeriodFrom( this.parmInvoicePeriod(), this.parmProjPeriodFrom());

            if (!projPeriodLine)
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjInvoicePeriodTo</Name>
				<Source><![CDATA[
    public boolean validateProjInvoicePeriodTo()
    {
        ProjPeriodLine      projPeriodLine;

        if (this.parmInvoicePeriod())
        {
            projPeriodLine = ProjPeriodLine::findFromPeriodTo(this.parmInvoicePeriod(), this.parmProjPeriodTo());

            if (!projPeriodLine)
            {
                // The entered date must follow the Period code.
                return checkFailed("@SYS84221");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SMASubscriptionCreate      smaSubscriptionCreate = new SMASubscriptionCreate();

        smaSubscriptionCreate.initDefaults(args);

        if (smaSubscriptionCreate.prompt())
        {
            smaSubscriptionCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>