<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEntryCertifChangeReceiptInfo_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustEntryCertifChangeReceiptInfo_W</c> class is intended to change
///    the entry certificate receipt status and date of the invoices.
/// </summary>
class CustEntryCertifChangeReceiptInfo_W extends RunBase
{
    EntryCertificateReceiptStatus_W crtStatus;
    EntryCertificateReceiptDate_W crtDate;
    RefRecId invoiceRecId;

    DialogRunbase dialog;

    DialogField fieldCrtStatus,
                fieldCrtDate;

    #define.fieldCrtStatusId(900)

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        crtStatus,
        crtDate,
        invoiceRecId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dialog box to ask for the new status and date.
    /// </summary>
    /// <returns>
    ///    An object that contains the dialog box.
    /// </returns>
    public Object dialog()
    {
        dialog = super();

        fieldCrtStatus = new DialogField(dialog, enumStr(EntryCertificateReceiptStatus_W), #fieldCrtStatusId);
        dialog.addCtrlDialogField(fieldCrtStatus.name());
        fieldCrtStatus.init(dialog);
        fieldCrtStatus.value(crtStatus);

        fieldCrtDate = dialog.addFieldValue(extendedtypestr(EntryCertificateReceiptDate_W), crtDate);

        this.dialogActivateFields();

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogActivateFields</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void dialogActivateFields()
    {
        fieldCrtDate.enabled(fieldCrtStatus.value() != EntryCertificateReceiptStatus_W::NotRequired);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Fld900_1_modified</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean Fld900_1_modified()
    {
        FormComboBoxControl control = dialog.formRun().controlCallingMethod();
        boolean isFieldModified  = control.modified();

        if (isFieldModified)
        {
            if (fieldCrtStatus.value() == EntryCertificateReceiptStatus_W::NotRequired)
            {
                fieldCrtDate.value(dateNull());
            }

            this.dialogActivateFields();
        }
        return isFieldModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the new status from the dialog.
    /// </summary>
    /// <returns>
    ///     boolean.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        crtStatus = fieldCrtStatus.value();
        crtDate = fieldCrtDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the last value from SysLastValue.  Overriden so that no record is retrieved.
    /// </summary>
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables and creates an object of the class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///    An invoice which status has to be changed.
    /// </param>
    void new(CustInvoiceJour _custInvoiceJour)
    {
        super();

        invoiceRecId = _custInvoiceJour.RecId;
        CustInvoiceJour_W custInvoiceJour_W = _custInvoiceJour.custInvoiceJour_W();
        crtStatus = custInvoiceJour_W.EntryCertificateReceiptStatus_W;
        crtDate = custInvoiceJour_W.EntryCertificateReceiptDate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            CustInvoiceJour custInvoiceJourUpd = CustInvoiceJour::findRecId(invoiceRecId, true);
            CustInvoiceJour_W custInvoiceJour_WUpd = custInvoiceJourUpd.custInvoiceJour_W();

            custInvoiceJour_WUpd.EntryCertificateReceiptStatus_W = crtStatus;

            if (custInvoiceJour_WUpd.EntryCertificateReceiptStatus_W == EntryCertificateReceiptStatus_W::NotRequired)
            {
                custInvoiceJour_WUpd.EntryCertificateReceiptDate_W = datenull();
            }
            else
            {
                custInvoiceJour_WUpd.EntryCertificateReceiptDate_W = crtDate;
            }

            custInvoiceJourUpd.packCustInvoiceJour_W(custInvoiceJour_WUpd);
            custInvoiceJourUpd.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Save the last value to SysLastValue.  Overriden so that no record is saved.
    /// </summary>
    public void saveLast()
    {
        // We do not want to call super here as we do not want to save the record to SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                  [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Method returns a new instance of the <c>CustEntryCertifChangeReceiptInfo_W</c> class.
    /// </summary>
    /// <param name="_custInvoiceJour">
    ///    <c>CustInoiceJour</c> record which status has to be changed.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>CustEntryCertifChangeReceiptStatus_W</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public CustEntryCertifChangeReceiptInfo_W construct(CustInvoiceJour _custInvoiceJour)
    {
        return new CustEntryCertifChangeReceiptInfo_W(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Description of the class.
    /// </summary>
    /// <returns>
    ///    Text description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS4004133";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the status and date changing.
    /// </summary>
    /// <param name = "_args">
    ///    Arguments.
    /// </param>
    public static void main(Args _args)
    {
        if (_args && _args.record() && _args.dataset() == tableNum(CustInvoiceJour))
        {
            RecId callerRecId = _args.record().recId;
            CustEntryCertifChangeReceiptInfo_W runClass = CustEntryCertifChangeReceiptInfo_W::construct(_args.record());

            if (runClass.prompt())
            {
                CustInvoiceJour custInvoiceJourUpd = CustInvoiceJour::findRecId(runClass.invoiceRecId);
                CustInvoiceJour_W custInvoiceJour_WUpd = custInvoiceJourUpd.custInvoiceJour_W();

                if (custInvoiceJour_WUpd.EntryCertificateReceiptStatus_W == EntryCertificateReceiptStatus_W::Received
                    && custInvoiceJour_WUpd.EntryCertificateReceiptStatus_W == runClass.crtStatus
                    && custInvoiceJour_WUpd.EntryCertificateReceiptDate_W != runClass.crtDate)
                {
                    warning("@AccountsReceivable:EntryCertificateReceiptDateChange");
                }

                runClass.runOperation();

                FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
                if (formDataSource)
                {
                    formDataSource.research();
                    formDataSource.positionToRecord(CustInvoiceJour::findRecId(callerRecId));
                }
            }
        }
        else
        {
            throw error("@SYS55194");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        _dialog.dialogForm().formRun().controlMethodOverload(true);
        _dialog.dialogForm().formRun().controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>