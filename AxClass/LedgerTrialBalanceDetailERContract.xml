<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceDetailERContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the data contract class for the <c>LedgerTrialBalanceWithTransactionalDetailDP</c> class.
/// </summary>
/// <remarks>
/// This is the data contract class for the trial balance detail report.
/// </remarks>
[DataContract]
[SysOperationContractProcessing(classStr(LedgerTrialBalanceDetailReportUIBuilder), SysOperationDataContractProcessingMode::CreateUIBuilderForRootContractOnly)]
[SysOperationGroup('Transaction', "@SYS50991", '1')]
[SysOperationGroup('Financial dimension set', "@SYS83218", '2')]
[SysOperationGroup('Date', "@SYS343126", '3')]
[SysOperationGroup('PrintOut', "@SYS12608", '4')]
[SysOperationGroup('PendingType', "@GeneralLedger:TrialBalanceReportPendingTypeIncluded", '5')]
internal class LedgerTrialBalanceDetailERContract extends ERFormatMappingRunBaseContract implements SysOperationValidatable
{
    private str query;
    private FromDate fromDate;
    private ToDate toDate;
    private boolean includeOpening;
    private boolean includeClosing;
    private boolean includeQuantity;
    private Name primaryDimensionFocus;
    private LedgerTrialBalanceShowTransactionStates showTransactions;
    private CurrentOperationsTax postingLayer;
    private ERFormatMappingId formatMapping;
    private boolean includePendingPurchaseOrder;
    private boolean includePendingPurchReq;
    private boolean includePendingBudgetRegisterEntry;
    private boolean includePendingAdvancedLedgerEntry;
    private boolean includePendingFreeTextInvoice;
    private boolean includePendingProjInvoice;
    private boolean includePendingVendorInvoice;
    private boolean includePendingPayment;
    private boolean includePendingCustPay;
    private boolean includePendingDaily;
    private boolean includePendingBudget;
    private boolean includePendingAllocation;
    private boolean includePendingVendorInvoiceJournal;
    private boolean includePendingVendorInvoiceRegister;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [
        DataMember('FromDate'),
        SysOperationLabel(literalstr("@SYS5209")),
        SysOperationHelpText(literalstr("@SYS67")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('2'),
        Hookable(false)
    ]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMember('ToDate'),
        SysOperationLabel(literalstr("@SYS14656")),
        SysOperationHelpText(literalstr("@SYS67")),
        SysOperationGroupMember('Date'),
        SysOperationDisplayOrder('3'),
        Hookable(false)
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    [
        DataMember('OperationsTax'),
        SysOperationLabel(literalstr("@SYS10925")),
        SysOperationHelpText(literalstr("@SYS1487")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('1'),
        Hookable(false)
    ]

    public CurrentOperationsTax parmPostingLayer(CurrentOperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOpening</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeOpening'),
        SysOperationLabel(literalstr("@SYS4000403")),
        SysOperationHelpText(literalstr("@SYS4000404")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('2'),
        Hookable(false)
    ]
    public boolean parmIncludeOpening(boolean _includeOpening = includeOpening)
    {
        includeOpening = _includeOpening;
        return includeOpening;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeClosing</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeClosing'),
        SysOperationLabel(literalstr("@SYS14844")),
        SysOperationHelpText(literalstr("@SYS82258")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('3'),
        Hookable(false)
    ]
    public boolean parmIncludeClosing(boolean _includeClosing = includeClosing)
    {
        includeClosing = _includeClosing;
        return includeClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeQuantity</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeQuantity'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceDetailReportIncludeQuantity")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('4'),
        Hookable(false)
    ]
    public boolean parmIncludeQuantity(boolean _includeQuantity = includeQuantity)
    {
        includeQuantity = _includeQuantity;
        return includeQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryDimensionFocus</Name>
				<Source><![CDATA[
    [
        DataMember('PrimaryDimensionDimensionFocus'),
        SysOperationLabel(literalstr("@SYS329752")),
        SysOperationHelpText(literalstr("@SYS307658")),
        SysOperationGroupMember('Financial dimension set'),
        Hookable(false)
    ]
    public Name parmPrimaryDimensionFocus(Name _primaryDimensionFocus = primaryDimensionFocus)
    {
        primaryDimensionFocus = _primaryDimensionFocus;
        return primaryDimensionFocus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTransactions</Name>
				<Source><![CDATA[
    [
        DataMember('IncludeTransactions'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceDetailReportIncludeTransactionGroup")),
        SysOperationGroupMember('Transaction'),
        Hookable(false)
    ]
    public LedgerTrialBalanceShowTransactionStates parmShowTransactions(LedgerTrialBalanceShowTransactionStates _showTransactions = showTransactions)
    {
        showTransactions = _showTransactions;
        return showTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatMapping</Name>
				<Source><![CDATA[
    [
        DataMember('FormatMapping'),
        SysOperationLabel(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationHelpText(literalstr("@ElectronicReporting:FormatMapping")),
        SysOperationGroupMember('PrintOut'),
        SysOperationDisplayOrder('5'),
        Hookable(false)
    ]
    public ERFormatMappingId parmFormatMapping(ERFormatMappingId _formatMapping = formatMapping)
    {
        formatMapping = _formatMapping;
        return formatMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingAdvancedLedgerEntry</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingAdvancedLedgerEntry'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeALE")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeALEHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('1'),
        Hookable(false)
    ]
    public boolean parmIncludePendingAdvancedLedgerEntry(boolean _includePendingAdvancedLedgerEntry = includePendingAdvancedLedgerEntry)
    {
        includePendingAdvancedLedgerEntry = _includePendingAdvancedLedgerEntry;
        return includePendingAdvancedLedgerEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingAllocation</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingAllocation'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeAllocation")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeAllocationHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('2'),
        Hookable(false)
    ]
    public boolean parmIncludePendingAllocation(boolean _includePendingAllocation = includePendingAllocation)
    {
        includePendingAllocation = _includePendingAllocation;
        return includePendingAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingBudget</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingBudget'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeBudget")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeBudgetHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('3'),
        Hookable(false)
    ]
    public boolean parmIncludePendingBudget(boolean _includePendingBudget = includePendingBudget)
    {
        includePendingBudget = _includePendingBudget;
        return includePendingBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingBudgetRegisterEntry</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingBudgetRegisterEntry'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeBRE")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeBREHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('4'),
        Hookable(false)
    ]
    public boolean parmIncludePendingBudgetRegisterEntry(boolean _includePendingBudgetRegisterEntry = includePendingBudgetRegisterEntry)
    {
        includePendingBudgetRegisterEntry = _includePendingBudgetRegisterEntry;
        return includePendingBudgetRegisterEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingCustPay</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingCustPay'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeCustPay")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeCustPayHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('5'),
        Hookable(false)
    ]
    public boolean parmIncludePendingCustPay(boolean _includePendingCustPay = includePendingCustPay)
    {
        includePendingCustPay = _includePendingCustPay;
        return includePendingCustPay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingDaily</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingDaily'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeDaily")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeDailyHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('6'),
        Hookable(false)
    ]
    public boolean parmIncludePendingDaily(boolean _includePendingDaily = includePendingDaily)
    {
        includePendingDaily = _includePendingDaily;
        return includePendingDaily;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingFreeTextInvoice</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingFreeTextInvoice'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeFTI")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeFTIHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('7'),
        Hookable(false)
    ]
    public boolean parmIncludePendingFreeTextInvoice(boolean _includePendingFreeTextInvoice = includePendingFreeTextInvoice)
    {
        includePendingFreeTextInvoice = _includePendingFreeTextInvoice;
        return includePendingFreeTextInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingProjInvoice</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingProjInvoice'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeProjInvoice")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeProjInvoiceHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('8'),
        Hookable(false)
    ]
    public boolean parmIncludePendingProjInvoice(boolean _includePendingProjInvoice = includePendingProjInvoice)
    {
        includePendingProjInvoice = _includePendingProjInvoice;
        return includePendingProjInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingPurchaseOrder</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingPurchaseOrder'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypePO")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypePOHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('9'),
        Hookable(false)
    ]
    public boolean parmIncludePendingPurchaseOrder(boolean _includePendingPurchaseOrder = includePendingPurchaseOrder)
    {
        includePendingPurchaseOrder = _includePendingPurchaseOrder;
        return includePendingPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingPurchReq</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingPurchReq'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypePR")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypePRHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('10'),
        Hookable(false)
    ]
    public boolean parmIncludePendingPurchReq(boolean _includePendingPurchReq = includePendingPurchReq)
    {
        includePendingPurchReq = _includePendingPurchReq;
        return includePendingPurchReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingVendorInvoice</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingVendorInvoice'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeVI")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeVIHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('11'),
        Hookable(false)
    ]
    public boolean parmIncludePendingVendorInvoice(boolean _includePendingVendorInvoice = includePendingVendorInvoice)
    {
        includePendingVendorInvoice = _includePendingVendorInvoice;
        return includePendingVendorInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingVendorInvoiceJournal</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingVendorInvoiceJournal'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeVendInvoice")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeVendInvoiceHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('12'),
        Hookable(false)
    ]
    public boolean parmIncludePendingVendorInvoiceJournal(boolean _includePendingVendorInvoiceJournal = includePendingVendorInvoiceJournal)
    {
        includePendingVendorInvoiceJournal = _includePendingVendorInvoiceJournal;
        return includePendingVendorInvoiceJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingVendorInvoiceRegister</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingVendorInvoiceRegister'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeVendInvoiceRegister")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypeVendInvoiceRegisterHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('13'),
        Hookable(false)
    ]
    public boolean parmIncludePendingVendorInvoiceRegister(boolean _includePendingVendorInvoiceRegister = includePendingVendorInvoiceRegister)
    {
        includePendingVendorInvoiceRegister = _includePendingVendorInvoiceRegister;
        return includePendingVendorInvoiceRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePendingPayment</Name>
				<Source><![CDATA[
    [
        DataMember('IncludePendingPayment'),
        SysOperationLabel(literalstr("@GeneralLedger:TrialBalanceReportPendingTypePayment")),
        SysOperationHelpText(literalstr("@GeneralLedger:TrialBalanceReportPendingTypePaymentHelpText")),
        SysOperationGroupMember('PendingType'),
        SysOperationDisplayOrder('14'),
        Hookable(false)
    ]
    public boolean parmIncludePendingPayment(boolean _includePendingPayment = includePendingPayment)
    {
        includePendingPayment = _includePendingPayment;
        return includePendingPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    [
        DataMember,
        AifQueryType('_query', querystr(LedgerTrialBalanceDetail)),
        Hookable(false)
    ]
    public str parmQuery(str _query = query)
    {
        query = _query;

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean validate()
    {
        return this.isValidFocusSet()
            && this.isValidDateRange()
            && this.isValidFormatMapping();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidFocusSet</Name>
				<Source><![CDATA[
    private boolean isValidFocusSet()
    {
        boolean isValid = true;
        RecId primaryFocusRecId;

        if (primaryDimensionFocus)
        {
            primaryFocusRecId = DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, primaryDimensionFocus).RecId;
        }

        if (!primaryFocusRecId)
        {
            isValid = checkFailed("@SYS83202");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDateRange</Name>
				<Source><![CDATA[
    private boolean isValidDateRange()
    {
        const int MaximumDays = 31;
        boolean isValid = true;

        if (!fromDate)
        {
            isValid = checkFailed("@SYS97591");
        }

        if (isValid && !toDate)
        {
            isValid = checkFailed("@SYS97592");
        }

        if (isValid && (fromDate > toDate))
        {
            isValid = checkFailed(strfmt("@SYS55013", date2StrUsr(fromDate, DateFlags::FormatAll), date2StrUsr(toDate, DateFlags::FormatAll)));
        }

        if (isValid && (toDate - fromDate + 1) > MaximumDays)
        {
            isValid = checkFailed(strfmt("@GeneralLedger:TrialBalanceDetailExceedMaximumDayError", MaximumDays));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidFormatMapping</Name>
				<Source><![CDATA[
    private boolean isValidFormatMapping()
    {
        boolean isValid = true;

        if (!formatMapping)
        {
            isValid = checkFailed("@GeneralLedger:TrialBalanceDetailReportMissingFormattingNameError");
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>