<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPickupTimeslotAllocationCalculationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <remarks>
/// This controller / job aims to calculate pickup timeslot allocations for across all pickup stores.
/// The calculated allocation data along with snapshot times will then be synchronized to ChannelDB for
/// Channel side timeslot availability calculation.
/// </remarks>
internal class RetailPickupTimeslotAllocationCalculationController extends SysOperationServiceController implements BatchRetryable
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPickupTimeslotAllocationCalculationController construct(SysOperationExecutionMode _executionMode = SysOperationExecutionMode::ScheduledBatch)
    {
        return new RetailPickupTimeslotAllocationCalculationController(_executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(SysOperationExecutionMode _executionMode)
    {
        super();
        this.parmClassName(classStr(RetailPickupTimeslotAllocationCalculationService));
        this.parmMethodName(methodStr(RetailPickupTimeslotAllocationCalculationService, calculatePickupTimeslotAllocation));
        this.parmExecutionMode(_executionMode);
        this.parmDialogCaption("@Retail:RetailPickupTimeslotAllocationCalculationJobLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailPickupTimeslotAllocationCalculationController controller = RetailPickupTimeslotAllocationCalculationController::construct(SysOperationExecutionMode::Synchronous);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>