<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPurchLineChangeLoadLineUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSPurchLineChangeLoadLineUpdater</c> class is used to validate changes to the purch line that may need to be
/// synchronized to existing load lines.
/// </summary>
/// <remarks>
/// Purchase lines require different validation and handling from other source lines.
/// </remarks>
[WHSSrcLineChangeLoadLineUpdAttribute(tableStr(PurchLine))]
class WHSPurchLineChangeLoadLineUpdater extends WHSInboundOrderChangeLoadLineUpdater
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSyncDimensionChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that we can change dimensions on load lines.
    /// </summary>
    /// <returns>
    /// true if we can update load line dimensions; otherwise,
    /// false
    /// </returns>
    protected boolean canSyncDimensionChange()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSyncQtyIncrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the load line qty can be increased.
    /// </summary>
    /// <returns>
    /// true if qty on the load line can be increased; otherwise,
    /// false
    /// </returns>
    protected boolean canSyncQtyIncrease()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSyncQtyReduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that qty on the load line can be reduced
    /// </summary>
    /// <returns>
    /// true if qty on the load line can be reduced; otherwise,
    /// false
    /// </returns>
    protected boolean canSyncQtyReduction()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesOpenWorkExistWithOtherDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if open work exists for the order line.
    /// </summary>
    /// <returns>
    /// true if there is a load line with partial work created; otherwise,
    /// false
    /// </returns>
    /// <remarks>
    /// This is used in determine if we are allowed to change dimensions on a loadline.
    /// We are allowed to skip over loadLines that have full work created qty.
    /// </remarks>
    protected boolean doesOpenWorkExistWithOtherDimensions()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValidationQtyChangedPosToNeg</Name>
				<Source><![CDATA[
    protected boolean handleValidationQtyChangedPosToNeg()
    {
        WHSLoadLine whsLoadLine;
        boolean result = true;

        if (WHSParameters::find().AutoCreateLoadPO &&
            WHSParameters::find().LoadSynchronizationPolicy == WHSLoadSynchronizationPolicy::Invalidate)
        {
            if (WHSParameters::find().AutoCleanEmptyLoadManifest)
            {
                delete_from whsLoadLine
                    where whsLoadLine.InventTransId == this.parmInventTransId();

                result = false;
            }
            else
            {
                this.instrumentationLogger().logInformation('HandleValidationFailure: HandleValidationQtyChangedPosToNegPurchLine');
                result = this.handleValidationFailure("@WAX4663", false, true, WHSLoadSynchronizationPolicy::Fail);
                result = this.handleValidationFailure("@SYS18447", true, true, WHSLoadSynchronizationPolicy::Fail) && result;
            }
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load header information for wieghts.
    /// </summary>
    /// <param name="_loadId">
    /// The loadId of the load that is to be updated.
    /// </param>
    protected void updateLoadHeader(WHSLoadId _loadId)
    {
        super(_loadId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLineDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the dimension of all eligible load lines.
    /// </summary>
    /// <remarks>
    /// We only update load lines that have no work crated.
    /// </remarks>
    protected void updateLoadLineDimensions()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method prevents the shipment from being updated in parent class.
    /// </summary>
    /// <param name="_shipmentId">
    /// The shipmentId of the shipment that is to be updated
    /// </param>
    protected void updateShipmentHeader(WHSShipmentId _shipmentId)
    {
        super(_shipmentId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>