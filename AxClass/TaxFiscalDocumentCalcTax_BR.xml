<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFiscalDocumentCalcTax_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates tax amount and provide data to tax engine for tax fiscal documents.
/// </summary>
class TaxFiscalDocumentCalcTax_BR extends TradeCalcTax
{
    TaxFiscalDocumentTotals_BR  fiscalDocumentTotals;
    TaxFiscalDocumentLine_BR    taxFiscalDocLine;
    boolean                     lineExist;
    TaxFiscalDocument_BR        taxFiscalDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total amounts of the fiscal document.
    /// </summary>
    /// <returns>
    /// Container containing net amount, amount, and discount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container amounts()
    {
        AmountCur  amountCur = this.transLineAmount();
        DiscAmount lineEndDisc;

        return [lineEndDisc - amountCur, -amountCur, -lineEndDisc];
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount including taxes.
    /// </summary>
    /// <returns>
    /// The amount including taxes.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    AmountCur  baseAmountInclTax()
    {
        return taxFiscalDocLine.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the taxes.
    /// </summary>
    /// <param name="_fiscalDocumentTotals">
    /// <c>TradeTotalsBase</c> totals object to calculate the taxes.
    /// </param>
    /// <returns>
    /// Tax amount calculated.
    /// </returns>
    [Replaceable]
    TaxAmountCur calcTax(TradeTotalsBase _fiscalDocumentTotals)
    {
        TaxFiscalDocumentTax_BR       taxSales;
        TaxAmountCur    amountCur;

        fiscalDocumentTotals = _fiscalDocumentTotals;

        taxSales    = TaxFiscalDocumentTax_BR::construct(this);
        amountCur   = taxSales.calc();

        this.tax(taxSales);
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for this tax fiscal document.
    /// </summary>
    /// <returns>
    /// Currency code for this tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyCode currencyCode()
    {
        return taxFiscalDocument.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the delivery date of the tax fiscal document
    /// </summary>
    /// <returns>
    /// The delivery date of the tax fiscal document
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    DlvDate deliveryDate()
    {
        return taxfiscaldocument.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the document date of the tax fiscal document
    /// </summary>
    /// <returns>
    /// The document date of the tax fiscal document
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DocumentDate documentDate()
    {
        return fiscalDocumentTotals.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>Tax</c> object related to this tax fiscal document.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// <c>LedgerVoucher</c> object used to post the taxes.
    /// </param>
    /// <param name="_post">
    /// Whether the taxes will be posted.
    /// </param>
    /// <returns>
    /// New <c>Tax</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxFiscalDocumentTax_Invoice_BR getTaxFiscalDocument(LedgerVoucher    _ledgerVoucher,
                                                                   NoYes            _post)
    {
        return new TaxFiscalDocumentTax_Invoice_BR(_post,
                                                this,
                                                _ledgerVoucher,
                                                this.tax().tmpTaxWorkTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the cursor to retrieve tax fiscal document lines.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initCursor()
    {
        select nofetch forupdate taxFiscalDocLine
            where taxFiscalDocLine.TaxFiscalDocument == taxFiscalDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice date.
    /// </summary>
    /// <returns>
    /// The invoice date.
    /// </returns>
    TransDate invoiceDate()
    {
        return taxfiscaldocument.InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a line still exists to be processed for this document.
    /// </summary>
    /// <returns>
    /// true if a line still exists to be processed for this document; false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean lineExist()
    {
        return lineExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>TaxFiscalDocumentCalcTax_BR</c> for a given tax fiscal document.
    /// </summary>
    /// <param name="_taxFiscalDocument">
    /// <c>TaxFiscalDocument_BR</c> to have the taxes calculated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void new(TaxFiscalDocument_BR _taxFiscalDocument)
    {
        taxFiscalDocument = _taxFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next tax fiscal document line.
    /// </summary>
    /// <returns>
    /// The next tax fiscal document line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Common nextLine()
    {
        lineExist = false;

        next taxFiscalDocLine;

        if (taxFiscalDocLine)
            lineExist = true;

        return taxFiscalDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerDimensionDefaultAccount</c> default account to post this fiscal document.
    /// </summary>
    /// <returns>
    /// The <c>LedgerDimensionDefaultAccount</c> default account to post this fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    LedgerDimensionDefaultAccount operationAccount()
    {
        return taxFiscalDocLine.getLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger posting type of this tax fiscal document.
    /// </summary>
    /// <returns>
    /// <c>LedgerPostingType</c> enumerator for the posting type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerPostingType operationPosting()
    {
        return LedgerPostingType::Tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the taxes of this tax fiscal document.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// <c>LedgerVoucher</c> object to post the document.
    /// </param>
    /// <param name="_post">
    /// true if the post is real, false for proforma.
    /// </param>
    void post(LedgerVoucher    _ledgerVoucher,
              NoYes           _post = NoYes::Yes)
    {
        TaxFiscalDocumentTax_Invoice_BR  taxFiscalDocumentTax;

        taxFiscalDocumentTax = this.getTaxFiscalDocument(_ledgerVoucher, _post);
        taxFiscalDocumentTax.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the rec ID of the tax fiscal document.
    /// </summary>
    /// <returns>
    /// The rec ID of the tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    recId  recID()
    {
        return taxFiscalDocument.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the tax fiscal document.
    /// </summary>
    /// <returns>
    /// The table ID of the tax fiscal document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    tableId  tableId()
    {
        return taxFiscalDocument.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current line's amount.
    /// </summary>
    /// <returns>
    /// the current line's amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    AmountCur  transLineAmount()
    {
        return taxFiscalDocLine.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the current line's item quantity.
    /// </summary>
    /// <returns>
    /// Current line's item quantity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    SalesQty transQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxFiscalDocumentCalcTax_BR construct(TaxFiscalDocument_BR _source)
    {
        return new TaxFiscalDocumentCalcTax_BR(_source);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>