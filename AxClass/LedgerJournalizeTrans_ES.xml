<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeTrans_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalizeTrans_ES extends LedgerJournalizeTrans implements BatchRetryable
{

    private const int CurrentVersion_ES = 2;

    Voucher      oldVoucher;
    TransDate    oldTransDate;
    TransDate    startTransDate;
    TransDate    endTransDate;
    NoYes        newSequenceNumber;
    DialogField  dialogNewSequenceNumber;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be built by using the <c>Dialog</c> class or by using a class that is created in
    /// the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase   dialog = super();

        dialogNewSequenceNumber = dialog.addField(enumstr(NoYes), "@SYS54444", "@SYS54445");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        newSequenceNumber = dialogNewSequenceNumber.value();
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSequenceNum</Name>
				<Source><![CDATA[
    LedgerJournalizeSeqNum initSequenceNum()
    {
        if (newSequenceNumber)
            return 0;
        else
            return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        QueryBuildDataSource ds;
        QueryBuildRange range;

        super();

        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoES, GlobalizationConstants::FeatureReferenceES00022] ],
            funcName()
        );

        ds = queryRun.query().dataSourceTable(tablenum(GeneralJournalEntry));
        range = ds.addRange(fieldnum(GeneralJournalEntry, AccountingDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournal</Name>
				<Source><![CDATA[
    boolean newJournal()
    {
        return newSequenceNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [CurrentVersion_ES, newSequenceNumber, printLedgerJournalizeReport, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printout</Name>
				<Source><![CDATA[
    void printout()
    {
        Args    args = new Args();

        args.record(ledgerJournalizeReport);

        new MenuFunction(menuitemoutputstr(LedgerJournalizeReport_ES), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rangeDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void rangeDate(str _rangeDate)
    {
        str startDate;
        str endDate;

        if (_rangeDate)
        {
            _rangeDate      = strrem(_rangeDate, '" ');
            startDate       = strdel(_rangedate, strfind(_rangeDate, '..', 1, strlen(_rangeDate)), strlen(_rangeDate));
            startTransDate  = str2date(startDate, -1);

            endDate         = strdel(_rangeDate, (strfind(_rangeDate, '..', 1, strlen(_rangeDate)) + 1), -strfind(_rangeDate, '..', 1, strlen(_rangeDate))-1);
            endTransDate    = str2date(endDate, -1);
        }
        else
        {
            startTransDate    = dateNull();
            endTransDate      = dateMax();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void  run()
    {
        const int RetryNum = 5;

        try
        {
            this.updateNow();
        }

        catch (Exception::Deadlock)
        {
            if (numberSeq)
            {
                numberSeq.abort();
            }
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    if (numberSeq)
                    {
                        numberSeq.abort();
                    }
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            if (numberSeq)
            {
                numberSeq.abort();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sequenceNum</Name>
				<Source><![CDATA[
    LedgerJournalizeSeqNum sequenceNum(Voucher   _voucher,
                                       TransDate _transDate)
    {
        if (_voucher != oldVoucher ||
            _transDate != oldTransDate)
        {
            sequenceNum += 1;
            oldVoucher   = _voucher;
            oldTransDate = _transDate;
        }
        return sequenceNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        const int Version1 = 1;

        Integer     version = RunBase::getVersion(packedClass);
        container   base;

        switch (version)
        {
            case CurrentVersion_ES:
                [version, newSequenceNumber, printLedgerJournalizeReport, base] = packedClass;
                break;

            case Version1:
                [version, newSequenceNumber, base] = packedClass;
            break;

            default:
                return false;
        }

        if (base)
        {
            super(base);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    public void updateNow()
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerEntryJournalizing ledgerEntryJournalizing;
        GeneralJournalEntry generalJournalEntry;
        RecordInsertList newJournalizingRecords;
        QueryBuildDataSource ds;
        QueryBuildRange range;
        boolean                 transactions;
        AmountMST               debit;
        AmountMST               credit;
        str                     rangeDate;

        ds = queryRun.query().dataSourceTable(tablenum(GeneralJournalEntry));
        ds.addSortField(fieldnum(GeneralJournalEntry, AccountingDate));
        range = ds.rangeField(fieldnum(GeneralJournalEntry, AccountingDate));
        rangeDate = range.value();
        this.rangeDate(rangeDate);

        if (!startTransDate && !endTransDate)
        {
            throw error("@SYS310605");
        }

        ttsbegin;

        newJournalizingRecords = new RecordInsertList(tableNum(LedgerEntryJournalizing));

        numberSeq = NumberSeq::newGetNum(LedgerParameters::numRefLedgerJournalizeNum());
        journalizeNum = numberSeq.num();

        sequenceNum = this.initSequenceNum();

        while (queryRun.next())
        {
            generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry));
            generalJournalEntry = queryRun.get(tablenum(GeneralJournalEntry));

            sequenceNum = this.sequenceNum(generalJournalEntry.JournalNumber, generalJournalEntry.AccountingDate);

            ledgerEntryJournalizing.GeneralJournalAccountEntry = generalJournalAccountEntry.RecId;
            ledgerEntryJournalizing.Journal = journalizeNum;
            ledgerEntryJournalizing.SequenceNumber = sequenceNum;
            newJournalizingRecords.add(ledgerEntryJournalizing);

            if (generalJournalAccountEntry.IsCredit)
            {
                 credit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                 debit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            transactions = true;
        }

        newJournalizingRecords.insertDatabase();

        if (transactions)
        {
            ledgerJournalizeReport.JournalizeSeqNum = sequenceNum;
            ledgerJournalizeReport.JournalizeNum    = journalizeNum;
            ledgerJournalizeReport.Debit            = debit;
            ledgerJournalizeReport.Credit           = credit;
            ledgerJournalizeReport.NewJournalize    = this.newJournal();

            this.rangeDate(rangeDate);

            ledgerJournalizeReport.StartTransDate   = startTransDate;
            ledgerJournalizeReport.EndTransDate     = endTransDate;

            if (LedgerParameters::find().JournalizeSortorder)
            {
                ledgerJournalizeReport.AdvancedJournalizing = NoYes::Yes;
            }
            else
            {
                ledgerJournalizeReport.AdvancedJournalizing = NoYes::No;
            }

            ledgerJournalizeReport.insert();
            printLedgerJournalizeReport = NoYes::Yes;
        }
        else
        {
            printLedgerJournalizeReport = NoYes::No;
            numberSeq.abort();
            info("@SYS69792");
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public ClassDescription description()
    {
        return "@SYS12837";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        LedgerJournalizeTrans_ES ledgerJournalizeTrans_ES = new LedgerJournalizeTrans_ES();

        if (ledgerJournalizeTrans_ES.prompt())
        {
            ledgerJournalizeTrans_ES.runOperation();

            if (ledgerJournalizeTrans_ES.printLedgerJournalizeReport)
            {
                ledgerJournalizeTrans_ES.printout();
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>