<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SRSReportParameterAttribute(classStr(SalesInvoiceContract))]
public class SalesInvoiceDP extends SalesInvoiceDPBase
{
    boolean hasCustPackingSlipTrans;
    str packingSlipDetails;
    SalesInvoiceTmp salesInvoiceTmp;
    SysDocuBrandDetailsRegular docuBrandDetails;
    // <GEEU>
    SalesInvoiceHeaderFooterTmp salesInvoiceHeaderFooterTmp;
    SalesInvoiceLocalizationTmp salesInvoiceLocalizationTmp;
    str invoiceTxtSequel;
    boolean isTransportationDataInserted; // Indicates if transportation data been inserted to the tmp table.
    // </GEEU>
    SRSPrintDestinationSettings printDestinationSetting;
    SalesInvoiceJournalPrint salesInvoiceJournalPrint;
    RecordSortedList journalList;
    FormLetterRemarks formLetterRemarks;
    TmpPackMaterialFeeSum tmpPackMaterialFeeSum;
    // <GTH>
    SalesInvoiceContract contract;
    // </GTH>

    container inventDimSetup;
    container inventDimSetupProduct;
    InventDimCtrl_Rep_Sales inventDimReport;

    PaymMoneyTransferSlip moneyTransferSlip;
    PaymMoneyTransferSlip_BE moneyTransferSlip_BE;
    PaymMoneyTransferSlip_CH moneyTransferSlip_CH;
    PaymMoneyTransferSlip_FI moneyTransferSlip_FI;
    container taxCodesUsed;
    MarkupTrans markupTrans;
    boolean custCreditInvoicing;
    FormletterProformaPrint formletterProformaPrint;
    CashDiscAmount cashDiscAmountTax;
    Amount amount;
    // <GTH>
    CustInvoiceJourAdjustment custInvoiceJourAdjustment;
    // </GTH>
    boolean isInventDimVisible;
    InventDim inventDim;
    str backOrderName;
    ItemId backOrderItemId;
    SalesQty backOrderQuantity;
    SalesUnit backOrderSalesUnit;
    SalesShippingDateConfirmed backOrderConfirmedDeliveryDate;
    boolean showPackingMaterial;
    boolean showCustPackingSlipTrans;
    AmountCur totalSalesBalance;
    AmountCur totalDiscount;
    AmountCur totalMiscCharges;
    AmountCur totalSalesTax;
    Bitmap emptyBitmap;
    // <GIN>
    SalesLine salesLineRegNumbers;
    TaxInformation_IN taxInformation;
    TaxRegistrationNumbers_IN taxRegistrationNumbers;
    SalesInvoiceTmp_IN salesInvoiceTmp_IN;
    // </GIN>
    // <GEEHU>
    Counter lineNumber;
    // </GEEHU>
    boolean isInvoiceCreditNote;
    LedgerJournalTrans ledgerJournalTrans;

    ItemType taxInvoiceItemType;

    //<GIN>
    TaxWithholdTrans_IN taxWithholdTrans;
    TaxWithholdSpec_IN taxWithholdSpec;
    // </GIN>
    // <GEEPL>
    RefRecId custInvoiceDuplicateTableRecId;
    boolean lineNumberInserted;
    // </GEEPL>
    SalesInvoicePaymentStubTmp salesInvoicePaymentStubTmp;
    boolean isPaymentStubRecordInserted;
    // <GTH>
    TaxBase taxBaseAmount;
    TaxAmount taxAmount;
    TaxQty taxBaseQty;
    // </GTH>

    AmountCur proforma_totalExcludedTaxAmount;

    boolean showMCRMarkup;

    CustLanguageId  custTransLanguageId;

    // Additional Cached values
    private TempStr cachedPackagingMaterialText;
    private boolean cachedCashAccountingRegime_ES;
    private Map salesUnitTextMap;
    private AmountCur cachedReverseChargeBalance;
    private AmountCur cachedReverseChargeAmountEuro;
    private TaxBaseCur cachedReverseChargeBalanceEuro;
    private boolean cachedShowSepaNotification;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNo2_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 2 value for the CH country context.
    /// </summary>
    /// <returns>The account number 2 value.</returns>
    protected str accountNo2_CH()
    {
        if (moneyTransferSlip_CH.ocr_AccountNo2())
        {
            return moneyTransferSlip_CH.ocr_AccountNo2() + '>';
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum1_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 1 value for the FI country context.
    /// </summary>
    /// <returns>The account number 1 value.</returns>
    protected str accountNum1_FI()
    {
        str ret;

        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            ret = moneyTransferSlip_FI.ocr_AccountNum1();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum2_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 2 value for the FI country context.
    /// </summary>
    /// <returns>The account number 2 value.</returns>
    protected str accountNum2_FI()
    {
        str ret;

        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            ret = moneyTransferSlip_FI.ocr_AccountNum2();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum3_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 3 value for the FI country context.
    /// </summary>
    /// <returns>The account number 3 value.</returns>
    protected str accountNum3_FI()
    {
        str ret;

        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            ret = moneyTransferSlip_FI.ocr_AccountNum3();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum4_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 4 value for the FI country context.
    /// </summary>
    /// <returns>The account number 4 value.</returns>
    protected str accountNum4_FI()
    {
        str ret;

        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            ret = moneyTransferSlip_FI.ocr_AccountNum4();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum5_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 5 value for the FI country context.
    /// </summary>
    /// <returns>The account number 5 value.</returns>
    protected str accountNum5_FI()
    {
        str ret;

        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            ret = moneyTransferSlip_FI.ocr_AccountNum5();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNum6_FI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the account number 6 value for the FI country context.
    /// </summary>
    /// <returns>The account number 6 value.</returns>
    protected str accountNum6_FI()
    {
        str ret;

        if (hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, Name)))
        {
            ret = moneyTransferSlip_FI.ocr_AccountNum6();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProductDimensionsToInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the product inventoried dimension to the non inventoried
    /// dimension when appropriate.
    /// </summary>
    protected void addProductDimensionsToInventDim()
    {
        if (custFormLetterParameters.ItemDimPlacement == ItemDimFormLetter::Line)
        {
            inventDimSetup = conUnion(inventDimSetupProduct, inventDimSetup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCheckId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount check Id for the transfer slip.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The amount check Id value.</returns>
    protected str amountCheckId(CustInvoiceJour _custInvoiceJour)
    {
        return moneyTransferSlip.amountCheckId(_custInvoiceJour.remainAmountToBePaid());
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountDecimals_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of decimals for the CH country context.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The number of decimals.</returns>
    protected str amountDecimals_CH(CustInvoiceJour _custInvoiceJour)
    {
        str tmpAmount;

        if (! moneyTransferSlip_CH.checkCurrency() || _custInvoiceJour.remainAmountToBePaid() < 0)
        {
            tmpAmount = 'XX';
        }
        else
        {
            if (!_custInvoiceJour.CashDisc)
            {
                tmpAmount = moneyTransferSlip_CH.invoiceAmountPenny();
            }
            else
            {
                tmpAmount = #emptyString;
            }
        }

        return tmpAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountNoDecimals_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the expanded number of decimals for the CH country context.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    /// <returns>The expanded number of decimals.</returns>
    protected str amountNoDecimals_CH(CustInvoiceJour _custInvoiceJour)
    {
        str tmpAmount;

        if (! moneyTransferSlip_CH.checkCurrency() || _custInvoiceJour.remainAmountToBePaid() < 0)
        {
            tmpAmount = 'XXXXXXXX';
        }
        else
        {
            if (! _custInvoiceJour.CashDisc)
            {
                tmpAmount = moneyTransferSlip_CH.invoiceAmountMST();
            }
            else
            {
                tmpAmount = #emptyString;
            }
        }

        return tmpAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable_AccountNum_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account number.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal.</param>
    /// <returns>The bank account number.</returns>
    protected str bankAccountTable_AccountNum_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return moneyTransferSlip.bankAccountNum();
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankAccountTable_Clearing_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account clearing code.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal.</param>
    /// <returns>The bank account clearing code.</returns>
    protected str bankAccountTable_Clearing_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return moneyTransferSlip.bankAccountTable().BankClearingCode;
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankGroupIdName_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account group name.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal.</param>
    /// <returns>The bank account group name.</returns>
    protected Description bankGroupIdName_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return BankAccountTable::find(_custInvoiceJour.paymentBankAccountId()).Name;
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankZipCode_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank zip code value.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal.</param>
    /// <returns>The bank zip code value.</returns>
    protected str bankZipCode_CH(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank)
        {
            return strFmt('%1 %2', BankAccountTable::find(_custInvoiceJour.paymentBankAccountId()).postalAddress().ZipCode,
                BankAccountTable::find(_custInvoiceJour.paymentBankAccountId()).postalAddress().City);
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesInvoiceDP construct()
    {
        return new SalesInvoiceDP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsInvoiceCreditNote</Name>
				<Source><![CDATA[
    public boolean parmIsInvoiceCreditNote(boolean _isInvoiceCreditNote = isInvoiceCreditNote)
    {
        isInvoiceCreditNote = _isInvoiceCreditNote;

        return isInvoiceCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsoCountryCode</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode parmIsoCountryCode(LogisticsAddressCountryRegionISOCode _isoCountryCode = isoCountryCode)
    {
        isoCountryCode = _isoCountryCode;

        return isoCountryCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransportationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the transportation related fields from the temporary table.
    /// </summary>
    private void clearTransportationDetails()
    {
        salesInvoiceLocalizationTmp.TransportationDataSection = NoYes::No;
        salesInvoiceLocalizationTmp.DoPrintTransportationDocument = NoYes::No;
        salesInvoiceLocalizationTmp.DeliveryName = #emptyString;
        salesInvoiceLocalizationTmp.DeliveryAddress = #emptyString;

        salesInvoiceLocalizationTmp.TransportationContactPersonName = #emptyString;
        salesInvoiceLocalizationTmp.TransportationContactPersonTitle = #emptyString;

        salesInvoiceLocalizationTmp.TransportationCarrierAddress = #emptyString;
        salesInvoiceLocalizationTmp.TransportationCarrierName = #emptyString;

        salesInvoiceLocalizationTmp.TransPortationIssuedByName = #emptyString;
        salesInvoiceLocalizationTmp.TransportationIssuedByTitle = #emptyString;

        salesInvoiceLocalizationTmp.TransportationLoadedDateTime = utcDateTimeNull();
        salesInvoiceLocalizationTmp.TransportationLoadedAddress = #emptyString;
        salesInvoiceLocalizationTmp.TransportationLoadedName = #emptyString;

        salesInvoiceLocalizationTmp.TransportationPackageDangerDegree = #emptyString;
        salesInvoiceLocalizationTmp.TransportationPackageDescription = #emptyString;

        salesInvoiceLocalizationTmp.TransportationVehicleDescription = #emptyString;
        salesInvoiceLocalizationTmp.TransportationVehicleDriverName = #emptyString;
        salesInvoiceLocalizationTmp.TransportationVehiclePlateNumber = #emptyString;
        salesInvoiceLocalizationTmp.TransportationVehicleTrailerNumber = #emptyString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCodeISO_CH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency ISO code value.
    /// </summary>
    /// <returns>The currency ISO code value.</returns>
    protected CurrencyCodeISO currencyCodeISO_CH()
    {
        CurrencyCodeISO currencyCodeISO;

        if (moneyTransferSlip_CH.parmIsEUR())
        {
            currencyCodeISO = 'EUR';
        }

        if (moneyTransferSlip_CH.parmIsCHF())
        {
            currencyCodeISO = 'CHF';
        }

        return currencyCodeISO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiCreditorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Creditor Id value.
    /// </summary>
    /// <returns>The creditor Id value.</returns>
    protected str fiCreditorId()
    {
        CompanyInfoHelper::checkFICreditorIDEmpty(companyInfo.fiCreditorID_DK);
        return companyInfo.fiCreditorID_DK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceHeaderLocalizationData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>SalesInvoiceHeaderFooterTmp</c> record for the Eastern Europe countries.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    protected void generateInvoiceHeaderLocalizationData(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        CustTable buyer, payer;

        buyer = _custInvoiceJour.custTable_OrderAccount();
        payer = _custInvoiceJour.custTable_InvoiceAccount();

        CustInvoiceJour_W custInvoiceJour_W = _custInvoiceJour.custInvoiceJour_W();
        BankAccountTable currencyBankAccountTable = BankAccountTable::find(custInvoiceJour_W.CompanyCurBankAccount_W);

        salesInvoiceHeaderFooterTmp.CompanyEmail = _companyInfo.email();
        salesInvoiceHeaderFooterTmp.CompanyURL = _companyInfo.url();
        salesInvoiceHeaderFooterTmp.CompanyBankAccount = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
            strFmt('%1 %2', this.parmCompanyBankAccountTable().RegistrationNum, this.parmCompanyBankAccountTable().AccountNum) : "@AccountsReceivable:FiveAsterisk";
        salesInvoiceHeaderFooterTmp.CompanyBankName = this.parmCompanyBankAccountTable().Name;
        salesInvoiceHeaderFooterTmp.SalesDate = custInvoiceJour_W.SalesDate_W;
        salesInvoiceHeaderFooterTmp.OriginalInvoiceReference = this.parmOriginalInvoiceIds();
        salesInvoiceHeaderFooterTmp.BuyerAddress = _custInvoiceJour.deliveryAddress();
        salesInvoiceHeaderFooterTmp.BuyerName = _custInvoiceJour.DeliveryName;

        if (_custInvoiceJour.InvoiceAccount != _custInvoiceJour.OrderAccount)
        {
            salesInvoiceHeaderFooterTmp.ShowPayer = true;
            if (isoCountryCode == #isoLT)
            {
                salesInvoiceHeaderFooterTmp.PayerEnterpriseCode = payer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
            }
        }

        if (currencyBankAccountTable && _custInvoiceJour.CurrencyCode != Ledger::accountingCurrency(companyInfo.RecId))
        {
            salesInvoiceHeaderFooterTmp.ShowCurrencyBankAccount = true;
            salesInvoiceHeaderFooterTmp.CompanyCurrencyBankAccount = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                strFmt('%1 %2', currencyBankAccountTable.RegistrationNum, currencyBankAccountTable.AccountNum) : "@AccountsReceivable:FiveAsterisk";
            salesInvoiceHeaderFooterTmp.CompanyCurrencyBankName = currencyBankAccountTable.Name;
            salesInvoiceHeaderFooterTmp.BankSpecificSymbol = currencyBankAccountTable.SpecificSymbol;
            salesInvoiceHeaderFooterTmp.Iban = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN)) ?
                                                currencyBankAccountTable.IBAN : "@AccountsReceivable:FiveAsterisk";
            salesInvoiceHeaderFooterTmp.SwiftNumber = currencyBankAccountTable.swiftNo;
        }
        else
        {
            // Shows the IBAN and Swift number of the company's bank.
            salesInvoiceHeaderFooterTmp.ShowCurrencyBankAccount = false;
            salesInvoiceHeaderFooterTmp.Iban = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN)) ?
                                                    this.parmCompanyBankAccountTable().IBAN : "@AccountsReceivable:FiveAsterisk";
            salesInvoiceHeaderFooterTmp.SwiftNumber = this.parmCompanyBankAccountTable().swiftNo;
            salesInvoiceHeaderFooterTmp.BankSpecificSymbol = this.parmCompanyBankAccountTable().SpecificSymbol;
        }

        switch (isoCountryCode)
        {
            case #isoEE:
                salesInvoiceHeaderFooterTmp.CompanyURL = _companyInfo.url();
                salesInvoiceHeaderFooterTmp.CompanyEmail = _companyInfo.email();
                break;

            case #isoLV:
                CustBankAccount customerBankAccount = CustBankAccount::find(_custInvoiceJour.InvoiceAccount, custInvoiceJour_W.CustBankAccount_LV);

                unchecked (Uncheck::TableSecurityPermission)
                {
                    if (customerBankAccount)
                    {
                        salesInvoiceHeaderFooterTmp.CustomerBankName = customerBankAccount.Name;
                        salesInvoiceHeaderFooterTmp.CustomerBankAccount = strFmt('%1 %2', customerBankAccount.RegistrationNum, customerBankAccount.AccountNum);
                    }
                }

                salesInvoiceHeaderFooterTmp.SpecialFormattedDocumentDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custInvoiceJour.DocumentDate, false, true);
                salesInvoiceHeaderFooterTmp.SpecialFormattedInvoiceDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custInvoiceJour.InvoiceDate, false, true);
                salesInvoiceHeaderFooterTmp.SpecialFormattedPrintDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), false, true);
                break;

            case #isoHU:
                salesInvoiceHeaderFooterTmp.PayerRegNum_W = payer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                salesInvoiceHeaderFooterTmp.BuyerRegNum_W = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                salesInvoiceHeaderFooterTmp.VatDueDate_W = _custInvoiceJour.vatDueDate_W();
                break;

            case #isoCZ:
                salesInvoiceHeaderFooterTmp.PayerRegNum_W = payer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                salesInvoiceHeaderFooterTmp.BuyerRegNum_W = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                salesInvoiceHeaderFooterTmp.VatDueDate_W = _custInvoiceJour.vatDueDate_W();
                salesInvoiceHeaderFooterTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(_companyInfo, _custInvoiceJour.InvoiceDate);
                salesInvoiceHeaderFooterTmp.ConstantSymbol = BankConstantSymbol::find(CustInvoiceJourSymbol::findByCustInvoiceJour(_custInvoiceJour.RecId).BankConstantSymbol).ConstantSymbol;
                break;

            case #isoPL:
                CustInvoiceJour_PL custInvoiceJourPl = CustInvoiceJour_PL::findByCustInvoiceJour(custInvoiceJour.RecId);

                if (SalesInvoiceReportBuyerAddress_PL_Flight::instance().isEnabled())
                {
                    salesInvoiceHeaderFooterTmp.BuyerName    = buyer.name();
                    salesInvoiceHeaderFooterTmp.BuyerAddress = buyer.address();

                    LogisticsAddressing buyerInvoiceAddress = this.getBuyerInvoiceAddress(buyer.Party);

                    if (buyerInvoiceAddress != '')
                        salesInvoiceHeaderFooterTmp.BuyerAddress = buyerInvoiceAddress;
                }

                if (custInvoiceJourPl.FiscalOrderAccount_PL)
                {
                    salesInvoiceHeaderFooterTmp.BuyerAddress = custInvoiceJourPl.fiscalOrderAddressing_PL();
                    salesInvoiceHeaderFooterTmp.BuyerName    = custInvoiceJourPl.fiscalOrderName_PL();
                }
                if (custInvoiceJourPl.FiscalInvoiceAccount_PL)
                {
                    salesInvoiceHeaderFooterTmp.InvoicingName    = custInvoiceJourPl.fiscalInvoiceName_PL();
                    salesInvoiceHeaderFooterTmp.InvoiceAccount   = custInvoiceJourPl.FiscalInvoiceAccount_PL;
                    salesInvoiceHeaderFooterTmp.InvoicingAddress = custInvoiceJourPl.fiscalInvoiceAddressing_PL();
                }
                salesInvoiceHeaderFooterTmp.VatDueDate_W = _custInvoiceJour.vatDueDate_W();
                CustInvoiceDuplicateTable_W custInvoiceDuplicateTable = CustInvoiceDuplicateTable_W::find(custInvoiceDuplicateTableRecId);
                salesInvoiceHeaderFooterTmp.DuplicateDate = custInvoiceDuplicateTable.DuplicateDate;
                salesInvoiceHeaderFooterTmp.DuplicateNum = custInvoiceDuplicateTable.DuplicateNum;
                break;

            case #isoLT:
                salesInvoiceHeaderFooterTmp.BuyerEnterpriseCode = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceLinesRelatedInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates additional information related to invoice line.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A record in the <c>CustInvoiceJour</c> table.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// A record in the <c>CustInvoiceTrans</c> table.
    /// </param>
    /// <returns>
    /// true if invoice line information have been inserted alongside other related data; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method will be overridden in the sub class to generate any additional information needed for
    /// the <c>CustInvoiceTrans</c> record.
    /// </remarks>
    public boolean generateInvoiceLinesRelatedInformation(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        boolean isRowInserted = false;

        // Reset this flag to false so that the inventory dimensions like size, color etc are not
        // always visible in the report.
        isInventDimVisible = false;

        // Determine whether the dimensions should be visible in the report.
        this.sendInventDimLine(_custInvoiceTrans);

        this.loadCustPackingSlipTrans(_custInvoiceJour, _custInvoiceTrans);

        if (!hasCustPackingSlipTrans)
        {
            // Insert the cust invoice transactions only if there is no packing slip transaction
            // because along with packing slip transaction,the invoice transactions are also inserted.
            this.insertIntoSalesInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, null, null, null
                // <GEECZ>
                , null
                // </GEECZ>
                );

            isRowInserted = true;
        }
        else
        {
            // Insert packing slip transaction along with invoice transactions.
            this.printCustPackingSlipTrans(_custInvoiceJour, _custInvoiceTrans);
            isRowInserted = true;
        }

        return isRowInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceRelatedInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates additional information related to the invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A record in the <c>CustInvoiceJour</c> table.
    /// </param>
    /// <remarks>
    /// This method will be overridden in the sub class to generate any additional information needed for
    /// the <c>CustInvoiceJour</c> record.
    /// </remarks>
    public void generateInvoiceRelatedInformation(CustInvoiceJour _custInvoiceJour)
    {
        this.printBackorders(custInvoiceJour);

        this.packagingMaterialWeights(_custInvoiceJour);

        // <GIN>
        if (isoCountryCode == #isoIN)
        {
            if (TaxParameters::checkTaxParameters_IN())
            {
                select firstonly salesLineRegNumbers
                    where salesLineRegNumbers.SalesId == custInvoiceJour.SalesId;
            }
            this.insertDataInSalesInvoiceTmp_IN(_custInvoiceJour);
        }
        // </GIN>

        // <GEEPL>
        if (isoCountryCode == #isoPL)
        {
            this.setSalesInvoicePackageDetail(_custInvoiceJour);
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommodityCode_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the commodity code.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// The records of <c>CustInvoiceTrans</c> table
    /// </param>
    /// <returns>
    /// The commodity code.
    /// </returns>
    private TaxInventVATCommodityCodeId_IN getCommodityCode_IN(CustInvoiceTrans _custInvoiceTrans)
    {
        TaxInventVATCommodityCode_IN taxInventVATCommodityCode_IN
                    = TaxInventVATCommodityCode_IN::findFromItemState(_custInvoiceTrans.ItemId,
                        LogisticsLocationEntity::location2PostalAddress(DirParty::primaryPostalAddressLocationRecId(this.parmCompanyInfo().RecId)).State);

        return taxInventVATCommodityCode_IN.CommodityCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = this.parmDataContract() as SalesInvoiceContract;
        formLetterRecId = contract.parmFormLetterRecordId();
        taxInvoiceItemType = contract.parmTaxInvoiceItemType();
        isTaxInvoice = contract.parmIsTaxInvoice();

        // <GTH>
        isUnrealizedVATEnabled = TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled();
        // </GTH>

        ledgerJournalTrans = LedgerJournalTrans::findRecId(contract.parmledgerJournalTransRecordId(), false);
        this.parmPrintCopyOriginal(contract.parmPrintCopyOriginal());
        this.parmCustInvoiceJour(CustInvoiceJour::findRecId(contract.parmRecordId()));

        // <GTH>
        if (isUnrealizedVATEnabled)
        {
            custInvoiceJourAdjustment = CustInvoiceJourAdjustment::findRecId(contract.parmAdjustmentRecId_TH());
        }

        if (isUnrealizedVATEnabled
            && (contract.parmProdType() != TaxUnrealizedDocuProdType::All))
        {
            documentPrintHeader = contract.parmPrintHeader();
            this.setIsSalesInvoiceDP_TH(true);
            this.initItemTypeByProdType_TH(contract.parmProdType());
            this.updateCustInvoiceJour_TH();
        }
        // </GTH>

        // <GEEPL>
        if (isoCountryCode == #isoPL)
        {
            custInvoiceDuplicateTableRecId = contract.parmCustInvoiceDuplicateRecId();
        }
        // </GEEPL>
        this.unpackSalesFormLetter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceCount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the invoice count.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> buffer.
    /// </param>
    /// <returns>
    /// The count of records.
    /// </returns>
    public RefRecId getInvoiceCount_IN(CustInvoiceJour _custInvoiceJour)
    {
        SalesLine salesLineLoc;

        select count(RecId) from salesLineLoc
            where salesLineLoc.SalesId == _custInvoiceJour.SalesId;

        return salesLineLoc.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>SalesInvoiceHeaderFooterTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesInvoiceHeaderFooterTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesInvoiceHeaderFooterTmp))]
    public SalesInvoiceHeaderFooterTmp getSalesInvoiceHeaderFooterTmp()
    {
        select salesInvoiceHeaderFooterTmp where salesInvoiceHeaderFooterTmp.CreatedTransactionId == this.parmCreatedTransactionId();
        return salesInvoiceHeaderFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysDocuBrandDetailsRegular</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the full data from <c>SysDocuBrandDetailsRegular</c> table.
    /// </summary>
    /// <returns>
    /// The <c>SysDocuBrandDetailsRegular</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SysDocuBrandDetailsRegular))
    ]
    public SysDocuBrandDetailsRegular getSysDocuBrandDetailsRegular()
    {
        select docuBrandDetails where docuBrandDetails.CreatedTransactionId == this.parmCreatedTransactionId();
        return docuBrandDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>SalesInvoiceLocalizationTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesInvoiceLocalizationTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesInvoiceLocalizationTmp))]
    public SalesInvoiceLocalizationTmp getSalesInvoiceLocalizationTmp()
    {
        select salesInvoiceLocalizationTmp where salesInvoiceLocalizationTmp.CreatedTransactionId == this.parmCreatedTransactionId();
        return salesInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoicePaymentStubTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>SalesInvoicePaymentStubTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesInvoicePaymentStubTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesInvoicePaymentStubTmp))]
    public SalesInvoicePaymentStubTmp getSalesInvoicePaymentStubTmp()
    {
        select salesInvoicePaymentStubTmp where salesInvoicePaymentStubTmp.CreatedTransactionId == this.parmCreatedTransactionId();
        return salesInvoicePaymentStubTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets data from the <c>SalesInvoiceTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>SalesInvoiceTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesInvoiceTmp))]
    public SalesInvoiceTmp getSalesInvoiceTmp()
    {
        select salesInvoiceTmp where salesInvoiceTmp.CreatedTransactionId == this.parmCreatedTransactionId();
        return salesInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesInvoiceTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>SalesInvoiceTmp_IN</c> Temp Table.
    /// </summary>
    /// <returns>
    /// Data from <c>SalesInvoiceTmp_IN</c>.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(SalesInvoiceTmp_IN))]
    public SalesInvoiceTmp_IN getSalesInvoiceTmp_IN()
    {
        select salesInvoiceTmp_IN where salesInvoiceTmp_IN.CreatedTransactionId == this.parmCreatedTransactionId();
        return salesInvoiceTmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes required data before it starts to process the report.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that has the sales invoice header information.
    /// </param>
    /// <remarks>
    /// This method will initialize some variables which will be used during processing the report.
    /// </remarks>
    protected void init(CustInvoiceJour _custInvoiceJour)
    {
        super(_custInvoiceJour);

        if (_custInvoiceJour.creditNote())
        {
            isInvoiceCreditNote = true;
            formLetterRemarks = FormLetterRemarks::find(_custInvoiceJour.salesTable().LanguageId, FormTextType::SalesCreditNote);
        }
        else
        {
            formLetterRemarks = FormLetterRemarks::find(_custInvoiceJour.salesTable().LanguageId, FormTextType::SalesInvoice);
        }

        this.initInventDimData();
        
        if (CustInvoiceJourCacheTaxBalanceDPInitFlight::instance().isEnabled())
        {
            TmpTaxWorkTrans tmpTaxWorkTransObj = this.tmpTaxWorkTrans(_custInvoiceJour);
            
            cachedTaxableBalance = _custInvoiceJour.taxableBalance(tmpTaxWorkTransObj);
            cachedTaxableBalanceEuro = _custInvoiceJour.amountCur2Euro(cachedTaxableBalance);
            cachedTaxFreeBalance = _custInvoiceJour.netAmount() - cachedTaxableBalance - _custInvoiceJour.reverseChargeBalance(tmpTaxWorkTransObj);
            cachedTaxFreeBalanceEuro = _custInvoiceJour.amountCur2Euro(cachedTaxFreeBalance);
            cachedCashDiscEuro = _custInvoiceJour.amountCur2Euro(_custInvoiceJour.CashDisc);
        }
        else
        {
            cachedTaxableBalanceEuro = _custInvoiceJour.taxableBalanceEuro(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxFreeBalanceEuro = _custInvoiceJour.taxFreeBalanceEuro(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxableBalance = _custInvoiceJour.taxableBalance(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxFreeBalance = _custInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedCashDiscEuro = _custInvoiceJour.amountCur2Euro(_custInvoiceJour.CashDisc);
        }

        if (CustInvoiceOverrideLanguageRelatedFieldsFlight::instance().isEnabled() && _custInvoiceJour.salesTable().LanguageId != #emptyString)
        {
            this.overrideAddressAndPaymentCondition(_custInvoiceJour);
        }

        //<GEEU>
        if (conFind(#easternEuropeAll, isoCountryCode))
        {
            cachedTaxFreeBalanceMST = _custInvoiceJour.taxFreeBalanceMST(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedTaxableBalanceMST = _custInvoiceJour.taxableBalanceMST(this.tmpTaxWorkTrans(_custInvoiceJour));
            cachedEuroExchangeRate = this.getEuroExchangeRate(_custInvoiceJour);
            cachedNetAmountMST = _custInvoiceJour.netAmountMST();
        }
        //<GEEU>

        this.initGiro(_custInvoiceJour);

        cachedPackagingMaterialText = this.packagingMaterialText(_custInvoiceJour);
        cachedCashAccountingRegime_ES = CashAccountingRegime_ES::isEnabled(_custInvoiceJour.InvoiceDate);

        if (SalesInvoiceDPRemoveRedundantCustInvoiceJourFlight::instance().isEnabled())
        {
            this.cacheCustInvoiceJourInfo(_custInvoiceJour);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheCustInvoiceJourInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Caches the output of few methods to avoid multiple calls
    /// </summary>
    /// <param name = "_custInvoiceJour">The current customer invoice journal record.</param>
    private void cacheCustInvoiceJourInfo(CustInvoiceJour _custInvoiceJour)
    {
        cachedShowSepaNotification = this.showSepaNotification(_custInvoiceJour);

        if (ReverseChargeParameters_W::find().Enabled)
        {
            cachedReverseChargeAmountEuro = _custInvoiceJour.reverseChargeAmountEuro();
            cachedReverseChargeBalance = _custInvoiceJour.reverseChargeBalance();
            cachedReverseChargeBalanceEuro = _custInvoiceJour.amountCur2Euro(cachedReverseChargeBalance);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>initGiro</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes Giro related data.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A record in the <c>CustInvoiceJour</c> table.
    /// </param>
    protected void initGiro(CustInvoiceJour _custInvoiceJour)
    {
        moneyTransferSlip = PaymMoneyTransferSlip::construct(_custInvoiceJour.GiroType);

        this.populateMoneyTransferSlip(_custInvoiceJour);

        moneyTransferSlip.init(_custInvoiceJour.GiroType);
        if (_custInvoiceJour.GiroType == PaymentStub::ESR_red_bank ||
            _custInvoiceJour.GiroType == PaymentStub::ESR_orange)
        {
            moneyTransferSlip_CH.initOCRLine_CH(_custInvoiceJour);
        }
        else if (_custInvoiceJour.GiroType == PaymentStub::Finnish)
        {
            moneyTransferSlip_FI.initOCRLine_FI();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMoneyTransferSlip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populate payment slips to use in giro.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    ///     A record in the <c>CustInvoiceJour</c> table.
    /// </param>
    protected void populateMoneyTransferSlip(CustInvoiceJour _custInvoiceJour)
    {
        switch (_custInvoiceJour.GiroType)
        {
            case PaymentStub::BelSMS101:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00005, funcName());
                moneyTransferSlip_BE = new PaymMoneyTransferSlip_BE();
                break;

            case PaymentStub::BelSMS102:
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBE00005, funcName());
                moneyTransferSlip_BE = new PaymMoneyTransferSlip_BE();
                break;

            case PaymentStub::Finnish:
                moneyTransferSlip_FI = new PaymMoneyTransferSlip_FI();
                break;

            case PaymentStub::ESR_orange:
            case PaymentStub::ESR_red_bank:
                moneyTransferSlip_CH = moneyTransferSlip;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimension information.
    /// </summary>
    private void initInventDimData()
    {
        inventDimReport = this.initializeInventDimReport();
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());
        inventDimReport.initProductDimParmVisible();
        inventDimSetupProduct = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        this.addProductDimensionsToInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventDimReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an <c>InventDimCtrl_Rep_Sales</c> instance.
    /// </summary>
    /// <returns>
    /// The <c>InventDimCtrl_Rep_Sales</c> instance.
    /// </returns>
    protected InventDimCtrl_Rep_Sales initializeInventDimReport()
    {
        inventDimReport = InventDimCtrl_Rep_Sales::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Invoice);
        inventDimReport.parmDisableLabel(custFormLetterParameters.PrePrintLevelInvoice == PrePrintLevel::PrePrinted);

        return inventDimReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateCreditNoteSummaryLine_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>SalesInvoiceLocalizationTmp</c> table buffer with credit note summary information for the PL country context.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that has the sales invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name = "_correctiveInvoiceTrans_W">
    /// The <c>CustInvoiceTrans_W</c> record that has corrective invoice transaction information.
    /// </param>
    protected void populateCreditNoteSummaryLine_PL(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, CustInvoiceTrans_W _correctiveInvoiceTrans_W)
    {
        CustInvoiceTrans reverseInvoiceTrans;
        CustInvoiceTrans_W reverseInvoiceTrans_W;
        
        select firstonly Qty, DiscAmount, LineAmount, TaxAmount
                    from reverseInvoiceTrans
                    where reverseInvoiceTrans.SalesId == _custInvoiceTrans.SalesId
                exists join reverseInvoiceTrans_W
                    where reverseInvoiceTrans_W.CustInvoiceTrans == reverseInvoiceTrans.RecId
                       && reverseInvoiceTrans_W.CreditNoteInternalRef_W == _correctiveInvoiceTrans_W.CreditNoteInternalRef_W
                       && reverseInvoiceTrans_W.RefReturnInvoiceTrans_W;

        salesInvoiceLocalizationTmp.SummaryLine_PL = NoYes::Yes;
        salesInvoiceLocalizationTmp.JournalRecId = _custInvoiceJour.RecId;
        salesInvoiceLocalizationTmp.InvoiceId = _custInvoiceJour.InvoiceId;

        if (!lineNumberInserted)
        {
            lineNumber++;
            salesInvoiceLocalizationTmp.LineNumber = lineNumber;

            lineNumberInserted = true;
        }

        salesInvoiceLocalizationTmp.ItemId = _custInvoiceTrans.ItemId;
        salesInvoiceLocalizationTmp.PKWiUCode = this.getInvoiceLinePKWiU(_custInvoiceTrans);
        salesInvoiceLocalizationTmp.Qty = _custInvoiceTrans.Qty + reverseInvoiceTrans.Qty;

        salesInvoiceLocalizationTmp.SalesUnitTxt = this.getSalesUnitText(_custInvoiceTrans.SalesUnit, _custInvoiceJour.LanguageId);

        salesInvoiceLocalizationTmp.DiscountAmount = _custInvoiceTrans.DiscAmount + reverseInvoiceTrans.DiscAmount;
        salesInvoiceLocalizationTmp.LineAmount = _custInvoiceTrans.LineAmount + reverseInvoiceTrans.LineAmount;
        salesInvoiceLocalizationTmp.LineTaxAmount = _custInvoiceTrans.TaxAmount + reverseInvoiceTrans.TaxAmount;
        salesInvoiceLocalizationTmp.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;

        if (!salesInvoiceLocalizationTmp.TaxWriteCode &&
                    _custInvoiceTrans.TaxGroup &&
                    _custInvoiceTrans.TaxItemGroup)
        {
            salesInvoiceLocalizationTmp.TaxWriteCode = TaxTable::getTaxWriteCodeVat(_custInvoiceTrans.TaxGroup, _custInvoiceTrans.TaxItemGroup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCreditNoteSummaryLine_PL</Name>
				<Source><![CDATA[
    public void insertCreditNoteSummaryLine_PL(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        if (isoCountryCode == #isoPL &&
            isInvoiceCreditNote &&
            CustFormLetterParameters::isPrintCreditNoteLine_PL(custFormLetterParameters.PrintInvoiceCreditNoteLines_PL, CreditNoteReportLineType_PL::Summary))
        {
            CustInvoiceTrans_W correctiveInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();

            if (!correctiveInvoiceTrans_W.RefReturnInvoiceTrans_W && correctiveInvoiceTrans_W.CreditNoteInternalRef_W)
            {
                this.populateCreditNoteSummaryLine_PL(_custInvoiceJour, _custInvoiceTrans, correctiveInvoiceTrans_W);

                salesInvoiceLocalizationTmp.insert();
                salesInvoiceLocalizationTmp.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into <c>SalesInvoiceTmp_IN</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The record of <c>CustInvoiceJour</c> table.
    /// </param>
    protected void populateSalesInvoiceTmp_IN(CustInvoiceJour _custInvoiceJour)
    {
        TransTaxInformation transTaxInformation = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(salesLineRegNumbers);
        salesInvoiceTmp_IN.JournalRecId = _custInvoiceJour.RecId;
        taxInformation = TaxInformation_IN::find(transTaxInformation.TaxInformation);

        if (TaxParameters::isSalesTaxEnable_IN())
        {
            salesInvoiceTmp_IN.ShowCSTNumber = true;
            salesInvoiceTmp_IN.SalesTaxNumber = TaxRegistrationNumbers_IN::find(taxInformation.SalesTaxRegistrationNumber).RegistrationNumber;
        }

        if (TaxParameters::isVATEnable_IN())
        {
            salesInvoiceTmp_IN.ShowTINNumber = true;
            salesInvoiceTmp_IN.tinNumber = TaxRegistrationNumbers_IN::find(taxInformation.tin).RegistrationNumber;
        }

        if (TaxParameters::isServiceTaxEnable_IN())
        {
            salesInvoiceTmp_IN.ShowSTCNumber = true;
            salesInvoiceTmp_IN.stcNumber = TaxRegistrationNumbers_IN::find(taxInformation.stcRegistrationNumberTable).RegistrationNumber;
        }

        if (TaxParameters::isExciseEnable_IN())
        {
            salesInvoiceTmp_IN.showECCNumber = true;
            salesInvoiceTmp_IN.eccNumber = TaxRegistrationNumbers_IN::find(taxInformation.ManECCRegistrationNumberTable).RegistrationNumber;
            salesInvoiceTmp_IN.ExciseLTUCode = taxInformation.ExciseLTUCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataInSalesInvoiceTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into <c>SalesInvoiceTmp_IN</c> table.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The record of <c>CustInvoiceJour</c> table.
    /// </param>
    protected void insertDataInSalesInvoiceTmp_IN(CustInvoiceJour _custInvoiceJour)
    {
        this.populateSalesInvoiceTmp_IN(_custInvoiceJour);

        salesInvoiceTmp_IN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInvoicePaymentStubTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates Giro information into the <c>SalesInvoicePaymentStubTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// A <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <param name="_paymentIsScheduled">
    /// A boolean value to indicate if a payment has been scheduled.
    /// </param>
    protected void populateInvoicePaymentStubTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo, boolean _paymentIsScheduled)
    {
        salesInvoicePaymentStubTmp.JournalRecId = _custInvoiceJour.RecId;

        salesInvoicePaymentStubTmp.CompanyName = cachedCompanyInfoName;
        salesInvoicePaymentStubTmp.CompanyAddress = cachedCompanyInfoAddress;
        salesInvoicePaymentStubTmp.CompanyPhone = cachedCompanyInfoPhone;
        salesInvoicePaymentStubTmp.CompanyGiro = _companyInfo.Giro;
        salesInvoicePaymentStubTmp.InvoiceId = _custInvoiceJour.InvoiceId;
        salesInvoicePaymentStubTmp.InvoiceAccount = _custInvoiceJour.InvoiceAccount;
        salesInvoicePaymentStubTmp.InvoiceAmount = _custInvoiceJour.InvoiceAmount;
        salesInvoicePaymentStubTmp.RemainAmountToBePaid = _custInvoiceJour.InvoiceAmount - cachedPrepaidAmount;
        salesInvoicePaymentStubTmp.CustInvoiceJourDueDate = _custInvoiceJour.DueDate;

        salesInvoicePaymentStubTmp.GiroType = _custInvoiceJour.GiroType;
        switch (_custInvoiceJour.GiroType)
        {
            case PaymentStub::FIK751:
            case PaymentStub::FIK752:
                salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;
                salesInvoicePaymentStubTmp.InvoiceAddress = _custInvoiceJour.invoiceAccountAddress();
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals(_custInvoiceJour, _paymentIsScheduled);
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(_custInvoiceJour, _paymentIsScheduled);
                salesInvoicePaymentStubTmp.OcrField = this.ocrField(_custInvoiceJour);
                salesInvoicePaymentStubTmp.fiCreditorID_DK = this.fiCreditorId();
                break;

            case PaymentStub::BBS:
                salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;
                salesInvoicePaymentStubTmp.InvoiceAddress = _custInvoiceJour.invoiceAccountAddress();
                salesInvoicePaymentStubTmp.OcrField = this.ocrField(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.invoiceAmountDecimals(_custInvoiceJour, _paymentIsScheduled);
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.invoiceAmountNoDecimals(_custInvoiceJour, _paymentIsScheduled);
                salesInvoicePaymentStubTmp.AmountCheckId = this.amountCheckId(_custInvoiceJour);
                break;

            case PaymentStub::ESR_red_bank:
                salesInvoicePaymentStubTmp.BankGroupIdName_CH = this.bankGroupIdName_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.BankZipCode_CH = this.bankZipCode_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.Description_CH = "@SYS12128";
                salesInvoicePaymentStubTmp.PaymentRef1_CH = moneyTransferSlip_CH.ocr_paymentRef1();
                salesInvoicePaymentStubTmp.PaymentRef2_CH = moneyTransferSlip_CH.ocr_paymentRef2();
                salesInvoicePaymentStubTmp.BankAccountTable_AccountNum_CH = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                                this.bankAccountTable_AccountNum_CH(_custInvoiceJour) : "@AccountsReceivable:FiveAsterisk";
                salesInvoicePaymentStubTmp.BankAccountTable_Clearing_CH = this.bankAccountTable_Clearing_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.amountDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.PaymentId2_PaymentId3_CH = this.paymentId2_PaymentId3_CH();
                salesInvoicePaymentStubTmp.CustName_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).name();
                salesInvoicePaymentStubTmp.CustAddress_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).postalAddress().Address;
                salesInvoicePaymentStubTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                salesInvoicePaymentStubTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                salesInvoicePaymentStubTmp.AccountNo2_CH = this.accountNo2_CH();
                break;

            case PaymentStub::ESR_orange:
                salesInvoicePaymentStubTmp.InvoiceAmountNoDecimals = this.amountNoDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.InvoiceAmountDecimals = this.amountDecimals_CH(_custInvoiceJour);
                salesInvoicePaymentStubTmp.CurrencyCodeISO_CH = this.currencyCodeISO_CH();
                salesInvoicePaymentStubTmp.AccountNo1_CH = moneyTransferSlip_CH.ocr_AccountNo1();
                salesInvoicePaymentStubTmp.PaymentId2_PaymentId3_CH = this.paymentId2_PaymentId3_CH();
                salesInvoicePaymentStubTmp.CustName_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).name();
                salesInvoicePaymentStubTmp.CustAddress_CH = CustTable::find(_custInvoiceJour.InvoiceAccount).postalAddress().Address;
                salesInvoicePaymentStubTmp.LayoutCode_CH = moneyTransferSlip_CH.layoutCode();
                salesInvoicePaymentStubTmp.OcrLine_CH = moneyTransferSlip_CH.ocrLine();
                break;

            case PaymentStub::Finnish:
                salesInvoicePaymentStubTmp.AccountNum1_FI = this.accountNum1_FI();
                salesInvoicePaymentStubTmp.AccountNum2_FI = this.accountNum2_FI();
                salesInvoicePaymentStubTmp.AccountNum3_FI = this.accountNum3_FI();
                salesInvoicePaymentStubTmp.AccountNum4_FI = this.accountNum4_FI();
                salesInvoicePaymentStubTmp.AccountNum5_FI = this.accountNum5_FI();
                salesInvoicePaymentStubTmp.AccountNum6_FI = this.accountNum6_FI();
                salesInvoicePaymentStubTmp.InvoiceName = cachedInvoicingName;
                salesInvoicePaymentStubTmp.InvoiceAddress = _custInvoiceJour.invoiceAccountAddress();
                salesInvoicePaymentStubTmp.InvoiceReferenceNumberFI = _custInvoiceJour.invoiceReferenceNumberFI();
                salesInvoicePaymentStubTmp.OcrLine_FI = this.ocrLine_FI(_custInvoiceJour);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGiroInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the Giro information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// A <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <param name="_paymentIsScheduled">
    /// A boolean value to indicate if a payment has been scheduled.
    /// </param>
    protected void insertGiroInformation(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo, boolean _paymentIsScheduled)
    {
        // GIRO: Remove this block of code when GIRO no longer prints as a separate report
        if (GiroReportController::needGiroReport(_custInvoiceJour.GiroType) && !isPaymentStubRecordInserted)
        {
            this.populateInvoicePaymentStubTmp(_custInvoiceJour, _companyInfo, _paymentIsScheduled);
            salesInvoicePaymentStubTmp.insert();
            isPaymentStubRecordInserted = true;

            GiroReportTmp::populate(this.parmUserConnection(), salesInvoicePaymentStubTmp, salesInvoicePaymentStubTmp.JournalRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the invoice header information into the <c>SalesInvoiceHeaderFooterTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice header information into the <c>SalesInvoiceHeaderFooterTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void populateSalesInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        // <GTH>
        Label label;
        // </GTH>

        salesInvoiceHeaderFooterTmp.CompanyRegNum = _companyInfo.RegNum;
        salesInvoiceHeaderFooterTmp.SalesAdministrator = cachedSalesAdministratorName;
        salesInvoiceHeaderFooterTmp.SalesAdministratorPhone = cachedSalesAdministratorPhone;
        salesInvoiceHeaderFooterTmp.SalesAdministratorEmail = cachedSalesAdministratorEmail;

        if (custFormLetterParameters.PrePrintLevelInvoice == PrePrintLevel::BlankPaper && custFormLetterParameters.PrintInvoiceVATNum)
        {
            salesInvoiceHeaderFooterTmp.ShowCompanyVATNum = true;
        }

        salesInvoiceHeaderFooterTmp.JournalRecId = _custInvoiceJour.RecId;
        salesInvoiceHeaderFooterTmp.InvoiceDate = _custInvoiceJour.InvoiceDate;
        salesInvoiceHeaderFooterTmp.DocumentDate = _custInvoiceJour.DocumentDate;

        salesInvoiceHeaderFooterTmp.CompanyCurrencyCode = Ledger::accountingCurrency();

        if (this.mustPopulateCompanyInfoOnFooter(_custInvoiceJour))
        {
            salesInvoiceHeaderFooterTmp.CompanyName = cachedCompanyInfoName;
            salesInvoiceHeaderFooterTmp.CompanyAddress = cachedCompanyInfoAddress;
            salesInvoiceHeaderFooterTmp.CompanyPhone = cachedCompanyInfoPhone;
            salesInvoiceHeaderFooterTmp.CompanyTeleFax = cachedCompanyInfoTeleFax;
            salesInvoiceHeaderFooterTmp.CompanyCoRegNum = _companyInfo.CoRegNum;
            salesInvoiceHeaderFooterTmp.CompanyVATNum = TaxTransactionTaxIDHelper::getTaxID(
                _custInvoiceJour.TableId,
                _custInvoiceJour.RecId,
                _custInvoiceJour.InvoiceDate).getLegalEntityTaxID();

            if (isoCountryCode == #isoLT)
            {
                salesInvoiceHeaderFooterTmp.CompanyEnterpriseCode = _companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
            }
            salesInvoiceHeaderFooterTmp.CompanyLogo = companyLogo;
            salesInvoiceHeaderFooterTmp.CompanyDebitDirectId = BankAccountTable::findByCompany(_companyInfo.DataArea, _companyInfo.Bank).DebitDirectId;
        }

        if (_companyInfo.PrintEnterpriseregister_NO)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
            salesInvoiceHeaderFooterTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                                         _custInvoiceJour.LanguageId ? _custInvoiceJour.LanguageId : infolog.language());
        }

        salesInvoiceHeaderFooterTmp.InvoicingName = _custInvoiceJour.InvoicingName;
        salesInvoiceHeaderFooterTmp.InvoicingAddress = cachedInvoicingAddress;
        salesInvoiceHeaderFooterTmp.ContactPersonName = cachedContactPersonName;
        
        salesInvoiceHeaderFooterTmp.VatNum = TaxTransactionTaxIDHelper::getTaxID(
            _custInvoiceJour.TableId,
            _custInvoiceJour.RecId,
            _custInvoiceJour.InvoiceDate).getCounterPartyTaxID();

        salesInvoiceHeaderFooterTmp.TaxLicenseNum = cachedTaxLicenseNum;
        salesInvoiceHeaderFooterTmp.EnterpriseNumber = _custInvoiceJour.EnterpriseNumber;
        salesInvoiceHeaderFooterTmp.NotesLine_FR = this.overdueFineTxt_FR();

        // <GTH>
        if (isUnrealizedVATEnabled)
        {
            DirPartyLocation dirPartyLocation = DirPartyLocation::findByPartyLocation(
                _custInvoiceJour.custTable_InvoiceAccount().Party,
                LogisticsPostalAddress::getLocation(_custInvoiceJour.InvoicePostalAddress));

            TaxInformation_TH taxInformation_TH = TaxInformation_TH::find(dirPartyLocation.Location);

            salesInvoiceHeaderFooterTmp.InvoiceTxt = this.invoiceTxt_TH(_custInvoiceJour);
            salesInvoiceHeaderFooterTmp.InvoiceTxtNote_TH = SalesInvoiceDPBase::invoiceTxtNote_TH(_custInvoiceJour, custInvoiceJourAdjustment, PrintCopyOriginal);
            salesInvoiceHeaderFooterTmp.CompanyBranch_TH = TaxBranch::findByLocationId(
                DirPartyLocation::findPrimaryPartyLocation(_companyInfo.RecId).Location).Code;
            salesInvoiceHeaderFooterTmp.InvoiceTaxNatureOfAddress_TH = taxInformation_TH.TaxNatureOfAddress;

            if (custInvoiceJourAdjustment)
            {
                salesInvoiceHeaderFooterTmp.initFromCustInvoiceJourAdjustment_TH(custInvoiceJourAdjustment);
            }
            else
            {
                salesInvoiceHeaderFooterTmp.InvoiceBranch_TH = taxInformation_TH.BranchNumber;
                salesInvoiceHeaderFooterTmp.InvoiceBranchName_TH = LogisticsLocation::find(taxInformation_TH.LogisticsLocation).Description;
                salesInvoiceHeaderFooterTmp.InvoiceTaxRegNumber_TH = TaxRegistration::getTaxRegistrationFromInvoiceJour_TH(_custInvoiceJour).RegistrationNumber;
                salesInvoiceHeaderFooterTmp.CustomerPhone_TH = _custInvoiceJour.custTable_InvoiceAccount().phone();
                salesInvoiceHeaderFooterTmp.CustomerTeleFax_TH = _custInvoiceJour.custTable_InvoiceAccount().telefax();
            }
        }
        else
        {
            salesInvoiceHeaderFooterTmp.InvoiceTxt = this.invoiceTxt(_custInvoiceJour);
        }
        // </GTH>
        salesInvoiceHeaderFooterTmp.SalesId = _custInvoiceJour.SalesId;
        salesInvoiceHeaderFooterTmp.PurchaseOrder = _custInvoiceJour.PurchaseOrder;
        salesInvoiceHeaderFooterTmp.CustomerRef = _custInvoiceJour.CustomerRef;
        salesInvoiceHeaderFooterTmp.PaymentCondition = cachedPaymentCondition;
        salesInvoiceHeaderFooterTmp.InvoiceAccount = _custInvoiceJour.InvoiceAccount;
        salesInvoiceHeaderFooterTmp.PrintFreeTextInvoiceVATNum = custFormLetterParameters.PrintInvoiceVATNum;
        salesInvoiceHeaderFooterTmp.CompanyGiro = companyInfo.Giro;
        salesInvoiceHeaderFooterTmp.CompanyEnterpriseNumber = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, _custInvoiceJour.InvoiceDate);
        salesInvoiceHeaderFooterTmp.Listcode = _custInvoiceJour.Listcode;
        salesInvoiceHeaderFooterTmp.CustInvoiceRefNum_FI = custParameters.CustInvoiceRefNum_FI;
        salesInvoiceHeaderFooterTmp.InvoiceReferenceNumber = _custInvoiceJour.invoiceReferenceNumberFI();
        salesInvoiceHeaderFooterTmp.InvoiceDate = _custInvoiceJour.InvoiceDate;
        salesInvoiceHeaderFooterTmp.SalesId = _custInvoiceJour.SalesId;
        salesInvoiceHeaderFooterTmp.PaymentReference = this.paymentReference(_custInvoiceJour);
        salesInvoiceHeaderFooterTmp.IsPaymIdVisible = (isoCountryCode == #isoNO);
        salesInvoiceHeaderFooterTmp.PaymId = _custInvoiceJour.getPaymentId(isoCountryCode);
        salesInvoiceHeaderFooterTmp.CorrectedInvoiceId = correctedInvoiceId;
        salesInvoiceHeaderFooterTmp.CorrectiveReasonHeader = correctiveReason_header;
        salesInvoiceHeaderFooterTmp.OriginalInvoiceAmount = originalInvoiceAmount;
        salesInvoiceHeaderFooterTmp.OriginalVatAmount = originalInvoiceVATAmount;
        salesInvoiceHeaderFooterTmp.IsInvoiceCreditNote = this.isInvoiceCreditNote;
        
        // <GIN>
        if (isoCountryCode == #isoIN && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            salesInvoiceHeaderFooterTmp.SerialNumOfInvoice = TaxGSTInvoiceHelper_IN::findTaxDocumentExtension(_custInvoiceJour).TaxTransactionId;
        }
        // </GIN>

        // <GSA>
        salesInvoiceHeaderFooterTmp.LanguageId = _custInvoiceJour.LanguageId;
        // </GSA>
        // <GEEU>
        if (conFind(#easternEuropeAll, isoCountryCode))
        {
            this.generateInvoiceHeaderLocalizationData(_custInvoiceJour, _companyInfo);
        }
        // </GEEU>

        // <GMY>
        if (isoCountryCode == #isoMY)
        {
            salesInvoiceHeaderFooterTmp.InvoiceType_MY = _custInvoiceJour.custInvoiceJour_W().InvoiceType_MY;

            if (isGSTInvoice)
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00002, funcName());
                salesInvoiceHeaderFooterTmp.CompanyCoRegNum = TaxGSTHelper_MY::getGSTRegistrationNumber(_custInvoiceJour.InvoiceDate);
                salesInvoiceHeaderFooterTmp.GSTReasonCode_MY = debitCreditNoteReasonCode_MY;

                if (reliefGroupRecId)
                {
                    salesInvoiceHeaderFooterTmp.GSTReliefClause_MY = this.getGSTReliefClause_MY(_custInvoiceJour);
                }
            }
        }
        // </GMY>

        if (isoCountryCode == #isoFR)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00003, funcName());

            salesInvoiceHeaderFooterTmp.CompanyRegComFR             = _companyInfo.CompanyRegComFR;
            salesInvoiceHeaderFooterTmp.CompanyLegalFormFR          = _companyInfo.LegalFormFR;
            salesInvoiceHeaderFooterTmp.CompanyIdNAF                = CompanyNAFCode::find(_companyInfo.CompanyNAFCode).CompanyIdNAF;
            salesInvoiceHeaderFooterTmp.CompanyInitialCapital_FR    = _companyInfo.CompanyInitialCapital_FR;
        }

        if (isoCountryCode == #isoJP)
        {
            CustInvoiceQualifiedInvoiceIssuerParameters custInvoiceQualifiedInvoiceIssuerParameters = new CustInvoiceQualifiedInvoiceIssuerParameters(InvoiceType_JP::SalesOrderInvoice);
            salesInvoiceHeaderFooterTmp.ShowQIINum = custInvoiceQualifiedInvoiceIssuerParameters.parmShowQIINumber();
            salesInvoiceHeaderFooterTmp.ShowQIILabel = custInvoiceQualifiedInvoiceIssuerParameters.parmShowQIILabel();
            salesInvoiceHeaderFooterTmp.QIINum = custInvoiceQualifiedInvoiceIssuerParameters.parmQIINumber();
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesInvoiceHeaderFooterTmp.MCRDlvMode = this.MCRDeliveryMode();
            salesInvoiceHeaderFooterTmp.MCRDlvTerm = _custInvoiceJour.DlvTerm;
        }

        // set Document Branding Header;
        this.setSysDocuBrandDetails(_custInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPopulateCompanyInfoOnFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if company values are needed.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record to use.
    /// </param>
    /// <returns>
    /// true if company values are needed; otherwise, false.
    /// </returns>
    protected boolean mustPopulateCompanyInfoOnFooter(CustInvoiceJour _custInvoiceJour)
    {
        return (_custInvoiceJour.ShipCarrierBlindShipment == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoSalesInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// The <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice header information into the <c>SalesInvoiceHeaderFooterTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void insertIntoSalesInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        this.populateSalesInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);

        salesInvoiceHeaderFooterTmp.insert();
        salesInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSysDocuBrandDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SysDocuBrandDetailsRegular</c> table with header details.
    /// </summary>
    [Wrappable(true)]
    protected final void setSysDocuBrandDetails(CustInvoiceJour _custInvoiceJour)
    {
        SysDocuBrandDetailsRegular bufferTable = SysDocuBrandDetails::getDocuBrandDetailsRegular(this);
        docuBrandDetails.clear();
        docuBrandDetails.setConnection(this.parmUserConnection());
        docuBrandDetails.data(bufferTable.data());
        BankAccountTable bankAccountTable = BankAccountTable::find(LedgerDynamicAccountHelper::getAccountNumberFromDynamicAccount(CustPaymModeTable::find(_custInvoiceJour.paymMode()).PaymentLedgerDimension));
        docuBrandDetails.BankAccountNum = bankAccountTable.AccountNum;
        docuBrandDetails.BankSortCode = bankAccountTable.BankSortCode;
        docuBrandDetails.PaymDueDate = _custInvoiceJour.custTrans().DueDate;
        docuBrandDetails.PaymTermDescription = PaymTerm::find(_custInvoiceJour.Payment).Description;
        docuBrandDetails.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the invoice detail information into the <c>SalesInvoiceLocalizationTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice details information into the <c>SalesInvoiceLocalizationTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void populateSalesInvoiceLocalizationTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine = null,
        CustTrans _prepaymentCustTrans = null,
        TaxTrans _prepaymentTaxTrans = null)
    {
        CustInvoiceTrans_W custInvoiceTrans_W;
        // <GEEPL>
        boolean isPrintInvoiceCreditNoteLine;
        // </GEEPL>

        boolean taxPrintTaxFreeBalance = custFormLetterParameters.TaxPrintTaxFreeBalance;

        salesInvoiceLocalizationTmp.PrePrintLevel = custFormLetterParameters.PrePrintLevelInvoice;
        salesInvoiceLocalizationTmp.ShowPackingMaterial = showPackingMaterial;
        salesInvoiceLocalizationTmp.ShowCustPackingSlipTrans = showCustPackingSlipTrans;
        salesInvoiceLocalizationTmp.IsTaxAmountMSTVisible = this.parmIsTaxAmountMSTVisible();
        salesInvoiceLocalizationTmp.ShowTotals = !taxPrintTaxFreeBalance;
        salesInvoiceLocalizationTmp.ShowTotalsTaxBalances = taxPrintTaxFreeBalance;
        salesInvoiceLocalizationTmp.ShowPayment = !isInvoiceCreditNote && !_custInvoiceJour.PaymentSched;
        salesInvoiceLocalizationTmp.ShowTotalsEuro = cachedPrintEuroTotals && !taxPrintTaxFreeBalance;
        salesInvoiceLocalizationTmp.ShowTotalsTaxBalancesEuro = cachedPrintEuroTotals && taxPrintTaxFreeBalance;

        Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();

            FieldId flagFieldId = SalesInvoiceLocalizationTmp::productDimensionFieldId(productDim);
            salesInvoiceLocalizationTmp.(flagFieldId) = inventDimReport.showField(productDim.parmInventDimFieldId());
        }

        salesInvoiceLocalizationTmp.PrintEuroTotals = cachedPrintEuroTotals;
        salesInvoiceLocalizationTmp.ShowCashDiscOnInvoiceControls = this.showCashDiscOnInvoice();

        if (SalesInvoiceDPRemoveRedundantCustInvoiceJourFlight::instance().isEnabled())
        {
            salesInvoiceLocalizationTmp.ShowSepaNotification = cachedShowSepaNotification;
        }
        else
        {
            salesInvoiceLocalizationTmp.ShowSepaNotification = this.showSepaNotification(_custInvoiceJour);
        }

        //Invoice
        salesInvoiceLocalizationTmp.JournalRecId = _custInvoiceJour.RecId;
        salesInvoiceLocalizationTmp.InvoiceId = _custInvoiceJour.InvoiceId;
        salesInvoiceLocalizationTmp.CustomerRef = _custInvoiceJour.CustomerRef;
        salesInvoiceLocalizationTmp.PaymentReference = this.paymentReference(_custInvoiceJour);
        salesInvoiceLocalizationTmp.CorrectiveReasonHeader = correctiveReason_header;

        if (_custInvoiceTrans)
        {
            salesInvoiceLocalizationTmp.LineHeader = this.parmLineHeader();
        }

        salesInvoiceLocalizationTmp.PriceIncludeTax = _custInvoiceJour.InclTax;

        //custInvoiceTrans
        if (isoCountryCode == #isoHU || isoCountryCode == #isoPL)
        {
            custInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();

            salesInvoiceLocalizationTmp.LineSign = isInvoiceCreditNote ?
                (custInvoiceTrans_W.RefReturnInvoiceTrans_W ? '-': '+') : '';

            // <GEEPL>
            if (isoCountryCode == #isoPL)
            {
                if (!custInvoiceTrans_W.RefReturnInvoiceTrans_W && !custInvoiceTrans_W.CreditNoteInternalRef_W)
                {
                    lineNumber++;
                    salesInvoiceLocalizationTmp.LineNumber = lineNumber;
                }
                else
                {
                    if (custInvoiceTrans_W.RefReturnInvoiceTrans_W)
                    {
                        lineNumberInserted = false;
                    }

                    isPrintInvoiceCreditNoteLine = CustFormLetterParameters::isPrintCreditNoteLine_PL(
                        custFormLetterParameters.PrintInvoiceCreditNoteLines_PL,
                        custInvoiceTrans_W.RefReturnInvoiceTrans_W ? CreditNoteReportLineType_PL::Reverse : CreditNoteReportLineType_PL::Corrective);

                    if (!lineNumberInserted && isPrintInvoiceCreditNoteLine)
                    {
                        lineNumber++;
                        salesInvoiceLocalizationTmp.LineNumber = lineNumber;

                        lineNumberInserted = true;
                    }
                }
            }
            else if (custInvoiceTrans_W.RefReturnInvoiceTrans_W || !isInvoiceCreditNote)
            // </GEEPL>
            {
                // If the line is not a credit note line or a correction line, shows the line number.
                lineNumber = lineNumber + 1;
                salesInvoiceLocalizationTmp.LineNumber = lineNumber;
            }

            // <GEEPL>
            if (isoCountryCode == #isoPL && custInvoiceTrans_W.RefReturnInvoiceTrans_W)
            {
                salesInvoiceLocalizationTmp.LineTaxAmount = -_custInvoiceTrans.TaxAmount;
            }
            else
            {
                // </GEEPL>
                salesInvoiceLocalizationTmp.LineTaxAmount = _custInvoiceTrans.TaxAmount;
                // <GEEPL>
            }
            // </GEEPL>

            if (isoCountryCode == #isoHU)
            {
                if (_custInvoiceTrans)
                {
                    salesInvoiceLocalizationTmp.ShipmentDate = _custInvoiceTrans.salesLine().deliveryDate();
                }

                salesInvoiceLocalizationTmp.IntrastatCode = this.parmIntrastatCode();
                salesInvoiceLocalizationTmp.SalesTaxExchangeRate = this.getSalesTaxTransactionExchangeRate(_custInvoiceJour).SalesTaxExchangeRate;
                salesInvoiceLocalizationTmp.LineTaxAmount -= this.getExcludedTaxAmount(_custInvoiceJour.LedgerVoucher, _custInvoiceTrans);
            }
            else
            {
                salesInvoiceLocalizationTmp.pkWiUCode = this.getInvoiceLinePKWiU(_custInvoiceTrans);
            }
        }

        // fetch SalesTaxExchangeRate from TaxSpecificExchangeRate Table if the TaxSpecificExchangeRateFeature is enabled.
        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Sales))
        {
            // find sales tax exchangeRateDisplayFactor for displaying salesTaxExchangeRate on Reports
            TaxParameters taxParameters = TaxParameters::find();
            CurrencyCode accountingCurrency = Ledger::accountingCurrency();
            ExchangeRateDisplayFactor exchangeRateDisplayFactor = ExchangeRateCurrencyPair::getExchangeRateDisplayFactor(
                _custInvoiceJour.CurrencyCode,
                accountingCurrency,
                taxParameters.SalesTaxReceivableExchangeRateType,
                true);

            // fetch SalesTaxExchangeRate from TaxSpecificExchangeRate Table
            CurrencyExchangeRate taxSpecificExchangeRate = this.getTaxSpecificExchangeRate(_custInvoiceJour);
            
            // display on SO report
            if (!accountingCurrency || !exchangeRateDisplayFactor)
            {
                salesInvoiceLocalizationTmp.SalesTaxExchangeRate = taxSpecificExchangeRate;
            }
            else
            {
                salesInvoiceLocalizationTmp.SalesTaxExchangeRate = CurrencyEuroDenomination::displayStoredExchangeRate_Static(taxSpecificExchangeRate, exchangeRateDisplayFactor);
            }
        }

        salesInvoiceLocalizationTmp.Name = _custInvoiceTrans.Name;
        salesInvoiceLocalizationTmp.SalesPrice = _custInvoiceTrans.SalesPrice;
        salesInvoiceLocalizationTmp.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;

        // <GEEPL>
        if (isoCountryCode == #isoPL && custInvoiceTrans_W.RefReturnInvoiceTrans_W)
        {
            salesInvoiceLocalizationTmp.Qty = -_custInvoiceTrans.Qty;
            salesInvoiceLocalizationTmp.LineAmount = -_custInvoiceTrans.LineAmount;
        }
        else
        {
            // </GEEPL>
            salesInvoiceLocalizationTmp.Qty = _custInvoiceTrans.Qty;
            salesInvoiceLocalizationTmp.LineAmount = _custInvoiceTrans.LineAmount;
            // <GEEPL>
        }
        // </GEEPL>

        if (isoCountryCode == #isoPL)
        {
            if (!_custInvoiceTrans.TaxWriteCode &&
                _custInvoiceTrans.TaxGroup &&
                _custInvoiceTrans.TaxItemGroup)
            {
                salesInvoiceLocalizationTmp.TaxWriteCode = TaxTable::getTaxWriteCodeVat(_custInvoiceTrans.TaxGroup, _custInvoiceTrans.TaxItemGroup);
            }

            salesInvoiceLocalizationTmp.PreviousRunningTotal = this.parmPreviousRunningTotal();
            if (!salesInvoiceLocalizationTmp.LineTaxAmount && _custInvoiceJour.isProforma())
            {
                salesInvoiceLocalizationTmp.LineTaxAmount = Tax::calcTaxAmount(_custInvoiceTrans.TaxGroup,
                    _custInvoiceTrans.TaxItemGroup,
                    _custInvoiceJour.InvoiceDate,
                    (_custInvoiceTrans.CurrencyCode ? _custInvoiceTrans.CurrencyCode : _custInvoiceJour.CurrencyCode),
                    _custInvoiceTrans.LineAmount,
                    TaxModuleType::SalesInvoice);
            }
        }

        salesInvoiceLocalizationTmp.SalesUnitTxt = this.getSalesUnitText(_custInvoiceTrans.SalesUnit, _custInvoiceJour.LanguageId);

        salesInvoiceLocalizationTmp.PdsEnabled = (#PdsEnabled ? NoYes::Yes : NoYes::No);

        if (salesInvoiceLocalizationTmp.PdsEnabled)
        {
            salesInvoiceLocalizationTmp.PdsCWQty = _custInvoiceTrans.PdsCWQty;
            salesInvoiceLocalizationTmp.PdsCWUnitId = _custInvoiceTrans.pdsCWUnitId();
        }

        if (originalInvoiceIds != '')
        {
            // If invoice line is credit note, get the reason comment.
            ReasonComment lineReasonComment = ReasonTableRef::find(_custInvoiceTrans.ReasonRefRecId).ReasonComment;
            if (lineReasonComment != correctiveReason_header)
            {
                // Only shows the reason comment for the line if it is different from the reason comment of the header.
                salesInvoiceLocalizationTmp.CorrectiveReasonLines = lineReasonComment;
            }
        }
        else
        {
            salesInvoiceLocalizationTmp.CorrectiveReasonLines = correctiveReason_lines;
        }

        salesInvoiceLocalizationTmp.LineAmountInclTax = _custInvoiceTrans.LineAmount + _custInvoiceTrans.LineAmountTax ;
        salesInvoiceLocalizationTmp.DiscPercent = _custInvoiceTrans.DiscPercent;
        salesInvoiceLocalizationTmp.DiscountAmount = _custInvoiceTrans.DiscAmount;

        salesInvoiceLocalizationTmp.InvoiceAmount = _custInvoiceJour.InvoiceAmount;
        salesInvoiceLocalizationTmp.PrepaidAmount = cachedPrepaidAmount;
        salesInvoiceLocalizationTmp.RemainAmountToBePaid = _custInvoiceJour.InvoiceAmount - cachedPrepaidAmount;
        salesInvoiceLocalizationTmp.CustInvoiceJourCurrencyCode = _custInvoiceJour.CurrencyCode;
        salesInvoiceLocalizationTmp.InvoiceAmountEuro = cachedInvoiceAmountEuro;
        salesInvoiceLocalizationTmp.PrepaidAmountEuro = cachedPrepaidAmountEuro;
        salesInvoiceLocalizationTmp.RemainAmountToBePaidEuro = cachedRemainAmountToBePaidEuro;
        salesInvoiceLocalizationTmp.EuroCurrencyCode = Currency::findEuroCurrencyCode();

        salesInvoiceLocalizationTmp.SalesBalance = _custInvoiceJour.SalesBalance;
        salesInvoiceLocalizationTmp.EndDisc = _custInvoiceJour.EndDisc;
        salesInvoiceLocalizationTmp.SumMarkup = _custInvoiceJour.SumMarkup;
        salesInvoiceLocalizationTmp.SumTax = _custInvoiceJour.SumTax;
        salesInvoiceLocalizationTmp.InvoiceRoundOff = _custInvoiceJour.InvoiceRoundOff;

        salesInvoiceLocalizationTmp.SalesBalanceEuro = cachedSalesBalanceEuro;
        salesInvoiceLocalizationTmp.EndDiscEuro = cachedEndDiscEuro;
        salesInvoiceLocalizationTmp.SumMarkupEuro = cachedSumMarkupEuro;
        salesInvoiceLocalizationTmp.SumTaxEuro = cachedSumTaxEuro;

        salesInvoiceLocalizationTmp.InvoiceRoundOffEuro = cachedInvoiceRoundOffEuro;
        salesInvoiceLocalizationTmp.NetAmount = cachedNetAmount;
        salesInvoiceLocalizationTmp.NetAmountEuro = cachedNetAmountEuro;
        salesInvoiceLocalizationTmp.TaxableBalanceEuro = cachedTaxableBalanceEuro;
        salesInvoiceLocalizationTmp.TaxFreeBalanceEuro = cachedTaxFreeBalanceEuro;
        salesInvoiceLocalizationTmp.TaxableBalance = cachedTaxableBalance;
        salesInvoiceLocalizationTmp.TaxFreeBalance = cachedTaxFreeBalance;
        salesInvoiceLocalizationTmp.TaxFreeBalanceMST = cachedTaxFreeBalanceMST;
        salesInvoiceLocalizationTmp.TaxableBalanceMST = cachedTaxableBalanceMST;
        salesInvoiceLocalizationTmp.StandardCurrency = CompanyInfoHelper::standardCurrency();

        if (isoCountryCode == #isoPL && _custInvoiceJour.ExchRate > 0)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),_custInvoiceJour.CurrencyCode);
            salesInvoiceLocalizationTmp.ExchRate = exchangeRateHelper.displayStoredExchangeRate(_custInvoiceJour.ExchRate);
        }
        else
        {
            salesInvoiceLocalizationTmp.ExchRate = cachedExchRate;
        }

        salesInvoiceLocalizationTmp.euroExchangeRate = cachedEuroExchangeRate;
        salesInvoiceLocalizationTmp.SalesBalanceMST = _custInvoiceJour.SalesBalanceMST;
        salesInvoiceLocalizationTmp.SumTaxMST = _custInvoiceJour.SumTaxMST;

        salesInvoiceLocalizationTmp.CashDiscTxt_LanguageId = cachedCashDiscTxt_LanguageId;

        salesInvoiceLocalizationTmp.EndDiscMST = _custInvoiceJour.EndDiscMST;
        salesInvoiceLocalizationTmp.SumMarkupMST = _custInvoiceJour.SumMarkupMST;
        salesInvoiceLocalizationTmp.NetAmountMST = cachedNetAmountMST;
        salesInvoiceLocalizationTmp.InvoiceRoundOffMST = _custInvoiceJour.InvoiceRoundOffMST;
        salesInvoiceLocalizationTmp.InvoiceAmountMST = _custInvoiceJour.InvoiceAmountMST;

        salesInvoiceLocalizationTmp.CashDisc = _custInvoiceJour.CashDisc;

        salesInvoiceLocalizationTmp.ExternalItemId = FormLetter::journalExternalItemId(ModuleInventPurchSales::Sales, _custInvoiceTrans.ExternalItemId);
        salesInvoiceLocalizationTmp.InventDimPrint = this.printDimHistory(_custInvoiceTrans, _custInvoiceJour);

        salesInvoiceLocalizationTmp.HeaderNotes = cachedHeaderNotes;

        if (isoCountryCode == #isoLV)
        {
            salesInvoiceLocalizationTmp.AmountInWords = this.getNumDateInWordConverter(_custInvoiceJour).numeralsToCurrency(_custInvoiceJour.InvoiceAmount,
                                                                                                    _custInvoiceJour.CurrencyCode);
            salesInvoiceLocalizationTmp.SpecialFormattedPaymentDueDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custInvoiceJour.DueDate, false, true);
            salesInvoiceLocalizationTmp.AmountInWordsEUR = this.getNumDateInWordConverter(_custInvoiceJour).numeralsToCurrency(salesInvoiceLocalizationTmp.InvoiceAmountEuro,
                                                                                                    salesInvoiceLocalizationTmp.EuroCurrencyCode);
        }

        salesInvoiceLocalizationTmp.CustInvoiceJourDueDate = _custInvoiceJour.DueDate;

        if (isoCountryCode == #isoPL)
        {
            RNumDateInWordConverter dateInWordConverter = RNumDateInWordConverter::construct(_custInvoiceJour.LanguageId);

            salesInvoiceLocalizationTmp.AmountInWords = dateInWordConverter.numeralsToTxt(_custInvoiceJour.InvoiceAmount);
            salesInvoiceLocalizationTmp.AmountInWordsEUR = dateInWordConverter.numeralsToTxt(_custInvoiceJour.invoiceAmountEuro());

            if (!(dateInWordConverter is RNumDateInWordConverter_PL) && !(dateInWordConverter is RNumDateInWordConverter_HU))
            {
                salesInvoiceLocalizationTmp.AmountInWords += ' ' + RNumDateInWordConverter::getPennyAmountInWords(_custInvoiceJour.InvoiceAmount, salesInvoiceLocalizationTmp.AmountInWords);
                salesInvoiceLocalizationTmp.AmountInWordsEUR += ' ' + RNumDateInWordConverter::getPennyAmountInWords(_custInvoiceJour.invoiceAmountEuro(), salesInvoiceLocalizationTmp.AmountInWordsEUR);
            }

            salesInvoiceLocalizationTmp.AmountInWords += ' ' + Currency::find(_custInvoiceJour.CurrencyCode).CurrencyCodeISO;
            salesInvoiceLocalizationTmp.AmountInWordsEUR += ' ' + Currency::find(Currency::findEuroCurrencyCode()).CurrencyCodeISO;
        }

        salesInvoiceLocalizationTmp.ItemId = this.itemId(_custInvoiceTrans);

        //custPackingSlipTrans
        if (showCustPackingSlipTrans && custFormLetterParameters.PckSlpInfoOnInvoice)
        {
            salesInvoiceLocalizationTmp.PackingSlip = packingSlipDetails;
        }

        //inventDim
        if (isInventDimVisible)
        {
            salesInvoiceLocalizationTmp.InventDimFieldsMap::initAllDimensionsFrom(inventDim);
        }

        //custInvoiceBackOrderLine
        salesInvoiceLocalizationTmp.ShowBackorders = (backOrderName != #emptyString);

        if (salesInvoiceLocalizationTmp.ShowBackorders)
        {
            salesInvoiceLocalizationTmp.BackOrderLineItemId = backOrderItemId;
            salesInvoiceLocalizationTmp.BackOrderLineName = backOrderName;
            salesInvoiceLocalizationTmp.BackOrderLineQuantity = backOrderQuantity;
            salesInvoiceLocalizationTmp.BackOrderLineSalesUnit = backOrderSalesUnit;
            salesInvoiceLocalizationTmp.BackOrderConfirmedDeliveryDate = backOrderConfirmedDeliveryDate;
            salesInvoiceLocalizationTmp.ShowBackOrderConfirmedDeliveryDate = !(custFormletterParameters.TrackBackorderInvoice == BackorderTracking::OnlyBackorders);
        }

        //taxTrans
        if (_taxSpec)
        {
            if (custFormletterParameters.TaxSpecPrintLevel == TaxSpecPrintLevel::None && (isoCountryCode == #isoLT || isoCountryCode == #isoHU))
            {
                salesInvoiceLocalizationTmp.ShowTaxTrans = false;
            }
            else
            {
                salesInvoiceLocalizationTmp.ShowTaxTrans = true;
            }

            salesInvoiceLocalizationTmp.TaxCode = _taxSpec.taxCode();
            salesInvoiceLocalizationTmp.Amount = - amount;
            salesInvoiceLocalizationTmp.CashDiscAmount = -cashDiscAmountTax ;
            salesInvoiceLocalizationTmp.TaxBaseAmount = -_taxSpec.taxBaseAmount();
            salesInvoiceLocalizationTmp.TaxBaseAmountMST = -_taxSpec.taxBaseAmountMST();
            salesInvoiceLocalizationTmp.TaxAmount = -_taxSpec.taxAmount();
            salesInvoiceLocalizationTmp.TaxAmountMST = -_taxSpec.taxAmountMST();
            salesInvoiceLocalizationTmp.TaxExemptDescription = _taxSpec.taxExemptDescription();
            salesInvoiceLocalizationTmp.TaxBaseQty = -_taxSpec.taxBaseQty();
            salesInvoiceLocalizationTmp.PrintCode = _taxSpec.taxWriteCode();
            salesInvoiceLocalizationTmp.TaxDirective = LanguageTxt::find(tableNum(TaxTable), TaxTable::find(_taxSpec.taxCode()).RecId, _taxSpec.parmLanguageId()).Txt;
            salesInvoiceLocalizationTmp.TaxCurrencyCode = _taxSpec.currencyCode();

            if (isoCountryCode == #isoHU || isoCountryCode == #isoLT)
            {
                if (isoCountryCode == #isoHU)
                {
                    salesInvoiceLocalizationTmp.IsBankExchangeRateEnabled = TaxParameters::find().BankExchRate_W;
                }

                salesInvoiceLocalizationTmp.TaxExcludeFromInvoice = _taxSpec.parmExcludeFromInvoice();

                if (salesInvoiceLocalizationTmp.TaxExcludeFromInvoice == NoYes::Yes)
                {
                    // Set the tax amount that was excluded so it can be subtracted from the invoice line amount on the report.
                    salesInvoiceLocalizationTmp.TaxAmountExcluded = salesInvoiceLocalizationTmp.TaxAmount;

                    // Set the tax amount in Euro so that it can be subtracted from the total tax amount in euro on the report.
                    salesInvoiceLocalizationTmp.TaxAmountExcludedEuro = _custInvoiceJour.amountCur2Euro(salesInvoiceLocalizationTmp.TaxAmountExcluded);

                    // Set the tax amounts to zero so they aren't included on the invoice
                    salesInvoiceLocalizationTmp.TaxAmount = 0;
                    salesInvoiceLocalizationTmp.TaxAmountMST = 0;
                }
            }

            if (isoCountryCode == #isoPL)
            {
                salesInvoiceLocalizationTmp.TaxValue = this.getTaxValue(_taxSpec, _custInvoiceJour);
            }
        }

        if (isoCountryCode == #isoLT)
        {
            AmountCur AmountInInteger;
            if (_custInvoiceJour.isProforma())
            {
                proforma_totalExcludedTaxAmount += salesInvoiceLocalizationTmp.TaxAmountExcluded;
                AmountInInteger = _custInvoiceJour.InvoiceAmount - proforma_totalExcludedTaxAmount;
            }
            else
            {
                AmountInInteger = _custInvoiceJour.InvoiceAmount - this.parmTotalExcludedTaxAmount();
            }

            salesInvoiceLocalizationTmp.AmountInWords = this.getNumDateInWordConverter(_custInvoiceJour).numeralsToCurrency(AmountInInteger,
                                                                                                        _custInvoiceJour.CurrencyCode);
        }

        salesInvoiceLocalizationTmp.InvoiceName = _custInvoiceJour.invoiceName();

        //custPaymSchedLine
        if (_custPaymSchedLine)
        {
            salesInvoiceLocalizationTmp.ShowCustPaymSched = true;
            salesInvoiceLocalizationTmp.ShowCustPaymSchedLine = true;

            if (isoCountryCode == #isoLV)
            {
                salesInvoiceLocalizationTmp.SpecialFormattedDiscountDueDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custPaymSchedLine.DueDate, false, true);
                salesInvoiceLocalizationTmp.SpecialFormattedDiscountDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_custPaymSchedLine.DiscDate, false, true);
            }
            else
            {
                salesInvoiceLocalizationTmp.DueDate = _custPaymSchedLine.DueDate;
                salesInvoiceLocalizationTmp.DiscDate = _custPaymSchedLine.DiscDate;
            }

            salesInvoiceLocalizationTmp.DiscAmount = _custPaymSchedLine.DiscAmount;
            salesInvoiceLocalizationTmp.DueAmount = _custPaymSchedLine.DueAmount;
        }

        //custTrans
        if (_prepaymentCustTrans && !_prepaymentTaxTrans)
        {
            salesInvoiceLocalizationTmp.ShowPrepaidTotals = true;
            salesInvoiceLocalizationTmp.ShowPrepaidTotalsEuro = cachedPrintEuroTotals;
            salesInvoiceLocalizationTmp.ShowCustTrans = true;
            salesInvoiceLocalizationTmp.Txt = _prepaymentCustTrans.Txt;
            salesInvoiceLocalizationTmp.SettledAmountCur = settledAmountCur;
            salesInvoiceLocalizationTmp.CurrencyCode = _prepaymentCustTrans.CurrencyCode;

            if (isoCountryCode == #isoLV)
            {
                salesInvoiceLocalizationTmp.SpecialFormattedPrePaymentTransDate = this.getNumDateInWordConverter(_custInvoiceJour).date2strExt(_prepaymentCustTrans.TransDate, false, true);
            }
            else
            {
                salesInvoiceLocalizationTmp.TransDate = _prepaymentCustTrans.TransDate;
            }

            if (isoCountryCode == #isoHU)
            {
                if (_prepaymentCustTrans.Prepayment == NoYes::Yes)
                {
                    [salesInvoiceLocalizationTmp.PrePaymentAmountTax, salesInvoiceLocalizationTmp.PrePaymentAmountTaxMST] = this.getPrepaymentTaxAmount(_prepaymentCustTrans);
                    salesInvoiceLocalizationTmp.PrePaymentAmountTaxEuro = - CurrencyExchangeHelper::curAmount2CurAmount(salesInvoiceLocalizationTmp.PrePaymentAmountTax, _prepaymentCustTrans.CurrencyCode, salesInvoiceLocalizationTmp.EuroCurrencyCode, _prepaymentCustTrans.TransDate);
                }
            }
        }

        if (isoCountryCode == #isoCZ && _prepaymentTaxTrans && _prepaymentCustTrans)
        {
            int taxAmountSign = _custInvoiceJour.isProforma() ? 1 : -1;

            salesInvoiceLocalizationTmp.ShowTaxTrans = true;
            salesInvoiceLocalizationTmp.TaxCode = _prepaymentTaxTrans.TaxCode;
            salesInvoiceLocalizationTmp.Amount = - amount;
            salesInvoiceLocalizationTmp.TaxBaseAmount = taxAmountSign * _prepaymentTaxTrans.SourceBaseAmountCur;
            salesInvoiceLocalizationTmp.TaxBaseAmountMST = taxAmountSign * _prepaymentTaxTrans.TaxBaseAmount;
            salesInvoiceLocalizationTmp.TaxAmount = taxAmountSign * _prepaymentTaxTrans.SourceTaxAmountCur;
            salesInvoiceLocalizationTmp.TaxAmountMST = taxAmountSign * _prepaymentTaxTrans.TaxAmount;

            if (_prepaymentTaxTrans.ExemptTax)
            {
                salesInvoiceLocalizationTmp.TaxExemptDescription = TaxExemptCodeTable::txt(_prepaymentTaxTrans.ExemptCode);
            }

            salesInvoiceLocalizationTmp.TaxBaseQty = _prepaymentTaxTrans.TaxBaseQty;
            salesInvoiceLocalizationTmp.PrintCode = _prepaymentTaxTrans.PrintCode;
            salesInvoiceLocalizationTmp.TaxDirective = LanguageTxt::find(tableNum(TaxTable), TaxTable::find(_prepaymentTaxTrans.TaxCode).RecId, this.parmCompanyInfo().LanguageId).Txt;
            salesInvoiceLocalizationTmp.TaxDocumentNumber = CzTaxDocumentTable::find(_prepaymentCustTrans.Voucher, _prepaymentCustTrans.TransDate).TaxDocumentNum;
            salesInvoiceLocalizationTmp.TaxCurrencyCode = _prepaymentTaxTrans.SourceCurrencyCode;
        }
        // <GEECZ>
        if (isoCountryCode == #isoCZ)
        {
            if (originalInvoiceId_CZ
                && originalInvoiceId_CZ != _custInvoiceJour.InvoiceId)
            {
                salesInvoiceLocalizationTmp.OriginalInvoiceId_CZ = originalInvoiceId_CZ;
            }
            else if (_custInvoiceTrans)
            {
                custInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();
                if (custInvoiceTrans_W.RefReturnInvoiceTrans_W)
                {
                    salesInvoiceLocalizationTmp.OriginalInvoiceId_CZ = CustInvoiceTrans::findRecId(custInvoiceTrans_W.RefReturnInvoiceTrans_W).InvoiceId;
                }
            }
        }
        // </GEECZ>

        //docuRef
        salesInvoiceLocalizationTmp.Notes = this.getDocumentNote(_custInvoiceTrans, custFormLetterDocument);

        //tmpPackMaterialFeeSum
        salesInvoiceLocalizationTmp.PackMaterialCode = tmpPackMaterialFeeSum.PackMaterialCode;
        salesInvoiceLocalizationTmp.PackMaterialName = tmpPackMaterialFeeSum.Name;
        salesInvoiceLocalizationTmp.PackagingWeight = tmpPackMaterialFeeSum.PackagingWeight;
        salesInvoiceLocalizationTmp.PackMaterialUnit = tmpPackMaterialFeeSum.Unit;

        salesInvoiceLocalizationTmp.PackagingMaterialText = cachedPackagingMaterialText;

        //FormLetterRemarksTxt
        salesInvoiceLocalizationTmp.FormLetterRemarksTxt = formLetterRemarks.Txt;

        if (isoCountryCode == #isoPL)
        {
            salesInvoiceLocalizationTmp.FormLetterRemarksTxt = this.addSplitPaymentNote_W(
                _custInvoiceJour,
                salesInvoiceLocalizationTmp.FormLetterRemarksTxt);
        }

        salesInvoiceLocalizationTmp.DateOfCreation = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        this.clearTransportationDetails();

        if (IntrastatCountryRegionParameters::isInEUByIsoCode() && !isTransportationDataInserted)
        {
            this.insertTransportationDocument(_custInvoiceJour);
            isTransportationDataInserted = true;
        }

        // <GEEPL>
        if (isoCountryCode == #isoPL &&
            (custInvoiceTrans_W.RefReturnInvoiceTrans_W || custInvoiceTrans_W.CreditNoteInternalRef_W) &&
            !isPrintInvoiceCreditNoteLine)
        {
            salesInvoiceLocalizationTmp.HideInvoiceLine_PL = NoYes::Yes;
        }
        // </GEEPL>

        salesInvoiceLocalizationTmp.MandateReference = this.parmCustDirectDebitMandate().MandateReference;
        salesInvoiceLocalizationTmp.MandateSWIFTNo = this.parmCustDirectDebitMandateBankAccount().SWIFTNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            salesInvoiceLocalizationTmp.MandateBankIBAN = this.parmCustDirectDebitMandateBankAccount().BankIBAN;
        }

        if (ReverseChargeParameters_W::find().Enabled)
        {
            const str asteriskSign = '*';

            if (_custInvoiceTrans.ReverseCharge_W)
            {
                salesInvoiceLocalizationTmp.ReverseChargeLine = asteriskSign;
            }

            if (_custInvoiceJour.ReverseChargeAmount)
            {
                salesInvoiceLocalizationTmp.ReverseChargeJournal = asteriskSign;
            }

            salesInvoiceLocalizationTmp.ReverseChargeAmount = _custInvoiceJour.ReverseChargeAmount;

            if (SalesInvoiceDPRemoveRedundantCustInvoiceJourFlight::instance().isEnabled())
            {
                salesInvoiceLocalizationTmp.ReverseChargeAmountEuro = cachedReverseChargeAmountEuro;
                salesInvoiceLocalizationTmp.ReverseChargeBalance = cachedReverseChargeBalance;
                salesInvoiceLocalizationTmp.ReverseChargeBalanceEuro = cachedReverseChargeBalanceEuro;
            }
            else
            {
                salesInvoiceLocalizationTmp.ReverseChargeAmountEuro = _custInvoiceJour.reverseChargeAmountEuro();
                salesInvoiceLocalizationTmp.ReverseChargeBalance = _custInvoiceJour.reverseChargeBalance();
                salesInvoiceLocalizationTmp.ReverseChargeBalanceEuro = _custInvoiceJour.reverseChargeBalanceEuro();
            }
        }
        
        if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
        {
            kittingReportHandler.setkitFields(salesInvoiceLocalizationTmp, _custInvoiceTrans);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
        {
            SalesLine salesLine = _custInvoiceTrans.salesLine();
            salesInvoiceLocalizationTmp.DualUseCertificate = COODualUseCertificate::certificateReportStr(salesLine.ItemId, salesLine.ShippingDateConfirmed, salesLine.DeliveryAddress().CountryRegionId, COOPrintOnDocumentType::Invoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoSalesInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice detail information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    /// <remarks>
    /// This method will insert the invoice details information into the <c>SalesInvoiceLocalizationTmp</c>
    /// table which is only used for Eastern European countries and other countries that need customization
    /// from the SYS layer functionality.
    /// </remarks>
    protected void insertIntoSalesInvoiceLocalizationTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine = null,
        CustTrans _prepaymentCustTrans = null,
        TaxTrans _prepaymentTaxTrans = null)
    {
        this.populateSalesInvoiceLocalizationTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);

        salesInvoiceLocalizationTmp.insert();
        salesInvoiceLocalizationTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSalesInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the invoice detail information into the <c>SalesInvoiceTmp</c> table buffer.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    protected void populateSalesInvoiceTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        // <GIN>
        // </GIN>
        // <<GMY>
        // </GMY>

        boolean paymentIsScheduled;

        salesInvoicePaymentStubTmp.clear();
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesInvoiceTmp.MCRPaymAmount = _custInvoiceJour.MCRPaymAmount;
            salesInvoiceTmp.MCRDueAmount = _custInvoiceJour.MCRDueAmount;
        }

        boolean taxPrintTaxFreeBalance = custFormLetterParameters.TaxPrintTaxFreeBalance;

        salesInvoiceTmp.ShowPackingMaterial = showPackingMaterial;
        salesInvoiceTmp.ShowCustPackingSlipTrans = showCustPackingSlipTrans;

        salesInvoiceTmp.ShowGoodsDiscount = this.goodsDiscount(_custInvoiceTrans);

        salesInvoiceTmp.IsTaxAmountMSTVisible = this.parmIsTaxAmountMSTVisible();
        salesInvoiceTmp.TaxAmountLabel = strFmt("@SYS76498", "@SYS22646",_custInvoiceJour.CurrencyCode);
        salesInvoiceTmp.TaxAmountMSTLabel = strFmt("@SYS76498", "@SYS22646", Ledger::accountingCurrency(companyInfo.RecId));

        salesInvoiceTmp.ShowTotals = !taxPrintTaxFreeBalance;
        salesInvoiceTmp.ShowTotalsTaxBalances = taxPrintTaxFreeBalance;
        salesInvoiceTmp.ShowPayment = !isInvoiceCreditNote && !_custInvoiceJour.PaymentSched;
        salesInvoiceTmp.ShowTotalsEuro = cachedPrintEuroTotals && !taxPrintTaxFreeBalance;
        salesInvoiceTmp.ShowTotalsTaxBalancesEuro = cachedPrintEuroTotals && taxPrintTaxFreeBalance;
        salesInvoiceTmp.ShowGiro = _custInvoiceJour.GiroType != PaymentStub::None;
        salesInvoiceTmp.ShowLocalCurAmt = (isoCountryCode == #isoSG) && CompanyInfoHelper::standardCurrency() != _custInvoiceJour.CurrencyCode;

        Enumerator productDims = InventProductDimension::getEnumeratorForEnabledDimensions();
        while (productDims.moveNext())
        {
            InventProductDimension productDim = productDims.current();
            FieldId flagFieldId = SalesInvoiceTmp::productDimensionFlagFieldId(productDim);
            salesInvoiceTmp.(flagFieldId) = inventDimReport.showField(productDim.parmInventDimFieldId());
        }

        salesInvoiceTmp.PrePrintLevel = custFormLetterParameters.PrePrintLevelInvoice;
        salesInvoiceTmp.PrintEuroTotals = cachedPrintEuroTotals;
        salesInvoiceTmp.ShowCashDiscOnInvoiceControls = this.showCashDiscOnInvoice();

        if (SalesInvoiceDPRemoveRedundantCustInvoiceJourFlight::instance().isEnabled())
        {
            salesInvoiceTmp.ShowSepaNotification = cachedShowSepaNotification;
        }
        else
        {
            salesInvoiceTmp.ShowSepaNotification = this.showSepaNotification(_custInvoiceJour);
        }
        
        salesInvoiceTmp.PrintFreeTextInvoiceVATNum = custFormLetterParameters.PrintInvoiceVATNum;
        salesInvoiceTmp.IsInvoiceRefVisible = custParameters.CustInvoiceRefNum_FI;
        salesInvoiceTmp.CashAccountingRegime_ES = cachedCashAccountingRegime_ES;

        //Invoice
        salesInvoiceTmp.JournalRecId = _custInvoiceJour.RecId;
        salesInvoiceTmp.GiroType = _custInvoiceJour.GiroType;
        // <GTH>
        if (custInvoiceJourAdjustment)
        {
            salesInvoiceTmp.InvoiceId = custInvoiceJourAdjustment.TaxInvoiceId;
            salesInvoiceTmp.RemarkTxt_TH = custInvoiceJourAdjustment.remarkTxt(_custInvoiceJour.LanguageId);
            salesInvoiceTmp.AdjustmentDetailsTxt_TH = custInvoiceJourAdjustment.adjustmentDetailsTxt(_custInvoiceJour.LanguageId);
        }
        else
        {
            // </GTH>
            salesInvoiceTmp.InvoiceId = _custInvoiceJour.InvoiceId;
            // <GTH>
        }
        // </GTH>
        salesInvoiceTmp.TaxInvoiceSalesId = _custInvoiceJour.TaxInvoiceSalesId;

        if (_custInvoiceTrans)
        {
            salesInvoiceTmp.LineHeader = this.parmLineHeader();
        }

        if (isoCountryCode == #isoJP)
        {
            if (!_custInvoiceJour.isProforma())
            {
                salesInvoiceTmp.WithReducedTax_JP = TaxTable::existTaxTransWithReducedTaxType_JP(_custInvoiceTrans);
            }
            else
            {
                SalesLine salesLine = _custInvoiceTrans.salesLine();
                SalesTable salesTable = _custInvoiceJour.salesTable();
                SalesTotals salesTotals = SalesTotals::construct(salesTable);
                salesTotals.calc();
                TmpTaxWorkTrans tmpTaxWorkTrans = salesTotals.tax().tmpTaxWorkTrans();
                salesInvoiceTmp.WithReducedTax_JP = tmpTaxWorkTrans.existTaxTransWithReducedTaxType_JP(salesLine);
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            salesInvoiceTmp.Name = SalesParameters::nameAndOrDescription(
                _custInvoiceTrans.inventTable(),
                _custInvoiceJour.LanguageId,
                _custInvoiceTrans.InventDimId,
                EcoResCategory::find(_custInvoiceTrans.SalesCategory));
        }
        else
        {
            salesInvoiceTmp.Name = _custInvoiceTrans.Name;
        }
        salesInvoiceTmp.Qty = _custInvoiceTrans.Qty;
        salesInvoiceTmp.SalesPrice = _custInvoiceTrans.SalesPrice;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY])
            || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH])))
        {
            salesInvoiceTmp.SalesPriceMST = CurrencyExchangeHelper::amount(_custInvoiceTrans.SalesPrice * cachedExchRate);
            salesInvoiceTmp.LineAmountMST = CurrencyExchangeHelper::amount(_custInvoiceTrans.LineAmount * cachedExchRate);
            salesInvoiceTmp.LineAmountInclTaxMST = CurrencyExchangeHelper::amount((_custInvoiceTrans.LineAmount + _custInvoiceTrans.LineAmountTax) * cachedExchRate);
            salesInvoiceTmp.DiscountAmountMST = CurrencyExchangeHelper::amount(_custInvoiceTrans.DiscAmount * cachedExchRate);
            salesInvoiceTmp.EndDiscMST = CurrencyExchangeHelper::amount(_custInvoiceJour.EndDisc * cachedExchRate);
            salesInvoiceTmp.NetAmountMST = CurrencyExchangeHelper::amount(cachedNetAmount * cachedExchRate);
            salesInvoiceTmp.TaxFreeBalanceMST = CurrencyExchangeHelper::amount(cachedTaxFreeBalance * cachedExchRate);
            salesInvoiceTmp.SumMarkupMST = CurrencyExchangeHelper::amount(_custInvoiceJour.SumMarkup * cachedExchRate);
            salesInvoiceTmp.InvoiceRoundOffMST = CurrencyExchangeHelper::amount(_custInvoiceJour.InvoiceRoundOff * cachedExchRate);
            salesInvoiceTmp.CashDiscMST = CurrencyExchangeHelper::amount(_custInvoiceJour.CashDisc * cachedExchRate);
        }
        salesInvoiceTmp.LineAmount = _custInvoiceTrans.LineAmount;
        salesInvoiceTmp.TaxWriteCode = _custInvoiceTrans.TaxWriteCode;

        salesInvoiceTmp.SalesUnitTxt = this.getSalesUnitText(_custInvoiceTrans.SalesUnit, _custInvoiceJour.LanguageId);

        salesInvoiceTmp.CorrectiveReasonLines = correctiveReason_lines;
        salesInvoiceTmp.LineAmountInclTax = _custInvoiceTrans.LineAmount + _custInvoiceTrans.LineAmountTax ;

        if (ReverseChargeParameters_W::find().Enabled)
        {
            if (_custInvoiceTrans.ReverseCharge_W)
            {
                salesInvoiceTmp.ReverseChargeLine = '*';
            }
            if (_custInvoiceJour.ReverseChargeAmount)
            {
                salesInvoiceTmp.ReverseChargeJournal = '*';
            }

            salesInvoiceTmp.ReverseChargeAmount = _custInvoiceJour.ReverseChargeAmount;

            if (SalesInvoiceDPRemoveRedundantCustInvoiceJourFlight::instance().isEnabled())
            {
                salesInvoiceTmp.ReverseChargeAmountEuro = cachedReverseChargeAmountEuro;
                salesInvoiceTmp.ReverseChargeBalance = cachedReverseChargeBalance;
                salesInvoiceTmp.ReverseChargeBalanceEuro = cachedReverseChargeBalanceEuro;
            }
            else
            {
                salesInvoiceTmp.ReverseChargeAmountEuro = _custInvoiceJour.reverseChargeAmountEuro();
                salesInvoiceTmp.ReverseChargeBalance = _custInvoiceJour.reverseChargeBalance();
                salesInvoiceTmp.ReverseChargeBalanceEuro = _custInvoiceJour.reverseChargeBalanceEuro();
            }

        }

        salesInvoiceTmp.DiscPercent = _custInvoiceTrans.DiscPercent;
        salesInvoiceTmp.DiscountAmount = _custInvoiceTrans.DiscAmount;

        salesInvoiceTmp.PdsEnabled = (#PdsEnabled? NoYes::Yes : NoYes::No);

        if (salesInvoiceTmp.PdsEnabled)
        {
            salesInvoiceTmp.PdsCWQty = _custInvoiceTrans.PdsCWQty;
            salesInvoiceTmp.PdsCWUnitId = _custInvoiceTrans.pdsCWUnitId();
        }

        salesInvoiceTmp.InvoiceAmount = _custInvoiceJour.InvoiceAmount;

        salesInvoiceTmp.PrepaidAmount = cachedPrepaidAmount;
        salesInvoiceTmp.RemainAmountToBePaid = _custInvoiceJour.InvoiceAmount - cachedPrepaidAmount;
        salesInvoiceTmp.CustInvoiceJourCurrencyCode = _custInvoiceJour.CurrencyCode;
        salesInvoiceTmp.CurrencySymbol = Currency::find(_custInvoiceJour.CurrencyCode).Symbol;
        salesInvoiceTmp.InvoiceAmountEuro = cachedInvoiceAmountEuro;
        salesInvoiceTmp.PrepaidAmountEuro = cachedPrepaidAmountEuro;
        salesInvoiceTmp.RemainAmountToBePaidEuro = cachedRemainAmountToBePaidEuro;
        salesInvoiceTmp.EuroCurrencyCode = Currency::findEuroCurrencyCode();

        salesInvoiceTmp.SalesBalance = _custInvoiceJour.SalesBalance;
        salesInvoiceTmp.EndDisc = _custInvoiceJour.EndDisc;
        salesInvoiceTmp.SumMarkup = _custInvoiceJour.SumMarkup;
        salesInvoiceTmp.SumTax = _custInvoiceJour.SumTax;
        salesInvoiceTmp.InvoiceRoundOff = _custInvoiceJour.InvoiceRoundOff;

        salesInvoiceTmp.SalesBalanceEuro = cachedSalesBalanceEuro;
        salesInvoiceTmp.EndDiscEuro = cachedEndDiscEuro;
        salesInvoiceTmp.SumMarkupEuro = cachedSumMarkupEuro;
        salesInvoiceTmp.SumTaxEuro = cachedSumTaxEuro;
        salesInvoiceTmp.InvoiceRoundOffEuro = cachedInvoiceRoundOffEuro;
        salesInvoiceTmp.NetAmount = cachedNetAmount;
        salesInvoiceTmp.NetAmountEuro = cachedNetAmountEuro;
        salesInvoiceTmp.TaxableBalanceEuro = cachedTaxableBalanceEuro;
        salesInvoiceTmp.TaxFreeBalanceEuro = cachedTaxFreeBalanceEuro;
        salesInvoiceTmp.TaxableBalance = cachedTaxableBalance;
        salesInvoiceTmp.TaxFreeBalance = cachedTaxFreeBalance;
        salesInvoiceTmp.StandardCurrency = Ledger::accountingCurrency(CompanyInfo::current());
        salesInvoiceTmp.ExchRate = cachedExchRate;
        salesInvoiceTmp.SalesBalanceMST = _custInvoiceJour.SalesBalanceMST;
        salesInvoiceTmp.SumTaxMST = _custInvoiceJour.SumTaxMST;
        // <GSG>
        salesInvoiceTmp.InvoiceAmountMST = _custInvoiceJour.InvoiceAmountMST;
        // </GSG>
        salesInvoiceTmp.CashDiscTxt_LanguageId = cachedCashDiscTxt_LanguageId;
        salesInvoiceTmp.CashDisc = _custInvoiceJour.CashDisc;
        salesInvoiceTmp.CashDiscEuro = cachedCashDiscEuro;

        salesInvoiceTmp.IsCreditInvoicingReportEnabled = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES, #isoSE, #isoPL])
            && this.isCreditInvoicingReportEnabled(_custInvoiceJour);

        salesInvoiceTmp.IsCreditInvoicingReportEnabled_W = CustVendCreditInvoicingTable::useCreditInvoicingReporting()
            && this.isCreditInvoicingReportEnabled(_custInvoiceJour);

        salesInvoiceTmp.ExternalItemId = FormLetter::journalExternalItemId(ModuleInventPurchSales::Sales, _custInvoiceTrans.ExternalItemId);

        salesInvoiceTmp.InventDimPrint = this.printDimHistory(_custInvoiceTrans, _custInvoiceJour);

        salesInvoiceTmp.HeaderNotes = cachedHeaderNotes;

        salesInvoiceTmp.CustInvoiceJourDueDate = _custInvoiceJour.DueDate;

        salesInvoiceTmp.ItemId = this.itemId(_custInvoiceTrans);

        if (isoCountryCode == #isoIT)
        {
            salesInvoiceTmp.ItemId_W = salesInvoiceTmp.ItemId;
        }

        //custPackingSlipTrans
        if (showCustPackingSlipTrans && custFormLetterParameters.PckSlpInfoOnInvoice && !FeatureStateProvider::isFeatureEnabled(InvoicingPerPackingSlipFeature::instance()))
        {
            salesInvoiceTmp.PackingSlip = packingSlipDetails;
        }

        //inventDim
        if (isInventDimVisible)
        {
            salesInvoiceTmp.InventDimFieldsMap::initAllDimensionsFrom(inventDim);
        }

        // markup trans
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            this.setMarkupTrans(_custInvoiceTrans, salesInvoiceTmp);
            salesInvoiceTmp.MCRMarkupTxt = SysLabel::labelId2String(literalStr("@Retail:SalesInvoiceMiscCharges"),  _custInvoiceJour.LanguageId);
        }

        //custInvoiceBackOrderLine
        salesInvoiceTmp.ShowBackorders = (backOrderName != #emptyString);

        if (salesInvoiceTmp.ShowBackorders)
        {
            salesInvoiceTmp.BackOrderLineItemId = backOrderItemId;
            salesInvoiceTmp.BackOrderLineName = backOrderName;
            salesInvoiceTmp.BackOrderLineQuantity = backOrderQuantity;
            salesInvoiceTmp.BackOrderLineSalesUnit = backOrderSalesUnit;
            salesInvoiceTmp.BackOrderConfirmedDeliveryDate = backOrderConfirmedDeliveryDate;
            salesInvoiceTmp.ShowBackOrderConfirmedDeliveryDate = !(custFormLetterParameters.TrackBackorderInvoice == BackorderTracking::OnlyBackorders);
        }

        //markUpTrans_FI
        salesInvoiceTmp.MarkupAmount = this.parmMarkupAmount();
        salesInvoiceTmp.MarkupCode = this.parmMarkupCode();
        salesInvoiceTmp.MarkupTaxCode = this.parmMarkupTaxCode();
        if (salesInvoiceTmp.MarkupAmount || salesInvoiceTmp.MarkupCode || salesInvoiceTmp.MarkupTaxCode)
        {
            salesInvoiceTmp.ShowMarkupTrans = true;
        }
        else
        {
            salesInvoiceTmp.ShowMarkupTrans = false;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
        {
            if (_custInvoiceTrans)
            {
                salesInvoiceTmp.TaxAmount = _custInvoiceTrans.TaxAmount;
                salesInvoiceTmp.TaxAmountMST = _custInvoiceTrans.TaxAmountMST;
                salesInvoiceTmp.EndDisc = _custInvoiceTrans.SumLineDisc;
                salesInvoiceTmp.EndDiscMST = _custInvoiceTrans.SumLineDiscMST;
            }
        }

        if (TaxParameters::exist() && TaxParameters::find().TaxSpecifyLine)
        {
            salesInvoiceTmp.TaxAmount = _custInvoiceTrans.TaxAmount;
            salesInvoiceTmp.TaxAmountMST = _custInvoiceTrans.TaxAmountMST;
        }

        //taxTrans
        if (_taxSpec)
        {
            salesInvoiceTmp.ShowTaxTrans = true;
            salesInvoiceTmp.TaxCode = _taxSpec.taxCode();
            salesInvoiceTmp.Amount = - amount;
            salesInvoiceTmp.CashDiscAmount = -cashDiscAmountTax ;
            salesInvoiceTmp.TaxBaseAmountMST = -_taxSpec.taxBaseAmountMST();
            salesInvoiceTmp.TaxAmountMST = -_taxSpec.taxAmountMST();

            salesInvoiceTmp.TaxExemptDescription = _taxSpec.taxExemptDescriptionText();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBH]))
            {
                TaxData taxData = TaxData::find(_taxSpec.taxCode(), _custInvoiceJour.InvoiceDate, _taxSpec.taxBaseAmount());
                if (taxData)
                {
                    salesInvoiceTmp.TaxValue = taxData.TaxValue;
                }
            }

            if (!salesInvoiceTmp.TaxExemptDescription)
            {
                TaxTable taxTable = TaxTable::find(_taxSpec.taxCode());

                salesInvoiceTmp.TaxExemptDescription = LanguageTxt::find(tableNum(TaxTable), taxTable.RecId, _taxSpec.parmLanguageId()).Txt;
            }

            salesInvoiceTmp.PrintCode = _taxSpec.taxWriteCode();
            // <GTH>
            if (isUnrealizedVATEnabled
                && contract.parmPrintHeader()
                && contract.parmProdType() != TaxUnrealizedDocuProdType::All)
            {
                salesInvoiceTmp.TaxBaseAmount = taxBaseAmount;
                salesInvoiceTmp.TaxAmount = taxAmount;
                salesInvoiceTmp.TaxBaseQty = taxBaseQty;
            }
            else
            {
                salesInvoiceTmp.TaxBaseAmount = -_taxSpec.taxBaseAmount();
                salesInvoiceTmp.TaxAmount = -_taxSpec.taxAmount();
                salesInvoiceTmp.TaxBaseQty = -_taxSpec.taxBaseQty();
            }
            // </GTH>
            // <GMY>
            if (isGSTInvoice)
            {
                salesInvoiceTmp.GSTSummaryText_MY = _taxSpec.getGSTSummaryText_MY(_custInvoiceJour);
            }
            // </GMY>
        }

        // <GIN>
        // taxWithholdTrans_IN
        if (TaxWithholdParameters_IN::isTCSActivate())
        {
            salesInvoiceTmp.ShowTaxWithholdTrans_IN = true;

            CustInvoiceJour_W custInvoiceJour_W = _custInvoiceJour.custInvoiceJour_W();

            if (TaxWithholdEnableIncludeTCSInTotalFeatureToggle::isFeatureEnabled())
            {
                salesInvoiceTmp.InvoiceAmount += CurrencyExchange::roundWithRuleType(
                    custInvoiceJour_W.SumTaxWithhold_IN,
                    _custInvoiceJour.CurrencyCode,
                    CurrencyRoundingRuleType::SalesOrder);
            }
            else
            {
                salesInvoiceTmp.InvoiceAmount += custInvoiceJour_W.SumTaxWithhold_IN;
            }

            salesInvoiceTmp.SumTaxWithhold_IN = custInvoiceJour_W.SumTaxWithhold_IN;

            if (taxWithholdSpec)
            {
                salesInvoiceTmp.TaxWithholdCode_IN = taxWithholdSpec.taxWithholdCode();
                salesInvoiceTmp.SourceRegulateAmountCur_IN = -taxWithholdSpec.taxAmountMST();
                salesInvoiceTmp.SourceBaseAmountCur_IN = taxWithholdSpec.taxBaseAmount();
            }
        }
        // </GIN>
        // <GMY>
        if (isGSTInvoice)
        {
            CustInvoiceTrans_W custInvoiceTrans_W = _custInvoiceTrans.custInvoiceTrans_W();

            salesInvoiceTmp.RefInvoiceID_MY = custInvoiceTrans_W.RefInvoiceID_MY;
            salesInvoiceTmp.RefInvoiceDate_MY = custInvoiceTrans_W.RefInvoiceDate_MY;

            if (reliefGroupRecId)
            {
                TaxGSTReliefCategory_MY reliefCategory_MY = TaxGSTReliefCategory_MY::find(
                    InventTableModule::find(
                        _custInvoiceTrans.ItemId,
                        ModuleInventPurchSales::Sales).TaxGSTReliefCategory_MY);

                if (TaxGSTReliefGroupData_MY::exist(reliefGroupRecId, reliefCategory_MY.RecId))
                {
                    salesInvoiceTmp.GSTReliefItemNumber_MY = reliefCategory_MY.ReliefItemNumber;
                    salesInvoiceTmp.GSTReliefSchedule_MY = reliefCategory_MY.ReliefSchedule;
                }
            }
        }
        // </GMY>

        if (_custPaymSchedLine)
        {
            salesInvoiceTmp.ShowCustPaymSched = true;
            salesInvoiceTmp.ShowCustPaymSchedLine = true;
            paymentIsScheduled = true;
            salesInvoiceTmp.DueDate = _custPaymSchedLine.DueDate;
            salesInvoiceTmp.DiscAmount = _custPaymSchedLine.DiscAmount;
            salesInvoiceTmp.DiscDate = _custPaymSchedLine.DiscDate;
            salesInvoiceTmp.DueAmount = _custPaymSchedLine.DueAmount;
        }

        //custTrans
        if (_prepaymentCustTrans)
        {
            salesInvoiceTmp.ShowCustTrans = true;

            // Enable <c>RetailAlwaysShowPrepaidTotalsSectionInInvoiceReportFlight</c> to display prepaymet section.
            // Even when net amount is equal to prepaid amount.
            if(cachedNetAmount == cachedPrepaidAmount && !RetailAlwaysShowPrepaidTotalsSectionInInvoiceReportFlight::instance().isEnabled())
            {
                salesInvoiceTmp.ShowPrepaidTotals = false;
            }
            else
            {
                salesInvoiceTmp.ShowPrepaidTotals = true;
            }
            salesInvoiceTmp.ShowPrepaidTotalsEuro = cachedPrintEuroTotals;
            salesInvoiceTmp.TransDate = _prepaymentCustTrans.TransDate;
            salesInvoiceTmp.Txt = _prepaymentCustTrans.Txt;
            salesInvoiceTmp.SettledAmountCur = _prepaymentCustTrans.AmountCur;
            salesInvoiceTmp.CurrencyCode = _prepaymentCustTrans.CurrencyCode;
        }

        //docuRef
        salesInvoiceTmp.Notes = this.getDocumentNote(_custInvoiceTrans, custFormLetterDocument);

        //tmpPackMaterialFeeSum
        salesInvoiceTmp.PackMaterialCode = tmpPackMaterialFeeSum.PackMaterialCode;
        salesInvoiceTmp.PackMaterialName = tmpPackMaterialFeeSum.Name;
        salesInvoiceTmp.PackagingWeight = tmpPackMaterialFeeSum.PackagingWeight;
        salesInvoiceTmp.PackMaterialUnit = tmpPackMaterialFeeSum.Unit;
        salesInvoiceTmp.PackagingMaterialText = this.packagingMaterialText(_custInvoiceJour);

        //FormLetterRemarksTxt
        salesInvoiceTmp.FormLetterRemarksTxt = formLetterRemarks.Txt;

        salesInvoiceTmp.DateOfCreation = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

        this.insertGiroInformation(_custInvoiceJour, this.parmCompanyInfo(), paymentIsScheduled);

        // <GIN>
        if (isoCountryCode == #isoIN)
        {
            salesInvoiceTmp.CommodityCode_IN = this.getCommodityCode_IN(_custInvoiceTrans);
        }
        // </GIN>

        salesInvoiceTmp.MandateReference = this.parmCustDirectDebitMandate().MandateReference;
        salesInvoiceTmp.MandateSWIFTNo = this.parmCustDirectDebitMandateBankAccount().SWIFTNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            salesInvoiceTmp.MandateBankIBAN = this.parmCustDirectDebitMandateBankAccount().BankIBAN;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(COOCertification)))
        {
            SalesLine salesLine = _custInvoiceTrans.salesLine();
            salesInvoiceTmp.DualUseCertificate = COODualUseCertificate::certificateReportStr(salesLine.ItemId, salesLine.ShippingDateConfirmed, salesLine.DeliveryAddress().CountryRegionId, COOPrintOnDocumentType::Invoice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoSalesInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice detail information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    protected void insertIntoSalesInvoiceTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        if (this.canInsertIntoSalesInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans))
        {
            this.populateSalesInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);

            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                kittingReportHandler.setkitFields(salesInvoiceTmp, _custInvoiceTrans);
            }

            salesInvoiceTmp.insert();
            salesInvoiceTmp.clear();
            // <GEEU>
            switch (isoCountryCode)
            {
                case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                    this.insertIntoSalesInvoiceLocalizationTmp(_custInvoiceJour, _custInvoiceTrans, _taxSpec, _custPaymSchedLine, _prepaymentCustTrans, _prepaymentTaxTrans);
                    break;
            }
            // </GEEU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsertIntoSalesInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether or not insertion of the invoice detail information is allowed.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> record that has the invoice details information.
    /// </param>
    /// <param name="_taxSpec">
    /// The <c>TaxSpec</c> class instance that has the taxes information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The <c>CustPaymSchedLine</c> record that has the payment schedules information.
    /// </param>
    /// <param name="_prepaymentCustTrans">
    /// The <c>CustTrans</c> record that has the prepayment information.
    /// </param>
    /// <param name="_prepaymentTaxTrans">
    /// The <c>TaxTrans</c> record that has the prepayment taxes information.
    /// </param>
    /// <returns>
    /// true if insertion into the <c>SalesInvoiceTmp</c> is allowed; otherwise, false.
    /// </returns>
    protected boolean canInsertIntoSalesInvoiceTmp(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceDetailsInformation</Name>
				<Source><![CDATA[
    public void insertInvoiceDetailsInformation(CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        this.insertIntoSalesInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, null, _custPaymSchedLine, _prepaymentCustTrans
            // <GEECZ>
            , _prepaymentTaxTrans
            // </GEECZ>
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInvoiceHeaderInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice header information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    /// <param name="_companyInfo">
    /// A <c>CompanyInfo</c> record that has the company information.
    /// </param>
    /// <remarks>
    /// The method will insert the invoice header information. It should be overridden in the sub classes
    /// to insert the data into the right temporary tables.
    /// </remarks>
    public void insertInvoiceHeaderInformation(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        this.insertIntoSalesInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that contains invoice data.
    /// </param>
    /// <remarks>
    /// This method should be overridden in the sub classes to get the right taxes information and be
    /// inserted in the right tables.
    /// </remarks>
    public void insertTaxes(CustInvoiceJour _custInvoiceJour)
    {
        TaxSpec taxSpec;
        int taxCodeCounter;

        // <GEECZ>
        if (isoCountryCode == #isoCZ && isInvoiceCreditNote)
        {
            this.insertTaxes_CZ(_custInvoiceJour);
            return;
        }
        // </GEECZ>

        if (_custInvoiceJour.isProforma())
        {
            taxSpec = TaxSpec::construct(#emptyString, naDate(), _custInvoiceJour.RecId);
            taxSpec.setTmpTaxWorkTrans(this.tmpTaxWorkTrans(_custInvoiceJour));
        }
        else
        {
            taxSpec = TaxSpec::construct(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate, _custInvoiceJour.RecId, ledgerJournalTrans.RecId, false);
        }

        taxSpec.parmLanguageId(_custInvoiceJour.LanguageId);
        // <GMY>
        if (isGSTInvoice)
        {
            taxSpec.parmIsGSTInvoice_MY(true);
        }
        // </GMY>

        while (taxSpec.parmTaxSpec(
            // <GEEU>
            false
            // </GEEU>
            ))
        {
            // <GTH>
            if (isUnrealizedVATEnabled)
            {
                if (contract.parmPrintHeader() && contract.parmProdType() != TaxUnrealizedDocuProdType::All)
                {
                    this.updateTaxAmtByProdType_TH(taxSpec.taxCode());
                    if (taxBaseAmount == 0)
                    {
                        continue;
                    }
                }
            }
            // </GTH>

            if (this.showCashDiscOnInvoice())
            {
                if (_custInvoiceJour.CashDiscPercent == 100)
                {
                    amount = 0;
                    cashDiscAmountTax = 0;
                }
                else
                {
                    amount = taxSpec.taxBaseAmount() / ((100-_custInvoiceJour.CashDiscPercent) / 100);
                    cashDiscAmountTax = amount * (_custInvoiceJour.CashDiscPercent/100);
                }
            }

            this.insertIntoSalesInvoiceTmp(_custInvoiceJour, null, taxSpec, null, null
                // <GEECZ>
                , null
                // </GEECZ>
                );
        }

        // <GIN>
        if (TaxWithholdParameters_IN::isTCSActivate())
        {
            taxSpec = null;
            taxWithholdSpec = new TaxWithholdSpec_IN(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate, _custInvoiceJour.RecId);
            while (taxWithholdSpec.parmTaxSpec())
            {
                this.insertIntoSalesInvoiceTmp(_custInvoiceJour, null, taxSpec, null, null
                    // <GEECZ>
                    , null
                    // </GEECZ>
                    );
            }
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTmpTaxWorkFromChargesProforma_CZ</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addTmpTaxWorkFromChargesProforma_CZ(TmpTaxWorkTrans _tmpTaxWorkTrans, CustInvoiceJour _custInvoiceJour)
    {
        SalesTable salesTable;
        MarkupTrans salesTableMarkupTrans;
        while select salesTableMarkupTrans
            exists join salesTable
                where salesTable.SalesId == _custInvoiceJour.SalesId
                    && salesTableMarkupTrans.TransTableId == tableNum(SalesTable)
                    && salesTableMarkupTrans.TransRecId == salesTable.RecId
        {
            this.initTmpTaxWorkTransFromMarkupTrans(_tmpTaxWorkTrans, _custInvoiceJour, salesTableMarkupTrans);
        }
        
        MarkupTrans salesLineMarkupTrans;
        SalesLine salesLine;
        CustInvoiceTrans custInvoiceTrans;
        while select salesLineMarkupTrans
            exists join custInvoiceTrans
                where custInvoiceTrans.SalesId == _custInvoiceJour.SalesId
                    && custInvoiceTrans.InvoiceId == _custInvoiceJour.InvoiceId
                    && custInvoiceTrans.InvoiceDate == _custInvoiceJour.InvoiceDate
                    && custInvoiceTrans.numberSequenceGroup == _custInvoiceJour.numberSequenceGroup
            exists join salesLine
                where salesLine.SalesId == _custInvoiceJour.SalesId
                    && salesLineMarkupTrans.TransTableId == tableNum(SalesLine)
                    && salesLineMarkupTrans.TransRecId == salesLine.RecId
                    && salesLine.LineNum == custInvoiceTrans.LineNum
        {
            this.initTmpTaxWorkTransFromMarkupTrans(_tmpTaxWorkTrans, _custInvoiceJour, salesLineMarkupTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that contains invoice data.
    /// </param>
    /// <remarks>
    /// This method is used for Czech Republic.
    /// </remarks>
    public void insertTaxes_CZ(CustInvoiceJour _custInvoiceJour)
    {
        TmpTaxWorkTrans tmpTaxWorkTrans;
        TmpTaxWorkTrans tmpTaxWorkTransTotals;
        TaxTrans taxTrans;

        boolean calcTax = true;

        if (!isInvoiceCreditNote)
        {
            if (_custInvoiceJour.isProforma() && formletterProformaPrint)
            {
                tmpTaxWorkTrans = this.tmpTaxWorkTrans(_custInvoiceJour);
            }
            else
            {
                while select taxTrans
                    where taxTrans.Voucher == _custInvoiceJour.LedgerVoucher
                       && taxTrans.TransDate == _custInvoiceJour.InvoiceDate
                {
                    tmpTaxWorkTrans.clear();
                    tmpTaxWorkTrans.initFromTaxTrans(taxTrans);
                    tmpTaxWorkTrans.HeadingTableId = _custInvoiceJour.TableId;
                    tmpTaxWorkTrans.HeadingRecId = _custInvoiceJour.RecId;
                    tmpTaxWorkTrans.insert();
                }
            }
        }
        else
        {
            if (!(_custInvoiceJour.isProforma() && formletterProformaPrint))
            {
                select firstonly taxTrans
                    where taxTrans.Voucher == _custInvoiceJour.LedgerVoucher
                       && taxTrans.TransDate == _custInvoiceJour.InvoiceDate;

                if (!taxTrans)
                {
                    calcTax = false;
                }
            }

            if (calcTax)
            {
                this.addTmpTaxWorkFromInvoiceJour_CZ(tmpTaxWorkTrans, _custInvoiceJour);

                // case for credit note charges
                this.addTmpTaxWorkFromCharges_CZ(tmpTaxWorkTrans, _custInvoiceJour);
            }
        }

        TaxProformaSpec taxProformaSpec = new TaxProformaSpec(_custInvoiceJour.RecId);
        taxProformaSpec.setTmpTaxWorkTrans(tmpTaxWorkTrans);
        taxProformaSpec.parmLanguageId(_custInvoiceJour.LanguageId);
        while (taxProformaSpec.parmTaxSpec(false))
        {
            if (cashDiscOnInvoice)
            {
                if (_custInvoiceJour.CashDiscPercent == 100)
                {
                    amount = 0;
                    cashDiscAmountTax = 0;
                }
                else
                {
                    amount = taxProformaSpec.taxBaseAmount() / (100 - _custInvoiceJour.CashDiscPercent) / 100;
                    cashDiscAmountTax = amount * (_custInvoiceJour.CashDiscPercent / 100);
                }
            }

            this.parmOriginalInvoiceId_CZ(taxProformaSpec.parmInvoiceId());
            this.insertIntoSalesInvoiceTmp(_custInvoiceJour, null, taxProformaSpec, null, null, null);

            if (isInvoiceCreditNote)
            {
                select firstonly forupdate tmpTaxWorkTransTotals
                    where tmpTaxWorkTransTotals.TaxCode == taxProformaSpec.taxCode()
                       && tmpTaxWorkTransTotals.SourceCurrencyCode == taxProformaSpec.currencyCode();

                if (!tmpTaxWorkTransTotals)
                {
                    tmpTaxWorkTransTotals.TaxCode = taxProformaSpec.taxCode();
                    tmpTaxWorkTransTotals.HeadingTableId = _custInvoiceJour.TableId;
                    tmpTaxWorkTransTotals.HeadingRecId = _custInvoiceJour.RecId;
                    tmpTaxWorkTransTotals.SourceTableId = tmpTaxWorkTransTotals.HeadingTableId;
                    tmpTaxWorkTransTotals.SourceRecId = tmpTaxWorkTransTotals.HeadingRecId;
                    tmpTaxWorkTransTotals.SourceCurrencyCode = taxProformaSpec.currencyCode();
                    tmpTaxWorkTransTotals.TransDate = _custInvoiceJour.InvoiceDate;
                }

                tmpTaxWorkTransTotals.SourceRegulateAmountCur += taxProformaSpec.taxAmount();
                tmpTaxWorkTransTotals.TaxAmount += taxProformaSpec.taxAmountMST();
                tmpTaxWorkTransTotals.SourceBaseAmountCur += taxProformaSpec.taxBaseAmount();
                tmpTaxWorkTransTotals.TaxBaseAmount += taxProformaSpec.taxBaseAmountMST();
                tmpTaxWorkTransTotals.TaxBaseQty += taxProformaSpec.taxBaseQty();
                tmpTaxWorkTransTotals.write();
            }
        }

        str totalStr = "@SYS14107";
        while select tmpTaxWorkTransTotals
        {
            if (!isInvoiceCreditNote)
            {
                tmpTaxWorkTransTotals.TaxCode = strFmt("@SYS90673", tmpTaxWorkTransTotals.TaxCode);
            }

            // create new tmp buffer with one record - workaround grouping in TaxSpec class
            TmpTaxWorkTrans tmpTaxWorkTransRecord = null;
            buf2Buf(tmpTaxWorkTransTotals, tmpTaxWorkTransRecord);
            tmpTaxWorkTransRecord.insert();

            taxProformaSpec = new TaxProformaSpec(_custInvoiceJour.RecId);
            taxProformaSpec.setTmpTaxWorkTrans(tmpTaxWorkTransRecord);

            taxProformaSpec.parmLanguageId(_custInvoiceJour.LanguageId);

            while (taxProformaSpec.parmTaxSpec(false))
            {
                if (cashDiscOnInvoice)
                {
                    if (_custInvoiceJour.CashDiscPercent == 100)
                    {
                        amount = 0;
                        cashDiscAmountTax = 0;
                    }
                    else
                    {
                        amount = taxProformaSpec.taxBaseAmount() / (100 - _custInvoiceJour.CashDiscPercent) / 100;
                        cashDiscAmountTax = amount * (_custInvoiceJour.CashDiscPercent / 100);
                    }
                }

                this.parmOriginalInvoiceId_CZ(isInvoiceCreditNote ? totalStr : '');
                this.insertIntoSalesInvoiceTmp(_custInvoiceJour, null, taxProformaSpec, null, null, null);
                totalStr = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTransportationDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the transportation information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice header information.
    /// </param>
    private void insertTransportationDocument(CustInvoiceJour _custInvoiceJour)
    {
        CustTable custTable_Seller = _custInvoiceJour.custTable_OrderAccount();
        salesInvoiceLocalizationTmp.TransportationDataSection = NoYes::Yes;
        TransportationDocument transportationDocument = TransportationDocument::find(_custInvoiceJour.TransportationDocument);

        if (transportationDocument)
        {
            if (isoCountryCode == #isoLV)
            {
                salesInvoiceLocalizationTmp.DoPrintTransportationDocument = NoYes::Yes;
                salesInvoiceLocalizationTmp.EconomicActivity = transportationDocument.EconomicActivityType;
            }
            else
            {
                salesInvoiceLocalizationTmp.DoPrintTransportationDocument = transportationDocument.DoPrintTransportationDocument;
            }

            // <GEELT>
            if (isoCountryCode == #isoLT)
            {
                UserId userId = SalesParmTable::findSalesId(_custInvoiceJour.SalesId, _custInvoiceJour.ParmId).createdBy;
                HcmWorker hcmWorker = HcmWorker::find(HcmWorker::userId2Worker(userId));

                salesInvoiceLocalizationTmp.TransportationContactPersonName = hcmWorker.name();
                salesInvoiceLocalizationTmp.TransportationContactPersonTitle = hcmWorker.title();
            }
            else
            {
                // </GEELT>
                salesInvoiceLocalizationTmp.TransportationContactPersonName = transportationDocument.contactPersonName(_custInvoiceJour);
                salesInvoiceLocalizationTmp.TransportationContactPersonTitle = transportationDocument.contactPersonTitle(_custInvoiceJour);
                // <GEELT>
            }
            // </GEELT>

            salesInvoiceLocalizationTmp.TransPortationIssuedByName = transportationDocument.issuedByName();
            salesInvoiceLocalizationTmp.TransportationIssuedByTitle = transportationDocument.issuedByTitle();

            if (salesInvoiceLocalizationTmp.DoPrintTransportationDocument)
            {
                // Identifies the record having the transporation data.
                salesInvoiceLocalizationTmp.DeliveryName = _custInvoiceJour.DeliveryName;
                salesInvoiceLocalizationTmp.DeliveryAddress = _custInvoiceJour.deliveryAddress();

                // Set values from transportation document.
                salesInvoiceLocalizationTmp.TransportationCarrierAddress = transportationDocument.carrierAddress(custTable_Seller.Party);
                salesInvoiceLocalizationTmp.TransportationCarrierName = transportationDocument.carrierName(custTable_Seller.Party);

                if (isoCountryCode == #isoLV)
                {
                    salesInvoiceLocalizationTmp.SpecialFormattedTransportationLoadedDate = RNumDateInWordConverter::construct(currentUserLanguage()).date2strExt( any2date(transportationDocument.LoadedDateTime), false, true);
                }
                else
                {
                    salesInvoiceLocalizationTmp.TransportationLoadedDateTime = transportationDocument.LoadedDateTime;
                }
                salesInvoiceLocalizationTmp.TransportationLoadedAddress = transportationDocument.displayLoadedPostalAddressing();
                salesInvoiceLocalizationTmp.TransportationLoadedName = transportationDocument.LoadedAddressName;

                salesInvoiceLocalizationTmp.TransportationPackageDangerDegree = transportationDocument.PackageDangerDegree;
                salesInvoiceLocalizationTmp.TransportationPackageDescription = transportationDocument.PackageDescription;

                // Set values from transportation vehicle.
                TransportationVehicle transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);

                if (transportationVehicle)
                {
                    salesInvoiceLocalizationTmp.TransportationVehicleDescription = transportationVehicle.modelDescription();
                    salesInvoiceLocalizationTmp.TransportationVehicleDriverName = transportationVehicle.DriverName;
                    salesInvoiceLocalizationTmp.TransportationVehiclePlateNumber = transportationVehicle.PlateNumber;
                    salesInvoiceLocalizationTmp.TransportationVehicleTrailerNumber = transportationVehicle.TrailerNumber;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountDecimals</Name>
				<Source><![CDATA[
    private str invoiceAmountDecimals(CustInvoiceJour _custInvoiceJour, boolean _paymentIsScheduled)
    {
        AmountCur remainAmountToBePaid = _custInvoiceJour.remainAmountToBePaid();
        str ret;

        if ((remainAmountToBePaid >= 0) && (!_paymentIsScheduled))
        {
            ret = System.String::Format("{0:00}", frac(abs(remainAmountToBePaid))*100);
        }
        else
        {
            ret = 'XX';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountNoDecimals</Name>
				<Source><![CDATA[
    private str invoiceAmountNoDecimals(
        CustInvoiceJour _custInvoiceJour,
        boolean _paymentIsScheduled
    )
    {
        AmountCur remainAmountToBePaid = _custInvoiceJour.remainAmountToBePaid();
        str ret;

        if ((remainAmountToBePaid >= 0) && (!_paymentIsScheduled))
        {
            ret = System.String::Format("{0:#}", trunc(abs(remainAmountToBePaid)));
        }
        else
        {
            ret = 'XXXXXX';
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId2RecID</Name>
				<Source><![CDATA[
    private RecId invoiceId2RecID(InvoiceId _invoiceId)
    {
        // When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is concatenation of # and the custInvoiceJour.RecId
        // This method will strip the leading # and cast the string to a int64.
        InvoiceId tempInvoiceId = subStr(_invoiceId,2,strLen(_invoiceId));
        RecId irecId = str2int64(tempInvoiceId);

        return irecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceTxt</Name>
				<Source><![CDATA[
    protected str invoiceTxt(CustInvoiceJour _custInvoiceJour)
    {
        str invoiceTxt;
        boolean printCorrInvoiceLabel_DE = isoCountryCode == #isoDE &&
                                           companyInfo.PrintCorrInvoiceLabel_DE &&
                                           custInvoiceJour.InvoiceDate >= companyInfo.PrintCorrInvoiceLabelEffDate_DE;
        // <GEEU>
        boolean isCreditNote;

        switch (isoCountryCode)
        {
            case #isoEE, #isoLT, #isoHU, #isoLV, #isoCZ, #isoPL:
                isCreditNote = _custInvoiceJour.returnLinesExist_W();
                break;
            default:
                isCreditNote = _custInvoiceJour.InvoiceAmount < 0;
        }

        if (!isCreditNote)
        // </GEEU>
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (_custInvoiceJour.isProforma())
                {
                    if (_custInvoiceJour.Prepayment)
                    {
                        invoiceTxt = "@SYS87980";
                    }
                    else
                    {
                        invoiceTxt = "@SYS70789";
                    }
                }
                else
                {
                    if (isTaxInvoice)
                    {
                        invoiceTxt = "@SYS121364";
                    }
                    else
                    {
                        invoiceTxt = "@SYS24428";
                    }
                }
            }
            else
            {
                if (_custInvoiceJour.isProforma())
                {
                    if (_custInvoiceJour.Prepayment)
                    {
                        invoiceTxt = "@SYS87979";
                    }
                    else
                    {
                        if (isTaxInvoice)
                        {
                            invoiceTxt = "@SYS121362";
                        }
                        else
                        {
                            invoiceTxt = "@SYS4701";
                        }
                    }
                }
                else
                {
                    if (isTaxInvoice)
                    {
                        invoiceTxt = "@SYS115505";
                    }
                    else
                    {
                        invoiceTxt = "@SYS12128";
                    }
                }
            }
        }
        else
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (_custInvoiceJour.isProforma())
                {
                    if (_custInvoiceJour.Prepayment)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004214": "@SYS87981";
                    }
                    else
                    {
                        if (custCreditInvoicing)
                        {
                            invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004215" : "@SYS99741";
                        }
                        else
                        {
                            invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004215" : "@SYS70790";
                        }
                    }
                }
                else
                {
                    if (custCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004216" : "@SYS99733";
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004216" : "@SYS24607";
                    }
                }
            }
            else
            {
                if (_custInvoiceJour.isProforma())
                {
                    if (_custInvoiceJour.Prepayment)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004214" : "@SYS87981";
                    }
                    else
                    {
                        if (custCreditInvoicing)
                        {
                            invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004217" : "@SYS99735";
                        }
                        else
                        {
                            invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004217" : "@SYS24608";
                        }
                    }
                }
                else
                {
                    if (custCreditInvoicing)
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004218" : "@SYS99734";
                    }
                    else
                    {
                        invoiceTxt = printCorrInvoiceLabel_DE ? "@SYS4004218" : "@SYS8125";
                    }
                }
            }
        }

        // <GEELT>
        if (isoCountryCode == #isoLT || isoCountryCode == #isoLV)
        {
            if (strLRTrim(companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, _custInvoiceJour.InvoiceDate)))
            {
                // Adds the "VAT" keyword to the begining of the invoice text if the company is a VAT payer
                invoiceTxt = strFmt("@SYS76498", "@GLS107406", invoiceTxt);
            }
            // Adds "Sequel" word to the end of the invoice text to be shown on each page except the first one.
            invoiceTxtSequel = strFmt("@SYS76498", invoiceTxt, "@GLS221084");
        }
        // </GEELT>
        return invoiceTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId(CustInvoiceTrans _custInvoiceTrans)
    {
        ItemId itemId = FormLetter::journalItemId(ModuleInventPurchSales::Sales, _custInvoiceTrans.ItemId, _custInvoiceTrans.ExternalItemId);

        if (inventDimReport.isInventDimItemId())
        {
            itemId += inventDimReport.reportStrItemId(inventDim);
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesUnitText</Name>
				<Source><![CDATA[
    protected UnitOfMeasureReportingText getSalesUnitText(SalesUnit _salesUnit, LanguageId _languageId)
    {
        if (!salesUnitTextMap)
        {
            salesUnitTextMap = new Map(Types::String, Types::String);
        }

        str salesUnitTextKey = strFmt('%1.%2', _salesUnit, _languageId);

        UnitOfMeasureReportingText salesUnitText;

        if (salesUnitTextMap.exists(salesUnitTextKey))
        {
            salesUnitText = salesUnitTextMap.lookup(salesUnitTextKey);
        }
        else
        {
            salesUnitText = UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
                UnitOfMeasure::unitOfMeasureIdBySymbol(_salesUnit),
                _languageId);

            salesUnitTextMap.insert(salesUnitTextKey, salesUnitText);
        }

        return salesUnitText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadCustPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the <c>CustPackingSlipTrans</c> data for processing.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> table buffer.
    /// </param>
    /// <param name = "_custInvoiceTrans">
    /// The <c>CustInvoiceTrans</c> table buffer.
    /// </param>
    protected void loadCustPackingSlipTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        CustPackingSlipTrans custPackingSlipTrans;

        hasCustPackingSlipTrans = false;
        packingSlipDetails = #emptyString;
        custTransLanguageId = _custInvoiceJour.LanguageId;

        if (!custFormLetterParameters.PckSlpInfoOnInvoice || FeatureStateProvider::isFeatureEnabled(InvoicingPerPackingSlipFeature::instance()))
        {
            return;
        }

        boolean isPackingSlip;
        while select custPackingSlipTrans
            where custPackingSlipTrans.InvoiceTransRefRecId == _custInvoiceTrans.RecId
        {
            if (!isPackingSlip)
            {
                isPackingSlip = true;
            }

            this.setPackingSlipDetails(custPackingSlipTrans);
        }

        if (!isPackingSlip)
        {
            if (_custInvoiceTrans.isStocked())
            {
                InventTrans inventTrans;
                InventTransOrigin inventTransOrigin;

                while select custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId == _custInvoiceTrans.InventTransId
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId == custPackingSlipTrans.InventTransId
                    exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId &&
                            inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId &&
                            inventTrans.InvoiceId == _custInvoiceJour.InvoiceId
                {
                    this.setPackingSlipDetails(custPackingSlipTrans);
                }
            }
            else
            {
                CustPackingSlipSalesLink custPackingSlipSalesLink;
                CustInvoiceTrans custInvoiceTrans;

                while select custPackingSlipTrans
                    where custPackingSlipTrans.InventTransId == _custInvoiceTrans.InventTransId
                    exists join custPackingSlipSalesLink
                        where custPackingSlipTrans.PackingSlipId == custPackingSlipSalesLink.PackingSlipId
                    notexists join custInvoiceTrans
                        where custInvoiceTrans.RecId == custPackingSlipTrans.InvoiceTransRefRecId
                {
                    this.setPackingSlipDetails(custPackingSlipTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingSlipDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the packing slip details.
    /// </summary>
    /// <param name = "_custPackingSlipTrans">
    ///     An instance of <c>CustPackingSlipTrans</c> table buffer.
    /// </param>
    [Wrappable(true)]
    protected final void setPackingSlipDetails(CustPackingSlipTrans _custPackingSlipTrans)
    {
        str packingSlipLabelDetails;
        hasCustPackingSlipTrans = true;

        packingSlipLabelDetails = SysLabel::labelId2String2(literalstr('@SYS322353'), custTransLanguageId);
        
        packingSlipDetails += strFmt(packingSlipLabelDetails, strFmtByLanguage(custTransLanguageId, '{0:N}', _custPackingSlipTrans.Qty),
            _custPackingSlipTrans.PackingSlipId,
            strFmtByLanguage(custTransLanguageId, '{0:d}', _custPackingSlipTrans.DeliveryDate));

        packingSlipDetails += '\n';
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRDeliveryMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the delivery mode or nothing depending on the lines being invoiced
    /// and their addresses.
    /// </summary>
    /// <returns>
    /// This is the delivery mode if there is only one.
    /// </returns>
    /// <remarks>
    /// "Various" when there are more than one delivery mode.
    /// </remarks>
    private str MCRDeliveryMode()
    {
        If (this.MCRInvoiceHasMultipleDeliveryModes(CustInvoiceJour.InvoiceId, CustInvoiceJour.DlvMode))
        {
            return "@MCR12703";
        }
        else
        {
            return CustInvoiceJour.DlvMode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>MCRInvoiceHasMultipleDeliveryModes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the invoice had multiple delivery mode.
    /// </summary>
    /// <param name="_invoiceID">
    /// This is the invoice ID.
    /// </param>
    /// <param name="_dlvMode">
    /// This id the delivery mode.
    /// </param>
    /// <returns>
    /// A <c>boolean</c> value that indicating whether invoice has multiple delivery mode.
    /// </returns>
    private boolean MCRInvoiceHasMultipleDeliveryModes(InvoiceID _invoiceID, CustDlvModeID _dlvMode)
    {
        CustInvoiceTrans tCustInvoiceTrans;
        select firstonly tCustInvoiceTrans
         where tCustInvoiceTrans.InvoiceID == _invoiceID
            && tCustInvoiceTrans.MCRDlvMode != _dlvMode
            && tCustInvoiceTrans.MCRDlvMode != "";

        If (tCustInvoiceTrans)
        {
            return True;
        }
        else
        {
            return False;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrField</Name>
				<Source><![CDATA[
    private str ocrField(CustInvoiceJour _custInvoiceJour)
    {
        return moneyTransferSlip.ocrField(_custInvoiceJour.InvoiceAccount, _custInvoiceJour.InvoiceId,
                                            strLen(int2str(NumberSeq::highest(SalesParameters::numRefInvoiceId().NumberSequenceId))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>ocrLine_FI</Name>
				<Source><![CDATA[
    private str ocrLine_FI(CustInvoiceJour _custInvoiceJour)
    {
        return moneyTransferSlip_FI.ocrLine(_custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceAmount, _custInvoiceJour.DueDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overdueFineTxt_FR</Name>
				<Source><![CDATA[
    private str overdueFineTxt_FR()
    {
        str overdueFineTxt;
        LanguageId languageId = custInvoiceJour.LanguageId ? custInvoiceJour.LanguageId : infolog.language();
        TransDate transDate = custInvoiceJour.DocumentDate ?
                                             custInvoiceJour.DocumentDate :
                                             custInvoiceJour.InvoiceDate;

        if (!isInvoiceCreditNote &&
            isoCountryCode == #isoFR &&
            custFormLetterDocument.DocuOverdueFineTxtInvoice_FR &&
            custFormLetterDocument.DocuOverdueFineNumOfDaysInvoice_FR &&
            custInvoiceJour.custInvoiceJour_FR().PrintOverdueFineTxt)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceFR00018, funcName());

            Label label = new Label(languageId);
            overdueFineTxt = strFmt(label.extractString(literalStr("@SYS4002111")),
                                    custFormLetterDocument.DocuOverdueFineTxtInvoice_FR,
                                    strFmtByLanguage(languageId, '{0:d}', transDate + custFormLetterDocument.DocuOverdueFineNumOfDaysInvoice_FR));
        }

        return overdueFineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packagingMaterialText</Name>
				<Source><![CDATA[
    private TempStr packagingMaterialText(CustInvoiceJour _custInvoiceJour)
    {
        if (CustTable::find(_custInvoiceJour.InvoiceAccount).PackMaterialFeeLicenseNum)
        {
            return "@SYS73137";
        }
        else
        {
            return "@SYS73138";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packagingMaterialWeights</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds packaging weight information to <c>SalesInvoiceTmp</c>
    /// </summary>
    /// <param name = "_custInvoiceJour">The current <c>CustInvoiceJour</c>.</param>
    protected void packagingMaterialWeights(CustInvoiceJour _custInvoiceJour)
    {
        if (custParameters.PackagingWeightOnInvoice)
        {
            RecordSortedList recordSortedList = TmpPackMaterialFeeSum::calcPackMaterialWeights(_custInvoiceJour.InvoiceId,
                                                                                               _custInvoiceJour.InvoiceDate);

            if (salesInvoiceJournalPrint && salesInvoiceJournalPrint.parmProforma())
            {
                ttsbegin;
                InventPackagingMaterialTrans::deleteForInvoice(_custInvoiceJour.InvoiceId, _custInvoiceJour.InvoiceDate);
                ttscommit;
            }
            int i = recordSortedList.len();
            recordSortedList.first(tmpPackMaterialFeeSum);
            for (i=1; i <= recordSortedList.len(); i++)
            {
                if (tmpPackMaterialFeeSum.PackagingWeight != 0)
                {
                    showPackingMaterial = true;
                    this.insertIntoSalesInvoiceTmp(_custInvoiceJour, null, null, null, null, null);
                    showPackingMaterial = false;
                }
                recordSortedList.next(tmpPackMaterialFeeSum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentId2_PaymentId3_CH</Name>
				<Source><![CDATA[
    private str paymentId2_PaymentId3_CH()
    {
        return strFmt('%1 %2', moneyTransferSlip_CH.ocr_PaymentId2(), moneyTransferSlip_CH.ocr_PaymentId3());
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentReference</Name>
				<Source><![CDATA[
    private PaymReference paymentReference(CustInvoiceJour _custInvoiceJour)
    {
        PaymReference paymRef = #emptyString;

        if (isoCountryCode == #isoFI)
        {
            paymRef = _custInvoiceJour.custTrans().PaymReference;
        }

        else if (moneyTransferSlip_BE)
        {
            paymRef = moneyTransferSlip_BE.initPaymId(_custInvoiceJour);
        }
        return paymRef;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStubDueDate</Name>
				<Source><![CDATA[
    private str paymentStubDueDate(CustInvoiceJour _custInvoiceJour)
    {
        str paymentStubDueDate = #emptyString;

        if (!isInvoiceCreditNote && !_custInvoiceJour.PaymentSched)
        {
            paymentStubDueDate = strFmt('%1 %2',"@SYS21703",date2str(_custInvoiceJour.DueDate, -1, -1, -1, -1, -1, -1 ,DateFlags::FormatAll));
        }

        return paymentStubDuedate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentStubInvoiceId</Name>
				<Source><![CDATA[
    private str paymentStubInvoiceId(CustInvoiceJour _custInvoiceJour)
    {
        CustInvoiceId custInvoiceId = #emptyString;

        if (!isInvoiceCreditNote)
        {
            custInvoiceId = strFmt('%1: %2',"@SYS12128",_custInvoiceJour.InvoiceId);
        }

        return custInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBackorders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds backorders information to <c>SalesInvoiceTmp</c>.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current <c>CustInvoiceJour</c> record.</param>
    /// <returns>true if backorders are tracked, validated and information is added, otherwise false.</returns>
    protected boolean printBackorders(CustInvoiceJour _custInvoiceJour)
    {
        boolean ok;
        CustInvoiceBackorderLine custInvoiceBackorderLine;

        backOrderName = "";

        if (this.isPrintBackorderCancelled())
        {
            return false;
        }

        while select custInvoiceBackorderLine
                index hint InvoiceIdx
                where custInvoiceBackorderLine.SalesId == _custInvoiceJour.SalesId
                   && custInvoiceBackorderLine.InvoiceId == _custInvoiceJour.InvoiceId
                   && custInvoiceBackorderLine.InvoiceDate == _custInvoiceJour.InvoiceDate
                   && custInvoiceBackorderLine.NumberSequenceGroup == _custInvoiceJour.NumberSequenceGroup
        {
            ok = this.validatePrintBackorderLine(_custInvoiceJour, custInvoiceBackorderLine);

            if (ok)
            {
                backOrderItemId = custInvoiceBackorderLine.ItemId;
                backOrderName = custInvoiceBackorderLine.Name;

                backOrderSalesUnit = this.getSalesUnitText(custInvoiceBackorderLine.SalesUnit, _custInvoiceJour.LanguageId);

                backOrderQuantity = custInvoiceBackorderLine.QtyBackorderSales;
                backOrderConfirmedDeliveryDate = custInvoiceBackorderLine.ConfirmedDlv;

                this.insertIntoSalesInvoiceTmp(_custInvoiceJour, null, null, null, null
                    // <GEECZ>
                    , null
                    // </GEECZ>
                    );

                backOrderName = #emptyString;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintBackorderCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if print backorder is cancelled.
    /// </summary>
    /// <returns>
    /// true if print backorder is cancelled; otherwise, false.
    /// </returns>
    protected boolean isPrintBackorderCancelled()
    {
        return (custFormLetterParameters.TrackBackorderInvoice == BackorderTracking::NoTracking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePrintBackorderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if print backorder line is valid.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record for use.
    /// </param>
    /// <param name = "_custInvoiceBackorderLine">
    /// A <c>CustInvoiceBackorderLine</c> record for use.
    /// </param>
    /// <returns>
    /// true is print backorder line is valid; otherwise, false.
    /// </returns>
    protected boolean validatePrintBackorderLine(CustInvoiceJour _custInvoiceJour, CustInvoiceBackorderLine _custInvoiceBackorderLine)
    {
        boolean ok;

        if ((custFormLetterParameters.TrackBackorderInvoice == BackorderTracking::OnlyBackorders
                && _custInvoiceBackorderLine.ConfirmedDlv <= _custInvoiceJour.InvoiceDate)
                || custFormLetterParameters.TrackBackorderInvoice == BackorderTracking::NotDelivered)
        {
            ok = true;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCustPackingSlipTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds packing slips information to <c>SalesInvoiceTmp</c>.
    /// </summary>
    /// <param name = "_custInvoiceJour">The current <c>CustInvoiceJour</c> record.</param>
    /// <param name = "_custInvoiceTrans">The current <c>CustInvoiceTrans</c> record.</param>
    protected void printCustPackingSlipTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        if (hasCustPackingSlipTrans)
        {
            showCustPackingSlipTrans = true;
            this.insertIntoSalesInvoiceTmp(_custInvoiceJour, _custInvoiceTrans, null, null, null
                    // <GEECZ>
                    , null
                    // </GEECZ>
                    );
            showCustPackingSlipTrans = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    protected str printDimHistory(CustInvoiceTrans _custInvoiceTrans, CustInvoiceJour _custInvoiceJour)
    {
        SalesInvoiceDPDimHistoryBuilder builder = SalesInvoiceDPDimHistoryBuilder::construct();
        builder.parmIsProforma(salesInvoiceJournalPrint && salesInvoiceJournalPrint.parmProforma());
        builder.parmCustInvoiceJour(_custInvoiceJour);
        builder.parmCustInvoiceTrans(_custInvoiceTrans);
        builder.parmInventDimSetup(inventDimSetup);
        builder.parmDefaultInventDim(inventDim);
        return builder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loops through miscellaneous charges and computes the total markup amount.
    /// </summary>
    /// <param name="_custInvoiceTrans">
    /// A record buffer of <c>CustInvoiceTrans</c> table for the current sales invoice.
    /// </param>
    /// <param name="_salesInvoice">
    /// A <c>SalesInvoiceTmp</c> record for the current sales item.
    /// </param>
    /// <remarks>
    /// This method reads all the markup charges and computes the total markup amount.
    /// If markup charges are present, the related values are set in salesInvoice.
    /// </remarks>
    private void setMarkupTrans(CustInvoiceTrans _custInvoiceTrans, SalesInvoiceTmp _salesInvoice)
    {
        AmountCur markupAmt = 0.0;

        queryRun tradeLoopTrans = new tradeLoopTrans(_custInvoiceTrans, tableNum(markupTrans)).buildQueryRun();

        while (tradeLoopTrans.next())
        {
            MarkupTrans markupTransLocal = tradeLoopTrans.get(tableNum(markupTrans));

            // Filter out ledger to Ledger.
            if (!(markupTransLocal.markuptable().CustType == MarkupType::LedgerAccount &&
                markupTransLocal.markuptable().VendType == MarkupType::LedgerAccount))
            {
                _salesInvoice.MCRMarkupValue = 1;
                markupAmt += markupTransLocal.CalculatedAmount;
            }
        }
        _salesInvoice.MCRMarkupCalculatedAmount = markupAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic and will be called by the SSRS
    /// at runtime. The method will compute data and populate the data tables that will be returned to the
    /// SSRS. Note that this is a framework class. Customizing this class can cause problems with future
    /// upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendInventDimLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets inventory dimension value to be assigned to invoice line.
    /// </summary>
    /// <param name = "_custInvoiceTrans">The current <c>CustInvoiceTrans</c> record.</param>
    protected void sendInventDimLine(CustInvoiceTrans _custInvoiceTrans)
    {
        if (inventDimReport.isInventDimLine() || inventDimReport.isInventDimItemId())
        {
            inventDim = InventDim::find(_custInvoiceTrans.InventDimId);
            isInventDimVisible =true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesInvoicePackageDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the <c>SalesInvoiceLocalizationTmp</c> table with package details.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The <c>CustInvoiceJour</c> record that has the invoice information.
    /// </param>
    protected void setSalesInvoicePackageDetail(CustInvoiceJour _custInvoiceJour)
    {
        PlInventPackageTrans inventPackageTrans;
        PlInventPackageTable inventPackageTable;

        while select PackageId, sum(Qty) from inventPackageTrans
            group by PackageId
            where inventPackageTrans.SalesId == _custInvoiceJour.SalesId &&
                    inventPackageTrans.InvoiceId == _custInvoiceJour.InvoiceId &&
                    inventPackageTrans.InvoiceDate == _custInvoiceJour.InvoiceDate &&
                    !inventPackageTrans.TransDate
            outer join Description from inventPackageTable
                group by Description
                where inventPackageTable.PackageId == inventPackageTrans.PackageId
        {
            salesInvoiceLocalizationTmp.PackageId = inventPackageTrans.PackageId;
            salesInvoiceLocalizationTmp.PackageDescription = inventPackageTable.Description;
            salesInvoiceLocalizationTmp.PackageQuantity = inventPackageTrans.Qty;
            salesInvoiceLocalizationTmp.PackageDepositAmount = inventPackageTrans.DepositAmount;

            this.insertIntoSalesInvoiceLocalizationTmp(_custInvoiceJour, null, null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that the <c>createdTransactionId</c> ID of inserted record differs
    /// from default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        salesInvoiceTmp.setConnection(this.parmUserConnection());
        salesInvoiceHeaderFooterTmp.setConnection(this.parmUserConnection());
        salesInvoicePaymentStubTmp.setConnection(this.parmUserConnection());

        if (conFind(#easternEuropeAll, isoCountryCode))
        {
            salesInvoiceLocalizationTmp.setConnection(this.parmUserConnection());
        }

        if (isoCountryCode == #isoIN)
        {
            salesInvoiceTmp_IN.setConnection(this.parmUserConnection());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTaxInvoiceTotal</Name>
				<Source><![CDATA[
    private void sumTaxInvoiceTotal(CustInvoiceTrans _custInvoiceTrans)
    {
        totalSalesBalance += _custInvoiceTrans.LineAmount;
        totalDiscount += _custInvoiceTrans.LineDisc;
        totalSalesTax += _custInvoiceTrans.TaxAmount;
        totalMiscCharges += MarkupTrans::findValue(_custInvoiceTrans.TableId,_custInvoiceTrans.RecId).Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxableBalanceEuro</Name>
				<Source><![CDATA[
    private TaxTaxableAmountCur taxableBalanceEuro(CustInvoiceJour _custInvoiceJour)
    {
        return _custInvoiceJour.taxableBalanceEuro(this.tmpTaxWorkTrans(_custInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxFreeBalanceEuro</Name>
				<Source><![CDATA[
    private TaxTaxFreeAmountCur taxFreeBalanceEuro(CustInvoiceJour _custInvoiceJour)
    {
        return _custInvoiceJour.taxFreeBalanceEuro(this.tmpTaxWorkTrans(_custInvoiceJour));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves temporary tax transactions from the temporary <c>TmpTaxWorkTrans</c> table that relates
    /// to the <c>CustInvoiceJour</c> specified in the parameter.
    /// </summary>
    /// <param name = "_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record for use.
    /// </param>
    /// <returns>
    /// The temporary tax transactions from the temporary <c>TmpTaxWorkTrans</c> table relates to the
    /// <c>CustInvoiceJour</c> specified in the parameter.
    /// </returns>
    protected TmpTaxWorkTrans tmpTaxWorkTrans(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.isProforma())
        {
            if (formletterProformaPrint)
            {
                return formletterProformaPrint.tmpTaxWorkTrans(_custInvoiceJour.RecId);
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSalesFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the packed class and unpacks it.
    /// </summary>
    private void unpackSalesFormLetter()
    {
        SRSTmpDataStore srsTmpDataStore;

        if (formLetterRecId)
        {
            ttsbegin;
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                salesInvoiceJournalPrint = SalesInvoiceJournalPrint::construct();
                salesInvoiceJournalPrint.unpack(srsTmpDataStore.Value);
                srsTmpDataStore.delete();

                formletterProformaPrint = FormletterProformaPrint::construct();
                formletterProformaPrint.unpack(salesInvoiceJournalPrint.parmFormletterProformaPrintPacked());
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustInvoiceJour_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the table <c>CustInvoiceJour</c>
    /// </summary>
    private void updateCustInvoiceJour_TH()
    {
        TaxTrans taxTransLocal;
        InventTransOrigin inventTransOriginLocal;

        if (itemType == ItemType::Item)
        {
            select sum(TaxBaseAmount), sum(TaxBaseQty), sum(TaxAmount)
                from taxTransLocal
                    where taxTransLocal.Voucher == custInvoiceJour.LedgerVoucher
                        && taxTransLocal.TransDate == custInvoiceJour.InvoiceDate
                exists join RecId from inventTransOriginLocal
                    where taxTransLocal.InventTransId == inventTransOriginLocal.InventTransId;
        }
        else
        {
            select sum(TaxBaseAmount), sum(TaxBaseQty), sum(TaxAmount)
                from taxTransLocal
                    where taxTransLocal.Voucher == custInvoiceJour.LedgerVoucher
                        && taxTransLocal.TransDate == custInvoiceJour.InvoiceDate
                notexists join RecId from inventTransOriginLocal
                    where taxTransLocal.InventTransId == inventTransOriginLocal.InventTransId;
        }

        custInvoiceJour.SalesBalance = -taxTransLocal.TaxBaseAmount;
        custInvoiceJour.SumTax = -taxTransLocal.TaxAmount;
        custInvoiceJour.InvoiceAmount = custInvoiceJour.SalesBalance + custInvoiceJour.SumTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxAmtByProdType_TH</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates tax amount according to prod type.
    /// </summary>
    /// <param name="_taxCode">
    /// The field TaxCode is used to find the specified record
    /// </param>
    private void updateTaxAmtByProdType_TH(TaxCode _taxCode)
    {
        TaxTrans taxTransLocal;
        CustInvoiceTrans custInvoiceTransLocal;
        InventTable inventTableLocal;

        select sum(TaxBaseAmount), sum(TaxBaseQty), sum(TaxAmount)
            from taxTransLocal
                where taxTransLocal.Voucher == custInvoiceJour.LedgerVoucher
                    && taxTransLocal.TransDate == custInvoiceJour.InvoiceDate
                    && taxTransLocal.TaxCode == _taxCode
            join RecId from custInvoiceTransLocal
                where taxTransLocal.SourceTableId == custInvoiceTransLocal.TableId
                    && taxTransLocal.SourceRecId == custInvoiceTransLocal.RecId
            join RecId from inventTableLocal
                where inventTableLocal.ItemId == custInvoiceTransLocal.ItemId
                    && inventTableLocal.ItemType == itemType;

        taxAmount = -taxTransLocal.TaxAmount;
        taxBaseAmount = -taxTransLocal.TaxBaseAmount;
        taxBaseQty = taxTransLocal.TaxBaseQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useExistingReportData</Name>
				<Source><![CDATA[
    protected boolean useExistingReportData()
    {
        RecId jourRecId = this.parmDataContract().parmRecordId();
        CreatedTransactionId createdTransactionId = this.parmDataContract().parmCreatedTransactionId();
        LanguageId languageId = this.parmDataContract().parmLanguageId();
        SalesInvoiceTmp localSalesInvoiceTmp;
        SalesInvoiceTmp_IN localSalesInvoiceTmp_IN;
        SalesInvoicePaymentStubTmp localSalesInvoicePaymentStubTmp;
        SalesInvoiceLocalizationTmp localSalesInvoiceLocalizationTmp;
        GiroReportTmp giroReportTmp;
        boolean isDataCreated;

        // <GTH>
        TaxUnrealizedDocuSetLine taxUnrealizedDocuSetLine;
        boolean                  isPrintDocumentSet = false;
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            SalesInvoiceContract salesInvoiceContract = this.parmDataContract() as SalesInvoiceContract;

            select firstonly recId from taxUnrealizedDocuSetLine
                where taxUnrealizedDocuSetLine.PrintHeader == salesInvoiceContract.parmPrintHeader();

            isPrintDocumentSet = (taxUnrealizedDocuSetLine.RecId != 0);
        }
        // </GTH>

        SalesInvoiceHeaderFooterTmp localSalesInvoiceHeaderFooterTmp = SalesInvoiceHeaderFooterTmp::findJourRecId(jourRecId, createdTransactionId, languageId);

        if (localSalesInvoiceHeaderFooterTmp
            // <GTH>
            && !isPrintDocumentSet
            && !CustParameters::find().EnableSubstitutionInvoices_TH    // in case of substitution invoices, we must not use existing report data because
                                                                        // new substitution could be added and it must be printed instead of saved data
                                                                        // </GTH>
                                                                        )
        {
            isDataCreated = true;
            // Keeps track of current session's transaction id
            // Use to delete header / lines for temp tables when report is re-run in seperate transactions like multiple users accessing report at the same time
            int64 transactionIdForCurrentSession = appl.curTransactionId();

            // The report data is already created so use it. This is the proforma scenario.
            RecordSortedList recordList = new RecordSortedList(tableNum(SalesInvoiceHeaderFooterTmp));
            recordList.sortOrder(fieldNum(SalesInvoiceHeaderFooterTmp, RecId));
            recordList.ins(localSalesInvoiceHeaderFooterTmp);

            if (localSalesInvoiceHeaderFooterTmp.CreatedTransactionId == transactionIdForCurrentSession)
            {
                localSalesInvoiceHeaderFooterTmp.delete(); //the created data is copied so it should be deleted.
            }

            recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.

            // Copy report data for SalesInvoiceTmp
            recordList = new RecordSortedList(tableNum(SalesInvoiceTmp));
            recordList.sortOrder(fieldNum(SalesInvoiceTmp, RecId));

            while select localSalesInvoiceTmp
                where localSalesInvoiceTmp.JournalRecId == jourRecId
                    && localSalesInvoiceTmp.CreatedTransactionId == createdTransactionId
            {
                recordList.ins(localSalesInvoiceTmp);
            }

            delete_from localSalesInvoiceTmp //the created data is copied so it should be deleted.
                where localSalesInvoiceTmp.JournalRecId == jourRecId
                    && localSalesInvoiceTmp.CreatedTransactionId == transactionIdForCurrentSession;

            recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.

            // Copy report data for SalesInvoiceTmp_IN
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                recordList = new RecordSortedList(tableNum(SalesInvoiceTmp_IN));
                recordList.sortOrder(fieldNum(SalesInvoiceTmp_IN, RecId));

                while select localSalesInvoiceTmp_IN
                    where localSalesInvoiceTmp_IN.JournalRecId == jourRecId
                        && localSalesInvoiceTmp_IN.CreatedTransactionId == createdTransactionId
                {
                    recordList.ins(localSalesInvoiceTmp_IN);
                }

                delete_from localSalesInvoiceTmp_IN //the created data is copied so it should be deleted.
                    where localSalesInvoiceTmp_IN.JournalRecId == jourRecId
                        && localSalesInvoiceTmp_IN.CreatedTransactionId == transactionIdForCurrentSession;

                recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.
            }

            // Copy report data for SalesInvoicePaymentStubTmp
            recordList = new RecordSortedList(tableNum(SalesInvoicePaymentStubTmp));
            recordList.sortOrder(fieldNum(SalesInvoicePaymentStubTmp, RecId));

            while select localSalesInvoicePaymentStubTmp
                where localSalesInvoicePaymentStubTmp.JournalRecId == jourRecId
                    && localSalesInvoicePaymentStubTmp.CreatedTransactionId == createdTransactionId
            {
                recordList.ins(localSalesInvoicePaymentStubTmp);
            }

            delete_from localSalesInvoicePaymentStubTmp //the created data is copied so it should be deleted.
                where localSalesInvoicePaymentStubTmp.JournalRecId == jourRecId
                    && localSalesInvoicePaymentStubTmp.CreatedTransactionId == transactionIdForCurrentSession;

            recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.

            // Copy report data for GiroReportTmp
            recordList = new RecordSortedList(tableNum(GiroReportTmp));
            recordList.sortOrder(fieldNum(GiroReportTmp, RecId));

            while select giroReportTmp
                where giroReportTmp.JournalRecId == jourRecId
                    && giroReportTmp.CreatedTransactionId == createdTransactionId
            {
                recordList.ins(giroReportTmp);
            }

            delete_from giroReportTmp //the created data is copied so it should be deleted.
                where giroReportTmp.JournalRecId == jourRecId
                    && giroReportTmp.CreatedTransactionId == transactionIdForCurrentSession;

            recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.

            // Copy report data for SalesInvoiceLocalizationTmp
            if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
            {
                recordList = new RecordSortedList(tableNum(SalesInvoiceLocalizationTmp));
                recordList.sortOrder(fieldNum(SalesInvoiceLocalizationTmp, RecId));

                while select localSalesInvoiceLocalizationTmp
                    where localSalesInvoiceLocalizationTmp.JournalRecId == jourRecId
                        && localSalesInvoiceLocalizationTmp.CreatedTransactionId == createdTransactionId
                {
                    recordList.ins(localSalesInvoiceLocalizationTmp);
                }

                delete_from localSalesInvoiceLocalizationTmp //the created data is copied so it should be deleted.
                    where localSalesInvoiceLocalizationTmp.JournalRecId == jourRecId
                        && localSalesInvoiceLocalizationTmp.CreatedTransactionId == transactionIdForCurrentSession;

                recordList.insertDatabase(this.parmUserConnection()); //it is inserted within user connection so the framework will delete it automatically after the report is done.
            }
        }

        return isDataCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTReliefClause_MY</Name>
				<Source><![CDATA[
    private str getGSTReliefClause_MY(CustInvoiceJour _custInvoiceJour)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceMY00006, funcName());

        TaxGSTReliefCategory_MY reliefCategory;
        CustInvoiceTrans custInvoiceTransLocal;
        InventTableModule inventTableModule;
        TaxGSTReliefGroupData_MY reliefGroupData;

        container reliefItemNumberCon;
        container reliefScheduleCon;
        str reliefClauseText;

        while select ReliefItemNumber, ReliefSchedule from reliefCategory
            order by ReliefCategoryId
            exists join inventTableModule
                where inventTableModule.TaxGSTReliefCategory_MY == reliefCategory.RecId
                    && inventTableModule.ModuleType == ModuleInventPurchSales::Sales
            exists join custInvoiceTransLocal
                where custInvoiceTransLocal.ItemId == inventTableModule.ItemId
                    && custInvoiceTransLocal.InvoiceId == _custInvoiceJour.InvoiceId
                    && custInvoiceTransLocal.InvoiceDate == _custInvoiceJour.InvoiceDate
                    && custInvoiceTransLocal.NumberSequenceGroup == _custInvoiceJour.NumberSequenceGroup
                    && custInvoiceTransLocal.SalesId == _custInvoiceJour.SalesId
            exists join reliefGroupData
                where reliefGroupData.TaxGSTReliefCategory_MY == reliefCategory.RecId
                    && reliefGroupData.TaxGSTReliefGroupHeading_MY == reliefGroupRecId
        {
            reliefItemNumberCon += reliefCategory.ReliefItemNumber;
            reliefScheduleCon += reliefCategory.ReliefSchedule;
        }

        if (reliefItemNumberCon && reliefScheduleCon)
        {
            reliefClauseText = strFmt(
                "@SYP4860801",
                con2Str(reliefItemNumberCon),
                con2Str(reliefScheduleCon));
        }

        return reliefClauseText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInvoiceTransRecords</Name>
				<Source><![CDATA[
    protected void processCustInvoiceTransRecords(QueryRun _tradeLoopTrans)
    {
        super(_tradeLoopTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBuyerInvoiceAddress</Name>
				<Source><![CDATA[
    private str getBuyerInvoiceAddress(DirPartyRecId recId)
    {
        LogisticsAddressing ret = '';
        LogisticsPostalAddress postalAddress;
        DirPartyLocation partyLocation;

        select firstonly postalAddress
            exists join partyLocation
                where partyLocation.Party == recId
                    && postalAddress.Location == partyLocation.Location
                    && partyLocation.IsPrimary == false
                    && partyLocation.IsRoleInvoice == true ;
        

            ret = postalAddress.Address;
       
       
      
        

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overrideAddressAndPaymentCondition</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Override address and payment condition fields to fetch in sales invoice header language.
    /// </summary>
    public void overrideAddressAndPaymentCondition(CustInvoiceJour _custInvoiceJour)
    {
        if (_custInvoiceJour.FixedDueDate)
        {
            cachedPaymentCondition = date2StrUsr(_custInvoiceJour.FixedDueDate, DateFlags::FormatAll);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoES]))
        {
            cachedPaymentCondition = date2StrUsr(_custInvoiceJour.DueDate, DateFlags::FormatAll);
        }
        else
        {
            cachedPaymentCondition = PaymTerm::txt(_custInvoiceJour.Payment, _custInvoiceJour.salesTable().LanguageId);
        }

        cachedInvoicingAddress = DirUtility::replaceAddressTokenLanguage(LogisticsPostalAddress::findRecId(_custInvoiceJour.InvoicePostalAddress), _custInvoiceJour.salesTable().LanguageId);
        cachedCompanyInfoAddress = DirUtility::replaceAddressTokenLanguage(companyInfo.postalAddress(), _custInvoiceJour.salesTable().LanguageId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>