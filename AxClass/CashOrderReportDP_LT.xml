<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashOrderReportDP_LT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CashOrderReportDP_LT</c> class extends the base class to add Lithuania specific functionality
///     for the Lithuanian cash order report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashOrder))
]
class CashOrderReportDP_LT extends CashOrderReportDP
{
    Name currentEmployeeName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmountInWords</Name>
				<Source><![CDATA[
    protected TempStr getAmountInWords()
    {
        return RNumDateInWordConverter::construct().numeralsToCurrency(cashOrderLines.AmountCur, cashTrans.CurrencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnalysisNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the analysis code dimension value for the transaction.
    /// </summary>
    /// <returns>
    ///     The analysis code dimension value.
    /// </returns>
    protected DimensionValue getAnalysisNum()
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(transType.analysisDimensionValueId());

        return dimensionAttributeValue ? dimensionAttributeValue.getCode() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookKeeperName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the book keeper name.
    /// </summary>
    /// <returns>
    ///     Name of the employee running the report.
    /// </returns>
    protected EmplName getBookKeeperName()
    {
        return currentEmployeeName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashierName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the cashier's name.
    /// </summary>
    /// <returns>
    ///     Name of the cashier.
    /// </returns>
    protected Name getCashierName()
    {
        Name cashierName = transType.offCashierName();

        if (!cashierName)
        {
            cashierName = currentEmployeeName;
        }

        return cashierName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattedDate</Name>
				<Source><![CDATA[
    protected TempStr getFormattedDate()
    {
        #define.NumLength(2)
        return strfmt("@GLS107460",
                      year(cashTrans.TransDate),
                      mthname(mthofyr(cashTrans.TransDate)),
                      num2Str0(dayofmth(cashTrans.TransDate), #NumLength));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurposeNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the purpose code dimension value for the transaction.
    /// </summary>
    /// <returns>
    ///     The purpose code dimension value.
    /// </returns>
    protected DimensionValue getPurposeNum()
    {
        DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::find(transType.purposeDimensionValueId());

        return dimensionAttributeValue ? dimensionAttributeValue.getCode() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepresentativeName</Name>
				<Source><![CDATA[
    protected EmplName getRepresentativeName()
    {
        return transType.getRepresPersonName_LT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashOrderLinesTmp</Name>
				<Source><![CDATA[
    protected CashOrderLinesTmp initializeCashOrderLinesTmp()
    {
        CashOrderLinesTmp cashOrderLinesLocal   = super();

        cashOrderLinesLocal.DimAnalysisNum      = this.getAnalysisNum();
        cashOrderLinesLocal.DimPurposeNum       = this.getPurposeNum();
        cashOrderLinesLocal.ContactName         = transType.offAccountantName();
        cashOrderLinesLocal.BookKeeperName      = this.getBookKeeperName();
        cashOrderLinesLocal.PennyName           = CurrencyNameDeclension_RU::currencyPennyExt(cashTrans.CurrencyCode);
        cashOrderLinesLocal.RepresPersonCard_LT = cashTrans.RepresPersonCard_LT;
        cashOrderLinesLocal.DirectorName        = transType.offDirectorName();
        cashOrderLinesLocal.CashierName         = this.getCashierName();
        return cashOrderLinesLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        currentEmployeeName = HcmWorker::find(HcmWorkerLookup::currentWorker()).name();
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>