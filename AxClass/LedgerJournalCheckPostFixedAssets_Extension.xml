<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPostFixedAssets_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classstr(LedgerJournalCheckPost))]
public final class LedgerJournalCheckPostFixedAssets_Extension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runInternal</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void runInternal()
    {
        AssetBookInUseForPosting assetBookInUseForPosting;
        AssetParameters assetParameters = AssetParameters::find();

        LedgerJournalId journalNum = ledgerJournalTable.JournalNum;
        RecId batchJobId = this.getBatchJobId();

        try
        {
            if (ledgerJournalTable.JournalType == LedgerJournalType::Assets &&
                assetParameters.AssetBookInSingleUse)
            {
                assetBookInUseForPosting = this.checkLockingStatusForPosting();

                if(assetBookInUseForPosting.RecId  != 0)
                {
                    if (this.isBatchRetry(AssetBookInUseForPosting))
                    {
                        AssetBookInUseForPosting::deleteAssetBooksInSingleUseForJournal(journalNum);
                    }
                    else
                    {
                        throw error(strfmt("@FixedAssets:FA_AssetBookInSingleUseModeMessage",
                        assetBookInUseForPosting.AssetId,
                        assetBookInUseForPosting.BookId,
                        assetBookInUseForPosting.JournalNum));
                    }
                }
                else
                {
                    ttsbegin;

                    AssetBookInUseForPosting::insertRecordsForAssetBookInSingleUse(batchJobId, journalNum);

                    ttscommit;
                }
            }

            next runInternal();
        }

        finally
        {
            if (assetParameters.AssetBookInSingleUse)
            {
                ttsbegin;

                AssetBookInUseForPosting::deleteAssetBooksInSingleUseForJournal(journalNum);

                ttscommit;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchRetry</Name>
				<Source><![CDATA[
    private boolean isBatchRetry(AssetBookInUseForPosting _AssetBookInUseForPosting)
    {
        return BatchHeader::isExecutingInBatch() && this.getBatchJobId() == _AssetBookInUseForPosting.BatchJobId
            && ledgerJournalTable.JournalNum == _AssetBookInUseForPosting.JournalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchJobId</Name>
				<Source><![CDATA[
    private RecId getBatchJobId()
    {
        RecId batchJobId = 0;

        if (BatchHeader::isExecutingInBatch())
        {
            BatchHeader header = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            batchJobId = header.parmBatchHeaderId();
        }
        return batchJobId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLockingStatusForPosting</Name>
				<Source><![CDATA[
    private AssetBookInUseForPosting checkLockingStatusForPosting()
    {
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        LedgerJournalTrans ledgerJournalTrans;
        AssetBookInUseForPosting AssetBookInUseForPosting;

        select firstonly assetBookInUseForPosting
            join ledgerJournalTransAsset
            join ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            && ledgerJournalTrans.RecId == ledgerJournalTransAsset.RefRecId
            && assetBookInUseForPosting.AssetId == ledgerJournalTransAsset.AssetId
            && assetBookInUseForPosting.BookId == ledgerJournalTransAsset.BookId
            && ledgerJournalTransAsset.TransType == AssetTransTypeJournal::Depreciation
            && assetBookInUseForPosting.AssetBookInSingleUse == NoYes::Yes;

        return assetBookInUseForPosting;  
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>