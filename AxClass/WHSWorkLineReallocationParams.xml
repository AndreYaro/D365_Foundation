<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineReallocationParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineReallocationParams</c> class is responsible for retrieving the parameters needed for the work line reallocation.
/// </summary>
public class WHSWorkLineReallocationParams
{
    #WHSRF
    private WHSWorkLine         shortPickedWorkLine;
    private WHSWorkException    workException;
    private InventHandlingQty   initialWorkLineInventHandlingQty;
    private InventHandlingQty   inventHandlingQtyToReallocate;
    private InventHandlingQty   totalReallocatedInventHandlingQty;
    private boolean             fullQtyReallocationRequested;
    private WHSWorkUser         workUser;
    private InventHandlingQty   shortPickInventHandlingQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWorkLineReallocationParams construct()
    {
        return new WHSWorkLineReallocationParams();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineReallocationParams</c> instance based on the pass object.
    /// </summary>
    /// <param name = "_pass">The pass object to retrieve the parameters from</param>
    /// <returns>A new instance of the <c>WHSWorkLineReallocationParams</c> class<</returns>
    public static WHSWorkLineReallocationParams newFromPass(WhsrfPassthrough _pass)
    {
        WHSWorkLineReallocationParams workLineReallocationParms = WHSWorkLineReallocationParams::construct();

        workLineReallocationParms.initializeFromPass(_pass);

        return workLineReallocationParms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromPass</Name>
				<Source><![CDATA[
    private void initializeFromPass(WhsrfPassthrough _pass)
    {
        shortPickedWorkLine = WHSWorkLine::findByRecId(_pass.lookup(WHSWorkExecuteDisplayItemReallocationControls::ShortPickedWorkLineRecId));
        workException = WHSWorkException::find(_pass.lookup(#ShortPickReason), WHSExceptionType::ShortPick);
        initialWorkLineInventHandlingQty = _pass.lookupNum(WHSWorkExecuteDisplayItemReallocationControls::TotalWorkLineInventQty);
        totalReallocatedInventHandlingQty = _pass.lookupNum(WHSWorkExecuteDisplayItemReallocationControls::TotalReallocatedQty);
        shortPickInventHandlingQty = _pass.lookupNum(WHSWorkExecuteDisplayItemReallocationControls::InventPickQtyFromInitialLocation);
        inventHandlingQtyToReallocate = initialWorkLineInventHandlingQty - (totalReallocatedInventHandlingQty + shortPickInventHandlingQty);
        workUser = WHSWorkUser::find(_pass.lookupStr(#UserId));
        fullQtyReallocationRequested = workException.determineItemReallocationForWorkUser(workUser) == WHSItemReallocation::AutomaticAndManual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineReallocationParams</c> instance based on the work line.
    /// </summary>
    /// <param name = "_workLine">The work line to retrieve the parameters from</param>
    /// <param name = "_workException">The work exception code.</param>
    /// <param name = "_userId">The worker user ID.</param>
    /// <param name = "_initialQty">Initial work line quantity.</param>
    /// <param name = "_pickQty">Pick quantity.</param>
    /// <returns>A new instance of the <c>WHSWorkLineReallocationParams</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkLineReallocationParams newFromWorkLine(WHSWorkLine             _workLine,
                                                                WHSWorkExceptionCode    _workException,
                                                                WHSUserId               _userId,
                                                                Qty                     _initialQty,
                                                                Qty                     _pickQty)
    {
        WHSWorkLineReallocationParams workLineReallocationParms = WHSWorkLineReallocationParams::construct();

        workLineReallocationParms.initializeFromWorkLine(_workLine, _workException, _userId, _initialQty, _pickQty);

        return workLineReallocationParms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWorkLine</Name>
				<Source><![CDATA[
    private void initializeFromWorkLine(WHSWorkLine             _workLine,
                                        WHSWorkExceptionCode    _shortPickCode,
                                        WHSUserId               _userId,
                                        Qty                     _initialQty,
                                        Qty                     _pickQty)
    {
        shortPickedWorkLine                 = _workLine;
        workException                       = WHSWorkException::find(_shortPickCode, WHSExceptionType::ShortPick);
        initialWorkLineInventHandlingQty    = _initialQty;
        totalReallocatedInventHandlingQty   = 0;
        shortPickInventHandlingQty          = _pickQty;
        inventHandlingQtyToReallocate       = initialWorkLineInventHandlingQty - (totalReallocatedInventHandlingQty + shortPickInventHandlingQty);
        workUser                            = WHSWorkUser::find(_userId);
        fullQtyReallocationRequested        = workException.determineItemReallocationForWorkUser(workUser) == WHSItemReallocation::AutomaticAndManual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShortPickedWorkLine</Name>
				<Source><![CDATA[
    public WHSWorkLine getShortPickedWorkLine()
    {
        return shortPickedWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkException</Name>
				<Source><![CDATA[
    public WHSWorkException getWorkException()
    {
        return workException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialWorkLineInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventHandlingQty getInitialWorkLineInventHandlingQty()
    {
        return this.getInitialWorkLineInventHandlingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInitialWorkLineInventHandlingQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty getInitialWorkLineInventHandlingQuantity()
    {
        return initialWorkLineInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventQtyToReallocate</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the getInventHandlingQtyToReallocate method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty getInventQtyToReallocate()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), shortPickedWorkLine.ItemId);

        return this.getInventHandlingQuantityToReallocate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventHandlingQtyToReallocate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventHandlingQty getInventHandlingQtyToReallocate()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), shortPickedWorkLine.ItemId))
        {
            return this.getInventHandlingQuantityToReallocate();
        }

        return this.getInventQtyToReallocate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventHandlingQuantityToReallocate</Name>
				<Source><![CDATA[
    private InventHandlingQty getInventHandlingQuantityToReallocate()
    {
        return inventHandlingQtyToReallocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShortPickInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal InventHandlingQty getShortPickInventHandlingQty()
    {
        return this.getShortPickInventHandlingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShortPickInventHandlingQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty getShortPickInventHandlingQuantity()
    {
        return shortPickInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalReallocatedInventQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the getTotalReallocatedInventHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty getTotalReallocatedInventQty()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), shortPickedWorkLine.ItemId);

        return this.getTotalReallocatedInventHandlingQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalReallocatedInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public InventHandlingQty getTotalReallocatedInventHandlingQty()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), shortPickedWorkLine.ItemId))
        {
            return this.getTotalReallocatedInventHandlingQuantity();
        }

        return this.getTotalReallocatedInventQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalReallocatedInventHandlingQuantity</Name>
				<Source><![CDATA[
    private InventHandlingQty getTotalReallocatedInventHandlingQuantity()
    {
        return totalReallocatedInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkUser</Name>
				<Source><![CDATA[
    public WHSWorkUser getWorkUser()
    {
        return workUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFullQtyReallocationRequested</Name>
				<Source><![CDATA[
    public boolean getFullQtyReallocationRequested()
    {
        return fullQtyReallocationRequested;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>