<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundReceivingCompletedLoadLineProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInboundReceivingCompletedLoadLineProcessor</c> class is the abstract base class
/// for handling load line processing during inbound receiving completed.
/// </summary>
internal abstract class WHSInboundReceivingCompletedLoadLineProcessor
{
    private WHSLoadTable load;
    private boolean acceptQuantityExceptions;
    private Map packingSlipExistsForShipment = new Map(Types::String, Types::Enum);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLoad</Name>
				<Source><![CDATA[
    protected WHSLoadtable parmLoad(WHSLoadTable _load = load)
    {
        load = _load;
        return load;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptQuantityExceptions</Name>
				<Source><![CDATA[
    protected boolean parmAcceptQuantityExceptions(boolean _acceptQuantityExceptions = acceptQuantityExceptions)
    {
        acceptQuantityExceptions = _acceptQuantityExceptions;
        return acceptQuantityExceptions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDeliveryPolicy</Name>
				<Source><![CDATA[
    public static WHSInboundReceivingCompletedLoadLineProcessor initFromDeliveryPolicy(WHSLoadTable _load, boolean _acceptQuantityExceptions)
    {
        var deliveryPolicyAttribute = new WHSLoadDeliveryPolicyAttribute(_load.ReceivingCompletedDeliveryPolicy);
        var loadLineProcessor = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSInboundReceivingCompletedLoadLineProcessor), deliveryPolicyAttribute);
        
        loadLineProcessor.parmLoad(_load);
        loadLineProcessor.parmAcceptQuantityExceptions(_acceptQuantityExceptions);
        return loadLineProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLoadLinesForReceiptConfirmation</Name>
				<Source><![CDATA[
    public boolean processLoadLinesForReceiptConfirmation()
    {
        WHSLoadLine loadLine;

        while select forupdate loadLine
            where loadLine.LoadId == load.LoadId
        {
            if (!this.applyDeliveryPolicy(loadLine, loadLine.receivedInventoryQuantity()))
            {
                return false;
            }
        }

        return this.validatePostProcessing();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadLineProcessing</Name>
				<Source><![CDATA[
    protected boolean validateLoadLineProcessing(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        if (_receivedInventQuantityForLoadLine == _loadLine.InventQty)
        {
            return true;
        }
        
        if (!_loadLine.InventQty)
        {
            // Line with InventQty = 0 should not exist, but checking just in case
            // This would be infinite overdelivery, so rejecting
            return checkFailed(strFmt("@WAX1687", _loadLine.LoadId, _loadLine.ItemId));
        }

        str quantityExceptionMessage = this.validateUnderOverDeliveryOfLoadLine(_loadLine, _receivedInventQuantityForLoadLine);
        boolean validationPass = this.validateQuantityExceptionOccuredAndIsAllowed(quantityExceptionMessage);
            
        return validationPass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnderOverDeliveryOfLoadLine</Name>
				<Source><![CDATA[
    private str validateUnderOverDeliveryOfLoadLine(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        str ret = '';

        real result = ((_receivedInventQuantityForLoadLine - _loadLine.InventQty) / _loadLine.InventQty) * 100;

        if (result < 0 && abs(result) > _loadLine.UnderDeliveryPct)
        {
            ret = strFmt("@WAX1686", _loadLine.LoadId, _loadLine.ItemId);
        }

        if (result > 0 && result > _loadLine.OverDeliveryPct)
        {
            ret = strFmt("@WAX1687", _loadLine.LoadId, _loadLine.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantityExceptionOccuredAndIsAllowed</Name>
				<Source><![CDATA[
    private boolean validateQuantityExceptionOccuredAndIsAllowed(str _quantityExceptionMsg)
    {
        boolean quantityExceptionOccured = _quantityExceptionMsg != '';
        if (quantityExceptionOccured)
        {
            if (this.quantityExceptionsAreAllowed())
            {
                return true;
            }

            return checkFailed(_quantityExceptionMsg);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineQuantity</Name>
				<Source><![CDATA[
    protected void adjustLoadLineQuantity(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
        if (this.mustCreateReceivingWorkExceptionForQtyException(_loadLine))
        {
            WHSInboundReceivingWorkExceptionLogEntry::createLogEntry(_loadLine, _receivedInventQuantityForLoadLine);
        }

        this.adjustLoadLineQuantityToReceivedQuantity(_loadLine, _receivedInventQuantityForLoadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingStructureExistsForShipment</Name>
				<Source><![CDATA[
    private boolean packingStructureExistsForShipment(WHSLoadLine _loadLine)
    {
        if (!packingSlipExistsForShipment.exists(_loadLine.ShipmentId))
        {
            packingSlipExistsForShipment.insert(_loadLine.ShipmentId, this.determinePackingStructureExistsForShipment(_loadLine));
        }

        return packingSlipExistsForShipment.lookup(_loadLine.ShipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determinePackingStructureExistsForShipment</Name>
				<Source><![CDATA[
    private boolean determinePackingStructureExistsForShipment(WHSLoadLine _loadLine)
    {
        return _loadLine.ShipmentId &&
            (select firstonly RecId from WHSUOMStructure
                where WHSUOMStructure.ShipmentId == _loadLine.ShipmentId
                   && WHSUOMStructure.Module == WHSShipmentTable::moduleByInventTransType(_loadLine.InventTransType)).RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateReceivingWorkExceptionForQtyException</Name>
				<Source><![CDATA[
    private boolean mustCreateReceivingWorkExceptionForQtyException(WHSLoadLine _loadLine)
    {
        return this.packingStructureExistsForShipment(_loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineQuantityToReceivedQuantity</Name>
				<Source><![CDATA[
    private void adjustLoadLineQuantityToReceivedQuantity(WHSLoadLine _loadLine, InventHandlingQty _receivedInventHandlingQtyForLoadLine)
    {
        UnitIDBase fromUnit = WHSCatchWeightHelper::inventHandlingUnitId(_loadLine.ItemId);
        Qty receivedQtyForLoadLineInLoadUOM = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_loadLine.ItemId,
                                                                                                                    _loadLine.InventDimId,
                                                                                                                    _receivedInventHandlingQtyForLoadLine,
                                                                                                                    fromUnit,
                                                                                                                    _loadLine.uom,
                                                                                                                    NoYes::No,
                                                                                                                    NoYes::No);
        _loadLine.InventQty = _receivedInventHandlingQtyForLoadLine;
        _loadLine.Qty = receivedQtyForLoadLineInLoadUOM;

        _loadLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePostProcessing</Name>
				<Source><![CDATA[
    protected boolean validatePostProcessing()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>quantityExceptionsAreAllowed</Name>
				<Source><![CDATA[
    protected boolean quantityExceptionsAreAllowed()
    {
        return this.parmAcceptQuantityExceptions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDeliveryPolicy</Name>
				<Source><![CDATA[
    protected abstract boolean applyDeliveryPolicy(WHSLoadLine _loadLine, InventQty _receivedInventQuantityForLoadLine)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>