<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTransCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustomJournalTransCreate_RU extends RunBase
{
    CustomJournalTable_RU   customJournalTable;
    container               inventStatusReceiptCon;
    container               inventStatusIssueCon;

    TmpFrmVirtual           tmpFrmVirtualHeader;
    TmpFrmVirtual           tmpFrmVirtualLine;

    Set                     feaccMappingFailedSet;
    container               chosenStatusCon;

    private const str customPartitionDefaultSymbol = '0';
    private const int retryNum = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmountCur</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void calcAmountCur(CustomJournalTrans_RU _customJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItemParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void calcItemParameters(CustomJournalTrans_RU _customJournalTrans)
    {
        InventTable         inventTable;
        UnitOfMeasureSymbol unitIdInvent;

        if (_customJournalTrans.ItemId)
        {
            unitIdInvent                        = InventTableModule::find(_customJournalTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
            inventTable                         = InventTable::find(_customJournalTrans.ItemId);
            _customJournalTrans.ItemNetWeight   = InventTable::unitConvertValue(_customJournalTrans.ItemId,
                                                                                unitIdInvent,
                                                                                _customJournalTrans.UnitId,
                                                                                unitIdInvent,
                                                                                inventTable.NetWeight,
                                                                                _customJournalTrans.InventDimId) * _customJournalTrans.Qty;

            _customJournalTrans.ItemGrossWeight = InventTable::unitConvertValue(_customJournalTrans.ItemId,
                                                                                unitIdInvent,
                                                                                _customJournalTrans.UnitId,
                                                                                unitIdInvent,
                                                                                inventTable.grossWeight(),
                                                                                _customJournalTrans.InventDimId) * _customJournalTrans.Qty;

            _customJournalTrans.Volume          = InventTable::unitConvertValue(_customJournalTrans.ItemId,
                                                                                unitIdInvent,
                                                                                _customJournalTrans.UnitId,
                                                                                unitIdInvent,
                                                                                inventTable.UnitVolume,
                                                                                _customJournalTrans.InventDimId) * _customJournalTrans.Qty;

            if (!_customJournalTrans.ItemNetWeight || !_customJournalTrans.ItemGrossWeight)
            {
                checkFailed("@GLS115413");
            }
            if (!_customJournalTrans.Volume)
            {
                checkFailed("@GLS115415");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyAvailablePacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates available quantities for inclusion into customs journal lines.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction Lot ID to look at.
    /// </param>
    /// <param name="_invoiceId">
    /// The invoice to look at.
    /// </param>
    /// <param name="_invoiceDate">
    /// The invoice date to look at.
    /// </param>
    /// <param name="_packingSlipId">
    /// The packing slip to look at.
    /// </param>
    /// <returns>
    /// A <c>container</c> consisting of inventory quantity and Catch-weight quantity available for inclusion into customs journal.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container calcQtyAvailablePacked(InventTransId _inventTransId,
                                            InvoiceId     _invoiceId      = '',
                                            InvoiceDate   _invoiceDate    = dateNull(),
                                            PackingSlipId _packingSlipId  = '')
    {
        QueryRun                queryRun;
        Query                   query;
        QueryBuildDataSource    qbds;

        InventTrans             inventTrans;
        CustomJournalTrans_RU   customJournalTransLoc;
        CustomJournalTable_RU   customJournalTableLoc;
        Qty                     qty;
        PdsCWInventQty          pdsCWQty;

        query = new Query();

        qbds = query.addDataSource(tablenum(InventTrans));

        qbds = qbds.addDataSource(tablenum(InventTransOrigin));
        qbds.addLink(fieldnum(InventTrans, InventTransOrigin), fieldnum(InventTransOrigin, RecId));
        qbds.joinMode(JoinMode::ExistsJoin);

        qbds.addRange(fieldnum(InventTransOrigin, InventTransId)).value(queryValue(_inventTransId));

        qbds = query.dataSourceTable(tablenum(InventTrans));

        if (_invoiceId)
        {
            qbds.addRange(fieldnum(InventTrans, DateFinancial)).value(queryValue(_invoiceDate));
            qbds.addRange(fieldnum(InventTrans, InvoiceId)).value(queryValue(_invoiceId));
        }

        if (_packingSlipId)
        {
            qbds.addRange(fieldnum(InventTrans, PackingSlipId)).value(queryValue(_packingSlipId));
        }

        qbds.addRange(fieldnum(InventTrans, StatusReceipt)).value(conlen(inventStatusReceiptCon) ? con2Str(inventStatusReceiptCon) : SysQuery::valueEmptyString());
        qbds.addRange(fieldnum(InventTrans, StatusIssue)).value(conlen(inventStatusIssueCon) ? con2Str(inventStatusIssueCon) : SysQuery::valueEmptyString());

        qbds.orderMode(OrderMode::GroupBy);
        qbds.addSortField(fieldnum(InventTrans, ItemId));
        qbds.addSelectionField(fieldnum(InventTrans, Qty), SelectionField::Sum);
        if (configurationkeynum(PdsCatchWeight))
        {
            qbds.addSelectionField(fieldNum(inventTrans, PdsCWQty), SelectionField::Sum);
        }

        qbds = qbds.addDataSource(tablenum(InventDim));
        qbds.addLink(fieldnum(InventTrans, InventDimId), fieldnum(InventDim, InventDimId));
        qbds.joinMode(JoinMode::ExistsJoin);

        if (!_packingSlipId)
        {
            qbds.addRange(fieldnum(InventDim, InventGtdId_RU)).value(SysQuery::valueEmptyString());
        }

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            inventTrans = queryRun.get(tablenum(InventTrans));

            qty         += inventTrans.Qty;
            pdsCWQty    += inventTrans.PdsCWQty;
        }

        qty = abs(qty);

        if (_packingSlipId)
        {
            select sum(Qty), sum(PdsCWQty) from customJournalTransLoc
                where customJournalTransLoc.SalesPurchInventTransId == _inventTransId   &&
                      customJournalTransLoc.PackingSlipId == _packingSlipId
                      exists join customJournalTableLoc
                        where customJournalTableLoc.CustomJournalId     == customJournalTransLoc.CustomJournalId &&
                              customJournalTableLoc.CustomJournalType   == CustomJournalType_RU::Export;
        }
        else
        {
            select sum(Qty), sum(PdsCWQty) from customJournalTransLoc
                where customJournalTransLoc.SalesPurchInventTransId == _inventTransId &&
                      (!_invoiceId || (customJournalTransLoc.InvoiceId == _invoiceId && customJournalTransLoc.InvoiceDate == _invoiceDate))
                      exists join customJournalTableLoc
                        where customJournalTableLoc.CustomJournalId     == customJournalTransLoc.CustomJournalId &&
                              customJournalTableLoc.CustomJournalStatus == CustomJournalStatus_RU::Open &&
                            ((customJournalTableLoc.CustomJournalType   == CustomJournalType_RU::Import &&
                              customJournalTableLoc.CustomInventTransStatus == customJournalTable.CustomInventTransStatus) ||
                              customJournalTableLoc.CustomJournalType   == CustomJournalType_RU::Export);
        }

        qty -= abs(customJournalTransLoc.Qty);

        pdsCWQty -= abs(customJournalTransLoc.PdsCWQty);

        return [qty, pdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckInventTransStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canCheckInventTransStatus(TmpFrmVirtual _tmpFrmVirtualLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFEACCInventTableSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>FEACCInventTable_RU</c> table.
    /// </summary>
    /// <param name = "_record">A record with ItemId.</param>
    /// <returns>The search parameters.</returns>
    protected FEACCInventTable_RU initializeFEACCInventTableSearchParameters(Common _record)
    {
        FEACCInventTable_RU searchParameters;
        searchParameters.initValue();
        ItemId itemId;

        switch (_record.TableId)
        {
            case tableNum(TmpFrmVirtual):
                TmpFrmVirtual tmpFrmVirtual = _record;
                itemId = tmpFrmVirtual.ItemId;
                break;
            case tableNum(CustomJournalTrans_RU):
                CustomJournalTrans_RU customJournalTrans = _record;
                itemId = customJournalTrans.ItemId;
                break;
            default:
                break;
        }

        searchParameters.ItemId = itemId;
        searchParameters.ActivationDate = customJournalTable.PlanArrivalDate;
        searchParameters.VendAccountCustom =  customJournalTable.VendAccountCustom;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFEACCMapping</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkFEACCMapping(TmpFrmVirtual _tmpFrmVirtualLine)
    {
        boolean ret = true;

        if (!FEACCInventTable_RU::findByNaturalKey(this.initializeFEACCInventTableSearchParameters(_tmpFrmVirtualLine)))
        {
            if (!feaccMappingFailedSet)
            {
                feaccMappingFailedSet = new Set(Types::String);
            }

            if (!feaccMappingFailedSet.in(_tmpFrmVirtualLine.ItemId))
            {
                feaccMappingFailedSet.add(_tmpFrmVirtualLine.ItemId);
            }

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventTransStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkInventTransStatus()
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventTransId       inventTransId;

        inventTransId = this.getInventTransId();

        if (inventTransId)
        {
            while select StatusReceipt, StatusIssue from inventTrans
                exists join inventTransOrigin
                    where inventTransOrigin.RecId         == inventTrans.InventTransOrigin &&
                          inventTransOrigin.InventTransId == inventTransId
            {
                if (inventTrans.StatusReceipt &&
                    conFind(inventStatusReceiptCon, inventTrans.StatusReceipt) &&
                    ! conFind(chosenStatusCon, inventTrans.StatusReceipt))
                {
                    chosenStatusCon += inventTrans.StatusReceipt;
                }

                if (inventTrans.StatusIssue &&
                    conFind(inventStatusIssueCon, inventTrans.StatusIssue) &&
                    ! conFind(chosenStatusCon, inventTrans.StatusIssue))
                {
                    chosenStatusCon += inventTrans.StatusIssue;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnitIdConvert</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean checkUnitIdConvert(CustomJournalTrans_RU _customJournalTrans)
    {
        TaxTable            taxTableDuty;
        TaxCode             taxCodeDuty;
        UnitOfMeasureSymbol unitIdConvertFrom;
        boolean             ret = true;

        taxCodeDuty = FEACCCustomRateTable_RU::findOnDate(_customJournalTrans.feaccId, TaxType_W::CustomDuty_RU, CustomJournalCalc_RU::customAllImportExport(customJournalTable.CustomJournalType), _customJournalTrans.CountryRegionId, customJournalTable.PlanArrivalDate);

        if (taxCodeDuty)
            taxTableDuty = TaxTable::find(taxCodeDuty);

        if (taxTableDuty && (taxTableDuty.CustomCombinedRate_RU == CustomCombinedRate_RU::Max || taxTableDuty.CustomCombinedRate_RU == CustomCombinedRate_RU::Sum))
        {
            switch (taxTableDuty.CustomCalcMethod_RU)
            {
                case CustomCalcMethod_RU::Qty :
                    unitIdConvertFrom   = _customJournalTrans.UnitId;
                    break;
                case CustomCalcMethod_RU::Weight :
                        unitIdConvertFrom   = UnitOfMeasure::find(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure).Symbol;
                    break;
                case CustomCalcMethod_RU::Volume :
                    unitIdConvertFrom   = UnitOfMeasure::find(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::LiquidVolume).UnitOfMeasure).Symbol;
                    break;
            }

            if (!EcoResProductUnitConverter::canBeConvertedGivenUnitSymbolsForReleasedProduct(_customJournalTrans.ItemId,
																							  _customJournalTrans.InventDimId,
																							  unitIdConvertFrom,
																						      taxTableDuty.CustomUnitId_RU))
            {
                ret = checkFailed(strFmt("@GLS115414", unitIdConvertFrom, taxTableDuty.CustomUnitId_RU));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customJournalTransUpdate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected CustomJournalTrans_RU customJournalTransUpdate()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog;

        dialog = Dialog::newFormnameRunbase(formStr(CustomJournalTransCreateDialog_RU), this);

        dialog.caption("@GLS115210");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTmpFrmVirtualHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void findTmpFrmVirtualHeader(tableId _tableId,
                                        recId   _recId)
    {
        select tmpFrmVirtualHeader
            where tmpFrmVirtualHeader.TableNum == _tableId &&
                  tmpFrmVirtualHeader.RecordNo == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTmpFrmVirtualLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void findTmpFrmVirtualLine(tableId   _tableId,
                                      recId     _recId)
    {
        select tmpFrmVirtualLine
            where tmpFrmVirtualLine.TableNum == _tableId &&
                  tmpFrmVirtualLine.RecordNo == _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStatusIssueList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getInventStatusIssueList()
    {
        if (! conLen(inventStatusReceiptCon) && ! conLen(inventStatusIssueCon))
        {
            this.initInventStatusList();
        }
        return inventStatusIssueCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStatusReceiptList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getInventStatusReceiptList()
    {
        if (! conLen(inventStatusReceiptCon) && ! conLen(inventStatusIssueCon))
        {
            this.initInventStatusList();
        }
        return inventStatusReceiptCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected InventTransId getInventTransId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFrmVirtualHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpFrmVirtual getTmpFrmVirtualHeader()
    {
        return tmpFrmVirtualHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpFrmVirtualLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpFrmVirtual getTmpFrmVirtualLine()
    {
        return tmpFrmVirtualLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventStatusList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initInventStatusList(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        ;
        inventStatusReceiptCon = conNull();
        inventStatusIssueCon   = conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected void initSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromSource</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initTransFromSource(CustomJournalTrans_RU _customJournalTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransUpdate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void inventTransUpdate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomJournalTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustomJournalTable_RU parmCustomJournalTable(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        customJournalTable = _customJournalTable;

        return customJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reCreateTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void reCreateTrans()
    {
        CustomJournalCalc_RU    customJournalCalc;

        CustomJournalTrans_RU   customJournalTrans;
        CustomJournalTrans_RU   customJournalTransLastPosted;

        FormDataSource          formDataSource;
        FormRun                 formRun;
        Object                  formRunObject;

        FEACCId_RU              feaccId, newFEACCId;
        MapIterator             mapIterator;
        CustomPartition_RU      customPartition;
        Map                     customPartitionMap = new Map(Types::String, Types::String);
        int                     customPartitionI = 1;
        boolean                 updateCustomPartition = false;

        if (! customJournalTable)
            return;

        setPrefix("@GLS115392");

        while select * from customJournalTrans
            where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
        {
            feaccId = FEACCInventTable_RU::findByNaturalKey(this.initializeFEACCInventTableSearchParameters(customJournalTrans)).feaccId;
            if (!customPartitionMap.exists(feaccId))
            {
                customPartitionMap.insert(feaccId, '');
            }
            updateCustomPartition = true;
        }

        if (updateCustomPartition)
        {
            mapIterator = new MapIterator(customPartitionMap);
            mapIterator.begin();
            while (mapIterator.more())
            {
                customPartition = strRFix(int2str(customPartitionI), new DictField(tableNum(CustomJournalTrans_RU), fieldNum(CustomJournalTrans_RU, CustomPartition)).stringLen(), customPartitionDefaultSymbol);
                customPartitionI++;
                customPartitionMap.insert(mapIterator.key(), customPartition);
                mapIterator.next();
            }
            ttsbegin;

            while select forupdate customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                newFEACCId = FEACCInventTable_RU::findByNaturalKey(this.initializeFEACCInventTableSearchParameters(customJournalTrans)).feaccId;

                if (updateCustomPartition)
                {
                    if (customPartitionMap.exists(newFEACCId))
                    {
                        customJournalTrans.CustomPartition = customPartitionMap.lookup(newFEACCId);
                    }

                    if (newFEACCId != customJournalTrans.feaccId)
                    {
                        info(strFmt("@GLS115393", customJournalTrans.feaccId, newFEACCId));

                        customJournalTrans.feaccId   = newFEACCId;

                        if (customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::None)
                        {
                            customJournalTransLastPosted = CustomJournalTrans_RU::findLastPosted(customJournalTrans.feaccId, customJournalTable.VendAccountCustom);
                            if (customJournalTransLastPosted)
                            {
                                customJournalTrans.CalculationMethod = customJournalTransLastPosted.CalculationMethod;
                            }
                        }
                    }
                }
                customJournalTrans.update();
            }
            customJournalCalc = CustomJournalCalc_RU::construct();
            customJournalCalc.initFromTable(customJournalTable);
            customJournalCalc.recalc();

            ttscommit;
        }

        if (FormDataUtil::isFormDataSource(customJournalTable))
        {
            formDataSource = FormDataUtil::getFormDataSource(customJournalTable);
            formRun        = formDataSource.formRun();

            if (formRun && formHasMethod(formRun, identifierStr(transFormDataSource)))
            {
                formRunObject  = formRun;
                formDataSource = formRunObject.transFormDataSource();
                formDataSource.executeQuery();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        CustomJournalCalc_RU    customJournalCalc;
        CustomJournalTrans_RU   customJournalTrans;
        CustomJournalTrans_RU   customJournalTransLastPosted;
        LineNum                 lineNum = CustomJournalTrans_RU::maxLineNum(customJournalTable.CustomJournalId) + 1;
        Map                     customPartitionMap = new Map(Types::String, Types::String);
        FEACCId_RU              feaccId;
        CustomPartition_RU      customPartition;
        MapIterator             mapIterator;
        int                     customPartitionI = 1;

        try
        {
            ttsbegin;

            while select tmpFrmVirtualLine
                where tmpFrmVirtualLine.Qty
            {
                feaccId = FEACCInventTable_RU::findByNaturalKey(this.initializeFEACCInventTableSearchParameters(tmpFrmVirtualLine)).feaccId;
                if (!customPartitionMap.exists(feaccId))
                {
                    customPartitionMap.insert(feaccId, '');
                }
                tmpFrmVirtualLine.LineNum = str2Num(feaccId);
                tmpFrmVirtualLine.update();
            }
            while select customJournalTrans group by feaccId
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                if (!customPartitionMap.exists(customJournalTrans.feaccId))
                {
                    customPartitionMap.insert(customJournalTrans.feaccId, '');
                }
            }

            mapIterator = new MapIterator(customPartitionMap);
            mapIterator.begin();
            while (mapIterator.more())
            {
                customPartition = strRFix(int2str(customPartitionI), new DictField(tableNum(CustomJournalTrans_RU), fieldNum(CustomJournalTrans_RU, CustomPartition)).stringLen(), customPartitionDefaultSymbol);
                customPartitionI++;
                customPartitionMap.insert(mapIterator.key(), customPartition);
                mapIterator.next();
            }

            while select forupdate customJournalTrans
                where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
            {
                if (customPartitionMap.exists(customJournalTrans.feaccId))
                {
                    customJournalTrans.CustomPartition = customPartitionMap.lookup(customJournalTrans.feaccId);
                    customJournalTrans.doUpdate();
                }
            }

            setPrefix("@GLS115453");
            while select tmpFrmVirtualLine order by LineNum
                where tmpFrmVirtualLine.Qty
            {
                setPrefix(strFmt("@SYS14077", tmpFrmVirtualLine.ItemId));
                this.initSource();

                //adds to existing customJournalTrans if found
                customJournalTrans = this.customJournalTransUpdate();

                if (customJournalTrans)
                {
                    customJournalTrans.Qty += tmpFrmVirtualLine.Qty;
                    customJournalTrans.PdsCWQty += tmpFrmVirtualLine.PdsCWQty;
                    this.calcAmountCur(customJournalTrans);
                    this.calcItemParameters(customJournalTrans);

                    this.inventTransUpdate();
                    customJournalTrans.update();
                }
                else
                {
                    customJournalTrans.clear();
                    customJournalTrans.initValue();
                    customJournalTrans.initFromCustomJournalTable(customJournalTable);

                    this.initTransFromSource(customJournalTrans);

                    customJournalTrans.LineNum   = lineNum;
                    customJournalTrans.feaccId   = FEACCInventTable_RU::findByNaturalKey(this.initializeFEACCInventTableSearchParameters(tmpFrmVirtualLine)).feaccId;

                    if (FEACCTable_RU::find(customJournalTrans.feaccId).Blocked)
                    {
                        throw error(strFmt("@GLS115452", customJournalTrans.feaccId));
                    }

                    if (customPartitionMap.exists(customJournalTrans.feaccId))
                    {
                        customJournalTrans.CustomPartition = customPartitionMap.lookup(customJournalTrans.feaccId);
                    }

                    customJournalTrans.Qty = tmpFrmVirtualLine.Qty;
                    customJournalTrans.PdsCWQty = tmpFrmVirtualLine.PdsCWQty;
                    this.calcAmountCur(customJournalTrans);
                    this.calcItemParameters(customJournalTrans);

                    if (customJournalTrans.CalculationMethod == CustomCalculationMethod_RU::None)
                    {
                        customJournalTransLastPosted = CustomJournalTrans_RU::findLastPosted(customJournalTrans.feaccId, customJournalTable.VendAccountCustom);
                        if (customJournalTransLastPosted)
                        {
                            customJournalTrans.CalculationMethod = customJournalTransLastPosted.CalculationMethod;
                        }
                    }

                    if (!this.checkUnitIdConvert(customJournalTrans))
                    {
                        throw error("@GLS101992");
                    }

                    this.inventTransUpdate();
                    customJournalTrans.insert();
                    lineNum ++;
                }
            }
            customJournalCalc = CustomJournalCalc_RU::construct();
            customJournalCalc.initFromTable(customJournalTable);
            customJournalCalc.recalc();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= retryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        SetEnumerator   setEnumerator;
        boolean         ret;

        ret = super(calledFrom);

        while select tmpFrmVirtualLine
        {
            this.initSource();

            ret = ret && this.validateLine(tmpFrmVirtualLine);
        }

        if (feaccMappingFailedSet && feaccMappingFailedSet.elements())
        {
            setPrefix("@GLS115416");

            setEnumerator = feaccMappingFailedSet.getEnumerator();

            while (setEnumerator.moveNext())
            {
                ret = checkFailed(strFmt("@GLS115417", setEnumerator.current()));
            }
        }

        if (ret && conLen(chosenStatusCon) > 1)
        {
            if (DialogButton::No == Box::yesNo("@GLS115418", DialogButton::No, "@SYS12529"))
            {
                ret = checkFailed("@GLS104964");
            }
        }

        if (! ret)
        {
            chosenStatusCon = conNull();
            feaccMappingFailedSet = new Set(Types::String);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateLine(TmpFrmVirtual _tmpFrmVirtualLine)
    {
        boolean ret = true;

        ret = this.checkFEACCMapping(_tmpFrmVirtualLine);

        if (this.canCheckInventTransStatus(_tmpFrmVirtualLine))
            ret = ret && this.checkInventTransStatus();

        if (! _tmpFrmVirtualLine.Qty)
            checkFailed(strFmt("@GLS115405", _tmpFrmVirtualLine.ItemId));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpFrmVirtualHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void writeTmpFrmVirtualHeader(tableId    _tableId,
                                         recId      _recId,
                                         Num        _id,
                                         LineNum    _lineNum = 0,
                                         TransDate  _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                         Qty        _qty = 0)
    {
        tmpFrmVirtualHeader.TableNum    = _tableId;
        tmpFrmVirtualHeader.RecordNo    = _recId;
        tmpFrmVirtualHeader.Id          = _id;
        tmpFrmVirtualHeader.LineNum     = _lineNum;
        tmpFrmVirtualHeader.TransDate   = _transDate;
        tmpFrmVirtualHeader.Qty         = _qty;

        tmpFrmVirtualHeader.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTmpFrmVirtualLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves selected quantity mark in a temporary table.
    /// </summary>
    /// <param name="_tableId">
    /// The source table ID.
    /// </param>
    /// <param name="_recId">
    /// The source record ID.
    /// </param>
    /// <param name="_id">
    /// The Source record numeric string ID.
    /// </param>
    /// <param name="_itemId">
    /// Selected item ID.
    /// </param>
    /// <param name="_lineNum">
    /// Line number.
    /// </param>
    /// <param name="_transDate">
    /// Transaction date.
    /// </param>
    /// <param name="_qty">
    /// Selected quantity.
    /// </param>
    /// <param name="_pdsCWQty">
    /// Selected Catch-weight quantity; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void writeTmpFrmVirtualLine(tableId          _tableId,
                                       recId            _recId,
                                       Num              _id,
                                       ItemId           _itemId,
                                       LineNum          _lineNum = 0,
                                       TransDate        _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                       Qty              _qty = 0,
                                       PdsCWInventQty   _pdsCWQty = 0)
    {
        tmpFrmVirtualLine.TableNum  = _tableId;
        tmpFrmVirtualLine.RecordNo  = _recId;
        tmpFrmVirtualLine.Id        = _id;
        tmpFrmVirtualLine.ItemId    = _itemId;
        tmpFrmVirtualLine.LineNum   = _lineNum;
        tmpFrmVirtualLine.TransDate = _transDate;
        tmpFrmVirtualLine.Qty       = _qty;
        tmpFrmVirtualLine.PdsCWQty  = _pdsCWQty;

        tmpFrmVirtualLine.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustomJournalTransCreate_RU construct(CustomJournalType_RU _customJournalType)
    {
        switch (_customJournalType)
        {
            case CustomJournalType_RU::Import:
                return new CustomJournalTransCreateImport_RU();

            case CustomJournalType_RU::Export:
                return new CustomJournalTransCreateExport_RU();
        }

        throw error(strFmt("@GLS103487", classStr(CustomJournalTransCreate_RU)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static Description description()
    {
        return "@GLS115349";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CustomJournalTransCreate_RU customJournalTransCreate;
        CustomJournalTable_RU       customJournalTable;

        FormRun                     callerFormRun;
        FormDataSource              callerFormDataSource;

        if (! _args || _args.dataset() != tableNum(CustomJournalTable_RU))
            throw error(strFmt("@SYS25516", CustomJournalTransCreate_RU::description()));

        if (! _args.record() || ! FormDataUtil::isFormDataSource(_args.record()))
            throw error("@SYS82774");

        customJournalTable       = _args.record();
        customJournalTransCreate = CustomJournalTransCreate_RU::construct(customJournalTable.CustomJournalType);

        customJournalTransCreate.parmCustomJournalTable(customJournalTable);

        if (customJournalTransCreate.prompt())
        {
            customJournalTransCreate.runOperation();
        }

        if (_args.caller() &&
            SysDictClass::isEqualOrSuperclass(classIdGet(_args.caller()), classNum(FormRun)) &&
            _args.caller().name() == formStr(CustomJournalTable_RU))
        {
            callerFormRun = _args.caller();

            if (formHasMethod(callerFormRun, identifierStr(tableFormDataSource)))
            {
                callerFormDataSource = _args.caller().tableFormDataSource();
                callerFormDataSource.reread();
                callerFormDataSource.refresh();
                callerFormDataSource.active();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>