<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanRuleData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanRuleData</c> class represents the state of a replenishment rule.
/// </summary>
public class LeanRuleData extends Object
{
    KanbanFlowWrapper       kanbanFlowWrapper;
    KanbanRule              kanbanRule;
    KanbanRuleFixed         kanbanRuleFixed;
    KanbanRuleVariable      kanbanRuleVariable;
    KanbanRuleEvent         kanbanRuleEvent;
    LeanCoverage            leanCoverage;
    LeanCoverageKanbanRule  leanCoverageKanbanRule;
    InventDim               inventDim;

    LeanRuleData            deserializedOriginalLeanRuleData;

    // following fields are used for the lazy loading of the LeanRuleData object
    boolean                 lazyLoadMode;
    boolean                 initialized;

    boolean                 cachedInventDim;
    boolean                 cachedKanbanFlowWrapper;
    boolean                 cachedKanbanRuleFixed;
    boolean                 cachedKanbanRuleVariable;
    boolean                 cachedKanbanRuleEvent;
    boolean                 cachedLeanCoverage;
    boolean                 cachedLeanCoverageKanbanRule;

    #define.CurrentVersion(1)
    #define.ClassIdPosition(2)
    #LOCALMACRO.CurrentList
        cachedInventDim,
        cachedKanbanFlowWrapper,
        cachedKanbanRuleFixed,
        cachedKanbanRuleVariable,
        cachedKanbanRuleEvent,
        cachedLeanCoverage,
        cachedLeanCoverageKanbanRule
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all buffers.
    /// </summary>
    /// <remarks>
    /// This method is used to clear the state of all buffers.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clear()
    {
        kanbanRule.clear();
        kanbanRuleFixed.clear();
        kanbanRuleVariable.clear();
        kanbanRuleEvent.clear();
        inventDim.clear();
        leanCoverage.clear();
        leanCoverageKanbanRule.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>duplicate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>LeanRuleData</c> object which buffers contain duplicated version of all buffers except
    ///    for the <c>KanbanFlow</c> buffer and <c>InventDim</c> buffer.
    /// </summary>
    /// <param name="_duplicateLeanCoverage">
    ///    A Boolean value that indicates whether the <c>LeanCoverage</c> record is duplicated.
    /// </param>
    /// <returns>
    ///    A <c>LeanRuleData</c> object that contains duplicates of most buffers.
    /// </returns>
    /// <remarks>
    ///    This method is used during duplication and replacement of lean rules.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanRuleData duplicate(boolean _duplicateLeanCoverage = false)
    {
        KanbanRule              newKanbanRule;
        KanbanRuleFixed         newKanbanRuleFixed;
        KanbanRuleVariable      newKanbanRuleVariable;
        KanbanRuleEvent         newKanbanRuleEvent;
        LeanCoverage            newLeanCoverage;
        LeanCoverageKanbanRule  newLeanCoverageKanbanRule;

        // copy all data
        newKanbanRule.data(this.parmKanbanRule());
        newKanbanRuleFixed.data(this.parmKanbanRuleFixed());
        newKanbanRuleVariable.data(this.parmKanbanRuleVariable());
        newKanbanRuleEvent.data(this.parmKanbanRuleEvent());
        newLeanCoverageKanbanRule.data(this.parmLeanCoverageKanbanRule());

        if (_duplicateLeanCoverage)
        {
            newLeanCoverage.data(this.parmLeanCoverage());

            newLeanCoverage.RecId               = 0;
            newLeanCoverageKanbanRule.Coverage  = 0;
        }
        else
        {
            newLeanCoverage = this.parmLeanCoverage();
        }

        // reset PKs
        newKanbanRule.RecId                     = 0;
        newKanbanRuleFixed.RecId                = 0;
        newKanbanRuleVariable.RecId             = 0;
        newKanbanRuleEvent.RecId                = 0;
        newLeanCoverageKanbanRule.RecId         = 0;

        // reset FKs
        newKanbanRuleFixed.ParentRecId          = 0;
        newKanbanRuleVariable.ParentRecId       = 0;
        newKanbanRuleEvent.ParentRecId          = 0;
        newLeanCoverageKanbanRule.KanbanRule    = 0;
        newKanbanRule.ReplacingKanbanRule       = 0;

        // create the new LeanRuleData object
        LeanRuleData leanRuleData = LeanRuleData::newBuffers(newKanbanRule,
                                                             newKanbanRuleFixed,
                                                             newKanbanRuleVariable,
                                                             newKanbanRuleEvent,
                                                             newLeanCoverageKanbanRule,
                                                             newLeanCoverage,
                                                             this.parmKanbanFlowWrapper().parmKanbanFlow());

        // the constructor above creates a new wrapper initialized from the KanbanFlow, but this
        // isn't enough in this case - the new KanbanFlowWrapper instance should be a complete copy
        leanRuleData.parmKanbanFlowWrapper().initFromKanbanFlowWrapper(kanbanFlowWrapper);

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasActiveKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the rule has active kanbans.
    /// </summary>
    /// <returns>
    /// True if the rule has kanbans in status Started or Ended; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean hasActiveKanbans()
    {
        Kanban kanban;

        select firstonly RecId from kanban
            where kanban.KanbanRule == kanbanRule.RecId
               && (kanban.Status    == LeanKanbanStatus::Assigned
               ||  kanban.Status    == LeanKanbanStatus::Received);

        return kanban.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether an object initialization is completed.
    /// </summary>
    /// <param name="_initialized">
    /// A Boolean value that indicates whether the initialization of the object has been completed.
    /// </param>
    /// <returns>
    /// true if the object is initialized; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean initialized(boolean _initialized = initialized)
    {
        initialized = _initialized;
        return initialized;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the appropriate member of the class from the buffer.
    /// </summary>
    /// <param name="_buffer">
    ///    A buffer that contains the up to date state.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializeFromCommon(Common _buffer)
    {
        KanbanRule kanbanRuleOld;

        // check input param
        if (!_buffer)
        {
            return;
        }

        switch (_buffer.TableId)
        {
            case tableNum(KanbanRule):
                kanbanRuleOld.data(kanbanRule);
                kanbanRule = _buffer;
                if (kanbanRule.KanbanFlow != kanbanRuleOld.KanbanFlow)
                {
                    kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(KanbanFlow::find(kanbanRule.KanbanFlow));
                }
                break;

            case tableNum(KanbanRuleFixed):
                kanbanRuleFixed = _buffer;
                break;

            case tableNum(KanbanRuleVariable):
                kanbanRuleVariable = _buffer;
                break;

            case tableNum(KanbanRuleEvent):
                kanbanRuleEvent = _buffer;
                break;

            case tableNum(LeanCoverage):
                leanCoverage = _buffer;
                break;

            case tableNum(LeanCoverageKanbanRule):
                leanCoverageKanbanRule = _buffer;
                break;

            case tableNum(KanbanFlow):
                KanbanFlow kanbanFlowLocal = _buffer;
                kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(kanbanFlowLocal);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanFlow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>KanbanFlow</c> record for the current instance of the <c>LeanRuleData</c>class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanFlow</c> table buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanFlow kanbanFlow()
    {
        return this.parmKanbanFlowWrapper().parmKanbanFlow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lazyLoadMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a parameter for the <c>lazyLoadMode</c> class member.
    /// </summary>
    /// <param name="_lazyLoadMode">
    ///    A parameter that indicates whether the buffers should be lazy-loaded.
    /// </param>
    private void lazyLoadMode(boolean _lazyLoadMode)
    {
        lazyLoadMode = _lazyLoadMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>leanKanbanType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the kanban type for Kanban records to be created from the current rule.
    /// </summary>
    /// <returns>
    /// The kanban type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanKanbanType leanKanbanType()
    {
        return this.parmKanbanRule().KanbanType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the maximum quantity for a kanban according to the kanban rule.
    /// </summary>
    /// <returns>
    /// The maximum quantity stated in inventory unit.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanQuantity maxQty()
    {
        // retrieve the quantity from the rule type
        return kanbanRule.type().getMaxKanbanQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>minQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the minimum quantity according to the kanban rule.
    /// </summary>
    /// <returns>
    /// The minimum quantity stated in inventory unit.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanQuantity minQty()
    {
        // retrieve the quantity from the rule type
        return kanbanRule.type().getMinKanbanQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>orig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the original <c>LeanRuleData</c> class, with the original values of the object buffers.
    /// </summary>
    /// <returns>
    ///    A <c>LeanRuleData</c> object.
    /// </returns>
    /// <remarks>
    ///    In a case where the current instance is deserialized, the instance that is returned will contain
    ///    data that is sent from the client.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanRuleData orig()
    {
        return deserializedOriginalLeanRuleData ?
                deserializedOriginalLeanRuleData :
                LeanRuleData::newLeanRuleDataOrig(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container pack(boolean _ignoreOrig = false)
    {
        return [#CurrentVersion,
                classNum(LeanRuleData),
                #CurrentList,
        this.parmKanbanRule(),
                this.parmKanbanRuleFixed(),
                this.parmKanbanRuleVariable(),
                this.parmKanbanRuleEvent(),
                this.parmLeanCoverage(),
                this.parmLeanCoverageKanbanRule(),
                this.parmInventDim(),
                this.parmKanbanFlowWrapper().pack(),
                _ignoreOrig ? conNull() : LeanRuleData::newLeanRuleDataOrig(this).pack(true)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        // distinguish between get/set case
        if (prmisDefault(_inventDim))
        {
            if (lazyLoadMode
                && initialized
                && !cachedInventDim
                && !inventDim.RecId)
            {
                inventDim       = InventDim::find(this.parmLeanCoverage().InventDimId);
            }
            cachedInventDim = true;
        }
        else
        {
            inventDim       = _inventDim;
            cachedInventDim = initialized;
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanFlowWrapper</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanFlowWrapper parmKanbanFlowWrapper(KanbanFlowWrapper _kanbanFlowWrapper = kanbanFlowWrapper)
    {
        // distinguish between get/set case
        if (prmisDefault(_kanbanFlowWrapper))
        {
            if (lazyLoadMode
                && initialized
                && !cachedKanbanFlowWrapper
                && (!kanbanFlowWrapper
                    || !kanbanFlowWrapper.parmKanbanFlow().RecId)
                && kanbanRule.KanbanFlow)
            {
                kanbanFlowWrapper       = KanbanFlowWrapper::newKanbanFlow(KanbanFlow::find(kanbanRule.KanbanFlow), kanbanRule.KanbanType);
            }

            cachedKanbanFlowWrapper = true;
        }
        else
        {
            kanbanFlowWrapper       = _kanbanFlowWrapper;
            cachedKanbanFlowWrapper = initialized;
        }

        return kanbanFlowWrapper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRule</Name>
				<Source><![CDATA[
    public KanbanRule parmKanbanRule(KanbanRule _kanbanRule = kanbanRule)
    {
        kanbanRule = _kanbanRule;
        return kanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRuleEvent parmKanbanRuleEvent(KanbanRuleEvent _kanbanRuleEvent = kanbanRuleEvent)
    {
        // distinguish between get/set case
        if (prmisDefault(_kanbanRuleEvent))
        {
            if (lazyLoadMode
                && initialized
                && !cachedKanbanRuleEvent
                && !kanbanRuleEvent.RecId)
            {
                kanbanRuleVariable  = this.parmKanbanRuleVariable();
                kanbanRuleEvent     = KanbanRuleEvent::findParentRecId(kanbanRuleVariable.RecId);
            }
            cachedKanbanRuleEvent   = true;
        }
        else
        {
            kanbanRuleEvent         = _kanbanRuleEvent;
            cachedKanbanRuleEvent   = initialized;
        }

        return kanbanRuleEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleFixed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRuleFixed parmKanbanRuleFixed(KanbanRuleFixed _kanbanRuleFixed = kanbanRuleFixed)
    {
        // distinguish between get/set case
        if (prmisDefault(_kanbanRuleFixed))
        {
            if (lazyLoadMode
                && initialized
                && !cachedKanbanRuleFixed
                && !kanbanRuleFixed.RecId)
            {
                kanbanRuleFixed         = KanbanRuleFixed::findParentRecId(kanbanRule.RecId);
            }
            cachedKanbanRuleFixed   = true;
        }
        else
        {
            kanbanRuleFixed         = _kanbanRuleFixed;
            cachedKanbanRuleFixed   = initialized;
        }

        return kanbanRuleFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanRuleVariable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRuleVariable parmKanbanRuleVariable(KanbanRuleVariable _kanbanRuleVariable = kanbanRuleVariable)
    {
        // distinguish between get/set case
        if (prmisDefault(_kanbanRuleVariable))
        {
            if (lazyLoadMode
                && initialized
                && !cachedKanbanRuleVariable
                && !kanbanRuleVariable.RecId)
            {
                kanbanRuleVariable      = KanbanRuleVariable::findParentRecId(kanbanRule.RecId);
            }
            cachedKanbanRuleVariable    = true;
        }
        else
        {
            kanbanRuleVariable          = _kanbanRuleVariable;
            cachedKanbanRuleVariable    = initialized;
        }

        return kanbanRuleVariable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCoverage</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanCoverage parmLeanCoverage(LeanCoverage _leanCoverage = leanCoverage)
    {
        // distinguish between get/set case
        if (prmisDefault(_leanCoverage))
        {
            if (lazyLoadMode
                && initialized
                && !cachedLeanCoverage
                && !leanCoverage.RecId)
            {
                leanCoverage        = LeanCoverage::find(this.parmLeanCoverageKanbanRule().Coverage);
            }
            cachedLeanCoverage  = true;
        }
        else
        {
            leanCoverage        = _leanCoverage;
            cachedLeanCoverage  = initialized;
        }

        return leanCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCoverageKanbanRule</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanCoverageKanbanRule parmLeanCoverageKanbanRule(LeanCoverageKanbanRule _leanCoverageKanbanRule = leanCoverageKanbanRule)
    {
        // distinguish between get/set case
        if (prmisDefault(_leanCoverageKanbanRule))
        {
            if (lazyLoadMode
                && initialized
                && !cachedLeanCoverageKanbanRule
                && !leanCoverageKanbanRule.RecId)
            {
                leanCoverageKanbanRule          = LeanCoverageKanbanRule::findKanbanRule(kanbanRule.RecId);
            }
            cachedLeanCoverageKanbanRule    = true;
        }
        else
        {
            leanCoverageKanbanRule          = _leanCoverageKanbanRule;
            cachedLeanCoverageKanbanRule    = initialized;
        }

        return leanCoverageKanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the replenishment strategy that is associated with the kanban rule.
    /// </summary>
    /// <returns>
    ///    The kanban type.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanReplenishmentStrategy replenishmentStrategy()
    {
        return kanbanRule.ReplenishmentStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the record Id of all buffers.
    /// </summary>
    /// <remarks>
    /// This method is used to reset the state after unsuccessful database persistence.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void resetRecId()
    {
        kanbanRule.RecId                = 0;
        kanbanRuleFixed.RecId           = 0;
        kanbanRuleVariable.RecId        = 0;
        kanbanRuleEvent.RecId           = 0;
        inventDim.RecId                 = 0;
        leanCoverage.RecId              = 0;
        leanCoverageKanbanRule.RecId    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedReplacedKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the replaced kanban rule select by the user.
    /// </summary>
    /// <returns>
    ///    An empty <c>kanbanRule</c> buffer.
    /// </returns>
    /// <remarks>
    ///    Actual implementation is in the <c>LeanRuleDataUpdate</c> class.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public KanbanRule selectedReplacedKanbanRule()
    {
        KanbanRule emptyKanbanRule;

        // return an empty kanbanRule;
        return emptyKanbanRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a status object for the current <c>LeanRuleData</c> object.
    /// </summary>
    /// <returns>
    ///    A status object for the current <c>LeanRuleData</c> object.
    /// </returns>
    /// <remarks>
    ///    If the current record is not yet persisted in the database, the result will be null.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanRuleStatusBase status()
    {
        return LeanRuleStatusBase::newLeanRuleData(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>type</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a type object for the current <c>LeanRuleData</c> object.
    /// </summary>
    /// <returns>
    ///    A type object for the current <c>LeanRuleData</c> object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The buffer has not yet been persisted.
    /// </exception>
    public LeanRuleKanban type()
    {
        return LeanRuleKanban::newLeanRuleData(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean unpack(
        container _packedClass,
        boolean   _selectForUpdate = false)
    {
        KanbanRule              localKanbanRule;
        KanbanRuleFixed         localKanbanRuleFixed;
        KanbanRuleVariable      localKanbanRuleVariable;
        KanbanRuleEvent         localKanbanRuleEvent;
        LeanCoverage            localLeanCoverage;
        LeanCoverageKanbanRule  localLeanCoverageKanbanRule;
        InventDim               localInventDim;
        ClassId                 classIdentificator;

        container               ctrKanbanFlowWrapper;
        container               ctrOrigLeanRuleData;

        int                     version     = RunBase::getVersion(_packedClass);

        // check version
        if (version != #CurrentVersion)
        {
            return false;
        }

        // unpack the input container
        [version,
         classIdentificator,
         #CurrentList,
        localKanbanRule,
         localKanbanRuleFixed,
         localKanbanRuleVariable,
         localKanbanRuleEvent,
         localLeanCoverage,
         localLeanCoverageKanbanRule,
         localInventDim,
         ctrKanbanFlowWrapper,
         ctrOrigLeanRuleData] = _packedClass;

        if (_selectForUpdate)
        {
            kanbanRule              = KanbanRule::find(localKanbanRule.RecId, true);
            kanbanRuleFixed         = KanbanRuleFixed::find(localKanbanRuleFixed.RecId, true);
            kanbanRuleVariable      = KanbanRuleVariable::find(localKanbanRuleVariable.RecId, true);
            kanbanRuleEvent         = KanbanRuleEvent::find(localKanbanRuleEvent.RecId, true);
            leanCoverage            = LeanCoverage::find(localLeanCoverage.RecId, true);
            leanCoverageKanbanRule  = LeanCoverageKanbanRule::find(localLeanCoverageKanbanRule.RecId, true);
            inventDim               = InventDim::find(localInventDim.InventDimId, true);

            // copy only field data to preserve original records selected for update
            buf2Buf(localKanbanRule, kanbanRule);
            buf2Buf(localKanbanRuleFixed, kanbanRuleFixed);
            buf2Buf(localKanbanRuleVariable, kanbanRuleVariable);
            buf2Buf(localKanbanRuleEvent, kanbanRuleEvent);
            buf2Buf(localLeanCoverage, leanCoverage);
            buf2Buf(localLeanCoverageKanbanRule, leanCoverageKanbanRule);
            buf2Buf(localInventDim, inventDim);
        }
        else
        {
            // set the data back without wiping out the references
            kanbanRule.data(localKanbanRule);
            kanbanRuleFixed.data(localKanbanRuleFixed);
            kanbanRuleVariable.data(localKanbanRuleVariable);
            kanbanRuleEvent.data(localKanbanRuleEvent);
            leanCoverage.data(localLeanCoverage);
            leanCoverageKanbanRule.data(localLeanCoverageKanbanRule);
            inventDim.data(localInventDim);
        }

        if (ctrOrigLeanRuleData != conNull())
        {
            // unpack the original data
            deserializedOriginalLeanRuleData = LeanRuleData::newContainer(ctrOrigLeanRuleData);
        }

        // unpack the KanbanFlowWrapper
        kanbanFlowWrapper = KanbanFlowWrapper::newStandard();
        kanbanFlowWrapper.unpack(ctrKanbanFlowWrapper);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validFrom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the valid from date of the kanban rule.
    /// </summary>
    /// <returns>
    /// The valid from date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanRuleActiveDateTime validFrom()
    {
        return this.parmLeanCoverageKanbanRule().ValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validityPeriodCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a given period overlaps with the validity period of the current <c>LeanRuleData</c>
    /// object.
    /// </summary>
    /// <param name="_fromDateTime">
    /// A from date and a time temporal value.
    /// </param>
    /// <param name="_toDateTime">
    /// A to date and a time temporal value.
    /// </param>
    /// <returns>
    /// true if the periods overlap; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validityPeriodCheck(
        TransDateTime _fromDateTime,
        TransDateTime _toDateTime)
    {
        TransDateTime validFrom = this.validFrom();
        TransDateTime validTo   = this.validTo();

        boolean result = ((validFrom <= _toDateTime
                 &&  (validTo   >= _fromDateTime
                 ||   !validTo))
                 ||  (!_toDateTime
                 &&   validTo   >= _fromDateTime));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the valid to date of the kanban rule.
    /// </summary>
    /// <returns>
    /// The valid to date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanRuleActiveDateTime validTo()
    {
        return this.parmLeanCoverageKanbanRule().ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <returns>
    ///  An instance of <c>LeanRuleData</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static LeanRuleData construct()
    {
        return new LeanRuleData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the LeanRuleData class from the given buffers, passed as parameters.
    /// </summary>
    /// <param name="_kanbanRule">
    /// The KanbanRule buffer.
    /// </param>
    /// <param name="_kanbanRuleFixed">
    /// The KanbanRuleFixed buffer.
    /// </param>
    /// <param name="_kanbanRuleVariable">
    /// The KanbanRuleVariable buffer.
    /// </param>
    /// <param name="_kanbanRuleEvent">
    /// The KanbanRuleEvent buffer.
    /// </param>
    /// <param name="_leanCoverageKanbanRule">
    /// The LeanCoverageKanbanRule buffer.
    /// </param>
    /// <param name="_leanCoverage">
    /// The LeanCoverage buffer.
    /// </param>
    /// <param name="_kanbanFlow">
    /// The KanbanFlow buffer.
    /// </param>
    /// <returns>
    /// An initialized instance of the LeanRuleData class.
    /// </returns>
    /// <remarks>
    /// This method supports lazy loading of the buffers for existing rules.
    /// </remarks>
    public static LeanRuleData newBuffers(
        KanbanRule              _kanbanRule,
        KanbanRuleFixed         _kanbanRuleFixed,
        KanbanRuleVariable      _kanbanRuleVariable,
        KanbanRuleEvent         _kanbanRuleEvent,
        LeanCoverageKanbanRule  _leanCoverageKanbanRule,
        LeanCoverage            _leanCoverage,
        KanbanFlow              _kanbanFlow)
    {
        InventDim               inventDim = InventDim::find(_leanCoverage.InventDimId);
        LeanRuleData            leanRuleData = LeanRuleData::construct();
        KanbanFlowWrapper       kanbanFlowWrapper;

        if (!_kanbanFlow.RecId)
        {
            kanbanFlowWrapper = KanbanFlowWrapper::newStandard();
            kanbanFlowWrapper.parmKanbanFlow(_kanbanFlow);
            kanbanFlowWrapper.parmKanbanType(_kanbanRule.KanbanType);
        }
        else
        {
            // otherwise create one for an existing flow
            kanbanFlowWrapper = KanbanFlowWrapper::newKanbanFlow(_kanbanFlow, _kanbanRule.KanbanType);
        }

        leanRuleData.parmKanbanRule(_kanbanRule);
        leanRuleData.parmKanbanRuleFixed(_kanbanRuleFixed);
        leanRuleData.parmKanbanRuleVariable(_kanbanRuleVariable);
        leanRuleData.parmKanbanRuleEvent(_kanbanRuleEvent);
        leanRuleData.parmLeanCoverage(_leanCoverage);
        leanRuleData.parmLeanCoverageKanbanRule(_leanCoverageKanbanRule);
        leanRuleData.parmKanbanFlowWrapper(kanbanFlowWrapper);
        leanRuleData.parmInventDim(inventDim);

        // we set the mode and the initialized flag. for initialized and existing rules,
        // all buffers except the KanbanRule one are loaded on demand and not initially
        leanRuleData.lazyLoadMode(_kanbanRule.RecId != 0);
        leanRuleData.initialized(true);

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the class to be filled in with data from a <c>LeanRuleData</c> class that is
    ///    already serialized.
    /// </summary>
    /// <param name="_packedClass">
    ///    A container with a serialized <c>LeanRuleData</c> class.
    /// </param>
    /// <param name="_selectForUpdate">
    ///    Indicates if the deserialized buffers must be selected for an update.
    /// </param>
    /// <returns>
    ///    A new created and initialized instance of the <c>LeanRuleData</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleData newContainer(
        container _packedClass,
        boolean   _selectForUpdate = false)
    {
        // try to find all related buffers
        LeanRuleData    leanRuleData;

        if (_packedClass == conNull())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // get the type of the serialized object
        ClassId classIdentificator = conPeek(_packedClass, #ClassIdPosition);

        // instantiate based on type
        switch (classIdentificator)
        {
            case classNum(LeanRuleData):
                leanRuleData = LeanRuleData::construct();
                break;
            case classNum(LeanRuleDataUpdate):
                leanRuleData = LeanRuleDataUpdate::construct();
                break;
            default:
                throw error("@SYS310323");
        }

        // unpack the serialized object
        leanRuleData.unpack(_packedClass, _selectForUpdate);
        leanRuleData.initialized(true);

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanRuleRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>LeanRuleData</c> class filled in with the data from an existing
    ///    kanban rule.
    /// </summary>
    /// <param name="_kanbanRuleRefRecId">
    ///    The record ID of the <c>KanbanRule</c> table.
    /// </param>
    /// <returns>
    ///    A newly initialized instance of <c>LeanRuleData</c> class.
    /// </returns>
    /// <remarks>
    ///    This method should be used for rules that are already in the database.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanRuleData newKanbanRuleRecId(RefRecId _kanbanRuleRefRecId)
    {
        // try to find all related buffers
        LeanRuleData            leanRuleData;
        KanbanRule              kanbanRule = KanbanRule::find(_kanbanRuleRefRecId);
        KanbanRuleFixed         kanbanRuleFixed;
        KanbanRuleVariable      kanbanRuleVariable;
        KanbanRuleEvent         kanbanRuleEvent;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        LeanCoverage            leanCoverage;
        KanbanFlow              kanbanFlow;

        if (kanbanRule)
        {
            leanRuleData = LeanRuleData::newBuffers(kanbanRule,
                                                    kanbanRuleFixed,
                                                    kanbanRuleVariable,
                                                    kanbanRuleEvent,
                                                    leanCoverageKanbanRule,
                                                    leanCoverage,
                                                    kanbanFlow);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return leanRuleData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLeanRuleDataOrig</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>LeanRuleData</c> object filled in with the original buffer data.
    /// </summary>
    /// <param name="_leanRuleData">
    ///    The record ID of the Kanban Rule.
    /// </param>
    /// <returns>
    ///    A <c>LeanRuleData</c> object that contains the original buffers.
    /// </returns>
    /// <remarks>
    ///    If the <c>LeanRuleData</c> buffers have not been yet persisted in the database, the result of the
    ///    method call will be an object holding empty buffers.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static LeanRuleData newLeanRuleDataOrig(LeanRuleData _leanRuleData)
    {
        LeanRuleData    result       = LeanRuleData::construct();
        InventDim       oldDim       = InventDim::find(_leanRuleData.parmLeanCoverage().orig().InventDimId);
        KanbanFlow      originalFlow = KanbanFlow::find(_leanRuleData.parmKanbanRule().orig().KanbanFlow);

        // we only populate the buffers if there was an existing record
        // if this is called for new data to be inserted, we should have an empty state
        // so that all the checks and validations pass successfully
        if (_leanRuleData.parmKanbanRule().RecId)
        {
            result.parmInventDim(oldDim);
            result.parmKanbanRule(_leanRuleData.parmKanbanRule().orig());
            result.parmKanbanRuleFixed(_leanRuleData.parmKanbanRuleFixed().orig());
            result.parmKanbanRuleVariable(_leanRuleData.parmKanbanRuleVariable().orig());
            result.parmKanbanRuleEvent(_leanRuleData.parmKanbanRuleEvent().orig());
            result.parmLeanCoverage(_leanRuleData.parmLeanCoverage().orig());
            result.parmLeanCoverageKanbanRule(_leanRuleData.parmLeanCoverageKanbanRule().orig());
        }

        if (originalFlow)
        {
            result.parmKanbanFlowWrapper(KanbanFlowWrapper::newKanbanFlow(originalFlow));
        }
        else
        {
            // a non-null KanbanFlowWrapper is required for (se)deserialization
            result.parmKanbanFlowWrapper(KanbanFlowWrapper::newStandard());
        }

        result.initialized(true);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class filled in with the data from an existing kanban rule and updates
    /// the stored buffer with the current (unsaved) one.
    /// </summary>
    /// <param name="_kanbanRuleRefRecId">
    /// Record ID of the Kanban Rule.
    /// </param>
    /// <param name="_buffer">
    /// A buffer that holds the unsaved (current) data that is used to update the respective class member
    /// after it is initialized from the database.
    /// </param>
    /// <returns>
    /// A newly initialized instance of <c>LeanRuleData</c> class.
    /// </returns>
    /// <remarks>
    /// This method should be used for rules that are already existing in the database, but which need the
    /// current status of their buffers in the business logic layer.
    /// </remarks>
    public static LeanRuleData newStandard(
        KanbanRuleRefRecId _kanbanRuleRefRecId,
        Common             _buffer)
    {
        // only read the KanbanRule as this one will actually be used. the other buffers are loaded on demand.
        LeanRuleData            leanRuleData;
        KanbanRule              kanbanRule = KanbanRule::find(_kanbanRuleRefRecId);
        KanbanFlow              kanbanFlow;
        KanbanRuleFixed         kanbanRuleFixed;
        KanbanRuleVariable      kanbanRuleVariable;
        KanbanRuleEvent         kanbanRuleEvent;
        LeanCoverageKanbanRule  leanCoverageKanbanRule;
        LeanCoverage            leanCoverage;

        if (kanbanRule)
        {
            // create the record
            leanRuleData = LeanRuleData::newBuffers(kanbanRule,
                                                    kanbanRuleFixed,
                                                    kanbanRuleVariable,
                                                    kanbanRuleEvent,
                                                    leanCoverageKanbanRule,
                                                    leanCoverage,
                                                    kanbanFlow);

            // update the buffer
            leanRuleData.initializeFromCommon(_buffer);
        }
        else
        {
            leanRuleData = null;
        }

        return leanRuleData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>