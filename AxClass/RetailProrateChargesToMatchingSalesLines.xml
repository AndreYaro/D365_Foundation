<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProrateChargesToMatchingSalesLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailProrateChargesToMatchingSalesLine</c> class contains methods used for prorating charges to the matching sales lines.
/// </summary>
internal static class RetailProrateChargesToMatchingSalesLines
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ShouldProrateChargesToMatchingSalesLines</Name>
				<Source><![CDATA[
    internal static boolean ShouldProrateChargesToMatchingSalesLines(SalesTable salesTable)
    {
        RetailSalesTable retailSalesTable;

        select firstonly retailSalesTable where retailSalesTable.SalesTable == salesTable.RecId;

        return retailSalesTable.RetailOrder == NoYes::Yes && RetailParameters::isRetailAutoChargesEnabledAndInUse();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProrationGroupMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the map of which charges apply to which sales lines.
    /// </summary>
    /// <param name = "autoMarkupsToSalesLines">The map to be updated.</param>
    /// <param name = "_markupAutoTable">The auto charge record, which is a key for the map.</param>
    /// <param name = "_salesLine">The sales line that matches the markupAutoTable record.</param>
    internal static void updateProrationGroupMap(Map autoMarkupsToSalesLines, MarkupAutoTable _markupAutoTable, SalesLine _salesLine)
    {
        if (!autoMarkupsToSalesLines.keySet().in(_markupAutoTable))
        {
            autoMarkupsToSalesLines.insert(_markupAutoTable, new List(Types::Record));
        }

        List salesLinesInGroup = autoMarkupsToSalesLines.lookup(_markupAutoTable);
        salesLinesInGroup.addEnd(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>proratedChargeAlreadyExistsOnThisSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this charge (as defined by the MarkupAutoLine it comes from) has already been applied to the record it would be inserted on.
    /// </summary>
    /// <param name = "proratedCharge">A charge that is about to be inserted on to a sales line.</param>
    /// <returns>True if that charge already exists on the sales line it is attached to; otherwise false.</returns>
    internal static boolean proratedChargeAlreadyExistsOnThisSalesLine(MarkupTrans proratedCharge)
    {
        MarkupTrans markupTrans;

        select firstonly markupTrans
            where markupTrans.TransTableId == proratedCharge.TransTableId
            && markupTrans.TransRecId == proratedCharge.TransRecId 
            && markupTrans.MarkupAutoLineRecId == proratedCharge.MarkupAutoLineRecId;

        return markupTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existProratedTieredCharges</Name>
				<Source><![CDATA[
    internal static boolean existProratedTieredCharges(SalesTable salesTable)
    {
        MarkupTrans markupTrans;
        SalesLine salesLine;

        while select salesLine
            where salesLine.SalesId == salesTable.SalesId
        {
            select firstonly RecId from markupTrans
                where markupTrans.TransRecId     == salesLine.RecId
                    && markupTrans.TransTableId   == tableNum(SalesLine)
                    && markupTrans.IsTieredCharge == NoYes::Yes
                    && markupTrans.IsAdvancedLineProrated == NoYes::Yes;

            if (markupTrans.RecId != 0)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAdvancedProratedCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the prorated charges associated with a sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> that will have all its prorated charges deleted.
    /// </param>
    internal static void deleteAdvancedProratedCharges(SalesTable _salesTable)
    {
        var salesLinesQuery = _salesTable.linesQuery();
        var qr = new QueryRun(salesLinesQuery);

        MarkupTrans markupTrans;
        while (qr.next())
        {
            SalesLine salesLine = qr.get(tableNum(SalesLine));

            delete_from markupTrans
                where markupTrans.TransRecId     == salesLine.RecId
                   && markupTrans.TransTableId   == salesLine.TableId
                   && markupTrans.IsAdvancedLineProrated == NoYes::Yes
                   && markupTrans.IsOverriddenProratedLine == NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupMatchesSalesLine</Name>
				<Source><![CDATA[
    internal static boolean markupMatchesSalesLine(MarkupAutoTable _markupAutoTable, SalesTable _salesTable, SalesLine _salesLine)
    {
        if (RetailProrateChargeExcludeCanceledLineFlight::instance().isEnabled() && _salesLine.SalesStatus == SalesStatus::Canceled)
        {
            return false;
        }

        if (!_markupAutoTable.RetailAdvancedChargesDeliveryProrate)
        {
            // If we are not finding matching sales lines for charge proration, this operation does not make sense.
            return false;
        }

        if (_markupAutoTable.AccountCode == TableGroupAll::Table
                && _markupAutoTable.AccountRelation != _salesTable.CustAccount)
        {
            return false;
        }

        if (_markupAutoTable.AccountCode == TableGroupAll::GroupId
                && _markupAutoTable.AccountRelation != _salesTable.MarkupGroup)
        {
            return false;
        }

        if (_markupAutoTable.DlvModeCode == TableGroupAll::Table
                && _markupAutoTable.DlvModeRelation != _salesLine.DlvMode)
        {
            return false;
        }

        if (_markupAutoTable.DlvModeCode == TableGroupAll::GroupId
            && _markupAutoTable.DlvModeRelation != DlvMode::find(_salesLine.DlvMode).MarkupGroup)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineSumAmount</Name>
				<Source><![CDATA[
    internal static Amount salesLineSumAmount(List salesLines)
    {
        Amount _sum = 0.00;

        var enum = salesLines.getEnumerator();

        while (enum.moveNext())
        {
            SalesLine salesLine = enum.current();
            _sum += salesLine.lineAmountForTieredCharge();
        }

        return _sum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>