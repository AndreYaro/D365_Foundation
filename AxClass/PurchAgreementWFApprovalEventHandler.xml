<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementWFApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementWFApprovalEventHandler</c> class is the event handler class for managing the workflow approval canceled event and the workflow approval returned event.
/// </summary>
public class PurchAgreementWFApprovalEventHandler implements  WorkflowElementCompletedEventHandler,
                                                                WorkflowElementCanceledEventHandler,
                                                                WorkflowElementReturnedEventHandler,
                                                                WorkflowElemChangeRequestedEventHandler,
                                                                WorkflowElementStartedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the canceled event for the workflow approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeRequested</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WorkflowStatus</c> field on the <c>PurchAgreementHeader</c> table to the <c>PurchAgreementWorkflowStatus::ChangeRequested</c> enumeration value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// A <c>WorkflowElementEventArgs</c> instance.
    /// </param>
    /// <remarks>
    /// This method is called from workflow framework when a change is requested to workflow approval element.
    /// </remarks>
    public void changeRequested(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::ChangeRequested);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the completed event for the workflow approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the returned event for the workflow approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::Returned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the started event for the workflow approval.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the approval element is started.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::PendingApproval);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>