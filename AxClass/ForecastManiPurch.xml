<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastManiPurch</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class ForecastManiPurch extends ForecastMani
{
    private readonly boolean isForecastManiInventoryQtyUpdateFlightEnabled = ForecastManiInventoryQtyUpdateFlight::instance().isEnabled();

    [FormObservable]
    NoYes           changeVendACId;
    [FormObservable]
    VendAccount     vendACId;
    [FormObservable]
    NoYes           changeVendGroupId;
    [FormObservable]
    VendGroupId     vendGroupId;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        ChangeVendACId,
        VendACId,
        ChangeVendGroupId,
        VendGroupId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Args            args = new Args(formstr(ForecastManiPurch));
        args.caller(this);
        dialog = classfactory.formRunClass(args);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields(BudgetMap _forecastPurch)
    {
        ForecastPurch forecastPurch = _forecastPurch;
        super(_forecastPurch);

        forecastPurch.VendGroupId = changeVendGroupId
            ? vendGroupId
            : forecastPurch.VendGroupId;
        forecastPurch.VendAccountId = changeVendACId
            ? vendACId
            : forecastPurch.VendAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    void setField(BudgetMap _budget)
    {
        super(_budget);

        if (isForecastManiInventoryQtyUpdateFlightEnabled && field)
        {
            ForecastPurch forecastPurch = _budget as ForecastPurch;

            if (forecastPurch)
            {
                switch (field)
                {
                    case ForecastManiField::Qty:
                        _budget.InventQty = forecastPurch.calcQtyOrdered();
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeVendACId</Name>
				<Source><![CDATA[
    NoYes parmChangeVendACId(NoYes selection = changeVendACId)
    {
        changeVendACId = selection;

        return changeVendACId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeVendGroupId</Name>
				<Source><![CDATA[
    NoYes parmChangeVendGroupId(NoYes selection = changeVendGroupId)
    {
        changeVendGroupId = selection;

        return changeVendGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendACId</Name>
				<Source><![CDATA[
    VendAccount parmVendACId(VendAccount selection = vendACId)
    {
        vendACId = selection;

        return vendACId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendGroup</Name>
				<Source><![CDATA[
    VendGroupId parmVendGroup(VendGroupId selection = vendGroupId)
    {
        vendGroupId = selection;

        return vendGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    Query search()
    {
        Query query = new Query(querystr(ForecastManiPurch));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = super();

        switch (administration)
        {
            case BudgetMani::Copying,BudgetMani::UpdateNow :
                if (changeVendACId && vendACId)
                {
                    ok = VendTable::checkExist(vendACId) && ok;
                }
                if (changeVendGroupId && vendGroupId)
                {
                    ok = VendGroup::checkExist(vendGroupId) && ok;
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>