<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastMassUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HcmPositionForecastMassUpdate</c> class manages the mass update of position forecast data for a given list of positions.
/// </summary>
class HcmPositionForecastMassUpdate extends HcmPositionMassUpdateBase
{
    Set positionForecastScenarioToReCalculateSet;
    boolean costElementUpdated;

    HcmPositionForecastRecId hcmPositionForecastRecId;
    HcmPositionForecastScenarioRecId hcmPositionForecastScenarioRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmPositionForecastRecId</Name>
				<Source><![CDATA[
    public HcmPositionForecastRecId parmPositionForecastRecId(HcmPositionForecastRecId _hcmPositionForecastRecId = hcmPositionForecastRecId)
    {
        hcmPositionForecastRecId = _hcmPositionForecastRecId;

        return hcmPositionForecastRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastScenarioRecId</Name>
				<Source><![CDATA[
    public final HcmPositionForecastScenarioRecId parmPositionForecastScenarioRecId(HcmPositionForecastScenarioRecId _hcmPositionForecastScenarioRecId = hcmPositionForecastScenarioRecId)
    {
        hcmPositionForecastScenarioRecId = _hcmPositionForecastScenarioRecId;

        return hcmPositionForecastScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether processing can continue after the user-defined information has been provided.
    /// </summary>
    /// <param name="_calledFrom">
    /// The object that called this method.
    /// </param>
    /// <returns>
    /// true if the dialog box can continue with processing; otherwise, false.
    /// </returns>
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        boolean ret = true;

        if (this.parmEditActivationDateTime() && this.parmEditRetirementDateTime())
        {
            if (ret && this.parmRetirementDateTime() < this.parmActivationDateTime())
            {
                ret = ret && checkFailed("@GLS190185");
            }
        }

        if (this.parmEditJob() && !this.parmJobRecId())
        {
            ret = ret & checkFailed(strFmt("@SYS84753", fieldPName(HcmPositionDetail, Job)));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        positionForecastScenarioToReCalculateSet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performMassUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Carries out a mass update operation for a selected list of forecast positions.
    /// </summary>
    private void performMassUpdate()
    {
        boolean                                isPositionUpdated;
        SysOperationProgress                   progress = new SysOperationProgress();
        int                                    numberOfReferences = conLen(this.parmSelectedReferences());
        int                                    counter;
        int                                    numberOfRecordsUpdated;
        HcmPositionForecast                    hcmPositionForecast;
        HcmPositionForecastScenario            hcmPositionForecastScenario;
        HcmPositionForecastCalcProcessLauncher hcmPositionForecastCalcProcessLauncher;
        List                                   positionsNotUpdatedList = new List(Types::Container);
        HcmForecastScenario                    hcmForecastScenario;

        progress.setCaption("@Budget:BudgetPlan_PostionForecasting_MassUpdate_ProgressMessage_UpdatingPositions");
        progress.setTotal(numberOfReferences);
        progress.updateInterval(1);
        progress.update(true);

        for (counter = 1; counter <= numberOfReferences; counter++)
        {
            this.parmPositionForecastScenarioRecId(conPeek(this.parmSelectedReferences(), counter));
            hcmPositionForecastScenario = HcmPositionForecastScenario::find(this.parmPositionForecastScenarioRecId());

            hcmPositionForecast = HcmPositionForecast::find(hcmPositionForecastScenario.PositionForecast);

            this.parmPositionForecastRecId(hcmPositionForecastScenario.PositionForecast);

            if (hcmPositionForecastScenario.RecId)
            {
                hcmForecastScenario                             = HcmForecastScenario::find(hcmPositionForecastScenario.ForecastScenario);
                BudgetPlanningProcessName budgetPlanProcessName = BudgetPlanningProcess::find(hcmForecastScenario.BudgetPlanningProcess).Name;
                BudgetPlanScenarioName budgetPlanScenarioName   = BudgetPlanScenario::find(hcmForecastScenario.BudgetPlanScenario).Name;
                HcmPositionId positionID                        = HcmPosition::find(hcmPositionForecast.Position).PositionId;

                try
                {
                    setPrefix(strFmt("@Budget:BudgetPlan_PositionForecasting_MassUpdate_PositionDetails", positionID));

                    ttsbegin;
                    isPositionUpdated = this.updateHcmPositionForecastDetail() || isPositionUpdated;
                    isPositionUpdated = this.updateHcmPositionForecastScenario() || isPositionUpdated;
                    isPositionUpdated = this.updateHcmPositionForecastHierarchy() || isPositionUpdated;
                    isPositionUpdated = this.updateHcmPositionForecastDefaultDim() || isPositionUpdated;
                    isPositionUpdated = this.updateHcmPositionForecastBudgetDefault() || isPositionUpdated;
                    isPositionUpdated = this.updateHcmPositionForecastBudgetAcctLines() || isPositionUpdated;

                    if (isPositionUpdated)
                    {
                        this.setHcmPositionForecastLastModified();
                        ttscommit;

                        // Remove the position ID prefix that had had earlier been written to the InfoLog.
                        infolog.clear(infologLine());

                        if (positionMassUpdateBudgetProvider.getEditBudgetAccountLines())
                        {
                            // If Budget Default check box is checked, we need to check the costElementUpdated flag and update the counter.
                            if (costElementUpdated)
                            {
                                numberOfRecordsUpdated++;
                            }
                            else
                            {
                                positionsNotUpdatedList.addEnd([positionID, budgetPlanProcessName, budgetPlanScenarioName]);
                            }
                        }
                        else
                        {
                            numberOfRecordsUpdated++;
                        }

                        progress.setText(strFmt("@Budget:BudgetPlan_PositionForecasting_MassUpdate_UpdatedPosition", positionId));
                    }
                    else
                    {
                        ttsabort;
                    }
                }
                catch
                {
                    exceptionTextFallThrough();
                }

                progress.setCount(counter, 1);

                if (this.parmPositionForecastScenarioRecId())
                {
                    positionForecastScenarioToReCalculateSet.add(this.parmPositionForecastScenarioRecId());
                }
            }
        }

        if (positionForecastScenarioToReCalculateSet.elements())
        {
            //Calling the ReCalculation Engine to calculate the budget amounts of budget account lines for the forecast positions in the set
            hcmPositionForecastCalcProcessLauncher = HcmPositionForecastCalcProcessLauncher::newForecastCalcMultiplePositions(positionForecastScenarioToReCalculateSet);
            hcmPositionForecastCalcProcessLauncher.runPositionForecstCalculationProcess();
        }

        this.showMassUpdateCompletionMessage(numberOfRecordsUpdated, numberOfReferences, positionsNotUpdatedList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMassUpdateCompletionMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the result of the mass update operation on a list of forecast positions.
    /// </summary>
    /// <param name = "numberOfRecordsUpdated">The number of positions that were updated.</param>
    /// <param name = "numberOfReferences">The number of positions.</param>
    /// <param name = "positionsNotUpdatedList">The list of positions that were not updated.</param>
    protected void showMassUpdateCompletionMessage(int numberOfRecordsUpdated, int numberOfReferences, List positionsNotUpdatedList)
    {
        if (numberOfRecordsUpdated == numberOfReferences)
        {
            // Format message to display the number of records updated and which records were not updated.
            info(strFmt("@Budget:BudgetPlan_PositionForecasting_MassUpdate_NumberOfPositionsUpdated", int2str(numberOfRecordsUpdated), int2str(numberOfReferences)));
        }
        else
        {
            ListEnumerator positionsNotUpdatedListEnumerator = positionsNotUpdatedList.getEnumerator();
            setPrefix(strFmt("@Budget:BudgetPlan_PositionForecasting_MassUpdate_NumberOfPositionsUpdated", int2str(numberOfRecordsUpdated), int2str(numberOfReferences)));
            setPrefix("@Budget:BudgetPlan_PositionForecasting_MassUpdate_FailureInfo");
            HcmPositionId                          positionID;
            BudgetPlanningProcessName              budgetPlanProcessName;
            BudgetPlanScenarioName                 budgetPlanScenarioName;

            while (positionsNotUpdatedListEnumerator.moveNext())
            {
                [positionID, budgetPlanProcessName, budgetPlanScenarioName] = positionsNotUpdatedListEnumerator.current();
                info(strFmt("@Budget:BudgetPlan_PositionForecasting_ListPositionIdProcessScenario", positionID, budgetPlanProcessName, budgetPlanScenarioName));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    protected void run()
    {
        super();

        if (conLen(this.parmSelectedReferences()) > 0)
        {
            this.performMassUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHcmPositionForecastLastModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>HcmPositionForecastLastModified</c> table.
    /// </summary>
    /// <returns>
    /// true if the <c>HcmPositionForecastLastModified</c> table is updated; otherwise, false.
    /// </returns>
    private boolean setHcmPositionForecastLastModified()
    {
        HcmPositionForecastLastModified   positionForecastLastModified;
        boolean                           attemptUpdate  = false;

        try
        {
            setPrefix("@GLS190167");

            positionForecastLastModified = HcmPositionForecastLastModified::findByPositionForecastScenerio(this.parmPositionForecastScenarioRecId(), true);

            if (!positionForecastLastModified)
            {
                positionForecastLastModified.PositionForecastScenario = this.parmPositionForecastScenarioRecId();
                positionForecastLastModified.Dummy = true;
            }

            ttsbegin;
            positionForecastLastModified.write();
            ttscommit;
            attemptUpdate = true;
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastBudgetAcctLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>HcmPositionForecastBudgetAccountLine</c> table with the selected budget types.
    /// </summary>
    /// <returns>
    /// true if the budget account lines were updated; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Mass update follows a pattern of disallowing edits to date effective records if a future date
    /// effective record exists.If no rows were selected on the mass update form, records in the
    /// <c>HcmPositionBudgetAccountLine</c> table are either discontinued or deleted.If the record
    /// retrieved is the most future record then it is deleted. If it is a current record that does not
    /// have future records then its discontinued.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// Throw an exception if writing to the <c>HcmPositionForecastBudgetAccountLine</c> table fails.
    /// </exception>
    private boolean updateHcmPositionForecastBudgetAcctLines()
    {
        boolean                             attemptUpdate  = false;
        int                                 conLength;
        HcmPositionForecastAssignCostElement hcmPositionForecastAssignCostElement;

        try
        {
            setPrefix("@GLS190015");

            //Setting costElementUpdate flag to false
            costElementUpdated = false;

            if (positionMassUpdateBudgetProvider.getEditBudgetAccountLines())
            {
                hcmPositionForecastAssignCostElement = HcmPositionForecastAssignCostElement::newMassUpdateByPosition(this.parmPositionForecastScenarioRecId(),
                                                                                                                        positionMassUpdateBudgetProvider.getTmpBudgetPurposeTypeContainer());

                conLength = conLen(positionMassUpdateBudgetProvider.getTmpBudgetPurposeTypeContainer());

                if (conLength == 0)
                {
                    // If no rows were selected in the grid position budget account lines are deleted
                    hcmPositionForecastAssignCostElement.removeAllCostElementsByPosition();
                    costElementUpdated = true;
                }
                else
                {
                    hcmPositionForecastAssignCostElement.runForecastPositionCostAssignments();

                    if (hcmPositionForecastAssignCostElement.parmMassUpdateCostElmentAdded() == true)
                    {
                        //
                        // If the cost element was assigned successfully after budget process cycle dates and position duration date validations
                        // set the flag to true
                        //
                        costElementUpdated = true;
                    }
                }
            }

            attemptUpdate = true;
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastBudgetDefault</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastBudgetDefault()
    {
        HcmPositionForecastBudgetDefaultValue   hcmPositionForecastBudgetDefaultValue;
        boolean                                 attemptUpdate = false;

        try
        {
            hcmPositionForecastBudgetDefaultValue = HcmPositionForecastBudgetDefaultValue::findByPositionForecastLegalEntity(this.parmPositionForecastRecId(), this.parmDimensionLegalEntityRecId(), true);

            setPrefix("@GLS190024");

            if (!hcmPositionForecastBudgetDefaultValue)
            {
                hcmPositionForecastBudgetDefaultValue.PositionForecast = this.parmPositionForecastRecId();
                hcmPositionForecastBudgetDefaultValue.LegalEntity = this.parmDimensionLegalEntityRecId();
            }

            if (attemptUpdate)
            {
                ttsbegin;
                hcmPositionForecastBudgetDefaultValue.write();
                ttscommit;
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastDefaultDim</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastDefaultDim()
    {
        HcmPositionForecastDefaultDim positionForecastDefaultDim;
        boolean                       attemptUpdate = false;

        try
        {
            setPrefix("@GLS190167");

            positionForecastDefaultDim = HcmPositionForecastDefaultDim::findByPositionForecastLegalEntity(this.parmPositionForecastRecId(), this.parmDimensionLegalEntityRecId(), true);

            if (!positionForecastDefaultDim)
            {
                positionForecastDefaultDim.PositionForecast = this.parmPositionForecastRecId();
                positionForecastDefaultDim.LegalEntity = this.parmDimensionLegalEntityRecId();
            }

            if (this.parmEditDimension())
            {
                positionForecastDefaultDim.DefaultDimension = this.parmDimensionDefaultRecId();
                attemptUpdate = true;
            }

            if (this.parmEditDistributionTemplate())
            {
                positionForecastDefaultDim.DistributionTemplate = this.parmDistributionTemplateRecId();
                attemptUpdate = true;
            }

            if (attemptUpdate)
            {
                if (positionForecastDefaultDim.validateWrite())
                {
                    ttsbegin;
                    positionForecastDefaultDim.write();
                    ttscommit;
                    attemptUpdate = true;
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastDetail</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastDetail()
    {
        HcmPositionForecastDetail   positionForecastDetail;
        boolean                     attemptUpdate = false;

        try
        {
            positionForecastDetail = HcmPositionForecastDetail::findByPositionForecast(this.parmPositionForecastRecId(), true);

            setPrefix("@GLS190168");

            if (!positionForecastDetail)
            {
                positionForecastDetail.PositionForecast = this.parmPositionForecastRecId();
            }

            if (this.parmEditDescription())
            {
                positionForecastDetail.Description = this.parmDescription();
                attemptUpdate = true;
            }

            if (this.parmEditTitle())
            {
                positionForecastDetail.Title = this.parmTitleRecId();
                attemptUpdate = true;
            }

            if (this.parmEditDepartment())
            {
                positionForecastDetail.Department = this.parmDepartmentRecId();
                attemptUpdate = true;
            }

            if (this.parmEditCompensationLocation())
            {
                positionForecastDetail.CompLocation = this.parmCompensationLocationRecId();
                attemptUpdate = true;
            }

            if (this.parmEditJob())
            {
                positionForecastDetail.Job = this.parmJobRecId();
                attemptUpdate = true;
            }

            if (this.parmEditPositionType())
            {
                positionForecastDetail.PositionType = this.parmPositionTypeRecId();
                attemptUpdate = true;
            }

            if (attemptUpdate)
            {
                this.updateHcmPositionForecastDetailV2();
                if (positionForecastDetail.validateWrite())
                {
                    ttsbegin;
                    positionForecastDetail.write();
                    ttscommit;
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastDetailV2</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastDetailV2()
    {

        boolean attemptUpdate = false;
        HcmPositionForecastDetailV2 positionForecastDetail;

        try
        {
            positionForecastDetail = HcmPositionForecastDetailV2::findByPositionForecastScenerio(this.parmPositionForecastScenarioRecId(),this.parmPositionForecastRecId(),true);

            setPrefix("@Budget:HCMPositionForecastDetailV2Label");

            if (!positionForecastDetail)
            {
                positionForecastDetail.PositionForecast = this.parmPositionForecastRecId();
            }

            if (this.parmEditDescription())
            {
                positionForecastDetail.Description = this.parmDescription();
                attemptUpdate = true;
            }

            if (this.parmEditTitle())
            {
                positionForecastDetail.Title = this.parmTitleRecId();
                attemptUpdate = true;
            }

            if (this.parmEditDepartment())
            {
                positionForecastDetail.Department = this.parmDepartmentRecId();
                attemptUpdate = true;
            }

            if (this.parmEditCompensationLocation())
            {
                positionForecastDetail.CompLocation = this.parmCompensationLocationRecId();
                attemptUpdate = true;
            }

            if (this.parmEditJob())
            {
                positionForecastDetail.Job = this.parmJobRecId();
                attemptUpdate = true;
            }

            if (this.parmEditPositionType())
            {
                positionForecastDetail.PositionType = this.parmPositionTypeRecId();
                attemptUpdate = true;
            }

            if (attemptUpdate)
            {
                if (positionForecastDetail.validateWrite())
                {
                    ttsbegin;
                    positionForecastDetail.write();
                    ttscommit;
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastDuration</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastDuration()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastHierarchy</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastHierarchy()
    {
        HcmPositionForecastHierarchy    hcmPositionForecastHierarchy;
        HcmPositionHierarchyTypeRecId   localHierarchyTypeRecId;
        boolean                         attemptUpdate = false;

        try
        {
            setPrefix("@GLS190171");

            localHierarchyTypeRecId = HcmPositionHierarchyType::lineHierarchyType();

            hcmPositionForecastHierarchy = HcmPositionForecastHierarchy::findByPositionForecastAndHierarchyType(this.parmPositionForecastRecId(), localHierarchyTypeRecId, true);

            if (!hcmPositionForecastHierarchy)
            {
                hcmPositionForecastHierarchy.PositionForecast = this.parmPositionForecastRecId();
            }

            hcmPositionForecastHierarchy.ParentPosition = this.parmReportsToPositionRecId();

            if (hcmPositionForecastHierarchy.validateWrite())
            {
                ttsbegin;
                hcmPositionForecastHierarchy.write();
                ttscommit;
                attemptUpdate = true;
            }
            else
            {
                throw Exception::Error;
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateHcmPositionForecastScenario</Name>
				<Source><![CDATA[
    private boolean updateHcmPositionForecastScenario()
    {
        HcmPositionForecastScenario     hcmPositionForecastScenario;
        boolean                         attemptUpdate = false;
        boolean                         insertPositionForecastScenario = false;
        Timezone                        userTimeZone = DateTimeUtil::getUserPreferredTimeZone();
        HcmPositionActivationDateTime   newActivationDateTime;
        HcmPositionRetirementDateTime   newRetirementDateTime;

        try
        {
            hcmPositionForecastScenario = HcmPositionForecastScenario::find(this.parmPositionForecastScenarioRecId(), true);

            setPrefix("@GLS190169");

            if (!hcmPositionForecastScenario)
            {
                insertPositionForecastScenario = true;
                newActivationDateTime = HcmDateTimeUtil::startOfCurrentDay();
                newRetirementDateTime = DateTimeUtil::maxValue();
            }

            if (this.parmEditActivationDateTime())
            {
                newActivationDateTime = DateTimeUtil::removeTimeZoneOffset(this.parmActivationDateTime(), userTimeZone);
                hcmPositionForecastScenario.ActivationDateTime = newActivationDateTime;
                attemptUpdate = true;
            }

            if (this.parmEditRetirementDateTime())
            {
                newRetirementDateTime = DateTimeUtil::removeTimeZoneOffset(this.parmRetirementDateTime(), userTimeZone);
                hcmPositionForecastScenario.RetirementDateTime = newRetirementDateTime;
                attemptUpdate = true;
            }

            if (this.parmEditFullTimeEquivalency())
            {
                hcmPositionForecastScenario.FullTimeEquivalency = this.parmFullTimeEquivalency();
                attemptUpdate = true;
            }

            if (attemptUpdate)
            {
                if (insertPositionForecastScenario)
                {
                    if (this.parmActivationDateTime() && this.parmRetirementDateTime())
                    {
                        hcmPositionForecastScenario.RecId = this.parmPositionForecastScenarioRecId();
                        hcmPositionForecastScenario.PositionForecast = this.parmPositionForecastRecId();
                    }
                    else
                    {
                        checkFailed("@GLS190447");
                        throw Exception::Error;
                    }

                    hcmPositionForecastScenario.ActivationDateTime = newActivationDateTime;
                    hcmPositionForecastScenario.RetirementDateTime = newRetirementDateTime;
                }

                if (hcmPositionForecastScenario.validateWrite())
                {
                    ttsbegin;
                    HcmPositionForecastBudgetAcctLine::updatePositionBudgetCostElementDates(hcmPositionForecastScenario.RecId,
                                                                                                  hcmPositionForecastScenario.getUserTimeZoneActivationDate(),
                                                                                                    hcmPositionForecastScenario.getUserTimeZoneRetirementDate());

                    if (hcmPositionForecastScenario.PositionForecastCompensationGrid != 0)
                    {
                        hcmPositionForecastScenario.setCompensationGridByDuration();
                    }
                    hcmPositionForecastScenario.write();
                    ttscommit;
                }
                else
                {
                    throw Exception::Error;
                }
            }
        }
        catch
        {
            exceptionTextFallThrough();
        }

        return attemptUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>HcmPositionMassUpdate</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>HcmPositionMassUpdate</c> class.
    /// </returns>
    public static HcmPositionForecastMassUpdate construct()
    {
        return new HcmPositionForecastMassUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        HcmPositionForecastMassUpdate    hcmPositionForecastMassUpdate;

        hcmPositionForecastMassUpdate = HcmPositionForecastMassUpdate::construct();

        // Save the original current company context.
        hcmPositionForecastMassUpdate.parmOriginalDataArea(CompanyInfo::findDataArea(curext()).DataArea);

        hcmPositionForecastMassUpdate.parmFormArgs(_args);
        hcmPositionForecastMassUpdate.run();

        // Reset the original current company context.
        hcmPositionForecastMassUpdate.resetOriginalDataArea();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>