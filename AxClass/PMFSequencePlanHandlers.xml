<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PMFSequencePlanHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>PMFSequencePlanHandlers</c> provides static event subscription handlers for master planning plan changes.
/// </summary>
class PMFSequencePlanHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupReqRouteChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the PDS requirement route changes for a plan version.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post- arguments for a method event subscription.
    /// </param>
    /// <remarks>
    /// This extends the functionality of <see cref="ReqPlanDelete.cleanupReqRoute method"/>.
    /// </remarks>
    [PostHandlerFor(classStr(ReqPlanDelete), methodStr(ReqPlanDelete, cleanupReqRoute))]
    public static void cleanupReqRouteChanges(XppPrePostArgs _args)
    {
        ReqPlanVersion          planVersion = _args.getArg('_reqPlanVersion');

        PMFSeqReqRouteChanges   changesSelect;
        PMFSeqReqRouteChanges   changesDelete;

        new SkipAOSValidationPermission().assert();

        changesSelect.skipDataMethods(true);
        changesDelete.skipDeleteActions(true);
        changesDelete.skipAosValidation(true);

        // while select is detached from the delete_from statement as an optimization
        // mechanism for the indexes defined in the table definition
        while select OprNum
            from changesSelect
            group by OprNum
            where changesSelect.PlanVersion         == planVersion.RecId
        {
            ttsBegin;

            delete_from changesDelete
                where changesDelete.OprNum          == changesSelect.OprNum
                    && changesDelete.PlanVersion    == planVersion.RecId;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReservationChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the PDS resource reservation changes for a plan version.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post- arguments for a method event subscription.
    /// </param>
    /// <remarks>
    /// This extends the functionality of <see cref="ReqPlanDelete.cleanupWrkCtrCapRes method"/>.
    /// </remarks>
    [PostHandlerFor(classStr(ReqPlanDelete), methodStr(ReqPlanDelete, cleanupWrkCtrCapRes))]
    public static void cleanupReservationChanges(XppPrePostArgs _args)
    {
        ReqPlanVersion          planVersion = _args.getArg('_reqPlanVersion');

        PMFSeqWrkCtrCapRes      changesSelect;
        PMFSeqWrkCtrCapRes      changesDelete;
        PmfSeqWrkCtrCapResProperty properties;

        new SkipAOSValidationPermission().assert();

        changesSelect.skipDataMethods(true);
        changesDelete.skipDeleteActions(true);
        changesDelete.skipAosValidation(true);
        properties.skipDataMethods(true);
        properties.skipDeleteActions(true);
        properties.skipAosValidation(true);

        // while select is detached from the delete_from statement as an optimization
        // mechanism for the indexes defined in the table definition
        while select WrkCtrId
            from changesSelect
            group by WrkCtrId
            where changesSelect.PlanVersion         == planVersion.RecId
        {
            ttsBegin;

            delete_from changesDelete
                where changesDelete.WrkCtrId        == changesSelect.WrkCtrId
                    && changesDelete.PlanVersion    == planVersion.RecId;

            ttsCommit;
        }

        ttsBegin;

        delete_from properties
            notExists join changesSelect
                where properties.CapResRefRecId == changesSelect.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReqRouteChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the PDS requirement route changes from one plan version to another plan version.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post- arguments for a method event subscription.
    /// </param>
    /// <remarks>
    /// This extends the functionality of <see cref="ReqPlanCopy.copyReqRoute method"/>.
    /// </remarks>
    [PostHandlerFor(classStr(ReqPlanCopy), methodStr(ReqPlanCopy, copyReqRoute))]
    public static void copyReqRouteChanges(XppPrePostArgs _args)
    {
        ReqPlanVersion              planVersionFrom = _args.getArg('_reqPlanVersionFrom');
        ReqPlanVersion              planVersionTo   = _args.getArg('_reqPlanVersionTo');

        PMFSeqReqRouteChanges       changesSelect;
        PMFSeqReqRouteChanges       changesSelectVersion;
        PMFSeqReqRouteChanges       changesInsert;

        RecId                       recIdPlanVersionTo = planVersionTo.RecId;

        new SkipAOSValidationPermission().assert();

        changesInsert.skipDataMethods(true);
        changesInsert.skipAosValidation(true);

        while select OprNum
        from         changesSelect
        group by     OprNum
        where        changesSelect.PlanVersion  == planVersionFrom.RecId
        {
            ttsBegin;

            insert_recordset changesInsert      (   PlanVersion,
                                                    ActionDays, ActionType, OprNum, OprPriority,
                                                    MaxDateTime, MinDateTIme, NewFromDateTime, NewToDateTime, OrigFromDateTime, OrigToDateTime,
                                                    Periods, Ranking, RefId, ReqRouteRecId, SequencedOp,
                                                    LogText, LogType
                                                )
            select                                  recIdPlanVersionTo,
                                                    ActionDays, ActionType, OprNum, OprPriority,
                                                    MaxDateTime, MinDateTIme, NewFromDateTime, NewToDateTime, OrigFromDateTime, OrigToDateTime,
                                                    Periods, Ranking, RefId, ReqRouteRecId, SequencedOp,
                                                    LogText, LogType
            from             changesSelectVersion
            where            changesSelectVersion.OprNum          == changesSelect.OprNum
                             && changesSelectVersion.PlanVersion  == planVersionFrom.RecId;

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReqRouteChangesForReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the PDS requirement route changes from one plan version to another plan version for
    /// all planned orders that were already copied to the new plan version.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post- arguments for a method event subscription.
    /// </param>
    /// <remarks>
    /// This extends the functionality of <see cref="ReqPlanCopy.copyReqRouteForReqPO method"/>.
    /// </remarks>
    [PostHandlerFor(classStr(ReqPlanCopy), methodStr(ReqPlanCopy, copyReqRouteForReqPO))]
    public static void copyReqRouteChangesForReqPO(XppPrePostArgs _args)
    {
        ReqPlanVersion              planVersionFrom = _args.getArg('_reqPlanVersionFrom');
        ReqPlanVersion              planVersionTo   = _args.getArg('_reqPlanVersionTo');

        PMFSeqReqRouteChanges       changesSelect;
        PMFSeqReqRouteChanges       changesInsert;
        ReqPO                       reqPOSelect;

        RecId                       recIdPlanVersionTo = planVersionTo.RecId;

        new SkipAOSValidationPermission().assert();

        changesInsert.skipDataMethods(true);
        changesInsert.skipAosValidation(true);

        ttsBegin;

        insert_recordset changesInsert      (   PlanVersion,
                                                ActionDays, ActionType, OprNum, OprPriority,
                                                MaxDateTime, MinDateTIme, NewFromDateTime, NewToDateTime, OrigFromDateTime, OrigToDateTime,
                                                Periods, Ranking, RefId, ReqRouteRecId,
                                                LogText, LogType
                                            )
        select                                  recIdPlanVersionTo,
                                                ActionDays, ActionType, OprNum, OprPriority,
                                                MaxDateTime, MinDateTIme, NewFromDateTime, NewToDateTime, OrigFromDateTime, OrigToDateTime,
                                                Periods, Ranking, RefId, ReqRouteRecId,
                                                LogText, LogType
        from        changesSelect
        where       changesSelect.PlanVersion  == planVersionFrom.RecId
        exists join reqPOSelect
        where       reqPOSelect.PlanVersion    == planVersionTo.RecId
                    && reqPOSelect.RefId       == changesSelect.RefId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReservationChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the PDS resource reservation changes from one plan version to another plan version.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post- arguments for a method event subscription.
    /// </param>
    /// <remarks>
    /// This extends the functionality of <see cref="ReqPlanCopy.copyWrkCtrCapRes method"/>.
    /// </remarks>
    [PostHandlerFor(classStr(ReqPlanCopy), methodStr(ReqPlanCopy, copyWrkCtrCapRes))]
    public static void copyReservationChanges(XppPrePostArgs _args)
    {
        ReqPlanVersion              planVersionFrom = _args.getArg('_reqPlanVersionFrom');
        ReqPlanVersion              planVersionTo   = _args.getArg('_reqPlanVersionTo');

        PMFSeqWrkCtrCapRes          changesSelect;
        PMFSeqWrkCtrCapRes          changesSelectVersion;
        PMFSeqWrkCtrCapRes          changesInsert;

        PmfSeqWrkCtrCapResProperty  propertiesSelect;
        PmfSeqWrkCtrCapResProperty  propertiesInsert;

        RecId                       recIdPlanVersionTo = planVersionTo.RecId;

        new SkipAOSValidationPermission().assert();

        changesInsert.skipDataMethods(true);
        changesInsert.skipAosValidation(true);
        propertiesInsert.skipDataMethods(true);
        propertiesInsert.skipAosValidation(true);

        while select WrkCtrId
        from         changesSelect
        group by     WrkCtrId
        where        changesSelect.PlanVersion  == planVersionFrom.RecId
        {
            ttsBegin;

            insert_recordset changesInsert      (   PlanVersion,
                                                    WrkCtrId, JobType, JobId, LoadType, Locked, OprNum, OprPriority,
                                                    RefType, RefId, PropertyId, TransDate, StartTime, EndTime,
                                                    WrkCtrLoadPct, WrkCtrSec, IntvWk, IntvMth, IntvQr,
                                                    OrigCapResRefRecId
                                                )
            select                                  recIdPlanVersionTo,
                                                    WrkCtrId, JobType, JobId, LoadType, Locked, OprNum, OprPriority,
                                                    RefType, RefId, PropertyId, TransDate, StartTime, EndTime,
                                                    WrkCtrLoadPct, WrkCtrSec, IntvWk, IntvMth, IntvQr,
                                                    RecId
            from             changesSelectVersion
            where            changesSelectVersion.WrkCtrId        == changesSelect.WrkCtrId
                             && changesSelectVersion.PlanVersion  == planVersionFrom.RecId;

            ttsCommit;
        }

        ttsBegin;

        insert_recordset propertiesInsert (SchedulingPropertyId, CapResRefRecId)
            select SchedulingPropertyId
            from propertiesSelect
                join changesSelect
                    where changesSelect.PlanVersion == planVersionFrom.RecId
                       && changesSelect.RecId       == propertiesSelect.CapResRefRecId
                    join RecId
                    from changesSelectVersion
                        where changesSelectVersion.PlanVersion          == recIdPlanVersionTo
                           && changesSelectVersion.OrigCapResRefRecId   == changesSelect.RecId;

        update_recordSet changesInsert
            setting OrigCapResRefRecId = 0
            where changesInsert.PlanVersion == recIdPlanVersionTo;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyReservationChangesForReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the PDS resource reservation changes from one plan version to another plan version for
    /// all planned orders that were already copied to the new plan version.
    /// </summary>
    /// <param name="_args">
    /// The pre-/post- arguments for a method event subscription.
    /// </param>
    /// <remarks>
    /// This extends the functionality of <see cref="ReqPlanCopy.copyWrkCtrCapResForReqPO method"/>.
    /// </remarks>
    [PostHandlerFor(classStr(ReqPlanCopy), methodStr(ReqPlanCopy, copyWrkCtrCapResForReqPO))]
    public static void copyReservationChangesForReqPO(XppPrePostArgs _args)
    {
        ReqPlanVersion              planVersionFrom = _args.getArg('_reqPlanVersionFrom');
        ReqPlanVersion              planVersionTo   = _args.getArg('_reqPlanVersionTo');

        PMFSeqWrkCtrCapRes          changesSelect;
        PMFSeqWrkCtrCapRes          changesSelectVersion;
        PMFSeqWrkCtrCapRes          changesInsert;
        ReqPO                       reqPOSelect;

        PmfSeqWrkCtrCapResProperty  propertiesSelect;
        PmfSeqWrkCtrCapResProperty  propertiesInsert;

        RecId                       recIdPlanVersionTo = planVersionTo.RecId;

        new SkipAOSValidationPermission().assert();

        changesInsert.skipDataMethods(true);
        changesInsert.skipAosValidation(true);

        ttsBegin;

        insert_recordset changesInsert      (   PlanVersion,
                                                WrkCtrId, JobType, JobId, LoadType, Locked, OprNum, OprPriority,
                                                RefType, RefId, PropertyId, TransDate, StartTime, EndTime,
                                                WrkCtrLoadPct, WrkCtrSec, IntvWk, IntvMth, IntvQr,
                                                OrigCapResRefRecId
                                            )
        select                                  recIdPlanVersionTo,
                                                WrkCtrId, JobType, JobId, LoadType, Locked, OprNum, OprPriority,
                                                RefType, RefId, PropertyId, TransDate, StartTime, EndTime,
                                                WrkCtrLoadPct, WrkCtrSec, IntvWk, IntvMth, IntvQr,
                                                RecId
        from        changesSelect
        where       changesSelect.PlanVersion  == planVersionFrom.RecId
        exists join reqPOSelect
        where       reqPOSelect.PlanVersion    == planVersionTo.RecId
                    && reqPOSelect.RefId       == changesSelect.RefId;

        insert_recordset propertiesInsert (SchedulingPropertyId, CapResRefRecId)
            select SchedulingPropertyId
            from propertiesSelect
                join changesSelect
                    where changesSelect.PlanVersion == planVersionFrom.RecId
                       && changesSelect.RecId       == propertiesSelect.CapResRefRecId
                    join RecId
                    from changesSelectVersion
                        where changesSelectVersion.PlanVersion          == recIdPlanVersionTo
                           && changesSelectVersion.OrigCapResRefRecId   == changesSelect.RecId
                        exists join reqPOSelect
                            where reqPOSelect.PlanVersion   == planVersionTo.RecId
                               && reqPOSelect.RefId         == changesSelect.RefId;

        update_recordSet changesInsert
            setting OrigCapResRefRecId = 0
            where changesInsert.PlanVersion == recIdPlanVersionTo
            exists join reqPOSelect
                where reqPOSelect.PlanVersion == changesInsert.PlanVersion
                   && reqPOSelect.RefId       == changesInsert.RefId;

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>