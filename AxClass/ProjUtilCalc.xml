<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUtilCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjUtilCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildAccLinePropertyList</Name>
				<Source><![CDATA[
    //Returns a list with all project types that are counted as according to line property
//
public static List buildAccLinePropertyList(boolean _isEfficiency)
{
    List                list = new List(Types::Enum);
    ProjUtilTypes       settings;

    while select Efficiency, ProjType, Billable from settings
    {
        if (_isEfficiency)
        {
            if (settings.Efficiency == ProjUtilOption::AccToLineProperty)
            {
                list.addEnd(settings.ProjType);
            }
        }
        else
        {
            if (settings.Billable == ProjUtilOption::AccToLineProperty)
            {
                list.addEnd(settings.ProjType);
            }
        }
    }

    return list;
}

]]></Source>
			</Method>
			<Method>
				<Name>buildBurdenList</Name>
				<Source><![CDATA[
    //Returns a list with all project types that are counted as burden
//
public static List buildBurdenList(boolean _isEfficiency)
{
    List                list = new List(Types::Enum);
    ProjUtilTypes       settings;

    while select Efficiency, ProjType, Billable from settings
    {
        if (_isEfficiency)
        {
            if (settings.Efficiency == ProjUtilOption::Burden)
            {
                list.addEnd(settings.ProjType);
            }
        }
        else
        {
            if (settings.Billable == ProjUtilOption::Burden)
            {
                list.addEnd(settings.ProjType);
            }
        }
    }

    return list;
}

]]></Source>
			</Method>
			<Method>
				<Name>buildNotIncludedList</Name>
				<Source><![CDATA[
    //Returns a list with all project types that are counted as not included
//
public static List buildNotIncludedList(boolean _isEfficiency)
{
    List                list = new List(Types::Enum);
    ProjUtilTypes       settings;

    while select Efficiency, ProjType, Billable from settings
    {
        if (_isEfficiency)
        {
            if (settings.Efficiency == ProjUtilOption::NotIncluded)
            {
                list.addEnd(settings.ProjType);
            }
        }
        else
        {
            if (settings.Billable == ProjUtilOption::NotIncluded)
            {
                list.addEnd(settings.ProjType);
            }
        }
    }

    return list;
}

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    //Creates a query with basic filtering based on the args object.
//Takes care of actual/budget, filtering on an entity for which
//the calculation is to take place, date range.
//
public static Query buildQuery(ProjUtilCalcParams _arg)
{
    #DEFINE.ProjTableDS('ProjTableDS')
    Query                   q;
    QueryBuildDataSource    qds1;
    QueryBuildDataSource    qds2;
    QueryBuildDataSource    qds3;
    QueryBuildDataSource    qds4;
    
    DimensionProvider       dimensionProvider = new DimensionProvider();

    ProjUtilCalcFilterType  filterType;

    TSTimesheetTable        tsTimesheetTable;
    TSTimesheetLine         tsTimesheetLine;
    boolean                 hasIntercompany;
    List                    companyList;
    ListEnumerator          listEnumerator;

    filterType = _arg.paramFilterType();

    q = new Query();

    //join transaction table with project and line property tables
    if (_arg.paramIsBudget())
    {
        qds1 = q.addDataSource(tableNum(ProjForecastEmpl));

        qds1.addRange(fieldNum(ProjForecastEmpl, SchedFromDate)).value(queryValue(_arg.paramFromDate()) + '..' + queryValue(_arg.paramToDate()));

        if (_arg.paramForecastModelId())
        {
            qds1.addRange(fieldNum(ProjForecastEmpl, ModelId)).value(queryValue(_arg.paramForecastModelId()));
        }

        qds2 = qds1.addDataSource(tableNum(ProjTable), #ProjTableDS);
        qds2.addLink(fieldNum(ProjForecastEmpl, ProjId), fieldNum(ProjTable, ProjId));
        qds2.fetchMode(QueryFetchMode::One2One);
        qds2.joinMode(JoinMode::InnerJoin);

        qds3 = qds1.addDataSource(tableNum(ProjLineProperty));
        qds3.addLink(fieldNum(ProjForecastEmpl, LinePropertyId), fieldNum(ProjLineProperty, LinePropertyId));
        //needs to be outer here to catch cases when LP is blank
        qds3.joinMode(JoinMode::OuterJoin);

        //if needed, also join the category table, since it contains category groups
        if (filterType == ProjUtilCalcFilterType::CategoryGroup)
        {
            qds4 = qds1.addDataSource(tableNum(ProjCategory));

            qds4.addLink(fieldNum(ProjForecastEmpl, CategoryId), fieldNum(ProjCategory, CategoryId));
            qds4.fetchMode(QueryFetchMode::One2One);
            qds4.joinMode(JoinMode::InnerJoin);
        }
    }
    else
    {
        companyList = new List(Types::String);

        while select ProjectDataAreaId,DataAreaId from tsTimesheetLine group by ProjectDataAreaId
            join RecId from tsTimesheetTable where tsTimesheetTable.Resource == _arg.paramResource() &&
                                                   tsTimesheetLine.TimesheetNbr == tsTimesheetTable.TimesheetNbr &&
                                                   tsTimesheetTable.PeriodFrom >= _arg.paramFromDate() &&
                                                   tsTimesheetTable.PeriodTo <= _arg.paramToDate() &&
                                                   tsTimesheetTable.ApprovalStatus == TSAppStatus::Ledger
        {
            if (tsTimesheetLine.ProjectDataAreaId != tsTimesheetLine.DataAreaId)
            {
                hasIntercompany = true;
            }

            companyList.addEnd(tsTimesheetLine.ProjectDataAreaId);
        }

        if (hasIntercompany)
        {
            q.allowCrossCompany(true);
            listEnumerator = companyList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                q.addCompanyRange(listEnumerator.current());
            }
        }
        qds1 = q.addDataSource(tableNum(ProjEmplTrans));
        qds1.addRange(fieldNum(ProjEmplTrans, TransDate)).value(queryValue(_arg.paramFromDate()) + '..' + queryValue(_arg.paramToDate()));

        qds2 = qds1.addDataSource(tableNum(ProjTable), #ProjTableDS);
        qds2.addLink(fieldNum(ProjEmplTrans, ProjId), fieldNum(ProjTable, ProjId));
        qds2.fetchMode(QueryFetchMode::One2One);
        qds2.joinMode(JoinMode::InnerJoin);

        qds3 = qds1.addDataSource(tableNum(ProjLineProperty));
        qds3.addLink(fieldNum(ProjEmplTrans, LinePropertyId), fieldNum(ProjLineProperty, LinePropertyId));
        qds3.fetchMode(QueryFetchMode::One2One);
        qds3.joinMode(JoinMode::InnerJoin);

        //if needed, also join the category table, since it contains category groups
        if (filterType == ProjUtilCalcFilterType::CategoryGroup)
        {
            qds4 = qds1.addDataSource(tableNum(ProjCategory));

            qds4.addLink(fieldNum(ProjEmplTrans, CategoryId), fieldNum(ProjCategory, CategoryId));
            qds4.fetchMode(QueryFetchMode::One2One);
            qds4.joinMode(JoinMode::InnerJoin);
        }
    }

    //*********
    //now apply filter value to an appropriate condition,
    //depending on what entity we are doing the calculation for
    //*********
    //

    switch (filterType)
    {
        case ProjUtilCalcFilterType::Employee:
            if (_arg.paramIsBudget())
            {
                qds1.addRange(fieldNum(ProjForecastEmpl, Resource)).value(queryValue(_arg.paramResource()));
            }
            else
            {
                qds1.addRange(fieldNum(ProjEmplTrans, Resource)).value(queryValue(_arg.paramResource()));                
            }
            break;
        case ProjUtilCalcFilterType::ResourceCategory:
            if (_arg.paramIsBudget())
            {
                qds1.addRange(fieldNum(ProjForecastEmpl, ResourceCategory)).value(queryValue(_arg.paramResourceCategory()));
            }
            else
            {
                qds1.addRange(fieldNum(ProjEmplTrans, ResourceCategory)).value(queryValue(_arg.paramResourceCategory()));
            }
            break;
        case ProjUtilCalcFilterType::Category:
            if (_arg.paramIsBudget())
            {
                qds1.addRange(fieldNum(ProjForecastEmpl, CategoryId)).value(_arg.paramFilterValue());
            }
            else
            {
                qds1.addRange(fieldNum(ProjEmplTrans, CategoryId)).value(_arg.paramFilterValue());
            }
            break;
        case ProjUtilCalcFilterType::CategoryGroup:
            qds4.addRange(fieldNum(ProjCategory, CategoryGroupId)).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::Customer:
            qds2.addRange(fieldNum(ProjTable, CustAccount)).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::Department:
            dimensionProvider.addAttributeRangeToQuery(
                q,
                #ProjTableDS,
                'DefaultDimension',
                DimensionComponent::DimensionAttribute,
                _arg.paramFilterValue(),
                'Department');
            break;
        case ProjUtilCalcFilterType::EstimateProject:
            qds2.addRange(fieldNum(ProjTable, wipProject)).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::InvoiceProject:
            qds2.addRange(fieldNum(ProjTable, ProjInvoiceProjId)).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::Project:
            qds2.addRange(fieldNum(ProjTable, ProjId)).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::ProjectGroup:
            qds2.addRange(fieldNum(ProjTable, ProjGroupId)).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::ProjectWithSubprojects:
            qds2.addRange(fieldNum(ProjTable, ProjId)).value(_arg.paramFilterValue() + '*');
            break;
        case ProjUtilCalcFilterType::Responsible:
            qds2.addRange(fieldNum(ProjTable, WorkerResponsible)).value(queryValue(ResourceFacade::getWorker(_arg.paramResource())));
            break;
        case ProjUtilCalcFilterType::ResponsibleFinancial:
            qds2.addRange(fieldNum(ProjTable, WorkerResponsibleFinancial)).value(queryValue(ResourceFacade::getWorker(_arg.paramResource())));
            break;
        case ProjUtilCalcFilterType::ResponsibleSales:
            qds2.addRange(fieldNum(ProjTable, WorkerResponsibleSales)).value(queryValue(ResourceFacade::getWorker(_arg.paramResource())));
            break;
        case ProjUtilCalcFilterType::Sorting1:
            qds2.addRange(fieldNum(ProjTable, SortingId), 1).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::Sorting2:
            qds2.addRange(fieldNum(ProjTable, SortingId), 2).value(_arg.paramFilterValue());
            break;
        case ProjUtilCalcFilterType::Sorting3:
            qds2.addRange(fieldNum(ProjTable, SortingId), 3).value(_arg.paramFilterValue());
            break;
    }

    return q;
}

]]></Source>
			</Method>
			<Method>
				<Name>buildUtilList</Name>
				<Source><![CDATA[
    //Returns a list with all project types that are counted as utilization
public static List buildUtilList(boolean _isEfficiency)
{
    List                list = new List(Types::Enum);
    ProjUtilTypes       settings;

    while select Efficiency, ProjType, Billable from settings
    {
        if (_isEfficiency)
        {
            if (settings.Efficiency == ProjUtilOption::Utilization)
            {
                list.addEnd(settings.ProjType);
            }
        }
        else
        {
            if (settings.Billable == ProjUtilOption::Utilization)
            {
                list.addEnd(settings.ProjType);
            }
        }
    }

    return list;
}

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    //Calculates utilization rate and the corresponding numbers of hours:
//utilization, burden, not included, norm, and overtime
//Calculation is based on parameters passed in the _args class.
//
public static container calculate(ProjUtilCalcParams _args, TmpProjHourUtilExcelPivot _tmpExportExcel = null)
{
    ProjUtilCalcParams arg = ProjUtilCalcParams::construct();

    Query               q;
    QueryRun            qr;
    RealBase            qty;
    ProjForecastEmpl    budgetTrans;
    ProjEmplTrans       trans;
    boolean             projLPExists;
    ProjLineProperty    projLineProperty;
    ProjTable           projTable;
    List                utilList;
    List                burdenList;
    List                notIncludedList;
    List                accLinePropertyList;
    RealBase            utilizationHours        = 0;
    RealBase            burdenHours             = 0;
    RealBase            notIncludedHours        = 0;
    RealBase            overtimeHours           = 0;
    RealBase            normHours               = 0;
    RealBase            finalCalcResult         = 0;
    RealBase            denominator             = 0;
    RealBase            utilizationHours_export;
    RealBase            burdenHours_export;
    RealBase            notIncludedHours_export;
    RealBase            overtimeHours_export;

    boolean             isEfficiency;
    boolean             isBudget;
    boolean             isExcelExport;

    NoYes               useNormAndOvertime;

    ProjPeriodEmpl              projPeriodEmpl;
    ProjPeriodLine              projPeriodLine;

    ProjActualBudget            actualBudget_export;

    arg.unpack(_args.pack());
    isEfficiency            = arg.paramIsEfficiency();
    isBudget                = arg.paramIsBudget();
    isExcelExport           = arg.paramIsExcelExport();

    // Delete Excel export temp table
    if (isExcelExport)
    {
        delete_from _tmpExportExcel;
        if (isBudget)
        {
            actualBudget_export = ProjActualBudget::Budget;
        }
        else
        {
            actualBudget_export = ProjActualBudget::Actual;
        }
    }

    //create lists with project types that are utilization, burden, not included, line property
    utilList = ProjUtilCalc::buildUtilList(isEfficiency);
    burdenList = ProjUtilCalc::buildBurdenList(isEfficiency);
    notIncludedList = ProjUtilCalc::buildNotIncludedList(isEfficiency);
    accLinePropertyList = ProjUtilCalc::buildAccLinePropertyList(isEfficiency);

    //
    //if calculation was called from employee and period code specified,
    //calculate norm hours from period and include them in the denominator
    //
    useNormAndOvertime = NoYes::No;

    if (arg.paramPeriodId() && arg.paramFilterType() == ProjUtilCalcFilterType::Employee)
    {
        normHours = ProjUtilCalc::getNormFromPeriods(arg.paramResource(), arg.paramFromDate(), arg.paramToDate(), isEfficiency, arg.paramPeriodId());
        if (normHours)
        {
			useNormAndOvertime = NoYes::Yes;
        }
    }

    q = ProjUtilCalc::buildQuery(arg);
    qr = new QueryRun(q);

    while (qr.next())
    {
        // Clear Excel export values
        if (isExcelExport)
        {
            utilizationHours_export = 0;
            burdenHours_export      = 0;
            notIncludedHours_export = 0;
            overtimeHours_export    = 0;
        }

        //assign appropriate buffers
        if (isBudget)
        {
            budgetTrans = qr.get(tableNum(ProjForecastEmpl));
            qty = budgetTrans.Qty;
            if (budgetTrans.LinePropertyId != '')
            {
                projLPExists = true;
            }
            else
            {
                projLPExists = false;
            }

            if (isExcelExport)
            {
                _tmpExportExcel.clear();
                _tmpExportExcel.initFromProjForecastEmpl(budgetTrans);
                _tmpExportExcel.initFromProjTable(ProjTable::find(budgetTrans.ProjId));
                _tmpExportExcel.initFromProjCategory(ProjCategory::find(budgetTrans.CategoryId));
            }
        }
        else
        {
            trans = qr.get(tableNum(ProjEmplTrans));
            qty = trans.Qty;
            projLPExists = true;

            if (isExcelExport)
            {
                _tmpExportExcel.clear();
                _tmpExportExcel.initFromProjEmplTrans(trans);
                _tmpExportExcel.initFromProjTable(ProjTable::find(trans.ProjId));
                _tmpExportExcel.initFromProjCategory(ProjCategory::find(trans.CategoryId));
            }
        }
        projLineProperty = qr.get(tableNum(ProjLineProperty));
        projTable = qr.get(tableNum(ProjTable));

        //Weed out inappropriately matched Lp
        //using an inner join condition on the query
        //in this case does not work, since blank
        //line properties have no match and transactions
        //having no line property would be dropped.
        //
        if (isBudget)
        {
            if (projLineProperty.LinePropertyId != budgetTrans.LinePropertyId)
            {
                continue;
            }
        }
        else
        {
            if (projLineProperty.LinePropertyId != trans.LinePropertyId)
            {
                continue;
            }
        }

        //if considered utilization or burden due to project type
        if (ProjUtilCalc::listContains(utilList, projTable.Type) || ProjUtilCalc::listContains(burdenList, projTable.Type))
        {
            if (ProjUtilCalc::isOvertime(isEfficiency, projLPExists, projLineProperty))
            {
                overtimeHours += qty;
                if (isExcelExport)
                {
                    overtimeHours_export += qty;
                }
            }

            //if considered utilization due to project type
            if (ProjUtilCalc::listContains(utilList, projTable.Type))
            {
                utilizationHours += qty;
                if (isExcelExport)
                {
                    utilizationHours_export += qty;
                }
            }

            //if considered burden due to project type
            if (ProjUtilCalc::listContains(burdenList, projTable.Type))
            {
                burdenHours += qty;
                if (isExcelExport)
                {
                    burdenHours_export += qty;
                }
            }
        }

        //if considered not included due to project type
        if (ProjUtilCalc::listContains(notIncludedList, projTable.Type))
        {
            notIncludedHours += qty;
            if (isExcelExport)
            {
                notIncludedHours_export += qty;
            }
        }

        //if set to be considered according to line property due to project type
        if (ProjUtilCalc::listContains(accLinePropertyList, projTable.Type))
        {
            //
            //if doing efficiency calculation and line property says this transaction is eff.
            //Or
            //if doing billable calculation and line property says this transaction is billable
            //
            if ((isEfficiency && (projLPExists && projLineProperty.IsEfficiency == NoYes::Yes))
            || (!isEfficiency && (projLPExists && projLineProperty.ToBeInvoiced == NoYes::Yes)))
            {
                utilizationHours += qty;
                if (isExcelExport)
                {
                    utilizationHours_export += qty;
                }
                if (ProjUtilCalc::isOvertime(isEfficiency, projLPExists, projLineProperty))
                {
                    overtimeHours += qty;
                    if (isExcelExport)
                    {
                        overtimeHours_export += qty;
                    }
                }
            }
            else
            {
                burdenHours += qty;
                if (isExcelExport)
                {
                    burdenHours_export += qty;
                }

                if (ProjUtilCalc::isOvertime(isEfficiency, projLPExists, projLineProperty))
                {
                    overtimeHours += qty;
                    if (isExcelExport)
                    {
                        overtimeHours_export += qty;
                    }
                }
            }
        }

        if (isExcelExport)
        {
            _tmpExportExcel.ConsumedHours    = utilizationHours_export + burdenHours_export + notIncludedHours_export;
            _tmpExportExcel.NotIncludedHours = notIncludedHours_export;
            _tmpExportExcel.IncludedHours    = utilizationHours_export + burdenHours_export;
            _tmpExportExcel.BurdenHours      = burdenHours_export;
            _tmpExportExcel.UtilizationHours = utilizationHours_export;
            _tmpExportExcel.OvertimeHours    = overtimeHours_export;

            // Get the Employee period
            if (arg.paramPeriodId())
            {
                projPeriodLine = ProjPeriodLine::findFromPeriod(arg.paramPeriodId(), _tmpExportExcel.ProjTransDate);
                if (projPeriodLine)
                {
                    _tmpExportExcel.EmployeePeriod = projPeriodLine.PeriodName;
                }
            }

            _tmpExportExcel.insert();
        }
    }//end while

    // Calculate Norm Hours for Excel export
    if ((isExcelExport) && arg.paramPeriodId())
    {
        while select Resource, NormEfficiency, NormBillable, PeriodFrom from projPeriodEmpl
            where projPeriodEmpl.Resource   == arg.paramResource()
            && projPeriodEmpl.PeriodId   == arg.paramPeriodId()
            && projPeriodEmpl.PeriodFrom >= arg.paramFromDate()
            && projPeriodEmpl.PeriodFrom <  arg.paramToDate()
        {
            _tmpExportExcel.clear();
            _tmpExportExcel.ActualBudget = actualBudget_export;
            _tmpExportExcel.StatementType = ProjExportToExcelWorksheet::HourUtil;
            _tmpExportExcel.Resource = projPeriodEmpl.Resource;
            _tmpExportExcel.ResourceCategory = ResourceFacade::getResourceCategory(projPeriodEmpl.Resource, projPeriodEmpl.PeriodFrom);

            // Get Norm hours
            if (isEfficiency)
            {
                _tmpExportExcel.NormHours += projPeriodEmpl.NormEfficiency;
            }
            else
            {
                _tmpExportExcel.NormHours += projPeriodEmpl.NormBillable;
            }

            // Get the Employee period
            projPeriodLine = ProjPeriodLine::findFromPeriod(arg.paramPeriodId(), projPeriodEmpl.PeriodFrom);
            if (projPeriodLine)
            {
                _tmpExportExcel.EmployeePeriod = projPeriodLine.PeriodName;
            }

            _tmpExportExcel.insert();
        }
    }

    //calculate the utilization rate
    finalCalcResult = ProjUtilCalc::finalCalc(utilizationHours, burdenHours, normHours, overtimeHours, useNormAndOvertime);

    return [utilizationHours, burdenHours, normHours, overtimeHours, notIncludedHours, finalCalcResult];
}

]]></Source>
			</Method>
			<Method>
				<Name>finalCalc</Name>
				<Source><![CDATA[
    //calculates the final percentage based on the number of hours provided.
//Which of the two formulae will be used for calculation is determined by
//divideByNormOvertime parameter.
//
public static RealBase finalCalc(RealBase util, RealBase burden = 0, RealBase norm = 0, RealBase overtime = 0, NoYes divideByNormOvertime = NoYes::No)
{
    RealBase result;
    RealBase denominator;

    //set up denominator depending on parameter values
    if (divideByNormOvertime)
    {
        denominator = (norm + overtime);
    }
    else
    {
        denominator = (util + burden);
    }

    //calculate the utilization rate
    if (denominator <= 0)
    {
        result = 0;
    }
    else
    {
        result = util/denominator;
    }

    //result will be in percent
    result = result * 100;

    return result;
}

]]></Source>
			</Method>
			<Method>
				<Name>getNormFromPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of norm hours for billable or efficiency on periods of given type for a given employee between two dates.
    /// </summary>
    /// <param name = "_resourceRecId">The value to set.</param>
    /// <param name = "_fromDate">The new value of the parameter FromDate.</param>
    /// <param name = "_toDate">The new value of the parameter ToDate.</param>
    /// <param name = "_isEfficiency">the new value of parameter.</param>
    /// <param name = "_periodId">The new value of the parameter ProjPeriodId.</param>
    /// <returns>
    /// Norm hours from the period for the resource.
    /// </returns>
    /// <remarks>
    /// The dates set limits on the starting date of a period, so a date range 31/12/06 to 02/01/07 will include the week period if it starts on 01/01/07 and ends 07/01/07.
    /// </remarks>
    public static RealBase getNormFromPeriods(ResourceRecId _resourceRecId, TransDate _fromDate, TransDate _toDate, boolean _isEfficiency, ProjPeriodId _periodId)
    {
        RealBase normHours = 0;
        ProjPeriodEmpl projPeriodEmpl;

        select sum(NormEfficiency), sum(NormBillable) from projPeriodEmpl 
            where projPeriodEmpl.Resource == _resourceRecId
                && projPeriodEmpl.PeriodId == _periodId
                && projPeriodEmpl.PeriodFrom >= _fromDate
                && projPeriodEmpl.PeriodFrom <= _toDate;

        if (_isEfficiency)
        {
            normHours = projPeriodEmpl.NormEfficiency;
        }
        else
        {
            normHours = projPeriodEmpl.NormBillable;
        }

        return normHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOvertime</Name>
				<Source><![CDATA[
    //True if:
//It's an efficiency calculation and line property says this transaction
//should be added to efficiency norm as overtime.
//Or
//It's a billable calculation and line property says this transaction
//should be added to billable norm as overtime.
//
//Does NOT take into account the rule that transactions posted under
//"Not Included" projects are never counted as overtime. This is taken
//care of in the calculation method, where isOvertime never gets called for
//"Not Included" project transactions.
//
public static boolean isOvertime(boolean _isEfficiency, boolean _projLPExists, ProjLineProperty _projLP)
{
    return ((_isEfficiency && (_projLPExists && _projLP.NormEfficiency == NoYes::Yes))
           || (!_isEfficiency && (_projLPExists && _projLP.NormBillable == NoYes::Yes)));
}

]]></Source>
			</Method>
			<Method>
				<Name>listContains</Name>
				<Source><![CDATA[
    //True if the given list contains given project type, false otherwise.
//Assumes that the list contains objects of the ProjType.
//
public static boolean listContains(List _list, ProjType _type)
{
    ListEnumerator listEnum;

    if (!_list)
    {
        return false;
    }

    listEnum = _list.getEnumerator();

    while (listEnum.moveNext())
    {
        if (listEnum.current() == _type)
        {
            return true;
        }
    }

    return false;
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>