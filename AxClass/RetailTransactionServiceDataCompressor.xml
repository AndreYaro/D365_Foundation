<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceDataCompressor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.IO.Compression;
using System.Text;

/// <summary>
/// The <c>RetailTransactionServiceDataCompressor</c> class provides data compression methods RetailTransactionService APIs.
/// </summary>
class RetailTransactionServiceDataCompressor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>compressTextToBase64String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compress text to a Base64 string using the GZip data format specification.
    /// </summary>
    /// <param name = "_text">The text to be compressed.</param>
    /// <param name = "_compressionLevel">A value indicating whether to emphasize speed or compression efficiency when compressing the data.</param>
    /// <returns>The compressed data in Base64.</returns>
    internal static System.String compressTextToBase64String(System.String _text, CompressionLevel _compressionLevel = CompressionLevel::Optimal)
    {
        System.Byte[] textBytes = Encoding::UTF8.GetBytes(_text);

        return RetailTransactionServiceDataCompressor::compressBytesToBase64String(textBytes, _compressionLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressBytesToBase64String</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compress byte array to a Base64 string using the GZip data format specification.
    /// </summary>
    /// <param name = "_bytes">The byte array to be compressed.</param>
    /// <param name = "_compressionLevel">A value indicating whether to emphasize speed or compression efficiency when compressing the data.</param>
    /// <returns>The compressed data in Base64.</returns>
    internal static System.String compressBytesToBase64String(System.Byte[] _bytes, CompressionLevel _compressionLevel = CompressionLevel::Optimal)
    {
        System.Byte[] compressedBytes = RetailTransactionServiceDataCompressor::compressBytes(_bytes, _compressionLevel);

        return compressedBytes != null ? System.Convert::ToBase64String(compressedBytes) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>compressBytes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compress byte array using the GZip data format specification.
    /// </summary>
    /// <param name = "_bytes">The byte array to be compressed.</param>
    /// <param name = "_compressionLevel">A value indicating whether to emphasize speed or compression efficiency when compressing the data.</param>
    /// <returns>The compressed byte array.</returns>
    internal static System.Byte[] compressBytes(System.Byte[] _bytes, CompressionLevel _compressionLevel = CompressionLevel::Optimal)
    {
        using (var originalStream = new MemoryStream(_bytes))
        {
            using (var compressedStream = new MemoryStream())
            {
                using (var compressionStream = new GZipStream(compressedStream, _compressionLevel, true))
                {
                    originalStream.CopyTo(compressionStream);
                }
                        
                System.Byte[] compressedBytes = compressedStream.ToArray();

                return compressedBytes;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decompressBytes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decompress byte array using the GZip data format specification.
    /// </summary>
    /// <param name = "_compressedBytes">The byte array to be decompressed.</param>
    /// <returns>The decompressed byte array.</returns>
    internal static System.Byte[] decompressBytes(System.Byte[] _compressedBytes)
    {
        using (var originalStream = new MemoryStream(_compressedBytes))
        {
            using (var decompressedStream = new MemoryStream())
            {
                using (var compressionStream = new GZipStream(originalStream, CompressionMode::Decompress, true))
                {
                    compressionStream.CopyTo(decompressedStream);
                }

                var decompressedBytes = decompressedStream.ToArray();

                return decompressedBytes;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>