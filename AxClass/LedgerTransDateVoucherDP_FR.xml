<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransDateVoucherDP_FR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The data provider class for the <c>LedgerTransDateVoucher_FR</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(LedgerTransDateVoucher_FR)),
    SRSReportParameterAttribute(classStr(LedgerTransDateVoucherContract_FR))
]
public class LedgerTransDateVoucherDP_FR extends SrsReportDataProviderPreProcessTempDB
{
    LedgerTransDateVoucherTmp_FR            ledgerTransDateVoucherTmp_FR;
    FromDate                                fromDate;
    ToDate                                  toDate;
    int                                     totalPrXDigits;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransDateVoucherTmp_FR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>LedgerTransDateVoucherTmp_FR</c> table and retrieves the data table.
    /// </summary>
    /// <returns>
    /// The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(LedgerTransDateVoucherTmp_FR))
    ]
    public LedgerTransDateVoucherTmp_FR getLedgerTransDateVoucherTmp_FR()
    {
        select ledgerTransDateVoucherTmp_FR;
        return ledgerTransDateVoucherTmp_FR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerTransDateVoucherTmp_FR</Name>
				<Source><![CDATA[
    private void insertLedgerTransDateVoucherTmp_FR(
        GeneralJournalEntry                 _generalJournalEntry,
        GeneralJournalAccountEntry          _generalJournalAccountEntry,
        SubledgerVoucherGeneralJournalEntry _subledgerVoucherGeneralJournalEntry,
        MainAccount                         _mainAccount,
        FiscalCalendarPeriod                _fiscalCalendarPeriod)

    {
        ledgerTransDateVoucherTmp_FR.clear();
        ledgerTransDateVoucherTmp_FR.AccountingDate         = _generalJournalEntry.AccountingDate;
        ledgerTransDateVoucherTmp_FR.DocumentNumber         = _generalJournalEntry.DocumentNumber;
        ledgerTransDateVoucherTmp_FR.PostingLayer           = _generalJournalEntry.PostingLayer;
        ledgerTransDateVoucherTmp_FR.GeneralJournalEntry    = _generalJournalEntry.RecId;

        if (_generalJournalAccountEntry.IsCredit)
        {
            ledgerTransDateVoucherTmp_FR.AmountCredit = - _generalJournalAccountEntry.AccountingCurrencyAmount;
        }
        else
        {
            ledgerTransDateVoucherTmp_FR.AmountDebit = _generalJournalAccountEntry.AccountingCurrencyAmount;
        }

        ledgerTransDateVoucherTmp_FR.Voucher        = _generalJournalEntry.SubledgerVoucher;

        if (totalPrXDigits != 0)
        {
            ledgerTransDateVoucherTmp_FR.XDigitsVoucher = substr(ledgerTransDateVoucherTmp_FR.Voucher, 1, totalPrXDigits);
        }

        ledgerTransDateVoucherTmp_FR.Text           = _generalJournalAccountEntry.Text;
        ledgerTransDateVoucherTmp_FR.MainAccountId  = _mainAccount.MainAccountId;

        ledgerTransDateVoucherTmp_FR.TotalDescription = strFmt('%1 %2 %3 - %4 %5',
            "@SYS809", "@SYS14598",
            _fiscalCalendarPeriod.StartDate, _fiscalCalendarPeriod.EndDate, _fiscalCalendarPeriod.Type);

        ledgerTransDateVoucherTmp_FR.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for the <c>LedgerTransDateVoucher_FR</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                            queryRun;
        Query                               query = this.parmQuery();
        LedgerTransDateVoucherContract_FR   contract;

        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        MainAccount                         mainAccount;

        FiscalCalendarRecId                 calendarRecId;
        QueryBuildRange                     qbr;

        FiscalCalendarPeriod                fiscalCalendarPeriod;
        FiscalCalendarYear                  fiscalCalendarYear;

        contract    = this.parmDataContract() as LedgerTransDateVoucherContract_FR;

        fromDate        = contract.parmFromDate();
        toDate          = contract.parmToDate();
        totalPrXDigits  = contract.parmTotalPrXDigits();

        calendarRecId       = CompanyInfoHelper::fiscalCalendarRecId();

        while select StartDate, EndDate, Type from  fiscalCalendarPeriod
            where fiscalCalendarPeriod.StartDate <= toDate
                && fiscalCalendarPeriod.EndDate  >= fromDate
                && fiscalCalendarPeriod.Type     == FiscalPeriodType::Operating
        join FiscalCalendar, RecId from fiscalCalendarYear
            where fiscalCalendarYear.FiscalCalendar == calendarRecId
                && fiscalCalendarYear.RecId         == fiscalCalendarPeriod.FiscalCalendarYear
        {
            qbr = findOrCreateRange_W(query.dataSourceTable(tableNum(GeneralJournalEntry)),
                fieldNum(GeneralJournalEntry, AccountingDate));
            qbr.value(queryRange(max(fromDate, fiscalCalendarPeriod.StartDate), min(toDate, fiscalCalendarPeriod.EndDate)));

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                generalJournalEntry         = queryRun.get(tablenum(GeneralJournalEntry));
                generalJournalAccountEntry  = queryRun.get(tablenum(GeneralJournalAccountEntry));
                mainAccount = queryRun.get(tablenum(MainAccount));

                this.insertLedgerTransDateVoucherTmp_FR(
                    generalJournalEntry,
                    generalJournalAccountEntry,
                    subledgerVoucherGeneralJournalEntry,
                    mainAccount,
                    fiscalCalendarPeriod);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>