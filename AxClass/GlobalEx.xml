<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GlobalEx</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GlobalEx
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>templateFolder_W</Name>
				<Source><![CDATA[
    public static str templateFolder_W()
    {
        #File
        str templateFolder = CompanyInfo::find().TemplateFolder_W;

        if (templateFolder && !strFind(templateFolder, '/\\', strLen(templateFolder), -1))
        {
            templateFolder += #FilePathDelimiter;
        }

        if (!templateFolder || !WinAPI::pathExists(templateFolder))
        {
            throw error(strFmt("@SYS110338", templateFolder),
                    '',
                    SysInfoAction_Formrun::newFormnameControlnameDesc(formStr(OMLegalEntity),
                                                                      identifierStr(TemplateFolder_W_TemplateFolder_W),
                                                                      "@SYS4157"));
        }

        return templateFolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeralsToTxt_FR</Name>
				<Source><![CDATA[
    static TempStr numeralsToTxt_FR(real _num, boolean _isFrenchCheck = false)
    {
        int     numOfPennies = any2int(decRound(frac(_num), 2) * 100) mod 100;
        real    test         = _num - frac(_num);

        int64   numOfTens, seventyNum, ninetyNum;
        str 25  ones[19], tens[9], seventies[9], nineties[9];
        str 10  zero, hundred, hundreds, thousands, million, millions, billion, billions, trillion, trillions;

        str 2   pennies;
        str 5   currency;
        int64   divTest;

        int64   temp;
        str 200 returntxt;
        int64   testLoc;

        const TempStr euro = 'euro';
        const TempStr euros = 'euros';
        const TempStr text_0 = 'ZÃ©ro';
        const TempStr text_1 = 'Un';
        const TempStr text_2 = 'Deux';
        const TempStr text_3 = 'Trois';
        const TempStr text_4 = 'Quatre';
        const TempStr text_5 = 'Cinq';
        const TempStr text_6 = 'Six';
        const TempStr text_7 = 'Sept';
        const TempStr text_8 = 'Huit';
        const TempStr text_9 = 'Neuf';
        const TempStr text_10 = 'Dix';
        const TempStr text_11 = 'Onze';
        const TempStr text_12 = 'Douze';
        const TempStr text_13 = 'Treize';
        const TempStr text_14 = 'Quatorze';
        const TempStr text_15 = 'Quinze';
        const TempStr text_16 = 'Seize';
        const TempStr text_17 = 'Dix-Sept';
        const TempStr text_18 = 'Dix-Huit';
        const TempStr text_19 = 'Dix-Neuf';
        const TempStr text_20 = 'Vingt';
        const TempStr text_30 = 'Trente';
        const TempStr text_40 = 'Quarante';
        const TempStr text_50 = 'Cinquante';
        const TempStr text_60 = 'Soixante';
        const TempStr text_70 = 'Soixante-Dix';
        const TempStr text_71 = 'Soixante Et Onze';
        const TempStr text_72 = 'Soixante-Douze';
        const TempStr text_73 = 'Soixante-Treize';
        const TempStr text_74 = 'Soixante-Quatorze';
        const TempStr text_75 = 'Soixante-Quinze';
        const TempStr text_76 = 'Soixante-Seize';
        const TempStr text_77 = 'Soixante-Dix-Sept';
        const TempStr text_78 = 'Soixante-Dix-Huit';
        const TempStr text_79 = 'Soixante-Dix-Neuf';
        const TempStr text_80 = 'Quatre-Vingts';
        const TempStr text_81 = 'Quatre-Vingt-Un';
        const TempStr text_80s = 'Quatre-Vingt';
        const TempStr text_90 = 'Quatre-Vingt-Dix';
        const TempStr text_91 = 'Quatre-Vingt-Onze';
        const TempStr text_92 = 'Quatre-Vingt-Douze';
        const TempStr text_93 = 'Quatre-Vingt-Treize';
        const TempStr text_94 = 'Quatre-Vingt-Quatorze';
        const TempStr text_95 = 'Quatre-Vingt-Quinze';
        const TempStr text_96 = 'Quatre-Vingt-Seize';
        const TempStr text_97 = 'Quatre-Vingt-Dix-Sept';
        const TempStr text_98 = 'Quatre-Vingt-Dix-Huit';
        const TempStr text_99 = 'Quatre-Vingt-Dix-Neuf';
        const TempStr text_100 = 'Cent';
        const TempStr text_100s = 'Cents';
        const TempStr text_1000 = 'Mille';
        const TempStr text_1000000 = 'Million';
        const TempStr text_1000000s = 'Millions';
        const TempStr text_1000000000 = 'Millard';
        const TempStr text_1000000000s = 'Millards';
        const TempStr text_1000000000000 = 'Trillion';
        const TempStr text_1000000000000s = 'Trillions';
        const TempStr text_and = 'Et';
        const TempStr text_cents = 'Cts';


        real modOperator(real a1, real a2)
        {
            int  tmpi;
            real tmp1, tmp2;
            tmp1 = a1 / a2;
            tmpi = real2int(tmp1);
            tmp2 = tmpi;
            return (tmp1 - tmp2)*a2;
        }

        str 25 buildHundredString(real _number, int64 _power)
        {
            str 25      hundredStrTxt;
            boolean     use_And = false;
            ;

            // 90-99
            if (_number >= 90 && _number <= 99)
            {
                ninetyNum = real2int(_number) mod 90;
                if (ninetyNum != 0)
                {
                    hundredStrTxt = hundredStrTxt + ' ' + nineties[ninetyNum];
                }
                else
                {
                    numOfTens = real2int(_number) div 10;
                    hundredStrTxt = hundredStrTxt + ' ' + tens[numOfTens];
                }
                _number = 0;
            }

            // 81
            if (_number == 81)
            {
                hundredStrTxt = hundredStrTxt + ' ' + text_81;
                _number = 0;
            }

            // 80
            if (_number == 80)
            {
                hundredStrTxt = hundredStrTxt + ' ' + text_80;
                _number = 0;
            }

            // 70-79
            if (_number >= 70 && _number <= 79)
            {
                seventyNum = real2int(_number) mod 70;
                if (seventyNum != 0)
                {
                    hundredStrTxt = hundredStrTxt + ' ' + seventies[seventyNum];
                }
                else
                {
                    numOfTens = _number div 10;
                    hundredStrTxt = hundredStrTxt + ' ' + tens[numOfTens];
                }
                _number = 0;
            }

            // 20-69, 82-89
            if (_number >= 20)
            {
                numOfTens = _number div 10;
                hundredStrTxt = hundredStrTxt + ' ' + tens[numOfTens];
                numOfTens = numOfTens mod 10;
                _number = real2int(_number) mod 10;

                if (_number >= 2 && _number <= 9)
                {
                    hundredStrTxt = hundredStrTxt + '-';
                }

                if (_number == 1)
                {
                    use_And = true;
                }
            }

            // 2-19
            if (_number >= 2)
            {
                numOfTens = real2int(_number);

                // If the last character in the hundredStrTxt string is a '-'
                if (strCmp(subStr(hundredStrTxt, strLen(hundredStrTxt), 1), '-') == 0)
                {
                    hundredStrTxt = hundredStrTxt + ones[numOfTens];
                }
                else
                {
                    hundredStrTxt = hundredStrTxt + ' ' + ones[numOfTens];
                }
            }

            // 1
            if (_number == 1 && (_power != 100))
            {
                if (use_And)
                {
                    hundredStrTxt = hundredStrTxt + ' ' + text_and + ' ' + text_1;
                }
                else
                {
                    hundredStrTxt = hundredStrTxt + ' ' + text_1;
                }
            }

            // 0
            // Only print 'Zero' if no other non-penny number has been printed
            if ((_number == 0) && (_power == 0) && (returntxt == "") && (hundredStrTxt == ""))
            {
                hundredStrTxt = hundredStrTxt + ' ' + text_0;
            }

            return hundredStrTxt;
        }

        real checkPower(real  _test, int64 _power)
        {
            int64   numOfPower;

            if (_test >= _power)
            {
                // Build the 'over one hundred' portion of the string for each power
                testLoc = any2int64(_test);
                numOfPower = testLoc div _power;
                if (numOfPower >= 100)
                {
                    temp = numOfPower div 100;
                    // If it is 'Cent', no 'Un' is needed
                    if (temp == 1)
                    {
                        returntxt = returntxt + ' ' + hundred;
                    }
                    else
                    {
                        returntxt = returntxt + ' ' + ones[temp] + ' ' + hundred;
                    }
                    numOfPower = numOfPower mod 100;
                }

                // Make sure that 'un' isn't printed in front of 'mille' for numbers such as 3001000 or 1000
                if ( !((real2int(_test / _power) == 1) && (_power == 1000)) )
                {
                    // Build the 'under one hundred' portion of the string for each power
                    returntxt = returntxt + buildHundredString(any2real(numOfPower), _power);
                }

                switch(_power)
                {
                    case 1000000000000 :    // Trillion
                    {
                        if (real2int(_test / _power) == 1)
                        {
                            returntxt = returntxt + ' ' + trillion;
                        }
                        else
                        {
                            returntxt = returntxt + ' ' + trillions;
                        }
                        _test = modOperator(_test, 1000000000000.00);
                        break;
                    }
                case 1000000000 :       // Billion
                {
                    if (real2int(_test / _power) == 1)
                    {
                        returntxt = returntxt + ' ' + billion;
                    }
                    else
                    {
                        returntxt = returntxt + ' ' + billions;
                    }
                    _test = modOperator(_test, 1000000000);
                    break;
                }
            case 1000000 :          // Million
            {
                if (real2int(_test / _power) == 1)
                {
                    returntxt = returntxt + ' ' + million;
                }
                else
                {
                    returntxt = returntxt + ' ' + millions;
                }
                _test = modOperator(_test, 1000000);
                break;
            }
        case 1000 :             // Thousands
        {
            returntxt = returntxt + ' ' + thousands;
            _test = modOperator(_test, 1000);
            break;
        }
    case 100 :              // Hundreds
    {
        if ((real2int(test) mod 100 == 0) && (numOfPower != 1))
        {
            returntxt = returntxt + ' ' + hundreds;
        }
        else
        {
            returntxt = returntxt + ' ' + hundred;
        }
        _test = modOperator(_test, 100);
        break;
    }
                }
            }
            return _test;
        }

        ones[1] = text_1;
        ones[2] = text_2;
        ones[3] = text_3;
        ones[4] = text_4;
        ones[5] = text_5;
        ones[6] = text_6;
        ones[7] = text_7;
        ones[8] = text_8;
        ones[9] = text_9;
        ones[10] = text_10;
        ones[11] = text_11;
        ones[12] = text_12;
        ones[13] = text_13;
        ones[14] = text_14;
        ones[15] = text_15;
        ones[16] = text_16;
        ones[17] = text_17;
        ones[18] = text_18;
        ones[19] = text_19;

        tens[1] = 'Not used';
        tens[2] = text_20;
        tens[3] = text_30;
        tens[4] = text_40;
        tens[5] = text_50;
        tens[6] = text_60;
        tens[7] = text_70;
        tens[8] = text_80s;
        tens[9] = text_90;

        seventies[1] = text_71;
        seventies[2] = text_72;
        seventies[3] = text_73;
        seventies[4] = text_74;
        seventies[5] = text_75;
        seventies[6] = text_76;
        seventies[7] = text_77;
        seventies[8] = text_78;
        seventies[9] = text_79;

        nineties[1] = text_91;
        nineties[2] = text_92;
        nineties[3] = text_93;
        nineties[4] = text_94;
        nineties[5] = text_95;
        nineties[6] = text_96;
        nineties[7] = text_97;
        nineties[8] = text_98;
        nineties[9] = text_99;

        zero        = text_0;
        hundred     = text_100;
        hundreds    = text_100s;
        thousands   = text_1000;
        million     = text_1000000;
        millions    = text_1000000s;
        billion     = text_1000000000;
        billions    = text_1000000000s;
        trillion    = text_1000000000000;
        trillions   = text_1000000000000s;


        // Builds the string from the highest power digits on down, returntxt is updated in each call
        //  Note: These must be called in decreasing order of powers
        test = checkPower(test, 1000000000000);
        test = checkPower(test, 1000000000);
        test = checkPower(test, 1000000);
        test = checkPower(test, 1000);
        test = checkPower(test, 100);

        returntxt = strLTrim(returntxt) + buildHundredString(test, 0);

        if(_isFrenchCheck)
        {
            if (_num < 2)
            {
                currency = euro;
            }
            else
            {
                currency = euros;
            }
        }

        // Adds on the penny portion of the string
        if (numOfPennies)
        {
            if(_isFrenchCheck)
            {
                pennies =  num2str(numOfPennies,0,0,0,0);
                if (strLen(pennies) == 1)
                {
                    pennies = int2str(0) + pennies;
                }

                returntxt = '*' + returntxt + ' ' + currency + ' ' + text_and + ' ' + pennies + ' ' +  text_cents + '*';
            }
            else
            {
                returntxt = '***' + returntxt + ' ' + text_and + ' ' + num2str(numOfPennies,0,0,0,0) + '/100';
            }
        }
        else
        {
            if(_isFrenchCheck)
            {
                returntxt = '*' + returntxt + ' ' + currency + '*' ;
            }
            else
            {
                returntxt = '***' + returntxt + ' ' + text_and + ' ' + '00/100';
            }
        }

        if(_isFrenchCheck)
        {
            return strUpr(returntxt);
        }
        else
        {
            return returntxt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateStrConcatFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a LTR or RTL string format based on the language.
    /// </summary>
    /// <param name = "language">
    /// Language will be used to determine if the string is left-to-right or right-to-left.
    /// Defaults to Current session language; optional.
    /// </param>
    /// <returns>A format string for 3 parameters. 2 strings divided by a separator. E.g. '%1%2%3'.</returns>
    public static str generateStrConcatFormat(LanguageId language = null)
    {
        // If language is null, use info.language to provide current session language.
        language = language != null ? language : infolog.language();

        // Formatting the text according to LTR (left-to-right) or RTL (right-to-left).
        if (isLanguageRTL(language))
        {
            // Using RLM (right-to-left mark) to define the text orientation.
            // %1 - previous chunk of text (RTL).
            // %2 - separator - (ASCII or LTR).
            // %3 - added chunk (RTL).
            return '%1\u200F%2\u200E%3\u200F';
        }
        
        // Regular text.
        return '%1%2%3';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>