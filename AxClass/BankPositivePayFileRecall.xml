<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPositivePayFileRecall</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPositivePayFileRecall</c> class manages the Bank Positive Pay file recall related process.
/// </summary>
public class BankPositivePayFileRecall extends RunBase
{
    BankPositivePayTable bankPositivePayTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBankPositivePayTable</Name>
				<Source><![CDATA[
    public BankPositivePayTable parmBankPositivePayTable(BankPositivePayTable _bankPositivePayTable = bankPositivePayTable)
    {
        bankPositivePayTable = _bankPositivePayTable;

        return bankPositivePayTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recallFile</Name>
				<Source><![CDATA[
    private void recallFile()
    {
        ttsbegin;

        bankPositivePayTable.selectForUpdate(true);
        bankPositivePayTable.Filestatus = BankPositivePayFileStatus::Recalled;
        bankPositivePayTable.update();

        this.updatePositivePayTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePositivePayTrans</Name>
				<Source><![CDATA[
    private void updatePositivePayTrans()
    {
        BankChequeTable bankChequeTable;
        BankPositivePayTrans bankPositivePayTrans, bankPositivePayTransJoin;

        // Set ProcessedByPositivePay field for cheques to No in the BankChequeTable. These cheques will be included in the next Positive pay file creation
        while select bankPositivePayTrans group by companyRef
            where bankPositivePayTrans.PositivePayNumber == bankPositivePayTable.PositivePayNum
        {
            changeCompany(bankPositivePayTrans.CompanyRef)
            {
                bankChequeTable.clear();

                update_recordSet bankChequeTable setting ProcessedByPositivePay = NoYes::No
                    join bankPositivePayTransJoin
                        where bankPositivePayTransJoin.CompanyRef == bankPositivePayTrans.CompanyRef
                            && bankPositivePayTransJoin.BankChequeTableRefRecId == bankChequeTable.RecId
                            && bankPositivePayTransJoin.PositivePayNumber == bankPositivePayTable.PositivePayNum;
            }
        }

        update_recordSet bankPositivePayTrans setting VoidedUser = curUserId(), VoidedDate = DateTimeUtil::getSystemDateTime()
            where bankPositivePayTrans.PositivePayNumber == bankPositivePayTable.PositivePayNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (!_args || _args.dataset() != tableNum(BankPositivePayTable))
        {
            throw error(strFmt("@SYS29104", classStr(BankPositivePayFileRecall)));
        }

        BankPositivePayFileRecall bankPositivePayFileRecall = new BankPositivePayFileRecall();
        BankPositivePayTable bankPositivePayTable = _args.record();

        try
        {
            bankPositivePayFileRecall.parmBankPositivePayTable(bankPositivePayTable);
            bankPositivePayFileRecall.recallFile();

            info(strFmt("@SYS4004523", bankPositivePayTable.PositivePayNum));
        }
        catch (Exception::Error)
        {
            throw error("@SYS319214");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>