<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashRegisterCommunicationWithWebService_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// Class <c>CashRegisterCommunicationWithWebService_W</c> contains methods
/// for connecting to web service.
/// </summary>
public class CashRegisterCommunicationWithWebService_W
{
    str requestURL;
    XmlDocument xmlDocRequest;
    XmlDocument xmlDocResponse;
    str errorResponseDescription;
    str header;
    str contentType;
    ERFormatMappingId              requestFormatId;
    ERIModelDefinitionParamsAction requestParameters;
    ERFormatMappingId              responseFormatId;
    str                            responseIntegrationPoint;
    ERIModelDefinitionParamsAction responseParameters;
    X509Certificate2 certificate;
    str certificateThumbprint;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRequestURL</Name>
				<Source><![CDATA[
    public str parmRequestURL(str _requestURL = requestURL)
    {
        requestURL = _requestURL;
        return requestURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestData</Name>
				<Source><![CDATA[
    public XmlDocument parmRequestData(XmlDocument _xmlDocRequest = xmlDocRequest)
    {
        xmlDocRequest= _xmlDocRequest;
        return xmlDocRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponseData</Name>
				<Source><![CDATA[
    public XmlDocument parmResponseData(XmlDocument _xmlDocResponse = xmlDocResponse)
    {
        xmlDocResponse = _xmlDocResponse;
        return xmlDocResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorResponseDescription</Name>
				<Source><![CDATA[
    public str parmErrorResponseDescription(str _errorResponseDescription = errorResponseDescription)
    {
        errorResponseDescription = _errorResponseDescription;
        return errorResponseDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeader</Name>
				<Source><![CDATA[
    public str parmHeader(str _header = header)
    {
        header = _header;
        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContentType</Name>
				<Source><![CDATA[
    public str parmContentType(str _contentType = contentType)
    {
        contentType = _contentType;
        return contentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestExportFormatID</Name>
				<Source><![CDATA[
    public ERFormatMappingId parmRequestExportFormatID(ERFormatMappingId _formatID)
    {
        requestFormatId = _formatId;
        return requestFormatId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponseImportFormatID</Name>
				<Source><![CDATA[
    public ERFormatMappingId parmResponseImportFormatID(ERFormatMappingId _formatID)
    {
        responseFormatId = _formatId;
        return responseFormatId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponseImportIntegrationPoint</Name>
				<Source><![CDATA[
    public str parmResponseImportIntegrationPoint(str _integrationPoint)
    {
        responseIntegrationPoint = _integrationPoint;
        return responseIntegrationPoint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestFormatParameters</Name>
				<Source><![CDATA[
    public ERIModelDefinitionParamsAction parmRequestFormatParameters(ERIModelDefinitionParamsAction _requestParameters)
    {
        requestParameters = _requestParameters;
        return requestParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponseFormatParameters</Name>
				<Source><![CDATA[
    public ERIModelDefinitionParamsAction parmResponseFormatParameters(ERIModelDefinitionParamsAction _responseParameters)
    {
        responseParameters = _responseParameters;
        return responseParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificate</Name>
				<Source><![CDATA[
    public X509Certificate2 parmCertificate(X509Certificate2 _certificate = certificate)
    {
        certificate = _certificate;
        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCertificateThumbprint</Name>
				<Source><![CDATA[
    public str parmCertificateThumbprint(str _certificateThumbprint = certificateThumbprint)
    {
        certificateThumbprint = _certificateThumbprint;
        return certificateThumbprint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRequestURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up URL for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_requestURL"><c>URL</c>.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withRequestURL(URL _requestURL)
    {
        this.parmRequestURL(_requestURL);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withContentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up content type for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_contentType">Type of content.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withContentType(str _contentType)
    {
        this.parmContentType(_contentType);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up certififcate for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_certificate">Certificate.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withCertificate(X509Certificate2 _certificate)
    {
        this.parmCertificate(_certificate);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRegisterCertififcateThumbprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up Opponent's certififcate thumbprint for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_certififcateThumbprint">Thumbprint of oppent's certificate.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withRegisterCertififcateThumbprint(str _certififcateThumbprint)
    {
        this.parmCertificateThumbprint(_certififcateThumbprint);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRequestFormatID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up GER-configuration format id for Request
    /// for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_formatID">Request GER-Format ID.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withRequestFormatID(ERFormatMappingId _formatID)
    {
        this.parmRequestExportFormatID(_formatID);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withRequestFormatParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up parameters for GER-configuration for Request
    /// for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_requestParameters">Parameters for Request GER-format.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withRequestFormatParameters(ERIModelDefinitionParamsAction _requestParameters)
    {
        this.parmRequestFormatParameters(_requestParameters);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withResponseFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up GER-configuration format id and integration point for Response
    /// for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_formatID">Response Format ID.</param>
    /// <param name = "_integrationPoint">Integration point for Response GER-Format.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withResponseFormat(ERFormatMappingId _formatID, str _integrationPoint)
    {
        this.parmResponseImportFormatID(_formatID);
        this.parmResponseImportIntegrationPoint(_integrationPoint);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withResponseFormatParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up parameters for GER-configuration for Response
    /// for current <c>CashRegisterCommunicationWithWebService_W</c>.
    /// </summary>
    /// <param name = "_responseParameters">Parameters for Response GER-Format.</param>
    /// <returns>Current <c>CashRegisterCommunicationWithWebService_W</c>.</returns>
    public CashRegisterCommunicationWithWebService_W withResponseFormatParameters(ERIModelDefinitionParamsAction _responseParameters)
    {
        this.parmResponseFormatParameters(_responseParameters);
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendSyncRequestToWebService</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends sync request to needed service using specific settings from controller.
    /// </summary>
    /// <param name = "_postRequest">POST/GET request.</param>
    /// <returns>True - if Http Code 200 is got, otherwise - false.</returns>
    private container sendSyncRequestToWebService(boolean _postRequest)
    {
        if (!requestURL)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        CashRegisterCommonWebAPI_W webApi = CashRegisterCommonWebAPI_W::construct();
        CashRegisterWebResponse_W   webResponse;

        if (_postRequest)
        {
            webResponse = webApi.makePostRequest(
                requestUrl,
                xmlDocRequest != null ? xmlDocRequest.outerXml() : null,
                certificate,
                certificateThumbprint,
                header,
                contentType);
        }
        else
        {
            webResponse = webApi.makeGetRequest(
                requestURL,
                certificate,
                certificateThumbprint,
                contentType);
        }

        return [webResponse.parmHttpStatus(), webResponse.parmData()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRequestData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls GER-configuration (if needed) to create body of request.
    /// </summary>
    private void formRequestData()
    {
        if (!requestFormatId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var erRequestFormatMappingRun = ERObjectsFactory::createFormatMappingRunByFormatMappingId(requestFormatId);
        erRequestFormatMappingRun.parmShowPromptDialog(false);
        if (requestParameters)
        {
            erRequestFormatMappingRun.withParameter(requestParameters);
        }

        ERFileDestinationMemory fileDestination = new ERFileDestinationMemory();
        var result = erRequestFormatMappingRun.withFileDestination(fileDestination).run();
        if (result)
        {
            System.IO.Stream stream = fileDestination.getStream();
            stream = fileDestination.getStream();

            if (stream.Length > 0)
            {
                stream.Seek(0, System.IO.SeekOrigin::Begin);
                System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();
                xmlDoc.Load(stream);
                xmlDocRequest = new XmlDocument();
                xmlDocRequest.loadXml(xmlDoc.OuterXml);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>importResponseData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls GER-configuration (if needed) to pasre response.
    /// </summary>
    private void importResponseData()
    {
        if (!responseFormatId || !responseIntegrationPoint)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        var runner = ERObjectsFactory::createMappingDestinationRunByImportFormatMappingId(responseFormatId, responseIntegrationPoint);
        if (responseParameters)
        {
            runner.withParameter(responseParameters);
        }
        runner.init();
        if (runner.promptsContractedModelMapping())
        {
            var parameters = runner.getParameters();
            var traverser = new ERModelDefinitionParametersTraverser(parameters);
            while (traverser.moveNext())
            {
                var current = ERCast::asAny(traverser.current()) as ERIImportFormatDataSourceContract;
                if (current)
                {
                    System.IO.MemoryStream stream = new System.IO.MemoryStream();
                    System.Xml.XmlDocument xmlDoc = new System.Xml.XmlDocument();

                    xmlDoc.LoadXml(xmlDocResponse.toString());
                    xmlDoc.Save(stream);
                    stream.Seek(0, System.IO.SeekOrigin::Begin);
                    current.parmInputDataStream(stream);
                }
            }

            runner.runUnattended();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSyncRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs synchronous request. If object is configured to use GER-formats for
    /// response and request, they would be formed. Otherwise, response/request data
    /// will only be save in xmlDocRequest and xmlDocResponse.
    /// </summary>
    /// <param name = "_postRequest">POST/GET request.</param>
    /// <returns>Http Status of response.</returns>
    public int runSyncRequest(boolean _postRequest)
    {
        const int httpOK = 200;

        if (requestFormatId)
        {
            this.formRequestData();
        }

        int responseCode;
        str responseData;
        [responseCode, responseData] = this.sendSyncRequestToWebService(_postRequest);
        if (responseCode == httpOK)
        {
            xmlDocResponse = XmlDocument::newXml(responseData);
            if (responseFormatId && responseIntegrationPoint)
            {
                this.importResponseData();
            }
        }
        else
        {
            xmlDocResponse =  new XmlDocument();
            this.parmErrorResponseDescription(responseData);
        }
        return responseCode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>