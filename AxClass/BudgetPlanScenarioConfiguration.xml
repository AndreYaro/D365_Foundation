<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanScenarioConfiguration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanScenarioConfiguration</c> class provides information for the
/// <c>BudgetPlanScenario</c> table.
/// </summary>
public class BudgetPlanScenarioConfiguration
{
    BudgetPlanScenario budgetPlanScenario;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial state of the <c>BudgetPlanScenario</c> table buffer.
    /// </summary>
    public void initValue()
    {
        this.defaultUnitOfMeasureClass();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the default values for the specified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The field identifier of the field to set to the default values.
    /// </param>
    public void defaultField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(BudgetPlanScenario, UnitOfMeasureClass):
                this.defaultUnitOfMeasureClass();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults a value for the <c>UnitOfMeasureClass</c> field of the
    /// <c>BudgetPlanScenario</c> table.
    /// </summary>
    protected void defaultUnitOfMeasureClass()
    {
        budgetPlanScenario.UnitOfMeasureClass = UnitOfMeasureClass::Undefined;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies or sets additional field values, depending on the modified field.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID of the field that was modified.
    /// </param>
    public void modifiedField(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(BudgetPlanScenario, UnitOfMeasureClass):
                this.modifiedUnitOfMeasureClass();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets additional field values, depending on the modified <c>UnitOfMeasureClass</c> field value.
    /// </summary>
    protected void modifiedUnitOfMeasureClass()
    {
        // Changing the unit of measure class to Monetary MUST clear out the unit of measure
        budgetPlanScenario.UnitOfMeasure = 0;

        // For non-monetary classes find the default unit and set it
        if (budgetPlanScenario.UnitOfMeasureClass != UnitOfMeasureClass::Monetary)
        {
            budgetPlanScenario.UnitOfMeasure = UnitOfMeasureBaseUnit::findByUnitOfMeasureClass(budgetPlanScenario.UnitOfMeasureClass).UnitOfMeasure;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanScenario</Name>
				<Source><![CDATA[
    public BudgetPlanScenario parmBudgetPlanScenario(BudgetPlanScenario _budgetPlanScenario = budgetPlanScenario)
    {
        budgetPlanScenario = _budgetPlanScenario;

        return budgetPlanScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>UnitOfMeasure</c> field in the <c>BudgetPlanScenario</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>UnitOfMeasure</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateUnitOfMeasure()
    {
        boolean       isValid = true;
        UnitOfMeasure setUnitOfMeasure;

        setUnitOfMeasure = UnitOfMeasure::find(budgetPlanScenario.UnitOfMeasure);

        // Unit of measure entered MUST have a the same unit of measure class
        // as the scenario unit of measure class
        if (setUnitOfMeasure.UnitOfMeasureClass != budgetPlanScenario.UnitOfMeasureClass)
        {
            isValid = checkFailed(
                strFmt("@GLS150010",
                    setUnitOfMeasure.Symbol,
                    enum2str(budgetPlanScenario.UnitOfMeasureClass)));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the specified field value is valid.
    /// </summary>
    /// <param name="_fieldId">
    /// The ID that corresponds with the field to be validated.
    /// </param>
    /// <returns>
    /// true if the value is valid; otherwise, false.
    /// </returns>
    public boolean validateField(FieldId _fieldId)
    {
        boolean isValid = true;

        switch (_fieldId)
        {
            case fieldNum(BudgetPlanScenario, UnitOfMeasureClass):
                isValid = this.validateUnitOfMeasureClass();
                break;

            case fieldNum(BudgetPlanScenario, UnitOfMeasure):
                isValid = this.validateUnitOfMeasure();
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasureClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>UnitOfMeasure</c> field in the <c>BudgetPlanScenario</c> table is valid.
    /// </summary>
    /// <returns>
    /// true if the <c>UnitOfMeasureClass</c> field is valid; otherwise, false.
    /// </returns>
    protected boolean validateUnitOfMeasureClass()
    {
        boolean isValid = true;

        if (budgetPlanScenario.orig().UnitOfMeasureClass
            && budgetPlanScenario.orig().UnitOfMeasureClass != budgetPlanScenario.UnitOfMeasureClass
            && BudgetPlanLine::existsForScenario(budgetPlanScenario.RecId))
        {
            isValid = checkFailed("@SYS4020047");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetPlanScenarioConfiguration construct()
    {
        return new BudgetPlanScenarioConfiguration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>BudgetPlanScenario</c> record is valid and ready to be written to the
    /// database.
    /// </summary>
    /// <param name="_budgetPlanScenario">
    /// The record buffer of the <c>BudgetPlanScenario</c> record.
    /// </param>
    /// <returns>
    /// true if the <c>BudgetPlanScenario</c> record is valid; otherwise, false.
    /// </returns>
    public static boolean validateWrite(BudgetPlanScenario _budgetPlanScenario)
    {
        boolean isValid = true;

        // A unit of measure class MUST exist for the budget plan scenario being created
        if (_budgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Undefined)
        {
            isValid = checkFailed("@GLS70631");
        }
        else if (_budgetPlanScenario.UnitOfMeasureClass != UnitOfMeasureClass::Monetary
                 && _budgetPlanScenario.UnitOfMeasure == 0)
        {
            // A default unit of measure class MUST exist for a non-monetary budget plan scenario
            isValid = checkFailed(strFmt("@SYS84753", "@Budget:ScenarioUnitOfMeasure"));
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>