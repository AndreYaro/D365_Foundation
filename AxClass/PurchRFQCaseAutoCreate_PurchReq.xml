<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseAutoCreate_PurchReq</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysTableNameFactoryAttribute(tableStr(PurchReqTable))]
class PurchRFQCaseAutoCreate_PurchReq extends PurchRFQCaseAutoCreate
{
    // <GEERU>
    #isoCountryRegionCodes
    // </GEERU>

    TmpFrmVirtual                   tmpFrmVirtual;
    PurchReqLine                    purchReqLine;
    PurchReqTable                   purchReqTable;
    Map                             mapVendor;
    boolean                         sameCurrencies;
    MapEnumerator                   meVendor;
    CurrencyCode                    currencyCode;
    DimensionDefault                dimension;
    InventSiteId                    site;
    InventLocationId                location;
    Addressing                      deliveryAddress;
    AddressZipCodeId                deliveryZipCode;
    AddressCountyId                 deliveryCounty;
    AddressCountryRegionId          deliveryCountryRegionId;
    AddressStateId                  deliveryStateId;
    LogisticsPostalAddressRecId     addressRecId;
    VendName                        deliveryName;
    AddressCity                     deliveryCity;
    AddressStreet                   deliveryStreet;
    PurchRFQDocumentTitle           name;

    // <GEERU>
    LogisticsAddressCityRecId           deliveryCityRecId;
    LogisticsAddressDistrictRecId       deliveryDistrictRecId;
    LogisticsAddressStreetID_RU         deliveryStreetId;
    LogisticsAddressHouseId_RU          deliveryHouse;
    LogisticsAddressBuildingCompliment  deliveryBuilding;
    LogisticsAddressFlatId_RU           deliveryFlat;
    // </GEERU>
    PurchReqRequiredDate            requiredDate;
    ProjId                          projId;
    Set                             setPurchReqTableRecId;
    PurchRFQExpiryDateTime          lowestRFQLineExpiryDateTime;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDimForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory dimension for the purchase requisition line.
    /// </summary>
    /// <param name = "_purchReqLine">A purchase requisition line.</param>
    /// <returns>An inventory dimension record.</returns>
    protected InventDim inventDimForLine(PurchReqLine _purchReqLine)
    {
        return _purchReqLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRFQHeaderValues</Name>
				<Source><![CDATA[
    protected void calcRFQHeaderValues()
    {
        boolean         first = true;
        InventDim       inventDim;
        LogisticsPostalAddress postalAddress;

        // <GEERU>
        boolean     contryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        sameCurrencies = true;

        while select tmpFrmVirtual
        {
            purchReqLine  = PurchReqLine::findLine(PurchReqTable::findPurchReqId(tmpFrmVirtual.Id).RecId, tmpFrmVirtual.LineNum);
            postalAddress = LogisticsPostalAddress::findRecId(purchReqLine.DeliveryPostalAddress);
            inventDim     = this.inventDimForLine(purchReqLine);

            if (first)
            {
                currencyCode            = purchReqLine.CurrencyCode;
                site                    = inventDim.InventSiteId;
                location                = inventDim.InventLocationId;

                addressRecId            = postalAddress.RecId;
                deliveryAddress         = postalAddress.Address;
                deliveryZipCode         = postalAddress.ZipCode;
                deliveryCounty          = postalAddress.County;
                deliveryCountryRegionId = postalAddress.CountryRegionId;
                deliveryStateId         = postalAddress.State;
                deliveryName            = purchReqLine.DeliveryName;
                deliveryCity            = postalAddress.City;
                deliveryStreet          = postalAddress.Street;
                requiredDate            = purchReqLine.RequiredDate;
                projId                  = purchReqLine.ProjId;
                first                   = false;
                // <GEERU>
                deliveryCityRecId       = postalAddress.CityRecId;
                deliveryDistrictRecId   = postalAddress.District;
                deliveryStreetId        = postalAddress.StreetId_RU;
                deliveryHouse           = postalAddress.HouseId_RU;
                deliveryBuilding        = postalAddress.BuildingCompliment;
                deliveryFlat            = postalAddress.FlatId_RU;
                name                    = purchReqLine.purchReqName();
               // </GEERU>
            }
            else
            {
                if (currencyCode    != purchReqLine.CurrencyCode)
                {
                    sameCurrencies  = false;
                    currencyCode    = Ledger::accountingCurrency(CompanyInfo::current());
                }
                if (site            != inventDim.InventSiteId)
                {
                    site            = '';
                }
                if (location        != inventDim.InventLocationId)
                {
                    location        = '';
                }
                if (deliveryAddress         != postalAddress.Address
                 || deliveryZipCode         != postalAddress.ZipCode
                 || deliveryCounty          != postalAddress.County
                 || deliveryCountryRegionId != postalAddress.CountryRegionId
                 || deliveryStateId         != postalAddress.State
                 || deliveryName            != purchReqLine.DeliveryName
                 || deliveryCity            != postalAddress.City
                 || deliveryStreet          != postalAddress.Street
                 // <GEERU>
                 || (contryRegion_RU  &&
                      (deliveryCityRecId        != postalAddress.CityRecId
                       || deliveryDistrictRecId != postalAddress.District
                       || deliveryStreetId      != postalAddress.StreetId_RU
                       || deliveryHouse         != postalAddress.HouseId_RU
                       || deliveryBuilding      != postalAddress.BuildingCompliment
                       || deliveryFlat          != postalAddress.FlatId_RU))
                 // </GEERU>
                 || addressRecId            != purchReqLine.DeliveryPostalAddress)
                {
                    addressRecId            = 0;
                    deliveryAddress         = '';
                    deliveryZipCode         = '';
                    deliveryCounty          = '';
                    deliveryCountryRegionId = '';
                    deliveryStateId         = '';
                    deliveryName            = '';
                    deliveryCity            = '';
                    deliveryStreet          = '';
                    // <GEERU>
                    deliveryCityRecId       = 0;
                    deliveryDistrictRecId   = 0;
                    deliveryStreetId        = 0;
                    deliveryHouse           = 0;
                    deliveryBuilding        = '';
                    deliveryFlat            = 0;
                    // </GEERU>
                }

                if (requiredDate != purchReqLine.RequiredDate)
                {
                    requiredDate = dateNull();
                }
                if (projId != purchReqLine.ProjId)
                {
                    projId = '';
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchRFQCaseLine</Name>
				<Source><![CDATA[
    protected void createPurchRFQCaseLine()
    {
        PurchReqLine    purchReqLineUpdate;

        purchRFQCaseLine.ReqLineRefId = purchReqLine.LineRefId;

        super();

        if (purchRFQCaseLine.RecId != 0)
        {
            // Copy line Misc charges
            if (sameCurrencies)
            {
                Markup::copy(NoYes::No, purchReqLine, purchRFQCaseLine);
            }

            // update purchReqLine
            purchReqLineUpdate = PurchReqLine::find(purchReqLine.RecId, true);

            purchReqLineUpdate.PurchRFQCaseId         = purchRFQCaseLine.rfqCaseId;
            purchReqLineUpdate.PurchRFQCaseIdDataArea = purchRFQCaseLine.DataAreaId;
            purchReqLineUpdate.update();

            Docu::copy(purchReqLineUpdate, purchRFQCaseLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the records if needed after the end of the RFQ auto creation process.
    /// </summary>
    protected void endUpdate()
    {
        super();

        if (purchRFQCaseTable && !purchRFQCaseTable.ExpiryDateTime)
        {
            purchRFQCaseTable.reread();
            purchRFQCaseTable.ExpiryDateTime = lowestRFQLineExpiryDateTime;
            purchRFQCaseTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmptyBuffer</Name>
				<Source><![CDATA[
    public boolean isEmptyBuffer()
    {
        select firstonly RecId from tmpFrmVirtual;
        return (tmpFrmVirtual.RecId == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextLine</Name>
				<Source><![CDATA[
    protected boolean moveNextLine()
    {
        boolean ret = false;

        select firstonly tmpFrmVirtual;
        if (tmpFrmVirtual)
        {
            purchReqLine = PurchReqLine::findLine(PurchReqTable::findPurchReqId(tmpFrmVirtual.Id).RecId, tmpFrmVirtual.LineNum, true);

            if (purchReqLine.VendAccount)
            {
                mapVendor.insert(purchReqLine.VendAccount, purchReqLine);
            }

            setPurchReqTableRecId.add(purchReqLine.PurchReqTable);

            ret = true;
            tmpFrmVirtual.delete();
        }
        else
        {
            // After iterating over all lines to populate the mapVendor map then initialize the MapEnumerator
            meVendor = mapVendor.getEnumerator();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextVendor</Name>
				<Source><![CDATA[
    protected boolean moveNextVendor()
    {
        boolean ret = false;

        ret = meVendor.moveNext();
        if (ret)
        {
            purchReqLine = mapVendor.lookup(meVendor.currentKey());
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        mapVendor = new Map(Types::String, Types::Record);

        setPurchReqTableRecId = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfUpdatedRecords</Name>
				<Source><![CDATA[
    public int numberOfUpdatedRecords()
    {
        return setPurchReqTableRecId.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = buffer)
    {
        buffer = _buffer;
        purchReqTable = _buffer.data();
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFrmVirtual</Name>
				<Source><![CDATA[
    public TmpFrmVirtual parmTmpFrmVirtual(TmpFrmVirtual _tmpFrmVirtual = tmpFrmVirtual)
    {
        tmpFrmVirtual = _tmpFrmVirtual;
        return tmpFrmVirtual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQType</Name>
				<Source><![CDATA[
    protected PurchRFQType purchRFQType()
    {
        return PurchRFQType::PurchReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchRFQCaseLine</Name>
				<Source><![CDATA[
    protected void setPurchRFQCaseLine()
    {
        PurchRFQParameters  params          = PurchRFQParameters::find();
        super();

        if (PurchRFQCaseAutoCreateFromPurchReqCopyPriceFlight::instance().isEnabled())
        {
            purchRFQCaseLine.initFromPurchReqLine(purchReqLine, true, true);

            if (purchRFQCaseLine.CurrencyCode != currencyCode)
            {
                purchRFQCaseLine.convertCurrencyCode(currencyCode, TradeCurencyConversion::ExchRate);
            }
        }
        else
        {
            purchRFQCaseLine.initFromPurchReqLine(purchReqLine, true, sameCurrencies);
        }

        this.setRFQCaseLineExpiryDateTime();

        // copy delivery date  from purchReqLine to purchRFQCaseLine
        purchRFQCaseLine.DeliveryDate   = purchReqLine.RequiredDate;

        // determine the most recent expiry date in all RFQ lines
        // this date will be defaulted to RFQ header if not set already
        if (!lowestRFQLineExpiryDateTime ||
                purchRFQCaseLine.ExpiryDateTime < lowestRFQLineExpiryDateTime)
        {
            lowestRFQLineExpiryDateTime = purchRFQCaseLine.ExpiryDateTime;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchRFQCaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the values for the buffer of the <c>PurchRFQCaseTable</c> record.
    /// </summary>
    protected void setPurchRFQCaseTable()
    {
        super();

        purchRFQCaseTable.CurrencyCode          = currencyCode;
        purchRFQCaseTable.DefaultDimension      = LedgerDimensionDefaultFacade::serviceMergeDefaultDimensions(dimension, purchRFQCaseTable.DefaultDimension);
        purchRFQCaseTable.InventLocationId      = location;
        purchRFQCaseTable.InventSiteId          = site;
        purchRFQCaseTable.DeliveryPostalAddress = addressRecId;
        purchRFQCaseTable.DeliveryName          = deliveryName;
        purchRFQCaseTable.DeliveryDate          = requiredDate;
        purchRFQCaseTable.ProjId                = projId;
        purchRFQCaseTable.Name                  = name;
        this.setRFQCaseTableExpiryDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRFQCaseLineExpiryDateTime</Name>
				<Source><![CDATA[
    private void setRFQCaseLineExpiryDateTime()
    {
        purchRFQCaseLine.ExpiryDateTime = purchRFQCaseTable.ExpiryDateTime ? purchRFQCaseTable.ExpiryDateTime : PurchRFQCaseAutoCreate_PurchReq::getExpiryDateTime(purchReqLine.RequiredDate);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRFQCaseTableExpiryDateTime</Name>
				<Source><![CDATA[
    private void setRFQCaseTableExpiryDateTime()
    {
        purchRFQCaseTable.ExpiryDateTime = requiredDate ? PurchRFQCaseAutoCreate_PurchReq::getExpiryDateTime(requiredDate) : utcDateTimeNull();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchRFQVendLink</Name>
				<Source><![CDATA[
    protected void setPurchRFQVendLink()
    {
        purchRFQVendLink.clear();
        purchRFQVendLink.initValue();
        purchRFQVendLink.rfqCaseId = purchRFQCaseTable.rfqCaseId;
        purchRFQVendLink.initFromVendTable(VendTable::find(this.vendAccount()));

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            purchRFQVendLink.SalesTaxFormTypes_IN = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(purchReqLine).SalesTaxFormTypes;
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiryDateTime</Name>
				<Source><![CDATA[
    private static PurchRFQExpiryDateTime getExpiryDateTime(PurchReqRequiredDate _requiredDate)
    {
        PurchRFQParameters params = PurchRFQParameters::find();

        return DateTimeUtil::newDateTime(
            new WorkCalendarSched().schedDate(SchedDirection::Forward,
            _requiredDate,
            params.DaysOffset,
            params.ExpDateCalendarDays,
            CompanyInfo::find().ShippingCalendarId),
            params.TimeOffset,
            DateTimeUtil::getCompanyTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    protected VendAccount vendAccount()
    {
        return purchReqLine.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQCaseAutoCreate_PurchReq  construct()
    {
        return new PurchRFQCaseAutoCreate_PurchReq();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>