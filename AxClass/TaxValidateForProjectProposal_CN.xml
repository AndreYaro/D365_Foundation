<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxValidateForProjectProposal_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxValidateForProjectProposal_CN</c> class is used to validate tax for project proposal.
/// </summary>
class TaxValidateForProjectProposal_CN extends TaxValidateForTaxIntegration_CN
{
    ProjProposalJour    projProposalJour;
    custBankAccount     custBankAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>existTaxRegistrationNumberFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax registration number from cust exist.
    /// </summary>
    /// <param name="_companyInfoExtension">
    /// The company information extension.
    /// </param>
    /// <returns>
    /// Returns true if the tax registration number from cust exist.
    /// </returns>
    public boolean existTaxRegistrationNumberFromCust(CompanyInfoExtension_CN  _companyInfoExtension)
    {
        boolean ret = false;

        if (TaxRegistration::getTaxRegistrationNumberFromCust(projProposalJour.InvoiceAccount, projProposalJour.InvoiceDate, _companyInfoExtension.TaxRegistrationType))
        {
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existVATInvoiceDescTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if VAT invoice desc table exist.
    /// </summary>
    /// <returns>
    /// Returns true if the VAT invoice desc table exist.
    /// </returns>
    public boolean existVATInvoiceDescTable()
    {
        boolean ret = false;

        if (ProjProposalJourExtensionCN::findByProjProposalJour(projProposalJour.RecId).VATInvoiceDescTable)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAmountAndNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets invoice amount and number of lines.
    /// </summary>
    public void getInvoiceAmountAndNumOfLines()
    {
        ProjProposalTransUnion  ProjProposalTransUnion;
        AmountCur               netAmount;
        AmountCur               taxAmount = 0;
        ProjProposalTotals      projProposalTotals;

        select sum(AmountCur), count(RecId) from ProjProposalTransUnion
            where ProjProposalTransUnion.ProposalId  == projproposaljour.ProposalId;

        netAmount = ProjProposalTransUnion.AmountCur;
        numOfLines = int642int(ProjProposalTransUnion.RecId);

        if (taxProfileTable.IncludeTax)
        {
            projProposalTotals = new ProjProposalTotals(projProposalJour);
            projProposalTotals.calc();
            taxAmount = projProposalTotals.projInvoiceTaxTotal();
        }

        invoiceAmount = netAmount + TaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValueDefault</Name>
				<Source><![CDATA[
        public void initValueDefault()
    {
        super();
        projProposalJour    = common;

        custBankAccount     = CustBankAccount::find(this.parmInvoiceAccount(), this.parmCustBankAccountId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
        protected CurrencyCode parmCurrencyCode()
    {
        CurrencyCode localCurrencyCode;

        localCurrencyCode = projProposalJour.CurrencyId;

        return localCurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustBankAccountId</Name>
				<Source><![CDATA[
        protected CustBankAccountId parmCustBankAccountId()
    {
        CustBankAccountId custBankAccountIdLocal;

        custBankAccountIdLocal = CustTable::find(this.parmInvoiceAccount()).BankAccount;

        return custBankAccountIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceAccount</Name>
				<Source><![CDATA[
        protected CustInvoiceAccount parmInvoiceAccount()
    {
        CustInvoiceAccount ret;

        ret = projProposalJour.InvoiceAccount;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceId</Name>
				<Source><![CDATA[
        protected InvoiceId parmInvoiceId()
    {
        invoiceId       invoiceIdLocal;

        invoiceIdLocal = projProposalJour.ProposalId;

        return  invoiceIdLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesId</Name>
				<Source><![CDATA[
        protected SalesId parmSalesId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxCode</Name>
				<Source><![CDATA[
        public boolean validateTaxCode()
    {
        ProjProposalTransUnion        ProjProposalTransUnion;
        boolean             ret = true;

        while select ProjProposalTransUnion
            group by ProjProposalTransUnion.TaxGroupId, ProjProposalTransUnion.TaxItemGroupId
                where ProjProposalTransUnion.ProposalId  == projproposaljour.ProposalId
        {
            numOfTaxCode ++;
            this.validatePostTaxCode(ProjProposalTransUnion.TaxGroupId, ProjProposalTransUnion.TaxItemGroupId);
        }

        ret = ret && super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjectProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new project proposal.
    /// </summary>
    /// <param name="_projProposalJour">
    /// The project proposal journal.
    /// </param>
    /// <param name="_taxProfileTable">
    /// The tax profile table.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxValidateForProjectProposal_CN</c> class.
    /// </returns>
    Static public TaxValidateForProjectProposal_CN newProjectProposal(ProjProposalJour  _projProposalJour, TaxProfileTable_CN _taxProfileTable)
    {
        TaxValidateForProjectProposal_CN taxValidateForProjectProposal = new TaxValidateForProjectProposal_CN(_projProposalJour, _taxProfileTable);

        taxValidateForProjectProposal.initValueDefault();

        return taxValidateForProjectProposal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>