<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNotStockedPostCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TradeNotStockedPostCheck</c> class is the base class used to validate not stocked order
///    lines when packing slip posting and invoice posting the not stocked order lines.
/// </summary>
abstract class TradeNotStockedPostCheck
{
    Common              formletterParmLine;
    Common              salesPurchLine;
    Percent             overDeliveryPercent;
    Percent             underDeliveryPercent;

    UnitQty             qtyPhysicalNow;
    UnitQty             qtyPhysicalToBeJournalUpdated;
    UnitQty             qtyRemainPhysical;
    UnitQty             qtyRemainPhysicalBefore;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkNegativeReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether there is received more than there is send for an order line.
    /// </summary>
    /// <returns>
    ///    true if there is received more than there is send for an order line; otherwise, false.
    /// </returns>
    protected boolean checkNegativeReceipt()
    {
        boolean ret = true;

        if (this.parmQtyPhysicalNow()* this.lineUnitQty() < 0)
        {
            if (this.lineUnitQty() > 0)
            {
                if (this.qtyPostedPhysical() + this.parmQtyPhysicalToBeJournalUpdated() < 0)
                {
                    ret = false;
                }
            }
            else
            {
                if (this.qtyPostedPhysical() + this.parmQtyPhysicalToBeJournalUpdated() > 0)
                {
                    ret = false;
                }
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the posted quantity does not cause unauthorized over delivery of the not stocked
    ///    order line.
    /// </summary>
    /// <returns>
    ///    true if the posted quantity does not cause unauthorized over delivery of the not stocked order
    ///    line; otherwise, false.
    /// </returns>
    protected boolean checkNotOverDelivery()
    {
        UnitQty     qtyPre;
        UnitQty     qtyPost;
        boolean     ret = true;

        if (this.lineUnitQty() * this.parmQtyPhysicalNow() < 0)
        {
            return true;
        }

        qtyPre              = abs(this.lineUnitQty());
        qtyPost             = this.qtyPost();
        overDeliveryPercent = (qtyPost - qtyPre) / (qtyPre ? qtyPre : 1) * 100;

        if (overDeliveryPercent > this.overDeliveryPct())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNotUnderDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the posted quantity does not cause unauthorized under delivery of the not stocked
    ///    order line.
    /// </summary>
    /// <returns>
    ///    true if the posted quantity does not cause unauthorized under delivery of the not stocked order
    ///    line; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The check is only performed when closing the order line.
    /// </remarks>
    protected boolean checkNotUnderDelivery()
    {
        UnitQty     qtyPre;
        UnitQty     qtyPost;
        boolean     ret = true;

        if (this.parmQtyRemainPhysical() != 0
        // Skip under-delivery checking when remain physical qty is zero and no physical qty is updated for not stocked order line
        ||  (this.isRemainPhysicalQtyZero() && !this.parmQtyPhysicalToBeJournalUpdated()))
        {
            return true;
        }

        if (this.lineUnitQty() * this.parmQtyPhysicalNow() < 0)
        {
            return true;
        }

        qtyPre               = abs(this.lineUnitQty());
        qtyPost              = this.qtyPost();
        underDeliveryPercent = (qtyPre - qtyPost) / (qtyPre ? qtyPre : 1) * 100;

        if (underDeliveryPercent > this.underDeliveryPct())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuantityRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the total line quantity is changed to be lower than the registered quantity for
    ///    the line.
    /// </summary>
    /// <returns>
    ///    true if the line quantity is larger than the registered quantity; otherwise, false.
    /// </returns>
    protected boolean checkQuantityRegistered()
    {
        if (abs(this.parmQtyPhysicalNow() + this.parmQtyRemainPhysical()) < this.lineRegisteredQty())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateFinancialAfterPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the financial update of the not stocked order line after posting.
    /// </summary>
    /// <returns>
    ///    true if the financial update of the not stocked is OK; otherwise, false.
    /// </returns>
    public boolean checkUpdateFinancialAfterPosting()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysicalAfterPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the physical update of the not stocked order line after posting.
    /// </summary>
    /// <returns>
    ///    true if the physical update of the not stocked is ; otherwise, false.
    /// </returns>
    public boolean checkUpdatePhysicalAfterPosting()
    {
        boolean             ok = true;

        if (this.lineUnitQty() * this.qtyPostedPhysical() < 0)
        {
            ok = checkFailed("@SYS7676");
        }

        if (!this.checkNotOverDelivery())
        {
            ok = checkFailed(strFmt("@SYS24920",overDeliveryPercent, this.overDeliveryPct()));
        }

        if (!this.checkNotUnderDelivery())
        {
            ok = checkFailed(strFmt("@SYS24921", underDeliveryPercent, this.underDeliveryPct()));
        }

        if (this.postComplete() && abs(this.parmQtyPhysicalNow())!= abs(this.lineUnitQty()))
        {
            ok = checkFailed("@SYS25384");
        }

        if (!this.checkNegativeReceipt())
        {
            ok = checkFailed("@SYS10627");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysicalBeforePosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the physical update of the not stocked order line before posting.
    /// </summary>
    /// <returns>
    ///    true if the physical update of the not stocked is OK; otherwise, false.
    /// </returns>
    public boolean checkUpdatePhysicalBeforePosting()
    {
        boolean             ok = true;

        if (!this.checkQuantityRegistered())
        {
            ok = checkFailed(strFmt("@SYS54072", this.lineRegisteredQty(), this.parmQtyPhysicalNow(), this.parmQtyRemainPhysical()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineRegisteredQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the registered quantity for the order line.
    /// </summary>
    /// <returns>
    ///    The registered quantity for the order line.
    /// </returns>
    abstract protected UnitQty lineRegisteredQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUnitQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the order line quantity.
    /// </summary>
    /// <returns>
    ///    The order line quantity.
    /// </returns>
    abstract protected UnitQty lineUnitQty()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the over delivery percent defined on the order line.
    /// </summary>
    /// <returns>
    ///    The over delivery percent defined on the order line.
    /// </returns>
    abstract protected Percent overDeliveryPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyPhysicalNow</Name>
				<Source><![CDATA[
    public UnitQty parmQtyPhysicalNow(UnitQty _qtyPhysicalNow = qtyPhysicalNow)
    {
        qtyPhysicalNow = _qtyPhysicalNow;

        return qtyPhysicalNow;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyPhysicalToBeJournalUpdated</Name>
				<Source><![CDATA[
    public UnitQty parmQtyPhysicalToBeJournalUpdated(UnitQty _qtyPhysicalToBeJournalUpdated = qtyPhysicalToBeJournalUpdated)
    {
        qtyPhysicalToBeJournalUpdated = _qtyPhysicalToBeJournalUpdated;

        return qtyPhysicalToBeJournalUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyRemainPhysical</Name>
				<Source><![CDATA[
    public UnitQty parmQtyRemainPhysical(UnitQty _qtyRemainPhysical = qtyRemainPhysical)
    {
        qtyRemainPhysical = _qtyRemainPhysical;

        return qtyRemainPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtyRemainPhysicalBefore</Name>
				<Source><![CDATA[
    public UnitQty parmQtyRemainPhysicalBefore(UnitQty _qtyRemainPhysicalBefore = qtyRemainPhysicalBefore)
    {
        qtyRemainPhysicalBefore = _qtyRemainPhysicalBefore;

        return qtyRemainPhysicalBefore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
    public Common parmSalesPurchLine(Common _salesPurchLine = salesPurchLine)
    {
        salesPurchLine = _salesPurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves if the order line should be delivered in total.
    /// </summary>
    /// <returns>
    ///    true the order line should be delivered in total; otherwise, false.
    /// </returns>
    abstract protected boolean postComplete()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the post quantity for the order line.
    /// </summary>
    /// <returns>
    ///    The post quantity for the order line.
    /// </returns>
    protected UnitQty qtyPost()
    {
        return abs(this.qtyPostedPhysical() + this.parmQtyPhysicalToBeJournalUpdated());
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyPostedPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical posted quantity for the order line.
    /// </summary>
    /// <returns>
    ///    The physical posted quantity for the order line.
    /// </returns>
    abstract protected UnitQty qtyPostedPhysical()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the under delivery percent defined on the order line.
    /// </summary>
    /// <returns>
    ///    The under delivery percent defined on the order line.
    /// </returns>
    abstract protected Percent underDeliveryPct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchLine</Name>
				<Source><![CDATA[
    public static TradeNotStockedPostCheck newPurchLine(PurchLine _purchLine, UnitQty _qtyPhysicalNow, UnitQty _qtyRemainPhysical)
    {
        TradeNotStockedPostCheck notStockedPostCheck;

        notStockedPostCheck = PurchNotStockedPostCheck::construct();

        notStockedPostCheck.parmSalesPurchLine(_purchLine);
        notStockedPostCheck.parmQtyPhysicalNow(_qtyPhysicalNow);
        notStockedPostCheck.parmQtyRemainPhysical(_qtyRemainPhysical);

        return notStockedPostCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a <c>TradeNotStockedPostCheck</c> object used to verify sales order lines during posting.
    /// </summary>
    /// <param name="_salesLine">
    ///     The <c>SalesLine</c> record which will be verified.
    /// </param>
    /// <param name="_qtyPhysicalNow">
    ///     The quantity of the item of the <paramref name="_salesLine"/> to be posted.
    /// </param>
    /// <param name="_qtyRemainPhysical">
    ///     The deliver remainder of the item of the <paramref name="_salesLine"/> after the posting.
    /// </param>
    /// <param name="_qtyRemainPhysicalBefore">
    ///     The deliver remainder of the item of the <paramref name="_salesLine"/> before the posting; optional.
    /// </param>
    /// <returns>
    ///     The created <c>TradeNotStockedPostCheck</c> object.
    /// </returns>
    /// <remarks>
    ///     The <paramref name="_qtyRemainPhysicalBefore"/> parameter is only used for not-stocked items in subscription sales lines.
    /// </remarks>
    public static TradeNotStockedPostCheck newSalesLine(SalesLine _salesLine, UnitQty _qtyPhysicalNow, UnitQty _qtyRemainPhysical, UnitQty _qtyRemainPhysicalBefore = 0)
    {
        TradeNotStockedPostCheck notStockedPostCheck;

        notStockedPostCheck = SalesNotStockedPostCheck::construct();

        notStockedPostCheck.parmSalesPurchLine(_salesLine);
        notStockedPostCheck.parmQtyPhysicalNow(_qtyPhysicalNow);
        notStockedPostCheck.parmQtyRemainPhysical(_qtyRemainPhysical);
        notStockedPostCheck.parmQtyRemainPhysicalBefore(_qtyRemainPhysicalBefore);

        return notStockedPostCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRemainPhysicalQtyZero</Name>
				<Source><![CDATA[
    protected boolean isRemainPhysicalQtyZero()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchUnit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the order line unit.
    /// </summary>
    /// <returns>
    ///    The order line unit.
    /// </returns>
    protected UnitOfMeasureSymbol salesPurchUnit( )
    {
        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>