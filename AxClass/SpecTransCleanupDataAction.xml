<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransCleanupDataAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classStr(SpecTransCleanupDataActionFlight))]
internal class SpecTransCleanupDataAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity, IDataMaintenanceActionParameters
{
    private SpecTrans specTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:SpecTransCleanupActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@CashManagement:SpecTransCleanupActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::DataCorruption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::CashManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(SpecTransCleanupMarkedRecIdNullTask));
        tasks.value(2, classStr(SpecTransCleanupOrphanedRecordsTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.checkSpecTrans());
        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionParameters parameters()
    {
        DataMaintenanceActionParameters actionParameters = new DataMaintenanceActionParameters();
        actionParameters.IsSystemAction = true;
        return actionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTrans</Name>
				<Source><![CDATA[
    private boolean checkSpecTrans()
    {
        CustTrans custTrans;
        CustSettlement custSettlement;
        CustTransOpen custTransOpen;
        VendSettlement vendSettlement;
        VendTransOpen vendTransOpen;
        BankCodaAccountStatementLines bankCodaAccountStatementLines;
        CustTable custTable;
        VendTable vendTable;
        LedgerJournalTrans ledgerJournalTrans;
        PurchTable purchTable;
        SalesTable salesTable;
        SpecContext specContext;
        SysUserInfo sysUserInfo;
        ProjTable projTable;
        
        return this.checkSpecTransWhereRefRecIdIsNull(custTrans)
            || this.checkSpecTransWhereRefRecIdIsNull(custSettlement)
            || this.checkSpecTransWhereRefRecIdIsNull(custTransOpen)
            || this.checkSpecTransWhereRefRecIdIsNull(vendSettlement)
            || this.checkSpecTransWhereRefRecIdIsNull(vendTransOpen)
            || this.checkSpecTransWhereSpecRecIdIsNull(bankCodaAccountStatementLines)
            || this.checkSpecTransWhereSpecRecIdIsNull(custTable)
            || this.checkSpecTransWhereSpecRecIdIsNull(vendTable)
            || this.checkSpecTransWhereSpecRecIdIsNull(ledgerJournalTrans)
            || this.checkSpecTransWhereSpecRecIdIsNull(purchTable)
            || this.checkSpecTransWhereSpecRecIdIsNull(salesTable)
            || this.checkSpecTransWhereSpecRecIdIsNull(specContext)
            || this.checkSpecTransWhereSpecRecIdIsNull(sysUserInfo)
            || this.checkSpecTransWhereSpecRecIdIsNull(projTable)
            || this.checkSpecTransOrphanForRefEqualsZero()
            || this.checkSpecTransOrphanForSpecEqualsZero()
            || this.checkSpecTransOrphanForLedgerJournalTransPosted()
            || this.checkSpecTransOrphanForPurchaseOrderFinalized()
            || this.checkCustTransMarkedOpenLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTransWhereRefRecIdIsNull</Name>
				<Source><![CDATA[
    private boolean checkSpecTransWhereRefRecIdIsNull(Common _refTable)
    {
        select firstonly forceselectorder crosscompany RecId from specTrans
            where specTrans.RefTableId == _refTable.TableId
            notexists join _refTable
                where specTrans.RefRecId == _refTable.RecId;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTransWhereSpecRecIdIsNull</Name>
				<Source><![CDATA[
    private boolean checkSpecTransWhereSpecRecIdIsNull(Common _specTable)
    {
        select firstonly forceselectorder crosscompany RecId from specTrans
            where specTrans.SpecTableId == _specTable.TableId
            notexists join _specTable
                where specTrans.SpecRecId == _specTable.RecId;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTransOrphanForRefEqualsZero</Name>
				<Source><![CDATA[
    private boolean checkSpecTransOrphanForRefEqualsZero()
    {
        select firstonly RecId from specTrans
            where !specTrans.RefRecId
                || !specTrans.RefTableId
                || !specTrans.RefCompany;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTransOrphanForSpecEqualsZero</Name>
				<Source><![CDATA[
    private boolean checkSpecTransOrphanForSpecEqualsZero()
    {
        select firstonly RecId from specTrans
            where !specTrans.SpecRecId
                || !specTrans.SpecTableId
                || !specTrans.SpecCompany;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTransOrphanForLedgerJournalTransPosted</Name>
				<Source><![CDATA[
    private boolean checkSpecTransOrphanForLedgerJournalTransPosted()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        select firstonly forceselectorder crosscompany RecId from specTrans
            where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
            join JournalNum from ledgerJournalTrans
                where specTrans.SpecRecId == ledgerJournalTrans.RecId
                    && specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
            join RecId from ledgerJournalTable
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTable.Posted;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSpecTransOrphanForPurchaseOrderFinalized</Name>
				<Source><![CDATA[
    private boolean checkSpecTransOrphanForPurchaseOrderFinalized()
    {
        PurchTable purchTable;
        select firstonly crosscompany RecId from specTrans
            where specTrans.SpecTableId == tableNum(PurchTable)
            join RecId from purchTable
                where specTrans.SpecRecId == purchTable.RecId
                    && specTrans.SpecCompany == purchTable.DataAreaId
                    && purchTable.DocumentState == VersioningDocumentState::Finalized;

        return specTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCustTransMarkedOpenLine</Name>
				<Source><![CDATA[
    private boolean checkCustTransMarkedOpenLine()
    {
        CustTransMarkedOpenLine openLine;
        select firstonly crosscompany RecId from openLine
            notexists join specTrans
            where openLine.SpecTrans == specTrans.RecId;

        return openLine.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>