<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_TransportInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Transport Invoice report to excel.
/// </summary>
class OxmlExcelReport_TransportInvoice extends OXMLExcelReport_JobTicket implements ERIReportPostProcessingWithPrintMgmtSupported
{
    #define.FileName('TransportInvoice')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return #FileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #allpages:
                if (this.validate())
                {
                    billOfLading = WMSBillOfLading::find_RU(billOfLadingId);
                    this.initDocumentInfo();
                    this.fillDocument();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TransportInvoice';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    protected void fillDocument()
    {
        boolean                         isCompany;
        UnitOfMeasureReportingText      massUnitText;
        super();

        this.insertValueToSection(#DocumentDate, strFmt("@GLS106007", DateTimeUtil::date(billOfLading.CreatedDateTime)));
        this.insertValueToSection(#DocumentNum, billOfLading.TransportInvoiceId_RU);
        this.insertValueToSection(#DeclaredCost, strFmt("@SYS76498", totalAmount, CurrencyNameDeclension_RU::currencyExt(currencyCode)));
        this.insertValueToSectionNoOverflow(#LadingAddr, strRemoveCr(billOfLading.addressLading_RU()));
        this.insertValueToSectionNoOverflow(#UnladingAddr, strRemoveCr(billOfLading.addressUnlading_RU()));
        this.insertValueToSectionNoOverflow(#CarrierDriverInfo, this.concat([billOfLading.DriverName_RU, billOfLading.DriverContact_RU]));
        this.insertValueToSection(#Waybill, billOfLading.WaybillNum_RU);

        massUnitText    = UnitOfMeasureReportingTranslation::findByReportingTranslation(UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass).UnitOfMeasure,
                                                                       CompanyInfo::languageId()
                                                                       ).Text;
        if ( !massUnitText )
        {
            massUnitText = UnitOfMeasure::find( UnitOfMeasureSystemUnit::findByUnitOfMeasureClass(UnitOfMeasureClass::Mass)
                                                    .UnitOfMeasure).Symbol;
        }
        this.insertValueToSection(#CargoWeight, strFmt("@SYS76498", abs(header.TotalGrossWeight), massUnitText));


        this.insertFullPartyDetailsToSectionNoOverflow(#ConsignorFullName, this.consignorINN, consignorInfo);
        this.insertFullPartyDetailsToSectionNoOverflow(#ConsigneeFullName, this.consigneeINN, consigneeInfo);
        this.insertFullPartyDetailsToSectionNoOverflow(#CarrierOrgInfo, this.carrierINN, carrierInfo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFullPartyDetailsToSectionNoOverflow</Name>
				<Source><![CDATA[
    private void insertFullPartyDetailsToSectionNoOverflow(str _sectionName, INN_RU _partyINN, container _partyInfo)
    {
        this.insertValueToSection(_sectionName, "");
        _partyInfo = conDel(_partyInfo, #IsCompanyPos, 1);
        if (_partyINN) 
        {
            str innStr = strFmt('%1 %2', SysLabel::labelId2String(literalStr("@GLS101001"), CompanyInfo::languageId()), _partyINN);
            container fullPartyInfo = conIns(_partyInfo, 1, innStr);
            this.insertValueToSectionNoOverflow(_sectionName, this.concat(fullPartyInfo));
        }
        else
        {
            this.insertValueToSectionNoOverflow(_sectionName, this.concat(_partyInfo));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageWidth</Name>
				<Source><![CDATA[
    #define.pageWidth(108)
    protected int pageWidth()
    {
        return #pageWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(WMSTransportInvoice_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exceutes the report taking print management setup into account.
    /// </summary>
    /// <param name="_args">
    /// Report arguments.
    /// </param>
    /// <param name="_settingDetail">
    /// Print management setting.
    /// </param>
    /// <param name="_recordId">
    /// Header record ID.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void executeWithPrintMgmt(
        Args                        _args,
        PrintMgmtPrintSettingDetail _settingDetail,
        RecId                       _recordId)
    {
        OXMLExcelReport_JobTicket    oxmlReport;

        WMSBillOfLading                     billOfLading = _args.record();
        PrintCopyOriginal                   printCopyOriginal;

        if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

        oxmlReport = OXMLExcelReport_JobTicket::construct(billOfLading.TransportInvoiceType_RU);
        oxmlReport.parmArgs(_args);
        oxmlReport.parmBillOfLading(billOfLading);
        oxmlReport.parmPrintCopyOriginal(printCopyOriginal);

        SRSPrintDestinationSettings printSettings = _settingDetail.parmPrintJobSettings();

        if (oxmlReport.isPdfConversionEnabled(printSettings))
        {
            oxmlReport.parmPrintDestinationSettings(printSettings);
        }

        if (oxmlReport.init())
        {
            oxmlReport.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>