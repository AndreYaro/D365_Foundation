<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalcPurch_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class is created to calculate withhold taxes for Purchase order. Extends for TaxWithholdCalculation_IN class.
/// </summary>
class TaxWithholdCalcPurch_IN extends TaxWithholdCalculation_IN
{
    RefTableId      sourceTableId;
    Common          line;
    PurchCalcTax    purchCalcTax;
    RefTableId      parentSourceTableId;
    RefRecId        parentSourceRecId;

    boolean isWHTDefaultFromInvoiceAccEnabled = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the grossAmount for given purchase order Line/Vendor invoice.
    /// </summary>
    protected void calcGrossAmountCur()
    {
        this.initGrossAmountCur();
        this.finalizeGrossAmountCur();
        this.recalculateGrossAmountCurForPrepayment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Steps through Purchase order lines to calculate withhold tax for a Purchase order.
    /// </summary>
    /// <returns>
    ///    The withhold tax amount.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmountCur                        lineTaxWithHoldAmount;
        TaxAmountCur                        taxWithHoldAmount;
        Currency                            sourceCurrency;
        boolean                             isCreditNote;
        boolean                             isRecoverable;
        container                           taxWithholdData;
        PurchTable                          purchTableLoc;
        PurchLine                           purchLineLoc;
        PurchLine_IN                        purchLineLoc_IN;
        container                           vendorInformation;
        TaxWithholdGroup                    taxWithholdGroup;
        VendAccount                         vendAccountLoc;
        PurchIdBase                         purchIdLoc;
        VendInvoiceInfoLine                 vendInvoiceInfoLineLoc;
        VendInvoiceInfoTable                vendInvoiceInfoTableLoc;
        VendInvoiceInfoLineTaxExtension_IN  vendInvoiceInfoLineTaxLoc;
        AmountCur                           lineGrossAmountCur;
        TaxWithholdParameters_IN            taxWithholdParameters = TaxWithholdParameters_IN::find();

        sourceCurrency = Currency::find(sourceCurrencyCode);

        if (!headingRecId)
        {
            return 0;
        }

        System.Diagnostics.Stopwatch sw = System.Diagnostics.Stopwatch::StartNew();

        if (headingTableId == tableNum(PurchTable))
        {
            purchTableLoc = PurchTable::findRecId(headingRecId);
        }
        else if (headingTableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTableLoc = VendInvoiceInfoTable::findRecId(headingRecId);
        }

        if ((purchTableLoc.RecId != 0 && !this.isTDSTCSApplicableForHeader(purchTableLoc))
             || (vendInvoiceInfoTableLoc.RecId != 0 && !this.isTDSTCSApplicableForHeader(vendInvoiceInfoTableLoc)))
        {
            return 0;
        }

        this.calcGrossAmountCur();

        purchCalcTax.initCursor();

        line = purchCalcTax.nextLine();

        while (line)
        {
            lineTaxWithHoldAmount = 0;

            if (this.isWHTParameterMarked(line))
            {
                if (line.TableId == tableNum(PurchLine))
                {
                    purchLineLoc     = line;
                    purchLineLoc_IN  = purchLineLoc.purchLine_IN();
                    purchTableLoc    = purchLineLoc.purchTable();
                    taxWithholdGroup = purchLineLoc_IN.tdsGroup ?  purchLineLoc_IN.tdsGroup : purchLineLoc_IN.tcsGroup;
                    isRecoverable    = purchLineLoc_IN.TCSGroup ? true : false;
                    vendAccountLoc   = purchTableLoc.InvoiceAccount;
                    purchIdLoc       = purchTableLoc.PurchId;
                    lineGrossAmountCur = TmpTransLineWithholdGrossAmount_IN::lineGrossAmountCur(tmpTransLineWithholdGrossAmount, purchLineLoc.TableId,purchLineLoc.RecId);
                }
                else if (line.TableId == tableNum(VendInvoiceInfoLine))
                {
                    vendInvoiceInfoLineLoc    = line;
                    vendInvoiceInfoTableLoc   = vendInvoiceInfoLineLoc.vendInvoiceInfoTable();
                    vendInvoiceInfoLineTaxLoc = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLineLoc.RecId);

                    taxWithholdGroup    = vendInvoiceInfoLineTaxLoc.TDSGroup ? vendInvoiceInfoLineTaxLoc.TDSGroup : vendInvoiceInfoLineTaxLoc.TCSGroup;
                    isRecoverable       = vendInvoiceInfoLineTaxLoc.TCSGroup ? true : false;
                    vendAccountLoc      = vendInvoiceInfoTableLoc.InvoiceAccount;
                    purchIdLoc          = vendInvoiceInfoTableLoc.PurchId;
                    lineGrossAmountCur  = TmpTransLineWithholdGrossAmount_IN::lineGrossAmountCur(tmpTransLineWithholdGrossAmount, vendInvoiceInfoLineLoc.TableId,vendInvoiceInfoLineLoc.RecId);
                }
                isCreditNote = this.isCreditNote(line);

                taxWithholdData = this.setWHTContainerData(line, lineGrossAmountCur);

                this.parmHeadingRecID(purchCalcTax.headingRecID());
                this.parmHeadingTableID(purchCalcTax.headingTableID());
                this.setInvoiceCompany(curext());
                this.setPaymentCompany(curext());
                // populate container with vendor information.
                vendorInformation += vendAccountLoc;
                vendorInformation += '';
                vendorInformation += '';
                vendorInformation += '';
                vendorInformation += curext();
                vendorInformation += curext();

                if (isCreditNote)
                {
                    taxWithholdData = conPoke(taxWithholdData, #TaxDate, taxDate);
                    lineTaxWithHoldAmount = this.creditNoteCalculation(taxWithholdData,
                                                                    purchIdLoc,
                                                                    '');
                }
                else if (lineGrossAmountCur > 0 || purchLineLoc.isCanceled())
                {
                    lineTaxWithHoldAmount = this.totalTaxWithhold(vendAccountLoc,
                                                                taxWithholdGroup,
                                                                taxdate,
                                                                taxWithholdData,
                                                                isRecoverable,
                                                                false,
                                                                purchIdLoc,
                                                                '',
                                                                '',
                                                                0,
                                                                0,
                                                                LedgerJournalACType::Cust,
                                                                LedgerJournalACType::Cust,
                                                                vendorInformation);
                }

                if (isCreditNote && !isRecoverable)
                {
                    lineTaxWithHoldAmount = lineTaxWithHoldAmount * -1;
                }

                taxWithHoldAmount += lineTaxWithHoldAmount;
            }

            line= purchCalcTax.nextLine();
        }

        this.updateTaxWithholdUncommitted();

        sw.Stop();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00050, funcName(), GlobalizationInstrumentationHelper::DefaultFeatureVersion, SysCountryRegionCode::countryInfo(), sw.ElapsedMilliseconds);

        return taxWithHoldAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax withhold amount.
    /// </summary>
    /// <returns>
    /// The total tax withhold amount.
    /// </returns>
    public TaxAmountCur totalTaxWithholdAmount()
    {
        TaxAmountCur totalTaxWithholdAmount;
        TaxAmountCur lineTaxWithHoldAmount;
        boolean isRecoverable;
        PurchTable purchTableLoc;
        PurchLine purchLineLoc;
        PurchLine_IN purchLineLoc_IN;
        VendInvoiceInfoTable vendInvoiceInfoTableLoc;
        VendInvoiceInfoLine vendInvoiceInfoLineLoc;
        VendInvoiceInfoLineTaxExtension_IN vendInvoiceInfoLineTaxLoc;
        boolean isCreditNoteLineExists = false;

        if (headingTableId == tableNum(PurchTable))
        {
            select RecId from purchLineLoc
                exists join purchTableLoc
                    where purchTableLoc.PurchId == purchLineLoc.PurchId
                        && purchTableLoc.RecId == headingRecId
                        && purchLineLoc.PurchStatus != PurchStatus::Invoiced
                        && purchLineLoc.InventRefId != ''
                        && purchLineLoc.InventRefTransId != ''
                        && purchLineLoc.PurchQty < 0;

            isCreditNoteLineExists = purchLineLoc.RecId ? true : false;
        }
        else if (headingTableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTableLoc = VendInvoiceInfoTable::findRecId(headingRecId);

            if (!vendInvoiceInfoTableLoc.isNonPO())
            {
                select RecId from vendInvoiceInfoLineLoc
                    exists join purchLineLoc
                        where purchLineLoc.RecId == vendInvoiceInfoLineLoc.PurchLineRecId
                            && purchLineLoc.PurchStatus != PurchStatus::Invoiced
                            && purchLineLoc.InventRefId != ''
                            && purchLineLoc.InventRefTransId != ''
                    exists join vendInvoiceInfoTableLoc
                        where vendInvoiceInfoTableLoc.ParmId == vendInvoiceInfoLineLoc.ParmId
                            && vendInvoiceInfoTableLoc.TableRefId == vendInvoiceInfoLineLoc.TableRefId
                            && vendInvoiceInfoLineLoc.ReceiveNow < 0 ;

                isCreditNoteLineExists = vendInvoiceInfoLineLoc.RecId ? true : false;
            }
        }

        if (isCreditNoteLineExists)
        {
            purchCalcTax.initCursor();

            line = purchCalcTax.nextLine();

            while (line)
            {
                lineTaxWithHoldAmount = 0;

                if (this.isWHTParameterMarked(line))
                {
                    if (line.TableId == tableNum(PurchLine))
                    {
                        purchLineLoc = line;
                        purchLineLoc_IN = purchLineLoc.purchLine_IN();
                        isRecoverable = purchLineLoc_IN.TCSGroup ? true : false;
                    }
                    else if (line.TableId == tableNum(VendInvoiceInfoLine))
                    {
                        vendInvoiceInfoLineLoc = line;
                        vendInvoiceInfoLineTaxLoc = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLineLoc.RecId);
                        isRecoverable = vendInvoiceInfoLineTaxLoc.TCSGroup ? true : false;
                    }

                    select sum(SourceRegulateAmountCur) from taxWithholdWorkTrans
                        where taxWithholdWorkTrans.SourceTableId == line.TableId
                            && taxWithholdWorkTrans.SourceRecId == line.RecId
                            && taxWithholdWorkTrans.HeadingTableId == headingTableId
                            && taxWithholdWorkTrans.HeadingRecId == headingRecId;

                    if (this.isCreditNote(line) && !isRecoverable)
                    {
                        lineTaxWithHoldAmount = taxWithholdWorkTrans.SourceRegulateAmountCur * -1;
                    }
                    else
                    {
                        lineTaxWithHoldAmount = taxWithholdWorkTrans.SourceRegulateAmountCur;
                    }

                    totalTaxWithholdAmount += lineTaxWithHoldAmount;
                }

                line= purchCalcTax.nextLine();
            }
        }
        else
        {
            totalTaxWithholdAmount = super();
        }

        return totalTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// finalizes the grossAmount for given purchase order Line/Vendor invoice and updates the <c>TmpTransLineWithholdGrossAmount_IN</c> table.
    /// </summary>
    protected void finalizeGrossAmountCur()
    {
        container                           paymentAmountCurCon;
        container                           taxWithholdCodeTypeCon;
        AmountCur                           paymentAmountCur;
        TaxWithholdCodeType_IN              paymentTaxWithholdCodeType;
        int                                 conPosition;
        PurchLine                           purchLineLoc;
        PurchTable                          purchTableLoc;
        boolean                             isLineSettled;
        TaxWithholdCodeType_IN              invoiceLineTaxWithholdCodeType;
        TmpTransLineWithholdGrossAmount_IN  tmpTransLineWithholdGrossAmountLoc;
        AmountCur                           invoiceLineRemainSettledAmountCur;
        AmountCur                           invoiceWHTSettledAmountCur;
        VendInvoiceInfoTable                vendInvoiceInfoTableLoc;
        VendInvoiceInfoLine                 vendInvoiceInfoLineLoc;

        void setValues(Common _line)
        {
            if (_line.TableId == tableNum(PurchLine))
            {
                purchLineLoc    = line as PurchLine;
                purchTableLoc   = purchLineLoc.purchTable();
            }
            else if (_line.TableId == tableNum(VendInvoiceInfoLine))
            {
                vendInvoiceInfoLineLoc  = line as VendInvoiceInfoLine;
                vendInvoiceInfoTableLoc = vendInvoiceInfoLineLoc.vendInvoiceInfoTable();
                purchTableLoc           = PurchTable::find(vendInvoiceInfoTableLoc.PurchId);
            }
        }

        purchCalcTax.initCursor();
        line = purchCalcTax.nextLine();
        setValues(line);
        conPosition = 1;
        ttsBegin;
        [paymentAmountCurCon, taxWithholdCodeTypeCon] = this.settlePurch(purchTableLoc);
        paymentAmountCur            = conPeek(paymentAmountCurCon,conPosition);
        paymentTaxWithholdCodeType  = conPeek(taxWithholdCodeTypeCon, conPosition);
        while (line && (conPosition <= conLen(paymentAmountCurCon) || !paymentAmountCur))
        {
            invoiceLineTaxWithholdCodeType      = line.taxWithholdCodeType_IN();
            tmpTransLineWithholdGrossAmountLoc  = TmpTransLineWithholdGrossAmount_IN::findBySource(tmpTransLineWithholdGrossAmount, line.TableId, line.RecId);
            invoiceLineRemainSettledAmountCur   = tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur;
            invoiceWHTSettledAmountCur          = 0;
            isLineSettled                       = false;
            while (!isLineSettled && (conPosition <= conLen(paymentAmountCurCon)))
            {
                if (paymentAmountCur == 0 && conPosition <= conLen(paymentAmountCurCon))
                {
                    conPosition ++;
                    paymentAmountCur = conPeek(paymentAmountCurCon,conPosition);
                    paymentTaxWithholdCodeType  = conPeek(taxWithholdCodeTypeCon, conPosition);
                }
                if (abs(invoiceLineRemainSettledAmountCur) > abs(paymentAmountCur))
                {
                    invoiceLineRemainSettledAmountCur -= paymentAmountCur;
                    if (invoiceLineTaxWithholdCodeType != TaxWithholdCodeType_IN::None
                        && paymentTaxWithholdCodeType == invoiceLineTaxWithholdCodeType)
                    {
                        invoiceWHTSettledAmountCur -= paymentAmountCur;
                    }
                    paymentAmountCur = 0;
                }
                else
                {
                    paymentAmountCur -= invoiceLineRemainSettledAmountCur;
                    if (invoiceLineTaxWithholdCodeType != TaxWithholdCodeType_IN::None
                        && paymentTaxWithholdCodeType == invoiceLineTaxWithholdCodeType)
                    {
                        invoiceWHTSettledAmountCur -= invoiceLineRemainSettledAmountCur;
                    }
                    invoiceLineRemainSettledAmountCur = 0;
                    isLineSettled = true;
                }
            }
            tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur += invoiceWHTSettledAmountCur;
            tmpTransLineWithholdGrossAmountLoc.update();
            line = purchCalcTax.nextLine();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Object _initializationClass)
    {
        purchCalcTax = _initializationClass as PurchCalcTax;
        if (purchCalcTax == null)
        {
            throw error("@SYS95118");
        }

        purchCalcTax        = purchCalcTax;
        purchCalcTax.taxWithholdCalculation_IN(this);

        taxModuleType       = TaxModuleType::Purch;
        headingTableId      = purchCalcTax.headingTableID();
        headingRecId        = purchCalcTax.headingRecID();
        sourceTableId       = purchCalcTax.transTableId();
        taxDate             = purchCalcTax.invoiceDate();
        endDiscPercent      = purchCalcTax.endDiscPercentWht_IN();

        this.setExchRates(purchCalcTax.currencyCode(), purchCalcTax.exchRate(taxDate), purchCalcTax.exchRateSecondary(taxDate), Currency::noYes2UnknownNoYes(purchCalcTax.triangulation(taxDate)), taxDate);

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGrossAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the grossAmount for given purchase order Line/Vendor invoice for withhold tax calculation to TmpTransLineWithholdGrossAmount_IN table.
    /// </summary>
    protected void initGrossAmountCur()
    {
        PurchTable                  purchTableLoc;
        PurchLine                   purchLineLoc;
        TmpTaxWorkTrans             tmpTaxWorkTransLoc;
        AmountCur                   grossAmount,lineAmount,discAmount,miscAmount;
        RefTableId                  sourceTableIdLoc;
        RefRecId                    sourceRecIdLoc;
        RefTableId                  headingTableIdLoc;
        RefRecId                    headingRecIdLoc;
        VendAccount                 vendAccountLoc;
        TaxAmountCur                indirectTaxAmount;
        MarkupTrans                 markupTrans;
        MarkupTable                 markupTable;
        VendInvoiceInfoTable        vendInvoiceInfoTableLoc;
        VendInvoiceInfoLine         vendInvoiceInfoLineLoc;
        VendInvoiceInfoLineTaxExtension_IN  vendInvoiceInfoLineTaxExtLoc;
        VendInvoiceInfoTableTaxExtension_IN vendInvoiceInfoTableTaxExtLoc;
        TaxItemGroup                taxItemGroup;
        TaxWithholdGroup            taxWithholdGroup;
        PurchQty                    purchQtyloc;
        TaxWithholdGroupHeading     taxWithholdGroupHeading;
        PurchLine_IN                purchLineIN;
        CurrencyCode                currencyCodeLoc;
        ExchRate                    exchangeRate;
        // <GTE>
        TaxDocumentLineProxy        taxDocumentLine;
        ITaxableDocument            taxableDocument;
        ITaxDocument                taxDocument;

        Map includeTaxComponentsMap = new Map(Types::String, Types::Container);
        // </GTE>

        void setValues(Common _line)
        {
            if (_line.TableId == tableNum(PurchLine))
            {
                purchLineLoc        = line as PurchLine;
                purchTableLoc       = purchLineLoc.purchTable();
                sourceTableIdLoc    = purchLineLoc.TableId;
                sourceRecIdLoc      = purchLineLoc.RecId;
                headingTableIdLoc   = purchTableLoc.TableId;
                headingRecIdLoc     = purchTableLoc.RecId;
                vendAccountLoc      = purchTableLoc.InvoiceAccount;
                taxItemGroup        = purchLineLoc.TaxItemGroup;
                purchQtyloc         = purchLineLoc.PurchQty;
                purchLineIN         = PurchLine_IN::findByPurchLine(purchLineLoc.RecId);
                taxWithholdGroup    = purchLineIN.TDSGroup ? purchLineIN.TDSGroup : purchLineIN.TCSGroup;
                currencyCodeLoc     = purchLineLoc.CurrencyCode;
                exchangeRate        = exchRate;

                //Misc charges only from PO lines.
                while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                    where markupTrans.TransTableId == purchLineLoc.TableId
                        && markupTrans.TransRecId  == purchLineLoc.RecId
                    exists join purchLineIN
                        where purchLineIN.PurchLine == markupTrans.TransRecId
                    exists join taxWithholdGroupHeading
                        where (taxWithholdGroupHeading.TaxWithholdGroup == purchLineIN.TDSGroup
                            || taxWithholdGroupHeading.TaxWithholdGroup == purchLineIN.TCSGroup)
                            && taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No
                {
                    markupTable = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);
                    if (markupTable.CustType == MarkupType::CustVend || markupTable.VendType == MarkupType::CustVend)
                    {
                        if (markupTable.CustType == MarkupType::CustVend)
                        {
                            miscAmount -= markupTrans.Value;
                        }
                        else
                        {
                            switch (markupTrans.MarkupCategory)
                            {
                                case MarkupCategory::Percent:
                                    miscAmount += (purchLineLoc.LineAmount * markupTrans.Value) / 100;
                                    break;
                                case MarkupCategory::Pcs:
                                    miscAmount += purchLineLoc.PurchQty * markupTrans.Value;
                                    break;
                                default:
                                    miscAmount += markupTrans.Value;
                                    break;
                            }
                        }
                    }
                }
            }
            else if (_line.TableId == tableNum(VendInvoiceInfoLine))
            {
                vendInvoiceInfoLineLoc          = line as VendInvoiceInfoLine;
                vendInvoiceInfoTableLoc         = vendInvoiceInfoLineLoc.vendInvoiceInfoTable();
                vendInvoiceInfoLineTaxExtLoc    = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLineLoc.RecId);
                vendInvoiceInfoTableTaxExtLoc   = VendInvoiceInfoTableTaxExtension_IN::findByVendInvoiceInfoTableRecId(vendInvoiceInfoTableLoc.RecId);
                purchTableLoc                   = PurchTable::find(vendInvoiceInfoTableLoc.PurchId);
                purchLineLoc                    = PurchLine::findRecId(vendInvoiceInfoLineLoc.PurchLineRecId);
                purchQtyloc                     = vendInvoiceInfoLineLoc.ReceiveNow;

                sourceTableIdLoc    = vendInvoiceInfoLineLoc.TableId;
                sourceRecIdLoc      = vendInvoiceInfoLineLoc.RecId;
                headingTableIdLoc   = vendInvoiceInfoTableLoc.TableId;
                headingRecIdLoc     = vendInvoiceInfoTableLoc.RecId;
                vendAccountLoc      = vendInvoiceInfoTableLoc.InvoiceAccount;
                taxItemGroup        = vendInvoiceInfoLineLoc.TaxItemGroup;
                taxWithholdGroup    = vendInvoiceInfoLineTaxExtLoc.tdsGroup ?  vendInvoiceInfoLineTaxExtLoc.tdsGroup
                                                                            :  vendInvoiceInfoLineTaxExtLoc.tcsGroup;
                currencyCodeLoc     = vendInvoiceInfoLineLoc.CurrencyCode;
                exchangeRate        = exchRate;

                while select ModuleType, MarkupCode, MarkupCategory, Value from markupTrans
                    where markupTrans.TransTableId == vendInvoiceInfoLineLoc.TableId
                       && markupTrans.TransRecId  == vendInvoiceInfoLineLoc.RecId
                    exists join vendInvoiceInfoLineTaxExtLoc
                        where vendInvoiceInfoLineTaxExtLoc.VendInvoiceInfoLine == markupTrans.TransRecId
                    exists join taxWithholdGroupHeading
                        where (taxWithholdGroupHeading.TaxWithholdGroup  == vendInvoiceInfoLineTaxExtLoc.TDSGroup
                           || taxWithholdGroupHeading.TaxWithholdGroup  == vendInvoiceInfoLineTaxExtLoc.TCSGroup)
                           && taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No
                {
                    markupTable = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode);
                    if (markupTable.CustType == MarkupType::CustVend || markupTable.VendType == MarkupType::CustVend)
                    {
                        if (markupTable.CustType == MarkupType::CustVend)
                        {
                            miscAmount -= markupTrans.Value;
                        }
                        else
                        {
                            switch (markupTrans.MarkupCategory)
                            {
                                case MarkupCategory::Percent:
                                    miscAmount += (vendInvoiceInfoLineLoc.LineAmount * markupTrans.Value) / 100;
                                    break;
                                case MarkupCategory::Pcs:
                                    miscAmount += vendInvoiceInfoLineLoc.ReceiveNow * markupTrans.Value;
                                    break;
                                default:
                                    miscAmount += markupTrans.Value;
                                    break;
                            }
                        }
                    }
                }
            }
        }

        purchCalcTax.initCursor();

        line= purchCalcTax.nextLine();

        while (line)
        {
            miscAmount = 0;
            setValues(line);

            // Get the indirect taxes for Withhold tax baseAmount from TaxUncommitted table.
            indirectTaxAmount = TaxUncommitted::getIndirectTaxAmtForWHTSourceBaseCur_IN(sourceTableIdLoc, sourceRecIdLoc, taxItemGroup, vendAccountLoc,taxWithholdGroup);

            if (indirectTaxAmount == 0)
            {
                tmpTaxWorkTransLoc = purchCalcTax.tax().tmpTaxWorkTrans();
                // Get the indirect taxes for Withhold tax baseAmount from TmpTaxWorkTrans table.
                indirectTaxAmount =  TmpTaxWorkTrans::getIndirectTaxAmtForWHTSourceBaseCur_IN(tmpTaxWorkTransLoc, sourceTableIdLoc, sourceRecIdLoc, taxItemGroup, vendAccountLoc, taxWithholdGroup);
            }

            if (purchQtyloc < 0)
            {
                // For creditNote taxes are negative.
                indirectTaxAmount = indirectTaxAmount * -1;
            }

            lineAmount      = purchCalcTax.transLineAmount();
            
            // <GTE>
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                taxWithholdGroupHeading = TaxWithholdGroupHeading::find(taxWithholdGroup);
                if (line.TableId == tableNum(PurchLine))
                {
                    taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(purchTableLoc));
                    taxDocument = TaxBusinessService::calculateTax(taxableDocument);
                    if (taxDocument)
                    {
                        taxDocumentLine = taxDocument.findLineBySource(purchLineLoc.TableId, purchLineLoc.RecId);
                    }
                }
                else if (line.TableId == tableNum(VendInvoiceInfoLine))
                {
                    taxableDocument = TaxableDocumentObject::construct(TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(vendInvoiceInfoTableLoc));
                    taxDocument = TaxBusinessService::calculateTax(taxableDocument);
                    if (taxDocument)
                    {
                        taxDocumentLine = taxDocument.findLineBySource(vendInvoiceInfoLineLoc.TableId, vendInvoiceInfoLineLoc.RecId);
                    }
                }
        
                if (taxDocumentLine)
                {
                    if (taxDocumentLine.priceInclTax())
                    {
                        lineAmount -= taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                        lineAmount += taxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                    }

                    indirectTaxAmount = this.getIndirectTaxAmountByLine(
                        taxDocument,
                        taxDocumentLine,
                        taxWithholdGroupHeading);

                    // Misc charges' GST
                    if (taxWithholdGroupHeading.ExcludeCharges_IN == NoYes::No)
                    {
                        while select RecId from markupTrans
                            where markupTrans.TransTableId == line.TableId
                                && markupTrans.TransRecId == line.RecId
                        {
                            TaxDocumentLineProxy markupTransTaxDocumentLine = taxDocument.findLineBySource(markupTrans.TableId, markupTrans.RecId);
                            if (markupTransTaxDocumentLine)
                            {
                                if (markupTransTaxDocumentLine.priceInclTax())
                                {
                                    miscAmount -= markupTransTaxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(
                                        TaxAccountingProvider::Party,
                                        TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                                    miscAmount += markupTransTaxDocumentLine.sumByTaxAccountingProviderExcludeSubLines(
                                        TaxAccountingProvider::Party,
                                        TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                                }
                                indirectTaxAmount += this.getIndirectTaxAmountByLine(
                                    taxDocument,
                                    markupTransTaxDocumentLine,
                                    taxWithholdGroupHeading);
                            }
                        }
                    }

                    if (TaxEngineEREnumToEnumUtil::taxDirectionEnum(taxDocumentLine.getFieldValue(TaxEngineModelFrameworkFieldsConstants::TaxDirection)) == TaxDirection::IncomingTax)
                    {
                        indirectTaxAmount = -indirectTaxAmount;
                    }
                }
            }
            // </GTE>

            discAmount      = CurrencyExchangeHelper::amount(lineAmount, sourceCurrencyCode) * endDiscPercent / 100;

            grossAmount = lineAmount - discAmount + indirectTaxAmount + miscAmount;

            tmpTransLineWithholdGrossAmount.clear();
            tmpTransLineWithholdGrossAmount.LineGrossAmountCur      = grossAmount;
            tmpTransLineWithholdGrossAmount.HeadingTableId          = headingTableIdLoc;
            tmpTransLineWithholdGrossAmount.HeadingRecId            = headingRecIdLoc;
            tmpTransLineWithholdGrossAmount.SourceTableId           = sourceTableIdLoc;
            tmpTransLineWithholdGrossAmount.SourceRecId             = sourceRecIdLoc;
            tmpTransLineWithholdGrossAmount.TransDate               = taxDate;
            tmpTransLineWithholdGrossAmount.TaxWithholdGroup        = taxWithholdGroup;
            tmpTransLineWithholdGrossAmount.AccountType             = AccountType_IN::Vend;
            tmpTransLineWithholdGrossAmount.AccountNumber           = vendAccountLoc;
            tmpTransLineWithholdGrossAmount.AmountOriginMST         = CurrencyExchangeHelper::amountCur2MST(grossAmount, currencyCodeLoc, exchangeRate, taxdate);
            tmpTransLineWithholdGrossAmount.insert();

            line= purchCalcTax.nextLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction line is credit note.
    /// </summary>
    /// <param name="_line">
    /// PurchLine/VendInvoiceInfoLine buffer.
    /// </param>
    /// <returns>
    /// true is line is creditNote, otherwise false.
    /// </returns>
    protected boolean isCreditNote(Common _line)
    {
        boolean             ret = false;
        PurchTable          purchTableLoc;
        PurchLine           purchLineLoc;
        VendInvoiceInfoLine vendInvoiceInfoLineLoc;

        if (_line.TableId == tableNum(PurchLine))
        {
            purchLineLoc  = _line as PurchLine;
            purchTableLoc = purchLineLoc.purchTable();
            if (!purchLineLoc.isInvoiced()
                 && purchLineLoc.InventRefId
                 && purchLineLoc.InventRefTransId
                 && purchLineLoc.PurchQty < 0)
            {
                ret = true;
            }
        }
        else if (_line.TableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoLineLoc  = _line as VendInvoiceInfoLine;
            if (!vendInvoiceInfoLineLoc.isNonPO())
            {
                purchLineloc  = vendInvoiceInfoLineLoc.purchLine();
                purchTableLoc = vendInvoiceInfoLineLoc.purchTable();

                if (!purchLineLoc.isInvoiced()
                     && purchLineLoc.InventRefId
                     && purchLineLoc.InventRefTransId
                     && vendInvoiceInfoLineLoc.ReceiveNow < 0)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTDSTCSApplicableForHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether TDS/TCS will be calculated for given purchase order/Vendor invoice header.
    /// </summary>
    /// <param name="_common">
    /// The PurcTable/VendInvoiceInfoTable buffer.
    /// </param>
    /// <returns>
    /// Returns true if TDS/TCS will be calculated for header; otherwise false.
    /// </returns>
    private boolean isTDSTCSApplicableForHeader(Common _common)
    {
        PurchLine               purchLine;
        PurchLine_IN            purchLine_IN;
        PurchTable              purchTable;
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        VendInvoiceInfoLine     vendInvoiceInfoLine;
        VendInvoiceInfoLineTaxExtension_IN  vendInvoiceInfoLineTaxExt;
        boolean     ret;

        if (_common.TableId == tableNum(PurchTable))
        {
            purchTable = _common as PurchTable;

            select firstOnly RecID from purchLine_IN
                where purchLine_IN.TDSGroup
                    || purchLine_IN.TCSGroup
                exists join purchLine
                    where purchLine.RecId       == purchLine_IN.PurchLine
                        && purchLine.PurchId    == purchTable.PurchId;

            ret = (purchLine_IN.RecId != 0);
        }
        else if (_common.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = _common as VendInvoiceInfoTable;

            select RecId from vendInvoiceInfoLineTaxExt
                where (vendInvoiceInfoLineTaxExt.TDSGroup || vendInvoiceInfoLineTaxExt.TCSGroup)
            exists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.RecId         == vendInvoiceInfoLineTaxExt.VendInvoiceInfoLine
                   && vendInvoiceInfoLine.ParmId        == vendInvoiceInfoTable.ParmId
                   && vendInvoiceInfoLine.TableRefId    == vendInvoiceInfoTable.TableRefId;

            ret = (vendInvoiceInfoLineTaxExt.RecId != 0);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHTParameterMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if TDS/TCS is applicable.
    /// </summary>
    /// <param name="_common">
    /// PurchLine/VendInvoiceInfoLine buffer.
    /// </param>
    /// <returns>
    /// true if TDS/TCS taxes are applicable, otherwise false.
    /// </returns>
    protected boolean isWHTParameterMarked(Common _common)
    {
        PurchLine                           purchLineloc;
        PurchLine_IN                        purchLine_IN;
        PurchTable                          purchTableloc;
        VendInvoiceInfoLine                 vendInvoiceInfoLineloc;
        VendInvoiceInfoTable                vendInvoiceInfoTableloc;
        VendInvoiceInfoLineTaxExtension_IN  vendInvoiceInfoLineTax;
        TaxWithholdParameters_IN            taxWithholdParameters;
        boolean                             ret = false;

        taxWithholdParameters = TaxWithholdParameters_IN::find();

        switch (_common.TableId)
        {
            case tableNum(PurchLine) :
                purchLineloc = _common as PurchLine;
                purchLine_IN = purchLineloc.purchLine_IN();
                purchTableloc = purchLineloc.purchTable();
                if (VendTable::find(purchTableloc.InvoiceAccount).TaxWithholdCalculate
                    && ((taxWithholdParameters.tdsActivate && taxWithholdParameters.tdsInvoice && purchLine_IN.TDSGroup)
                        || (taxWithholdParameters.tcsActivate && taxWithholdParameters.tcsInvoice && purchLine_IN.TCSGroup)))
                {
                    ret = true;
                }
                break;

            case tableNum(VendInvoiceInfoLine) :
                vendInvoiceInfoLineloc  = _common as VendInvoiceInfoLine;
                vendInvoiceInfoTableloc = vendInvoiceInfoLineloc.vendInvoiceInfoTable();
                vendInvoiceInfoLineTax  = VendInvoiceInfoLineTaxExtension_IN::findByVendInvoiceInfoLineRecId(vendInvoiceInfoLineloc.RecId);
                if (VendTable::find(vendInvoiceInfoTableloc.InvoiceAccount).TaxWithholdCalculate
                    && ((taxWithholdParameters.tdsActivate && taxWithholdParameters.tdsInvoice && vendInvoiceInfoLineTax.TDSGroup)
                        || (taxWithholdParameters.tcsActivate && taxWithholdParameters.tcsInvoice && vendInvoiceInfoLineTax.TCSGroup)))
                {
                    ret = true;
                }
                break;

            default :
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        Object  _initializationClass,
        boolean _useTaxWithholdUncommitted,
        boolean _loadTaxWithholdUncommittedOnInit,
        boolean _loadTaxWithholdTrans,
        boolean _skipInit = false,
        boolean _maintainExistingTaxWithholdUncommitted = false)
    {
        super();

        maintainExistingTaxWithholdUncommitted = _maintainExistingTaxWithholdUncommitted;
        useTaxWithholdUncommitted              = _useTaxWithholdUncommitted;
        loadTaxWithholdUncommitted  = _loadTaxWithholdUncommittedOnInit;
        loadTaxWithholdTrans        = _loadTaxWithholdTrans;

        if (!_skipInit)
        {
            this.init(_initializationClass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceRecId</Name>
				<Source><![CDATA[
    public RefRecId parmParentSourceRecId()
    {
        return parentSourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceTableId</Name>
				<Source><![CDATA[
    public RefTableId parmParentSourceTableId()
    {
        return parentSourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Purches the calculate tax.
    /// </summary>
    /// <param name="_purchCalcTax">
    /// The purch calculate tax.
    /// </param>
    /// <returns>
    /// The instance of the <c>PurchCalcTax</c> class.
    /// </returns>
    public PurchCalcTax purchCalcTax(PurchCalcTax _purchCalcTax = purchCalcTax)
    {
        purchCalcTax = _purchCalcTax;
        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settlePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the TaxWithholdAmount for the selected transaction for settlement.
    /// </summary>
    /// <param name="_commonTable">
    /// The PurchTable/VendInvoiceInfoTable buffer.
    /// </param>
    /// <returns>
    /// container with the TaxWithholdAmount and TaxWithholdType values.
    /// </returns>
    private container  settlePurch(Common _commonTable)
    {
        int                         countI;
        container                   taxWithholdAmount, taxWithholdType;
        SpecTrans                   specTrans;
        VendTransOpen               vendTransOpen;
        VendTrans                   vendTrans;
        TaxWithholdTrans_IN         taxWithholdTrans;
        TaxWithholdDesignerTable_IN taxWithholdDesignerTable;

        while select  SpecRecId, SpecTableId, RefRecId, RefTableId, Balance01 from specTrans
            order by RefRecId
            where specTrans.SpecRecId   == _commonTable.RecId
               && specTrans.SpecTableId == _commonTable.TableId
        {
            countI++;
            select firstonly RecId, TableId, RefRecId, AccountNum, TransDate, AmountCur from vendTransOpen
                where vendTransOpen.RecId         == specTrans.RefRecId
                   && vendTransOpen.TableId       == specTrans.RefTableId;

            select firstonly RecId, AccountNum, TransDate, Voucher from vendTrans
                where vendTrans.RecId             == vendTransOpen.RefRecId
                   && vendTrans.AccountNum        == vendTransOpen.AccountNum
                   && vendTrans.TransDate         == vendTransOpen.TransDate;

            select firstonly TaxType, AdjustedBaseAmount from taxWithholdTrans
                where taxWithholdTrans.Voucher     == vendTrans.Voucher
                   && taxWithholdTrans.VendAccount == vendTrans.AccountNum
                   && taxWithholdTrans.TransDate   == vendTrans.TransDate
                join RecId from taxWithholdDesignerTable
                    where taxWithholdDesignerTable.TaxWithholdGroup == taxWithholdTrans.TaxWithholdGroup
                        && taxWithholdDesignerTable.TaxWithholdCode == taxWithholdTrans.TaxWithholdCode
                        && taxWithholdDesignerTable.Basis           == TaxWithholdBasis_IN::GrossAmount;

            if (taxWithholdTrans)
            {
                if (vendTransOpen.AmountCur > 0)
                {
                    AmountCur actualWithholdTaxBaseAmount;
                    if (taxWithholdTrans.AdjustedBaseAmount != 0)
                    {
                        actualWithholdTaxBaseAmount = taxWithholdTrans.AdjustedBaseAmount;
                    }
                    else
                    {
                        actualWithholdTaxBaseAmount = specTrans.Balance01;
                    }

                    taxWithholdAmount   = conpoke(taxWithholdAmount, countI, actualWithholdTaxBaseAmount);
                    taxWithholdType     = conPoke(taxWithholdType, countI, taxWithholdTrans.Taxtype);
                }
            }

            if (!taxWithholdTrans)
            {
                if (vendTransOpen.AmountCur > 0)
                {
                    taxWithholdAmount   = conpoke(taxWithholdAmount, countI, specTrans.Balance01);
                    taxWithholdType     = conPoke(taxWithholdType, countI, TaxWithholdCodeType_IN::None);
                }
            }
        }

        return  [taxWithholdAmount, taxWithholdType];
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The source rec id.
    /// </summary>
    /// <returns>
    /// The trans line rec id.
    /// </returns>
    public recId sourceRecId()
    {
        if (purchCalcTax is PurchCalcTax_PackingSlip)
        {
            return purchCalcTax.transRecId();
        }

        return line.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table id.
    /// </summary>
    /// <returns>
    /// The reference table id.
    /// </returns>
    public RefTableId sourceTableId()
    {
        if (purchCalcTax is PurchCalcTax_PackingSlip)
        {
            return purchCalcTax.transTableId();
        }

        if (line == null)
        {
            return sourceTableId;
        }
        else
        {
            return line.TableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    public boolean useSubLedgerJournalLines()
    {
        return purchCalcTax.useSubLedgerJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxWithholdUncommitted</Name>
				<Source><![CDATA[
    public boolean useTaxWithholdUncommitted()
    {
        if (purchCalcTax is PurchCalcTax_ParmTransExpected)
        {
            return purchCalcTax.useTaxWithholdUncommitted_IN();
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateGrossAmountCurForPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the grossAmount for given Vendor invoice and updates the <c>TmpTransLineWithholdGrossAmount_IN</c> table.
    /// </summary>
    protected void recalculateGrossAmountCurForPrepayment()
    {
        VendInvoiceInfoTable                vendInvoiceInfoTableLoc;
        VendInvoiceInfoLine                 vendInvoiceInfoLineLoc;
        VendInvoiceInfoLine                 vendInvoiceInfoLineInvoice;
        PurchTable                          purchTableLoc;
        AmountCur                           remainingDeductableAmountCur;
        VendAdvanceApplicationTrans         vendAdvanceApplicationTrans;
        VendInvoiceJour                     vendInvoiceJour;
        VendInvoiceTrans                    vendInvoiceTrans;
        TaxWithholdTrans_IN                 taxWithholdTrans_IN;
        TaxWithholdGroup                    tdsGroup;
        TaxWithholdGroup                    tcsGroup;
        TaxWithholdGroupHeading             taxWithholdGroupHeading;
        VendInvoiceInfoLineTaxExtension_IN  vendInvoiceInfoLineTax;
        TmpTransLineWithholdGrossAmount_IN  tmpTransLineWithholdGrossAmountLoc;

        purchCalcTax.initCursor();
        line = purchCalcTax.nextLine();
        ttsBegin;
        while (line && line.TableId == tableNum(VendInvoiceInfoLine))
        {
            vendInvoiceInfoLineLoc  = line as VendInvoiceInfoLine;
            vendInvoiceInfoTableLoc = vendInvoiceInfoLineLoc.vendInvoiceInfoTable();
            purchTableLoc           = PurchTable::find(vendInvoiceInfoTableLoc.PurchId);
            vendAdvanceApplicationTrans = VendAdvanceApplicationTrans::findAdvanceApplicationLineId(vendInvoiceInfoLineLoc.RecId);
            vendInvoiceJour = VendInvoiceJour::findRecId(vendAdvanceApplicationTrans.AdvanceInvoiceId);

            if (vendInvoiceInfoLineLoc.LineType == PurchInvoiceLineType::AdvanceApplication)
            {
                remainingDeductableAmountCur = abs(vendInvoiceInfoLineLoc.LineAmount);
                tdsGroup = '';
                tcsGroup = '';

                // Find TDS/TCS group from prepayment invoice time.
                select firstOnly TDSGroup_IN, TCSGroup_IN from vendInvoiceTrans
                    where vendInvoiceTrans.PurchID              == vendInvoiceJour.PurchId &&
                        vendInvoiceTrans.InvoiceId              == vendInvoiceJour.InvoiceId &&
                        vendInvoiceTrans.InvoiceDate            == vendInvoiceJour.InvoiceDate &&
                        vendInvoiceTrans.NumberSequenceGroup    == vendInvoiceJour.numberSequenceGroup &&
                        vendInvoiceTrans.InternalInvoiceId      == vendInvoiceJour.InternalInvoiceId;
                if (vendInvoiceTrans.TDSGroup_IN)
                {
                    tdsGroup = vendInvoiceTrans.TDSGroup_IN;
                }
                else if (vendInvoiceTrans.TCSGroup_IN)
                {
                    tcsGroup = vendInvoiceTrans.TCSGroup_IN;
                }
                else
                {
                    // Find TDS/TCS group from prepayment payment time.
                    select firstOnly TaxWithholdGroup from taxWithholdTrans_IN
                        where taxWithholdTrans_IN.InvoiceVoucher        == vendInvoiceJour.LedgerVoucher
                            && taxWithholdTrans_IN.SettlementVoucher    != '';
                    if (taxWithholdTrans_IN.TaxWithholdGroup)
                    {
                        taxWithholdGroupHeading = TaxWithholdGroupHeading::find(taxWithholdTrans_IN.TaxWithholdGroup);
                        if (taxWithholdGroupHeading.TaxType_IN == TaxWithholdCodeType_IN::TDS)
                        {
                            tdsGroup = taxWithholdTrans_IN.TaxWithholdGroup;
                        }
                        else if (taxWithholdGroupHeading.TaxType_IN == TaxWithholdCodeType_IN::TCS)
                        {
                            tcsGroup = taxWithholdTrans_IN.TaxWithholdGroup;
                        }
                    }
                }

                if (tdsGroup || tcsGroup)
                {
                    while select vendInvoiceInfoLineInvoice
                        order by LineNum asc
                        where vendInvoiceInfoLineInvoice.ParmId         == vendInvoiceInfoTableLoc.ParmId
                            && vendInvoiceInfoLineInvoice.TableRefId    == vendInvoiceInfoTableLoc.TableRefId
                            && vendInvoiceInfoLineInvoice.LineType      == PurchInvoiceLineType::Standard
                            && vendInvoiceInfoLineInvoice.LineAmount    > 0
                        exists join vendInvoiceInfoLineTax
                        where vendInvoiceInfoLineTax.VendInvoiceInfoLine    == vendInvoiceInfoLineInvoice.RecId
                            && vendInvoiceInfoLineTax.TDSGroup              == tdsGroup
                            && vendInvoiceInfoLineTax.TCSGroup              == tcsGroup
                    {
                        tmpTransLineWithholdGrossAmountLoc = TmpTransLineWithholdGrossAmount_IN::findBySource(tmpTransLineWithholdGrossAmount, vendInvoiceInfoLineInvoice.TableId, vendInvoiceInfoLineInvoice.RecId);
                        if (tmpTransLineWithholdGrossAmountLoc && remainingDeductableAmountCur > 0)
                        {
                            if (remainingDeductableAmountCur <= tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur)
                            {
                                tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur -= remainingDeductableAmountCur;
                                remainingDeductableAmountCur = 0;
                            }
                            else
                            {
                                remainingDeductableAmountCur -= tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur;
                                tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur = 0;
                            }
                            tmpTransLineWithholdGrossAmountLoc.update();
                        }
                    }
                }
            }
            // <GTE>
            else if (vendInvoiceInfoLineLoc.LineType == PurchInvoiceLineType::Advance && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
            {
                PurchPrepayTable purchPrepayTable = PurchPrepayTable::findPurchId(vendInvoiceInfoLineLoc.OrigPurchId);
                
                if (purchPrepayTable.Type == PurchPrepayType::Percent)
                {
                    tmpTransLineWithholdGrossAmountLoc = TmpTransLineWithholdGrossAmount_IN::findBySource(tmpTransLineWithholdGrossAmount, line.TableId, line.RecId);
                    
                    if (tmpTransLineWithholdGrossAmountLoc)
                    {
                        PurchTable purchTable = PurchTable::find(purchPrepayTable.PurchTable);
                        ITaxDocument taxDocument = TaxBusinessService::getTaxDocumentBySource(purchTable.TableId, purchTable.RecId);
                        PurchTotals purchTotals = PurchTotals::newPurchTable(purchTable);
                        purchTotals.calc();

                        AmountCur purchTotalAmount = purchTotals.purchTotalAmount();
                        purchTotalAmount -= taxDocument.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                        purchTotalAmount += taxDocument.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();

                        tmpTransLineWithholdGrossAmountLoc.LineGrossAmountCur = CurrencyExchangeHelper::amount(purchTotalAmount * purchPrepayTable.Value / 100, purchTotals.purchCurrency());;
                        tmpTransLineWithholdGrossAmountLoc.update();
                    }
                }
            }
            // </GTE>
            line = purchCalcTax.nextLine();
        }
        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>