<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>tamVendRebateTableProcess</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateTableProcess</c> class processes and posts journals for vendor reabte records.
/// </summary>
public class TAMVendRebateTableProcess
{
    TAMVendRebateTable tamVendRebateTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doPostLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the vendor rebate is processed.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of the ledger.
    /// </param>
    /// <param name="_amount">
    /// The amount associated to the rebate.
    /// </param>
    /// <param name="_forAdjustment">
    /// A <c>Boolean</c> value indicating whether the rebate is an adjustment.
    /// </param>
    protected void doPostLedgerTrans(
        Voucher         _voucher,
        Amount          _amount,
        boolean         _forAdjustment = false)
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans;
        PurchLine           purchLine;
        List                dimensionSources;

        boolean isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

        ledgerJournalTable                      = ledgerJournalTable.pdsInitFromledgerJournalName(this.ledgerJournalNameProcess());
        purchLine                               = PurchLine::findInventTransId(tamVendRebateTable.InventTransId);
        dimensionSources                        = new List(Types::Class);
        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(tamVendRebateTable.getDefaultDimension()));

        ttsbegin;

        ledgerJournalTable.insert();

        ledgerJournalTable.LedgerJournalInclTax = NoYes::No;
        ledgerJournalTable.doUpdate();

        ledgerJournalTrans.initValue();
        ledgerJournalTrans                      = this.initLedgerJournalTrans(ledgerJournalTrans);
        ledgerJournalTrans.JournalNum           = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.AccountType          = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Ledger;
        ledgerJournalTrans.Voucher              = _voucher;
        ledgerJournalTrans.Txt                  = "@MCR25419";

        if (_amount >= 0)
        {
            ledgerJournalTrans.AmountCurCredit    = _amount;
            ledgerJournalTrans.AmountCurDebit     = 0;
        }
        else
        {
            ledgerJournalTrans.AmountCurDebit     = abs(_amount);
            ledgerJournalTrans.AmountCurCredit    = 0;
        }

        ledgerJournalTrans.DocumentDate         = tamVendRebateTable.ProcessDate;
        ledgerJournalTrans.CurrencyCode         = tamVendRebateTable.CurrencyCode;
        ledgerJournalTrans.TransDate            = tamVendRebateTable.ProcessDate;
        ledgerJournalTrans.Invoice              = tamVendRebateTable.VendInvoiceId;

        if (isChineseVoucher && !ledgerJournalTrans.LedgerVoucherType_CN)
        {
            this.getDefaultVoucherTypeAndVoucherNum_CN(ledgerJournalTrans);
        }

        this.setLedgerJournalTransCurrencyExchRate(ledgerJournalTrans);

        ledgerJournalTrans.insert();

        ttscommit;

        TAMVendRebateTrans::insertFromTAMVendRebateTable(tamVendRebateTable, _amount,
                                                        ledgerJournalTrans.JournalNum,
                                                        '',
                                                        TAMVendRebateTransactionType::RebateAccrual,
                                                        ledgerJournalTrans.Txt);

        if (this.shouldLedgerJournalBePosted(ledgerJournalTable))
        {
            LedgerJournalPost::postJournal(ledgerJournalTable, NoYes::No);
    
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes <c>LedgerJournalTrans</c> record with dimension and offset dimension information.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to be initialized.
    /// </param>
    protected void initDimensions(LedgerJournalTrans _ledgerJournalTrans)
    {
        List dimensionSources = new List(Types::Class);
        List offsetDimensionSources = new List(Types::Class);

        dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(tamVendRebateTable.DefaultDimension));
        offsetDimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(tamVendRebateTable.OffsetDefaultDimension));

        _ledgerJournalTrans.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(tamVendRebateTable.OffsetLedgerDimension, LedgerDimensionDefaultingEngine::getDefaultDimension(offsetDimensionSources));
        _ledgerJournalTrans.OffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(tamVendRebateTable.LedgerDimension, LedgerDimensionDefaultingEngine::getDefaultDimension(dimensionSources));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> table record used for the vendor rebate process posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The ledger journal transactions.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTrans = _ledgerJournalTrans;

        this.initDimensions(_ledgerJournalTrans);

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for vendor rebate process posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalNameProcess()
    {
        return LedgerJournalName::find(TAMVendRebateParameters::find().VendLedgerAccrualJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number sequence code used to create a journal name.
    /// </summary>
    /// <param name="_ledgerJournalName">
    /// The jounal for which to retrieve the number sequence.
    /// </param>
    /// <returns>
    /// The number sequence code used to create journals.
    /// </returns>
    public NumberSequenceCode ledgerJournalNameVoucher(LedgerJournalName _ledgerJournalName)
    {
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(_ledgerJournalName.NumberSequenceTable);

        return numberSequenceTable.NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>TAMVendorRebateTableProcess</c> class.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The <c>TAMVendRebateTable</c> record to use to instantiate the class.
    /// </param>
    public void new (TAMVendRebateTable _tamVendRebateTable)
    {
        this.parmTAMVendRebateTable(_tamVendRebateTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMVendRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>TAMVendRebateTable</c> table record on which the vendor rebate process is performing.
    /// </summary>
    /// <param name="_tamVendRebateTable">
    /// The <c>TAMVendRebateTable</c> table record to be processed.
    /// </param>
    /// <returns>
    /// The rebate table record to be processed.
    /// </returns>
    protected TAMVendRebateTable parmTAMVendRebateTable(Common _tamVendRebateTable = tamVendRebateTable)
    {
        if (!prmisDefault(_tamVendRebateTable))
        {
            tamVendRebateTable = _tamVendRebateTable;
        }

        return tamVendRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAccrualReversal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts an accrual journal to reverse out the transactions made against accrual and expense accounts
    /// in order to cancel out the original accrual before creating the vendor invoice for the rebate.
    /// </summary>
    public void postAccrualReversal()
    {
        Voucher                     voucher;
        NumberSeq                   numberSeq;
        LedgerJournalTable          ledgerJournalTableAccrual;
        LedgerJournalTrans          ledgerJournalTransAccrual;
        PurchLine                   purchLine;
        Amount                      amount;

        boolean isChineseVoucher = LedgerParameters::isChineseVoucher_CN();

        amount = tamVendRebateTable.ledgerPostingAmount();

        numberSeq = NumberSeq::newGetVoucherFromCode(
                                    this.ledgerJournalNameVoucher(this.ledgerJournalNameProcess()),
                                    NumberSeqScopeFactory::createDefaultScope(),
                                    false);

        ttsbegin;
        voucher = numberSeq.voucher();

        purchLine                               = PurchLine::findInventTransId(tamVendRebateTable.InventTransId);

        ledgerJournalTableAccrual               = ledgerJournalTableAccrual.pdsInitFromledgerJournalName(this.ledgerJournalNameProcess());
        ledgerJournalTableAccrual.insert();

        ledgerJournalTableAccrual.LedgerJournalInclTax = NoYes::No;
        ledgerJournalTableAccrual.doUpdate();

        ledgerJournalTransAccrual.clear();
        ledgerJournalTransAccrual.initValue();
        ledgerJournalTransAccrual                      = this.initLedgerJournalTrans(ledgerJournalTransAccrual);
        ledgerJournalTransAccrual.JournalNum           = ledgerJournalTableAccrual.JournalNum;
        ledgerJournalTransAccrual.AccountType          = LedgerJournalACType::Ledger;
        ledgerJournalTransAccrual.OffsetAccountType    = LedgerJournalACType::Ledger;
        ledgerJournalTransAccrual.Voucher              = voucher;

        ledgerJournalTransAccrual.Txt                  = "@MCR25419";

        if (amount >= 0)
        {
            ledgerJournalTransAccrual.AmountCurCredit    = 0;
            ledgerJournalTransAccrual.AmountCurDebit     = amount;
        }
        else
        {
            ledgerJournalTransAccrual.AmountCurDebit     = 0;
            ledgerJournalTransAccrual.AmountCurCredit    = abs(amount);
        }

        ledgerJournalTransAccrual.DocumentDate         = tamVendRebateTable.ProcessDate;
        ledgerJournalTransAccrual.CurrencyCode         = tamVendRebateTable.CurrencyCode;
        ledgerJournalTransAccrual.TransDate            = tamVendRebateTable.ProcessDate;
        ledgerJournalTransAccrual.Invoice              = tamVendRebateTable.VendInvoiceId;

        if (isChineseVoucher && !ledgerJournalTransAccrual.LedgerVoucherType_CN)
        {
            this.getDefaultVoucherTypeAndVoucherNum_CN(ledgerJournalTransAccrual);
        }

        this.setLedgerJournalTransCurrencyExchRate(ledgerJournalTransAccrual);

        ledgerJournalTransAccrual.insert();

        ttscommit;

        TAMVendRebateTrans::insertFromTAMVendRebateTable(tamVendRebateTable, (amount * -1),
                                                        ledgerJournalTransAccrual.JournalNum,
                                                        '',
                                                        TAMVendRebateTransactionType::RebateAccrual,
                                                        ledgerJournalTransAccrual.Txt);

        if (this.shouldLedgerJournalBePosted(ledgerJournalTableAccrual))
        {
            LedgerJournalPost::postJournal(ledgerJournalTableAccrual, NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLedgerJournalBePosted</Name>
				<Source><![CDATA[
    private boolean shouldLedgerJournalBePosted(LedgerJournalTable _ledgerJournalTable)
    {
        return !(_ledgerJournalTable.isInWFApprovalProcess()
                && !_ledgerJournalTable.isWFApprovalApproved());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger journal number and posts the journal when a vendor rebate is processed.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A <c>boolean</c> value that determines if the rebate is an adjustment.
    /// </param>
    /// <returns>
    /// The Voucher number for the ledger journal.
    /// </returns>
    private Voucher postLedger(boolean _forAdjustment)
    {
        Voucher                     voucher;
        NumberSeq                   numberSeq;

        if (this.ledgerJournalNameProcess())
        {
            numberSeq = NumberSeq::newGetVoucherFromCode(
                                        this.ledgerJournalNameVoucher(this.ledgerJournalNameProcess()),
                                        NumberSeqScopeFactory::createDefaultScope(),
                                        false);

            voucher = numberSeq.voucher();

            this.postLedgerTrans(voucher, _forAdjustment);

            return voucher;
        }
        else
        {
            throw error("@PRO1199");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLedgerTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts and posts the journal records when the vendor rebate is processed,
    /// if the rebate amount is not zero.
    /// </summary>
    /// <param name="_voucher">
    /// The voucher number of the ledger.
    /// </param>
    /// <param name="_forAdjustment">
    /// A <c>boolean</c> value that determines if the rebate is an adjustment.
    /// </param>
    protected void postLedgerTrans(Voucher      _voucher,
                                    boolean     _forAdjustment = false)
    {
        Amount amount;

        if (_voucher)
        {
            amount = tamVendRebateTable.ledgerPostingAmount();

            if (amount != 0)
            {
                this.doPostLedgerTrans(_voucher, amount, _forAdjustment);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// performs the rebate deletion process.
    /// </summary>
    public void runDeleted()
    {
        if (tamVendRebateTable.RebateBalance != 0)
        {
            // Reverse the ledger when there is a balance left
            this.postAccrualReversal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate payment process.
    /// </summary>
    public void runPayment()
    {
        tamVendRebateTable.setRebateBalance();
        tamVendRebateTable.setCorrectedRebateAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the vendor rebate processing.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    public void runProcess(boolean _forAdjustment  = false)
    {
        tamVendRebateTable.ProcessDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        tamVendRebateTable.JournalRefNum    = this.postLedger(_forAdjustment);

        if (this.mustSetNextStatus())
        {
            tamVendRebateTable.setNextStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetNextStatus</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Determines whether the next status must be set.
    /// </summary>
    /// <returns>
    ///		true if the next status must be set; otherwise, false.
	/// </returns>
    protected boolean mustSetNextStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerJournalTransCurrencyExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets exchange rate information in the <c>LedgerJournalTrans</c>
    /// based on the currency code and transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> record to set the values on.
    /// </param>
    protected void setLedgerJournalTransCurrencyExchRate(LedgerJournalTrans  _ledgerJournalTrans)
    {
        _ledgerJournalTrans.ExchRate = ExchangeRateHelper::exchRate(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);

        _ledgerJournalTrans.ExchRateSecond = ExchangeRateHelper::exchRateSecond(_ledgerJournalTrans.CurrencyCode, _ledgerJournalTrans.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultVoucherTypeAndVoucherNum_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default Chinese voucher type and
    /// assigns the voucher number for the given transaction date.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The LedgerJournalTrans record to set the values on
    /// </param>
    private void getDefaultVoucherTypeAndVoucherNum_CN(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerVoucherType_CN ledgerVoucherType = LedgerVoucherType_CN::findDefault();
        _ledgerJournalTrans.LedgerVoucherType_CN = ledgerVoucherType.RecId;
        _ledgerJournalTrans.Voucher_CN = NumberSeq_Voucher_CN::newGetVoucherFromCode(ledgerVoucherType.NumberSequenceTable, _ledgerJournalTrans.TransDate).voucher();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>