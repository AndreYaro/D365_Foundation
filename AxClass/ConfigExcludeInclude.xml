<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigExcludeInclude</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract public class ConfigExcludeInclude
{
    ConfigHierarchyChoose   hierarchyChoose;
    ConfigTmpSave           tmpSave;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canEditDerivedConfigId</Name>
				<Source><![CDATA[
        boolean canEditDerivedConfigId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        boolean check(
        ConfigRuleCheck     _ruleCheck,
        BOMConfigRule       _rule)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configGroupIdLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query container to use in a lookup form.
    /// </summary>
    /// <param name="_bomId">
    ///    The <c>BOMid</c> value.
    /// </param>
    /// <returns>
    ///    The container that has a query to use in a lookup.
    /// </returns>
    abstract container configGroupIdLookupQuery(BOMId _bomId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>configItemIdLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a query container to use in a lookup form.
    /// </summary>
    /// <param name="_bomId">
    ///    The <c>BOMid</c> value.
    /// </param>
    /// <param name="_configGroupId">
    ///    The <c>ConfigGroupId</c> value.
    /// </param>
    /// <returns>
    ///    The container that has a query to use in a lookup.
    /// </returns>
    abstract container configItemIdLookupQuery(
        BOMId           _bomId,
        ConfigGroupId   _configGroupId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        boolean delete(
        BOMConfigRule   _rule,
        Integer         _groupQty)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        void new(
        ConfigHierarchyChoose _hierarchyChoose = null,
        ConfigTmpSave         _tmpSave         = null)
    {
        hierarchyChoose = _hierarchyChoose;
        tmpSave         = _tmpSave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
        boolean save(
        BOMConfigRule   _rule,
        Integer         _groupNum
        )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchLevel</Name>
				<Source><![CDATA[
        boolean searchLevel(
        BOMConfigRule           _rule,
        Integer                 _groupNum,
        ItemId                  _itemId,
        boolean                 _save)
    {
        Integer                 level;
        Integer                 levelGroup;
        Counter                 i;
        Integer                 testGroup;
        boolean                 ok = true;

        [level,levelGroup] = hierarchyChoose.numItem2Derived(hierarchyChoose.numGroupAttachedTo(_groupNum));

        for (i=1; i<=hierarchyChoose.levelGroupNumGroup(level,levelGroup); i++)
        {
            testGroup = hierarchyChoose.levelGroupNum2NumGroup(level,levelGroup,i);
            if (testGroup && hierarchyChoose.numGroup2GroupId(testGroup) == _rule.DerivedGroupId)
            {
                if (_save)
                    ok = this.save(_rule,testGroup) && ok;
                else
                    this.delete(_rule,testGroup);
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static ConfigExcludeInclude construct(
        ConfigRuleMethod        _method,
        ConfigHierarchyChoose   _hierarchyChoose = null,
        ConfigTmpSave           _tmpSave         = null)
    {
        switch (_method)
        {
            case ConfigRuleMethod::Exclude:
                return new ConfigExclIncl_1LevelExcl(_hierarchyChoose,_tmpSave);
            case ConfigRuleMethod::Choose:
                return new ConfigExclIncl_1LevelChoose(_hierarchyChoose,_tmpSave);
        }
        throw error(strFmt("@SYS12580",_method));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromConfigExcludeInclude</Name>
				<Source><![CDATA[
        static ConfigExcludeInclude newFromConfigExcludeInclude(
        ConfigRuleMethod        _method,
        ConfigHierarchyChoose   _hierarchyChoose,
        ConfigTmpSave           _tmpSave)
    {
        return ConfigExcludeInclude::construct(_method, _hierarchyChoose, _tmpSave);
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
        static boolean search(
        ConfigHierarchyChoose   _hierarchyChoose,
        ConfigTmpSave           _tmpSave,
        Integer                 _groupNum,
        ItemId                  _itemId,
        boolean                 _save)
    {
        BOMConfigRule           rule;
        Integer                 attachedToItemNum   = _hierarchyChoose.numGroupAttachedTo(_groupNum);
        BOMId                   bomNum              = _hierarchyChoose.numItem2BOMId(attachedToItemNum);
        ConfigGroupId           groupId             = _hierarchyChoose.numGroup2GroupId(_groupNum);
        ConfigExcludeInclude    exclIncl;
        boolean                 ok = true;

        rule  = BOMConfigRule::search(bomNum,groupId,_itemId);
        while (rule)
        {
            exclIncl = ConfigExcludeInclude::newFromConfigExcludeInclude(
                rule.Method,
                _hierarchyChoose,
                _tmpSave);

            ok = exclIncl.searchLevel(
                rule,
                _groupNum,
                _itemId,
                _save) && ok;

            next rule;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>