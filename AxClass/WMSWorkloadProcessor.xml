<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WMSWorkloadProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WMSWorkloadProcessor</c> class processes the master plan transactions and creates forecast
/// data for the work load report.
/// </summary>
abstract class WMSWorkloadProcessor
{
    TransDate           fromDate;
    TransDate           toDate;
    ReqPlanId           reqPlanId;
    PeriodTemplateName  periodTemplateName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the workload forecast.
    /// </summary>
    /// <param name="_reportSetup">
    ///     The ID of the report setup.
    /// </param>
    /// <param name="_itemId">
    ///     A <c>ItemID</c> value.
    /// </param>
    /// <param name="_inventDim">
    ///     A <c>InventDim</c> value.
    /// </param>
    /// <param name="_inventDimOrigin">
    ///     An original <c>InventDim</c> value, which should be used for the supply schedule model API.
    /// </param>
    public void createForecast(RefRecId _reportSetup, ItemId _itemId, InventDim _inventDim, InventDim _inventDimOrigin)
    {
        WMSReportServiceItemProvider    reportServiceItemProvider;
        WMSWorkLoadUnit                 workLoadUnit;

        workLoadUnit = WMSWorkLoadUnit::newFromInventDimAndReportSetup(_inventDim, _reportSetup);

        reportServiceItemProvider = WMSReportServiceItemProvider::newFromItemId(_itemId);
        reportServiceItemProvider.calculate();

        this.logInconsistencies(workLoadUnit, reportServiceItemProvider, WMSSpaceUtilInconsistencyLogger::newFromReportSetup(_reportSetup));

        // process confirmed records
        this.processForecastTransForWorkUnit(workLoadUnit, _itemId, _inventDimOrigin, reportServiceItemProvider, WMSReqTransMovementStatus::Confirmed);

        // process planned records
        this.processForecastTransForWorkUnit(workLoadUnit, _itemId, _inventDimOrigin, reportServiceItemProvider, WMSReqTransMovementStatus::Planned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defineSupplyDemandTypes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines a set of supply demand types.
    /// </summary>
    /// <returns>
    ///     A set of supply demand types.
    /// </returns>
    protected container defineSupplyDemandTypes()
    {
        container supplyDemandTypes;

        supplyDemandTypes = ReqSupplyDemandTypes::defineSupplyDemandTypes();

        return supplyDemandTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSupplySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the <c>ReqSupplyDemandScheduleModel</c> API.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_itemId">
    /// A <c>ItemID</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> buffer.
    /// </param>
    /// <param name="_status">
    /// A <c>WMSReqTransMovementStatus</c> value.
    /// </param>
    /// <returns>
    /// An instance of the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </returns>
    protected abstract ReqSupplyDemandScheduleModel executeSupplySchedule(WMSWorkLoadUnit _workLoadUnit, ItemId _itemId, InventDim _inventDim, WMSReqTransMovementStatus _status)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSupplySchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </summary>
    /// <param name="_itemId">
    /// A <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDim">
    /// An instance of the <c>InventDim</c> table.
    /// </param>
    /// <returns>
    /// An instance of the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </returns>
    protected ReqSupplyDemandScheduleModel initSupplySchedule(ItemId _itemId, InventDim _inventDim)
    {
        ReqSupplyDemandScheduleModel    reqSupplyDemandScheduleModel = ReqSupplyDemandScheduleModel::construct();

        reqSupplyDemandScheduleModel.parmItemId(_itemId);
        reqSupplyDemandScheduleModel.parmReqPlanId(reqPlanId);
        reqSupplyDemandScheduleModel.parmTodayDate(fromDate);
        reqSupplyDemandScheduleModel.parmPeriodTemplate(WorkPeriodTemplate::findName(periodTemplateName).RecId);
        reqSupplyDemandScheduleModel.parmQueryData(true);
        reqSupplyDemandScheduleModel.parmNumberOfSupplyDemandTypes(conLen(this.defineSupplyDemandTypes()));
        reqSupplyDemandScheduleModel.parmInventDim(_inventDim);
        reqSupplyDemandScheduleModel.parmSkipPeriodDescriptions(true);

        return reqSupplyDemandScheduleModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInconsistencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs product inconsistencies for the specified work load unit.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    /// <param name="_inconsistencyLogger">
    /// An instance of the <c>WMSSpaceUtilInconsistencyLogger</c> class.
    /// </param>
    protected void logInconsistencies(WMSWorkLoadUnit _workLoadUnit, WMSReportServiceItemProvider _reportServiceItemProvider, WMSSpaceUtilInconsistencyLogger _inconsistencyLogger)
    {
        if (!_reportServiceItemProvider.getPalletQuantity())
        {
            _inconsistencyLogger.logWorkLoadUnitInconsistency(_reportServiceItemProvider.parmItemId(), _workLoadUnit, WMSSpaceUtilInconsistencyType::Pallet);
        }

        if (!_reportServiceItemProvider.getGrossVolume())
        {
            _inconsistencyLogger.logWorkLoadUnitInconsistency(_reportServiceItemProvider.parmItemId(), _workLoadUnit, WMSSpaceUtilInconsistencyType::Volume);
        }

        if (!_reportServiceItemProvider.getGrossWeigth())
        {
            _inconsistencyLogger.logWorkLoadUnitInconsistency(_reportServiceItemProvider.parmItemId(), _workLoadUnit, WMSSpaceUtilInconsistencyType::Weight);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodTemplateName</Name>
				<Source><![CDATA[
        public PeriodTemplateName parmPeriodTemplateName(PeriodTemplateName _periodTemplateName = periodTemplateName)
    {
        periodTemplateName = _periodTemplateName;

        return periodTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanId</Name>
				<Source><![CDATA[
        public ReqPlanId parmReqPlanId(ReqPlanId _reqPlanId = reqPlanId)
    {
        reqPlanId = _reqPlanId;

        return reqPlanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateWorkloadUnitFromModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the work load forecast based on input from the <c>ReqSupplyDemandScheduleModel</c> class
    /// for the given period.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_reqSupplyDemandScheduleModel">
    /// An instance of the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    /// <param name="_currentPeriodCounter">
    /// A specified period number.
    /// </param>
    protected void populateWorkloadUnitFromModel(WMSWorkLoadUnit _workLoadUnit, ReqSupplyDemandScheduleModel _reqSupplyDemandScheduleModel, WMSReportServiceItemProvider _reportServiceItemProvider, Counter _currentPeriodCounter)
    {
        #ReqSupplyDemandScheduleTypes

        TransDate   periodStartDate;
        TransDate   periodEndDate;
        str         periodDescription;
        Qty         qtyDelta;

        [periodStartDate, periodEndDate, periodDescription] = conPeek(_reqSupplyDemandScheduleModel.calculatedPeriods(), _currentPeriodCounter);
         _workLoadUnit.setTrackingDateFromPeriod(periodEndDate, periodDescription);

        // inboound demand delta
        qtyDelta = conPeek(conPeek(_reqSupplyDemandScheduleModel.calculatedQuantities(), #DemandTotal), _currentPeriodCounter);
        this.updateWorkloadUnitForecastForPeriod(_workLoadUnit, _reportServiceItemProvider, InventDirection::Issue, qtyDelta, periodDescription);

        // outbound supply delta
        qtyDelta = conPeek(conPeek(_reqSupplyDemandScheduleModel.calculatedQuantities(), #SupplyTotal), _currentPeriodCounter);
        this.updateWorkloadUnitForecastForPeriod(_workLoadUnit, _reportServiceItemProvider, InventDirection::Receipt, qtyDelta, periodDescription);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processForecastTransForWorkUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the forecast transaction for the current work load unit.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_itemId">
    /// A <c>itemId</c> value.
    /// </param>
    /// <param name="_inventDimOrigin">
    /// A <c>InventDim</c> buffer.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    /// <param name="_movementStatus">
    /// A <c>WMSReqTransMovementStatus</c> value.
    /// </param>
    protected void processForecastTransForWorkUnit(WMSWorkLoadUnit _workLoadUnit, ItemId _itemId, InventDim _inventDimOrigin, WMSReportServiceItemProvider _reportServiceItemProvider, WMSReqTransMovementStatus _movementStatus)
    {
        ReqSupplyDemandScheduleModel    supplyDemandScheduleModel = this.executeSupplySchedule(_workLoadUnit, _itemId, _inventDimOrigin, _movementStatus);

        _workLoadUnit.parmMovementStatus(_movementStatus);

        this.updateForecastForWorkUnit(_workLoadUnit, supplyDemandScheduleModel, _reportServiceItemProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForecastForWorkUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates work load unit forecast based on the input from the <c>ReqSupplyDemandScheduleModel</c>
    /// class.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_reqSupplyDemandScheduleModel">
    /// An instance of the <c>ReqSupplyDemandScheduleModel</c> class.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    abstract protected void updateForecastForWorkUnit(WMSWorkLoadUnit _workLoadUnit, ReqSupplyDemandScheduleModel _reqSupplyDemandScheduleModel, WMSReportServiceItemProvider _reportServiceItemProvider)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkloadUnitForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates work load unit forecast for the given quantity.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class.
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class.
    /// </param>
    /// <param name="_qtyDelta">
    /// A <c>Qty</c> value.
    /// </param>
    protected void updateWorkloadUnitForecast(WMSWorkLoadUnit _workLoadUnit, WMSReportServiceItemProvider _reportServiceItemProvider, Qty _qtyDelta)
    {
        WMSPalletCount      supplyDemandDeltaPalletCount;
        Volume              supplyDemandDeltaVolume;
        ItemGrossWeight     supplyDemandDeltaWeight;

        if (_qtyDelta)
        {
            supplyDemandDeltaVolume         = _reportServiceItemProvider.getVolumePerQty(_qtyDelta);
            supplyDemandDeltaWeight         = _reportServiceItemProvider.getWeightPerQty(_qtyDelta);

            if (    supplyDemandDeltaPalletCount
                ||  supplyDemandDeltaVolume
                ||  supplyDemandDeltaWeight)
            {
                _workLoadUnit.find();
                _workLoadUnit.saveChanges();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkloadUnitForecastForPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates work load unit forecast for the given period.
    /// </summary>
    /// <param name="_workLoadUnit">
    /// An instance of the <c>WMSWorkLoadUnit</c> class
    /// </param>
    /// <param name="_reportServiceItemProvider">
    /// An instance of the <c>WMSReportServiceItemProvider</c> class
    /// </param>
    /// <param name="_direction">
    /// A <c>InventDirection</c> value.
    /// </param>
    /// <param name="_qty">
    /// A <c>Qty</c> value.
    /// </param>
    /// <param name="_periodDescription">
    /// A period description.
    /// </param>
    protected void updateWorkloadUnitForecastForPeriod(WMSWorkLoadUnit _workLoadUnit, WMSReportServiceItemProvider _reportServiceItemProvider, InventDirection _direction, Qty _qty, str _periodDescription)
    {
        if (_qty)
        {
            _workLoadUnit.setHasBackLogFromPeriodDescription(_periodDescription);
            _workLoadUnit.parmDirection(_direction);

            this.updateWorkloadUnitForecast(_workLoadUnit, _reportServiceItemProvider, _qty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>