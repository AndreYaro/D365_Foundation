<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBUtil_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBUtil_BR</c> class provides methods to facilitate the manipulation of fiscal books specific data.
/// </summary>
class FBUtil_BR
{
    #File

    const private int CpfMaxLen = 11;
    const private str OnlyNumbers = '0123456789';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVendType2ThirdPartyType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a value in base enum <c>CustVendType_BR</c> into the corresponding value in base enum <c>FBThirdPartyType_BR</c>.
    /// </summary>
    /// <param name="_custVendType">
    ///     A value in enum <c>CustVendType_BR</c> to be converted.
    /// </param>
    /// <returns>
    ///     The value in base enum <c>FBThirdPartyType_BR</c> correspondent to the given <c>CustVendType_BR</c>.
    /// </returns>
    static FBThirdPartyType_BR custVendType2ThirdPartyType(CustVendType_BR _custVendType)
    {
        switch (_custVendType)
        {
            case CustVendType_BR::Customer:
                return FBThirdPartyType_BR::Customer;
            case CustVendType_BR::Vendor:
                return FBThirdPartyType_BR::Vendor;
            case CustVendType_BR::FiscalEstablishment:
                return FBThirdPartyType_BR::FiscalEstablishment;
        }

        return FBThirdPartyType_BR::Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the postal address
    /// </summary>
    /// <param name="_logisticsPostalAddress">
    /// A <c>LogisticsPostalAddress</c> table record
    /// </param>
    /// <returns>
    /// The address formated
    /// </returns>
    public static LogisticsAddressing formatAddress(LogisticsPostalAddress _logisticsPostalAddress)
    {
        return strFmt("%1, %2, %3, %4, %5-%6", _logisticsPostalAddress.Street,
                                                _logisticsPostalAddress.StreetNumber,
                                                _logisticsPostalAddress.BuildingCompliment,
                                                _logisticsPostalAddress.DistrictName,
                                                _logisticsPostalAddress.City,
                                                _logisticsPostalAddress.State);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFileNameSpedContabil</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default SPED Contabil file name
    /// </summary>
    /// <param name="_filePath">
    /// The file directory
    /// </param>
    /// <param name="_cnpj">
    /// The company CNPJ
    /// </param>
    /// <param name="_fromDate">
    /// The SPED ECD initial date
    /// </param>
    /// <param name="_toDate">
    /// The SPED ECD final date
    /// </param>
    /// <param name="_type">
    /// The booking type of SPED ECD
    /// </param>
    /// <returns>
    /// The default SPED Contabil file name
    /// </returns>
    public static Filename getDefaultFileNameSpedContabil(CNPJCPFNum_BR _cnpj, date _fromDate, date _toDate, FBSpedContabilType_BR _type)
    {
        var fileName = strFmt(
                           "@FBK128",
                           strKeep(_cnpj, '1234567890'),
                           date2str(_fromDate, 321, 2, 0, 2, 0, 4, DateFlags::None),
                           date2str(_toDate, 321, 2, 0, 2, 0, 4, DateFlags::None),
                           enum2str(_type)
                       );

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFileNameSpedContributions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default SPED Contribution file name
    /// </summary>
    /// <param name="_bookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <param name="_spedFileType">
    /// A SPED file type
    /// </param>
    /// <returns>
    /// The default SPED Contribution file name
    /// </returns>
    public static Filename getDefaultFileNameSpedContributions(FBBookingPeriod_BR _bookingPeriod, FBSPEDFileType_BR _spedFileType)
    {
        FiscalEstablishment_BR  fiscalEstablishment = _bookingPeriod.fiscalEstablishment();
        Filename                fileName;
        LabelDescription        label               = _spedFileType == FBSPEDFileType_BR::Original ? "@SYS4006922" : "@SYS4006923";

        fileName += strFmt(label, strKeep(fiscalEstablishment.CNPJCPFNum_BR, OnlyNumbers),
                                            strKeep(fiscalEstablishment.IENum_BR, OnlyNumbers),
                                            date2str(mkDate(1, _bookingPeriod.PeriodMonth, _bookingPeriod.PeriodYear), DateFormat::DMY, DateDay::None, DateSeparator::None, DateMonth::Short, DateSeparator::None, DateYear::Digits4, DateFlags::FormatAll),
                                            #txt);

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFileNameSpedFiscal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default SPED Fiscal file name
    /// </summary>
    /// <param name="_bookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <param name="_spedFileType">
    /// A SPED file type
    /// </param>
    /// <returns>
    /// The default SPED Fiscal file name
    /// </returns>
    public static Filename getDefaultFileNameSpedFiscal(FBBookingPeriod_BR _bookingPeriod, FBSPEDFileType_BR _spedFileType)
    {
        FiscalEstablishment_BR  fiscalEstablishment = _bookingPeriod.fiscalEstablishment();
        Filename                fileName;
        LabelDescription        label               = _spedFileType == FBSPEDFileType_BR::Original ? "@SYS4006924" : "@SYS4006925";

        changeCompany(fiscalEstablishment.dataAreaId)
        {
            fileName += strFmt(label, strKeep(fiscalEstablishment.CNPJCPFNum_BR, OnlyNumbers),
                                                strKeep(fiscalEstablishment.IENum_BR, OnlyNumbers),
                                                date2str(mkDate(1, _bookingPeriod.PeriodMonth, _bookingPeriod.PeriodYear), DateFormat::DMY, DateDay::None, DateSeparator::None, DateMonth::Short, DateSeparator::None, DateYear::Digits4, DateFlags::FormatAll),
                                                #txt);
        }

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFileNameSpedDRCST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default SPED DRCST file name.
    /// </summary>
    /// <param name="_bookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record.
    /// </param>
    /// <returns>
    /// The default SPED DRCST file name.
    /// </returns>
    public static Filename getDefaultFileNameSpedDRCST(FBBookingPeriod_BR _bookingPeriod)
    {
        FiscalEstablishment_BR fiscalEstablishment = _bookingPeriod.fiscalEstablishment();
        Filename fileName;

        changeCompany(fiscalEstablishment.dataAreaId)
        {
            fileName = strFmt("@FiscalBooks_SpedDRCST:FileName",
                strKeep(fiscalEstablishment.CNPJCPFNum_BR, OnlyNumbers),
                strKeep(fiscalEstablishment.IENum_BR, OnlyNumbers),
                date2str(mkDate(1, _bookingPeriod.PeriodMonth, _bookingPeriod.PeriodYear), DateFormat::DMY, DateDay::None, DateSeparator::None, DateMonth::Short, DateSeparator::None, DateYear::Digits4, DateFlags::FormatAll),
                #txt);
        }

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFileNameSpedADCR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the default SPED ADCR file name.
    /// </summary>
    /// <param name = "_bookingPeriod">A <c>FBBookingPeriod_BR</c> table record.</param>
    /// <returns>The default SPED ADCR file name.</returns>
    public static Filename getDefaultFileNameSpedADCR(FBBookingPeriod_BR _bookingPeriod)
    {
        FiscalEstablishment_BR fiscalEstablishment = _bookingPeriod.fiscalEstablishment();

        Filename fileName = strFmt("@FiscalBooks_SpedADCR:SpedADCRFileName",
            strKeep(fiscalEstablishment.CNPJCPFNum_BR, OnlyNumbers),
            strKeep(fiscalEstablishment.IENum_BR, OnlyNumbers),
            FBUtil_BR::getDataInString(_bookingPeriod.PeriodMonth, _bookingPeriod.PeriodYear),
            '.zip');

        return fileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempPathOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temp path on the server
    /// </summary>
    /// <returns>
    /// The temp path
    /// </returns>
    public static str getTempPathOnServer()
    {
        #File
        str tmpPath;

        new FileIOPermission('', #io_read).assert();

        tmpPath = WinAPIServer::getTempPath();

        CodeAccessPermission::revertAssert();

        return tmpPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCNPJ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Identifies whether the given string value may represent a CNPJ number.
    /// </summary>
    /// <param name="_cnpjCpf">
    ///     A <c>CNPJCPFNum_BR</c> that may have a value representing a CNPJ or CPF.
    /// </param>
    /// <returns>
    ///     True if the given value may represent a CNPJ number according to its length.
    /// </returns>
    /// <remarks>
    ///     This method uses the length of the value passed in as parameter to identify whether it could be a CNPJ.
    /// </remarks>
    public static boolean isCNPJ(CNPJCPFNum_BR _cnpjCpf)
    {
        return strLen(strKeep(_cnpjCpf, '0123456789')) > CpfMaxLen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataInString</Name>
				<Source><![CDATA[
    private static str getDataInString(FBBookingPeriodMonth_BR _periodMonth, FBBookingPeriodYear_BR _periodYear)
    {
        return date2str(
            mkDate(1, _periodMonth, _periodYear),
            DateFormat::DMY,
            DateDay::None,
            DateSeparator::None,
            DateMonth::Short,
            DateSeparator::None,
            DateYear::Digits4,
            DateFlags::FormatAll);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTableIdsToExcludeForFBSpedQueries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ref table IDs to exclude for queries <c>FBBlock1900DebitTotalsRetail_BR</c> and <c>FBBlock1900OutgoingFDRetail_BR.</c>
    /// </summary>
    /// <returns>String to exclude table IDs of VendInvoiceJour, VendPackingSlipJour, PurchComplementaryInvoiceHeader.</returns>
    [QueryRangeFunction]
    internal static str getRefTableIdsToExcludeForFBSpedQueries()
    {
        return strFmt('!%1,!%2,!%3',
            tableNum(VendInvoiceJour),
            tableNum(VendPackingSlipJour),
            tableNum(PurchComplementaryInvoiceHeader));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>