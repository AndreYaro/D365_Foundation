<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmEmploymentV2EntityEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains event handlers for the HcmEmploymentV2Entity entity.
/// </summary>
class HcmEmploymentV2EntityEventHandler
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>HcmEmploymentV2Entity_onMappedEntityToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entity MappedEntityToDataSource event handler for <c>HcmEmploymentV2Entity</c> extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmEmploymentV2Entity</c> raising the event.</param>
    /// <param name="_eventArgs">The event args.</param>
    [DataEventHandler(tableStr(HcmEmploymentV2Entity), DataEventType::MappedEntityToDataSource)]
    public static void HcmEmploymentV2Entity_onMappedEntityToDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        DataEntityContextEventArgs contextEventArgs = _eventArgs as DataEntityContextEventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = contextEventArgs.parmEntityDataSourceContext();

        if (dataSourceCtx.name() == dataEntityDataSourceStr(HcmEmploymentV2Entity, WorkCalendarEmployment))
        {
            HcmEmploymentV2Entity employmentEntity = _sender as HcmEmploymentV2Entity;

            employmentEntity.skipDataSourceValidateField(fieldNum(HcmEmploymentV2Entity, CalendarId), true);
            employmentEntity.skipDataSourceValidateField(fieldNum(HcmEmploymentV2Entity, CalendarLegalEntityId), true);

            WorkCalendarEmployment workCalendarEmployment = dataSourceCtx.getBuffer();
            workCalendarEmployment.CalendarDataAreaId = employmentEntity.LegalEntityId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmEmploymentV2Entity_onInsertingEntityDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entity InsertingEntityDataSource event handler for <c>HcmEmploymentV2Entity</c> extension.
    /// </summary>
    /// <param name="_sender">The <c>HcmEmploymentV2Entity</c> raising the event.</param>
    /// <param name="_eventArgs">The event args.</param>
    [DataEventHandler(tableStr(HcmEmploymentV2Entity), DataEventType::InsertingEntityDataSource)]
    public static void HcmEmploymentV2Entity_onInsertingEntityDataSource(Common _sender, DataEventArgs _eventArgs)
    {
        DataEntityContextEventArgs contextEventArgs = _eventArgs as DataEntityContextEventArgs;
        DataEntityDataSourceRuntimeContext dataSourceCtx = contextEventArgs.parmEntityDataSourceContext();

        if (dataSourceCtx.name() == dataEntityDataSourceStr(HcmEmploymentV2Entity, WorkCalendarEmployment))
        {
            WorkCalendarEmployment workCalendarEmployment = dataSourceCtx.getBuffer();

            if (workCalendarEmployment.Employment)
            {
                //
                // Conflict detection to resolve inserts into updates. This is required since <c>WorkCalendarEmployment</c> is 1-1 joined to <c>HcmEmployment</c>,
                // and the entity framework only resolves inserts into updates automatically for datasources in the 1 side on a 1-many relationship.
                //
                WorkCalendarEmployment existingRecord = WorkCalendarEmployment::findByEmploymentRecId(workCalendarEmployment.Employment, true);

                if (existingRecord)
                {
                    // Merge user modified fields into the existing record (excluding system fields).
                    buf2Buf(workCalendarEmployment, existingRecord);

                    // Set the datasource context buffer to the final merged record.
                    dataSourceCtx.setBuffer(existingRecord);
                    dataSourceCtx.setDatabaseOperation(DataEntityDatabaseOperation::Update);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>