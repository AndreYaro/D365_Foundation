<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementHeaderDefaultModifiedTableExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Table extension for <table>AgreementHeaderDefault</table>.
/// This class will set default value for the fields of table AgreementHeaderDefault which have not been re-assigned a value.
/// </summary>
class AgreementHeaderDefaultModifiedTableExtension  extends SysTableExtension
{
    private boolean isRecursiveDefaultingEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AgreementHeaderDefaultModifiedTableExtension construct()
    {
        var extension = new AgreementHeaderDefaultModifiedTableExtension();
        extension.initRecursive();
        return extension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecursive</Name>
				<Source><![CDATA[
    protected void initRecursive()
    {
        isRecursiveDefaultingEnabled = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initNonRecursive</Name>
				<Source><![CDATA[
    protected void initNonRecursive()
    {
        isRecursiveDefaultingEnabled = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newNonRecursive</Name>
				<Source><![CDATA[
    public static AgreementHeaderDefaultModifiedTableExtension newNonRecursive()
    {
        var extension = AgreementHeaderDefaultModifiedTableExtension::construct();
        extension.initNonRecursive();
        return extension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preserveOriginalValues</Name>
				<Source><![CDATA[
    private void preserveOriginalValues(List _sourceFields, Set _inputFields, Common _record, Common _copy)
    {
        ListIterator copyIterator = new ListIterator(_sourceFields);

        // Copy back the input fields to ensure that defaulting doesn't override them.
        while (copyIterator.more())
        {
            fieldId copyField = copyIterator.value();

            if (_inputFields.in(copyField))
            {
                _record.(copyField) = _copy.(copyField);
            }

            copyIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultingFields</Name>
				<Source><![CDATA[
    private List defaultingFields()
    {
        List result = new List(Types::Integer);

        result.addEnd(fieldNum(AgreementHeaderDefault, AgreementHeader));
        result.addEnd(fieldNum(AgreementHeaderDefault, CashDiscountCode));
        result.addEnd(fieldNum(AgreementHeaderDefault, CashDiscountDataAreaId));
        result.addEnd(fieldNum(AgreementHeaderDefault, ContactPerson));
        result.addEnd(fieldNum(AgreementHeaderDefault, ContactPersonDataAreaId));
        result.addEnd(fieldNum(AgreementHeaderDefault, DeliveryMode));
        result.addEnd(fieldNum(AgreementHeaderDefault, DeliveryModeDataAreaId));
        result.addEnd(fieldNum(AgreementHeaderDefault, DeliveryName));
        result.addEnd(fieldNum(AgreementHeaderDefault, DeliveryPostalAddress));
        result.addEnd(fieldNum(AgreementHeaderDefault, DeliveryTerm));
        result.addEnd(fieldNum(AgreementHeaderDefault, DeliveryTermDataAreaId));
        result.addEnd(fieldNum(AgreementHeaderDefault, MiscChargeGroup));
        result.addEnd(fieldNum(AgreementHeaderDefault, MiscChargeGroupApplicationModule));
        result.addEnd(fieldNum(AgreementHeaderDefault, MiscChargeGroupDataAreaId));

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign default values to fields witch are not inputed values.
    /// </summary>
    /// <param name = "record">The record that need to default row.</param>
    public void defaultRow(Common record)
    {
        SysDictTable dictTable = new SysDictTable(record.TableId);

        Common copy = dictTable.makeRecord();
        copy.data(record);

        Set inputFields = new Set(Types::Integer);
        Common origRecord = record.orig();
        FieldId fieldId = dictTable.fieldNext(0, TableScope::IncludeBaseTables);

        while (fieldId && ! isSysId(fieldId))
        {
            if (record.isFieldSet(fieldId) && (origRecord.RecId == 0 || record.(fieldId) != origRecord.(fieldId)))
            {
                inputFields.add(fieldId);
            }

            fieldId = dictTable.fieldNext(fieldId, TableScope::IncludeBaseTables);
        }

        Set coveredFields = new Set(Types::Integer);
        List sourceFields = this.defaultingFields();

        this.preserveOriginalValues(sourceFields, inputFields, record, copy);
        
        int fieldCount = sourceFields.elements();
        for (int i = 0; i < fieldCount; i++)
        {
            boolean shouldContinue = false;

            ListIterator iterator = new ListIterator(sourceFields);

            while (iterator.more())
            {
                fieldId = iterator.value();

                if (((isRecursiveDefaultingEnabled && record.isFieldSet(fieldId))
                        || (!isRecursiveDefaultingEnabled && inputFields.in(fieldId)))
                    && !coveredFields.in(fieldId))
                {
                    record.defaultFromField(fieldId, inputFields.in(fieldId));
                    coveredFields.add(fieldId);

                    shouldContinue = isRecursiveDefaultingEnabled;

                    this.preserveOriginalValues(sourceFields, inputFields, record, copy);
                }

                iterator.next();
            }

            if (!shouldContinue)
            {
                break;
            }
        }

        // Copy back all the explicitly named fields that were not used for defaulting.
        fieldId   = dictTable.fieldNext(0, TableScope::IncludeBaseTables);

        while (fieldId && ! isSysId(fieldId))
        {
            if (inputFields.in(fieldId))
            {
                record.(fieldId) = copy.(fieldId);
            }

            fieldId = dictTable.fieldNext(fieldId, TableScope::IncludeBaseTables);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>