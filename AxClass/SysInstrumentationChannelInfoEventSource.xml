<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysInstrumentationChannelInfoEventSource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements a backwards compatible instrumentation channel using the info runtime event source.
/// </summary>
internal class SysInstrumentationChannelInfoEventSource extends SysInstrumentationChannel
{
    public str eventString;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysInstrumentationChannelInfoEventSource construct()
    {
        return new SysInstrumentationChannelInfoEventSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStartEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes an event as a string to the channel.
    /// </summary>
    /// <param name = "_cotext">A context.</param>
    /// <param name = "_activity">An activity name.</param>
    /// <param name = "_activityId">An activity ID.</param>
    /// <param name = "_executionId">A unique execution ID.</param>
    /// <param name = "_additionalParameters">Additional parameters.</param>
    public void writeStartEvent(str _context, str _activity, str _activityId, str _executionId, SysInstrumentationAdditionalParameters _additionalParameters)
    {
        const str startEventType = 'Start';

        eventString = this.getCommonEventString(_context, _activity, startEventType, _activityId, _executionId, _additionalParameters);

        this.writeEvent(eventString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeStopEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Write a stop event.
    /// </summary>
    /// <param name = "_cotext">A context.</param>
    /// <param name = "_activity">An activity name.</param>
    /// <param name = "_activityId">An activity ID.</param>
    /// <param name = "_executionId">A unique execution ID.</param>
    /// <param name = "_additionalParameters">Additional parameters.</param>
    /// <param name = "_status">The status of the execution success or failure.</param>
    /// <param name = "_durationInMilliseconds">Measure of the execution time in milliseconds.</param>
    public void writeStopEvent(str _context, str _activity, str _activityId, str _executionId, SysInstrumentationAdditionalParameters _additionalParameters, str _status, real _durationInMilliseconds)
    {
        const str stopEventType = 'Stop';

        System.String commonEventString = this.getCommonEventString(_context, _activity, stopEventType, _activityId, _executionId, _additionalParameters);
        System.String s1                = System.String::Concat(commonEventString, ', Status=', _status);
        eventString                     = System.String::Concat(s1, ', DurationInMilliSeconds=', _durationInMilliseconds);

        this.writeEvent(eventString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeEvent</Name>
				<Source><![CDATA[
    private void writeEvent(str _eventString)
    {
        Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Info,
            _eventString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommonEventString</Name>
				<Source><![CDATA[
    private System.String getCommonEventString(str _context, str  _activity, str _startStop, str _activityId, str _executionId, SysInstrumentationAdditionalParameters _additionalParameters)
    {
        // System.String::Concat is used for performance, as it faster than strFmt, + and StringBuilder for this use case.
        System.String s1 = System.String::Concat('Context=', _context, ', Activity=', _activity);
        System.String s2 = System.String::Concat(', Type=', _startStop, ', ActivityId=', _activityId);
        System.String s3 = System.String::Concat(', ExecutionId=', _executionId, _additionalParameters ? _additionalParameters.toString() : '');

        return System.String::Concat(s1, s2, s3);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>