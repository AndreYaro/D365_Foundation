<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaym_HSBC</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendOutPaym_HSBC extends VendOutPaym
{
    private const str Allzeros = '0000000000';
    private const str RecTypeZ = 'Z';
    private const str RecTypeA = 'A';
    private const str CurrTypeCAD = 'CAD';
    private const str CurrTypeUSD = 'USD';
    private const str HsbcInstitutionID = '01600';
    private const str Zero = '0';
    private const str Space = ' ';

    private str 10 eftOrigID;
    private str 4 fileCreationNum;
    private Counter record_Count;
    private AmountCur total_Amount_Transactions;
    private Counter total_Number_Transactions;
    private CurrencyCanadaUS currencyCanadaUS;
    private DialogField dialogCurrency;

    #Localcodepage

    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
        currencyCanadaUS
    #ENDMACRO

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        currencyCanadaUS,
        total_Amount_Transactions,
        total_Number_Transactions,
        record_Count,
        eftOrigID,
        fileCreationNum
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the epilogue of the media, such as an end record for a file.
    /// </summary>
    public void close()
    {
        file.writeExp(this.createFileControl());
        setprefix(strfmt("@SYS73667", this.parmFilename()));
        info(strfmt("@SYS73669", this.parmTotal_Number_Transactions(0)));
        info(strfmt("@SYS73670", this.parmTotal_Amount_Transactions(0), this.getBankAccountTable().CurrencyCode));

        if (printControlReport)
        {
            this.printControlReport();
        }

        if (printPaymAdvice)
        {
            this.printPaymAdvice();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPaymAdvice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the payment advice report.
    /// </summary>
    public void printPaymAdvice()
    {
        Args args = new Args();

        if (BankPaymAdviceReportV2FeatureExposure::isEnabled())
        {
            BankPaymAdviceDefaultParameters defaultParameters = BankPaymAdviceDefaultParameters::newForPaymAdvicePrintRun(
                this.getPaymRecords(),
                new SrsPrintDestinationSettings(this.getPrinterSettings(PaymDocumentType::PaymAdvice)),
                printPaymAdvicePrintMgmt);

            args.parmObject(defaultParameters);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVendV2), MenuItemType::Output).run(args);
        }
        else
        {
            args.caller(this);
            args.parmObject(this.getPaymRecords());
            args.parmEnumType(enumNum(NoYes));
            args.parmEnum(printPaymAdvicePrintMgmt);

            new MenuFunction(menuitemOutputStr(BankPaymAdviceVend), MenuItemType::Output).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>codepage</Name>
				<Source><![CDATA[
    private int codepage()
    {
        return #cp_1252;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the following trailer record for output to the export file: RBC - Pre-Authorized Debits (PADs) Service - RBC  Standard (STD152) - Debit File Format Specifications.
    /// </summary>
    /// <returns>
    ///    The trailer record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createFileControl()
    {
        //  RBC-Standard(STD152) Debit File Format Specififcation
        //  Trailer Record
        str 9 recordCount;
        str 10 hsbcID;
        str 4 fileCreationNumber;
        str 14 totalAmountCreditTransactions;
        str 8 totalNumberCreditTransactions;
        str 1 recordType = RecTypeZ;
        str 14 totalAmountDebitTransactions = strrep(Zero, 14);
        str 8 totalNumberDebitTransactions = strrep(Zero, 8);
        str 14 valueOfErrorCodeE = strrep(Zero, 14);
        str 8 numberOfErrorCodeE = strrep(Zero, 8);
        str 14 valueOfErrorCodeF = strrep(Zero, 14);
        str 8 numberOfErrorCodeF = strrep(Zero, 8);
        str 1352 filler = strrep(Space, 1352);

        container trailerRecord = connull();

        //  Add 1 to the record counter.
        recordCount = num2Str0(this.parmRecord_Count(1), 9);
        hsbcID = this.parmEFTOrigID();
        fileCreationNumber = this.parmFileCreationNum();
        totalNumberCreditTransactions = num2Str0(this.parmTotal_Number_Transactions(0), 8);
        totalAmountCreditTransactions = strRFix(stralpha(num2Str0(this.parmTotal_Amount_Transactions(0), 14, 2)), 14, Zero);

        trailerRecord = conins(trailerRecord, 1, recordType +
                                                 recordCount +
                                                 hsbcID +
                                                 fileCreationNumber +
                                                 totalAmountDebitTransactions +
                                                 totalNumberDebitTransactions +
                                                 totalAmountCreditTransactions +
                                                 totalNumberCreditTransactions +
                                                 valueOfErrorCodeE +
                                                 numberOfErrorCodeE +
                                                 valueOfErrorCodeF +
                                                 numberOfErrorCodeF +
                                                 filler);

        return trailerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFileHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createFileHeader()
    {
        str julianDate;
        str 9 recordCount;
        str 10 hsbcdID;
        str 4 fileCreationNumber;
        str 6 fileCreationDate;
        str 3 currencyType;
        str 1 recordType = RecTypeA;
        str 5 hsbcInstID = HsbcInstitutionID;
        str 20 reserved1 = strrep(Space, 20);
        str 1406 filler1 = strrep(Space, 1406);

        container headerRecord = connull();

        //  Add 1 to the record counter.
        recordCount = num2Str0(this.parmRecord_Count(1), 9);
        hsbcdID = this.parmEFTOrigID();
        fileCreationNumber = this.parmFileCreationNum();

        julianDate = date2Julian(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        fileCreationDate = Zero + substr(julianDate, strlen(julianDate)-4,5);

        currencyType = (currencyCanadaUS == CurrencyCanadaUS::US) ? CurrTypeUSD : CurrTypeCAD;

        headerRecord = conins(headerRecord, 1, recordType +
                                               recordCount +
                                               hsbcdID +
                                               fileCreationNumber +
                                               fileCreationDate +
                                               hsbcInstID +
                                               reserved1 +
                                               currencyType +
                                               filler1);
        return headerRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the class ID of the corresponding parent of <c>CustVendOutPaymRecord</c> classes.
    /// </summary>
    /// <returns>
    /// The class ID.
    /// </returns>
    /// <remarks>
    /// The class must be inherited from the <c>CustVendOutPaymRecord</c> class.
    /// </remarks>
    public classId custVendOutPaymRecordRootClassId()
    {
        return classnum(VendOutPaymRecord_HSBC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase  dialog = super();

        dialog.caption(this.interfaceName());
        this.dialogAddFileName(dialog);
        this.dialogAddCurrency(dialog);
        this.dialogAddPrintDocument(PaymDocumentType::ControlReport, dialog, true);
        this.dialogAddPrintDocument(PaymDocumentType::PaymAdvice, dialog, true, true, true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddCurrency</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void dialogAddCurrency(DialogRunbase _dialog)
    {
        DialogRunbase dialog = _dialog;

        dialog.addGroup("@SYS62786");
        dialogCurrency = dialog.addFieldValue(enumstr(CurrencyCanadaUS), currencyCanadaUS, "@SYS7572");
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans ledgerJournalTrans;
        VendOutPaymRecord_HSBC vendOutPaymRecord_HSBC;
        boolean ok = true;

        int64 paymentLinesToProcess = this.findQueryRecordCount();
        int64 paymentLinesProcessed;

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentGenerationGeneratePaymentLines, paymentLinesToProcess);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            activityContext.addCustomProperty(CustVendInstrumentationConstants::ClassName, this.getClassName());

            try
            {
                ttsbegin;

                setprefix("@SYS17561");

                queryRun.reset();
                outPaymRecordList = new List(Types::Class);

                while (queryRun.next())
                {
                    ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                    paymentLinesProcessed++;
                    progressLogger.trackProgress(paymentLinesProcessed);

                    if (!this.isOffsetAccountValid(ledgerJournalTrans))
                    {
                        continue;
                    }

                    if (!this.isVendorAccountActiveForDate(ledgerJournalTrans))
                    {
                        warning(strFmt("@SYS115093", ledgerJournalTrans.Voucher));
                        continue;
                    }

                    vendOutPaymRecord_HSBC = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                                ledgerJournalTrans.PaymSpec,
                                                                                this,
                                                                                this.vendPaym(ledgerJournalTrans));
                    vendOutPaymRecord_HSBC.parmFile(file);

                    setprefix(strfmt("@SYS66048",
                                        ledgerJournalTrans.TransDate,
                                        ledgerJournalTrans.Voucher,
                                        ledgerJournalTrans.parmAccount()));

                    if (vendOutPaymRecord_HSBC.checkValues(ledgerJournalTrans, this.parmProgress()))
                    {
                        if (!vendOutPaymRecord_HSBC.parmSkipPaymRecord())
                        {
                            vendOutPaymRecord_HSBC.output();
                            outPaymRecordList.addEnd(vendOutPaymRecord_HSBC);
                            this.updateLedgerJournalTrans(ledgerJournalTrans, vendOutPaymRecord_HSBC, true);
                            this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                        }
                        else
                        {
                            continue;
                        }
                    }
                    else
                    {
                        ok = false;
                    }
                }

                if (!ok)
                {
                    throw error("@SYS18447");
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                progressLogger.logRetryOnDeadlock();

                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        progressLogger.logRetryOnUpdateConflict();

                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Bank Account table.
    /// </summary>
    /// <returns>
    /// The Bank Account table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public BankAccountTable getBankAccountTable()
    {
        return BankAccountTable::find(this.parmBankAccountID());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        super();

        if (dialogCurrency)
            currencyCanadaUS = dialogCurrency.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the format to be displayed in the user interface.
    /// </summary>
    /// <returns>
    /// The name of the format to be displayed in the user interface.
    /// </returns>
    /// <remarks>
    /// The method must return the name of the format to be displayed in the user interface. Formats
    /// without an interface name cannot be used in electronic banking as export formats. They can serve as
    /// parents for other formats.
    /// </remarks>
    public PaymInterfaceName interfaceName()
    {
        return 'HSBC Distribution Format (CA)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>open</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the media and creates the header of the media.
    /// </summary>
    public void open()
    {
        file = CustVendOutPaym::newFile(this.codepage());

        if (!file || file.status() != IO_Status::Ok)
        {
            // Error when opening file %1
            throw error(strfmt("@SYS73665", filename));
        }

        this.parmEFTOrigID(strLFix(this.getBankAccountTable().CompanyPaymId, 10, Zero));
        this.parmFileCreationNum(num2Str0(this.getUniquePaymModeTable().LastSequenceNumber + 1, 4));
        if (!this.validateHeaderValues())
        {
            // Update has been canceled.
            throw(error(strfmt("@SYS18738", this.getUniquePaymModeTable().PaymMode)));
        }
        else
        {
            file.writeExp(this.createFileHeader());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data that is required for the <c>SysLastValues</c> .
    /// </summary>
    /// <returns>
    /// A container that stores the data to be persisted by <c>SysLastValues</c> .
    /// </returns>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derivative classes also implement this method so that the whole object
    /// can be packed for <c>SysLastValues</c> .
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, #SysLastValuesList, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEFTOrigID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Formats the RBC client number from the <c>Bank account: Company ID</c> property.
    /// </summary>
    /// <param name="_eftOrigID">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>eftOrigID</c> parameter.
    /// </returns>
    /// <remarks>
    ///    Formats the RBC client number based on the following:
    ///    Pre-Authorized Debits (PADs) Services - RBC Standard (STD152) - Debit File Format Specifications
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CompanyPaymId parmEFTOrigID(str _eftOrigID = eftOrigID)
    {
        eftOrigID = _eftOrigID;
        return eftOrigID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileCreationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the RBC client number from the <c>Bank account: Company ID</c> property.
    /// </summary>
    /// <param name="_fileCreationNum">
    /// The value to set; optional.
    /// </param>
    /// <returns>
    /// The value of the <c>fileCreationNum</c> parameter.
    /// </returns>
    /// <remarks>
    /// Formats the RBC client number based on the following: Pre-Authorized Debits (PADs) Services - RBC
    /// Standard (STD152) - Debit File Format Specifications.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CompanyPaymId parmFileCreationNum(str _fileCreationNum = fileCreationNum)
    {
        fileCreationNum = _fileCreationNum;
        return fileCreationNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecord_Count</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Record_Count</c> parameter.
    /// </summary>
    /// <param name="_record_Count">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>Record_Count</c> parameter.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmRecord_Count(Counter _record_Count = record_Count)
    {
        record_Count += _record_Count;
        return record_Count;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotal_Amount_Transactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Total_Amount_Transactions</c> parameter.
    /// </summary>
    /// <param name="_total_Amount_Transactions">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>Total_Amount_Transactions</c> parameter.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountCur parmTotal_Amount_Transactions(AmountCur _total_Amount_Transactions = total_Amount_Transactions)
    {
        total_Amount_Transactions += _total_Amount_Transactions;
        return total_Amount_Transactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotal_Number_Transactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>Total_Number_Transactions</c> parameter.
    /// </summary>
    /// <param name="_total_Number_Transactions">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>Total_Number_Transactions</c> parameter.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmTotal_Number_Transactions(Counter _total_Number_Transactions = total_Number_Transactions)
    {
        total_Number_Transactions += _total_Number_Transactions;
        return total_Number_Transactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>total</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void total(AmountCur _amountCur)
    {
        this.parmTotal_Number_Transactions(1);
        this.parmTotal_Amount_Transactions(_amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret;
        container base;

        #LOCALMACRO.CurrentListV1
            currencyCanadaUS
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            case 1 :
                [version, #CurrentListV1, base] = _packedClass;
                ret = super(base);
                break;

            default :
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the data that is required for the <c>SysLastValues</c> .
    /// </summary>
    /// <param name="_packedValues">
    /// The values stored by the <c>SysLastValues</c> framework that are to be unpacked.
    /// </param>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions to support different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class one level above the <c>RunBase</c> or
    /// <c>RunBaseBatch</c> class. Derived classes also implement this method so that the whole object can
    /// be unpacked for <c>SysLastValues</c> .
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        Version version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the state of the internal variables.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called; optional.
    /// </param>
    /// <returns>
    /// true if the internal variables are valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method must validate the state of the internal variables. It is called before closing the
    /// dialog box, and should be called in the <c>run</c> method.It must only contain code that adds
    /// warnings to the infolog.throw is not enabled in this method.The method should generally return
    /// errors by using the <c>Global::CheckFailed</c> method.Export formats that are designed to handle
    /// only one method of payment per payment media must call the <c>checkUniquePaymMode</c> method.
    /// </remarks>
    public boolean validate(Object _calledFrom = null)
    {
        Currency currency;
        BankAccountTable bankAccountTable;
        boolean ok = true;
        boolean currencyOk = false;
        boolean noCanadianCurrency = true;
        boolean noUSCurrency = true;

        bankAccountTable = this.getBankAccountTable();
        if (!bankAccountTable)
        {
            ok = checkFailed(strfmt("@SYS26720", accountId));
        }
        else
        {
            ok = BankAccountTable::checkIsActive(bankAccountTable.AccountID);
        }

        if (ok)
        {
            // If we are only paying Canadian currency transactions
            if (currencyCanadaUS == CurrencyCanadaUS::Canada)
            {
                // Verify that the currency of the bank is the same as the currency code for the Canadian Dollar ISO code (CAD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency where currency.CurrencyCodeISO == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::CAD)
                {
                    noCanadianCurrency = false;
                    if (currency.CurrencyCode == bankAccountTable.CurrencyCode)
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noCanadianCurrency)
                {
                    // There is not a currency code with the Canadian ISO currency code of 'CAD'.
                    ok = checkFailed("@SYS98121");
                }

                if (!currencyOk)
                {
                    // The currency code assigned to bank '%1' must be a Canadian currency.
                    ok = checkFailed(strfmt("@SYS98120", this.parmBankAccountID()));
                }
            }
            else if (currencyCanadaUS == CurrencyCanadaUS::US)
            {
                // Verify that the currency of the bank is the same as the currency code for the US Dollar ISO code (USD).
                currency.selectForUpdate(false);
                while select CurrencyCode from currency where currency.CurrencyCodeISO == ISOCurrencyCodeHelper::getISOCurrencyCodeAlpha(ISOCurrencyCodes::USD)
                {
                    noUSCurrency = false;
                    if (currency.CurrencyCode == bankAccountTable.CurrencyCode)
                    {
                        currencyOk = true;
                        break;
                    }
                }

                if (noUSCurrency)
                {
                    // There is not a currency code with the US ISO currency code of 'USD'.
                    ok = checkFailed("@SYS115581");
                }

                if (!currencyOk)
                {
                    // The currency code assigned to bank '%1' must be a US currency.
                    ok = checkFailed(strfmt("@SYS115583", this.parmBankAccountID()));
                }
            }
        }

        if (ok)
        {
            if (!filename)
            {
                ok = checkFailed("@SYS18624");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the details that are required by the export format.
    /// </summary>
    /// <returns>
    /// true if validation succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    ///  Validates the following details that are required by the export format:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Methods of payment - Vendor: Last file number is not equal or larger than
    ///   9999.</description>
    ///   </item>
    ///   <item>
    ///   <description>Company information: Company name is not blank.</description>
    ///   </item>
    ///   <item>
    ///   <description>Bank account: Company ID is not blank.</description>
    ///   </item>
    ///  </list>
    ///   If any one of these validations fail, an appropriate error message is provided and the file export
    ///  will not occur.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateHeaderValues()
    {
        boolean ok = true;

        // The next last file number used for this format will exceed 9999.
        if (this.getUniquePaymModeTable().LastSequenceNumber + 1 > 9999)
        {
            // Methods of payment - %1, export format requires that the last file number cannot exceed 9999
            ok = checkFailed(strfmt("@SYS98755", this.getUniquePaymModeTable().PaymMode));
        }

        // Company Name field is blank.
        if (strlen(CompanyInfo::find().name()) < 1)
        {
            // Methods of payment - %1, export format requires a non-blank Company name
            ok = checkFailed(strfmt("@SYS98756", this.getUniquePaymModeTable().PaymMode));
        }

        // The Comany ID value for the selected bank is not valid (value was empty).
        if (this.parmEFTOrigID() == allZeros)
        {
            // Methods of payment - %1, export format requires a valid Company ID for bank account: %2
            ok = checkFailed(strfmt("@SYS98757", this.getUniquePaymModeTable().PaymMode,
                                             this.getBankAccountTable().AccountID));
        }
        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>