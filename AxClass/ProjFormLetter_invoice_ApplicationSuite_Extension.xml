<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjFormLetter_invoice_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// An extension of the <c>ProjFormLetter_invoice</c> class intended to support advance invoice in project.
/// </summary>
[ExtensionOf(classStr(ProjFormLetter_invoice))]
public final class ProjFormLetter_Invoice_ApplicationSuite_Extension
{
    private str advanceInvoiceSettlementPacked;
    private const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packedClass = next pack();
        return SysPackExtensions::appendExtension(packedClass, 
            classStr(ProjFormLetter_Invoice_ApplicationSuite_Extension),
            [CurrentVersion, advanceInvoiceSettlementPacked]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>extensionUnpack</Name>
				<Source><![CDATA[
    private boolean extensionUnpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case CurrentVersion:
                [version, advanceInvoiceSettlementPacked] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean result = next unpack(_packedClass);

        if (result)
        {
            container extensionState = SysPackExtensions::findExtension(_packedClass, classStr(ProjFormLetter_invoice_ApplicationSuite_Extension));

            if (extensionState)
            {
                result = this.extensionUnpack(extensionState);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdvanceInvoiceSettlementPacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get packeded object of <c>AdvanceInvoiceSettlement_W</c> class.
    /// </summary>
    /// <param name = "_advanceInvoiceSettlementPacked">Packeded object of <c>AdvanceInvoiceSettlement_W</c> class.</param>
    /// <returns>Packeded object of <c>AdvanceInvoiceSettlement_W</c> class.</returns>
    public str parmAdvanceInvoiceSettlementPacked(str _advanceInvoiceSettlementPacked = advanceInvoiceSettlementPacked)
    {
        advanceInvoiceSettlementPacked = _advanceInvoiceSettlementPacked;
        return advanceInvoiceSettlementPacked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom)
    {
        boolean ret = next validate(_calledFrom);

        if (FeatureStateProvider::isFeatureEnabled(BaseDocumentTrackingImprovementsFeature_IT::instance())
            && CustTable::find(tProjProposalJour.InvoiceAccount).IsPublicSector_IT == NoYes::Yes)
        {
            BaseDocument_IT baseDocument = BaseDocument_IT::findByTable(tProjProposalJour);

            if (baseDocument.documentType == DocumentType_IT::None
                || !baseDocument.CIPEcode
                || !baseDocument.TenderCode)
            {
                ret = checkFailed(strFmt("@BaseDocument_IT:PublicSectorBaseDocumentValidationError",
                    tProjProposalJour.InvoiceAccount,
                    strFmt("@SYS76498", "@SYS50132", tProjProposalJour.ProposalId)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>