<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetProposalTransferCapital</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetProposalTransferCapital extends AssetProposal implements BatchRetryable
{
    DialogField     dlgPostingDate;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        runDate
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    AssetTransTypeJournal assetTransType()
    {
        return AssetTransTypeJournal::CapitalReserveTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS71134");

        dialog.addGroup("@SYS22526");

        dlgPostingDate = dialog.addField(extendedTypeStr(TransDate),"@SYS14475");
        dlgPostingDate.value(runDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            runDate = dlgPostingDate.value();

            ret = this.checkDateIsValid(runDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        Query                 query = new Query(querystr(AssetProposalTrans));
        QueryBuildRange       qr_Range;

        super();

        query.name("@FixedAssets:FA_QueryTitle_ValueModelRevenueRecognitionOfReserves");
        qr_Range = query.dataSourceTable(tablenum(AssetTrans)).addRange(fieldnum(AssetTrans,TransType));
        qr_Range.value(enum2Value(AssetTransType::CapitalReserve));
        qr_Range.status(1);

        qr_Range = query.dataSourceTable(tablenum(AssetTrans)).addRange(fieldnum(AssetTrans,ReserveTransferDone));
        qr_Range.value(enum2Value(NoYes::No));
        qr_Range.status(1);

        qr_Range = query.dataSourceTable(tablenum(AssetBookTable)).addRange(fieldnum(AssetBookTable,CurrentOperationsTax));
        qr_Range.status(1);

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        AssetJournal        assetJournal;
        AssetTrans          assetTrans;
        AssetReserveType    assetReserveType;
        AssetBook           assetBook;
        TransDate           transferLimitDate;
        int                 i;

        assetJournal = new AssetJournal(journalNum,this.assetTransType());
        // <GCN>
        if (assetJournal && LedgerParameters::isChineseVoucher_CN())
        {
            // Set the voucher type for asset journal with the value user selected.
            assetJournal.parmVoucherType_CN(voucherType_CN);
        }
        // </GCN>
        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tablenum(AssetTrans)))
            {
                assetTrans = queryRun.get(tablenum(AssetTrans));

                assetBook = AssetBook::find(assetTrans.AssetId, assetTrans.BookId);
                if (assetBook)
                {
                    assetReserveType = AssetReserveType::find(assetBook.ReserveTypeId);
                    if (assetReserveType)
                    {
                        transferLimitDate = assetTrans.TransDate;
                        for (i = 1; i <= assetReserveType.TransferLimit; i++)
                        {
                            transferLimitDate =  nextmth(transferLimitDate);
                        }
                        assetJournal.createTransForReserve(assetTrans,
                                                          runDate,
                                                          transferLimitDate,
                                                          assetBudgetModelId);
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>