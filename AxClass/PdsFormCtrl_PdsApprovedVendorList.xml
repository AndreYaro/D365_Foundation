<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsFormCtrl_PdsApprovedVendorList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsFormCtrl_PdsApprovedVendorList</c> serves as a form control the <c>PdsApprovedVendorList</c> form.
/// </summary>
class PdsFormCtrl_PdsApprovedVendorList extends PmfFormCtrl
{
    // design flags
    boolean allowEdit;
    boolean showItemHeader;
    boolean showVendorHeader;

    boolean showItemGrid;
    boolean showVendorGrid;

    boolean showFilterValidFrom;
    boolean showFilterValidTo;
    boolean showFilterValidToAsOf;
    boolean showFilterIncludeNoExpiration;

    boolean validFromShouldBeLastGridField;

    // query parameters
    PdsApprovedVendor   vendorId;
    ItemId              itemId;
    validFromDate       fromDate;
    validToDate         toDate;
    NoYesId             includeNoExpiration;

    QueryBuildDataSource inventTable_DS;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>argsHaveNoRecord</Name>
				<Source><![CDATA[
    protected boolean argsHaveNoRecord()
    {
        return !this.args().record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceAVLExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets filters and ranges on PdsApprovedVendorList according to parameters set on this instance.
    /// </summary>
    public void dataSourceAVLExecuteQueryPre()
    {
        FormDataSource          dataSource;
        Query                   query;
        QueryBuildDataSource    qbds;
        str datesRangeValue;

        dataSource = this.parmFormDataSource();
        query = dataSource.query();
        qbds = query.dataSourceTable(tablenum(PdsApprovedVendorList));

        qbds.sortClear();
        this.setSorting(qbds);

        qbds.clearRanges();

        if (itemId)
        {
            str itemIdRange = SysQuery::value(itemId);
            this.getQueryRange(qbds, fieldnum(PdsApprovedVendorList, ItemId)).value(itemIdRange);
        }

        if (vendorId)
        {
            this.getQueryRange(qbds, fieldnum(PdsApprovedVendorList, PdsApprovedVendor)).value(vendorId);
        }

        datesRangeValue = strFmt(   this.datesQueryRangeFormat(),
                                    date2StrXpp(fromDate),
                                    date2StrXpp(toDate),
                                    enum2int(includeNoExpiration));

        this.getQueryRange(qbds, fieldnum(PdsApprovedVendorList, RecId)).value(datesRangeValue);

        dataSource.query(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceInventTableExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filters InventTable to the item in the current context.
    /// </summary>
    /// <param name="_datasource">
    /// The InventTable datasource to filter.
    /// </param>
    public void dataSourceInventTableExecuteQueryPre(FormDataSource _datasource)
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        query = _datasource.query();
        qbds = query.dataSourceTable(tableNum(InventTable));

        if (!qbds)
        {
            // Function %1 has been incorrectly called
            throw error(strfmt("@SYS22828", methodStr(PdsFormCtrl_PdsApprovedVendorList, dataSourceInventTableExecuteQueryPre)));
        }

        inventTable_DS = qbds;

        qbds.clearDynalinks();

        this.setItemIdRange();

        _datasource.query(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datesQueryRangeFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the query range format for validFrom/validTo query range,
    /// according to the following format arguments:
    /// %1 - interval start (date)
    /// %2 - interval end (date)
    /// %3 - include records without expiration (NoYes, formatted as an int)
    /// </summary>
    /// <returns>The format string for the validFrom/validTo query range value.</returns>
    protected str datesQueryRangeFormat()
    {
        return '(' + fieldStr(PdsApprovedVendorList, ValidFrom) + ' < %2) && (' + fieldStr(PdsApprovedVendorList, ValidTo) + ' >= %1)';
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHandlerFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for edit method of controls bound to 'from date'.
    /// </summary>
    /// <param name="_set">True if setting; otherwise, false.</param>
    /// <param name="_fromDate">Value to set.</param>
    /// <returns>Value of 'from date'.</returns>
    public validFromDate editHandlerFromDate(boolean _set, validFromDate _fromDate)
    {
        if (_set)
        {
            fromDate = _fromDate;
            this.parmFormDataSource().executeQuery();
        }

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHandlerIncludeNoExpiration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for edit method of controls bound to 'include records without expiration'.
    /// </summary>
    /// <param name="_set">True if setting; otherwise, false.</param>
    /// <param name="_includeNoExpiration">Value to set.</param>
    /// <returns>Value of 'include records without expiration'.</returns>
    public NoYesId editHandlerIncludeNoExpiration(boolean _set, NoYesId _includeNoExpiration)
    {
        if (_set)
        {
            includeNoExpiration = _includeNoExpiration;
            this.parmFormDataSource().executeQuery();
        }

        return includeNoExpiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editHandlerToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handler for edit method of controls bound to 'to date'.
    /// </summary>
    /// <param name="_set">True if setting; otherwise, false.</param>
    /// <param name="_toDate">Value to set.</param>
    /// <returns>Value of 'to date'.</returns>
    public validToDate editHandlerToDate(boolean _set, validToDate _toDate)
    {
        if (_set)
        {
            toDate = _toDate;
            this.parmFormDataSource().executeQuery();
        }

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formCaption</Name>
				<Source><![CDATA[
    protected str formCaption()
    {
        return "@PRO1545";
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterGroupCaption</Name>
				<Source><![CDATA[
    protected str filterGroupCaption()
    {
        return "@PDS1946";
    }

]]></Source>
			</Method>
			<Method>
				<Name>formControlItemIdFilter</Name>
				<Source><![CDATA[
    private FormStringControl formControlItemIdFilter()
    {
        return formRun.design().controlName(formControlStr(PdsApprovedVendorList, ItemId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formControlItemIdFilterModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the ID of the item used as a range for the <c>InventTable</c> datasource.
    /// </summary>
    /// <param name="_callingControl">
    ///     The control calling the method.
    /// </param>
    public boolean formControlItemIdFilterModified(FormStringControl _callingControl)
    {
        Object formObject = formRun;

        itemId = _callingControl.text();
        this.setItemIdRange();

        formObject.formRefreshQuery();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formControlItemName</Name>
				<Source><![CDATA[
    private FormStringControl formControlItemName()
    {
        return formRun.design().controlName(formControlStr(PdsApprovedVendorList, ProductName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRange</Name>
				<Source><![CDATA[
    private QueryBuildRange getQueryRange(QueryBuildDataSource _qbds, fieldId _fieldId)
    {
        QueryBuildRange qbr = _qbds.findRange(_fieldId);

        if (!qbr)
        {
            qbr = _qbds.addRange(_fieldId);
        }

        return qbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls additional functionality after the form has been initialized
    /// </summary>
    public void initPost()
    {
        FormStringControl idFilter;

        super();

        if (!this.parmFormRun())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (this.parmFormRun().args().parmEnum() == PdsApprovedVendorListExpirationNoYes::Yes)
        {
            this.parmFormDataSource().query().dataSourceName(this.parmFormDataSource().name()).addSortField(fieldnum(PdsApprovedVendorList, ValidTo), SortOrder::Ascending);
        }

        this.parmFormRun().design().caption(this.formCaption());
        FormGroupControl filterGroup = this.parmFormRun().design().controlName(formcontrolstr(PdsApprovedVendorList, Filter)) as FormGroupControl;
        filterGroup.caption(this.filterGroupCaption());

        this.parmFormDataSource().allowCreate(allowEdit);
        this.parmFormDataSource().allowDelete(allowEdit);
        this.parmFormDataSource().allowEdit(allowEdit);
        this.enableFormControl(formcontrolstr(PdsApprovedVendorList, AddRecord), allowEdit);
        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, AddRecord), allowEdit);
        this.enableFormControl(formcontrolstr(PdsApprovedVendorList, RemoveRecord), allowEdit);
        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, RemoveRecord), allowEdit);
        this.enableFormControl(formcontrolstr(PdsApprovedVendorList, EditRecord), allowEdit);
        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, EditRecord), allowEdit);

        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, DetailsHeaderItem), showItemHeader);
        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, DetailsHeaderVendor), showVendorHeader);

        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, Filter), this.showFilterGroup());
        if (this.showFilterGroup())
        {
            this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, ParmFromDate), showFilterValidFrom);
            this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, ParmToDate), showFilterValidTo);
            this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, ParmAsOfDate), showFilterValidToAsOf);
            this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, ParmIncludeNoExpiration), showFilterIncludeNoExpiration);
        }

        if (this.argsHaveNoRecord() && this.parmShowItemHeader())
        {
            // item ID becomes a filter for vendor List search
            idFilter = this.formControlItemIdFilter();
            idFilter.allowEdit(true);
            idFilter.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(PdsFormCtrl_PdsApprovedVendorList, formControlItemIdFilterModified), this);

            // show the item on the grid
            showItemGrid = true;
        }

        this.formControlItemIdFilter().text(this.parmItemId());

        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, PdsApprovedVendorList_ItemId), showItemGrid);
        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, PdsApprovedVendorList_PdsApprovedVendor), showVendorGrid);

        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, PdsApprovedVendorList_ValidFrom),      !validFromShouldBeLastGridField);
        this.visibleFormControl(formcontrolstr(PdsApprovedVendorList, PdsApprovedVendorList_ValidFrom_Last), validFromShouldBeLastGridField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event method to call before executing the standard code in form event <c>init</c>.
    /// </summary>
    public void initPre()
    {
        InventTable     inventTable;
        VendTable       vendTable;
        PurchTable      purchTable;

        Args args = this.parmFormRun().args();

        switch (args.dataset())
        {
            case tablenum(InventTable):
                inventTable = args.record();
                itemId  = inventTable.ItemId;
                break;

            case tablenum(VendTable):
                vendTable = args.record();
                vendorId  = vendTable.AccountNum;
                break;

            case tablenum(PurchTable):
                purchTable = args.record();
                vendorId   = purchTable.OrderAccount;
                break;

            case tablenum(PurchProductApprovedVendorStaging):
                PurchProductApprovedVendorStaging stagingTable = args.record();
                vendorId = stagingTable.ApprovedVendorAccountNumber;
                itemId   = stagingTable.ItemNumber;
                break;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        fromDate = dateNull();
        toDate = dateMax();
        includeNoExpiration = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowEdit</Name>
				<Source><![CDATA[
    public boolean parmAllowEdit(boolean _allowEdit = allowEdit)
    {
        allowEdit = _allowEdit;
        return allowEdit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public validFromDate parmFromDate(validFromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeNoExpiration</Name>
				<Source><![CDATA[
    public NoYesId parmIncludeNoExpiration(NoYesId _includeNoExpiration = includeNoExpiration)
    {
        includeNoExpiration = _includeNoExpiration;
        return includeNoExpiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterIncludeNoExpiration</Name>
				<Source><![CDATA[
    public boolean parmShowFilterIncludeNoExpiration(boolean _showFilterIncludeNoExpiration = showFilterIncludeNoExpiration)
    {
        showFilterIncludeNoExpiration = _showFilterIncludeNoExpiration;
        return showFilterIncludeNoExpiration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterValidFrom</Name>
				<Source><![CDATA[
    public boolean parmShowFilterValidFrom(boolean _showFilterValidFrom = showFilterValidFrom)
    {
        showFilterValidFrom = _showFilterValidFrom;
        return showFilterValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterValidTo</Name>
				<Source><![CDATA[
    public boolean parmShowFilterValidTo(boolean _showFilterValidTo = showFilterValidTo)
    {
        showFilterValidTo = _showFilterValidTo;
        return showFilterValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowFilterValidToAsOf</Name>
				<Source><![CDATA[
    public boolean parmShowFilterValidToAsOf(boolean _showFilterValidToAsOf = showFilterValidToAsOf)
    {
        showFilterValidToAsOf = _showFilterValidToAsOf;
        return showFilterValidToAsOf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemGrid</Name>
				<Source><![CDATA[
    public boolean parmShowItemGrid(boolean _showItemGrid = showItemGrid)
    {
        showItemGrid = _showItemGrid;
        return showItemGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemHeader</Name>
				<Source><![CDATA[
    public boolean parmShowItemHeader(boolean _showItemHeader = showItemHeader)
    {
        showItemHeader = _showItemHeader;
        return showItemHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowVendorGrid</Name>
				<Source><![CDATA[
    public boolean parmShowVendorGrid(boolean _showVendorGrid = showVendorGrid)
    {
        showVendorGrid = _showVendorGrid;
        return showVendorGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowVendorHeader</Name>
				<Source><![CDATA[
    public boolean parmShowVendorHeader(boolean _showVendorHeader = showVendorHeader)
    {
        showVendorHeader = _showVendorHeader;
        return showVendorHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public validToDate parmToDate(validToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidFromShouldBeLastGridField</Name>
				<Source><![CDATA[
    public boolean parmValidFromShouldBeLastGridField(boolean _validFromShouldBeLastGridField = validFromShouldBeLastGridField)
    {
        validFromShouldBeLastGridField = _validFromShouldBeLastGridField;
        return validFromShouldBeLastGridField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorId</Name>
				<Source><![CDATA[
    public PdsApprovedVendor parmVendorId(PdsApprovedVendor _vendorId = vendorId)
    {
        vendorId = _vendorId;
        return vendorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItemIdRange</Name>
				<Source><![CDATA[
    protected void setItemIdRange()
    {
        FormStringControl   itemNameControl;
        QueryBuildRange     qbr;
        boolean             itemIdSet;

        qbr = SysQuery::findOrCreateRange(inventTable_DS, fieldNum(InventTable, ItemId));
        qbr.value(this.parmItemId());

        itemIdSet = this.parmItemId() != '';
        itemNameControl = this.formControlItemName();

        if (!itemIdSet)
        {
            // product name field uses data method from inventable source,
            // if item id is not set thus empty, query will return all results and we will get cursor positioned on first record,
            // so if we don't want to show first product name, we need to put a value for query which won't return anything.
            qbr.value('-1');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSorting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sorting parameters for the main data source of the form.
    /// </summary>
    /// <param name="_qbds">The main data source of the form.</param>
    protected void setSorting(QueryBuildDataSource _qbds)
    {
        _qbds.addSortField(fieldNum(PdsApprovedVendorList, PdsApprovedVendor), SortOrder::Ascending);
        _qbds.addSortField(fieldNum(PdsApprovedVendorList, ValidFrom), SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFilterGroup</Name>
				<Source><![CDATA[
    private boolean showFilterGroup()
    {
        return showFilterIncludeNoExpiration
            || showFilterValidFrom
            || showFilterValidTo
            || showFilterValidToAsOf;
    }

]]></Source>
			</Method>
			<Method>
				<Name>visibleFormControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows or hides the specified form control.
    /// </summary>
    /// <param name="_name">Identifying name of the form control.</param>
    /// <param name="_visible">True to show the field; false otherwise.</param>
    /// <remarks>
    /// This is a convenience method to show or hide a control on the associated form.
    /// If the referenced control does not exist on the form then this method does nothing.
    /// <syntax>
    /// protected void visibleFormControl(identifiername _name, boolean _visible)
    /// </syntax>
    /// </remarks>
    protected void visibleFormControl(identifierName _name, boolean _visible)
    {
        FormControl control;

        control = formRun.design().controlName(_name);
        if (control)
        {
            control.visible(_visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsFormCtrl_PdsApprovedVendorList construct()
    {
        return new PdsFormCtrl_PdsApprovedVendorList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PdsFormCtrl_PdsApprovedVendorList</c>
    /// </summary>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsFormCtrl_PdsApprovedVendorList</c> class.
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PdsFormCtrl_PdsApprovedVendorList</c> and sets the formRun variable
    /// to the value of the calling form.
    /// </remarks>
    public static PdsFormCtrl_PdsApprovedVendorList newFromForm(FormRun _fr)
    {
        PdsFormCtrl_PdsApprovedVendorList frmCtrl;

        frmCtrl = PdsFormCtrl_PdsApprovedVendorList::construct();
        frmCtrl.parmFormRun(_fr);

        frmCtrl.parmAllowEdit(true);
        frmCtrl.parmShowItemHeader(true);
        frmCtrl.parmShowVendorGrid(true);

        return frmCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new class derived from <c>PdsFormCtrl_PdsApprovedVendorList</c> according to
    /// the menu item that was used to display the form.
    /// </summary>
    /// <param name="_menuItemName">
    /// Name of the caller menu item.
    /// </param>
    /// <param name="_fr">
    /// FormRun Object of caller
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsFormCtrl_PdsApprovedVendorList</c> class.
    /// </returns>
    /// <remarks>
    /// Initiates the creation of a new class derived from
    /// <c>PdsFormCtrl_PdsApprovedVendorList</c> and sets the formRun variable
    /// to the value of the calling form.
    /// </remarks>
    public static PdsFormCtrl_PdsApprovedVendorList newFromMenuItem(menuItemName _menuItemName, FormRun _fr)
    {
        switch (_menuItemName)
        {
            case menuitemDisplayStr(PdsInventInquiryApprovedVendorListByItem):
                return PdsFormCtrl_PdsApprovedVendorList_ByItem::newFromForm(_fr);

            case menuitemDisplayStr(PdsInventInquiryApprovedVendorExpiration):
                return PdsFormCtrl_PdsApprovedVendorList_Expir::newFromForm(_fr);

            case menuitemDisplayStr(PdsInventInquiryApprovedVendorListByVend):
                return PdsFormCtrl_PdsApprovedVendorList_ByVend::newFromForm(_fr);

            default: // includes menuitemDisplayStr(PdsApprovedVendorList)
                return PdsFormCtrl_PdsApprovedVendorList::newFromForm(_fr);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>