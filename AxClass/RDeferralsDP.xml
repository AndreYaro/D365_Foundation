<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RDeferralsDP</c> class handles the business logic for the <c>RDeferralsBalances</c>, <c>RDeferralsListing</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RDeferrals)),
    SRSReportParameterAttribute(classStr(RDeferralsContract))
]
public class rDeferralsDP extends SRSReportDataProviderBase
{
    RDeferralsBookId    rDeferralsBookId;
    RDeferralsTmp       rDeferralsTmp;
    boolean             zeroBookValue;
    RDeferralsTransDate transDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRDeferralsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>RDeferralsTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// A <c>RDeferralsTmp</c> temporary table
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RDeferralsTmp))
    ]
    public RDeferralsTmp getRDeferralsTmp()
    {
        return rDeferralsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource;

        queryBuildDataSource = _query.dataSourceTable(tableNum(RDeferralsBook));
        queryBuildDataSource.rangeField(fieldNum(RDeferralsBook, DeferralsBookId)).value(queryValue(rDeferralsBookId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRDeferralsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>RDeferralsTmp</c>.
    /// </summary>
    /// <param name="_rDeferralsTable">
    /// Passes <с>RDeferralsTable</с> table object.
    /// </param>
    /// <param name="_rDeferralsSumTrans">
    /// Passes <с>RDeferralsSumTrans</с> class object.
    /// </param>
    /// <param name="_profitId">
    /// Passes <с>RTax25ProfitId</с> instance.
    /// </param>
    private void insertRDeferralsTmp(RDeferralsTable _rDeferralsTable, RDeferralsSumCalc _rDeferralsSumTrans, RTax25ProfitId _profitId)
    {
        RDeferralsBook  rDeferralsBook;
        rDeferralsBook = RDeferralsBook::find(_rDeferralsTable.DeferralsId, rDeferralsBookId);

        rDeferralsTmp.clear();
        rDeferralsTmp.rDeferralsBookId  = rDeferralsBookId;
        rDeferralsTmp.CurrencyCode      = CompanyInfoHelper::standardCurrency();
        rDeferralsTmp.DeferralsId       = _rDeferralsTable.DeferralsId;
        rDeferralsTmp.Name              = _rDeferralsTable.Name;
        rDeferralsTmp.DeferralsGroup    = rDeferralsBook.DeferralsGroupId;
        rDeferralsTmp.NetBookValue      = _rDeferralsSumTrans.netBookValue();
        rDeferralsTmp.DeferralsAmount   = rDeferralsBook.DeferralsAmount;
        rDeferralsTmp.LifeTime          = rDeferralsBook.LifeTime;
        rDeferralsTmp.WritingOffValue   = _rDeferralsSumTrans.writingOffValue();
        rDeferralsTmp.RetirementValue   = _rDeferralsSumTrans.retirementValue();
        rDeferralsTmp.AcquisitionDate   =  _rDeferralsTable.AcquisitionDate;
        rDeferralsTmp.Status            = rDeferralsBook.Status;
        rDeferralsTmp.ProfitId          = _profitId;
        rDeferralsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        Query                   query;
        RTax25ProfitTable       rTax25ProfitTable;
        RDeferralsTable         rDeferralsTable;
        RDeferralsSumCalc       rDeferralsSumTrans;
        RDeferralsContract      contract = this.parmDataContract() as RDeferralsContract;
        QueryBuildDataSource    qbs;

        rDeferralsBookId    = contract.parmBookId();
        transDate           = contract.parmTransDate();
        zeroBookValue       = contract.parmZeroBookValue();

        query = this.parmQuery();
        this.init(query);
        qr = new QueryRun(query);

        rDeferralsSumTrans = RDeferralsSumCalc_Trans::newDeferralsPeriod((select firstonly rDeferralsTable).DeferralsId,
                                                                          rDeferralsBookId,
                                                                          transDate);
        qbs = query.dataSourceTable(tableNum(RDeferralsTable));
        while (qr.next())
        {
            rDeferralsTable = qr.get(tableNum(RDeferralsTable));
            RTax25ProfitTable = qr.get(tableNum(RTax25ProfitTable));
            rDeferralsSumTrans.parmRangeDeferralsId(rDeferralsTable.DeferralsId);
            if (!(zeroBookValue &&
                    rDeferralsSumTrans.netBookValue() < RDeferralsProfile::find(RDeferralsBook::find(rDeferralsTable.DeferralsId, rDeferralsBookId).DeferralsProfile).RoundOffOperation))
            {
                this.insertRDeferralsTmp(rDeferralsTable, rDeferralsSumTrans, RTax25ProfitTable.ProfitId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
