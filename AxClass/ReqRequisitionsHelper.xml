<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqRequisitionsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for handling requisitions.
/// </summary>
class ReqRequisitionsHelper
{
    ReqPlanData reqPlanData;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupInvalidRequisitionLineReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes invalid references from the RequisitionLineFirmedOrderLine table,
    /// if referenced order or order line dimensions don't match requisition line dimensions
    /// (taking into account product dimensions and active coverage dimensions).
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The RecId of the requisition line to delete invalid references for: optional,
    /// if unspecified, all invalid references from all requistion lines associated with the current company are cleaned up.
    /// </param>
    public void cleanupInvalidRequisitionLineReferences(RecId _purchReqLineRecId = 0)
    {
        PurchReqLine                    purchReqLine;
        RequisitionLineFirmedOrderLine  requisitionLineFirmedOrderLine;
        InventTransOrigin               inventTransOrigin;
        InventTrans                     inventTrans;
        InventDim                       inventDimRequisition;
        InventDim                       inventDimFirmedOrder;

        ItemId                          lastItemId;
        InventDimGroupSetup             inventDimGroupSetup;

        boolean                         validReference;

        ttsbegin;

        while select forupdate requisitionLineFirmedOrderLine
            where   (prmisDefault(_purchReqLineRecId) || requisitionLineFirmedOrderLine.RequisitionLine == _purchReqLineRecId)
                &&  requisitionLineFirmedOrderLine.FirmedOrderLineInventTransDataAreaId == getCompany(tableNum(InventTransOrigin), curext())
            join ItemId from purchReqLine
                order by ItemId
                where purchReqLine.RecId                == requisitionLineFirmedOrderLine.RequisitionLine
                   && purchReqLine.BuyingLegalEntity    == CompanyInfo::current()
            join inventDimRequisition
                where   inventDimRequisition.InventDimId == purchReqLine.InventDimId
            join RecId, ItemId from inventTransOrigin
                where   inventTransOrigin.InventTransId == requisitionLineFirmedOrderLine.FirmedOrderLineInventTransId
                   &&   inventTransOrigin.dataAreaId    == requisitionLineFirmedOrderLine.FirmedOrderLineInventTransDataAreaId
            join InventDimId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
            join inventDimFirmedOrder
                where   inventDimFirmedOrder.InventDimId == inventTrans.InventDimId
        {
            validReference = true;

            if (purchReqLine.ItemId != inventTransOrigin.ItemId)
            {
                validReference = false;
            }

            if (validReference)
            {
                if (purchReqLine.ItemId != lastItemId)
                {
                    inventDimGroupSetup = InventDimGroupSetup::newItemId(purchReqLine.ItemId);
                    lastItemId = purchReqLine.ItemId;
                }

                if (!InventDim::isInventDimEqualCovDim(inventDimGroupSetup, inventDimRequisition, inventDimFirmedOrder))
                {
                    validReference = false;
                }
            }

            if (!validReference)
            {
                requisitionLineFirmedOrderLine.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqTransFromRequisitionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new ReqTrans record based on a requisition line
    /// (and additional required information).
    /// </summary>
    /// <param name="_reqTrans">
    /// The ReqTrans record to initialize.
    /// </param>
    /// <param name="_purchReqLine">
    /// The requisition line record.
    /// </param>
    /// <param name="_level">
    /// The BOM level of the item; optional.
    /// </param>
    /// <param name="_setupDim">
    /// Item coverage settings for the dimensions of the requisition line. Optional.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// Item dimension setup information; optional.
    /// </param>
    /// <returns>
    /// True if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean initReqTransFromRequisitionLine(
        ReqTrans            _reqTrans,
        PurchReqLine        _purchReqLine,
        BOMLevel            _level                  = -1,
        ReqSetupDim         _setupDim               = null,
        InventDimGroupSetup _inventDimGroupSetup    = null)
    {
        #Req
        InventTable         inventTable;
        InventDim           inventDim;
        InventDimGroupSetup inventDimGroupSetup;

        boolean             success = true;

        void ensureInventTable()
        {
            if (inventTable.RecId == 0)
            {
                inventTable = InventTable::find(_purchReqLine.ItemId);
            }
        }

        ensureInventTable();
        _reqTrans.RefType           = ReqRefType::RequisitionLine;
        _reqTrans.RequisitionLine   = _purchReqLine.RecId;
        _reqTrans.Priority          = #PriorityReservOrdered;
        _reqTrans.PlanVersion       = reqPlanData.parmReqPlanVersionRefRecId();
        _reqTrans.ItemId            = _purchReqLine.ItemId;                
        _reqTrans.Qty               = this.convertPurchQtyToReqTransQty(inventTable, _purchReqLine);

        _reqTrans.ReqDate           = _purchReqLine.RequiredDate;
        _reqTrans.ReqDateDlvOrig    = _purchReqLine.RequiredDate;

        if (_inventDimGroupSetup == null)
        {
            inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        }
        else
        {
            inventDimGroupSetup = _inventDimGroupSetup;
        }

        if (_setupDim == null)
        {
            inventDim = InventDim::find(_purchReqLine.InventDimId);
            _setupDim = ReqSetupDim::newInventTable(inventTable, inventDim.reqCovDimId(inventDimGroupSetup));
        }

        _reqTrans.CovInventDimId = _setupDim.parmCovInventDimId();
        if (_level == -1)
        {
            _reqTrans.Level = _setupDim.itemLevel();
        }
        else
        {
            _reqTrans.Level = _level;
        }

        inventDim = InventDim::find(_reqTrans.CovInventDimId);
        if (!inventDimGroupSetup.hasAllCovDimFields(inventDim))
        {
            warning(strFmt("@SYS4050044", _purchReqLine.LineNum, PurchReqTable::find(_purchReqLine.PurchReqTable).PurchReqId));
            success = false;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPlanData</Name>
				<Source><![CDATA[
        public ReqPlanData parmReqPlanData(ReqPlanData _reqPlanData = reqPlanData)
    {
        reqPlanData = _reqPlanData;
        return reqPlanData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransForRequisitionLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new ReqTrans record based on a requisition line
    /// (and additional required information).
    /// </summary>
    /// <param name="_purchReqLine">
    /// The requisition line record.
    /// </param>
    /// <param name="_level">
    /// The BOM level of the item; optional.
    /// </param>
    /// <param name="_setupDim">
    /// Item coverage settings for the dimensions of the requisition line; optional.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// Item dimension setup information; optional.
    /// </param>
    /// <returns>
    /// A ReqTrans record initialized, based on a requisition line, if all
    /// the required information is valid; otherwise, null.
    /// </returns>
    public ReqTrans reqTransForRequisitionLine(
        PurchReqLine        _purchReqLine,
        BOMLevel            _level                  = -1,
        ReqSetupDim         _setupDim               = null,
        InventDimGroupSetup _inventDimGroupSetup    = null)
    {
        ReqTrans reqTrans;

        if (this.initReqTransFromRequisitionLine(reqTrans, _purchReqLine, _level, _setupDim, _inventDimGroupSetup))
        {
            reqTrans.RefId = NumberSeq::newGetNumFromId(reqPlanData.sequencePlannedOrder()).num();
            return reqTrans;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPurchQtyToReqTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert Purchase Requisition Quantity to Requirement Transaction Quantity.
    /// If unit of measure differs, convertion should be made according to parameters.
    /// </summary>
    /// <param name = "_inventTable">An instance of <c>InventTable</c>.</param>
    /// <param name = "_purchReqLine">A record of <c>PurchReqLine</c></param>
    /// <returns>Converted quantity for requirement transaction from purhase requisition line.</returns>
    internal real convertPurchQtyToReqTransQty(
        InventTable             _inventTable,
        PurchReqLine            _purchReqLine)
    {
        var reqTransQty = - _purchReqLine.PurchQty;

        if (_inventTable.RecId)
        {
            RecId inventUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(_inventTable.inventUnitId());
            if (_purchReqLine.PurchUnitOfMeasure != inventUnitOfMeasure)
            {
                reqTransQty = EcoResProductUnitConverter::convertForReleasedProduct(_inventTable.ItemId,
                                                                                    _purchReqLine.InventDimId,
                                                                                    reqTransQty,
                                                                                    _purchReqLine.PurchUnitOfMeasure,
                                                                                    inventUnitOfMeasure,
                                                                                    NoYes::No,
                                                                                    NoYes::Yes);
            }
        }
        
        return reqTransQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDynamicPlan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the ReqRequisitionsHelper class
    /// to be used in the default dynamic plan.
    /// </summary>
    /// <returns>
    /// A new instance of the ReqRequisitionsHelper class.
    /// </returns>
    public static ReqRequisitionsHelper newDynamicPlan()
    {
        return ReqRequisitionsHelper::newReqPlanData(ReqPlanData::newReqPlanId(ReqPlanSched::defaultDynamicId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqPlanData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the ReqRequisitionsHelper class based on a given ReqPlanData instance.
    /// </summary>
    /// <param name="_reqPlanData">
    /// The ReqPlanData instance to be used with the new ReqRequisitionsHelper instance.
    /// </param>
    /// <returns>
    /// A new instance of the ReqRequisitionsHelper class.
    /// </returns>
    public static ReqRequisitionsHelper newReqPlanData(ReqPlanData _reqPlanData)
    {
        ReqRequisitionsHelper requisitionsHelper = new ReqRequisitionsHelper();

        requisitionsHelper.parmReqPlanData(_reqPlanData);

        return requisitionsHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preparePurchReqLineExplosion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the necessary information related to a requisition line,
    /// in order for an MRP explosion to be performed on that requisition line.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The RecId of the requisition line to prepare for MRP explosion.
    /// </param>
    public static void preparePurchReqLineExplosion(RecId _purchReqLineRecId)
    {
        if (!ReqTrans::findFromPurchReqLineRecId(_purchReqLineRecId))
        {
            ReqRequisitionsHelper::insertReqTransForPurchReqLine(_purchReqLineRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReqTransForPurchReqLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a <c>ReqTrans<\c> based on a specific requisition line.
    /// </summary>
    /// <param name="_purchReqLineRecId">
    /// The RecId of the requisition line for which to insert the <c>ReqTrans<\c>.
    /// </param>
    [Replaceable(true)]
    public static void insertReqTransForPurchReqLine(RecId _purchReqLineRecId)
    {
        ReqRequisitionsHelper requisitionsHelper = ReqRequisitionsHelper::newDynamicPlan();

        ReqTrans reqTrans = requisitionsHelper.reqTransForRequisitionLine(PurchReqLine::find(_purchReqLineRecId));

        ttsbegin;
        reqTrans.insert(requisitionsHelper.parmReqPlanData());
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requisitionLineStatusAllowsFirming</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes a boolean value indicating whether the requisition line
    /// covered by this ReqTrans record is in a state that allows firming of
    /// the planned order associated with the record in question.
    /// </summary>
    /// <param name="_reqTransReceipt">
    /// The receipt requirement transaction that may be covering requisition line issues.
    /// </param>
    /// <returns>
    /// A boolean value indicating whether the requisition line
    /// covered by this ReqTrans record is in a state that allows firming of
    /// the planned order associated with the record in question.
    /// </returns>
    public static boolean requisitionLineStatusAllowsFirming(ReqTrans _reqTransReceipt)
    {
        PurchReqLine    requisitionLine;
        ReqTrans        issueReqTrans;
        ReqTransCov     reqTransCov;

        // allow firming if this receipt covers any issues that are not requisitions
        select firstonly RecId, IssueRecId from reqTransCov
            where   reqTransCov.ReceiptRecId == _reqTransReceipt.RecId
            exists join RecId from issueReqTrans
                where   issueReqTrans.RecId == reqTransCov.IssueRecId
                    &&  issueReqTrans.RefType != ReqRefType::RequisitionLine;

        if (reqTransCov)
        {
            return true;
        }

        // don't allow firming if this receipt covers only requisition issues
        // and the related requisition lines are not in the right status
        select firstonly RecId from issueReqTrans
            where issueReqTrans.RefType == ReqRefType::RequisitionLine
            exists join reqTransCov
                where   reqTransCov.ReceiptRecId            == _reqTransReceipt.RecId
                    &&  reqTransCov.IssueRecId              == issueReqTrans.RecId
            exists join requisitionLine
                where   requisitionLine.RecId               == issueReqTrans.RequisitionLine
                    &&  requisitionLine.RequisitionStatus   != PurchReqRequisitionStatus::Approved
                    &&  requisitionLine.RequisitionStatus   != PurchReqRequisitionStatus::Closed;

        if (issueReqTrans)
        {
            error('Cannot firm when the planned order references a requisition line which is not approved or closed.');
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRequisitionLinesFromFirmedReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the requisition lines (and creates respective references) for any
    /// requisition line issues covered by the receipt that has just been firmed.
    /// </summary>
    /// <param name="_firmedReqTrans">
    /// The receipt ReqTrans that has just been firmed.
    /// </param>
    /// <param name="_insertList">
    /// A RequisitionLineFirmedOrderLine record insert list to use; optional,
    /// if one is passed, insertDatabase() is not called by this method.
    /// </param>
    public static void updateRequisitionLinesFromFirmedReqTrans(
        ReqTrans            _firmedReqTrans,
        RecordInsertList    _insertList = null)
    {
        PurchReqLine        requisitionLine;
        ReqTrans            issueReqTrans;
        ReqTransCov         reqTransCov;
        InventTransOrigin   inventTransOrigin;

        Set                 requisitionLinesToClose = new Set(Types::Int64);
        SetEnumerator       en;

        boolean             useExternalInsertList = false;
        RecordInsertList    requisitionLineRefInsertList;

        if (_insertList)
        {
            useExternalInsertList = true;
            requisitionLineRefInsertList = _insertList;
        }
        else
        {
            useExternalInsertList = false;
            requisitionLineRefInsertList = new RecordInsertList(tableNum(RequisitionLineFirmedOrderLine));
        }

        inventTransOrigin = _firmedReqTrans.InventTransOrigin();

        while select RecId, RequisitionStatus from requisitionLine
            join RecId from issueReqTrans
                where   issueReqTrans.PlanVersion       == _firmedReqTrans.PlanVersion
                    &&  issueReqTrans.RequisitionLine   == requisitionLine.RecId
                    &&  issueReqTrans.RefType           == ReqRefType::RequisitionLine
            exists join reqTransCov
                where   reqTransCov.ReceiptRecId        == _firmedReqTrans.RecId
                    &&  reqTransCov.IssueRecId          == issueReqTrans.RecId
        {
            if (requisitionLine.RequisitionStatus != PurchReqRequisitionStatus::Closed)
            {
                requisitionLinesToClose.add(requisitionLine.RecId);
            }

            RequisitionLineFirmedOrderLine::insertReference(
                requisitionLineRefInsertList,
                requisitionLine,
                inventTransOrigin,
                _firmedReqTrans.RefType);
        }

        if (!useExternalInsertList)
        {
            requisitionLineRefInsertList.insertDatabase();
        }

        en = requisitionLinesToClose.getEnumerator();
        while (en.moveNext())
        {
            PurchReqWFStatusTransitionHelper::setPurchReqLineStatus(en.current(), PurchReqRequisitionStatus::Closed);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>