<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FreeTextInvoiceDP_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classstr(FreeTextInvoiceDP))]
public final class FreeTextInvoiceDP_ApplicationSuite_Extension
{
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateFreeTextInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void populateFreeTextInvoiceHeaderFooterTmp(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        next populateFreeTextInvoiceHeaderFooterTmp(_custInvoiceJour, _companyInfo);

        if (FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
        {
            FreeTextInvoiceHeaderFooterTmp freeTextInvoiceHeaderFooterTmp = this.parmFreeTextInvoiceHeaderFooterTmp_W();
            CustIntentLetter_IT custIntentLetter = CustIntentLetter_IT::find(_custInvoiceJour.IntentLetterId_IT, _custInvoiceJour.InvoiceAccount);

            freeTextInvoiceHeaderFooterTmp.IntentLetterId_IT = custIntentLetter.LetterId;
            freeTextInvoiceHeaderFooterTmp.IntentLetterInternalId_IT = custIntentLetter.InternalLetterId;
            freeTextInvoiceHeaderFooterTmp.IntentLetterDate_IT = custIntentLetter.DateLetter;
            freeTextInvoiceHeaderFooterTmp.IntentLetterFromDate_IT = custIntentLetter.FromDate;
            freeTextInvoiceHeaderFooterTmp.IntentLetterToDate_IT = custIntentLetter.ToDate;
            freeTextInvoiceHeaderFooterTmp.IntentLetterPostingDate_IT = custIntentLetter.DateRegister;
            freeTextInvoiceHeaderFooterTmp.IntentLetterProtocol_IT = custIntentLetter.Protocol;
            this.parmFreeTextInvoiceHeaderFooterTmp_W(freeTextInvoiceHeaderFooterTmp);
        }

        if (FeatureStateProvider::isFeatureEnabled(IntegrationTaxAuthoritiesSAFeature::instance()) && _custInvoiceJour.QRCode_SA)
        {
            freeTextInvoiceHeaderFooterTmp.QRCode_SA = GenerateQRCode_SA::generateQRCodeFromBase64(_custInvoiceJour.QRCode_SA);
        }
        else if (FeatureStateProvider::isFeatureEnabled(SimplifiedInvoiceSAFeature::instance()))
        {
            freeTextInvoiceHeaderFooterTmp.QRCode_SA = CustInvoiceQRCodeCreator_SA::create(_custInvoiceJour, _companyInfo);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMY]) && BusinessDocumentPrintQRCodeFlight_MY::instance().isEnabled() &&
            _custInvoiceJour.custInvoiceJour_W() && _custInvoiceJour.custInvoiceJour_W().QRCode_W)
        {
            str decodeBase64String = CustGenerateQRCode_W::decodeBase64String(_custInvoiceJour.custInvoiceJour_W().QRCode_W);
            freeTextInvoiceHeaderFooterTmp.QRCode_W = CustGenerateQRCode_W::generateQRCodeFromBase64(decodeBase64String);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateInvoiceHeaderLocalizationData</Name>
				<Source><![CDATA[
    protected void generateInvoiceHeaderLocalizationData(CustInvoiceJour _custInvoiceJour, CompanyInfo _companyInfo)
    {
        next generateInvoiceHeaderLocalizationData(_custInvoiceJour, _companyInfo);

        if (isoCountryCode == #isoEE)
        {
            TaxRegistration taxRegistration = TaxRegistration::getPrimaryAddressTaxRegistration(
                _companyInfo,
                TaxRegistrationTypesList::TAXID,
                _custInvoiceJour.InvoiceDate);

            freeTextInvoiceHeaderFooterTmp.CompanyBankAccount = this.parmCompanyBankAccountTable().AccountNum;
            freeTextInvoiceHeaderFooterTmp.CompanyRegNum = taxRegistration.RegistrationNumber;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreeTextInvoiceHeaderFooterTmp_W</Name>
				<Source><![CDATA[
    public FreeTextInvoiceHeaderFooterTmp parmFreeTextInvoiceHeaderFooterTmp_W(FreeTextInvoiceHeaderFooterTmp _freeTextInvoiceHeaderFooterTmp = freeTextInvoiceHeaderFooterTmp)
    {
        freeTextInvoiceHeaderFooterTmp = _freeTextInvoiceHeaderFooterTmp;
        return freeTextInvoiceHeaderFooterTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFreeTextInvoiceTmp</Name>
				<Source><![CDATA[
    protected void populateFreeTextInvoiceTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        #isoCountryRegionCodes

        next populateFreeTextInvoiceTmp(
            _custInvoiceJour,
            _custInvoiceTrans,
            _taxSpec,
            _custPaymSchedLine,
            _prepaymentCustTrans,
            _prepaymentTaxTrans);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoAE]))
        {
            FreeTextInvoiceTmp freeTextInvoiceTmp = this.parmFreeTextInvoiceTmp_AE();
            
            if (_taxSpec)
            {
                freeTextInvoiceTmp.VATPercent_AE = this.getTaxValue(_taxSpec, _custInvoiceJour);
                freeTextInvoiceTmp.VATAmount_AE = -(_taxSpec.taxAmount());
                freeTextInvoiceTmp.EndDisc_AE = _custInvoiceJour.EndDiscMST;
                freeTextInvoiceTmp.SumMarkup_AE = _custInvoiceJour.SumMarkupMST;
                freeTextInvoiceTmp.InvoiceRoundOff_AE = _custInvoiceJour.InvoiceRoundOffMST;
                freeTextInvoiceTmp.LineAmount = -_taxSpec.taxBaseAmount();
                freeTextInvoiceTmp.CurrencyCode = Ledger::accountingCurrency(this.parmCompanyInfo().RecId);
                freeTextInvoiceTmp.Qty = -_taxSpec.taxBaseQty();
                freeTextInvoiceTmp.IsVATLine_AE = NoYes::Yes;

                // if transactional currency is different from reporting currency, calculate exchange rate conversion
                if (_taxSpec.currencyCode() != freeTextInvoiceTmp.CustInvoiceJourCurrencyCode)
                {
                    freeTextInvoiceTmp.ShowReportingCurTotals_AE = NoYes::Yes;
                }
                this.parmFreeTextInvoiceTmp_AE(freeTextInvoiceTmp);
            }
            else
            {
                freeTextInvoiceTmp.VATAmount_AE = _custInvoiceTrans.TaxAmount ? _custInvoiceTrans.TaxAmount :
                    Tax::calcTaxAmount(_custInvoiceTrans.TaxGroup,
                        _custInvoiceTrans.TaxItemGroup,
                        _custInvoiceJour.InvoiceDate,
                        (_custInvoiceTrans.CurrencyCode ? _custInvoiceTrans.CurrencyCode : _custInvoiceJour.CurrencyCode),
                        _custInvoiceTrans.LineAmount,
                        TaxModuleType::FreeTxtInvoice);
            }
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoIT])
            && _taxSpec
            && !_taxSpec.taxCode())
        {
            TaxCode reportingTaxCode = _taxSpec.reportingTaxCode();

            freeTextInvoiceTmp.TaxCode = reportingTaxCode;

            if (freeTextInvoiceTmp.TaxExemptDescription == '')
            {
                freeTextInvoiceTmp.TaxExemptDescription = LanguageTxt::find(
                    tableNum(TaxTable),
                    TaxTable::find(reportingTaxCode).RecId,
                    _taxSpec.parmLanguageId()).Txt;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreeTextInvoiceTmp_AE</Name>
				<Source><![CDATA[
    public FreeTextInvoiceTmp parmFreeTextInvoiceTmp_AE(FreeTextInvoiceTmp _freeTextInvoiceTmp = freeTextInvoiceTmp)
    {
        freeTextInvoiceTmp = _freeTextInvoiceTmp;
        return freeTextInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrepaidAmountsProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the prepayment amounts.
    /// </summary>
    /// <param name = "_custInvoiceJour">Invoice journal to set prepaid amounts.</param>
    protected void setPrepaidAmountsProforma(CustInvoiceJour _custInvoiceJour)
    {
        next setPrepaidAmountsProforma(_custInvoiceJour);

        // When printing a proforma Free Text Invoice ID, the custInvoiceJour.InvoiceId is a concatenation of # and the custInvoiceJour.RecId
        // see FreeTextInvoiceController.invoiceId2RecID()
        CustInvoiceTable custInvoiceTableLoc;
        custInvoiceTableLoc.RecId = str2int64(subStr(
            _custInvoiceJour.InvoiceId,
            2,
            strLen(_custInvoiceJour.InvoiceId)));

        prepaymentCustTransProforma = this.getPrepaymentCustTransProforma(custInvoiceTableLoc);

        if (prepaymentCustTransProforma.AmountCur)
        {
            cachedPrepaidAmount = abs(prepaymentCustTransProforma.AmountCur);
            cachedPrepaidAmountEuro = custInvoiceJour.amountMST2Euro(abs(prepaymentCustTransProforma.AmountMST));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFreeTextInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    protected void populateFreeTextInvoiceLocalizationTmp(
        CustInvoiceJour _custInvoiceJour,
        CustInvoiceTrans _custInvoiceTrans,
        TaxSpec _taxSpec,
        CustPaymSchedLine _custPaymSchedLine,
        CustTrans _prepaymentCustTrans,
        TaxTrans _prepaymentTaxTrans)
    {
        next populateFreeTextInvoiceLocalizationTmp(
            _custInvoiceJour,
            _custInvoiceTrans,
            _taxSpec,
            _custPaymSchedLine,
            _prepaymentCustTrans,
            _prepaymentTaxTrans);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL])
            && _taxSpec
            && !_taxSpec.taxCode())
        {
            TaxCode reportingTaxCode = _taxSpec.reportingTaxCode();

            freeTextInvoiceLocalizationTmp.TaxCode = reportingTaxCode;
            freeTextInvoiceLocalizationTmp.TaxDirective = LanguageTxt::find(
                tableNum(TaxTable),
                TaxTable::find(reportingTaxCode).RecId,
                _taxSpec.parmLanguageId()).Txt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxSpec</Name>
				<Source><![CDATA[
    public TaxSpec createTaxSpec(CustInvoiceJour _custInvoiceJour)
    {
        TaxSpec taxSpec = next createTaxSpec(_custInvoiceJour);

        if (isoCountryCode == #isoEE)
        {
            TaxProformaSpec taxProformaSpec = taxSpec as TaxProformaSpec;
            if (taxProformaSpec)
            {
                taxProformaSpec.forceTaxRateAsWriteSelection();
            }
            else
            {
                TaxInvoiceSpec taxInvoiceSpec = taxSpec as TaxInvoiceSpec;
                if (taxInvoiceSpec)
                {
                    taxInvoiceSpec.forceTaxRateAsWriteSelection();
                }
            }
        }

        return taxSpec;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>