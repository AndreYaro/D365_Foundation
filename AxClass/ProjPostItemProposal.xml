<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostItemProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostItemProposal extends ProjPost
{
    ProjInvoiceItem     newProjInvoiceItem;
    ProjProposalItem    projProposalItem;
    ProjTransIdBase     newProjTransId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreditNoteSalesAccrued</Name>
				<Source><![CDATA[
        public boolean checkCreditNoteSalesAccrued()
    {
        ProjActivateTrans transTurnover = false;

        if (projTrans.transStatus() == ProjTransStatus::CreditnoteProposal)
        {
            transTurnover = ProjRevRecHelper::postWIPItemForProject(ProjTable::find(projTrans.projId()));
        }

        return transTurnover;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterSalesAccrued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the accrued sales amount has been entered and is expected to be posted.
    /// </summary>
    /// <returns>
    /// true if the accrued sales amount is non-zero value and the <c>parmEnterSalesAccrued</c> method
    /// returns true; otherwise, false.
    /// </returns>
    protected boolean checkEnterSalesAccrued()
    {
        boolean ret = false;

        if (this.checkCreditNoteSalesAccrued())
        {
            this.parmEnterSalesAccrued(true);
            this.parmUpdateTrans(true);
            ret = super();
        }
        else
        {
            ret = this.parmEnterSalesAccrued()  &&
                projTrans.canBeAccrued() &&
                this.ledgerSalesAmount();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjItemTrans</Name>
				<Source><![CDATA[
public ProjItemTrans createProjItemTrans(ProjInvoiceItem _projInvoiceItem)
    {
        ProjItemTrans       projItemTrans;

        if (projProposalItem.ItemType   == ProjItemType::SalesOrder)
        {
            projItemTrans.clear();

            projItemTrans  = ProjItemTrans::initTransFromInvoiceItem(_projInvoiceItem);

            if (ProjItemTrans::existProjTransId(projTrans.transId()) || ProjTable::find(_projInvoiceItem.ProjId).UseBudgeting)
            {
                projItemTrans.ProjTransId       = ProjParameters::newTransId();
                newProjTransId                  = projItemTrans.ProjTransId;
            }
            else
            {
                projItemTrans.ProjTransId       = projProposalItem.ProjTransId;
            }

            projItemTrans.ProjTransIdRef        = projTrans.transId();

            projItemTrans.ProjAdjustRefId       = this.parmAdjustRefId();
            projItemTrans.VoucherPackingSlip    = ledgerVoucher.lastVoucher();

            if (! projItemTrans.validateWrite())
            {
                throw error("@SYS21628");
            }

            projItemTrans.insert();

            // <GTE> <GIN> 
            if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled() || TaxParameters::checkTaxParameters_IN())
            {
                TransTaxInformationHelper::copyTransTaxInformation(_projInvoiceItem.salesLine(), projItemTrans);
            }
            // </GTE> </GIN> 

            this.parmTransIdCost(projItemTrans.ProjTransId);
            this.parmTransIdSales(projItemTrans.ProjTransId);

            if (ProjPost::checkCreateProjCost(projItemTrans.ItemId,projItemTrans.ProjId))
            {
                this.updateProjItemTransCost(projItemTrans, ledgerVoucher.lastVoucher());
            }
        }

        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountTurnoverLedgerDimension</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount creditAccountTurnoverLedgerDimension(ProjFundingSourceRefId _fundingSourceId)
    {
        return projTrans.revenueAccountLedgerDimension(_fundingSourceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales account to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    /// <remarks>
    /// If this transaction is a reversing entry, the value will be the negative value of the value that is
    /// returned by the <c>salesAmountMST</c> method; otherwise, the value will be the revenue amount of
    /// the transaction.
    /// </remarks>
    public AmountCur ledgerSalesAmount()
    {
        AmountCur   amountCur = super();

        if (this.checkCreditNoteSalesAccrued())
        {
            amountCur   = -amountCur;
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjPostItemProposal</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        projProposalItem    = _buffer;
        projTrans           = ProjTrans::newProjProposalItem(projProposalItem);
        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTrans</Name>
				<Source><![CDATA[
        public Common newTrans()
    {
        return newProjInvoiceItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransStatus</Name>
				<Source><![CDATA[
        public ProjTransStatus parmTransStatus(ProjTransStatus  _transStatus = 0)
    {
        return projTrans.transStatus() == ProjTransStatus::CreditnoteProposal ? ProjTransStatus::Posted : ProjTransStatus::Invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows for extensibility in creating a transaction posting. The method contains no code.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method is true.
    /// </remarks>
    public void projTransCreate()
    {
        // <GBR>
        ProjInvoiceTransTaxWithholdGroups_BR projInvoiceTransTaxWithholdGroups_BR;
        // </GBR>

        ProjProposalItem    projProposalItemLocal;
        ProjItemTrans       projItemTrans;
        SalesLine           salesLineLocal;
        // <GIN>
        TaxParameters       taxParameters = TaxParameters::find();
        // </GIN>
        ;

        newProjInvoiceItem.clear();

        newProjInvoiceItem = ProjInvoiceItem::initInvoiceFromProposale(projProposalItem);

        newProjInvoiceItem.ProjInvoiceId = projProposalItem.projProposalJour().ProjInvoiceId;
        newProjInvoiceItem.InvoiceDate   = projProposalItem.projProposalJour().InvoiceDate;

        if (!newProjInvoiceItem.validateWrite())
        {
            // Update has been aborted due to an error.
            throw error("@SYS21628");
        }

        projItemTrans = this.createProjItemTrans(newProjInvoiceItem);

        if (projProposalItem.ItemType == ProjItemType::SalesOrder)
        {
            projProposalItemLocal               = ProjProposalItem::findInvent(projProposalItem.InventTransId, projProposalItem.ProposalId,true);
            projProposalItemLocal.ProjTransId   = this.parmTransIdSales();
            projProposalItemLocal.update();

            if (projProposalItemLocal.salesLine().isPackingSlipOrInvoiceUpdated())
            {
                projTrans = ProjTrans::newProjProposalItem(projProposalItem);
                ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Release);
                ProjFundingLimitTrackingManager::updateUsingProjTrans(projTrans, ProjFundingLimitTrackingAction::Commit);
            }
        }
        else if (projProposalItem.ItemType == ProjItemType::PurchOrder)
        {
            // The flight would skip updating TotalSalesAmountCur here, it's already handled in ProjItemTransSale/update()
            if (!ProjInvoiceDoubleTotalSalesAmountFixFlight::instance().isEnabled())
            {
                // Update projItemTrans when proposal item is of type purchase order
                projItemTrans = ProjItemTrans::find(projTrans.transId(),true);
                if (projItemTrans && !projItemTrans.TotalSalesAmountCur)
                {
                    projItemTrans.TotalSalesAmountCur = projProposalItem.lineAmt();
                    projItemTrans.update();
                }
            }
        }

        if (projProposalItem.ItemType == ProjItemType::SalesOrder || projProposalItem.ItemType == ProjItemType::Project)
        {
            salesLineLocal = projProposalItem.salesLine();
            if (salesLineLocal.isCategoryBased())
            {
                newProjInvoiceItem.initFromSalesLineForeignTradeCategory(SalesLineForeignTradeCategory::findSalesLine(salesLineLocal));
            }
        }

        newProjInvoiceItem.ProjTransId = this.parmTransIdSales();

        newProjInvoiceItem.insert();

        newProjInvoiceItem.createAgreementLinks();

        Docu::copy(projProposalItem, newProjInvoiceItem);

        // Update contract line units or percent(IsInvoice).
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && ProjInvoiceTable::find(PSAContractLineItems::find(newProjInvoiceItem.psaContractLineNum).ProjInvoiceProjId).psaContractLines == NoYes::Yes)
        {
            PSAContractLineItemsServer::updateUnitsOrPercentInvoice(newProjInvoiceItem.psaContractLineNum, NoYes::Yes);
        }

        // <GIN>
        if (taxParameters.EximIncentiveSchemes_IN && taxParameters.Customs_IN)
        {
            EximProjItemTrans_IN::insertEximProjItemTrans(ProjItemTrans::find(projProposalItem.ProjTransId));
        }
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            projInvoiceTransTaxWithholdGroups_BR.ProjInvoiceJour = newProjInvoiceItem.projInvoiceJour().RecId;
            projInvoiceTransTaxWithholdGroups_BR.LineAmountCur = projProposalItem.lineAmt();

            if (salesLineLocal.RecId)
            {
                projInvoiceTransTaxWithholdGroups_BR.TaxWithholdItemGroupHeading_TH = salesLineLocal.TaxWithholdItemGroupHeading_TH;
            }
            else
            {
                projInvoiceTransTaxWithholdGroups_BR.TaxWithholdItemGroupHeading_TH = ProjCategory::find(newProjInvoiceItem.CategoryId).TaxWithholdItemGroupHeading_TH;
            }

            projInvoiceTransTaxWithholdGroups_BR.insert();
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRefTransId</Name>
				<Source><![CDATA[
    protected ProjTransIdBase getRefTransId()
    {
        return projProposalItem.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        ProjItemTrans   projItemTrans = ProjItemTrans::find(newProjTransId ? newProjTransId : projTrans.transId(),true);

        if (this.parmTransactionOrigin() == ProjOrigin::SalesOrder)
        {
            ProjItemTrans::splitNeverLedger(projTrans.inventTransId(), projTrans.projAdjustRefId());
            
            // item trans we picked are now updated from calling splitNeverLedger, update buffer with data from server
            projItemTrans.reread();

            projItemTrans.VendInvoiceTransRecId = this.getVendInvoiceTrans(projItemTrans).RecId;
            
            if (FeatureStateProvider::isFeatureEnabled(ProjProjectTransactionsListPageVendFeature::instance()))
            {
                ProjVendInvoiceVendorInfo vendorInfo = ProjVendInvoiceVendorInfo::newFromVendorInvoiceTransRecId(projItemTrans.VendInvoiceTransRecId);

                projItemTrans.VendorAccount = vendorInfo.getVendorAccount();
                projItemTrans.VendorName = vendorInfo.getVendorName();
            }
        }

        projItemTrans.Txt = projTrans.txt();

        projItemTrans.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>