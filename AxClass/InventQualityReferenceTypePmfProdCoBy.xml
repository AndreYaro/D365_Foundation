<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityReferenceTypePmfProdCoBy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityReferenceTypePmfProdCoBy</c> class typifies a production co/by reference document.
/// </summary>
[InventQualityReferenceTableName(tableStr(PmfProdCoBy))]
[InventNonConformanceTypeFactoryAttribute(InventNonConformanceType::PmfProdCoBy)]
[InventTransTypeFactoryAttribute(InventTransType::PmfProdCoBy)]
[InventTestReferenceTypeFactoryAttribute(InventTestReferenceType::PmfProdCoBy)]
class InventQualityReferenceTypePmfProdCoBy extends InventQualityReferenceType
{
    PmfProdCoBy pmfProdCoBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventNonConformanceTable</Name>
				<Source><![CDATA[
    protected void initFromInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        this.parmBuffer(pmfProdCoBy::findTransId(_inventNonConformanceTable.InventTransIdRef));
        super(_inventNonConformanceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    protected void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        this.parmBuffer(InventTransOriginPmfProdCoBy::prodCoBy(_inventTransOrigin.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(PmfProdCoBy::findTransId(_orderTable.InventRefTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    public InventDirection inventDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    public InventRefId inventRefId()
    {
        return pmfProdCoBy.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId inventSiteId()
    {
        return pmfProdCoBy.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return pmfProdCoBy.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = pmfProdCoBy)
    {
        pmfProdCoBy        = _buffer;

        defaultDimension  = pmfProdCoBy.DefaultDimension ? pmfProdCoBy.DefaultDimension : defaultDimension;
        inventDimId       = pmfProdCoBy.InventDimId      ? pmfProdCoBy.InventDimId      : inventDimId;
        itemId            = pmfProdCoBy.ItemId           ? pmfProdCoBy.ItemId           : itemId;

        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    public InventTestReferenceType referenceType()
    {
        return InventTestReferenceType::PmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    protected void setStatusReceiptRangeValue(
        QueryBuildRange             _qbrStatusReceipt,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (    _inventTestDocumentStatus   == InventTestDocumentStatus::ReportFinished
            &&  _inventTestExecution        == InventTestExecution::After)
        {
            _qbrStatusReceipt.value(queryValue(StatusReceipt::Received));
        }
        else
        {
            _qbrStatusReceipt.value(SysQuery::range(StatusReceipt::Registered, StatusReceipt::Ordered));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityReferenceTypePmfProdCoBy construct()
    {
        return new InventQualityReferenceTypePmfProdCoBy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryInventTransOrdering</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordering of transactions for the <c>InventTrans</c> table data source, depending on the
    /// document status and test execution values.
    /// </summary>
    /// <param name="_qbdsInventTrans">
    /// A query build data source object that is related to the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    /// A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    /// A test execution value.
    /// </param>
    protected void setQueryInventTransOrdering(
        QueryBuildDataSource        _qbdsInventTrans,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (    _inventTestDocumentStatus   == InventTestDocumentStatus::ReportFinished
            &&  _inventTestExecution        == InventTestExecution::After)
        { // first take those most recently reported as finished
            this.setQueryInventTransOrderingPhysicalVouch(_qbdsInventTrans);
        }
        super(_qbdsInventTrans, _inventTestDocumentStatus, _inventTestExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTrans</Name>
				<Source><![CDATA[
    public Query queryInventTrans(InventTestDocumentStatus _inventTestDocumentStatus, InventTestExecution _inventTestExecution, InventTestDiscriminatingInventDims _discriminatingInventoryDimensions)
    {
        Query query = super(_inventTestDocumentStatus, _inventTestExecution, _discriminatingInventoryDimensions);
    
        if (_inventTestDocumentStatus == InventTestDocumentStatus::ReportFinished)
        {
            QueryBuildDataSource qbdsInventTrans = query.dataSourceTable(tableNum(InventTrans));
            qbdsInventTrans.addRange(fieldnum(InventTrans, TransChildType)).value(queryValue(InventTransChildType::ProdJournalProd));
        }
    
        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>