<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLExcelReport_Standard_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class implements logic for creating of "standard" report, that is the report which consists of following sections:
/// ReportHeader, PageHeader, Body, PageFooter, ReportFooter
/// </summary>
abstract class XMLExcelReport_Standard_RU extends XMLExcelReport_RU
{
    TmpSalesPurchReportLine_RU      line;
    TmpSalesPurchReportTable_RU     header;

    RNumDateInWordConverter converter;

    QueryRun                queryRunHeader,
                            queryRunLines;

    int                     lineNo;  //line number of body

    str                     reportHeaderName,
                            pageHeaderName,
                            bodyName,
                            pageFooterName,
                            reportFooterName;

    int                     numOfLines,  //total lines in report body
                            pageLines,   //no of lines on current page
                            pageNum,
                            reportNum;

    container               skipSections;

    str                     documentName,
                            documentNumber;

    #define.reportHeader('REPORTHEADER')
    #define.pageHeader('PAGEHEADER')
    #define.body('BODY')
    #define.pageFooter('PAGEFOOTER')
    #define.reportFooter('REPORTFOOTER')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to add values to totals which will be printed at report footer
    /// </summary>
    abstract protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to add values to totals which will be printed at page footer
    /// </summary>
    abstract protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to reset totals which will be printed at the footer of report
    /// </summary>
    abstract protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears page totals
    /// </summary>
    abstract protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStandardReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method executes general algorithm of printing standard report
    /// </summary>
    protected void createStandardReport()
    {
        this.initSectionNames();
        this.initSkipSections();
        this.initSectionMap();

        this.setCurrentWorksheetNum(curWorksheetNum, widthCols);

        reportNum    = 0;

        this.initQueryRunHeader();

        while (this.fetchHeader())
        {
            if (reportNum)
            {
                this.completeDocument();
                this.makeDocument();
            }

            this.resetReport();

            reportNum++;

            this.execute(reportHeaderName);

            this.execute(pageHeaderName);

            this.initQueryRunLines();

            while (this.fetchLines())
            {
                lineNo++;

                if (this.mustCreateNewPage())
                {
                    this.execute(pageFooterName);
                    document.insertPageBreak(currentRow, curWorksheetNum);
                    this.clearTotalsOnPage();

                    pageNum++;
                    currentHeight = 0;
                    this.execute(pageHeaderName);
                }

                this.execute(bodyName);

                this.addTotals();
                this.addTotalsOnPage();

                pageLines++;
            }

            this.execute(pageFooterName);

            this.execute(reportFooterName);

            this.clearTotals();

            this.setPrintArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method fetches a new record from table which corresponds to a whole report
    /// </summary>
    /// <returns>
    /// Whether a new report header record was fetched
    /// </returns>
    protected boolean fetchHeader()
    {
        if (queryRunHeader.next())
        {
            header = queryRunHeader.get(tableNum(TmpSalesPurchReportTable_RU));
            
            converter       = RNumDateInWordConverter::construct(header.LanguageId);
            numOfLines      = header.LineNum;
            documentName    = header.DocumentName;
            documentNumber  = header.InvoiceId ? header.InvoiceId : header.SalesPurchId;

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method fetches a new report line
    /// </summary>
    /// <returns>
    /// Whether record was fetched
    /// </returns>
    protected boolean fetchLines()
    {
        if (queryRunLines.next())
        {
            line = queryRunLines.get(tableNum(TmpSalesPurchReportLine_RU));

            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to fill body section with data
    /// </summary>
    abstract protected void fillBody()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method decides which section is should be filled and calls corresponding method
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section
    /// </param>
    protected void fillData(MSOfficeBookmark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeaderName:
                this.fillReportHeader();
                break;
            case pageHeaderName:
                this.fillPageHeader();
                break;
            case bodyName:
                this.fillBody();
                break;
            case pageFooterName:
                this.fillPageFooter();
                break;
            case reportFooterName:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to fill page footer section with data
    /// </summary>
    abstract protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to fill page header section with data
    /// </summary>
    abstract protected void fillPageHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to fill report footer section with data
    /// </summary>
    abstract protected void fillReportFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method should be used to fill report header section
    /// </summary>
    abstract protected void fillReportHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initialized queryRun on header
    /// </summary>
    protected void initQueryRunHeader()
    {
        Query query = new Query();

        query.addDataSource(tableNum(TmpSalesPurchReportTable_RU));

        queryRunHeader = new QueryRun(query);
        queryRunHeader.setCursor(header);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes queryRun which corresponds to lines of report
    /// </summary>
    protected void initQueryRunLines()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tableNum(TmpSalesPurchReportLine_RU));
        qbds.addRange(fieldNum(TmpSalesPurchReportLine_RU, InternalId)).value(queryValue(header.InternalId));
        qbds.addSortField(fieldNum(TmpSalesPurchReportLine_RU, LineNum));

        queryRunLines = new QueryRun(query);
        queryRunLines.setCursor(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes map which holds section data
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(reportHeaderName);
        this.addSection(pageHeaderName);
        this.addSection(bodyName, true);
        this.addSection(pageFooterName);
        this.addSection(reportFooterName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes section name variables with values, can be overridden
    /// </summary>
    protected void initSectionNames()
    {
        reportHeaderName = #reportHeader;
        pageHeaderName   = #pageHeader;
        bodyName         = #body;
        pageFooterName   = #pageFooter;
        reportFooterName = #reportFooter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipSections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method can be used to add section to a container, which hold data about section which should not be printed
    /// </summary>
    protected void initSkipSections()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(bodyName);

        requiredHeight += conPeek(mapSections.lookup(pageFooterName), #posSectionHeight);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(reportFooterName), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustPrintSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a section should be printed in current report
    /// </summary>
    /// <param name="_bookmark">
    /// Name of the section
    /// </param>
    /// <returns>
    /// Whether a section should be printed in current report
    /// </returns>
    protected boolean mustPrintSection(MSOfficeBookMark_RU _bookmark)
    {
        return !conFind(skipSections, _bookmark);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameters for report to be printed
    /// </summary>
    /// <param name="_header">
    /// Temporary table which holds report header data
    /// </param>
    /// <param name="_line">
    /// Temporary table which holds report line data
    /// </param>
    public void parmData(TmpSalesPurchReportTable_RU    _header,
                         TmpSalesPurchReportLine_RU     _line)
    {
        header = _header;
        line   = _line;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method resets all report variables to initial values
    /// </summary>
    protected void resetReport()
    {
        currentHeight   = 0;
        pageNum         = 0;
        lineNo          = 0;
        pageLines       = 0;
        pageNum         = 1;
        currentRow      = 0;
        rangeHeightRow  = 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>