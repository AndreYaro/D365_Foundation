<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkBlocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is responsible for handling blocking and unblocking of a work.
/// </summary>
public final class WHSWorkBlocking
{
    private WHSWorkTable                workTable;
    private boolean                     skipInProgressWorkLineWithNoPreviousPutCheck;
    private boolean                     skipDemandWaveUsingReplenInProgressCheck;
    private boolean                     forcePessimisticLocking;
    private boolean                     allowManualUnBlock;
    private WHSInstrumentationLogger    logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        logger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkBlocking));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name = "_workId">The Id of the work.</param>
    /// <returns>A new instance of the class.</returns>
    public static WHSWorkBlocking newFromWorkId(WHSWorkId _workId)
    {
        return WHSWorkBlocking::newFromWorkTable(WHSWorkTable::find(_workId, true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAllowManualUnBlockFromWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkBlocking newAllowManualUnBlockFromWorkId(WHSWorkId _workId)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkId(_workId);
        workBlocking.allowManualUnBlock = true;
        return workBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTable</Name>
				<Source><![CDATA[
    private static WHSWorkBlocking newFromWorkTable(WHSWorkTable _workTable)
    {
        WHSWorkBlocking workBlocking = new WHSWorkBlocking();
        workBlocking.workTable = _workTable;
        return workBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTableParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class and sets the fields from the passed parameters.
    /// </summary>
    /// <param name = "_workId">The Id of the work.</param>
    /// <param name = "_skipInProgressWorkLineWithNoPreviousPutCheck">A boolean which determines if we should skip checking whether the first work line is InProcess with no previous put.</param>
    /// <param name = "_skipDemandWaveUsingReplenInProgressCheck">A boolean which determines if we should skip checking whether the demand wave of a replenishment work is still executing.</param>
    /// <returns>A new instance of the class with the passed parameters.</returns>
    [Hookable(false)]
    internal static WHSWorkBlocking newFromWorkTableParameters(
        WHSWorkId _workId,
        boolean _skipInProgressWorkLineWithNoPreviousPutCheck,
        boolean _skipDemandWaveUsingReplenInProgressCheck)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkId(_workId);
        
        workBlocking.skipInProgressWorkLineWithNoPreviousPutCheck   = _skipInProgressWorkLineWithNoPreviousPutCheck;
        workBlocking.skipDemandWaveUsingReplenInProgressCheck       = _skipDemandWaveUsingReplenInProgressCheck;

        return workBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class that will skip checking whether the first work line is InProcess with no previous put when trying to block or unblock the work.
    /// </summary>
    /// <param name = "_workId">The Id of the work.</param>
    /// <returns>A new instance of the class.</returns>
    public static WHSWorkBlocking newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(WHSWorkId _workId)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkTableParameters(_workId, true, false);
        
        return workBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkIdSkipDemandWaveUsingReplenInProgressCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class that will skip checking whether the demand wave of a replenishment work is still executing when trying to unblock the work.
    /// </summary>
    /// <param name = "_workId">The Id of the work.</param>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSWorkBlocking newFromWorkIdSkipDemandWaveUsingReplenInProgressCheck(WHSWorkId _workId)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkTableParameters(_workId, false, true);
        
        return workBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkIdSkipInProgressWorkLineAndDemandWaveCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class that will skip checking whether the first work line is InProcess with no previous put
    /// and will skip checking whether the demand wave of a replenishment work is still executing when trying to unblock the work.
    /// </summary>
    /// <param name = "_workId">The Id of the work.</param>
    /// <returns>A new instance of the class.</returns>
    [Hookable(false)]
    internal static WHSWorkBlocking newFromWorkIdSkipInProgressWorkLineAndDemandWaveCheck(WHSWorkId _workId)
    {
        WHSWorkBlocking workBlocking = WHSWorkBlocking::newFromWorkTableParameters(_workId, true, true);
        
        return workBlocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWorkWithReasonType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Blocks the work with a reason if possible.
    /// </summary>
    /// <param name = "_reasonType">The reason type.</param>
    /// <returns>true if the blocking of the was successful; otherwise, false.</returns>
    public WHSWorkBlockingValidationResult tryBlockWorkWithReasonType(WHSWorkBlockingReasonType _reasonType)
    {   
        using (var activityContext = logger.workBlocking().tryBlockWork())
        {
            logger.logRecordInformation(workTable);

            ttsbegin;

            // In order to assure the correct Frozen status of a work, we allow a single thread to try to block/unblock a work at the same time.
            this.acquireWorkTableLock();

            WHSWorkBlockingReason blockingReason = this.blockingReason(_reasonType);

            WHSWorkBlockingValidationResult result = this.tryBlockWorkWithReason(blockingReason);

            ttscommit;

            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnBlockWorkWithReasonType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unblocks a reason and the work if it is possible.
    /// </summary>
    /// <param name = "_reasonType">The reason type.</param>
    /// <returns>The result of the unblocking.</returns>
    public WHSWorkUnBlockingValidationResult tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType _reasonType)
    {
        using (var activityContext = logger.workBlocking().tryUnblockWork())
        {
            logger.logRecordInformation(workTable);

            ttsbegin;

            // In order to assure the correct Frozen status of a work, we allow a single thread to try to block/unblock a work at the same time.
            this.acquireWorkTableLock();

            WHSWorkBlockingReason blockingReason = this.blockingReason(_reasonType);

            WHSWorkUnBlockingValidationResult result = this.tryUnBlockWorkWithReason(blockingReason);

            ttscommit;

            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnblockReasonTypeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Attempts unblocking of a list of reason types.
    /// </summary>
    /// <param name = "_reasonTypeList">The list of <c>WHSWorkBlockingReasonType</c>.</param>
    /// <returns>A <c>WHSWorkUnBlockingValidationResult</c> representing if the full list can be unblocked or the first error.</returns>
    [Hookable(false)]
    internal WHSWorkUnBlockingValidationResult tryUnblockReasonTypeList(List _reasonTypeList)
    {
        using (var activityContext = logger.workBlocking().tryUnBlockWorkReasonList(allowManualUnBlock))
        {
            logger.logRecordInformation(workTable);

            this.validateReasontypeListNotEmpty(_reasonTypeList);

            this.acquireWorkTableLock();

            ListEnumerator listEnumerator = _reasonTypeList.getEnumerator();
 
            while (listEnumerator.moveNext())
            {
                WHSWorkBlockingReasonType reasontype = listEnumerator.current();
                WHSWorkBlockingReason blockingReason = this.blockingReason(reasonType);

                WHSWorkUnBlockingValidationResult result = blockingReason.tryUnBlockReason();

                if (!result.parmCanUnBlockResult())
                {
                    return result;
                }
            }

            return this.tryUnBlockWork();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReasontypeListNotEmpty</Name>
				<Source><![CDATA[
    private void validateReasontypeListNotEmpty(List _reasonTypeList)
    {
        if (_reasonTypeList.empty())
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnBlockReasonType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether it is possible to unblock the passed reason type.
    /// </summary>
    /// <param name = "_blockingReasonType">The reason type.</param>
    /// <returns>The result whether it is possible to unblock the passed reason type</returns>
    public WHSWorkUnBlockingValidationResult canUnBlockReasonType(WHSWorkBlockingReasonType _blockingReasonType)
    {
        WHSWorkBlockingReason blockingReason = this.blockingReason(_blockingReasonType);

        return blockingReason.canUnBlockReason();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockedByOneOfReasonTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a work is blocked by at least one of the reasons that are passed in the set.
    /// </summary>
    /// <param name = "_setWithBlockingReasons">A set containing the reason types.</param>
    /// <returns>true, if the work is blocked by at least one of the passed reason types; otherwise, false.</returns>
    public boolean isBlockedByOneOfReasonTypes(Set _setWithBlockingReasons)
    {
        SetEnumerator se = _setWithBlockingReasons.getEnumerator();
        boolean isBlockedByOneOfTheReasons;

        while (se.moveNext())
        {
            if (this.blockingReason(se.current()).isBlocked())
            {
                isBlockedByOneOfTheReasons = true;
                break;
            }
        }

        return isBlockedByOneOfTheReasons; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBlockedByReasonType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a work is blocked by the passed reason type.
    /// </summary>
    /// <param name = "_blockingReasonType">The reason type.</param>
    /// <returns>True, if the work is blocked by the passed reason type; otherwise, false.</returns>
    public boolean isBlockedByReasonType(WHSWorkBlockingReasonType _blockingReasonType)
    {
        return this.blockingReason(_blockingReasonType).isBlocked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWorkWithReason</Name>
				<Source><![CDATA[
    private WHSWorkBlockingValidationResult tryBlockWorkWithReason(WHSWorkBlockingReason _blockingReason)
    {
        WHSWorkBlockingValidationResult blockingWorkResult;
        ttsbegin;

        _blockingReason.blockReason();

        blockingWorkResult = this.tryBlockWork();
            
        if (!blockingWorkResult.parmCanBlockResult())
        {
            throw error(blockingWorkResult.errorMessage());
        }

        ttscommit;
        
        return blockingWorkResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryBlockWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Blocks the work if it is possible.
    /// </summary>
    /// <returns>The result of the blocking.</returns>    
    private WHSWorkBlockingValidationResult tryBlockWork()
    {
        //Work is already frozen - which could happen if it is blocked by multiple reasons so there is no reason to check if it cannot be blocked
        if (workTable.Frozen)
        {   
            return WHSWorkBlockingValidationResult::newSuccess();
        }
        
        WHSWorkBlockingValidationResult result = this.validateBlocking();

        if (result.parmCanBlockResult())
        {
            this.blockWork();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnBlocking</Name>
				<Source><![CDATA[
    private void validateUnBlocking()
    {
        if (!skipInProgressWorkLineWithNoPreviousPutCheck)
        {
            this.validateWorkStatusAllowUnBlocking();
        }

        if (!skipDemandWaveUsingReplenInProgressCheck)
        {
            this.validateDemandWaveAllowUnblockingWork();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDemandWaveAllowUnblockingWork</Name>
				<Source><![CDATA[
    private void validateDemandWaveAllowUnblockingWork()
    {
        WHSWaveId waveId = workTable.replenForUnfinishedDemandWave();

        if (waveId)
        {
            throw error(strFmt("@WAX:ValidationErrorUnblockReplenWork", workTable.WorkId, waveId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkStatusAllowUnBlocking</Name>
				<Source><![CDATA[
    private void validateWorkStatusAllowUnBlocking()
    {
        if (this.isWorkInProcessWithNoPreviousPutBeforeFirstOpenOrInProcessLine())
        {
            throw error(strFmt("@WAX:WHSWorkUnBlockInProcessErrorMessage", workTable.workId));   
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkInProcessWithNoPreviousPutBeforeFirstOpenOrInProcessLine</Name>
				<Source><![CDATA[
    private boolean isWorkInProcessWithNoPreviousPutBeforeFirstOpenOrInProcessLine()
    {
        if (workTable.WorkStatus != WHSWorkStatus::Open)
        {
            WHSWorkLine workLine = this.getFirstOpenOrInProcessWorkLine();

            if (!WHSWorkLine::isPutBefore(workLine.WorkId, workLine.LineNum))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesWorkStatusAllowBlocking</Name>
				<Source><![CDATA[
    private WHSWorkBlockingValidationResult doesWorkStatusAllowBlocking()
    {
        if (this.isWorkInProcessWithNoPreviousPutBeforeFirstOpenOrInProcessLine())
        {
            return WHSWorkBlockingValidationResult::newFailureWithMessage(strFmt("@WAX:WHSWorkBlockInProcessErrorMessage", workTable.workId));
        }
       
        return WHSWorkBlockingValidationResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstOpenOrInProcessWorkLine</Name>
				<Source><![CDATA[
    private WHSWorkLine getFirstOpenOrInProcessWorkLine()
    {
        WHSWorkLine workLine;

        select firstonly WorkId, LineNum from workLine
            order by LineNum
            where workLine.WorkId   == workTable.workId
                && workLine.Skipped == NoYes::No
                && (workLine.WorkStatus == WHSWorkStatus::Open
                    || workLine.WorkStatus == WHSWorkStatus::InProcess
                    || workLine.WorkStatus == WHSWorkStatus::PendingReview);

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBlocking</Name>
				<Source><![CDATA[
    private WHSWorkBlockingValidationResult validateBlocking()
    {
        WHSWorkBlockingValidationResult result = WHSWorkBlockingValidationResult::newSuccess();

        if (!skipInProgressWorkLineWithNoPreviousPutCheck)
        {
            result = this.doesWorkStatusAllowBlocking();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConfiguredToUsePessimisticLocking</Name>
				<Source><![CDATA[
    private boolean isConfiguredToUsePessimisticLocking()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePessimisticLock</Name>
				<Source><![CDATA[
    private boolean usePessimisticLock()
    {
        return forcePessimisticLocking
            || this.isConfiguredToUsePessimisticLocking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquireWorkTableLock</Name>
				<Source><![CDATA[
    private void acquireWorkTableLock()
    {
        if (this.usePessimisticLock())
        {
            // In order to assure the correct Frozen status of a work, we allow a single thread to try to block/unblock a work at the same time.
            // We are reselecting the worktable to be sure we have the latest version of the work.
            // When having a concurrent unblocking and blocking, if the unblocking executes first and the work table is not reselected,
            // the blocking thread can see the old Frozen value and it will just insert the new reason, 
            // ending in a situation where there is a reason and the work is not Frozen.

            using (var activityContext = logger.workBlocking().acquireLock())
            {
                logger.logRecordInformation(workTable);
                
                this.acquirePessimisticLockOnWorkTableRecordEnsureReadFromDB();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>acquirePessimisticLockOnWorkTableRecordEnsureReadFromDB</Name>
				<Source><![CDATA[
    private void acquirePessimisticLockOnWorkTableRecordEnsureReadFromDB()
    {
        var workId = workTable.WorkId;

        workTable.disableCache(true);

        select firstonly pessimisticLock workTable
            where workTable.workId == workId;

        workTable.disableCache(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnBlockWorkWithReason</Name>
				<Source><![CDATA[
    private WHSWorkUnBlockingValidationResult tryUnBlockWorkWithReason(WHSWorkBlockingReason _blockingReason)
    {
        ttsbegin;

        WHSWorkUnBlockingValidationResult result = _blockingReason.tryUnBlockReason();

        if (result.parmCanUnBlockResult())
        {
            result = this.tryUnBlockWork();
        }

        ttscommit;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryUnBlockWork</Name>
				<Source><![CDATA[
    private WHSWorkUnBlockingValidationResult tryUnBlockWork()
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation = this.findFirstWorkBlockingReasonAssociation();

        if (workBlockingReasonAssociation.RecId)
        {
            WHSWorkBlockingReason blockingReason = this.blockingReason(workBlockingReasonAssociation.ReasonType);

            return WHSWorkUnBlockingValidationResult::newFailureWithMessage(blockingReason.detailedBlockingMessage());
        }

        this.validateUnBlocking();

        this.unBlockWork();
       
        return WHSWorkUnBlockingValidationResult::newSuccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockBlockWork</Name>
				<Source><![CDATA[
    private void unBlockBlockWork(NoYes _newBlockingState)
    {
        workTable.Frozen = _newBlockingState;
        workTable.update();       
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockWork</Name>
				<Source><![CDATA[
    private void unBlockWork()
    {
        this.unBlockBlockWork(NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockWork</Name>
				<Source><![CDATA[
    private void blockWork()
    {
        this.unBlockBlockWork(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockingReason</Name>
				<Source><![CDATA[
    private WHSWorkBlockingReason blockingReason(WHSWorkBlockingReasonType _reasonType)
    {
        if (allowManualUnBlock)
        {
            return WHSWorkBlockingReason::newManualUnBlockFromReasonType(_reasonType, workTable);
        }

        return WHSWorkBlockingReason::newFromReasonType(_reasonType, workTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnBlockReason</Name>
				<Source><![CDATA[
    private WHSWorkUnBlockingValidationResult canUnBlockReason(WHSWorkBlockingReason _blockingReason)
    {
        return _blockingReason.canUnBlockReason();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstWorkBlockingReasonAssociation</Name>
				<Source><![CDATA[
    private WHSWorkBlockingReasonAssociation findFirstWorkBlockingReasonAssociation()
    {
        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        select firstonly workBlockingReasonAssociation
            order by RecId 
            where workBlockingReasonAssociation.WorkId == workTable.WorkId;

        return workBlockingReasonAssociation;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCancelBlockedWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a work can be cancelled based on the blocking reasons blocking it.
    /// </summary>
    /// <param name = "_work">The <c>WHSWorkTable</c> to check if it can be canceled.</param>
    /// <returns>true if the work can be canceled; otherwise false.</returns>
    [Hookable(false)]
    internal static boolean canCancelBlockedWork(WHSWorkTable _work)
    {
        boolean res = true;

        WHSWorkBlockingReasonAssociation workBlockingReasonAssociation;

        while select ReasonType from workBlockingReasonAssociation
                where workBlockingReasonAssociation.WorkId == _work.WorkId
        {
            WHSWorkBlockingReason blockingReason = WHSWorkBlockingReason::newFromReasonType(workBlockingReasonAssociation.ReasonType, _work);

            if (!blockingReason.canCancelBlockedWork())
            {
                res = false;
                break;
            }
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockingReasonTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a container with all the existing blocking reason types.
    /// </summary>
    /// <returns>A container with all the existing blocking reason types.</returns>
    [Hookable(false)]
    internal static container blockingReasonTypes()
    {
        const str CacheClassScope = 'WHSWorkBlockingReasonTypeMetaDataCache';
        container cacheKey = [enumStr(WHSWorkBlockingReasonType)];
        
        var sysGlobalObjectCache = classfactory.globalObjectCache();
        container reasonTypes = sysGlobalObjectCache.find(CacheClassScope, cacheKey);

        if (!reasonTypes)
        {
            EnumId enumId = enumNum(WHSWorkBlockingReasonType);
            DictEnum  dictEnum = new DictEnum(enumId);

            int countOfValues = dictEnum.values();
        
            for (int indexId = 0; indexId < countOfValues; indexId++)
            {
                reasonTypes += dictEnum.index2Value(indexId);
            }
            sysGlobalObjectCache.insert(CacheClassScope, cacheKey, reasonTypes);
        }

        return reasonTypes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>