<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransSortOrderStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqTransSortOrderStrategy</c> provides a strategy for ordering <c>ReqTrans</c> records.
/// </summary>
public class ReqTransSortOrderStrategy implements ReqIReqTransSortOrderStrategy
{
    Object object;
    SysDictClass dictClass;
    SysDictMethod dictMethod;
    MethodName methodName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqTransSortOrderStrategy construct()
    {
        return new ReqTransSortOrderStrategy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInstanceMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a strategy that uses the specified instance method for determining alphanumeric order key of a <c>ReqTrans</c> record.
    /// </summary>
    /// <param name = "_object">The object on which the method must be called.</param>
    /// <param name = "_methodName">The name of the method.</param>
    /// <returns>A new instance of the strategy.</returns>
    /// <remarks>
    /// The specified method must take a <c>ReqTrans</c> record as the only parameter and return a string
    /// that is the alphanumeric order key for the record.
    /// </remarks>
    public static ReqTransSortOrderStrategy newFromInstanceMethod(Object _object, MethodName _methodName)
    {
        ReqTransSortOrderStrategy strategy = ReqTransSortOrderStrategy::construct();
        strategy.initFromInstanceMethod(_object, _methodName);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromStaticMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a strategy that uses the specified static method for determining alphanumeric order key of a <c>ReqTrans</c> record.
    /// </summary>
    /// <param name = "_classId">The ID of the class that contains the static method.</param>
    /// <param name = "_methodName">The name of the method.</param>
    /// <returns>A new instance of the strategy.</returns>
    /// <remarks>
    /// The specified method must take a <c>ReqTrans</c> record as the only parameter 
    /// and return a string that is the alphanumeric order key for the record.
    /// </remarks>
    public static ReqTransSortOrderStrategy newFromStaticMethod(ClassId _classId, MethodName _methodName)
    {
        ReqTransSortOrderStrategy strategy = ReqTransSortOrderStrategy::construct();
        strategy.initFromStaticMethod(_classId, _methodName);
        return strategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInstanceMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the strategy to use the specified instance method for determining alphanumeric order key of a <c>ReqTrans</c> record.
    /// </summary>
    /// <param name = "_object">The object on which the method must be called.</param>
    /// <param name = "_methodName">The name of the method.</param>
    /// <remarks>
    /// The specified method must take a <c>ReqTrans</c> record as the only parameter and return a string 
    /// that is the alphanumeric order key for the record.
    /// </remarks>
    protected void initFromInstanceMethod(Object _object, MethodName _methodName)
    {
        object = _object;
        dictClass = new SysDictClass(classIdGet(_object));
        dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, dictClass.id(), _methodName);
        methodName = _methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromStaticMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the strategy to use the specified static method for determining alphanumeric order key of a <c>ReqTrans</c> record.
    /// </summary>
    /// <param name = "_classId">The ID of the class that contains the static method.</param>
    /// <param name = "_methodName">The name of the method.</param>
    /// <remarks>
    /// The specified method must take a <c>ReqTrans</c> record as the only parameter and return a string 
    /// that is the alphanumeric order key for the record.
    /// </remarks>
    protected void initFromStaticMethod(ClassId _classId, MethodName _methodName)
    {
        dictClass = new SysDictClass(_classId);
        dictMethod = new SysDictMethod(UtilElementType::ClassStaticMethod, dictClass.id(), _methodName);
        methodName = _methodName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the key that defines sorting order of the specified <c>ReqTrans</c> record.
    /// </summary>
    /// <param name = "_reqTrans">A <c>ReqTrans</c> record.</param>
    /// <returns>The key that defines sorting order of the specified <c>ReqTrans</c> record.</returns>
    public anytype orderKey(ReqTrans _reqTrans) 
    {
        if (object)
        {
            return dictClass.callObject(methodName, object, _reqTrans);
        }
        else 
        {
            return dictClass.callStatic(methodName, _reqTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderKeyType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the data type of the sort order keys returned from the <c>orderKey</c> method.
    /// </summary>
    /// <returns>The data type of the sort order keys returned from the <c>orderKey</c> method.</returns>
    Types orderKeyType()
    {
        return dictMethod.returnType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>