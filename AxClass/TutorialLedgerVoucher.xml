<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TutorialLedgerVoucher</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TutorialLedgerVoucher
{
    LedgerVoucher   ledgerVoucher;
    boolean         creditNote;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custVoucherSales</Name>
				<Source><![CDATA[
    public void custVoucherSales(CustInvoiceJour _custInvoiceJour, SalesTable _salesTable, SalesParmTable _salesParmTable)
    {
        CustVoucher custVoucher;
        CustTrans   custTrans;

        custVoucher = CustVoucher::newCustVoucherSales(LedgerTransTxt::SalesInvoiceCust,
                                                       _custInvoiceJour,
                                                       _salesParmTable,
                                                       _salesTable);

        custVoucher.parmExchRate(_custInvoiceJour.ExchRate);
        custVoucher.parmExchRateSecondary(_custInvoiceJour.ExchRateSecondary);

        custVoucher.post(ledgerVoucher, custTrans, NoYes::No,Currency::noYes2UnknownNoYes(_custInvoiceJour.Triangulation));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalPost</Name>
				<Source><![CDATA[
    LedgerVoucher initJournalPost(LedgerJournalId _journalId)
    {
        LedgerJournalTable  journalTable = LedgerJournalTable::find(_journalId);
        ;
        return LedgerVoucher::newLedgerPost(journalTable.DetailSummaryPosting,
                                            SysModule::Ledger,
                                            NumberSequenceTable::find(journalTable.NumberSequenceTable).NumberSequence,
                                            TransactionLogType::LedgerJournal,
                                            strfmt('%1 %2', journalTable.JournalNum, journalTable.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesPost</Name>
				<Source><![CDATA[
    LedgerVoucher initSalesPost(NumberSeq _numberSeq)
    {
        creditNote = NoYes::No;
        return LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                            SysModule::Sales,
                                           _numberSeq.parmVoucherSequenceCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesVoucher</Name>
				<Source><![CDATA[
    LedgerVoucherObject initSalesVoucher(Voucher    _voucher, TransDate  _transDate)
    {
        return LedgerVoucherObject::newVoucher(_voucher,
                                               _transDate,
                                                SysModule::Sales,
                                                LedgerTransType::Sales,
                                               (creditNote ? NoYes::Yes : NoYes::No));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runJournalPost</Name>
				<Source><![CDATA[
    void runJournalPost(LedgerJournalId _journalId)
    {
        LedgerJournalTrans  journalTrans;
        ;
        ttsbegin;

        ledgerVoucher = this.initJournalPost(_journalId);

        while   select  journalTrans
                where   journalTrans.JournalNum == _journalId
        {
            ledgerVoucher.addTrans(LedgerVoucherTransObject::newTransLedgerJournal(journalTrans));
        }

        ledgerVoucher.end();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSalesPost</Name>
				<Source><![CDATA[
    void runSalesPost()
    {
        SalesTable                  salesTable;
        SalesLine                   salesLine;
        SalesParmTable              salesParmTable;
        CustInvoiceJour             custInvoiceJour;
        TransactionTxt              transTxt    = TransactionTxt::construct();

        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        CurrencyExchangeHelper      currencyExchHelper;

        NumberSeq                   numberSeq   = NumberSeq::newGetNumAndVoucher(SalesParameters::numRefInvoiceId(),
                                                                                 SalesParameters::numRefSalesInvoiceVoucher());
        Voucher                     voucher;
        TransDate                   transDate;
        InventTable                 inventTable;

        ttsbegin;

        ledgerVoucher = this.initSalesPost(numberSeq);

        while   select  salesTable
                where   salesTable.CustAccount == 'xyz'
        {
            voucher = numberSeq.voucher();

            ledgerVoucherObject = this.initSalesVoucher(voucher, transDate);
            ledgerVoucherObject.parmDocument(transDate, voucher);
            ledgerVoucher.addVoucher(ledgerVoucherObject);
            currencyExchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());

            while   select  salesLine
                    where   salesLine.SalesId == salesTable.SalesId
            {
                inventTable = InventTable::find(salesLine.ItemId);

                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerVoucherObject,
                    LedgerPostingType::SalesRevenue,
                    LedgerDimensionFacade::serviceCreateLedgerDimension(InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(InventAccountType::InventStdProfit, salesLine, inventTable)), salesLine.DefaultDimension),
                    salesTable.CurrencyCode,
                    salesLine.SalesPrice,
                    currencyExchHelper);

                ledgerVoucherTransObject.parmSourceTableId(salesLine.TableId);
                ledgerVoucherTransObject.parmSourceRecId(salesLine.RecId);
                ledgerVoucherTransObject.parmTransTxt(transTxt.txt());
                ledgerVoucher.addTrans(ledgerVoucherTransObject);
            }

            custInvoiceJour.initFromSalesTable(salesTable);
            this.custVoucherSales(custInvoiceJour, salesTable, salesParmTable);
        }

        ledgerVoucher.end();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name = "_inventAccountType">A inventory account type.</param>
    /// <param name = "_salesLine">A sales line.</param>
    /// <param name = "_inventTable">An item.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(
        InventAccountType   _inventAccountType,
        SalesLine           _salesLine,
        InventTable         _inventTable)
    {
        return InventPostingItemLedgerDimensionParameters::newFromParameters(
            _inventAccountType,
            _salesLine.ItemId,
            _inventTable.itemGroupId());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>