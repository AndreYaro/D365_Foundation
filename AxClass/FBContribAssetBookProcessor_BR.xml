<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBContribAssetBookProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class FBContribAssetBookProcessor_BR
{
    FBBookingPeriod_BR          bookingPeriod;
    FiscalEstablishmentRecId_BR currentFiscalEstablishmentRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeOpenedDepreciationAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes the <c>FBContribAssetTable_BR</c> record that is open but related to an <c>AssetTable</c> record that is not
    /// Closes the <c>FBContribAssetTable_BR</c> record that was transferred to another fiscal establishment
    /// </summary>
    /// <remarks>
    /// Only assets that has Pis/Cofins appropriation method equals to amortization or depreciation will be closed
    /// </remarks>
    private void closeOpenedDepreciationAssets()
    {
        AssetTable              assetTable;
        AssetBook               assetBook;
        AssetBookTable          assetBookTable;
        FBContribAssetTable_BR  fbContribAssetTable;

        update_recordSet fbContribAssetTable
            setting  Status = FBCIAPAssetStatus_BR::Closed
            where    fbContribAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                &&   fbContribAssetTable.Status                      == FBCIAPAssetStatus_BR::Open
        // Only assets with appropriation method equals to amortization or depreciation
        exists join assetTable
            where   assetTable.AssetId                              == fbContribAssetTable.AssetTable
                &&  assetTable.FiscalEstablishment_BR               == currentFiscalEstablishmentRecId
                &&  (assetTable.PISCOFINSAppropriationMethod_BR     == FBPISCOFINSFixedAssetAppropMethod_BR::Amortization
                    || assetTable.PISCOFINSAppropriationMethod_BR   == FBPISCOFINSFixedAssetAppropMethod_BR::Depreciation)
        // only assets already acquired and not open
        exists join assetBook
            where   assetBook.AssetId   == assetTable.AssetId
                &&  assetBook.Status    != AssetStatus::NoAcquisition
                &&  assetBook.Status    != AssetStatus::Open
        // only assets on current posting layer
        exists join assetBookTable
            where   assetBookTable.BookId               == assetBook.BookId
                &&  assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current;

        // Assets transferred to another fiscal establishment
        update_recordSet fbContribAssetTable
            setting  Status = FBCIAPAssetStatus_BR::Closed
            where    fbContribAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                &&   fbContribAssetTable.FiscalEstablishment_BR      == currentFiscalEstablishmentRecId
                &&   fbContribAssetTable.Status                      == FBCIAPAssetStatus_BR::Open
        // Only assets with appropriation method equals to amortization or depreciation
        exists join assetTable
            where   assetTable.AssetId                              == fbContribAssetTable.AssetTable
                &&  assetTable.FiscalEstablishment_BR               != currentFiscalEstablishmentRecId
                &&  (assetTable.PISCOFINSAppropriationMethod_BR     == FBPISCOFINSFixedAssetAppropMethod_BR::Amortization
                    || assetTable.PISCOFINSAppropriationMethod_BR   == FBPISCOFINSFixedAssetAppropMethod_BR::Depreciation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>FBContribAssetBookProcessor_BR</c> class
    /// </summary>
    /// <param name="_bookingPeriod">
    /// The booking period related to the current fiscal establishment.
    /// </param>
    /// <param name="_currentFiscalEstablishmentRecId">
    /// The current fiscal establishment.
    /// This ID of the current fiscal establishment that belongs to the fiscal
    /// organization related to the tax assessment.
    /// </param>
    public void new(FBBookingPeriod_BR          _bookingPeriod,
                    FiscalEstablishmentRecId_BR _currentFiscalEstablishmentRecId)
    {
        bookingPeriod                       = _bookingPeriod;
        currentFiscalEstablishmentRecId     = _currentFiscalEstablishmentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeInvalidAcquisitonAndDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes acquisiton and disposal in the same period for each fixed asset
    /// </summary>
    private void removeInvalidAcquisitonAndDisposal()
    {
        FBContribAssetTrans_BR  contribAssetTrans;
        FBContribAssetTrans_BR  incorrectContribAssetTrans;
        FBContribAssetTable_BR  contribAssetTable;
        int countOfAssetTrans;

        while select count(RecId) from contribAssetTrans
            group by FBContribAssetTable_BR
            where   contribAssetTrans.FBBookingPeriod_BR == bookingPeriod.RecId
                && (contribAssetTrans.TransType == FBContribAssetTransType_BR::Acquisition
                ||  contribAssetTrans.TransType == FBContribAssetTransType_BR::Transfer
                ||  contribAssetTrans.TransType == FBContribAssetTransType_BR::Sale
                ||  contribAssetTrans.TransType == FBContribAssetTransType_BR::Scrap)
        {
            countOfAssetTrans = int642int(contribAssetTrans.RecId);

            if (countOfAssetTrans > 1)
            {
                delete_from incorrectContribAssetTrans
                    where   incorrectContribAssetTrans.FBContribAssetTable_BR   == contribAssetTrans.FBContribAssetTable_BR
                        &&  incorrectContribAssetTrans.FBBookingPeriod_BR       == bookingPeriod.RecId;

                delete_from contribAssetTable
                    where contribAssetTable.RecId == contribAssetTrans.FBContribAssetTable_BR;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process asset transations to recover PIS and COFINS credit.
    /// </summary>
    public void run()
    {
        changeCompany (bookingPeriod.FiscalEstablishmentDataArea)
        {
            ttsBegin;

            setPrefix("@SYS4082235");

            this.runAcquisitonAndDisposal();
            this.runFixedAssetTransfer();
            this.runRecoverForOpenFixedAssets();
            this.removeInvalidAcquisitonAndDisposal();
            this.runRecoverByDepreciation();
            this.closeOpenedDepreciationAssets();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAcquisitonAndDisposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates PIS/COFINS acquisition transactions for fixed assets acquired in this period
    /// </summary>
    /// <remarks>
    /// Acquisition and disposal are in the same method to improve performance
    /// (only one query in asset trans table)
    /// </remarks>
    private void runAcquisitonAndDisposal()
    {
        AssetTable              assetTable;
        AssetBook               assetBook;
        AssetBookTable          assetBookTable;
        AssetTrans              assetTrans;
        FBContribAssetTable_BR  contribAssetTable;

        while select assetTrans
            order by AssetId, BookId, TransType, TransDate
            where   (assetTrans.TransDate >= bookingPeriod.periodFrom() && assetTrans.TransDate <= bookingPeriod.periodTo())
                &&  (   assetTrans.TransType == AssetTransType::Acquisition
                    ||  assetTrans.TransType == AssetTransType::AcquisitionAdj
                    ||  assetTrans.TransType == AssetTransType::DisposalSale
                    ||  assetTrans.TransType == AssetTransType::DisposalScrap)
            // only asset with installments
            exists join assetTable
                where   assetTable.AssetId  == assetTrans.AssetId
                    &&  assetTable.PISCOFINSCreditInstallments_BR   > 0
                    &&  assetTable.PISCOFINSAppropriationMethod_BR  == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition
                    &&  assetTable.FiscalEstablishment_BR           == currentFiscalEstablishmentRecId
            // only assets already acquired
            exists join assetBook
                where   assetBook.AssetId == assetTrans.AssetId
                    &&  assetBook.Status  != AssetStatus::NoAcquisition
                    &&  assetBook.BookId  == assetTrans.BookId
            // only assets on current posting layer
            exists join assetBookTable
                where   assetBookTable.BookId               == assetBook.BookId
                    &&  assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
        {
            setPrefix(strFmt('%1: %2', "@SYS25653", assetTrans.AssetId));

            switch (assetTrans.TransType)
            {
                case AssetTransType::Acquisition:
                case AssetTransType::AcquisitionAdj:
                    FBContribAssetTransCreate_BR::newAcquisition(bookingPeriod, assetTrans).create();
                    break;

                case AssetTransType::DisposalSale:
                case AssetTransType::DisposalScrap:
                    FBContribAssetTransCreate_BR::deleteInstallmentCreditTransaction(bookingPeriod, assetTrans.AssetId);

                    while select contribAssetTable
                        where   contribAssetTable.AssetTable                    == assetTrans.AssetId
                            &&  contribAssetTable.Status                        == FBCIAPAssetStatus_BR::Open
                            &&  contribAssetTable.FiscalEstablishment_BR        == currentFiscalEstablishmentRecId
                            &&  contribAssetTable.FiscalEstablishmentDataArea   == bookingPeriod.FiscalEstablishmentDataArea
                    {
                        FBContribAssetTransCreate_BR::newDisposal(bookingPeriod, assetTrans, contribAssetTable).create();
                    }
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFixedAssetTransfer</Name>
				<Source><![CDATA[
    private void runFixedAssetTransfer()
    {
        CFOPTable_BR                        cfopTable;
        FiscalDocument_BR                   fiscalDocument;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FBBookingPeriodFiscalDocument_BR    bookingPeriodFiscalDocument;
        AssetTable                          assetTable;

        while select RecId from bookingPeriodFiscalDocument
            where bookingPeriodFiscalDocument.FBBookingPeriod_BR == bookingPeriod.RecId
            join fiscalDocument
                where   fiscalDocument.RecId == bookingPeriodFiscalDocument.FiscalDocument_BR
            join AssetId from fiscalDocumentLine
                where   fiscalDocumentLine.FiscalDocument   == fiscalDocument.RecId
                    &&  fiscalDocumentLine.AssetId          != ''
            exists join cfopTable
                where   cfopTable.CFOPId    == fiscalDocumentLine.CFOP
                    &&  cfopTable.Purpose   == CFOPPurpose_BR::FiscalEstablishmentTransfer
            exists join assetTable
                where   assetTable.AssetId                          == fiscalDocumentLine.AssetId
                    &&  assetTable.PISCOFINSAppropriationMethod_BR  == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition
        {
            FBContribAssetTransCreate_BR::newTransfer(bookingPeriod, fiscalDocument, fiscalDocumentLine.AssetId).create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRecoverByDepreciation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates PIS/COFINS recover transactions for fixed assets depreciated in this period
    /// </summary>
    private void runRecoverByDepreciation()
    {
        AssetTable              assetTable;
        AssetBook               assetBook;
        AssetBookTable          assetBookTable;
        AssetTrans              assetTrans;
        FBContribAssetTrans_BR  fbContribAssetTrans;

        while select assetTrans
            order by AmountMST, AssetId, BookId, TransType, TransDate
            where   (assetTrans.TransDate >= bookingPeriod.periodFrom() && assetTrans.TransDate <= bookingPeriod.periodTo())
                &&  (assetTrans.TransType   == AssetTransType::Depreciation
                    || assetTrans.TransType == AssetTransType::DepreciationAdj
                    || assetTrans.TransType == AssetTransType::ExtraordinaryDepreciation)
            // only asset with depreciation or amortization credit appropriation method
            exists join assetTable
                where   assetTable.AssetId                              == assetTrans.AssetId
                    &&  assetTable.FiscalEstablishment_BR               == currentFiscalEstablishmentRecId
                    &&  (assetTable.PISCOFINSAppropriationMethod_BR     == FBPISCOFINSFixedAssetAppropMethod_BR::Amortization
                        || assetTable.PISCOFINSAppropriationMethod_BR   == FBPISCOFINSFixedAssetAppropMethod_BR::Depreciation)
            // only assets already acquired
            exists join assetBook
                where   assetBook.AssetId   == assetTrans.AssetId
                    && assetBook.BookId == assetTrans.BookId
                    &&  assetBook.Status    != AssetStatus::NoAcquisition
            // only assets on current posting layer
            exists join assetBookTable
                where   assetBookTable.BookId               == assetBook.BookId
                    &&  assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current
            notexists join  fbContribAssetTrans
                where       fbContribAssetTrans.AssetTrans == assetTrans.RecId
        {
            setPrefix(strFmt('%1: %2', "@SYS25653", assetTrans.AssetId));

            FBContribAssetTransCreate_BR::newDepreciation(bookingPeriod, assetTrans).create();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runRecoverForOpenFixedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates PIS/COFINS recover transactions for fixed assets not acquired in this period
    /// </summary>
    private void runRecoverForOpenFixedAssets()
    {
        FBContribAssetTable_BR  contribAssetTable;
        FBContribAssetTrans_BR  contribAssetTrans;

        setPrefix("@SYS14834");

        while select forUpdate contribAssetTable
            where   contribAssetTable.Status                        == FBCIAPAssetStatus_BR::Open
                &&  contribAssetTable.FiscalEstablishment_BR        == currentFiscalEstablishmentRecId
                &&  contribAssetTable.FiscalEstablishmentDataArea   == bookingPeriod.FiscalEstablishmentDataArea
                &&  contribAssetTable.AssetAppropriationMethod      == FBPISCOFINSFixedAssetAppropMethod_BR::Acquisition
                &&  contribAssetTable.RemainingInstallments         > 0
            notExists join contribAssetTrans
                where   contribAssetTrans.FBContribAssetTable_BR    == contribAssetTable.RecId
                    &&  contribAssetTrans.FBBookingPeriod_BR        == bookingPeriod.RecId
        {
            setPrefix(strFmt('%1: %2', "@SYS25653", contribAssetTable.ContribAssetId));

            FBContribAssetTransCreate_BR::newRecover(bookingPeriod, contribAssetTable).create();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>