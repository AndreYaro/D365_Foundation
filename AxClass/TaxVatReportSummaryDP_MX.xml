<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxVatReportSummaryDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxVatReportSummaryDP_MX</c> class is the Report Data Provider class for the
///    <c>TaxVatReportSummary_MX</c> SSRS report.
/// </summary>
/// <remarks>
///    This is the RDP class for the <c>TaxVatReportSummary_MX</c> SSRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(TaxVatReportSummaryContract_MX))
]
class TaxVatReportSummaryDP_MX extends SrsReportDataProviderPreProcessTempDB
{
    TaxVatReportCategory_MX     taxVatReportCategoryTable;
    TaxVatSummaryReportTmp_MX   taxVatSummaryReportTmp;
    TaxTable                    taxTable;
    TaxTrans                    taxTrans;
    boolean                     checkRfcAddress;

    TransDate                   fromDate;
    TransDate                   toDate;
    TaxVatReportCategoryCode_MX fromCategory;
    TaxVatReportCategoryCode_MX toCategory;
    TaxVatReportCategoryCode_MX categoryCode;
    TaxAmount                   payableTaxAmount;
    TaxAmount                   receivableTaxAmount;
    TaxBase                     payableTaxBaseAmount;
    TaxBase                     receivableTaxBaseAmount;
    Amount                      receivableTotals;
    Amount                      payableTotals;

    // Macro contains 'defines' for parameter name
    #VATReports_SSRSParameters_MX
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyInfo</Name>
				<Source><![CDATA[
    public CompanyInfo getCompanyInfo()
    {
        return CompanyInfo::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxVatSummaryReportTmp_MX</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the data from the <c>TaxVatSummaryReportTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>TaxVatSummaryReportTmp_MX</c> table.
    /// </returns>
    [
        #VATReports_SSRSParameters_MX
        SRSReportDataSetAttribute(#TaxVatSummaryReport)
    ]

    public TaxVatSummaryReportTmp_MX getTaxVatSummaryReportTmp_MX()
    {
        select * from taxVatSummaryReportTmp;

        return taxVatSummaryReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesPurchTaxAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts summary tax amounts into the <c>TaxVatSummaryReportTmp_MX</c> table.
    /// </summary>
    private void insertSalesPurchTaxAmounts()
    {
        taxVatSummaryReportTmp.CategoryCode         = categoryCode;
        taxVatSummaryReportTmp.SalesTaxAmount       = payableTaxAmount;
        taxVatSummaryReportTmp.SalesTaxBaseAmount   = payableTaxBaseAmount;
        taxVatSummaryReportTmp.SalesTotal           = payableTotals;
        taxVatSummaryReportTmp.PurchTaxAmount       = abs(receivableTaxAmount);
        taxVatSummaryReportTmp.PurchTaxBaseAmount   = abs(receivableTaxBaseAmount);
        taxVatSummaryReportTmp.PurchTotal           = abs(receivableTotals);
        if (!checkRfcAddress)
        {
            taxVatSummaryReportTmp.Address              = this.getCompanyInfo().postalAddress().Address;
            taxVatSummaryReportTmp.Rfc                  = this.getCompanyInfo().Rfc_MX;
            checkRfcAddress = true;
        }
        taxVatSummaryReportTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SSRS at runtime and it should compute data and populate the data tables that are returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryBuildDataSource    taxVatReportCategory;
        QueryBuildDataSource    taxTableDS;
        QueryBuildDataSource    taxTransDS;
        QueryRun                queryRun;
        Query                   q   = new Query();
        TaxVatReportSummaryContract_MX taxVatReportSummaryContract = this.parmDataContract() as TaxVatReportSummaryContract_MX;
        boolean isTaxSpecificExchangeRateEnabled = TaxSpecificExchangeRateHelper::isTaxSpecificExchangeRateEnabled();

        categoryCode            = '';
        payableTaxAmount        = 0;
        payableTaxBaseAmount    = 0;
        payableTotals           = 0;
        receivableTaxAmount     = 0;
        receivableTaxBaseAmount = 0;
        receivableTotals        = 0;

        fromDate        = taxVatReportSummaryContract.parmFromDate();
        toDate          = taxVatReportSummaryContract.parmToDate();
        fromCategory    = taxVatReportSummaryContract.parmFromCategory();
        toCategory      = taxVatReportSummaryContract.parmToCategory();

        taxVatReportCategory = q.addDataSource(tableNum(TaxVatReportCategory_MX));
        // Range for Category codes
        taxVatReportCategory.addRange(fieldNum(TaxVatReportCategory_MX, CategoryCode)).value(queryRange(fromCategory, toCategory));
        taxVatReportCategory.addSortField(fieldNum(TaxVatReportCategory_MX, CategoryCode));
        taxVatReportCategory.orderMode(orderMode::OrderBy);
        taxTableDS           = taxVatReportCategory.addDataSource(tableNum(TaxTable));
        taxTableDS.addLink(fieldNum(TaxTable, TaxVatReportCategory_MX), fieldNum(TaxVatReportCategory_MX, recId));
        taxTransDS = taxTableDS.addDataSource(tableNum(TaxTrans));
        // Date Range
        taxTransDS.addRange(fieldNum(TaxTrans, TransDate)).value(queryRange(fromDate, toDate));
        taxTransDS.relations(true);

        queryRun = new QueryRun(q);

        while (queryRun.next())
        {
            taxTable                    = queryRun.get(tableNum(TaxTable));
            taxTrans                    = queryRun.get(tableNum(TaxTrans));
            taxVatReportCategoryTable   = queryRun.get(tableNum(TaxVatReportCategory_MX));

            if (queryRun.changed(tableNum(TaxTable)))
            {
                if (categoryCode && categoryCode != taxVatReportCategoryTable.CategoryCode)
                {
                    this.insertSalesPurchTaxAmounts();

                    payableTaxAmount        = 0;
                    payableTaxBaseAmount    = 0;
                    payableTotals           = 0;
                    receivableTaxAmount     = 0;
                    receivableTaxBaseAmount = 0;
                    receivableTotals        = 0;
                }

                categoryCode = taxVatReportCategoryTable.CategoryCode;
            }

            if (queryRun.changed(tableNum(TaxTrans)))
            {
                if (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
                    (isTaxSpecificExchangeRateEnabled && taxTrans.TaxDirection == TaxDirection::IncomingTax_W))
                {
                    payableTaxAmount      += taxTrans.TaxAmountCur;
                    payableTaxBaseAmount  += taxTrans.TaxBaseAmountCur;
                    payableTotals         += taxTrans.TaxAmountCur + taxTrans.TaxBaseAmountCur;
                }
                else if (taxTrans.TaxDirection == TaxDirection::OutgoingTax ||
                    (isTaxSpecificExchangeRateEnabled && taxTrans.TaxDirection == TaxDirection::OutgoingTax_W))
                {
                    receivableTaxAmount      += taxTrans.TaxAmountCur;
                    receivableTaxBaseAmount  += taxTrans.TaxBaseAmountCur;
                    receivableTotals         += taxTrans.TaxAmountCur + taxTrans.TaxBaseAmountCur;
                }
            }
        }

        // To insert the last record
        if (categoryCode)
        {
            this.insertSalesPurchTaxAmounts();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>