<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorization_Confirmed_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization confirmed class.
/// </summary>
class EximAuthorization_Confirmed_IN extends EximAuthorization_IN implements BatchRetryable
{
    TmpEximConfirmOrderTable_IN tmpConfirmOrderTable;
    TmpEximConfirmOrderLines_IN tmpConfirmOrderLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applySion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Apply the sion method.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void applySion()
    {
        CustConfirmTrans                 custConfirmTrans;
        EximCustConfirmTrans_IN          eximCustConfirmTrans;
        EximSionTableRecId_IN            sionTableRecId;
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        ;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId);

        sionTableRecId = EximSionTable_IN::findPeriod(authorizationSchemesTable.EximProductGroupTable,
                                                      authorizationSchemesTable.AuthorizationDateTime).RecId;

        if (sionTableRecId)
        {
            tmpImportableItems = null;

            while select RecId, ConfirmOrderTableRecId, CustConfirmTransRecId
                from tmpConfirmOrderLines
                where tmpConfirmOrderLines.Mark == NoYes::Yes
                join tmpConfirmOrderTable
                    where tmpConfirmOrderTable.RecId                          == tmpConfirmOrderLines.ConfirmOrderTableRecId
                       && tmpConfirmOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTable.RecId
                join ItemId, Qty, SalesUnit, CurrencyCode, ConfirmDate
                    from custConfirmTrans
                    where custConfirmTrans.RecId == tmpConfirmOrderLines.CustConfirmTransRecId
                join AssessableValue
                    from eximCustConfirmTrans
                    where eximCustConfirmTrans.CustConfirmTransRecId == tmpConfirmOrderLines.CustConfirmTransRecId
            {
                this.insertTmpImportableItems(sionTableRecId,
                                              tmpConfirmOrderLines.RecId,
                                              eximCustConfirmTrans.AssessableValue,
                                              custConfirmTrans.ItemId,
                                              custConfirmTrans.SalesUnit,
                                              custConfirmTrans.Qty,
                                              custConfirmTrans.CurrencyCode,
                                              custConfirmTrans.ConfirmDate);
            }
        }

        this.parmTmpEximImportableItems(tmpImportableItems);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cumulativeAssessableValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get cumulative assessable value.
    /// </summary>
    /// <returns>
    /// The isntance of the <c>AmountMST</c> class.
    /// </returns>
    public AmountMST cumulativeAssessableValue()
    {
        AmountMST                   assessableValue;
        CustConfirmTrans            custConfirmTrans;
        EximConfirmOrderTable_IN    confirmOrderTable;
        EximConfirmOrderLines_IN    confirmOrderLines;
        EximCustConfirmTrans_IN     eximCustConfirmTrans;
        ;

        while select RecId, Mark, ConfirmOrderTableRecId, CustConfirmTransRecId
            from confirmOrderLines
            where confirmOrderLines.Mark == NoYes::Yes
            join RecId, AuthorizationSchemesTableRecId
                from confirmOrderTable
                where confirmOrderTable.RecId                          == confirmOrderLines.ConfirmOrderTableRecId
                   && confirmOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
            join sum(AssessableValue)
                from eximCustConfirmTrans
                where eximCustConfirmTrans.CustConfirmTransRecId == confirmOrderLines.CustConfirmTransRecId
            join CurrencyCode, ConfirmDate
                from custConfirmTrans
                group by CurrencyCode, ConfirmDate
                where custConfirmTrans.RecId == eximCustConfirmTrans.CustConfirmTransRecId
        {
            assessableValue += CurrencyHelper_IN::customsMSTAmount_IN(eximCustConfirmTrans.AssessableValue,
                                                             custConfirmTrans.CurrencyCode,
                                                             Direction_IN::Export,
                                                             custConfirmTrans.ConfirmDate);
        }

        return assessableValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes table records.
    /// </summary>
    public void deleteRecords()
    {
        EximConfirmOrderTable_IN confirmOrderTable;
        ;

        delete_from confirmOrderTable
            where confirmOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertConfirmedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert new confirmed order.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertConfirmedOrder()
    {
        EximConfirmOrderTable_IN confirmOrderTable;
        EximConfirmOrderLines_IN confirmOrderLines;
        EximImportableItems_IN   importableItems;
        ;

        while select tmpConfirmOrderTable
        {
            confirmOrderTable.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
            confirmOrderTable.CustConfirmJourRecId           = tmpConfirmOrderTable.CustConfirmJourRecId;
            confirmOrderTable.insert();

            while select tmpConfirmOrderLines
                where tmpConfirmOrderLines.ConfirmOrderTableRecId == tmpConfirmOrderTable.RecId
            {
                confirmOrderLines.Mark                   = tmpConfirmOrderLines.Mark;
                confirmOrderLines.CustConfirmTransRecId  = tmpConfirmOrderLines.CustConfirmTransRecId;
                confirmOrderLines.ConfirmOrderTableRecId = confirmOrderTable.RecId;
                confirmOrderLines.insert();

                while select tmpImportableItems
                    where tmpImportableItems.SourceRecId == tmpConfirmOrderLines.RecId
                {
                    importableItems.ItemId                         = tmpImportableItems.ItemId;
                    importableItems.Unit                           = tmpImportableItems.Unit;
                    importableItems.Qty                            = tmpImportableItems.Qty;
                    importableItems.Value                          = tmpImportableItems.Value;
                    importableItems.SourceRecId                    = confirmOrderLines.RecId;
                    importableItems.AuthorizationBasis             = EximAuthorizationBasis_IN::ConfirmedOrder;
                    importableItems.AuthorizationSchemesTableRecId = authorizationSchemesTableRecId;
                    importableItems.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpConfirmedOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert temporary confirmed order.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertTmpConfirmedOrder()
    {
        EximConfirmOrderTable_IN    confirmOrderTable;
        EximConfirmOrderLines_IN    confirmOrderLines;
        EximImportableItems_IN      importableItems;
        TmpEximConfirmOrderTable_IN tmpConfirmOrderTableLoc;
        TmpEximConfirmOrderLines_IN tmpConfirmOrderLinesLoc;
        TmpEximImportableItems_IN   tmpImportableItemsLoc;
        ;

        ttsbegin;
        while select RecId, AuthorizationSchemesTableRecId, CustConfirmJourRecId
            from confirmOrderTable
            where confirmOrderTable.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
        {
            tmpConfirmOrderTableLoc.clear();
            tmpConfirmOrderTableLoc.AuthorizationSchemesTableRecId = confirmOrderTable.AuthorizationSchemesTableRecId;
            tmpConfirmOrderTableLoc.CustConfirmJourRecId           = confirmOrderTable.CustConfirmJourRecId;
            tmpConfirmOrderTableLoc.insert();

            while select RecId, Mark, CustConfirmTransRecId, ConfirmOrderTableRecId
                from confirmOrderLines
                where confirmOrderLines.ConfirmOrderTableRecId == confirmOrderTable.RecId
            {
                tmpConfirmOrderLinesLoc.clear();
                tmpConfirmOrderLinesLoc.Mark                   = confirmOrderLines.Mark;
                tmpConfirmOrderLinesLoc.CustConfirmTransRecId  = confirmOrderLines.CustConfirmTransRecId;
                tmpConfirmOrderLinesLoc.ConfirmOrderTableRecId = tmpConfirmOrderTableLoc.RecId;
                tmpConfirmOrderLinesLoc.insert();

                while select ItemId, Unit, Qty, Value
                    from importableItems
                    where importableItems.AuthorizationSchemesTableRecId == authorizationSchemesTableRecId
                       && importableItems.AuthorizationBasis             == EximAuthorizationBasis_IN::ConfirmedOrder
                       && importableItems.SourceRecId                    == confirmOrderLines.RecId
                {
                    tmpImportableItemsLoc.clear();
                    tmpImportableItemsLoc.ItemId      = importableItems.ItemId;
                    tmpImportableItemsLoc.Unit        = importableItems.Unit;
                    tmpImportableItemsLoc.Qty         = importableItems.Qty;
                    tmpImportableItemsLoc.Value       = importableItems.Value;
                    tmpImportableItemsLoc.SourceRecId = tmpConfirmOrderLinesLoc.RecId;
                    tmpImportableItemsLoc.insert();
                }
            }
        }
        ttscommit;

        this.parmTmpConfirmOrderTable(tmpConfirmOrderTableLoc);
        this.parmTmpConfirmOrderLines(tmpConfirmOrderLinesLoc);
        this.parmTmpEximImportableItems(tmpImportableItemsLoc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConfirmOrderLines</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximConfirmOrderLines_IN parmTmpConfirmOrderLines(TmpEximConfirmOrderLines_IN _tmpConfirmOrderLines = tmpConfirmOrderLines)
    {
        tmpConfirmOrderLines = _tmpConfirmOrderLines;

        return tmpConfirmOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpConfirmOrderTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximConfirmOrderTable_IN parmTmpConfirmOrderTable(TmpEximConfirmOrderTable_IN _tmpConfirmOrderTable = tmpConfirmOrderTable)
    {
        tmpConfirmOrderTable = _tmpConfirmOrderTable;

        return tmpConfirmOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ;

        try
        {
            ttsbegin;
            this.deleteRecords();

            this.insertConfirmedOrder();

            this.insertSummaryImportableItems();

            this.updateScheme();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show confirmed order data.
    /// </summary>
    /// <param name="_fromDate">
    /// The instance of the <c>FromDate</c> class.
    /// </param>
    /// <param name="_toDate">
    /// The isntance of the <c>ToDate</c> class.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showData(
        FromDate _fromDate,
        ToDate   _toDate)
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTable;
        EximCustConfirmTrans_IN          eximCustConfirmTrans;
        InventTable                      inventTable;
        CustConfirmJour                  custConfirmJour;
        CustConfirmTrans                 custConfirmTrans;
        SalesTable                       salesTable;
        TmpEximConfirmOrderTable_IN      tmpConfirmOrderTableLoc;
        TmpEximConfirmOrderLines_IN      tmpConfirmOrderLinesLoc;
        EximConfirmOrderTable_IN         confirmOrderTable;
        EximConfirmOrderLines_IN         confirmOrderLines;
        EximAuthorizationSchemesTable_IN authorizationSchemesTableLoc;
        InventItemSetupSupplyType        inventItemSetupSupplyTypeLoc;

        authorizationSchemesTable = EximAuthorizationSchemesTable_IN::find(authorizationSchemesTableRecId);

        ttsbegin;
        if (this.validateExchangeRates(_fromDate, _toDate))
        {
            tmpImportableItems = null;
            // Get all confirmation lines on all export orders for a given date range, for items of type BOM
            // satisfying needs of the authroization scheme in use
            while select CustConfirmTransRecId, EximPorts, EximProductGroupTable
                from eximCustConfirmTrans
                where eximCustConfirmTrans.EximPorts                == authorizationSchemesTable.EximPorts
                   && eximCustConfirmTrans.EximProductGroupTable    == authorizationSchemesTable.EximProductGroupTable
                join RecId, SalesId, ItemId, ConfirmId, ConfirmDate
                    from custConfirmTrans
                    where custConfirmTrans.RecId       == eximCustConfirmTrans.CustConfirmTransRecId
                       && custConfirmTrans.ConfirmDate >= _fromDate
                       && custConfirmTrans.ConfirmDate <= _toDate
                join ItemId, ItemType
                    from inventTable
                    where inventTable.ItemId   == custConfirmTrans.ItemId
                join ItemId, ItemDataAreaId, DefaultOrderType from inventItemSetupSupplyTypeLoc
                    where inventItemSetupSupplyTypeLoc.ItemId           == inventTable.ItemId
                       && inventItemSetupSupplyTypeLoc.ItemDataAreaId   == inventTable.DataAreaId
                       && inventItemSetupSupplyTypeLoc.DefaultOrderType == ReqPOType::Production
                join SalesId, ConfirmId, ConfirmDate
                    from custConfirmJour
                    where custConfirmJour.SalesId     == custConfirmTrans.SalesId
                       && custConfirmJour.ConfirmId   == custConfirmTrans.ConfirmId
                       && custConfirmJour.ConfirmDate == custConfirmTrans.ConfirmDate
                       && custConfirmJour.CustomsExportOrder_IN == NoYes::Yes
                join  SalesId, DocumentStatus
                    from salesTable
                    where salesTable.SalesId        == custConfirmTrans.SalesId
                       && salesTable.DocumentStatus != DocumentStatus::ShippingBill_IN
            {
                // if the confirmation line is already associated with another authorization of the same authorization type,
                // then the confirmation line should not be a part of current authorization

                confirmOrderLines.clear();

                select firstonly RecId from confirmOrderLines
                    where confirmOrderLines.CustConfirmTransRecId == custConfirmTrans.RecId
                    join AuthorizationSchemesTableRecId
                        from confirmOrderTable
                        where confirmOrderTable.RecId == confirmOrderLines.ConfirmOrderTableRecId
                    join RecId, AuthorizationType, AuthorizationId
                        from authorizationSchemesTableLoc
                        where authorizationSchemesTableLoc.RecId             == confirmOrderTable.AuthorizationSchemesTableRecId
                           && authorizationSchemesTableLoc.AuthorizationType == authorizationSchemesTable.AuthorizationType
                           && authorizationSchemesTableLoc.RecId             != authorizationSchemesTable.RecId;

                if (confirmOrderLines.RecId)
                {
                    continue;
                }

                select firstonly CustConfirmJourRecId, RecId
                    from tmpConfirmOrderTableLoc
                    where tmpConfirmOrderTableLoc.CustConfirmJourRecId == custConfirmJour.RecId;

                if (!tmpConfirmOrderTableLoc)
                {
                    tmpConfirmOrderTableLoc.AuthorizationSchemesTableRecId = authorizationSchemesTable.RecId;
                    tmpConfirmOrderTableLoc.CustConfirmJourRecId           = custConfirmJour.RecId;
                    tmpConfirmOrderTableLoc.insert();
                }

                tmpConfirmOrderLinesLoc.clear();
                tmpConfirmOrderLinesLoc.Mark                   = NoYes::Yes;
                tmpConfirmOrderLinesLoc.CustConfirmTransRecId  = custConfirmTrans.RecId;
                tmpConfirmOrderLinesLoc.ConfirmOrderTableRecId = tmpConfirmOrderTableLoc.RecId;
                tmpConfirmOrderLinesLoc.insert();
            }

            this.parmTmpConfirmOrderTable(tmpConfirmOrderTableLoc);
            this.parmTmpConfirmOrderLines(tmpConfirmOrderLinesLoc);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExchangeRates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the exchange rates.
    /// </summary>
    /// <param name="_fromDate">
    /// The from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateExchangeRates(
        FromDate _fromDate,
        ToDate   _toDate)
    {
        CustConfirmTrans            custConfirmTransLoc;
        InventTable                 inventTableLoc;
        CurrencyCode                currencyCodeLoc;
        boolean                     ret = true;
        InventItemSetupSupplyType   inventItemSetupSupplyTypeLoc;

        while select minof(ConfirmDate), ItemId, CurrencyCode
            from custConfirmTransLoc
            group by CurrencyCode, ItemId
            where custConfirmTransLoc.ConfirmDate >= _fromDate
               && custConfirmTransLoc.ConfirmDate <= _toDate
            join ItemId, ItemType from inventTableLoc
            where inventTableLoc.ItemId   == custConfirmTransLoc.ItemId
            join ItemId, ItemDataAreaId, DefaultOrderType from inventItemSetupSupplyTypeLoc
            where inventItemSetupSupplyTypeLoc.ItemId           == inventTableLoc.ItemId
               && inventItemSetupSupplyTypeLoc.ItemDataAreaId   == inventTableLoc.DataAreaId
               && inventItemSetupSupplyTypeLoc.DefaultOrderType == ReqPOType::Production
        {
            if (custConfirmTransLoc.CurrencyCode && custConfirmTransLoc.CurrencyCode != currencyCodeLoc)
            {
                if (!TaxExchangeRateHelper::getCustomsExchangeRate_IN(
                                                    custConfirmTransLoc.CurrencyCode,
                                                    Direction_IN::Export,
                                                    custConfirmTransLoc.ConfirmDate))
                {
                    throw error(strfmt("@GLS62271",
                                Direction_IN::Export,
                                custConfirmTransLoc.CurrencyCode,
                                custConfirmTransLoc.ConfirmDate));
                }

                currencyCodeLoc = custConfirmTransLoc.CurrencyCode;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>