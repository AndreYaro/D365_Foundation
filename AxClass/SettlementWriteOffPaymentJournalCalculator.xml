<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffPaymentJournalCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SettlementWriteOffPaymentJournalCalculator</c> class manages the calculation of write off amounts
/// based on the context of a customer or vendor payment journal.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SettlementWriteOffCalculator)),
    ExportMetadata(enumStr(SettlementWriteOffOrigin), enumLiteralStr(SettlementWriteOffOrigin, PaymentJournal))]
internal final class SettlementWriteOffPaymentJournalCalculator extends SettlementWriteOffCalculator
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePotentialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment amount. The adjustment amount represents the difference between the settlement amount
    /// for all documents as marked and the available payment amount after accounting for taxes and cash discounts.
    /// </summary>
    /// <param name = "_refRecId">The payment journal record identifier.</param>
    /// <param name = "_refTableId">The payment journal table identifier.</param>
    /// <param name = "_adjustmentDate">The adjustment date.</param>
    /// <returns>A <c>SettlementWriteOffCalculatedTransactions</c> class containing calculated adjustment amounts.</returns>
    internal SettlementWriteOffCalculatedTransactions calculatePotentialAdjustment(SettlementWriteOffTransactionContext _transactionContext)
    {
        SettlementWriteOffCalculatedTransactions settlementWriteOffCalculatedTransactions;

        LedgerJournalTrans ledgerJournalTrans = LedgerJournalTrans::findRecId(_transactionContext.parmRecId(), false);

        if (ledgerJournalTrans)
        {
            settlementWriteOffCalculatedTransactions = this.calcAdjustmentAmount(
                ledgerJournalTrans,
                ledgerJournalTrans.amount(),
                _transactionContext.parmAdjustmentDate());
        }

        return settlementWriteOffCalculatedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment amounts for all transactions marked by the originating payment journal line.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The originating payment journal line.</param>
    /// <param name = "_totalAvailablePayment">The payment amount available from the payment journal line.</param>
    /// <param name = "_adjustmentDate">The date for adjustment.</param>
    /// <returns>The set of calculated adjustments.</returns>
    private SettlementWriteOffCalculatedTransactions calcAdjustmentAmount(
        LedgerJournalTrans _ledgerJournalTrans,
        AmountCur _totalAvailablePayment,
        TransDate _adjustmentDate)
    {
        SettlementWriteOffCalculatedTransactions settlementWriteOffCalculatedTransactions = SettlementWriteOffCalculatedTransactions::newFromCurrency(_ledgerJournalTrans.CurrencyCode);

        this.initForCalculation(_ledgerJournalTrans, _ledgerJournalTrans.CurrencyCode);

        if (this.isPaymentInsufficientForSettlement(_ledgerJournalTrans, _totalAvailablePayment))
        {
            this.applyAvailablePaymentToDocuments(
                _ledgerJournalTrans,
                _totalAvailablePayment,
                _adjustmentDate);

            settlementWriteOffCalculatedTransactions.parmPotentialAdjustmentAmount(this.calculatePotentialAdjustmentAmount(_ledgerJournalTrans));
        }

        settlementWriteOffCalculatedTransactions.saveSpecTransWriteOffTmpState(specTransWriteOffTmp);
        settlementWriteOffCalculatedTransactions.saveSpecTransWriteOffTmpBalanceState(specTransWriteOffTmp);

        return settlementWriteOffCalculatedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentInsufficientForSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the payment amount specified on the originating payment journal line is insufficient to match
    /// the set of marked transactions. An insufficient match means there are amounts for write off.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The originating payment journal line.</param>
    /// <param name = "_totalAvailablePayment">The total payment amount available. </param>
    /// <returns>True if the payment amount is insufficient; otherwise, false.</returns>
    private boolean isPaymentInsufficientForSettlement(LedgerJournalTrans _ledgerJournalTrans, AmountCur _totalAvailablePayment)
    {
        boolean isPaymentInsufficient;

        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrency(
            Ledger::primaryLedger(CompanyInfo::findDataArea(_ledgerJournalTrans.Company).RecId),
            _ledgerJournalTrans.CurrencyCode);

        AmountCur totalSettleAmountForPayment = SpecTransManager::getTotalSettleAmountForSpecReference(
            _ledgerJournalTrans.company(),
            _ledgerJournalTrans.TableId,
            _ledgerJournalTrans.RecId,
            _ledgerJournalTrans.CurrencyCode,
            _ledgerJournalTrans.Company,
            _ledgerJournalTrans.TransDate,
            exchangeRateHelper.prepareExchangeRateForStorage(_ledgerJournalTrans.crossRate()));

        if (abs(totalSettleAmountForPayment) > abs(_totalAvailablePayment))
        {
            isPaymentInsufficient = true;
        }

        return isPaymentInsufficient;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForApplyingPaymentsToDocuments</Name>
				<Source><![CDATA[
    internal Query getQueryForApplyingPaymentsToDocuments(Common _paymentReference)
    {
        return queryGenerator.getQueryForPaymentJournalMatchSettlement(
            _paymentReference.company(),
            _paymentReference.TableId,
            _paymentReference.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new ()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>