<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventAlternativeProductUsageStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventAlternativeProductUsageStrategy</c> abstract class is the base class for handling different
/// alternative product usage conditions.
/// </summary>
abstract public class InventAlternativeProductUsageStrategy
{
    private InventAlternativeProductUsageRequest request;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeRequest</Name>
				<Source><![CDATA[
    private void initializeRequest(InventAlternativeProductUsageRequest _request)
    {
        request = _request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequest</Name>
				<Source><![CDATA[
    final protected InventAlternativeProductUsageRequest parmRequest()
    {
        return request;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyAlternativeProductUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether an alternative product should be used as a replacement for the requested released product.
    /// </summary>
    /// <returns>
    /// The <c>InventAlternativeProductUsageResponse</c> response object containing the verification result.
    /// </returns>
    public InventAlternativeProductUsageResponse verifyAlternativeProductUse()
    {
        InventAlternativeProductUsageResponse response = InventAlternativeProductUsageResponse::newResponse();

        this.initializeReponse(response);
        response.endInitialization();

        return response;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeReponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the verification response based on the current strategy.
    /// </summary>
    /// <param name = "_response">
    /// An <c>InventAlternativeProductUsageResponse</c> response object to initialize.
    /// </param>
    protected void initializeReponse(InventAlternativeProductUsageResponse _response)
    {
        _response.assignReplaceWithAlternativeProduct(this.replaceWithAlternativeProduct());
        _response.assignAlternativeProduct(this.parmRequest().parmInventTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>replaceWithAlternativeProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the verification whether the current requested released product should be replaced with an alternative product.
    /// </summary>
    /// <returns>
    /// true if the product should be replaced; otherwise, false.
    /// </returns>
    abstract protected boolean replaceWithAlternativeProduct()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStrategy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new alternative product usage strategy based on the requested input.
    /// </summary>
    /// <param name = "_request">
    /// A <c>InventAlternativeProductUsageRequest</c> request object containing information about the strategy to instantiate.
    /// </param>
    /// <returns>
    /// The instantiated <c>InventAlternativeProductUsageStrategy</c> strategy object.
    /// </returns>
    [HookableAttribute(false)]
    static public InventAlternativeProductUsageStrategy newStrategy(InventAlternativeProductUsageRequest _request)
    {
        InventAlternativeProductUsageFactoryAttribute attribute = new InventAlternativeProductUsageFactoryAttribute(_request.parmAlternativeProductUsageCondition());
        InventAlternativeProductUsageStrategy strategy = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventAlternativeProductUsageStrategy), attribute) as InventAlternativeProductUsageStrategy;

        if (!strategy)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        strategy.initializeRequest(_request);

        return strategy;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>