<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlRSV1</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCtrlRSV1 extends RPayPFReportCtrl
{
    RPayCounterUnit                 tF, fF, fB;
    RPayGroup                       gr66, gr67;
    Range                           deductionCodeExceedMax;
    RpayFundDeductionCode           deductionCodeInvalids,
                                    deductionCode212;
    RPayRateCode                    rounding;

    Range                           codesToExclude,
                                    wholePeriod,
                                    month1,
                                    month2,
                                    month3,
                                    beforeQuarter,
                                    currentQuarter,
                                    fromYearStart;

    RPayReportSocialTaxPeriod       reportPeriod;
    RPayYearPeriod                  payYear;

    NoYes                           correcting;

    TransDate                       periodEndDate, mth1, mth2, mth3;

    RPayAmount                      deductionAmount, deductionPctBase;
    str                             keyDeduction;

    IRPayPFReportCommand            totalFundCommand, invalidsCommand;
    RPayPFReportKeyContract_RSV     keyContract;
    RPayPFReportValueContract_RSV   valueContract;
    Counter                         pctBaseEmplQty, pctBaseEmplQtyAll;
    Set                             pctBaseEmplQtySet, pctBaseEmplQtyAllSet;

    #RPayPFReport_RSV1


    #localmacro.CurrentList
        reportPeriod,
        payYear,
        correcting
    #endmacro

    #localmacro.pctBaseEmplQtyCheck
        keyEmplId,
        keyPeriod,
        keyCategory
    #endmacro

     #localmacro.pctBaseEmplQtyCheckAll
        keyEmplId,
        keyCategory
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFund4Deductions</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected boolean checkFund4Deductions()
    {
        if (keyFund != pensionInsuranceFund)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionCodes</Name>
				<Source><![CDATA[
        protected container deductionCodes()
    {
        container ret = connull();

        ret += [[codesToExclude, true]];

        if (deductionCodeExceedMax)
        {
            ret += [[deductionCodeExceedMax, false]];
        }

        ret += [[deductionCode212, true]];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionPctBaseCodes</Name>
				<Source><![CDATA[
        protected container deductionPctBaseCodes()
    {
        return connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        super();
        this.initTemplateParameters();
        pctBaseEmplQtySet    = new Set(Types::Container);
        pctBaseEmplQtyAllSet = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommands</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initCommands()
    {
        keyContract.reset();
        keyContract.parmEmplId(keyEmplId);
        keyContract.parmPayPeriod(keyPeriod);
        keyContract.parmFund(keyFund);
        keyContract.parmGroupId(keyGroup);
        keyContract.parmCategory(keyCategory);
        keyContract.parmForeigner(keyForeign);
        keyContract.parmStudent(keyStudent);
        keyContract.parmDeduction(keyDeduction);

        valueContract.reset();
        valueContract.parmFundAmount(fundAmount);
        valueContract.parmFundTotalAmount(fundTotalAmount);
        valueContract.parmDeductionAmount(deductionAmount);
        valueContract.parmDeductionPctBase(deductionPctBase);
        valueContract.parmPctBaseEmplQty(pctBaseEmplQty);
        valueContract.parmPctBaseEmplQtyAll(pctBaseEmplQtyAll);

        totalFundCommand.parmValue([keyContract.pack(), valueContract.pack()]);
        invalidsCommand.parmValue ([keyContract.pack(), valueContract.pack()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
        protected void initData()
    {
        keyContract      = new RPayPFReportKeyContract_RSV();
        valueContract    = new RPayPFReportValueContract_RSV();
        reportData       = new RPayPFReportDataRSV1();
        totalFundCommand = new RPayPFReportCommandRSV(reportData, [#TotalAmountDS]);
        invalidsCommand  = new RPayPFReportCommandRSV(reportData, [#InvalidDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeeData</Name>
				<Source><![CDATA[
        protected void initEmployeeData()
    {
        this.initGroup();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplQuery</Name>
				<Source><![CDATA[
        protected void initEmplQuery()
    {
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGroup</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initGroup()
    {
        keyGroup = '';
        if (RPayGroupMember::MemberByGroup(keyEmplId, gr66))
        {
            keyGroup = gr66;
        }

        if (RPayGroupMember::MemberByGroup(keyEmplId, gr67))
        {
            keyGroup = gr67;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportCommand</Name>
				<Source><![CDATA[
        protected void initReportCommand()
    {
        ReportPeriod_RU tmpPeriod = keyPeriod;

        if (keyPeriod == mth1)
        {
            keyPeriod = dateNull() + 1;
        }
        else if (keyPeriod == mth2)
        {
            keyPeriod = dateNull() + 2;
        }
        else if (keyPeriod == mth3)
        {
            keyPeriod = dateNull() + 3;
        }
        else
        {
            keyPeriod = dateNull();
        }

        this.initCommands();

        keyPeriod = tmpPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTemplateParameters</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void initTemplateParameters()
    {
        error("@SYS133275");
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeductions</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void processDeductions()
    {
        int len;
        int i;
        container tmpCon;

        void insertDeduction()
        {
            if (deductionAmount || deductionPctBase)
            {
                this.initReportCommand();
                totalFundCommand.insert();
            }
        }

        if (!this.checkFund4Deductions())
        {
            return;
        }

        fundAmount      = 0;
        fundTotalAmount = 0;
        fundBaseAmount  = 0;

        len = conlen(deductAmounts);

        for (i = 1; i <= len; ++i)
        {
            deductionAmount = conpeek(deductAmounts, i);
            tmpCon          = conpeek(this.deductionCodes(), i);
            keyDeduction    = conpeek(tmpCon, 1);

            if (keyFund == pensionInsuranceFund && keyDeduction == deductionCodeExceedMax && deductionAmount)
            {
                if (pctBaseEmplQtySet.in([#pctBaseEmplQtyCheck]))
                {
                    pctBaseEmplQty = 0;
                }
                else
                {
                    pctBaseEmplQty = 1;
                    pctBaseEmplQtySet.add([#pctBaseEmplQtyCheck]);
                }

                if (pctBaseEmplQtyAllSet.in([#pctBaseEmplQtyCheckAll]))
                {
                    pctBaseEmplQtyAll = 0;
                }
                else
                {
                    pctBaseEmplQtyAll = 1;
                    pctBaseEmplQtyAllSet.add([#pctBaseEmplQtyCheckAll]);
                }
            }

            insertDeduction();
            pctBaseEmplQty    = 0;
            pctBaseEmplQtyAll = 0;
        }

        deductionAmount = 0;

        len = conlen(deductBasePctAmount);

        for (i = 1; i <= len; ++i)
        {
            deductionPctBase = conpeek(deductBasePctAmount, i);
            tmpCon           = conpeek(this.deductionPctBaseCodes(), i);
            keyDeduction     = conpeek(tmpCon, 1);
            insertDeduction();
        }

        deductionPctBase  = 0;
        keyDeduction      = '';
        pctBaseEmplQty    = 0;
        pctBaseEmplQtyAll = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCommand</Name>
				<Source><![CDATA[
        protected void runCommand()
    {
        totalFundCommand.insert();
        invalidsCommand.insert();

        this.processDeductions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
        protected void unpackData(container _callParameters)
    {
        date d;
        container packedQuery;

        if (_callParameters == connull())
        {
            throw Error(Error::missingParameter(this));
        }

        parmContract.unpack(_callParameters);
        packedQuery = parmContract.queryRun();

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            this.initEmplQuery();
        }

        periodEndDate = parmContract.reportEndPeriod();

        if (periodEndDate <= 31\12\2004)
        {
            throw Error("@RUP1160");
        }
        else
        {
            d           = dateStartQtr(periodEndDate);
            wholePeriod = SysQuery::range(dateStartYr(d), dateEndQtr(d));

            reportStartDate = dateStartYr(d);
            reportEndDate   = dateEndQtr(d);

            month1      = SysQuery::range(d, endmth(d));
            mth1        = endmth(d);
            d           = nextmth(d);
            month2      = SysQuery::range(d, endmth(d));
            mth2        = endmth(d);
            d           = nextmth(d);
            month3      = SysQuery::range(d, endmth(d));
            mth3        = endmth(d);

            fromYearStart = SysQuery::range(dateStartYr(d), dateEndQtr(d));

            if (!parmContract.corrReportEndPeriod())
            {
                beforeQuarter = SysQuery::range(dateStartYr(payYear), dateStartQtr(periodEndDate) - 1);
                currentQuarter = SysQuery::range(dateStartQtr(periodEndDate), dateEndQtr(periodEndDate));
            }

            reportType = parmContract.corrReportEndPeriod() ? RpayPensionFundExportKindOfCorrection::Correctional : RpayPensionFundExportKindOfCorrection::None;
            reportCalcStartDate = endmth(reportStartDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>