<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSOutboundWorkLoadChartInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides activities for outbound work load chart.
/// </summary>
internal final class WHSOutboundWorkLoadChartInstrumentationActivities
{
    private WHSInstrumentationLogger logger;
    private const str ActivityNamePrefix = 'OutboundWorkLoadChart.';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(WHSInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>WHSOutboundWorkLoadChartInstrumentationActivities</c> class.
    /// </summary>
    /// <param name = "_logger">The logger used for logging the telemetry.</param>
    /// <returns>A new instance of the <c>WHSOutboundWorkLoadChartInstrumentationActivities</c> class.</returns>
    [Hookable(false)]
    internal  static WHSOutboundWorkLoadChartInstrumentationActivities newFromLogger(WHSInstrumentationLogger _logger)
    {
        return new WHSOutboundWorkLoadChartInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateChartData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when populating chart data.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]
    internal SysInstrumentationActivityContext populateChartData()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'PopulateChartData'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatedChartData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the number of the records inserted into the charts datasource.
    /// </summary>
    /// <param name = "_activityContext">An activity context</param>
    /// <param name = "_populatedChartDataCount">Number of records created</param>
    [Hookable(false)]
    internal void populatedChartData(
        SysInstrumentationActivityContext   _activityContext,
        int                                 _populatedChartDataCount)
    {
        _activityContext.addCustomProperty('PopulateChartData.PopulatedChartDataCount', any2Str(_populatedChartDataCount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>chartFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when selecting the filter.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]
    internal SysInstrumentationActivityContext chartFilter()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'ChartFilter'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillThrough</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new activity context used when drill through is performed.
    /// </summary>
    /// <returns>A new activity context.</returns>
    [Hookable(false)]
    internal SysInstrumentationActivityContext drillThrough()
    {
        return logger.activityContext(logger.activity(ActivityNamePrefix + 'DrillThrough'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillThroughFilters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs all the parameter values when user click the drill through.
    /// </summary>
    /// <param name = "_activityContext">An activity context.</param>
    /// <param name = "_parameters"><c>SysChartDrillThruParameters</c> instance with all the information required for drill through.</param>
    [Hookable(false)]
    internal  void drillThroughFilters(
        SysInstrumentationActivityContext   _activityContext,
        SysChartDrillThruParameters         _parameters)
    {
        _activityContext.addCustomProperty('DrillThrough.FilterName', _parameters.warehouseWorkLoadVisualizationFilterName());
        _activityContext.addCustomProperty('DrillThrough.Parameter1', _parameters.parameter1());
        _activityContext.addCustomProperty('DrillThrough.Parameter2', _parameters.parameter2());
        _activityContext.addCustomProperty('DrillThrough.MeasureName', _parameters.measureName());
        _activityContext.addCustomProperty('DrillThrough.KeyField', _parameters.keyField());
        _activityContext.addCustomProperty('DrillThrough.X-Value', _parameters.xValue());
        _activityContext.addCustomProperty('DrillThrough.Y-Value', _parameters.yValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>drillThroughMenuName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the drill through target menu name.
    /// </summary>
    /// <param name = "_activityContext">An activity context.</param>
    /// <param name = "_menuName">A menu name.</param>
    [Hookable(false)]
    internal void drillThroughMenuName(
        SysInstrumentationActivityContext   _activityContext,
        str                                 _menuName)
    {
        _activityContext.addCustomProperty('DrillThrough.MenuName', _menuName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>