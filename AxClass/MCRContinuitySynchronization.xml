<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuitySynchronization</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRContinuitySynchronization</c> class extends the run base batch and is used to ship confirm implements BatchRetryable
///  all orders for a given delivery mode and date.
/// </summary>
class MCRContinuitySynchronization extends RunBaseBatch implements BatchRetryable
{
    MCRContinuityScheduleID mcrContinuityScheduleId;

    // Dialog fields
    DialogField     dlgScheduleId;

    // Macro for the pack / unpack
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        mcrContinuityScheduleId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ClassDescription ret;

        ret = super();

        if (!ret)
        {
            ret = "@MCR31342";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private void createLine(
        MCRContinuityCustHeader     _custHeader,
        MCRContinuityScheduleLine   _scheduleLine,
        int                         _eventCounter,
        MCRContinuityCustLine       _continuityCustLine_prev)
    {
        MCRContinuityCustLine       continuityCustLine;
        SalesLine                   salesLine;
        MCRContinuityCustLineId     continuityCustLineID;
        MCRContinuityCalcOrderDate  continuityCalcOrderDate = new MCRContinuityCalcOrderDate();

        continuityCustLine.InventTransId    = _custHeader.InventTransId;
        continuityCustLine.ItemId           = _scheduleLine.ItemID;
        continuityCustLine.InventDimId      = _scheduleLine.InventDimId;
        continuityCustLine.StartDate        = continuityCalcOrderDate.getOrderDate(_scheduleLine, _continuityCustLine_prev);
        continuityCustLine.DeliveryMode     = _scheduleLine.DlvModeId;
        continuityCustLine.EventId          = _eventCounter;
        continuityCustLine.ScheduleEventID  = _scheduleLine.EventID;
        continuityCustLine.PaymentSchedLine = _scheduleLine.PaymSchedId;

        // Format the price based on the currency of the order that is being processed.
        salesLine                           = SalesLine::findInventTransId(_custHeader.InventTransId);
        continuityCustLine.Price            = _scheduleLine.convertPrice(salesLine.CurrencyCode);
        // Multi-quantity customer continuity lines.
        //
        continuityCustLine.QuantityOrdered  = salesLine.SalesQty * _scheduleLine.SalesQty;
        continuityCustLine.SalesQty         = salesLine.SalesQty * _scheduleLine.SalesQty;
        //
        continuityCustLine.SalesQtyUOM      = _scheduleLine.SalesQtyUOM;
        continuityCustLine.ShipDate         = this.getShipDate(continuityCustLine);
        continuityCustLine.ActionCode       = _scheduleLine.ActionCode;

        // Set Line Id through a sequence number
        continuityCustLineID                = NumberSeq::newGetNum(MCROrderParameters::numRefContinuityCustomerLineID()).num();
        continuityCustLine.LineID           = continuityCustLineID;

        continuityCustLine.insert();

        // The record that was inserted must be reselected and ship date assigned.  This can not happen
        // in the initial insert, because the payment schedule table needs the continuitycustline rec id.
        ttsBegin;
        select forupdate firstonly continuityCustLine
            where continuityCustLine.LineID == continuityCustLineID;

        continuityCustLine.ShipDate         = this.getShipDate(continuityCustLine);
        continuityCustLine.update();
        ttsCommit;

        info(strFmt("@MCR31333", int2str(_eventCounter), salesLine.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Adds the item ID to the dialog box allowing the user to run a batch over the selected
    ///  item.
    /// </summary>
    /// <returns>
    /// The dialog with the schedule and item values.
    /// </returns>
    public Object dialog()
    {
        DialogGroup                 dialogGrp1;
        DialogGroup                 dialogGrp2;
        DialogRunbase               dialog;

        // Setup the dialog
        dialog = new DialogRunbase("@MCR34079", this);
        dialogGrp1 = dialog.addGroup('');
        dialogGrp1.frameType(FormFrameType::None);
        dialogGrp1.columns(1);
        // Add the group for the Criteria
        dialogGrp2 = dialog.addGroup("@SYS13128", dialogGrp1);
        dialogGrp2.frameType(FormFrameType::Auto);

        // Prompt for "Delivery mode"
        dlgScheduleId = dialog.addField(extendedTypeStr(MCRContinuityScheduleID), "@MCR12605", "@MCR34080");
        dlgScheduleId.value(mcrContinuityScheduleId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPost</Name>
				<Source><![CDATA[
    protected void dialogPost(Object dialog)
    {
        super(dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the dialog posting logic.
    /// </summary>
    /// <param name="_dialog">
    /// The <c>DialogRunbase</c> object to be run.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the value entered by the user.
    /// </summary>
    /// <returns>
    ///  A <c>boolean</c> value to indicate the update of the value.
    /// </returns>
    public boolean getFromDialog()
    {
        mcrContinuityScheduleId = dlgScheduleId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getScheduleIdFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the schedule ID entered by the user.
    /// </summary>
    public void getScheduleIdFromDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the ship date based on the payment schedule value.
    /// </summary>
    /// <param name="_mcrContinuityCustLine">
    /// The continuity cust line used to calculate the ship date.
    /// </param>
    /// <returns>
    /// The ship date.
    /// </returns>
    public  DlvDate getShipDate(MCRContinuityCustLine  _mcrContinuityCustLine)
    {
        DlvDate newshipDate;

        if (_mcrContinuityCustLine.PaymentSchedLine != "")
        {
            newshipDate = CustPaymSchedLine::mcrFindShippingRecord(_mcrContinuityCustLine.RecId).DueDate;
        }
        if (!newshipDate)
        {
            newshipDate = _mcrContinuityCustLine.StartDate;
        }

        return newshipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes values for the <c>MCRContinuitySynchronization</c> class.
    /// </summary>
    /// <returns>
    /// true.
    /// </returns>
    public boolean init()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the continuity customer schedules with its'
    /// master schedule records.
    /// </summary>
    /// <remarks>
    /// If updates are needed, of the the customer continuity line is updated, if new lines were
    /// created, customer continuity lines are created.
    /// </remarks>
    public void run()
    {
        MCRContinuityCustHeader      continuityCustHeader;
        MCRContinuityCustLine        continuityCustLine, continuityCustLine_prev;
        MCRContinuityScheduleLine    scheduleLine;

        int                         eventcounter;

        super ();

        // set prefix to indicate batch run has started
        setPrefix("@MCR34078");
        try
        {
            // If we have a schedule ID go ahead and synchronize the schedule
            if (mcrContinuityScheduleId)
            {
                // select the schedule line in increasing order, and then update or insert
                // customer continuity lines accordingly
                while select scheduleLine
                    order by EventID asc
                    where scheduleLine.ScheduleID == mcrContinuityScheduleId
                {
                    eventcounter = scheduleLine.EventID;

                    // select continuity customer header applicable
                    while select continuityCustHeader
                        where continuityCustHeader.ScheduleId == mcrContinuityScheduleId
                    {
                        // try to find a continuity customer line for this event ID and order
                        select firstonly continuityCustLine
                            where continuityCustLine.InventTransId == continuityCustHeader.InventTransId
                               && continuityCustLine.EventId == eventcounter;
                        // if there is no continuity customer line for this event ID and order,
                        // a line needs to be created
                        if (!continuityCustLine)
                        {
                            this.createLine(continuityCustHeader, scheduleLine, eventcounter, continuityCustLine_prev);
                        }
                        // if there is a line for this event ID and order...
                        else if (continuityCustLine.SalesId == "")
                        {
                            // then update the line in case the dates or anything have changed.
                            this.updateLine(continuityCustLine, scheduleLine, eventcounter, continuityCustLine_prev);
                        }
                        // muliple end events, still need to update action code
                        else
                        {
                             this.updateActionEvent(continuityCustLine, scheduleLine, eventcounter);
                        }

                        continuityCustLine_prev.data(continuityCustLine);
                    }
                }
            }
        }
        catch(Exception::Deadlock)
        {
            retry;
        }
        // set info to indicate that the batch has completed
        info("@MCR34077");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActionEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates a customer continuity line based on the scheduleline being passed in
    ///  action code and event ID only.
    /// </summary>
    /// <param name="_custLine">
    /// The continuity cust line to be updated.
    /// </param>
    /// <param name="_scheduleLine">
    /// The schedule line used to update the continuuity cust line.
    /// </param>
    /// <param name="_eventCounter">
    /// The even counter on the continuity line.
    /// </param>
    public void updateActionEvent(
        MCRContinuityCustLine _custLine,
        MCRContinuityScheduleLine _scheduleLine,
        int _eventCounter)
    {
        MCRContinuityCustLine    continuityCustLine;
        MCRContinuityCustHeader  continuityCustHeader;
        MCRContinuityCustLineId  continuityCustLineID;
        MCRContinuityCalcOrderDate continuityCalcOrderDate = new MCRContinuityCalcOrderDate();

        ttsBegin;
        continuityCustLine = MCRContinuityCustLine::findRecId(_custLine.RecId, true);

        continuityCustLine.EventId = _eventCounter;
        continuityCustLine.ScheduleEventID = _scheduleLine.EventID;

        // if previously was end and now it's not, then complete must be updated.
        if (continuityCustLine.ActionCode == MCRContinuityActionCode::End
        && _scheduleLine.ActionCode == MCRContinuityActionCode::Normal)
        {
            continuityCustHeader = MCRContinuityCustHeader::find(continuityCustLine.InventTransId, true);
            continuityCustHeader.Complete = NoYes::No;
            continuityCustHeader.update();
        }

        continuityCustLine.ActionCode = _scheduleLine.ActionCode;

        // Set Line Id through a sequence number
        continuityCustLineID = NumberSeq::newGetNum(MCROrderParameters::numRefContinuityCustomerLineID()).num();
        continuityCustLine.LineID = continuityCustLineID;

        continuityCustLine.update();
        ttsCommit;

        info(strFmt("@MCR31334", int2str(_eventCounter), SalesLine::findInventTransId(continuityCustLine.InventTransId).SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates a customer continuity line based on the schedule line being passed in.
    /// </summary>
    /// <param name="_custLine">
    /// The continuity cust line to be updated.
    /// </param>
    /// <param name="_scheduleLine">
    /// The schedule line based on which the update is done.
    /// </param>
    /// <param name="_eventCounter">
    /// The event counter on he continuity lines.
    /// </param>
    /// <param name="_continuityCustLine_prev">
    /// The previous continuity cust line.
    /// </param>
    public void updateLine(
        MCRContinuityCustLine       _custLine,
        MCRContinuityScheduleLine   _scheduleLine,
        int                         _eventCounter,
        MCRContinuityCustLine       _continuityCustLine_prev)
    {
        MCRContinuityCustLine       continuityCustLine;
        SalesLine                   salesLine;
        MCRContinuityCustLineId     continuityCustLineID;
        MCRContinuityCalcOrderDate  continuityCalcOrderDate = new MCRContinuityCalcOrderDate();

        ttsBegin;
        continuityCustLine                  = MCRContinuityCustLine::findRecId(_custLine.RecId, true);

        continuityCustLine.InventTransId    = _custLine.InventTransId;
        continuityCustLine.ItemId           = _scheduleLine.ItemID;
        continuityCustLine.InventDimId      = _scheduleLine.InventDimId;

        continuityCustLine.StartDate        = continuityCalcOrderDate.getOrderDate(_scheduleLine, _continuityCustLine_prev);
        continuityCustLine.DeliveryMode     = _scheduleLine.DlvModeId;
        continuityCustLine.EventId          = _eventCounter;
        continuityCustLine.ScheduleEventID  = _scheduleLine.EventID;

        continuityCustLine.PaymentSchedLine = _scheduleLine.PaymSchedId;

        // Format the price based on the currency of the order that is being processed.
        salesLine = SalesLine::findInventTransId(_custLine.InventTransId);
        continuityCustLine.Price            = _scheduleLine.convertPrice(salesLine.CurrencyCode);

        // Multi-quantity customer continuity lines.
        //
        continuityCustLine.QuantityOrdered  = salesLine.SalesQty * _scheduleLine.SalesQty;
        continuityCustLine.SalesQty         = salesLine.SalesQty * _scheduleLine.SalesQty;
        //
        continuityCustLine.SalesQtyUOM      = _scheduleLine.SalesQtyUOM;
        continuityCustLine.ShipDate         = this.getShipDate(continuityCustLine);

        continuityCustLine.ActionCode       = _scheduleLine.ActionCode;

        // Set Line Id through a sequence number
        continuityCustLineID                = NumberSeq::newGetNum(MCROrderParameters::numRefContinuityCustomerLineID()).num();
        continuityCustLine.LineID           = continuityCustLineID;

        continuityCustLine.update();
        ttsCommit;

        info(strFmt("@MCR31334", int2str(_eventCounter), salesLine.SalesId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that event IDs are unique.
    /// </summary>
    /// <param name="calledFrom">
    /// The form to be called via the super call; optional.
    /// </param>
    /// <returns>
    /// true if standard validation passes and if event IDs are unique; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        // If we have a schedule ID and validation comes back
        // true go ahead and synchronize the schedule
        ret = ret && this.validateEventIDs();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEventIDs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that no event ID's are duplicated.
    /// </summary>
    /// <returns>
    /// true if the event ID's are valid; otherwise, false.
    /// </returns>
    public boolean validateEventIDs()
    {
        MCRContinuityScheduleLine    mcrContinuityScheduleLine;
        MCRContinuityScheduleLine    mcrContinuityScheduleLineDup;
        boolean                      retVal = true;

        select firstOnly RecId from mcrContinuityScheduleLine
            where mcrContinuityScheduleLine.ScheduleID == mcrContinuityScheduleId
            exists join mcrContinuityScheduleLineDup
                where mcrContinuityScheduleLineDup.ScheduleID == mcrContinuityScheduleId
                    && mcrContinuityScheduleLineDup.EventID == mcrContinuityScheduleLine.EventID
                    && mcrContinuityScheduleLineDup.RecId != mcrContinuityScheduleLine.RecId;

        if (mcrContinuityScheduleLine)
        {
            retVal = checkFailed(strFmt("@MCR35752", mcrContinuityScheduleId));
        }

        return retVal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// constructs an object of the class <c>MCRContinuitySynchronization</c>.
    /// </summary>
    /// <returns>
    /// An <c>objec</c> of type <c>MCRContinuitySynchronization</c>.
    /// </returns>
    public static MCRContinuitySynchronization construct()
    {
        return new MCRContinuitySynchronization();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        MCRContinuitySynchronization    mcrContinuitySynchronization;

        mcrContinuitySynchronization = new MCRContinuitySynchronization();

        if (mcrContinuitySynchronization.prompt())
        {
            mcrContinuitySynchronization.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// This batch job is not retryable because run() is not wrapped with a transaction.
    /// </summary>
    /// <returns>An instance of BatchInfo with the configuration for retryable and retries.</returns>
    public BatchInfo batchInfo()
    {
        BatchInfo info = super();

        info.parmRetryable(false);
        info.parmRetriesOnFailure(0);

        return info;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>