<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposalDepreciationStorno</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetProposalDepreciationStorno extends RAssetProposal implements BatchRetryable
{
    container groupAssets, insertedAssets;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addGroupAssets</Name>
				<Source><![CDATA[
    private void addGroupAssets()
    {
        RAssetLifeHist    lifeHist;
        RAssetDeprProfile profile;
        RAssetStandards   taxStandards;
        ;

        insertedAssets = conIns(insertedAssets, 1, rAssetStandards.RecId);
        if (conFind(groupAssets, rAssetStandards.RecId))
        {
            groupAssets = conDel(groupAssets, conFind(groupAssets, rAssetStandards.RecId), 1);
        }

        select firstonly RecId from lifeHist
            where lifeHist.AccountNum      == rAssetStandards.AssetId
               && lifeHist.AssetStandardId == rAssetStandards.AssetStandardId
               && lifeHist.ChangeDate      >= (runDate - 1)
               && lifeHist.rAssetDeprProfile
        exists join profile
            where profile.RecId      == lifeHist.rAssetDeprProfile
               && profile.DeprMethod == RAssetDeprMethod::TaxNonLinearGroup;

        if (lifeHist.RecId)
        {
            while select RecId from taxStandards
                where taxStandards.AssetGroup  == rAssetStandards.AssetGroup
                   && taxStandards.LastDepDate >= runDate
                   && taxStandards.RecId       != rAssetStandards.RecId
                   && !taxStandards.DisposalDate
                   && taxStandards.Depreciation
            exists join lifeHist
                where lifeHist.AccountNum      == taxStandards.AssetId
                   && lifeHist.AssetStandardId == taxStandards.AssetStandardId
                   && lifeHist.ChangeDate      >= (runDate - 1)
                   && lifeHist.rAssetDeprProfile
            exists join profile
                where profile.RecId      == lifeHist.rAssetDeprProfile
                   && profile.DeprMethod == RAssetDeprMethod::TaxNonLinearGroup
            {
                if (! conFind(groupAssets, rAssetStandards.RecId) &&
                    ! conFind(insertedAssets, rAssetStandards.RecId))
                {
                    groupAssets = conIns(groupAssets, 1, taxStandards.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        return RAssetTransType::Depreciation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalLine</Name>
				<Source><![CDATA[
    public boolean canCreateJournalLine(RAssetStandardId _rAssetStandardId)
    {
        if (! rAssetStandards.Depreciation || rAssetStandards.BlockDepreciation)
            return false;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount        = 0,
                                   boolean          _stornoGroupAssets  = true)
    {
        RAssetTrans               rAssetTrans;
        LedgerJournalTrans        ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        TransDate                 accountingDate;
    
        while select rAssetTrans
            order by AssetDeprPeriod
            where rAssetTrans.AccountNum      == rAssetTable.AccountNum        &&
                  rAssetTrans.AssetTransType  == RAssetTransType::Depreciation &&
                  rAssetTrans.AssetStandardId == _assetStandardId              &&
                  rAssetTrans.AssetDeprPeriod >= runDate                       &&
                  ! rAssetTrans.StornoRecId
        {
            accountingDate = this.checkFirstDate(rAssetTrans.TransDate, rAssetTrans.AccountNum);
            if (rAssetTrans.TransDate != accountingDate)
            {
                rAssetJournal.parmCorrect(true);
                rAssetJournal.parmAccountingDate(accountingDate);
            }
            else
            {
                rAssetJournal.parmCorrect(false);
            }
    
            rAssetJournal.createVoucher();
            rAssetJournal.createTrans(0,
                                      rAssetTable,
                                      rAssetTrans.TransDate,
                                      rAssetStandards,
                                      rAssetBudgetModelId,
                                      rAssetTrans.DepreciationBonusCost ?
                                      strFmt("@GLS116841", rAssetTrans.AssetDeprPeriod) :
                                      strFmt("@GLS116534", rAssetTrans.AssetDeprPeriod),
                                      LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(rAssetTrans.LedgerDimension));
    
            ledgerJournalTrans        = rAssetJournal.ledgerJournalTrans();
            ledgerJournalTrans_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();
    
            ledgerJournalTrans.selectForUpdate(true);
            ledgerJournalTrans_RAsset.selectForUpdate(true);
    
            ledgerJournalTrans.AmountCurCredit       = rAssetTrans.getAmountStandardCur();
            ledgerJournalTrans.OffsetLedgerDimension = rAssetTrans.OffsetLedgerDimension;
            ledgerJournalTrans.DefaultDimension      = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(rAssetTrans.LedgerDimension);
            ledgerJournalTrans.NoEdit                = NoYes::Yes;
            ledgerJournalTrans_RAsset.DeprPeriod     = rAssetTrans.AssetDeprPeriod;
            ledgerJournalTrans_RAsset.ToFromRecId    = rAssetTrans.RecId;
            ledgerJournalTrans.doUpdate();
            ledgerJournalTrans_RAsset.doUpdate();
        }
        if (_stornoGroupAssets)
            this.addGroupAssets();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
public Object dialog()
    {
        DialogRunbase dialog = super();
        ;
    
        dialog.caption("@GLS116513");
    
        dialogRunDate.label("@GLS116514");
        dialogRunDate.helpText("@GLS116526");
    
        corrGroup.visible(false);
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        rAssetStandardId  = dialogAssetStandardId.value();
        runDate           = dialogRunDate.value();
        reasonCode        = dialogReasonCode.value();
        reasonComment     = dialogReasonComment.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _queryRun = queryRun)
    {
        int                  counter;
        RecId                standardsRecId;

        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::Suspended));
        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, Status)).value(queryValue(RAssetStatus::Closed));
        super(_queryRun);

        ttsbegin;
        for (counter = 1; counter <= conLen(groupAssets); counter++)
        {
            standardsRecId = conPeek(groupAssets, counter);
            select firstonly rAssetStandards
                where rAssetStandards.RecId == standardsRecId;
            rAssetTable = RAssetTable::find(rAssetStandards.AssetId);
            if (this.canCreateJournalLine(rAssetStandards.AssetStandardId))
            {
                this.createJournalLines(rAssetStandards.AssetStandardId, true, 0, false);

            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>