<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSTransactionPurge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TMSTransactionPurge</c> class is used to run batch job for transaction purge.
/// </summary>
class TMSTransactionPurge extends RunBaseBatch implements BatchRetryable
{
    DialogField     dialogDaysToKeep;
    PositiveDays    daysToKeep;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        daysToKeep
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase drb;

        drb = super();
        dialogDaysToKeep = drb.addFieldValue(extendedTypeStr(PositiveDays), daysToKeep, "@SYS7425", "@TRX904");
        drb.allowUpdateOnSelectCtrl(true);

        return drb;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        daysToKeep  = dialogDaysToKeep.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        TMSTransaction      transaction;
        utcDateTime         beforeUTCDateTime = DateTimeUtil::utcNow();

        if (daysToKeep == 0)
        {
            daysToKeep = 1;
        }

        beforeUTCDateTime = DateTimeUtil::addDays(beforeUTCDateTime, -daysToKeep);
        select minof(CreatedDateTime) from transaction;
        utcdatetime minCreatedDateTime = transaction.CreatedDateTime;

        int interval = 7;
        utcdatetime fromDateTime = minCreatedDateTime;
        utcdatetime toDateTime = DateTimeUtil::addDays(fromDateTime, interval);
        if (toDateTime > beforeUTCDateTime)
        {
            toDateTime = beforeUTCDateTime;
        }

        try
        {
            if (fromDateTime >= beforeUTCDateTime)
            {
                return;
            }

            while (toDateTime <= beforeUTCDateTime)
            {
                ttsbegin;
                delete_from transaction where transaction.CreatedDateTime >= fromDateTime && transaction.CreatedDateTime < toDateTime;
                ttscommit;

                if (toDateTime >= beforeUTCDateTime)
                {
                    break;
                }

                fromDateTime = toDateTime;
                toDateTime = DateTimeUtil::addDays(fromDateTime, interval);

                if (toDateTime > beforeUTCDateTime)
                {
                    toDateTime = beforeUTCDateTime;
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static TMSTransactionPurge construct()
    {
        return new TMSTransactionPurge();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@TRX878";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TMSTransactionPurge   transactionPurge;

        transactionPurge = TMSTransactionPurge::construct();

        if (transactionPurge.prompt())
        {
            transactionPurge.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>