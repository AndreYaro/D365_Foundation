<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerDistRuleProjAdvancedJournalWorkInProcessExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimDerDistRuleProjAdvancedJournalExtension</c> class is the dimension derivation distribution rule
///    extension for recognizing work in process revenue for project advanced journals.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccDistRuleProjAdvancedJournalWorkInProcess))]
class DimDerDistRuleProjAdvancedJournalWorkInProcessExtension extends DimensionDerivationRuleExtension
{
    ProjAdvancedJournal     projAdvancedJournal;
    ProjAdvancedJournalLine projAdvancedJournalLine;
    private boolean isProjOpsIntegrationFeatureEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the allocation list by using the project setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list for which to populate.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        DebitCredit side = dimensionDerivationRule.parmAccountingRule().parmSide();
        LedgerDimensionAccount mergedLedgerDimension;

        if (projAdvancedJournalLine.TransType == ProjTransType::Revenue)
        {
            ProjectDimDerivationDistRule projectDimDerivationDistRule = ProjectDimDerivationDistRule::newFromDimensionDerivationRule(dimensionDerivationRule);
            projectDimDerivationDistRule.populateDimAllocList(_ledgerDimensionAllocationList);
        }
        else
        {
            if (projAdvancedJournalLine.ProjDataAreaId == curext())
            {
                ProjTable projTable = ProjTable::find(projAdvancedJournalLine.ProjId);
                ProjCategory projCategory = ProjCategory::find(projAdvancedJournalLine.ProjCategoryId);
                ProjLineProperty projLineProperty = ProjLineProperty::find(projAdvancedJournalLine.LinePropertyId);
                boolean canAccureRevenue;
                if (ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled())
                {
                    canAccureRevenue = ProjectPosting::canAccrueRevenueWhenProjOpsIntegrationEnabled(
                                            projTable,
                                            projCategory,
                                            projLineProperty,
                                            projAdvancedJournalLine,
                                            projAdvancedJournalLine.ExtendedPrice);
                }
                else
                {
                    using (ProjectPostingParameters insertParameters = ProjectPostingParameters::parmProjContractLineNum(projAdvancedJournalLine.ContractLineId))
                    {
                        canAccureRevenue = ProjectPosting::canAccrueRevenue(
                                                projTable,
                                                projCategory,
                                                projLineProperty,
                                                projAdvancedJournalLine.ExtendedPrice);
                    }
                }

                if (canAccureRevenue)

                {
                    LedgerDimensionDefaultAccount defaultLedgerDimension = ProjectPosting::accruedRevenueLedgerDimension(
                                                                                                projTable,
                                                                                                projCategory,
                                                                                                null);

                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, projAdvancedJournalLine.DefaultDimension);
                }
            }
            else
            {
                if (ProjIntercompanyParameters::canAccrueRevenue(CompanyInfo::findDataArea(projAdvancedJournalLine.ProjDataAreaId).RecId))
                {
                    LedgerDimensionDefaultAccount defaultLedgerDimension;

                    //This is intercompany scenario for intergrated advanced journal, we should pass borrowing company projectId along with lending
                    //company categoryId to get valid ledger dimension account.
                    if(isProjOpsIntegrationFeatureEnabled)
                    {
                        defaultLedgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::SalesValue,
                                                                            projAdvancedJournalLine.ProjId,
                                                                            projAdvancedJournalLine.ProjCategoryId,
                                                                            0,
                                                                            false,
                                                                            true,
                                                                            '',
                                                                            curExt(),
                                                                            projAdvancedJournalLine.ProjDataAreaId);
                    }
                    else //Classic PMA intercompany sceanrio.
                    {
                        defaultLedgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::SalesValue,
                                                                            projAdvancedJournalLine.ProjId,
                                                                            projAdvancedJournalLine.ProjCategoryId,
                                                                            0);
                    }

                    DimensionDefault intercompanyDimensions = this.getAccrualDimensionForIntercompany(projAdvancedJournalLine.DataAreaId, projAdvancedJournalLine.ProjDataAreaId);

                    mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension,
                                                                                            projAdvancedJournalLine.DefaultDimension,
                                                                                            intercompanyDimensions);
                }
            }

            if (!mergedLedgerDimension)
            {
                // Still require valid account information for creation of distributions when revenue is not accrued.
                LedgerDimensionDefaultAccount defaultLedgerDimension;

                //This is intercompany scenario for intergrated advanced journal, we should pass borrowing company projectId along with lending
                //company categoryId to get valid ledger dimension account.
                if (isProjOpsIntegrationFeatureEnabled && projAdvancedJournalLine.ProjDataAreaId != curext())
                {
                    defaultLedgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::SalesValue,
                                                                            projAdvancedJournalLine.ProjId,
                                                                            projAdvancedJournalLine.ProjCategoryId,
                                                                            0,
                                                                            false,
                                                                            true,
                                                                            '',
                                                                            curExt(),
                                                                            projAdvancedJournalLine.ProjDataAreaId);
                }
                else //Classic PMA scenario.
                {
                    defaultLedgerDimension = ProjPosting::getLedgerDimension(ProjAccountType::SalesValue,
                                                                            projAdvancedJournalLine.ProjId,
                                                                            projAdvancedJournalLine.ProjCategoryId,
                                                                            0);
                }
                mergedLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultLedgerDimension, projAdvancedJournalLine.DefaultDimension);
            }

            LedgerDimensionAllocation ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(mergedLedgerDimension,
                                                                                        1,
                                                                                        side,
                                                                                        false);
            _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccrualDimensionForIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default dimensions that the accrual entries should use for an intercompany customer.
    /// </summary>
    /// <param name="_transactionDataAreaId">
    /// The data area ID of the company posting the transaction.
    /// </param>
    /// <param name="_contractingCompany">
    /// The data area ID of the company that has the contract with the final customer.
    /// </param>
    /// <returns>
    /// The default dimension that should be used on the accrual entries.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Thrown if the intercompany setup does not exist or is incomplete.
    /// </exception>
    private DimensionDefault getAccrualDimensionForIntercompany(DataAreaId _transactionDataAreaId, DataAreaId _contractingCompany)
    {
        CustTable                   custTable;
        InterCompanyTradingPartner  tradingPartner = InterCompanyTradingPartner::findTradingCustomer(_transactionDataAreaId, _contractingCompany);

        if (tradingPartner)
        {
            custTable = CustTable::findByPartyRecId(tradingPartner.CustomerParty);
        }

        if (!custTable)
        {
            throw error(strFmt("@SYS4005055", _contractingCompany));
        }

        return custTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the dimension derivation rule extension.
    /// </summary>
    public void initialize()
    {
        super();

        Common sourceDocumentLineImplementation = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmSourceDocumentLine().getSourceDocumentLineImplementation();
        
        if (sourceDocumentLineImplementation.TableId != tableNum(ProjAdvancedJournalLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        projAdvancedJournalLine = sourceDocumentLineImplementation;
        projAdvancedJournal = projAdvancedJournalLine.getProjAdvancedJournal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribe to the events of the dimension derivation rule extension.
    /// </summary>
    protected void subscribe()
    {
        dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>