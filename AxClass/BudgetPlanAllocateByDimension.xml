<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanAllocateByDimension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanAllocateByDimension</c> class manages the allocation by the budget allocation terms.
/// </summary>
public class BudgetPlanAllocateByDimension extends BudgetPlanAllocate
{
    #define.OneHundredPercent(100.00)

    BudgetAllocationTermRecId budgetAllocationTermRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBudgetPlanLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new budget plan lines by using the budget allocation terms and the source budget plan line.
    /// </summary>
    /// <param name="_sourceBudgetPlanLine">
    /// The <c>BudgetPlanLine</c> record ID to allocate.
    /// </param>
    protected void createBudgetPlanLines(BudgetPlanLine _sourceBudgetPlanLine)
    {
        BudgetPlanLine                  budgetPlanLineNew;
        Percent                         budgetAllocationPctProportion;
        BudgetAllocationTerm            budgetAllocationTerm;
        BudgetAllocationTermDetail      budgetAllocationTermDetail;
        Percent                         totalPercentAllocated;
        BudgetPlanCurrencyAmount        totalAmountAccumulated;
        BudgetPlanQuantity              totalQuantityAccumulated;
        BudgetPlanQuantity              totalQuantity;
        BudgetPlanCurrencyAmount        totalAmount;
        Currency                        currency;
        DimensionAttributeRecId         mainAccountDimensionAttributeId;

        currency      = Currency::find(_sourceBudgetPlanLine.TransactionCurrencyCode);
        totalQuantity = decRound((_sourceBudgetPlanLine.Quantity * factor), 2);
        totalAmount   = currency.amount_Instance(_sourceBudgetPlanLine.TransactionCurrencyAmount * factor);

        ttsBegin;

        this.deleteSourceBudgetPlanLine(_sourceBudgetPlanLine.RecId);

        mainAccountDimensionAttributeId = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        while select Percent, DefaultDimension from budgetAllocationTermDetail
            order by budgetAllocationTermDetail.LineNumber
            exists join budgetAllocationTerm
                where budgetAllocationTerm.RecId  == budgetAllocationTermRecId
                    && budgetAllocationTerm.RecId == budgetAllocationTermDetail.BudgetAllocationTerm
        {
            budgetAllocationPctProportion = budgetAllocationTermDetail.Percent / #OneHundredPercent;

            // initialize the target budget plan line table buffer with the source budget plan line table buffer.
            this.initTargetBudgetPlanLine(_sourceBudgetPlanLine, budgetPlanLineNew);

            budgetPlanLineNew.Quantity        = decRound((totalQuantity * budgetAllocationPctProportion), 2);
            budgetPlanLineNew.LedgerDimension = this.getMergedLedgerDimension(budgetAllocationTermDetail.DefaultDimension, mainAccountDimensionAttributeId, _sourceBudgetPlanLine.LedgerDimension);

            if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
            {
                budgetPlanLineNew.TransactionCurrencyAmount = currency.amount_Instance(totalAmount * budgetAllocationPctProportion);
                budgetPlanLineNew.ReportingCurrencyAmount   = currency.amount_Instance(budgetPlanLineNew.ReportingCurrencyAmount * factor * budgetAllocationPctProportion);
                budgetPlanLineNew.AccountingCurrencyAmount  = currency.amount_Instance(budgetPlanLineNew.AccountingCurrencyAmount * factor * budgetAllocationPctProportion);
            }

            if (budgetPlanLineNew.LedgerDimension && budgetPlanLineNew.validateWrite())
            {
                budgetPlanLineNew.write();
            }
            else
            {
                throw Exception::Error;
            }

            totalAmountAccumulated   += budgetPlanLineNew.TransactionCurrencyAmount;
            totalQuantityAccumulated += budgetPlanLineNew.Quantity;
            totalPercentAllocated    += budgetAllocationTermDetail.Percent;
        }

        if (totalPercentAllocated < #OneHundredPercent)
        {
            // Create a new budget plan line for the unallocated percent.
            this.initTargetBudgetPlanLine(_sourceBudgetPlanLine, budgetPlanLineNew);

            if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
            {
                budgetPlanLineNew.TransactionCurrencyAmount = totalAmount - totalAmountAccumulated;
                budgetPlanLineNew.ReportingCurrencyAmount   = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);

                budgetPlanLineNew.AccountingCurrencyAmount  = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);
            }

            budgetPlanLineNew.Quantity           = totalQuantity - totalQuantityAccumulated;
            budgetPlanLineNew.BudgetPlanScenario = targetBudgetPlanScenarioRecId;
            budgetPlanLineNew.insert();
        }
        else if (budgetPlanLineNew
            && ((totalAmount - totalAmountAccumulated)     != 0
            ||  (totalQuantity - totalQuantityAccumulated) != 0))
        {
            // Update the last line that was allocated to include the remaining amount and quanity.
            budgetPlanLineNew.reread();

            if (targetBudgetPlanScenario.UnitOfMeasureClass == UnitOfMeasureClass::Monetary)
            {
                budgetPlanLineNew.TransactionCurrencyAmount += totalAmount - totalAmountAccumulated;
                budgetPlanLineNew.ReportingCurrencyAmount   = budgetPlanCurrencyExchangeHelper.calculateReportingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);

                budgetPlanLineNew.AccountingCurrencyAmount  = budgetPlanCurrencyExchangeHelper.calculateAccountingCurrencyAmount(
                                                                budgetPlanLineNew.TransactionCurrencyAmount,
                                                                budgetPlanLineNew.TransactionCurrencyCode,
                                                                budgetPlanLineNew.EffectiveDate);
            }

            budgetPlanLineNew.Quantity += totalQuantity - totalQuantityAccumulated;
            budgetPlanLineNew.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMergedLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the merged ledger dimension from the source <c>BudgetPlanLine</c> and the default account associated with the <c>MainAccount</c>.
    /// </summary>
    /// <param name = "_budgetDefaultDimensionValueSet"> The default dimension value set. </param>
    /// <param name = "_mainAccountDimensionAttributeRecId"> The record ID of the main account dimension attribute record. </param>
    /// <param name = "_sourceLedgerDimension"> The ledger dimension value from the source <c>BudgetPlanLine</c> record. </param>
    /// <returns> The merged <c>LedgerDimensionBudgetPlanning</c> value. </returns>
    protected LedgerDimensionBudgetPlanning getMergedLedgerDimension(
        BudgetDefaultDimensionValueSet  _budgetDefaultDimensionValueSet,
        DimensionAttributeRecId         _mainAccountDimensionAttributeRecId,
        LedgerDimensionBudgetPlanning   _sourceLedgerDimension)
    {
        LedgerDimensionBudgetPlanning   ledgerDimensionBudgetPlanning;
        DefaultDimensionView            defaultDimensionView;

        // Determines if BudgetAllocationTermDetail default dimension has MainAccount value
        select firstonly DefaultDimension, DimensionAttributeId, DisplayValue
            from defaultDimensionView
            where defaultDimensionView.DefaultDimension      == _budgetDefaultDimensionValueSet
                && defaultDimensionView.DimensionAttributeId == _mainAccountDimensionAttributeRecId;

        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromMainAccountId(defaultDimensionView.DisplayValue);
        if (!ledgerDimensionDefaultAccount)
        {
            ledgerDimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_sourceLedgerDimension);
        }

        ledgerDimensionBudgetPlanning = LedgerDimensionFacade::serviceCreateLedgerDimensionForType(LedgerDimensionType::BudgetPlanning, ledgerDimensionDefaultAccount, _budgetDefaultDimensionValueSet);

        ledgerDimensionBudgetPlanning = LedgerDimensionFacade::serviceMergeLedgerDimensions(ledgerDimensionBudgetPlanning, _sourceLedgerDimension, LedgerDimensionType::BudgetPlanning);

        return ledgerDimensionBudgetPlanning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSetSourceBudgetPlanLine</Name>
				<Source><![CDATA[
    protected boolean doSetSourceBudgetPlanLine(BudgetPlanLineRecId _sourceBudgetPlanLineRecId, BudgetPlanLineRecId _newBudgetPlanLineRecId)
    {
        boolean setSourceBudgetPlanLine;

        // If the budget plan scenario of the source line is different than the budget plan scenario of the target line then set the SourceBudgetPlanLine field.
        if (BudgetPlanLine::exist(_sourceBudgetPlanLineRecId))
        {
            if (_newBudgetPlanLineRecId)
            {
                setSourceBudgetPlanLine = BudgetPlanLine::find(_sourceBudgetPlanLineRecId).BudgetPlanScenario != BudgetPlanLine::find(_newBudgetPlanLineRecId).BudgetPlanScenario;
            }
            else
            {
                setSourceBudgetPlanLine = BudgetPlanLine::find(_sourceBudgetPlanLineRecId).BudgetPlanScenario != targetBudgetPlanScenarioRecId;
            }
        }

        return setSourceBudgetPlanLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLineCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the number of allocation lines present for the given <c>BudgetAllocationTerm</c> record.
    /// </summary>
    /// <returns>
    /// The number of ledger allocation lines present for the budget allocation term.
    /// </returns>
    protected LineNum getNewLineCount()
    {
        BudgetAllocationTerm        budgetAllocationTerm;
        BudgetAllocationTermDetail  budgetAllocationTermDetail;

        select count(LineNumber) from budgetAllocationTermDetail
            exists join budgetAllocationTerm
                where budgetAllocationTerm.RecId == budgetAllocationTermRecId
                    && budgetAllocationTermDetail.BudgetAllocationTerm == budgetAllocationTerm.RecId;

        return budgetAllocationTermDetail.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(BudgetPlanAllocateRequest _budgetPlanAllocateRequest)
    {
        BudgetPlanAllocateRequestByDimension allocateRequestByDimension;

        super(_budgetPlanAllocateRequest);

        allocateRequestByDimension = _budgetPlanAllocateRequest as BudgetPlanAllocateRequestByDimension;

        budgetAllocationTermRecId = allocateRequestByDimension.parmBudgetAllocationTermRecId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the allocation by dimension on the set of <c>BudgetPlanLine</c> records.
    /// </summary>
    protected void process()
    {
        changeCompany(CompanyInfo::getDataArea(legalEntityRecId))
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetAllocationTermLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a lookup for the allocation term.
    /// </summary>
    /// <param name="_ctrl">
    /// The calling control.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity to lookup the budget allocation term.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static void budgetAllocationTermLookup(
        FormStringControl   _ctrl,
        LegalEntity         _legalEntityRecId)
    {
        SysTableLookup          sysTableLookup;

        if (!_ctrl || !_legalEntityRecId)
        {
            throw error(Error::missingParameter(null));
        }

        sysTableLookup = SysTableLookup::newParameters(
            tableNum(BudgetAllocationTerm),
            _ctrl,
            false);

        sysTableLookup.addLookupfield(fieldNum(BudgetAllocationTerm, Name));
        sysTableLookup.addLookupfield(fieldNum(BudgetAllocationTerm, Description));

        sysTableLookup.parmQuery(BudgetPlanAllocateByDimension::getAllocationTermLookupQuery(_legalEntityRecId));
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllocationTermLookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve a list of <c>BudgetAllocationTerm</c> records.
    /// </summary>
    /// <param name="_legalEntityRecId">
    /// The legal entity used to lookup the budget allocation term.
    /// </param>
    /// <returns>
    /// A query to retrieve a list of <c>BudgetAllocationTerm</c> records.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An error exception is thrown when the required parameters are null.
    /// </exception>
    public static Query getAllocationTermLookupQuery(LegalEntity _legalEntityRecId)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;

        if (!_legalEntityRecId)
        {
            throw error(Error::missingParameter(null));
        }

        queryBuildDataSource = query.addDataSource(tableNum(BudgetAllocationTerm));

        // Add legal entity to the query range
        query.allowCrossCompany(true);
        query.addCompanyRange(CompanyInfo::getDataArea(_legalEntityRecId));

        queryBuildDataSource.addSelectionField(fieldNum(BudgetAllocationTerm, Name));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAllocationTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the budget allocation term Id.
    /// </summary>
    /// <param name="_budgetAllocationTermId">
    /// The budget allocation term Id to validate.
    /// </param>
    /// <param name="_legalEntityRecId">
    /// The legal entity to validate the budget allocation term Id.
    /// </param>
    /// <returns>
    /// true if the budget allocation term Id is valid; otherwise, false.
    /// </returns>
    public static boolean validateAllocationTerm(
        BudgetAllocationTermId  _budgetAllocationTermId,
        LegalEntity             _legalEntityRecId)
    {
        BudgetAllocationTerm budgetAllocationTerm;

        changeCompany(CompanyInfo::getDataArea(_legalEntityRecId))
        {
            budgetAllocationTerm = BudgetAllocationTerm::findByTermId(_budgetAllocationTermId);
        }

        return budgetAllocationTerm != null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>