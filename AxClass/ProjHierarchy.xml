<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper functions for updating project task hierarchy sorting fields.
/// </summary>
class ProjHierarchy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateHierarchyLevelAndPathId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the specified hierarchy table hierarchy level and path ID fields calculated by each record hierarchy parent task field.
    /// </summary>
    /// <param name = "_hierarchyId">Hierarchy ID.</param>
    /// <param name = "_baseTableId">Hierarchy table ID.</param>
    /// <param name = "_hierarchyIdFieldId">Hierarchy ID field ID.</param>
    /// <param name = "_taskIdFieldId">Hierarchy task field ID.</param>
    /// <param name = "_parentTaskIdFieldId">Hierarchy parent task ID field ID.</param>
    /// <param name = "_siblingNumberFieldId">Task sibling number field ID.</param>
    /// <param name = "_levelFieldId">Hierarchy level field ID.</param>
    /// <param name = "_pathIdFieldId">Path ID field ID.</param>
    /// <param name = "_parentHierarchyTaskIdStr">The first hierachy parent task ID in string to start this calculation.</param>
    /// <param name = "_siblingNumberStr">The first sibling number in string for the above parent task to start this calculation.</param>
    /// <param name = "_parentLevelStr">The hierarchy level in string of the above parent task.</param>
    /// <param name = "_pathIdPrefix">If the specified parent is not root, specified the parent path ID + '.' as the child path ID prefix.</param>
    /// <returns>true, error handling is implemented via exceptions.</returns>
    public static boolean updateHierarchyLevelAndPathId(
		HierarchyIdBase _hierarchyId,
        int _baseTableId, 
		int _hierarchyIdFieldId, 
		int _taskIdFieldId,
        int _parentTaskIdFieldId, 
		int _siblingNumberFieldId, 
		int _levelFieldId,
		int _pathIdFieldId, 
		str _parentHierarchyTaskIdStr,
        str _siblingNumberStr = '1', 
		str _parentLevelStr = '0', 
        str _pathIdPrefix = '')
    {
        str baseTableName = tableId2Name(_baseTableId);
        str baseReferencedTableName = 'BaseTable';
        str hierarchyIdFieldName = fieldId2Name(_baseTableId, _hierarchyIdFieldId);
        str taskIdFieldName = fieldId2Name(_baseTableId, _taskIdFieldId);
        str parentTaskIdFieldName = fieldId2Name(_baseTableId, _parentTaskIdFieldId);
        str siblingNumberIdFieldName = fieldId2Name(_baseTableId, _siblingNumberFieldId);
        str levelFieldName = fieldId2Name(_baseTableId, _levelFieldId);
        str pathIdFieldName = fieldId2Name(_baseTableId, _pathIdFieldId);
        str cteTableName = 'HierarchyCTE';
        str cteReferencedTableName = 'CTE';
        str cteLevelFieldName = 'CTELevel';
        str ctePathIdFieldName = 'CTEPathId';
        str recursiveTableName = 'RecursiveTable';

        SysDictTable baseDictTable = new SysDictTable(_baseTableId);
        SysDictField dictField = baseDictTable.fieldObject(_pathIdFieldId);
        str pathIdStringSize = int2Str(dictField.fieldSize());

        str currentCompany = curExt();
        str currentPartitionStr = int642Str(getCurrentPartitionRecId());

        // The update statement form the following SQL script
        //WITH HierarchyCTE AS (
        //SELECT HierarchyId, HierarchyTaskID,
        //    1 AS CTELevel,
        //    CONVERT(VARCHAR(MAX), CONVERT(INT, TaskSiblingNumber)) AS CTEPathId,
        //    DataAreaId,
        //    Partition
        //FROM ProjPlanVersion
        //WHERE HierarchyId = @HierarchyID AND ParentHierarchyTaskId = @ParentHierarchyTaskId
        //  AND TaskSiblingNumber >= @TaskSiblingNumber
        //  AND DataAreaId = @dataAreaId AND Partition = @partition
        //UNION ALL SELECT RecursiveTable.HierarchyId, RecursiveTable.HierarchyTaskID,
        //    CTELevel + 1,
        //	  CONVERT(VARCHAR(MAX), CONCAT(CTE.CTEPathId, '.', CONVERT(INT, RecursiveTable.TaskSiblingNumber)))
        //    RecursiveTable.DataAreaId,
        //    RecursiveTable.Partition
        //FROM HierarchyCTE AS CTE
        //INNER JOIN ProjPlanVersion AS RecursiveTable ON
        //    RecursiveTable.Partition = CTE.Partition AND
        //    RecursiveTable.DataAreaId = CTE.DataAreaId AND
        //    RecursiveTable.HierarchyId = CTE.HierarchyId AND
        //    RecursiveTable.ParentHierarchyTaskId = CTE.HierarchyTaskID)
        //UPDATE BaseTable SET
        //    BaseTable.HierarchyLevel = @ParentLevel + HierarchyCTE.CTELevel,
        //    BaseTable.PathId = @PathIdPreFix + HierarchyCTE.CTEPathId
        //FROM ProjPlanVersion BaseTable
        //INNER JOIN HierarchyCTE ON
        //    BaseTable.Partition = HierarchyCTE.Partition
        //    AND BaseTable.DataAreaId = HierarchyCTE.DataAreaId
        //    AND BaseTable.HierarchyId = HierarchyCTE.HierarchyId
        //    AND BaseTable.HierarchyTaskId = HierarchyCTE.HierarchyTaskId
        //WHERE BaseTable.DataAreaId = @dataAreaId AND BaseTable.Partition = @partition

        str updateStatement =
            'WITH '+ cteTableName + ' AS ( '
            + 'SELECT ' + hierarchyIdFieldName + ', ' + taskIdFieldName + ', '
            + '1 AS ' + cteLevelFieldName + ', '
            + 'CONVERT(VARCHAR(' + pathIdStringSize + '), CONVERT(INT, ' + siblingNumberIdFieldName + ')) AS ' + ctePathIdFieldName + ', '
            + 'DataAreaId, '
            + 'Partition '
            + 'FROM ' + baseTableName + ' '
            + 'WHERE ' + hierarchyIdFieldName + ' = \'' + _hierarchyId + '\' AND ' + parentTaskIdFieldName + ' = ' + _parentHierarchyTaskIdStr + ' '
            + 'AND ' + siblingNumberIdFieldName + ' >= ' + _siblingNumberStr + ' '
            + 'AND DataAreaId = \'' + currentCompany + '\' AND Partition = ' + currentPartitionStr + ' '
            + 'UNION ALL SELECT ' + recursiveTableName + '.' + hierarchyIdFieldName + ', ' + recursiveTableName + '.' + taskIdFieldName + ', '
            + cteLevelFieldName + ' + 1, CONVERT(VARCHAR(' + pathIdStringSize + '), CONCAT(' + cteReferencedTableName + '.' + ctePathIdFieldName + ', \'.\', '
            + 'CONVERT(INT, ' + recursiveTableName + '.' + siblingNumberIdFieldName + '))), '
            + recursiveTableName + '.DataAreaId, '
            + recursiveTableName + '.Partition '
            + 'FROM ' + cteTableName + ' AS ' + cteReferencedTableName + ' '
            + 'INNER JOIN ' + baseTableName + ' AS ' + recursiveTableName + ' ON '
            + recursiveTableName + '.Partition = ' + cteReferencedTableName + '.Partition AND '
            + recursiveTableName + '.DataAreaId = ' + cteReferencedTableName + '.DataAreaId AND '
            + recursiveTableName + '.' + hierarchyIdFieldName + ' = ' + cteReferencedTableName + '.' + hierarchyIdFieldName + ' AND '
            + recursiveTableName + '.' + parentTaskIdFieldName + ' = ' + cteReferencedTableName + '.' + taskIdFieldName + ') '
            + 'UPDATE ' + baseReferencedTableName + ' SET '
            + baseReferencedTableName + '.' + levelFieldName +  ' = ' + _parentLevelStr + ' + ' + cteTableName + '.' + cteLevelFieldName + ', '
            + baseReferencedTableName + '.' + pathIdFieldName + ' = \'' + _pathIdPrefix + '\' + ' + cteTableName + '.' + ctePathIdFieldName + ' '
            + 'FROM ' + baseTableName + ' ' + baseReferencedTableName + ' '
            + 'INNER JOIN ' + cteTableName + ' ON '
            + baseReferencedTableName + '.Partition = ' + cteTableName + '.Partition AND '
            + baseReferencedTableName + '.DataAreaId = ' + cteTableName + '.DataAreaId AND '
            + baseReferencedTableName + '.' + hierarchyIdFieldName + ' = ' + cteTableName + '.' + hierarchyIdFieldName + ' AND '
            + baseReferencedTableName + '.' + taskIdFieldName + ' = ' + cteTableName + '.' + taskIdFieldName + ' '
            + 'WHERE ' + baseReferencedTableName + '.DataAreaId = \'' + currentCompany + '\' AND ' + baseReferencedTableName + '.Partition = ' + currentPartitionStr;
            
        ProjHierarchy::executeSQLStatement(updateStatement, SqlParams::create());
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetSelectionGroupSQLStatementV2</Name>
				<Source><![CDATA[
	/// <summary>
    /// Used to place temp records into a selection group for parallel mutation.
    /// </summary>
    /// <param name = "_tempTableName">Name of the temp table, which stores selection groups.</param>
    /// <param name = "_tempTableRefSortRecIdField">Name of temp table 'RefSortRecId' field, used to join with sorting table.</param>
    /// <param name = "_tempTableSelectionGroupField">Name of temp table 'SelectionGroup' field.</param>
    /// <param name = "_sortingTableName">Name of the sorting table, which stores hierarchy sorting information.</param>
    /// <param name = "_selectionGroupExpression">Selection group expression to assign these records to.</param>
    /// <param name = "_predicate">Predicate to satisfy in order to be placed in this selection group. The sorting record may be referenced through name 'Sort',
	/// and the temp table record may be referenced through the name 'Temp'.</param>
    /// <returns>A SQL query string for performing the selection operation.</returns>
	public static str getSetSelectionGroupSQLStatementV2(
		str _tempTableName,
		str _tempTableRefSortRecIdField,
		str _tempTableSelectionGroupField,
		str _sortingTableName,
		str _selectionGroupExpression,
		str _predicate)
    {
		// Create a query similar to:
		// UPDATE Temp
		// SET
		//		Temp.SelectionGroup = (@_selectionGroupExpression)
		// FROM ProjHierarchyTemp Temp
		// INNER JOIN ProjHierarchySorting Sort ON
		//		Sort.Partition = @currentPartition AND Sort.RecId = Temp.RefSortRecId
		// WHERE
		//		(@_predicate)

        str currentPartition = int642Str(getCurrentPartitionRecId());

		return strFmt(@"UPDATE Temp 
							SET Temp.%1 = (%2) 
						FROM %3 Temp 
						INNER JOIN %4 Sort ON 
							Sort.Partition = %5 AND Sort.RecId = Temp.%6
						WHERE 
							(%7)",
			_tempTableSelectionGroupField,
			_selectionGroupExpression,
			_tempTableName,
			_sortingTableName,
			currentPartition,
			_tempTableRefSortRecIdField,
			_predicate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortingRecordUpdateSQLStatementV2</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a query to update sorting table records joined from the temp table and a predicate (usually a selection group).
    /// </summary>
    /// <param name = "_tempTableName">Name of the temp table, which stores selection groups.</param>
    /// <param name = "_tempTableRefSortRecIdField">Name of temp table 'RefSortRecId' field, used to join with the sorting table.</param>
    /// <param name = "_tempTableSelectionGroupField">Name of temp table 'SelectionGrou' field, used to filter temp table records.</param>
    /// <param name = "_sortingTableName">Name of the sorting table, which stores hierarchy sorting information.</param>
    /// <param name = "_updateExpression">Update expression to perform on sorting record (which may be referenced through the name 'Sort')</param>
    /// <param name = "_selectionGroup">Selection group this record must belong to.</param>
    /// <returns>A SQL query string for performing the update.</returns>
	public static str getSortingRecordUpdateSQLStatementV2(
		str _tempTableName,
		str _tempTableRefSortRecIdField,
		str _tempTableSelectionGroupField,
		str _sortingTableName,
		str _updateExpression,
		int _selectionGroup)
    {
		// Constructs a query similar to:
		// UPDATE Sort
		// SET
		//		@_updateExpression
		// FROM ProjHierarchyTemp Temp
		// INNER JOIN ProjHierarchySorting Sort ON
		//		Sort.Partition = @currentPartition AND Sort.RecId = Temp.RefSortRecId
		// WHERE
		//		Temp.SelectionGroup = (@_selectionGroup)
		
        str currentPartition = int642Str(getCurrentPartitionRecId());

        return strFmt(@"UPDATE Sort
						SET
							%1
						FROM %2 Temp
						INNER JOIN %3 Sort ON
							Sort.Partition = %4 AND Sort.RecId = Temp.%5
						WHERE
							Temp.%6 = (%7)",
					_updateExpression,
					_tempTableName,
					_sortingTableName,
					currentPartition,
                    _tempTableRefSortRecIdField,
					_tempTableSelectionGroupField,
					_selectionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortingRecordLevelDeltaSQLStatementV2</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a query to increment/decrement the given hierarchy level for the sorting records in the given selection group.
    /// </summary>
    /// <param name = "_tempTableName">Physical name of the temp table.</param>
    /// <param name = "_tempTableRefSortRecIdField">Name of the temp table 'RefSortRecId' field, used to join with the sorting table.</param>
    /// <param name = "_tempTableSelectionGroupField">Name of the 'SelectionGroup' field for the temp table.</param>
    /// <param name = "_sortingTableName">Name of the sorting table.</param>
    /// <param name = "_sortingLevelFieldPrefix">Name prefix of each HierarchyLevel field for the sorting table.</param>
    /// <param name = "_levelIndex">Index of the sorting field to increment/decrement.</param>
    /// <param name = "_delta">Amount to increment/decrement by.</param>
    /// <param name = "_selectionGroup">Temp table selection group to apply this to.</param>
    /// <returns>A string SQL query. This does not include a semicolon delimiter.</returns>
	public static str getSortingRecordLevelDeltaSQLStatementV2(
		str _tempTableName,
		str _tempTableRefSortRecIdField,
		str _tempTableSelectionGroupField,
		str _sortingTableName,
		str _sortingLevelFieldPrefix,
		int _levelIndex,
		int _delta,
		int _selectionGroup)
    {
		// Creates a query similar to the following:
		// UPDATE Sort
		// SET
		//		Sort.HierarchyLevel@_levelIndex = Sort.HierarchyLevel@_levelIndex + @_delta
		// FROM @_tempTableName Temp
		// INNER JOIN @_sortingTableName Sort ON
		//		Sort.Partition = @currentPartition AND Sort.RecId = Temp.RefSortRecId
		// WHERE
		//		Temp.SelectionGroup = @_selectionGroup

        return ProjHierarchy::getSortingRecordUpdateSQLStatementV2(
			_tempTableName,
			_tempTableRefSortRecIdField,
			_tempTableSelectionGroupField,
			_sortingTableName,
			strFmt('Sort.%1%2 = Sort.%1%2 + %3', _sortingLevelFieldPrefix, _levelIndex, _delta),
            _selectionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortingRecordLevelInsertAndReplaceSQLStatementV2</Name>
				<Source><![CDATA[
	/// <summary>
    /// Constructs a SQL query to perform an 'insert and replace' operation on each sorting record in the given selection group. This is analagous to the following JavaScript: sorting.splice(_levelIndex, 1, _insert, _replace).
    /// </summary>
    /// <param name = "_tempTableName">Physical name of the temp table.</param>
    /// <param name = "_tempTableRefSortRecIdField">Name of the 'RefSortRecId' field for the temp table.</param>
    /// <param name = "_tempTableSelectionGroupField">Name of the 'SelectionGroup' field for the temp table.</param>
    /// <param name = "_sortingTableName">Name of the sorting table.</param>
    /// <param name = "_sortingTableLevelFieldPrefix">Name prefix of each HierarchyLevel field for the sorting table.</param>
    /// <param name = "_maxLevelIndex">Max level index to update.</param>
    /// <param name = "_levelIndex">Level index to perform the operation at.</param>
    /// <param name = "_insert">Value to insert at the index.</param>
    /// <param name = "_replace">Value to replace at the following index.</param>
    /// <param name = "_selectionGroup">Selection group to apply this to.</param>
    /// <returns>A string SQL query. This does not include a semicolon delimiter.</returns>
	public static str getSortingRecordLevelInsertAndReplaceSQLStatementV2(
		str _tempTableName,
		str _tempTableRefSortRecIdField,
		str _tempTableSelectionGroupField,
		str _sortingTableName,
		str _sortingTableLevelFieldPrefix,
		int _maxLevelIndex,
		int _levelIndex,
		int _insert,
		int _replace,
		int _selectionGroup)
    {
		// Creates a query similar to the following:
		//UPDATE Sort
		//SET
		//	Sort.HierarchyLevel5 = Sort.HierarchyLevel4,
		//	Sort.HierarchyLevel4 = Sort.HierarchyLevel3,
		//	Sort.HierarchyLevel3 = @_replace,
		//	Sort.HierarchyLevel2 = @_insert
		//FROM @_tempTableName Temp
		//INNER JOIN @_sortingTableName Sort ON
		//	Sort.Partition = @currentPartition AND Sort.RecId = Temp.RefSortRecId
		//WHERE
		//	Temp.SelectionGroup = @_selectionGroup

		// Construct the expression to update sorting level
        str updateExpression = '';
        for (int i = _maxLevelIndex; i > _levelIndex + 1; --i)
        {
            updateExpression += strFmt('Sort.%1%2 = Sort.%1%3,', _sortingTableLevelFieldPrefix, i, i - 1);
        }
        updateExpression += strFmt('Sort.%1%2 = %3, Sort.%1%4 = %5', _sortingTableLevelFieldPrefix, _levelIndex + 1, _replace, _levelIndex, _insert);

		// Construct actual query
        return ProjHierarchy::getSortingRecordUpdateSQLStatementV2(
			_tempTableName,
			_tempTableRefSortRecIdField,
			_tempTableSelectionGroupField,
			_sortingTableName,
			updateExpression,
            _selectionGroup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    private static void executeSQLStatement(str _statement, Map _paramMap = null)
    {
        ttsbegin;
        Connection userConnection = new Connection();
        Statement stmt = userConnection.createStatement();
        new SqlStatementExecutePermission(_statement).assert();
        stmt.executeUpdateWithParameters(_statement, _paramMap);
        CodeAccessPermission::revertAssert();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>