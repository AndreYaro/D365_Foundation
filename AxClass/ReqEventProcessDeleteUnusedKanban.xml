<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessDeleteUnusedKanban</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Processes the deletion of the unused kanbans that are pegged by the sales line or kanban, if
///    specified.
/// </summary>
/// <remarks>
///    This class also allows filtering by sales ID or kanban ID that applies.
/// </remarks>
public class ReqEventProcessDeleteUnusedKanban
{
    #OCCRetryCount

    LegalEntity legalEntity;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteUnusedFromKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the unused pegged kanbans of a kanban.
    /// </summary>
    /// <param name="_kanban">
    ///    A buffer of the <c>Kanban</c> table.
    /// </param>
    private void deleteUnusedFromKanban(Kanban _kanban)
    {
        ReqPeggingTreeNode      treeNode;
        List                    children;
        ListEnumerator          le;

        // Explore the pegging tree child nodes (Kanban -> KanbanJobPickingList or KanbanJobIssue)
        if (_kanban.LegalEntity == CompanyInfo::current())
        {
            treeNode = ReqPeggingTreeNode::newStandard(_kanban);
            children = treeNode.listChildren();
            le = children.getEnumerator();
            while (le.moveNext())
            {
                this.deleteUnusedFromPickingOrIssue(le.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedFromPickingOrIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the unused pegged kanbans of a kanban job picking list or kanban job issue.
    /// </summary>
    /// <param name="_common">
    ///    A record buffer of a kanban children pegging tree node, <c>KanbanJobPickingList</c> or
    ///    <c>KanbanJobIssue</c>.
    /// </param>
    private void deleteUnusedFromPickingOrIssue(Common _common)
    {
        KanbanJobPickingList    kanbanJobPickingList;
        KanbanJobIssue          kanbanJobIssue;
        ReqPeggingTreeNode      treeNode;
        List                    children;
        ListEnumerator          le;
        boolean                 result;

        switch (_common.TableId)
        {
            case tableNum(KanbanJobPickingList):
                kanbanJobPickingList = _common as KanbanJobPickingList;
                result               = kanbanJobPickingList.legalEntity() == legalEntity;
                break;
            case tableNum(KanbanJobIssue):
                kanbanJobIssue = _common as KanbanJobIssue;
                result         = kanbanJobIssue.legalEntity() == legalEntity;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (result)
        {
            // Explore the pegging tree child nodes (KanbanJobPickingList or KanbanJobIssue -> Kanban)
            treeNode = ReqPeggingTreeNode::newStandard(_common);
            children = treeNode.listChildren();
            le       = children.getEnumerator();
            while (le.moveNext())
            {
                this.deleteUnusedKanban(le.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the unused pegged kanbans of a sales line.
    /// </summary>
    /// <param name="_salesLine">
    ///    A buffer of the <c>SalesLine</c> table.
    /// </param>
    private void deleteUnusedFromSalesLine(SalesLine _salesLine)
    {
        ReqPeggingTreeNode      treeNode;
        List                    children;
        ListEnumerator          le;

        // Explore the pegging tree child nodes (SalesLine -> Kanban)
        treeNode = ReqPeggingTreeNode::newStandard(_salesLine);
        children = treeNode.listChildren();
        le = children.getEnumerator();
        while (le.moveNext())
        {
            this.deleteUnusedKanban(le.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the unused pegged kanbans of a sales order.
    /// </summary>
    /// <param name="_salesTable">
    ///    A buffer of the <c>SalesTable</c> table.
    /// </param>
    private void deleteUnusedFromSalesTable(SalesTable _salesTable)
    {
        ReqPeggingTreeNode      treeNode;
        List                    children;
        ListEnumerator          le;

        // Explore the pegging tree child nodes (SalesTable -> SalesLine)
        treeNode = ReqPeggingTreeNode::newStandard(_salesTable);
        children = treeNode.listChildren();
        le = children.getEnumerator();
        while (le.moveNext())
        {
            this.deleteUnusedFromSalesLine(le.current());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the kanban if it is unused, or all the unused kanbans if none is specified.
    /// </summary>
    /// <param name="_kanban">
    ///    A buffer of the <c>Kanban</c> table; optional.
    /// </param>
    private void deleteUnusedKanban(Kanban _kanban = null)
    {
        Kanban                  kanban;
        KanbanRule              kanbanRule;
        KanbanRuleVariable      kanbanRuleVariable;
        KanbanRuleEvent         kanbanRuleEvent;
        KanbanJobReceipt        kanbanJobReceipt;
        KanbanJob               kanbanJob;
        KanbanJob               kanbanJobNotExists;
        InventTransOriginId     receiptInventTransOriginId;
        InventTransOriginId     issueInventTransOriginId;
        InventQty               peggedQty;
        Set                     setPeggedEvents;
        SetEnumerator           se;
        InventTransIdSum        inventTransIdSum;
        boolean                 canDelete;

        ttsbegin;
        while select kanban
            where kanban.Status      == LeanKanbanStatus::NotAssigned
               && kanban.LegalEntity == legalEntity
               && (   kanban.RecId   == _kanban.RecId
                   || !_kanban.RecId)
            join kanbanJob
                where kanbanJob.Kanban == kanban.RecId
            join SourceDocumentLine from kanbanJobReceipt
                where kanbanJobReceipt.KanbanJob == kanbanJob.RecId
            exists join kanbanRule
                where kanbanRule.RecId                 == kanban.KanbanRule
                   && kanbanRule.ReplenishmentStrategy == LeanReplenishmentStrategy::Event
            exists join kanbanRuleVariable
                where kanbanRuleVariable.ParentRecId == kanbanRule.RecId
                exists join kanbanRuleEvent
                    where kanbanRuleEvent.ParentRecId                      == kanbanRuleVariable.RecId
                       && kanbanRuleEvent.CancelUnusedEventsOnSourceReqReg == NoYes::Yes
            notexists join kanbanJobNotExists
                where kanbanJobNotExists.Kanban   == kanban.RecId
                   && kanbanJobNotExists.Sequence  > kanbanJob.Sequence
        {
            receiptInventTransOriginId = kanbanJob.receiptInventTransOriginId();
            setPeggedEvents            = new Set(Types::Int64);

            ReqEventProcessDeleteUnusedKanbanQuantityCalculation reqEventProcessDeleteUnusedKanbanQuantityCalculation = ReqEventProcessDeleteUnusedKanbanQuantityCalculation::construct();
            peggedQty = reqEventProcessDeleteUnusedKanbanQuantityCalculation.processPeggedEventsFromSupply(receiptInventTransOriginId, setPeggedEvents, kanbanJobReceipt);

            // the complete quantity must be allocated to one or more events
            canDelete = peggedQty == kanban.QuantityOrdered;

            // now determine if kanban can be deleted
            if (   canDelete
                && setPeggedEvents
                && setPeggedEvents.elements())
            {
                se = setPeggedEvents.getEnumerator();

                // all pegged (requirement) transactions are at least physically updated
                while (   se.moveNext()
                       && canDelete)
                {
                    issueInventTransOriginId = se.current();
                    inventTransIdSum         = InventTransIdSum::newTransOriginId(issueInventTransOriginId);
                    canDelete                =    canDelete
                                               && inventTransIdSum.estimated() == 0;
                }
            }

            // cancel kanban and delete
            if (   canDelete
                && ReqEventProcessKanban::cancelKanban(kanban,true,true,kanbanJob))
            {
                kanban = Kanban::find(kanban.RecId,true);
                kanban.delete();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        legalEntity = CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the deletion of the unused kanbans that are pegged by the sales line, sales order, or kanban
    ///    specified, or all of them if not.
    /// </summary>
    /// <param name="_common">
    ///    A record buffer of the <c>Kanban</c>, <c>SalesTable</c>, or <c>SalesLine</c> tables; optional.
    /// </param>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    Standard update conflict resolution.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    Standard update conflict resolution.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run(Common _common = null)
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing)))
        {
            try
            {
                // Delete all unused kanbans
                if (!_common)
                {
                    this.deleteUnusedKanban();
                }
                else
                {
                    // or delete only the ones belonging to the specified source document
                    this.deleteUnusedKanbanFromSourceDoc(_common);
                }
            }
            catch (Exception::Deadlock)
            {
                if (this.manageExceptionDeadlock())
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (this.manageExceptionUpdateConflict())
                {
                    retry;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (this.manageExceptionDuplicateKeyException())
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteUnusedKanbanFromSourceDoc</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Deletes unused kanbans for the given table
	/// </summary>
    /// <param name = "_common">
	///		A record buffer for which unused kanbans need to be deleted
    /// </param>
    [Replaceable]
    protected void deleteUnusedKanbanFromSourceDoc(Common _common)
    {
        switch (_common.TableId)
        {
            case tableNum(Kanban):
                this.deleteUnusedFromKanban(_common);
                break;

            case tableNum(SalesTable):
                this.deleteUnusedFromSalesTable(_common);
                break;

            case tableNum(SalesLine):
                this.deleteUnusedFromSalesLine(_common);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqEventProcessDeleteUnusedKanban construct()
    {
        return new ReqEventProcessDeleteUnusedKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqEventProcessDeleteUnusedKanban</c> class.
    /// </summary>
    /// <returns>
    ///    A <c>ReqEventProcessDeleteUnusedKanban</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessDeleteUnusedKanban newStandard()
    {
        ReqEventProcessDeleteUnusedKanban  reqEventProcessDeleteUnusedKanban = ReqEventProcessDeleteUnusedKanban::construct();

        return reqEventProcessDeleteUnusedKanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageExceptionUpdateConflict</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean manageExceptionUpdateConflict()
    {
        if (appl.ttsLevel() == 0)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            else
            {
                return true;
            }
        }
        else
        {
            throw Exception::UpdateConflict;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageExceptionDuplicateKeyException</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean manageExceptionDuplicateKeyException()
    {
        if (appl.ttsLevel() == 0)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            else
            {
                return true;
            }
        }
        else
        {
            throw Exception::DuplicateKeyException;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageExceptionDeadlock</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean manageExceptionDeadlock()
    {
        if (xSession::currentRetryCount() >= #RetryNum)
        {
            throw Exception::Deadlock;
        }
        else
        {
            return true;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>