<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionDynamicAccountResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DimensionDynamicAccountResolver</c> class resolves dynamic dimension values.
/// </summary>
public class DimensionDynamicAccountResolver extends DimensionResolver
{
    private boolean isEnumValueSet;
    private DimensionAccountType enumValue;
    private SelectableDataArea  companyValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmEnumValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The account type of the dimension to resolve.
    /// </summary>
    /// <param name = "_enumValue">The value to set.</param>
    /// <returns>The value of the enumValue parameter.</returns>
    public int parmEnumValue(int _enumValue = enumValue)
    {
        this.enumValue = _enumValue;

        return this.enumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCompanyValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// The company of the dimension to resolve.
    /// </summary>
    /// <param name = "_companyValue">The value to set.</param>
    /// <returns>The value of the companyValue parameter.</returns>
    public SelectableDataArea parmCompanyValue(SelectableDataArea _companyValue = companyValue)
    {
        this.companyValue = _companyValue;

        return this.companyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newResolver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>DimensionDynamicAccountResolver</c> class.
    /// </summary>
    /// <param name = "_dimensionValues">A string of the display values of the dimension separated by the chart of accounts delimiter character of the system.</param>
    /// <param name = "_enumValue">The account type of the dimension to resolve.</param>
    /// <param name = "_companyValue">The company of the dimension to resolve.</param>
    /// <returns>The new instance of an <c>DimensionDynamicAccountResolver</c> subclass.</returns>
    public static DimensionDynamicAccountResolver newResolver(
        DefaultDimensionIntegrationValues _dimensionValues,
        LedgerJournalACType _enumValue = LedgerJournalACType::Ledger,
        SelectableDataArea _companyValue = curExt())
    {
        DimensionDynamicAccountResolver dimensionDynamicAccountResolver = new DimensionDynamicAccountResolver();

        dimensionDynamicAccountResolver.parmDimensionValues(_dimensionValues);
        dimensionDynamicAccountResolver.parmEnumValue(enum2int(_enumValue));
        dimensionDynamicAccountResolver.parmCompanyValue(_companyValue);
        dimensionDynamicAccountResolver.parmDimensionFormat(dimensionDynamicAccountResolver.getDimensionAttributeFormat());

        return dimensionDynamicAccountResolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEntityRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates non-ledger account types are a single segment.
    /// </summary>
    /// <returns>true if the account is a single segment; otherwise, false.</returns>
    protected boolean validateEntityRequest()
    {
        boolean isValid = true;

        if ((this.parmEnumValue() != LedgerJournalACType::Ledger) && (this.getDimensionValues().elements() > 1))
        {
            isValid = false;

            DictEnum dictEnum = new DictEnum(enumNum(LedgerJournalACType));

            error(strFmt(
                "@Dimension:EntitiesDimensionDynamicAccount",
                dictEnum.value2Label(this.parmEnumValue()),
                this.parmDimensionValues()),
                DimensionServiceFaults::ValidationFailed);
        }

        if (isValid)
        {
            isValid = super();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionContractValueList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dimension contract from the dimension names and values, setting the company and account type.
    /// </summary>
    protected void buildDimensionContractValueList()
    {
        super();
        DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionContract() as DimensionDynamicAccountContract;
        dimensionDynamicAccountContract.parmAccountType(this.parmEnumValue());
        dimensionDynamicAccountContract.parmCompany(this.parmCompanyValue());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNameValueListServiceProvider</Name>
				<Source><![CDATA[
    protected DimensionNameValueListServiceProvider getDimensionNameValueListServiceProvider(DimensionNameValueListContract _dimensionNameValueListContract)
    {
        DimensionDynamicAccountServiceProvider serviceProvider = DimensionDynamicAccountServiceProvider::newForDynamicAccountContract(_dimensionNameValueListContract);

        return serviceProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAttributeValueToDimensionContract</Name>
				<Source><![CDATA[
    protected void addAttributeValueToDimensionContract(DimensionAttributeValueContract _attributeValueContract)
    {
        DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionContract();

        if (this.parmEnumValue() == LedgerJournalACType::Ledger)
        {
            Name mainAccountAttributeName = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)).Name;

            if (_attributeValueContract.parmName() == mainAccountAttributeName)
            {
                dimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue(_attributeValueContract);
            }
            else
            {
                if (strlen(_attributeValueContract.parmValue()) != 0)
                {
                    dimensionDynamicAccountContract.parmValues().addEnd(_attributeValueContract);
                }
            }
        }
        else
        {
            if (strlen(_attributeValueContract.parmValue()) != 0)
            {
                DimensionDynamicAccountContract.parmPrimaryDimensionAttributeValue(_attributeValueContract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageResultValidationMessages</Name>
				<Source><![CDATA[
    protected List getStorageResultValidationMessages(DimensionStorageResult _result)
    {
        List validationMessages = new List(Types::String);

        switch (_result.parmStatus())
        {
            case DimensionStorageResultStatus::InvalidPrimarySegment:
                LedgerAccountContract ledgerAccountContract = _result.getDimensionNameValueListContract() as LedgerAccountContract;

                if (!ledgerAccountContract)
                {
                    throw error("@SYS326400", DimensionServiceFaults::DimensionContractIsNotInitialized);
                }

                if (ledgerAccountContract.parmMainAccount())
                {
                    DimensionDynamicAccountContract dimensionDynamicAccountContract = this.getDimensionContract();

                    SelectableDataArea dimensionCompany = dimensionDynamicAccountContract.parmCompany();
                    if (!dimensionCompany)
                    {
                        dimensionCompany = curext();
                    }

                    changecompany(dimensionCompany)
                    {
                        // The specified main account was not found for the current chart of accounts.
                        Name ledgerCOAName = LedgerChartOfAccounts::find(LedgerChartOfAccounts::current()).Name;

                        validationMessages.addEnd(strFmt("@SYS326023", ledgerAccountContract.parmMainAccount(), ledgerCOAName));
                    }
                }
                else
                {
                    validationMessages.addEnd("@SYS324035");
                }
                break;

            case DimensionStorageResultStatus::InvalidDimensionAttributeValue:
                DimensionDynamicAccountContract dimensionDynamicAccountContract = _result.getDimensionNameValueListContract() as DimensionDynamicAccountContract;
                if (dimensionDynamicAccountContract)
                {
                    validationMessages.addEnd(strFmt(
                        "@Dimension:DimensionEntitiesDimensionValueNotExist",
                        _result.parmInvalidValue().parmValue(),
                        enum2Str(dimensionDynamicAccountContract.parmAccountType()),
                        this.parmDimensionValues()));
                    break;
                }

            default:
                validationMessages = super(_result);
                break;
        }

        return validationMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDimensionContract</Name>
				<Source><![CDATA[
    protected DimensionNameValueListContract constructDimensionContract()
    {
        return new DimensionDynamicAccountContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeFormat</Name>
				<Source><![CDATA[
    protected DefaultDimensionIntegrationStructureDisplay getDimensionAttributeFormat()
    {
        DefaultDimensionIntegrationStructureDisplay dimensionAttributesFormat;

        if (this.parmEnumValue() == LedgerJournalACType::Ledger)
        {
            dimensionAttributesFormat = DimensionHierarchy::getDisplayStringDimensionIntegrationStructure(
            DimensionDataEntityStructureType::DataEntityLedgerDimensionFormat);
        }
        else
        {
            RecId hierarchyId = DimensionHierarchyHelper::getHierarchyIdByAccountType(this.parmEnumValue());
            DimensionHierarchy dimensionHierarchy = DimensionHierarchy::find(hierarchyId);
            dimensionAttributesFormat = dimensionHierarchy.Name;
        }

        return dimensionAttributesFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedDataTypeName</Name>
				<Source><![CDATA[
    protected ExtendedDataTypeName getExtendedDataTypeName()
    {
        return extendedtypestr(DimensionDynamicAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    protected DimensionAccountType getEnumValue()
    {
        return this.parmEnumValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumName</Name>
				<Source><![CDATA[
    protected EnumName getEnumName()
    {
        return enumStr(LedgerJournalACType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyName</Name>
				<Source><![CDATA[
    protected Name getDimensionHierarchyName()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyType</Name>
				<Source><![CDATA[
    protected DimensionHierarchyType getDimensionHierarchyType()
    {
        return DimensionHierarchyType::DataEntityLedgerDimensionFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCacheEntry</Name>
				<Source><![CDATA[
    protected void addCacheEntry(RefRecId _savedRecId)
    {
        changecompany (this.parmCompanyValue())
        {
            super(_savedRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheEntry</Name>
				<Source><![CDATA[
    protected DimensionDataEntitySFKCache getCacheEntry()
    {
        changecompany (this.parmCompanyValue())
        {
            return super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>