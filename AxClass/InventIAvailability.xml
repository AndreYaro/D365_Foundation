<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventIAvailability</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventIAvailability</c> interface exposes
/// information about the on hand availability of an item.
/// </summary>
/// <remarks>
/// <para>
/// Advanced warehousing functionality is using a new reservation engine. It means that
/// referring to <c>InventSum</c> directly when querying item availability
/// can now produce incorrect results for WHS-enabled items.
/// </para>
/// <para>
/// The mapping from <c>InventSum</c> fields and methods to <c>InventIAvailability</c> is described below:
///
/// InventSum.AvailOrdered -> InventIAvailability.availTotal()
/// InventSum.availOrderedCalculated() -> InventIAvailability.availTotal()
/// InventSum.AvailPhysical -> InventIAvailability.availPhysical()
/// InventSum.availPhysicalCalculated() -> InventIAvailability.availPhysical()
/// InventSum.availReservation() -> InventIAvailability.availReservation()
/// InventSum.Ordered -> InventIAvailability.ordered()
/// InventSum.orderedSum() -> InventIAvailability.orderedSum()
/// InventSum.ReservOrdered -> InventIAvailability.reservOrdered()
/// InventSum.ReservPhysical -> InventIAvailability.reservPhysical()
/// </para>
/// </remarks>
public interface InventIAvailability
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the the quantity available for physical reservation.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyAvailPhysical availPhysical()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity available for reservation.
    /// </summary>
    /// <param name="_allowReserveOrdered">
    /// A value indicating wither the result should include
    /// the ordered goods that are available for reservation; optional.
    /// </param>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQty availReservation(NoYes _allowReserveOrdered = NoYes::Yes)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>availTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total available quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// The total available quantity is the total quantity available for reservation
    /// minus the quantity that is on order but not reserved.
    /// </remarks>
    public InventQtyAvailOrdered availTotal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ordered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ordered quantity.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyOrdered ordered()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderedSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity that was ordered
    /// but is not physically available in the warehouse yet.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    /// <remarks>
    /// Goods that are in the Arrived status are not physically available
    /// in the warehouse yet so the result of this method is the Ordered + Arrived quantity.
    /// </remarks>
    public InventQtyOrderedSum orderedSum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservOrdered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against ordered on hand.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservOrdered reservOrdered()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity reserved against on hand that is physically available.
    /// </summary>
    /// <returns>
    /// The quantity in the inventory unit.
    /// </returns>
    public InventQtyReservPhysical reservPhysical()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>