<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalArchiveAutomationCriteriaFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds the interaction on the form <c>LedgerJournalArchiveAutomationCriteriaForm</c>
/// </summary>
internal final class LedgerJournalArchiveAutomationCriteriaFormInteraction
{
    private LedgerJournalArchiveAutomationCriteriaFormContract formContract;
    private LedgerJournalArchiveAutomationCriteriaIForm uIForm;
    private const str EmptyString = '';
    private LedgerJournalArchiveTrans displayedArchiveRecord;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static LedgerJournalArchiveAutomationCriteriaFormInteraction construct(
        LedgerJournalArchiveAutomationCriteriaIForm _form,
        LedgerJournalArchiveAutomationCriteriaFormContract _formContract)
    {
        LedgerJournalArchiveAutomationCriteriaFormInteraction interaction = new LedgerJournalArchiveAutomationCriteriaFormInteraction();
        interaction.formContract = _formContract;
        interaction.uIForm = _form;
        return interaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createArchiveJobs</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ArchiveServiceIProvideManagedJobCreationContracts createArchiveJobs(ArchiveServiceJobName _archiveJobName)
    {
        var multipleJobCreationContract = ArchiveServiceManagedJobMultipleJobsCreationContract::construct();
        container selectedArchiveTypes = formContract.parmSelectedJournalTypes();

        for (int i = 1; i <= conLen(selectedArchiveTypes); i++)
        {
            LedgerJournalType journalType;
            journalType = str2Enum(journalType, conPeek(selectedArchiveTypes, i));

            var proposedJournalArchiveTrans = this.initLedgerJournalArchiveTransFromContract(_archiveJobName, journalType);

            // TODO- investigate cache issues here, we don't want to recreate the instances 
            LedgerJournalTypeArchiveProcessor archiveProcessor = LedgerJournalTypeArchiveProcessorFactory::getProcessorFromJournalType(journalType);
            var jobPostRequest = archiveProcessor.processArchiveRequest(proposedJournalArchiveTrans);
  
            var singleJobContract = ArchiveServiceManagedJobCreationContract::newForSourceLinkToBeCreatedAfterJobCreation(
                LedgerJournalArchiveAutomationConstants::RegisteredTypeName,
                jobPostRequest,
                proposedJournalArchiveTrans);

            multipleJobCreationContract.addJobCreationContract(singleJobContract);
        }

        return multipleJobCreationContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void setControls()
    {
        this.populateAvailableJournalTypes();
        uIForm.ledgerJournalTypeArchiveListPanelControl().init();
        uIForm.ledgerJournalTypeArchiveListPanelControl().fill();

        uIForm.journalStartDateTimeControl().mandatory(true);
        uIForm.journalEndDateTimeControl().mandatory(true);
        uIForm.journalDataAreaIdControl().mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedJournalStartDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onModifiedJournalStartDateTime()
    {
        formContract.parmStartDateTime(uIForm.journalStartDateTimeControl().dateTimeValue());
        if (displayedArchiveRecord)
        {
            displayedArchiveRecord.StartDateTime = formContract.parmStartDateTime();
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedJournalEndDateTime</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onModifiedJournalEndDateTime()
    {
        formContract.parmEndDateTime(uIForm.journalEndDateTimeControl().dateTimeValue());
        if (displayedArchiveRecord)
        {
            displayedArchiveRecord.EndDateTime = formContract.parmEndDateTime();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedJournalDataAreaId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onModifiedJournalDataAreaId()
    {
        formContract.parmJournalDataAreaId(uIForm.journalDataAreaIdControl().valueStr());
        if (displayedArchiveRecord)
        {
            displayedArchiveRecord.JournalDataAreaId = formContract.parmJournalDataAreaId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        formContract.parmSelectedJournalTypes(uIForm.ledgerJournalTypeArchiveListPanelControl().getSelectedLedgerJournalTypes());
        return formContract.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalArchiveTransFromContract</Name>
				<Source><![CDATA[
    private LedgerJournalArchiveTrans initLedgerJournalArchiveTransFromContract(ArchiveServiceJobName _jobName, LedgerJournalType _ledgerJournalType)
    {
        LedgerJournalArchiveTrans ledgerJournalArchiveTrans;
        ledgerJournalArchiveTrans.Name = _jobName;
        ledgerJournalArchiveTrans.StartDateTime = formContract.parmStartDateTime();
        ledgerJournalArchiveTrans.EndDateTime = formContract.parmEndDateTime();
        ledgerJournalArchiveTrans.JournalDataAreaId = formContract.parmJournalDataAreaId();
        ledgerJournalArchiveTrans.JournalType = _ledgerJournalType;
        
        return ledgerJournalArchiveTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAvailableJournalTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Needs to be in formatt of [['id', 'value']] to support <c>LedgerSettlementsAutomationMainAccountsListPanel</c>
    /// </summary>
    private void populateAvailableJournalTypes()
    {
        container availableJournalTypes;
        Array sortedJournalTypes = this.getSortedArray(LedgerJournalTypeArchiveProcessorFactory::getAllRegisteredJournalTypes());
        
        for (int i = 1; i <= sortedJournalTypes.lastIndex(); i++)
        {
            // [['1', 'Daily']], this is container within container
            availableJournalTypes += [[i, sortedJournalTypes.value(i)]];
        }

        formContract.parmAvailableJournalTypes(availableJournalTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSortedArray</Name>
				<Source><![CDATA[
    private Array getSortedArray(container _conData)
    {
        ArrayExtend_RU ru = ArrayExtend_RU::createAndInit(Types::String, conLen(_conData), _conData);
        return ru.quickSorting().getArray();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>