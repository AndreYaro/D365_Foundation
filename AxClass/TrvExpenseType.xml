<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseType</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TrvExpenseType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateSystemSubCategory</Name>
				<Source><![CDATA[
    public boolean populateSystemSubCategory(TrvCostTypeEDT _trvCostTypeEDT)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSystemSubCategoryHelper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of <c>TrvSharedSubCategory</c> records.
    /// </summary>
    /// <param name = "_trvCostTypeEDT">The cost type for which to create the sub category records.</param>
    /// <param name = "_trvExpType">The expense type corresponding to the sub category.</param>
    /// <param name = "_enumName">The enum string for which to create the records.</param>
    /// <returns>True if the records were created, false otherwise.</returns>
    protected boolean populateSystemSubCategoryHelper(TrvCostTypeEDT _trvCostTypeEDT, TrvExpType _trvExpType, str _enumName)
    {
        RecordInsertList        recordInsertList;
        TrvSharedSubCategory    trvSharedSubCategory;
        SharedCategory          sharedCategory;

        DictEnum    de;
        int         i;

        select firstonly RecId from sharedCategory where sharedCategory.CategoryId == _trvCostTypeEDT;
        if (sharedCategory.RecId == 0)
        {
            return false;
        }

        //check if system sub categories are already populated
        select firstonly RecId from trvSharedSubCategory where trvSharedSubCategory.SystemCreated == NoYes::Yes && trvSharedSubCategory.SharedCategory == sharedCategory.RecId;
        if (trvSharedSubCategory.RecId != 0)
        {
            TrvCostType trvCostType;
            select firstonly crosscompany RecId from trvCostType
                where trvCostType.CostType == sharedCategory.CategoryId;
            if (trvCostType.RecId)
            {
                return false;
            }
            else
            {
                delete_from trvSharedSubCategory where trvSharedSubCategory.SystemCreated == NoYes::Yes && trvSharedSubCategory.SharedCategory == sharedCategory.RecId;
            }
        }

        de = new DictEnum(enumName2Id(_enumName));
        recordInsertList = new RecordInsertList(tableNum(TrvSharedSubCategory));

        //populate
        ttsbegin;
        for (i=0; i < de.values(); i++)
        {
            trvSharedSubCategory.clear();
            trvSharedSubCategory.SystemCreated = NoYes::Yes;
            trvSharedSubCategory.Name = de.index2Name(i);
            //trvGlobalSubCategory.Description = "";
            trvSharedSubCategory.ChargeType = de.index2Value(i);
            trvSharedSubCategory.SharedCategory = sharedCategory.RecId;
            //Set those subcategories exclude from tax recovery: Hote:Room Tax/Non room tax, Airline:Taxes
            if (_trvExpType== TrvExpType::Hotel && (trvSharedSubCategory.ChargeType == TrvHotelChargeType::RoomTaxCharge || trvSharedSubCategory.ChargeType == TrvHotelChargeType::NonRoomTaxCharge))
                trvSharedSubCategory.ExcludeFromRecovery = NoYes::Yes;
            if (_trvExpType== TrvExpType::Airline && trvSharedSubCategory.ChargeType == TrvAirlineChargeType::TotalTaxAmount)
                trvSharedSubCategory.ExcludeFromRecovery = NoYes::Yes;
            recordInsertList.add(trvSharedSubCategory);
        }
        recordInsertList.insertDatabase();
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TrvExpenseType construct(TrvExpType trvExpType)
    {
        switch (trvExpType)
        {
            case TrvExpType::CarRental:
                return TrvExpenseType_CarRental::construct();

            case TrvExpType::Hotel:
                return TrvExpenseType_Hotel::construct();

            case TrvExpType::Airline:
                return TrvExpenseType_Airline::construct();

            default:
                return new TrvExpenseType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsEnhancedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the passed expense type and determines if it supports enhanced data or not.
    /// </summary>
    /// <param name = "_trvExpType">The expense type to check.</param>
    /// <returns>True if the expense type has been modeled to have enhanced data.</returns>
    public static boolean supportsEnhancedData(TrvExpType _trvExpType)
    {
        return _trvExpType == TrvExpType::Airline || _trvExpType == TrvExpType::CarRental || _trvExpType == TrvExpType::Hotel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsItemization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the passed expense type and determines if it supports itemization or not.
    /// </summary>
    /// <param name = "_trvExpType">The expense type to check.</param>
    /// <returns>True if the expense type has been modeled to support itemization.</returns>
    public static boolean supportsItemization(TrvExpType _trvExpType)
    {
        if (_trvExpType == TrvExpType::Airline
        || _trvExpType == TrvExpType::CarRental
        || _trvExpType == TrvExpType::Hotel
        || _trvExpType == TrvExpType::Entertainment
        || _trvExpType == TrvExpType::Conference
        || _trvExpType == TrvExpType::Expense
        || _trvExpType == TrvExpType::Meals
        || _trvExpType == TrvExpType::Gift)
            return true;

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>