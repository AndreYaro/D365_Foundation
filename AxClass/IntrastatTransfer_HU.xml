<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransfer_HU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Transfers intrastat in Hungary country context.
/// </summary>
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoHU)]
class IntrastatTransfer_HU extends IntrastatTransfer implements BatchRetryable
{
    boolean isIndirectTradeSales;
    boolean isIndirectTradePurch;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>exportToBeIncludedCustFreeInvoiceTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustFreeInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        boolean ret;

        ret = super(_custInvoiceJour, _custInvoiceTrans);

        ret = ret || this.isInDirectTradeSales(_custInvoiceTrans.TransactionCode,
                                               _custInvoiceTrans.Port,
                                               this.postalAddress(_custInvoiceTrans.DeliveryPostalAddress).CountryRegionId);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        boolean ret;

        ret = super(_custInvoiceJour, _custInvoiceTrans);

        ret = ret || this.isInDirectTradeSales(_custInvoiceTrans.TransactionCode,
                                               _custInvoiceTrans.Port,
                                               this.postalAddress(_custInvoiceTrans.DeliveryPostalAddress).CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedCustPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedCustPckSlipTrans(CustPackingSlipJour _custPackingSlipJour, CustPackingSlipTrans _custPackingSlipTrans)
    {
        boolean ret;

        ret = super(_custPackingSlipJour, _custPackingSlipTrans);

        ret = ret || this.isInDirectTradeSales(_custPackingSlipTrans.TransactionCode,
                                               _custPackingSlipTrans.Port,
                                               this.postalAddress(_custPackingSlipTrans.DeliveryPostalAddress).CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedInventTransferJour</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedInventTransferJour(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        boolean ret;

        ret = super(_inventTransferJour, _inventTransferJourLine);

        ret = ret || this.isInDirectTradeSales(_inventTransferJourLine.TransactionCode,
                                               _inventTransferJourLine.Port,
                                               this.postalAddress(_inventTransferJour.ToPostalAddress).CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportToBeIncludedProjInvoiceItem</Name>
				<Source><![CDATA[
    protected boolean exportToBeIncludedProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        boolean ret;

        ret = super(_projInvoiceJour, _projInvoiceItem);

        ret = ret || this.isInDirectTradeSales(_projInvoiceItem.TransactionCode,
                                               _projInvoiceItem.Port,
                                               this.postalAddress(_projInvoiceJour.DeliveryPostalAddress).CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedInventTransferJour</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedInventTransferJour(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        boolean ret;

        ret = super(_inventTransferJour, _inventTransferJourLine);

        ret = ret || this.isInDirectTradePurch(_inventTransferJourLine.TransactionCode,
                                               _inventTransferJourLine.Port,
                                               this.postalAddress(_inventTransferJour.FromPostalAddress).CountryRegionId,
                                               CompanyInfo::find().invoiceAddress().CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour, VendInvoiceTrans _vendInvoiceTrans)
    {
        boolean ret;

        ret = super(_vendInvoiceJour, _vendInvoiceTrans);

        ret = ret ||  this.isInDirectTradePurch(_vendInvoiceTrans.TransactionCode,
                                                _vendInvoiceTrans.Port,
                                                _vendInvoiceTrans.vendTable_InvoiceAccount().countryRegionId(),
                                                this.postalAddress(_vendInvoiceTrans.DeliveryPostalAddress).CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>importToBeIncludedVendPckSlipTrans</Name>
				<Source><![CDATA[
    protected boolean importToBeIncludedVendPckSlipTrans(VendPackingSlipJour _vendPackingSlipJour, VendPackingSlipTrans _vendPackingSlipTrans)
    {
        boolean ret;

        ret = super(_vendPackingSlipJour, _vendPackingSlipTrans);

        ret = ret || this.isInDirectTradePurch(_vendPackingSlipTrans.TransactionCode,
                                               _vendPackingSlipTrans.Port,
                                               _vendPackingSlipJour.vendTable_OrderAccount().countryRegionId(),
                                               this.postalAddress(_vendPackingSlipJour.DeliveryPostalAddress).CountryRegionId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour _custInvoiceJour,
                                                          CustInvoiceTrans _custInvoiceTrans,
                                                          CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null,
                                                          CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat           intrastat;

        intrastat = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        intrastat.FulfillmentDate_HU = _custInvoiceTrans.IntrastatFulfillmentDate_HU;

        if (isIndirectTradeSales)
        {
            intrastat.CountryRegionId = IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromCustPckSlpTrans(CustPackingSlipJour _custPackingSlipJour,
                                                         CustPackingSlipTrans _custPackingSlipTrans,
                                                         CustPackingSlipJour_Intrastat _custPackingSlipJour_Intrastat = null,
                                                         CustPackingSlipTrans_Intrastat _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        intrastat.FulfillmentDate_HU = _custPackingSlipTrans.IntrastatFulfillmentDate_HU;

        if (isIndirectTradeSales)
        {
            intrastat.CountryRegionId = IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        Intrastat intrastat;

        intrastat = super(_custInvoiceJour, _custInvoiceTrans);

        intrastat.FulfillmentDate_HU = _custInvoiceTrans.IntrastatFulfillmentDate_HU;

        if (isIndirectTradeSales)
        {
            intrastat.CountryRegionId = IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromInventTransferJour</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromInventTransferJour(
        IntrastatDirection      _direction,
        InventTransferJour      _inventTransferJour,
        InventTransferJourLine  _inventTransferJourLine)
    {
        Intrastat intrastat;

        intrastat = super(_direction, _inventTransferJour, _inventTransferJourLine);

        intrastat.FulfillmentDate_HU = _inventTransferJourLine.IntrastatFulfillmentDate_HU;

        if (isIndirectTradeSales && _direction == IntrastatDirection::Export ||
            isIndirectTradePurch && _direction == IntrastatDirection::Import)
        {
            intrastat.CountryRegionId =IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        Intrastat intrastat;

        intrastat = super(_projInvoiceJour, _projInvoiceItem);

        intrastat.FulfillmentDate_HU = _projInvoiceItem.IntrastatFulfillmentDate_HU;

        if (isIndirectTradeSales)
        {
            intrastat.CountryRegionId = IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour,
                                                          VendInvoiceTrans _vendInvoiceTrans,
                                                          VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null,
                                                          VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        intrastat.FulfillmentDate_HU = _vendInvoiceTrans.IntrastatFulfillmentDate_HU;

        if (isIndirectTradePurch)
        {
            intrastat.CountryRegionId = IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    protected Intrastat initIntrastatFromVendPckSlpTrans(VendPackingSlipJour _vendPackingSlipJour,
                                                         VendPackingSlipTrans _vendPackingSlipTrans,
                                                         VendPackingSlipJour_Intrastat vendPackingSlipJour_Intrastat = null,
                                                         VendPackingSlipTrans_Intrastat vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat intrastat;

        intrastat = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        intrastat.FulfillmentDate_HU = _vendPackingSlipTrans.IntrastatFulfillmentDate_HU;

        if (isIndirectTradePurch)
        {
            intrastat.CountryRegionId = IntrastatPort::find(intrastat.Port).CountryRegionId_HU;
        }

        return intrastat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInDirectTradePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a purchase order is an indirect trade.
    /// </summary>
    /// <param name="_transactionCodeId">
    /// Id of the transaction code on the purchase order.
    /// </param>
    /// <param name="_portId">
    /// Id of the port on the purchase order.
    /// </param>
    /// <param name="_countryReqionIdFrom">
    /// Country region where the purchase order is from.
    /// </param>
    /// <param name="_countryReqionIdDest">
    /// Country region of the purchase order's destination.
    /// </param>
    /// <returns>
    /// true if the purchase order is an indirect trade; otherwise, false.
    /// </returns>
    protected boolean isInDirectTradePurch(IntrastatTransactionCodeId   _transactionCodeId,
                                           IntrastatPortId              _portId,
                                           AddressCountryRegionId       _countryReqionIdFrom,
                                           AddressCountryRegionId       _countryReqionIdDest
                                          )
    {
        boolean ret;

        ret = IntrastatTransactionCode::find(_transactionCodeId).IndirectTrade_HU
                && !this.isInEU(_countryReqionIdFrom)
                && this.isInEU(IntrastatPort::find(_portId).CountryRegionId_HU)
                && IntrastatPort::find(_portId).CountryRegionId_HU != _countryReqionIdDest
                && _countryReqionIdDest == CompanyInfo::find().invoiceAddress().CountryRegionId;

        isIndirectTradePurch = ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInDirectTradeSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a sales order is an indirect trade.
    /// </summary>
    /// <param name="_transactionCodeId">
    /// Id of the transaction code on the sales order.
    /// </param>
    /// <param name="_portId">
    /// Id of the port on the sales order.
    /// </param>
    /// <param name="_countryReqionIdDest">
    /// Country region of the sales order's destination.
    /// </param>
    /// <returns>
    /// true if the sales order is an indirect trade; otherwise, false.
    /// </returns>
    protected boolean isInDirectTradeSales(IntrastatTransactionCodeId   _transactionCodeId,
                                            IntrastatPortId              _portId,
                                            AddressCountryRegionId       _countryReqionIdDest
                                           )
    {
        boolean ret;

        ret = IntrastatTransactionCode::find(_transactionCodeId).IndirectTrade_HU
                && !this.isInEU(_countryReqionIdDest)
                && this.isInEU(IntrastatPort::find(_portId).CountryRegionId_HU);

        isIndirectTradeSales = ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>