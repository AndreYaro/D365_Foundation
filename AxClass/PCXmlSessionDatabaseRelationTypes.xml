<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionDatabaseRelationTypes</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionDatabaseRelationTypes</c> class contains a collection of system table constraint
/// attribute types.
/// </summary>
class PcXmlSessionDatabaseRelationTypes
{
    Map databaseRelationTypes;
    Map encounteredColumns;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTypeReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an XML type reference for the encountered system table constraint column.
    /// </summary>
    /// <param name="_databaseRelationColumn">
    /// A system table constraint column.
    /// </param>
    /// <param name="_xmlTypeReference">
    /// An XML type reference.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The system table constraint column does exist in the collection of encountered columns.
    /// </exception>
    public void addTypeReference(PCTableConstraintDatabaseColumnDef _databaseRelationColumn, str _xmlTypeReference)
    {
        PCContractNotNull::assertRecord(_databaseRelationColumn, funcName());

        if (encounteredColumns.exists(_databaseRelationColumn.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        encounteredColumns.insert(_databaseRelationColumn.RecId, _xmlTypeReference);
    }

]]></Source>
			</Method>
			<Method>
				<Name>columnHasBeenEncountered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a system table constraint column has already been encountered.
    /// </summary>
    /// <param name="_databaseRelationColumn">
    /// A system table constraint column.
    /// </param>
    /// <returns>
    /// true if the column has been encountered; otherwise, false.
    /// </returns>
    public boolean columnHasBeenEncountered(PCTableConstraintDatabaseColumnDef _databaseRelationColumn)
    {
        PCContractNotNull::assertRecord(_databaseRelationColumn, funcName());

        return encounteredColumns.exists(_databaseRelationColumn.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates a <c>PCXmlSessionDatabaseRelationType</c> instance in the collection.
    /// </summary>
    /// <param name="_databaseRelationColumn">
    /// A system table constraint column.
    /// </param>
    /// <param name="_attributeType">
    /// The attribute type associated with the table constraint column.
    /// </param>
    /// <returns>
    /// An <c>PCXmlSessionDatabaseRelationType</c> instance.
    /// </returns>
    public PCXmlSessionDatabaseRelationType findOrCreateType(PCTableConstraintDatabaseColumnDef  _databaseRelationColumn, EcoResAttributeType _attributeType)
    {
        PCXmlSessionDatabaseRelationType xmlSessionDatabaseRelationType;
        container                        keyValue = [_databaseRelationColumn.AttributeType, _databaseRelationColumn.ReferencedTableId, _databaseRelationColumn.ReferencedFieldId];

        PCContractNotNull::assertRecord(_databaseRelationColumn, funcName());

        if ( !databaseRelationTypes.exists(keyValue) )
        {
            xmlSessionDatabaseRelationType = PCXmlSessionDatabaseRelationType::construct();
            xmlSessionDatabaseRelationType.parmTypeId(PCXmlSessionDatabaseRelationType::createTypeId(_databaseRelationColumn));
            xmlSessionDatabaseRelationType.parmDatabaseColumnDefinition(_databaseRelationColumn);
            xmlSessionDatabaseRelationType.parmTypeName(_attributeType.Name);
            xmlSessionDatabaseRelationType.parmIsEnumeration(_attributeType.IsEnumeration);
            xmlSessionDatabaseRelationType.parmAttributeDataType(_attributeType.DataType);
            databaseRelationTypes.insert(keyValue, xmlSessionDatabaseRelationType);
        }

        return databaseRelationTypes.lookup(keyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupTypeReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up the xml type reference for a previously encountered system table constraint column.
    /// </summary>
    /// <param name="_databaseRelationColumn">
    /// A system table constraint column.
    /// </param>
    /// <returns>
    /// An XML attribute type reference.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The column does not exist in the collection of encountered columns.
    /// </exception>
    public str lookupTypeReference(PCTableConstraintDatabaseColumnDef _databaseRelationColumn)
    {
        PCContractNotNull::assertRecord(_databaseRelationColumn, funcName());

        if (!encounteredColumns.exists(_databaseRelationColumn.RecId))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return encounteredColumns.lookup(_databaseRelationColumn.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        databaseRelationTypes = new Map(Types::Container, Types::Class);
        encounteredColumns    = new Map(Types::Int64, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTypeDefinitionsIL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes XML for the encountered system table constraint attribute type definition.
    /// </summary>
    /// <param name="_attributeTypeWriter">
    /// An instance of the <c>XmlWriter</c> class that is used to write xml for the attribute types.
    /// </param>
    public void writeTypeDefinitionsIL(PCXmlWriter _attributeTypeWriter)
    {
        PCXmlSessionDatabaseRelationType    xmlSessionDatabaseRelationType;
        MapEnumerator                       mapEnumerator = databaseRelationTypes.getEnumerator();

        PCContractNotNull::assertObject(_attributeTypeWriter, funcName());

        while (mapEnumerator.moveNext())
        {
            xmlSessionDatabaseRelationType = mapEnumerator.currentValue();

            xmlSessionDatabaseRelationType.writeIL(_attributeTypeWriter);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionDatabaseRelationTypes construct()
    {
        return new PCXmlSessionDatabaseRelationTypes();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>