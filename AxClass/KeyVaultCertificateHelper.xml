<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KeyVaultCertificateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;

/// <summary>
/// The <c>KeyVaultCertificateHelper</c> class handles the digital certificates that are available in
/// the Azure KeyVault store.
/// </summary>
public class KeyVaultCertificateHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCertificateFromClient</Name>
				<Source><![CDATA[
    private static X509Certificate2 getCertificateFromClient(
        KeyVaultDefaultUrl _keyVaultUrl,
        KeyVaultAppClientId _keyVaultClientId,
        KeyVaultSecretKey _keyVaultSecretKey,
        KeyVaultCertificate _keyVaultCertificate,
        container _cacheRef,
        boolean _throwOnError = true)
    {
        KeyVaultClient keyVaultClient = KeyVaultClientHelper::getOrCreateClient(
            _keyVaultUrl,
            _keyVaultClientId,
            _keyVaultSecretKey,
            false,
            true,
            _cacheRef);

        X509Certificate2 certificate = keyVaultClient.GetCertificate(_keyVaultCertificate);

        if (!certificate && _throwOnError)
        {
            throw Error("@SYS341169");
        }

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getManualSecretValueFromClient</Name>
				<Source><![CDATA[
    private static str getManualSecretValueFromClient(
        KeyVaultDefaultUrl _keyVaultUrl,
        KeyVaultAppClientId _keyVaultClientId,
        KeyVaultSecretKey _keyVaultSecretKey,
        KeyVaultCertificate _keyVaultCertificate,
        container _cacheRef,
        boolean _throwOnError = true)
    {
        KeyVaultClient keyVaultClient = KeyVaultClientHelper::createClient(
            _keyVaultUrl,
            _keyVaultClientId,
            _keyVaultSecretKey);
        keyVaultClient.parmCacheRef(_cacheRef);

        str manualSecretValue = keyVaultClient.GetValue(_keyVaultCertificate);

        if (!manualSecretValue && _throwOnError)
        {
            KeyVaultCertificateHelper::getKeyVaultLogInformation(_keyVaultUrl, _keyVaultClientId, _cacheRef);

            throw Error("@KeyVault_ManualSecret:UnableToFindManualSecretValue");
        }
        return manualSecretValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the X509 certificate CLR object for the KeyVault certificate reference ID.
    /// </summary>
    /// <param name="_certificateRef">
    /// The KeyVault certificate reference ID.
    /// </param>
    /// <param name="_throwOnError">
    /// A Boolean value that indicates whether the error should be thrown if no certificate is found; optional.
    /// </param>
    /// <returns>
    /// The X509 certificate CLR object.
    /// </returns>
    public static X509Certificate2 getDigitalCertificate(
        KeyVaultCertificateRef _certificateRef,
        boolean _throwOnError = true)
    {
        X509Certificate2 certificate = null;

        KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findRecId(_certificateRef);

        if (keyVaultCertificateTable && keyVaultCertificateTable.KeyVaultCertificateType == KeyVaultCertificateType::Certificate)
        {
            KeyVaultParameters keyVaultParameters = KeyVaultParameters::findRecId(keyVaultCertificateTable.KeyVaultRef);

            if (keyVaultParameters)
            {
                certificate = KeyVaultCertificateHelper::getCertificateFromClient(
                    keyVaultParameters.Url,
                    keyVaultParameters.AppClientId,
                    keyVaultParameters.getClientSecretKey(),
                    keyVaultCertificateTable.KeyVaultCertificate,
                    [keyVaultParameters.RecVersion, keyVaultCertificateTable.KeyVaultCertificate],
                    _throwOnError);
            }
            else
            {
                if (_throwOnError)
                {
                    throw Error("@SYS341169");
                }
            }
        }
        else
        {
            if (_throwOnError)
            {
                throw Error("@SYS341169");
            }
        }

        return certificate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getManualSecretValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the manual secret value for the KeyVault certificate reference ID.
    /// </summary>
    /// <param name="_certificateRef">
    /// The KeyVault certificate reference ID.
    /// </param>
    /// <param name="_throwOnError">
    /// A Boolean value that indicates whether the error should be thrown if no manual secret value is found; optional.
    /// </param>
    /// <returns>
    /// The manual secret value.
    /// </returns>
    public static str getManualSecretValue(
        KeyVaultCertificateRef _certificateRef,
        boolean _throwOnError = true)
    {
        str manualSecretValue;

        KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findRecId(_certificateRef);

        if (keyVaultCertificateTable && keyVaultCertificateTable.KeyVaultCertificateType == KeyVaultCertificateType::Manual)
        {
            KeyVaultParameters keyVaultParameters = KeyVaultParameters::findRecId(keyVaultCertificateTable.KeyVaultRef);

            if (keyVaultParameters)
            {
                manualSecretValue = KeyVaultCertificateHelper::getManualSecretValueFromClient(
                    keyVaultParameters.Url,
                    keyVaultParameters.AppClientId,
                    keyVaultParameters.getClientSecretKey(),
                    keyVaultCertificateTable.KeyVaultCertificate,
                    [keyVaultParameters.RecVersion, keyVaultCertificateTable.KeyVaultCertificate],
                    _throwOnError);
            }
            else
            {
                if (_throwOnError)
                {
                    throw Error("@KeyVault_ManualSecret:UnableToFindManualSecretValue");
                }
            }
        }
        else
        {
            if (_throwOnError)
            {
                throw Error("@KeyVault_ManualSecret:UnableToFindManualSecretValue");
            }
        }

        return manualSecretValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Key Vault certificate.
    /// </summary>
    /// <param name="_certificateRef">
    /// The KeyVault certificate reference ID.
    /// </param>
    /// <returns>
    /// true if certificate exists; otherwise, false.
    /// </returns>
    public static boolean validateCertificate(KeyVaultCertificateRef _certificateRef)
    {
        KeyVaultCertificateTable keyVaultCertificateTable = KeyVaultCertificateTable::findRecId(_certificateRef);
        boolean ret;

        switch (keyVaultCertificateTable.KeyVaultCertificateType)
        {
            case KeyVaultCertificateType::Certificate:
                X509Certificate2 certificate = KeyVaultCertificateHelper::getDigitalCertificate(_certificateRef);
                ret = certificate != null;
                break;

            case KeyVaultCertificateType::Manual:
                str manualSecretValue = KeyVaultCertificateHelper::getManualSecretValue(_certificateRef);
                ret = manualSecretValue != '';
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrivateKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the private key from X509 certificate for the KeyVault certificate reference ID.
    /// </summary>
    /// <param name="_certificateRef">
    /// The KeyVault certificate reference ID.
    /// </param> 
    /// <param name="_throwOnError">
    /// A Boolean value that indicates whether the error should be thrown if no certificate is found; optional.
    /// </param>
    /// <returns>
    /// The private key for certificate.
    /// </returns>
    public static System.Security.Cryptography.RSACryptoServiceProvider getPrivateKey(KeyVaultCertificateRef _certificateRef)
    {
        System.Security.Cryptography.RSACryptoServiceProvider rsa = null;

        X509Certificate2 certificate = KeyVaultCertificateHelper::getDigitalCertificate(_certificateRef);

        if (certificate)
        {
            try
            {
                rsa = certificate.get_PrivateKey();
            }
            catch(Exception::CLRError)
            {
            }
        }

        return rsa;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyVaultLogInformation</Name>
				<Source><![CDATA[
    internal static SysInstrumentationLogger getKeyVaultLogInformation(KeyVaultDefaultUrl _keyVaultUrl, KeyVaultAppClientId _keyVaultClientId, container _cacheRef)
    {
        KeyVaultCertificateTable keyVaultCertificateTable;

        select firstonly KeyVaultCertificateTable where KeyVaultCertificateTable.KeyVaultCertificate == conPeek(_cacheRef, 2);

        str vaultSecretName = keyVaultCertificateTable.Name;

        KeyVaultCertificateLogger logger = KeyVaultCertificateLogger::createLogger(classStr(KeyVaultCertificateHelper));

        return logger.logInformation(strfmt('Unable to find manual secret value for client app id %1 secret name %2 and key vault url is %3', _keyVaultClientId, vaultSecretName, _keyVaultUrl));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>