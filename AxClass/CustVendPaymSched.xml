<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymSched</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendPaymSched
{
    CustVendPaymentSched custVendPaymSched;
    CustVendPaymentSchedLine custVendPaymSchedLine;

    CustPaymSched custPaymSched;
    CustPaymSchedLine custPaymSchedLine;

    VendPaymSched vendPaymSched;
    VendPaymSchedLine vendPaymSchedLine;

    SalesTotals salesTotals;
    PurchTotals purchTotals;
    ProjProposalTotals projProposalTotals;
    CustFreeInvoiceCalcTotals custFreeInvoiceCalcTotals;

    SalesQuotationTotals salesQuotationTotals;

    Common common;

    // <GIN>
    AmountCur taxWithholdAmount;
    TaxWithholdCodeType_IN taxWithholdType;
    boolean checkPaymSchedule;
    // </GIN>

    boolean skipVersionChangeCheck;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyCustVendPaymSched</Name>
				<Source><![CDATA[
    void copyCustVendPaymSched(CustVendPaymentSched _custVendPaymSched)
    {
        CustPaymSchedLine localCustVendPaymSchedLine;
        CustVendPaymentSched newCustVendPaymSched;
        CustVendPaymentSchedLine newCustVendPaymSchedLine;

        // <GIN>
        CustInvoiceJour custInvoiceJourLoc;
        int counter;
        int specifiedcounter;
        PaymSchedLine paymSchedLineLoc;
        container percent = connull();
        AmountCur totalAmount;
        container taxWithholdData;
        // </GIN>

        ttsbegin;

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            if (common.TableId == tablenum(CustInvoiceJour))
            {
                custInvoiceJourLoc = common;
            }
        }
        // </GIN>

        if (_custVendPaymSched.RecId)
        {
            newCustVendPaymSched = _custVendPaymSched.data();
            newCustVendPaymSched.ExtTableId = common.TableId;
            newCustVendPaymSched.ExtRecId = common.RecId;

            this.insertPaymSched(newCustVendPaymSched, skipVersionChangeCheck);

            // <GIN>
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                if (newCustVendPaymSched.PaymBy == PaymSchedBy::Specified)
                {
                    while select Value from paymSchedLineLoc
                        where paymSchedLineLoc.Name == newCustVendPaymSched.Name
                    {
                        counter++;
                        specifiedcounter++;
                        percent = conpoke(percent, counter, paymSchedLineLoc.Value);
                    }
                    counter = 0;
                }
            }
            // </GIN>

            while select localCustVendPaymSchedLine
                where localCustVendPaymSchedLine.ParentRecID == _custVendPaymSched.RecId
            {
                newCustVendPaymSchedLine = localCustVendPaymSchedLine.data();
                newCustVendPaymSchedLine.ParentRecID = newCustVendPaymSched.RecId;

                // <GIN>
                if (TaxWithholdParameters_IN::checkTaxParameters())
                {
                    if (newCustVendPaymSched.PaymBy != PaymSchedBy::AmountByPayment)
                    {
                        counter++;
                        taxWithholdData = this.taxWithholdCustVendPaymSched_IN(
                            newCustVendPaymSched,
                            newCustVendPaymSchedLine,
                            custInvoiceJourLoc,
                            percent,
                            specifiedcounter,
                            totalAmount,
                            counter);

                        newCustVendPaymSchedLine = conpeek(taxWithholdData, 1);
                        totalAmount = conpeek(taxWithholdData, 2);
                    }
                }
                // </GIN>
                newCustVendPaymSchedLine.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPaymSched</Name>
				<Source><![CDATA[
    void copyPaymSched(PaymSched _paymSched)
    {
        SalesTable salesTable;
        MCRInstallmentPlanSalesTable installmentPlanSalesTable;
        PaymSchedLine paymSchedLine;

        ttsbegin;

        if (_paymSched.RecId)
        {
            custVendPaymSched.initValue();
            custVendPaymSched.initFromPaymSched(_paymSched);

            custVendPaymSched.ExtTableId = common.TableId;
            custVendPaymSched.ExtRecId = common.RecId;
            //check if this is an installment order - if so we need to set the
            //reftableid and the refrecid to the installmentPlanSalesTable reference.
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRInstallmentBilling)))
            {
                if (common.TableId == tablenum(SalesTable))
                {
                    salesTable = common.data();

                    installmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
                    if (installmentPlanSalesTable)
                    {
                        custVendPaymSched.MCRRefRecID = installmentPlanSalesTable.RecId;
                        custVendPaymSched.MCRRefTableID = installmentPlanSalesTable.TableId;
                    }
                }
            }

            this.insertPaymSched(custVendPaymSched, skipVersionChangeCheck);

            while select paymSchedLine
                where paymSchedLine.Name == _paymSched.Name
            {
                custVendPaymSchedLine.initValue();
                custVendPaymSchedLine.initFromPaymSchedLine(paymSchedLine);

                custVendPaymSchedLine.initFromCustVendPaymSched(custVendPaymSched);
                custVendPaymSchedLine.insert();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyVendPaymSched</Name>
				<Source><![CDATA[
    void copyVendPaymSched(VendPaymSched _vendPaymSched)
    {
        VendPaymSchedLine localVendPaymSchedLine;
        VendPaymSched newVendPaymSched;
        VendPaymSchedLine newVendPaymSchedLine;

        ttsbegin;

        if (_vendPaymSched.RecId)
        {
            newVendPaymSched = _vendPaymSched.data();
            newVendPaymSched.ExtTableId = common.TableId;
            newVendPaymSched.ExtRecId = common.RecId;

            newVendPaymSched.insert(skipVersionChangeCheck);

            while select localVendPaymSchedLine
                where localVendPaymSchedLine.FatherRecID == _vendPaymSched.RecId
            {
                newVendPaymSchedLine = localVendPaymSchedLine.data();
                newVendPaymSchedLine.FatherRecID = newVendPaymSched.RecId;
                newVendPaymSchedLine.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymSched</Name>
				<Source><![CDATA[
    void createPaymSched(PaymSched _paymSched)
    {
        PaymSchedLine paymSchedLine;
        PaymSchedCalc paymSchedCalc;
        noyes instbilling = noyes::No;
        SalesTable salesTable;
        MCRInstallmentPlanSalesTable mcrInstallmentPlanSalesTable;

        // <GIN>
        CustInvoiceJour custInvoiceJourLoc;
        VendInvoiceJour vendInvoiceJourLoc;
        // </GIN>

        ttsbegin;

        switch (custVendPaymSched.TableId)
        {
            case tablenum(VendPaymSched) :
                custVendPaymSched = VendPaymSched::find(common.TableId, common.RecId);
                break;

            default :
                select custVendPaymSched
                    where custVendPaymSched.ExtTableId == common.TableId
                       && custVendPaymSched.ExtRecId == common.RecId;
                break;
        }

        if (! custVendPaymSched)
        {
            this.copyPaymSched(_paymSched);
        }

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            if (common.TableId == tablenum(CustInvoiceJour))
            {
                custInvoiceJourLoc = common;
                taxWithholdAmount = custInvoiceJourLoc.custInvoiceJour_W().TaxWithholdAmount_IN;
            }
            if (common.TableId == tablenum(VendInvoiceJour))
            {
                vendInvoiceJourLoc = common;
                taxWithholdAmount = vendInvoiceJourLoc.TaxWithholdAmount_IN;
            }
        }
        // </GIN>

        if (isConfigurationkeyEnabled(configurationKeyNum(MCRInstallmentBilling)))
        {
            if (common.tableId == TableNum(SalesTable))
            {
                salesTable = common;
                mcrInstallmentPlanSalesTable = MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId);
                if (mcrInstallmentPlanSalesTable)
                {
                    instbilling = noyes::Yes;
                }
            }
        }

        paymSchedCalc = PaymSchedCalc::construct(
            custVendPaymSched,
            custVendPaymSchedLine,
            _paymSched,
            instbilling);

        custVendPaymSchedLine.initValue();
        custVendPaymSchedLine.initFromPaymSchedLine(paymSchedLine);
        custVendPaymSchedLine.initFromCustVendPaymSched(custVendPaymSched);

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            if (!checkPaymSchedule)
            {
                this.totalTaxWithholdAmount_IN(common.TableId, common.RecId);
            }
            paymSchedCalc.parmTotalTaxWithholdAmount_IN(taxWithholdAmount);
            paymSchedCalc.parmTaxWithholdType_IN(taxWithholdType);
        }
        // </GIN>

        this.initCalcPaymSched(paymSchedCalc);

        paymSchedCalc.parmSkipVersionChangeCheck(skipVersionChangeCheck);
        paymSchedCalc.createTransaction(custVendPaymSchedLine);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCalcPaymSched</Name>
				<Source><![CDATA[
    void initCalcPaymSched(PaymSchedCalc _paymSchedCalc)
    {
        SalesTable salesTable;

        switch (common.tableId)
        {
            case tableNum(CustInvoiceJour), tableNum(VendInvoiceJour) :
                _paymSchedCalc.initFromCustVendInvoiceJour(common);
                break;

            case tableNum(ProjInvoiceJour) :
                _paymSchedCalc.initFromProjInvoiceJour(common);
                break;

            case tableNum(SalesTable) :
                salesTable = common;

                if (isConfigurationkeyEnabled(configurationKeyNum(MCRInstallmentBilling))
                        && MCRInstallmentPlanSalesTable::findSalesId(salesTable.SalesId))
                {
                    _paymSchedCalc.mcrInitFromInstallmentBillingTotals();
                }
                else
                {
                    _paymSchedCalc.initFromSalesTotals(salesTotals);
                }
                break;

            case tableNum(SalesParmTable) :
                _paymSchedCalc.initFromSalesTotals(salesTotals);
                break;

            case tableNum(MCRContinuityCustHeader):
                _paymSchedCalc.mcrInitFromContinuityCustHdrTotals();
                break;

            case tableNum(MCRContinuityCustLine):
                _paymSchedCalc.mcrInitFromContinuityCustLineTotals();
                break;

            case tableNum(PurchTable), tableNum(PurchParmTable), tablenum(VendInvoiceInfoTable) :
                _paymSchedCalc.initFromPurchTotals(purchTotals);
                break;

            case tableNum(CustInvoiceTable) :
                _paymSchedCalc.initFromCustFreeInvoiceCalcTotals(custFreeInvoiceCalcTotals);
                break;

            case tableNum(ProjProposalJour), tableNum(ProjInvoiceParmTable) :
                _paymSchedCalc.initFromProjProprosalTotals(projProposalTotals);
                break;

            // <GBR>
            case tableNum(SalesComplementaryInvoiceHeader):
                _paymSchedCalc.initFromSalesComplInvoice(common);
                break;

            case tableNum(PurchComplementaryInvoiceHeader):
                _paymSchedCalc.initFromPurchComplInvoice(common);
                break;
            // </GBR>

            default :
                if(this.shouldInitPaymSchedCalcFromCommon())
                {
                    this.initPaymSchedCalcFromCommon(_paymSchedCalc);
                }
                else
                {
                    throw error(Error::missingRecord(funcName()));
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInitPaymSchedCalcFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>PaymSchedCalc</c> object should be initialized from extended table.
    /// </summary>
    /// <returns>
    /// true, if <c>initPaymSchedCalcFromCommon</c> method should be run; otherwise, false.
    /// </returns>
    protected boolean shouldInitPaymSchedCalcFromCommon()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaymSchedCalcFromCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>PaymSchedCalc</c> class instance from extended table.
    /// </summary>
    /// <param name = "_paymSchedCalc">
    /// An instance of the <c>PaymSchedCalc</c> class to be initialized.
    /// </param>
    [SuppressBPWarning("BPParameterNotUsed", "Parameter will be used only on extension methods.")]
    protected void initPaymSchedCalcFromCommon(PaymSchedCalc _paymSchedCalc)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPaymSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method inserting the <c>CustVendPaymentSched</c> buffer
    /// taking into account potential change versioning requirements.
    /// </summary>
    /// <param name="_custVendPaymSched">
    /// The <c>CustVendPaymentSched</c> buffer to be inserted.
    /// </param>
    /// <param name="_skipVersionChangeCheck">
    /// True if versioning of changes should be skipped, otherwise false; Optional parameter - false by default.
    /// </param>
    /// <remarks>
    /// This method should be overriden by subclasses when custom behaviour is needed.
    /// </remarks>
    public void insertPaymSched(CustVendPaymentSched _custVendPaymSched, boolean _skipVersionChangeCheck = false)
    {
        _custVendPaymSched.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _common = _common)
    {
        common = _common;

        this.setBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckPaymSchedule_IN</Name>
				<Source><![CDATA[
    public boolean parmCheckPaymSchedule_IN(boolean _checkPaymSchedule = checkPaymSchedule)
    {
        checkPaymSchedule = _checkPaymSchedule;
        return _checkPaymSchedule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipVersionChangeCheck</Name>
				<Source><![CDATA[
    public boolean parmSkipVersionChangeCheck(boolean _skipVersionChangeCheck = skipVersionChangeCheck)
    {
        skipVersionChangeCheck = _skipVersionChangeCheck;

        return skipVersionChangeCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    abstract void setBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustFreeInvoiceCalcTotals</Name>
				<Source><![CDATA[
    void setCustFreeInvoiceCalcTotals(CustFreeInvoiceCalcTotals _custFreeInvoiceCalcTotals)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjProposalTotals</Name>
				<Source><![CDATA[
    void setProjProposalTotals(ProjProposalTotals _projProposalTotals)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchTotals</Name>
				<Source><![CDATA[
    void setPurchTotals(PurchTotals _purchTotals)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTotals</Name>
				<Source><![CDATA[
    void setSalesTotals(SalesTotals _salesTotals)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCustVendPaymSched_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize and return the tax withhold data.
    /// </summary>
    /// <param name="_newCustVendPaymSched">
    /// A <c>CustVendPaymentSched</c> map.
    /// </param>
    /// <param name="_newCustVendPaymSchedLine">
    /// A <c>CustPaymSchedLine</c> buffer.
    /// </param>
    /// <param name="_custInvoiceJourLoc">
    /// A <c>CustInvoiceJour</c> buffer.
    /// </param>
    /// <param name="_percent">
    /// The percentage of payment.
    /// </param>
    /// <param name="_specifiedcounter">
    /// Counter for the payment.
    /// </param>
    /// <param name="_totalAmount">
    /// Total amount of payment.
    /// </param>
    /// <param name="_counter">
    /// The initial counter position.
    /// </param>
    /// <returns>
    /// Returns a container with the data.
    /// </returns>
    private container taxWithholdCustVendPaymSched_IN(
        CustVendPaymentSched _newCustVendPaymSched,
        CustPaymSchedLine _newCustVendPaymSchedLine,
        CustInvoiceJour _custInvoiceJourLoc,
        container _percent,
        int _specifiedcounter,
        AmountCur _totalAmount,
        int _counter)
    {
        AmountCur amountCur;
        container taxWithholdData;

        if (_newCustVendPaymSched.PaymBy == PaymSchedBy::NumOfPayment)
        {
            if (_newCustVendPaymSched.NumOfPayment == 0)
            {
                amountCur = CurrencyExchangeHelper::amount(_custInvoiceJourLoc.InvoiceAmount);
            }
            else
            {
                amountCur = CurrencyExchangeHelper::amount(_custInvoiceJourLoc.InvoiceAmount / _newCustVendPaymSched.NumOfPayment);
            }
            _totalAmount += amountCur;
            if (_counter == _newCustVendPaymSched.NumOfPayment && _newCustVendPaymSched.PaymBy == PaymSchedBy::NumOfPayment)
            {
                _newCustVendPaymSchedLine.DueAmount = amountCur + ((_custInvoiceJourLoc.InvoiceAmount) - _totalAmount);
            }
            else
            {
                _newCustVendPaymSchedLine.DueAmount = amountCur;
            }
        }

        if (_newCustVendPaymSched.PaymBy == PaymSchedBy::Specified)
        {
            amountCur = CurrencyExchangeHelper::amount(_custInvoiceJourLoc.InvoiceAmount * conpeek(_percent, _counter) / 100);
            _totalAmount += amountCur;
            if (_counter == _specifiedcounter && _newCustVendPaymSched.PaymBy == PaymSchedBy::Specified)
            {
                _newCustVendPaymSchedLine.DueAmount = amountCur + ((_custInvoiceJourLoc.InvoiceAmount) - _totalAmount);
            }
            else
            {
                _newCustVendPaymSchedLine.DueAmount = amountCur;
            }
        }

        if (_newCustVendPaymSched.PaymBy == PaymSchedBy::Total)
        {
            _newCustVendPaymSchedLine.DueAmount = _custInvoiceJourLoc.InvoiceAmount;
        }

        taxWithholdData = conpoke(taxWithholdData, 1, _newCustVendPaymSchedLine);
        taxWithholdData = conpoke(taxWithholdData, 2, _totalAmount);
        return taxWithholdData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxWithholdAmount_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total tax withhold amount.
    /// </summary>
    /// <param name="_tableId">
    /// Source Table Id.
    /// </param>
    /// <param name="_recId">
    /// Source table RecId.
    /// </param>
    /// <returns>
    /// Returns total tax Withhold Amount.
    /// </returns>

    public AmountCur totalTaxWithholdAmount_IN(
        tableId _tableId,
        RecId _recId)
    {
        SalesLine salesLine;
        SalesLine_IN salesLine_IN;
        PurchLine purchLine;
        PurchLine_IN purchLine_IN;
        CustInvoiceLine custInvoiceLine;
        CustInvoiceLineTaxExtensionIN custInvoiceLineTaxExtensionIN;

        switch (_tableId)
        {
            case tableNum(SalesTable) :
                taxWithholdAmount = salesTotals.parmTaxWithholdAmount_IN();
                salesLine = SalesLine::find(SalesTable::findRecId(_recId).SalesId);
                salesLine_IN = salesLine.salesLine_IN();
                taxWithholdType = TaxWithholdGroupHeading::find(salesLine_IN.tdsGroup ? salesLine_IN.tdsGroup : salesLine_IN.tcsGroup).TaxType_IN;
                break;

            case tableNum(PurchTable) :
                taxWithholdAmount = purchTotals.parmTaxWithholdAmount_IN();
                purchLine = PurchLine::find(PurchTable::findRecId(_recId).PurchId);
                purchLine_IN = purchLine.purchLine_IN();
                taxWithholdType = TaxWithholdGroupHeading::find(purchLine_IN.tdsGroup ? purchLine_IN.tdsGroup : purchLine_IN.tcsGroup).TaxType_IN;
                break;

            case tableNum(CustInvoiceTable) :
                taxWithholdAmount = custFreeInvoiceCalcTotals.custFreeInvoiceTaxWithholdTotal_IN();
                select firstonly custInvoiceLine
                    where custInvoiceLine.ParentRecId == _recId;
                custInvoiceLineTaxExtensionIN = custInvoiceLine.custInvoiceLineTaxExtensionIN();
                taxWithholdType = TaxWithholdGroupHeading::find(custInvoiceLineTaxExtensionIN.tdsGroup ? custInvoiceLineTaxExtensionIN.tdsGroup : custInvoiceLineTaxExtensionIN.tcsGroup).TaxType_IN;
                break;

            default :
        }

        return taxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustVendPaymSched construct(
        SysModule _sysModule,
        Common _common = _common)
    {
        CustVendPaymSched paymSched;

        switch (_sysModule)
        {
            case SysModule::Cust :
                paymSched = new CustPaymSchedule(_common);
                break;

            case SysModule::Vend :
                paymSched = new VendPaymSchedule(_common);
                break;

            case SysModule::Project :
                paymSched = new ProjPaymSchedule(_common);
                break;

            default :
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                CustVendPaymSched::constructDelegate(_sysModule, _common, result);
                if(result.hasResult())
                {
                    paymSched = result.result() as CustVendPaymSched;
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcname()));
                }
        }

        return paymSched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDelegate</Name>
				<Source><![CDATA[
    static delegate void constructDelegate(SysModule _sysModule, Common _common, EventHandlerResult _result )
    {
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePaymSchedLines</Name>
				<Source><![CDATA[
    static void deletePaymSchedLines(
        CustVendPaymentSched _custVendPaymSched,
        CustVendPaymentSchedLine _custVendPaymSchedLine,
        boolean _skipVersionChangeCheck = false)
    {
        CustVendPaymentSchedLine custVendPaymentSchedLine = _custVendPaymSchedLine.data();

        ttsbegin;

        if (custVendPaymentSchedLine.TableId == tableNum(VendPaymSchedLine) && !_skipVersionChangeCheck)
        {
            if (_custVendPaymSched.ExtTableId == tableNum(PurchTable))
            {
                VersioningPurchaseOrder::newPurchaseOrder(PurchTable::findRecId(_custVendPaymSched.ExtRecId, true)).change(null, custVendPaymentSchedLine);
            }
        }
        delete_from custVendPaymentSchedLine
                where custVendPaymentSchedLine.ParentRecID == _custVendPaymSched.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    static boolean prompt(CustVendPaymentSched custVendPaymentSched)
    {
        return (Box::yesNo(strfmt("@SYS26504", custVendPaymentSched.toolTipRecord()),
                DialogButton::Yes) == DialogButton::Yes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>