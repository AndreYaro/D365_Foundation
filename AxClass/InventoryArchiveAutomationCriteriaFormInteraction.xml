<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventoryArchiveAutomationCriteriaFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles form level interaction with process automation framework.
/// </summary>
internal final class InventoryArchiveAutomationCriteriaFormInteraction
{
    private InventoryArchiveAutomationCriteriaIForm     form;

    private InventoryArchiveDateHelper  archiveDateHelper;
    private FormDateControl             fromDateControl;
    private FormDateControl             toDateControl;
    private FormStringControl           archiveDataAreaId;

    private const str EmptyString = '';
    private InventTransOriginArchiveTrans displayedArchiveRecord;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventoryArchiveAutomationCriteriaFormInteraction construct(InventoryArchiveAutomationCriteriaIForm _form)
    {
        InventoryArchiveAutomationCriteriaFormInteraction formInteraction = new InventoryArchiveAutomationCriteriaFormInteraction();
        formInteraction.form = _form;

        return formInteraction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControls</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setControls()
    {
        archiveDataAreaId.mandatory(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventJournalArchiveJobs</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ArchiveServiceIProvideManagedJobCreationContracts createInventJournalArchiveJobs(ArchiveServiceJobName _archiveJobName)
    {
        var proposedInventoryJournalArchiveTrans = this.setInventJournalArchiveTrans(_archiveJobName);

        var jobRequestCreator = new InventoryArchiveAutomationJobRequestCreator();
        var jobPostRequest = jobRequestCreator.createInventJournalPostJobRequest(proposedInventoryJournalArchiveTrans);

        var singleJobContract = ArchiveServiceManagedJobCreationContract::newForSourceLinkToBeCreatedAfterJobCreation(
            InventoryArchiveAutomationConstants::InventJournalArchiveRegisteredTypeName,
            jobPostRequest,
            proposedInventoryJournalArchiveTrans);

        return singleJobContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransArchiveJobs</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ArchiveServiceIProvideManagedJobCreationContracts createInventTransArchiveJobs(ArchiveServiceJobName _archiveJobName, MultiSelectionHelper _multiSelectionHelper)
    {
        var multipleJobCreationContract = ArchiveServiceManagedJobMultipleJobsCreationContract::construct();

        var selectedArchiveTrans = _multiSelectionHelper.getFirst();

        while (selectedArchiveTrans)
        {
            InventTransArchiveTrans archiveTrans = this.setInventTransArchiveTrans(_archiveJobName, selectedArchiveTrans);

            var jobPostRequestCreator = new InventoryArchiveAutomationJobRequestCreator();
            var jobPostRequest = jobPostRequestCreator.createInventTransPostJobRequest(archiveTrans);

            var jobCreationContractForSelectedArchiveTrans = ArchiveServiceManagedJobCreationContract::newForSourceLinkToBeCreatedAfterJobCreation(
                InventoryArchiveAutomationConstants::InventTransArchiveRegisteredTypeName,
                jobPostRequest,
                archiveTrans);

            multipleJobCreationContract.addJobCreationContract(jobCreationContractForSelectedArchiveTrans);

            selectedArchiveTrans = _multiSelectionHelper.getNext();
        }

        return multipleJobCreationContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransOriginArchiveJobs</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ArchiveServiceIProvideManagedJobCreationContracts createInventTransOriginArchiveJobs(ArchiveServiceJobName _archiveJobName)
    {
        var proposedArchiveTrans = this.initInventTransOriginArchiveTrans(_archiveJobName);

        InventoryArchiveAutomationJobRequestCreator jobRequestCreator = new InventoryArchiveAutomationJobRequestCreator();
        var jobPostRequest = jobRequestCreator.createInventTransOriginPostJobRequest(proposedArchiveTrans);
 
        var singleJobContract = ArchiveServiceManagedJobCreationContract::newForSourceLinkToBeCreatedAfterJobCreation(
            InventoryArchiveAutomationConstants::InventTransOriginArchiveRegisteredTypeName,
            jobPostRequest,
            proposedArchiveTrans);

        return singleJobContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransArchiveTransDataSource</Name>
				<Source><![CDATA[
    internal void initInventTransArchiveTransDataSource()
    {
        FormDataSource dataSource = form.getArchiveHistoryDataSource();

        Query query = dataSource.query();
        QueryBuildDataSource archiveTransQbds = query.dataSourceTable(tableNum(InventTransArchiveProcessHistoryTable));

        if (archiveTransQbds)
        {
            // Show archive trans with Active and 'Ended' state
            var archiveTransStatusRange = archiveTransQbds.addRange(fieldNum(InventTransArchiveProcessHistoryTable, InventTransArchiveState));
            archiveTransStatusRange.value(queryValue(InventTransArchiveState::Ended));
            archiveTransStatusRange.status(RangeStatus::Hidden);

            var archiveTransIsActiveRange = archiveTransQbds.addRange(fieldNum(InventTransArchiveProcessHistoryTable, Active));
            archiveTransIsActiveRange.value(queryValue(NoYes::Yes));
            archiveTransIsActiveRange.status(RangeStatus::Hidden);

            var archiveTransIsReverseRange = archiveTransQbds.addRange(fieldNum(InventTransArchiveProcessHistoryTable, IsReverse));
            archiveTransIsReverseRange.value(queryValue(NoYes::No));
            archiveTransIsReverseRange.status(RangeStatus::Hidden);

            // Exists InventTransArchive records
            QueryBuildDataSource qbdsInventTransArchive = archiveTransQbds.addDataSource(tableNum(InventTransArchive));
            qbdsInventTransArchive.addLink(fieldNum(InventTransArchiveProcessHistoryTable, SessionId), fieldNum(InventTransArchive, SessionId));
            qbdsInventTransArchive.joinMode(JoinMode::ExistsJoin);

            if (!InventoryArchiveSkipOverlappingCheckFlight::instance().isEnabled())
            {
                // Not exists one InventTransArchiveTrans record with status is running or completed
                QueryBuildDataSource qbdsInventTransArchiveTrans = archiveTransQbds.addDataSource(tableNum(InventTransArchiveTrans));
                qbdsInventTransArchiveTrans.addLink(fieldNum(InventTransArchiveProcessHistoryTable, FromDateOfClosedPeriod), fieldNum(InventTransArchiveTrans, ArchiveFromDate));
                qbdsInventTransArchiveTrans.addLink(fieldNum(InventTransArchiveProcessHistoryTable, EndDateOfClosedPeriod), fieldNum(InventTransArchiveTrans, ArchiveToDate));
                qbdsInventTransArchiveTrans.joinMode(JoinMode::NoExistsJoin);

                QueryBuildDataSource qbdsArchiveServiceJobDetailsView = qbdsInventTransArchiveTrans.addDataSource(viewstr(ArchiveServiceJobDetailsView));
                qbdsArchiveServiceJobDetailsView.addLink(fieldNum(InventTransArchiveTrans, RecId), fieldNum(ArchiveServiceJobDetailsView, SourceLinkRecId));
                qbdsArchiveServiceJobDetailsView.joinMode(JoinMode::InnerJoin);

                qbdsArchiveServiceJobDetailsView.addRange(fieldNum(ArchiveServiceJobDetailsView, SourceLinkTableId)).value(SysQuery::value(tableNum(InventTransArchiveTrans)));
                qbdsArchiveServiceJobDetailsView.addRange(fieldNum(ArchiveServiceJobDetailsView, Status)).value(SysQuery::valueNot(enum2str(ArchiveServiceJobStatus::Error)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refresh</Name>
				<Source><![CDATA[
    internal void refresh()
    {
        FormDataSource dataSource = form.getArchiveHistoryDataSource();
        dataSource.research();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClosedPeriodFromDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void lookupClosedPeriodFromDate()
    {
        archiveDateHelper.lookupClosedPeriodDate(fromDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupClosedPeriodToDate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void lookupClosedPeriodToDate()
    {
        archiveDateHelper.lookupClosedPeriodDate(toDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDateValueModified</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void fromDateValueModified()
    {
        archiveDateHelper.adjustFromToDateValueBasedOnLedgerFiscalCalendarPeriod(fromDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>toDateValueModified</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void toDateValueModified()
    {
        archiveDateHelper.adjustFromToDateValueBasedOnLedgerFiscalCalendarPeriod(toDateControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onModifiedInventTransOriginArchiveDataAreaId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onModifiedInventTransOriginArchiveDataAreaId()
    {
        if (displayedArchiveRecord)
        {
            displayedArchiveRecord.ArchiveDataAreaId = archiveDataAreaId.valueStr();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate(RefTableId _sourceTableId)
    {
        boolean isValid = true;
        FromDate closedPeriodFromDate;
        FromDate closedPeriodToDate;

        switch (_sourceTableId)
        {
            case tableNum(InventJournalArchiveTrans):

                [isValid, closedPeriodFromDate, closedPeriodToDate] = InventoryArchiveDateHelper::validate(fromDateControl.dateValue(), toDateControl.dateValue());
                isValid = isValid && InventoryArchiveDateHelper::validateCheckForInventJournalArchive(fromDateControl.dateValue(), toDateControl.dateValue());
                isValid = isValid && InventoryArchiveDateHelper::warningInventJournalArchivingJob();

                if (isValid)
                {
                    fromDateControl.dateValue(closedPeriodFromDate);
                    toDateControl.dateValue(closedPeriodToDate);
                }
            break;

            case tableNum(InventTransArchiveProcessHistoryTable):

                var archiveTransHistoryDS = this.form.getArchiveHistoryDataSource();

                if (!archiveTransHistoryDS.anyMarked())
                {
                    isValid = checkFailed('@SCM:InventArchiveTransNoRecordSelectedError');
                }

                break;

            case tableNum(InventTransOriginArchiveTrans):

                if (isValid && !archiveDataAreaId.valueStr())
                {
                    isValid = checkFailed("@SCM:InventTransOriginArchiveAutomationCriteriaDataAreaIdValidationMessage");
                }
                break;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initialize()
    {
        fromDateControl = form.getFromDateControl();
        toDateControl = form.getToDateControl();
        archiveDataAreaId = form.getArchiveDataAreaIdControl();
        if (fromDateControl != null && toDateControl != null)
        {
            archiveDateHelper = InventoryArchiveDateHelper::constructFromDateControl(fromDateControl.name(), toDateControl.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventJournalArchiveTrans</Name>
				<Source><![CDATA[
    private InventJournalArchiveTrans setInventJournalArchiveTrans(ArchiveServiceJobName _archiveJobName)
    {
        InventJournalArchiveTrans archiveTrans;
        UserInfo userInfo;

        archiveTrans.Name                   = _archiveJobName;
        archiveTrans.ArchiveFromDate        = fromDateControl.dateValue();
        archiveTrans.ArchiveToDate          = toDateControl.dateValue();
        archiveTrans.ArchiveDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select Name, networkAlias from userInfo where userInfo.Id == curUserId();
        archiveTrans.ArchiveUserId = userInfo.name ? userInfo.name : userInfo.networkAlias;

        return archiveTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransArchiveTrans</Name>
				<Source><![CDATA[
    private InventTransArchiveTrans setInventTransArchiveTrans(ArchiveServiceJobName _archiveJobName, InventTransArchiveProcessHistoryTable _selectedArchiveTrans)
    {
        InventTransArchiveTrans archiveTrans;
        UserInfo userInfo;

        archiveTrans.Name                   = _archiveJobName;
        archiveTrans.ArchiveFromDate        = _selectedArchiveTrans.FromDateOfClosedPeriod;
        archiveTrans.ArchiveToDate          = _selectedArchiveTrans.EndDateOfClosedPeriod;
        archiveTrans.ArchiveDate            = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        select Name, networkAlias from userInfo where userInfo.Id == curUserId();
        archiveTrans.ArchiveUserId = userInfo.name ? userInfo.name : userInfo.networkAlias;

        return archivetrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransOriginArchiveTrans</Name>
				<Source><![CDATA[
    private InventTransOriginArchiveTrans initInventTransOriginArchiveTrans(ArchiveServiceJobName _jobName)
    {
        InventTransOriginArchiveTrans archiveTrans;
        UserInfo userInfo;

        archiveTrans.Name = _jobName;

        archiveTrans.ArchiveDataAreaId = archiveDataAreaId.valueStr();
        select Name, networkAlias from userInfo where userInfo.Id == curUserId();
        archiveTrans.ArchiveUserId = userInfo.name ? userInfo.name : userInfo.networkAlias;

        return archiveTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>