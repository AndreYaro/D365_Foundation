<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalTransferController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalTransferController</c> class acts as a controller for the
/// <c>SubLedgerJournalTransferOperation</c> service.
/// </summary>
/// <remarks>
/// This class is a customized controller extending from the <c>SysOperationServiceController</c> class.
/// </remarks>
internal class SubledgerJournalTransferController extends SysOperationServiceController implements BatchRetryable
{
    #define.SourceDocumentTypeControlName('Fld1_1')
    #define.FiscalYearControlName('Fld2_1')
    #define.FiscalPeriodControlName('Fld3_1')

    static boolean clearCaption;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides caption for the transfer.
    /// </summary>
    /// <returns>
    /// Caption for the transfer.
    /// </returns>
    public ClassDescription caption()
    {
        ClassDescription ret;
        SubledgerJournalTransferRequest subledgerJournalTransferRequest;
                
        if (clearCaption)
        {
            // Batch transfer for subledger journals
            ret = "@SYS317493";
            return ret;
        }

        subledgerJournalTransferRequest = this.getDataContractObject(classStr(SubledgerJournalTransferRequest));
        if (subledgerJournalTransferRequest)
        {
            // Batch transfer for subledger journals ( %1, %2,%3)
            ret = strFmt("@SYS321146", subledgerJournalTransferRequest.parmSourceDocumentTypeEnumTranslatedName(), subledgerJournalTransferRequest.parmSubledgerJournalTransferMode(),
                Ledger::name(subledgerJournalTransferRequest.parmledgerId()));
        }        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    public void getFromDialog()
    {
        FormStringControl                   yearNameControl;
        FormStringControl                   periodNameControl;
        FormStringControl                   sourceDocumentTypeControl;
        SysOperationDialog                  dlg;
        FormRun                             formRun;
        SubledgerJournalTransferRequest     subledgerJournalTransferRequest;
        SourceDocumentTmpTypeInformation    sourceDocumentTmpTypeInformation;

        dlg = this.dialog();
        formRun = dlg.formRun();

        super();

        sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classId2Name(classIdGet(this)));
        yearNameControl = dlg.dialogForm().runControl(#FiscalYearControlName);
        periodNameControl = dlg.dialogForm().runControl(#FiscalPeriodControlName);
        sourceDocumentTypeControl = dlg.dialogForm().runControl(#SourceDocumentTypeControlName);

        select ClassId, SourceRelationType from sourceDocumentTmpTypeInformation
            where sourceDocumentTmpTypeInformation.EnumTranslatedName == sourceDocumentTypeControl.valueStr();

        subledgerJournalTransferRequest = this.getDataContractObject(classStr(SubledgerJournalTransferRequest));

        if (subledgerJournalTransferRequest)
        {
            // Set the values in datacontract
            subledgerJournalTransferRequest.setFiscalCalendarPeriod(yearNameControl.valueStr(),periodNameControl.valueStr());
            subledgerJournalTransferRequest.parmSourceDocumentType(sourceDocumentTmpTypeInformation.ClassId);
            subledgerJournalTransferRequest.parmSourceDocumentRelationType(sourceDocumentTmpTypeInformation.SourceRelationType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogCaption</Name>
				<Source><![CDATA[
    public LabelType parmDialogCaption(LabelType _dialogCaption = "")
    {
        LabelType caption;

        caption = "@SYS317493";

        return caption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the service operation.
    /// </summary>
    public void run()
    {
        SubledgerJournalTransferController  subledgerJournalTransferController;
        SubledgerJournalTransferRequest     subledgerJournalTransferRequest;
        Map                                 map;
        MapEnumerator                       mapEnumerator;
        RefRecId                            ledger;
        SourceDocumentClassId               sourceDocumentType;
        RefRecId                            fiscalCalendarPeriod;
        NoYes                               doSummarization;
        SourceDocumentTmpTypeInformation    sourceDocumentTmpTypeInformation;

        sourceDocumentTmpTypeInformation = SourceDocumentType::getSourceDocumentTypeInformation(classId2Name(classIdGet(this)));

        subledgerJournalTransferRequest = this.getDataContractObject(classStr(SubledgerJournalTransferRequest));

        clearCaption = false;

        // If ledger and source document type OR accounting event are in the data contract
        if (subledgerJournalTransferRequest &&
            ((subledgerJournalTransferRequest.parmledgerId() && subledgerJournalTransferRequest.parmSourceDocumentType()) ||
              subledgerJournalTransferRequest.parmAccountingEventId())
           )
        {
            //This code runs to make sure that the source relation type matches the documet we are transferring to GL because in some cases
            //after posting subledger entries the relation changes on the table and the new relation is updated on SDL
            if (subledgerJournalTransferRequest.parmSubledgerJournalTransferMode() ==SubledgerJournalTransferMode::AsynchronousBatch ||
                subledgerJournalTransferRequest.parmSubledgerJournalTransferMode() ==SubledgerJournalTransferMode::ScheduledBatch ||
                subledgerJournalTransferRequest.parmSourceDocumentRelationType() == 0)
            {
                select firstonly sourceDocumentTmpTypeInformation
                    where sourceDocumentTmpTypeInformation.ClassId == subledgerJournalTransferRequest.parmSourceDocumentType();

                if (sourceDocumentTmpTypeInformation)
                {
                    subledgerJournalTransferRequest.parmSourceDocumentRelationType(sourceDocumentTmpTypeInformation.SourceRelationType);
                    subledgerJournalTransferRequest.parmSourceDocumentTypeEnumTranslatedName(sourceDocumentTmpTypeInformation.EnumTranslatedName);
                }
            }

            SubledgerJournalEntryNotTransferred localSubledgerJournalEntryNotTransferred;
            //Check whether we have something to transfer for the source document type. If yes then only execute transfer
            select firstonly RecId from localSubledgerJournalEntryNotTransferred
                where localSubledgerJournalEntryNotTransferred.SourceRelationType == subledgerJournalTransferRequest.parmSourceDocumentRelationType() &&
                    localSubledgerJournalEntryNotTransferred.Ledger == subledgerJournalTransferRequest.parmledgerId();
                
            if (localSubledgerJournalEntryNotTransferred || subledgerJournalTransferRequest.parmAccountingEventId())
            {
                //These are the transfer jobs that were scheduled with a document type for scheduled batch option.
                //They were constructed with default option so we need to get the correct summarization settings. 
                //So if AccountingEventId is not set we will check for summarization settings else set it to false.
                if (subledgerJournalTransferRequest.parmAccountingEventId())
                {
                    subledgerJournalTransferRequest.parmDoSummarization(NoYes::No);
                }
                else
                {
                    SubledgerJournalTransferRule subledgerJournalTransferRule = SubledgerJournalTransferRule::findBestMatchRule(
                        subledgerJournalTransferRequest.parmSourceDocumentType(),
                        subledgerJournalTransferRequest.parmledgerId());
                                
                    subledgerJournalTransferRequest.parmDoSummarization(subledgerJournalTransferRule.IsSummarizationEnabled);
                    subledgerJournalTransferRequest.parmSubledgerJournalTransferMode(subledgerJournalTransferRule.TransferMode);
                }

                super();
            }
        }
        // If multiple transfers need to be executed
        else
        {
            SubledgerJournalEntryNotTransferred subledgerJournalEntryNotTransferred;

            if (subledgerJournalTransferRequest.parmledgerId() == 0)
            {
                subledgerJournalTransferRequest.parmledgerId(Ledger::current());
            }

            select firstonly subledgerJournalEntryNotTransferred 
                where subledgerJournalEntryNotTransferred.Ledger == subledgerJournalTransferRequest.parmledgerId();

            if (subledgerJournalEntryNotTransferred)
            {
                map = SubledgerJournalTransferRule::getDocumentTypesAndSummarizationSetting(subledgerJournalTransferRequest.parmledgerId(),subledgerJournalTransferRequest.parmSourceDocumentType());
                fiscalCalendarPeriod = subledgerJournalTransferRequest.parmFiscalCalendarPeriod();

                mapEnumerator = map.getEnumerator();
                // Loop through and execute multiple transfers
                while (mapEnumerator.moveNext())
                {
                    sourceDocumentType = mapEnumerator.currentKey();

                    // When the transfer to GL recurring batch task is invoked during AOS startup
                    // it occasionally gets stuck in this loop. This safety valve ensures the AOS
                    // will start which is, of course, very important.

                    // The source document is zero when there is some logical data corruption
                    // further up the stack and we need to skip this entry to avoid recursive loop.
                    if (sourceDocumentType == 0)
                    {
                        continue;
                    }

                    [ledger, doSummarization] = mapEnumerator.currentValue();

                    subledgerJournalTransferController = this.createSubledgerJournalTransferController();

                    // Initialize data contract
                    subledgerJournalTransferRequest = subledgerJournalTransferController.getDataContractObject(classStr(SubledgerJournalTransferRequest));
                    subledgerJournalTransferRequest.parmledgerId(ledger);
                    subledgerJournalTransferRequest.parmSourceDocumentType(sourceDocumentType);

                    select firstonly sourceDocumentTmpTypeInformation
                        where sourceDocumentTmpTypeInformation.ClassId == sourceDocumentType;

                    if (sourceDocumentTmpTypeInformation)
                    {
                        subledgerJournalTransferRequest.parmSourceDocumentRelationType(sourceDocumentTmpTypeInformation.SourceRelationType);
                        subledgerJournalTransferRequest.parmSourceDocumentTypeEnumTranslatedName(sourceDocumentTmpTypeInformation.EnumTranslatedName);
                    }
                    subledgerJournalTransferRequest.parmFiscalCalendarPeriod(fiscalCalendarPeriod);
                    subledgerJournalTransferRequest.parmDoSummarization(doSummarization);
                    subledgerJournalTransferRequest.parmSubledgerJournalTransferMode(SubledgerJournalTransferMode::ScheduledBatch);                    

                    subledgerJournalTransferController.run();                    
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubledgerJournalTransferController</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>SubledgerJournalTransferController</c>.
    /// </summary>
    /// <returns>An instance of <c>SubledgerJournalTransferController</c>.</returns>
    protected SubledgerJournalTransferController createSubledgerJournalTransferController()
    {
        // Create new controller for this transfer. Mode = Synchronous if parent is synchronous, Else reliable asynchronous.
        subledgerJournalTransferController subledgerJournalTransferController = new SubledgerJournalTransferController(classStr(SubledgerJournalTransferOperation),identifierStr(executeTransfer),
                                                                                            (!this.isInBatch()) ? executionMode:SysOperationExecutionMode::ReliableAsynchronous);

        return subledgerJournalTransferController;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if the class must run in batch or not.
    /// Forces the slider in the dialog to true.
    /// </summary>
    /// <returns>True since this class must always run in batch.</returns>
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        SubledgerJournalTransferController  controller;
        SubledgerJournalTransferRequest     dataContract;
        identifierName                      className;
        identifierName                      methodName;
        SysOperationExecutionMode           executionMode;

        [className, methodName, executionMode] = SysOperationServiceController::parseServiceInfo(args);
        controller = new SubledgerJournalTransferController(className, methodName, executionMode);
        clearCaption = true;
        
        // Initialize data contract and set default ledger to current
        dataContract = controller.getDataContractObject(classStr(SubledgerJournalTransferRequest));
        dataContract.parmledgerId(Ledger::current());

        if (controller.prompt())
        {
            controller.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>