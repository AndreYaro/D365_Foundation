<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayCreatePayment_CashSheetTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RPayCreatePayment_CashSheetTable extends RPayCreatePayment_Cash
{
    RPaySheetTable  sheetTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalAmount</Name>
				<Source><![CDATA[
    protected Amount calcTotalAmount()
    {
        RPaySheetTable formSheetTable, rPaySheetTableCheck;
        Amount         ret;

        for (formSheetTable = table_ds.getFirst(true) ?
                                   table_ds.getFirst(true) :
                                   table_ds.cursor();
             formSheetTable;
             formSheetTable = table_ds.getNext())
        {
            rPaySheetTableCheck = RPaySheetTable::find(formSheetTable.RecId);
            if (rPaySheetTableCheck.PaySheetSost == RPaySheetSost::Paid)
            {
                throw error(strfmt("@RUP663", formSheetTable.PaySheetNum, formSheetTable.TransDate));
            }

            ret += formSheetTable.payCachSum();
            notes = notes ?
                        "@GLS105820"+ formSheetTable.PaySheetNum :
                        strFmt("@GLS107148" , notes , formSheetTable.PaySheetNum);
            counter ++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected boolean createTrans()
    {
        RPayParameters      payParameters = RPayParameters::find();
        boolean             ret;
        RPayTitleposting    payTitlePosting;

        if (! payParameters.OffsetAccountPostingProfile)
        {
            return checkFailed("@RUP2662");
        }

        super();

        ttsbegin;

        payTitlePosting = RPayTitleposting::findAccount(payParameters.OffsetAccountPostingProfile, '', '', '', 0);

        ledgerJournalTrans.OffsetAccountType        = payTitlePosting.AccountType;
        ledgerJournalTrans.OffsetLedgerDimension    = LedgerDimensionFacade::serviceCreateLedgerDimension(payTitlePosting.LedgerDimension, payTitlePosting.DefaultDimension);
        if (ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger)
        {
            ledgerJournalTrans.OffsetDefaultDimension = payTitlePosting.DefaultDimension;
        }

        ledgerJournalTrans.RCashPayTransType    = RCashPayLedgerTransType::Cash;
        this.createLedgerJournalTrans(ledgerJournalTrans, ledgerJournalTable);
        ret = ledgerJournalTrans.RecId;

        ledgerJournalTrans.DocumentNum          = sheetTable.PaySheetNum;
        ledgerJournalTrans.DocumentDate         = sheetTable.TransDate;
        ledgerJournalTrans.PaymentNotes         = "@RUP62" + ' ' +
                                                  strfmt("@GLS102243", sheetTable.PaySheetNum, sheetTable.TransDate);
        ledgerJournalTrans.BankCentralBankPurposeText =  ledgerJournalTrans.PaymentNotes;
        ledgerJournalTrans.update();

        ret = this.createCashTrans() && ret;

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    protected void postUpdate()
    {
        RPaySheetTable formSheetTable, oldSheetTable;

        ttsbegin;

        for (formSheetTable = table_ds.getFirst(true) ? table_ds.getFirst(true) : table_ds.cursor();
             formSheetTable;
             formSheetTable = table_ds.getNext())
        {
            oldSheetTable = RPaySheetTable::find(formSheetTable.RecId, true);
            if (oldSheetTable.PaySheetSost == RPaySheetSost::Paid)
            {
                throw error(strfmt("@RUP663", oldSheetTable.PaySheetNum, oldSheetTable.TransDate));
            }
            oldSheetTable.CashOrderDate   = cashTrans.TransDate;
            oldSheetTable.CashOrderNum    = cashTrans.DocId;
            oldSheetTable.CashAccount     = cashTrans.AccountNum;
            oldSheetTable.CashJournalNum  = ledgerJournalTable.JournalNum;

            oldSheetTable.updateDisbursedSum(oldSheetTable.payCachSum());
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataSource</Name>
				<Source><![CDATA[
    public void setDataSource(Common _sheetTable, FormDataSource _ds)
    {
        super(_sheetTable, _ds);
        sheetTable    = _sheetTable;
        transDate     = sheetTable.PaySheetDateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@RUP56";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>