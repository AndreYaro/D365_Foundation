<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReport_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>TaxTransReport_MY</c> is used to calculate tax report based on reporting code framework.
/// </summary>
public class TaxTransReport_MY extends TaxTransReport
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findTaxTransByNoteType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find specific <c>TaxTrans</c> records where posted from customer/vendor invoice journals.
    /// </summary>
    /// <param name="_taxTransRecIdTmp">
    /// Temp table to store found RecId of <c>TaxTrans</c>.
    /// </param>
    /// <param name="_fromDate">
    /// Start date of a period.
    /// </param>
    /// <param name="_toDate">
    /// End date of a period.
    /// </param>
    /// <param name="_taxPeriod">
    /// Tax period to search.
    /// </param>
    /// <param name="_versionMin">
    /// Min reporting version.
    /// </param>
    /// <param name="_versionMax">
    /// Max reporting version.
    /// </param>
    /// <param name="_noteType">
    /// Note type to search.
    /// </param>
    protected void findTaxTransByNoteType(
        TaxTransRecIdTmp_MY _taxTransRecIdTmp,
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        Counter             _versionMin,
        Counter             _versionMax,
        NoteType_MY         _noteType
        )
    {
        TaxTrans            taxTrans;
        CustInvoiceJour     custInvoiceJour;
        CustInvoiceJour_W   custInvoiceJour_W;
        VendInvoiceJour     vendInvoiceJour;
        VendInvoiceJour_W   vendInvoiceJour_W;

        insert_recordset _taxTransRecIdTmp(RefRecId, NoteType)
            select RecId, _noteType
            from TaxTrans
                where (taxTrans.Source          == TaxModuleType::Sales
                    || taxTrans.Source          == TaxModuleType::FreeTxtInvoice)
                    && taxTrans.TransDate       >= _fromDate
                    && taxTrans.TransDate       <= _toDate
                    && taxTrans.TaxPeriod       == _taxPeriod
                    && taxTrans.TaxRepCounter   >= _versionMin
                    && taxTrans.TaxRepCounter   <= _versionMax
            exists join custInvoiceJour
                where custInvoiceJour.LedgerVoucher == taxTrans.Voucher
                    && custInvoiceJour.InvoiceDate  == taxTrans.TransDate
            exists join custInvoiceJour_W
                where custInvoiceJour_W.CustInvoiceJour == custInvoiceJour.RecId
                    && custInvoiceJour_W.NoteType_MY    == _noteType;

        insert_recordset _taxTransRecIdTmp(RefRecId, NoteType)
            select RecId, _noteType
            from TaxTrans
                where taxTrans.Source           == TaxModuleType::Purch
                    && taxTrans.TransDate       >= _fromDate
                    && taxTrans.TransDate       <= _toDate
                    && taxTrans.TaxPeriod       == _taxPeriod
                    && taxTrans.TaxRepCounter   >= _versionMin
                    && taxTrans.TaxRepCounter   <= _versionMax
            exists join vendInvoiceJour
                where vendInvoiceJour.LedgerVoucher == taxTrans.Voucher
                    && vendInvoiceJour.InvoiceDate  == taxTrans.TransDate
            exists join vendInvoiceJour_W
                where vendInvoiceJour_W.VendInvoiceJour == vendInvoiceJour.RecId
                    && vendInvoiceJour_W.NoteType_MY    == _noteType;
    }
]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Table</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will return a table containing records with all reportIds and Amounts for a given period.
    /// </summary>
    /// <returns>
    /// Returns <c>TmpTaxReportById</c> temp table.
    /// </returns>
    /// <param name="_fromDate">
    /// Start date of a period.
    /// </param>
    /// <param name="_toDate">
    /// End date of a period.
    /// </param>
    /// <param name="_taxPeriod">
    /// Tax period to search.
    /// </param>
    /// <param name="_taxRepVersion">
    /// Report version of the records.
    /// </param>
    /// <param name="_taxRepCounter">
    /// Report counter of the records.
    /// </param>
    /// <param name="_reported">
    /// Is reported.
    /// </param>
    /// <param name="_debitCredit">
    /// Filter out debit only or credit only records.
    /// </param>
    /// <param name="_versionMin">
    /// Min reporting version.
    /// </param>
    /// <param name="_versionMax">
    /// Max reporting version.
    /// </param>
    TmpTaxReportById taxAmountByReportId_Table(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCounter,
        NoYes               _reported,
        DebCredProposal     _debitCredit,
        Counter             _versionMin,
        Counter             _versionMax
        )
    {
        TmpTaxReportById            tmpTaxReportById;
        TaxTrans                    taxTrans;
        TaxTransRecIdTmp_MY         taxTransRecIdTmp;

        ttsBegin;

        if (_debitCredit == DebCredProposal::None || DebCredProposal::Debit)
        {
            this.findTaxTransByNoteType(taxTransRecIdTmp, _fromDate, _toDate, _taxPeriod, _versionMin, _versionMax, NoteType_MY::Blank);
            this.findTaxTransByNoteType(taxTransRecIdTmp, _fromDate, _toDate, _taxPeriod, _versionMin, _versionMax, NoteType_MY::DebitNote);
        }

        if (_debitCredit == DebCredProposal::None || DebCredProposal::Credit)
        {
            this.findTaxTransByNoteType(taxTransRecIdTmp, _fromDate, _toDate, _taxPeriod, _versionMin, _versionMax, NoteType_MY::CreditNote);
        }

        // Insert normal invoice amount.
        while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
            from TaxTrans
            group by TaxDirection, TaxCode, TaxOrigin
            exists join taxTransRecIdTmp
                where taxTransRecIdTmp.NoteType  == NoteType_MY::Blank
                    && taxTransRecIdTmp.RefRecId == TaxTrans.RecId
        {
            tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No, null, TaxReportLayout::Default, NoYes::No);
        }

        // Insert debit note amount.
        while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
            from TaxTrans
            group by TaxDirection, TaxCode, TaxOrigin
            exists join taxTransRecIdTmp
                where taxTransRecIdTmp.NoteType  == NoteType_MY::DebitNote
                    && taxTransRecIdTmp.RefRecId == TaxTrans.RecId
        {
            tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No, null, TaxReportLayout::Default, NoYes::Yes);
        }

        // Insert credit note amount.
        while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
            from TaxTrans
            group by TaxDirection, TaxCode, TaxOrigin
            exists join taxTransRecIdTmp
                where taxTransRecIdTmp.NoteType  == NoteType_MY::CreditNote
                    && taxTransRecIdTmp.RefRecId == TaxTrans.RecId
        {
            tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::Yes);
        }

        // Insert reporting code amount for other transactions by default logic.
        if (_debitCredit    == DebCredProposal::None
            || _debitCredit == DebCredProposal::Debit)
        {
            //Selects only transactions that are not caused by credit notes.
            while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
                 from taxTrans
                 group by TaxDirection, TaxCode, TaxOrigin
                 where
                       taxTrans.TransDate       >= _fromDate                       &&
                       taxTrans.TransDate       <= _toDate                         &&
                       taxTrans.TaxPeriod       == _taxPeriod                      &&
                       taxTrans.TaxRepCounter   >= _versionMin                     &&
                       taxTrans.TaxRepCounter   <= _versionMax                     &&
                       taxTrans.Source          != TaxModuleType::Tax              &&
                      (((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0)     &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                        taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                      ((taxTrans.TaxBaseAmount  < 0 || taxTrans.TaxAmount < 0)     &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                        taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                       ((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                       ((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0)     &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                notexists join taxTransRecIdTmp
                    where taxTrans.RecId == taxTransRecIdTmp.RefRecId
            {
                tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No);
            }
        }

        if (_debitCredit == DebCredProposal::None ||
            _debitCredit == DebCredProposal::Credit)
        {
            //Selects only transactions there is caused by credit notes.
            while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
                 from taxTrans
                 group by TaxDirection, TaxCode
                 where
                       taxTrans.TransDate       >= _fromDate                       &&
                       taxTrans.TransDate       <= _toDate                         &&
                       taxTrans.TaxPeriod       == _taxPeriod                      &&
                       taxTrans.TaxRepCounter   >= _versionMin                     &&
                       taxTrans.TaxRepCounter   <= _versionMax                     &&
                       taxTrans.Source          != TaxModuleType::Tax              &&
                      (((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                       ((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0)     &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                       ((taxTrans.TaxBaseAmount > 0 || taxTrans.TaxAmount > 0)     &&
                        taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                       ((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                        taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                       (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                        taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                notexists join taxTransRecIdTmp
                    where taxTrans.RecId == taxTransRecIdTmp.RefRecId
            {
                tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::Yes);
            }
        }

        ttscommit;

        return tmpTaxReportById;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>