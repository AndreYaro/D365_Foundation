<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegParametersEngine_Assets</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegParametersEngine_Assets extends RTax25RegParametersEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkGroup</Name>
				<Source><![CDATA[
        private boolean checkGroup(NotesLine _parameter)
    {
        AssetGroupId    assetGroupId;
        boolean         ret = true;
        container       contain;

        Counter         containLen;
        Counter         i = 1;
        ;

        contain     = RTax25RegParametersEngine::parameters2Con(_parameter);
        containLen  = conLen(contain);

        do
        {
            assetGroupId = strLTrim(strRTrim(conPeek(contain,i)));

            if (assetGroupId && ! RAssetGroup::find(assetGroupId))
            {
                ret = checkFailed("@SYS68284");
                break;
            }

            i++;
        }
        while (assetGroupId && i <= containLen);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkType</Name>
				<Source><![CDATA[
        private boolean checkType(NotesLine _parameter, int _enumNum)
    {
        Range           line;
        SysDictEnum     dictEnum = new SysDictEnum(_enumNum);
        boolean         ret      = true;
        container       contain;
        Counter         containLen;
        Counter         i = 1;
        ;


        contain     = RTax25RegParametersEngine::parameters2Con(_parameter);
        containLen  = conLen(contain);

        do
        {
            line = this.deleteCommas(strLTrim(strRTrim(conPeek(contain,i))));

            if (line && line != dictEnum.value2Name(dictEnum.name2Value(line)))
            {
                ret = checkFailed("@SYS68284");
                break;
            }

            i++;
        }
        while (i <= containLen);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCommas</Name>
				<Source><![CDATA[
        private Range deleteCommas(Range _parameter)
    {
        Counter pos;
        Range   parm = _parameter;
        ;

        do
        {
            pos = strScan(parm, '"', 1, strLen(parm));
            if (pos)
            {
                parm = strDel(parm, pos, 1);
            }
        }
        while (pos);

        return parm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
        #define.ParameterCode1(1)
    #define.ParameterCode2(2)
    #define.ParameterCode3(3)
    #define.ParameterCode4(4)
    public void lookup(FormStringControl _lookupCtrl)
    {
        Args                 args;
        SysTableLookup       sysTableLookup;
        Query                query;
        RTax25RegisterType   registerType;
        RAssetStandardId     assetStandardId =  RAssetParameters::find().StandardTaxIdDefault;
        ;

        registerParameters = registerParametersDs.cursor();
        registerType       = RTax25RegisterTable::findRegisterId(registerParameters.RegisterId).RegisterType;

        switch (registerParameters.ParameterCode)
        {
            case #ParameterCode1: // Asset group
                _lookupCtrl.replaceOnLookup(false);
                _lookupCtrl.hasChanged(false);
                 RAssetGroup::lookupGroup(_lookupCtrl, assetStandardId);
            break;

            case #ParameterCode2: // Assset Type
                args    = new Args(formStr(SysLookup));
                switch (registerType)
                {
                    case RTax25RegisterType::AssetsCost,
                         RTax25RegisterType::AssetsDisposal,
                         RTax25RegisterType::AssetDeprBonusRecovery,
                         RTax25RegisterType::TemporaryDifferences,
                         RTax25RegisterType::TemporaryDifferencesByBalance:
                         args.parm(int2str(enumNum(RAssetType)));
                         break;
                    case RTax25RegisterType::TangibleAssetInfo,
                         RTax25RegisterType::TangibleDepreciation,
                         RTax25RegisterType::TangibleGroupDepreciation :
                         args.parm(int2str(enumNum(RAssetTypeTangible)));
                         break;
                    case RTax25RegisterType::IntangibleAssetInfo,
                         RTax25RegisterType::IntangibleDepreciation,
                         RTax25RegisterType::IntangibleGroupDepreciation :
                         args.parm(int2str(enumNum(RAssetTypeIntangible)));
                         break;
                }

                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);
            break;

            case #ParameterCode3: // Registers and ProfitId
                switch (registerType)
                {
                    case RTax25RegisterType::AssetsDisposal         :
                        args    = new Args(formStr(SysLookup));
                        args.parm(int2str(enumNum(NoYesCombo)));

                        formRun = classfactory.formRunClass(args);
                        formRun.init();

                        _lookupCtrl.performFormLookup(formRun);
                    break;
                    case RTax25RegisterType::IntangibleDepreciation :
                        _lookupCtrl.replaceOnLookup(true);
                        _lookupCtrl.hasChanged(false);

                        query = new Query();
                        sysTableLookup = SysTableLookup::newParameters(tableNum(RTax25ProfitTable), _lookupCtrl);
                        query.addDataSource(tableNum(RTax25ProfitTable)).addRange(fieldNum(RTax25ProfitTable, ProfitId));

                        sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, ProfitId));
                        sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, ProfitType));
                        sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, Description));

                        sysTableLookup.parmQuery(query);
                        sysTableLookup.performFormLookup();
                    break;
                }
            break;

            case #ParameterCode4: // ProfitId
                if (registerType == RTax25RegisterType::AssetsDisposal)
                {
                    _lookupCtrl.replaceOnLookup(true);
                    _lookupCtrl.hasChanged(false);

                    query = new Query();
                    sysTableLookup = SysTableLookup::newParameters(tableNum(RTax25ProfitTable), _lookupCtrl);
                    query.addDataSource(tableNum(RTax25ProfitTable)).addRange(fieldNum(RTax25ProfitTable, ProfitId));

                    sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, ProfitId));
                    sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, ProfitType));
                    sysTableLookup.addLookupfield(fieldNum(RTax25ProfitTable, Description));

                    sysTableLookup.parmQuery(query);
                    sysTableLookup.performFormLookup();
                }
            break;

            default :
                throw error("@SYS3461");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupEnabled</Name>
				<Source><![CDATA[
        public boolean lookupEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParm</Name>
				<Source><![CDATA[
        public boolean specificParm()
    {
        RTax25RegisterTable registertable = RTax25RegisterTable::findRegisterId(regType.registerId());
        ;

        if (registertable.RegisterType == RTax25RegisterType::TangibleAssetInfo    ||
            registertable.RegisterType == RTax25RegisterType::TangibleDepreciation ||
            registertable.RegisterType == RTax25RegisterType::TangibleGroupDepreciation)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specificParmCall</Name>
				<Source><![CDATA[
        public void specificParmCall()
    {
        Args                args = new Args();
        RTax25RegisterTable registertable = RTax25RegisterTable::findRegisterId(regType.registerId());
        ;

        if (registertable.RegisterType == RTax25RegisterType::TangibleAssetInfo    ||
            registertable.RegisterType == RTax25RegisterType::TangibleDepreciation ||
            registertable.RegisterType == RTax25RegisterType::TangibleGroupDepreciation)
        {
            args.caller(this);
            args.record(registertable);

            new MenuFunction(menuitemDisplayStr(RTax25RegisterProfit), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
        #define.ParameterCode1(1)
    #define.ParameterCode2(2)
    #define.ParameterCode3(3)
    #define.ParameterCode4(4)
    public boolean validateWrite()
    {
        boolean ret = true;

        registerParameters = registerParametersDs.cursor();

        if (! registerParameters.Parameter)
            return true;

        switch (registerParameters.ParameterCode)
        {
            case #ParameterCode1 :
                ret = this.checkGroup(registerParameters.Parameter);
            break;
            case #ParameterCode2 :
                ret = this.checkType(registerParameters.Parameter, enumNum(RAssetType));
            break;
            case #ParameterCode3 :
                switch (RTax25RegisterTable::findRegisterId(registerParameters.RegisterId).RegisterType)
                {
                    case RTax25RegisterType::AssetsDisposal         :
                        ret = this.checkType(registerParameters.Parameter, enumNum(NoYesCombo));
                    break;
                    case RTax25RegisterType::IntangibleDepreciation,
                         RTax25RegisterType::IntangibleGroupDepreciation :
                        if (!RTax25ProfitTable::findByProfitId(registerParameters.Parameter))
                        {
                            ret = checkFailed("@GLS104310");
                        }
                    break;
                    default                                         :
                        ret = false;
                    break;
                }
            break;
            case #ParameterCode4 :
                if (!RTax25ProfitTable::findByProfitId(registerParameters.Parameter))
                {
                    ret = checkFailed("@GLS104310");
                }
            break;

        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>