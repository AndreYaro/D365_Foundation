<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDiscountOverlapCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailDiscountOverlapCalculator</c> class is used to calculate discount overlaps.
/// </summary>
public class RetailDiscountOverlapCalculator
{
    RetailDiscountAnalysisTmp overlapResult;
    RetailDiscountSharedProductTmp productList;
    RetailPeriodicDiscount presentDiscount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>LinkFormDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Links the form datasource to the local buffer.
    /// </summary>
    /// <param name = "formDataSource">An instance of <c>RetailDiscountAnalysisTmp</c> buffer.</param>
    public void LinkFormDataSource(RetailDiscountAnalysisTmp formDataSource)
    {
        select firstonly RecId from formDataSource;
        overlapResult.linkPhysicalTableInstance(formDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetNumberOfProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of products covered by the present discount.
    /// </summary>
    /// <returns>The number of products.</returns>
    public int64 GetNumberOfProducts()
    {
        select count(RecId) from productList;

        return productList.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetailPeriodicDiscount</Name>
				<Source><![CDATA[
    public RetailPeriodicDiscount parmRetailPeriodicDiscount(RetailPeriodicDiscount record = presentDiscount)
    {
        presentDiscount = record;
        return presentDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CalculateOverlapsForDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds discounts that overlaps with the given discount.
    /// </summary>
    /// <returns>An instance of <c>RetailDiscountAnalysisTmp</c> buffer.</returns>
    public RetailDiscountAnalysisTmp CalculateOverlapsForDiscount()
    {
        RetailDiscountAnalysisTmp discountList, discountListLocal;
        RETAILPERIODICDISCOUNTLINE discountLine;
        RETAILGROUPMEMBERLINE memberline;
        RetailPeriodicDiscount discount;
        RetailAllProductCategories productCategoryLookup;
        InventTable inventTable;

        ttsbegin;

        RetailDiscountOverlapCalculator::InsertProductsCoveredByDiscount(productList, presentDiscount.OfferId);

        select firstonly RecId from discountList;
        discountListLocal.linkPhysicalTableInstance(discountList);

        // Get discounts set at category level that overlaps with each product
        insert_recordset discountList (OfferId)
        select OfferId from discount
            where discount.OfferId != presentDiscount.OfferId
        exists join discountLine
            where discount.OfferId == discountLine.OfferId
        join memberline
            where discountLine.RetailGroupMemberLine == memberline.RecId
                && memberline.Product == 0
                && memberline.Variant == 0
        join productCategoryLookup
            where memberline.Category == productCategoryLookup.Category
        join productList
            where productCategoryLookup.product == productList.ProductRecId;

        // Get discounts on products for the mentioned products
        insert_recordset discountList (OfferId)
        select OfferId from discount
            where discount.OfferId != presentDiscount.OfferId
        exists join discountLine
            where discount.OfferId == discountLine.OfferId
        join memberline
            where discountLine.RetailGroupMemberLine == memberline.RecId
                && memberline.Product != 0
                && memberline.Variant == 0
        join productList
            where memberline.Product == productList.ProductRecId
        notexists join discountListLocal
            where discountListLocal.OfferId == discount.OfferId;

        // Get discounts at variant level
        insert_recordset discountList (OfferId)
        select OfferId from discount
            where discount.OfferId != presentDiscount.OfferId
        exists join discountLine
            where discount.OfferId == discountLine.OfferId
        join memberline
            where discountLine.RetailGroupMemberLine == memberline.RecId
                && memberline.Product != 0
                && memberline.Variant != 0
        join productList
            where memberline.Product == productList.ProductRecId
                && memberline.Variant == productList.VariantRecId
        notexists join discountListLocal
            where discountListLocal.OfferId == discount.OfferId;

        delete_from overlapResult;

        select firstonly RecId from overlapResult;

        insert_recordset overlapResult (OfferId)
        select OfferId from discountList
        group by discountList.OfferId;

        ttscommit;

        return overlapResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GeneratedProductsShared</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates shared product between the present and given discount.
    /// </summary>
    /// <param name = "productListTmp">A <c>RetailDiscountSharedProductTmp</c> buffer.</param>
    /// <param name = "OfferId">The offer Id of the given discount.</param>
    /// <returns>An instance of <c>RetailDiscountAnalysisTmp</c> buffer.</returns>
    public RetailDiscountSharedProductTmp GeneratedProductsShared(RetailDiscountSharedProductTmp productListTmp, str OfferId)
    {
        RETAILGROUPMEMBERLINE memberline;
        RetailPeriodicDiscount discount;
        RetailAllProductCategories productCategoryLookup;
        RETAILPERIODICDISCOUNTLINE discountLine;
        EcoResDistinctProduct product;
        EcoResDistinctProductVariant productVariant;
        RetailDiscountSharedProductTmp temp;
        EcoResProductTranslation productTranslation;
        EcoResProductTranslation productTranslationVariant;
        SystemLanguageId SystemLanguageId = SystemParameters::getSystemLanguageId();

        ttsbegin;

        delete_from productListTmp;

        insert_recordset temp(ProductRecId, VariantRecId)
        select Product, Variant from memberline
        exists join discountLine
            where memberline.RecId == discountLine.RetailGroupMemberLine
                && discountLine.OfferId == OfferId
                && memberline.Product != 0
        join productList
            where productList.ProductRecId == memberline.Product
            && productList.VariantRecId == memberline.Variant;

        insert_recordset temp(ProductRecId)
        select Product from productCategoryLookup
        exists join memberline
            where memberline.Category == productCategoryLookup.Category
                && memberline.Product == 0
        join discountLine
            where discountLine.RetailGroupMemberLine == memberline.RecId
                && discountLine.OfferId == OfferId
        join productList
            where productList.ProductRecId == productCategoryLookup.Product;

        insert_recordset productListTmp (ProductRecId, VariantRecId, DisplayProductNumber, SearchName, Name)
        select ProductRecId, VariantRecId from temp
        join DisplayProductNumber, SearchName from product
            where temp.ProductRecId == product.RecId
            && temp.VariantRecId == 0
        outer join Name from productTranslation
            where productTranslation.Product == product.RecId
            && productTranslation.LanguageId == SystemLanguageId;

        insert_recordset productListTmp (ProductRecId, VariantRecId, DisplayProductNumber, SearchName, Name, VariantName)
        select ProductRecId, VariantRecId from temp
        join DisplayProductNumber, SearchName from productVariant
            where temp.VariantRecId == productVariant.RecId
            && temp.VariantRecId != 0
        outer join Name from productTranslation
            where productTranslation.Product == temp.ProductRecId
            && productTranslation.LanguageId == SystemLanguageId
        outer join Name from productTranslationVariant
            where productTranslationVariant.Product == productVariant.RecId
            && productTranslationVariant.LanguageId == SystemLanguageId;

        ttscommit;

        return productListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>InsertProductsCoveredByDiscount</Name>
				<Source><![CDATA[
    private static void InsertProductsCoveredByDiscount(RetailDiscountSharedProductTmp productsList, str OfferID )
    {
        RETAILGROUPMEMBERLINE memberline;
        RetailPeriodicDiscount discount;
        RetailAllProductCategories productCategoryLookup;
        RETAILPERIODICDISCOUNTLINE discountLine;

        ttsbegin;

        delete_from productsList;

        insert_recordset productsList(ProductRecId, VariantRecId)
        select Product, Variant from memberline
        exists join discountLine
            where memberline.RecId == discountLine.RetailGroupMemberLine
                && discountLine.OfferId == OfferId
                && memberline.Product != 0;

        insert_recordset productsList(ProductRecId)
        select Product from productCategoryLookup
        exists join memberline
            where memberline.Category == productCategoryLookup.Category
                && memberline.Product == 0
        join discountLine
            where discountLine.RetailGroupMemberLine == memberline.RecId
                && discountLine.OfferId == OfferId;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>