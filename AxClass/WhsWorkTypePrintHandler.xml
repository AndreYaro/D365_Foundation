<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkTypePrintHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkTypePrintHandler</c> class handles print work type.
/// </summary>
[WhsWorkTypeFactory(WhsWorkType::Print)]
class WhsWorkTypePrintHandler extends WhsWorkTypeHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findWorkCreateLocationQty</Name>
				<Source><![CDATA[
    public WhsWorkCreateLocationQtyResult findWorkCreateLocationQty(WhsWorkCreateLocationQtyParameters _parameters)
    {
        WhsWorkCreateLocationQtyResult result = WhsWorkCreateLocationQtyResult::construct();

        result.locationId = '';
        result.pickUnitId = _parameters.unitId;
        result.pickQty = _parameters.qtyWork;
        result.inventPickQty = _parameters.inventQtyWork;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineStep</Name>
				<Source><![CDATA[
    public void determineStep(WhsWorkStepContext _context)
    {
        WHSWorkLine workLine = _context.workLine;
        WhsrfPassthrough pass = _context.pass;
        WhsWorkExecuteDisplay workExecuteDisplay = _context.workExecuteDisplay;

        WhsWorkExecute whsWorkExecute = WhsWorkExecute::construct();
        WHSUserId whsUserId = pass.lookup(#UserId);
        
        workLine = this.buildLabelAndConfirm(whsWorkExecute, workLine, whsUserId);

        container ret = workExecuteDisplay.determineRestart(_context.previousForm, workLine);
        _context.step = workExecuteDisplay.parmStep();

        if (_context.step != #Restart && 
            workLine && 
            !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
        {
            throw error("@WAX1459");
        }

        _context.nextForm = ret;
        _context.recall = true;
        _context.workLine = workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWorkLine</Name>
				<Source><![CDATA[
    public WHSWorkLine executeWorkLine(WhsWorkExecute _workExecute, WHSWorkLine _workLine, WHSUserId _userId)
    {
        return this.buildLabelAndConfirm(_workExecute, _workLine, _userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLabelAndConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds label and confirms the work.
    /// </summary>
    /// <param name = "_workExecute">The work execute class.</param>
    /// <param name = "_workLine">The work line.</param>
    /// <param name = "_userId">The user performing the work.</param>
    /// <returns>The work line.</returns>
    protected WHSWorkLine buildLabelAndConfirm(WhsWorkExecute _workExecute, WHSWorkLine _workLine, WHSUserId _userId)
    {
        if (this.mustBuildLicensePlateLabel(_workExecute, _workLine, _userId))
        {
            WHSLicensePlateLabelBuild labelBuild = new WHSLicensePlateLabelBuild(_workLine.WorkId, _workLine, '', _userId);
            labelBuild.buildLicensePlateLabels();
        }
        
        return _workExecute.confirmCustomWork(_workLine.WorkId, _workLine.LineNum, _userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBuildLicensePlateLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if license plate label must be build.
    /// </summary>
    /// <param name = "_workExecute">The work execute class.</param>
    /// <param name = "_workLine">The work line.</param>
    /// <param name = "_userId">The user performing the work.</param>
    /// <returns>true if license plate label must be build; otherwise, false.</returns>
    [Replaceable]
    protected boolean mustBuildLicensePlateLabel(WhsWorkExecute _workExecute, WHSWorkLine _workLine, WHSUserId _userId)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>