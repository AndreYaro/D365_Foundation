<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTable extends JournalFormTable
{
    InventDimParm                       inventDimParm;
    FormDataSource                      inventDimParm_ds;
    InventDimFixed                      curInventDimFixed;
    boolean                             inventDimFixedClosedOk;

    // <GEERU>
    FormMenuButtonControl               ctrlQueries;
    List                                lstCtrlReports;
    FormMenuButtonControl               ctrlReports;
    FormButtonSeparatorControl          ctrlSeparator;
    // </GEERU>

    FormFunctionButtonControl           ctrlCopyJournal;
    FormFunctionButtonControl           ctrlDeleteLines;

    InventJournalERGenerationMenuService eRGenerationMenuService;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the <c>JournalTable.JournalNameId</c> from the <c>InventJournalName</c> table based on the journal type Id.
    /// </summary> 
    public void datasourceCreatePost()
    {
        super();
     
        if (!journalTable.JournalNameId) 
        {
            journalTable.JournalNameId = InventJournalName::standardJournalName(this.journalTypeId());
            this.fieldModifiedJournalNameIdPost();
        }  
    }

]]></Source>
			</Method>
			<Method>
				<Name>useInventJournalCreateFormForCreatingNewJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the <c>InventJournalCreateForm</c> form should be used for journal creation.
    /// </summary>
    /// <returns>true if the <c>InventJournalCreateForm</c> form should be used; otherwise, false.</returns>
    /// <remarks>
    /// Add a post-method handler in case you need to modify the behavior when extending the <c>InventJournalType</c> enumeration.
    /// </remarks>
    public boolean useInventJournalCreateFormForCreatingNewJournal()
    {
        return this.journalTypeId() != InventJournalType::project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    public boolean datasourceCreatePre()
    {
        boolean     ret = super();

        if (ret && this.useInventJournalCreateFormForCreatingNewJournal())
        {
            Args args = new Args();

            args.name(formstr(InventJournalCreate));
            args.caller(this);
            args.parmEnum(this.journalTypeId());
            args.parmEnumType(enumnum(InventJournalType));

            if (this.formRun() && this.formRun().args())
            {
                var record = this.formRun().args().record();
                args.record(record);
            }

            var journalCreate = ClassFactory.formRunClass(args);
            journalCreate.init();
            journalCreate.run();
            journalCreate.wait();

            ret = journalCreate.closedOk();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitValuePre</Name>
				<Source><![CDATA[
    public void datasourceInitValuePre()
    {
        InventJournalTable  inventJournalTable = this.journalTableData().journalTable();

        inventJournalTable.InventDimFixed = curInventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    public void datasourceLinkActivePre()
    {
        if (formRun && formRun.args().dataset() && formRun.args().dataset() == tableNum(ProjTable))
        {
            ProjTable callerRecord = formRun.args().record() as ProjTable;
            QueryBuildDataSource qbds = journalTable_ds.query().dataSourceNo(1).addDataSource(tableNum(InventJournalTrans));
            qbds.joinMode(JoinMode::ExistsJoin);

            qbds.addRange(fieldNum(InventJournalTrans, ProjId)).value(SysQuery::value(callerRecord.ProjId));
            qbds.relations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButtonsActive</Name>
				<Source><![CDATA[
    #ISOCountryRegionCodes
    public void enableButtonsActive(boolean _enableInfolog = false)
    {
        InventJournalTable  inventJournalTable = this.journalTableData().journalTable();

        super(_enableInfolog);

        if (inventDimParm_ds)
        {
            inventDimParm.initFromInventDimFixed(inventJournalTable.InventDimFixed);
            inventDimParm_ds.refresh();
        }

        switch (inventJournalTable.JournalType)
        {
            case InventJournalType::Movement:
                this.fieldLedgerDimension().enabled(true);
                break;
            default:
                this.fieldLedgerDimension().enabled(false);
                break;
        }
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) && inventJournalTable.RecId)
        {
            this.updateQueries_RU(inventJournalTable);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLedgerDimension</Name>
				<Source><![CDATA[
    protected FormDataObject fieldLedgerDimension()
    {
        return this.journalTable_DS().object(fieldNum(InventJournalTable,LedgerDimension));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost()
    {
        this.parmPostingStatusFilterEnabled(true);

        super();

        if (inventDimParm_ds)
        {
            inventDimParm_ds.create();
            inventDimParm.write();
        }

        if (FormSecurity::getMenuItemAccessRight(this.formRun()) == AccessRight::View)
        {
            this.setFormReadOnly();
        }
        // <GEERU>
        lstCtrlReports = new List(Types::Class);
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTypeFromCaller</Name>
				<Source><![CDATA[
    protected void initJournalTypeFromCaller()
    {
        if (formRun && formRun.args().dataset() && formRun.args().dataset() == journalTable.TableId)
        {
            InventJournalTable caller = formRun.args().record() as InventJournalTable;
            if (caller.RecId == 0)
            {
                caller  = formRun.args().lookupRecord() as InventJournalTable;
            }
            if (caller && caller.JournalIdOrignal && caller.JournalType == InventJournalType::Count)
            {
                InventJournalTable newJournal = InventJournalTable::find(caller.JournalIdOrignal);
                if (newJournal && newJournal.JournalType == InventJournalType::TagCounting)
                {
                    journalTypeFixed    = false;
                    return;
                }
            }
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmInitPost</Name>
				<Source><![CDATA[
    public void inventDimParmInitPost(InventDimParm _inventDimParm)
    {
        inventDimParm_ds    = FormDataUtil::getFormDataSource(_inventDimParm);
        inventDimParm       = _inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDatasourceCreatePreOk</Name>
				<Source><![CDATA[
    protected boolean isDatasourceCreatePreOk()
    {
        return inventDimFixedClosedOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(FormRun _formRun)
    {
        super(_formRun);

        inventDimFixedClosedOk = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCopyJournal</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlCopyJournal(FormFunctionButtonControl _copyJournal = ctrlCopyJournal)
    {
        ctrlCopyJournal = _copyJournal;
        return ctrlCopyJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDeleteLines</Name>
				<Source><![CDATA[
    public FormFunctionButtonControl parmCtrlDeleteLines(FormFunctionButtonControl _deleteLines = ctrlDeleteLines)
    {
        ctrlDeleteLines = _deleteLines;
        return ctrlDeleteLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlQueries_RU</Name>
				<Source><![CDATA[
    public void parmCtrlQueries_RU(FormMenuButtonControl _ctrlQueries)
    {
        ctrlQueries = _ctrlQueries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlReports_RU</Name>
				<Source><![CDATA[
    public FormMenuButtonControl parmCtrlReports_RU(FormMenuButtonControl _ctrlReports = ctrlReports)
    {
        ctrlReports = _ctrlReports;
        return ctrlReports;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormReadOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the form to read-only, depending on the user's access to the menu item that was used to invoke
    /// the form.
    /// </summary>
    /// <remarks>
    /// A user may have access to two different menu items for this form but have different access levels.
    /// We must respect the intended access level for the menu item that is used.
    /// </remarks>
    protected void setFormReadOnly()
    {
        // make buttons not visible though user has access to the menu items
        if (this.parmCtrlCreateNew() != null)
        {
            this.parmCtrlCreateNew().visible(false);
        }
        if (this.parmCtrlCopyJournal() != null)
        {
            this.parmCtrlCopyJournal().visible(false);
        }
        if (this.parmCtrlDeleteLines() != null)
        {
            this.parmCtrlDeleteLines().visible(false);
        }

        // Private control is unbound, should still be visible but not editable in read-only mode
        if (this.parmCtrlMarkUserBlock() != null)
        {
            this.parmCtrlMarkUserBlock().enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimFixed</Name>
				<Source><![CDATA[
    public void setInventDimFixed(InventDimFixed _inventDimFixed)
    {
        curInventDimFixed = _inventDimFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueries_RU</Name>
				<Source><![CDATA[
    protected void updateQueries_RU(InventJournalTable  _inventJournalTable)
    {
        InventJournalReportInterface_RU inventJournalCaller;
        FormFunctionButtonControl   buttonCtrl;
        ListIterator                it, reportIt;
        boolean                     enableCtrlQueries = false;
        List                        reportList;
        boolean                     enabled;

        void addButton(FormMenuButtonControl _parent,
                       MenuItemType          _type,
                       str                   _name,
                       boolean               _enabled)
        {
            buttonCtrl = _parent.addControl(FormControlType::MenuFunctionButton, _name);
            buttonCtrl.text(inventJournalCaller.description());
            buttonCtrl.menuItemType(_type);
            buttonCtrl.menuItemName(_name);
            buttonCtrl.enabled(_enabled);
            lstCtrlReports.addEnd(buttonCtrl);
        }

        if (!ctrlQueries || !ctrlReports)
        {
            return;
        }

        FormControl selectedControl = formRun.selectedControl();

        if (!lstCtrlReports.empty())
        {
            it = new ListIterator(lstCtrlReports);

            while (it.more())
            {
                buttonCtrl = it.value();
                buttonCtrl.visible(false);
                formRun.design().removeControl(buttonCtrl.id());

                it.next();
            }

            lstCtrlReports = new List(Types::Class);
        }

        if (_inventJournalTable.Posted)
        {
            reportList = InventJournalReport_RU::buildReportList(_inventJournalTable.JournalNameId);

            enableCtrlQueries = (reportList.elements() > 0);
        }
        else
        {
            reportList = InventJournalProforma_RU::buildReportList(_inventJournalTable.JournalNameId);
        }

        if (!ctrlSeparator)
        {
            ctrlSeparator = ctrlReports.addControl(FormControlType::ButtonSeparator, "");
        }

        reportIt = new ListIterator(reportList);

        while (reportIt.more())
        {
            inventJournalCaller = reportIt.value();

            if (_inventJournalTable.Posted)
            {
                enabled = InventJournalReportTable_RU::exist(_inventJournalTable.JournalId, inventJournalCaller.reportType());

                addButton(ctrlQueries,
                          MenuItemType::Display,
                          inventJournalCaller.menuItem(),
                          enabled);
            }
            else
            {
                enabled = true;
            }

            addButton(ctrlReports,
                      MenuItemType::Output,
                      _inventJournalTable.Posted ?
                          inventJournalCaller.menuItem_Posted() :
                          inventJournalCaller.menuItem(),
                      enabled && inventJournalCaller.enabled(_inventJournalTable));

            reportIt.next();
        }

        ctrlQueries.enabled(enableCtrlQueries);

        formRun.selectControl(selectedControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPrintMenu</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets appearance of print menu.
    /// </summary>
    /// <param name = "_sender">Form control which raised the event.</param>
    /// <param name = "_eventArgs">Event arguments.</param>
    public void setPrintMenu(FormControl _sender, FormControlEventArgs _e)
    {
        FormMenuButtonControl formMenuButtonControl = _sender as FormMenuButtonControl;

        if (formMenuButtonControl)
        {
            if (!eRGenerationMenuService)
            {
                eRGenerationMenuService = InventJournalERGenerationMenuService::construct(formMenuButtonControl);
            }
            eRGenerationMenuService.setMenu(this.journalTableData().journalTable());
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
