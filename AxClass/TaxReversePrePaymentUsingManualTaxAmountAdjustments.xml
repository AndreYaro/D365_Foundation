<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReversePrePaymentUsingManualTaxAmountAdjustments</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxReversePrePaymentUsingManualTaxAmountAdjustments</c> class extends <c>TaxReversePrePayment</c> class and calculates the tax upon reversal of prepayment of customer
///    or vendor transactions when using manual Tax amounts adjustment.
/// </summary>
internal final class TaxReversePrePaymentUsingManualTaxAmountAdjustments extends TaxReversePrePayment
{
    private boolean hasManuallyAdjustedTaxAmounts = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromSettlement</Name>
				<Source><![CDATA[
    public void initFromSettlement(
        TransDate _paymentDate,
        TransDate _taxDate,
        Voucher _paymentVoucher,
        Percent _percent,
        CurrencyCode _reverseCurrencyCode,
        RefTableId _sourceTableId,
        RefRecId _sourceRecId,
        CustVendTrans _custVendTransOffset = null,
        CustVendTrans _custVendTransPrepayment = null)
    {
        super(
            _paymentDate,
            _taxDate,
            _paymentVoucher,
            _percent,
            _reverseCurrencyCode,
            _sourceTableId,
            _sourceRecId,
            _custVendTransOffset,
            _custVendTransPrepayment);

        if (sourceTableId == tableNum(VendTrans))
        {
            VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;

            select firstonly RecId from vendTaxAmountsForReversing
                where vendTaxAmountsForReversing.PrepaymentVendTrans == sourceRecId;

            hasManuallyAdjustedTaxAmounts = vendTaxAmountsForReversing.RecId != 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkThatReversingTaxAmountIsLessThanRemainTaxAmount</Name>
				<Source><![CDATA[
    private void checkThatReversingTaxAmountIsLessThanRemainTaxAmount(Amount _reversingTaxAmount, TaxTrans _taxTrans)
    {
        Amount remainTaxAmount = VendTaxAmountsForReversingPrepaymentTable_CZ::getRemainTaxAmountForPrepayment(sourceRecId, _taxTrans.RecId);

        if (remainTaxAmount + _reversingTaxAmount < 0)
        {
            throw error("@ApplicationSuite_Localization:UnableToReverseTaxAmountExceedsRemainTaxAmount");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReverseAmountsFromTaxTrans</Name>
				<Source><![CDATA[
    protected void initReverseAmountsFromTaxTrans(TaxTrans _taxTrans, TaxTrans _taxTransReverse)
    {
        if (!hasManuallyAdjustedTaxAmounts)
        {
            this.checkThatReversingTaxAmountIsLessThanRemainTaxAmount(CurrencyExchangeHelper::amount(_taxTrans.TaxAmount * percent * -1 / 100), _taxTrans);

            super(_taxTrans, _taxTransReverse);

            return;
        }

        VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;

        select firstOnly RecId, TaxAmountForSettlement from vendTaxAmountsForReversing
            where vendTaxAmountsForReversing.PrepaymentVendTrans == sourceRecId
                && vendTaxAmountsForReversing.PrepaymentTaxTrans == _taxTrans.RecId;

        if (vendTaxAmountsForReversing.RecId == 0)
        {
            throw error("@ApplicationSuite_Localization:VendTaxAmountsForReversingPrepaymentNotFound");
        }

        Amount reversingTaxAmount = CurrencyExchangeHelper::amount(vendTaxAmountsForReversing.TaxAmountForSettlement * -1);

        this.checkThatReversingTaxAmountIsLessThanRemainTaxAmount(reversingTaxAmount, _taxTrans);

        CurrencyCode standardCurrency = CompanyInfoHelper::standardCurrency();
        CurrencyCode reportingCurrency = Ledger::reportingCurrency(this.companyInfo().RecId);

        Percent taxAmountPercent = (_taxTrans.TaxAmount > 0) ? (abs(reversingTaxAmount / _taxTrans.TaxAmount) * 100) : 0.0;

        if (taxAmountPercent > 100)
        {
            taxAmountPercent = 100;
        }

        _taxTransReverse.TaxAmount = reversingTaxAmount;
        _taxTransReverse.TaxBaseAmount = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmount * taxAmountPercent * -1 / 100);
        _taxTransReverse.TaxInCostPrice = CurrencyExchangeHelper::amount(_taxTrans.TaxInCostPrice * taxAmountPercent * -1 / 100);

        if (_taxTrans.CurrencyCode && _taxTrans.CurrencyCode != standardCurrency)
        {
            _taxTransReverse.TaxBaseAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountCur * taxAmountPercent * -1 / 100, _taxTrans.CurrencyCode);
            _taxTransReverse.TaxAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountCur * taxAmountPercent * -1 / 100, _taxTrans.CurrencyCode);

            _taxTransReverse.TaxBaseAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountRep * taxAmountPercent * -1 / 100, reportingCurrency);
            _taxTransReverse.TaxAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountRep * taxAmountPercent * -1 / 100, reportingCurrency);
        }
        else
        {
            _taxTransReverse.TaxBaseAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountCur * taxAmountPercent * -1 / 100);
            _taxTransReverse.TaxAmountCur = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountCur * taxAmountPercent * -1 / 100);

            _taxTransReverse.TaxBaseAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxBaseAmountRep * taxAmountPercent * -1 / 100);
            _taxTransReverse.TaxAmountRep = CurrencyExchangeHelper::amount(_taxTrans.TaxAmountRep * taxAmountPercent * -1 / 100);
        }

        if (_taxTrans.SourceCurrencyCode == sourceCurrencyCode)
        {
            _taxTransReverse.SourceTaxAmountCur = CurrencyExchangeHelper::amount(_taxTrans.SourceTaxAmountCur * taxAmountPercent * -1 / 100, _taxTrans.SourceCurrencyCode);
            _taxTransReverse.SourceBaseAmountCur = _taxTrans.SourceBaseAmountCur * taxAmountPercent * -1 / 100;
            _taxTransReverse.SourceRegulateAmountCur = CurrencyExchangeHelper::amount(_taxTrans.SourceRegulateAmountCur * taxAmountPercent * -1 / 100, _taxTrans.SourceCurrencyCode);
        }
        else
        {
            _taxTransReverse.SourceTaxAmountCur = CurrencyExchangeHelper::curAmount(_taxTrans.TaxAmount * taxAmountPercent * -1 / 100, sourceCurrencyCode, taxDate);
            _taxTransReverse.SourceBaseAmountCur = CurrencyExchangeHelper::curAmount(_taxTrans.TaxBaseAmount * taxAmountPercent * -1 / 100, sourceCurrencyCode, taxDate);
            _taxTransReverse.SourceRegulateAmountCur = CurrencyExchangeHelper::curAmount(
                CurrencyExchangeHelper::mstAmount(
                    _taxTrans.SourceRegulateAmountCur * taxAmountPercent * -1 / 100,
                    _taxTrans.SourceCurrencyCode,
                    _taxTrans.TransDate,
                    Currency::noYes2UnknownNoYes(_taxTrans.euroTriangulation)),
                _taxTrans.SourceCurrencyCode);
        }

        this.removeTaxAmountForReversing(_taxTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustReverseTaxTrans</Name>
				<Source><![CDATA[
    protected boolean mustReverseTaxTrans(TaxTrans _taxTrans)
    {
        boolean ret = super(_taxTrans);

        if (ret && hasManuallyAdjustedTaxAmounts)
        {
            VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;

            select firstOnly RecId from vendTaxAmountsForReversing
                where vendTaxAmountsForReversing.PrepaymentVendTrans == sourceRecId
                    && vendTaxAmountsForReversing.PrepaymentTaxTrans == _taxTrans.RecId
                    && vendTaxAmountsForReversing.TaxAmountForSettlement != 0;

            ret = vendTaxAmountsForReversing.RecId != 0;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNotReversedTrans</Name>
				<Source><![CDATA[
    protected void processNotReversedTrans(TaxTrans _taxTrans)
    {
        if (hasManuallyAdjustedTaxAmounts)
        {
            this.removeTaxAmountForReversing(_taxTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeTaxAmountForReversing</Name>
				<Source><![CDATA[
    private void removeTaxAmountForReversing(TaxTrans _taxTrans)
    {
        VendTaxAmountsForReversingPrepaymentTable_CZ vendTaxAmountsForReversing;

        delete_from vendTaxAmountsForReversing
            where vendTaxAmountsForReversing.PrepaymentVendTrans == sourceRecId
                && (vendTaxAmountsForReversing.PrepaymentTaxTrans == _taxTrans.RecId || vendTaxAmountsForReversing.PrepaymentTaxTrans == 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>