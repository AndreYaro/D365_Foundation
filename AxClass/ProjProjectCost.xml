<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjProjectCost extends ProjProjectComponent
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(ProjTable _projTable)
    {
        super(_projTable);
        projTable = _projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProjProjectCost construct(ProjTable _projTable)
    {
        return new ProjProjectCost(_projTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalActualCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total actual cost posted on the project.
    /// </summary>
    /// <returns>Total amount of all actuals posted for this project</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Amount calculateTotalActualCost()
    {
        ProjTransPosting    projTransPosting;

        select sum(AmountMst) from projTransPosting
            where projTransPosting.ProjId == projTable.ProjId
        && projTransPosting.costSales == ProjCostSales::Cost;

        return projTransPosting.AmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPlannedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the total planned hours from the WBS Tree root node.
    /// </summary>
    /// <returns>
    /// The total planned hours.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NonNegativeTotal calculateTotalPlannedCost()
    {
        PSAActivityEstimates    psaActivityEstimates;
        smmActivities           smmActivities;
        HierarchyTreeTable      hierarchyTreeTable;
        NonNegativeTotal        totalPlannedCost;
        while select ActivityNumber, sum(TotalCostPrice) from psaActivityEstimates
            group by psaActivityEstimates.ActivityNumber
            join RecId from smmActivities
                where psaActivityEstimates.ActivityNumber == smmActivities.ActivityNumber
                    join RecId from hierarchyTreeTable
                    where smmActivities.RecId == hierarchyTreeTable.RefRecId && hierarchyTreeTable.HierarchyId == hierarchyId
        {
            totalPlannedCost += psaActivityEstimates.TotalCostPrice;
        }
        return totalPlannedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalCostAtComplete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the total estimate at complete for the project.
    /// </summary>
    /// <returns>Estimate at complete values corresponding to the root node of WBS</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NonNegativeTotal calculateTotalCostAtComplete()
    {
        PSAActivitySetup        psaActivitySetup;
        HierarchyTreeTable      hierarchyTreeTable;
        smmActivities           smmActivities;
        if (this.hierarchyId)
        {
            hierarchyTreeTable = HierarchyTreeTable::findRootLevelNode(this.hierarchyId);
            if (hierarchyTreeTable)
            {
                select ActivityNumber from smmActivities
                    where smmActivities.RecId == hierarchyTreeTable.RefRecId
                        join psaActivitySetup
                where smmActivities.ActivityNumber == psaActivitySetup.ActivityNumber;

                if (psaActivitySetup)
                {
                    return psaActivitySetup.CostAtComplete;
                }
            }
        }
        return 0.0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>