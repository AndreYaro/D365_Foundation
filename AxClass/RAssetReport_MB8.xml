<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport_MB8</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetReport_MB8 extends RAssetReport_MB implements ERIReportPostProcessingSupported
{
    protected Map relatedDocumentMap;
    protected RAssetDocument rAssetDocument;
    protected RAssetAmount amountWOVat;
    protected RAssetAmount depreciationAmount;
    protected RAssetComment docComment;
    protected InventQty inventQty;
    protected XMLWordDocumentTable table;

    protected const str ConstTable1 = 'Table1';
    protected const int ConstColItemName = 0;
    protected const int ConstColItemId = 1;
    protected const int ConstFirstTableHead = 3;
    protected const int ConstColRAssetId = 2;
    protected const int ConstColCodeOKEI_RU_MB8 = 3;
    protected const int ConstColUnitId_MB8 = 4;
    protected const int ConstColQty_MB8 = 5;
    protected const int ConstColTransDate_MB8 = 6;
    protected const int ConstColAcquisitionPrice_MB8 = 7;
    protected const int ConstColRAssetAmount1_MB8 = 8;
    protected const int ConstColRAssetAmount2_MB8 = 9;
    protected const int ConstColLifetime_MB8 = 10;
    protected const int ConstColReason_MB8 = 11;
    protected const int ConstColPassportNum_MB8 = 13;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRelatedDocument</Name>
				<Source><![CDATA[
    private void addRelatedDocument()
    {
        RAssetDocument relatedDocument;

        select firstonly Num, @Date from relatedDocument
            order by relatedDocument.Date desc
            where relatedDocument.AssetId == rAssetTable.AccountNum
                && relatedDocument.Type == RAssetReportType::MB4
                && relatedDocument.Date <= documentHeader.Date;

        relatedDocumentMap.insert(relatedDocument.Num, relatedDocument.Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    protected Caption caption()
    {
        return "@GLS114053";
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeDocument</Name>
				<Source><![CDATA[
    protected void closeDocument()
    {
        if (AccountingDocumentsERPostProcessingToggle::isEnabled())
        {
            ERBinaryContentService binaryContentService = new ERBinaryContentService();
            binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
            binaryContentService.initBinaryDataFromStream(wordDocument.saveToStream());
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else
        {
            wordDocument.sendFileToBrowser(documentPath);
        }
        wordDocument.Dispose();
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected str comment()
    {
        return "@GLS114053";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentValue</Name>
				<Source><![CDATA[
    public void initDocumentValue(RAssetDocument _document)
    {
        super(_document);

        _document.OrderDate = any2date(ledgerJournalTable.PostedDateTime);

        OfficialsServ_RU officialServ = new OfficialsServ_RU();
        officialServ.initRassetReport();
        _document.OffSessionId = officialServ.newId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportHeaderData</Name>
				<Source><![CDATA[
    protected void initReportHeaderData()
    {
        super();

        select firstonly LedgerDimension, TransDate from rAssetTrans
            order by TransDate desc
            where rAssetTrans.AccountNum == rAssetTable.AccountNumReference
                && rAssetTrans.AssetStandardId == documentHeader.StandardId
                && rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                && ! rAssetTrans.StornoRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args args)
    {
        super(args);

        relatedDocumentMap = new Map(Types::String, Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReportKey</Name>
				<Source><![CDATA[
    protected container newReportKey()
    {
        return [rAssetTrans.LedgerDimension, assetLocationId, ledgerJournalTransRAsset.getTransDate(ledgerJournalTrans)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryReport</Name>
				<Source><![CDATA[
    protected Query queryReport()
    {
        Query query = new Query();

        const str DocumentHeaderDS = 'DocumentHeader';
        const str DocumentLineDS = 'DocumentLine';

        QueryBuildDataSource qbdDocumentHeader = query.addDataSource(tableNum(RAssetDocument), DocumentHeaderDS);
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, Num)).value(this.documentNumber());
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, Type)).value(queryValue(this.reportType()));
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, Date)).value(queryValue(this.documentDate()));
        qbdDocumentHeader.addRange(fieldNum(RAssetDocument, AssetId)).value(SysQuery::valueEmptyString());

        QueryBuildDataSource qbdDocumentLine = qbdDocumentHeader.addDataSource(tableNum(RAssetDocument), DocumentLineDS);
        qbdDocumentLine.relations(true);
        qbdDocumentLine.addRange(fieldNum(RAssetDocument, AssetId)).value(SysQuery::valueNotEmptyString());

        QueryBuildDataSource qbdsRAssetTable = qbdDocumentLine.addDataSource(tableNum(RAssetTable));
        qbdsRAssetTable.addLink(fieldNum(RAssetDocument, AssetId), fieldNum(RAssetTable, AccountNum));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedDoc2Str</Name>
				<Source><![CDATA[
    private str relatedDoc2Str()
    {
        RAssetDocumentDate docDate;
        RAssetDocumentNum docNum;
        str ret;

        MapEnumerator mapEnumerator = relatedDocumentMap.getEnumerator();

        while(mapEnumerator.moveNext())
        {
            docNum  = mapEnumerator.currentKey();
            docDate = mapEnumerator.currentValue();

            ret += (ret ? "@SYS35667" : "") + strFmt("@GLS102243", docNum, docDate);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    // Returns record which this report should be linked with
    public Common relatedRecord()
    {
        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportBody</Name>
				<Source><![CDATA[
    protected void reportBody()
    {
        rAssetStandards = RAssetStandards::find(rAssetTable.AccountNum, RAssetParameters::find().StandardIdDefault);
        
        RAssetScrap rAssetScrap;
        select firstonly  Qty, ItemId from rAssetScrap
            index RAssetItemIdx
            where rAssetScrap.AssetId == rAssetTable.AccountNum
                && rAssetScrap.Assembling == NoYes::Yes
                && !rAssetScrap.StornoRecId;

        InventTable inventTable = InventTable::find(rAssetScrap.ItemId);
        UnitOfMeasure unitOfMeasure = UnitOfMeasure::findBySymbol(inventTable.inventUnitId());
        RAssetSumCalc_Trans rAssetSumCalc = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNumReference, documentLine.StandardId, this.documentDate());

        table.duplicateLatestRow();

        table.insertCellValue(curRow + ConstFirstTableHead, ConstColItemName, inventTable.itemName());
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColItemId, inventTable.ItemId);
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColRAssetId, rAssetTable.AccountNumReference);
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColCodeOKEI_RU_MB8, UnitOfMeasure_RU::codeOKEI_RU(unitOfMeasure));
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColUnitId_MB8, unitOfMeasure.Symbol);
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColQty_MB8, abs(rAssetScrap.Qty));
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColTransDate_MB8, date2str(rAssetTrans.TransDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColAcquisitionPrice_MB8, rAssetSumCalc.acquisitionTotalMST());
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColRAssetAmount1_MB8, rAssetSumCalc.acquisitionTotalMST());

        RAssetAmount rAssetAmount = abs(this.regNumberSumCalc(rAssetTable.AccountNumReference, documentLine.StandardId, this.documentDate()).depreciationTotalMST());

        table.insertCellValue(curRow + ConstFirstTableHead, ConstColRAssetAmount2_MB8, rAssetAmount);
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColLifetime_MB8, rAssetStandards.lifetime(this.documentDate()));
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColReason_MB8, strFmt("@SYS82282", rAssetTable.Status));
        table.insertCellValue(curRow + ConstFirstTableHead, ConstColPassportNum_MB8, rAssetTable.PassportNum);

        depreciationAmount += rAssetAmount;
        amountWOVat += rAssetSumCalc.acquisitionTotalMST();
        inventQty += abs(rAssetScrap.Qty);

        curRow++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportFooter</Name>
				<Source><![CDATA[
    protected void reportFooter()
    {
        int labelCounter;

        const int membersCnt = 2;

        RNumDateInWordConverter converter = RNumDateInWordConverter::construct();

        table.getLatestRow()
            .remove();

        wordDocument.insertFieldValue('mb8_13', inventQty);
        wordDocument.insertFieldValue('mb8_13_2', converter.numeralsToTxt(inventQty));
        wordDocument.insertFieldValue('mb8_13_3', this.relatedDoc2Str());
        wordDocument.insertFieldValue('mb8_14', amountWOVat);
        wordDocument.insertFieldValue('mb8_15', depreciationAmount);

        OfficialsTrans_RU officialsTrans_RU = OfficialsTrans_RU::find(offSessionId, OffReportType_RU::RAssetMB8, OffPosition_RU::Chairman);

        wordDocument.insertFieldValue('mb8_16', officialsTrans_RU.Title);
        wordDocument.insertFieldValue('mb8_17', officialsTrans_RU.Name);

        while select officialsTrans_RU
            index SessionIdx
            where officialsTrans_RU.OffSessionId == offSessionId
                && officialsTrans_RU.ReportType == OffReportType_RU::RAssetMB8
                && officialsTrans_RU.Position == OffPosition_RU::Member
        {
            if (labelCounter > membersCnt)
            {
                break;
            }

            switch (labelCounter)
            {
                case 0:
                    wordDocument.insertFieldValue('mb8_18', officialsTrans_RU.Title);
                    wordDocument.insertFieldValue('mb8_19', officialsTrans_RU.Name);
                    break;

                case 1:
                    wordDocument.insertFieldValue('mb8_20', officialsTrans_RU.Title);
                    wordDocument.insertFieldValue('mb8_21', officialsTrans_RU.Name);
                    break;

                case 2:
                    wordDocument.insertFieldValue('mb8_22', officialsTrans_RU.Title);
                    wordDocument.insertFieldValue('mb8_23', officialsTrans_RU.Name);
                    break;

                default:
                    break;
            }

            labelCounter++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Outputs report header data to word
    /// </summary>
    protected void reportHeader()
    {
        RNumDateInWordConverter rNumDateInWordConverter;

        wordDocument.insertFieldValue('mb8_1', this.documentNumber());
        wordDocument.insertFieldValue('mb8_2', companyInfo.name());
        wordDocument.insertFieldValue('mb8_3', RAssetLocation::find(assetLocationId).Name);
        wordDocument.insertFieldValue('mb8_3_2', CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, this.documentDate()));
        wordDocument.insertFieldValue('mb8_4', date2str(documentDate, 123, 2, 2, 2, 2, 4,DateFlags::None));
        wordDocument.insertFieldValue('mb8_6', assetLocationId);
        wordDocument.insertFieldValue('mb8_7', CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, this.documentDate()));
        wordDocument.insertFieldValue('mb8_8', mainAccountNum);
        wordDocument.insertFieldValue('mb8_8_2', analysisCode);

        rNumDateInWordConverter = RNumDateInWordConverter::construct();
        if (documentHeader.OrderDate != dateNull())
        {
            wordDocument.insertFieldValue('mb8_9',  dayOfMth(documentHeader.OrderDate));
            wordDocument.insertFieldValue('mb8_10', rNumDateInWordConverter.date2strMonth(documentHeader.OrderDate));
            wordDocument.insertFieldValue('mb8_11',  year(documentHeader.OrderDate));
        }

        wordDocument.insertFieldValue('mb8_12',  documentHeader.OrderNum);

        amountWOVat = 0;
        depreciationAmount = 0;
        inventQty = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        curRow = 0;

        queryRun = new QueryRun(this.queryReport());

        while (queryRun.next())
        {
            documentHeader = queryRun.get(tableNum(RAssetDocument), 1);
            documentLine = queryRun.get(tableNum(RAssetDocument), 2);
            rAssetTable = queryRun.get(tableNum(RAssetTable));

            this.initReportHeaderData();

            if (!wordDocument)
            {
                if (!this.makeDocument())
                {
                    throw error(strFmt("@GLS101764", this.caption()));
                }
                this.reportHeader();
            }
            this.addRelatedDocument();
            this.reportBody();
        }

        if (wordDocument)
        {
            this.reportFooter();
            this.closeDocument();
        }
        else
        {
            throw error("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetMB8OXML);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument()
    {
        boolean ret = super();

        table = wordDocument.findBookmark(ConstTable1)
            .getBookmarkTable();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return documentPath + "@SYS34952" + this.documentNumber() + "@SYS34953";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MB8';
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>