<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementWriteOffAccountCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>SettlementWriteOffAccountCalculator</c> class manages the calculation of write off amounts
/// based on the context of a customer or vendor account.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.SettlementWriteOffCalculator)),
    ExportMetadata(enumStr(SettlementWriteOffOrigin), enumLiteralStr(SettlementWriteOffOrigin, Account))]
internal final class SettlementWriteOffAccountCalculator extends SettlementWriteOffCalculator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculatePotentialAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment amount. The adjustment amount represents the difference between the settlement amount
    /// for all documents as marked and the available payment amount after accounting for taxes and cash discounts.
    /// </summary>
    /// <param name = "_refRecId">The customer or vendor account record identifier.</param>
    /// <param name = "_refTableId">The customer or vendor table identifier.</param>
    /// <param name = "_adjustmentDate">The adjustment date.</param>
    /// <returns>A <c>SettlementWriteOffCalculatedTransactions</c> class containing calculated adjustment amounts.</returns>
    internal SettlementWriteOffCalculatedTransactions calculatePotentialAdjustment(SettlementWriteOffTransactionContext _transactionContext)
    {
        CustVendTable custVendTable = CustVendTable::findModuleByRecId(defaults.getModuleCustVend(), _transactionContext.parmRecId());

        SettlementWriteOffCalculatedTransactions settlementWriteOffCalculatedTransactions = SettlementWriteOffCalculatedTransactions::newFromCurrency(custVendTable.Currency);

        if (custVendTable)
        {
            this.calcAdjustmentAmountForAccount(settlementWriteOffCalculatedTransactions, custVendTable, _transactionContext.parmAdjustmentDate());
        }

        return settlementWriteOffCalculatedTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustmentAmountForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the potential adjustment amount for a customer or vendor account.
    /// </summary>
    /// <param name = "_settlementWriteOffCalculatedTransactions">The potential adjustment transaction.</param>
    /// <param name = "_custVendTable">The customer or vendor table.</param>
    /// <param name = "_adjustmentDate">The date for adjustment calculations.</param>
    /// <remarks>
    /// All marked transactions for the given customer or vendor are considered for write off.
    /// </remarks>
    private void calcAdjustmentAmountForAccount(
        SettlementWriteOffCalculatedTransactions _settlementWriteOffCalculatedTransactions,
        CustVendTable _custVendTable,
        TransDate _adjustmentDate)
    {
        this.initForCalculation(_custVendTable, _custVendTable.Currency);

        AmountCur remainingBalanceForAccount = this.findRemainingBalanceForAccount(_custVendTable);

        if (defaults.doesBalanceQualifyForWriteOff(remainingBalanceForAccount))
        {
            this.applyAvailablePaymentToDocuments(
                _custVendTable,
                this.findTotalAvailablePaymentForAccount(_custVendTable),
                _adjustmentDate);

            _settlementWriteOffCalculatedTransactions.parmPotentialAdjustmentAmount(this.calculatePotentialAdjustmentAmount(_custVendTable));
        }

        this.createWriteOffTransactionsForAccount(_settlementWriteOffCalculatedTransactions, _custVendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRemainingBalanceForAccount</Name>
				<Source><![CDATA[
    private AmountCur findRemainingBalanceForAccount(CustVendTable _custVendTable)
    {
        AmountCur remainingBalanceForAccount = SpecTransManager::getTotalSettleAmountForSpecReference(
            _custVendTable.DataAreaId,
            _custVendTable.TableId,
            _custVendTable.RecId,
            _custVendTable.Currency,
            _custVendTable.DataAreaId,
            DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));

        return remainingBalanceForAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTotalAvailablePaymentForAccount</Name>
				<Source><![CDATA[
    private AmountCur findTotalAvailablePaymentForAccount(CustVendTable _custVendTable)
    {
        SpecTrans specTrans;

        Query specTransPaymentQuery = queryGenerator.getQueryForSummarizedMarkedPaymentBalance(_custVendTable);

        QueryRun queryRun = new QueryRun(specTransPaymentQuery);

        if (queryRun)
        {
            queryRun.next();

            specTrans = queryRun.get(tableNum(SpecTrans));
        }

        return specTrans.Balance01;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForApplyingPaymentsToDocuments</Name>
				<Source><![CDATA[
    internal Query getQueryForApplyingPaymentsToDocuments(Common _paymentReference)
    {
        return queryGenerator.getQueryForAccountMatchSettlement(
            _paymentReference.company(),
            _paymentReference.TableId,
            _paymentReference.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWriteOffTransactionsForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>SpecTransWriteOffTmp</c> records for write off.
    /// </summary>
    /// <param name = "_settlementWriteOffCalculatedTransactions">The potential transactions container class.</param>
    /// <param name = "_custVendTable">The account context for write off.</param>
    /// <remarks>
    /// The values stored in the <c>SpecTransWriteOffTmp</c> track what transactions should be written off.
    /// </remarks>
    private void createWriteOffTransactionsForAccount(SettlementWriteOffCalculatedTransactions _settlementWriteOffCalculatedTransactions, CustVendTable _custVendTable)
    {
        SpecTrans companySpecTrans;
        SpecTransWriteOffTmp writeOffTransactions;

        while select RefCompany from companySpecTrans
            group by RefCompany
                where companySpecTrans.SpecCompany == _custVendTable.company()
                    && companySpecTrans.SpecTableId == _custVendTable.TableId
                    && companySpecTrans.SpecRecId == _custVendTable.RecId
        {
            changecompany(companySpecTrans.RefCompany)
            {
                CustVendTransOpen custVendTransOpen = CustVendTransOpen::getEmptyTableBuffer(defaults.getModuleCustVend());
                SpecTrans specTrans;

                insert_recordset writeOffTransactions
                    (SpecTransRecId)
                    select RecId from specTrans
                        join custVendTransOpen
                            where custVendTransOpen.DataAreaId == specTrans.RefCompany
                                && custVendTransOpen.TableId == specTrans.RefTableId
                                && custVendTransOpen.RecId == specTrans.RefRecId
                                && specTrans.SpecCompany == _custVendTable.company()
                                && specTrans.SpecTableId == _custVendTable.TableId
                                && specTrans.SpecRecId == _custVendTable.RecId;
            }
        }

        _settlementWriteOffCalculatedTransactions.saveSpecTransWriteOffTmpState(writeOffTransactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new ()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>