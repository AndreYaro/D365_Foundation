<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSumDate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSumDate
{
    TransDate                   perDate;
    ItemId                      itemId;

    InventQty                   postedQty;
    InventQty                   receivedQty;
    InventQty                   deductedQty;
    boolean                     cwItem;
    PdsCWInventQty              cwPostedQty;
    PdsCWInventQty              cwReceivedQty;
    PdsCWInventQty              cwDeductedQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventSum</Name>
				<Source><![CDATA[
    protected void addInventSum(InventSum _inventSum)
    {
        postedQty       += _inventSum.PostedQty;
        receivedQty     += _inventSum.Received;
        deductedQty     += _inventSum.Deducted;

        cwPostedQty     += _inventSum.PdsCWPostedQty;
        cwReceivedQty   += _inventSum.PdsCWReceived;
        cwDeductedQty   += _inventSum.PdsCWDeducted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransFinancial</Name>
				<Source><![CDATA[
    protected void addInventTransFinancial(InventTrans _inventTrans)
    {
        postedQty   -= _inventTrans.Qty;
        cwPostedQty -= _inventTrans.PdsCWQty;

        if (_inventTrans.StatusReceipt == StatusReceipt::Purchased)
        {
            receivedQty        += _inventTrans.Qty;
            cwReceivedQty      += _inventTrans.PdsCWQty;
        }
        else
        if (_inventTrans.StatusIssue == StatusIssue::Sold)
        {
            deductedQty        -= _inventTrans.Qty;
            cwDeductedQty      -= _inventTrans.PdsCWQty;
        }

        if (_inventTrans.PackingSlipReturned)
        {
            postedQty   += _inventTrans.Qty;
            cwPostedQty += _inventTrans.PdsCWQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransPhysical</Name>
				<Source><![CDATA[
    protected void addInventTransPhysical(InventTrans _inventTrans)
    {
        if (_inventTrans.StatusReceipt == StatusReceipt::Purchased)
        {
            receivedQty        -= _inventTrans.Qty;
            cwReceivedQty      -= _inventTrans.PdsCWQty;
        }
        else
        if (_inventTrans.StatusReceipt == StatusReceipt::Received)
        {
            receivedQty        -= _inventTrans.Qty;
            cwReceivedQty      -= _inventTrans.PdsCWQty;
        }
        else
        if (_inventTrans.StatusIssue == StatusIssue::Sold)
        {
            deductedQty        += _inventTrans.Qty;
            cwDeductedQty      += _inventTrans.PdsCWQty;
        }
        else
        if (_inventTrans.StatusIssue == StatusIssue::Deducted)
        {
            deductedQty        += _inventTrans.Qty;
            cwDeductedQty      += _inventTrans.PdsCWQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductedQty</Name>
				<Source><![CDATA[
    InventQty   deductedQty()
    {
        return deductedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        this.setValueQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    ItemId  parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        cwItem = PdsGlobal::pdsIsCWItem(itemId);
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPerDate</Name>
				<Source><![CDATA[
    TransDate parmPerDate(TransDate _perDate = perDate)
    {
        perDate = _perDate;
        return perDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWDeductedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>cwDeductedQty</c> value.
    /// </summary>
    /// <returns>
    /// The <c>cwDeductedQty</c> value.
    /// </returns>
    public PdsCWInventQty  pdsCWDeductedQty()
    {
        return cwDeductedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWPostedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>cwPostedQty</c> value.
    /// </summary>
    /// <returns>
    /// The <c>cwPostedQty</c> value.
    /// </returns>
    public PdsCWInventQty pdsCWPostedQty()
    {
        return cwPostedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>cwReceivedQty</c> value.
    /// </summary>
    /// <returns>
    /// The <c>cwReceivedQty</c> value.
    /// </returns>
    public PdsCWInventQty pdsCWReceivedQty()
    {
        return cwReceivedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedQty</Name>
				<Source><![CDATA[
    InventQty  postedQty()
    {
        return postedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivedQty</Name>
				<Source><![CDATA[
    InventQty   receivedQty()
    {
        return  receivedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventSum</Name>
				<Source><![CDATA[
    protected void selectInventSum()
    {
        InventSum   inventSum;

        select sum(PostedQty), sum(Received), sum(Deducted),
                sum(PdsCWPostedQty), sum(PdsCWReceived), sum(PdsCWDeducted)
            from inventSum
            where  inventSum.ItemId     == itemId
                && inventSum.ClosedQty  == NoYes::No;

        this.addInventSum(inventSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingFinancial</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingFinancial()
    {
        InventTransPosting  inventTransPostingFinancial;
        InventTrans         inventTrans;

        while select forceplaceholders TableId
            from inventTransPostingFinancial
            where  inventTransPostingFinancial.ItemId                   == itemId
                && inventTransPostingFinancial.InventTransPostingType   == InventTransPostingType::Financial
                && inventTransPostingFinancial.TransDate                > perDate
            join sum(Qty), sum(PdsCWQty)
            from inventTrans
            group by StatusIssue, StatusReceipt, PackingSlipReturned
            where inventTrans.Voucher                       == inventTransPostingFinancial.Voucher
                && inventTrans.DateFinancial                == inventTransPostingFinancial.TransDate
                && inventTrans.InventTransOrigin            == inventTransPostingFinancial.InventTransOrigin
        {
            this.addInventTransFinancial(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectInventTransPostingPhysical</Name>
				<Source><![CDATA[
    protected void selectInventTransPostingPhysical()
    {
        InventTrans                 inventTrans;
        InventTransPosting          inventTransPostingPhysical;

        while select forceplaceholders TableId
            from inventTransPostingPhysical
            where  inventTransPostingPhysical.ItemId                    == itemId
                && inventTransPostingPhysical.InventTransPostingType    == InventTransPostingType::Physical
                && inventTransPostingPhysical.TransDate                 > perDate
            join sum(Qty), sum(PdsCWQty)
            from inventTrans
            group by StatusIssue, StatusReceipt, DateInvent
            where  inventTrans.VoucherPhysical              == inventTransPostingPhysical.Voucher
                && inventTrans.DatePhysical                 == inventTransPostingPhysical.TransDate
                && inventTrans.InventTransOrigin            == inventTransPostingPhysical.InventTransOrigin
        {
            this.addInventTransPhysical(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValueQty</Name>
				<Source><![CDATA[
    protected  void setValueQty()
    {
        this.selectInventSum();
        this.selectInventTransPostingPhysical();
        this.selectInventTransPostingFinancial();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>