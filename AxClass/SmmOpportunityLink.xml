<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOpportunityLink</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SmmOpportunityLink
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>linkType2FieldId</Name>
				<Source><![CDATA[
    public static fieldId linkType2FieldId(smmOpportunityAssociation _linkType)
    {
        fieldId         fieldId;
        SysDictField    dictField;
        switch (_linkType)
        {
            case smmOpportunityAssociation::Campaign    :
                fieldId = fieldnum(smmCampaignTable, CampaignId);
                break;

            case smmOpportunityAssociation::Lead        :
                fieldId = fieldnum(smmLeadTable, LeadId);
                break;

            case smmOpportunityAssociation::Opportunity :
                fieldId = fieldnum(smmOpportunityTable, OpportunityId);
                break;

            case smmOpportunityAssociation::Project     :
                fieldId = fieldnum(ProjTable, ProjId);
                break;

            default :
                fieldId = 0;
                break;
        }

        if (fieldId)
        {
            dictField = new SysDictField(SmmOpportunityLink::linkType2TableId(_linkType),fieldId);
            if (dictField && dictField.rights() < AccessType::View)
            {
                fieldId = 0;
            }
        }

        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkType2TableId</Name>
				<Source><![CDATA[
    public static RefTableId linkType2TableId(smmOpportunityAssociation _linkType, boolean _showInfo=false)
    {
        tableId         tableId;
        SysDictTable    dictTable;

        switch (_linkType)
        {
            case smmOpportunityAssociation::Campaign:
                tableId = tablenum(smmCampaignTable);
                break;

            case smmOpportunityAssociation::Lead:
                tableId = tablenum(smmLeadTable);
                break;

            case smmOpportunityAssociation::Opportunity:
                tableId = tablenum(smmOpportunityTable);
                break;

            case smmOpportunityAssociation::Project:
                tableId = tablenum(ProjTable);
                break;

            default :
                tableId = 0;
                break;
        }

        if (tableId)
        {
            dictTable = new SysDictTable(tableId);
            if (!dictTable || dictTable.rights() < AccessType::View)
            {
                if (_showInfo)
                {
                    error(strfmt("@SYS76214",tableid2pname(tableId)));
                }
                tableId = 0;
            }
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRelatedForm</Name>
				<Source><![CDATA[
    public static void openRelatedForm(Object _caller, SmmOpportunityRelTable _smmOpportunityRelTable)
    {
        Common common = SmmOpportunityLink::getSmmOpportunityRelTableDictTable(_smmOpportunityRelTable);
        
        SmmOpportunityLink::openRelatedFormHelper(_caller, _smmOpportunityRelTable, common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openRelatedFormHelper</Name>
				<Source><![CDATA[
    protected static void openRelatedFormHelper(Object _caller, SmmOpportunityRelTable _smmOpportunityRelTable, Common _common)
    {
        switch (_smmOpportunityRelTable.linkType())
        {
            case SmmOpportunityAssociation::Campaign :
                SmmUtility::openMenuItemForm(menuitemdisplaystr(SmmCampaignTable), _common, _caller);
                break;
            case SmmOpportunityAssociation::Lead :
                SmmUtility::openMenuItemForm(menuitemdisplaystr(SmmLeadTable), _common, _caller);
                break;
            case SmmOpportunityAssociation::Opportunity :
                SmmUtility::openMenuItemForm(menuitemdisplaystr(SmmOpportunityTable), _common, _caller);
                break;
            case SmmOpportunityAssociation::Project :
                SmmUtility::openMenuItemForm(menuitemdisplaystr(projTable), _common, _caller);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSmmOpportunityRelTableDictTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>DictTable</c> instance for the specified <c>SmmOpportunityRelTable</c> record.
    /// </summary>
    /// <param name = "_smmOpportunityRelTable">The <c>SmmOpportunityRelTable</c> record to retrieve a <c>DictTable</c> instance for.</param>
    /// <returns>A <c>Common</c> record created from the <c>DictTable</c> for the provided <c>SmmOpportunityRelTable</c> record.</returns>
    protected static Common getSmmOpportunityRelTableDictTable(SmmOpportunityRelTable _smmOpportunityRelTable)
    {
        DictTable dictTable = new DictTable(_smmOpportunityRelTable.RefTableId);
        Common common;

        if (dictTable)
        {
            common = dictTable.makeRecord();
            select common where common.RecId == _smmOpportunityRelTable.RefRecId;
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowedTypes</Name>
				<Source><![CDATA[
    public static container setAllowedTypes()
    {
        DictEnum  dictEnum = DictEnum::newFromName(enumStr(smmOpportunityAssociation));
        container allowedTypes;

        Enumerator enum = dictEnum.getEnumerator();

        while (enum.moveNext())
        {
            smmOpportunityAssociation currentType = enum.current();

            if (dictEnum.isValueEnabled(currentType))
            {
                TableId tableId = SmmOpportunityLink::linkType2TableId(currentType);
                SysDictTable dictTable = new SysDictTable(tableId);
                if (dictTable && dictTable.rights() >= AccessType::View)
                {
                    FieldId fieldId = SmmOpportunityLink::linkType2FieldId(currentType);
                    SysDictField dictField = new SysDictField(tableId,fieldId);
                    if (dictField && dictField.rights() >= AccessType::View)
                    {
                        allowedTypes += [tableId];
                    }
                }
            }                
        }

        return allowedTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2LinkType</Name>
				<Source><![CDATA[
    public static SmmOpportunityAssociation tableId2LinkType(RefTableId _refTableId)
    {
        if (!SmmOpportunityLink::tableHasAccessRights(_refTableId))
        {
            return SmmOpportunityAssociation::None;
        }
            
        return SmmOpportunityLink::tableId2LinkTypeHelper(_refTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId2LinkTypeHelper</Name>
				<Source><![CDATA[
    protected static SmmOpportunityAssociation tableId2LinkTypeHelper(RefTableId _refTableId) 
    {
        switch (_refTableId)
        {
            case tablenum(SmmCampaignTable):
                return SmmOpportunityAssociation::Campaign;
            case tablenum(SmmLeadTable):
                return SmmOpportunityAssociation::Lead;
            case tablenum(SmmOpportunityTable):
                return SmmOpportunityAssociation::Opportunity;
            case tablenum(ProjTable):
                return SmmOpportunityAssociation::Project;
            default:
                return SmmOpportunityAssociation::None; 
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableHasAccessRights</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the provided <c>RefTableId</c> reference has the needed View access rights or higher.
    /// </summary>
    /// <param name = "_refTableId">The <c>RefRecId</c> of the record whose access rights are in question.</param>
    /// <returns>
    /// true if the access rights are View or higher; otherwise, false.
    /// </returns>
    protected static boolean tableHasAccessRights(RefTableId _refTableId)
    {
        SysDictTable dictTable = new SysDictTable(_refTableId);

        return (dictTable && dictTable.rights() >= AccessType::View);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssociation</Name>
				<Source><![CDATA[
    public static void updateAssociation(tableId         _refTableId,    // Table where record to be updated
                                                RecId           _refRecId,      // RecId associated to RefTableId
                                                str             _entityId,      // Lead or Opportunity Id
                                                smmLogAction    _action,        // Insert or Delete
                                                tableId         _sourceTableId) // Entity Table where record came from
    {
        RecId                   recId;
        str                     id;

        smmLeadRelTable         smmLeadRelTable;
        smmOpportunityRelTable  smmOpportunityRelTable;

        // find Lead or Opportunity Id for passed RefRecId
        id    = _refTableId == tablenum(smmLeadTable) ?
                smmLeadTable::findRec(_refRecId).LeadId :
                smmOpportunityTable::findRec(_refRecId).OpportunityId;

        // find Lead or Opportunity RecId for passed EntityId
        recId = _sourceTableId == tablenum(smmLeadTable) ?
                smmLeadTable::find(_entityId).RecId :
                smmOpportunityTable::find(_entityId).RecId;

        if (_refTableId == tablenum(smmLeadTable))
        {
            // Find the record first before it gets added or deleted
            smmLeadRelTable = smmLeadRelTable::find(id, _sourceTableId, recId, _action == smmLogAction::delete);

            if (_action == smmLogAction::insert && !smmLeadRelTable)
            {
                smmLeadRelTable.clear();
                smmLeadRelTable.LeadId = id;
                smmLeadRelTable.RefTableId = _sourceTableId;
                smmLeadRelTable.RefRecId = recId;
                smmLeadRelTable.insert();
            }
            else if (_action == smmLogAction::delete && smmLeadRelTable)
            {
                smmLeadRelTable.delete();
            }
        }

        else if (_refTableId == tablenum(smmOpportunityTable))
        {
            // Find the record first before it gets added or deleted
            smmOpportunityRelTable = smmOpportunityRelTable::find(id, _sourceTableId, recId, _action == smmLogAction::delete);

            if (_action == smmLogAction::insert && !smmOpportunityRelTable)
            {
                smmOpportunityRelTable.clear();
                smmOpportunityRelTable.OpportunityId = id;
                smmOpportunityRelTable.RefTableId = _sourceTableId;
                smmOpportunityRelTable.RefRecId = recId;
                smmOpportunityRelTable.insert();
            }
            else if (_action == smmLogAction::delete && smmOpportunityRelTable)
            {
                smmOpportunityRelTable.delete();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>