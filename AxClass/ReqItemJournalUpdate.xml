<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqItemJournalUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqItemJournalUpdate extends JournalRunBaseBatch implements BatchRetryable
{
    JournalId           journalId;

    ReqMinServiceLevel  reqMinServiceLevel;
    real                issueLeadtimeFactor;
    LeadTime            leadTimeMargin;

    boolean             useServiceLevel;
    boolean             useIssueLeadtime;

    NoYes               proposal2NewValue;

    DialogGroup         dlgGroupUseServiceLevel;
    DialogGroup         dlgGroupUseIssueLeadtime;

    DialogField         dialogReqMinServiceLevel;
    DialogField         dialogIssueLeadtimeFactor;
    DialogField         dialogLeadTimeMargin;
    DialogField         dialogProposal2NewValue;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        journalId,
        useIssueLeadtime,
        issueLeadtimeFactor,
        useServiceLevel,
        reqMinServiceLevel,
        leadTimeMargin,
        proposal2newvalue
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog = null, boolean _forceOnClient = false)
    {
        DialogRunbase   dialog = this.dialogInternal(_dialog, _forceOnClient);

        dlgGroupUseIssueLeadtime = dialog.addGroup("@SYS74482");
        dlgGroupUseIssueLeadtime.optionValue(useIssueLeadtime);
        dlgGroupUseIssueLeadtime.frameOptionButton(FormFrameOptionButton::Radio);
        dialogIssueLeadtimeFactor = dialog.addFieldValue(identifierstr(real),issueLeadtimeFactor,"@SYS5113","@SYS74838" );

        dlgGroupUseServiceLevel = dialog.addGroup("@SYS74479");
        dlgGroupUseServiceLevel.optionValue(useServiceLevel);
        dlgGroupUseServiceLevel.frameOptionButton(FormFrameOptionButton::Radio);
        dialogReqMinServiceLevel = dialog.addFieldValue(enumstr(ReqMinServiceLevel),reqMinServiceLevel);

        dialog.addGroup("@SYS2952");

        dialogLeadTimeMargin    = dialog.addFieldValue(extendedtypestr(LeadTime),leadTimeMargin,"@SYS74830","@SYS74831");
        dialogProposal2NewValue = dialog.addFieldValue(enumstr(NoYes),proposal2NewValue,"@SYS74546",strfmt("@SYS74833","@SYS74796"));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        useIssueLeadtime    = dlgGroupUseIssueLeadtime.optionValue();
        issueLeadtimefactor = dialogIssueLeadtimeFactor.value();

        useServiceLevel     = dlgGroupUseServiceLevel.optionValue();
        reqMinServiceLevel  = dialogReqMinServiceLevel.value();

        leadTimeMargin      = dialogLeadTimeMargin.value();
        proposal2NewValue   = dialogProposal2NewValue.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedLines</Name>
				<Source><![CDATA[
    boolean hasChangedLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChangedNumOfLines</Name>
				<Source><![CDATA[
    boolean hasChangedNumOfLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalId</Name>
				<Source><![CDATA[
    public JournalId parmJournalId(JournalId _journalId = journalId)
    {
        journalId = _journalId;

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (! this.validate(this))
        {
            throw(error("@SYS18447"));
        }

        try
        {
            ttsBegin;
            this.updateLines();
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReqItemJournalTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>Query</c> class.
    /// </summary>
    /// <param name = "_journalId">
    /// A <c>JournalId</c> value.
    /// </param>
    /// <returns>
    /// The <c>Query</c> instance.  
    ///</returns>
    protected Query buildReqItemJournalTransQuery(JournalId _journalId)
    {
        Query                   reqItemJournalTransQuery = new Query();
        QueryBuildDataSource    reqItemJournalTransDataSource = reqItemJournalTransQuery.addDataSource(tableNum(ReqItemJournalTrans));

        reqItemJournalTransDataSource.addRange(fieldNum(ReqItemJournalTrans, JournalId)).value(queryValue(_journalId));
        reqItemJournalTransDataSource.addSortIndex(indexNum(ReqItemJournalTrans, LineIdx));
        reqItemJournalTransDataSource.indexIsHint(true);
        reqItemJournalTransDataSource.update(true);
        
        return reqItemJournalTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMinimumOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the mininum on hand values on the safety stock journal line record.
    /// </summary>
    /// <param name = "_reqItemJournalTrans">
    /// The safety stock journal line record buffer.
    ///</param>
    protected void populateMinimumOnHand(ReqItemJournalTrans _reqItemJournalTrans)
    {
        switch (true)
        {
            case useIssueLeadtime && ! useServiceLevel:
                _reqItemJournalTrans.MinOnhandCalculated = (_reqItemJournalTrans.avgIssueDuringLeadTime()+_reqItemJournalTrans.avgIssueDuringLeadTimeMargin(leadTimeMargin)) * issueLeadtimeFactor;
                _reqItemJournalTrans.MinOnhandCalculated = decround(_reqItemJournalTrans.MinOnhandCalculated, InventTable::inventDecimals(_reqItemJournalTrans.ItemId));
                break;
            case !useIssueLeadtime && useServiceLevel:
                LeadTime leadTimeInDays = real2int(_reqItemJournalTrans.LeadTimeCalendarDaysCurrent ? _reqItemJournalTrans.LeadTimeCurrent *7/5 : _reqItemJournalTrans.LeadTimeCurrent);
                _reqItemJournalTrans.MinOnhandCalculated = _reqItemJournalTrans.StdDeviationIssueMonth * sqrt((leadTimeInDays+leadTimeMargin)/30) * ReqItemJournalUpdate::serviceLevel2ServiceFactor(reqMinServiceLevel);
                _reqItemJournalTrans.MinOnhandCalculated = decround(_reqItemJournalTrans.MinOnhandCalculated, InventTable::inventDecimals(_reqItemJournalTrans.ItemId));
                break;
        }
        if (proposal2NewValue)
        {
            _reqItemJournalTrans.MinOnhandNewValue = _reqItemJournalTrans.MinOnhandCalculated;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLines</Name>
				<Source><![CDATA[
    void updateLines()
    {
        ReqItemJournalTrans     reqItemJournalTrans;
        JournalTableData        journalTableData =  JournalTableData::newTable(ReqItemJournalTable::find(journalId,false));
        JournalTransData        journalTransData;
        QueryRun                queryRun = new QueryRun(this.buildReqItemJournalTransQuery(journalId));

        while (queryRun.next())
        {
            reqItemJournalTrans = queryRun.get(tableNum(ReqItemJournalTrans));

            journalTransData = journalTableData.journalStatic().newJournalTransData(reqItemJournalTrans,journalTableData);

            this.populateMinimumOnHand(reqItemJournalTrans);

            journalTransData.update();
        }

        this.endUpdate(journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the value entered by the user.
    /// </summary>
    /// <param name="calledFrom">
    /// The calling object, optional parameter.
    /// </param>
    /// <returns>
    /// true if the validation succeeds; otherwise, false.
    /// </returns>
    [Replaceable]
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (! ReqItemJournalTable::find(journalId).IssuesFromDate)
        {
            ret = checkFailed("@SYS75265"+'\n\n'+strfmt("@SYS75266","@SYS74296"));
        }

        if (! useServiceLevel && ! useIssueLeadtime)
        {
            ret = checkFailed("@SYS74502");
        }

        if (useServiceLevel && ! ReqItemJournalTable::find(journalId).CalcStdDeviation && ret)
        {
            ret = checkFailed("@SYS74586"+'\n\n'+strfmt("@SYS75264","@SYS74462","@SYS74296"));
        }

        if (leadTimeMargin < 0)
        {
            ret = checkFailed(strfmt("@SYS69681","@SYS74830"));
        }

        if (useIssueLeadtime && issueLeadtimeFactor <= 0)
        {
            ret = checkFailed("@SYS82797");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>argsJournalId</Name>
				<Source><![CDATA[
    static JournalId argsJournalId(Args _args)
    {
        fieldId     id;
        JournalId   journalId;
        FormRun     callerForm;

        if (_args && _args.caller() && _args.dataset() )
        {
            id = fieldname2id(_args.dataset(),fieldstr(ReqItemJournalTrans,JournalId));

            if (id)
            {
                journalId = _args.record().(id);
            }

            callerForm = _args.caller();

            if (!journalId)
            {
                if (callerForm && callerForm.args() && callerForm.args().record() && callerForm.args().record().TableId)
                {
                    id = fieldname2id(callerForm.args().record().TableId,fieldstr(ReqItemJournalTable,JournalId));

                    if (id)
                    {
                        journalId = callerForm.args().record().(id);
                    }
                }
            }
        }

        return journalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS74500";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ReqItemJournalUpdate    journalUpdate;
        JournalForm             journalForm;

        journalForm   = JournalForm::fromArgs(args);
        journalUpdate = ReqItemJournalUpdate::newFromForm(args,journalForm);

        journalForm.runbaseMainStart();

        if (!journalUpdate.prompt())
        {
            if (! journalUpdate.batchInfo().parmBatchExecute())
            {
                journalForm.runbaseMainCancel(journalUpdate.parmJournalId());
            }
            return;
        }

        try
        {
            journalUpdate.runOperation();
            journalForm.runbaseMainEnd(journalUpdate,false);
        }
        catch (Exception::Error)
        {
            journalForm.runbaseMainEnd(journalUpdate,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for constructing an object of <c>ReqItemJournalUpdate</c> or one of its subclasses.
    /// </summary>
    /// <param name = "_journalForm">The <c>JournalForm</c> object used to create a new <c>ReqItemJournalUpdate</c>.</param>
    /// <param name = "_args">The <c>JournalForm</c> Args.</param>
    /// <param name = "_result">A <c>EventHandlerResult</c> object where an object of <c>ReqItemJournalUpdate</c> or one of its subclasses can be returned.</param>
    static delegate void newFromFormDelegate(
        JournalForm         _journalForm,
        Args                _args,
        EventHandlerResult  _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    static ReqItemJournalUpdate newFromForm(Args _args,JournalForm _journalForm)
    {
        ReqItemJournalTable journalTable = _journalForm.journalTableData().journalTable();
        switch (journalTable.JournalType)
        {
            case ReqItemJournalType::SafetyStock:
                return ReqItemJournalUpdate::newJournalUpdate(_args);

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                ReqItemJournalUpdate::newFromFormDelegate(_journalForm, _args, result);
                
                if (result.hasResult())
                {
                    return result.result() as ReqItemJournalUpdate;
                }
                throw error(strfmt("@SYS23455",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalUpdate</Name>
				<Source><![CDATA[
    static ReqItemJournalUpdate newJournalUpdate(Args _args)
    {
        ReqItemJournalUpdate        reqItemJournalUpdate;

        reqItemJournalUpdate = new ReqItemJournalUpdate();

        reqItemJournalUpdate.getLast();
        reqItemJournalUpdate.parmJournalId(ReqItemJournalUpdate::argsJournalId(_args));

        return reqItemJournalUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceLevel2ServiceFactor</Name>
				<Source><![CDATA[
    static real serviceLevel2ServiceFactor(ReqMinServiceLevel _reqMinServiceLevel)
    {
        container result = ReqItemJournalUpdate::convertServiceLevel2ServiceFactor(_reqMinServiceLevel);
        
        if (!conPeek(result, 1))
        {
            throw error("@SYS74557");
        }

        return conPeek(result, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertServiceLevel2ServiceFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a service level enum value into a service factor.
    /// </summary>
    /// <param name = "_reqMinServiceLevel">The service level to convert.</param>
    /// <returns>
    /// The container where the first value indicates whether the service level have been converted
    /// to a service factor and the second - actual service factor.
    /// </returns>
    protected static container convertServiceLevel2ServiceFactor(ReqMinServiceLevel _reqMinServiceLevel)
    {
        real ret;
        boolean converted = true;

        switch (_reqMinServiceLevel)
        {
            case ReqMinServiceLevel::SL50 :
                ret = 0;
                break;
            case ReqMinServiceLevel::SL80 :
                ret = 0.84;
                break;
            case ReqMinServiceLevel::SL90 :
                ret = 1.28;
                break;
            case ReqMinServiceLevel::SL95 :
                ret = 1.65;
                break;
            case ReqMinServiceLevel::SL98 :
                ret = 2.05;
                break;
            case ReqMinServiceLevel::SL99point86 :
                ret = 3.0;
                break;
            case ReqMinServiceLevel::SL99point99 :
                ret = 4.0;
                break;
            default:
                converted = false;
        }

        return [converted, ret];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>