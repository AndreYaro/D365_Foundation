<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsResetShelfDateValid</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsResetShelfDateValid</c> class provides validation to the <c>PdsResetShelfDates</c> form.
/// </summary>
public class PdsResetShelfDateValid
{
    PdsBestBeforeDate       bestBeforeDate;
    PdsVendExpiryDate       expiryDate;
    PdsShelfAdviceDate      shelfAdviceDate;
    InventBatchProdDate     prodDate;

    InventBatch             inventBatch;
    InventTable             inventTable;

    boolean                 checkExpiryAfterUpdates;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBestBeforeDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the value for the Best Before Date
    /// </summary>
    /// <param name="_set">
    ///    Flag to set the value.
    /// </param>
    /// <param name="_bestBeforeDate">
    ///    The date value being set.
    /// </param>
    /// <returns>
    ///    The Best Before Date value.
    /// </returns>
    public PdsBestBeforeDate parmBestBeforeDate(
        boolean             _set = false,
        PdsBestBeforeDate   _bestBeforeDate = bestBeforeDate)
    {
        if (_set)
        {
            this.validateAndUpdateBestBeforeDate(_bestBeforeDate);
        }

        return bestBeforeDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckExpiryAfterUpdates</Name>
				<Source><![CDATA[
        public boolean parmCheckExpiryAfterUpdates(boolean _checkExpiryAfterUpdates = checkExpiryAfterUpdates)
    {
        checkExpiryAfterUpdates = _checkExpiryAfterUpdates;

        return checkExpiryAfterUpdates;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the value for the Expiry Date.
    /// </summary>
    /// <param name="_set">
    ///    Flag to set the value.
    /// </param>
    /// <param name="_expiryDate">
    ///    The date value being set.
    /// </param>
    /// <returns>
    ///    The Expiry Date value.
    /// </returns>
    public PdsVendExpiryDate parmExpiryDate(
        boolean             _set = false,
        PdsVendExpiryDate   _expiryDate = expiryDate)
    {
        if (_set)
        {
            this.validateAndUpdateExpiryDate(_expiryDate);
        }

        return expiryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatch</Name>
				<Source><![CDATA[
        public InventBatch parmInventBatch(boolean _set = false, InventBatch _inventBatch = inventBatch)
    {
        inventBatch = _inventBatch;

        if (_set)
        {
            if (inventBatch.RecId != 0)
            {
                inventTable = InventTable::find(inventBatch.ItemId);

                prodDate        = inventBatch.prodDate;
                expiryDate      = inventBatch.expDate;
                bestBeforeDate  = inventBatch.PdsBestBeforeDate;
                shelfAdviceDate = inventBatch.PdsShelfAdviceDate;
            }
        }

        return inventBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the Manufacturing Date.
    /// </summary>
    /// <param name="_set">
    ///    Flag to set the value.
    /// </param>
    /// <param name="_prodDate">
    ///    The date value being set.
    /// </param>
    /// <returns>
    ///    The Manufacturing Date.
    /// </returns>
    public InventBatchProdDate parmProdDate(
        boolean                 _set = false,
        InventBatchProdDate     _prodDate = prodDate)
    {
        if (_set)
        {
            this.validateAndUpdateProdDate(_prodDate);
        }

        return  prodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShelfAdviceDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the Shelf Advice Date.
    /// </summary>
    /// <param name="_set">
    ///    Flag to set the value.
    /// </param>
    /// <param name="_shelfAdviceDate">
    ///    The date value being set.
    /// </param>
    /// <returns>
    ///    The Shelf Advice Date.
    /// </returns>
    public PdsShelfAdviceDate parmShelfAdviceDate(
        boolean                 _set = false,
        PdsShelfAdviceDate      _shelfAdviceDate = shelfAdviceDate)
    {
        if (_set)
        {
            this.validateAndUpdateShelfAdviceDate(_shelfAdviceDate);
        }

        return shelfAdviceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventBatchJournalResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the inventory batch journal result record with the date values to manage.
    /// </summary>
    /// <param name="_inventBatchJournalResult">
    ///    A record buffer for the <c>InventBatchJournalResult</c> table.
    /// </param>
    private void setInventBatchJournalResult(InventBatchJournalResult _inventBatchJournalResult)
    {
        inventTable     = _inventBatchJournalResult.InventBatchJournal().InventTable();

        prodDate        = _inventBatchJournalResult.InventBatchProdDate;
        expiryDate      = _inventBatchJournalResult.InventBatchExpDate;
        bestBeforeDate  = _inventBatchJournalResult.BestBeforeDate;
        shelfAdviceDate = _inventBatchJournalResult.ShelfAdviceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the error in the infolog and sets an indicator that an error occured.
    /// </summary>
    /// <param name="_message">
    ///    The error message to show.
    /// </param>
    /// <returns>
    ///    false to indicate an error.
    /// </returns>
    private boolean showError(str _message)
    {
        error(_message);
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBestBeforeDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and updates the best before date.
    /// </summary>
    /// <param name="_bestBeforeDate">
    ///    The best before date to validate and update if valid.
    /// </param>
    /// <returns>
    ///    true if the best before date passes validation and was updated; otherwise, false.
    /// </returns>
    public boolean validateAndUpdateBestBeforeDate(PdsBestBeforeDate _bestBeforeDate)
    {
        boolean ret = true;

        if (_bestBeforeDate < prodDate)
        {
            ret = this.showError("@PRO2242");
        }
        else if (inventTable.isShelfLifeItem())
        {
            bestBeforeDate = _bestBeforeDate;

            if (Box::yesNo("@PDS1392",DialogButton::Yes,"@PRO2239") == DialogButton::Yes)
            {
                expiryDate = bestBeforeDate ? (bestBeforeDate + inventTable.PdsBestBefore) : dateNull();
            }
            else if (checkExpiryAfterUpdates && expiryDate < _bestBeforeDate)
            {
                ret = this.showError("@PRO2237");
            }
        }
        else if (expiryDate < _bestBeforeDate)
        {
            ret = this.showError("@PRO2237");
        }
        else
        {
            bestBeforeDate = _bestBeforeDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateExpiryDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and updates the expiry date.
    /// </summary>
    /// <param name="_expiryDate">
    ///    The expiry date to validate and update if valid.
    /// </param>
    /// <returns>
    ///    true if the expiry date passes validation and was updated; otherwise, false.
    /// </returns>
    public boolean validateAndUpdateExpiryDate(PdsVendExpiryDate _expiryDate)
    {
        boolean ret = true;

        if (_expiryDate < prodDate)
        {
            ret = this.showError("@PDS1881");
        }
        else if (_expiryDate - inventTable.PdsBestBefore >= prodDate && inventTable.isShelfLifeItem())
        {
            expiryDate = _expiryDate;

            if (Box::yesNo("@PRO2664",DialogButton::Yes,"@PRO2363") == DialogButton::Yes)
            {
                bestBeforeDate = expiryDate - inventTable.PdsBestBefore;
            }
            else if (checkExpiryAfterUpdates && _expiryDate < bestBeforeDate)
            {
                ret = this.showError("@PRO2237");
            }
        }
        else if (_expiryDate < bestBeforeDate)
        {
            ret = this.showError("@PRO2237");
        }
        else
        {
            expiryDate = _expiryDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateProdDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and updates the production date.
    /// </summary>
    /// <param name="_prodDate">
    ///    The production date to validate and update if valid.
    /// </param>
    /// <returns>
    ///    true if the production date passes validation and was updated; otherwise, false.
    /// </returns>
    public boolean validateAndUpdateProdDate(InventBatchProdDate _prodDate)
    {
        boolean ret = true;

        if (inventTable.RecId == 0)
        {
            ret = this.showError(strfmt("@SYS103266", inventTable.ItemId));
        }

        if (!checkExpiryAfterUpdates && expiryDate && expiryDate < _prodDate)
        {
            ret = this.showError("@PRO2236");
        }
        else
        {
            prodDate        = _prodDate;

            if (inventTable.isShelfLifeItem())
            {
                if (Box::yesNo("@PRO2665",DialogButton::Yes,"@PRO2666") == DialogButton::Yes)
                {
                    shelfAdviceDate = prodDate ? (prodDate + inventTable.PdsShelfAdvice) : dateNull();
                }

                if (Box::yesNo("@PRO2667",DialogButton::Yes,"@PRO2668") == DialogButton::Yes)
                {
                    expiryDate      = prodDate ? (prodDate + inventTable.PdsShelfLife) : dateNull();
                    bestBeforeDate  = prodDate ? (expiryDate - inventTable.PdsBestBefore) : dateNull();
                }
            }
        }

        if (ret && checkExpiryAfterUpdates && expiryDate && expiryDate < _prodDate)
        {
            ret = this.showError("@PRO2236");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateShelfAdviceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates and updates the shelf advice date.
    /// </summary>
    /// <param name="_shelfAdviceDate">
    /// The shelf advice date to validate and update if valid.
    /// </param>
    /// <returns>
    /// true if the shelf advice date passes validation and was updated; otherwise, false.
    /// </returns>
    public boolean validateAndUpdateShelfAdviceDate(PdsShelfAdviceDate _shelfAdviceDate)
    {
        boolean ret = true;

        shelfAdviceDate = _shelfAdviceDate;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PdsResetShelfDateValid construct()
    {
        return new PdsResetShelfDateValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatch</Name>
				<Source><![CDATA[
        public static PdsResetShelfDateValid newInventBatch(InventBatch _inventBatch)
    {
        PdsResetShelfDateValid  pdsResetShelfDateValid;

        pdsResetShelfDateValid = PdsResetShelfDateValid::construct();

        pdsResetShelfDateValid.parmInventBatch(true,_inventBatch);

        return pdsResetShelfDateValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventBatchJournalResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PdsResetShelfDateValid</c> class given an inventory batch journal result record.
    /// </summary>
    /// <param name="_inventBatchJournalResult">
    ///    A record buffer for the <c>InventBatchJournalResult</c> table.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>PdsResetShelfDateValid</c> class.
    /// </returns>
    public static PdsResetShelfDateValid newInventBatchJournalResult(InventBatchJournalResult _inventBatchJournalResult)
    {
        PdsResetShelfDateValid  pdsResetShelfDateValid;

        pdsResetShelfDateValid = PdsResetShelfDateValid::construct();

        pdsResetShelfDateValid.setInventBatchJournalResult(_inventBatchJournalResult);

        return pdsResetShelfDateValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>