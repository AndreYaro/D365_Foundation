<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsConsistencyCheck_WMSOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WmsConsistencyCheck_WMSOrder extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;
    boolean     dummy;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        Dummy
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);

        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    public Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    public boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query   query = new Query();

        query.addDataSource(tableNum(WMSOrder)).addRange(fieldNum(WMSOrder, OrderId));
        queryRun = new QueryRun(query);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        WMSOrder        wmsOrder, wmsOrderQuery;
        WMSOrderTrans   wmsOrderTrans;

        DictTable       dictTable           = new DictTable(tableNum(WMSOrder));
        boolean         hasCheckFixMethod   = this.hasTableCheckFixMethod(tableNum(WMSOrder));

        progress.setTotal(QueryRun::getQueryRowCount(queryRun.query(), maxInt()), 2);
        queryRun.reset();

        while (queryRun.next())
        {
            ttsbegin;
            wmsOrderQuery = queryRun.get(tableNum(WMSOrder));
            wmsOrder = WMSOrder::find(wmsOrderQuery.OrderId, true);
            setPrefix( strFmt("@SYS59158", wmsOrder.OrderId) );
            progress.setText(strFmt("@SYS59158", wmsOrder.OrderId),2);
            progress.incCount(1,2);
            this.kernelCheckRecord(wmsOrder, dictTable, hasCheckFixMethod);
            wmsOrder.checkFix(this);
            ttscommit;
        }

        while select optimisticlock wmsOrderTrans
            notexists join wmsOrder
            where wmsOrder.OrderId == wmsOrderTrans.OrderId
        {
            checkFailed(strFmt("@SYS59157", wmsOrderTrans.OrderId));
            if (this.checkFix() == CheckFix::Fix)
            {
                wmsOrderTrans.doDelete();
                this.updateCorrected();
            }
        }
        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public ClassId treeParentClassId()
    {
        return classNum(WMSConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList, packedQuery] = _packedClass;
                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS54731";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@SYS59156";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>