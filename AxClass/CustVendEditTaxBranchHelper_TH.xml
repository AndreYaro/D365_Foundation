<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendEditTaxBranchHelper_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a form controller class for <c>CustVendEditTaxBranchHelper_TH</c> form.
/// </summary>
class CustVendEditTaxBranchHelper_TH
{
    private const str FeatureReference = 'TH-00001';

    TaxTrans                        taxTrans;
    LedgerJournalTransExtensionTH   ledgerJournalTransExtensionTH;
    Common                          originalTransaction;
    LogisticsPostalAddressRecId     invoiceAddressId;
    Common                          invoiceAddressLookupEntity;
    boolean                         isEditInvoiceAddress;
    boolean                         isEditTaxBranch;
    CustVendInvoiceAddressMap_TH    invoiceJourMap;
    CustVendInvoiceAddressMap_TH    invoiceMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInvoiceAddressId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get original invoice address.
    /// </summary>
    /// <returns>
    /// The invoice address RecId.
    /// </returns>
    public LogisticsPostalAddressRecId getInvoiceAddressId()
    {
        return invoiceAddressId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceAddressLookupEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns entity instance of customer or vendor according to invoice account.
    /// </summary>
    /// <returns>
    /// <c>CustTable</c> or <c>VendTable</c> buffer.
    /// </returns>
    public Common getInvoiceAddressLookupEntity()
    {
        return invoiceAddressLookupEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the original transaction record which is related to current <c>TaxTrans</c>.
    /// </summary>
    /// <returns>
    /// The original transaction record.
    /// </returns>
    public Common getOriginalTransaction()
    {
        return originalTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBranchDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get original tax branch details record.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalTransExtensionTH</c> record.
    /// </returns>
    public LedgerJournalTransExtensionTH getTaxBranchDetails()
    {
        return ledgerJournalTransExtensionTH;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        CustInvoiceTrans                custInvoiceTrans;
        CustInvoiceJour                 custInvoiceJour;
        CustInvoiceTable                custInvoiceTable;
        VendInvoiceTrans                vendInvoiceTrans;
        VendInvoiceJour                 vendInvoiceJour;
        VendInvoiceJourExtensionTH      vendInvoiceJourExtensionTH;
        VendInvoiceInfoTable            vendInvoiceInfoTable;
        VendInvoiceInfoTableExtensionTH vendInvoiceInfoTableExtensionTH;

        if (taxTrans.SourceTableId == tableNum(CustInvoiceTrans))
        {
            select forUpdate firstOnly InvoiceAccount, InvoicePostalAddress, InvoiceId, InvoiceDate, numberSequenceGroup from custInvoiceJour
                exists join custInvoiceTrans
                    where custInvoiceTrans.RecId                == taxTrans.SourceRecId
                        && custInvoiceTrans.SalesId             == custInvoiceJour.SalesId
                        && custInvoiceTrans.InvoiceId           == custInvoiceJour.InvoiceId
                        && custInvoiceTrans.InvoiceDate         == custInvoiceJour.InvoiceDate
                        && custInvoiceTrans.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

            originalTransaction         = custInvoiceJour;
            invoiceAddressId            = custInvoiceJour.InvoicePostalAddress;
            invoiceAddressLookupEntity  = CustTable::find(custInvoiceJour.InvoiceAccount);
            isEditInvoiceAddress        = true;

            invoiceJourMap = custInvoiceJour;

            // Free text invoice need update CustInvoiceTable as well.
            select forUpdate firstOnly PostalAddress from custInvoiceTable
                where custInvoiceTable.InvoiceId            == custInvoiceJour.InvoiceId
                    && custInvoiceTable.InvoiceDate         == custInvoiceJour.InvoiceDate
                    && custInvoiceTable.numberSequenceGroup == custInvoiceJour.numberSequenceGroup;

            invoiceMap = custInvoiceTable;
        }
        else if (taxTrans.SourceTableId == tableNum(VendInvoiceTrans))
        {
            select forUpdate firstOnly InvoicePostalAddress from vendInvoiceJourExtensionTH
                join InvoiceAccount, PurchId, InvoiceDate, NumberSequenceGroup, InvoiceId from vendInvoiceJour
                    where vendInvoiceJourExtensionTH.VendInvoiceJour == vendInvoiceJour.RecId
                exists join vendInvoiceTrans
                    where vendInvoiceTrans.RecId                == taxTrans.SourceRecId
                        && vendInvoiceTrans.PurchID             == vendInvoiceJour.PurchId
                        && vendInvoiceTrans.InvoiceId           == vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.InvoiceDate         == vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId   == vendInvoiceJour.InternalInvoiceId;

            invoiceJourMap = vendInvoiceJourExtensionTH;

            select forUpdate firstOnly PostalAddress from VendInvoiceInfoTableExtensionTH
                exists join vendInvoiceInfoTable
                    where vendInvoiceInfoTable.PurchId              == vendInvoiceJour.PurchId
                        && vendInvoiceInfoTable.TransDate           == vendInvoiceJour.InvoiceDate
                        && vendInvoiceInfoTable.NumberSequenceGroup == vendInvoiceJour.NumberSequenceGroup
                        && vendInvoiceInfoTable.Num                 == vendInvoiceJour.InvoiceId
                        && vendInvoiceInfoTable.RecId               == VendInvoiceInfoTableExtensionTH.VendInvoiceInfoTable;

            originalTransaction         = vendInvoiceJour;
            invoiceAddressId            = vendInvoiceJourExtensionTH.InvoicePostalAddress;
            invoiceAddressLookupEntity  = VendTable::find(vendInvoiceJour.InvoiceAccount);
            isEditInvoiceAddress        = true;

            invoiceMap = VendInvoiceInfoTableExtensionTH;
        }
        else if (taxTrans.SourceTableId == tableNum(LedgerJournalTrans))
        {
            select forUpdate firstOnly BranchNumber, TaxRegNum, TaxNatureOfAddress from ledgerJournalTransExtensionTH
                where ledgerJournalTransExtensionTH.LedgerJournalTrans == taxTrans.SourceRecId;

            originalTransaction = LedgerJournalTrans::findRecId(taxTrans.SourceRecId, false);
            isEditTaxBranch     = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will insert original values to history table.
    /// </summary>
    /// <remarks>
    /// Database transaction should be handled by caller.
    /// </remarks>
    private void insertHistory()
    {
        CustVendTaxBranchHistory_TH custVendTaxBranchHistory_TH;

        select forUpdate custVendTaxBranchHistory_TH;

        custVendTaxBranchHistory_TH.InvoiceAddress       = invoiceAddressId;
        custVendTaxBranchHistory_TH.TaxNatureOfAddress   = ledgerJournalTransExtensionTH.TaxNatureOfAddress;
        custVendTaxBranchHistory_TH.BranchNumber         = ledgerJournalTransExtensionTH.BranchNumber;
        custVendTaxBranchHistory_TH.TaxRegNum            = ledgerJournalTransExtensionTH.TaxRegNum;
        custVendTaxBranchHistory_TH.SourceTableId        = originalTransaction.TableId;
        custVendTaxBranchHistory_TH.SourceRecId          = originalTransaction.RecId;
        custVendTaxBranchHistory_TH.Date                 = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custVendTaxBranchHistory_TH.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditInvoiceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>GeneralLedgerEditBranch_TH</c> form is enabled for editting invoice address.
    /// </summary>
    /// <returns>
    /// True if invoice address is enabled to edit.
    /// </returns>
    public boolean isEditInvoiceAddress()
    {
        return isEditInvoiceAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEditTaxBranch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>CustVendTaxBranchHistory_TH</c> form is enabled for editting tax branch.
    /// </summary>
    /// <returns>
    /// True if tax branch is enabled to edit.
    /// </returns>
    public boolean isEditTaxBranch()
    {
        return isEditTaxBranch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTrans</Name>
				<Source><![CDATA[
    public TaxTrans parmTaxTrans(TaxTrans _taxTrans = taxTrans)
    {
        if (!prmisDefault(_taxTrans))
        {
            taxTrans = _taxTrans;
        }

        return taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update new invoice address to original documents and add editing history.
    /// </summary>
    /// <param name="_invoiceAddressId">
    /// New invoice address.
    /// </param>
    /// <remarks>
    /// This method works only when invoice address is enabled to edit.
    /// </remarks>
    public void updateInvoiceAddress(LogisticsPostalAddressRecId _invoiceAddressId)
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        CustInvoiceJour             custInvoiceJour;
        LogisticsLocationEntity     location;
        LogisticsLocationRecId      locationRecId;

        if (this.isEditInvoiceAddress())
        {
            // Check if value is changed or not.
            if (invoiceAddressId == _invoiceAddressId)
            {
                return;
            }

            ttsBegin;

            this.insertHistory();

            // Need update InvocingName for customer inoice journal
            if (invoiceJourMap.TableId == tableNum(custInvoiceJour))
            {
                custInvoiceJour = invoiceJourMap;
                locationRecId = LogisticsPostalAddress::locationRecIdFromAddressRecId(_invoiceAddressId);
                location = LogisticsLocationEntity::constructFromLocationRecId(locationRecId);
                custInvoiceJour.InvoicingName = location.parmLocationDescription();
            }

            invoiceJourMap.InvoicePostalAddress = _invoiceAddressId;
            invoiceJourMap.update();

            if (invoiceMap)
            {
                invoiceMap.InvoicePostalAddress = _invoiceAddressId;
                invoiceMap.update();
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTaxBranch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update tax branch to target source document.
    /// </summary>
    /// <param name="_taxNature">
    /// Address type of branch.
    /// </param>
    /// <param name="_branchNumber">
    /// Tax branch number.
    /// </param>
    /// <param name="_taxRegistrationNum">
    /// Tax registration number.
    /// </param>
    /// <remarks>
    /// This method works only when tax branch is enabled to edit.
    /// </remarks>
    public void updateTaxBranch(TaxNatureOfAddress_TH _taxNature, BranchNumber_TH _branchNumber, CompanyCoRegNum _taxRegistrationNum)
    {
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        if (this.isEditTaxBranch())
        {
            // Check if value is changed or not.
            if (ledgerJournalTransExtensionTH.TaxNatureOfAddress == _taxNature
                && ledgerJournalTransExtensionTH.BranchNumber == _branchNumber
                && ledgerJournalTransExtensionTH.TaxRegNum == _taxRegistrationNum)
            {
                return;
            }

            ttsBegin;

            this.insertHistory();

            ledgerJournalTransExtensionTH.TaxNatureOfAddress    = _taxNature;
            ledgerJournalTransExtensionTH.BranchNumber          = _branchNumber;
            ledgerJournalTransExtensionTH.TaxRegNum             = _taxRegistrationNum;
            ledgerJournalTransExtensionTH.update();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructor to create <c>CustVendEditTaxBranchHelper_TH</c> instance.
    /// </summary>
    /// <param name="_taxTrans">
    /// Selected <c>TaxTrans</c> instance.
    /// </param>
    /// <returns>
    /// New created <c>CustVendEditTaxBranchHelper_TH</c> instance.
    /// </returns>
    public static CustVendEditTaxBranchHelper_TH newFromTaxTrans(TaxTrans _taxTrans)
    {
        CustVendEditTaxBranchHelper_TH custVendEditTaxBranchHelper = new CustVendEditTaxBranchHelper_TH();

        custVendEditTaxBranchHelper.parmTaxTrans(_taxTrans);
        custVendEditTaxBranchHelper.init();

        return custVendEditTaxBranchHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>