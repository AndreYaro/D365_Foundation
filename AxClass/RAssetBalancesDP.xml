<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RAssetBalancesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetBalanceDP</c> class for <c>RAssetBalance</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAsset)),
    SRSReportParameterAttribute(classstr(RAssetSRSReportContract))
]
class RAssetBalancesDP extends SRSReportDataProviderBase
{
        RAssetBalancesTMP    RAssetBalancesTMP;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getRAssetBalancesTMP</Name>
				<Source><![CDATA[
        /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// The data for the report in the <c>RAssetBalancesTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(RAssetBalancesTMP))
    ]
    public RAssetBalancesTMP getRAssetBalancesTMP()
    {
        return RAssetBalancesTMP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalancesTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>rAssetBalancesTmp</c> temporary table.
    /// </summary>
    /// <param name="_RAssetStandards">
    /// Passes <c>RAssetStandards</c> table object.    .
    /// </param>
    /// <param name="_RAssetSum">
    /// Holds <c>RAssetSumCalc</c> class to which value is set.    .
    /// </param>
    private void insertBalancesTmp(RAssetStandards _RAssetStandards, RAssetSumCalc _RAssetSum)
    {
        RAssetTable     rAssetTable = RAssetTable::find(_rAssetStandards.AssetId);
        rAssetBalancesTmp.clear();
        rAssetBalancesTmp.AssetMainGroupId       = rAssetTable.AssetGroup;
        rAssetBalancesTmp.AssetGroupId           = _RAssetStandards.AssetGroup;
        rAssetBalancesTmp.AssetSubGroupId        = _RAssetStandards.SubGroupId;
        rAssetBalancesTmp.AssetId                = _RAssetStandards.AssetId;
        rAssetBalancesTMP.CurrencyCode           = _RAssetStandards.CurrencyCode;
        rAssetBalancesTMP.AcquisitionValue       = _RAssetSum.acquisitionValue();
        rAssetBalancesTMP.AcquisitionAdjValue    = _RAssetSum.acquisitionAdjValue() - _RAssetSum.takeDownAcqAdjValue();
        rAssetBalancesTMP.RevaluationValue       = _RAssetSum.revaluationValue();
        rAssetBalancesTMP.DeprecationValue       = _RAssetSum.depreciationValue();
        rAssetBalancesTMP.DeprecationAdjValue    = _RAssetSum.depreciationAdjValue() - _RAssetSum.takeDownDeprAdjValue();
        rAssetBalancesTMP.PartialTakeDownValue   = _RAssetSum.takeDownAcqAdjValue() - _RAssetSum.takeDownDeprAdjValue();
        rAssetBalancesTMP.DisposalSaleValue      = _RAssetSum.disposalSaleValue();
        rAssetBalancesTMP.DisposalScrapValue     = _RAssetSum.disposalScrapValue();
        rAssetBalancesTMP.DisposalDisposedValue  = _RAssetSum.disposalDisposedValue();
        rAssetBalancesTMP.NetBookValue           = _RAssetSum.netBookValue();
        rAssetBalancesTMP.AssetGroupTypes        = RAssetMainGroup::find(rAssetTable.AssetGroup).GroupType;
        rAssetBalancesTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        QueryBuildDataSource    qbs;
        RAssetSumCalc           rAssetSum;
        TransDate               rAssetTransDate;
        NoYes                   zeroBookValue;
        RAssetStandardId        rAssetStandardId;
        RAssetStandards         rAssetStandards;
        RAssetAmount            netBookValue;
        RAssetSRSReportContract contract = this.parmDataContract() as RAssetSRSReportContract;

        RAssetTransDate     = contract.parmRAssetTransDate();
        RAssetStandardId    = contract.parmRAssetStandardId();
        zeroBookValue       = contract.parmZeroBookValue();
        qr  = new QueryRun(this.parmQuery());
        qbs = qr.query().dataSourceTable(tableNum(RAssetStandards));
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetStandards, AssetStandardId)).value(rAssetStandardId);
        while(qr.next())
        {
            RAssetStandards = qr.get(tableNum(RAssetStandards));
            netBookValue = 0;
            rAssetSum = RAssetSumCalc_Trans::newAssetPeriod(rAssetStandards.AssetId, rAssetStandardId, rAssetTransDate);
            netBookValue = rassetSum.netBookValue();
            if(!zeroBookValue ||
               (zeroBookValue && (netBookValue > RAssetStandardTable::find(rAssetStandardId).AssetRound)))
            {
                this.insertBalancesTmp(rAssetStandards, rAssetSum);
            }

        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>