<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFDIWithholdingJourCreator_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CFDIWithholdingJourCreator_MX</c> class generate CFDI withholding journal.
/// </summary>
public class CFDIWithholdingJourCreator_MX
{
    private TransDate fromDate;
    private TransDate toDate;
    private VendAccount vendAccount;
    private CFDIWithholdingTransTmp_MX withholdingTransTmp;
    private Map withholdingJournalRecIdMap;
    private FiscalCalendarRecId fiscalCalendar;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregateDataForJournal</Name>
				<Source><![CDATA[
    private void aggregateDataForJournal()
    {
        CFDIWithholdingTransTmp_MX withholdingTransInsert;

        withholdingTransInsert.linkPhysicalTableInstance(withholdingTransTmp);

        insert_recordset withholdingTransInsert (TaxBaseAmount, TaxWithholdingAmount, TaxExemptAmount, WithholdingTypeCode)
            select maxof(TaxBaseAmount), sum(TaxWithholdingAmount), sum(TaxExemptAmount), WithholdingTypeCode from withholdingTransTmp
                group by WithholdingTypeCode, SourceRecId, SourceTableId
                where withholdingTransTmp.TaxBaseAmount >= 0
                   && withholdingTransTmp.SourceRecId !=0;

        insert_recordset withholdingTransInsert (TaxBaseAmount, TaxWithholdingAmount, TaxExemptAmount, WithholdingTypeCode)
            select minOf(TaxBaseAmount), sum(TaxWithholdingAmount), sum(TaxExemptAmount), WithholdingTypeCode from withholdingTransTmp
                group by WithholdingTypeCode, SourceRecId, SourceTableId
                where withholdingTransTmp.TaxBaseAmount < 0
                   && withholdingTransTmp.SourceRecId !=0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectComplementData</Name>
				<Source><![CDATA[
    private void collectComplementData(CFDIWithholdingTypeCode_MX _withholdingTypeCode, CFDIWithholdingJourRecId_MX _withholdingJournalRecId)
    {
        CFDIWithholdingComplementType_MX complementType = CFDIWithholdingType_MX::find(_withholdingTypeCode).ComplementType;

        switch (complementType)
        {
            case CFDIWithholdingComplementType_MX::Interests:
                this.collectComplementInterest(_withholdingTypeCode, _withholdingJournalRecId);
                break;
            
            case CFDIWithholdingComplementType_MX::ForeignResidentPaym:
                this.collectComplementPaymBeneficiary(_withholdingTypeCode, _withholdingJournalRecId);
                break;
            
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectComplementInterest</Name>
				<Source><![CDATA[
    private void collectComplementInterest(CFDIWithholdingTypeCode_MX _withholdingTypeCode, CFDIWithholdingJourRecId_MX _withholdingJournalRecId)
    {
        CFDIWithholdingComplInterest_MX complementInterest;
        LedgerJournalTrans_W ledgerJournalTrans_W;

        insert_recordset complementInterest(
            WithholdingJourRecId,
            FinancialSystem,
            InterestBelongsDerivedFinOp,
            InterestCashedInTheCurrentPeriod,
            InterestLossAmount,
            InterestNominalAmount,
            InterestRealAmount)
        select
            _withholdingJournalRecId,
            CFDIFinancialSystem_MX,
            CFDIInterestBelongsDerivedFinOp_MX,
            CFDIInterestCashedInTheCurrentPeriod_MX,
            sum(CFDIInterestLossAmount_MX),
            sum(CFDIInterestNominalAmount_MX),
            sum(CFDIInterestRealAmount_MX)
            from ledgerJournalTrans_W
            group by CFDIFinancialSystem_MX, CFDIInterestBelongsDerivedFinOp_MX, CFDIInterestCashedInTheCurrentPeriod_MX
            exists join withholdingTransTmp
                where ledgerJournalTrans_W.LedgerJournalTrans == withholdingTransTmp.SourceRecId
                    && withholdingTransTmp.SourceTableId == tableNum(LedgerJournalTrans)
                    && withholdingTransTmp.WithholdingTypeCode == _withholdingTypeCode;

        VendInvoiceTrans_W vendInvoiceTrans_W;

        while select sum(CFDIInterestLossAmount_MX), sum(CFDIInterestNominalAmount_MX), sum(CFDIInterestRealAmount_MX)
            from vendInvoiceTrans_W
            group by CFDIFinancialSystem_MX, CFDIInterestBelongsDerivedFinOp_MX, CFDIInterestCashedInTheCurrentPeriod_MX
            exists join withholdingTransTmp
                where vendInvoiceTrans_W.VendInvoiceTrans  == withholdingTransTmp.SourceRecId
                    && withholdingTransTmp.SourceTableId == tableNum(VendInvoiceTrans)
                    && withholdingTransTmp.WithholdingTypeCode == _withholdingTypeCode
        {
            select firstOnly forUpdate complementInterest
                where complementInterest.WithholdingJourRecId == _withholdingJournalRecId
                    && complementInterest.FinancialSystem == vendInvoiceTrans_W.CFDIFinancialSystem_MX
                    && complementInterest.InterestBelongsDerivedFinOp == vendInvoiceTrans_W.CFDIInterestBelongsDerivedFinOp_MX
                    && complementInterest.InterestCashedInTheCurrentPeriod == vendInvoiceTrans_W.CFDIInterestCashedInTheCurrentPeriod_MX;

            if (!complementInterest.RecId)
            {
                complementInterest.clear();
                complementInterest.initValue();
                complementInterest.WithholdingJourRecId = _withholdingJournalRecId;
                complementInterest.FinancialSystem = vendInvoiceTrans_W.CFDIFinancialSystem_MX;
                complementInterest.InterestBelongsDerivedFinOp = vendInvoiceTrans_W.CFDIInterestBelongsDerivedFinOp_MX;
                complementInterest.InterestCashedInTheCurrentPeriod = vendInvoiceTrans_W.CFDIInterestCashedInTheCurrentPeriod_MX;
            }

            complementInterest.InterestLossAmount += vendInvoiceTrans_W.CFDIInterestLossAmount_MX;
            complementInterest.InterestNominalAmount += vendInvoiceTrans_W.CFDIInterestNominalAmount_MX;
            complementInterest.InterestRealAmount += vendInvoiceTrans_W.CFDIInterestRealAmount_MX;
            complementInterest.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectComplementPaymBeneficiary</Name>
				<Source><![CDATA[
    private void collectComplementPaymBeneficiary(CFDIWithholdingTypeCode_MX _withholdingTypeCode, CFDIWithholdingJourRecId_MX _withholdingJournalRecId)
    {
        void insertComplementPaymBeneficiary(CFDIBeneficiaryRetains_MX _beneficiaryRetains)
        {
            CFDIWithholdingComplPaymBeneficiary_MX complementPaymBeneficiary;
            LedgerJournalTrans_W ledgerJournalTrans_W;
            LedgerJournalTrans ledgerJournalTrans;
            VendInvoiceTrans vendInvoiceTrans;

            complementPaymBeneficiary.clear();

            select firstOnly Txt, RecId from ledgerJournalTrans
                where ledgerJournalTrans.Txt
                exists join ledgerJournalTrans_W
                where ledgerJournalTrans_W.LedgerJournalTrans == ledgerJournalTrans.RecId
                    && ledgerJournalTrans_W.CFDIBeneficiaryRetains_MX == _beneficiaryRetains
                exists join withholdingTransTmp
                    where ledgerJournalTrans_W.LedgerJournalTrans == withholdingTransTmp.SourceRecId
                        && withholdingTransTmp.SourceTableId == tableNum(LedgerJournalTrans)
                        && withholdingTransTmp.WithholdingTypeCode == _withholdingTypeCode;

            if (ledgerJournalTrans.Txt)
            {
                complementPaymBeneficiary.Description = ledgerJournalTrans.Txt;
            }
            else
            {
                VendInvoiceTrans_W vendInvoiceTrans_W;

                select firstOnly RecId from ledgerJournalTrans
                    exists join ledgerJournalTrans_W
                    where ledgerJournalTrans_W.LedgerJournalTrans == ledgerJournalTrans.RecId
                        && ledgerJournalTrans_W.CFDIBeneficiaryRetains_MX == _beneficiaryRetains
                    exists join withholdingTransTmp
                        where ledgerJournalTrans_W.LedgerJournalTrans == withholdingTransTmp.SourceRecId
                            && withholdingTransTmp.SourceTableId == tableNum(LedgerJournalTrans)
                            && withholdingTransTmp.WithholdingTypeCode == _withholdingTypeCode;

                select firstOnly Name, Description, RecId from vendInvoiceTrans
                    where (vendInvoiceTrans.Description || vendInvoiceTrans.Name)
                    exists join vendInvoiceTrans_W
                    where vendInvoiceTrans_W.VendInvoiceTrans == vendInvoiceTrans.RecId
                        && vendInvoiceTrans_W.CFDIBeneficiaryRetains_MX == _beneficiaryRetains
                    exists join withholdingTransTmp
                        where vendInvoiceTrans_W.VendInvoiceTrans == withholdingTransTmp.SourceRecId
                            && withholdingTransTmp.SourceTableId == tableNum(VendInvoiceTrans)
                            && withholdingTransTmp.WithholdingTypeCode == _withholdingTypeCode;

                if (vendInvoiceTrans.RecId)
                {
                    complementPaymBeneficiary.Description = vendInvoiceTrans.Description ? vendInvoiceTrans.Description : vendInvoiceTrans.Name;
                }
                else
                {
                    select firstOnly RecId from vendInvoiceTrans
                        exists join vendInvoiceTrans_W
                        where vendInvoiceTrans_W.VendInvoiceTrans == vendInvoiceTrans.RecId
                            && vendInvoiceTrans_W.CFDIBeneficiaryRetains_MX == _beneficiaryRetains
                        exists join withholdingTransTmp
                            where vendInvoiceTrans_W.VendInvoiceTrans == withholdingTransTmp.SourceRecId
                                && withholdingTransTmp.SourceTableId == tableNum(VendInvoiceTrans)
                                && withholdingTransTmp.WithholdingTypeCode == _withholdingTypeCode;
                }
            }

            if (vendInvoiceTrans.RecId || ledgerJournalTrans.RecId)
            {
                if (!complementPaymBeneficiary.Description)
                {
                    complementPaymBeneficiary.Description = CFDIWithholdingType_MX::find(_withholdingTypeCode).Description;
                }

                complementPaymBeneficiary.WithholdingJourRecId = _withholdingJournalRecId;
                complementPaymBeneficiary.BeneficiaryRetains = _beneficiaryRetains;
                complementPaymBeneficiary.insert();
            }
        }

        insertComplementPaymBeneficiary(NoYes::No);
        insertComplementPaymBeneficiary(NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectNotWithholdingTax</Name>
				<Source><![CDATA[
    private void collectNotWithholdingTax()
    {
        CFDIWithholdingTransTmp_MX withholdingTransGrp;
        CFDIWithholdingTransTmp_MX withholdingTransQuery;
        CFDIWithholdingTransTmp_MX withholdingTransInsert;

        withholdingTransGrp.linkPhysicalTableInstance(withholdingTransTmp);
        withholdingTransQuery.linkPhysicalTableInstance(withholdingTransTmp);

        while select WithholdingTypeCode from withholdingTransGrp
            group By WithholdingTypeCode
        {
            CFDIWithholdingTypeCode_MX withholdingTypeCode_MX = withholdingTransGrp.WithholdingTypeCode;
            TaxTrans taxTrans;

            select sum(TaxAmount) from taxTrans
                exists join withholdingTransTmp
                    where withholdingTransTmp.SourceRecId == taxTrans.SourceRecId
                        && withholdingTransTmp.SourceTableId == taxTrans.SourceTableId
                        && withholdingTransTmp.withholdingTypeCode == withholdingTypeCode_MX
                notexists join withholdingTransQuery
                    where withholdingTransQuery.TaxTrans == taxTrans.RecId;

            if (taxTrans.TaxAmount)
            {
                withholdingTransInsert.TaxAmount = taxTrans.TaxAmount;
                withholdingTransInsert.WithholdingTypeCode = withholdingTypeCode_MX;
                withholdingTransInsert.insert();
            }
        }

        insert_recordset withholdingTransTmp(TaxAmount, WithholdingTypeCode)
            select TaxAmount, WithholdingTypeCode from withholdingTransInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create()
    {
        ttsBegin;

        this.processLedgerJournalTrans();
        this.processVendInvoiceTrans();
        this.processMarkupTrans();

        select firstOnly RecId from withholdingTransTmp;

        if (withholdingTransTmp)
        {
            this.collectNotWithholdingTax();
            this.fillWithholdingJournals();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWithholdingJour</Name>
				<Source><![CDATA[
    private CFDIWithholdingJour_MX createWithholdingJour(CFDIWithholdingTypeCode_MX _withholdingType)
    {
        CFDIWithholdingJour_MX withholdingJour;

        withholdingJour.AccountNum  = vendAccount;
        withholdingJour.PeriodStartDate = fromDate;
        withholdingJour.PeriodEndDate = toDate;
        withholdingJour.WithholdingTypeCode = _withholdingType;
        withholdingJour.WithholdingJournalID = NumberSeq::newGetNum(EInvoiceCFDIParameters_MX::numRefCFDIWithholdingJournalID()).num();
        withholdingJour.WithholdingJournalDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        withholdingJour.insert();

        return withholdingJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillWithholdingJournals</Name>
				<Source><![CDATA[
    private void fillWithholdingJournals()
    {
        CFDIWithholdingTransTmp_MX withholdingTransTmpGrp;

        this.aggregateDataForJournal();

        withholdingTransTmpGrp.linkPhysicalTableInstance(withholdingTransTmp);

        while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxWithholdingAmount), sum(TaxExemptAmount) from withholdingTransTmpGrp
            group by WithholdingTypeCode
            where withholdingTransTmpGrp.TaxTrans == 0
        {
            CFDIWithholdingJour_MX withholdingJour = this.createWithholdingJour(withholdingTransTmpGrp.WithholdingTypeCode);
            CFDIWithholdingJourRecId_MX withholdingJournalRecId = withholdingJour.RecId;

            withholdingJournalRecIdMap.insert(withholdingTransTmpGrp.WithholdingTypeCode, withholdingJournalRecId);
            withholdingJour.OperationAmount = withholdingTransTmpGrp.TaxBaseAmount + withholdingTransTmpGrp.TaxWithholdingAmount + withholdingTransTmpGrp.TaxAmount;
            withholdingJour.TaxBaseAmount = withholdingTransTmpGrp.TaxBaseAmount;
            withholdingJour.WithholdingAmount = withholdingTransTmpGrp.TaxWithholdingAmount;
            withholdingJour.ExemptAmount = withholdingTransTmpGrp.TaxExemptAmount;
            withholdingJour.update();

            CFDIWithholdingTrans_MX withholdingTrans;

            insert_recordset withholdingTrans(CFDIWithholdingJour, TaxTrans)
                select withholdingJournalRecId, TaxTrans from withholdingTransTmp
                    where withholdingTransTmp.WithholdingTypeCode == withholdingJour.WithholdingTypeCode
                        && withholdingTransTmp.TaxTrans;

            this.collectComplementData(withholdingTransTmpGrp.WithholdingTypeCode, withholdingJournalRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListMessageToBeSend</Name>
				<Source><![CDATA[
    protected EInvoiceJour_MX getListMessageToBeSend(EInvoiceCFDIMessageType_MX _messageType)
    {
        EInvoiceJour_MX eInvoiceJour;

        select eInvoiceJour
            where eInvoiceJour.CFDIMessageStatus == EInvoiceCFDIMessageStatus_MX::Waiting
                && eInvoiceJour.CFDIMessageType == _messageType
                && eInvoiceJour.CFDIDocType == CFDIDocType_MX::Withholding;

        return eInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWithholdingJournalRecIdMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// The map that contains Witholding type codes and record ID's of created <c>CFDIWithholdingJour_MX</c> journals.
    /// </summary>
    /// <returns>
    /// The map Witholding type codes and record ID's of created <c>CFDIWithholdingJour_MX</c> journals.
    /// </returns>
    public Map getWithholdingJournalRecIdMap()
    {
        return withholdingJournalRecIdMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        withholdingJournalRecIdMap = new Map(Types::String, Types::Int64);
        fiscalCalendar = Ledger::fiscalCalendar(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void processLedgerJournalTrans()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        LedgerJournalTrans_W ledgerJournalTrans_W;
        LedgerJournalTrans ledgerJournalTrans;
        DimensionAttributeValueCombination ledgerDimension;
        CFDIWithholdingTrans_MX withholdingTrans;

        insert_recordset withholdingTransTmp(TaxTrans,
                                             TaxBaseAmount,
                                             TaxWithholdingAmount,
                                             TaxExemptAmount,
                                             SourceTableId,
                                             WithholdingTypeCode,
                                             SourceRecId,
                                             BeneficiaryRetains,
                                             FinancialSystem,
                                             InterestBelongsDerivedFinOp,
                                             InterestCashedInTheCurrentPeriod,
                                             InterestLossAmount,
                                             InterestNominalAmount,
                                             InterestRealAmount)
            select RecId, TaxBaseAmount, TaxAmount, TaxInCostPriceMST, SourceTableId from taxTrans
                where taxTrans.TransDate >= fromDate
                     && taxTrans.TransDate <= toDate
                     && taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
            join WithholdingTypeCode_MX, LedgerJournalTrans, CFDIBeneficiaryRetains_MX, CFDIFinancialSystem_MX,
                 CFDIInterestBelongsDerivedFinOp_MX, CFDIInterestCashedInTheCurrentPeriod_MX,
                 CFDIInterestLossAmount_MX, CFDIInterestNominalAmount_MX, CFDIInterestRealAmount_MX from ledgerJournalTrans_W
                where ledgerJournalTrans_W.LedgerJournalTrans == taxTrans.SourceRecId
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTrans_W.LedgerJournalTrans
                   && ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                   && taxTable.NegativeTax == NoYes::Yes
                   && taxTable.TaxType_MX
            exists join ledgerDimension
                where ledgerJournalTrans.LedgerDimension == ledgerDimension.RecId
                    && ledgerDimension.DisplayValue == vendAccount
            notExists join withholdingTrans
                where   withholdingTrans.TaxTrans == taxTrans.RecId;

        insert_recordset withholdingTransTmp(TaxTrans,
                                             TaxBaseAmount,
                                             TaxWithholdingAmount,
                                             TaxExemptAmount,
                                             SourceTableId,
                                             WithholdingTypeCode,
                                             SourceRecId,
                                             BeneficiaryRetains,
                                             FinancialSystem,
                                             InterestBelongsDerivedFinOp,
                                             InterestCashedInTheCurrentPeriod,
                                             InterestLossAmount,
                                             InterestNominalAmount,
                                             InterestRealAmount)
            select RecId, TaxBaseAmount, TaxAmount, TaxInCostPriceMST, SourceTableId from taxTrans
                where   taxTrans.TransDate >= fromDate
                     && taxTrans.TransDate <= toDate
                     && taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
            join WithholdingTypeCode_MX, LedgerJournalTrans, CFDIBeneficiaryRetains_MX, CFDIFinancialSystem_MX,
                 CFDIInterestBelongsDerivedFinOp_MX, CFDIInterestCashedInTheCurrentPeriod_MX,
                 CFDIInterestLossAmount_MX, CFDIInterestNominalAmount_MX, CFDIInterestRealAmount_MX from ledgerJournalTrans_W
                where ledgerJournalTrans_W.LedgerJournalTrans == taxTrans.SourceRecId
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTrans_W.LedgerJournalTrans
                   && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                   && taxTable.NegativeTax == NoYes::Yes
                   && taxTable.TaxType_MX
            exists join ledgerDimension
                where ledgerJournalTrans.OffsetLedgerDimension == ledgerDimension.RecId
                   && ledgerDimension.DisplayValue == vendAccount
            notExists join withholdingTrans
                where withholdingTrans.TaxTrans == taxTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMarkupTrans</Name>
				<Source><![CDATA[
    private void processMarkupTrans()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoiceJour vendInvoiceJour;
        CFDIWithholdingTrans_MX withholdingTrans;
        MarkupTrans markupTrans;

        insert_recordset withholdingTransTmp(TaxTrans,
                                             TaxBaseAmount,
                                             TaxWithholdingAmount,
                                             TaxExemptAmount,
                                             SourceTableId,
                                             SourceRecId,
                                             WithholdingTypeCode)
        select RecId, TaxBaseAmount, TaxAmount, TaxInCostPriceMST, SourceTableId, SourceRecId from taxTrans
            where taxTrans.TransDate >= fromDate
                && taxTrans.TransDate <= toDate
            join WithholdingTypeCode_MX from markupTrans
                where markupTrans.RecId == taxTrans.SourceRecId
                   && markupTrans.TableId == taxTrans.SourceTableId
                   && markupTrans.ModuleType == MarkupModuleType::Vend
                   && markupTrans.WithholdingTypeCode_MX
                   && !markupTrans.IsDeleted
            exists join vendInvoiceTrans
                where vendInvoiceTrans.RecId == markupTrans.TransRecId
                   && vendInvoiceTrans.TableId == markupTrans.TransTableId
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                   && taxTable.NegativeTax == NoYes::Yes
                   && taxTable.TaxType_MX
            exists join vendInvoiceJour
                where vendInvoiceJour.InvoiceId  == vendInvoiceTrans.invoiceId
                   && vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate
                   && vendInvoiceJour.PurchId == vendInvoiceTrans.purchId
                   && vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.numberSequenceGroup
                   && vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.internalInvoiceId
                   && vendInvoiceJour.InvoiceAccount == vendAccount
            notExists join withholdingTrans
                where withholdingTrans.TaxTrans == taxTrans.RecId;

        insert_recordset withholdingTransTmp(TaxTrans,
                                             TaxBaseAmount,
                                             TaxWithholdingAmount,
                                             TaxExemptAmount,
                                             SourceTableId,
                                             SourceRecId,
                                             WithholdingTypeCode)
        select RecId, TaxBaseAmount, TaxAmount, TaxInCostPriceMST, SourceTableId, SourceRecId from taxTrans
            where taxTrans.TransDate >= fromDate
                && taxTrans.TransDate <= toDate
            join WithholdingTypeCode_MX from markupTrans
                where markupTrans.RecId == taxTrans.SourceRecId
                   && markupTrans.TableId == taxTrans.SourceTableId
                   && markupTrans.ModuleType == MarkupModuleType::Vend
                   && markupTrans.WithholdingTypeCode_MX
                   && !markupTrans.IsDeleted
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                   && taxTable.NegativeTax == NoYes::Yes
                   && taxTable.TaxType_MX
            exists join vendInvoiceJour
                where vendInvoiceJour.RecId == markupTrans.TransRecId
                   && vendInvoiceJour.TableId == markupTrans.TransTableId
                   && vendInvoiceJour.InvoiceAccount == vendAccount
            notExists join withholdingTrans
                where withholdingTrans.TaxTrans == taxTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processVendInvoiceTrans</Name>
				<Source><![CDATA[
    private void processVendInvoiceTrans()
    {
        TaxTrans taxTrans;
        TaxTable taxTable;
        VendInvoiceTrans vendInvoiceTrans;
        VendInvoiceTrans_W vendInvoiceTrans_W;
        VendInvoiceJour vendInvoiceJour;
        CFDIWithholdingTrans_MX withholdingTrans;
        TableId vendInvoiceTransTableId = tableNum(VendInvoiceTrans);
    
        insert_recordset withholdingTransTmp(TaxTrans,
                                             TaxBaseAmount,
                                             TaxWithholdingAmount,
                                             TaxExemptAmount,
                                             SourceTableId,
                                             SourceRecId,
                                             WithholdingTypeCode)
        select RecId, TaxBaseAmount, TaxAmount, TaxInCostPriceMST from taxTrans
            where taxTrans.TransDate >= fromDate
                && taxTrans.TransDate <= toDate
            join @vendInvoiceTransTableId from vendInvoiceTrans
                where vendInvoiceTrans.RecId == taxTrans.SourceRecId
                   && vendInvoiceTrans.TableId == taxTrans.SourceTableId
            join VendInvoiceTrans, WithholdingTypeCode_MX from vendInvoiceTrans_W
                where vendInvoiceTrans_W.VendInvoiceTrans == vendInvoiceTrans.RecId
                   && vendInvoiceTrans_W.WithholdingTypeCode_MX
            exists join taxTable
                where taxTable.TaxCode == taxTrans.TaxCode
                   && taxTable.NegativeTax == NoYes::Yes
                   && taxTable.TaxType_MX
            exists join vendInvoiceJour
                where vendInvoiceJour.InvoiceId == vendInvoiceTrans.invoiceId
                   && vendInvoiceJour.InvoiceDate == vendInvoiceTrans.InvoiceDate
                   && vendInvoiceJour.PurchId == vendInvoiceTrans.purchId
                   && vendInvoiceJour.NumberSequenceGroup == vendInvoiceTrans.numberSequenceGroup
                   && vendInvoiceJour.InternalInvoiceId == vendInvoiceTrans.internalInvoiceId
                   && vendInvoiceJour.InvoiceAccount == vendAccount
            notExists join withholdingTrans
                where   withholdingTrans.TaxTrans == taxTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static CFDIWithholdingJourCreator_MX construct()
    {
        return new CFDIWithholdingJourCreator_MX();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPeriodAndVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CFDIWithholdingJourCreator_MX</c> based on the specified parameters.
    /// </summary>
    /// <param name="_fromDate">
    /// The start date of period.
    /// </param>
    /// <param name="_toDate">
    /// The finish date of the period.
    /// </param>
    /// <param name="_vendAcc">
    /// The Vendor account.
    /// </param>
    /// <returns>
    /// A new instance of the <c>CFDIWithholdingJourCreator_MX</c> class.
    /// </returns>
    public static CFDIWithholdingJourCreator_MX newFromPeriodAndVendor(
        FromDate _fromDate,
        ToDate _toDate,
        VendAccount _vendAcc)
    {
        CFDIWithholdingJourCreator_MX withholdingJourCreator_MX = CFDIWithholdingJourCreator_MX::construct();
        withholdingJourCreator_MX.parmFromDate(_fromDate);
        withholdingJourCreator_MX.parmToDate(_toDate);
        withholdingJourCreator_MX.parmVendAccount(_vendAcc);

        return withholdingJourCreator_MX;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>