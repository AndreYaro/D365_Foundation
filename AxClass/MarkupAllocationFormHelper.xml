<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MarkupAllocationFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>MarkupAllocationFormHelper</c> class contains the form logic that is shared between the
///    <c>MarkupAllocation</c> and <c>MarkupAllocation_VendInvoiceTrans</c> forms.
/// </summary>
public class MarkupAllocationFormHelper
{
    boolean hasInitialGridLoadFinished;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>markRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays a progress bar control if more than 2500 lines are being loaded, and adds the traversed
    ///    records into the <c>selectedRecIds</c> set.
    /// </summary>
    /// <param name="_formDataSource">
    ///    The form data source of the caller form.
    /// </param>
    /// <param name="_markupAllocationSelectionManager">
    ///    The <c>MarkupAllocationSelectionManager</c> class specified in the caller form.
    /// </param>
    /// <returns>
    ///    The <c>MarkupAllocationSelectionManager</c> class that was processed by this method.
    /// </returns>
    public MarkupAllocationSelectionManager markRecords(FormDataSource _formDataSource, MarkupAllocationSelectionManager _markupAllocationSelectionManager)
    {
        Common  tableBuffer;
        boolean dataLoaded;

        switch (_formDataSource.name())
        {
            case tableStr(PurchLine):
                tableBuffer = tableBuffer as PurchLine;
                break;
            case tableStr(SalesLine):
                tableBuffer = tableBuffer as SalesLine;
                break;
            case tableStr(VendInvoiceInfoLine):
                tableBuffer = tableBuffer as VendInvoiceInfoLine;
                break;
            case tableStr(VendInvoiceTrans):
                tablebuffer = tableBuffer as VendInvoiceTrans;
                break;
        }

        for (tableBuffer = _formDataSource.getFirst(); tableBuffer; tableBuffer = _formDataSource.getNext())
        {
            if (!hasInitialGridLoadFinished)
            {
                _markupAllocationSelectionManager.insertRemoveSelectedRecIdsSet(tableBuffer.RecId, AddRemove::Add);
                dataLoaded = true;
            }
        }

        if (!dataLoaded)
        {
            return _markupAllocationSelectionManager;
        }

        if (!hasInitialGridLoadFinished)
        {
            _markupAllocationSelectionManager.clearAndPopulateFullSet();
        }

        hasInitialGridLoadFinished = true;

        return _markupAllocationSelectionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasInitialGridLoadFinished</Name>
				<Source><![CDATA[
    public boolean parmHasInitialGridLoadFinished(boolean _hasInitialGridLoadFinished = hasInitialGridLoadFinished)
    {
        hasInitialGridLoadFinished = _hasInitialGridLoadFinished;
        return hasInitialGridLoadFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates the state of <c>useSpecificLines</c> check box control specified in the caller form.
    /// </summary>
    /// <param name="_stateOfControl">
    ///    The state of the <c>useSpecificLines</c> check box control.
    /// </param>
    /// <returns>
    ///    true if the <c>useSpecificLines</c> check box control has been checked; otherwise, false.
    /// </returns>
    public boolean updateDesign(int _stateOfControl)
    {
        return _stateOfControl == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MarkupAllocationFormHelper construct()
    {
        return new MarkupAllocationFormHelper();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>