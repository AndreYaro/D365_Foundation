<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax_ParmTransBOE_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchCalcTax_ParmTransBOE_IN</c> is the class for Sales Tax on Bill of Entry
/// </summary>
class PurchCalcTax_ParmTransBOE_IN extends PurchCalcTax_ParmTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSingleLineAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a transaction supports a single line adjustment.
    /// </summary>
    /// <returns>
    /// true if a single line adjustment is supported; otherwise, false.
    /// </returns>
    public boolean allowSingleLineAdjustment()
    {
        boolean allowSingleLineAdjustment;

        // Line level sales tax adjustments only applies when the tax calculation uses sales tax adjustments.
        Debug::assert(this.useSalesTaxAdjustments());

        if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
        {
            allowSingleLineAdjustment = true;
        }

        return allowSingleLineAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the description of a tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The description of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailDescription getTaxAdjustmentDetailDescription(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailDescription  taxAdjustmentDetailDescription;
        PurchLine                       localPurchLine;
        InventTable                     localInventTable;
        EcoResCategoryTranslation       localEcoResCategoryTranslation;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(PurchLine):
                    localPurchLine   = PurchLine::findRecId(_sourceRecId);

                    if (localPurchLine && localPurchLine.ItemId)
                    {
                        localInventTable = InventTable::find(localPurchLine.ItemId);

                        if (localInventTable)
                        {
                            taxAdjustmentDetailDescription = localInventTable.itemDescriptionOrName();
                        }
                    }
                    else if (localPurchLine && localPurchLine.ProcurementCategory)
                    {
                        localEcoResCategoryTranslation = EcoResCategoryTranslation::find(localPurchLine.ProcurementCategory, CompanyInfo::languageId());

                        if (localEcoResCategoryTranslation)
                        {
                            taxAdjustmentDetailDescription = localEcoResCategoryTranslation.Description;
                        }
                    }

                    break;

                default:
                    break;
            }
        }
        return taxAdjustmentDetailDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the reference of a tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The reference of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailReference getTaxAdjustmentDetailReference(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailReference    taxAdjustmentDetailReference;
        PurchLine                       localPurchLine;
        EcoResCategory                  localEcoResCategory;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(PurchLine):
                    localPurchLine = PurchLine::findRecId(_sourceRecId);

                    if (localPurchLine && localPurchLine.ItemId)
                    {
                        taxAdjustmentDetailReference = localPurchLine.ItemId;
                    }
                    else if (localPurchLine && localPurchLine.ProcurementCategory)
                    {
                        localEcoResCategory = EcoResCategory::find(localPurchLine.ProcurementCategory);

                        if (localEcoResCategory)
                        {
                            taxAdjustmentDetailReference = localEcoResCategory.Name;
                        }
                    }

                    break;

                default:
                    break;
            }
        }
        return taxAdjustmentDetailReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxAdjustmentDetailType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the type of a tax adjustment detail for a specified tax source.
    /// </summary>
    /// <param name="_sourceTableId">
    /// The table ID of the specified tax source.
    /// </param>
    /// <param name="_sourceRecId">
    /// The record ID of the specified tax source.
    /// </param>
    /// <returns>
    /// The type of the tax adjustment detail for the specified tax source.
    /// </returns>
    public TaxAdjustmentDetailType getTaxAdjustmentDetailType(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        TaxAdjustmentDetailType taxAdjustmentDetailType;
        PurchLine           localPurchLine;

        if (_sourceTableId && _sourceRecId)
        {
            switch (_sourceTableId)
            {
                case tableNum(PurchLine):
                    localPurchLine = PurchLine::findRecId(_sourceRecId);

                    if (localPurchLine && localPurchLine.ItemId)
                    {
                        taxAdjustmentDetailType = TaxAdjustmentDetailType::Item;
                    }
                    else if (localPurchLine && localPurchLine.ProcurementCategory)
                    {
                        taxAdjustmentDetailType = TaxAdjustmentDetailType::Category;
                    }
                    break;

                default:
                    break;
            }
        }
        return taxAdjustmentDetailType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        VendDocumentTableMap _parmTable,
        ParmId _parmId,
        PurchId _sumPurchId,
        DocumentStatus _documentStatus)
    {
        super(_parmTable, _parmId, _sumPurchId, _documentStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDetailsSalesTaxAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a tax calculation uses detailed level sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the tax calculation uses detailed level sales tax adjustments; otherwise, false.
    /// </returns>
    public boolean useDetailsSalesTaxAdjustmentType()
    {
        boolean useDetailSalesTaxAdjustmentType;

        if (this.allowSingleLineAdjustment() || this.useSalesTaxAdjustments())
        {
            useDetailSalesTaxAdjustmentType = true;
        }

        return useDetailSalesTaxAdjustmentType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>