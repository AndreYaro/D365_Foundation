<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdConsistencyCheck_Table</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProdConsistencyCheck_Table extends SysConsistencyCheck implements BatchRetryable
{
    QueryRun    queryRun;
    boolean     dummy;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        dummy
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFixProdTable</Name>
				<Source><![CDATA[
    void checkFixProdTable()
    {
        DictTable dictTable = new DictTable(tablenum(ProdTable));
        str s = strfmt("@SYS26373", dictTable.label());
        progress.setText(s,2);
        setprefix(s);
        while (queryRun.next())
        {
            ProdTable prodTable = queryRun.get(tablenum(ProdTable));
            if (prodTable.ProdStatus != ProdStatus::Completed)
                this.kernelCheckRecord(prodTable,dictTable);
    //        prodTable.updateCheckFix(this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(Prod);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);
        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDialog</Name>
				<Source><![CDATA[
    boolean hasDialog()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        if (this.showInTree())
        {
            Query query = new Query();
            QueryBuildDataSource qbs = query.addDataSource(tablenum(ProdTable));
            QueryBuildRange qrProdStatus = qbs.addRange(fieldname2id(tablenum(ProdTable),fieldstr(ProdTable,ProdStatus)));
            qrProdStatus.value(queryRange(ProdStatus::Created,ProdStatus::ReportedFinished));
            qrProdStatus.status(1);             //lock range
            queryRun = new QueryRun(query);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        // prodTable
        this.checkFixProdTable();

        // prodBOM
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(),tablenum(ProdBOM))),2);

        // prodRoute
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(),tablenum(ProdRoute))),2);

        // ProdRouteJob
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(),tablenum(ProdRouteJob))),2);

        // ProdRouteTrans
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(),tablenum(ProdRouteTrans))),2);

        // ProdTableJour
        this.kernelCheckRecords(
            new QueryRun(SysQuery::addTableRelation(queryRun.query(),tablenum(ProdTableJour))),2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    classId treeParentClassId()
    {
        return classnum(ProdConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQuery] = packedClass;
                if (packedQuery)
                    queryRun = new QueryRun(packedQuery);
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS9747";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SYS58231";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
