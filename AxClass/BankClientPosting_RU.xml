<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankClientPosting_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BankClientPosting_RU extends RunBase
{
    BankClientPayment_RU   paymentTable;
    LedgerJournalTable     ledgerJournalTable;
    Voucher                voucher;
    LedgerJournalId        journalNum;
    CompanyBankAccountId   companyBankAccount;
    DialogField            dlgCompanyBankAccount;

    JournalVoucherNum      journalVoucherNum;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        companyBankAccount
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    protected void createJournalTable()
    {
        LedgerJournalTableData journalTableData  = JournalTableData::newTable(ledgerJournalTable);
        ;

        ledgerJournalTable.JournalName = BankParameters::find().ImportedPaymentJournalName_RU;
        if (! ledgerJournalTable.JournalName)
        {
            throw error("@GLS115371");
        }

        journalNum  = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
        journalTableData.initFromJournalName(journalTableData.journalStatic().findJournalName(ledgerJournalTable.JournalName));
        ledgerJournalTable.JournalNum = journalNum;
        ledgerJournalTable.insert();

        journalVoucherNum = new JournalVoucherNum(journalTableData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    protected void createJournalTrans(BankClientPayment_RU   _paymentTable,
                                      LineNum                _lineNum)
    {
        LedgerJournalTrans       ledgerJournalTrans;

        voucher = journalVoucherNum.getNew(false);

        ledgerJournalTrans.clear();

        ledgerJournalTrans.initValue();
        ledgerJournalTrans.initFromBankClientPayment_RU(_paymentTable);
        ledgerJournalTrans.LineNum                      = _lineNum;
        ledgerJournalTrans.JournalNum                   = ledgerJournalTable.JournalNum;
        ledgerJournalTrans.Voucher                      = voucher;
        ledgerJournalTrans.Approved                     = NoYes::Yes;
        ledgerJournalTrans.Approver                     = HcmWorker::userId2Worker(curUserId());
        ledgerJournalTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgCompanyBankAccount = dialog.addField(extendedTypeStr(CompanyBankAccountId));

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        companyBankAccount = dlgCompanyBankAccount.value();

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    protected void insertJournal()
    {
        LineNum                 lineNum;
        ;
        setPrefix("@GLS105877");
        while select forupdate paymentTable
            where   paymentTable.AccountID == companyBankAccount &&
                    ! paymentTable.JournalNum                    &&
                    ! paymentTable.Voucher                       &&
                    ! paymentTable.Unrecognized                  &&
                    ! paymentTable.AgreementBlocked              &&
                    ! paymentTable.Posted                        &&
                    paymentTable.CustVendAC
        {
            if (! ledgerJournalTable)
            {
                this.createJournalTable();
            }
            lineNum++;
            this.createJournalTrans(paymentTable, lineNum);
            paymentTable.Voucher    = voucher;
            paymentTable.JournalNum = journalNum;
            paymentTable.update();
            this.updatePaymentTableOrig();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountId</Name>
				<Source><![CDATA[
    public CompanyBankAccountId parmAccountId(CompanyBankAccountId _accountId = companyBankAccount)
    {
        companyBankAccount = _accountId;
        return companyBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    protected void post(LedgerJournalTable  _journalTable)
    {
        LedgerJournalCheckPost  ledgerJournalCheckPost;

        ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(_journalTable,
                                                                               NoYes::Yes,
                                                                               NoYes::No);

        LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournals</Name>
				<Source><![CDATA[
    protected void postJournals()
    {
        LedgerJournalTable  journalTable2;
        boolean             posted;
        ;

        while select forupdate paymentTable
            where   paymentTable.AccountID == companyBankAccount &&
                    paymentTable.JournalNum                      &&
                    paymentTable.Voucher                         &&
                    ! paymentTable.Posted                        &&
                    ! paymentTable.Unrecognized                  &&
                    ! paymentTable.AgreementBlocked
        {
            setPrefix(strFmt("@SYS26910", paymentTable.JournalNum));
            journalTable2 = LedgerJournalTable::find(paymentTable.JournalNum);
            if (journalTable2.Posted == NoYes::No)
            {
                this.post(journalTable2);
                journalTable2 = LedgerJournalTable::find(paymentTable.JournalNum);
                if (journalTable2.Posted == NoYes::No)
                {
                    throw error("@GLS116077");
                }
            }
            paymentTable.Posted = journalTable2.Posted;
            paymentTable.update();
            posted = true;

            this.updatePaymentTableOrig();
        }
        if (!posted)
        {
            info("@SYS25907");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ;
        ttsbegin;
        this.transferVouchers();
        this.insertJournal();
        this.postJournals();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find journals that contain at least one unnecessary ledgerjournaltran (more precisely voucher) and
    /// transfer necessary voucher from them to new journals
    /// </summary>
    protected void transferVouchers()
    {
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalTableData  journalTableData;
        LedgerJournalTable      newLedgerJournalTable;
        LedgerJournalTable      oldLedgerJournalTable;
        Set                     voucherSet    = new Set(Types::String);
        Map                     voucherToPost = new Map(Types::String, Types::Class);
        SetEnumerator           se;
        MapEnumerator           me;
        BankClientPayment_RU    locPaymentTable;

        while select paymentTable
            group by paymentTable.JournalNum, paymentTable.Voucher
            where paymentTable.AccountID == companyBankAccount &&
                  paymentTable.JournalNum                      &&
                  paymentTable.Voucher                         &&
                  ! paymentTable.Posted                        &&
                  ! paymentTable.Unrecognized                  &&
                  ! paymentTable.AgreementBlocked
        {
            if (voucherToPost.exists(paymentTable.JournalNum))
            {
                voucherSet = voucherToPost.lookup(paymentTable.JournalNum);
            }
            else
            {
                voucherSet = new Set(voucherSet.typeId());
            }
            voucherSet.add(paymentTable.Voucher);

            voucherToPost.insert(paymentTable.JournalNum, voucherSet);
        }

        me = voucherToPost.getEnumerator();
        while (me.moveNext())
        {
            voucherSet = me.currentValue();

            while select ledgerJournalTrans
                group by Voucher
                where ledgerJournalTrans.JournalNum == me.currentKey()
            {
                if (!voucherSet.in(ledgerJournalTrans.Voucher))
                {
                    oldLedgerJournalTable = LedgerJournalTable::find(me.currentKey());

                    journalTableData = JournalTableData::newTable(oldLedgerJournalTable);

                    newLedgerJournalTable.JournalNum = journalTableData.nextJournalId();
                    newLedgerJournalTable.initFromLedgerJournalTable(oldLedgerJournalTable);
                    newLedgerJournalTable.insert();

                    voucherSet = voucherToPost.lookup(oldLedgerJournalTable.JournalNum);
                    se = voucherSet.getEnumerator();

                    while (se.moveNext())
                    {
                        journalTableData.moveVoucherToJournal(newLedgerJournalTable.JournalNum, se.current());
                        update_recordset locPaymentTable
                            setting JournalNum = newLedgerJournalTable.JournalNum
                            where locPaymentTable.AccountID  == companyBankAccount            &&
                                  locPaymentTable.JournalNum == oldLedgerJournalTable.JournalNum &&
                                  locPaymentTable.Voucher    == se.current();
                    }
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        ;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentTableOrig</Name>
				<Source><![CDATA[
    protected void updatePaymentTableOrig()
    {
        BankClientPayment_RU   paymentTableUpdate;

        paymentTableUpdate = BankClientPayment_RU::find(paymentTable.PaymentDirection,
                                                        paymentTable.DocumentDate,
                                                        paymentTable.DocumentNumber,
                                                        paymentTable.PayerAccount,
                                                        paymentTable.PayeeAccount,
                                                        paymentTable.AmountCur,
                                                        paymentTable.CurrencyCode,
                                                        true);
        paymentTableUpdate.Voucher    = paymentTable.Voucher;
        paymentTableUpdate.JournalNum = paymentTable.JournalNum;
        paymentTableUpdate.Posted     = paymentTable.Posted;

        paymentTableUpdate.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (!companyBankAccount)
        {
            ret = checkFailed(strFmt("@SYS50104", "@SYS1517"));
        }

        if (BankAccountTable::find(companyBankAccount).BankAccountStatus == BankAccountHoldStatus::InactiveForAllTransactions)
        {
            ret = checkFailed(strFmt("@GLS115323", companyBankAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BankClientPosting_RU construct()
    {
        return new BankClientPosting_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@GLS115372";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BankClientPosting_RU   bankClientPosting;
        ;

        bankClientPosting = BankClientPosting_RU::construct();

        if (bankClientPosting.prompt())
        {
            bankClientPosting.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>