<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionValidationRuleInvoker</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionValidationRuleInvoker</c> class is responsible for invoke the different rules.
/// </summary>
internal final class RetailTransactionValidationRuleInvoker
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private static Map ruleDictClasses = new Map(Types::Integer, Types::Class);

    private Map ruleInstances;

    private CustomerOrderInfo customerOrderInfo;
    private RecId transactionRecId;
    private CustAccount storeDefaultCustomer;

    private System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>RetailTransactionValidationRuleInvoker</c>.
    /// </summary>
    /// <param name = "_customerOrderInfo">The CustomerOrderInfo object to be validated.</param>
    /// <param name = "_transactionRecId">The RetailTransactionTable RecId.</param>
    /// <param name = "_storeDefaultCustomer">The store's default customer.</param>
    public void new(CustomerOrderInfo _customerOrderInfo, RecId _transactionRecId, CustAccount _storeDefaultCustomer)
    {
        ruleInstances = new Map(Types::Integer, Types::Class);

        customerOrderInfo = _customerOrderInfo;
        transactionRecId = _transactionRecId;
        storeDefaultCustomer = _storeDefaultCustomer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeTransactionLevelRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the given transaction level validation.
    /// </summary>
    /// <param name = "_metadata">The metadata for the rule that is going to be executed.</param>
    public void invokeTransactionLevelRule(RetailTransactionValidationRuleMetadata _metadata)
    {
        try
        {
            stopwatch.Restart();

            RetailTransactionValidationBase ruleInstance = this.getRuleInstance(_metadata);
            SysDictClass dictClass = this.getRuleDictClass(_metadata);

            dictClass.callObject(_metadata.getMethodName(), ruleInstance);
        }
        finally
        {
            stopwatch.Stop();
            eventSource.EventWriteTransactionValidationExecutedRuleForTransaction(transactionRecId, _metadata.getClassName(), _metadata.getMethodName(), stopwatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokeLineLevelRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the given line level validation.
    /// </summary>
    /// <param name = "_metadata">The metadata for the rule that is going to be executed.</param>
    /// <param name = "_itemInfo">The ItemInfo to be validated.</param>
    public void invokeLineLevelRule(RetailTransactionValidationRuleMetadata _metadata, ItemInfo _itemInfo)
    {
        try
        {
            stopwatch.Restart();

            RetailTransactionValidationBase ruleInstance = this.getRuleInstance(_metadata);
            SysDictClass dictClass = this.getRuleDictClass(_metadata);

            dictClass.callObject(_metadata.getMethodName(), ruleInstance, _itemInfo);
        }
        finally
        {
            stopwatch.Stop();
            eventSource.EventWriteTransactionValidationExecutedRuleForTransactionLine(transactionRecId, System.Decimal::ToSingle(_itemInfo.LineNumber), _metadata.getClassName(), _metadata.getMethodName(), stopwatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllValidationErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the validation errors that were detected while validating the transaction.
    /// </summary>
    /// <returns>A list of all the validation errors detected.</returns>
    public List getAllValidationErrors()
    {
        List listOfErrors = new List(Types::Record);

        MapEnumerator ruleInstancesEnumerator = ruleInstances.getEnumerator();

        while (ruleInstancesEnumerator.moveNext())
        {
            RetailTransactionValidationBase ruleInstance = ruleInstancesEnumerator.currentValue();

            if (ruleInstance.parmValidationErrorTypeList() != null)
            {
                ListEnumerator listEnumeratorPerTransaction = ruleInstance.parmValidationErrorTypeList().getEnumerator();

                while (listEnumeratorPerTransaction.moveNext())
                {
                    RetailTransactionValidationError    validationErrorData;

                    validationErrorData.TransactionId   = customerOrderInfo.TransactionId;
                    validationErrorData.Channel         = str2Int64(customerOrderInfo.ChannelRecordId);
                    validationErrorData.Store           = customerOrderInfo.StoreId;
                    validationErrorData.Terminal        = customerOrderInfo.TerminalId;
                        
                    container errorDetails = listEnumeratorPerTransaction.current();

                    validationErrorData.ValidationType  = conPeek(errorDetails, 1);
                    validationErrorData.ErrorMessage    = conPeek(errorDetails, 2);
                    validationErrorData.LineNum         = conPeek(errorDetails, 3);

                    listOfErrors.addEnd(validationErrorData);
                }
            }
        }

        return listOfErrors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleInstance</Name>
				<Source><![CDATA[
    private RetailTransactionValidationBase getRuleInstance(RetailTransactionValidationRuleMetadata _metadata)
    {
        ClassId classId = _metadata.getClassId();
        RetailTransactionValidationBase ruleInstance;

        if (ruleInstances.exists(classId))
        {
            ruleInstance = ruleInstances.lookup(classId);
        }
        else
        {
            SysDictClass dictClass = this.getRuleDictClass(_metadata);
            Object       classObj  = dictClass.makeObject();

            ruleInstance = classObj as RetailTransactionValidationBase;
            ruleInstance.parmCustomerOrderInfo(customerOrderInfo);
            ruleInstance.parmStoreDefaultCustomer(storeDefaultCustomer);

            ruleInstances.insert(classId, ruleInstance);
        }

        return ruleInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuleDictClass</Name>
				<Source><![CDATA[
    private SysDictClass getRuleDictClass(RetailTransactionValidationRuleMetadata _metadata)
    {
        ClassId classId = _metadata.getClassId();
        SysDictClass dictClass;

        if (ruleDictClasses.exists(classId))
        {
            dictClass = ruleDictClasses.lookup(classId);
        }
        else
        {
            dictClass = new SysDictClass(_metadata.getClassId());

            ruleDictClasses.insert(classId, dictClass);
        }

        return dictClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>