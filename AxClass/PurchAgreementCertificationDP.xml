<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementCertificationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Report data provider class that supports the PurchAgreementCertificationCompliance report.
/// </summary>
/// <remarks>
/// This class provides the methods that are used by the PurchAgreementCertificationCompliance report.
/// </remarks>
[
    SRSReportQueryAttribute(querystr(PurchAgreementCertification)),
    SRSReportParameterAttribute(classstr(PurchAgreementCertificationContract))
]
public class PurchAgreementCertificationDP extends SRSReportDataProviderBase
{
    PurchAgreementCertificationTmp purchAgreementCertificationTmp;
    QueryRun vendCertificationQueryRun;
    QueryRun purchAgreementCertificationQueryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPurchAgreementCertificationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to query the temporary table and returns data table to the calling method.
    /// </summary>
    /// <returns>
    /// The <c>PurchAgreementCertificationTmp</c> table buufer.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(PurchAgreementCertificationTmp))
    ]
    public PurchAgreementCertificationTmp getPurchAgreementCertificationTmp()
    {
        select purchAgreementCertificationTmp;

        return purchAgreementCertificationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchAgreementCertificationQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and executes the query.
    /// </summary>
    /// <remarks>
    /// Adds the data source, ranges, and sortings by using the selected parameters.
    /// </remarks>
    private void initPurchAgreementCertificationQuery()
    {
        Query                purchAgreementCertificationQuery;
        QueryBuildDataSource purchAgreementCertificationDS;

        purchAgreementCertificationQuery    = new Query();
        purchAgreementCertificationDS       = purchAgreementCertificationQuery.addDataSource(tablenum(PurchAgreementCertification));
        purchAgreementCertificationQueryRun = new QueryRun(purchAgreementCertificationQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic which is used by
    /// <c>CustAuditor</c> report.
    /// </remarks>
    public void processReport()
    {
        AgreementClassificationId       agreementClassificationId;
        VendCertTypeId                  vendCertTypeId;
        TransDate                       certificationExpireDate;
        boolean                         certificationPastDue;
        boolean                         isCertificationExpireDate;
        VendCertification               vendCertification;
        PurchAgreementCertification     purchAgreementCertification;
        PurchAgreementHeader            purchAgreementHeader;
        VendTable                       vendTable;
        NoYes                           isInProcess;

        PurchAgreementCertificationContract contract = this.parmDataContract() as PurchAgreementCertificationContract;
        agreementClassificationId = contract.parmAgreementClassificationId();
        vendCertTypeId            = contract.parmVendCertTypeId();
        certificationExpireDate   = contract.parmCertificationExpireDate();
        certificationPastDue      = contract.parmCertificationPastDue();
        isCertificationExpireDate = contract.parmIsCertificationExpired();
        isInProcess               = isCertificationExpireDate;

        vendCertificationQueryRun = new QueryRun(this.parmQuery());

        if (vendCertTypeId)
        {
            vendCertificationQueryRun.query().dataSourceTable(tablenum(VendCertification)).addRange(fieldnum(VendCertification, CertificationType)).value(vendCertTypeId);
        }

        if (certificationPastDue)
        {
            vendCertificationQueryRun.query().dataSourceTable(tablenum(VendCertification)).addRange(fieldnum(VendCertification, InProcess_PSN)).value(SysQuery::value(isInProcess));
            vendCertificationQueryRun.query().dataSourceTable(tablenum(VendCertification)).addRange(fieldnum(VendCertification, DueDate_PSN)).value(strfmt('<= %1', queryValue(certificationExpireDate)));
        }

        if (isCertificationExpireDate)
        {
            vendCertificationQueryRun.query().dataSourceTable(tablenum(VendCertification)).addRange(fieldnum(VendCertification, ValidToDate)).value(SysQuery::range(DateTimeUtil::minValue(), certificationExpireDate));
        }

        if (agreementClassificationId)
        {
            QueryBuildDataSource purchAgreementCertificationDataSource = vendCertificationQueryRun.query().dataSourceTable(tableNum(PurchAgreementCertification));
            
            QueryBuildDataSource purchAgreementDataSource = purchAgreementCertificationDataSource.addDataSource(tableNum(PurchAgreementHeader));
            purchAgreementDataSource.joinMode(JoinMode::ExistsJoin);
            purchAgreementDataSource.addLink(fieldNum(PurchAgreementCertification, PurchAgreementHeader), fieldNum(PurchAgreementHeader, RecId));

            QueryBuildDataSource agreementClassificationDataSource = purchAgreementDataSource.addDataSource(tableNum(AgreementClassification));
            agreementClassificationDataSource.joinMode(JoinMode::ExistsJoin);
            agreementClassificationDataSource.addLink(fieldNum(PurchAgreementHeader, AgreementClassification), fieldNum(AgreementClassification, RecId));
            agreementClassificationDataSource.addRange(fieldNum(AgreementClassification, Name)).value(SysQuery::value(agreementClassificationId));
        }

        this.initPurchAgreementCertificationQuery();

        while (vendCertificationQueryRun.next())
        {
            vendCertification = vendCertificationQueryRun.get(tablenum(VendCertification));

            purchAgreementCertificationQueryRun.reset();
            purchAgreementCertificationQueryRun.query().dataSourceTable(tablenum(PurchAgreementCertification)).clearRange(
                        fieldnum(PurchAgreementCertification, VendCertification));
            purchAgreementCertificationQueryRun.query().dataSourceTable(tablenum(PurchAgreementCertification)).addRange(
                        fieldnum(PurchAgreementCertification, VendCertification)).value(SysQuery::value(vendCertification.RecId));

            while (purchAgreementCertificationQueryRun.next())
            {
                if (SysReportRun::changed(purchAgreementCertificationQueryRun, tablenum(PurchAgreementCertification)))
                {
                    purchAgreementCertification = purchAgreementCertificationQueryRun.get(tablenum(PurchAgreementCertification));
                    purchAgreementHeader        = PurchAgreementHeader::find(purchAgreementCertification.PurchAgreementHeader);
                    vendTable                   = vendCertificationQueryRun.get(tablenum(VendTable));

                    purchAgreementCertificationTmp.CertificationNumber = vendCertification.CertificationNumber;
                    purchAgreementCertificationTmp.DueDate             = vendCertification.DueDate_PSN;
                    purchAgreementCertificationTmp.CertificationType   = vendCertification.CertificationType;
                    purchAgreementCertificationTmp.VendAccountNum      = purchAgreementCertification.VendTable;
                    purchAgreementCertificationTmp.VendName            = vendTable.name();
                    purchAgreementCertificationTmp.ExpirationDate      = vendCertification.ValidToDate;
                    purchAgreementCertificationTmp.PurchAgreementId    = purchAgreementHeader.PurchNumberSequence;
                    purchAgreementCertificationTmp.PurchAgreementName  = purchAgreementHeader.DocumentTitle;

                    purchAgreementCertificationTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>