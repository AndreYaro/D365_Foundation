<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSShipConsolidationPolicyCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates shipment consolidation policies based on Policy creation approach type.
/// </summary>
internal abstract class WHSShipConsolidationPolicyCreator
{
    protected internal WHSShipConsolidationPolicyName policyName;
    protected internal WHSShipConsolidationPolicyType policyType;
    protected internal WHSShipConsolidationPolicyDesc policyDescription;
    protected internal boolean                        isCrossOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromPolicyCreateDefaultType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a WHSShipConsolidationPolicyCreator class from a Policy creation approach type.
    /// </summary>
    /// <param name="_shipConsolidationPolicyCreateApproach">
    /// Shipment consolidation creation approach.
    /// </param>
    /// <returns>An instance of the applicable WHSShipmentCreator class.</returns>
    [Hookable(false)]
    internal static WHSShipConsolidationPolicyCreator newFromPolicyCreateDefaultType(WHSShipConsolidationPolicyCreateApproach _shipConsolidationPolicyCreateApproach)
    {
        WHSShipConsolidationPolicyCreator shipConsolidationPolicyCreator;

        switch (_shipConsolidationPolicyCreateApproach)
        {
            case WHSShipConsolidationPolicyCreateApproach::UIButton:
                shipConsolidationPolicyCreator = new WHSShipConsolidationPolicyCreatorUIButton();
                break;

            case WHSShipConsolidationPolicyCreateApproach::ReleaseToWarehouse:
                shipConsolidationPolicyCreator = new WHSShipConsolidationPolicyCreatorReleaseToWarehouse();
                break;

            case WHSShipConsolidationPolicyCreateApproach::LoadPostEngine:
                shipConsolidationPolicyCreator = new WHSShipConsolidationPolicyCreatorLoadPostEngine();
                break;
        }

        if (!shipConsolidationPolicyCreator)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        return shipConsolidationPolicyCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class instance.
    /// </summary>
    /// <param name="_policyName">
    /// A shipment consolidation policy name.
    /// </param>
    /// <param name="_policyType">
    /// A shipment consolidation policy type.
    /// </param>
    /// <param name="_policyDescription">
    /// A shipment consolidation policy description.
    /// </param>
    /// <param name="_isCrossOrder">
    /// True if the policy is a "cross-order", false otherwise.
    /// </param>
    [Wrappable(false)]
    protected internal void init(
        WHSShipConsolidationPolicyName _policyName,
        WHSShipConsolidationPolicyType _policyType,
        WHSShipConsolidationPolicyDesc _policyDescription,
        boolean                        _isCrossOrder)
    {
        policyName        = _policyName;
        policyType        = _policyType;
        policyDescription = _policyDescription;
        isCrossOrder      = _isCrossOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPolicyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default shipment consolidation policy.
    /// </summary>
    /// <param name="_policyName">
    /// A shipment consolidation policy name.
    /// </param>
    /// <param name="_policyType">
    /// A shipment consolidation policy type.
    /// </param>
    /// <param name="_policyDescription">
    /// A shipment consolidation policy description.
    /// </param>
    /// <param name="_isCrossOrder">
    /// True if the policy is a "cross-order", false otherwise.
    /// </param>
    /// <returns>
    /// A shipment consolidation policy data instance.
    /// </returns>
    [Hookable(false)]
    internal WHSShipConsolidationPolicyData createPolicyData(
        WHSShipConsolidationPolicyName _policyName,
        WHSShipConsolidationPolicyType _policyType,
        WHSShipConsolidationPolicyDesc _policyDescription,
        boolean                        _isCrossOrder)
    {
        WHSShipConsolidationPolicy     shipConsolidationPolicy;
        WHSShipConsolidationPolicyData shipConsolidationPolicyData;
        
        this.init(_policyName, _policyType, _policyDescription, _isCrossOrder);
        this.initPolicy(shipConsolidationPolicy);
        
        if (isCrossOrder)
        {
            SysQueryRun queryRun = new SysQueryRun(shipConsolidationPolicy.ShipConsolidationPolicyQuery);
            QueryBuildRange inventLocationRange = this.generateShipConsolidationPolicyQuery(queryRun);

            if (!(inventLocationRange && inventLocationRange.value()))
            {
                return null;
            }

            shipConsolidationPolicy.ShipConsolidationPolicyQuery = queryRun.pack();
        }

        shipConsolidationPolicyData = WHSShipConsolidationPolicyData::construct(shipConsolidationPolicy);
        shipConsolidationPolicyData.setShipConsolidationPolicyFields(this.defaultFieldsForPolicy(shipConsolidationPolicy));

        return shipConsolidationPolicyData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPolicy</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected internal void initPolicy(WHSShipConsolidationPolicy _policy)
    {
        _policy.clear();
        _policy.initValue();
        _policy.ShipConsolidationPolicyType = policyType;
        _policy.ShipConsolidationPolicyName = policyName;
        _policy.ShipConsolidationPolicyDesc = policyDescription;

        _policy.initCriteriaQueryFromPolicyType(policyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateShipConsolidationPolicyQuery</Name>
				<Source><![CDATA[
    private QueryBuildRange generateShipConsolidationPolicyQuery(SysQueryRun _queryRun)
    {
        QueryBuildDataSource inventLocationDS = _queryRun.query().dataSourceTable(tableNum(InventDim));
        inventLocationDS.clearRange((fieldNum(InventDim, InventLocationId)));

        InventLocation inventLocation;

        while select InventLocationId from inventLocation
            where inventLocation.ConsolidateShipAtRTW
        {
            inventLocationDS.addRange(fieldNum(InventDim, InventLocationId)).value(SysQuery::value(inventLocation.InventLocationId));
        }

        return inventLocationDS.findRange(fieldNum(InventDim, InventLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFieldsForPolicy</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected internal List<WHSShipConsolidationPolicyFieldData> defaultFieldsForPolicy(WHSShipConsolidationPolicy _shipConsolidationPolicy)
    {
        List fields = new List(Types::Class);

        switch(_shipConsolidationPolicy.ShipConsolidationPolicyType)
        {
            case WHSShipConsolidationPolicyType::Sales:
                fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, AccountNum)));
                fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, DeliveryName)));
                fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, DeliveryPostalAddress)));
                fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, InventLocationId)));

                if (!isCrossOrder)
                {
                    fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(WHSShipmentTable), fieldStr(WHSShipmentTable, OrderNum)));
                }
                break;

            case WHSShipConsolidationPolicyType::TransferIssue:
                fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(InventTransferTable), fieldStr(InventTransferTable, InventLocationIdFrom)));
                fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(InventTransferTable), fieldStr(InventTransferTable, InventLocationIdTo)));

                if (!isCrossOrder)
                {
                    fields.addEnd(this.createShipConsolidationPolicyFieldData(_shipConsolidationPolicy, tableStr(InventTransferTable), fieldStr(InventTransferTable, TransferId)));
                }
                break;
        }

        return fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createShipConsolidationPolicyFieldData</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected internal WHSShipConsolidationPolicyFieldData createShipConsolidationPolicyFieldData(
        WHSShipConsolidationPolicy _shipConsolidationPolicy,
        TableName                  _tableName,
        FieldName                  _fieldName)
    {
        return WHSShipConsolidationPolicyFieldData::construct(this.createDefaultShipConsolidationPolicyFieldRecord(_shipConsolidationPolicy, _tableName, _fieldName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultShipConsolidationPolicyFieldRecord</Name>
				<Source><![CDATA[
    private WHSShipConsolidationPolicyField createDefaultShipConsolidationPolicyFieldRecord(
        WHSShipConsolidationPolicy _shipConsolidationPolicy,
        TableName                  _tableName,
        FieldName                  _fieldName)
    {
        WHSShipConsolidationPolicyField shipConsolidationPolicyField;

        shipConsolidationPolicyField.initValue();
        shipConsolidationPolicyField.ShipConsolidationPolicyName = _shipConsolidationPolicy.ShipConsolidationPolicyName;
        shipConsolidationPolicyField.ShipConsolidationPolicyType = _shipConsolidationPolicy.ShipConsolidationPolicyType;
        shipConsolidationPolicyField.SourceTableName             = _tableName;
        shipConsolidationPolicyField.SourceFieldName             = _fieldName;

        return shipConsolidationPolicyField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndAddPolicyData2List</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a default shipment consolidation policy and adds it to a list.
    /// </summary>
    /// <param name="_shipConsolidationPolies">
    /// A shipment consolidation policy list.
    /// </param>
    /// <param name="_policyName">
    /// A shipment consolidation policy name.
    /// </param>
    /// <param name="_policyType">
    /// A shipment consolidation policy type.
    /// </param>
    /// <param name="_policyDescription">
    /// A shipment consolidation policy description.
    /// </param>
    /// <param name="_isCrossOrder">
    /// True if the policy is a "cross-order", false otherwise.
    /// </param>
    [Hookable(false)]
    internal void createAndAddPolicyData2List(
        List                                 _shipConsolidationPolies,
        WHSShipConsolidationPolicyName       _policyName,
        WHSShipConsolidationPolicyType       _policyType,
        WHSShipConsolidationPolicyDesc       _policyDescription,
        boolean                              _isCrossOrder)
    {
        WHSShipConsolidationPolicyData shipConsolidationPolicyData = this.createPolicyData(_policyName, _policyType, _policyDescription, _isCrossOrder);

        if (shipConsolidationPolicyData)
        {
            _shipConsolidationPolies.addEnd(shipConsolidationPolicyData);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>