<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxInventDim</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxInventDim extends AxInternalBase
{
    InventDim       inventDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allDimensions</Name>
				<Source><![CDATA[
    public InventDim allDimensions(InventDim _inventDim = null)
    {
        if (!prmisDefault(_inventDim))
        {
            return this.setGetDimensions(true, true, _inventDim);
        }

        return this.setGetDimensions(true, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current record in the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDim">
    /// A <c>InventDim</c> record to set; optional.
    /// </param>
    /// <returns>
    /// An <c>InventDim</c> record.
    /// </returns>
    public Common currentRecord(Common _inventDim = inventDim)
    {
        if (!prmisDefault(_inventDim))
        {
            super(_inventDim);
            inventDim = _inventDim as InventDim;
        }
        else
        {
            super();
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty record from the table to which this AxBC class relates.
    /// </summary>
    /// <returns>
    ///    An empty record from the table to which this AxBC class relates.
    /// </returns>
    /// <remarks>
    ///    The table to which this AxBC class relates has the same name as the class without the first two
    ///    letters, a and x.
    /// </remarks>
    protected Common emptyRecord()
    {
        InventDim localInventDim;

        return localInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMandatoryFieldsExemptionList</Name>
				<Source><![CDATA[
    protected void initMandatoryFieldsExemptionList()
    {
        super();
        this.setParmMethodAsNotMandatory(methodStr(AxInventDim,parmInventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    public InventDim inventDim(InventDim _inventDim = inventDim)
    {
        if (!prmisDefault(_inventDim))
        {
            this.setCurrentRecordFromExternal(_inventDim);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchPriceDiscFieldsSet</Name>
				<Source><![CDATA[
    public boolean isPurchPriceDiscFieldsSet(InventTable _inventTable)
    {
        ListEnumerator              dimFields = InventDim::dimEnabledFieldList().getEnumerator();
        FieldId                     fieldId;
        InventDimGroupSetup         inventDimGroupSetup = InventDimGroupSetup::newInventTable(_inventTable);

        while (dimFields.moveNext())
        {
            fieldId = dimFields.current();
            if (InventDim::mustUseFieldPurchPriceDisc(fieldId, inventDimGroupSetup))
            {
                if (this.isFieldSet(fieldId))
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesPriceDiscFieldsSet</Name>
				<Source><![CDATA[
    public boolean isSalesPriceDiscFieldsSet(InventTable _inventTable)
    {
        ListEnumerator              dimFields = InventDim::dimEnabledFieldList().getEnumerator();
        FieldId                     fieldId;
        InventDimGroupSetup         inventDimGroupSetup = InventDimGroupSetup::newInventTable(_inventTable);

        while (dimFields.moveNext())
        {
            fieldId = dimFields.current();
            if (InventDim::mustUseFieldSalesPriceDisc(fieldId, inventDimGroupSetup))
            {
                if (this.isFieldSet(fieldId))
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveAxInventDim</Name>
				<Source><![CDATA[
    // Method for copying values from this AxInventDim object to another AxInventDim object
    public void moveAxInventDim(AxInventDim _axInventDim)
    {
        MapIterator     fieldTouchedIterator;

        fieldTouchedIterator = new MapIterator(fieldTouched);
        fieldTouchedIterator.begin();
        while (fieldTouchedIterator.more())
        {
            _axInventDim.fieldId(fieldTouchedIterator.domainValue(), this.inventDim().(fieldTouchedIterator.domainValue()));
            fieldTouchedIterator.next();
        }

        if (this.mapPolicy())
        {
            _axInventDim.mapPolicy(this.mapPolicy());
        }
        _axInventDim.xmlDocDirection(this.xmlDocDirection());
        if (this.parentAxBC())
        {
            _axInventDim.parentAxBC(this.parentAxBC());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimension</Name>
				<Source><![CDATA[
    public anytype parmInventDimension(FieldId _dimFieldId, anytype _inventDimension = InventDim::emptyDimField(_dimFieldId))
    {
        if (!prmIsDefault(_inventDimension))
        {
            this.setField(_dimFieldId, _inventDimension);
        }

        return inventDim.(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigId</Name>
				<Source><![CDATA[
    public EcoResItemConfigurationName parmConfigId(EcoResItemConfigurationName _configId = '')
    {
        if (!prmisDefault(_configId))
        {
            this.setField(fieldNum(InventDim, ConfigId), _configId);
        }

        return inventDim.ConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventBatchId</Name>
				<Source><![CDATA[
    public InventBatchId parmInventBatchId(InventBatchId _inventBatchId = '')
    {
        if (!prmisDefault(_inventBatchId))
        {
            this.setField(fieldNum(InventDim, InventBatchId), _inventBatchId);
        }

        return inventDim.InventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventColorId</Name>
				<Source><![CDATA[
    public EcoResItemColorName parmInventColorId(EcoResItemColorName _inventColorId = '')
    {
        if (!prmisDefault(_inventColorId))
        {
            this.setField(fieldNum(InventDim, InventColorId), _inventColorId);
        }

        return inventDim.InventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimId</Name>
				<Source><![CDATA[
    public InventDimId parmInventDimId(InventDimId _inventDimId = '')
    {
        if (!prmisDefault(_inventDimId))
        {
            this.setField(fieldNum(InventDim, InventDimId), _inventDimId);
        }

        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventGTDId_RU</Name>
				<Source><![CDATA[
    public InventGTDId_RU parmInventGTDId_RU(InventGTDId_RU _inventGTDId = "")
    {
        if (! prmisdefault(_inventGTDId))
        {
            this.setField(fieldnum(InventDim, InventGtdId_RU), _inventGTDId);
        }

        return inventDim.InventGtdId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = '')
    {
        if (!prmisDefault(_inventLocationId))
        {
            this.setField(fieldNum(InventDim, InventLocationId), _inventLocationId);
        }

        return inventDim.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventOwnerId_RU</Name>
				<Source><![CDATA[
    public InventOwnerId_RU parmInventOwnerId_RU(InventOwnerId_RU _inventOwnerId = '')
    {
        if (! prmisdefault(_inventOwnerId))
        {
            this.setField(fieldnum(InventDim, InventOwnerId_RU), _inventOwnerId);
        }

        return inventDim.InventOwnerId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProfileId_RU</Name>
				<Source><![CDATA[
    public InventProfileId_RU parmInventProfileId_RU(InventProfileId_RU _inventProfileId = '')
    {
        if (! prmisdefault(_inventProfileId))
        {
            this.setField(fieldnum(InventDim, InventProfileId_RU), _inventProfileId);
        }

        return inventDim.InventProfileId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSerialId</Name>
				<Source><![CDATA[
    public InventSerialId parmInventSerialId(InventSerialId _inventSerialId = '')
    {
        if (!prmisDefault(_inventSerialId))
        {
            this.setField(fieldNum(InventDim, InventSerialId), _inventSerialId);
        }

        return inventDim.InventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = '')
    {
        if (!prmisDefault(_inventSiteId))
        {
            this.setField(fieldNum(InventDim, InventSiteId), _inventSiteId);
        }

        return inventDim.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSizeId</Name>
				<Source><![CDATA[
    public EcoResItemSizeName parmInventSizeId(EcoResItemSizeName _inventSizeId = '')
    {
        if (!prmisDefault(_inventSizeId))
        {
            this.setField(fieldNum(InventDim, InventSizeId), _inventSizeId);
        }

        return inventDim.InventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStatusId</Name>
				<Source><![CDATA[
    public WHSInventStatusId parmInventStatusId(WHSInventStatusId _inventStatusId = '')
    {
        if (!prmisDefault(_inventStatusId))
        {
            this.setField(fieldNum(InventDim, InventStatusId), _inventStatusId);
        }

        return inventDim.InventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventStyleId</Name>
				<Source><![CDATA[
    public EcoResItemStyleName parmInventStyleId(EcoResItemStyleName _inventStyleId = '')
    {
        if (!prmisDefault(_inventStyleId))
        {
            this.setField(fieldNum(InventDim, InventStyleId), _inventStyleId);
        }

        return inventDim.InventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventVersionId</Name>
				<Source><![CDATA[
    public EcoResItemVersionName parmInventVersionId(EcoResItemVersionName _inventVersionId = '')
    {
        if (!prmisDefault(_inventVersionId))
        {
            this.setField(fieldNum(InventDim, InventVersionId), _inventVersionId);
        }

        return inventDim.InventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    public WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = '')
    {
        if (!prmisDefault(_licensePlateId))
        {
            this.setField(fieldNum(InventDim, LicensePlateId), _licensePlateId);
        }

        return inventDim.LicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId parmWMSLocationId(WMSLocationId _wmsLocationId = '')
    {
        if (!prmisDefault(_wmsLocationId))
        {
            this.setField(fieldNum(InventDim, wmsLocationId), _wmsLocationId);
        }

        return inventDim.wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productDimensions</Name>
				<Source><![CDATA[
    public InventDim productDimensions(InventDim _inventDim = null)
    {
        if (!prmisDefault(_inventDim))
        {
            return this.setGetDimensions(true, false, _inventDim);
        }

        return this.setGetDimensions(true, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConfigId</Name>
				<Source><![CDATA[
    public void setConfigId()
    {
        if (this.isFieldSet(fieldNum(InventDim, ConfigId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimFieldId</Name>
				<Source><![CDATA[
    public void setDimFieldId(FieldId _fieldId)
    {
        #InventDimDevelop

        switch (_fieldId)
        {
            case fieldNum(InventDim, ConfigId):         this.setConfigId();         break;
            case fieldNum(InventDim, InventSizeId):     this.setInventSizeId();     break;
            case fieldNum(InventDim, InventColorId):    this.setInventColorId();    break;
            case fieldNum(InventDim, InventStyleId):    this.setInventStyleId();    break;
            case fieldNum(InventDim, InventVersionId): this.setInventVersionId(); break;
            case fieldNum(InventDim, InventSiteId):     this.setInventSiteId();     break;
            case fieldNum(InventDim, InventLocationId): this.setInventLocationId(); break;
            case fieldNum(InventDim, wmsLocationId):    this.setWMSLocationId();    break;
            case fieldNum(InventDim, InventSerialId):   this.setInventSerialId();   break;
            case fieldNum(InventDim, InventBatchId):    this.setInventBatchId();    break;
            case fieldNum(InventDim, LicensePlateId):   this.setLicensePlateId();   break;
            case fieldNum(InventDim, InventStatusId):   this.setInventStatusId();   break;
            // <GEERU>
            case fieldNum(InventDim, InventGtdId_RU):   this.setInventGTDId_RU();   break;
            case fieldNum(InventDim, InventProfileId_RU): this.setInventProfileId_RU(); break;
            case fieldNum(InventDim, InventOwnerId_RU)  : this.setInventOwnerId_RU();   break;
            // </GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGetDimensions</Name>
				<Source><![CDATA[
    protected InventDim setGetDimensions(boolean _productDimensions, boolean _nonProductDimensions, InventDim _inventDim = null)
    {
        ListEnumerator  dimFields = InventDim::dimEnabledFieldList().getEnumerator();
        FieldId         fieldId;

        InventDim   inventDimensions;

        if (!prmisDefault(_inventDim))
        {
            while (dimFields.moveNext())
            {
                fieldId = dimFields.current();

                if ((_productDimensions     && InventDim::isFieldIdProductDimension(fieldId)) ||
                    (_nonProductDimensions  && !InventDim::isFieldIdProductDimension(fieldId)))
                {
                    this.fieldId(fieldId, _inventDim.(fieldId));
                }
            }
            dimFields.reset();
        }

        while (dimFields.moveNext())
        {
            fieldId = dimFields.current();
            if ((_productDimensions     && InventDim::isFieldIdProductDimension(fieldId)) ||
                (_nonProductDimensions  && !InventDim::isFieldIdProductDimension(fieldId)))
            {
                inventDimensions.(fieldId) = this.fieldId(fieldId);
            }
        }

        return inventDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventBatchId</Name>
				<Source><![CDATA[
    public void setInventBatchId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventBatchId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventColorId</Name>
				<Source><![CDATA[
    public void setInventColorId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventColorId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllInventoryDimensions</Name>
				<Source><![CDATA[
    protected void setAllInventoryDimensions()
    {
        #inventDimDevelop
        // <GEERU>
        #ISOCountryRegionCodes
        // </GEERU>

        this.setConfigId();
        this.setInventSizeId();
        this.setInventColorId();
        this.setInventStyleId();
        this.setInventVersionId();

        this.setInventBatchId();
        this.setInventSiteId();
        this.setInventLocationId();
        this.setInventSerialId();
        this.setWMSLocationId();

        // Added License Plate & Inventory Status
        this.setLicensePlateId();
        this.setInventStatusId();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.setInventGTDId_RU();
            this.setInventProfileId_RU();
            this.setInventOwnerId_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId()
    {
        this.setAllInventoryDimensions();

        inventDim.InventDimId = InventDim::findOrCreate(this.currentRecord()).InventDimId;
        this.setFieldAsTouched(fieldNum(InventDim, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventGTDId_RU</Name>
				<Source><![CDATA[
    public void setInventGTDId_RU()
    {
        if (this.isFieldSet(fieldnum(InventDim, InventGtdId_RU)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventLocationId</Name>
				<Source><![CDATA[
    public void setInventLocationId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventLocationId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventOwnerId_RU</Name>
				<Source><![CDATA[
    public void setInventOwnerId_RU()
    {
        if (this.isFieldSet(fieldnum(InventDim, InventOwnerId_RU)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventProfileId_RU</Name>
				<Source><![CDATA[
    public void setInventProfileId_RU()
    {
        if (this.isFieldSet(fieldnum(InventDim, InventProfileId_RU)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSerialId</Name>
				<Source><![CDATA[
    public void setInventSerialId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventSerialId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSiteId</Name>
				<Source><![CDATA[
    public void setInventSiteId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(InventDim, InventSiteId)))
        {
            return;
        }

        // making sure InventLocationId is set, before setting the InventSiteId
        this.setInventLocationId();

        if (this.isFieldSet(fieldNum(InventDim, InventLocationId)))
        {
            this.parmInventSiteId(InventLocation::find(this.parmInventLocationId()).InventSiteId);
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventSizeId</Name>
				<Source><![CDATA[
    public void setInventSizeId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventSizeId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStatusId</Name>
				<Source><![CDATA[
    // Added Inventory Status Dimension
    public void setInventStatusId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventStatusId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>InventStyleId</c> field.
    /// </summary>
    public void setInventStyleId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventStyleId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventVersionId</Name>
				<Source><![CDATA[
    public void setInventVersionId()
    {
        if (this.isFieldSet(fieldNum(InventDim, InventVersionId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLicensePlateId</Name>
				<Source><![CDATA[
    // Added License Plate Dimension
    public void setLicensePlateId()
    {
        if (this.isFieldSet(fieldNum(InventDim, LicensePlateId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProductDimensionFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the dimensions for all product dimension fields.
    /// </summary>
    public void setProductDimensionFields()
    {
        ListEnumerator  enumerator          = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        FieldId         inventDimFieldId;

        while (enumerator.moveNext())
        {
            inventDimFieldId = enumerator.current();

            this.setDimFieldId(inventDimFieldId);
        }

        inventDim.InventDimId = InventDim::findOrCreate(this.currentRecord()).InventDimId;
        this.setFieldAsTouched(fieldNum(InventDim, InventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchPriceDiscFields</Name>
				<Source><![CDATA[
    public void setPurchPriceDiscFields(InventTable _inventTable)
    {
        InventDimGroupSetup     inventDimGroupSetup = InventDimGroupSetup::newInventTable(_inventTable);

        #InventDimDevelop
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, ConfigId), inventDimGroupSetup))
        {
            this.setConfigId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventSizeId), inventDimGroupSetup))
        {
            this.setInventSizeId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventColorId), inventDimGroupSetup))
        {
            this.setInventColorId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventStyleId), inventDimGroupSetup))
        {
            this.setInventStyleId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventVersionId), inventDimGroupSetup))
        {
            this.setInventVersionId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventBatchId), inventDimGroupSetup))
        {
            this.setInventBatchId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventSiteId), inventDimGroupSetup))
        {
            this.setInventSiteId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventLocationId), inventDimGroupSetup))
        {
            this.setInventLocationId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventSerialId), inventDimGroupSetup))
        {
            this.setInventSerialId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, wmsLocationId), inventDimGroupSetup))
        {
            this.setWMSLocationId();
        }
        // <GEERU>
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventGtdId_RU), inventDimGroupSetup))
        {
            this.setInventGTDId_RU();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventProfileId_RU), inventDimGroupSetup))
        {
            this.setInventProfileId_RU();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventOwnerId_RU), inventDimGroupSetup))
        {
            this.setInventOwnerId_RU();
        }
        // </GEERU>
        // Added License Plate & Inventory Status
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, LicensePlateId), inventDimGroupSetup))
        {
            this.setLicensePlateId();
        }
        if (InventDim::mustUseFieldPurchPriceDisc(fieldNum(InventDim, InventStatusId), inventDimGroupSetup))
        {
            this.setInventStatusId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesPriceDiscFields</Name>
				<Source><![CDATA[
    public void setSalesPriceDiscFields(InventTable _inventTable)
    {
        InventDimGroupSetup     inventDimGroupSetup = InventDimGroupSetup::newInventTable(_inventTable);

        #InventDimDevelop

        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, ConfigId), inventDimGroupSetup))
        {
            this.setConfigId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventSizeId), inventDimGroupSetup))
        {
            this.setInventSizeId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventColorId), inventDimGroupSetup))
        {
            this.setInventColorId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventStyleId), inventDimGroupSetup))
        {
            this.setInventStyleId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventVersionId), inventDimGroupSetup))
        {
            this.setInventVersionId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventBatchId), inventDimGroupSetup))
        {
            this.setInventBatchId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventSiteId), inventDimGroupSetup))
        {
            this.setInventSiteId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventLocationId), inventDimGroupSetup))
        {
            this.setInventLocationId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventSerialId), inventDimGroupSetup))
        {
            this.setInventSerialId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, wmsLocationId), inventDimGroupSetup))
        {
            this.setWMSLocationId();
        }
        // <GEERU>
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventGtdId_RU), inventDimGroupSetup))
        {
            this.setInventGTDId_RU();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventProfileId_RU), inventDimGroupSetup))
        {
            this.setInventProfileId_RU();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventOwnerId_RU), inventDimGroupSetup))
        {
            this.setInventOwnerId_RU();
        }
        // </GEERU>
        // Added License Plate & Inventory Status
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, LicensePlateId), inventDimGroupSetup))
        {
            this.setLicensePlateId();
        }
        if (InventDim::mustUseFieldSalesPriceDisc(fieldNum(InventDim, InventStatusId), inventDimGroupSetup))
        {
            this.setInventStatusId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    protected void setTableFields()
    {
        super();

        useMapPolicy = false;

        this.setInventDimId();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWMSLocationId</Name>
				<Source><![CDATA[
    public void setWMSLocationId()
    {
        if (this.isFieldSet(fieldNum(InventDim, wmsLocationId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    protected void write()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxInventDim construct()
    {
        return new AxInventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyNonEmptyProductDimensions</Name>
				<Source><![CDATA[
    private static void copyNonEmptyProductDimensions(InventDim _target, InventDim _defaultDim)
    {
        InventDimensionEnumerator enum = InventProductDimension::getEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldId = enum.currentInventDimFieldId();
            if (!_target.(fieldId))
            {                
                _target.(fieldId) = _defaultDim.(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimQuery</Name>
				<Source><![CDATA[
    private static Query inventDimQuery(InventTable _inventTable)
    {
        Query query = new Query();

        QueryBuildDataSource qbdsInventDimCombination = query.addDataSource(tableNum(InventDimCombination));
        qbdsInventDimCombination.firstOnly(true);
        qbdsInventDimCombination.addSelectionField(fieldNum(InventTransOrigin, TableId));
        qbdsInventDimCombination.addRange(fieldNum(InventDimCombination, ItemId)).value(queryValue(_inventTable.ItemId));

        QueryBuildDataSource qbdsInventDim = qbdsInventDimCombination.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFromActiveInventDimCombination</Name>
				<Source><![CDATA[
    private static InventDim inventDimFromActiveInventDimCombination(InventTable _inventTable)
    {
        Query query = AxInventDim::inventDimQuery(_inventTable);
        QueryBuildDataSource qbdsInventDim = query.dataSourceTable(tableNum(InventDim));

        Enumerator enum = InventProductDimension::getEnumerator();
        while (enum.moveNext())
        {
            InventProductDimension productDim = enum.current() as InventProductDimension;
            FieldId fieldId = productDim.parmInventDimFieldId();
            if (productDim.isActiveForItem(_inventTable))
            {
                qbdsInventDim.addRange(fieldId).value(SysQuery::valueNot(InventDim::emptyDimField(fieldId)));
            }
            else
            {
                qbdsInventDim.addRange(fieldId).value(queryValue(InventDim::emptyDimField(fieldId)));
            }
        }

        InventDim inventDim;
        QueryRun queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            inventDim = queryRun.get(tableNum(InventDim));
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFromAnyInventDimCombination</Name>
				<Source><![CDATA[
    private static InventDim inventDimFromAnyInventDimCombination(InventTable _inventTable)
    {
        Query query = AxInventDim::inventDimQuery(_inventTable);

        InventDim inventDim;
        QueryRun queryRun = new QueryRun(query);
        if (queryRun.next())
        {
            inventDim = queryRun.get(tableNum(InventDim));
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    For internal use only. Finds a valid inventory dimension, that is, a <c>inventDim</c> record, for a
    ///    particular item.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item for which to find an inventory dimension.
    /// </param>
    /// <param name="_useInventDimCombination">
    ///    A Boolean value that determines whether to verify that the inventory dimension exists; optional.
    /// </param>
    /// <returns>
    ///    A container that holds the following elements:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>A Boolean value that indicates whether dimensions are active for the
    ///          item.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             A record of the <c>InventDim</c> table.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>A Boolean value that indicates whether the inventory dimension returned is a dirty
    ///          save. A dirty save is save that is not according to the item default values.</description>
    ///       </item>
    ///    </list>
    /// </returns>
    /// <remarks>
    ///    The <c>findInventDim</c> method that is used to populate inventory dimension ID, that is, a
    ///    <c>inventDimId</c> value, fields before the inventory dimension is processed. If there are no
    ///    default values set up on the item, any valid <c>inventDim</c> is selected, and the sales line
    ///    <c>inventDimId</c> field is marked as dirty saved until a valid <c>inventDim</c> record is found
    ///    through the <c>inventDim</c> section of the XML.The <c>findInventDim</c> method is only for
    ///    internal use. Do not call it through the interface.
    /// </remarks>
    public static container findInventDim(ItemId _itemId, boolean _useInventDimCombination = false)
    {
        InventDim  inventDim;
        boolean    dimensionsActive;
        boolean    dirtySaved;

        InventTable inventTable = InventTable::find(_itemId);
        
        if (_useInventDimCombination)
        {
            if (inventTable.hasProductDimensions())
            {
                dimensionsActive = true;
                inventDim = AxInventDim::inventDimFromActiveInventDimCombination(inventTable);
            }
        }
        else
        {
            Enumerator enum = InventProductDimension::getEnumerator();
            while (enum.moveNext())
            {
                InventProductDimension productDim = enum.current() as InventProductDimension;
                boolean isActive = productDim.isActiveForItem(inventTable);
                if (isActive)
                {
                    dimensionsActive = true;

                    FieldId fieldId = productDim.parmInventDimFieldId();
                    inventDim.(fieldId) = productDim.parmDefaultValueForItem(inventTable);

                    if (!inventDim.(fieldId))
                    {
                        dirtySaved = true;
                    }
                }
            }

            if (dimensionsActive)
            {
                if (dirtySaved)
                {
                    InventDim inventDimFromInventDimCombination = AxInventDim::inventDimFromAnyInventDimCombination(inventTable);
                    AxInventDim::copyNonEmptyProductDimensions(inventDim, inventDimFromInventDimCombination);
                }

                inventDim = InventDim::findOrCreate(inventDim);

                if (dirtySaved && !InventDimCombination::existByInventDim(_itemId, inventDim))
                {
                    inventDim = AxInventDim::inventDimFromActiveInventDimCombination(inventTable);
                }
            }
        }
        return  [dimensionsActive, inventDim, dirtySaved];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used for finding legal inventory dimension containing site an warehouse if multi site is activade and
    /// active item dimesions for the item.
    /// </summary>
    /// <param name="_inventTable">
    /// The current inventTableRecord.
    /// </param>
    /// <param name="_useInventDimCombination">
    /// Use inventory dimension combination when finding valid item dimensions for the inventory dimension.
    /// If not specified, the default settings are used.
    /// </param>
    /// <param name="_inventSiteId">
    /// A preferred inventory site ID to be used.
    /// </param>
    /// <returns>
    /// A container.
    /// element 1: boolean. Does any of the inventory dimensions need to be filled in for finding legal inventDimId.
    /// element 2: InventDim table. The found legal inventory dimension for the item.
    /// element 3: boolean. Is any of the inventory dimensions found not using the setup for the item.
    /// </returns>
    public static container findInventDimInventTable(InventTable    _inventTable,
                                                     boolean        _useInventDimCombination = false,
                                                     InventSiteId   _inventSiteId = '')
    {
        container               findInventDimResult;
        boolean                 dimensionsActive;
        boolean                 dirtySaved, siteDirty, warehouseDirty;
        boolean                 warehouseMandatory;
        InventDim               inventDim;
        InventSiteId            inventSiteId;
        InventLocationId        inventLocationId;

        findInventDimResult = AxInventDim::findInventDim(_inventTable.ItemId,_useInventDimCombination);
        dimensionsActive    = conPeek(findInventDimResult,1);
        inventDim           = conPeek(findInventDimResult,2);
        dirtySaved          = conPeek(findInventDimResult,3);

        inventSiteId = _inventSiteId ? _inventSiteId : _inventTable.inventInventSiteId();

        if (!inventSiteId)
        {
            inventLocationId = InventParameters::find().FallbackInventLocationId;
            inventSiteId     = InventLocation::find(inventLocationId).InventSiteId;
            siteDirty        = true;
            warehouseDirty   = true;
        }
        else
        {
            warehouseMandatory = EcoResDimensionGroupSetup::isWarehouseDimensionMandatoryForItem(_inventTable.ItemId);
            if (warehouseMandatory)
            {
                inventDim.InventSiteId     = inventSiteId;
                inventDim = InventDim::findOrCreate(inventDim);

                inventLocationId = _inventTable.inventLocationId('',inventDim.InventDimId,inventSiteId);
                if (!inventLocationId)
                {
                    inventLocationId = InventFallbackWarehouse::transportWarehouse(inventSiteId);
                    warehouseDirty   = true;
                }
            }
        }

        inventDim.InventSiteId     = inventSiteId;
        inventDim.InventLocationId = inventLocationId;
        inventDim = InventDim::findOrCreate(inventDim);

        dimensionsActive = true;
        dirtySaved = (dirtySaved || siteDirty || warehouseDirty);

        return  [dimensionsActive, inventDim, dirtySaved];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventDim</Name>
				<Source><![CDATA[
    public static AxInventDim newInventDim(InventDim _inventDim)
    {
        AxInventDim axInventDim = AxInventDim::construct();

        axInventDim.inventDim(_inventDim);

        return axInventDim;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
