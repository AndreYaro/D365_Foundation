<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISHelper_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EGAISHelper_RU</c> class contains most commonly used functionality for working with EGAIS documents.
/// </summary>
public class EGAISHelper_RU
{
    public static const str Confirm = 'Confirm';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canInventTransBeSplit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the inventory transaction related to the EGAIS item can be split.
    /// </summary>
    /// <param name="_inventTrans">
    ///    Inventory transaction to validate.
    /// </param>
    /// <returns>
    ///    true, if the inventory transaction can be split; otherwise, false.
    /// </returns>
    public static boolean canInventTransBeSplit(InventTrans _inventTrans)
    {
        InventTransOrigin inventTransOrigin = _inventTrans.inventTransOrigin();
        boolean ret = true;

        if (   (   inventTransOrigin.ReferenceCategory == InventTransType::Purch
                && _inventTrans.StatusReceipt == StatusReceipt::Registered
                && EGAISWaybillSettlement_RU::existsSettlement(PurchLine::findInventTransId(inventTransOrigin.InventTransId)))
            || (   inventTransOrigin.ReferenceCategory == InventTransType::Sales
                && EGAISWaybillSettlement_RU::existsSettlement(_inventTrans)))
        {
            ret = checkFailed("@EGAIS:InventoryTransactionCannotBeSplitBecauseItIsUsedIn");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarksQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Compares the quantity of alcohol production with the quantity of excise marks corresponding to this production.
    /// </summary>
    /// <param name="_qty">
    /// Quantity of alcohol production with excise marks.
    /// </param>
    /// <param name="_refTableId">
    /// TableId of the table record to which the marks are attached.
    /// </param>
    /// <param name="_refRecId">
    /// RecId of the table record to which the marks are attached.
    /// </param>
    /// <returns>
    /// true, if the quantity of alcohol production is equal the quantity of excise marks corresponding to this production; otherwise, false.
    /// </returns>
    public static boolean checkMarksQty(
        Qty         _qty,
        RefTableId  _refTableId,
        RefRecId    _refRecId)
    {
        boolean                 ret = false;
        EGAISMark_RU            mark;
        EGAISMarkReference_RU   markReference;

        select count(RecId) from mark
        exists join markReference
            where markReference.Mark        == mark.RecId
                && markReference.RefTableId == _refTableId
                && markReference.RefRecId   == _refRecId;

        if (mark.RecId)
        {
            ret = mark.RecId == _qty ? 
                true:
                checkFailed(strFmt("@EGAIS:QuantityOfPackedProductMustBeEqualToTheNumberOfMar", any2int(_qty), mark.RecId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyByINNKPP</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds AX party based on INN, KPP and date.
    /// </summary>
    /// <param name="_inn">
    ///    INN of the AX party.
    /// </param>
    /// <param name="_kpp">
    ///    KPP of the AX party.
    /// </param>
    /// <param name="_transDate">
    ///    Date on which the determining is performed.
    /// </param>
    /// <returns>
    ///    RecId of the party having specified INN and KPP on the particular date.
    /// </returns>
    public static DirPartyRecId getPartyByINNKPP(
        INN_RU     _inn,
        KPPU_RU    _kpp,
        TransDate  _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        TaxRegistration                 taxRegistrationINN, taxRegistrationKPP;
        TaxRegistrationLegislationTypes legislationTypeINN, legislationTypeKPP;
        DirPartyLocation                dirPartyLocation;
        DirPartyView                    dirPartyView;

        if (_kpp)
        {
            select firstonly validTimeState(_transDate) TableId from taxRegistrationINN
                where taxRegistrationINN.RegistrationNumber == _inn
            join Party from dirPartyLocation
                where dirPartyLocation.RecId == taxRegistrationINN.DirPartyLocation
            exists join dirPartyView
                where dirPartyView.Party == dirPartyLocation.Party
                   && (   dirPartyView.RoleType == DirPartyRoleType::Customer
                       || dirPartyView.RoleType == DirPartyRoleType::Vendor)
            exists join legislationTypeINN
                where legislationTypeINN.TaxRegistrationTypeApplicabilityRule == taxRegistrationINN.TaxRegistrationTypeApplicabilityRule
                   && legislationTypeINN.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
            exists join taxRegistrationKPP
                where taxRegistrationKPP.DirPartyLocation   == taxRegistrationINN.DirPartyLocation
                   && taxRegistrationKPP.RegistrationNumber == _kpp
            exists join legislationTypeKPP
                where legislationTypeKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                    && legislationTypeKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;
        }
        else
        {
            select firstonly validTimeState(_transDate) TableId from taxRegistrationINN
                where taxRegistrationINN.RegistrationNumber == _inn
            join Party from dirPartyLocation
                where dirPartyLocation.RecId == taxRegistrationINN.DirPartyLocation
            exists join dirPartyView
                where dirPartyView.Party == dirPartyLocation.Party
                   && (   dirPartyView.RoleType == DirPartyRoleType::Customer
                       || dirPartyView.RoleType == DirPartyRoleType::Vendor)
            exists join legislationTypeINN
                where legislationTypeINN.TaxRegistrationTypeApplicabilityRule == taxRegistrationINN.TaxRegistrationTypeApplicabilityRule
                   && legislationTypeINN.TaxRegistrationTypesList             == TaxRegistrationTypesList::INN
            notexists join taxRegistrationKPP
                where taxRegistrationKPP.DirPartyLocation   == taxRegistrationINN.DirPartyLocation
            exists join legislationTypeKPP
                where legislationTypeKPP.TaxRegistrationTypeApplicabilityRule == taxRegistrationKPP.TaxRegistrationTypeApplicabilityRule
                    && legislationTypeKPP.TaxRegistrationTypesList             == TaxRegistrationTypesList::KPP;
        }

        return dirPartyLocation.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if inventory transaction satisfies the EGAIS requirements on receipt or issue.
    /// </summary>
    /// <param name="_inventTrans">
    ///    Inventory transaction to be validated.
    /// </param>
    /// <returns>
    ///    true, if the inventory transaction satisfies the EGAIS requirements; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    According to the EGAIS requirements we have to account for the alcohol production in the context of Certificates B.
    ///    So we have to validate if the inventory transactions containing EGAIS items have corresponding batch numbers which
    ///    in turn are assigned to Certificates B.
    /// </remarks>
    public static boolean validateInventTrans(InventTrans  _inventTrans)
    {
        boolean                     ret = true;
        EGAISParameters_RU          egaisParameters;
        InventDirection             direction;
        InventDim                   inventDim = _inventTrans.inventDim();
        EGAISInformB_RU             informB;
        EGAISAlcoholProduction_RU   alcoholProduction = EGAISAlcoholProduction_RU::findByItemDimensions(
            _inventTrans.ItemId,
            inventDim.configId,
            inventDim.InventSizeId,
            inventDim.InventColorId,
            inventDim.InventStyleId,
            inventDim.InventVersionId);

        if (alcoholProduction)
        {
            egaisParameters = EGAISParameters_RU::find();
            direction       = _inventTrans.direction();

            if (   (direction == InventDirection::Receipt && egaisParameters.ValidateInformBonReceipt)
                || (direction == InventDirection::Issue   && egaisParameters.ValidateInformBonIssue))
            {
                if (!_inventTrans.inventTable().isItemBatchActivated())
                {
                    ret = checkFailed(strFmt("@EGAIS:MustBeAnActiveInventoryDimensionForTheItem", "@SYS53635", _inventTrans.ItemId));
                }

                if (ret && !inventDim.inventBatchId)
                {
                    ret = checkFailed(strFmt("@EGAIS:FieldMustBeFilledInForTheItem", "@SYS53635", _inventTrans.ItemId));
                }

                informB = EGAISInformB_RU::findByItemBatchDirection(_inventTrans.ItemId, inventDim.InventBatchId, EGAISDocumentDirection_RU::Incoming);

                if (ret && !informB)
                {
                    ret = checkFailed(strFmt("@EGAIS:CertificateBHasNotBeenFoundForTheBatchNumber", inventDim.inventBatchId));
                }

                if (ret && informB.informA().AlcoholProduction != alcoholProduction.RecId)
                {
                    ret = checkFailed(strFmt("@EGAIS:EgaisAlcoholProductInTheCertificateBAndInventoryTr", inventDim.inventBatchId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>