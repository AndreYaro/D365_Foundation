<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the filter functionality
/// </summary>
class WhsFilter
{
    WHSParameters       whsParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBestMatch</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds the best filter match for an item group.
	/// </summary>
	/// <param name="_tableId">
	/// Filter group table id.
	/// </param>
	/// <param name="_itemGroupId">
	/// Item group id.
	/// </param>
	/// <param name="_whsFilterCodeToMatch">
	/// Array contains the filter codes to be matched.
	/// </param>
	/// <param name="_whsFilterRequired">
	/// Array contains if the match is requried for particular filter code.
	/// </param>
	/// <returns>
	/// The best filter match of an item group.
	/// </returns>
    WHSFilterTable findBestMatch(TableId            _tableId,
                                 ItemGroupId        _itemGroupId,
                                 WHSFilterCode      _whsFilterCodeToMatch,
                                 WHSFilterRequired  _whsFilterRequired)
    {
        WHSFilterTable  whsFilterTable;
        WHSFilter       whsFilter = new WHSFilter();
        RecId           recId;

        recId = whsFilter.recurseFilterQuery(_tableId,
                                             1,
                                             _itemGroupId,
                                             _whsFilterCodeToMatch,
                                             _whsFilterRequired);

        if (recId)
        {
            select firstonly whsFilterTable
                where whsFilterTable.RecId == recId;
        }

        return whsFilterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFilterMatch</Name>
				<Source><![CDATA[
	/// <summary>
	/// Finds a filter that matches with the filter code setup of an inventory item.
	/// </summary>
	/// <param name="_tableId">
	/// Determines table id of which group owns the filter.
	/// </param>
	/// <param name="_recId">
	/// Determines the record id of the owner of the filter.
	/// </param>
	/// <param name="_itemId">
	/// Item id.
	/// </param>
	/// <returns>
	/// The filter that is matched with settings.
	/// </returns>
    public WHSFilterTable findFilterMatch(TableId _tableId, RecId _recId, ItemId _itemId)
    {
        WHSInventTable          whsInventTable;
        WHSFilterTable          filterTable;
        WHSFilterRequired       filterRequired;
        ItemGroupId             itemGroupId;

        if (!WHSInventEnabled::exist(_itemId))
        {
            return filterTable;
        }

        itemGroupId = InventTable::find(_itemId).itemGroupId();

        filterRequired = WHSFilterParm::find(itemGroupId).FilterRequired;

        select firstonly ItemId from whsInventTable
            join filterTable
            where whsInventTable.ItemId      == _itemId          &&
                  filterTable.RefTableId     == _tableId         &&
                  filterTable.RefRecId       == _recId           &&
                 (filterTable.FromDateTime   == utcDateTimeNull()       ||
                  filterTable.FromDateTime   <= DateTimeUtil::utcNow()) &&
                 (filterTable.ToDateTime     == utcDateTimeNull()       ||
                  filterTable.ToDateTime     >= DateTimeUtil::utcNow()) &&
                  filterTable.ItemGroupId    == itemGroupId      &&
                  #WHSFiltersMatch(filterRequired, filterTable.FilterCode, whsInventTable.FilterCode, whsParameters.FilterWildcard);

        return filterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFilterMatch</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if there is a filter match for a vendor or customer.
	/// </summary>
	/// <param name="_tableId">
	/// The table id, that can be customer or vendor table.
	/// </param>
	/// <param name="_recId">
	/// The record id, that can be customer record or vendor record.
	/// </param>
	/// <param name="_itemId">
	/// The item id.
	/// </param>
	/// <returns>
	/// True if there is a filter match, false otherwise.
	/// </returns>
    protected boolean isFilterMatch(TableId _tableId, RecId _recId, ItemId _itemId)
    {
        WHSInventTable          whsInventTable;
        WHSFilterTable          whsFilterTable;
        WHSFilterRequired       whsFilterRequired;
        ItemGroupId             itemGroupId;

        if ((_tableId == tableNum(CustTable)    ||
             _tableId == tableNum(CustGroup))   &&
            !whsParameters.EnableCustFilters)
        {
            return true;
        }
        else if ((_tableId == tableNum(VendTable)   ||
                  _tableId == tableNum(VendGroup))  &&
                 !whsParameters.EnableVendFilters)
        {
            return true;
        }

        itemGroupId = InventTable::find(_itemId).itemGroupId();

        whsFilterRequired = WHSFilterParm::find(itemGroupId).FilterRequired;

        select firstonly ItemId from whsInventTable
            join RecId from whsFilterTable
            where whsInventTable.ItemId         == _itemId          &&
                  whsFilterTable.RefTableId     == _tableId         &&
                  whsFilterTable.RefRecId       == _recId           &&
                 (whsFilterTable.FromDateTime   == utcDateTimeNull()       ||
                  whsFilterTable.FromDateTime   <= DateTimeUtil::utcNow()) &&
                 (whsFilterTable.ToDateTime     == utcDateTimeNull()       ||
                  whsFilterTable.ToDateTime     >= DateTimeUtil::utcNow()) &&
                  whsFilterTable.ItemGroupId    == itemGroupId      &&
                  #WHSFiltersMatch(WHSFilterRequired, WHSFilterTable.FilterCode, WHSInventTable.FilterCode, whsParameters.FilterWildCard);

        return whsFilterTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        whsParameters = WHSParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recurseFilterQuery</Name>
				<Source><![CDATA[
	/// <summary>
	/// Recursively searches for a filter that is best match for item group.
	/// </summary>
	/// <param name="_tableId">
	/// Filter group table id.
	/// </param>
	/// <param name="_arrayIdx">
	/// Current index of the array in the recursive calls.
	/// </param>
	/// <param name="_itemGroupId">
	/// Item group id.
	/// </param>
	/// <param name="_whsFilterCodeToMatch">
	/// Array contains filter codes to be matched.
	/// </param>
	/// <param name="_whsFilterRequired">
	/// Array contains boolean values that represents if the filter code is required.
	/// </param>
	/// <returns>
	/// The id of the matched <c>WHSFilterTable</c> record.
	/// </returns>
    RecId recurseFilterQuery(TableId            _tableId,
                             ArrayIdx           _arrayIdx,
                             ItemGroupId        _itemGroupId,
                             WHSFilterCode      _whsFilterCodeToMatch,
                             WHSFilterRequired  _whsFilterRequired)
    {
        WHSFilterTable  whsFilterTable;
        WHSFilterCode   whsFilterCode;
        WHSFilter       whsFilter;
        RecId           recId;

        if (_arrayIdx > dimOf(_whsFilterCodeToMatch))
        {
            select firstonly RecId from whsFilterTable
                where whsFilterTable.RefTableId     == _tableId         &&
                      (whsFilterTable.FromDateTime  == utcDateTimeNull()       ||
                       whsFilterTable.FromDateTime  <= DateTimeUtil::utcNow()) &&
                      (whsFilterTable.ToDateTime    == utcDateTimeNull()       ||
                       whsFilterTable.ToDateTime    >= DateTimeUtil::utcNow()) &&
                      #WHSFilterBestMatch(_itemGroupId, _whsFilterRequired, whsFilterTable, _whsFilterCodeToMatch);

            return whsFilterTable.RecId;
        }

        whsFilter = new WHSFilter();
        recId = whsFilter.recurseFilterQuery(_tableId, _arrayIdx+1, _itemGroupId,
                                    _whsFilterCodeToMatch, _whsFilterRequired);

        if (recId || _whsFilterRequired[_arrayIdx] == NoYes::No)
        {
            return recId;
        }

        whsFilterCode = _whsFilterCodeToMatch;
        whsFilterCode[_arrayIdx] = whsParameters.FilterWildcard;

        recId = whsFilter.recurseFilterQuery(_tableId,
                                             _arrayIdx + 1,
                                             _itemGroupId,
                                             whsFilterCode,
                                             _whsFilterRequired);

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custFilterMatch</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if there is a customer filter match for an item.
	/// </summary>
	/// <param name="_custAccount">
	/// Customer account.
	/// </param>
	/// <param name="_itemId">
	/// Id of the item that is searched for a filter match.
	/// </param>
	/// <returns>
	/// True if there is a filter match.
	/// </returns>
    static boolean custFilterMatch(CustAccount  _custAccount,
                                   ItemId       _itemId)
    {
        WHSFilter                   whsFilter;
        WHSFilterTable              whsFilterTable;
        WHSFilterGenerallyAvail     whsFilterGenerallyAvail;
        CustTable                   custTable;
        CustGroup                   custGroup;

        if (!WHSInventEnabled::exist(_itemId))
        {
            return true;
        }

        whsFilter = new WHSFilter();

        if (whsFilter.isFilterMatch(whsFilterGenerallyAvail.TableId, enum2int(WHSFilterModule::Customer), _itemId))
        {
            return true;
        }

        if (whsFilter.isFilterMatch(whsFilterGenerallyAvail.TableId, enum2int(WHSFilterModule::All), _itemId))
        {
            return true;
        }

        custTable = CustTable::find(_custAccount);

        select firstonly whsFilterTable
            where whsFilterTable.RefTableId == custTable.TableId &&
                  whsFilterTable.RefRecId   == custTable.RecId;

        if (whsFilterTable)
        {
            return whsFilter.isFilterMatch(custTable.TableId, custTable.RecId, _itemId);
        }

        custGroup = CustGroup::find(custTable.CustGroup);

        return whsFilter.isFilterMatch(custGroup.TableId, custGroup.RecId, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderFilterMatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that all warehouse enabled items on a given order match up with the corresponding customer/vendor filters.
    /// </summary>
    /// <param name="_custVendAC">
    ///     The customer or vendor account number.
    /// </param>
    /// <param name="_orderNum">
    ///     The order number.
    /// </param>
    /// <param name="_moduleCustVend">
    ///     The module for the provided order.
    /// </param>
    /// <returns>
    ///     Returns true if the filters match up successfully.
    /// </returns>
    public static boolean orderFilterMatch(
        CustVendAC      _custVendAC,
        Num             _orderNum,
        ModuleCustVend  _moduleCustVend)
    {
        boolean             ret = true;
        SalesLine           salesLine;
        PurchLine           purchLine;
        WHSInventEnabled    whsInventEnabled;

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            switch (_moduleCustVend)
            {
                case ModuleCustVend::Cust:
                    if (WHSParameters::find().EnableCustFilters)
                    {
                        while select ItemId from salesLine
                            where salesLine.SalesId         == _orderNum
                            exists join whsInventEnabled
                            where whsInventEnabled.ItemId   == salesLine.ItemId
                        {
                            if (!WHSFilter::custFilterMatch(_custVendAC, salesLine.ItemId))
                            {
                                error(strFmt("@WAX3412", salesLine.ItemId));
                                ret = false;
                            }
                        }
                    }
                    break;
                case ModuleCustVend::Vend:
                    if (WHSParameters::find().EnableVendFilters)
                    {
                        while select ItemId from purchLine
                            where purchLine.PurchId         == _orderNum
                            exists join whsInventEnabled
                            where whsInventEnabled.ItemId   == purchLine.ItemId
                        {
                            if (!WHSFilter::vendFilterMatch(_custVendAC, purchLine.ItemId))
                            {
                                error(strFmt("@WAX3413", purchLine.ItemId));
                                ret = false;
                            }
                        }
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendFilterMatch</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if there is a vendor filter match for an item.
	/// </summary>
	/// <param name="_vendAccount">
	/// Vendor account.
	/// </param>
	/// <param name="_itemId">
	/// Id of the item that is searched for a filter match.
	/// </param>
	/// <returns>
	/// True if there is a filter match.
	/// </returns>
    static boolean vendFilterMatch(VendAccount  _vendAccount,
                                   ItemId       _itemId)
    {
        WHSFilter                   whsFilter;
        WHSFilterTable              whsFilterTable;
        WHSFilterGenerallyAvail     whsFilterGenerallyAvail;
        VendTable                   vendTable;
        VendGroup                   vendGroup;

        if (!WHSInventEnabled::exist(_itemId))
        {
            return true;
        }

        whsFilter = new WHSFilter();

        if (whsFilter.isFilterMatch(whsFilterGenerallyAvail.TableId, enum2int(WHSFilterModule::Vendor), _itemId))
        {
            return true;
        }

        if (whsFilter.isFilterMatch(whsFilterGenerallyAvail.TableId, enum2int(WHSFilterModule::All), _itemId))
        {
            return true;
        }

        vendTable = VendTable::find(_vendAccount);

        select firstonly whsFilterTable
            where whsFilterTable.RefTableId == vendTable.TableId &&
                  whsFilterTable.RefRecId   == vendTable.RecId;

        if (whsFilterTable)
        {
            return whsFilter.isFilterMatch(vendTable.TableId, vendTable.RecId, _itemId);
        }

        vendGroup = VendGroup::find(vendTable.VendGroup);

        return whsFilter.isFilterMatch(vendGroup.TableId, vendGroup.RecId, _itemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>