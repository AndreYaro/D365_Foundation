<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventoryLevelProfileHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailInventoryLevelProfileHelper</c> class handles data for setting up retail inventory level profile.
/// </summary>
internal class RetailInventoryLevelProfileHelper
{
    internal const str OutOfStockLevelCode = 'OOS';
    internal const str OutOfStockLevelInitialLabel = "@RetailInventory:InventoryLevelProfileRangeOutOfStockLevelInitialLabel";
    internal const real OutOfStockLevelLowerBound = -99999999;

    internal const str AvailableLevelCode = 'AVAIL';
    internal const str AvailableLevelInitialLabel = "@RetailInventory:InventoryLevelProfileRangeAvailableLevelInitialLabel";
    internal const real AvailableLevelUpperBound = 99999999;

    internal const real DefaultBound = 0;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initOutOfStockLevelprocessingRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates initial record for out of stock level.
    /// </summary>
    /// <param name = "profileId">Retail inventory level profile ID</param>
    internal static void initOutOfStockLevelprocessingRange(RetailInventoryLevelProfileId profileId)
    {
        RetailInventoryLevelProfileProcessingRange processingRange;

        ttsbegin;

        processingRange.initValue();
        processingRange.ProfileId = profileId;
        processingRange.Code = OutOfStockLevelCode;
        processingRange.Label = OutOfStockLevelInitialLabel;
        processingRange.LowerBoundExclusive = OutOfStockLevelLowerBound;
        processingRange.UpperBoundInclusive = DefaultBound;
        processingRange.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAvailableLevelprocessingRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates initial record for available level.
    /// </summary>
    /// <param name = "profileId">Retail inventory level profile ID</param>
    internal static void initAvailableLevelprocessingRange(RetailInventoryLevelProfileId profileId)
    {
        RetailInventoryLevelProfileProcessingRange processingRange;

        ttsbegin;

        processingRange.initValue();
        processingRange.ProfileId = profileId;
        processingRange.Code = AvailableLevelCode;
        processingRange.Label = AvailableLevelInitialLabel;
        processingRange.LowerBoundExclusive = DefaultBound;
        processingRange.UpperBoundInclusive = AvailableLevelUpperBound;
        processingRange.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateprocessingRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the group of processing ranges under given retail inventory level profile.
    /// </summary>
    /// <param name = "_profileId">Retail inventory level profile ID</param>
    /// <returns>True if all ranges are valid, false if there is overlapping or gap between ranges.</returns>
    internal static boolean validateprocessingRanges(RetailInventoryLevelProfileId _profileId)
    {
        boolean ret = true;

        RetailInventoryLevelProfileProcessingRange processingRange;
        real lastUpperBound = OutOfStockLevelLowerBound;

        while select processingRange
            order by processingRange.UpperBoundInclusive
                where processingRange.ProfileId == _profileId
        {
            if (processingRange.LowerBoundExclusive != lastUpperBound)
            {
                return checkFailed("@RetailInventory:InventoryLevelProfileRangeInvalidContinuity");
            }

            lastUpperBound = processingRange.UpperBoundInclusive;
        }

        if (lastUpperBound != AvailableLevelUpperBound)
        {
            return checkFailed("@RetailInventory:InventoryLevelProfileRangeInvalidContinuity");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRangesFromProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies retail inventory level profile ranges from processing table to regular table for given retail inventory level profile.
    /// </summary>
    /// <param name = "_profileId">Retail inventory level profile ID</param>
    internal static void copyRangesFromProcessing(RetailInventoryLevelProfileId _profileId)
    {
        RetailInventoryLevelProfileRange range;
        RetailInventoryLevelProfileProcessingRange processingRange;
        
        ttsbegin;

        // update ranges referred by processing ranges
        update_recordset range
            setting
                UpperBoundInclusive = processingRange.UpperBoundInclusive,
                Label = processingRange.Label,
                Code = processingRange.Code
            where range.ProfileId == _profileId
            join UpperBoundInclusive, Label, Code from processingRange
                where processingRange.RetailInventoryLevelProfileRangeRecId == range.RecId;
            
        // delete ranges no longer referred by processing ranges
        delete_from range
            where range.ProfileId == _profileId
            notexists join processingRange
                where processingRange.RetailInventoryLevelProfileRangeRecId == range.RecId;

        // insert new ranges from processing ranges
        insert_recordset range (ProfileId, UpperBoundInclusive, Label, Code)
            select ProfileId, UpperBoundInclusive, Label, Code from processingRange
                where processingRange.RetailInventoryLevelProfileRangeRecId == 0 
                    && processingRange.ProfileId == _profileId;

        // update RetailInventoryLevelProfileRangeRecId for new processing ranges
        update_recordset processingRange
            setting
                RetailInventoryLevelProfileRangeRecId = range.RecId
            where processingRange.ProfileId == _profileId
                && processingRange.RetailInventoryLevelProfileRangeRecId == 0
            join RecId from range
                where range.ProfileId == processingRange.ProfileId
                    && range.Code == processingRange.Code;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRangesToProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies retail inventory level profile ranges from regular table to processing table for given retail inventory level profile.
    /// </summary>
    /// <param name = "_profileId">Retail inventory level profile ID</param>
    internal static void copyRangesToProcessing(RetailInventoryLevelProfileId _profileId)
    {
        RetailInventoryLevelProfileRange range;
        RetailInventoryLevelProfileProcessingRange processingRange;
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(RetailInventoryLevelProfileProcessingRange));
        real lastUpperBound = OutOfStockLevelLowerBound;

        // create new processing ranges - dump from real table
        while select range
            order by range.UpperBoundInclusive
                where range.ProfileId == _profileId
        {
            processingRange.clear();
            processingRange.ProfileId = range.ProfileId;
            processingRange.LowerBoundExclusive = lastUpperBound;
            processingRange.UpperBoundInclusive = range.UpperBoundInclusive;
            processingRange.Code = range.Code;
            processingRange.Label = range.Label;
            processingRange.RetailInventoryLevelProfileRangeRecId = range.RecId;

            recordInsertList.add(processingRange);

            lastUpperBound = range.UpperBoundInclusive;
        }

        // clear old processing ranges
        delete_from processingRange
            where processingRange.ProfileId == _profileId;
        
        ttsbegin;
        recordInsertList.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear ranges from regular table and related translation texts for given retail inventory level profile.
    /// </summary>
    /// <param name = "_profileId">Retail inventory level profile ID</param>
    internal static void clearRanges(RetailInventoryLevelProfileId _profileId)
    {
        RetailInventoryLevelProfileRange range;
        LanguageTxt txt;

        ttsbegin;

        delete_from txt
            exists join range
                where range.RecId == txt.TxtRecId 
                    && range.TableId == txt.TxtTableId
                    && range.ProfileId == _profileId;
            
        delete_from range
            where range.ProfileId == _profileId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearprocessingRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear ranges from processing table for given retail inventory level profile.
    /// </summary>
    /// <param name = "_profileId">Retail inventory level profile ID</param>
    internal static void clearprocessingRanges(RetailInventoryLevelProfileId _profileId)
    {
        RetailInventoryLevelProfileProcessingRange processingRange;

        delete_from processingRange
            where processingRange.ProfileId == _profileId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>