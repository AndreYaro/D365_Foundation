<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdUpdStatusDecrease_Finished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdUpdStatusDecrease_Finished</c> class is used for changing production statuses.
/// </summary>
/// <remarks>
/// When a production order has the status 'Reported as Finished', and the decrease status is run, then
/// an instance of this class will be created.
/// </remarks>
[ProdStatusFactory(ProdStatus::ReportedFinished)]
class ProdUpdStatusDecrease_Finished extends ProdUpdStatusDecrease
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the results of reporting a production order as Finished.
    /// </summary>
    void cleanUp()
    {
        ProdBOM prodBOM;
        PmfProdCoBy      pmfProdCoByProduct;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && !prodTable.isProdStatusDecreasable_IN())
        {
            throw error("@SYP4986059");
        }

        while select prodBOM
            where prodBOM.ProdId == prodTable.ProdId
        {
            this.reverseDerived(prodBOM);
        }
        if (prodTable.ProdType == ProdType::Process)
        {
            while select pmfProdCoByProduct
                where pmfProdCoByProduct.ProdId == prodTable.ProdId
            {
                pmfProdCoByProduct.status()
                    .runStatusDecrease(this.parmParmBuffer());
            }
        }

        // Reread the prodTable record since it might have been updated by the previous cleanup calls
        prodTable.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdateProduction</Name>
				<Source><![CDATA[
    void endUpdateProduction()
    {
        if (this.mustUpdatePhysicalRemainder())
        {
            if (ProdUpdStatusDecreaseFinishedRAFJourErrorQtyFlight::instance().isEnabled() && !ProdParametersDim::find(prodTable.InventDimId).IncreaseRemainQtyWithErrorQty)
            {
                prodTable.RemainInventPhysical = prodTable.QtySched - prodTable.reportedFinishedError() - prodTable.remainInventFinancial();
                prodTable.PdsCWRemainInventPhysical = prodTable.PdsCWBatchSched - prodTable.cwReportedFinishedError() - prodTable.pdsCWRemainInventFinancial();
            }
            else
            {
                prodTable.RemainInventPhysical = prodTable.QtySched - prodTable.remainInventFinancial();
                prodTable.PdsCWRemainInventPhysical = prodTable.PdsCWBatchSched - prodTable.pdsCWRemainInventFinancial();
            }
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdatePhysicalRemainder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to update a physical remainder on production or batch order
    /// </summary>
    /// <returns>true if a physical remainder must be updated; otherwise, false.</returns>
    public boolean mustUpdatePhysicalRemainder()
    {
        return prodTable.QtySched > 0
            && prodTable.inventTable().PmfProductType != PmfProductType::MainItem
            && (prodTable.QtySched - prodTable.remainInventFinancial() > 0);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>