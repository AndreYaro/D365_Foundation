<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMPaymentRequestCashDiscCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates payment request cash discounts according to payment request source.
/// </summary>
public abstract class CFMPaymentRequestCashDiscCreate
{
    CFMPaymentRequestTable paymentRequestTable;

    Query sourceCashDiscQuery;
    QueryRun sourceCashDiscQueryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMPaymentRequestCashDiscCreate</c> class.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMPaymentRequestCashDiscCreate</c> class.
    /// </returns>
    public static CFMPaymentRequestCashDiscCreate construct(CFMPaymentRequestTable _paymentRequestTable)
    {
        if (!_paymentRequestTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CFMPaymentRequestSourceTypeAttribute extensionAttribute = new CFMPaymentRequestSourceTypeAttribute(_paymentRequestTable.SourceType);
        CFMPaymentRequestCashDiscCreate paymentRequestCashDiscCreate = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMPaymentRequestCashDiscCreate), extensionAttribute);

        if (!paymentRequestCashDiscCreate)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        paymentRequestCashDiscCreate.initialize(_paymentRequestTable);

        return paymentRequestCashDiscCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPaymRequestCashDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates payment request cash discounts according to source cash discounts.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    public static void createPaymRequestCashDiscounts(CFMPaymentRequestTable _paymentRequestTable)
    {
        CFMPaymentRequestCashDiscCreate paymentRequestCashDiscCreate = CFMPaymentRequestCashDiscCreate::construct(_paymentRequestTable);

        if (paymentRequestCashDiscCreate)
        {
            paymentRequestCashDiscCreate.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymRequestCashDiscountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates payment request cash discounts distribution per payment request lines.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    /// <param name="_paymentRequestCashDiscountRecId">
    /// The record identifier of the payment request cash discount; optional.
    /// </param>
    public static void updatePaymRequestCashDiscountLines(CFMPaymentRequestTable _paymentRequestTable, RefRecId _paymentRequestCashDiscountRecId = 0)
    {
        CFMPaymentRequestCashDiscCreate paymentRequestCashDiscCreate = CFMPaymentRequestCashDiscCreate::construct(_paymentRequestTable);

        if (paymentRequestCashDiscCreate)
        {
            paymentRequestCashDiscCreate.deleteExistingDiscountLines(_paymentRequestCashDiscountRecId);
            paymentRequestCashDiscCreate.createCashDiscountLines(_paymentRequestCashDiscountRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSourceCashDiscQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query for retrieving source cash discounts
    /// </summary>
    protected abstract void buildSourceCashDiscQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashDiscountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates payment request cash discounts distribution per payment request lines.
    /// </summary>
    /// <param name="_paymentRequestCashDiscountRecId">
    /// The record identifier of the payment request cash discount; optional.
    /// </param>
    protected void createCashDiscountLines(RefRecId _paymentRequestCashDiscountRecId = 0)
    {
        AmountCur paymentRequestAmountTotal = paymentRequestTable.amountCurBalance();
        //Save cash discount header data
        CFMPaymentRequestCashDisc paymentRequestCashDisc;
        Map cashDiscHeaderMap = new Map(Types::Date, Types::Container);
        Map cashDiscAmountDistributedMap = new Map(Types::Date, Types::Real);

        while select paymentRequestCashDisc
            where paymentRequestCashDisc.PaymentRequestTable == paymentRequestTable.RecId &&
                 (paymentRequestCashDisc.RecId == _paymentRequestCashDiscountRecId || !_paymentRequestCashDiscountRecId)
        {
            cashDiscHeaderMap.insert(paymentRequestCashDisc.CashDiscDate, [paymentRequestCashDisc.RecId, paymentRequestCashDisc.CashDiscAmount]);
            cashDiscAmountDistributedMap.insert(paymentRequestCashDisc.CashDiscDate, 0);
        }

        //for each payment request line create distributed set of cash discount lines
        CFMPaymentRequestLine paymentRequestLine;
        AmountCur paymentRequestAmountDistributed;

        while select paymentRequestLine
            where paymentRequestLine.PaymentRequestTable == paymentRequestTable.RecId
        {
            AmountCur paymentRequestLineAmount = paymentRequestLine.BalanceAmountCur;

            MapEnumerator cashDiscHeaderEnumerator = cashDiscHeaderMap.getEnumerator();

            while (cashDiscHeaderEnumerator.moveNext())
            {
                AmountCur cashDiscAmountTotal;
                RefRecId cashDiscHeaderRecId;

                [cashDiscHeaderRecId, cashDiscAmountTotal] = cashDiscHeaderEnumerator.currentValue();

                AmountCur cashDiscAmountDistributed = cashDiscAmountDistributedMap.lookup(cashDiscHeaderEnumerator.currentKey());
                
                AmountCur cashDiscAmount = CurrencyExchangeHelper::amount(cashDiscAmountTotal * (paymentRequestLineAmount + paymentRequestAmountDistributed) / paymentRequestAmountTotal - cashDiscAmountDistributed, paymentRequestTable.CurrencyCode);
                
                CFMPaymentRequestLineCashDisc curPaymentRequestLineCashDisc;

                curPaymentRequestLineCashDisc.clear();
                curPaymentRequestLineCashDisc.CashDiscAmount = cashDiscAmount;
                curPaymentRequestLineCashDisc.CFMPaymentRequestLine = paymentRequestLine.RecId;
                curPaymentRequestLineCashDisc.CFMPaymentRequestCashDisc = cashDiscHeaderRecId;
                curPaymentRequestLineCashDisc.insert();

                cashDiscAmountDistributed += cashDiscAmount;

                cashDiscAmountDistributedMap.insert(cashDiscHeaderEnumerator.currentKey(), cashDiscAmountDistributed);
            }

            paymentRequestAmountDistributed += paymentRequestLineAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCashDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates payment request cash discounts from source.
    /// </summary>
    protected void createCashDiscounts()
    {
        AmountCur paymentRequestAmountTotal = paymentRequestTable.amountCurBalance();

        if (!sourceCashDiscQuery)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        sourceCashDiscQueryRun = new QueryRun(sourceCashDiscQuery);

        while (sourceCashDiscQueryRun.next())
        {
            this.fetchSourceCashDiscount();

            CFMPaymentRequestCashDisc paymentRequestCashDisc;

            paymentRequestCashDisc.clear();
            paymentRequestCashDisc.CashDiscAmount = paymentRequestAmountTotal - abs(this.sourceCashDiscRemainAmount());

            if (paymentRequestCashDisc.CashDiscAmount != 0)
            {
                paymentRequestCashDisc.CashDiscdate = this.sourceCashDiscDate();
                paymentRequestCashDisc.PaymentRequestTable = paymentRequestTable.RecId;
                paymentRequestCashDisc.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingDiscountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes existing payment request line cash discounts.
    /// </summary>
    /// <param name="_paymentRequestCashDiscountRecId">
    /// The record identifier of the payment request cash discount; optional.
    /// </param>
    protected void deleteExistingDiscountLines(RefRecId _paymentRequestCashDiscountRecId = 0)
    {
        CFMPaymentRequestLineCashDisc paymentRequestLineCashDisc;

        ttsBegin;

        if (_paymentRequestCashDiscountRecId)
        {
            delete_from paymentRequestLineCashDisc
                where paymentRequestLineCashDisc.CFMPaymentRequestCashDisc == _paymentRequestCashDiscountRecId;
        }
        else
        {
            CFMPaymentRequestCashDisc paymentRequestCashDisc;

            delete_from paymentRequestLineCashDisc
            exists join paymentRequestCashDisc
                where paymentRequestCashDisc.RecId == paymentRequestLineCashDisc.CFMPaymentRequestCashDisc &&
                        paymentRequestCashDisc.PaymentRequestTable == paymentRequestTable.RecId;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes existing payment request discounts.
    /// </summary>
    protected void deleteExistingDiscounts()
    {
        ttsBegin;
        CFMPaymentRequestCashDisc paymentRequestCashDisc;

        delete_from paymentRequestCashDisc
            where paymentRequestCashDisc.PaymentRequestTable == paymentRequestTable.RecId;

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchSourceCashDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches source cash discount record from the source cash discount query.
    /// </summary>
    abstract protected void fetchSourceCashDiscount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from the payment request source.
    /// </summary>
    protected abstract void initFromSource()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class instance from payment request.
    /// </summary>
    /// <param name="_paymentRequestTable">
    /// The payment request.
    /// </param>
    protected void initialize(CFMPaymentRequestTable _paymentRequestTable)
    {
        paymentRequestTable = _paymentRequestTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashDiscCreationRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if payment request cash discounts needs to be created.
    /// </summary>
    /// <returns>
    /// True if cash discounts creation is required; otherwise False.
    /// </returns>
    protected abstract boolean isCashDiscCreationRequired()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs payment request cash discounts update if necessary.
    /// </summary>
    public void run()
    {
        ttsBegin;

        changeCompany(paymentRequestTable.SourceDataAreaId)
        {
            this.initFromSource();
            this.deleteExistingDiscounts();

            if (this.isCashDiscCreationRequired())
            {
                this.buildSourceCashDiscQuery();
                this.createCashDiscounts();
                this.createCashDiscountLines();
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment request source cash discount date.
    /// </summary>
    /// <returns>
    /// The payment request source cash discount date.
    /// </returns>
    protected abstract CashDiscDate sourceCashDiscDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceCashDiscRemainAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the payment request source cash discount remaining amount.
    /// </summary>
    /// <returns>
    /// The payment request source cash discount remaining amount.
    /// </returns>
    protected abstract AmountCur sourceCashDiscRemainAmount()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>