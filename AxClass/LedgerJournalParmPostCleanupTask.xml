<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalParmPostCleanupTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class LedgerJournalParmPostCleanupTask implements IDataMaintenanceTask
{
    private const int RecordsToDeleteBatchSize = 5000;
    private LedgerJournalParmPostDeleteTmp parmPostDeleteTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        DataMaintenanceTaskResult taskResult = DataMaintenanceTaskResult::construct();

        int64 totalDeletedRows = this.cleanupLedgerJournalParmPostTable();
        taskResult.parmCount(totalDeletedRows);
        
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the caption for the given action.
    /// </summary>
    /// <returns>The <c>DataMaintenanceActionCaption</c> of the action.</returns>
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@LedgerJournal:ParmPostCleanupActionCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupLedgerJournalParmPostTable</Name>
				<Source><![CDATA[
    private int64 cleanupLedgerJournalParmPostTable()
    {
        int64 recordsDeleted = 0;
        int64 recordsPopulated = 0;

        do 
        {
            recordsPopulated = this.populateRecForDelete();
            if (recordsPopulated <= 0)
            {
                // nothing to delete
                break;
            }

            this.deleteRecords();

            recordsDeleted += recordsPopulated;
        }
        while (recordsPopulated > 0);

        return recordsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRecForDelete</Name>
				<Source><![CDATA[
    private int64 populateRecForDelete()
    {
        int populatedCount = 0;

        str insertSql = this.insertSqlStatPostedJournal();
        populatedCount = this.executeSQL(insertSql);

        insertSql = this.insertSqlStatNonExistsJournal();
        populatedCount += this.executeSQL(insertSql);
        
        return populatedCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSqlStatPostedJournal</Name>
				<Source><![CDATA[
    private str insertSqlStatPostedJournal()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO %1 (PARMPOSTRECID)
            SELECT TOP %2 T1.RECID
            FROM LEDGERJOURNALPARMPOST T1
                CROSS JOIN LEDGERJOURNALTABLE T2
            WHERE 
                T1.LATESELECTION = 0
                AND (T1.JOURNALDATAAREAID = '' OR T1.JOURNALDATAAREAID = T1.DATAAREAID)
                AND T2.PARTITION = T1.PARTITION
                AND T2.DATAAREAID = T1.DATAAREAID
                AND T2.JOURNALNUM = T1.LEDGERJOURNALID
                AND T2.POSTED = 1",
            parmPostDeleteTmp.getPhysicalTableName(),
            RecordsToDeleteBatchSize);

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSqlStatNonExistsJournal</Name>
				<Source><![CDATA[
    private str insertSqlStatNonExistsJournal()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO %1 (PARMPOSTRECID)
            SELECT TOP %2 T1.RECID FROM LEDGERJOURNALPARMPOST T1
            WHERE T1.LATESELECTION = 0
                AND (T1.JOURNALDATAAREAID = '' OR T1.JOURNALDATAAREAID = T1.DATAAREAID)
                AND NOT EXISTS (
                SELECT 'x' FROM LEDGERJOURNALTABLE T2
                WHERE 
                    T2.PARTITION = T1.PARTITION
                    AND T2.DATAAREAID = T1.DATAAREAID
                    AND T2.JOURNALNUM = T1.LEDGERJOURNALID)",
            parmPostDeleteTmp.getPhysicalTableName(),
            RecordsToDeleteBatchSize);

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute SQL statement
    /// </summary>
    /// <param name = "_sqlStatement">SQL statement</param>
    /// <returns>number of records impacted</returns>
    private int executeSQL(str _sqlStatement)
    {
        Connection sessionConn = new Connection();
        int impactedRows;

        try
        {
            impactedRows = 0;
            Statement statement = sessionConn.createStatement();
            new SqlStatementExecutePermission(_sqlStatement).assert();

            impactedRows = statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());

            statement.close();
            CodeAccessPermission::revertAssert();
        }
        finally
        {
            sessionConn.finalize();
        }
        
        return impactedRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecords</Name>
				<Source><![CDATA[
    private void deleteRecords()
    {
        LedgerJournalParmPost ledgerJournalParmPost;
        
        ledgerJournalParmPost.skipDataMethods(true);
        ledgerJournalParmPost.skipDeleteActions(true);
        ledgerJournalParmPost.skipEvents(true);
        ledgerJournalParmPost.skipDatabaseLog(true);

        ttsbegin;
        delete_from crosscompany ledgerJournalParmPost
            exists join parmPostDeleteTmp
            where ledgerJournalParmPost.RecId == parmPostDeleteTmp.ParmPostRecId;

        this.clearBuffer();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBuffer</Name>
				<Source><![CDATA[
    private void clearBuffer()
    {
        ttsbegin;
        parmPostDeleteTmp.skipDatabaseLog(true);
        parmPostDeleteTmp.skipDataMethods(true);
        parmPostDeleteTmp.skipEvents(true);
        parmPostDeleteTmp.skipDatabaseLog(true);

        delete_from parmPostDeleteTmp;
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>