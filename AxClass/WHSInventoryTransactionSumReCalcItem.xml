<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryTransactionSumReCalcItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates on-hand based on warehouse inventory transaction.
/// </summary>
internal class WHSInventoryTransactionSumReCalcItem
{
    private ItemId itemId;
    private Map calculatedSum;
    private Map inventDimIdToDimDescriptorMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventSums</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void updateInventSums(InventDimId _inventDimId, InventSum _inventSum, InventSum _inventSumWHSLocationAndBelow, InventSum _inventSumWHSAllLevels)
    {
        if (inventDimIdToDimDescriptorMap.exists(_inventDimId))
        {
            var key = inventDimIdToDimDescriptorMap.lookup(_inventDimId);

            WHSInventoryTransactionInventorySumDescriptor sumDescriptor = calculatedSum.lookup(key);

            sumDescriptor.appendToInventSum(_inventSum);

            // Warehouse inventory transactions affect warehouse location and below.
            sumDescriptor.appendToInventSum(_inventSumWHSLocationAndBelow);
            _inventSumWHSLocationAndBelow.setAvailFields();
            
            // Clean-up used values.
            inventDimIdToDimDescriptorMap.remove(_inventDimId);
            calculatedSum.remove(key);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuantitiesToSumDescriptor</Name>
				<Source><![CDATA[
    private void addQuantitiesToSumDescriptor(
        WHSInventoryTransactionSumCheckView _inventoryTransactionSumCheckView,
        WHSInventoryTransactionInventorySumDescriptor _sumDescriptor)
    {
        WHSInventoryQuantityPair inventoryQuantity = WHSInventoryTransactionQuantityFormatConverter::convertFromWarehouseHandlingFormatToInventoryFormat(
            _inventoryTransactionSumCheckView.ItemId,
            _inventoryTransactionSumCheckView.HandlingQty,
            _inventoryTransactionSumCheckView.HandlingWeight);

        switch (_inventoryTransactionSumCheckView.Type)
        {
            case WHSInventoryTransactionTypeEnum::PhysicalReservation:
                _sumDescriptor.ReservPhysical += inventoryQuantity.parmInventQty();
                _sumDescriptor.PdsCWReservPhysical += inventoryQuantity.parmCwInventQty();
                break;

            case WHSInventoryTransactionTypeEnum::RemovedPhysicalReservation:
                _sumDescriptor.ReservPhysical -= inventoryQuantity.parmInventQty();
                _sumDescriptor.PdsCWReservPhysical -= inventoryQuantity.parmCwInventQty();
                break;

            case WHSInventoryTransactionTypeEnum::RegisteredIssue:
                _sumDescriptor.PostedQty -= inventoryQuantity.parmInventQty();
                _sumDescriptor.PdsCWPostedQty -= inventoryQuantity.parmCwInventQty();
                break;

            case WHSInventoryTransactionTypeEnum::RegisteredReceipt:
                _sumDescriptor.PostedQty += inventoryQuantity.parmInventQty();
                _sumDescriptor.PdsCWPostedQty += inventoryQuantity.parmCwInventQty();
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void calculate()
    {
        calculatedSum = new Map(Types::Container, Types::Class);
        inventDimIdToDimDescriptorMap = new Map(Types::String, Types::Container);

        WHSInventoryTransactionSumCheckView whsInventoryTransactionSumCheckView;

        while select whsInventoryTransactionSumCheckView
            where whsInventoryTransactionSumCheckView.ItemId == this.itemId
        {
            WHSWorkInventoryTransactionDimensionsDescriptor dimensionDescriptor =
                WHSWorkInventoryTransactionDimensionsDescriptor::newFromInventoryTransactionSumCheckView(whsInventoryTransactionSumCheckView);

            var key = dimensionDescriptor.getKey();

            if (calculatedSum.exists(key))
            {
                WHSInventoryTransactionInventorySumDescriptor precalculatedSum = calculatedSum.lookup(key);
                
                this.addQuantitiesToSumDescriptor(whsInventoryTransactionSumCheckView, precalculatedSum);
            }
            else
            {
                WHSInventoryTransactionInventorySumDescriptor precalculatedSum = new WHSInventoryTransactionInventorySumDescriptor();
                
                InventDim dim = dimensionDescriptor.convertToInventDim(true);
                inventDimIdToDimDescriptorMap.insert(dim.inventDimId, key);

                precalculatedSum.InventDimId = dim.inventDimId;
                this.addQuantitiesToSumDescriptor(whsInventoryTransactionSumCheckView, precalculatedSum);

                calculatedSum.insert(key, precalculatedSum);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSInventoryTransactionSumReCalcItem constructForItem(ItemId _itemId)
    {
        WHSInventoryTransactionSumReCalcItem inventoryTransactionSumReCalcItem = new WHSInventoryTransactionSumReCalcItem();

        inventoryTransactionSumReCalcItem.itemId = _itemId;

        return inventoryTransactionSumReCalcItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculatedSum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Map getCalculatedSum()
    {
        return calculatedSum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>