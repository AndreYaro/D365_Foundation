<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDeferredLPReceivingWHSLicensePlateLabelBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSDeferredLPReceivingWHSLicensePlateLabelBuilder
{
    #WHSRF

    private WHSUOMStructure uomStructure;
    private WHSDeferredReceivingPolicyId deferredReceivingPolicyId;
    private InventLocationId inventLocationId;
    private WHSLicensePlateId licensePlateId;
    private WHSLoadId loadId;
    private WHSShipmentId shipmentId;
    private WHSUserId userId;
    private WhsWorkTransType workTransType;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDeferredReceivingPolicyId</Name>
				<Source><![CDATA[
    internal WHSDeferredReceivingPolicyId parmDeferredReceivingPolicyId(WHSDeferredReceivingPolicyId _deferredReceivingPolicyId = deferredReceivingPolicyId)
    {
        deferredReceivingPolicyId = _deferredReceivingPolicyId;
        return deferredReceivingPolicyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    internal WHSLicensePlateId parmLicensePlateId(WHSLicensePlateId _licensePlateId = licensePlateId)
    {
        licensePlateId = _licensePlateId;
        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    internal InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    internal WHSUserId parmUserId(WHSUserId _userId = userId)
    {
        userId = _userId;
        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOMStructure</Name>
				<Source><![CDATA[
    internal WHSUOMStructure parmUOMStructure(WHSUOMStructure _uomStructure = uomStructure)
    {
        uomStructure = _uomStructure;
        return uomStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTransType</Name>
				<Source><![CDATA[
    internal WhsWorkTransType parmWorkTransType(WhsWorkTransType _workTransType = workTransType)
    {
        workTransType = _workTransType;
        return workTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParm</Name>
				<Source><![CDATA[
    internal static WHSDeferredLPReceivingWHSLicensePlateLabelBuilder newFromParm(WHSRFPassthrough _pass, WHSUOMStructure _uomStructure, WHSRFMenuItemTable _menuItemTable)
    {
        WHSDeferredLPReceivingWHSLicensePlateLabelBuilder licensePlateBuilder = new WHSDeferredLPReceivingWHSLicensePlateLabelBuilder();
        licensePlateBuilder.userId = _pass.lookup(#UserId);
        licensePlateBuilder.licensePlateId = _pass.lookup(#LicensePlateId);
        licensePlateBuilder.inventLocationId = _pass.lookup(#InventLocationId);
        licensePlateBuilder.uomStructure = _uomStructure;
        licensePlateBuilder.deferredReceivingPolicyId = _menuItemTable.DeferredReceivingPolicyId;
        licensePlateBuilder.workTransType = WHSRFMenuItemTable::getWorkTransTypeForMixedLP(_menuItemTable.MenuItemName, null);

        return licensePlateBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSDeferredLPReceivingWHSLicensePlateLabelBuilder construct()
    {
        return new WHSDeferredLPReceivingWHSLicensePlateLabelBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabels</Name>
				<Source><![CDATA[
    public void buildLicensePlateLabels()
    {
        WHSDeferredReceivingPolicy deferredReceivingPolicy = WHSDeferredReceivingPolicy::find(deferredReceivingPolicyId);

        if (deferredReceivingPolicy.LabelPrintingOnConfirmingReceiving == WHSDeferredReceivingPrintLabelProcessEnum::DoNotGenerateLabels)
        {
            return;
        }

        boolean skipPrint = deferredReceivingPolicy.LabelPrintingOnConfirmingReceiving == WHSDeferredReceivingPrintLabelProcessEnum::OnlyGenerateLabels;

        WHSLicensePlateLabelBuildWithoutWorkParameters parameters = new WHSLicensePlateLabelBuildWithoutWorkParameters(uomStructure,
                                                                                                                        workTransType,
                                                                                                                        uomStructure.UOMItem,
                                                                                                                        uomStructure.Qty,
                                                                                                                        uomStructure.ShipmentId,
                                                                                                                        uomStructure.LoadId,
                                                                                                                        licensePlateId,
                                                                                                                        userID);

        WHSLPReceiveLicensePlateLabelBuildWithoutWork labelBuild = WhsLicensePlateLabelBuildWithoutWork::newFromParametersLPReceiving(parameters);

        using (var noPrintContext = skipPrint ? WHSDeferredReceivingSkipPrintContext::construct() : null)
        {
            if (uomStructure.HasPacks)
            {
                labelBuild.buildNestedLicensePlateLabelsWithUOMStructure(uomStructure);
            }
            else
            {
                labelBuild.buildLicensePlateLabels();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBuildReceivingLicensePlateWithUOMStructureDisplayInfo</Name>
				<Source><![CDATA[
    private boolean shouldBuildReceivingLicensePlateWithUOMStructureDisplayInfo(WHSLicensePlateId _licensePlateId)
    {
        return WHSUOMStructure::existForParentLicensePlateId(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModuleForExternalInboundShipment</Name>
				<Source><![CDATA[
    private boolean isModuleForExternalInboundShipment(WHSModule _module)
    {
        return _module == WHSModule::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed</Name>
				<Source><![CDATA[
    private boolean isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed(InventLocationId _plannedWarehouseId, InventLocationId _currentWarehouseId)
    {
        return (_plannedWarehouseId == _currentWarehouseId
               || InventSite::allowReceiptAtOtherWarehouse(_plannedWarehouseId, _currentWarehouseId));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>