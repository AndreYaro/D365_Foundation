<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRouteOverlapCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdRouteOverlapCalc</c> class is used to calculate an overlap quantity for the production
///    operation.
/// </summary>
/// <remarks>
///    The calculated overlap quantity is a minimal available one for the production operation.
/// </remarks>
class ProdRouteOverlapCalc
{
    RouteMap                    routeMap;       // always primary operation
    RouteOprMap                 routeOprMap;

    BOMCalcData                 bomCalcData;

    ItemId                      itemId;
    EcoResItemConfigurationName configId;

    RouteOprQtyOverlap          calcOverlapQty;

    int                         decimals;

    boolean                     updateProdRoute;    // update prodRoute with calculated overlap quantity ?
    boolean                     infoCalcValue;      // show the calculated overlap quantity
    boolean                     infoValueChanged;   // show an info when the overlap quantity is changed for the operation
    SysInfoAction_Formrun       infoActionProdRouteOverlap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the calculation of the overlap quantity.
    /// </summary>
    /// <returns>
    ///    A calculated overlap quantity.
    /// </returns>
    /// <remarks>
    ///    The overlap calculation is based on the transfer batch quantity. The calculation cannot be
    ///    performed if a transfer batch quantity is not specified for the operation.An algorithm of the
    ///    calculation is described below.
    ///    <list type="table">
    ///       <listHeader>
    ///          <description>Variable</description><description>Description</description>
    ///       </listHeader>
    ///       <item>
    ///          <description><paramref name="Order quantity" /></description><description>The quantity of a
    ///          production order.</description>
    ///       </item>
    ///       <item>
    ///          <description><paramref name="Transfer batch" /></description><description>The quantity of the
    ///          transfer batch.</description>
    ///       </item>
    ///       <item>
    ///          <description><paramref name="Transfer batch time" /></description><description>The time required
    ///          for the transfer batch quantity.</description>
    ///       </item>
    ///       <item>
    ///          <description><paramref name="New overlap quantity" /></description><description>A new calculated
    ///          value of the overlap quantity.</description>
    ///       </item>
    ///       <item>
    ///          <description><paramref name="New overlap time" /></description><description>The time required for
    ///          the new calculated overlap.</description>
    ///       </item>
    ///       <item>
    ///          <description><paramref name="Run time per piece" /></description><description>The time required to
    ///          process one piece.</description>
    ///       </item>
    ///    </list> <paramref name="Operation time" />
    ///    op.10 = <paramref name="Order quantity" />
    ///     * <paramref name="Run time per piece" />
    ///    op.10 <paramref name="Operation time" />
    ///    op.20 = <paramref name="Transport time" />
    ///    op.10 + <paramref name="Queue after time" />
    ///    op.10 + <paramref name="Queue before time" />
    ///    op.20 + <paramref name="Setup time" />
    ///    op.20 + ( <paramref name="Order quantity" />
    ///     * <paramref name="Run time per piece" />
    ///    op.20) <paramref name="Transfer batch time" />
    ///    op.10 = <paramref name="Transfer batch" />
    ///    op.10 * <paramref name="Run time per piece" />
    ///    op.10Case 1: If <paramref name="Operation time" />
    ///    op.20 &lt;= <paramref name="Transfer batch time" />
    ///    op.10: <paramref name="New overlap quantity" />
    ///    op.10 = 0Case 2: If <paramref name="Operation time" />
    ///    op.20 &gt;= <paramref name="Operation time" />
    ///    op.10: <paramref name="New overlap quantity" />
    ///    op.10 = <paramref name="Transfer batch" />
    ///    op.10Case 3: If <paramref name="Operation time" />
    ///    op.20 &lt; <paramref name="Operation time" />
    ///    op.10: <paramref name="New overlap time" />
    ///    op.10 = <paramref name="Operation time" />
    ///    op.10 + <paramref name="Transfer batch time" />
    ///    op.10 - <paramref name="Operation time" />
    ///    op.20 <paramref name="New overlap quantity" />
    ///    op.10 = <paramref name="New overlap time" />
    ///    op.10 / <paramref name="Run time per piece" />
    ///    op.10Round the <paramref name="New overlap quantity" />
    ///     up to the nearest multiple number of <paramref name="Transfer batch" />
    ///    : <paramref name="New overlap quantity" />
    ///    op.10 = RoundUp( <paramref name="New overlap quantity" />
    ///    op.10 , <paramref name="Transfer batch" />
    ///    op.10)
    /// </remarks>
    public RouteOprQtyOverlap calcOverlap()
    {
        RouteOprMap         nextRouteOprMap;
        ProdRoute           nextProdRoute;

        Qty                 calcQtyCurrentOp;

        Qty                 calcQtyNextOp;

        RouteOpr            routeOpr;

        RouteOpr            nextRouteOpr;
        WrkCtrId            applicableResource;
        WrkCtrId            nextApplicableResource;

        date                todaysDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (!routeMap || !routeOprMap)
        {
            throw error("@SYS25302");
        }

        if (routeMap.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS88374");
        }

        // Nothing to be overlapped
        if (!routeMap.OprNumNext)
        {
            if (infoCalcValue)
            {
                warning(strfmt("@SYS88434", routeMap.OprNum));
            }

            return 0;
        }

        // get next operation
        RouteMap nextRouteMap = routeMap.nextOperation();
        if (nextRouteMap.TableId == tablenum(ProdRoute))
        {
            nextProdRoute   = nextRouteMap;
            nextRouteOprMap = nextProdRoute;
        }
        else if (nextRouteMap.TableId == tablenum(Route))
        {
            Route nextRoute = nextRouteMap;
            routeOpr        = routeOprMap;
            nextRouteOprMap = nextRoute.routeOpr(itemId,configId,routeOpr.SiteId,null);

            nextRouteOpr = nextRouteOprMap;
        }

        if (!nextRouteMap || !nextRouteOprMap)
        {
            throw error(strfmt("@SYS16251", routeMap.OprNumNext));
        }

        if (nextRouteMap.OprPriority != RouteOprPriority::Primary)
        {
            throw error(strfmt("@SYS17639", nextRouteMap.OprNum));
        }

        // setup values
        if (routeMap.TableId == tablenum(ProdRoute))
        {
            ProdRoute prodRoute = routeMap;
            nextProdRoute = nextRouteMap;

            calcQtyCurrentOp    = prodRoute.CalcQty;
            calcQtyNextOp       = nextProdRoute.CalcQty;

            applicableResource = prodRoute.activityRequirementSet().firstApplicableResource(todaysDate).WrkCtrId;
            nextApplicableResource = nextProdRoute.activityRequirementSet().firstApplicableResource(todaysDate).WrkCtrId;
        }
        else
        {
            applicableResource = routeOpr.activityRequirementSet().firstApplicableResource(todaysDate).WrkCtrId;
            nextApplicableResource = nextRouteOpr.activityRequirementSet().firstApplicableResource(todaysDate).WrkCtrId;
        }

        // calculate times if they were not calculated before
        calcQtyCurrentOp    = calcQtyCurrentOp  ? calcQtyCurrentOp  : this.calcQty(routeMap, routeOprMap);
        calcQtyNextOp       = calcQtyNextOp     ? calcQtyNextOp     : this.calcQty(nextRouteMap, nextRouteOprMap);

        RouteOprTimeProcess calcProcCurrentOp =
                                                this.calcProc(routeMap, routeOprMap
                                                , bomCalcData
                                                , applicableResource
                                                );
        RouteOprTimeProcess calcProcNextOp =
                                                this.calcProc(nextRouteMap, nextRouteOprMap
                                                , bomCalcData
                                                , nextApplicableResource
                                                );

        RouteOprTimeProcess calcSetUpNextOp =
                                              this.calcSetUp(nextRouteMap, nextRouteOprMap
                                              , bomCalcData
                                              , nextApplicableResource
                                              );

        // start overlap calculation
        RouteOprTimeProcess runTimePerPieceCurrentOp = decround(calcProcCurrentOp/calcQtyCurrentOp, decimals);
        RouteOprTimeProcess runTimePerPieceNextOp = decround(calcProcNextOp/calcQtyNextOp, decimals);

        RouteOprTimeProcess transferBatchTimeNextOp = routeOprMap.TransferBatch * runTimePerPieceNextOp;

        RouteOprTimeProcess fullTimeNextOp = routeOprMap.TranspTime + routeOprMap.QueueTimeAfter + nextRouteOprMap.QueueTimeBefore + calcSetUpNextOp + calcProcNextOp;

        if (fullTimeNextOp <= transferBatchTimeNextOp)
        {
            if (infoCalcValue)
            {
                warning("@SYS88452");
            }

            return 0;
        }

        if (fullTimeNextOp >= calcProcCurrentOp)
        {
            return routeOprMap.TransferBatch;
        }
        else
        {
            RouteOprTimeProcess newOverlapTime = calcProcCurrentOp + transferBatchTimeNextOp - fullTimeNextOp;
            RouteOprQtyOverlap newOverlapQty = newOverlapTime / runTimePerPieceCurrentOp;

            // round up to inventory unit's decimals of the BOM item
            InventTable inventTable = InventTable::find(itemId);
            if (inventTable)
            {
                newOverlapQty = roundUpDec(newOverlapQty, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                    UnitOfMeasure::unitOfMeasureIDBySymbol(inventTable.inventUnitId())));
            }

            return newOverlapQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProc</Name>
				<Source><![CDATA[
    Hours calcProc(RouteMap    _routeMap,
                   RouteOprMap _routeOprMap,
                   BOMCalcData _bomCalcData = bomCalcData
                   , WrkCtrId  _wrkCtrId = ''
                   )
    {
        ProdJobType prodJobType = ProdJobType::construct(RouteJobType::Process);

        return
                prodJobType.calcWrkCtrHours(
                                         _bomCalcData,
                                         _routeMap,
                                         _routeOprMap,
                                         _wrkCtrId,
                                         _routeMap,
                                         _routeOprMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQty</Name>
				<Source><![CDATA[
    Qty calcQty(RouteMap    _routeMap,
                RouteOprMap _routeOprMap,
                BOMCalcData _bomCalcData = bomCalcData)
    {
        ProdJobType prodJobType = ProdJobType::construct(RouteJobType::Process);

        return prodJobType.calcCalcQty(_bomCalcData,
                                       _routeMap,
                                       _routeOprMap,
                                       _routeMap,
                                       _routeOprMap,
                                       RouteAutoConsump::Always,
                                       true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSetUp</Name>
				<Source><![CDATA[
    Hours calcSetUp(RouteMap    _routeMap,
                    RouteOprMap _routeOprMap,
                    BOMCalcData _bomCalcData = bomCalcData
                    , WrkCtrId  _wrkCtrId = ''
                    )
    {
        ProdJobType prodJobType = ProdJobType::construct(RouteJobType::Setup);

        return
                prodJobType.calcWrkCtrHours(
                                         _bomCalcData,
                                         _routeMap,
                                         _routeOprMap,
                                         _wrkCtrId,
                                         _routeMap,
                                         _routeOprMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalcOverlapQty</Name>
				<Source><![CDATA[
    RouteOprQtyOverlap getCalcOverlapQty()
    {
        return calcOverlapQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        if (routeOprMap.TableId == tablenum(ProdRoute))
        {
            infoActionProdRouteOverlap = SysInfoAction_Formrun::newFormnameControlname(formstr(ProdRoute),
                                                                                       identifierstr(ProdRoute_OverlapQty));
            infoActionProdRouteOverlap.parmCallerBuffer(routeOprMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        calcOverlapQty  = 0;
        decimals        = 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCalcData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of <c>BOMCalcData</c>.
    /// </summary>
    /// <param name="_bomCalcData">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of <c>BOMCalcData</c>.
    /// </returns>
    BOMCalcData parmBOMCalcData(BOMCalcData _bomCalcData = bomCalcData)
    {
        bomCalcData = _bomCalcData;
        return bomCalcData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConfigId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName parmConfigId(EcoResItemConfigurationName _configId = configId)
    {
        configId = _configId;
        return configId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInfoCalcValue</Name>
				<Source><![CDATA[
    boolean parmInfoCalcValue(boolean _infoCalcValue = infoCalcValue)
    {
        infoCalcValue = _infoCalcValue;
        return infoCalcValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInfoValueChanged</Name>
				<Source><![CDATA[
    boolean parmInfoValueChanged(boolean _infoValueChanged = infoValueChanged)
    {
        infoValueChanged = _infoValueChanged;
        return infoValueChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteMap</Name>
				<Source><![CDATA[
    RouteMap parmRouteMap(RouteMap _routeMap = routeMap)
    {
        routeMap = _routeMap;
        return routeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteOprMap</Name>
				<Source><![CDATA[
    RouteOprMap parmRouteOprMap(RouteOprMap _routeOprMap = routeOprMap)
    {
        routeOprMap = _routeOprMap;
        return routeOprMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateProdRoute</Name>
				<Source><![CDATA[
    boolean parmUpdateProdRoute(boolean _updateProdRoute = updateProdRoute)
    {
        updateProdRoute = _updateProdRoute;
        return updateProdRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a calculation and updates the operation with a new overlap value.
    /// </summary>
    /// <remarks>
    ///    This method makes a calculation of a new overlap value and compares the value with the old value.
    ///    If the new value is bigger, the old value will be replaced.
    /// </remarks>
    void run()
    {
        #OCCRetryCount

        setprefix("@SYS88384");
        setprefix(strfmt("@SYS25786", routeMap.OprNum));

        if (! this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsbegin;

            this.init();

            // calculate overlap
            calcOverlapQty  = this.calcOverlap();

            // show calculated value
            if (infoCalcValue)
            {
                info(strfmt("@SYS88390", calcOverlapQty), '', infoActionProdRouteOverlap);
            }

            // update OverlapQty field on ProdRoute table if needed
            if (updateProdRoute && routeOprMap.TableId == tablenum(ProdRoute))
            {
                ProdRoute prodRoute = routeOprMap;
                RouteOprQtyOverlap oldOverlapQty = prodRoute.OverlapQty;

                if (calcOverlapQty > oldOverlapQty || (calcOverlapQty == 0 && oldOverlapQty != 0))
                {
                    prodRoute.OverlapQty = calcOverlapQty;
                    prodRoute.doUpdate();

                    if (infoValueChanged)
                    {
                        info(strfmt("@SYS88445", oldOverlapQty, calcOverlapQty), '', infoActionProdRouteOverlap);
                    }
                }
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            error("@SYS18447");
            throw (Exception::Error);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the data is correct and that the calculation can be done in the correct way.
    /// </summary>
    /// <returns>
    ///    true if the calculation data is correct; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    You must use this method before the calculation is run.
    /// </remarks>
    boolean  validate()
    {
        if (!itemId)
        {
            return checkFailed("@SYS25157");
        }

        if (!routeMap.RecId || !routeOprMap.RecId)
        {
            return checkFailed("@SYS25302");
        }

        if (routeMap.OprPriority != RouteOprPriority::Primary)
        {
            return checkFailed("@SYS88374");
        }

        if (routeMap.OprNumNext && !routeMap.nextOperation())
        {
            return checkFailed(strfmt("@SYS16251", routeMap.OprNumNext));
        }

        if (!routeOprMap.TransferBatch)
        {
            return checkFailed("@SYS88389");
        }

        if (!bomCalcData)
        {
            return checkFailed(strfmt("@SYS18707", funcname()));
        }

        if (updateProdRoute && (routeOprMap.TableId != tablenum(ProdRoute)))
        {
            return checkFailed("@SYS30498");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdRouteOverlapCalc construct()
    {
        return new ProdRouteOverlapCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS88384";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point for the <c>ProdRouteOverlapCalc</c> class when it is called from a menu
    ///    item.
    /// </summary>
    /// <param name="args">
    ///    The arguments for the <c>ProdRouteOverlapCalc</c> class.
    /// </param>
    /// <remarks>
    ///    Use the
    ///    <c>
    ///       main
    ///    </c>
    ///     class design pattern whenever a class is called from a menu item. Do not call the
    ///    <c>
    ///       main
    ///    </c>
    ///     method explicitly from the code; call it implicitly from a menu item.Typically, you would:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>
    ///             Instantiate the class by calling the static <c>construct</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>prompt</c> method to create a dialog box.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Call the <c>run</c> method, if the user clicks OK in the dialog box.
    ///          </description>
    ///       </item>
    ///    </list>
    /// </remarks>
    static void main(Args args)
    {
        ProdRouteOverlapCalc    prodRouteOverlapCalc;
        boolean                 info = false;

        if (!args || !args.caller() || !args.record().TableId)
        {
            throw error(strfmt("@SYS22828",funcname()));
        }

        if (args && args.dataset() == tablenum(ProdRoute))
        {
            ProdRoute prodRoute = args.record();

            if (args.parmEnum() == NoYes::Yes)
            {
                info = true;
            }

            if (prodRoute)
            {
                prodRouteOverlapCalc = ProdRouteOverlapCalc::newProdRoute(prodRoute.primary(),
                                                                          true,     // update prodRoute
                                                                          info,     // show the calculated overlap quantity
                                                                          info);    // show the info when the overlap quantity is changed
            }
        }

        if (prodRouteOverlapCalc)
        {
            prodRouteOverlapCalc.run();

            if (args.caller())
            {
                args.caller().doReread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdRoute</Name>
				<Source><![CDATA[
    static ProdRouteOverlapCalc newProdRoute(ProdRoute  _prodRoute,         // primary operation
                                             boolean    _updateProdRoute    = true,
                                             boolean    _infoCalcValue      = false,
                                             boolean    _infoValueChanged   = false)
    {
        ProdRouteOverlapCalc    prodRouteOverlapCalc = ProdRouteOverlapCalc::construct();

        if (_prodRoute.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS88374");
        }

        // set operation
        prodRouteOverlapCalc.parmRouteMap(_prodRoute);
        prodRouteOverlapCalc.parmRouteOprMap(_prodRoute);

        // set BOMCalcData
        ProdTable prodTable = ProdTable::find(_prodRoute.ProdId);
        if (prodTable.QtySched)
        {
            BOMCalcData calcBOMData = BOMCalcData::newProdTable(prodTable.QtySched, prodTable);
            prodRouteOverlapCalc.parmBOMCalcData(calcBOMData);
        }

        // set BOM itemId
        prodRouteOverlapCalc.parmItemId(prodTable.ItemId);

        // set update prodRoute
        prodRouteOverlapCalc.parmUpdateProdRoute(_updateProdRoute);

        // set show info
        prodRouteOverlapCalc.parmInfoCalcValue(_infoCalcValue);
        prodRouteOverlapCalc.parmInfoValueChanged(_infoValueChanged);

        return prodRouteOverlapCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProdRouteBOMData</Name>
				<Source><![CDATA[
    static ProdRouteOverlapCalc newProdRouteBOMData(ProdRoute   _prodRoute,         // primary operation
                                                    BOMCalcData _bomCalcData,
                                                    boolean     _updateProdRoute    = true,
                                                    boolean     _infoCalcValue      = false,
                                                    boolean     _infoValueChanged   = false)
    {
        ProdRouteOverlapCalc prodRouteOverlapCalc = ProdRouteOverlapCalc::construct();

        if (_prodRoute.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS88374");
        }

        // set operation
        prodRouteOverlapCalc.parmRouteMap(_prodRoute);
        prodRouteOverlapCalc.parmRouteOprMap(_prodRoute);

        // set BOMCalcData
        prodRouteOverlapCalc.parmBOMCalcData(_bomCalcData);

        // set BOM itemId
        ProdTable prodTable = ProdTable::find(_prodRoute.ProdId);
        prodRouteOverlapCalc.parmItemId(prodTable.ItemId);

        // set update prodRoute
        prodRouteOverlapCalc.parmUpdateProdRoute(_updateProdRoute);

        // set show info
        prodRouteOverlapCalc.parmInfoCalcValue(_infoCalcValue);
        prodRouteOverlapCalc.parmInfoValueChanged(_infoValueChanged);

        return prodRouteOverlapCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRouteMapBOMData</Name>
				<Source><![CDATA[
    static ProdRouteOverlapCalc newRouteMapBOMData(RouteMap                     _routeMap,       // primary operation
                                                   RouteOprMap                  _routeOprMap,
                                                   BOMCalcData                  _bomCalcData,
                                                   ItemId                       _itemId,         // BOM itemId
                                                   EcoResItemConfigurationName  _configId,       // InventDim.ConfigId
                                                   boolean                      _updateProdRoute    = true,
                                                   boolean                      _infoCalcValue      = false,
                                                   boolean                      _infoValueChanged   = false)
    {
        ProdRouteOverlapCalc prodRouteOverlapCalc = ProdRouteOverlapCalc::construct();

        if (_routeMap.OprPriority != RouteOprPriority::Primary)
        {
            throw error("@SYS88374");
        }

        // set operation
        prodRouteOverlapCalc.parmRouteMap(_routeMap);
        prodRouteOverlapCalc.parmRouteOprMap(_routeOprMap);

        // set BOMCalcData
        prodRouteOverlapCalc.parmBOMCalcData(_bomCalcData);

        // set BOM item's data
        prodRouteOverlapCalc.parmItemId(_itemId);
        prodRouteOverlapCalc.parmConfigId(_configId);

        // set update prodRoute
        prodRouteOverlapCalc.parmUpdateProdRoute(_updateProdRoute);

        // set show info
        prodRouteOverlapCalc.parmInfoCalcValue(_infoCalcValue);
        prodRouteOverlapCalc.parmInfoValueChanged(_infoValueChanged);

        return prodRouteOverlapCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
