<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayAverageQuantityCountGroupByBranch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class is responsible for headcount calculation separated by branch.
/// </summary>
class RPayAverageQuantityCountGroupByBranch extends RPayAverageQuantityCountGroup
{
    RPayCounterUnit baseFund;
    Map             emplDataByBranchMap;
    boolean         showProgress;
    UnknownNoYes    calcAvgHeadcount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>branchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the branch for employee.
    /// </summary>
    /// <param name="_emplId">
    /// The employee number.
    /// </param>
    /// <returns>
    /// The code of branch for employee.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container branchId(RHRMEmplId _emplId)
    {
        RPayEmplTax     payEmplTax;
        RPayHistory     rPayHistory = RPayHistory::getHistoryLineByDate(_emplId, payPeriod, true);
        TransDate       transDate;
        RPayTblDayHour  tblDayHour;

        tblDayHour = RPayTblTrans::realDayHourGroup(payPeriod, _emplId, RPayDayHourCalc::Hour, presenseTimeGroup, false, reportPeriod);

        if (rPayHistory.OperationType == RHRMJournalType::Dismiss)
        {
            transDate = max(dateStartMth(payPeriod), rPayHistory.StartDate);
        }
        else
        {
            transDate = payPeriod;
        }

        payEmplTax = RPayEmplTax::construct(_emplId, transDate);

        return [payEmplTax.parmBranchId(), transDate, tblDayHour];
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcFundAmountEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates fund amount for person.
    /// </summary>
    /// <param name="_mainEmplId">
    /// The main code of employee.
    /// </param>
    /// <param name="_logToFileMap">
    /// The object of <c>Map</c> for collecting calculated data.
    /// </param>
    /// <returns>
    /// The fund amount for person.
    /// </returns>
    #define.fundAmountIdx(9)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount calcFundAmountEmpl(RHRMEmplId _mainEmplId, Map _logToFileMap)
    {
        RHRMEmplTable   emplTable;
        RPayTrans       rPayTrans;
        RPayFundMember  rPayFundMember;
        RPayAmount      fundAmountPers;
        BranchId_RU     branchId;
        container       emplData;
        RPayTrans       rPayTransTmp;

        rPayTransTmp.setTmp();

        while select EmployeeId from emplTable
            where emplTable.PayMainEmplId == _mainEmplId
        exists join rPayTrans
            where rPayTrans.Emplid           == emplTable.EmployeeId &&
                  rPayTrans.CorrectedPeriod  == payPeriod &&
                  rPayTrans.PayPeriod        <= reportPeriod
        exists join rPayFundMember
            where rPayFundMember.PayCostType == rPayTrans.PayCtype &&
                  rPayFundMember.CounterUnit == baseFund
        {
            fundAmountPers += this.fundAmount(emplTable.EmployeeId);

            emplData = this.branchId(emplTable.EmployeeId);

            rPayTransTmp.clear();
            rPayTransTmp.Emplid    = emplTable.EmployeeId;
            rPayTransTmp.BranchId  = conpeek(emplData, 1);
            rPayTransTmp.TransDate = conpeek(emplData, 2);
            rPayTransTmp.QtyHour   = conpeek(emplData, 3);
            rPayTransTmp.doInsert();
        }

        branchId = this.getBranchId(rPayTransTmp, _mainEmplId);

        if (fundAmountPers)
        {
            if (emplDataByBranchMap.exists(branchId))
            {
                emplDataByBranchMap.insert(branchId, emplDataByBranchMap.lookup(branchId) + fundAmountPers);
            }
            else
            {
                emplDataByBranchMap.insert(branchId, fundAmountPers);
            }

            if (_logToFileMap)
            {
                if (!_logToFileMap.exists(_mainEmplId))
                {
                    _logToFileMap.insert(_mainEmplId,
                        [payPeriod,
                         reportPeriod,
                         RPayCounterTable::find(baseFund).Name,
                         _mainEmplId,
                         RHRMEmplTable::emplId2Name(_mainEmplId),
                         0,
                         0,
                         branchId,
                         fundAmountPers]);
                }
                else
                {
                    _logToFileMap.insert(_mainEmplId, conpoke(_logToFileMap.lookup(_mainEmplId), #fundAmountIdx, fundAmountPers));
                }
            }
        }

        return fundAmountPers;
    }
]]></Source>
			</Method>
			<Method>
				<Name>countQuantity</Name>
				<Source><![CDATA[
    public RPayAverageQty countQuantity()
    {
        RPayAverageQty      resultQty;
        RPayGroupMember     rPayGroupMember;
        RPayGroupTable      groupTable = rPayGroupTable::find(payGroup);
        EmplName            emplName;
        RHRMEmplTable       emplTable;
        RHRMPersonTable     personTable;
        RPayTrans           rPayTrans;
        RPayFundMember      rPayFundMember;
        RPayAmount          fundAmount;
        Map                 logToFileMap = new Map(Types::String, Types::Container);

        void addQty(RHRMPersonTable _personTable)
        {
            this.updateProgress(_personTable.fio(), 2);

            resultQty += this.countQuantityPerson(_personTable.RecId, logToFileMap);
        }

        this.setTotalProgress(2, 1);

        if (calcAvgHeadcount == UnknownNoYes::Unknown || calcAvgHeadcount == UnknownNoYes::Yes)
        {
            this.updateProgress("@RUP839", 1);

            select count(RecId) from rPayGroupMember
                where rPayGroupMember.PayGroup == payGroup                                 &&
                     (rPayGroupMember.FromDate <= payPeriod || ! rPayGroupMember.FromDate) &&
                     (rPayGroupMember.ToDate   >= dateStartMth(payPeriod) || ! rPayGroupMember.ToDate);

            this.setTotalProgress(any2int(rPayGroupMember.RecId), 2);

            if (groupTable.Type == RPayGroupType::Person)
            {
                while select PersonEmplId from rPayGroupMember
                    where rPayGroupMember.PayGroup == payGroup
                       && (rPayGroupMember.FromDate <= payPeriod || ! rPayGroupMember.FromDate)
                       && (rPayGroupMember.ToDate   >= dateStartMth(payPeriod) || ! rPayGroupMember.ToDate)
                join personTable
                    where personTable.PersonnelNumber == rPayGroupMember.PersonEmplId
                {
                    addQty(personTable);
                }
            }
            else if (groupTable.Type == RPayGroupType::Employee)
            {
                while select PersonEmplId from rPayGroupMember
                    where rPayGroupMember.PayGroup == payGroup
                       && (rPayGroupMember.FromDate <= payPeriod || ! rPayGroupMember.FromDate)
                       && (rPayGroupMember.ToDate   >= dateStartMth(payPeriod) || ! rPayGroupMember.ToDate)
                join emplTable group by RHRMPersonTable
                    where emplTable.EmployeeId == rPayGroupMember.PersonEmplId
                {
                    personTable = RHRMPersonTable::findRecId(emplTable.RHRMPersonTable);
                    addQty(personTable);
                }
            }
        }

        if (calcAvgHeadcount == UnknownNoYes::Unknown || calcAvgHeadcount == UnknownNoYes::No)
        {
            this.updateProgress("@RUP824", 1);

            select count(RecId) from emplTable
                where emplTable.PayMainEmplId == emplTable.EmployeeId
            exists join rPayTrans
                where rPayTrans.Emplid           == emplTable.EmployeeId &&
                      rPayTrans.CorrectedPeriod  == payPeriod &&
                      rPayTrans.PayPeriod        <= reportPeriod
            exists join rPayFundMember
                where rPayFundMember.PayCostType == rPayTrans.PayCtype &&
                      rPayFundMember.CounterUnit == baseFund;

            this.setTotalProgress(any2int(emplTable.RecId), 2);

            while select PayMainEmplId from emplTable
                group by PayMainEmplId
            exists join rPayTrans
                where rPayTrans.Emplid           == emplTable.EmployeeId &&
                      rPayTrans.CorrectedPeriod  == payPeriod &&
                      rPayTrans.PayPeriod        <= reportPeriod
            exists join rPayFundMember
                where rPayFundMember.PayCostType == rPayTrans.PayCtype &&
                      rPayFundMember.CounterUnit == baseFund
            {
                emplName = RHRMEmplTable::emplId2Name(emplTable.PayMainEmplId);
                this.updateProgress(emplName, 2);

                fundAmount += this.calcFundAmountEmpl(emplTable.PayMainEmplId, logToFileMap);
            }
        }

        this.fillLogFile(logToFileMap);

        return resultQty;
    }
]]></Source>
			</Method>
			<Method>
				<Name>countQuantityPerson</Name>
				<Source><![CDATA[
    public RPayAverageQty countQuantityPerson(RefRecId _personTableId, Map _logToFileMap = null)
    {
        RHRMEmplTable   emplTable;
        RPayGroupTable  groupTable = rPayGroupTable::find(payGroup);
        RPayAverageQty  averageQtyByPers, averageQtyByPersCut;
        RPayGroupMember rPayGroupMember;
        RHRMPersonnelNumberId   personNum;
        RPayGroupName   groupName = rPayGroupTable::find(payGroup).Name;
        BranchId_RU     branchId;
        RPayTrans       rPayTransTmp;

        void calcEmployee(RHRMEMplId _emplId)
        {
            container       emplData;

            averageQtyByPers += this.countQuantityEmplByTbl(_emplId);

            emplData = this.branchId(_emplId);

            rPayTransTmp.clear();
            rPayTransTmp.Emplid    = _emplId;
            rPayTransTmp.BranchId  = conpeek(emplData, 1);
            rPayTransTmp.TransDate = conpeek(emplData, 2);
            rPayTransTmp.QtyHour   = conpeek(emplData, 3);
            rPayTransTmp.doInsert();
        }

        rPayTransTmp.setTmp();

        if (groupTable.Type == RPayGroupType::Employee)
        {
            while select EmployeeId from emplTable
                where emplTable.RHRMPersonTable  == _personTableId
                   && emplTable.SortOfWork       == RHRMSortOfWork::Direct
            exists join rPayGroupMember
                where rPayGroupMember.PersonEmplId == emplTable.EmployeeId
                   && rPayGroupMember.PayGroup     == payGroup
            {
                calcEmployee(emplTable.EmployeeId);
            }
        }
        else if (groupTable.Type == RPayGroupType::Person)
        {
            personNum = RHRMPersonTable::findRecId(_personTableId).PersonnelNumber;
            while select EmployeeId from emplTable
                where emplTable.RHRMPersonTable  == _personTableId
                   && emplTable.SortOfWork       == RHRMSortOfWork::Direct
            exists join rPayGroupMember
                where rPayGroupMember.PersonEmplId  == personNum
                   && rPayGroupMember.PayGroup      == payGroup
            {
                calcEmployee(emplTable.EmployeeId);
            }
        }

        select firstonly PayMainEmplId from emplTable
            where emplTable.RHRMPersonTable  == _personTableId;

        branchId = this.getBranchId(rPayTransTmp, emplTable.PayMainEmplId);

        if (! averageQtyByPers)
        {
            averageQtyByPers = this.countQuantityEmplByCivilContract(emplTable.PayMainEmplId);
        }

        averageQtyByPersCut = (averageQtyByPers < 1 ? averageQtyByPers : 1);

        if (averageQtyByPers)
        {
            if (emplDataByBranchMap.exists(branchId))
            {
                emplDataByBranchMap.insert(branchId, emplDataByBranchMap.lookup(branchId) + averageQtyByPersCut);
            }
            else
            {
                emplDataByBranchMap.insert(branchId, averageQtyByPersCut);
            }

            if (_logToFileMap && !_logToFileMap.exists(emplTable.PayMainEmplId))
            {
                _logToFileMap.insert(emplTable.PayMainEmplId,
                    [payPeriod,
                     reportPeriod,
                     RPayCounterTable::find(baseFund).Name,
                     emplTable.PayMainEmplId,
                     RHRMEmplTable::emplId2Name(emplTable.PayMainEmplId),
                     averageQtyByPersCut,
                     averageQtyByPers,
                     branchId,
                     0]);
            }
        }

        return averageQtyByPersCut;
    }
]]></Source>
			</Method>
			<Method>
				<Name>fillLogFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills log file from <c>Map</c>.
    /// </summary>
    /// <param name="_logToFileMap">
    /// The source object of <c>Map</c>.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillLogFile(Map _logToFileMap)
    {
        MapEnumerator   me = _logToFileMap ? _logToFileMap.getEnumerator() : null;
        container       data;

        if (file && me)
        {
            while (me.moveNext())
            {
                data = me.currentValue();
                this.writeLog(strfmt('%1\t%2\t%3\t%4\t"%5"\t%6\t(%7)\t"%8"\t%9',
                    conpeek(data, 1),
                    conpeek(data, 2),
                    conpeek(data, 3),
                    conpeek(data, 4),
                    conpeek(data, 5),
                    conpeek(data, 6),
                    conpeek(data, 7),
                    conpeek(data, 8),
                    conpeek(data, 9)));
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>fundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the fund amount for employee.
    /// </summary>
    /// <param name="_emplId">
    /// The employee number.
    /// </param>
    /// <returns>
    /// The fund amount for employee.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayAmount fundAmount(RHRMEmplId _emplId)
    {
        RPayAmount      fundAmount;

        fundAmount = RPayTrans::calculateFundByCorrectedReportPeriod(baseFund, payPeriod, reportPeriod, _emplId);

        return fundAmount;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getBranchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the code of branch based on calculated data.
    /// </summary>
    /// <param name="_rPayTransTmp">
    /// The temporary table with calculated data.
    /// </param>
    /// <param name="_mainEmplId">
    /// The main employee number.
    /// </param>
    /// <returns>
    /// The code of branch
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected BranchID_RU getBranchId(RPaytrans _rPayTransTmp, RHRMEmplId _mainEmplId)
    {
        BranchId_RU     branchId;
        TransDate       lastDate;
        RPayTblDayHour  tblDayHour = 0;

        select maxof(TransDate) from _rPayTransTmp;
        lastDate = _rPayTransTmp.TransDate;

        select _rPayTransTmp
            where _rPayTransTmp.TransDate   == lastDate &&
                  _rPayTransTmp.Emplid      == _mainEmplId;

        if (_rPayTransTmp)
        {
            branchId = _rPayTransTmp.BranchId;
        }
        else
        {
            while select sum(QtyHour) from _rPayTransTmp
                group by BranchId
                where _rPayTransTmp.TransDate == lastDate
            {
                if (tblDayHour <= _rPayTransTmp.QtyHour)
                {
                    branchId = _rPayTransTmp.BranchId;
                    tblDayHour = _rPayTransTmp.QtyHour;
                }
            }
        }

        return branchId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getEmplDataByBranchMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the packed map with data separated by branch.
    /// </summary>
    /// <returns>
    /// The packed map.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container getEmplDataByBranchMap()
    {
        return emplDataByBranchMap.pack();
    }
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();
        emplDataByBranchMap = new Map(Types::String, Types::Real);
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmBaseFund</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RPayCounterUnit parmBaseFund(RPayCounterUnit _baseFund = baseFund)
    {
        baseFund = _baseFund;

        return baseFund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcAvgHeadcount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UnknownNoYes parmCalcAvgHeadcount(UnknownNoYes _calcAvgHeadcount = calcAvgHeadcount)
    {
        calcAvgHeadcount = _calcAvgHeadcount;

        return calcAvgHeadcount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowProgress</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmShowProgress(boolean _showProgress = showProgress)
    {
        showProgress = _showProgress;

        return showProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalProgress</Name>
				<Source><![CDATA[
    protected void setTotalProgress(int _total, int _idx = 1)
    {
        if (showProgress)
        {
            super(_total, _idx);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateProgress</Name>
				<Source><![CDATA[
    protected void updateProgress(str _text, int _idx = 1)
    {
        if (showProgress)
        {
            super(_text, _idx);
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>newAverageQuantityCountGroupByBranch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the class <c>RPayAverageQuantityCountGroupByBranch</c>.
    /// </summary>
    /// <param name="_payPeriod">
    /// Calcutalion period.
    /// </param>
    /// <param name="_payGroup">
    /// Payroll group.
    /// </param>
    /// <param name="_reportPeriod">
    /// Reporting period; optional.
    /// </param>
    /// <param name="_baseFund">
    /// The code of fund base; optional.
    /// </param>
    /// <param name="_showProgress">
    /// Determines whether progress should be shown or not; optional.
    /// </param>
    /// <param name="_calcAvgHeadcount">
    /// Determines what type of data should be calculated.
    /// </param>
    /// <returns>
    /// The instance of the class <c>RPayAverageQuantityCountGroupByBranch</c>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayAverageQuantityCountGroupByBranch newAverageQuantityCountGroupByBranch(
        ReportPeriod_RU _payPeriod,
        RPayGroup       _payGroup,
        ReportPeriod_RU _reportPeriod = maxdate(),
        RPayCounterUnit _baseFund = RPayTaxParameters::find().HeadcountFund,
        boolean         _showProgress = true,
        UnknownNoYes    _calcAvgHeadcount = UnknownNoYes::Unknown)
    {
        RPayAverageQuantityCountGroupByBranch averageQuantityCountGroupByBranch = new RPayAverageQuantityCountGroupByBranch();

        averageQuantityCountGroupByBranch.parmPayGroup(_payGroup);
        averageQuantityCountGroupByBranch.parmPayPeriod(_payPeriod);
        averageQuantityCountGroupByBranch.parmReportPeriod(_reportPeriod);
        averageQuantityCountGroupByBranch.parmBaseFund(_baseFund);
        averageQuantityCountGroupByBranch.parmShowProgress(_showProgress);
        averageQuantityCountGroupByBranch.parmCalcAvgHeadcount(_calcAvgHeadcount);

        averageQuantityCountGroupByBranch.init();

        return averageQuantityCountGroupByBranch;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>