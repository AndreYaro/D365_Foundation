<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25AllocPrepareCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The class <c>RTax25AllocPrepareCalc</c> used to calculate preliminary data for profit allocation register calculation.
/// </summary>
/// <remarks>
///  The reason why register not calculated at one time, is that it's possible that payroll module and/or russian FA module are not installed - in this case user must fill that table manually.
/// </remarks>
class RTax25AllocPrepareCalc extends RunBaseBatch implements BatchRetryable
{
    RTax25RegisterJournalTrans      registerJournalTrans;

    RAssetStandardId                assetStandardIdTax;
    Branches_RU                     mainBranch;

    boolean                         recalculate,
                                    clearEmplData,
                                    clearFAData;

    FromDate                        fromDate;
    ToDate                          toDate;

    DialogField                     dialogFromDate;
    DialogField                     dialogClearEmplData;
    DialogField                     dialogClearFAData;

    ClassId                         payrollClassId;
    boolean                         payrollChecked;

    #define.AssetTypesCode(2)
    #define.EmplDataCode(3)

    #define.currentVersion(1)
    #localMacro.currentList
        recalculate,
        clearEmplData,
        fromDate
    #endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRestBranches</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method adds empty records for those branches where no data was found.
    /// </summary>
    /// <param name="_calculationDate">
    ///  The date at which branches are added.
    /// </param>
    /// <remarks>
    ///  For each branch at each date record must be present in table, so user can enter amounts if necessary.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addRestBranches(TransDate _calculationDate)
    {
        Branches_RU branches;
    
        while select BranchId from branches
        {
            if (!RTax25AllocCalcDetails::exist(_calculationDate, branches.BranchId))
            {
                this.updateDetails(_calculationDate, branches.BranchId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmplData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method fills the <c>RTax25RegCalcDetails</c> table with data about employees - average headcount or average salary.
    /// </summary>
    /// <param name="_calculationDate">
    ///  The date on which data is calculated.
    /// </param>
    /// <remarks>
    ///  Since russian payroll module may not be installed, its checked at the very beginning. If its installed static method called which holds required data.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createEmplData(TransDate _calculationDate)
    {
        Map                     emplDataMap;
        MapEnumerator           enumerator;
    
        DictClass               dictClass;
    
        SysDictEnum                 dictEnum = new SysDictEnum(enumNum(RTax25EmplDataCalcType));
        RTax25RegisterParameters    registerParameters;
        RTax25EmplDataCalcType      emplDataCalcType;
        boolean                     calcAvgHeadcount;
    
        SeparateDivisionId_RU       separateDivisionId;
    
        ExecutePermission           executePermission;
        ;
    
        if (!this.isRPayrollModuleInstalled())
        {
            return;
        }
    
        registerParameters = RTax25RegisterParameters::find(RTax25RegisterTable::registerType2Id(RTax25RegisterType::ProfitAllocation), #EmplDataCode);
        if (registerParameters.Parameter)
        {
            emplDataCalcType   = dictEnum.name2Value(strRem(registerParameters.Parameter, '"'));
        }
        calcAvgHeadcount = (emplDataCalcType == RTax25EmplDataCalcType::AvgHeadcount);
    
        dictClass = new DictClass(this.payrollClassId());
    
        executePermission = new ExecutePermission();
        executePermission.assert();
        emplDataMap = Map::create(dictClass.callStatic('getEmplData', _calculationDate, calcAvgHeadcount));
    
        CodeAccessPermission::revertAssert();
    
        enumerator = emplDataMap.getEnumerator();
    
        while (enumerator.moveNext())
        {
            separateDivisionId = enumerator.currentKey();
    
            if (!separateDivisionId)
            {
                separateDivisionId = mainBranch.BranchId;
            }
    
            this.updateDetails(_calculationDate, separateDivisionId, enumerator.currentValue(), fieldNum(RTax25AllocCalcDetails, EmplData));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFixedAssetsData</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method creates data about net book value of the fixed assets in each division on specifed date.
    /// </summary>
    /// <param name="_calculationDate">
    ///  The date on which data is calculated. Usually end of month.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createFixedAssetsData(TransDate _calculationDate)
    {
        QueryRun        queryRun;
    
        RAssetTrans     rAssetTrans;
        RAssetLocation  rAssetLocation;
        ;
    
        if (!isConfigurationKeyEnabled(configurationKeyNum(RAsset)))
        {
            return;
        }
    
        queryRun = new QueryRun(this.initQueryFixedAssets(_calculationDate));
    
        while (queryRun.next())
        {
            rAssetTrans      = queryRun.get(tableNum(RAssetTrans));
            rAssetLocation   = queryRun.get(tableNum(RAssetLocation));
    
            this.updateDetails(_calculationDate, rAssetLocation.BranchId, rAssetTrans.AmountMST, fieldNum(RTax25AllocCalcDetails, AssetNetBookValue));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates dialog, which displayed before operation.
    /// </summary>
    /// <returns>
    ///  <c>DialogRunBase</c> object.
    /// </returns>
    public Object dialog()
    {
        DialogRunBase dialog = super();
    
        if (recalculate)
        {
            dialogFromDate      = dialog.addFieldValue(extendedTypeStr(FromDate), fromDate);
    
            if (!this.isRPayrollModuleInstalled())
            {
                dialogClearEmplData = dialog.addFieldValue(extendedTypeStr(NoYesId), clearEmplData, "@SYP4881237", "@SYP4881239");
            }
    
            if (!isConfigurationKeyEnabled(configurationKeyNum(RAsset)))
            {
                dialogClearFAData = dialog.addFieldValue(extendedTypeStr(NoYesId), clearFAData, "@SYP4881238", "@SYP4881240");
            }
        }
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets data from dialog window.
    /// </summary>
    /// <returns>
    ///  True, if function succeed; otherwise false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;
    
        ret = super();
    
        if (recalculate)
        {
            fromDate      = dialogFromDate.value();
    
            if (!this.isRPayrollModuleInstalled())
            {
                clearEmplData = dialogClearEmplData.value();
            }
    
            if (!isConfigurationKeyEnabled(configurationKeyNum(RAsset)))
            {
                clearFAData = dialogClearFAData.value();
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryFixedAssets</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates <c>Query</c> object which will be used for calculation of fixed assets net book value.
    /// </summary>
    /// <param name="_calculationDate">
    ///  Date on which data calculated.
    /// </param>
    /// <returns>
    ///  <c>Query</c> object.
    /// </returns>
    /// <remarks>
    ///  The query summarizes <c>RAssetTransRecords</c> of required types joined to last on date record from <c>RAssetMoveHist</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query initQueryFixedAssets(TransDate _calculationDate)
    {
        #define.RAssetMoveHistOld('RAssetMoveHistOld')
    
        Query   query = new Query();
    
        QueryBuildDataSource qbdsRAssetTrans,
                             qbdsRAssetMoveHist,
                             qbdsRAssetMoveHistOld,
                             qbdsRAssetLocation,
                             qbdsRAssetTable;
        ;
    
        qbdsRAssetTrans = query.addDataSource(tableNum(RAssetTrans));
        qbdsRAssetTrans.addRange(fieldNum(RAssetTrans, TransDate)).value(SysQuery::range('', _calculationDate));
        qbdsRAssetTrans.addSelectionField(fieldNum(RAssetTrans, AmountMST), SelectionField::Sum);
        qbdsRAssetTrans.addRange(fieldNum(RAssetTrans, AssetTransType)).value(
            queryValue(RAssetTransType::Acquisition)     + ',' +
            queryValue(RAssetTransType::AcquisitionAdj)  + ',' +
            queryValue(RAssetTransType::DisposalScrap)   + ',' +
            queryValue(RAssetTransType::DisposalSale)    + ',' +
            queryValue(RAssetTransType::Disposal)        + ',' +
            queryValue(RAssetTransType::Depreciation)    + ',' +
            queryValue(RAssetTransType::DepreciationAdj) + ',' +
            queryValue(RAssetTransType::Revaluation));
        qbdsRAssetTrans.addRange(fieldNum(RAssetTrans, AssetStandardId)).value(assetStandardIdTax);
    
        qbdsRAssetTable = qbdsRAssetTrans.addDataSource(tableNum(RAssetTable));
        qbdsRAssetTable.addSelectionField(fieldNum(RAssetTable, TableId));
        qbdsRAssetTable.addLink(fieldNum(RAssetTrans, AccountNum), fieldNum(RAssetTable, AccountNum));
        qbdsRAssetTable.fetchMode(QueryFetchMode::One2One);
        qbdsRAssetTable.addRange(fieldNum(RAssetTable, AssetType)).value(RTax25AllocPrepareCalc::assetTypeRange());
    
        qbdsRAssetMoveHist = qbdsRAssetTrans.addDataSource(tableNum(RAssetMoveHist));
        qbdsRAssetMoveHist.addSelectionField(fieldNum(RAssetMoveHist, TableId));
        qbdsRAssetMoveHist.joinMode(JoinMode::OuterJoin);
        qbdsRAssetMoveHist.fetchMode(QueryFetchMode::One2One);
        qbdsRAssetMoveHist.addRange(fieldNum(RAssetMoveHist, MoveType)).value(queryValue(RAssetMoveType::Transfer));
        qbdsRAssetMoveHist.addRange(fieldNum(RAssetMoveHist, ChangeDate)).value(SysQuery::range('', _calculationDate));
        qbdsRAssetMoveHist.addLink(fieldNum(RAssetTrans, AccountNum), fieldNum(RAssetMoveHist, AccountNum));
    
        qbdsRAssetMoveHistOld = qbdsRAssetMoveHist.addDataSource(tableNum(RAssetMoveHist), #RAssetMoveHistOld);
        qbdsRAssetMoveHistOld.joinMode(JoinMode::NoExistsJoin);
        qbdsRAssetMoveHistOld.fetchMode(QueryFetchMode::One2One);
        qbdsRAssetMoveHistOld.addRange(fieldNum(RAssetMoveHist, MoveType)).value(queryValue(RAssetMoveType::Transfer));
        qbdsRAssetMoveHistOld.addLink(fieldNum(RAssetMoveHist, AccountNum), fieldNum(RAssetMoveHist, AccountNum));
        qbdsRAssetMoveHistOld.addRange(fieldNum(RAssetMoveHist, ChangeDate)).value(SysQuery::range('', _calculationDate));
        qbdsRAssetMoveHistOld.addRange(fieldNum(Common,RecId)).value(strFmt('(((%1.%2) > (%3.%2)))',
            qbdsRAssetMoveHistOld.name(),
            fieldStr(RAssetMoveHist, ChangeDate),
            qbdsRAssetMoveHist.name()));
    
        qbdsRAssetLocation = qbdsRAssetMoveHist.addDataSource(tableNum(RAssetLocation));
        qbdsRAssetLocation.joinMode(JoinMode::OuterJoin);
        qbdsRAssetLocation.fetchMode(QueryFetchMode::One2One);
        qbdsRAssetLocation.addSelectionField(fieldNum(RAssetLocation, BranchId));
        qbdsRAssetLocation.addSortField(fieldNum(RAssetLocation, BranchId));
        qbdsRAssetLocation.orderMode(OrderMode::GroupBy);
        qbdsRAssetLocation.addLink(fieldNum(RAssetMoveHist, NewLocation), fieldNum(RAssetLocation, Location));
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRPayrollModuleInstalled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines, if russian payroll module is installed.
    /// </summary>
    /// <returns>
    ///  True, if module is installed; otherwise false.
    /// </returns>
    private boolean isRPayrollModuleInstalled()
    {
        return this.payrollClassId() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        ;
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmRecalculate(boolean _recalculate = recalculate)
    {
        recalculate = _recalculate;
        return recalculate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRTax25RegisterJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTrans parmRTax25RegisterJournalTrans(RTax25RegisterJournalTrans _registerJournalTrans = registerJournalTrans)
    {
        registerJournalTrans = _registerJournalTrans;
        return registerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payrollClassId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates and returns class id of class, which returns data about employees from russian payroll module.
    /// </summary>
    /// <returns>
    ///  Class id value.
    /// </returns>
    private ClassId payrollClassId()
    {
        if (!payrollChecked)
        {
            payrollClassId = className2Id(identifierStr(RPayAverageHeadcountFundByBranch));
            payrollChecked = true;
        }
    
        return payrollClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Executes the main business logic of class.
    /// </summary>
    /// <remarks>
    ///  Goes through each month end date and calculates data on this date.
    /// </remarks>
    #AviFiles
    #OCCRetryCount
    public void run()
    {
        TransDate       calculationDate;
        ;
        try
        {
            ttsBegin;
    
            assetStandardIdTax = RAssetParameters::find().StandardTaxIdDefault;
            mainBranch = Branches_RU::findByVendAccount("");
    
            if (registerJournalTrans)
            {
                fromDate = registerJournalTrans.fromDate() - 1; //incoming balance used for average calculation also
                toDate   = registerJournalTrans.toDate();
            }
    
            //when recalculating, table recalculated until last calculated date
            if (recalculate)
            {
                toDate = RTax25AllocCalcDetails::lastCalculatedDate();
            }
    
            this.updatePreviouslyCalculated();
    
            for (calculationDate = fromDate;
                 calculationDate <= toDate;
                 calculationDate = endMth(nextMth(calculationDate)))
            {
                if (recalculate || !RTax25AllocCalcDetails::existOnDate(calculationDate))
                {
                    this.createFixedAssetsData(calculationDate);
    
                    this.createEmplData(calculationDate);
    
                    //adding branches which has no FA since there may be employees
                    this.addRestBranches(calculationDate);
                }
            }
    
            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        boolean ret     = true;
    
        switch (version)
        {
            case #currentVersion:
                [version, #currentList] = packedClass;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates or updates records in the <c>RTax25AllocCalcDetails</c> table.
    /// </summary>
    /// <param name="_calculationDate">
    ///  The date, on which record is created.
    /// </param>
    /// <param name="_branchId">
    ///  The id of separate division.
    /// </param>
    /// <param name="_amountMST">
    ///  <c>AmountMST</c> value, which must be filled to one or another field.
    /// </param>
    /// <param name="_fieldId">
    ///  The id of field which must be updated. EmplData or AssetNetBookValue fields must be used here.
    /// </param>
    private void updateDetails(TransDate _calculationDate, SeparateDivisionId_RU _branchId = '', AmountMST _amountMST = 0, fieldId _fieldId = 0)
    {
        RTax25AllocCalcDetails    rTax25AllocCalcDetails;
    
        SeparateDivisionId_RU     branchId;
    
        if (_branchId)
        {
            branchId = _branchId;
        }
        else
        {
            branchId = mainBranch.BranchId;
        }
    
        rTax25AllocCalcDetails = RTax25AllocCalcDetails::find(
            _calculationDate,
            branchId,
            true);
    
        if (!rTax25AllocCalcDetails)
        {
            rTax25AllocCalcDetails.TransDate          = _calculationDate;
            rTax25AllocCalcDetails.BranchId           = branchId;
        }
    
        if (_fieldId)
        {
            rTax25AllocCalcDetails.(_fieldId) += _amountMST;
        }
    
        rTax25AllocCalcDetails.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePreviouslyCalculated</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method cleans up amount fields in the <c>RTax25AllocCalcDetails</c> table.
    /// </summary>
    /// <remarks>
    ///  The method works during recalculation, if module is installed and data calculated automatically, or if user forces clean up of manually entered data.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void updatePreviouslyCalculated()
    {
        RTax25AllocCalcDetails    rTax25AllocCalcDetails;
        ;
    
        if ((recalculate && this.isRPayrollModuleInstalled()) || clearEmplData)
        {
            //updating records which were modified to keep user entered amounts
            update_recordset rTax25AllocCalcDetails
                setting EmplData    = 0
                where rTax25AllocCalcDetails.TransDate >= fromDate &&
                      rTax25AllocCalcDetails.TransDate <= toDate;
        }
    
        if ((recalculate && isConfigurationKeyEnabled(configurationKeyNum(RAsset))) || clearFAData)
        {
            //updating records which were modified to keep user entered amounts
            update_recordset rTax25AllocCalcDetails
                setting AssetNetBookValue    = 0
                where rTax25AllocCalcDetails.TransDate >= fromDate - 1 &&
                      rTax25AllocCalcDetails.TransDate <= toDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTypeRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method used to create query range on types of fixed assets, which are valid for calculation.
    /// </summary>
    /// <returns>
    ///  A range with fixed asset types.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Range assetTypeRange()
    {
        return RTax25RegisterParameters::find(RTax25RegisterTable::registerType2Id(RTax25RegisterType::ProfitAllocation), #AssetTypesCode).Parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25AllocPrepareCalc construct()
    {
        return new RTax25AllocPrepareCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Returns description of class, which is displayed at caption of dialog.
    /// </summary>
    /// <returns>
    /// The description of class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYP4881216";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTax25AllocPrepareCalc      rTax25PrepareCalc = RTax25AllocPrepareCalc::construct();
        RTax25AllocCalcDetails      rTax25AllocCalcDetails;
        FormDataSource              formDataSource;
    
        if (!_args)
        {
            throw error(Error::missingParameter(rTax25PrepareCalc));
        }
    
        rTax25PrepareCalc.getLast();
    
        rTax25PrepareCalc.parmRecalculate(_args.parmEnum());
    
        switch (_args.dataset())
        {
            case tableNum(RTax25RegisterJournalTrans):
                rTax25PrepareCalc.parmRTax25RegisterJournalTrans(_args.record());
                break;
            case tableNum(RTax25AllocCalcDetails):
                rTax25AllocCalcDetails = _args.record();
                rTax25PrepareCalc.parmFromDate(rTax25AllocCalcDetails.TransDate);
                formDataSource = FormDataUtil::getFormDataSource(rTax25AllocCalcDetails);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    
        rTax25PrepareCalc.saveLast();
    
        if (rTax25PrepareCalc.prompt())
        {
            rTax25PrepareCalc.runOperation();
    
            if (formDataSource)
            {
                formDataSource.research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>