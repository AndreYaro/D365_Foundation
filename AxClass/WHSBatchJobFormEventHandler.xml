<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSBatchJobFormEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WHSBatchJobFormEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>BatchJob_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event of BatchJob datasource init on the BatchJob form.
    /// </summary>
    /// <param name="_sender">The BatchJob Datasource</param>
    /// <param name="_e">The event arguments</param>
    [FormDataSourceEventHandler(formDataSourceStr(BatchJob, BatchJob), FormDataSourceEventType::Initialized)]
    public static void BatchJob_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        WHSBatchJobFormEventHandler::modifyBatchJobFormQuery(_sender.query(), _sender.formRun().args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>BatchJobEnhanced_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles event of BatchJob datasource init on the BatchJobEnhanced form.
    /// </summary>
    /// <param name="_sender">The BatchJob Datasource</param>
    /// <param name="_e">The event arguments</param>
    [FormDataSourceEventHandler(formDataSourceStr(BatchJobEnhanced, BatchJob), FormDataSourceEventType::Initialized)]
    public static void BatchJobEnhanced_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        WHSBatchJobFormEventHandler::modifyBatchJobFormQuery(_sender.query(), _sender.formRun().args());
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyBatchJobFormQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the query of the batch job form to filter by using the record from the caller.
    /// </summary>
    /// <param name="_currentQuery">
    /// The current query of the batch job form.
    /// </param>
    /// <param name="_args">
    /// The Arguments passed into the batch job form.
    /// </param>
    /// <returns>
    /// A modified query for the batch job which is filtered based on the caller.
    /// </returns>
    private static Query modifyBatchJobFormQuery(
        Query   _currentQuery,
        Args    _args)
    {
        if (_args.record())
        {
            if (_args.dataset() == tableNum(WHSWaveTable))
            {
                WHSWaveTable waveTable = _args.record();
                QueryBuildDataSource waveTableBatchQbds =  SysQuery::findOrCreateDataSource(_currentQuery, tableNum(WHSWaveTableBatch), tableNum(BatchJob));
                waveTableBatchQbds.relations(true);
                waveTableBatchQbds.joinMode(JoinMode::ExistsJoin);
                waveTableBatchQbds.addRange(fieldNum(WHSWaveTableBatch, WHSWaveTable)).value(queryValue(waveTable.RecId));
            }
            else if (_args.dataset() == tableNum(WHSWorkDeferredPutProcessingTask))
            {
                WHSWorkDeferredPutProcessingTask task = _args.record();
                QueryBuildDataSource batchQbds =  SysQuery::findOrCreateDataSource(_currentQuery, tableNum(Batch), tableNum(BatchJob));
                batchQbds.relations(true);
                batchQbds.joinMode(JoinMode::ExistsJoin);

                QueryBuildDataSource workDeferredPutProcessingTaskBatchQbds =  SysQuery::findOrCreateDataSource(_currentQuery, tableNum(WHSWorkDeferredPutProcessingTaskBatch), tableNum(Batch));
                workDeferredPutProcessingTaskBatchQbds.relations(true);
                workDeferredPutProcessingTaskBatchQbds.joinMode(JoinMode::ExistsJoin);

                workDeferredPutProcessingTaskBatchQbds.addRange(fieldNum(WHSWorkDeferredPutProcessingTaskBatch, WorkId)).value(queryValue(task.WorkId));
                workDeferredPutProcessingTaskBatchQbds.addRange(fieldNum(WHSWorkDeferredPutProcessingTaskBatch, WorkLineNumber)).value(queryValue(task.WorkLineNumber));
            }
        }
        return _currentQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>