<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLine_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesLine_ApplicationSuite_Extension</c> class is used for extension of the <c>SalesLine</c> table functionality.
/// </summary>
[ExtensionOf(tableStr(SalesLine))]
public final class SalesLine_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTable_InvoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the CustTable record for the SalesTable InvoiceAccount.
    /// </summary>
    /// <returns>The CustTable record.</returns>
    internal CustTable custTable_InvoiceAccount()
    {
        return CustTable::find(this.salesTable().InvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountSalesForFreeLedgerDimension_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>LedgerDimensionDefaultAccount</c> value that is used to specify the main account.
    /// </summary>
    /// <returns>The <c>LedgerDimensionDefaultAccount</c> value.</returns>
    public display LedgerDimensionDefaultAccount accountSalesForFreeLedgerDimension_IT()
    {
        SalesLineType salesLineType = this.type();
        return salesLineType.accountSalesForFree_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyUpdateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an intercompany order line should be updated.
    /// </summary>
    /// <returns>
    /// true if the intercompany order line should be updated; otherwise, false.
    /// </returns>
    public boolean interCompanyUpdateNow()
    {
        boolean ret = next interCompanyUpdateNow();
        DataAreaId interCompanyId = this.salesTable().InterCompanyCompanyId;

        if (!ret && interCompanyId)
        {
            ret = IntrastatTriangularDealToggle::isEnabledInDataArea(interCompanyId)
                && IntrastatTriangularDealToggle::isEnabledInDataArea(this.DataAreaId)
                && this.orig().StatTriangularDeal != this.StatTriangularDeal;

            ret = ret || this.isExternalInformationUpdated();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExternalInformationUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an external item id and name were updated.
    /// </summary>
    /// <returns>
    /// true if an external information were updated; otherwise, false.
    /// </returns>
    private boolean isExternalInformationUpdated()
    {
        return this.interCompanyPurchLine()
             && (this.orig().ExternalItemId != this.ExternalItemId 
                || this.orig().Name != this.Name);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>