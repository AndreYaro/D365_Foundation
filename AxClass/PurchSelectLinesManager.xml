<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchSelectLinesManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchSelectLinesManager</c> class contains the business logic that corresponds to the
///    <c>PurchSelectLines</c> form.
/// </summary>
public class PurchSelectLinesManager
{
    QueryBuildRange initialPOStatusCriteria;
    QueryBuildRange initialPOInvoiceAccountCriteria;
    QueryBuildRange initialPOLineStatusCriteria;
    QueryBuildRange initialPOLineStoppedCriteria;
    QueryBuildRange initialPOCurrencyCodeCriteria;

    FormDataSource parmPurchTable_ds;
    FormDataSource parmPurchLine_ds;
    PurchTableMarkTmp parmPurchTableMark;
    PurchLineMarkTmp parmPurchLineMark;

    AccountNum invoiceAccount;
    TradeLineRefId tradeLineRefId;
    ParmId parmId;
    CurrencyCode currencyCode;

    // <GEERU>
    AgreementHeaderExtRecId_RU agreementHeaderExtRecId;
    VendPostingProfile postingProfile;
    InventProfileType_RU inventProfileType;
    container purchTableExclude, purchLineInclude;
    #ISOCountryRegionCodes
    // </GEERU>
    Set origPurchSubTableSet;
    Set origPurchLineSet;
    Set newPurchLineSet;
    int64 countAllPORows;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOrRemoveSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds or removes a <c>PurchLine</c> record ID from the specified set.
    /// </summary>
    /// <param name="_evalAllLines">
    ///    A Boolean value that indicates whether to add or remove record IDs from all records in the
    ///    specified <c>PurchLine</c> buffer.
    /// </param>
    /// <param name="_purchLine">
    ///    A <c>PurchLine</c> record buffer.
    /// </param>
    /// <param name="_addRemove">
    ///    A Boolean value that indicates whether to add or remove the record ID.
    /// </param>
    private void addOrRemoveSet(NoYes _evalAllLines, PurchLine _purchLine, AddRemove _addRemove)
    {
        PurchLine purchLineLocal;

        if (_evalAllLines == NoYes::Yes)
        {
            purchLineLocal = parmPurchLine_ds.getFirst();

            while (purchLineLocal.RecId != 0)
            {
                this.addOrRemoveSet(NoYes::No, purchLineLocal, _addRemove);
                purchLineLocal = parmPurchLine_ds.getNext();
            }
        }
        else
        {
            if (_addRemove == AddRemove::Add)
            {
                newPurchLineSet.add(_purchLine.RecId);
                origPurchSubTableSet.add(_purchLine.PurchId);
            }
            else
            {
                newPurchLineSet.remove(_purchLine.RecId);

                //checks the existence of any other lines for current PurchId before removing the PurchId
                if (!this.doesLineExistForPurchId(_purchLine.PurchId))
                {
                    origPurchSubTableSet.remove(_purchLine.PurchId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllPOMarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether all purchase orders are marked.
    /// </summary>
    /// <returns>
    /// true if all purchase orders are marked; otherwise, false.
    /// </returns>
    public boolean areAllPOMarked()
    {
        boolean ret;
        int64 countSelectedRows;

        countSelectedRows = newPurchLineSet.elements() + origPurchSubTableSet.elements();

        if (countSelectedRows == countAllPORows)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllPOUnmarked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether all purchase orders are unmarked.
    /// </summary>
    /// <returns>
    /// true if all purchase orders are unmarked; otherwise, false.
    /// </returns>
    public boolean areAllPOUnmarked()
    {
        boolean ret;

        if (newPurchLineSet.empty() && origPurchSubTableSet.empty())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the default queries on the <c>purchTable_ds</c> and <c>purchLine_ds</c> form data sources.
    /// </summary>
    protected void buildQuery()
    {
        QueryBuildDataSource purchTableqbds;
        QueryBuildDataSource purchLineqbds;
        QueryBuildDataSource purchLineHeaderqbds;

        // <GEERU>
        QueryBuildDataSource purchTableqbds_RU;
        QueryBuildRange initialPORAgreementCriteria;
        QueryBuildRange initialPOLineRecIdCriteria;
        QueryBuildRange initialPOTableRecIdCriteria;
        // </GEERU>

        purchTableqbds = parmPurchTable_ds.query().dataSourceTable(tableNum(PurchTable));
        purchTableqbds.clearDynalinks();

        initialPOInvoiceAccountCriteria = purchTableqbds.addRange(fieldNum(PurchTable, InvoiceAccount));
        initialPOInvoiceAccountCriteria.value(queryValue(invoiceAccount));
        initialPOInvoiceAccountCriteria.status(RangeStatus::Locked);

        initialPOStatusCriteria = purchTableqbds.addRange(fieldNum(PurchTable, PurchStatus));
        initialPOStatusCriteria.value(enum2str(PurchStatus::Backorder));
        initialPOStatusCriteria.status(RangeStatus::Locked);

        initialPOCurrencyCodeCriteria = purchTableqbds.addRange(fieldNum(PurchTable, CurrencyCode));
        initialPOCurrencyCodeCriteria.value(queryValue(currencyCode));
        initialPOCurrencyCodeCriteria.status(RangeStatus::Locked);

        //include the Received status for Purchase Orders
        initialPOStatusCriteria = purchTableqbds.addRange(fieldNum(PurchTable, PurchStatus));
        initialPOStatusCriteria.value(enum2str(PurchStatus::Received));
        initialPOStatusCriteria.status(RangeStatus::Locked);

        purchLineHeaderqbds = purchTableqbds.addDataSource(tablenum(PurchLine));
        purchLineHeaderqbds.joinMode(JoinMode::ExistsJoin);
        purchLineHeaderqbds.relations(true);

        purchLineqbds = parmPurchLine_ds.query().dataSourceTable(tableNum(PurchLine));

        initialPOLineStatusCriteria = purchLineqbds.addRange(fieldNum(PurchLine, PurchStatus));
        initialPOLineStatusCriteria.value(enum2str(PurchStatus::Backorder));
        initialPOLineStatusCriteria.status(RangeStatus::Locked);

        //include the Received status for lines
        initialPOLineStatusCriteria = purchLineqbds.addRange(fieldNum(PurchLine, PurchStatus));
        initialPOLineStatusCriteria.value(enum2str(PurchStatus::Received));
        initialPOLineStatusCriteria.status(RangeStatus::Locked);

        initialPOLineStoppedCriteria = purchLineqbds.addRange(fieldNum(PurchLine, Blocked));
        initialPOLineStoppedCriteria.value(enum2str(NoYes::No));
        initialPOLineStoppedCriteria.status(RangeStatus::Locked);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            purchTableqbds_RU = PurchTable_RU::addToQuery(purchTableqbds);
            initialPORAgreementCriteria = purchTableqbds_RU.addRange(fieldNum(PurchTable_RU, AgreementHeaderExt_RU));
            initialPORAgreementCriteria.value(queryValue(agreementHeaderExtRecId));
            initialPORAgreementCriteria.status(RangeStatus::Locked);

            this.buildQueryForPostingProfile_RU();

            if (conLen(purchTableExclude))
            {
                initialPOTableRecIdCriteria = purchTableqbds.addRange(fieldNum(PurchTable, RecId));
                initialPOTableRecIdCriteria.value(queryNotValueCon_W(purchTableExclude));
                initialPOTableRecIdCriteria.status(RangeStatus::Locked);
            }

            if (conLen(purchLineInclude))
            {
                initialPOLineRecIdCriteria = purchLineqbds.addRange(fieldNum(PurchLine, RecId));
                initialPOLineRecIdCriteria.value(con2Str(purchLineInclude));
                initialPOLineRecIdCriteria.status(RangeStatus::Locked);
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForPostingProfile_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Add the invent- and posting- profile ranges to the default queries.
    /// </summary>
    protected void buildQueryForPostingProfile_RU()
    {
        PurchTable purchTable;
        PurchTable_RU purchTable_RU;
        PurchLine purchLine;
        PurchLine_W purchLine_W;
        boolean purchTableExists;

        while select PurchId, PostingProfile, RecId from purchTable
            where purchTable.InvoiceAccount == invoiceAccount
               && (purchTable.PurchStatus == PurchStatus::Backorder || purchTable.PurchStatus == PurchStatus::Received)
               && purchTable.CurrencyCode == currencyCode
            exists join purchTable_RU
                where purchTable_RU.PurchTable == purchTable.RecId
                    && purchTable_RU.AgreementHeaderExt_RU == agreementHeaderExtRecId
        {
            purchTableExists = false;
            while select RecId, InventDimId from purchLine
                where purchLine.PurchId == purchTable.PurchId
                    && ! purchLine.IsDeleted
                    && (purchLine.PurchStatus == PurchStatus::Backorder
                    || purchLine.PurchStatus == PurchStatus::Received)
                    && purchLine.Blocked == NoYes::No
                exists join purchLine_W
                    where purchLine_W.PurchLine == purchLine.RecId
                        && ((purchLine_W.PostingProfile_RU && purchLine_W.PostingProfile_RU == postingProfile)
                            || (!purchLine_W.PostingProfile_RU && purchTable.PostingProfile == postingProfile))
            {
                if (inventProfileType == purchLine.inventProfileType_RU())
                {
                    purchLineInclude += purchLine.RecId;
                    purchTableExists = true;
                }
            }
            if (!purchTableExists)
            {
                purchTableExclude += purchTable.RecId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countAllPOLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Counts the selectable purchase orders and lines in the <c>PurchSelectLines</c> form.
    /// </summary>
    public void countAllPOLines()
    {
        PurchTable purchTable;
        PurchLine purchLine;
        PurchTableMarkTmp purchTableMark;
        PurchLineMarkTmp purchLineMark;

        purchTableMark = this.parmPurchTableMark();
        purchLineMark = this.parmPurchLineMark();

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            PurchSelectLinesManager::fillPurchMarks_RU(
                purchTableMark,
                purchLineMark,
                invoiceAccount,
                currencyCode,
                agreementHeaderExtRecId,
                postingProfile,
                inventProfileType
            );
        }
        else
        {
            // </GEERU>
            // Turn off RLS since this is a form datasource and
            // with RLS on, the insert_recordset statements below
            // will degrade to row-by-row operations and cause
            // an RPC per row
            purchTableMark.recordLevelSecurity(false);
            purchLineMark.recordLevelSecurity(false);

            // Note that one RPC will be caused by each of
            // the select statements below. This would normally
            // be moved to the server as a single method call
            // but TempDB buffers used as form datasources cannot
            // be passed as variables to server methods and keep
            // their links in-tact. To avoid this, the queries
            // are done directly from the client resulting in
            // 4 total RPC's for this method. Compared to the overall
            // cost of the method (which is moving thousands of
            // rows of data), these RPC's are negligable.

            insert_recordset purchTableMark (PurchId)
                select PurchId from purchTable
                where purchTable.InvoiceAccount == invoiceAccount &&
                     (purchTable.PurchStatus == PurchStatus::Backorder || purchTable.PurchStatus == PurchStatus::Received) &&
                      purchTable.CurrencyCode == currencyCode;

            insert_recordset purchLineMark (PurchLine)
                select RecId from purchLine
                    where !purchLine.IsDeleted
                        && (purchLine.PurchStatus == PurchStatus::Backorder || purchLine.PurchStatus == PurchStatus::Received)
                        && purchLine.Blocked == NoYes::No
                    exists join purchTableMark where
                        purchTableMark.PurchId == purchLine.PurchId;

            // Re-enable RLS
            purchTableMark.recordLevelSecurity(true);
            purchLineMark.recordLevelSecurity(true);

            // <GEERU>
        }
        // </GEERU>

        // Count the PO rows
        select count(RecId) from purchTableMark;
        select count(RecId) from purchLineMark;

        countAllPORows = purchTableMark.RecId + purchLineMark.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createClearPurchSets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and clears the global <c>origPurchSubTableSet</c>, <c>origPurchLineSet</c>,
    ///    <c>newPurchLineSet</c>, <c>otherInvoicesPurchLineRecIdSet</c>,
    ///    <c>otherInvoicesPurchTablePurchIdSet</c> sets.
    /// </summary>
    /// <remarks>
    ///    If the global sets are already created, this method will only clear them.
    /// </remarks>
    protected void createClearPurchSets()
    {
        origPurchSubTableSet = new Set(typeName2Type(extendedTypeStr(PurchId)));
        origPurchLineSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        newPurchLineSet = new Set(typeName2Type(extendedTypeStr(RecId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesLineExistForPurchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the record ID of the specified <c>PurchLine</c> record occurs in the
    /// <c>newPurchLineSet</c> set for the purchase ID of the specified <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase order ID value.
    /// </param>
    /// <returns>
    /// true if the record ID of the specified <c>PurchLine</c> record exists; otherwise, false.
    /// </returns>
    private boolean doesLineExistForPurchId(PurchId _purchId)
    {
        PurchLine purchLine;
        Set localPurchLineRecIds = new Set(typeName2Type(extendedTypeStr(RecId)));

        while select RecId from purchLine
            where purchLine.PurchId == _purchId &&
                 !purchLine.IsDeleted
        {
            localPurchLineRecIds.add(purchLine.RecId);
        }

        return Set::intersection(localPurchLineRecIds, newPurchLineSet).elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Evaluates whether one or more of the <c>PurchLine</c> record IDs are present in the specified set.
    /// </summary>
    /// <param name="_set">
    ///    The set in which to search for the record IDs.
    /// </param>
    /// <param name="_evalAllLines">
    ///    A Boolean value that indicates whether to search for all record IDs in the specified <paramref
    ///    name="_purchLine" /> parameter or just the currently selected record.
    /// </param>
    /// <param name="_purchId">
    ///    The purchase ID value on which to search.
    /// </param>
    /// <param name="_purchLineRecId">
    ///    The <c>PurchLineRecId</c> value on which to search.
    /// </param>
    /// <returns>
    ///    true if the record IDs are present in the set; otherwise, false.
    /// </returns>
    private boolean findInSet(Set _set, NoYes _evalAllLines, PurchId _purchId, RecId _purchLineRecId)
    {
        PurchLine purchLineLocal;
        boolean foundInSet = false;

        if ((_evalAllLines == NoYes::Yes) && (_purchId == ''))
        {
            purchLineLocal = parmPurchLine_ds.getFirst();

            while ((purchLineLocal.RecId != 0) && !(foundInSet))
            {
                foundInSet = this.findInSet(_set, NoYes::No, '', purchLineLocal.RecId);
                purchLineLocal = parmPurchLine_ds.getNext();
            }
        }
        else if (_evalAllLines == NoYes::Yes)
        {
            foundInSet = this.findRecordInSet(_set, 0, _purchId);
        }
        else
        {
            foundInSet = this.findRecordInSet(_set, _purchLineRecId);
        }

        return foundInSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecordInSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverses a set to determine the presence of the specifies record ID.
    /// </summary>
    /// <param name="_set">
    /// The set to search.
    /// </param>
    /// <param name="_recId">
    /// The record ID for which to search; optional.
    /// </param>
    /// <param name="_purchId">
    /// The purchase ID for which to search; optional.
    /// </param>
    /// <returns>
    /// true if the <c>RecId</c> value is present in the specified set; otherwise, false.
    /// </returns>
    protected boolean findRecordInSet(Set _set, RecId _recId = 0, PurchId _purchId = '')
    {
        boolean foundInSet = false;

        if (_recId != 0)
        {
            foundInSet = (_set.in(_recId));
        }
        else if (_purchId != '')
        {
            foundInSet = (_set.in(_purchId));
        }

        return foundInSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes local variable values upon the initialization of this class.
    /// </summary>
    public void init()
    {
        // initPurchSets also sets the invoiceAccount variable.
        this.initPurchSets();
        this.buildQuery();

        this.countAllPOLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchSets</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the default values in the sets.
    /// </summary>
    /// <remarks>
    ///    The values in the <c>origPurchLineSet</c> set are lines that are currently in the line data source
    ///    of the parent form, such as invoice lines or packing slip lines.The values in the
    ///    <c>newPurchLineSet</c> set are the lines that the user has selected in the <c>PurchSelectLines</c>
    ///    form.
    /// </remarks>
    public void initPurchSets()
    {
        this.createClearPurchSets();
        this.populatePurchSets();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks or un-marks one or more <c>PurchLine</c> records.
    /// </summary>
    /// <param name="_purchId">
    /// The purchase ID value to mark or search for.
    /// </param>
    /// <param name="_purchLineRecId">
    /// The record ID value to mark or to search for.
    /// </param>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> record buffer.
    /// </param>
    /// <param name="_include">
    /// A Boolean value that specifies whether the specified records should be marked or unmarked.
    /// </param>
    /// <param name="_evalAllLines">
    /// A Boolean value that specifies whether all records in the record buffer should be marked.
    /// </param>
    /// <param name="_set">
    /// A Boolean value that specifies whether the value is to be set and retrieved or only retrieved.
    /// </param>
    /// <returns>
    /// A <c>NoYes::Yes</c> enumeration value if the specified records are marked; otherwise, the
    /// <c>NoYes::No</c> value.
    /// </returns>
    public NoYes mark(PurchId _purchId, RecId _purchLineRecId, PurchLine _purchLine, NoYes _include, NoYes _evalAllLines, boolean _set)
    {
        boolean isMarked;
        boolean doContinue = true;

        if (_set)
        {
            if (_include)
            {
                // Including a new line(s), so add it to the Set.
                isMarked = true;
                this.addOrRemoveSet(_evalAllLines, _purchLine, AddRemove::Add);
            }
            else
            {
                //
                // The user is de-selecting the "include" on the purchTable. Must check if
                // any lines were Original. If any were, need to warn the user and ask
                // if they want to continue.
                if (this.mustShowWarning(_evalAllLines, _purchLineRecId))
                {
                    if (_evalAllLines)
                    {
                        doContinue = this.verifyRemovingLineWithUserDialog("@SYS128019");
                    }
                    else
                    {
                        doContinue = this.verifyRemovingLineWithUserDialog("@SYS128020");
                    }
                }

                if (doContinue)
                {
                    // Either not in OrigLine set or they want to continue with removing the original lines.
                    isMarked = false;
                    this.addOrRemoveSet(_evalAllLines, _purchLine, AddRemove::Remove);
                }
                else
                {
                    isMarked = true;
                }
            }
        }
        else
        {
            // Get whether the line is selected (in the New Set).
            if (_evalAllLines)
            {
                isMarked = this.findInSet(origPurchSubTableSet, _evalAllLines, _purchId, 0);
            }
            else
            {
                isMarked = this.findInSet(newPurchLineSet, _evalAllLines, '', _purchLineRecId);
            }
        }

        return isMarked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowWarning</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a warning must be shown when the user is unselecting the "include" on the purchTable while any of the lines were Original.
    /// </summary>
    /// <param name = "_evalAllLines">A Boolean value that specifies whether all records in the record buffer should be marked.</param>
    /// <param name = "_purchLineRecId">The purchase line's record id value to mark or to search for.</param>
    /// <returns>true if the warning must be shown; false, otherwise.</returns>
    protected boolean mustShowWarning(NoYes _evalAllLines, RefRecId _purchLineRecId)
    {
        // Find in OrigLine set. If found, show warning to continue.
        return (this.findInSet(origPurchLineSet, _evalAllLines, '', _purchLineRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks all open <c>PurchLine</c> records that relate to all <c>PurchTable</c> records in the
    ///    <c>purchTable_ds</c> form data source.
    /// </summary>
    public void markAll()
    {
        int iPos;
        PurchTable purchTable;

        // Save position of current PurchTable.
        iPos = parmPurchTable_ds.getPosition();

        // Start at the first record. Must do both .first and .getFirst to get purchLine_ds to synch properly.
        parmPurchTable_ds.first();
        purchTable = parmPurchTable_ds.getFirst();
        parmPurchLine_ds.linkActive();

        // Now go through the rest of the POs. Must do both .getNext and .next to get purchLine_ds to synch properly
        while (purchTable)
        {
            this.addOrRemoveSet(NoYes::Yes, null, AddRemove::Add);
            purchTable = parmPurchTable_ds.getNext();
            //Actually move the dataset so the purchLine rereads the new data.
            parmPurchTable_ds.next();
            parmPurchLine_ds.linkActive();
        }

        // Set back at the original position.
        parmPurchTable_ds.setPosition(iPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmId</Name>
				<Source><![CDATA[
    public ParmId parmParmId(ParmId _parmId = parmId)
    {
        parmId = _parmId;
        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine_ds</Name>
				<Source><![CDATA[
    public FormDataSource parmPurchLine_ds(FormDataSource _parmPurchLine_ds)
    {
        parmPurchLine_ds =_parmPurchLine_ds;
        return parmPurchLine_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLineMark</Name>
				<Source><![CDATA[
    public PurchLineMarkTmp parmPurchLineMark(PurchLineMarkTmp _parmPurchLineMark = parmPurchLineMark)
    {
        parmPurchLineMark = _parmPurchLineMark;
        return parmPurchLineMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTable_ds</Name>
				<Source><![CDATA[
    public FormDataSource parmPurchTable_ds(FormDataSource _parmPurchTable_ds)
    {
        parmPurchTable_ds =_parmPurchTable_ds;
        return parmPurchTable_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableMark</Name>
				<Source><![CDATA[
    public PurchTableMarkTmp parmPurchTableMark(PurchTableMarkTmp _parmPurchTableMark = parmPurchTableMark)
    {
        parmPurchTableMark = _parmPurchTableMark;
        return parmPurchTableMark;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeLineRefId</Name>
				<Source><![CDATA[
    public TradeLineRefId parmTradeLineRefId(TradeLineRefId _tradeLineRefId = tradeLineRefId)
    {
        tradeLineRefId = _tradeLineRefId;
        return tradeLineRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>passSets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Passes the sets based on the <c>PurchSelectLines</c> form to the <c>PurchFormLetter_Invoice</c>
    /// class object to compute the creation or deletion of invoice lines.
    /// </summary>
    /// <param name="_purchFormLetter">
    /// The <c>PurchFormLetter_Invoice</c> class object of the parent form.
    /// </param>
    /// <remarks>
    /// The advance creation in case of multiple purchase orders is not possible.
    /// </remarks>
    public void passSets(PurchFormLetter_Invoice _purchFormLetter)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        VendInvoiceInfoTable localParmTable = this.getVendInvoiceInfoTable(_purchFormLetter);

        _purchFormLetter.purchSelectLines(origPurchSubTableSet, newPurchLineSet, localParmTable);

        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            while select vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == localParmTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == localParmTable.TableRefId
                join purchLine
                    where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
            {
                TransTaxInformationHelper::copyTransTaxInformation(purchLine, vendInvoiceInfoLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default header record.
    /// </summary>
    /// <param name="_purchFormLetter">
    /// The <c>PurchFormLetter_Invoice</c> class object of the parent form.
    /// </param>
    /// <returns>
    /// A <c>VendInvoiceInfoTable</c> record.
    /// </returns>
    protected VendInvoiceInfoTable getVendInvoiceInfoTable(PurchFormLetter_Invoice _purchFormLetter)
    {
        VendInvoiceInfoTable localParmTable;

        // retrieve default header record
        select firstonly localParmTable
            where localParmTable.TableRefId == tradeLineRefId &&
                  localParmTable.ParmId == parmId;

        return localParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePurchSets</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the global Sets with the default values for this session.
    /// </summary>
    protected void populatePurchSets()
    {
        container purchSubTableCont;
        container purchLineCont;
        // <GEERU>
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoTable_RU vendInvoiceInfoTable_RU;
        // </GEERU>

        // initialize the new and orig Sets.
        [invoiceAccount, currencyCode, purchSubTableCont, purchLineCont] = PurchSelectLinesManager::getPurchSetsData(tradeLineRefId);

        origPurchSubTableSet = Set::create(purchSubTableCont);
        origPurchLineSet = Set::create(purchLineCont);
        newPurchLineSet = Set::create(purchLineCont);
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            vendInvoiceInfoTable = VendInvoiceInfoTable::find(parmId, tradeLineRefId);
            vendInvoiceInfoTable_RU = vendInvoiceInfoTable.vendInvoiceInfoTable_RU();

            currencyCode = vendInvoiceInfoTable.CurrencyCode;
            agreementHeaderExtRecId = vendInvoiceInfoTable_RU.AgreementHeaderExt_RU ? vendInvoiceInfoTable_RU.AgreementHeaderExt_RU : vendInvoiceInfoTable.purchTable().purchTable_RU().AgreementHeaderExt_RU;
            postingProfile = vendInvoiceInfoTable.PostingProfile;
            inventProfileType = vendInvoiceInfoTable_RU.InventProfileType_RU;
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>unMarkAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Un-marks all records.
    /// </summary>
    public void unMarkAll()
    {
        boolean doContinue = true;

        // If anything in original set, warn user.
        if (!origPurchLineSet.empty())
        {
            doContinue = this.verifyRemovingLineWithUserDialog("@SYS128019");
        }

        if (doContinue)
        {
            // Either no original lines, or the user is OK unselecting them. Clear the set.
            origPurchSubTableSet = new Set(typeName2Type(extendedTypeStr(PurchId)));
            newPurchLineSet = new Set(typeName2Type(extendedTypeStr(RecId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyRemovingLineWithUserDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows a dialog box to the user to verify the removal of a purchase order or purchase order line.
    /// </summary>
    /// <param name="_usermsg">
    ///    A string that contains the message shown to the user in the dialog box
    /// </param>
    /// <returns>
    ///    true if the user responds that it is fine to remove the PO or PO line; otherwise, false.
    /// </returns>
    protected boolean verifyRemovingLineWithUserDialog(str _usermsg)
    {
        return (Box::yesNo(_usermsg, DialogButton::Yes) == DialogButton::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchSelectLinesManager construct()
    {
        return new PurchSelectLinesManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPurchLineMark_RU</Name>
				<Source><![CDATA[
    private static void fillPurchLineMark_RU(PurchTableMarkTmp _purchTableMark, PurchLineMarkTmp _purchLineMark, VendPostingProfile _postingProfile, InventProfileType_RU _inventProfileType)
    {
        PurchTable purchTable;
        PurchLine purchLine;
        PurchLine_W purchLine_W;
        InventDim inventDim;
        InventProfile_RU inventProfile_RU;
        if (_inventProfileType != InventProfileType_RU::NotSpecified && _inventProfileType != InventProfileType_RU::General)
        {
            insert_recordset _purchLineMark (purchLine)
                select RecId from purchLine
                    where !purchLine.IsDeleted
                        && (purchLine.PurchStatus == PurchStatus::Backorder || purchLine.PurchStatus == PurchStatus::Received)
                        && purchLine.Blocked == NoYes::No
                    join purchTable where purchTable.PurchId == purchLine.PurchId
                    join _purchTableMark where _purchTableMark.PurchId == purchTable.PurchId
                    join inventDim where inventDim.inventDimId == purchLine.InventDimId
                    join inventProfile_RU
                        where inventProfile_RU.InventProfileId == inventDim.InventProfileId_RU &&
                              inventProfile_RU.InventProfileType == _inventProfileType
                    exists join purchLine_W
                        where purchLine_W.PurchLine == purchLine.RecId
                            && ((purchLine_W.PostingProfile_RU && purchLine_W.PostingProfile_RU == _postingProfile)
                                || (!purchLine_W.PostingProfile_RU && purchTable.PostingProfile== _postingProfile));
        }
        else
        {
            // since InventProfileType_RU::NotSpecified shpould be treated as InventProfileType_RU::General and
            // there can be no inventDim and inventPofile_RU, not exists join applied
            insert_recordset _purchLineMark (purchLine)
                select RecId from purchLine
                    where !purchLine.IsDeleted
                        && (purchLine.PurchStatus == PurchStatus::Backorder || purchLine.PurchStatus == PurchStatus::Received)
                        && purchLine.Blocked == NoYes::No
                    join purchTable where purchTable.PurchId == purchLine.PurchId
                    join _purchTableMark where _purchTableMark.PurchId == purchTable.PurchId
                    join purchLine_W
                        where purchLine_W.PurchLine == purchLine.RecId
                            && ((purchLine_W.PostingProfile_RU && purchLine_W.PostingProfile_RU == _postingProfile)
                                || (!purchLine_W.PostingProfile_RU && purchTable.PostingProfile == _postingProfile))
                    notExists join inventDim where inventDim.inventDimId == purchLine.InventDimId
                    join inventProfile_RU
                        where inventProfile_RU.InventProfileId == inventDim.InventProfileId_RU &&
                              (inventProfile_RU.InventProfileType != _inventProfileType &&
                               inventProfile_RU.InventProfileType != InventProfileType_RU::NotSpecified);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPurchMarks_RU</Name>
				<Source><![CDATA[
    private static void fillPurchMarks_RU(
        PurchTableMarkTmp _purchTableMark,
        PurchLineMarkTmp _purchLineMark,
        AccountNum _invoiceAccount,
        CurrencyCode _currencyCode,
        AgreementHeaderExtRecId_RU _agreementHeaderExtRecId,
        VendPostingProfile _postingProfile,
        InventProfileType_RU _inventProfileType)
    {
        // Turn off RLS since this is a form datasource and
        // with RLS on, the insert_recordset statements below
        // will degrade to row-by-row operations and cause
        // an RPC per row
        _purchTableMark.recordLevelSecurity(false);
        _purchLineMark.recordLevelSecurity(false);

        PurchSelectLinesManager::fillPurchTableMark_RU(_purchTableMark, _invoiceAccount, _currencyCode, _agreementHeaderExtRecId);
        PurchSelectLinesManager::fillPurchLineMark_RU(_purchTableMark, _purchLineMark, _postingProfile, _inventProfileType);

        // Re-enable RLS
        _purchTableMark.recordLevelSecurity(true);
        _purchLineMark.recordLevelSecurity(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPurchTableMark_RU</Name>
				<Source><![CDATA[
    private static void fillPurchTableMark_RU(PurchTableMarkTmp _purchTableMark, AccountNum _invoiceAccount, CurrencyCode _currencyCode, AgreementHeaderExtRecId_RU _agreementHeaderExtRecId)
    {
        PurchTable purchTable;
        PurchTable_RU purchTable_RU;

        if (_agreementHeaderExtRecId)
        {
            insert_recordset _purchTableMark (PurchId)
                select PurchId from purchTable
                where purchTable.InvoiceAccount == _invoiceAccount &&
                        (purchTable.PurchStatus == PurchStatus::Backorder || purchTable.PurchStatus == PurchStatus::Received) &&
                        purchTable.CurrencyCode == _currencyCode
                exists join purchTable_RU
                    where purchTable_RU.PurchTable == purchTable.RecId &&
                          purchTable_RU.AgreementHeaderExt_RU == _agreementHeaderExtRecId;
        }
        else
        {
            // Code duplicated because _agreementHeaderExtRecId == 0 should match both 0 and not existing purchTable_RU
            insert_recordset _purchTableMark (PurchId)
                select PurchId from purchTable
                where purchTable.InvoiceAccount == _invoiceAccount &&
                        (purchTable.PurchStatus == PurchStatus::Backorder || purchTable.PurchStatus == PurchStatus::Received) &&
                        purchTable.CurrencyCode == _currencyCode
                notExists join purchTable_RU
                    where purchTable_RU.PurchTable == purchTable.RecId &&
                          purchTable_RU.AgreementHeaderExt_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchSetsData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the default data for the passed sets from the header and line tables.
    /// </summary>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> value that is used to filter the header and line tables.
    /// </param>
    /// <returns>
    ///  A container that has the following:
    ///  <list type="number">
    ///   <item>
    ///    <description>
    ///    The <c>VendInvoiceAccount</c> value that is used to select the open purchase orders.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    The <c>CurrencyCode</c> value that is used to select the open purchase orders.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    A packed set container of header <c>PurchIds</c>.
    ///    </description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    A packed set container of line <c>RecIds</c>.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </returns>
    static container getPurchSetsData(TradeLineRefId _tableRefId)
    {
        VendInvoiceAccount invcAccount;
        CurrencyCode currencyCode;

        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;

        Set purchPOSet;
        container purchPOCont;

        Set purchLineSet;
        container purchLineCont;

        if (_tableRefId != '')
        {
            purchPOSet = new Set(typeName2Type(extendedTypeStr(PurchId)));
            purchLineSet = new Set(typeName2Type(extendedTypeStr(RecId)));

            select firstonly InvoiceAccount, CurrencyCode from vendInvoiceInfoTable
                where vendInvoiceInfoTable.TableRefId == _tableRefId &&
                      vendInvoiceInfoTable.ParmId != '';

            if (vendInvoiceInfoTable.RecId)
            {
                invcAccount = vendInvoiceInfoTable.InvoiceAccount;
                currencyCode = vendInvoiceInfoTable.CurrencyCode;
            }

            while select PurchLineRecId, OrigPurchId from vendInvoiceInfoLine
               where vendInvoiceInfoLine.TableRefId == _tableRefId &&
                     vendInvoiceInfoLine.ParmId != '' &&
                     vendInvoiceInfoLine.PurchLineRecId != 0
            {
                purchPOSet.add(vendInvoiceInfoLine.OrigPurchId);
                purchLineSet.add(vendInvoiceInfoLine.PurchLineRecId);
            }
        }

        purchPOCont = purchPOSet.pack();
        purchLineCont = purchLineSet.pack();

        return [invcAccount, currencyCode, purchPOCont, purchLineCont];
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchSelectLinesManager</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of the <c>PurchSelectLinesManager</c> class.
    /// </summary>
    /// <param name="_tradeLineRefId">
    ///    The <c>TradeLineRefID</c> value of the currently selected <c>PurchEditLines</c> record.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PurchSelectLinesManager</c> class.
    /// </returns>
    public static PurchSelectLinesManager newPurchSelectLinesManager(TradeLineRefId _tradeLineRefId)
    {
        PurchSelectLinesManager purchSelectLinesManager = PurchSelectLinesManager::construct();
        purchSelectLinesManager.parmTradeLineRefId(_tradeLineRefId);

        return purchSelectLinesManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>