<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ERFormatMappingRunJobTableEventHandler_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ERFormatMappingRunJobTableEventHandler_W</c> class is the base class for ERFormatMappingRunJobTable table.
/// </summary>
internal static class ERFormatMappingRunJobTableEventHandler_W
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ERFormatMappingRunJobTable_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies when the related electronic reporting job is updated.
    /// </summary>
    /// <param name="sender">Sender.</param>
    /// <param name="e">Data event args.</param>
    [DataEventHandler(tableStr(ERFormatMappingRunJobTable), DataEventType::Updated)]
    public static void ERFormatMappingRunJobTable_onUpdated(Common _sender, DataEventArgs _e)
    {
        ERFormatMappingRunJobTable runJobTable = _sender as ERFormatMappingRunJobTable;
        const int RetryNum = 5;
        const int DeadlockRetryWait = 500;

        if (runJobTable.RecId
            && runJobTable.orig().Status != runJobTable.Status
            && runJobTable.Status == ERFormatMappingRunJobStatus::Finished)
        {
            EInvoiceGenerationBatchLink_W generationBatchLink;

            while select generationBatchLink
                where generationBatchLink.RunJobId == runJobTable.RecId
            {
                changecompany(generationBatchLink.RefDataAreaId)
                {
                    int retryCount = 0;

                    try
                    {
                        if (generationBatchLink.RefTableId == tableNum(CustCollectionLetterJour))
                        {
                            ECollectionGenerationService::setSentElectronicallyCustCollectionLetterJour(
                                generationBatchLink.RefTableId,
                                generationBatchLink.RefRecId,
                                true);
                        }
                        else
                        {
                            EInvoiceGenerationService::setSentElectronicallyInvoiceRecord(
                                generationBatchLink.RefTableId,
                                generationBatchLink.RefRecId,
                                true);
                        }
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= RetryNum)
                        {
                            throw Exception::Deadlock;
                        }
                        else
                        {
                            sleep(DeadlockRetryWait);

                            retry;
                        }
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= RetryNum)
                            {
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            throw Exception::UpdateConflict;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>