<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkflowStatus_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WorkflowStatus_ApplicationSuite_Extension</c> is the extension of form <c>WorkflowStatus</c>.
/// </summary>
[ExtensionOf(formStr(WorkflowStatus))]
internal final class WorkflowStatus_ApplicationSuite_Extension
{
    private boolean isWorkflowSummaryEnabled;
    private AppCopilotSummaryController copilotSummaryController;
    private AppCopilotSummaryControlBuilder copilotControlBuilder;
    private boolean isCacheEnabled;
    
    private SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(formStr(WorkflowStatus));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void init()
    {
        next init();

        isWorkflowSummaryEnabled = WorkflowStatusCopilotSummaryGenerator::isWorkflowCopilotSummaryEnabled();
        if (isWorkflowSummaryEnabled)
        {
            isCacheEnabled = WorkflowStatusCopilotSummaryCacheFlight::instance().isEnabled();
            this.initAppCopilotSummary();
            CopilotSummaryTab.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void run()
    {
        next run();

        if (isWorkflowSummaryEnabled)
        {
            copilotSummaryController.registerEvents();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAppCopilotSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the copilot summary control builder and controller.
    /// </summary>
    internal void initAppCopilotSummary()
    {
        var controlContract = AppCopilotSummaryControlContract::construct(this, WorkflowCopilotSummaryGroup);
        controlContract.parmLayout(AppCopilotSummaryControlLayout::Horizontal);
        controlContract.parmTermsLabelId(literalStr("@AppCopilotSummaryControl:LearnMore"));
        controlContract.parmTermsLink('https://go.microsoft.com/fwlink/?linkid=2272193');

        copilotControlBuilder = AppCopilotSummaryControlBuilder::newFromContract(controlContract);
        copilotControlBuilder.addTopic(WorkflowStatusCopilotSummaryConstants::StatusTopic, "@WorkflowCopilotSummary:WorkflowStatus");

        copilotSummaryController = AppCopilotSummaryController::newFromBuilder(copilotControlBuilder, UserLicenseType::Finance);
        copilotSummaryController.registerGetRecordKeyInTelemetryCallback(formMethodStr(WorkflowStatus, getRecordIdInTelemetry));
        copilotSummaryController.registerSummaryGenerator(
            WorkflowStatusCopilotSummaryConstants::StatusTopic,
            formMethodStr(WorkflowStatus, getParameterContainer),
            classNum(WorkflowStatusCopilotSummaryGenerator),
            staticMethodStr(WorkflowStatusCopilotSummaryGenerator, determineSummary),
            formMethodStr(WorkflowStatus, summaryCallBack),
            isCacheEnabled,
            formMethodStr(WorkflowStatus, getCacheKey),
            staticMethodStr(WorkflowStatusCopilotSummaryGenerator, validateSummaryResult));

        copilotSummaryController.trackDataSource(WorkflowTrackingStatusTable_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryCallBack</Name>
				<Source><![CDATA[
    /// <summary>
    /// The call back method to update AI result to UI.
    /// </summary>
    /// <param name = "_result">The async result.</param>
    internal void summaryCallBack(AsyncTaskResult _result)
    {
        if (isWorkflowSummaryEnabled)
        {
            using (SysInstrumentationActivityContext activityContext = logger.activityContext(formMethodStr(WorkflowStatus, summaryCallBack), formStr(workflowStatus))
                .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
                .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
                .addCustomProperty('UniqueCorrelationId', guid2Str(copilotSummaryController.parmUniqueCorrelationId())))
            {
                boolean updateTopicSuccess;
                utcdatetime lastGeneratedDateTime = DateTimeUtil::getSystemDateTime();
                AppCopilotSummaryResultContract contract = copilotSummaryController.getSummaryResult(_result, isCacheEnabled);
                if (contract)
                {
                    lastGeneratedDateTime = contract.getLastGenertedDateTime();
                    container AIResult = contract.getSummaryResult();
                    WorkflowStatusCopilotSummaryResultContract workflowResultContract = WorkflowStatusCopilotSummaryResultContract::unpack(AIResult);
                    if (workflowResultContract)
                    {
                        WorkflowTrackingStatusTable currentWorkflowStatusTable = this.dataSource(formDataSourceStr(WorkflowStatus, WorkflowTrackingStatusTable)).cursor();
                        RecId recordForCurrentSummary = workflowResultContract.getTrackingStatusRecId();
                        if (recordForCurrentSummary == currentWorkflowStatusTable.RecId)
                        {
                            str summaryContent = workflowResultContract.getWorkflowSummaryResult();
                            if (summaryContent == WorkflowStatusCopilotSummaryConstants::LanguageNotSupported)
                            {
                                copilotControlBuilder.updateTopicContent(WorkflowStatusCopilotSummaryConstants::StatusTopic, "@AppCopilotSummaryControl:LanguageNotSupport");
                                logger.logInformation(strFmt('Workflow summary result returned language not supported for %1', currentUserLanguage()));
                            }
                            else if (summaryContent == WorkflowStatusCopilotSummaryConstants::NoDataToSummarize)
                            {
                                copilotControlBuilder.updateTopicContent(WorkflowStatusCopilotSummaryConstants::StatusTopic, "@AppCopilotSummaryControl:NoDataToSummarize");
                                logger.logInformation('No data to summarize for current workflow.');
                            }
                            else if (summaryContent == '')
                            {
                                copilotControlBuilder.updateTopicContent(WorkflowStatusCopilotSummaryConstants::StatusTopic, "@AppCopilotSummaryControl:AISummaryUnavailable");
                                logger.logInformation('Workflow summary result returned blank');
                            }
                            else
                            {
                                copilotControlBuilder.updateTopicContent(WorkflowStatusCopilotSummaryConstants::StatusTopic, summaryContent);
                                updateTopicSuccess = true;
                            }
                            copilotControlBuilder.displayTopicContent();

                            this.setLastGeneratedDateTime(lastGeneratedDateTime);
                        }
                        else
                        {
                            logger.logError('Returned worflow status record did not match current workflow status record');
                        }
                    }
                }

                activityContext.addCustomProperty('UpdateTopicSuccess', int2Str(updateTopicSuccess));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cache key.
    /// </summary>
    /// <returns>The container for cache key.</returns>
    internal container getCacheKey()
    {
        return [currentUserLanguage(), WorkflowTrackingStatusTable.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the container which passed into Async call.
    /// </summary>
    /// <returns>The container passed into Async call.</returns>
    internal container getParameterContainer()
    {
        return [WorkflowTrackingStatusTable.RecId, copilotSummaryController.parmUniqueCorrelationId()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordIdInTelemetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record id in telemetry.
    /// </summary>
    /// <returns>The record id which to be logged int the telemetry.</returns>
    internal RecId getRecordIdInTelemetry()
    {
        return WorkflowTrackingStatusTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLastGeneratedDateTime</Name>
				<Source><![CDATA[
    private void setLastGeneratedDateTime(utcdatetime _lastGeneratedDateTime)
    {
        if (isCacheEnabled)
        {
            copilotControlBuilder.setLastGeneratedDateTime(_lastGeneratedDateTime);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>