<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPersonInfoService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>DirPersonInfoService</c> class contains the implementation for our
/// service which exposes certain person information, such as name,
/// professional title, communicator sign-in, and picture.
/// </summary>
public class DirPersonInfoService
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPersonInfoFromUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve person information based on the provided user ID.
    /// </summary>
    /// <param name="_userId">
    /// The user ID used to search for person information.
    /// </param>
    /// <returns>
    /// A <c>DirPersonInfoData</c> object containing information on the specified user.
    /// </returns>
    public DirPersonInfoData getPersonInfoFromUserId(UserId _userId)
    {
        // Represents the data contract
        DirPersonInfoData           personData;

        // Tables used to gather person info
        DirPerson                   dirPerson;
        DirPersonUser               dirPersonUser;
        LogisticsElectronicAddress  lyncAddress, emailAddress;
        HcmWorker                   hcmWorker;
        HcmTitle                    hcmTitle;
        HcmWorkerTitle              hcmWorkerTitle;

        // Initialize the data contract
        personData = new DirPersonInfoData();

        // Retrieve all relevant data except for the image
        select firstOnly RecId, Name from dirPerson
            outer join Locator from lyncAddress
                where lyncAddress.RecId == dirPerson.CommunicatorSignIn
            outer join Locator from emailAddress
                where emailAddress.RecId == dirPerson.PrimaryContactEmail
            outer join RecId from hcmWorker
                where hcmWorker.Person == dirPerson.RecId
            outer join RecId from hcmWorkerTitle
                where hcmWorkerTitle.Worker == hcmWorker.RecId
            outer join TitleId from hcmTitle
                where hcmWorkerTitle.Title == hcmTitle.RecId
            exists join dirPersonUser
                where dirPersonUser.User == _userId
                && dirPersonUser.PersonParty == dirPerson.RecId;

        // Ensure that a person was found before returning his information.
        // If no person was found, all of the returned properties will be empty.
        if (dirPerson.RecId)
        {
            // Store the data in our data contract object
            personData.parmPersonName(dirPerson.Name);
            personData.parmWorkerTitle(hcmTitle.TitleId);
            personData.parmPersonCommunicatorSignIn(lyncAddress.Locator);
            personData.parmPersonPrimaryEmail(emailAddress.Locator);
            personData.parmPersonUserId(_userId);
        }

        return personData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPersonPhotoFromUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve a person's photo based on the provided user ID.
    /// </summary>
    /// <param name="_userId">
    /// The user ID used to search for the person's photo.
    /// </param>
    /// <returns>
    /// A <c>DirPersonPhotoData</c> object containing only the specified user's photo
    /// and user ID.
    /// </returns>
    public DirPersonPhotoData getPersonPhotoFromUserId(UserId _userId)
    {
        // Represents the data contract
        DirPersonPhotoData          photoData;

        // Tables used to find the person's photo
        DirPersonUser               dirPersonUser;
        HcmPersonImage              hcmPersonImage;

        // Used to convert the person's image into a transportable format
        BinData                     imageData;

        // Initialize the data contract
        photoData = new DirPersonPhotoData();

        select firstOnly Image from hcmPersonImage
            exists join dirPersonUser
                where dirPersonUser.User == _userId
                && dirPersonUser.PersonParty == hcmPersonImage.Person;

        // Return the base64 encoded string for the user's photo.
        // If no photo exists for that user, the returned value will be empty.
        if (hcmPersonImage.Image)
        {
            // Encode the image into a string
            imageData = new BinData();
            imageData.setData(hcmPersonImage.Image);

            photoData.parmPersonPhoto(imageData.base64Encode());
        }

        photoData.parmPersonUserId(_userId);

        return photoData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
