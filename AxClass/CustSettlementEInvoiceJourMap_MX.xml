<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustSettlementEInvoiceJourMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustSettlementEInvoiceJourMap_MX</c> class provides customers settlemens information that is
/// required to create the XML document
/// </summary>
class CustSettlementEInvoiceJourMap_MX extends CustPaymentEInvoiceJourMap_MX
{
    CustSettlement custSettlement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxTransBaseQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query used to get the <c>TaxTrans</c> per Type
    /// </summary>
    /// <param name="_taxType">
    /// Tax Type used as the criteria for the query
    /// </param>
    /// <param name="_sourceTableId">
    /// Table id of the source record.
    /// </param>
    /// <param name="_sourceRecId">
    /// Record id of the source record.
    /// </param>
    /// <returns>
    /// Returns the query used to get the <c>TaxTrans</c> per Type
    /// </returns>
    /// <remarks>
    /// If not taxtype is passed all the Types will be selected
    /// </remarks>
    protected Query getTaxTransBaseQuery(
        TaxType_MX _taxType = TaxType_MX::Blank,
        RefTableId _sourceTableId = 0,
        RefRecId _sourceRecId = 0)
    {
        Query query = new Query();
        QueryBuildDataSource ds = query.addDataSource(tableNum(TaxTrans));

        switch(eInvoiceJour.cfdiDocType)
        {
            case CFDIDocType_MX::AdvanceReverse:
                ds.addRange(fieldNum(TaxTrans, TaxOrigin)).value(queryValue(TaxOrigin::TaxReversed));
                ds.addRange(fieldNum(TaxTrans, ExemptTax)).value(queryValue(NoYes::No));
                ds = ds.addDataSource(tableNum(TaxTrans_W));
                ds.joinMode(JoinMode::ExistsJoin);
                ds.relations(false);
                ds.addLink(fieldNum(TaxTrans, RecId), fieldNum(TaxTrans_W, TaxTrans));
                ds.addRange(fieldNum(TaxTrans_W, TransTableId_MX)).value(queryValue(custTrans.TableId));
                ds.addRange(fieldNum(TaxTrans_W, TransRecId_MX)).value(queryValue(custSettlement.TransRecId));
                ds.addRange(fieldNum(TaxTrans_W, OffsetRecId_MX)).value(queryValue(custSettlement.OffsetRecid));
                break;

            case CFDIDocType_MX::AdvanceSettle:
                CustTrans settledInvoiceCustTrans = CustTrans::findByCompany(custSettlement.OffsetCompany, custSettlement.OffsetRecid);
                CustInvoiceJour settledInvoiceCustInvoiceJour = settledInvoiceCustTrans.custInvoiceJour_RU();

                ds = ds.addDataSource(tableNum(CustInvoiceTrans));
                ds.relations(false);
                ds.joinMode(JoinMode::ExistsJoin);
                ds.addLink(fieldNum(TaxTrans, SourceRecId), fieldNum(CustInvoiceTrans, RecId));
                ds.addLink(fieldNum(TaxTrans, SourceTableId), fieldNum(CustInvoiceTrans, TableId));
                ds.addRange(fieldNum(CustInvoiceTrans, SalesId)).value(queryValue(settledInvoiceCustInvoiceJour.SalesId));
                ds.addRange(fieldNum(CustInvoiceTrans, InvoiceId)).value(queryValue(settledInvoiceCustInvoiceJour.InvoiceId));
                ds.addRange(fieldNum(CustInvoiceTrans, InvoiceDate)).value(queryValue(settledInvoiceCustInvoiceJour.InvoiceDate));
                ds.addRange(fieldNum(CustInvoiceTrans, NumberSequenceGroup)).value(queryValue(settledInvoiceCustInvoiceJour.NumberSequenceGroup));
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        query.allowCrossCompany(true);
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustTrans</Name>
				<Source><![CDATA[
    protected void initCustTrans(Common _common)
    {
        custSettlement = _common;

        super(custSettlement.custTrans());

        custTrans.AmountCur = custSettlement.SettleAmountCur;
        custTrans.AmountMST = custSettlement.SettleAmountMST;
        custTrans.ReportingCurrencyAmount = custSettlement.SettleAmountReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the current <c>custSettlement</c> record.
    /// </summary>
    /// <returns>The record ID of the customer transaction.</returns>
    public RefRecId refRecId()
    {
        return custSettlement.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the <c>custSettlement</c> table.
    /// </summary>
    /// <returns>The table ID of the customer transaction.</returns>
    public TableId refTableId()
    {
        return custSettlement.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>