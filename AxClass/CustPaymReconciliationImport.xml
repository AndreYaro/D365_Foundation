<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymReconciliationImport</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustPaymReconciliationImport extends CustVendPaymReconciliationImport
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(BankElectronicBanking);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTransCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the transaction currency code for the customer transaction.
    /// </summary>
    /// <param name="_refTableId">
    ///    The table ID for the <c>CustTransOpen</c> table.
    /// </param>
    /// <param name="_refRecId">
    ///    The record ID for the <c>CustTransOpen</c> transaction.
    /// </param>
    /// <param name="_refCompany">
    ///    The company in which to look for the <c>CustTransOpen</c> transaction.
    /// </param>
    /// <returns>
    ///    The currency code specified on the customer transaction.
    /// </returns>

    protected CurrencyCode fetchTransCurrencyCode(
        RefTableId  _refTableId,
        RefRecId    _refRecId,
        CompanyId   _refCompany)
    {
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;
        ;

        changecompany(_refCompany)
        {
            select RecId from custTransOpen
                where custTransOpen.TableId == _refTableId
                   && custTransOpen.RecId   == _refRecId
            join CurrencyCode from custTrans
                where custTrans.RecId == custTransOpen.RefRecId;
        }
        return custTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    protected LedgerJournalType journalType()
    {
        LedgerJournalType ret;

        ret = LedgerJournalType::CustPayment;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printControlReport</Name>
				<Source><![CDATA[
    protected void printControlReport()
    {
        Args                        args = new Args();
        container                   recordPass;
        Counter                     flag;

        args.name(ssrsReportStr(CustVendPaymJournal, Report));
        args.caller(this);
        args.parm('CustImport');

        for (flag=1; flag<=numOfRecord; flag++)
        {
            recordPass += [conPeek(recordContainer[flag],1)];
        }
        args.object(new SysAnyType(recordPass));

        new MenuFunction(menuitemoutputstr(CustVendPaymReportJournalRun), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymStatus_AccountVoucherJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setPaymStatus_AccountVoucherJour(LedgerJournalAC       _account,
                                          Voucher               _voucher,
                                          LedgerJournalId       _ledgerJournalId,
                                          CustVendPaymStatus    _status)
    {
        LedgerJournalTable                  ledgerJournalTable;
        LedgerJournalTrans                  ledgerJournalTrans;
        DimensionAttributeValueCombination  dimAttrValueCombo;
        #ISOCountryRegionCodes

        ttsbegin;

        while select forupdate ledgerJournalTable
            where   ledgerJournalTable.JournalType  == LedgerJournalType::CustPayment   &&
                    ledgerJournalTable.JournalNum   == _ledgerJournalId
        join forupdate ledgerJournalTrans
            where   ledgerJournalTrans.JournalNum   == ledgerJournalTable.JournalNum    &&
                    ledgerJournalTrans.Voucher      == _voucher
        join RecId from dimAttrValueCombo
            where   dimAttrValueCombo.RecId         == ledgerJournalTrans.LedgerDimension &&
                    dimAttrValueCombo.DisplayValue  == _account
        {
            if (ledgerJournalTrans.RecId)
            {
                ledgerJournalTrans.PaymentStatus = _status;
                ledgerJournalTrans.update();
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
                {
                    this.updateInvoicesFromPayment(ledgerJournalTrans);
                }
            }
            else
            {
                info(strfmt("@SYS67948", _ledgerJournalId, _voucher, _account));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnInvoice</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setStatusOnInvoice(InvoiceId           _invoice,
                            CustVendPaymStatus  _status,
                            ErrorCodePayment    _errorCodePayment = '')

    {
        SpecTrans       specTrans;
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;

        ttsbegin;
        while select crosscompany RecId from custTrans
            where custTrans.Invoice == _invoice
        join RecId from custTransOpen
            where custTransOpen.RefRecId == custTrans.RecId
        join forupdate specTrans
                where specTrans.RefTableId  == custTransOpen.TableId
                        && specTrans.RefRecId    == custTransOpen.RecId
                        && specTrans.RefCompany   == custTransOpen.DataAreaId
        {
            if (specTrans.RecId)
            {
                changecompany(specTrans.company())
                {
                    specTrans.PaymentStatus = _status;
                    specTrans.ErrorCodePayment  = _errorCodePayment;
                    specTrans.update();
                }
            }
            else
            {
                info(strfmt("@SYS66294", _invoice));
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusOnInvoiceAccountVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setStatusOnInvoiceAccountVoucher(CustAccount       _custAccount,
                                          Voucher           _voucher,
                                          recId             _custTransRecId,
                                          CustVendPaymStatus _status,
                                          ErrorCodePayment  _errorCodePayment = '')
    {
        CustTrans       custTrans;
        CustTransOpen   custTransOpen;
        SpecTrans       specTrans;

        boolean         found;

        ttsbegin;
        while select crosscompany RecId from custTrans
            where custTrans.RecId      == _custTransRecId
            join RecId from custTransOpen
                where custTransOpen.RefRecId == custTrans.RecId
            join forupdate specTrans
                where specTrans.RefRecId == custTransOpen.RecId
                        && specTrans.RefTableId == custTransOpen.TableId
                        && specTrans.RefCompany == custTransOpen.DataAreaId
        {
            if (specTrans.RecId)
            {
                changecompany(specTrans.company())
                {
                    specTrans.PaymentStatus    = _status;
                    specTrans.ErrorCodePayment = _errorCodePayment;
                    specTrans.update();

                    found = true;
                }
            }
        }
        if (!found)
        {
            while select crosscompany RecId from custTrans
                where custTrans.AccountNum == _custAccount &&
                      custTrans.Voucher    == _voucher     //&&
                      // With this line here the selct is even more restricted than the previous one
                      // and this was ment to be the opposite. This select is called when no record on recId is found.
                      //custTrans.recId      == _custTransRecId
                join RecId from custTransOpen
                    where custTransOpen.RefRecId == custTrans.RecId
                join forupdate specTrans
                    where specTrans.RefRecId == custTransOpen.RecId
                            && specTrans.RefTableId == custTransOpen.TableId
                            && specTrans.RefCompany == custTransOpen.DataAreaId
            {
                if (specTrans.RecId)
                {
                    changecompany(specTrans.company())
                    {
                        specTrans.PaymentStatus    = _status;
                        specTrans.ErrorCodePayment = _errorCodePayment;
                        specTrans.update();

                        found = true;
                    }
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePayments</Name>
				<Source><![CDATA[
    //Sp4 - NO-DIS - totally rewritten to handle splitting of journal lines by status on invoicees (SpecTrans)
    //               only the journal lines that has been involved during import is updated/splitted
    //               rejected transactions can optionally be transfered to a new separate journal

    void updatePayments()
    {
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalTrans, ledgerJournalTransStatus, ledgerJournalTransOrig;
        SpecTrans           specTrans;
        SpecTrans           specTransAggr;
        recId               specTransNum;
        LedgerJournalTable  ledgerJournalTableRejected;
        AmountCur           amountCurTrans;
        boolean             origTransUsed;
        boolean             origRecalc;
        container           rejectedJournals;
        recId               journalRecId;
        recId               firstTransRecId;
        int                 i;
        int                 recordRecIdIdx;
        container           transStatusRecId;
        #ISOCountryRegionCodes

        void createLedgerJournalTableRejected()
        {
            if (!ledgerJournalTableRejected.RecId)
            {
                ledgerJournalTableRejected.JournalName  = ledgerJournalTable.JournalName;
                ledgerJournalTableRejected.insert();
                ledgerJournalTableRejected.Name         = strfmt('%1',CustVendPaymStatus::Rejected);
                ledgerJournalTableRejected.update();
                rejectedJournals = conins(rejectedJournals,1,ledgerJournalTableRejected.JournalName,ledgerJournalTableRejected.RecId);
            }
            else
            {
                if (ledgerJournalTableRejected.JournalName != ledgerJournalTable.JournalName)
                {
                    ledgerJournalTableRejected.clear();
                    journalRecId = conpeek(rejectedJournals,confind(rejectedJournals,ledgerJournalTable.JournalName)+1);
                    ledgerJournalTableRejected = LedgerJournalTable::findByRecId(journalRecId);
                    if (!ledgerJournalTableRejected)
                    {
                        ledgerJournalTableRejected.JournalName  = ledgerJournalTable.JournalName;
                        ledgerJournalTableRejected.insert();
                        ledgerJournalTableRejected.Name         = strfmt('%1',CustVendPaymStatus::Rejected);
                        ledgerJournalTableRejected.update();
                        rejectedJournals = conins(rejectedJournals,1,ledgerJournalTableRejected.JournalName,ledgerJournalTableRejected.RecId);
                    }
                }
            }
        }

        AmountCur calcAmount()
        {
            ExchangeRateHelper exchangeRateHelper =
            ExchangeRateHelper::newCurrency(Ledger::primaryLedger(CompanyInfo::findDataArea(ledgerJournalTrans.Company).RecId), ledgerJournalTrans.CurrencyCode);

            return this.convertAmountTransCurToAmountPaymCur(
                    specTrans.Balance01,
                    specTrans.RefCompany,
                    this.fetchTransCurrencyCode(specTrans.RefTableId, specTrans.RefRecId, specTrans.RefCompany),
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.CurrencyCode,
                    ledgerJournalTrans.TransDate,
                    specTrans.CrossRate,
                    exchangeRateHelper.prepareExchangeRateForStorage(ledgerJournalTrans.crossrate()));
        }
        ;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            ttsbegin;
            while select forupdate ledgerJournalTable
                where       ledgerJournalTable.JournalType == LedgerJournalType::CustPayment &&
                            ledgerJournalTable.Posted      == NoYes::No
                join forupdate  ledgerJournalTrans
                    where       ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
            {
                recordRecIdIdx          = confind(recordRecId,ledgerJournalTrans.RecId);

                if (recordRecIdIdx)
                {
                    ledgerJournalTransOrig  = ledgerJournalTrans.data();
                    specTransNum            = (select crosscompany count(RecId) from specTrans where specTrans.SpecTableId   == ledgerJournalTrans.TableId &&
                                                                                        specTrans.SpecRecId     == ledgerJournalTrans.RecId &&
                                                                                        specTrans.SpecCompany   == ledgerJournalTrans.company()).RecId;
                    origTransUsed           = false;
                    origRecalc              = false;
                    firstTransRecId         = 0;
                    transStatusRecId        = connull();

                    while select crosscompany count(RecId), sum(Balance01) from specTransAggr
                        group by PaymentStatus
                        where specTransAggr.SpecTableId == ledgerJournalTrans.TableId &&
                              specTransAggr.SpecRecId   == ledgerJournalTrans.RecId &&
                              specTransAggr.SpecCompany == ledgerJournalTrans.company()
                    {
                        amountCurTrans  = 0;

                        while select crosscompany specTrans
                            where specTrans.SpecTableId     == ledgerJournalTrans.TableId   &&
                                  specTrans.SpecRecId       == ledgerJournalTrans.RecId     &&
                                  specTrans.SpecCompany     == ledgerJournalTrans.company() &&
                                  specTrans.PaymentStatus   == specTransAggr.PaymentStatus
                        {
                            amountCurTrans += calcAmount();
                        }

                        if (specTransAggr.RecId         == specTransNum ||                          //All spectrans with same status
                            specTransAggr.PaymentStatus == ledgerJournalTransOrig.PaymentStatus)    //Same status as original journalTrans
                        {
                            if (specTransAggr.RecId == specTransNum)
                            {
                                origTransUsed   = true;
                            }
                            else
                            {
                                origRecalc      = true;
                            }

                            ledgerJournalTrans.PaymentStatus    = specTransAggr.PaymentStatus;

                            if (amountCurTrans < 0)
                            {
                                ledgerJournalTrans.AmountCurDebit   = abs(amountCurTrans);
                                ledgerJournalTrans.AmountCurCredit  = 0;
                            }
                            else
                            {
                                ledgerJournalTrans.AmountCurDebit   = 0;
                                ledgerJournalTrans.AmountCurCredit  = abs(amountCurTrans);
                            }

                            if (specTransAggr.PaymentStatus             == CustVendPaymStatus::Rejected &&
                                rejectionsInSeparateJournal             == NoYes::Yes)
                            {
                                createLedgerJournalTableRejected();
                                ledgerJournalTrans.JournalNum = ledgerJournalTableRejected.JournalNum;

                                ledgerJournalTrans.Voucher = NumberSeq::newGetVoucherFromId(
                                    ledgerJournalTableRejected.ledgerJournalName().NumberSequenceTable,
                                    false).voucher();
                            }

                            ledgerJournalTrans.fillPaymentNotes();
                            ledgerJournalTrans.update();
                            recordContainer[recordRecIdIdx] = [ledgerJournalTrans];
                        }
                        else
                        {
                            ledgerJournalTransStatus.clear();
                            ledgerJournalTransStatus                = ledgerJournalTrans.data();
                            ledgerJournalTransStatus.PaymentStatus  = specTransAggr.PaymentStatus;

                            if (amountCurTrans < 0)
                            {
                                ledgerJournalTransStatus.AmountCurDebit     = abs(amountCurTrans);
                                ledgerJournalTransStatus.AmountCurCredit    = 0;
                            }
                            else
                            {
                                ledgerJournalTransStatus.AmountCurDebit     = 0;
                                ledgerJournalTransStatus.AmountCurCredit    = abs(amountCurTrans);
                            }

                            if (ledgerJournalTransStatus.PaymentStatus == CustVendPaymStatus::Rejected &&
                                rejectionsInSeparateJournal == NoYes::Yes)
                            {
                                createLedgerJournalTableRejected();
                                ledgerJournalTransStatus.JournalNum = ledgerJournalTableRejected.JournalNum;

                                ledgerJournalTransStatus.Voucher = NumberSeq::newGetVoucherFromId(
                                    ledgerJournalTableRejected.ledgerJournalName().NumberSequenceTable,
                                     false).voucher();
                            }

                            ledgerJournalTransStatus.insert();

                            transStatusRecId += ledgerJournalTransStatus.RecId;

                            firstTransRecId = firstTransRecId ? firstTransRecId : ledgerJournalTransStatus.RecId;

                            while select forupdate crosscompany specTrans
                                where specTrans.SpecTableId     == ledgerJournalTrans.TableId   &&
                                      specTrans.SpecRecId       == ledgerJournalTrans.RecId     &&
                                      specTrans.SpecCompany     == ledgerJournalTrans.company() &&
                                      specTrans.PaymentStatus   == specTransAggr.PaymentStatus
                            {
                                specTrans.SpecRecId = ledgerJournalTransStatus.RecId;
                                changecompany(specTrans.company())
                                {
                                    specTrans.update();
                                }
                            }
                        }
                    }

                    if (!origTransUsed && firstTransRecId)
                    {
                        ledgerJournalTransStatus    = LedgerJournalTrans::findRecId(firstTransRecId,true);

                        if (origRecalc)
                        {
                            recordContainer[recordRecIdIdx]     = [ledgerJournalTransStatus];   //the orig trans is recalculated but not part of this return
                                                                                                //file handling, and thus must mot be a part of the report
                                                                                                //The position in the container is therefor replased with the
                                                                                                //transaction with the new status
                            transStatusRecId                    = condel(transStatusRecId,confind(transStatusRecId,ledgerJournalTransStatus.RecId),1);
                        }
                        else
                        {
                            ledgerJournalTrans.PaymentStatus    = ledgerJournalTransStatus.PaymentStatus;
                            ledgerJournalTrans.AmountCurCredit  = ledgerJournalTransStatus.AmountCurCredit;
                            ledgerJournalTrans.AmountCurDebit   = ledgerJournalTransStatus.AmountCurDebit;
                            ledgerJournalTrans.JournalNum       = ledgerJournalTransStatus.JournalNum;

                            while select forupdate crosscompany specTrans
                                where specTrans.SpecTableId     == ledgerJournalTransStatus.TableId   &&
                                      specTrans.SpecRecId       == ledgerJournalTransStatus.RecId     &&
                                      specTrans.SpecCompany     == ledgerJournalTransStatus.company()
                            {
                                specTrans.SpecRecId = ledgerJournalTrans.RecId;
                                changecompany(specTrans.company())
                                {
                                    specTrans.update();
                                }
                            }

                            ledgerJournalTrans.fillPaymentNotes();
                            ledgerJournalTrans.update();

                            recordContainer[recordRecIdIdx]     = [ledgerJournalTrans];
                            transStatusRecId                    = condel(transStatusRecId,confind(transStatusRecId,ledgerJournalTransStatus.RecId),1);

                            ledgerJournalTransStatus.delete();
                        }
                    }

                    if (conlen(transStatusRecId))
                    {
                        for (i=1;i<=conlen(transStatusRecId);i++)
                        {
                            //adding new records in the recordscontainer according to the changes in this method
                            if (conpeek(transStatusRecId,i))
                            {
                                ledgerJournalTransStatus = LedgerJournalTrans::findRecId(conpeek(transStatusRecId,i),true);
                                if (ledgerJournalTransStatus)
                                {
                                    ledgerJournalTransStatus.fillPaymentNotes();
                                    ledgerJournalTransStatus.update();
                                    this.fillControlReport(ledgerJournalTransStatus);
                                }
                            }
                        }
                    }
                }
            }
            ttscommit;
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustPaymReconciliationImport    custPaymReconciliationImport;
        Dialog                          dialog = new Dialog("@SYS18228");
        DialogField                     dialogPaymMode;
        ;

        dialogPaymMode  = dialog.addField(extendedtypestr(CustPaymMode));
        dialogPaymMode.label("@SYS21698");

        if (dialog.run())
        {
            custPaymReconciliationImport = CustVendPaymReconciliationImport::construct(SysModule::Cust, dialogPaymMode.value());

            if (custPaymReconciliationImport.prompt())
            {
                custPaymReconciliationImport.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustPaymReconciliationImport</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static CustPaymReconciliationImport newCustPaymReconciliationImport(CustPaymModeTable _custPaymModeTable)
    {
        DictClass                       dictClass;
        CustPaymReconciliationImport    custPaymReconciliationImport;
        ;
        if (! _custPaymModeTable.ClassIdReturn)
        {
            return null;
        }

        if (! SysDictClass::isSuperclass(_custPaymModeTable.ClassIdReturn, classnum(CustPaymReconciliationImport)))
        {
            return null;
        }

        dictClass = new DictClass(_custPaymModeTable.ClassIdReturn);
        custPaymReconciliationImport = dictClass.makeObject();

        if (! custPaymReconciliationImport)
        {
            return null;
        }

        return custPaymReconciliationImport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>