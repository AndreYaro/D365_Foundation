<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableType_FixedPrice</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTableType_FixedPrice extends ProjTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkReportedFinished</Name>
				<Source><![CDATA[
    public boolean checkReportedFinished()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartUp</Name>
				<Source><![CDATA[
    public boolean checkStartUp()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlBankDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the bank document control can be enabled or not for the specified document type based on
    /// the current project type.
    /// </summary>
    /// <param name="_exceptedDocumentType">
    /// The excepted bank document type to select.
    /// </param>
    /// <returns>
    /// true if the bank document type control can be selected to the excepted document type; otherwise,
    /// false.
    /// </returns>
    public boolean ctrlBankDocumentType(BankLGDocumentType _exceptedDocumentType)
    {
        boolean ret;

        // Gets the default value.
        ret = super(_exceptedDocumentType);

        switch (_exceptedDocumentType)
        {
            case BankLGDocumentType::LetterOfGuarantee:
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlControlGroup</Name>
				<Source><![CDATA[
    public boolean ctrlControlGroup()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlControlSystem</Name>
				<Source><![CDATA[
    public boolean ctrlControlSystem()
    {
        return ProjWIPTable::find(projTable.ProjId).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlCustOpenTrans</Name>
				<Source><![CDATA[
    public boolean ctrlCustOpenTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlForecastTransferFromQuotation</Name>
				<Source><![CDATA[
    public boolean ctrlForecastTransferFromQuotation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPSADoInvoiceCost</Name>
				<Source><![CDATA[
    public boolean ctrlPSADoInvoiceCost()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlPSAPreBill</Name>
				<Source><![CDATA[
    public boolean ctrlPSAPreBill()
    {
        return  true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSalesOrderTable</Name>
				<Source><![CDATA[
    public boolean ctrlSalesOrderTable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlSalesQuotationProjTable</Name>
				<Source><![CDATA[
    public boolean ctrlSalesQuotationProjTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransProjectRevenueTrans</Name>
				<Source><![CDATA[
    public boolean ctrlTransProjectRevenueTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlTransProjTransOnAccView</Name>
				<Source><![CDATA[
    public boolean ctrlTransProjTransOnAccView()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParent</Name>
				<Source><![CDATA[
    public void initFromParent(ProjId projId)
    {
        ProjTable projParent = ProjTable::find(projId);

        super(projId);

        projTable.psaDoInvoiceCost = projParent.psaDoInvoiceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjTable</Name>
				<Source><![CDATA[
    public void initProjTable(Common _buffer = null)
    {
        super();

        projTable.Status = ProjStatusTypeRule::firstStage(ProjType::FixedPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckRevenue</Name>
				<Source><![CDATA[
    public boolean journalCheckRevenue()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(Project)) || checkFailed(strFmt("@SYS53011",projTable.Type));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    public boolean validateWrite()
    {
        if (!projTable.ProjGroupId)
        {
            return checkFailed("@SYS50011");
        }

        if (!projTable.ProjInvoiceProjId)
        {
            return checkFailed("@SYS53031");
        }

        if (projTable.Type != ProjGroup::find(projTable.ProjGroupId).ProjType)
        {
            return checkFailed("@SYS55607");
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetOnAccount</Name>
				<Source><![CDATA[
    public boolean validateWriteBudgetOnAccount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteBudgetRevenue</Name>
				<Source><![CDATA[
    public boolean validateWriteBudgetRevenue()
    {
        if (projTable.projGroup().CompletePrincip == ProjCompletePrincip::NoWIP)
        {
            return checkFailed("@SYS90730");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies whether creation of item requirement is enabled for the project status and for project status rule
    /// </summary>
    /// <returns>
    /// A boolean value that specifies whether creation of item requirement is enabled for the project status and for project status rule
    /// </returns>
    public boolean validateWriteSalesLine()
    {
        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>