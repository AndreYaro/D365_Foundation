<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerConsolidateDateRanges</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerConsolidateDateRanges</c> class supports a collection of date ranges for a consolidation.
/// </summary>
public final class LedgerConsolidateDateRanges
{
    private List dateRangeCollection;
    private LedgerConsolidateDateRangeParams firstDateRange;
    private LedgerConsolidateDateRangeParams lastDateRange;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        dateRangeCollection = new List(Types::Class);
        firstDateRange = null;
        lastDateRange = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a date range to the end.
    /// </summary>
    /// <param name = "_startDate">The start date of the range.</param>
    /// <param name = "_endDate">The end date of the range.</param>
    /// <remarks>
    /// The following validation is performed.
    /// 1. The start date cannot be empty.
    /// 2. The end date has to be greater than or equal to the start date.
    /// 3. The new range cannot create a gap with the previous range.
    /// 4. The new range cannot overlap the previous range.
    /// </remarks>
    public void addDateRange(TransDate _startDate, TransDate _endDate)
    {
        int dateCount = dateRangeCollection.elements();

        if (_startDate == dateNull())
        {
            throw error("@GeneralLedger:LedgerConsolidateDateRangesStartEmpty");
        }

        if (_startDate > _endDate)
        {
            throw error(strFmt("@GeneralLedger:LedgerConsolidateDateRangesRangeInvalid", _startDate, _endDate));
        }

        if (dateCount > 0)
        {
            TransDate prevEndDate = lastDateRange.parmEndDate();

            if (_startDate > (prevEndDate + 1))
            {
                throw error(strFmt("@GeneralLedger:LedgerConsolidateDateRangesRangeGap", _startDate, prevEndDate));
            }
            else if (_startDate < (prevEndDate + 1))
            {
                throw error(strFmt("@GeneralLedger:LedgerConsolidateDateRangesRangeOverlap", _startDate, prevEndDate));
            }
        }

        LedgerConsolidateDateRangeParams dateRange = LedgerConsolidateDateRangeParams::construct(_startDate, _endDate);
        dateRangeCollection.addEnd(dateRange);

        if (firstDateRange == null)
        {
            firstDateRange = dateRange;
        }

        lastDateRange = dateRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all date ranges.
    /// </summary>
    public void clear()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all of the validated date ranges as a <c>List</c> of <c>LedgerConsolidateDateRangeParams</c> instances.
    /// </summary>
    /// <param name = "_consolidationStartDate">The start date of the consolidation.</param>
    /// <param name = "_consolidationEndDate">The end date of the consolidation.</param>
    /// <returns>A <c>List</c> of <c>LedgerConsolidateDateRangeParams</c> instances.</returns>
    /// <remarks>
    /// The following validation is performed.
    /// 1. The start date of the first range has to be the consolidation start date.
    /// 2. The end date of the last range has to be the consolidation end date.
    /// </remarks>
    public List getDateRanges(TransDate _consolidationStartDate, TransDate _consolidationEndDate)
    {
        if (!this.validate(_consolidationStartDate, _consolidationEndDate))
        {
            // validate gives the error message
            throw Exception::Error;
        }

        return dateRangeCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate(TransDate _consolidationStartDate, TransDate _consolidationEndDate)
    {
        boolean isValid = true;

        int dateCount = dateRangeCollection.elements();
        if (dateCount == 0)
        {
            isValid = checkFailed("@GeneralLedger:LedgerConsolidateDateRangesNoDateRanges");
        }

        if (isValid)
        {
            // need to make sure firstDateRange is not null and avoid giving multiple messages
            TransDate firstDate = firstDateRange.parmStartDate();
            if (firstDate != _consolidationStartDate)
            {
                isValid = checkFailed(strFmt("@GeneralLedger:LedgerConsolidateDateRangesFirstStartDateInvalid", firstDate, _consolidationStartDate));
            }
        }

        if (isValid)
        {
            // need to make sure lastDateRange is not null and avoid giving multiple messages
            TransDate lastDate = lastDateRange.parmEndDate();
            if (lastDate != _consolidationEndDate)
            {
                isValid = checkFailed(strFmt("@GeneralLedger:LedgerConsolidateDateRangesLastEndDateInvalid", lastDate, _consolidationEndDate));
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerConsolidateDateRanges construct()
    {
        LedgerConsolidateDateRanges ledgerConsolidateDateRanges = new LedgerConsolidateDateRanges();
        return ledgerConsolidateDateRanges;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>