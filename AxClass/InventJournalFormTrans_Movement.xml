<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalFormTrans_Movement</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventJournalFormTrans_Movement extends InventJournalFormTrans implements InventDistinctProductOrderDefaulting
{
    InventDimCtrl_Frm_Mov       inventDimFormSetup;
    InventJournalTrans          inventJournalTrans;

    PdsCWFormCtrl               cwFormCtrl;
    UnknownNoYes                transQtySignChangedToNegative;

    DimensionEntryControl       dimensionEntryControl;

    FormDataSource              inventDimReceipt_ds;
    InventDim                   inventDimReceipt;
    boolean                     qtyModified = false;
    private Set                 qtyModifiedLineNums;
    boolean                     costPriceModified = false;
    Set                         costPriceModifiedLines;
    private Set                 costPriceModifiedLineNums;
    boolean                     itemIdModified = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        this.setInventTransIdReturnEnabled();
        this.setCostAmountEnabled();

        super();

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.dataSourceActivePost();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions that must occur before the data source is created.
    /// </summary>
    public void datasourceCreatePre()
    {
        super();

        if (#PdsCatchWeightEnabled
            && cwFormCtrl)
        {
            cwFormCtrl.dataSourceCreatePre();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceExecuteQueryPost</Name>
				<Source><![CDATA[
    public void datasourceExecuteQueryPost()
    {
        super();
        this.setDimensionControlEditability();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceInitPost</Name>
				<Source><![CDATA[
    public void datasourceInitPost(JournalTransMap _journalTrans)
    {
        super(_journalTrans);
        inventJournalTrans  = _journalTrans;

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.dataSourceInitPost(_journalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceValidateWritePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates write of the data source. If auto reservation is enabled then it is checked if enough on hand exists
    /// </summary>
    /// <param name="_ret">
    /// Current result of the validation
    /// </param>
    /// <returns>
    /// Result of the validation
    /// </returns>
    public boolean datasourceValidateWritePost(boolean _ret)
    {
        boolean ret = super(_ret);
        if (ret)
        {
            ret = InventMovement::setAutoReserving(inventJournalTrans);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePost</Name>
				<Source><![CDATA[
    public void datasourceWritePost()
    {
        super();

        if (inventJournalTrans.InventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(inventJournalTrans.InventDimId));
            inventDim_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceWritePre</Name>
				<Source><![CDATA[
    public void datasourceWritePre()
    {
        ttsbegin;
        inventJournalTrans.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;

        if (inventJournalTrans.JournalType == InventJournalType::Count)
        {
            InventDim inventDimThis = InventDim::find(inventJournalTrans.InventDimId);
            if (InventItemLocation::isCountingStarted(inventJournalTrans.ItemId, inventDimThis, inventJournalTrans.JournalId))
            {
                FormDataUtil::getFormDataSource(inventJournalTrans).reread();
                FormDataUtil::getFormDataSource(inventDim).reread();
                throw error(strFmt("@SYS59534", inventJournalTrans.ItemId, inventDimThis.InventLocationId));
            }
        }

        super();

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.dataSourceWritePre();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPostJournalTrans</Name>
				<Source><![CDATA[
    protected void formInitPostJournalTrans()
    {
        super();

        if (journalTableData)
        {
            // Ensure journal type is set on buffer for correct initialization of InventDimSetup in updateDesign
            InventJournalType journalTypeId = any2Enum(journalTableData.journalTable().JournalType);
            inventJournalTrans.JournalType = journalTypeId;
            costPriceModifiedLines = new Set(Types::Record);
            costPriceModifiedLineNums = new Set(Types::Real);
            qtyModifiedLineNums = new Set(Types::Real);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCostAmount</Name>
				<Source><![CDATA[
    protected FormDataObject fieldCostAmount()
    {
        return this.journalTrans_DS().object(fieldNum(InventJournalTrans,CostAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCostMarkup</Name>
				<Source><![CDATA[
    protected FormDataObject fieldCostMarkup()
    {
        return this.journalTrans_DS().object(fieldNum(InventJournalTrans,CostMarkup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldCostPrice</Name>
				<Source><![CDATA[
    protected FormDataObject fieldCostPrice()
    {
        return this.journalTrans_DS().object(fieldNum(InventJournalTrans,CostPrice));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldInventTransIdReturn</Name>
				<Source><![CDATA[
    protected FormDataObject fieldInventTransIdReturn()
    {
        return this.journalTrans_DS().object(fieldNum(InventJournalTrans,InventTransIdReturn));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedActivityNumberPost</Name>
				<Source><![CDATA[
    public void fieldModifiedActivityNumberPost()
    {
        inventJournalTrans.activityNumberModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedAssetIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedAssetIdPost()
    {
        AssetBookTable  assetBookTable;

        AssetBookId bookIdDefault = AssetParameters::find().BookIdDefault;
        AssetBook assetBook = AssetBook::find(inventJournalTrans.AssetId, bookIdDefault);

        if  (assetBook
         && (assetBook.Status == AssetStatus::NoAcquisition
         ||  assetBook.Status == AssetStatus::Open))
        {
            inventJournalTrans.AssetBookId = bookIdDefault;
        }
        else
        {
            select firstonly BookId
            from  assetBook
            where assetBook.AssetId == inventJournalTrans.AssetId
              && (assetBook.Status == AssetStatus::NoAcquisition
              ||  assetBook.Status == AssetStatus::Open)
            exists join assetBookTable
            where assetBookTable.BookId               == assetBook.BookId
               && assetBookTable.CurrentOperationsTax == CurrentOperationsTax::Current;

            inventJournalTrans.AssetBookId = assetBook ? assetBook.BookId : '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedBOMLinePost</Name>
				<Source><![CDATA[
    public void fieldModifiedBOMLinePost()
    {
        if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
        {
            journalTransData.initVoucher(journalTrans_last.Voucher,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCostAmountPost</Name>
				<Source><![CDATA[
    public void fieldModifiedCostAmountPost()
    {
        inventJournalTrans.inventMovement().journalSetCostAmount();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.initInventProfileIdFromRAsset_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCostMarkupPost</Name>
				<Source><![CDATA[
    public void fieldModifiedCostMarkupPost()
    {
        inventJournalTrans.inventMovement().journalSetCostMarkup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCostPricePost</Name>
				<Source><![CDATA[
    public void fieldModifiedCostPricePost()
    {
        inventJournalTrans.inventMovement().journalSetCostPrice();
        if (costPriceModifiedLines)
        {
            costPriceModifiedLines.add(inventJournalTrans);
        }

        if (costPriceModifiedLineNums)
        { 
            costPriceModifiedLineNums.add(inventJournalTrans.LineNum);
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.initInventProfileIdFromRAsset_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedCountedPost</Name>
				<Source><![CDATA[
    public void fieldModifiedCountedPost()
    {
        inventJournalTrans.inventMovement().journalSetCounted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventDimFieldsPost</Name>
				<Source><![CDATA[
    public void fieldModifiedInventDimFieldsPost(
        InventDim   _inventDim,
        FieldId     _dimFieldId)
    {
        boolean isRetailKitOrder;

        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(inventJournalTrans.ItemId, _inventDim))
        {
            return;
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailKitOrderJournal kitOrderJournal;

            select firstonly kitOrderJournal
                where kitOrderJournal.JournalId == inventJournalTrans.JournalId;

            isRetailKitOrder = kitOrderJournal.RecId ? true : false;

            // QTY Should remain same, as only InventDimId is modified on Retail Kit disassembly order.
            // QTY on InventJournalTrans will not be modified by the code if 'qtyModified' is set to true.
            if (isRetailKitOrder)
            {
                qtyModified = inventJournalTrans.Qty ? true : false;
            }
        }

        inventJournalTrans.inventMovement().journalSetInventDimField(_inventDim, _dimFieldId);

        var defaultingArguments = InventDistinctProductDimensionSpecificDefaultingArgs::construct(inventJournalTrans.inventTable(), false, InventItemOrderSetupType::Invent);
        defaultingArguments.parmKeepOrigin(true);

        var inventDistinctProductOrderDefaultingController = InventDistinctProductOrderDefaultingController::constructFromFieldId(_dimFieldId);

        this.setInventDim(inventDistinctProductOrderDefaultingController.inventDimModified(this,
                                                                                     _inventDim,
                                                                                     defaultingArguments));

        if (inventJournalTrans.ProjId)
        {
            inventJournalTrans.setProjSalesPrice(ProjTable::find(inventJournalTrans.ProjId), inventDim);
        }

        // Calculate the Cost price if it is a Retail Kit order.
        if (isRetailKitOrder && !inventJournalTrans.BOMLine)
        {
            inventJournalTrans.updateNonBomLineAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedInventTransIdReturnPost</Name>
				<Source><![CDATA[
    public void fieldModifiedInventTransIdReturnPost()
    {
        // <GEERU>
        InventTrans         origInventTrans, origInventTransSec;
        // </GEERU>
        //force a write to the db in order to update returnLotId's on inventTrans
        inventJournalTrans.write();

        inventJournalTrans.setCostPrice('',inventDim);
        inventJournalTrans.calcCostAmount(inventJournalTrans.Qty);
        this.setCostAmountEnabled();

        // <GEERU>
        if (inventJournalTrans.InventTransIdReturn                              &&
            (inventJournalTrans.JournalType == InventJournalType::BOM           ||
             inventJournalTrans.JournalType == InventJournalType::LossProfit    ||
             inventJournalTrans.JournalType == InventJournalType::Movement      ||
             inventJournalTrans.JournalType == InventJournalType::project)      &&
            (inventJournalTrans.Storno_RU                                       ||
             InventParameters::find().ValidateReturn_RU))
        {
            InventMov_Journal movement = inventJournalTrans.inventMovement();
            origInventTrans = TransLink_RU::findInventTransOrig(movement.inventTransOriginId());

            if (!origInventTrans && movement.returnInventTransOrigin())
            {
                origInventTrans = InventTrans::findByInventTransOrigin(movement.returnInventTransOrigin());
            }

            InventJournalTrans origJournalTrans = InventTransOriginJournalTrans::inventJournalTrans(origInventTrans.InventTransOrigin);
            if (!origJournalTrans)
            {
                origJournalTrans = InventTransOriginJournalTransReceipt::inventJournalTrans(origInventTrans.InventTransOrigin);
            }

            if (origJournalTrans)
            {
                inventJournalTrans.DefaultDimension = origJournalTrans.DefaultDimension;

                // if inventory dimensions differ from original
                if (origInventTrans.InventDimId != inventJournalTrans.InventDimId)
                {
                    // only if there is no other inventory per lot
                    select firstonly RecId from origInventTransSec
                        where origInventTransSec.InventTransOrigin  == origInventTrans.InventTransOrigin &&
                              origInventTransSec.InventDimId        != origInventTrans.InventDimId;
                    if (! origInventTransSec)
                    {
                        inventDim.data(InventDim::find(origInventTrans.InventDimId));
                        inventJournalTrans.InventDimId = origInventTrans.InventDimId;
                        this.datasourceValidateWritePost(inventJournalTrans.validateWrite());
                    }
                }
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupInventMovJournalDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up a journal inventory movement for defaulting.
    /// </summary>
    /// <param name = "_inventMov_Journal">Instance of <c>InventMov_Journal</c> class.</param>
    /// <returns>The <c>InventMov_Journal</c> class instance which was setup.</returns>
    private InventMov_Journal setupInventMovJournalDefaulting(InventMov_Journal _inventMov_Journal)
    {
        _inventMov_Journal.parmItemIdModified(itemIdModified);
        _inventMov_Journal.parmCostPriceModified(costPriceModifiedLineNums && costPriceModifiedLineNums.in(inventJournalTrans.LineNum));
        _inventMov_Journal.parmQtyModified(qtyModifiedLineNums && qtyModifiedLineNums.in(inventJournalTrans.LineNum));

        return _inventMov_Journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReleasedProductSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes settings that are based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    public void initReleasedProductSpecificDefaulting(InventTable _inventTable)
    {
        this.initInventDimReleasedProduct(_inventTable);

        this.setInventTransIdReturnEnabled();
        this.setCostAmountEnabled();

        this.pdsSetBatchAttribCopyEnabled();

        if (journalTableData.journalVoucherNum() && journalTableData.journalTable().VoucherDraw == JournalVoucherDraw::Entering)
        {
            journalTransData.initVoucher(journalTrans_last.Voucher,true);
        }

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.fieldModified(cwFormCtrl.parmItemFieldId());
        }

        this.updateDesign(InventDimFormDesignUpdate::FieldChange);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimReleasedProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the inventory dimensions based on the released product.
    /// </summary>
    /// <param name = "_inventTable">An <c>InventTable</c> record buffer.</param>
    protected void initInventDimReleasedProduct(InventTable _inventTable)
    {
        if (inventDim && inventDim.inventDimId != inventJournalTrans.InventDimId)
        {
            inventDim.data(inventDim::findOrCreateBlank());
        }

        inventDim.data(_inventTable.getDefaultProductDimensions(inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensionsSpecificDefaulting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes product dimension specific order defaulting.
    /// </summary>
    /// <param name = "_inventDistinctProductDimensionSpecificDefaultingArgs">Product dimension specific order defaulting arguments.</param>
    public void initDimensionsSpecificDefaulting(InventDistinctProductDimensionSpecificDefaultingArgs _inventDistinctProductDimensionSpecificDefaultingArgs)
    {
        if (!InventDistinctProductValidator::construct().isDistinctProductFullySpecified(inventJournalTrans.ItemId, inventDim))
        {
            this.updateDesign(InventDimFormDesignUpdate::FieldChange);
            return;
        }

        inventJournalTrans.setInventDimId(inventDim.inventDimId, inventDim);

        this.setupInventMovJournalDefaulting(inventJournalTrans.inventMovement()).journalSetItemId(inventDim);

        inventDim.data(inventJournalTrans.inventDim());

        if (WHSInventEnabled::exist(inventJournalTrans.ItemId))
        {
            inventDim.InventStatusId = WHSInvent::getDefaultStatus(inventDim);
        }
        else
        {
            inventDim.InventStatusId = '';
        }

        if (inventDim_ds != null)
        {
            inventDim_ds.setCurrent();
            this.updateDesign(InventDimFormDesignUpdate::FieldChange);
        }

        if (inventJournalTrans.ProjId)
        {
            inventJournalTrans.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(inventJournalTrans.ProjId,inventJournalTrans.ProjCategoryId);
            inventJournalTrans.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(inventJournalTrans.ProjCategoryId,inventJournalTrans.ItemId);
            inventJournalTrans.setProjSalesPrice(ProjTable::find(inventJournalTrans.ProjId), inventDim);
        }
        else
        {
            inventJournalTrans.ProjLinePropertyId   = '';
            inventJournalTrans.ProjTaxItemGroupId   = '';
        }

        if (FormDataUtil::isFormDataSource(inventJournalTrans))
        {
            FormDataUtil::getFormDataSource(inventJournalTrans).refresh();
        }

        itemIdModified = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStorageDimensionsFromHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intializes storage dimensions from header.
    /// </summary>
    public void initStorageDimensionsFromHeader()
    {
        InventJournalTable inventJournalTable = inventJournalTrans.inventJournalTable();

        if (inventJournalTable.InventSiteId)
        {
            inventDim.InventSiteId = inventJournalTable.InventSiteId;
        }

        if (inventJournalTable.InventLocationId)
        {
            inventDim.InventLocationId = inventJournalTable.InventLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>InventDim</c> record buffer.
    /// </summary>
    /// <param name = "_inventDim">An <c>InventDim</c> record buffer.</param>
    public void setInventDim(InventDim _inventDim)
    {
        inventDim.data(_inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDim</c> record buffer.
    /// </summary>
    /// <returns>An <c>InventDim</c> record buffer.</returns>
    public InventDim inventDim()
    {
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedItemIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedItemIdPost()
    {
        itemIdModified = true;
        InventDistinctProductOrderDefaultingController::itemIdModified(this, InventDistinctProductDimensionSpecificDefaultingArgs::construct(inventJournalTrans.inventTable(), true, InventItemOrderSetupType::Invent));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWInventQtyCountedPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight quantity fields and the standard quantity fields.
    /// </summary>
    public void fieldModifiedPdsCWInventQtyCountedPost()
    {
        if (cwFormCtrl)
        {
            InventQty preQty = inventJournalTrans.Counted;
            cwFormCtrl.fieldModified(
                fieldNum(InventJournalTrans,PdsCWInventQtyCounted));
            inventJournalTrans.inventMovement().pdsCWJournalSetCounted();
            if (inventJournalTrans.Counted != preQty)
            {
                inventJournalTrans.inventMovement().journalSetCounted();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPdsCWQtyPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the standard quantity, and calls other methods in this class that affect the appearance and
    /// performance of the form.
    /// </summary>
    public void fieldModifiedPdsCWQtyPost()
    {
        if (cwFormCtrl)
        {
            InventQty preQty = inventJournalTrans.Qty;
            cwFormCtrl.fieldModified(fieldNum(InventJournalTrans,PdsCWQty));
            if (inventJournalTrans.Qty != preQty)
            {
                inventJournalTrans.inventMovement().journalSetQty();
                inventJournalTrans.resetUnitAndUnitQtyOnPdsCWQtyModified();

                this.setInventTransIdReturnEnabled();
                this.setCostAmountEnabled();
                FormDataUtil::getFormDataSource(inventJournalTrans).refresh();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPriceUnitPost</Name>
				<Source><![CDATA[
    public void fieldModifiedPriceUnitPost()
    {
        inventJournalTrans.inventMovement().journalSetPriceUnit();
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.initInventProfileIdFromRAsset_RU();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProfitSetPost</Name>
				<Source><![CDATA[
    public void fieldModifiedProfitSetPost()
    {
        inventJournalTrans.inventMovement().journalSetQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjCatetoryIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedProjCatetoryIdPost()
    {
        inventJournalTrans.ProjLinePropertyId   = ProjLinePropertySetup::findLinePropertyId(inventJournalTrans.ProjId,inventJournalTrans.ProjCategoryId);
        inventJournalTrans.ProjTaxItemGroupId   = ProjParameters::taxItemGroupItem(inventJournalTrans.ProjCategoryId,inventJournalTrans.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedProjIdPost()
    {
        ProjTable   projTable   = ProjTable::find(inventJournalTrans.ProjId);

        inventJournalTrans.initFromProjTable(projTable);
        inventJournalTrans.setProjSalesPrice(projTable, inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedProjSalesCurrencyIdPost</Name>
				<Source><![CDATA[
    public void fieldModifiedProjSalesCurrencyIdPost()
    {
        PriceMarkup     markUpDummy;
        PriceUnit       salesUnitDummy;
        InventTable     inventTable     = InventTable::find(inventJournalTrans.ItemId);

        [inventJournalTrans.ProjSalesPrice,
         salesUnitDummy,
         markUpDummy]                   = inventTable.salesPriceAgreement(
                                              inventJournalTrans.TransDate,
                                              inventJournalTrans.inventDim(),
                                              inventJournalTrans.Qty,
                                              inventJournalTrans.ProjUnitID,
                                              ProjTable::find(inventJournalTrans.ProjId).CustAccount,
                                              inventJournalTrans.ProjSalesCurrencyId,
                                              ProjTable::findPriceGroup(inventJournalTrans.ProjId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedQtyPost</Name>
				<Source><![CDATA[
    public void fieldModifiedQtyPost()
    {
        // After removing the flight, the parameter _transQtySignChangedToNegative of journalSetQty() should be removed
        // because it will no longer be used anywhere.
        inventJournalTrans.inventMovement().journalSetQty();

        this.setInventTransIdReturnEnabled();
        this.setCostAmountEnabled();

        if (inventJournalTrans.ProjId)
        {
            inventJournalTrans.setProjSalesPrice(ProjTable::find(inventJournalTrans.ProjId), inventDim);
        }

        if (#PdsCatchWeightEnabled && cwFormCtrl)
        {
            cwFormCtrl.fieldModified(fieldNum(InventJournalTrans,Qty));
            FormDataUtil::getFormDataSource(inventJournalTrans).refresh();
        }

        qtyModified = true;

        if (qtyModifiedLineNums)
        {
            qtyModifiedLineNums.add(inventJournalTrans.LineNum);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedStornoPost_RU</Name>
				<Source><![CDATA[
    void fieldModifiedStornoPost_RU()
    {
        if (inventJournalTrans.Storno_RU && TransLink_RU::existInventTransOrig(
                                                InventTransOriginJournalTrans::findInventTransOriginId(
                                                    inventJournalTrans.DataAreaId,
                                                    inventJournalTrans.JournalId,
                                                    inventJournalTrans.LineNum)))
        {
            inventJournalTrans.setCostPrice('', inventDim);
            inventJournalTrans.calcCostAmount(inventJournalTrans.Qty);
        }

        this.setCostAmountEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedTransDatePost</Name>
				<Source><![CDATA[
    public void fieldModifiedTransDatePost()
    {
        InventDimParm   inventDimParm;

        // calculate InventOnHand value in the same way as in InventMov_Jour_Loss_SumUp.dateOnHandPhysical() for Count journal
        if (inventJournalTrans.JournalType == InventJournalType::Count)
        {
            inventDimParm.initFromInventDim(inventDim);
            inventDimParm = InventDimParm::orParms(inventDimParm,InventJournalTable::journalId2inventDimParm(inventJournalTrans.JournalId));

            [inventJournalTrans.InventOnHand, inventJournalTrans.PdsCWInventOnHand] = InventSumDatePhysicalDim::pdsCWOnHandQty(inventJournalTrans.TransDate, inventJournalTrans.ItemId, inventDim, inventDimParm);
            inventJournalTrans.Qty = decRound(inventJournalTrans.Counted, InventTable::inventDecimals(inventJournalTrans.ItemId)) - inventJournalTrans.InventOnHand;
            inventJournalTrans.PdsCWQty = decRound(inventJournalTrans.PdsCWInventQtyCounted, UnitOfMeasure::findBySymbol(inventJournalTrans.pdsCWUnitId()).DecimalPrecision) - inventJournalTrans.PdsCWInventOnHand;
        }

        inventJournalTrans.setCostPrice(inventJournalTrans.InventDimId,inventDim);
        inventJournalTrans.calcCostAmount(inventJournalTrans.Qty);
        //inventJournalTrans.inventMovement().journalSetTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedVoucher</Name>
				<Source><![CDATA[
    Voucher  fieldModifiedVoucher()
    {
        Voucher journalVoucherNum;

        if (! journalTrans.Voucher)
                journalVoucherNum = this.journalTableData().journalVoucherNum().getNew(true);

        return journalVoucherNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldPdsCopyBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form object information for the <c>PdsCopyBatchAttrib</c> field.
    /// </summary>
    /// <returns>
    /// The form object ID.
    /// </returns>
    public FormDataObject fieldPdsCopyBatchAttrib()
    {
        return this.journalTrans_DS().object(
                    fieldNum(InventJournalTrans,PdsCopyBatchAttrib));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldPriceUnit</Name>
				<Source><![CDATA[
    protected FormDataObject fieldPriceUnit()
    {
        return this.journalTrans_DS().object(fieldNum(InventJournalTrans,PriceUnit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldValidateItemId</Name>
				<Source><![CDATA[
    public boolean fieldValidateItemId()
    {
        inventJournalTrans.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        InventDimId inventDimId = inventJournalTrans.InventDimId;

        boolean ret = inventJournalTrans.validateField(fieldNum(InventJournalTrans, ItemId));

        if (inventJournalTrans.InventDimId != inventDimId)
        {
            inventDim.data(InventDim::find(inventJournalTrans.InventDimId));
            inventDim_ds.setCurrent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventProfileIdFromRAsset_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// initializes Inventory Profile Id for NVFA inventory journal line
    /// </summary>
    public void initInventProfileIdFromRAsset_RU()
    {
        RAssetParameters        rAssetParameters = RAssetParameters::find();
        InventTable             inventTable = inventJournalTrans.inventTable();

        ItemCostPrice costPrice = PriceDisc::amount2Price(inventJournalTrans.CostAmount,
                                                          0,
                                                          inventJournalTrans.CostMarkup,
                                                          inventJournalTrans.Qty,
                                                          0,
                                                          1,
                                                          '',
                                                          inventJournalTrans.CostPrice);

        if (inventJournalTrans.ItemId
            && rAssetParameters.LowCostAssetInventProfileId
            && inventTable.AssetGroupId_RU
            && RAssetMainGroup::find(inventTable.AssetGroupId_RU).GroupType == RAssetGroupTypes::LowCostAssets
            && costPrice                   <= rAssetParameters.LowCostAmountLimit
            && inventJournalTrans.Qty      >  0                                  
            && inventJournalTrans.JournalType == InventJournalType::Movement   
            && EcoResTrackingDimGroupSetup::newDimensionGroup(inventTable.trackingDimensionGroup()).getFieldSetup(fieldNum(InventDim, InventProfileId_RU)).isActive()
        )
        {
            inventDim.InventProfileId_RU = rAssetParameters.LowCostAssetInventProfileId;
            inventJournalTrans.InventDimId    = InventDim::findOrCreate(inventDim).InventDimId;
            inventDim.data(InventDim::find(inventJournalTrans.InventDimId));
            inventDim_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimReceiptInitPost</Name>
				<Source><![CDATA[
    public void inventDimReceiptInitPost(InventDim _inventDimReceipt)
    {
        inventDimReceipt_ds = FormDataUtil::getFormDataSource(_inventDimReceipt);
        inventDimReceipt    = _inventDimReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSetupObject</Name>
				<Source><![CDATA[
    public InventDimCtrl_Frm_Mov inventDimSetupObject()
    {
        return inventDimFormSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCWFormCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method gets/sets the cwFormCtrl.
    /// </summary>
    /// <param name="_cwFormCtrl">_cwFormCtrl to set.</param>
    /// <returns>CW Form control class</returns>
    /// <remarks>
    /// <syntax>
    /// public PdsCWFormCtrl parmCWFormCtrl(PdsCWFormCtrl _cwFormCtrl)
    /// </syntax>
    /// </remarks>
    public PdsCWFormCtrl parmCWFormCtrl(PdsCWFormCtrl _cwFormCtrl = cwFormCtrl)
    {
        if (!prmisDefault(_cwFormCtrl))
        {
            cwFormCtrl = _cwFormCtrl;
        }

        return cwFormCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionEntryControl</Name>
				<Source><![CDATA[
    public DimensionEntryControl parmDimensionEntryControl(DimensionEntryControl _dimensionEntryControl = dimensionEntryControl)
    {
        dimensionEntryControl = _dimensionEntryControl;

        return dimensionEntryControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsSetBatchAttribCopyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>Enable</c> and <c>Skip</c> properties of the <c>PdsCopyBatchAttrib</c> field.
    /// </summary>
    /// <remarks>
    /// The field is enabled based on the item and not the <c>InventDim</c> value.
    /// </remarks>
    public void pdsSetBatchAttribCopyEnabled()
    {
        PdsBatchAttribByItem    batchAttribByItem;
        boolean                 allowEdit = false;

        InventDimParm inventDimParm = InventDimParm::activeDimFlag(InventDimGroupSetup::newItemId(inventJournalTrans.ItemId));

        if (#PdsBatchAttribEnabled
            &&inventDimParm.InventBatchIdFlag == NoYes::Yes)
        {
            select firstonly RecId from batchAttribByItem
                where batchAttribByItem.PdsBatchAttribItemId
                    == inventJournalTrans.ItemId;

            allowEdit = batchAttribByItem.RecId != 0;
        }

        this.fieldPdsCopyBatchAttrib().enabled(allowEdit);
        this.fieldPdsCopyBatchAttrib().skip(!allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runbaseMainEnd</Name>
				<Source><![CDATA[
    public void runbaseMainEnd(JournalRunbaseCallbackable _runBaseBatch, boolean _fromCatchError)
    {
        super(_runBaseBatch, _fromCatchError);

        this.setDimensionControlEditability();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    public void reset()
    {
        super();
        inventDimFormSetup = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCostAmountEnabled</Name>
				<Source><![CDATA[
    protected void setCostAmountEnabled()
    {
        boolean         allowEdit;

        InventMovement movement = inventJournalTrans.inventMovement();

        if (!movement.inventModelGroup().StandardCost
         && !movement.inventModelGroup().inventModelType().stdCostBased()
         && !movement.isReturned(inventJournalTrans.Qty * movement.transSign())
         &&  movement.transType() != InventTransType::BOMMain
         // <GEEPL>
        && (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) ||
             inventJournalTrans.inventJournalTable().InventDocType_PL != PlInventDocType::RW)
         // </GEEPL>
        && (movement.inventTable().inventItemType().isServiceItem() || movement.transSign() > 0 ))
        {
            allowEdit = true;
        }

        this.fieldCostPrice().allowEdit(allowEdit);
        this.fieldCostAmount().allowEdit(allowEdit);
        this.fieldCostMarkup().allowEdit(allowEdit);
        this.fieldPriceUnit().allowEdit(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDimensionControlEditability</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables the dimensions control only if the journal line is not posted.The dimensions control is
    ///    disabled for a posted journal line.
    /// </summary>
    void setDimensionControlEditability()
    {
        if (dimensionEntryControl != null)
        {
            boolean allowEdit = journalTableData && journalTableData.journalTable().Posted == NoYes::No;
            dimensionEntryControl.allowEdit(allowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventTransIdReturnEnabled</Name>
				<Source><![CDATA[
    protected void setInventTransIdReturnEnabled()
    {
        boolean allowEdit = inventJournalTrans.inventMovement().transSign() >= 0;

        this.fieldInventTransIdReturn().allowEdit(allowEdit);
        this.fieldInventTransIdReturn().skip(!allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    protected void updateDesign(InventDimFormDesignUpdate _mode)
    {
        InventMovement movement = InventMovement::construct(inventJournalTrans);

        switch (_mode)
        {
            case InventDimFormDesignUpdate::Init          :
            case InventDimFormDesignUpdate::Active        :
                if (!inventDimFormSetup)
                {
                    inventDimFormSetup  = InventDimCtrl_Frm_Mov::newFromFormMovement(formRun,movement);
                }
                inventDimFormSetup.formActiveSetup(movement.inventDimGroupSetup(),movement);
                inventDimFormSetup.formSetControls(true);
                break;
            case InventDimFormDesignUpdate::FieldChange   :
                inventDimFormSetup.formActiveSetup(movement.inventDimGroupSetup(),movement);
                inventDimFormSetup.formSetControls(false);
                break;
            default : throw error(strFmt("@SYS54195",funcName()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>