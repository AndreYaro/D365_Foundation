<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportCtrlRSV1_2013</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportCtrlRSV1_2013 extends RPayPFReportCtrlRSV1
{
    RPayRateCode            foreignerRate;
    RPayRateCode            studentRate;
    RpayFundDeductionCode   deductionCode212A8p7, deductionCodeExceedMaxOMI;
    Range                   codesToExcludeOMI;
    IRPayPFReportCommand    studentsCommand;
    RPayPFOfficialsType     officialsType;
    RHRMEmplId                  responsibleId;
    RPaycounterUnit         pe1, pe2;
    Counter                 emplCatQty, emplCatQtyAll;
    Set                     emplCatQtySet, emplCatQtyAllSet;
    Counter                 emplQty, emplQtyAll;
    Set                     emplQtySet, emplQtyAllSet;


    #localmacro.CurrentList
        reportPeriod,
        payYear,
        correcting,
        officialsType,
        responsibleId
    #endmacro

    #localmacro.emplCatQtyCheck
        keyEmplId,
        keyPeriod,
        keyCategory,
        keyFund
    #endmacro

     #localmacro.emplCatQtyCheckAll
        keyEmplId,
        keyCategory,
        keyFund
    #endmacro

    #localmacro.emplQtyCheck
        keyEmplId,
        keyPeriod,
        keyFund
    #endmacro

     #localmacro.emplQtyCheckAll
        keyEmplId,
        keyFund
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFund4Deductions</Name>
				<Source><![CDATA[
        protected boolean checkFund4Deductions()
    {
        if (keyFund == pensionInsuranceFund ||
            keyFund == fF ||
            keyFund == pe1 ||
            keyFund == pe2)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataValid</Name>
				<Source><![CDATA[
        protected boolean dataValid()
    {
        return fundTotalAmount != 0 ||
               fundAmount      != 0 ||
               fundBaseAmount  != 0 ||
               deductionAmount != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionCodes</Name>
				<Source><![CDATA[
        protected container deductionCodes()
    {
        container ret;

        switch (keyFund)
        {
            case pensionInsuranceFund:
            case pe1:
            case pe2:
                return super() + [[deductionCode212A8p7, false]];
            case ff:
                return [[codesToExcludeOMI, true], [deductionCodeExceedMaxOMI, false], [deductionCode212A8p7, false]];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionPctBaseCodes</Name>
				<Source><![CDATA[
        protected container deductionPctBaseCodes()
    {
        container con = connull();

        if (keyFund == pensionInsuranceFund)
        {
            if (deductionCodeExceedMax)
            {
                con = [[deductionCodeExceedMax, false]];
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
        protected void init()
    {
        super();
        emplCatQtySet       = new Set(Types::Container);
        emplCatQtyAllSet    = new Set(Types::Container);
        emplQtySet          = new Set(Types::Container);
        emplQtyAllSet       = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCitizenshipStatus</Name>
				<Source><![CDATA[
        protected void initCitizenshipStatus()
    {
        keyForeign = RPayRateTable::find(foreignerRate).getValue(RPayRateCallContext::construct(keyPeriod, keyEmplId)) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommands</Name>
				<Source><![CDATA[
        protected void initCommands()
    {
        keyContract.reset();
        keyContract.parmEmplId(keyEmplId);
        keyContract.parmPayPeriod(keyPeriod);
        keyContract.parmFund(keyFund);
        keyContract.parmGroupId(keyGroup);
        keyContract.parmCategory(keyCategory);
        keyContract.parmForeigner(keyForeign);
        keyContract.parmStudent(keyStudent);
        keyContract.parmDeduction(keyDeduction);

        valueContract.reset();
        valueContract.parmFundAmount(fundAmount);
        valueContract.parmFundTotalAmount(fundTotalAmount);
        valueContract.parmDeductionAmount(deductionAmount);
        valueContract.parmDeductionPctBase(deductionPctBase);
        valueContract.parmPctBaseEmplQty(pctBaseEmplQty);
        valueContract.parmPctBaseEmplQtyAll(pctBaseEmplQtyAll);
        valueContract.parmEmplCatQty(emplCatQty);
        valueContract.parmEmplCatQtyAll(emplCatQtyAll);
        valueContract.parmEmplQty(emplQty);
        valueContract.parmEmplQtyAll(emplQtyAll);

        totalFundCommand.parmValue([keyContract.pack(), valueContract.pack()]);
        invalidsCommand.parmValue ([keyContract.pack(), valueContract.pack()]);
        studentsCommand.parmValue ([keyContract.pack(), valueContract.pack()]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
        protected void initData()
    {
        keyContract      = new RPayPFReportKeyContract_RSV();
        valueContract    = new RPayPFReportValueContract_RSV();
        reportData       = new RPayPFReportDataRSV1();

        studentsCommand  = new RPayPFReportCommandRSV_2013(reportData, [#StudentDS]);
        totalFundCommand = new RPayPFReportCommandRSV_2013(reportData, [#TotalAmountDS]);
        invalidsCommand  = new RPayPFReportCommandRSV_2013(reportData, [#InvalidDS]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStudentStatus</Name>
				<Source><![CDATA[
        protected void initStudentStatus()
    {
        keyStudent = RPayRateTable::find(studentRate).getValue(RPayRateCallContext::construct(keyPEriod, keyEmplId)) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTemplateParameters</Name>
				<Source><![CDATA[
        protected void initTemplateParameters()
    {
        fF                          = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 1, "@RUP906",  "@RUP732");
        deductionCodeExceedMaxOMI   = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 2, "@RUP2170", "@RUP2986");
        deductionCode212A8p7        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 3, "@RUP2170", "@RUP3428");
        deductionCode212            = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 4, "@RUP2170", "@RUP2990");
        gr66                        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 5, "@RUP1230", "@RUP2188");
        gr67                        = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 6, "@RUP1230", "@RUP1231");
        studentRate                 = RPayReportTuningTable::templateReportParameter(RPayReportName::RPayReportRSV1_2013, 7, "@RUP2170", "@RUP3429");
        pe1                         = payTaxParameters.PensionFundExtra1;
        pe2                         = payTaxParameters.PensionFundExtra2;

        funds = [pensionInsuranceFund, pensionStorageFund, fF];

        if (pe1)
        {
            funds += pe1;
        }

        if (pe2)
        {
            funds += pe2;
        }

        deductionCodeExceedMax = payTaxParameters.PFDeductionCodePctBase;
        foreignerRate          = payTaxParameters.InsuredForeignCitizens;

        codesToExclude  = payTaxParameters.PensionFundinvalidDeduction;
        codesToExclude += deductionCodeExceedMax ? ((codesToExclude ? ',' : '') + deductionCodeExceedMax) : '';
        codesToExclude += deductionCode212       ? ((codesToExclude ? ',' : '') + deductionCode212)       : '';
        codesToExclude += deductionCode212A8p7   ? ((codesToExclude ? ',' : '') + deductionCode212A8p7)   : '';
        codesToExclude = '!' + strreplace(codesToExclude, ',', ',!');

        codesToExcludeOMI += deductionCodeExceedMaxOMI ? ((codesToExcludeOMI ? ',' : '') + deductionCodeExceedMaxOMI) : '';
        codesToExcludeOMI += deductionCode212          ? ((codesToExcludeOMI ? ',' : '') + deductionCode212)       : '';
        codesToExcludeOMI += deductionCode212A8p7      ? ((codesToExcludeOMI ? ',' : '') + deductionCode212A8p7)   : '';
        codesToExcludeOMI = '!' + strreplace(codesToExcludeOMI, ',', ',!');
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeductions</Name>
				<Source><![CDATA[
        protected void processDeductions()
    {
        RPayAmount fundTotalAmountTmp, fundAmountTmp, fundBaseAmountTmp;

        fundAmountTmp      = fundAmount;
        fundTotalAmountTmp = fundTotalAmount;
        fundBaseAmountTmp  = fundBaseAmount;

        super();

        fundAmount      = fundAmountTmp;
        fundTotalAmount = fundTotalAmountTmp;
        fundBaseAmount  = fundBaseAmountTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processEmplQty</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void processEmplQty()
    {
        if (fundAmount)
        {
            fundAmount      = 0;
            fundTotalAmount = 0;
            fundBaseAmount  = 0;

            if (emplCatQtySet.in([#emplCatQtyCheck]))
            {
                emplCatQty = 0;
            }
            else
            {
                emplCatQty = 1;
                emplCatQtySet.add([#emplCatQtyCheck]);
            }

            if (emplCatQtyAllSet.in([#emplCatQtyCheckAll]))
            {
                emplCatQtyAll = 0;
            }
            else
            {
                emplCatQtyAll = 1;
                emplCatQtyAllSet.add([#emplCatQtyCheckAll]);
            }

            if (emplQtySet.in([#emplQtyCheck]))
            {
                emplQty = 0;
            }
            else
            {
                emplQty = 1;
                emplQtySet.add([#emplQtyCheck]);
            }

            if (emplQtyAllSet.in([#emplQtyCheckAll]))
            {
                emplQtyAll = 0;
            }
            else
            {
                emplQtyAll = 1;
                emplQtyAllSet.add([#emplQtyCheckAll]);
            }

            this.initReportCommand();
            totalFundCommand.insert();

            emplCatQty = 0;
            emplCatQtyAll = 0;
            emplQty = 0;
            emplQtyAll = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCommand</Name>
				<Source><![CDATA[
        protected void runCommand()
    {
        super();
        studentsCommand.insert();
        this.processEmplQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
        protected void unpackData(container _callParameters)
    {
        date d;
        container packedQuery;

        if (_callParameters == connull())
        {
            throw Error(Error::missingParameter(this));
        }

        parmContract.unpack(_callParameters);
        packedQuery = parmContract.queryRun();

        if (SysQuery::isPackedOk(packedQuery))
        {
            queryRun = new QueryRun(packedQuery);
        }
        else
        {
            this.initEmplQuery();
        }

        periodEndDate = parmContract.reportEndPeriod();

        if (periodEndDate <= 31\12\2004)
        {
            throw Error("@RUP1160");
        }
        else
        {
            d           = dateStartQtr(periodEndDate);
            wholePeriod = SysQuery::range(dateStartYr(d), dateEndQtr(d));

            reportStartDate = dateStartYr(d);
            reportEndDate   = dateEndQtr(d);

            month1      = SysQuery::range(d, endmth(d));
            mth1        = endmth(d);
            d           = nextmth(d);
            month2      = SysQuery::range(d, endmth(d));
            mth2        = endmth(d);
            d           = nextmth(d);
            month3      = SysQuery::range(d, endmth(d));
            mth3        = endmth(d);

            fromYearStart = SysQuery::range(dateStartYr(d), dateEndQtr(d));

            if (!parmContract.corrReportEndPeriod())
            {
                beforeQuarter = SysQuery::range(dateStartYr(payYear), dateStartQtr(periodEndDate) - 1);
                currentQuarter = SysQuery::range(dateStartQtr(periodEndDate), dateEndQtr(periodEndDate));
            }

            reportType = parmContract.corrReportEndPeriod() ? RpayPensionFundExportKindOfCorrection::Correctional : RpayPensionFundExportKindOfCorrection::None;
            reportCalcStartDate = endmth(reportStartDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>