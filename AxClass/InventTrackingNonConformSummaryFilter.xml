<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingNonConformSummaryFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingNonConformSummaryFilter</c> class provides tracing hierarchy filtering for
///    the <see cref="InventNonConformanceTable"/> form.
/// </summary>
class InventTrackingNonConformSummaryFilter extends InventTrackingTraceSummaryFilter
{
    Set processedNonConformances;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNonConformanceDataSource</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addNonConformanceDataSource(
        Query   _query,
        ItemId  _itemId,
        boolean _forQualityOrder = false)
    {
        QueryBuildDataSource qbds = _query.addDataSource(tableNum(InventNonConformanceTable));
        QueryBuildRange qbr = qbds.addRange(fieldNum(InventNonConformanceTable, ItemId));
        qbr.value(queryValue(_itemId));
        qbr = qbds.addRange(fieldNum(InventNonConformanceTable, InventTransIdRef));
        qbr.value(SysQuery::valueEmptyString());
        if (_forQualityOrder)
        {
            qbr = qbds.addRange(fieldNum(InventNonConformanceTable, InventTransType));
            qbr.value(queryValue(InventTransType::QualityOrder));
        }
        else
        {
            qbr = qbds.addRange(fieldNum(InventNonConformanceTable, InventRefId));
            qbr.value(SysQuery::valueEmptyString());
        }

        QueryBuildFieldList qbfl = qbds.fields();
        qbfl.addField(fieldNum(InventNonConformanceTable, InventNonConformanceID));

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNonConformanceQueryNoDims</Name>
				<Source><![CDATA[
    private Query buildNonConformanceQueryNoDims(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = this.addNonConformanceDataSource(query, _itemId);
        QueryBuildRange qbr = qbds.addRange(fieldNum(InventNonConformanceTable, Closed));
        qbr.value(queryValue(NoYes::No));

        this.inventDimExistsJoin(qbds, _inventDimCriteria, _inventDimParm, true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNonConformanceQueryWithDims</Name>
				<Source><![CDATA[
    private Query buildNonConformanceQueryWithDims(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = this.addNonConformanceDataSource(query, _itemId);

        this.inventDimExistsJoin(qbds, _inventDimCriteria, _inventDimParm, false);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQualityOrderQueryNoDims</Name>
				<Source><![CDATA[
    private Query buildQualityOrderQueryNoDims(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = this.addNonConformanceDataSource(query, _itemId, true);

        qbds = qbds.addDataSource(tableNum(InventQualityOrderTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(InventNonConformanceTable, InventRefId), fieldNum(InventQualityOrderTable, QualityOrderId));
        QueryBuildRange qbr = qbds.addRange(fieldNum(InventQualityOrderTable, OrderStatus));
        qbr.value(queryValue(InventTestOrderStatus::Open));

        this.inventDimExistsJoin(qbds, _inventDimCriteria, _inventDimParm, true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQualityOrderQueryWithDims</Name>
				<Source><![CDATA[
    private Query buildQualityOrderQueryWithDims(
        ItemId          _itemId,
        InventDim       _inventDimCriteria,
        InventDimParm   _inventDimParm)
    {
        Query                   query = new Query();

        QueryBuildDataSource qbds = this.addNonConformanceDataSource(query, _itemId, true);

        qbds = qbds.addDataSource(tableNum(InventQualityOrderTable));
        qbds.joinMode(JoinMode::ExistsJoin);
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addLink(fieldNum(InventNonConformanceTable, InventRefId), fieldNum(InventQualityOrderTable, QualityOrderId));

        this.inventDimExistsJoin(qbds, _inventDimCriteria, _inventDimParm, false);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterTableType</Name>
				<Source><![CDATA[
    protected TableId filterTableType()
    {
        return tableNum(InventNonConformanceTmpFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInFilterDTO</Name>
				<Source><![CDATA[
    protected boolean includeInFilterDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        processedNonConformances = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventNonconformance</Name>
				<Source><![CDATA[
    private void insertInventNonconformance(InventNonConformanceID _id, RefRecId _recId)
    {
        InventNonConformanceTmpFilter   inventNonConformanceTmpFilter = filterTmp as InventNonConformanceTmpFilter;

        if (!processedNonConformances.in(_recId))
        {
            processedNonConformances.add(_recId);

            inventNonConformanceTmpFilter.InventNonConformanceId = _id;
            inventNonConformanceTmpFilter.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKeyDataDTO</Name>
				<Source><![CDATA[
    protected void insertKeyDataDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        InventNonConformanceTable   inventNonConformanceTable;
        InventQualityOrderTable     inventQualityOrderTable;
        InventDim                   inventDimCriteria;

        ItemId itemId = _inventTransOriginDTO.itemId();

        InventDimParm inventDimParm = InventTable::find(itemId).inventDimParmActiveDimensions();
        inventDimParm.clearProductDimensions();
        inventDimParm.clearStorageDimensions();

        inventDimCriteria.initFromInventDim(_inventTransDTO.inventDim());

        // Select nonconformances created for _inventTransOrigin
        while select InventNonConformanceID from inventNonConformanceTable
            where inventNonConformanceTable.InventTransIdRef == _inventTransOriginDTO.inventTransId()
        {
            this.insertInventNonconformance(inventNonConformanceTable.InventNonConformanceID, inventNonConformanceTable.RecId);
        }

        // Select nonconformances created for quality orders created for _inventTransOrigin
        while select InventNonConformanceID from inventNonConformanceTable
            where inventNonConformanceTable.InventTransType == InventTransType::QualityOrder
            exists join inventQualityOrderTable
                where inventQualityOrderTable.QualityOrderId        == inventNonConformanceTable.InventRefId
                      && (inventQualityOrderTable.InventRefTransId  == _inventTransOriginDTO.inventTransId()
                          || inventQualityOrderTable.InventTransId  == _inventTransOriginDTO.inventTransId())
        {
            this.insertInventNonconformance(inventNonConformanceTable.InventNonConformanceID, inventNonConformanceTable.RecId);
        }

        // Select nonconfomances created for quality orders with tracking dimensions
        QueryRun queryRun = new QueryRun(this.buildQualityOrderQueryWithDims(itemId, inventDimCriteria, inventDimParm));
        while (queryRun.next())
        {
            inventNonConformanceTable = queryRun.get(tableNum(InventNonConformanceTable));
            this.insertInventNonconformance(inventNonConformanceTable.InventNonConformanceID, inventNonConformanceTable.RecId);
        }

        // Select nonconformances created for open quality orders without batch and serial
        queryRun = new QueryRun(this.buildQualityOrderQueryNoDims(itemId, inventDimCriteria, inventDimParm));
        while (queryRun.next())
        {
            inventNonConformanceTable = queryRun.get(tableNum(InventNonConformanceTable));
            this.insertInventNonconformance(inventNonConformanceTable.InventNonConformanceID, inventNonConformanceTable.RecId);
        }

        // Select nonconformances created manually for tracking dimensions
        queryRun = new QueryRun(this.buildNonConformanceQueryWithDims(itemId, inventDimCriteria, inventDimParm));
        while (queryRun.next())
        {
            inventNonConformanceTable = queryRun.get(tableNum(InventNonConformanceTable));
            this.insertInventNonconformance(inventNonConformanceTable.InventNonConformanceID, inventNonConformanceTable.RecId);
        }

        // Select nonconformances created for item only (no batch/serial) that are not closed
        queryRun = new QueryRun(this.buildNonConformanceQueryNoDims(itemId, inventDimCriteria, inventDimParm));
        while (queryRun.next())
        {
            inventNonConformanceTable = queryRun.get(tableNum(InventNonConformanceTable));
            this.insertInventNonconformance(inventNonConformanceTable.InventNonConformanceID, inventNonConformanceTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyDTO</Name>
				<Source><![CDATA[
    protected str transKeyDTO(InventTrackingDimTracingInventTransDTO _inventTransDTO, InventTrackingDimTracingInventTransOriginDTO _inventTransOriginDTO)
    {
        return _inventTransOriginDTO.inventTransId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingNonConformSummaryFilter construct()
    {
        return new InventTrackingNonConformSummaryFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingNonconformSummaryFilter</c> class with a given tracing hierarchy.
    /// </summary>
    /// <param name="_hierarchy">
    ///    The tracing hierarchy to use.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingNonconformSummaryFilter</c> class.
    /// </returns>
    public static InventTrackingNonconformSummaryFilter newHierarchy(
        InventTrackingDimTracingHierarchy   _hierarchy)
    {
        InventTrackingNonconformSummaryFilter filter = InventTrackingNonconformSummaryFilter::construct();

        filter.parmTracingHierarchy(_hierarchy);

        return filter;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
