<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeModel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCRuntimeModel</c> class is the runtime data structure class for the model.
/// </summary>
class PCRuntimeModel implements PCRuntimeInterface
{
    PCRuntimeComponent rootComponent;

    Map idToAttributeMap;
    Map idToComponentMap;

    Map enumDomains;
    Map integerSetDomains;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accept</Name>
				<Source><![CDATA[
    /// <summary>
    /// Accepts a visitor instance.
    /// </summary>
    /// <param name="_visitor">
    /// A runtime visitor.
    /// </param>
    public void accept(PCRuntimeVisitor _visitor)
    {
        _visitor.visitStart(this);

        rootComponent.accept(_visitor);

        _visitor.visitEnd(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addIntegerSetDomain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an integer set domain to the runtime model.
    /// </summary>
    /// <param name="_integerSetDomain">
    /// The integer set domain.
    /// </param>
    public void addIntegerSetDomain(PCRuntimeIntegerSetDomain _integerSetDomain)
    {
        integerSetDomains.insert(_integerSetDomain.parmIntegerSetDefinitionId(), _integerSetDomain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIntegerSetDomainById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a runtime integer set domain by using definition ID.
    /// </summary>
    /// <param name="_integerSetDefinitionId">
    /// An integer set definition ID.
    /// </param>
    /// <returns>
    /// A runtime integer set domain.
    /// </returns>
    public PCRuntimeIntegerSetDomain getIntegerSetDomainById(str _integerSetDefinitionId)
    {
        return integerSetDomains.lookup(_integerSetDefinitionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEnumDomain</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an enumeration domain to the runtime model.
    /// </summary>
    /// <param name="_enumDomain">
    /// The enumeration domain.
    /// </param>
    public void addEnumDomain(PCRuntimeEnumDomain _enumDomain)
    {
        enumDomains.insert(_enumDomain.parmEnumDefinitionId(), _enumDomain);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an enumerator for the attribute collection.
    /// </summary>
    /// <returns>
    /// An enumerator for the attribute collection.
    /// </returns>
    public MapEnumerator getAttributeEnumerator()
    {
        return idToAttributeMap.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeFromId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the runtime instance by using the ID.
    /// </summary>
    /// <param name="_instanceId">
    /// An instance ID.
    /// </param>
    /// <returns>
    /// A runtime instance.
    /// </returns>
    public PCRuntimeAttribute getAttributeFromId(int _instanceId)
    {
        return idToAttributeMap.lookup(_instanceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentFromId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the runtime instance by using the ID.
    /// </summary>
    /// <param name="_instanceId">
    /// An instance ID.
    /// </param>
    /// <returns>
    /// A runtime instance.
    /// </returns>
    public PCRuntimeComponent getComponentFromId(int _instanceId)
    {
        return idToComponentMap.lookup(_instanceId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumDomainById</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a runtime enumeration domain by using definition ID.
    /// </summary>
    /// <param name="_enumDefinitionId">
    /// An enumeration definition ID.
    /// </param>
    /// <returns>
    /// A runtime enumeration domain.
    /// </returns>
    public PCRuntimeEnumDomain getEnumDomainById(str _enumDefinitionId)
    {
        return enumDomains.lookup(_enumDefinitionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumDomains</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the enumeration domains in the model.
    /// </summary>
    /// <returns>
    /// The enumeration domains in the model.
    /// </returns>
    public Map getEnumDomains()
    {
        return enumDomains;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        idToAttributeMap    = new Map(Types::Integer, Types::Class);
        idToComponentMap    = new Map(Types::Integer, Types::Class);
        enumDomains         = new Map(Types::String, Types::Class);
        integerSetDomains   = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootComponent</Name>
				<Source><![CDATA[
    public PCRuntimeComponent parmRootComponent(PCRuntimeComponent _rootComponent = rootComponent)
    {
        rootComponent = _rootComponent;

        return rootComponent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLookupMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the runtime instance lookup maps.
    /// </summary>
    public void updateLookupMaps()
    {
        this.visitComponent(this.parmRootComponent());
    }

]]></Source>
			</Method>
			<Method>
				<Name>visitComponent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses components to populate lookup maps.
    /// </summary>
    /// <param name="_runtimeComponent">
    /// The component to update.
    /// </param>
    protected void visitComponent(PCRuntimeComponent _runtimeComponent)
    {
        PCRuntimeAttribute      runtimeAttribute;
        PCRuntimeAttributeGroup runtimeAttributeGroup;
        PCRuntimeComponent      runtimeComponent;

        ListEnumerator le1, le2;

        void addAttribute(ListEnumerator le)
        {
            runtimeAttribute = le.current();
            if (runtimeAttribute.parmDataType() == PCRuntimeAttributeDataType::Enum)
            {
                runtimeAttribute.parmEnumDomain(this.getEnumDomainById(runtimeAttribute.parmEnumDefinitionId()));
            }
            else if (runtimeAttribute.parmDataType() == PCRuntimeAttributeDataType::IntegerSet)
            {
                runtimeAttribute.parmIntegerSetDomain(this.getIntegerSetDomainById(runtimeAttribute.parmIntegerSetDefinitionId()));
            }

            idToAttributeMap.insert(runtimeAttribute.parmInstanceId(), runtimeAttribute);
        }

        idToComponentMap.insert(_runtimeComponent.parmInstanceId(), _runtimeComponent);

        // add attributes
        le1 = _runtimeComponent.getAttributes().getEnumerator();

        while (le1.moveNext())
        {
            addAttribute(le1);
        }

        le1 = _runtimeComponent.getAttributeGroups().getEnumerator();

        // add attributes in attribute groups
        while (le1.moveNext())
        {
            runtimeAttributeGroup = le1.current();

            le2 = runtimeAttributeGroup.getAttributes().getEnumerator();

            while (le2.moveNext())
            {
                addAttribute(le2);
            }
        }

        le1 = _runtimeComponent.getSubcomponents().getEnumerator();

        // visit subcomponents
        while (le1.moveNext())
        {
            runtimeComponent = le1.current();

            this.visitComponent(runtimeComponent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeModel construct()
    {
        return new PCRuntimeModel();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>