<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesYOYReportDataProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Data;
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;

/// <summary>
/// The <c>RetailSalesYOYReportDataProvider</c> class is the data provider
/// class for retail sales year over year report.
/// </summary>
[SRSReportParameterAttribute(classstr(RetailSalesYOYReportDataContract))]
class RetailSalesYOYReportDataProvider extends RetailSrsReportDataProviderBase
{
    RetailSalesYearOverYearReportTable table;
    RetailSalesYOYReportDataContract dc;
    ACM.NumericExpression grossProfitMarginPercentage;
    ACM.NumericExpression grossProfitMargin;
    ACM.DynamicMeasureDefinition amount;
    ACM.DynamicMeasureDefinition cogs;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize measure definitions.
    /// </summary>
    public void new()
    {
        super();

        amount = new ACM.DynamicMeasureDefinition(
                    tableStr(RetailSalesYearOverYearReportView),
                    fieldStr( RetailSalesYearOverYearReportView, LineAmountMST),
                    ACM.Aggregation::Sum
                );

        cogs = new ACM.DynamicMeasureDefinition(
                    tableStr(RetailSalesYearOverYearReportView),
                    fieldStr( RetailSalesYearOverYearReportView, COGS),
                    ACM.Aggregation::Sum
                );

        grossProfitMargin = amount.Subtract(cogs);

        ACM.LogicalExpression isAmountZero = amount.CompareEquals(0);

        grossProfitMarginPercentage = new ACM.If(
                isAmountZero,
                ACM.Null::ConstValue,
                grossProfitMargin.Divide(amount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTable</Name>
				<Source><![CDATA[
    [SRSReportDataSetAttribute(tableStr(RetailSalesYearOverYearReportTable))]
    public RetailSalesYearOverYearReportTable getTable()
    {
        select table;
        return table;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. The method should compute data and populate the data tables that will be returned to
    ///    SSRS.Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        dc = this.parmDataContract();
        this.populateData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run the query and insert data into temp table.
    /// </summary>
    void populateData()
    {
        try
        {
            SysQueryRun::ExecuteInManagedStack(true);

            this.InsertChannelsToTmpTable(dc.parmHierarchyRelationId());
            Query q = new Query();
            QueryBuildDataSource  qds = q.addDataSource(tableNum(RetailSalesYearOverYearReportView));

            // Add fields.
            qds.addSelectionFieldWithAlias('InvoiceYear', fieldNum(RetailSalesYearOverYearReportView, InvoiceYear));
            qds.addCalculationField(amount, 'LineAmountMST' );
            qds.addCalculationField(cogs,'COGS');
            qds.addCalculationField(grossProfitMargin, 'GrossProfitMargin');
            qds.addCalculationField(grossProfitMarginPercentage, 'GrossProfitMarginPercentage');
            qds.addGroupByField(fieldNum(RetailSalesYearOverYearReportView, InvoiceYear));

            //Add ranges.
            date start = mkDate(1, 1,dc.parmFromYear());
            date end = mkDate(31, 12, dc.parmToYear());
            QueryBuildRange dateTimeRange = qds.addRange(fieldnum(RetailSalesYearOverYearReportView, InvoiceDate));
            dateTimeRange.value(this.buildDateRangeForSpecifiedField(start, end, fieldStr(RetailSalesYearOverYearReportView, InvoiceDate)));
            
            //Add join with RetailReportChannelTable.
            this.JoinChannelFilter(qds, fieldNum(RetailSalesYearOverYearReportView, RetailChannel));

            // run the query and insert the query results into the form datasource
            Map m = this.getMappings();

            // run the query and insert the query results into the form datasource
            QueryRun::runAndPopulate(q, table, m);

            this.ClearChannelFilterTable();
        }
        finally
        {
            SysQueryRun::ExecuteInManagedStack(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMappings</Name>
				<Source><![CDATA[
    private Map getMappings()
    {
        Map m = new Map(Types::String, Types::String);
        m.insert('InvoiceYear', fieldStr(RetailSalesYearOverYearReportTable, Year));
        m.insert('LineAmountMST', fieldStr(RetailSalesYearOverYearReportTable, Amount));
        m.insert('COGS', fieldStr(RetailSalesYearOverYearReportTable, COGS));
        m.insert('GrossProfitMargin', fieldStr(RetailSalesYearOverYearReportTable, Margin));
        m.insert('GrossProfitMarginPercentage', fieldStr(RetailSalesYearOverYearReportTable, Percentage));

        return m;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>