<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationQuantity_Quotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationQuantity_Quotation extends SalesQuotationQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pdsCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the catch weight quantities.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The transaction record.
    /// </param>
    /// <param name="_specQty">
    /// The quantity spec to process.
    /// </param>
    /// <param name="_qty">
    /// The catch weight quantity.
    /// </param>
    /// <param name="_creditRemaining">
    /// A Boolean value that indicates whether the remaining quantity is to be credited.
    /// </param>
    /// <returns>
    ///  The container that contains catch weight quantities. The container will have the quantities in the
    ///  following order:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>qty</description>
    ///   </item>
    ///   <item>
    ///   <description>remainAfter</description>
    ///   </item>
    ///   <item>
    ///   <description>remainBefore</description>
    ///   </item>
    ///  </list>
    /// </returns>
    public container pdsCWQty(
        Common          _salesQuotationLine,
        SalesUpdate     _specQty            = SalesUpdate::All,
        PdsCWInventQty  _qty                = naReal(),
        boolean         _creditRemaining    = false)
    {
        SalesQuotationLine  localSalesQuotationLine = _salesQuotationLine.data();

        return super(localSalesQuotationLine, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the remaining quantity in catch weight units.
    /// </summary>
    /// <param name="_salesQuotationLine">
    /// The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesQuotationParmLine">
    /// The parameter order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    /// The remaining quantity in catch weight units.
    /// </returns>
    public PdsCWInventQty pdsCWQtyRemainPhysical(SalesQuotationLine _salesQuotationLine, SalesQuotationParmLine _salesQuotationParmLine)
    {
        PdsCWInventQty  remain = _salesQuotationLine.PdsCWRemainInventPhysical;

        if (_salesQuotationParmLine.PdsCWDeliverNow - remain > 0)
        {
            return _salesQuotationParmLine.PdsCWDeliverNow - remain;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
        container  qtyInvent(Common                     _salesQuotationLine,
                         SalesUpdate                _specQty             = SalesUpdate::All,
                         InventQty                  _qty                 = naReal(),
                         boolean                    _creditRemaining     = false)
    {
        SalesQuotationLine  localSalesQuotationLine = _salesQuotationLine.data();

        return super(localSalesQuotationLine, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainInventPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in inventory units.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesQuotationParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in inventory units.
    /// </returns>
    InventQty qtyRemainInventPhysical(SalesQuotationLine        _salesQuotationLine,
                                      SalesQuotationParmLine    _salesQuotationParmLine)
    {
        InventQty remainInvent = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_salesQuotationLine.ItemId,
																									   _salesQuotationLine.InventDimId,
																									   _salesQuotationLine.RemainSalesFinancial,
																									   _salesQuotationLine.SalesUnit,
																									   _salesQuotationLine.inventTable().inventUnitId(),
																									   NoYes::Yes);

        if (_salesQuotationParmLine.InventNow - remainInvent > 0)
        {
            return _salesQuotationParmLine.InventNow - remainInvent;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyRemainSalesPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the remaining quantity in sales units.
    /// </summary>
    /// <param name="_salesQuotationLine">
    ///    The order line for which to calculate the remaining quantity.
    /// </param>
    /// <param name="_salesQuotationParmLine">
    ///    The parm order line for which to calculate the remaining quantity.
    /// </param>
    /// <returns>
    ///    The remaining quantity in sales units.
    /// </returns>
    SalesQty qtyRemainSalesPhysical(SalesQuotationLine        _salesQuotationLine,
                                    SalesQuotationParmLine    _salesQuotationParmLine)
    {
        SalesQty remain = _salesQuotationLine.RemainSalesFinancial;

        if (_salesQuotationParmLine.DeliverNow - remain > 0)
        {
            return _salesQuotationParmLine.DeliverNow - remain;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtySales</Name>
				<Source><![CDATA[
        container  qtySales(Common                      _salesQuotationLine,
                        SalesUpdate                 _specQty             = SalesUpdate::All,
                        SalesQty                    _qty                 = naReal(),
                        boolean                     _creditRemaining     = false)
    {
        SalesQuotationLine  localSalesQuotationLine = _salesQuotationLine.data();

        return super(localSalesQuotationLine, _specQty, _qty, _creditRemaining);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>