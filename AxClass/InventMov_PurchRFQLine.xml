<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_PurchRFQLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
[InventMovementFactoryAttribute(tableStr(PurchRFQLine))]
class InventMov_PurchRFQLine extends InventMovement
{
    PurchRFQLine        purchRFQLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            cacheAccountBalanceSheet = purchRFQLine.accountReceiptLedgerDimension();
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {
            cacheAccountOperations = purchRFQLine.accountConsumptionLedgerDimension();
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetBookId</Name>
				<Source><![CDATA[
    public AssetBookId assetBookId()
    {
        return purchRFQLine.AssetBookId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetId</Name>
				<Source><![CDATA[
    public AssetId assetId()
    {
        return purchRFQLine.AssetId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && purchRFQLine.RecId && purchRFQLine.createdManually())
        {
            InventTransOriginPurchRFQLine::writeOriginOwnerRelationship(purchRFQLine.DataAreaId, purchRFQLine.rfqId, purchRFQLine.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (purchRFQLine.RecId && purchRFQLine.createdManually())
        {
            InventTransOriginPurchRFQLine::deleteOwnerRelationship(purchRFQLine.DataAreaId, purchRFQLine.rfqId, purchRFQLine.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enteredPcsPrice</Name>
				<Source><![CDATA[
    protected PriceCur enteredPcsPrice()
    {
        return purchRFQLine.PurchPrice / (purchRFQLine.PriceUnit ? purchRFQLine.PriceUnit : 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return purchRFQLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                if (purchRFQLine.createdManually())
                {
                    inventTransOriginId = InventTransOriginPurchRFQLine::findInventTransOriginId(purchRFQLine.DataAreaId, purchRFQLine.rfqId, purchRFQLine.LineNum);
                }
                else
                {
                    PurchRFQCaseLine purchRFQCaseLine = purchRFQLine.purchRFQCaseLine();
                    inventTransOriginId = InventTransOriginPurchRFQCaseLine::findInventTransOriginId(purchRFQCaseLine.DataAreaId, purchRFQCaseLine.rfqCaseId, purchRFQCaseLine.LineNum);
                }
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return purchRFQLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markingRefInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the marked transaction origin.
    /// </summary>
    /// <returns>
    ///    zero if the whole movement is not marked; otherwise, the ID of the transaction origin.
    /// </returns>
    public InventTransOriginId markingRefInventTransOrigin()
    {
        return InventTransOrigin::findByInventTransId(purchRFQLine.InventRefTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleType</Name>
				<Source><![CDATA[
    protected ModuleInventPurchSales moduleType()
    {
        return ModuleInventPurchSales::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedOperations</Name>
				<Source><![CDATA[
    public boolean mustBeBookedOperations()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the transactions that are related to this movement must be registered.
    /// </summary>
    /// <returns>
    ///    true if transactions must be registered; otherwise, false.
    /// </returns>
    public boolean mustBeRegistered()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeRemainControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeUnitControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeUnitControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateQuarantineOrder</Name>
				<Source><![CDATA[
    public boolean mustCreateQuarantineOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        PurchRFQLine    _purchRFQLine,
        InventType      _inventType = PurchRFQLineType::construct(_purchRFQLine))
    {
        purchRFQLine = _purchRFQLine;
        super(purchRFQLine,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!purchRFQLine.RecId)
        {
            return null;
        }

        PurchRFQLine purchRFQLine_orig = purchRFQLine.orig();
        //it can be update from "None" to "Item" so it should not look like ItemId is going to be changed
        //in this case update should look like insert of new item
        if (!purchRFQLine_orig.InventTransId)
        {
            return null;
        }

        if (!purchRFQLine_orig.ItemId)
        {
            purchRFQLine_orig.ItemId = purchRFQLine.ItemId;
        }

        return new InventMov_PurchRFQLine(purchRFQLine_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWAddRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a catch weight quantity to the remain physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// The catch weight quantity to add to the remain physical quantity.
    /// </param>
    /// <remarks>
    /// RFQ lines do not have remaining fields so this method does nothing.
    /// </remarks>
    public void pdsCWAddRemainPhysical(PdsCWInventQty _qty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight remain physical quantity.
    /// </summary>
    /// <returns>
    /// The catch weight remain physical quantity.
    /// </returns>
    public PdsCWInventQty pdsCWRemainPhysical()
    {
        return this.remainPhysical() == 0 ? 0 : purchRFQLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWReserveQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight reserve quantity.
    /// </summary>
    /// <returns>
    /// The catch weight reserve quantity.
    /// </returns>
    public PdsCWInventQty pdsCWReserveQty()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetRemainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight remain physical quantity.
    /// </summary>
    /// <param name="_qty">
    /// The catch weight quantity to set as the remain physical quantity.
    /// </param>
    /// <remarks>
    /// RFQ lines do not have remaining fields so this method does nothing.
    /// </remarks>
    public void pdsCWSetRemainPhysical(PdsCWInventQty _qty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight transaction quantity.
    /// </summary>
    /// <param name="_pdsCWQtyInvent">
    /// The catch weight quantity to set as the transaction quantity.
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _pdsCWQtyInvent)
    {
        purchRFQLine.PdsCWQty = _pdsCWQtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight transaction quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return purchRFQLine.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::PurchReceipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    public InventQty   remainPhysical()
    {
        return purchRFQLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysicalUnit</Name>
				<Source><![CDATA[
    public UnitQty remainPhysicalUnit()
    {
        return purchRFQLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        purchRFQLine.setInventDimId(_dimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventRefFields</Name>
				<Source><![CDATA[
    public boolean setInventRefFields(
        InventRefType           _inventRefType,
        InventRefId             _inventRefId,
        InventTransOriginId     _markingRefInventTransOrigin)
    {
        purchRFQLine.InventRefType       = _inventRefType;
        purchRFQLine.InventRefId         = _inventRefId;
        purchRFQLine.InventRefTransId    = InventTransOrigin::find(_markingRefinventTransOrigin).InventTransId;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysical</Name>
				<Source><![CDATA[
    public void setRemainPhysical(InventQty  _inventQty)
    {//RFQLine do not have remaining fields
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRemainPhysicalUnit</Name>
				<Source><![CDATA[
    public void setRemainPhysicalUnit(UnitQty     _qtyUnit)
    {//RFQLine do not have remaining fields
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        purchRFQLine.QtyOrdered = _qtyInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQtyUnit</Name>
				<Source><![CDATA[
    public void setTransQtyUnit(UnitQty _qtyUnit)
    {
        purchRFQLine.PurchQty = _qtyUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate()
    {
        return purchRFQLine.ConfirmedDlv? purchRFQLine.ConfirmedDlv : purchRFQLine.DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return purchRFQLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    public InventRefType transInventRefType()
    {
        return InventRefType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty  transQty()
    {
        return purchRFQLine.QtyOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQtyUnit</Name>
				<Source><![CDATA[
    public UnitQty      transQtyUnit()
    {
        return purchRFQLine.PurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {//always use the RFQCaseId as transRefId.
        return PurchRFQTable::find(purchRFQLine.rfqId).rfqCaseId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public InventTransType transType()
    {
        return InventTransType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transUnitId</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol transUnitId()
    {
        return purchRFQLine.PurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBuffer</Name>
				<Source><![CDATA[
    public void updateBuffer(boolean _updateReservation = false)
    {
        InventUpd_Estimated estimated = InventUpd_Estimated::newInventMovement(this);
        estimated.updateNow();

        purchRFQLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchRFQLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_PurchRFQLine</c> class based on the specified record.
    /// </summary>
    /// <param name="_purchRFQLine">
    ///    The <c>PurchRFQLine</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_PurchRFQLine</c> class.
    /// </returns>
    public static InventMov_PurchRFQLine newFromPurchRFQLine(PurchRFQLine _purchRFQLine)
    {
        return new InventMov_PurchRFQLine(_purchRFQLine);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
