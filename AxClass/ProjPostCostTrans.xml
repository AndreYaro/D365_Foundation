<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostTrans extends ProjPost
{
    ProjCostTrans   projCostTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costEnterCredit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a credit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a credit amount for the cost account; otherwise, false.
    /// </returns>
    protected boolean costEnterCredit()
    {
        if (projCostTrans.projTable().isInvestmentProject())
        {
            if (this.parmElimination())
            {
                if (this.parmLedgerStatusCost() == ProjLedgerStatus::BalanceSheet) // reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costEnterDebit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the posting should have a debit amount for the cost account.
    /// </summary>
    /// <returns>
    /// true if the posting should have a debit amount for the cost account; otherwise, false.
    /// </returns>
    protected boolean costEnterDebit()
    {
        if (projCostTrans.projTable().isInvestmentProject())
        {
            if (this.parmElimination())
            {
                if (this.parmLedgerStatusCost() != ProjLedgerStatus::BalanceSheet) // not reverse
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costValueCUR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// The cost amount for the transaction.
    /// </returns>
    protected AmountCur costValueCUR()
    {
        if (projTrans.ledgerStatusCost() == ProjLedgerStatus::None)
        {
            return super();
        }

        return projTrans.ledgerCostAmountMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ledger dimension for posting the credit side of transactions for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    ///    The funding source that is associated with the project contract used by this transaction.
    /// </param>
    /// <returns>
    ///    The ledger dimension for posting the credit amounts for costs.
    /// </returns>
    public LedgerDimensionDefaultAccount creditAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                }
                break;

            case ProjLedgerStatus::Operations   :
                ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                break;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the country identifier for computing taxes on transaction costs.
    /// </summary>
    /// <returns>
    /// The country code for taxes on costs.
    /// </returns>
    public CurrencyCode currencyIdCost()
    {
        if (projTrans.ledgerStatusCost() == ProjLedgerStatus::None)
        {
            return super();
        }

        return Ledger::accountingCurrency(CompanyInfo::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>debitAccountCostValueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension that is used for the debit side of a posting transaction for costs.
    /// </summary>
    /// <param name="_fundingSourceId">
    /// The funding source associated with the project contract used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension used to post the debit amounts of cost transactions.
    /// </returns>
    public LedgerDimensionDefaultAccount debitAccountCostValueLedgerDimension(ProjFundingSourceRefId _fundingSourceId )
    {
        LedgerDimensionDefaultAccount ledgerDimension;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                break;

            case ProjLedgerStatus::Operations   :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerDimension = projTrans.statusAccountLedgerDimension(_fundingSourceId);
                }
                else
                {
                    ledgerDimension = projTrans.costAccountLedgerDimension(_fundingSourceId);
                }
                break;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>ProjPostCostTrans</c> class.
    /// </summary>
    /// <param name="_buffer">
    /// The table for the transaction type.
    /// </param>
    public void new(Common _buffer)
    {
        projCostTrans   = _buffer;
        projTrans       = ProjTrans::newProjCostTrans(projCostTrans);

        this.parmTransIdCost(projTrans.transId());
        this.parmTransIdSales(projTrans.transId());

        super(_buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type that is associated with posting project costs based on the current
    /// project ledger status.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project costs.
    /// </returns>
    public LedgerPostingType postingTypeCost()
    {
        if (projTrans.ledgerStatusCost()    == ProjLedgerStatus::BalanceSheet)
        {
            if (projTrans.isIntercompany())
            {
                return LedgerPostingType::IntercompanyCost;
            }
            else
            {
                return LedgerPostingType::ProjCost;
            }
        }

        if (projTrans.projLineProperty().ToBeCapitalize)
        {
            return LedgerPostingType::ProjWIPCostvalue;
        }
        else
        {
            if (projTrans.isIntercompany())
            {
                return LedgerPostingType::IntercompanyCost;
            }
            else
            {
                return LedgerPostingType::ProjCost;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingTypeOffsetCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the ledger posting type for project offset cost posting based on the current ledger status
    /// of the project.
    /// </summary>
    /// <returns>
    /// The ledger posting type for project offset costs.
    /// </returns>
    public LedgerPostingType postingTypeOffsetCost()
    {
        LedgerPostingType   ledgerPostingType;

        switch (projTrans.ledgerStatusCost())
        {
            case ProjLedgerStatus::BalanceSheet :
                if (projTrans.projLineProperty().ToBeCapitalize)
                {
                    ledgerPostingType = LedgerPostingType::ProjWIPCostvalue;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                break;
            case ProjLedgerStatus::Operations   :
                if (projTrans.isIntercompany() && ProjPendingVendorInvoiceIntercompanyCheckFlight::instance().isEnabled())
                {
                    ledgerPostingType = LedgerPostingType::IntercompanyCost;
                }
                else
                {
                    ledgerPostingType = LedgerPostingType::ProjCost;
                }
                break;
        }
        return ledgerPostingType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>