<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransCache_Daily</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransCacheDaily</c> class manages items during a non-periodic scheduling process.
/// </summary>
/// <remarks>
///    This class inherits from the <c>ReqTransCache</c> class.
/// </remarks>
class ReqTransCache_Daily extends ReqTransCache
{
    ItemId          itemIdSetRemove;

    BOMLevel        rerunCoverageFromLevel;
    Set             inventLevelSet;         // all levels
    Set             inventLevelWorkSet;     // remaining levels to be processed
    int             inventLevelWork;        // current work level
    Set             allItems;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an item to the local set variables.
    /// </summary>
    /// <param name="_reqTrans">
    ///    The <c>ReqTrans</c> record that should be added to the cache.
    /// </param>
    public void add(ReqTrans    _reqTrans)
    {
        super(_reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemToCache</Name>
				<Source><![CDATA[
    public void addItemToCache(Set _itemSet, ReqTrans _reqTrans)
    {
        this.addInventLevel(_reqTrans.Level);
        _itemSet.add(_reqTrans.ItemId);
        mapLevelItem.insert(_reqTrans.Level, _itemSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds BOM level of an item to the local level sets.
    /// </summary>
    /// <param name="_level">
    ///    The item BOM level.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The internal levels sets are not initialized.
    /// </exception>
    protected void addInventLevel(BOMLevel _level)
    {
        if (   !inventLevelSet
            || !inventLevelWorkSet)
        {
            throw error(strFmt("@SYS22828", funcName()));
        }

        if (!inventLevelSet.in(_level))
        {
            inventLevelSet.add(_level);
            inventLevelWorkSet.add(_level);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endProcess</Name>
				<Source><![CDATA[
    public void endProcess()
    {
        ReqTransCache::deleteProcessData(processId, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items in a given item list.
    /// </summary>
    /// <param name="_level">
    /// The BOM level to retreve items for.
    /// </param>
    /// <returns>
    /// A <c>Set</c> with the items in an item list.
    /// </returns>
    /// <remarks>
    /// The method returns all the items in the current level.
    /// </remarks>
    public Set getItems(BOMLevel _level)
    {
        if (!mapLevelItem.exists(_level))
        {
            return new Set(Types::String);
        }

        return Set::create(mapLevelItem.lookup(_level).pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRerunFromLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BOM level from which coverage should be re-run.
    /// </summary>
    /// <returns>
    /// The BOM level from which coverage should be re-run
    /// </returns>
    public BOMLevel getRerunFromLevel()
    {
        return rerunCoverageFromLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMarkedForProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the specified item is marked for processing.
    /// </summary>
    /// <param name="_itemId">
    ///    The item for which to search.
    /// </param>
    /// <returns>
    ///    true if the item is marked for processing; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method always returns false.
    /// </remarks>
    public boolean isItemMarkedForProcessing(ItemId _itemId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>levelCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of BOM levels of the items that are processed.
    /// </summary>
    /// <returns>
    ///    The number of BOM levels.
    /// </returns>
    public int levelCount()
    {
        return inventLevelSet.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>manageItemError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is not used because no error-handling for daily item processing is needed.
    /// </summary>
    /// <param name="_itemId">
    ///    The item with an error.
    /// </param>
    /// <param name="_errors">
    ///    A Boolean value that indicates whether an error has occurred.
    /// </param>
    public void manageItemError(
        ItemId  _itemId,
        boolean _errors)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the current BOM level used by <c>ReqTransCache</c> to the next level
    /// </summary>
    /// <returns>
    /// true if the next level exists; otherwise, false.
    /// </returns>
    public boolean moveNextLevel()
    {
        SetEnumerator   levelWorkSetEnumerator;
        int             level;
        boolean         result = false;

        // remove current level from working set
        inventLevelWorkSet.remove(inventLevelWork);

        // retrieve first element from working set
        levelWorkSetEnumerator = inventLevelWorkSet.getEnumerator();
        if (levelWorkSetEnumerator.moveNext())
        {
            result          = true;
            inventLevelWork = levelWorkSetEnumerator.current();
            level           = inventLevelWork < 0 ? -inventLevelWork : inventLevelWork;

            this.setCurrentLevel(level);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        inventLevelWorkSet = new Set(Types::Integer);
        inventLevelSet     = new Set(Types::Integer);
        inventLevelWork    = maxInt();

        rerunCoverageFromLevel = -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqProcessList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an empty <c>ReqProcessList</c> record.
    /// </summary>
    /// <returns>
    ///    An empty <c>ReqProcessList</c> record.
    /// </returns>
    public ReqProcessList reqProcessList()
    {
        ReqProcessList reqProcessList;

        return reqProcessList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the current BOM level used by <c>ReqTransCache</c> to the initial value
    /// </summary>
    public void resetLevel()
    {
        super();
        inventLevelWorkSet = Set::create(inventLevelSet.pack());
        inventLevelWork    = maxInt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAndCheckProcessStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    No processing status has to be checked when the daily processing is run.
    /// </summary>
    /// <param name="_status">
    ///    The status for which to check.
    /// </param>
    /// <param name="_resetItemLists">
    ///    A Boolean value that indicates whether ID item lists should be reset.
    /// </param>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    public boolean setAndCheckProcessStatus(
        ReqProcessStatus _status,
        boolean          _resetItemLists)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentItem</Name>
				<Source><![CDATA[
    public void setCurrentItem(ItemId _itemId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRerunFromLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the level from which coverage planning should be re-run.
    /// </summary>
    /// <param name="_fromLevel">
    /// The level from which coverage planning should be re-run.
    /// </param>
    public void setRerunFromLevel(BOMLevel _fromLevel)
    {
        if (_fromLevel < rerunCoverageFromLevel || rerunCoverageFromLevel == -1)
        {
            rerunCoverageFromLevel = _fromLevel;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setThreadParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets parameters for thread usage.
    /// </summary>
    /// <param name="_threadId">
    ///    The ID of the current thread.
    /// </param>
    /// <param name="_thisIsChildThread">
    ///    A Boolean value that specifies whether this thread is a child (helper) thread.
    /// </param>
    /// <param name="_maxThreads">
    ///    The maximum number of helpers used.
    /// </param>
    /// <remarks>
    ///    Parameters do not have to be set for thread usage because they cannot be used in daily scheduling.
    /// </remarks>
    public void setThreadParameters(
        ReqProcessThreadId   _threadId,
        boolean              _thisIsChildThread,
        ReqProcessNumThreads _maxThreads)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqProcessItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the list of items in the database for a given level.
    /// </summary>
    /// <param name="_level">
    /// The BOM level to update.
    /// </param>
    public void updateReqProcessItems(BOMLevel _level)
    {
        ReqProcessItem      reqProcessItem;
        RecordInsertList    rilProcessItems = new RecordInsertList(tableNum(ReqProcessItem));
        SetEnumerator       se = this.getItems(_level).getEnumerator();

        ttsbegin;

        delete_from reqProcessItem
            where   reqProcessItem.ProcessId == processId
            && reqProcessItem.level == _level;

        while (se.moveNext())
        {
            reqProcessItem.ItemId = se.current();
            reqProcessItem.ProcessId = processId;
            reqProcessItem.Level = _level;
            rilProcessItems.add(reqProcessItem);
        }

        rilProcessItems.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqProcessItemsAllLevels</Name>
				<Source><![CDATA[
    public void updateReqProcessItemsAllLevels()
    {
        MapEnumerator currLevel = mapLevelItem.getEnumerator();

        while (currLevel.moveNext())
        {
            this.updateReqProcessItems(currLevel.currentKey());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqTransCache_Daily construct()
    {
        return new ReqTransCache_Daily();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqTransCache_Daily</c> class.
    /// </summary>
    /// <param name="_reqPlanId">
    /// The plan ID that is to be used for filtering cached data.
    /// </param>
    /// <param name="_processId">
    /// The master planning process ID that is using the cache object.
    /// </param>
    /// <returns>
    /// A new instance of the <c>ReqTransCache_Daily</c> class.
    /// </returns>
    public static ReqTransCache_Daily newProcessId(
        ReqPlanId    _reqPlanId,
        ReqProcessId _processId)
    {
        ReqTransCache_Daily reqTransCache = ReqTransCache_Daily::construct();

        reqTransCache.parmReqPlanId(_reqPlanId);
        reqTransCache.parmProcessId(_processId);

        return reqTransCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the items to be processed.
    /// </summary>
    /// <returns>
    /// The list of all the items to be processed.
    /// </returns>
    public Set getAllItems()
    {
        return mapLevelItem.valueSet();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProcessMultithreaded</Name>
				<Source><![CDATA[
    public boolean isProcessMultithreaded()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>