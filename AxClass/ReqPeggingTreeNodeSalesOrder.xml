<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingTreeNodeSalesOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPeggingTreeNodeSalesOrder</c> class represents a sales order node in the pegging tree.
/// </summary>
public class ReqPeggingTreeNodeSalesOrder extends ReqPeggingTreeNode
{
    SalesTable  salesTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the textual description of the node.
    /// </summary>
    /// <returns>
    /// A string containing the description text of the node.
    /// </returns>
    public str description()
    {
        return strfmt("@SYS76767", salesTable.SalesId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the event type for the current tree node.
    /// </summary>
    /// <returns>
    /// A <c>LeanPeggedEventType</c> instance.
    /// </returns>
    public LeanPeggedEventType eventType()
    {
        return LeanPeggedEventType::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ReqPeggingTreeDetails</c> instance with data.
    /// </summary>
    /// <param name="_details">
    /// The object that holds the details.
    /// </param>
    public void initializeDetails(ReqPeggingTreeDetails _details)
    {
        _details.initFromSalesOrder(salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>listChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the list of children record buffers (sales order lines).
    /// </summary>
    /// <returns>
    /// A list containing the sales order lines that belong to the sales order of the node.
    /// </returns>
    public List listChildren()
    {
        SalesLine   salesLine;
        List        list = new List(Types::Record);
        container cachedResult = reqPeggingListCache.find(classStr(ReqPeggingTreeNodeSalesOrder), [salesTable.SalesId]);

        if (cachedResult != conNull())
        {
            return List::create(cachedResult);
        }

        while select salesLine
            where salesLine.SalesId == salesTable.SalesId
        {
            list.addEnd(salesLine);
        }

        cachedResult = list.pack();
        reqPeggingListCache.insert(classStr(ReqPeggingTreeNodeSalesOrder), [salesTable.SalesId], cachedResult);
        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record buffer of the parent node.
    /// </summary>
    /// <returns>
    /// Always null as a sales order will always be a top node.
    /// </returns>
    public Common parent()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the source document number.
    /// </summary>
    /// <returns>
    /// A source document number.
    /// </returns>
    /// <remarks>
    /// Implemented only for root level nodes.
    /// </remarks>
    public str sourceDocNumber()
    {
        return salesTable.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ReqPeggingTreeNodeSalesOrder construct()
    {
        return new ReqPeggingTreeNodeSalesOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record buffer represented by the node.
    /// </param>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTreeNodeSalesOrder newStandard(SalesTable _salesTable)
    {
        ReqPeggingTreeNodeSalesOrder    reqPeggingTreeNodeSalesOrder = ReqPeggingTreeNodeSalesOrder::construct();

        reqPeggingTreeNodeSalesOrder.parmSalesTable(_salesTable);

        return reqPeggingTreeNodeSalesOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>