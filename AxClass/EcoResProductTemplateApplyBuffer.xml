<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductTemplateApplyBuffer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EcoResProductTemplateApplyBuffer</c> class handles validation and updates a buffer when a
/// product template is being applied.
/// </summary>
class EcoResProductTemplateApplyBuffer
{
    Common      buffer;
    FieldId     optionalFieldId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustWriteBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates if the record buffer needs to be written to the database.
    /// </summary>
    /// <returns>
    /// true if the record buffer needs to be written to the database; otherwise, false.
    /// </returns>
    protected boolean mustWriteBuffer()
    {
        return !optionalFieldId || buffer.RecId || buffer.(optionalFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = buffer)
    {
        buffer = _buffer;

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOptionalFieldId</Name>
				<Source><![CDATA[
    public FieldId parmOptionalFieldId(FieldId _optionalFieldId = optionalFieldId)
    {
        optionalFieldId = _optionalFieldId;

        return optionalFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the underlying buffer.
    /// </summary>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateBuffer()
    {
        if (this.mustWriteBuffer())
        {
            return buffer.validateWrite();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts or updates the underlying buffer.
    /// </summary>
    /// <remarks>
    /// The value of the <c>parmOptionalFieldId</c> parameter determines whether the buffer is written.If
    /// the <c>parmOptionalFieldId</c> parameter has a value that differs from zero, the buffer is written
    /// only when a field, determined by the <c>parmOptionalFieldId</c> parameter, does not have an empty
    /// value or the record already exists.In the case that <c>parmOptionalFieldId</c> parameter is equal
    /// to zero the buffer is always written.
    /// </remarks>
    public void writeBuffer()
    {
        if (this.mustWriteBuffer())
        {
            if (buffer.RecId)
            {
                buffer.update();
            }
            else
            {
                buffer.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EcoResProductTemplateApplyBuffer construct()
    {
        return new EcoResProductTemplateApplyBuffer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventTableBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the <c>InventTable</c> buffer.
    /// </summary>
    /// <param name="_skipProductVariantUnitConversionValidation">
    /// A boolean parameter to determine whether the product variant unit conversion validation must be executed or not.
    /// </param>
    /// <returns>
    /// true if validation is successful; otherwise, false.
    /// </returns>
    public boolean validateInventTableBuffer(boolean _skipProductVariantUnitConversionValidation = false)
    {
        InventTable inventTable = buffer as InventTable;
        buffer = inventTable;

        if (this.mustWriteBuffer())
        {
            return inventTable.validateWrite(_skipProductVariantUnitConversionValidation);
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>