<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvExpenseHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class for expense and unreconciled expense related logic.
/// </summary>
using Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper;

public static class TrvExpenseHelper
{
    private static Map expTransFieldVisibilityMap;
    private static NumberSeq _numberSeq;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExpenseTypeIconName</Name>
				<Source><![CDATA[
    public static str getExpenseTypeIconName(TrvExpType _expType)
    {
        str imageName;
        switch (_expType)
        {
            case TrvExpType::Airline :
                imageName = identifierstr(AirFare);
                break;
            case TrvExpType::CarRental :
                imageName = identifierstr(CarRental);
                break;
            case TrvExpType::Conference :
                imageName = identifierstr(Conference);
                break;
            case TrvExpType::Meals :
                imageName = identifierstr(Meal);
                break;
            case TrvExpType::Hotel :
                imageName = identifierstr(Hotel);
                break;
            case TrvExpType::Allowance :
                imageName = identifierstr(Day);
                break;
            case TrvExpType::Entertainment :
                imageName = identifierstr(Entertainment);
                break;
            case TrvExpType::Gift :
                imageName = identifierstr(Gift);
                break;
            case TrvExpType::Transport :
                imageName = identifierstr(Mileage);
                break;
            case TrvExpType::Expense :
                imageName = identifierstr(Diamond);
                break;
            case TrvExpType::Advance :
                imageName = identifierstr(Back);
                break;
            default:
                imageName = identifierstr(Receipt);
                break;
        }
        return imageName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromExpense</Name>
				<Source><![CDATA[
    public static boolean isCalledFromExpense(Object caller)
    {
        FormRun callingForm;
        boolean isCallerContextExpense = false;

        // If calling object implements the TrvIExpenseForm interface, it is considered an expense module form
        if (caller && caller is TrvIExpenseForm)
        {
            isCallerContextExpense = true;
        }
        // If calling object is a form, cast the object to form run so we can get the name.
        else if (caller && caller is FormRun)
        {
            callingForm = caller;

            // If calling entity was a form, check if the caller is an expense module form.
            switch (callingForm.name())
            {
                case formStr(TrvExpenseReportsList):
                case formStr(TrvExpenseReportDetails):
                case formStr(TrvExpenses):
                case formStr(TrvExpenseWorkspace):
                case formStr(TrvLatestExpenseReportsFormPart):
                case formstr(TrvTaxRecovery):
                case formStr(SrsReportViewerForm):
                    isCallerContextExpense = true;
                    break;
            }
        }

        return isCallerContextExpense;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpenseRecordFromQuery</Name>
				<Source><![CDATA[
    public static TrvExpTable getExpenseRecordFromQuery(str query)
    {
        TrvExpTable trvExpTable;

        return RequestContextHelper::findRecordFromRequestContextQuery(query, trvExpTable.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequisitionRecordFromQuery</Name>
				<Source><![CDATA[
    public static TrvRequisitionTable getRequisitionRecordFromQuery(str query)
    {
        TrvRequisitionTable trvRequisitionTable;

        return RequestContextHelper::findRecordFromRequestContextQuery(query, trvRequisitionTable.TableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClientURLQueryValue</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('The method TrvExpenseHelper.getClientURLQueryValue() has been eliminated, instead use Global::getClientURLQueryValue()', true, 30\9\2016)]
    public static str getClientURLQueryValue(str _queryParameter)
    {
        if (!hasGUI())
        {
            return '';
        }

        str value = '';
        Microsoft.Dynamics.@Client.ServerForm.Contexts.SessionContext serverContext = Microsoft.Dynamics.@Client.ServerForm.Contexts.SessionContext::Get_Current();
        System.Uri uri = serverContext.Get_RequestUrl();
        if (uri)
        {
            System.String url = Microsoft.Dynamics.AX.Framework.Utilities.UrlHelper.UrlUtility::GetUrl(uri);
            if (url)
            {
                System.Uri decodedUri = new System.Uri(url);
                System.String[] modeKeyValue = System.Web.HttpUtility::ParseQueryString(decodedUri.Query).GetValues(_queryParameter);

                if (modeKeyValue != null && modeKeyValue.Length >= 1)
                {
                    value = modeKeyValue.Get(0);
                }
            }
        }
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromApClerkContext</Name>
				<Source><![CDATA[
    public static boolean isCalledFromApClerkContext(Object caller)
    {
        boolean isCallerContextAPClerk = false;

        if (caller && caller is FormRun && caller.args() != null && caller.args().parmEnumType() != null && enumNum(TrvExpenseReportPageFilters) == caller.args().parmEnumType())
        {
            TrvExpenseReportPageFilters callerFilter = caller.args().parmEnum();

            isCallerContextAPClerk = TrvExpenseHelper::isCallerFilterForAPClerk(callerFilter);
        }

        return isCallerContextAPClerk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallerFilterForAPClerk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the caller filter is for AP clerk or not.
    /// </summary>
    /// <param name="_callerFilter">
    /// Expense report page filter.
    /// </param>
    /// <returns>
    /// True if the caller filter is for AP clerk; otherwise, false.
    /// </returns>
    public static boolean isCallerFilterForAPClerk(TrvExpenseReportPageFilters _callerFilter)
    {
        return (_callerFilter == TrvExpenseReportPageFilters::Approved || _callerFilter == TrvExpenseReportPageFilters::Active
            || _callerFilter == TrvExpenseReportPageFilters::InReview || _callerFilter == TrvExpenseReportPageFilters::AssignedToMe);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromApproversContext</Name>
				<Source><![CDATA[
    public static boolean isCalledFromApproversContext(Object caller, TrvExpTrans trvExpTrans)
    {
        return TrvExpenseHelper::isCalledFromAuditorsContext(caller)
            || TrvWorkflowUtilities::isCurUserExpenseApprover(TrvExpTable::findRecId(trvExpTrans.TrvExpTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromAuditorsContext</Name>
				<Source><![CDATA[
    public static boolean isCalledFromAuditorsContext(Object caller)
    {
        boolean isCallerContextAuditor = false;

        if (caller && caller is FormRun && caller.args() != null && caller.args().parmEnumType() != null && enumNum(TrvExpenseReportPageFilters) == caller.args().parmEnumType())
        {
            TrvExpenseReportPageFilters callerFilter = caller.args().parmEnum();

            if (callerFilter == TrvExpenseReportPageFilters::AssignedToMe || callerFilter == TrvExpenseReportPageFilters::AssignedToMyQueues)
            {
                isCallerContextAuditor = true;
            }
        }

        return isCallerContextAuditor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromMyExpenseReportsContext</Name>
				<Source><![CDATA[
    public static boolean isCalledFromMyExpenseReportsContext(Object caller)
    {
        boolean isCallerContextMyExpenseReports = false;

        if (caller && caller is FormRun && caller.args() != null && caller.args().parmEnumType() != null && enumNum(TrvExpenseReportPageFilters) == caller.args().parmEnumType())
        {
            TrvExpenseReportPageFilters callerFilter = caller.args().parmEnum();

            if (callerFilter == TrvExpenseReportPageFilters::AllMyExpenseReports)
            {
                isCallerContextMyExpenseReports = true;
            }
        }

        return isCallerContextMyExpenseReports;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCalledFromMyExpenseReportsContextAfterSubmit</Name>
				<Source><![CDATA[
    public static boolean isCalledFromMyExpenseReportsContextAfterSubmit(Object caller, TrvExpTable trvExpTable)
    {
        return  (TrvExpenseHelper::isCalledFromMyExpenseReportsContext(caller)
                && !(trvExpTable.ApprovalStatus == TrvAppStatus::Create || trvExpTable.ApprovalStatus == TrvAppStatus::Returned
                    || (trvExpTable.ApprovalStatus == TrvAppStatus::Approved && TrvParameters::find().AllowEditDistributions)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCreditCardTransactionExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate credit card transaction exchange rate.
    /// </summary>
    /// <param name="_expenseLine">
    /// Expense line record.
    /// </param>
    /// <returns>Credit card transaction exchange rate value.</returns>
    public static ExchRate calcCreditCardTransactionExchRate(TrvExpTrans _expenseLine)
    {
        ExchRate creditCardTransactionExchRate = 0;

        if (_expenseLine.CreditCardTransactionCurrencyAmount != 0)
        {
            creditCardTransactionExchRate = _expenseLine.ExchangeRate * (_expenseLine.AmountCurr/_expenseLine.CreditCardTransactionCurrencyAmount);
        }
        else
        {
            creditCardTransactionExchRate = _expenseLine.ExchangeRate;
        }

        return creditCardTransactionExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserPreferredTimeZoneDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a UTC date and time value to the users local time zone and returns the date only.
    /// </summary>
    /// <param name="_dateTimeUtc">
    /// UTC date and time to convert. Default value is utcNow().
    /// </param>
    /// <returns>
    /// Local time zone date only corresponding to the provided <c>dateTimeUtc</c>.
    /// </returns>
    /// <remarks>
    /// If you want both date and time components, use the <c>getUserPreferredTimeZoneDateTime</c> method instead.
    /// </remarks>
    public static date getUserPreferredTimeZoneDate(utcdatetime _dateTimeUtc = DateTimeUtil::utcNow())
    {
        return DateTimeUtil::date(TrvExpenseHelper::getUserPreferredTimeZoneDateTime(_dateTimeUtc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>advanceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Advances the date provided by a specified number of days, weeks, or months
    /// </summary>
    /// <param name="_date">
    /// The date to convert
    /// </param>
    /// <param name="_trvDatePeriod">
    /// The units of the date period to advance
    /// </param>
    /// <param name="_numOf">
    /// The number of units to advance the date by
    /// </param>
    /// <returns>
    /// The date after being advanced the specified number of days, weeks, or months
    /// </returns>
    public static date advanceDate(date _date, TrvDatePeriod _trvDatePeriod, int _numOf)
    {
        date advancedDate;

        switch (_trvDatePeriod)
        {
            case TrvDatePeriod::Days :
                advancedDate = _date + _numOf;
                break;
            case TrvDatePeriod::Weeks :
                advancedDate = _date + (_numOf * 7);
                break;
            case TrvDatePeriod::Months :
                utcdatetime tempDateTime = DateTimeUtil::newDateTime(_date, 0);
                tempDateTime = DateTimeUtil::addMonths(tempDateTime, _numOf);
                advancedDate = DateTimeUtil::date(tempDateTime);
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return advancedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserPreferredTimeZoneDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a UTC datetime value to the local time zone of the user.
    /// </summary>
    /// <param name="_dateTimeUtc">
    /// The UTC datetime value to convert. Default value is utcNow().
    /// </param>
    /// <returns>
    /// The converted datetime value.
    /// </returns>
    /// <remarks>
    /// If you only want to convert date component, use the <c>getUserPreferredTimeZoneDate</c> method
    /// instead.
    /// </remarks>
    public static utcdatetime getUserPreferredTimeZoneDateTime(utcdatetime _dateTimeUtc = DateTimeUtil::utcNow())
    {
        return DateTimeUtil::applyTimeZoneOffset(_dateTimeUtc, DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountWithCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount together with the currency code.
    /// </summary>
    /// <param name="_amountMST">
    /// The amount to be returned.
    /// </param>
    /// <param name="_legalEntity">
    /// The legal entity of the currency to be returned.
    /// </param>
    /// <returns>
    /// The amount together with the currency code.
    /// </returns>
    public static TrvAmountCurrency amountWithCurrencyCode(AmountMST _amountMST, LegalEntity _legalEntity)
    {
        SysDictType t = new SysDictType(extendedTypeNum(AmountMST));
        return strFmt("%1 %2", strFmtByLanguage(new Session().PreferredLocale(), "{0:N" + int2Str(t.effectivePrecision()) + "}", _amountMST), Ledger::accountingCurrency(_legalEntity));
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountWithTransactionCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount together with the transaction currency code.
    /// </summary>
    /// <param name="_amountCurr">
    /// The transaction amount.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <returns>
    /// The amount together with the transaction currency code.
    /// </returns>
    public static TrvAmountCurrency amountWithTransactionCurrencyCode(AmountCur _amountCurr, CurrencyCode _currencyCode)
    {
        SysDictType t = new SysDictType(extendedTypeNum(AmountCur));
        return strFmt("%1 %2", strFmtByLanguage(new Session().PreferredLocale(), "{0:N" + int2Str(t.effectivePrecision()) + "}", _amountCurr), _currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountCur2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string representation of an amount using the number of decimal digits defined
    /// for the implementation.
    /// </summary>
    /// <param name="_amountCurr">
    /// The transaction amount.
    /// </param>
    /// <returns>
    /// The formatted amount as a string.
    /// </returns>
    public static TrvAmountCurrency amountCur2Str(AmountCur _amountCurr)
    {
        SysDictType t = new SysDictType(extendedTypeNum(AmountCur));
        return strFmt("%1", strFmtByLanguage(new Session().PreferredLocale(), "{0:N" + int2Str(t.effectivePrecision()) + "}", _amountCurr));
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a string representation of an amount using the number of decimal digits defined
    /// for the implementation.
    /// </summary>
    /// <param name="_amountMST">
    /// The amount in company currency.
    /// </param>
    /// <returns>
    /// The formatted amount as a string.
    /// </returns>
    public static TrvAmountCurrency amountMST2Str(AmountMST _amountMST)
    {
        SysDictType t = new SysDictType(extendedTypeNum(AmountMST));
        return strFmt("%1", strFmtByLanguage(new Session().PreferredLocale(), "{0:N" + int2Str(t.effectivePrecision()) + "}", _amountMST));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineRecordFromContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the correct line record from the context query
    /// for the line level workflow which uses the header table but line level values
    /// </summary>
    /// <param name="_query">
    /// Context query in string format.
    /// </param>
    /// <returns>TrvExpTrans buffer</returns>
    public static TrvExpTrans getLineRecordFromContext(str _query)
    {
        TrvExpTrans  trvExpTransWFContext;

        UrlGenerator generator = new UrlGenerator();
        generator.ParseRequestQueryParameter(_query);

        var requestQueryParameterCollection = generator.RequestQueryParameterCollection;

        if (requestQueryParameterCollection.GetParameterCount() > 0)
        {
            str field, value;

            //Iterate through the parameter collection till there is match
            while (requestQueryParameterCollection.MoveNext())
            {
                var requestQueryParameter = requestQueryParameterCollection.Current();

                if (requestQueryParameter.DataSource == tableStr(TrvExpTable) &&
                        requestQueryParameter.GetFieldValueCount() > 0)
                {
                    for (int i = 0; i < requestQueryParameter.GetFieldValueCount(); i++)
                    {
                        field = requestQueryParameter.getField(i);
                        value = requestQueryParameter.getValue(i);

                        // When coming from the line level workflow, the filter can contain a RecId that it thinks is from the TrvExpTable,
                        // but in reality is from the TrvExpTrans table and needs to be resolved against its actual header record.
                        if (field == fieldId2Name(tableNum(TrvExpTable), fieldNum(TrvExpTable, RecId)))
                        {
                            trvExpTransWFContext = TrvExpTrans::find(str2Int64(value));
                            if(trvExpTransWFContext.TrvExpTable)
                                return trvExpTransWFContext;
                        }
                    }
                }

            }
        }
        return trvExpTransWFContext;

    }

]]></Source>
			</Method>
			<Method>
				<Name>expTransFieldVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the visibility setting of a TrvExpTrans field cached from the TrvAdminCustonFields table.
    /// </summary>
    /// <param name = "fieldId">The ID of the field whose visibility setting we want</param>
    /// <returns>The visibility setting of the field</returns>
    public static TrvFieldVisibility expTransFieldVisibility(FieldId fieldId)
    {
        Map visibilityMap = TrvExpenseHelper::getFieldVisibilityMap();
        return visibilityMap.lookup(fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldVisibilityMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a map of field visibilities keyed by field ID. The map is cached so that it only
    /// becomes populated once during the life of the TrvExpenses form.
    /// </summary>
    /// <returns>Map of field visibility settings keyed by field ID</returns>
    public static Map getFieldVisibilityMap()
    {
        if (expTransFieldVisibilityMap == null)
        {
            expTransFieldVisibilityMap = new Map(Types::Integer, Types::Integer);

            DictTable dictTable = new DictTable(tableNum(TrvExpTrans));
            TableId tableId = tableNum(TrvExpTrans);
            FieldId fieldId;

            for (int i = 1; i <= dictTable.fieldCnt(); i++)
            {
                fieldId = dictTable.fieldCnt2Id(i);
                expTransFieldVisibilityMap.insert(fieldId, TrvAdminCustomFields::find(tableId, fieldId).Visibility);
            }
        }

        return expTransFieldVisibilityMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewExpTransNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new value for ExpTransNumber field from the number sequence framework
    /// </summary>
    public static TrvExpTransNumber getNewExpTransNumber()
    {
        TrvExpTransNumber transId;

        NumberSequenceReference numberSequenceReference = NumberSeqReference::findReference(extendedTypeNum(TrvExpTransNumber));
        NumberSequenceTable numberSequenceTable = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId);

        if (numberSequenceReference && numberSequenceTable)
        {
            if (!numberSequenceTable.Manual)
            {
                // generate id number if number sequence is not set to Manual.
                _numberSeq = NumberSeq::newGetNumFromId(numberSequenceTable.RecId,
                                                                   true,
                                                                   true,
                                                                   null,
                                                                   false);

                if (_numberSeq)
                {
                    transId = _numberSeq.num();
                    _numberSeq.used();
                }
            }
        }

        return transId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentCompanyDifferentThanExpenseCompany</Name>
				<Source><![CDATA[
    public static container isCurrentCompanyDifferentThanExpenseCompany(RecId trvExpenseTableRecId)
    {
        TrvExpTable trvExpTable;
        select ReferenceDataAreaId from trvExpTable where trvExpTable.RecId == trvExpenseTableRecId;

        boolean currentCompanyDifferentThanExpenseCompany = false;
        if(strLwr(trvExpTable.ReferenceDataAreaId) != strLwr(CompanyInfo::findDataArea(curext()).DataArea))
        {
            currentCompanyDifferentThanExpenseCompany = true;
        }

        return [currentCompanyDifferentThanExpenseCompany, trvExpTable.ReferenceDataAreaId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExpenseMobileNotification</Name>
				<Source><![CDATA[
    private static void insertExpenseMobileNotification(TrvExpMobileNotificationEventType _eventType, Common _referenceRecord, HcmWorkerRecId _originWorker, HcmWorkerRecId _notifiedWorker=0, UserId _notifiedUser='')
    {
        TrvExpMobileNotification trvExpMobileNotification;
        trvExpMobileNotification.EventType = _eventType;
        trvExpMobileNotification.OriginWorker = _originWorker;
        trvExpMobileNotification.NotifiedWorker = _notifiedWorker;
        trvExpMobileNotification.NotifiedUser = _notifiedUser;

        if(_referenceRecord.TableId == tableNum(TrvExpTable))
        {
            TrvExpTable trvExpTable = _referenceRecord as TrvExpTable;
            trvExpMobileNotification.AmountCurr = trvExpTable.totalApprovalAmount();
            trvExpMobileNotification.ExchangeCode = Ledger::accountingCurrency();
            trvExpMobileNotification.ExpNumber = trvExpTable.ExpNumber;
            trvExpMobileNotification.ReferenceDataAreaId = trvExpTable.ReferenceDataAreaId;
            trvExpMobileNotification.HeaderTxt2 = trvExpTable.Txt2;
            trvExpMobileNotification.DocumentType = TrvDocumentType::ExpenseReport;
            trvExpMobileNotification.NotificationType = TrvExpMobileNotificationType::Reports;
        }
        else if (_referenceRecord.TableId == tableNum(TrvExpTrans))
        {
            TrvExpTrans trvExpTrans = _referenceRecord as TrvExpTrans;
            trvExpMobileNotification.AmountCurr = trvExpTrans.AmountCurr;
            trvExpMobileNotification.ExchangeCode = trvExpTrans.ExchangeCode;
            trvExpMobileNotification.ExpTransNumber = trvExpTrans.ExpTransNumber;
            trvExpMobileNotification.ReferenceDataAreaId = trvExpTrans.ReferenceDataAreaId;
            trvExpMobileNotification.MerchantId = trvExpTrans.MerchantId;
            trvExpMobileNotification.DocumentType = TrvDocumentType::ExpenseLine;
            trvExpMobileNotification.NotificationType = TrvExpMobileNotificationType::Expenses;
        }
        else
        {
            return;
        }

        
        if(_eventType == TrvExpMobileNotificationEventType::WorkItemAssigned )
        {
            trvExpMobileNotification.NotificationType = TrvExpMobileNotificationType::Approvals;
        }

        ttsbegin;
        trvExpMobileNotification.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateExpMobileNotification</Name>
				<Source><![CDATA[
    public static void generateExpMobileNotification(TrvExpMobileNotificationEventType _eventType, Common _referenceRecord, UserId _notifiedUser='')
    {
        if(_referenceRecord.TableId != tableNum(TrvExpTable) && _referenceRecord.TableId != tableNum(TrvExpTrans))
        {
            return;
        }

        int creatingWorkerField = fieldName2Id(_referenceRecord.TableId, "CreatingWorker");

        switch(_eventType)
        {
            case TrvExpMobileNotificationEventType::CCTransImport:
            case TrvExpMobileNotificationEventType::WorkItemApproved:
            case TrvExpMobileNotificationEventType::WorkItemRejected:
                TrvExpenseHelper::insertExpenseMobileNotification( _eventType, _referenceRecord, HcmWorkerLookup::currentWorker(), _referenceRecord.(creatingWorkerField));
                break;
            case TrvExpMobileNotificationEventType::WorkItemAssigned:
            case TrvExpMobileNotificationEventType::WorkItemReturned:
                TrvExpenseHelper::insertExpenseMobileNotification( _eventType, _referenceRecord, _referenceRecord.(creatingWorkerField), 0, _notifiedUser);
                break;
            case TrvExpMobileNotificationEventType::WorkflowCompleted:
                TrvExpenseHelper::insertExpenseMobileNotification( _eventType, _referenceRecord, 0,  _referenceRecord.(creatingWorkerField));
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastGeneratedNumberSeq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the previous NumberSeq object genertated. Used primarily in verification testing.
    /// </summary>
    /// <returns>The last NumberSeq object generated </returns>
    public static NumberSeq getLastGeneratedNumberSeq()
    {
        return _numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvDistributionReadOnlyForPostedExpFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the flighting for <c>TrvDistributionReadOnlyForPostedExpFlight</c> enabled.
    /// </summary>
    /// <returns>True, if flighting enabled; Otherwise, false.</returns>
    public static boolean isTrvDistributionReadOnlyForPostedExpFlightEnabled()
    {
        return TrvDistributionReadOnlyForPostedExpFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvCCTransSalesPriceCorrectionEnabled</Name>
				<Source><![CDATA[
    public static boolean isTrvCCTransSalesPriceCorrectionEnabled()
    {
        return !TrvCCTransSalesPriceCorrectionDisabledFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSyncCallToSourceDocumentFlightEnabled</Name>
				<Source><![CDATA[
    public static boolean isSyncCallToSourceDocumentFlightEnabled()
    {
        return TrvExpenseSDAFSyncCallFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAccountingEventValidatorFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to verify accounting event before posting.
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isAccountingEventValidatorFlightEnabled()
    {
        return TrvAccountingEventValidatorFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvPerdiemsFullDayHourFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to consider tiers for 24 hour calculation.
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvPerdiemsFullDayHourFlightEnabled()
    {
        return TrvPerdiemsFullDayHourFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvOverlappingPerdiemsForSameLocationFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to allow/disallow overlapping perdiems for same location.
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvOverlappingPerdiemsForSameLocationFlightEnabled()
    {
        return TrvOverlappingPerdiemsForSameLocationFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvExpenseDisableCtrlUpCtrlDownShortCutsFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvExpenseDisableCtrlUpCtrlDownShortCutsFlightEnabled()
    {
        return TrvExpenseDisableCtrlUpCtrlDownShortCutsFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvApplyCashAdvanceMappingFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to bring into affect the new design changes for Cash Advance.
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvApplyCashAdvanceMappingFlightEnabled()
    {
        return TrvApplyCashAdvanceMappingFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCreditCardImportLocalTransactionCurrencyFlightEnabled</Name>
				<Source><![CDATA[
    public static boolean isCreditCardImportLocalTransactionCurrencyFlightEnabled()
    {
        return TrvCreditCardImportLocalTransactionCurrencyFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isClearTaxOnZeroTaxFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isClearTaxOnZeroTaxFlightEnabled()
    {
        return TrvNoTaxIfTaxAmtZeroFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompanyTaxTransEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isIntercompanyTaxTransEnabled()
    {
        return TrvIntercompanyTaxTransFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvExpTransValidateDeleteFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvExpTransValidateDeleteFlightEnabled()
    {
        return TrvExpTransValidateDeleteFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvExpTransMergeExpenseWithTaxFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvExpTransMergeExpenseWithTaxFlightEnabled()
    {
        return TrvExpTransMergeExpenseWithTaxFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvExpenseAllowDelegatesResubmitButtonFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvExpenseAllowDelegatesResubmitButtonFlightEnabled()
    {
        return TrvExpenseAllowDelegatesResubmitButtonFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvRebalanceMileageCashAdavanceOnPostingFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvRebalanceMileageCashAdavanceOnPostingFlightEnabled()
    {
        return TrvRebalanceMileageCashAdavanceOnPostingFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvCashAdvanceForItemizedLineCorrectionFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvCashAdvanceForItemizedLineCorrectionFlightEnabled()
    {
        return TrvCashAdvanceForItemizedLineCorrectionFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvExpMileageCalculationRevisedFlightEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static boolean isTrvExpMileageCalculationRevisedFlightEnabled()
    {
        return TrvExpMileageCalculationRevisedFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvStopDefaultingLEAndProjectOnExpenseAttachFlightEnabled</Name>
				<Source><![CDATA[
    public static boolean isTrvStopDefaultingLEAndProjectOnExpenseAttachFlightEnabled()
    {
        return TrvStopDefaultingLEAndProjectOnExpenseAttachFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvExpBlockApproverViewRecalledExpensesFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to block approver from viewing any recalled expenses.
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvExpBlockApproverViewRecalledExpensesFlightEnabled()
    {
        return TrvExpBlockApproverViewRecalledExpensesFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvResetDistributionForAutoPostingFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to reset distribution for auto posting workflow.
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvResetDistributionForAutoPostingFlightEnabled()
    {
        return TrvResetDistributionForAutoPostingFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvPassengerRateTypeCalculationCorrectionFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to calcualte the total miles when only passenger rate type
    /// is left with standard mileage rate. Ensures that correct value of passenger rate type is 
    /// picked up for evaluation
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvPassengerRateTypeCalculationCorrectionFlightEnabled()
    {
        return TrvPassengerRateTypeCalculationCorrectionFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvIntegrationExchangeCodeCorrectionFlightEnabled</Name>
				<Source><![CDATA[
    public static boolean isTrvIntegrationExchangeCodeCorrectionFlightEnabled()
    {
        return TrvIntegrationExchangeCodeCorrectionFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrvMobileSecurityRoleAOTNameFlightEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the flight is enabled to query AOT Name
    /// </summary>
    /// <returns>True, if the flight is enabled; Otherwise, false.</returns>
    public static boolean isTrvMobileSecurityRoleAOTNameFlightEnabled()
    {
        return TrvMobileSecurityRoleAOTNameFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>