<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInventReserveQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventReserveQueryBuilder</c> class is used to build a<c>Query</c> for selecting quantities and dimensions for reservation from the <c>WHSInventReserve</c> table.
/// </summary>
class whsInventReserveQueryBuilder extends WHSInventReservationQueryBuilder
{
    boolean excludeSumWithDeltaRecords;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRangesToInventReserveQBDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds ranges to the query build data source.
    /// </summary>
    /// <param name="_qbdsWHSInventReserve">
    /// The query build data source.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The query must either include Ordered or include Physical avail items.
    /// </exception>
    protected void addRangesToInventReserveQBDS(QueryBuildDataSource _qbdsWHSInventReserve)
    {
        str     availRange;

        if (itemId)
        {
            _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve,ItemId)).value(queryValue(itemId));
        }

        // Min avail is either specified by parameters or greater than zero if unspecified.
        availRange = this.getAvailRange();

        if (includeOrdered)
        {
            if (includePhysical)
            {
                //the availOrdered includes the contribution from availphysical so we don't need to check both fields
                if (this.parmIsCWItem())
                {
                    _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, CWAvailOrdered)).value(availRange);
                }
                else
                {
                    _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, AvailOrdered)).value(availRange);
                }
            }
            else
            {
                // If we are not including physical avail then we can filter out all records where availOrdered isn't greater than availPhysical.
                // AvailOrdered bucket includes availPhysical
                if (this.parmIsCWItem())
                {
                    _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, CWAvailOrdered)).value(strFmt('(%1.%2 > %1.%3)',
                                                                                                          _qbdsWHSInventReserve.name(),
                                                                                                          fieldStr(WHSInventReserve, CWAvailOrdered),
                                                                                                          fieldStr(WHSInventReserve, CWAvailPhysical)));
                }
                else
                {
                    _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, AvailOrdered)).value(strFmt('(%1.%2 > %1.%3)',
                                                                                                          _qbdsWHSInventReserve.name(),
                                                                                                          fieldStr(WHSInventReserve, AvailOrdered),
                                                                                                          fieldStr(WHSInventReserve, AvailPhysical)));
                }
            }
        }
        else if (includePhysical)
        {
            if (this.parmIsCWItem())
            {
                _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, CWAvailPhysical)).value(availRange);
            }
            else
            {
                _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, AvailPhysical)).value(availRange);
            }
        }
        else
        {
            // The query must either include Ordered or include Physical avail
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (reservationHierarchyLevel >= 0)
        {
            _qbdsWHSInventReserve.addRange(fieldNum(WHSInventReserve, HierarchyLevel)).value(queryValue(reservationHierarchyLevel));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWHSInventReserveDeltaDSNotExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds and returns a datasource for the <c>WHSInventReserveDelta</c> table.
    /// </summary>
    /// <param name="_qbdsWHSInventReserve">
    /// A datasource which should be for the <c>WHSInventReserve</c> table.
    /// </param>
    /// <returns>
    /// A datasource for the <c>WHSInventReserveDelta</c> table
    /// </returns>
    protected QueryBuildDataSource addWHSInventReserveDeltaDSNotExist(QueryBuildDataSource _qbdsWHSInventReserve)
    {
        QueryBuildDataSource    qbdsWHSInventReserveDelta;

        qbdsWHSInventReserveDelta = _qbdsWHSInventReserve.addDataSource(tableNum(WHSInventReserveDelta));
        qbdsWHSInventReserveDelta.joinMode(JoinMode::NoExistsJoin);

        qbdsWHSInventReserveDelta.addLink(fieldNum(WHSInventReserve, ItemId),fieldNum(WHSInventReserveDelta, ItemId),_qbdsWHSInventReserve.name());
        qbdsWHSInventReserveDelta.addLink(fieldNum(WHSInventReserve, InventDimId),fieldNum(WHSInventReserveDelta, InventDimId),_qbdsWHSInventReserve.name());

        qbdsWHSInventReserveDelta.addRange(fieldNum(WHSInventReserveDelta,ItemId)).value(queryValue(itemId));
        qbdsWHSInventReserveDelta.addRange(fieldNum(WHSInventReserveDelta,HierarchyLevel)).value(queryValue(reservationHierarchyLevel));
        qbdsWHSInventReserveDelta.addRange(fieldNum(WHSInventReserveDelta,ttsId)).value(queryValue(ttsId)); //included to hit index

        return qbdsWHSInventReserveDelta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWHSInventReserveDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds and returns a datasoruce for the <c>WHSInventReserve</c> table.
    /// </summary>
    /// <returns>
    /// A datasoruce for the <c>WHSInventReserve</c> table.
    /// </returns>
    protected QueryBuildDataSource addWHSInventReserveDS()
    {
        QueryBuildDataSource    qbdsWHSInventReserve;

        if (!query)
        {
            this.initQuery();
        }

        qbdsWHSInventReserve = query.addDataSource(tableNum(WHSInventReserve));

        this.addRangesToInventReserveQBDS(qbdsWHSInventReserve);

        return qbdsWHSInventReserve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandQuery</Name>
				<Source><![CDATA[
    public Query buildOnHandQuery()
    {
        QueryBuildDataSource qbdsWHSInventReserve;

        this.initQuery();

        qbdsWHSInventReserve = this.addWHSInventReserveDS();
        this.addInventDimDS(qbdsWHSInventReserve);
        if (this.parmExcludeSumWithDeltaRecords())
        {
            this.addWHSInventReserveDeltaDSNotExist(qbdsWHSInventReserve);
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeSumWithDeltaRecords</Name>
				<Source><![CDATA[
    public boolean parmExcludeSumWithDeltaRecords(boolean _excludeSumWithDeltaRecords = excludeSumWithDeltaRecords)
    {
        excludeSumWithDeltaRecords = _excludeSumWithDeltaRecords;

        return excludeSumWithDeltaRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tableId of the <c>WHSInventReserve</c> table.
    /// </summary>
    /// <returns>
    /// The tableId of the <c>WHSInventReserve</c> table.
    /// </returns>
    public TableId sumTableId()
    {
        return tableNum(WHSInventReserve);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSInventReserveQueryBuilder construct()
    {
        return new WHSInventReserveQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExcludeSumWithDeltaRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of this class based on the arguments.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_ttsId">
    /// The current transaction id.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating if available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating if available physical should be included.
    /// </param>
    /// <param name="_sortByBatch">
    /// Determines if the query should be sorted by batch.
    /// </param>
    /// <param name="_onlyReserveOnWHSEnabledWarehouses">
    /// Determines whether to allow reservation on non-WHS enabled warehouses.
    /// </param>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    /// <remarks>
    /// Only <c>WHSInventReserve</c> records without any corresponding <c>WHSInventReserveDelta</c> records are selected.
    /// </remarks>
    public static WHSInventReserveQueryBuilder newExcludeSumWithDeltaRecords(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        CreatedTransactionId            _ttsId,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        boolean                         _sortByBatch,
        boolean                         _onlyReserveOnWHSEnabledWarehouses = false)
    {
        WHSInventReserveQueryBuilder whsInventReserveQueryBuilder;

        whsInventReserveQueryBuilder = WHSInventReserveQueryBuilder::newFromParameters(_itemId,_inventDimCriteria,_inventDimParmCriteria,_reservationHierarchyLevel,_includeOrdered, _includePhysical, _sortByBatch);
        whsInventReserveQueryBuilder.parmTtsId(_ttsId);
        whsInventReserveQueryBuilder.parmExcludeSumWithDeltaRecords(true);
        whsInventReserveQueryBuilder.parmOnlyReserveOnWHSEnabledWarehouses(_onlyReserveOnWHSEnabledWarehouses);

        return whsInventReserveQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of this class based on the arguments.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating if available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating if available physical should be included.
    /// </param>
    /// <param name="_sortByBatch">
    /// Determines if the query should be sorted by batch.
    /// </param>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    public static WHSInventReserveQueryBuilder newFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        boolean                         _sortByBatch
        )
    {
        WHSInventReserveQueryBuilder whsInventReserveQueryBuilder = WHSInventReserveQueryBuilder::construct();

        whsInventReserveQueryBuilder.initializeFromParameters(
            _itemId,
            _inventDimCriteria,
            _inventDimParmCriteria,
            _reservationHierarchyLevel,
            _includeOrdered,
            _includePhysical);

        whsInventReserveQueryBuilder.parmExcludeSumWithDeltaRecords(false);
        whsInventReserveQueryBuilder.parmSortByBatch(_sortByBatch);

        return whsInventReserveQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current class instance from parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating whether available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating whether available physical should be included.
    /// </param>
    protected void initializeFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        boolean                         _includeOrdered,
        boolean                         _includePhysical)
    {
        this.parmItemId(_itemId);
        this.parmInventDimCriteria(_inventDimCriteria);
        this.parmInventDimParmCriteria(_inventDimParmCriteria);
        this.parmReservationHierarchyLevel(_reservationHierarchyLevel);
        this.parmIncludeOrdered(_includeOrdered);
        this.parmIncludePhysical(_includePhysical);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>