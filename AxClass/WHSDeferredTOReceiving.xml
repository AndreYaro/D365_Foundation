<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDeferredTOReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSDeferredTOReceiving extends WHSDeferredReceiving
{
    #WHSRF

    private InventTransferLine transferLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    internal static WHSDeferredTOReceiving newFromParameters(
        WHSRFPassthrough _pass,
        InventTransferLine _transferLine,
        WHSRFMenuItemTable _menuItemTable,
        WHSDefaultContainerTypeCode _defaultContainerCode)
    {
        WHSDeferredTOReceiving deferredReceiving = new WHSDeferredTOReceiving();

        deferredReceiving.initFromParameters(_pass, _menuItemTable, _defaultContainerCode);
        
        deferredReceiving.parmTransferLine(_transferLine);

        return deferredReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected internal void initFromParameters(WHSRFPassthrough _pass, WHSRFMenuItemTable _menuItemTable, WHSDefaultContainerTypeCode _defaultContainerCode)
    {
        super(_pass, _menuItemTable, _defaultContainerCode);

        this.parmLoadId(_pass.parmLoadId());
        this.parmShipmentId(_pass.lookupStr(#ShipmentId));
        this.parmCurrentUOM(_pass.parmCurrentUOM());
        this.parmCurrentQty(_pass.parmCurrentQty());

        if (WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
        {
            this.parmDispositionCode(_pass.parmDispositionCode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static WHSDeferredTOReceiving construct()
    {
        return new WHSDeferredTOReceiving();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferLine</Name>
				<Source><![CDATA[
    internal InventTransferLine parmTransferLine(InventTransferLine _transferLine = transferLine)
    {
        transferLine = _transferLine;
        return transferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDeferBasedOnPolicy</Name>
				<Source><![CDATA[
    internal boolean shouldDeferBasedOnPolicy()
    {
        WHSDeferredReceivingPolicy deferPolicy = WHSDeferredReceivingPolicy::find(deferredReceivingPolicyId);

        if (!deferPolicy || deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::Never)
        {
            return false;
        }

        if (deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::PerSelection && deferPolicy.OnSerialTrackedItems == NoYes::No)
        {
            return false;
        }

        if (deferPolicy.DeferredReceivingPolicySelection == WHSDeferredReceivingPolicySelectionEnum::PerSelection
            && !InventTable::find(transferLine.ItemId).isItemSerialNumberActivated())
        {
            return false;
        }

        // Deferred receiving is not supported for catch weight tag tracked items
        if (WHSInventTable::isCatchWeightTagTracked(transferLine.ItemId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToDeferTransferOrder</Name>
				<Source><![CDATA[
    internal boolean tryToDeferTransferOrder()
    {
        if (!this.shouldDeferBasedOnPolicy())
        {
            return false;
        }

        if (WHSReceiptDetails::existByReceiptIdLicensePlate(receiptId, licensePlateId))
        {
            WHSReceiptDetails   receiptDetails;
            InventDim           receiptDetailsInventDim;

            while select receiptDetails
                where receiptDetails.ReceiptId == receiptId
                join receiptDetailsInventDim
                    where receiptDetailsInventDim.InventDimId     == receiptDetails.InventDimId
                    &&    receiptDetailsInventDim.LicensePlateId  == licensePlateId
            {
                this.createMixedLPData(receiptDetails.InventDimId, receiptDetails.InventQty);
            }
        }
        else
        {
            this.createMixedLPData(this.createInventDimFromPass(), WHSCatchWeightHelper::convertInventQuantity(transferLine.ItemId, currentUOM, currentQty, transferLine.InventDimId));
        }

        if (this.parmDispositionCode() && WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
        {
            WHSMixedLicensePlateReceipt receipt = WHSMixedLicensePlateReceipt::find(receiptId, true);
            if (receipt && receipt.DispositionCode != this.parmDispositionCode())
            {
                receipt.DispositionCode = this.parmDispositionCode();
                receipt.update();
            }
        }

        if (WHSDeferredReceivingBatchTaskBundleCreationContext::isInContext() && WHSDeferredReceivingBatchTaskBundleCreationFlight::instance().isEnabled())
        {
            WHSDeferredReceivingBatchTaskBundleCreationContext::getContext().addReceiptIdToProcess(receiptId);
        }
        else
        {
            WHSDeferredReceiving::createBatchTaskToProcessDeferredReceiving(WHSMixedLicensePlateReceipt::find(receiptId, true));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMixedLPData</Name>
				<Source><![CDATA[
    private void createMixedLPData(InventDimId _inventDimId, InventQty _qty)
    {
        ttsbegin;
        // This is intentional. The work creation from Mixed LP will calculate the average. The normal TOReceiving flow also sends 0
        InventQty capturedWeight = 0;

        this.validateShippedQty(_qty);
        this.validateQtyForInventDim(_inventDimId, _qty);

        WHSMixedLicensePlateReceiptLine::mixedLPReceiveLineForDeferredReceiving(_inventDimId,
                                            transferLine.InventTransId,
                                            _qty,
                                            capturedWeight,
                                            receiptId,
                                            userId,
                                            menuItemName,
                                            loadId,
                                            shipmentId,
                                            containerTypeCode,
                                            WHSWorkTransType::TransferReceipt,
                                            transferLine.ItemId);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateShippedQty</Name>
				<Source><![CDATA[
    private void validateShippedQty(InventQty _qty)
    {
        InventHandlingQty qtyShipped = PdsGlobal::pdsIsCWItem(transferLine.ItemId) ?
            transferLine.PdsCWQtyShipped : transferLine.QtyShipped;

        if (_qty > qtyShipped)
        {
            throw error("@WAX1172");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQtyForInventDim</Name>
				<Source><![CDATA[
    private void validateQtyForInventDim(InventDimId _inventDimId, InventQty _qty)
    {
        InventTrans inventTrans;

        InventDim     inventDimCriteria = InventDim::find(_inventDimId);
        // If LP is not empty, License Plate receiving will be forced. This flow only concerns itself with orders that were shipped without LP
        inventDimCriteria.LicensePlateId = '';
        inventDimCriteria = InventDim::findOrCreate(inventDimCriteria);

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDimCriteria);

        // We do not care about storage dimensions, as we are validating quanitites
        inventDimParm.WMSLocationIdFlag = NoYes::No;
        inventDimParm.InventLocationIdFlag = NoYes::No;
        inventDimParm.InventSiteIdFlag = NoYes::No;

        InventDim         inventDim;
        InventTransOrigin inventTransOrigin;

        // Checking what is reserved in the transit warehouse
        select sum(Qty), sum(PdsCWQty) from inventTrans
            where inventTrans.StatusReceipt == StatusReceipt::None
            &&    inventTrans.StatusIssue == StatusIssue::ReservPhysical
            join  InventTransId, RecId from inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                &&    inventTransOrigin.InventTransId == transferLine.InventTransIdTransitFrom
            #InventDimExistsJoin(inventTrans.InventDimId, inventDim, inventDimCriteria, inventDimParm);

        InventHandlingQty qtyRemainReceive = abs(PdsGlobal::pdsIsCWItem(transferLine.ItemId) ?
                                    inventTrans.PdsCWQty : inventTrans.Qty);


        qtyRemainReceive -= WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransIdAndInventDim(transferLine.InventTransId, _inventDimId);

        if (_qty > qtyRemainReceive)
        {
            throw error("@WAX1172");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimFromPass</Name>
				<Source><![CDATA[
    private InventDimId createInventDimFromPass()
    {
        if (!passthroughInventDim.InventStatusId)
        {
            passthroughInventDim.InventStatusId = transferLine.inventDim().InventStatusId;
        }
        passthroughInventDim.wMSLocationId = InventLocation::find(passthroughInventDim.InventLocationId).wmsLocationIdDefaultReceipt;
        passthroughInventDim = InventDim::findOrCreate(passthroughInventDim);

        return passthroughInventDim.inventDimId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>