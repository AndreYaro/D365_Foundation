<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardTransferJobButtonManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardTransferJobButtonManager</c> class is a helper class that manages the action pane
///    buttons of the <c>KanbanBoardTransferJob</c> form.
/// </summary>
public class KanbanBoardTransferJobButtonManager implements ButtonStateProvider
{
    KanbanBoardTransferJobList kanbanBoardTransferJobList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCancel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the kanban can be canceled.
    /// </summary>
    /// <returns>
    ///    true if the kanban can be canceled; otherwise, false.
    /// </returns>
    public boolean checkCancel()
    {
        return kanbanBoardTransferJobList.checkCancelEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the selected kanban transfer job can be completed.
    /// </summary>
    /// <returns>
    /// true if the transfer job can be completed; otherwise, false.
    /// </returns>
    public boolean checkCompleteTransfer()
    {
        return kanbanBoardTransferJobList.checkCompleteTransferEnabled()
            && kanbanBoardTransferJobList.checkNoPendingPeggedJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the pegged kanbans can be created.
    /// </summary>
    /// <returns>
    /// true if the pegged kanbans can be created; otherwise, false.
    /// </returns>
    public boolean checkCreateKanbans()
    {
        return kanbanBoardTransferJobList.checkStartTransferEnabled()
            && kanbanBoardTransferJobList.checkNoPendingPeggedJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionDisplayPickAndEventList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the dimensions for the picking and kanban event list can be set.
    /// </summary>
    /// <returns>
    /// true if the dimensions for the picking and kanban event list can be set; otherwise, false.
    /// </returns>
    public boolean checkDimensionDisplayPickAndEventList()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionDisplayTransferJobList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the dimensions for the job list can be set.
    /// </summary>
    /// <returns>
    /// true if the dimensions for the job list can be set; otherwise, false.
    /// </returns>
    public boolean checkDimensionDisplayTransferJobList()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJobListParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the job list parameters can be set.
    /// </summary>
    /// <returns>
    /// true if the job list parameters can be set; otherwise, false.
    /// </returns>
    public boolean checkJobListParameters()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintBillOfLading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the bill of lading can be printed.
    /// </summary>
    /// <returns>
    /// true if the bill of lading can be printed; otherwise, false.
    /// </returns>
    public boolean checkPrintBillOfLading()
    {
        return kanbanBoardTransferJobList.checkSelectedJobWithShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintKanbanCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban card can be printed.
    /// </summary>
    /// <returns>
    /// true if the kanban card can be printed; otherwise, false.
    /// </returns>
    public boolean checkPrintKanbanCard()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban job picking list can be printed.
    /// </summary>
    /// <returns>
    /// true if the kanban job picking list can be printed; otherwise, false.
    /// </returns>
    public boolean checkPrintPickingList()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintShippingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the shipping list can be printed.
    /// </summary>
    /// <returns>
    /// true if the shipping list can be printed; otherwise, false.
    /// </returns>
    public boolean checkPrintShippingList()
    {
        return kanbanBoardTransferJobList.checkSelectedJobWithShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrioritize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban job can be prioritized.
    /// </summary>
    /// <returns>
    /// true if the kanban job can be prioritized; otherwise, false.
    /// </returns>
    public boolean checkPrioritize()
    {
        return kanbanBoardTransferJobList.checkPrioritizeEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRefreshCycle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the refresh cycle can be set.
    /// </summary>
    /// <returns>
    /// true if the refresh cycle can be set; otherwise, false.
    /// </returns>
    public boolean checkRefreshCycle()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegistrationMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the registration mode can be changed.
    /// </summary>
    /// <returns>
    /// true if the registration mode can be changed; otherwise, false.
    /// </returns>
    public boolean checkRegistrationMode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRevertStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the kanban job status can be reverted.
    /// </summary>
    /// <returns>
    /// true if the kanban job status can be reverted; otherwise, false.
    /// </returns>
    public boolean checkRevertStatus()
    {
        return kanbanBoardTransferJobList.checkRevertStatusEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipmentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether shipment details can be accessed.
    /// </summary>
    /// <returns>
    /// true if the shipment details can be accessed; otherwise, false.
    /// </returns>
    public boolean checkShipmentDetails()
    {
        return kanbanBoardTransferJobList.checkSelectedJobWithShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipmentLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether shipment lines can be accessed.
    /// </summary>
    /// <returns>
    /// true if the shipment lines can be accessed; otherwise, false.
    /// </returns>
    public boolean checkShipmentLines()
    {
        return kanbanBoardTransferJobList.checkSelectedJobWithShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipmentNew</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a new shipment can be created.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean checkShipmentNew()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShipmentSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a shipment can be sent.
    /// </summary>
    /// <returns>
    /// true if the shipment can be sent; otherwise, false.
    /// </returns>
    public boolean checkShipmentSend()
    {
        return kanbanBoardTransferJobList.checkSendShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the selected kanban transfer job can be started.
    /// </summary>
    /// <returns>
    /// true if the transfer job can be started; otherwise, false.
    /// </returns>
    public boolean checkStartTransfer()
    {
        return kanbanBoardTransferJobList.checkStartTransferEnabled()
            && kanbanBoardTransferJobList.checkNoPendingPeggedJobs();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected kanban job picking list can be updated.
    /// </summary>
    /// <returns>
    ///    true if the picking list can be updated; otherwise, false.
    /// </returns>
    public boolean checkUpdatePickingList()
    {
        return kanbanBoardTransferJobList.checkUpdatePickingListEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected kanban job registration can be updated.
    /// </summary>
    /// <returns>
    ///    true if the registration can be updated; otherwise, false.
    /// </returns>
    public boolean checkUpdateRegistration()
    {
        return kanbanBoardTransferJobList.checkUpdateRegistrationEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the special actions that are used to clear the advanced cache for the
    ///    <c>KanbanBoardTransferJobButtonManager</c> class.
    /// </summary>
    /// <remarks>
    ///    No advanced caching is implemented in the <c>KanbanBoardTransferJobButtonManager</c> class.
    ///    Therefore, this method is empty.
    /// </remarks>
    public void clearCache()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineButtonStates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the special actions that are needed by the <c>KanbanBoardTransferJobButtonManager</c>
    ///    class for rule evaluation.
    /// </summary>
    /// <param name="_ruleFunctionName">
    ///    The method name of the rule to evaluate.
    /// </param>
    /// <remarks>
    ///    No advanced caching is implemented in the <c>KanbanBoardTransferJobButtonManager</c> class.
    ///    Therefore, this method is empty.
    /// </remarks>
    public void determineButtonStates(str _ruleFunctionName)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanBoardTransferJobList</Name>
				<Source><![CDATA[
    private KanbanBoardTransferJobList parmKanbanBoardTransferJobList(KanbanBoardTransferJobList _kanbanBoardTransferJobList = kanbanBoardTransferJobList)
    {
        kanbanBoardTransferJobList = _kanbanBoardTransferJobList;

        return kanbanBoardTransferJobList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the data source instances used by the helper class.
    /// </summary>
    /// <param name="datasources1">
    /// This parameter is not used.
    /// </param>
    /// <param name="datasources2">
    /// This parameter is not used.
    /// </param>
    /// <param name="datasources3">
    /// This parameter is not used.
    /// </param>
    /// <param name="datasources4">
    /// This parameter is not used.
    /// </param>
    /// <param name="datasources5">
    /// This parameter is not used.
    /// </param>
    public void setDatasources(
        Common datasources1,
        Common datasources2 = null,
        Common datasources3 = null,
        Common datasources4 = null,
        Common datasources5 = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardTransferJobButtonManager construct()
    {
        return new KanbanBoardTransferJobButtonManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanBoardTransferJobButtonManager</c> class.
    /// </summary>
    /// <param name="_kanbanBoardTransferJobList">
    /// The instance of the transfer jobs list business logic class.
    /// </param>
    /// <returns>
    /// The initialized instance of the class.
    /// </returns>
    public static KanbanBoardTransferJobButtonManager newDefault(
        KanbanBoardTransferJobList _kanbanBoardTransferJobList)
    {
        KanbanBoardTransferJobButtonManager kanbanBoardTransferJobButtonManager =  KanbanBoardTransferJobButtonManager::construct();

        if (!_kanbanBoardTransferJobList)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanBoardTransferJobButtonManager.parmKanbanBoardTransferJobList(_kanbanBoardTransferJobList);

        return kanbanBoardTransferJobButtonManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>