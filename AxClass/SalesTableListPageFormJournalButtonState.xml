<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTableListPageFormJournalButtonState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesTableListPageFormJournalButtonState</c> class handles the state of the journal buttons on the <c>SalesTableListPage</c> form.
/// </summary>
public class SalesTableListPageFormJournalButtonState
{
    private FormRun formRun;

    protected boolean enableConfirmationButton;
    protected boolean enablePickingListButton;
    protected boolean enablePickingListRegistrateButton;
    protected boolean enablePackingSlipButton;
    protected boolean enableInvoiceButton;
    protected boolean enableProjectPackingSlipButton;
    protected boolean canInvoice4PaymBeUpdated;
    
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>button</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a button with a given name.
    /// </summary>
    /// <param name = "_name">The name of the button.</param>
    /// <returns>The button control if found; otherwise, null.</returns>
    private FormControl button(FormControlName _name)
    {
        int controlId = formRun.controlId(_name);
        return formRun.control(controlId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled property on a button.
    /// </summary>
    /// <param name = "_name">The name of the button.</param>
    /// <param name = "_isEnabled">The enabled state.</param>
    [Hookable(false)]
    protected void enableButton(FormControlName _name, boolean _isEnabled)
    {
        FormControl control = this.button(_name);
        if (control)
        {
            control.enabled(_isEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visible property on a button.
    /// </summary>
    /// <param name = "_name">The name of the button.</param>
    /// <param name = "_isVisible">The visible state.</param>
    [Hookable(false)]
    protected void showButton(FormControlName _name, boolean _isVisible)
    {
        FormControl control = this.button(_name);
        if (control)
        {
            control.visible(_isVisible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAllButtonsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if all buttons are enabled.
    /// </summary>
    /// <returns>true if all buttons are enabled; otherwise, false.</returns>
    [Hookable(false)]
    public boolean areAllButtonsEnabled()
    {
        return
            (enableConfirmationButton || canInvoice4PaymBeUpdated) &&
            enablePickingListButton &&
            enablePickingListRegistrateButton &&
            enablePackingSlipButton &&
            enableInvoiceButton &&
            enableProjectPackingSlipButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCheckIfUpdateContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the contract based on the current state.
    /// </summary>
    /// <param name = "_contract">The contract to initialize.</param>
    [Hookable(false)]
    public void initializeCheckIfUpdateContract(SalesTableCheckIfUpdateContract _contract)
    {
        boolean  countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);

        _contract.parmCheckConfirmation(!enableConfirmationButton);
        _contract.parmCheckPickingList(!enablePickingListButton);
        _contract.parmCheckPackingSlip(!enablePackingSlipButton);
        _contract.parmCheckProjectPackingSlip(!enableProjectPackingSlipButton);
        _contract.parmCheckPickingListRegistration(!enablePickingListRegistrateButton);
        _contract.parmCheckInvoice(!enableInvoiceButton);

        if (countryRegion_RU)
        {
            _contract.parmCheckInvoice4Paym_RU(!canInvoice4PaymBeUpdated);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseCanBeUpdatedContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the contract to determine what states are allowed.
    /// </summary>
    /// <param name = "_canBeUpdatedContract">The contract to parse.</param>
    [Hookable(false)]
    public void parseCanBeUpdatedContract(SalesTableCanBeUpdatedContract _canBeUpdatedContract)
    {
        enableConfirmationButton = enableConfirmationButton || _canBeUpdatedContract.parmCanConfirmationBeUpdated();
        enablePickingListButton = enablePickingListButton || _canBeUpdatedContract.parmCanPickingListBeUpdated();
        enablePickingListRegistrateButton = enablePickingListRegistrateButton || _canBeUpdatedContract.parmCanPickingListBeRegistrated();
        enablePackingSlipButton = enablePackingSlipButton || _canBeUpdatedContract.parmCanPackingSlipBeUpdated();
        enableInvoiceButton = enableInvoiceButton || _canBeUpdatedContract.parmCanInvoiceBeUpdated();
        enableProjectPackingSlipButton = enableProjectPackingSlipButton || _canBeUpdatedContract.parmCanProjectPackingSlipBeUpdated();
        canInvoice4PaymBeUpdated = canInvoice4PaymBeUpdated || _canBeUpdatedContract.parmCanInvoice4PaymBeUpdated_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the state to the buttons.
    /// </summary>
    [Hookable(false)]
    public void applyState()
    {
        this.enableButton(formControlStr(SalesTableListPage, Generate), enableConfirmationButton || canInvoice4PaymBeUpdated);
        this.enableButton(formControlStr(SalesTableListPage, buttonUpdateConfirmation), enableConfirmationButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonProformaConfirmation), enableConfirmationButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonUpdatePickingList), enablePickingListButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonUpdatePickingListRegistrate), enablePickingListRegistrateButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonUpdatePackingSlip), enablePackingSlipButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonProformaPackingSlip), enablePackingSlipButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonUpdateInvoice), enableInvoiceButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonProformaInvoice), enableInvoiceButton);
        this.enableButton(formControlStr(SalesTableListPage, buttonUpdateConfirm), enableConfirmationButton);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesTableListPageFormJournalButtonState construct()
    {
        return new SalesTableListPageFormJournalButtonState();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>