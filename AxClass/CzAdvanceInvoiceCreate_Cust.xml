<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvanceInvoiceCreate_Cust</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CzAdvanceInvoiceCreate_Cust extends CzAdvanceInvoiceCreate
{
    DialogField updateField;
    DialogField postVATField;
    DialogField postVATDateField;
    DialogField taxDocumentCreateField;

    SalesUpdate salesUpdate;
    CzPostVAT postVAT;
    CzPostVATDate postVATDate;
    CzTaxDocumentCreateDoc taxDocumentCreate;
    SalesTotals salesTotals;

    #define.PrevVersion (1)
    #LocalMacro.PrevList
        percent,
        salesUpdate
    #EndMacro

    #define.CurrentVersion(2)
    #LocalMacro.CurrentList
        percent,
        salesUpdate,
        taxDocumentCreate,
        postingProfile,
        postVAT,
        postVATDate
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTable</Name>
				<Source><![CDATA[
    protected void calcTable(SalesPurchTable _salesTable)
    {
        CzCustAdvanceInvoiceTable tmpTable = table;
        SalesTable localSalesTable = _salesTable;

        Debug::assert(_salesTable.TableId == tableNum(SalesTable));

        tmpTable.PostVAT = postVAT;
        tmpTable.PostVATDate = postVATDate;
        tmpTable.TaxDocumentCreate = taxDocumentCreate;

        super(_salesTable);

        salesTotals = SalesTotals_Sales::construct(localSalesTable,
                                                   salesUpdate,
                                                   AccountOrder::None,
                                                   '',
                                                   localSalesTable.SalesId);
        salesTotals.calc();

        tmpTable.InvoiceAmount = CurrencyExchangeHelper::amount(salesTotals.totalAmount() * percent / 100, tmpTable.CurrencyCode);

        tmpTable.currencyModified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog ret = super();

        updateField = ret.addFieldValue(enumStr(SalesUpdate), salesUpdate);

        ret.addGroup("@SYS2952");
        postingProfileField = ret.addFieldValue(extendedTypeStr(CustPostingProfile), postingProfile, "@SYS59471");
        postVATField = ret.addFieldValue(extendedTypeStr(CzPostVAT), postVAT, '', "@GLS220399");
        postVATDateField = ret.addFieldValue(extendedTypeStr(CzPostVATDate), postVATDate, '', "@GLS220400");
        taxDocumentCreateField = ret.addFieldValue(extendedTypeStr(CzTaxDocumentCreateDoc), taxDocumentCreate, '', "@GLS220393");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        salesUpdate = updateField.value();
        postVAT = postVATField.value();
        postVATDate = postVATDateField.value();
        taxDocumentCreate = taxDocumentCreateField.value();

        if (salesUpdate != SalesUpdate::All &&
            salesUpdate != SalesUpdate::DeliverNow)
        {
            ret = checkFailed(strfmt("@SYS73815", salesUpdate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        salesUpdate = SalesUpdate::All;
        postVATDate = dateNull();
        taxDocumentCreate = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesPurchTable _salesPurchTable,
                    CzAdvanceInvoiceTable _table,
                    CzAdvanceInvoiceLine _line,
                    SalesUpdate _salesUpdate = SalesUpdate::All)
    {
        super(_salesPurchTable, _table, _line);

        salesUpdate = _salesUpdate;

        postingProfile = this.postingProfile();
        postVAT = NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfile</Name>
				<Source><![CDATA[
    private PostingProfile postingProfile()
    {
        PostingProfile ret = CustParameters::find().PrepaymentPostingProfile;

        return ret ? ret : CustParameters::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSortedListLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordSortedListLine()
    {
        return salesTotals ? salesTotals.recordSortedListLine() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLine</Name>
				<Source><![CDATA[
    protected SalesPurchLine salesPurchLine()
    {
        SalesLine salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineAmount</Name>
				<Source><![CDATA[
    protected Amount salesPurchLineAmount(SalesPurchLine _line)
    {
        return _line.salesPurchLineInterface().calcLineAmount(SalesQuantity::construct(DocumentStatus::Invoice).calcSalesQty(_line, salesUpdate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    protected Tax tax()
    {
        return salesTotals ? salesTotals.tax() : null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxSign</Name>
				<Source><![CDATA[
    protected int taxSign()
    {
        return -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        boolean ret = true;

        switch (version)
        {
            case #PrevVersion :
                [ version, #PrevList ] = _packedClass;
                postingProfile = this.postingProfile();
                postVAT = NoYes::Yes;
                postVATDate = dateNull();
                taxDocumentCreate = NoYes::No;
                break;
            case #CurrentVersion :
                [ version, #CurrentList ] = _packedClass;
                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS108257";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@GLS108362";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPurchLineQty</Name>
				<Source><![CDATA[
    protected UnitQty salesPurchLineQty(SalesPurchLine _line)
    {
        return SalesQuantity::construct(DocumentStatus::Invoice).calcSalesQty(_line, salesUpdate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>