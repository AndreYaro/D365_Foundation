<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for holding user parameters for the budget analysis form.
/// </summary>
public class BudgetAnalysisRequest  implements SysPackable
{
    LedgerDimensionAccount      focusLedgerDimensionId;
    DimensionHierarchyId        dimensionHierarchyId;
    ToDate                      toDate;
    FromDate                    fromDate;
    BudgetAnalysisColumnSet     columnSet;
    BudgetAnalysisColumns       column;
    OperationsTax               postingLayer;
    boolean                     includeClosingEntries;
    boolean                     displayDimensionInSeparateColumns;
    boolean                     displayAccountNameColumn;
    BudgetAnalysisRequestType   requestType;
    DateCode                    dateCode;

    BudgetAnalysisDimensionDetailTmp   detailsTempTable;
    BudgetAnalysisDimensionSummaryTmp  summaryTempTable;
    BudgetAnalysisDimensionSummaryTmp  totalsTempTable;
    DimensionFocusNameTmp               dimensionFocusNameTmp;
    GeneralLedgerBalanceDimensionDescriptionsTmp balanceDimensionDescriptionsTmp;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        focusLedgerDimensionId,
        dimensionHierarchyId,
        toDate,
        fromDate,
        columnSet,
        column,
        postingLayer,
        includeClosingEntries,
        requestType,
        dateCode,
        displayDimensionInSeparateColumns,
        displayAccountNameColumn
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        columnSet = BudgetAnalysisColumnSet::ExpenseBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId lastValueDataAreaId()
    {
        return curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifiername lastValueDesignName()
    {
        return menuitemDisplayStr(BudgetAnalysisDimensionFocusSummary);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public identifiername lastValueElementName()
    {
        return "@GLS150253";
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueType</Name>
				<Source><![CDATA[
    public UtilElementType lastValueType()
    {
        return UtilElementType::Form;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueUserId</Name>
				<Source><![CDATA[
    public userId lastValueUserId()
    {
        return curUserid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public final container pack()
    {
        // Pack all class member variables - table buffers must be packed & added separately
        return [#CurrentVersion, [#CurrentList, detailsTempTable.buf2con(), summaryTempTable.buf2con(), totalsTempTable.buf2con(), dimensionFocusNameTmp.buf2con()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumn</Name>
				<Source><![CDATA[
    public BudgetAnalysisColumns parmColumn(BudgetAnalysisColumns _column = column)
    {
        column = _column;
    
        return column;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumnSet</Name>
				<Source><![CDATA[
    public BudgetAnalysisColumnSet parmColumnSet(BudgetAnalysisColumnSet _columnSet = columnSet)
    {
        columnSet = _columnSet;
    
        return columnSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateCode</Name>
				<Source><![CDATA[
    public DateCode parmDateCode(DateCode _dateCode = dateCode)
    {
        dateCode = _dateCode;
    
        return dateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDetailsTempTable</Name>
				<Source><![CDATA[
    public BudgetAnalysisDimensionDetailTmp parmDetailsTempTable(BudgetAnalysisDimensionDetailTmp _detailsTempTable = detailsTempTable)
    {
        detailsTempTable = _detailsTempTable;
    
        return detailsTempTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionFocusNameTmp</Name>
				<Source><![CDATA[
    public DimensionFocusNameTmp parmDimensionFocusNameTmp(DimensionFocusNameTmp _dimensionFocusNameTmp = dimensionFocusNameTmp)
    {
        dimensionFocusNameTmp = _dimensionFocusNameTmp;
    
        return dimensionFocusNameTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionHierarchyId</Name>
				<Source><![CDATA[
    public DimensionHierarchyId parmDimensionHierarchyId(DimensionHierarchyId _dimensionHierarchyId = dimensionHierarchyId)
    {
        dimensionHierarchyId = _dimensionHierarchyId;
    
        return dimensionHierarchyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayAccountNameColumn</Name>
				<Source><![CDATA[
    public boolean parmDisplayAccountNameColumn(boolean _displayAccountNameColumn = displayAccountNameColumn)
    {
        displayAccountNameColumn = _displayAccountNameColumn;
    
        return displayAccountNameColumn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmdisplayDimensionInSeparateColumns</Name>
				<Source><![CDATA[
    public boolean parmdisplayDimensionInSeparateColumns(boolean _displayDimensionInSeparateColumns = displayDimensionInSeparateColumns)
    {
        displayDimensionInSeparateColumns = _displayDimensionInSeparateColumns;
    
        return displayDimensionInSeparateColumns;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFocusLedgerDimensionId</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount parmFocusLedgerDimensionId(LedgerDimensionAccount _focusLedgerDimensionId = focusLedgerDimensionId)
    {
        focusLedgerDimensionId = _focusLedgerDimensionId;
    
        return focusLedgerDimensionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
    
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeClosingEntries</Name>
				<Source><![CDATA[
    public boolean parmIncludeClosingEntries(boolean _includeClosingEntries = includeClosingEntries)
    {
        includeClosingEntries = _includeClosingEntries;
    
        return includeClosingEntries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostingLayer</Name>
				<Source><![CDATA[
    public OperationsTax parmPostingLayer(OperationsTax _postingLayer = postingLayer)
    {
        postingLayer = _postingLayer;
    
        return postingLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRequestType</Name>
				<Source><![CDATA[
    public BudgetanalysisRequestType parmRequestType(BudgetanalysisRequestType _requestType = requestType)
    {
        requestType = _requestType;
    
        return requestType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSummaryTempTable</Name>
				<Source><![CDATA[
    public BudgetAnalysisDimensionSummaryTmp parmSummaryTempTable(BudgetAnalysisDimensionSummaryTmp _summaryTempTable = summaryTempTable)
    {
        summaryTempTable = _summaryTempTable;
    
        return summaryTempTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
    
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTotalsTempTable</Name>
				<Source><![CDATA[
    public BudgetAnalysisDimensionSummaryTmp parmTotalsTempTable(BudgetAnalysisDimensionSummaryTmp _totalsTempTable = totalsTempTable)
    {
        totalsTempTable = _totalsTempTable;
    
        return totalsTempTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBalanceDimensionDescriptionsTmp</Name>
				<Source><![CDATA[
    public GeneralLedgerBalanceDimensionDescriptionsTmp parmBalanceDimensionDescriptionsTmp(
        GeneralLedgerBalanceDimensionDescriptionsTmp _balanceDimensionDescriptionsTmp = balanceDimensionDescriptionsTmp)
    {
        balanceDimensionDescriptionsTmp = _balanceDimensionDescriptionsTmp;
    
        return balanceDimensionDescriptionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public final boolean unpack(container _packedBudgetAnalysisParameters)
    {
        container packedClassMembers;
        container packedDetailsTempTable;
        container packedSummaryTempTable;
        container packedTotalsTempTable;
        container packedDimensionFocusNameTmp;
        int       version = conpeek(_packedBudgetAnalysisParameters, 1);
    
        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedBudgetAnalysisParameters;
    
                // Extract the #CurrentList and packed table buffers.
                [#CurrentList, packedDetailsTempTable, packedSummaryTempTable, packedTotalsTempTable, packedDimensionFocusNameTmp] = packedClassMembers;
                break;
    
            default:
                return false;
        }
    
        detailsTempTable.con2buf(packedDetailsTempTable);
        summaryTempTable.con2buf(packedSummaryTempTable);
        totalsTempTable.con2buf(packedTotalsTempTable);
        dimensionFocusNameTmp.con2buf(packedDimensionFocusNameTmp);
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BudgetAnalysisRequest construct()
    {
        return new BudgetAnalysisRequest();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>