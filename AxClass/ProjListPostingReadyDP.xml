<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListPostingReadyDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListPostingReadyDP</c> class provides data for the <c>ProjListPostingReady</c> report,
///    and contains the declaration of the global variables.
/// </summary>
/// <remarks>
///    This class provides the methods to fetch the data which is used by the <c>ProjListPostingReady</c>
///    report.
/// </remarks>

[
    SRSReportQueryAttribute(queryStr(ProjListPostingReady)),
    SRSReportParameterAttribute(classStr(ProjListPostingReadyContract))
]

public class ProjListPostingReadyDP extends SRSReportDataProviderBase
{
    ProjJournalId       journalId;
    Voucher             voucher;
    JournalTransDate    voucherDate;

    ProjJournalTrans    projJournalTrans;
    DirPartyTable       dirPartyTable;

    AllReadyNotReady    allReadyNotReady;

    ProjListPostingReadyTmp tmpProjListPostingReady;
    ResourceView        resource;
    DirPartyName        name;
    str                 newPage;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createProjListPostingReadyTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the data based on the parameters.
/// </summary>
/// <remarks>
///    The Boolean parameters allow the rows to be filtered when they are displayed on the report.
/// </remarks>

public void createProjListPostingReadyTmp()
{
    boolean             firstReady;
    boolean             firstJournal;
    QueryRun            queryRun;
    QueryRun            queryNotReady;
    ProjJournalTable    projJournalTable;
    ProjListPostingReadyContract contract = this.parmDataContract() as ProjListPostingReadyContract;

    allReadyNotReady = contract.parmAllReadyNotReady();
    queryRun            = new QueryRun(this.parmQuery());
    queryNotReady       = new QueryRun(this.parmQuery());

    firstJournal = true;

    while (queryRun.next())
    {
        if (SysReportRun::changed(queryRun,tableNum(ResourceView)))
        {
            resource   = queryRun.get(tableNum(ResourceView));

            firstReady  = true;

            if (allReadyNotReady == AllReadyNotReady::All ||
                allReadyNotReady == AllReadyNotReady::PostingReady)
            {
                while select projJournalTable
                    order by JournalId
                    where projJournalTable.Posted == NoYes::No
                {
                    if (! projJournalTable.StatusNameId   ||
                          projJournalTable.journalStatusLine().PostingReady)
                    {
                        while select projJournalTrans
                            where   projJournalTrans.JournalId    == projJournalTable.JournalId
                            &&      projJournalTrans.Resource     == resource.RecId
                        {
                            if (firstJournal)
                            {
                                firstJournal = false;
                            }

                            if (firstReady)
                            {
                                name            =  ResourceFacade::getName(resource.RecId);
                                this.insertProjListPostingReady(1,1);
                                firstReady  = false;
                            }

                            this.insertProjListPostingReady(1,0);

                            voucher         = projJournalTrans.Voucher;
                            voucherDate     = projJournalTrans.TransDate;
                            journalId       = projJournalTrans.JournalId;
                        }
                    }
                }
            }
        }
    }

    firstJournal = true;

    while (queryNotReady.next())
    {
        if (SysReportRun::changed(queryNotReady,tableNum(ResourceView)))
        {
            resource   = queryNotReady.get(tableNum(ResourceView));
            firstReady  = true;
            voucher     = '';
            voucherDate = dateNull();
            journalId   = '';

            if (allReadyNotReady == AllReadyNotReady::All ||
                allReadyNotReady == AllReadyNotReady::NotReady)
            {
                while select projJournalTable
                    order by JournalId
                    where   projJournalTable.Posted == NoYes::No
                {
                    if (projJournalTable.StatusNameId && ! projJournalTable.journalStatusLine().PostingReady)
                    {
                        while select projJournalTrans
                            where   projJournalTrans.JournalId    == projJournalTable.JournalId
                            &&      projJournalTrans.Resource     == resource.RecId
                        {
                            if (firstJournal)
                            {
                              firstJournal = false;
                            }

                            if (firstReady)
                            {
                                name        =  ResourceFacade::getName(resource.RecId);
                                this.insertProjListPostingReady(2,1);
                                firstReady  = false;
                            }

                            this.insertProjListPostingReady(2,0);

                            voucher      = projJournalTrans.Voucher;
                            voucherDate  = projJournalTrans.TransDate;
                            journalId    = projJournalTrans.JournalId;
                        }
                    }
                }
            }
        }
    }
}
]]></Source>
			</Method>
			<Method>
				<Name>getProjListPostingReadyTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves report data from the temporary table.
/// </summary>
/// <returns>
///    The required report data from the temporary table.
/// </returns>
[SRSReportDataSetAttribute('ProjListPostingReadyTmp')]
public ProjListPostingReadyTmp getProjListPostingReadyTmp()
{
    select * from tmpProjListPostingReady;
    return tmpProjListPostingReady;
}

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListPostingReady</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the required data and inserts it into the temporary table.
/// </summary>
/// <param name="_groupingField">
///    The grouping field that is used to group the ready for posting and not ready data.
/// </param>
/// <param name="_check">
///    An integer that indicates whether the function call is for data from the <c>ProjTable</c> or
///    <c>DirPartyTable</c> table.
/// </param>

public void insertProjListPostingReady(int _groupingField, int _check)
{
    if (_check == 0)
    {
        tmpProjListPostingReady.JournalId       =  projJournalTrans.JournalId == journalId ? '' : projJournalTrans.JournalId;
        tmpProjListPostingReady.Voucher         =  projJournalTrans.Voucher == voucher ? '' : projJournalTrans.Voucher;
        tmpProjListPostingReady.VoucherDate     =  projJournalTrans.Voucher == voucher ? dateNull() : projJournalTrans.TransDate;
        tmpProjListPostingReady.TransDate       =  projJournalTrans.TransDate;
        tmpProjListPostingReady.ProjId          =  projJournalTrans.ProjId;
        tmpProjListPostingReady.ActivityNumber  =  projJournalTrans.ActivityNumber;
        tmpProjListPostingReady.CategoryId      =  projJournalTrans.CategoryId;
        tmpProjListPostingReady.InvoiceStatusId =  projJournalTrans.LinePropertyId;
        tmpProjListPostingReady.Txt             =  projJournalTrans.Txt;
        tmpProjListPostingReady.Qty             =  projJournalTrans.Qty;
        tmpProjListPostingReady.Name            =  name;
        tmpProjListPostingReady.GroupingField   =  _groupingField;
        tmpProjListPostingReady.AllowAll        =  0;
    }
    else
    {
        tmpProjListPostingReady.JournalId       =  '';
        tmpProjListPostingReady.Voucher         =  '';
        tmpProjListPostingReady.VoucherDate     =  dateNull();
        tmpProjListPostingReady.TransDate       =  dateNull();
        tmpProjListPostingReady.ProjId          =  '';
        tmpProjListPostingReady.ActivityNumber  =  '';
        tmpProjListPostingReady.CategoryId      =  '';
        tmpProjListPostingReady.InvoiceStatusId =  '';
        tmpProjListPostingReady.Txt             =  '';
        tmpProjListPostingReady.Qty             =  0.00;
        tmpProjListPostingReady.Name            =  name;
        tmpProjListPostingReady.GroupingField   =  _groupingField;
        tmpProjListPostingReady.AllowAll        =  0;
    }

    tmpProjListPostingReady.insert();
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. This method will be called by
///    SQL Server Reporting Services (SSRS) at run time. The method should compute data and populate the
///    data tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
     this.createProjListPostingReadyTmp();
}
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>