<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCalcApproveForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgCalcApproveForm</c> class supports the <c>JmgCalcApprove</c> form.
/// </summary>
class JmgCalcApproveForm
{
    private JmgCalcApproveView      jmgCalcApproveView;
    private JmgStampJournalTable    jmgStampJournalTable;
    private JmgInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initChangeLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>JmgChangeLog</c> record from a <c>JmgStampJournalTrans</c> record.
    /// </summary>
    /// <param name="_jmgChangeLog">
    /// The <c>JmgChangeLog</c> record to initialize.
    /// </param>
    /// <param name="_jmgStampJournalTrans">
    /// The <c>JmgStampJournalTrans</c> record to use to initialize the <c>JmgChangeLog</c> record.
    /// </param>
    protected void initChangeLog(JmgChangeLog _jmgChangeLog, JmgStampJournalTrans _jmgStampJournalTrans)
    {
        _jmgChangeLog.Worker                = _jmgStampJournalTrans.Worker;
        _jmgChangeLog.ProfileDate           = _jmgStampJournalTrans.ProfileDate;
        _jmgChangeLog.ChangedTransaction    = buf2Con(_jmgStampJournalTrans);
        _jmgChangeLog.TransTableId          = _jmgStampJournalTrans.TransTableId;
        _jmgChangeLog.TransRecId            = _jmgStampJournalTrans.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgStampJournalTrans</c> record with the record ID of the corresponding change log.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    /// The <c>JmgStampJournalTrans</c> record to update.
    /// </param>
    /// <param name="_jmgChangeLog">
    /// The <c>JmgChangeLog</c> record that is linked to the <c>JmgStampJournalTrans</c> record.
    /// </param>
    protected void setTransRecId(JmgStampJournalTrans _jmgStampJournalTrans, JmgChangeLog _jmgChangeLog)
    {
        if (!_jmgStampJournalTrans.TransTableId)
        {
            _jmgStampJournalTrans.TransTableId  = _jmgChangeLog.TableId;
            _jmgStampJournalTrans.TransRecId    = _jmgChangeLog.RecId;
            _jmgStampJournalTrans.update();

            _jmgChangeLog.TransTableId          = _jmgChangeLog.TableId;
            _jmgChangeLog.TransRecId            = _jmgChangeLog.RecId;
            _jmgChangeLog.ChangedTransaction    = buf2Con(_jmgStampJournalTrans);
            _jmgChangeLog.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgChangeLog</c> table when a transaction is deleted.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    /// The transaction that is deleted.
    /// </param>
    public void transactionDeleted(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        JmgChangeLog    jmgChangeLog;
        ttsbegin;
        jmgChangeLog    = JmgChangeLog::find(_jmgStampJournalTrans.TransTableId, _jmgStampJournalTrans.TransRecId, true);
        if (jmgChangeLog && jmgChangeLog.ChangeLogType  == JmgChangeLogType::Insert)
        {
            jmgChangeLog.delete();
        }
        else
        {
            this.initChangeLog(jmgChangeLog, _jmgStampJournalTrans);
            jmgChangeLog.ChangeLogType      = JmgChangeLogType::Delete;
            jmgChangeLog.write();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgChangeLog</c> table when a transaction is inserted.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    /// The transaction that is inserted.
    /// </param>
    public void transactionInserted(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        JmgChangeLog    jmgChangeLog;
        ttsbegin;
        jmgChangeLog    = JmgChangeLog::find(_jmgStampJournalTrans.TransTableId, _jmgStampJournalTrans.TransRecId, true);
        this.initChangeLog(jmgChangeLog, _jmgStampJournalTrans);
        jmgChangeLog.ChangeLogType      = JmgChangeLogType::Insert;
        jmgChangeLog.write();
        if (!_jmgStampJournalTrans.TransTableId)
        {
            this.setTransRecId(_jmgStampJournalTrans, jmgChangeLog);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>JmgChangeLog</c> table when a transaction is updated.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    /// The transaction that is updated.
    /// </param>
    public void transactionUpdated(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        JmgChangeLog    jmgChangeLog;

        ttsbegin;
        jmgChangeLog    = JmgChangeLog::find(_jmgStampJournalTrans.TransTableId, _jmgStampJournalTrans.TransRecId, true);
        this.initChangeLog(jmgChangeLog, _jmgStampJournalTrans);
        if (!jmgChangeLog)
        {
            jmgChangeLog.ChangeLogType      = JmgChangeLogType::Update;
        }
        jmgChangeLog.write();
        if (!_jmgStampJournalTrans.TransTableId)
        {
            this.setTransRecId(_jmgStampJournalTrans, jmgChangeLog);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markJournalsCalculated</Name>
				<Source><![CDATA[
    public void markJournalsCalculated(Set _journalRecordSet)
    {
        using(var activityContext = logger.calcApprove().calculate())
        {
            JmgCalculated calculated = this.hasNotCalculatedRecords(_journalRecordSet) ? NoYes::Yes : NoYes::No;
            boolean       reread;

            SetEnumerator selectedJournalsEnumerator = _journalRecordSet.getEnumerator();
            while (selectedJournalsEnumerator.moveNext())
            {
                JmgStampJournalTable jmgStampJournalTableRec = selectedJournalsEnumerator.current();

                if (jmgStampJournalTableRec.Calculated != calculated)
                {
                    ttsbegin;

                    reread = this.rereadRecord(jmgStampJournalTableRec, reread, false);
                    jmgStampJournalTableRec.selectForUpdate(true);
                    jmgStampJournalTableRec.markCalculated(calculated);

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markJournalsApproved</Name>
				<Source><![CDATA[
    public void markJournalsApproved(Set _journalRecordSet)
    {
        using(var activityContext = logger.calcApprove().approve())
        {
            JmgApproved approved = this.hasNotApprovedRecords(_journalRecordSet) ? NoYes::Yes : NoYes::No;
            boolean     reread;

            SetEnumerator selectedJournalsEnumerator = _journalRecordSet.getEnumerator();
            while (selectedJournalsEnumerator.moveNext())
            {
                JmgStampJournalTable jmgStampJournalTableRec = selectedJournalsEnumerator.current();

                if (jmgStampJournalTableRec.Approved != approved)
                {
                    ttsbegin;

                    reread = this.rereadRecord(jmgStampJournalTableRec, reread, false);

                    jmgStampJournalTableRec.selectForUpdate(true);
                    jmgStampJournalTableRec.markApproved(approved);

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markJournalsTransferred</Name>
				<Source><![CDATA[
    public void markJournalsTransferred(Set _journalRecordSet)
    {
        using(var activityContext = logger.calcApprove().transfer())
        {
            JmgTransferred  transferred = this.hasNotTransferredRecords(_journalRecordSet) ? NoYes::Yes : NoYes::No;
            boolean         reread;

            SetEnumerator selectedJournalsEnumerator = _journalRecordSet.getEnumerator();
            while (selectedJournalsEnumerator.moveNext())
            {
                JmgStampJournalTable jmgStampJournalTableRec = selectedJournalsEnumerator.current();

                if (jmgStampJournalTableRec.Transferred != transferred)
                {
                    ttsbegin;

                    reread = this.rereadRecord(jmgStampJournalTableRec, reread, true);

                    jmgStampJournalTableRec.reread();
                    jmgStampJournalTableRec.selectForUpdate(true);
                    jmgStampJournalTableRec.markTransferred(transferred);

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        logger = JmgInstrumentationLogger::createLogger(classStr(JmgCalcApproveForm));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateButtonLabels</Name>
				<Source><![CDATA[
    public void updateButtonLabels(Set _journalRecordSet)
    {
        if (this.hasNotCalculatedRecords(_journalRecordSet))
        {
            jmgCalcApproveView.setCalculateButtonText("@SYS117");
        }
        else
        {
            jmgCalcApproveView.setCalculateButtonText("@SCM:JmgUnCalculate");
        }

        if (this.hasNotApprovedRecords(_journalRecordSet))
        {
            jmgCalcApproveView.setApproveButtonText("@SYS16449");
        }
        else
        {
            jmgCalcApproveView.setApproveButtonText("@SCM:JmgUnApprove");
        }

        if (this.hasNotTransferredRecords(_journalRecordSet))
        {
            jmgCalcApproveView.setTransferButtonText("@SYS8801");
        }
        else
        {
            jmgCalcApproveView.setTransferButtonText("@SCM:JmgUnTransfer");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the data sources.
    /// </summary>
    public void setDatasources(JmgStampJournalTable _jmgStampJournalTable)
    {
        jmgStampJournalTable    = _jmgStampJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleProfileChange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs needed actions when user changes a profile on CalcApprove form.
    ///     Marks profile registration record as Manual and deletes all automatically generated transactions (remnants from previous calculation).
    /// </summary>
    public void handleProfileChange()
    {
        jmgStampJournalTable.ProfileManual = NoYes::Yes;
        jmgStampJournalTable.deleteTransactionsGeneratedByCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNotCalculatedRecords</Name>
				<Source><![CDATA[
    private boolean hasNotCalculatedRecords(Set _journalRecordSet)
    {
        return this.hasNoInAnyRecordInField(_journalRecordSet, fieldnum(JmgStampJournalTable, Calculated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNotApprovedRecords</Name>
				<Source><![CDATA[
    private boolean hasNotApprovedRecords(Set _journalRecordSet)
    {
        return this.hasNoInAnyRecordInField(_journalRecordSet, fieldnum(JmgStampJournalTable, Approved));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNotTransferredRecords</Name>
				<Source><![CDATA[
    private boolean hasNotTransferredRecords(Set _journalRecordSet)
    {
        return this.hasNoInAnyRecordInField(_journalRecordSet, fieldnum(JmgStampJournalTable, Transferred));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoInAnyRecordInField</Name>
				<Source><![CDATA[
    private boolean hasNoInAnyRecordInField(Set _journalRecordSet, int _fieldToCheck)
    {
        SetEnumerator journalsEnumerator = _journalRecordSet.getEnumerator();
        while (journalsEnumerator.moveNext())
        {
            JmgStampJournalTable jmgStampJournalTableRec = journalsEnumerator.current();

            if (jmgStampJournalTableRec.(_fieldToCheck) == NoYes::No)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadRecord</Name>
				<Source><![CDATA[
    private boolean rereadRecord(JmgStampJournalTable _jmgStampJournalTable, boolean _reread, boolean _isTransfer)
    {
        boolean reread = _reread;

        if (reread)
        {
            _jmgStampJournalTable.reread();
        }
        else if (_isTransfer || _jmgStampJournalTable.Transferred == NoYes::Yes)
        {
            reread = true;
        }

        return reread;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    public static JmgCalcApproveForm newFromForm(JmgCalcApproveView _jmgCalcApproveView)
    {
        JmgCalcApproveForm jmgCalcApproveForm = JmgCalcApproveForm::construct();
        jmgCalcApproveForm.jmgCalcApproveView = _jmgCalcApproveView;

        return jmgCalcApproveForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgCalcApproveForm construct()
    {
        return new JmgCalcApproveForm();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>