<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredInventoryMovementProcessingRuleEvaluator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>WHSWorkDeferredInventoryMovementProcessingRuleEvaluator</c> is responsible for determining if deferred inventory movement processing should be used.
/// </summary>
internal final class WHSWorkDeferredInventoryMovementProcessingRuleEvaluator extends WHSWorkDeferredOperationProcessingRuleEvaluator
{
    private WHSInventoryMovementOperationParameters movementParameters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canUseDeferredProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if deferred inventory movement processing can be used.
    /// </summary>
    /// <returns>true if deferred processing can be used; otherwise, false.</returns>
    [Hookable(false)]    
    internal boolean canUseDeferredProcessing()
    {
        WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkDeferredPutProcessingRuleEvaluator));
        
        using (var ruleEvaluationContext = logger.ruleEvaluation().evaluateCanUseDeferredProcessing())
        {
            if (!this.validateMenuItem())
            {
                logger.logInformation('validateMenuItem: false');
                return false;
            }

            if (!this.validateWorkOperationProcessingRule())
            {
                logger.logInformation('validateWorkOperationProcessingRule: false');
                return false;
            }

            if (!this.validateProcessingThreshold())
            {
                logger.logInformation('validateProcessingThreshold: false');
                return false;
            }

            if (!this.validateNotRunningInBatch())
            {
                logger.logInformation('validateNotRunningInBatch: false');                
                return false;
            }

            logger.logInformation('rule evaluation : true');                
            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkOperationProcessingRule</Name>
				<Source><![CDATA[
    protected void initWorkOperationProcessingRule()
    {
        workOperationProcessingRule = WHSWorkOperationProcessingRuleProvider::construct().workOperationProcessingRuleByParams(
            movementParameters.FromInventDim.InventLocationId,
            WHSWorkTransType::Invent,
            WHSWorkType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMenuItem</Name>
				<Source><![CDATA[
    private boolean validateMenuItem()
    {
        return WHSRFMenuItemTable::find(movementParameters.MenuItemName).DeferredPutProcessingPolicy == WHSDeferredPutProcessingMobileDevicePolicy::RespectSettings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcessingThreshold</Name>
				<Source><![CDATA[
    private boolean validateProcessingThreshold()
    {
        if (!workOperationProcessingRule.DeferredProcessingThreshold)
        {
            return true;
        }

        // if LP is not specified, user must specifically select an item => less chance to cause perf-heavy operation.
        if (   movementParameters.IsMoveLP
            || movementParameters.IsNestedLPMove)
        {
            return this.isTotalNumberOfInventSumRecordsAboveThreshold();
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTotalNumberOfInventSumRecordsAboveThreshold</Name>
				<Source><![CDATA[
    private boolean isTotalNumberOfInventSumRecordsAboveThreshold()
    {
        int totalNumberOfInventSumRecordsBelowThreshold = this.getTotalNumberOfInventSumRecordsBelowThreshold(
            movementParameters.FromInventDim.LicensePlateId,
            0,
            workOperationProcessingRule.DeferredProcessingThreshold,
            movementParameters.IsNestedLPMove);

        return totalNumberOfInventSumRecordsBelowThreshold > workOperationProcessingRule.DeferredProcessingThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalNumberOfInventSumRecordsBelowThreshold</Name>
				<Source><![CDATA[
    private int getTotalNumberOfInventSumRecordsBelowThreshold(
        WHSLicensePlateId _licensePlateId,
        int _currentCount,
        int _threshold,
        boolean _checkChildren)
    {
        _currentCount += this.getNumberOfInventSumRecordsOnLP(_licensePlateId);

        if (_currentCount <= _threshold && _checkChildren)
        {
            WHSLicensePlate childLicensePlate;

            while select LicensePlateId from childLicensePlate
                where childLicensePlate.LicensePlateParent == _licensePlateId
            {
                _currentCount = this.getTotalNumberOfInventSumRecordsBelowThreshold(
                    childLicensePlate.LicensePlateId,
                    _currentCount,
                    _threshold,
                    _checkChildren);

                if (_currentCount > _threshold)
                {
                    break;
                }
            }
        }

        return _currentCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberOfInventSumRecordsOnLP</Name>
				<Source><![CDATA[
    private int getNumberOfInventSumRecordsOnLP(WHSLicensePlateId _licensePlateId)
    {
        InventSum inventSum;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select count(RecId) from inventSum
                where inventSum.ClosedQty == NoYes::No
                   && inventSum.PhysicalInvent > 0
                   && inventSum.InventLocationId    == movementParameters.FromInventDim.InventLocationId
                   && inventSum.wmsLocationId       == movementParameters.FromInventDim.wmsLocationId
                   && inventSum.LicensePlateId      == _licensePlateId;
        }
        else
        {
            InventDim inventDim;

            select count(RecId) from inventSum
                where inventSum.ClosedQty == NoYes::No
                   && inventSum.PhysicalInvent > 0
                exists join inventDim
                    where inventDim.InventDimId         == inventSum.InventDimId
                       && inventDim.InventLocationId    == movementParameters.FromInventDim.InventLocationId
                       && inventDim.wmsLocationId       == movementParameters.FromInventDim.wmsLocationId
                       && inventDim.LicensePlateId      == _licensePlateId;
        }

        return inventSum.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new() { }

]]></Source>
			</Method>
			<Method>
				<Name>newFromMovementParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSWorkDeferredInventoryMovementProcessingRuleEvaluator</c> class.
    /// </summary>
    /// <param name = "_movementParameters">The movement parameters.</param>
    /// <returns>An instance of the <c>WHSWorkDeferredInventoryMovementProcessingRuleEvaluator</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkDeferredInventoryMovementProcessingRuleEvaluator newFromMovementParameters(WHSInventoryMovementOperationParameters _movementParameters)
    {
        var evaluator = new WHSWorkDeferredInventoryMovementProcessingRuleEvaluator();

        evaluator.movementParameters = _movementParameters;
        
        return evaluator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>