<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRevenueActivityDP_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerRevenueActivityDP_SA</c> class is the Report Data Provider class that supports the
///    <c>LedgerRevenueActivity_SA</c> report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>LedgerRevenueActivity_SA</c> report
/// </remarks>
[
    SRSReportParameterAttribute(classstr(LedgerZakatReportContract_SA))
]
public class LedgerRevenueActivityDP_SA extends SrsReportDataProviderPreProcessTempDB
{
    // source of report data
    GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakat;
    GeneralJournalAccountEntry              generalJournalAccountEntry;

    // temporary data store
    LedgerRevenueActivityTmp_SA             ledgerRevenueActivityTmp;

    // Report parameters
    LedgerFiscalYearZakat_SA                fiscalYear;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerRevenueActivtyTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to query the <c>LedgerRevenueActivityTmp_SA</c> table and returns the data table.
    /// </summary>
    /// <returns>
    /// The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('LedgerRevenueActivityTmp')]
    public LedgerRevenueActivityTmp_SA getLedgerRevenueActivtyTmp()
    {
        select * from ledgerRevenueActivityTmp;
        return ledgerRevenueActivityTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerRevenueActivityTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts data into the temporary table.
    /// </summary>
    public void insertLedgerRevenueActivityTmp()
    {
        ProjTable   projTable;

        // write the relevant field data to the temporary data store
        ledgerRevenueActivityTmp.Executed                   = this.totalExecutedByFiscalYear(fiscalYear);

        if (generalJournalAccountEntryZakat.SalesType == SalesTypeZakat_SA::Projects)
        {
            // access the project information
            projTable = ProjTable::find(generalJournalAccountEntryZakat.ProjId);

            ledgerRevenueActivityTmp.ExecutedPrev           = this.totalExecutedByFiscalYear(fiscalYear - 1);
            ledgerRevenueActivityTmp.Customer               = projTable.CustAccount;
            ledgerRevenueActivityTmp.Subject                = projTable.Subject_SA;
            ledgerRevenueActivityTmp.ContractDate           = projTable.ContractDate_SA;
            ledgerRevenueActivityTmp.ContractPeriod         = projTable.ContractPeriod_SA;
            ledgerRevenueActivityTmp.ContractAmendment      = projTable.ContractAmendment_SA;
            ledgerRevenueActivityTmp.ContractValue          = projTable.ContractValue_SA;

            // calculate remaining contract balance
            ledgerRevenueActivityTmp.ContractBalance        = ledgerRevenueActivityTmp.ContractValue
                                                                + ledgerRevenueActivityTmp.ContractAmendment
                                                                - ledgerRevenueActivityTmp.Executed
                                                                - ledgerRevenueActivityTmp.ExecutedPrev;
        }

        ledgerRevenueActivityTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the
    ///    <c>LedgerRevenueActivity_SA</c> report.
    /// </remarks>
    public void processReport()
    {
        LedgerItemCodeZakat_SA ledgerItemCode;

        // access the Report Data Contract information
        LedgerZakatReportContract_SA contract = this.parmDataContract() as LedgerZakatReportContract_SA;

        // retrieve the contract control parameters
        fiscalYear = contract.parmFiscalYear();

        while select generalJournalAccountEntryZakat
            group by SalesType
            where generalJournalAccountEntryZakat.FiscalYr == fiscalYear
            join RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntryZakat.GeneralJournalAccountEntry &&
                      generalJournalAccountEntryZakat.SalesType == SalesTypeZakat_SA::Sales &&
                      generalJournalAccountEntryZakat.ItemCode != ''
            join ItemCode from ledgerItemCode
                where ledgerItemCode.ItemCode == generalJournalAccountEntryZakat.ItemCode &&
                      ledgerItemCode.ItemType == LedgerItemTypeZakat_SA::ActivityRevenue

        {
            // insert a record into the temporary table buffer
            this.insertLedgerRevenueActivityTmp();
        }

        while select generalJournalAccountEntryZakat
            group by ProjId, SalesType
            where generalJournalAccountEntryZakat.FiscalYr == fiscalYear
            join RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == generalJournalAccountEntryZakat.GeneralJournalAccountEntry &&
                      generalJournalAccountEntryZakat.SalesType == SalesTypeZakat_SA::Projects &&
                      generalJournalAccountEntryZakat.ItemCode != ''
            join ItemCode from ledgerItemCode
                where ledgerItemCode.ItemCode == generalJournalAccountEntryZakat.ItemCode &&
                      ledgerItemCode.ItemType == LedgerItemTypeZakat_SA::ActivityRevenue
        {
            // insert a record into the temporary table buffer
            this.insertLedgerRevenueActivityTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalExecutedByFiscalYear</Name>
				<Source><![CDATA[
        private AmountCur totalExecutedByFiscalYear(LedgerFiscalYearZakat_SA _fiscalYear)
    {
        GeneralJournalAccountEntry              generalJournalAccountEntryLoc;
        GeneralJournalAccountEntryZakat_SA      generalJournalAccountEntryZakatLoc;
        LedgerItemCodeZakat_SA                  ledgerItemCodeLoc;

        if (generalJournalAccountEntryZakat.SalesType == SalesTypeZakat_SA::Sales)
        {
            select sum(TransactionCurrencyAmount)
                from generalJournalAccountEntryLoc
                join GeneralJournalAccountEntry from generalJournalAccountEntryZakatLoc
                    where generalJournalAccountEntryZakatLoc.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          generalJournalAccountEntryZakatLoc.SalesType     == SalesTypeZakat_SA::Sales &&
                          generalJournalAccountEntryZakatLoc.FiscalYr      == _fiscalYear &&
                          generalJournalAccountEntryZakatLoc.ItemCode      != ''
                join ItemCode from ledgerItemCodeLoc
                    where ledgerItemCodeLoc.ItemCode == generalJournalAccountEntryZakatLoc.ItemCode &&
                          ledgerItemCodeLoc.ItemType == LedgerItemTypeZakat_SA::ActivityRevenue;
        }
        else
        {
            select sum(TransactionCurrencyAmount)
                from generalJournalAccountEntryLoc
                join GeneralJournalAccountEntry from generalJournalAccountEntryZakatLoc
                    where generalJournalAccountEntryZakatLoc.GeneralJournalAccountEntry == generalJournalAccountEntryLoc.RecId &&
                          generalJournalAccountEntryZakatLoc.SalesType     == SalesTypeZakat_SA::Projects &&
                          generalJournalAccountEntryZakatLoc.FiscalYr      == _fiscalYear &&
                          generalJournalAccountEntryZakatLoc.ProjId        == generalJournalAccountEntryZakat.ProjId &&
                          generalJournalAccountEntryZakatLoc.ItemCode      != ''
                join ItemCode from ledgerItemCodeLoc
                    where ledgerItemCodeLoc.ItemCode == generalJournalAccountEntryZakatLoc.ItemCode &&
                          ledgerItemCodeLoc.ItemType == LedgerItemTypeZakat_SA::ActivityRevenue;
        }

        return generalJournalAccountEntryLoc.TransactionCurrencyAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>