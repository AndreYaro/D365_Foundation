<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInventReservationQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventReservationQueryBuilder</c> class is used to build a<c>Query</c> for selecting quantities and dimensions for reservation.
/// </summary>
abstract class whsInventReservationQueryBuilder
{
    Query                           query;
    ItemId                          itemId;
    InventDim                       inventDimCriteria;
    InventDimParm                   inventDimParmCriteria;
    WHSReservationHierarchyLevel    reservationHierarchyLevel;
    boolean                         includeOrdered;
    boolean                         includePhysical;
    CreatedTransactionId            ttsId;
    boolean                         sortByBatch;
    boolean                         sortBatchByProdDate;
    boolean							sortByLEFO;
    InventQty                       minAvailQty;
    boolean                         onlyReserveOnWHSEnabledWarehouses;
    private UnknownNoYes            isCWItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBatchOrderByFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds sort sequence on batch for FEFO queries.
    /// </summary>
    /// <param name="_qbdsInventBatch">
    /// The <c>InventBatch</c> datasource in the query.
    /// </param>
    protected void addBatchOrderByFields(QueryBuildDataSource _qbdsInventBatch)
    {
        this.addBatchAndOwnerOrderByFields(_qbdsInventBatch, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortByLEFO</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determines if sorting of batches should be done according to a Last Expiry - First Out (LEFO) principle.
    /// </summary>
    /// <param name = "_sortByLEFO">true if Last Expiry - First Out (LEFO) principle should be used; Otherwise, false.</param>
    /// <returns>A boolean that determines if sorting of batches should be done according to a Last Expiry - First Out (LEFO) principle.</returns>
    public boolean parmSortByLEFO(boolean _sortByLEFO = sortByLEFO)
    {
        sortByLEFO = _sortByLEFO;
        return sortByLEFO;
	}

]]></Source>
			</Method>
			<Method>
				<Name>addBatchAndOwnerOrderByFields</Name>
				<Source><![CDATA[
    protected void addBatchAndOwnerOrderByFields(
        QueryBuildDataSource _qbdsInventBatch,
        QueryBuildDataSource _qbdsInventOwner)
    {
        if (this.parmSortBatchByProdDate())
        {
            _qbdsInventBatch.addOrderByField(fieldNum(InventBatch, prodDate));
        }
        else
        {
			if (this.parmSortByLEFO())
            {
                _qbdsInventBatch.addOrderByField(fieldNum(InventBatch, ExpDate), SortOrder::Descending);
			}
            else if (InventTable::find(itemId).modelGroup().PdsPickCriteria == PdsPickCriteria::ExpiryDate)
            {
                _qbdsInventBatch.addOrderByField(fieldNum(InventBatch, ExpDate));
            }
            else
            {
                _qbdsInventBatch.addOrderByField(fieldNum(InventBatch, PdsBestBeforeDate));
            }

            if (_qbdsInventOwner)
            {
                _qbdsInventOwner.addOrderByField(fieldNum(InventOwnerType, IsCurrentLegalEntity), SortOrder::Descending);
            }

            _qbdsInventBatch.addOrderByField(fieldNum(InventBatch, InventBatchId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventDimDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds and returns a datasource for the <c>InventDim</c> table.
    /// </summary>
    /// <param name="_qbdsParent">
    /// A datasource that the datasource for the <c>InventDim</c> table is added to.
    /// </param>
    /// <returns>
    /// A datasource for the <c>InventDim</c> table.
    /// </returns>
    protected QueryBuildDataSource addInventDimDS(QueryBuildDataSource _qbdsParent)
    {
        QueryBuildDataSource qbdsInventDim;

        qbdsInventDim = _qbdsParent.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::InnerJoin);
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);

        if (this.parmOnlyReserveOnWHSEnabledWarehouses())
        {
            this.addInventLocationDSToInventDimDS(qbdsInventDim);
        }

        // If sort by batch is set then we add it as the first sort field.
        if (sortByBatch)
        {
            qbdsInventDim.addSortField(fieldNum(InventDim, InventBatchId));
        }

        InventDim::queryDatasourceAddRangeSortFromParms(qbdsInventDim,false,inventDimCriteria,inventDimParmCriteria, null);

        return qbdsInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventLocationDSToInventDimDS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an datasource for inventlocation so the datasource for inventDim is filtered to only select from WHS enabled warehouses.
    /// </summary>
    /// <param name="_inventDimDS">
    /// A datasource that the datasource for the <c>InventLocation</c> table is added to.
    /// </param>
    protected void addInventLocationDSToInventDimDS(QuerybuildDataSource _inventDimDS)
    {
        QueryBuildDataSource qbdsInventLocation;

        qbdsInventLocation = _inventDimDS.addDataSource(tableNum(InventLocation));
        qbdsInventLocation.relations(true);
        qbdsInventLocation.joinMode(JoinMode::ExistsJoin);
        qbdsInventLocation.fetchMode(QueryFetchMode::One2One);
        qbdsInventLocation.addRange(fieldNum(InventLocation, WHSEnabled)).value(SysQuery::value(NoYes::Yes));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a query that selects the on-hand that can be used for reservation.
    /// </summary>
    /// <returns>
    /// A query that selects the on-hand that can be used for reservation.
    /// </returns>
    public abstract Query buildOnHandQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create range value for min avail.
    /// </summary>
    /// <returns>
    /// A <c>String</c> representing the range value that should be used for availability.
    /// </returns>
    /// <remarks>
    /// Min avail is either specified by parameters or greater than zero if unspecified.
    /// </remarks>
    protected str getAvailRange()
    {
        str availRange;

        availRange = minAvailQty ? strFmt('%1, >%1', minAvailQty) : '>0';

        return availRange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query to build.
    /// </summary>
    protected void initQuery()
    {
        query = new Query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeOrdered</Name>
				<Source><![CDATA[
    public boolean parmIncludeOrdered(boolean _includeOrdered = includeOrdered)
    {
        includeOrdered = _includeOrdered;

        return includeOrdered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludePhysical</Name>
				<Source><![CDATA[
    public boolean parmIncludePhysical(boolean _includePhysical = includePhysical)
    {
        includePhysical = _includePhysical;

        return includePhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimCriteria</Name>
				<Source><![CDATA[
    public InventDim parmInventDimCriteria(InventDim _inventDimCriteria = inventDimCriteria)
    {
        inventDimCriteria = _inventDimCriteria;

        return inventDimCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmCriteria</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmCriteria(InventDimParm _inventDimParmCriteria = inventDimParmCriteria)
    {
        inventDimParmCriteria = _inventDimParmCriteria;

        return inventDimParmCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnlyReserveOnWHSEnabledWarehouses</Name>
				<Source><![CDATA[
    public boolean parmOnlyReserveOnWHSEnabledWarehouses(boolean _onlyReserveOnWHSEnabledWarehouses = onlyReserveOnWHSEnabledWarehouses)
    {
        onlyReserveOnWHSEnabledWarehouses = _onlyReserveOnWHSEnabledWarehouses;

        return onlyReserveOnWHSEnabledWarehouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMinAvailQty</Name>
				<Source><![CDATA[
    public InventQty parmMinAvailQty(InventQty _minAvailQty = minAvailQty)
    {
        minAvailQty = _minAvailQty;

        return minAvailQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationHierarchyLevel</Name>
				<Source><![CDATA[
    public WHSReservationHierarchyLevel parmReservationHierarchyLevel(WHSReservationHierarchyLevel _reservationHierarchyLevel = reservationHierarchyLevel)
    {
        reservationHierarchyLevel = _reservationHierarchyLevel;

        return reservationHierarchyLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortByBatch</Name>
				<Source><![CDATA[
    public boolean parmSortByBatch(boolean _sortByBatch = sortByBatch)
    {
        sortByBatch = _sortByBatch;

        return sortByBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortBatchByProdDate</Name>
				<Source><![CDATA[
    public boolean parmSortBatchByProdDate(boolean _sortBatchByProdDate = sortBatchByProdDate)
    {
        sortBatchByProdDate = _sortBatchByProdDate;

        return sortBatchByProdDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCWItem</Name>
				<Source><![CDATA[
    final protected boolean parmIsCWItem()
    {
        if (isCWItem == UnknownNoYes::Unknown)
        {
            isCWItem = PdsGlobal::pdsIsCWItem(itemId) ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return isCWItem == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTtsId</Name>
				<Source><![CDATA[
    public CreatedTransactionId parmTtsId(CreatedTransactionId _ttsId = ttsId)
    {
        ttsId = _ttsId;

        return ttsId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tableId of the table or view that has the quantities fields.
    /// </summary>
    /// <returns>
    /// The tableId of the table or view that has the quantities fields.
    /// </returns>
    public abstract TableId sumTableId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>