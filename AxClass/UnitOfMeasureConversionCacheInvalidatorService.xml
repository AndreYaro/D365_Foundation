<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UnitOfMeasureConversionCacheInvalidatorService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>UnitOfMeasureConversionCacheInvalidatorService</c> class invalidates the unit of measure cache.
/// </summary>
internal final class UnitOfMeasureConversionCacheInvalidatorService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>invalidateCache</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void invalidateCache(UnitOfMeasureConversionCacheInvalidatorServiceContract _contract)
    {
        if (_contract.parmInvalidateAllCachesWithNonExistingConversion())
        {
            this.deleteAllCachesWithNonExistingConversion();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCommitter</Name>
				<Source><![CDATA[
    private WHSRecordDeletionCommitter recordCommitter()
    {
        return WHSRecordDeletionCommitter::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllCachesWithNonExistingConversionUsingFieldId</Name>
				<Source><![CDATA[
    private int deleteAllCachesWithNonExistingConversionUsingFieldId(FieldId _fromUOMCompareFieldId, FieldId _toUOMCompareFieldId)
    {
        int counter; 
        using (var committer = this.recordCommitter())
        {
            UnitOfMeasureConversion         conversion;
            UnitOfMeasureConversionCache    conversionCache;            

            while select forUpdate conversionCache
                where conversionCache.ConversionExists == NoYes::No
            exists join conversion
                where conversion.Product == conversionCache.Product
                    && conversion.(_fromUOMCompareFieldId) == conversionCache.FromUnitOfMeasure
                    && conversion.(_toUOMCompareFieldId) == conversionCache.ToUnitOfMeasure
            {
                committer.deleteRecord(conversionCache);
                counter++;
            }
        }        
        
        return counter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllCachesWithNonExistingConversionFromMatchTo</Name>
				<Source><![CDATA[
    private int deleteAllCachesWithNonExistingConversionFromMatchTo()
    {
        return this.deleteAllCachesWithNonExistingConversionUsingFieldId(fieldNum(UnitOfMeasureConversion, ToUnitOfMeasure), fieldNum(UnitOfMeasureConversion, FromUnitOfMeasure));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllCachesWithNonExistingConversionFromMatchFrom</Name>
				<Source><![CDATA[
    private int deleteAllCachesWithNonExistingConversionFromMatchFrom()
    {
        return this.deleteAllCachesWithNonExistingConversionUsingFieldId(fieldNum(UnitOfMeasureConversion, FromUnitOfMeasure), fieldNum(UnitOfMeasureConversion, ToUnitOfMeasure));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllCachesWithNonExistingConversion</Name>
				<Source><![CDATA[
    private void deleteAllCachesWithNonExistingConversion()
    {
        if (UnitOfMeasureConversionCacheInvalidatorService::mustCleanConversionCache())
        {
            int deletedCaches = this.deleteAllCachesWithNonExistingConversionFromMatchFrom();
        
            deletedCaches += this.deleteAllCachesWithNonExistingConversionFromMatchTo();
        
            if (deletedCaches)
            {
                this.clearMemoryCaches();
            }   
 
            info(strFmt("@SCM:UnitOfMeasureCacheInvalidationDeteletedRecords", deletedCaches));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCleanConversionCache</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean mustCleanConversionCache()
    {
        UnitOfMeasureConversionCache conversionCache;

        select firstonly RecId from conversionCache;

        return (conversionCache.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMemoryCaches</Name>
				<Source><![CDATA[
    private void clearMemoryCaches()
    {
        classFactory.globalObjectCache().clear(UnitOfMeasureConversion::ProductSpecificConversionCacheScope());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>