<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineProjTableImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>ProjTable</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(ProjTable)),
 TaxModelDocumentLineAttribute(tableStr(ProjInvoiceTable)),
 TaxModelDocumentLineAttribute(tableStr(ProjJournalTrans))]
public class TaxModelDocLineProjTableImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        TableId mainTable = this.getDocumentLineMainTableId();

        if (mainTable == tableNum(ProjJournalTrans))
        {
            return super();
        }

        else if (mainTable == tableNum(ProjEmplTrans)
            || mainTable == tableNum(TmpProjAdjustment)
            || mainTable == tableNum(ProjRevenueTrans))
        {
            return NoYes::No;
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        TmpProjAdjustmentCreate tmpProjAdjustmentCreate;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            tmpProjAdjustmentCreate = documentLineMap.SourceTableId == tableNum(TmpProjAdjustmentCreate) ? documentLineMap : null;

            return tmpProjAdjustmentCreate.InventDimId;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <param name = "_type">The transaction tax information type.</param>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from company address.
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        if (this.isBasedOnReferenceTaxModelDocLine())
        {
            return this.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(_type);
        }
        else
        {
            DirPartyLocation dirPartyLocation;
            dirPartyLocation = DirPartyLocation::findPrimaryPartyLocation(CompanyInfo::current());
            return LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    public CustTable getCustTable()
    {
        CustTable               custTable;
        TmpProjAdjustmentCreate tmpProjAdjustmentCreate;
        LedgerJournalTrans      ledgerJournalTrans;
        ProjJournalTrans        projJournalTrans;
        TableId                 docLineMainTableId = this.getDocumentLineMainTableId();

        custTable = super();

        if (docLineMainTableId == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = this.getDocumentLineOriginalTable();
            ledgerJournalTrans      = LedgerJournalTrans::findRecId(ProjCostTrans::find(tmpProjAdjustmentCreate.TransId).LedgerJournalTrans, false);

            if (tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::Cost) && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
            {
                custTable = ledgerJournalTrans.findCustForOffset();
            }
            else
            {
                custTable = CustTable::find(ProjTable::find(tmpProjAdjustmentCreate.ProjId).CustAccount);
            }
        }
        else if (docLineMainTableId == tableNum(ProjJournalTrans))
        {
            projJournalTrans = documentLineMap;
            custTable = CustTable::find(ProjTable::find(projJournalTrans.ProjId).CustAccount);
        }
        else if (docLineMainTableId == tableNum(ProjTable))
        {
            custTable = CustTable::find(ProjTable::findRecId(documentLineMap.RecId).CustAccount);
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    public VendTable getVendTable()
    {
        VendTable                 vendTable;
        TmpProjAdjustmentCreate   tmpProjAdjustmentCreate;
        LedgerJournalTrans        ledgerJournalTrans;

        vendTable = super();

        if (this.getDocumentLineMainTableId() == tableNum(TmpProjAdjustmentCreate))
        {
            tmpProjAdjustmentCreate = this.getDocumentLineOriginalTable();
            ledgerJournalTrans      = LedgerJournalTrans::findRecId(ProjCostTrans::find(tmpProjAdjustmentCreate.TransId).LedgerJournalTrans, false);

            if (tmpProjAdjustmentCreate.checkAdjustmentType(ProjAdjustmentType::Cost) && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                vendTable = ledgerJournalTrans.findVendForOffset();
            }
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        TableId mainTableId = this.getDocumentLineMainTableId();
        if (mainTableId == tableNum(ProjJournalTrans))
        {
            ProjJournalTrans projJournalTrans = documentLineMap;
            return projJournalTrans.TransDate;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        TableId mainTableId = this.getDocumentLineMainTableId();
        if (mainTableId == tableNum(ProjJournalTrans))
        {
            ProjJournalTrans projJournalTrans = documentLineMap;
            return projJournalTrans.TransDate;
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>