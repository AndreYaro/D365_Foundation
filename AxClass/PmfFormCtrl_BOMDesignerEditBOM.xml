<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMDesignerEditBOM</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMDesignerEditBOM</c>
/// </summary>
public class PmfFormCtrl_BOMDesignerEditBOM
    extends PmfFormCtrl
{

    private BOMVersion bomVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bom</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the buffer as a typed BOM record
    /// </summary>
    /// <returns>
    /// The buffer as a BOM record
    /// </returns>
    private BOM bom()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMVersion</Name>
				<Source><![CDATA[
    internal BOMVersion parmBOMVersion(BOMVersion _bomVersion = bomVersion)
    { 
        bomVersion = _bomVersion;

        return bomVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the modification of fields for the BOM datasource
    /// </summary>
    /// <param name="_fieldId">
    /// The id of the field that has changed
    /// </param>
    public void fieldModified(fieldId _fieldId)
    {
        BOM     bom = this.bom();

        super(_fieldId);

        switch (_fieldId)
        {
            case fieldNum(BOM, PmfPctEnable):
                this.pctEnableModified(bom, bomVersion);
                break;

            case fieldNum(BOM, PmfFormulaPct):
                this.formulaPctModified(bom, bomVersion);
                break;

            case fieldNum(BOM, PmfScalable):
                this.scalableModified(bom, bomVersion);
                break;

            case fieldNum(BOM, UnitId):
                if (this.isFormulaEnabled())
                {
                    this.unitIdModified(bom, bomVersion, this.parmFormDataSource());
                }
                break;

            default:
            // break
        }

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPost</Name>
				<Source><![CDATA[
	/// <summary>
    /// Method to be called after the form element has been initialized
    /// </summary>
    /// <remarks>
    /// Creates and initializes the form button manager and adjusts various
    /// properties for the usage of the form with formulas
    /// </remarks>
    public void initPost()
    {
        super();

        this.updateDesign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, GrpIdentification)),
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, BOMId)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@SYS672");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, GrpIdentification)),
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, ItemBOMId)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO97");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, GrpConsumptionCalculation)),
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, Formula)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isBOMEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, Consumption)),
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, BOMQtySerie)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isBOMEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, PmfFormulaGroup)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);

        if (!FeatureStateProvider::isFeatureEnabled(ReqItemSubstitutionForBOMInPlanningOptimizationFeature::instance()))
        {
            this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, PmfPlanGroup)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                ButtonRuleEffectType::Visible);
        }

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, ConfigGroupId)),
                methodstr(PmfFormCtrl_BOMDesignerEditBOM, isBOMEnabled),
                ButtonRuleEffectType::Visible);

        if (this.isCatchWeightEnabled())
        {
            this.registerCtrlRule(
                    formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, Consumption)),
                    formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, BOM_PdsCWQty)),
                    methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRule(
                    formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, Consumption)),
                    formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, BOM_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);

            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formcontrolstr(BOMDesignerEditBOM, BOM_PdsCWUnitId)),
                    methodstr(PmfFormCtrl_BOMDesignerEditBOM, isFormulaEnabled),
                    ButtonRuleEffectType::Visible);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBOMEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the BOM record belongs to a regular BOM
    /// </summary>
    /// <returns>
    /// true, if the record is a regular BOM record
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public boolean isBOMEnabled()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the BOM record belongs to a formula
    /// </summary>
    /// <returns>
    /// true, if the record is a formula record
    /// </returns>
    /// <remarks>
    /// This method is mostly used for the button manager to determine the states of various controls
    /// </remarks>
    public boolean isFormulaEnabled()
    {
        boolean ret = false;

        if (formRun.args().parmEnum() == PmfBOMFormula::Formula)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPctEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>PmfPctEnable</c> flag is set for the BOM line
    /// </summary>
    /// <returns>
    /// true if the flag is set
    /// </returns>
    public boolean isPctEnabled()
    {
        boolean     ret = false;
        BOM         bom;
        Common      common = this.callerBuffer();

        if (common.TableId == tablenum(BOM))
        {
            bom = common;
            ret = bom.PmfPctEnable;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PdsCWFormCtrl   cwFormCtrl;

        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);

        if (this.isCatchWeightEnabled())
        {
            cwFormCtrl = PdsCWFormCtrl_Std::construct();
            this.addSubFormCtrl(cwFormCtrl);
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(BOM,bomQty),
                    fieldnum(BOM,PdsCWQty),
                    false,
                    fieldnum(BOM,UnitId)]]
                ));
            cwFormCtrl.parmItemFieldId(fieldnum(BOM,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(BOM, pdsCWUnitId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to be called before the actual run method of the form element
    /// </summary>
    public void runPre()
    {
        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@SCM:EditFormulaLine");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the form design
    /// </summary>
    public void updateDesign()
    {
        boolean isVariable = buffer.(fieldnum(BOM,bomConsump))
                                == BOMConsumpType::Variable;
        boolean isCatchWeight = PdsGlobal::pdsIsCWItem(buffer.(fieldnum(BOM, ItemId)));
        boolean isPctEnabled = buffer.(fieldnum(BOM,PmfPctEnable));
        boolean isReqItemSubstitutionForBOMInPlanningOptimizationFeatureEnabled = FeatureStateProvider::isFeatureEnabled(ReqItemSubstitutionForBOMInPlanningOptimizationFeature::instance());

        super();

        this.visibleDSField(
            fieldnum(BOM, PmfPctEnable),
            this.isFormulaEnabled());

        this.visibleDSField(
            fieldnum(BOM, PmfScalable),
            this.isFormulaEnabled());

        this.visibleDSField(
            fieldnum(BOM, PmfFormulaPct),
            this.isFormulaEnabled());

        this.visibleDSField(
            fieldnum(BOM, PmfPlanGroupId),
            this.isFormulaEnabled() || isReqItemSubstitutionForBOMInPlanningOptimizationFeatureEnabled);

        this.visibleDSField(
            fieldnum(BOM, PmfPlanGroupPriority),
            this.isFormulaEnabled() || isReqItemSubstitutionForBOMInPlanningOptimizationFeatureEnabled);

        this.enableDSField(fieldnum(BOM, PmfPctEnable),
            (isVariable && !isCatchWeight));

        this.enableDSField(fieldnum(BOM, PmfScalable),
            (isVariable && !isPctEnabled && !isCatchWeight));

        this.enableDSField(fieldnum(BOM, PmfFormulaPct),
            (isVariable && isPctEnabled && !isCatchWeight));

        this.visibleDSField(fieldnum(BOM, PdsCWQty), this.isFormulaEnabled());

        this.enableDSField(fieldnum(BOM,ScrapVar),!isCatchWeight);
        this.enableDSField(fieldnum(BOM,ScrapConst),!isCatchWeight);
        this.enableDSField(fieldnum(BOM,RoundUp),!isCatchWeight);
        this.enableDSField(fieldnum(BOM,RoundUpQty),!isCatchWeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMDesignerEditBOM construct()
    {
        return new PmfFormCtrl_BOMDesignerEditBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_BOMDesignerEditBOM newFromForm(FormRun _formRun)
    {
        PmfFormCtrl_BOMDesignerEditBOM frmCtrl;

        frmCtrl = PmfFormCtrl_BOMDesignerEditBOM::construct();
        frmCtrl.parmFormRun(_formRun);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>