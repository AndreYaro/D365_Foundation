<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestCertOfAnalysis</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTestCertOfAnalysis</c> class is a controller class for the
///    <c>InventTestCertOfAnalysis</c> report. report.
/// </summary>
public class InventTestCertOfAnalysis extends SrsReportRunController implements BatchRetryable
{
    #define.MaxRange(100)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        this.setQueryRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets ranges for a query for the <c>InventTestCertOfAnalysis</c> report.
    /// </summary>
    private void setQueryRange()
    {
        FormDataSource                  formDataSource = null;
        int                             maxRemaining = #MaxRange;
        str                             queryString;

        Query query = this.getFirstQuery();
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(InventTestCertOfAnalysisTable));
        QueryBuildRange queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(InventTestCertOfAnalysisTable,InventCertificateOfAnalysisId));

        InventTestCertOfAnalysisTable inventTestCertOfAnalysisTableCaller = this.parmArgs().record() as InventTestCertOfAnalysisTable;
        if (FormDataUtil::getFormDataSource(inventTestCertOfAnalysisTableCaller))
        {
            formDataSource = FormDataUtil::getFormDataSource(inventTestCertOfAnalysisTableCaller);
        }
        if (!formDataSource && inventTestCertOfAnalysisTableCaller.RecId)
        {
            queryBuildRange.value(queryValue(inventTestCertOfAnalysisTableCaller.InventCertificateOfAnalysisId));
        }
        else if (formDataSource)
        {
            for (inventTestCertOfAnalysisTableCaller = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : formDataSource.cursor();
                    inventTestCertOfAnalysisTableCaller; inventTestCertOfAnalysisTableCaller = formDataSource.getNext())
            {
                if (maxRemaining == 0)
                {
                    warning(strFmt("@SYS114377", #MAXRANGE));
                    break;
                }
                maxRemaining--;
                queryString = queryRangeConcat(queryString, queryValue(inventTestCertOfAnalysisTableCaller.InventCertificateOfAnalysisId));
            }
            queryBuildRange.value(queryString);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTestCertOfAnalysis construct()
    {
        return new InventTestCertOfAnalysis();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>SRSReportRun</c> class, assigns range values, and runs the
    ///    <c>SRSReportRun</c> object.
    /// </summary>
    /// <param name="_args">
    ///    The args object.
    /// </param>
    /// <remarks>
    ///    This method assigns the <c>InventTestCertOfAnalysis</c> range with the specified values.
    /// </remarks>
    public static void main(Args _args)
    {
        InventTestCertOfAnalysis controller = InventTestCertOfAnalysis::newFromArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>InventTestCertOfAnalysis</c> class.
    /// </summary>
    /// <param name="_args">
    /// Any input arguments.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventTestCertOfAnalysis</c> class.
    /// </returns>
    public static InventTestCertOfAnalysis newFromArgs(Args _args)
    {
        if (!_args || !(_args.record() is InventTestCertOfAnalysisTable))
        {
            throw(error(strFmt("@SYS113735", classStr(InventTestCertOfAnalysis), tableStr(InventTestCertOfAnalysisTable))));
        }

        InventTestCertOfAnalysis controller = InventTestCertOfAnalysis::construct();
        controller.parmReportName(ssrsReportStr(InventTestCertOfAnalysis, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>