<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQuarantineMulti</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventQuarantineMulti extends RunBaseMultiParm implements BatchRetryable
{
    InventParmQuarantineOrder      standardParmQuarantineOrder;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        standardParmQuarantineOrder
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class where the same parameters can be used
    ///    repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    ///    classes might build on data that is only valid for a short time. Running a class twice with the
    ///    same parameters is not always possible. If the return value of the <see
    ///    cref="M:RunBaseBatch.canGoBatch" /> method is false this method will not have any effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _inventQuarantineOrder)
    {
        InventQuarantineOrder inventQuarantineOrder = _inventQuarantineOrder as InventQuarantineOrder;
        return ! InventParmQuarantineOrder::exist(parmId,inventQuarantineOrder.QuarantineId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides a way to clean up after a dialog box has been canceled.
    /// </summary>
    void cleanupDialog()
    {
        InventParmQuarantineOrder::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        InventParmQuarantineOrder  inventParmQuarantineOrder;

        return inventParmQuarantineOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    FormName formName()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _inventParmQuarantineOrder)
    {
        InventParmQuarantineOrder inventParmQuarantineOrder = _inventParmQuarantineOrder;
        InventParmQuarantineOrder saveInventParmQuarantineOrder;
        saveInventParmQuarantineOrder.data(inventParmQuarantineOrder);
        inventParmQuarantineOrder.data(standardParmQuarantineOrder);

        inventParmQuarantineOrder.ParmId           = saveInventParmQuarantineOrder.ParmId;
        inventParmQuarantineOrder.RecId            = saveInventParmQuarantineOrder.RecId;
        inventParmQuarantineOrder.LineNum          = saveInventParmQuarantineOrder.LineNum;
        inventParmQuarantineOrder.QuarantineId     = saveInventParmQuarantineOrder.QuarantineId;
        inventParmQuarantineOrder.JobStatus        = saveInventParmQuarantineOrder.JobStatus;
        inventParmQuarantineOrder.ExecutedDateTime = saveInventParmQuarantineOrder.ExecutedDateTime;

        inventParmQuarantineOrder.Qty              = saveInventParmQuarantineOrder.Qty;

        inventParmQuarantineOrder.PdsCWQty =
            saveInventParmQuarantineOrder.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(
        Common       _inventQuarantineOrder,
        ParmBuffer   _inventParmQuarantineOrder
        )
    {
        InventQuarantineOrder inventQuarantineOrder = _inventQuarantineOrder as InventQuarantineOrder;
        InventParmQuarantineOrder inventParmQuarantineOrder = _inventParmQuarantineOrder;
        super(_inventQuarantineOrder,_inventParmQuarantineOrder);

        inventParmQuarantineOrder.QuarantineId = inventQuarantineOrder.QuarantineId;
        inventParmQuarantineOrder.Qty          = inventQuarantineOrder.RemainQty;

        inventParmQuarantineOrder.PdsCWQty = inventQuarantineOrder.PdsCWRemainQty;

        inventParmQuarantineOrder.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return InventParmQuarantineOrder::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer  _standard  = standardParmQuarantineOrder)
    {
        standardParmQuarantineOrder = _standard;

        return standardParmQuarantineOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        InventParmQuarantineOrder  inventParmQuarantineOrder;

        if (! this.validate())
            throw error("@SYS18447");

        select inventParmQuarantineOrder
            index ParmLineIdx
            where inventParmQuarantineOrder.ParmId  == parmId;

        while (inventParmQuarantineOrder)
        {
            try
            {
                this.runUpdate(inventParmQuarantineOrder);
                this.addUpdateRec(InventQuarantineOrder::find(inventParmQuarantineOrder.QuarantineId));
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::Error)
            {
                exceptionTextFallThrough();
            }
            next inventParmQuarantineOrder;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    true always.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    void runUpdate(InventParmQuarantineOrder      _inventParmQuarantineOrder)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version     = conPeek(_packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                standardParmQuarantineOrder.TransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
                ret = super(base);
                break;
            default :
                this.initParmDefault();
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS58429";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>