<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationDelete extends RunBaseBatch implements BatchRetryable
{
    Counter                     progressCounter;
    Counter                     recordsDeleted;

    boolean                     multiForm;

    QuotationType               quotationType;

    ParmId                      parmId;
    TransDate                   transDate;

    QueryRun                    chooseLines;
    container                   chooseLinesPacked;

    boolean                     showQueryForm;
    boolean                     showDialog;

    SalesQuotationTable         salesQuotationTable;
    SalesQuotationParmTable     salesQuotationParmTable;

    QuotationIdBase             quotationId;

    FormDataSource              salesQuotationDeleteDatasource;

    #define.currentVersion(4)
    #LOCALMACRO.ParmList
        parmId,
        salesQuotationTable,
        quotationType,
        showQueryForm,
        multiForm,
        transDate,
        chooseLinesPacked
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchType</Name>
				<Source><![CDATA[
    SalesBatch batchType()
    {
        return SalesBatch::Delete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog box can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class two times with the
    /// same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" /> is false, this
    /// method will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLines</Name>
				<Source><![CDATA[
    void  chooseLines()
    {
        SalesQuotationParmTable     localSalesQuotationParmTable;

        QuotationIdBase             localQuotationId = '';

        while (chooseLines.next())
        {
            SalesQuotationLine localSalesQuotationLine = chooseLines.get(tablenum(SalesQuotationLine));
            SalesQuotationTable localSalesQuotationTable = chooseLines.get(tablenum(SalesQuotationTable));

            if (localSalesQuotationTable.isIntegrationOwnerDynamics365Sales())
            {
                continue;
            }

            if (localQuotationId != localSalesQuotationTable.QuotationId)
            {
                localSalesQuotationParmTable.clear();
                this.createParmTable(localSalesQuotationParmTable, localSalesQuotationTable);
                localSalesQuotationParmTable.insert();
            }

            if (localSalesQuotationLine)
            {
                this.createParmLine(localSalesQuotationLine, localSalesQuotationParmTable);
            }

            localQuotationId = localSalesQuotationTable.QuotationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cleans up after a dialog box has been canceled.
    /// </summary>
    void  cleanupDialog()
    {
        SalesQuotationParmTable::deleteWithoutUpdate(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmLine</Name>
				<Source><![CDATA[
    void  createParmLine(SalesQuotationLine         _salesQuotationLine,
                         SalesQuotationParmTable    _salesQuotationParmTable)
    {
        SalesQuotationParmLine      salesQuotationParmLine;

        if (_salesQuotationLine.RecId)
        {
            salesQuotationParmLine.clear();
            salesQuotationParmLine.initFromParmTable(_salesQuotationParmTable);
            salesQuotationParmLine.initFromSalesQuotationLine(_salesQuotationLine);

            salesQuotationParmLine.ParmId = this.parmId();

            salesQuotationParmLine.DeliverNow = _salesQuotationLine.SalesQty;
            salesQuotationParmLine.setLineAmount(_salesQuotationLine);
            salesQuotationParmLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createParmTable</Name>
				<Source><![CDATA[
    void createParmTable(SalesQuotationParmTable    _salesQuotationParmTable,
                         SalesQuotationTable        _salesQuotationTable)
    {
        _salesQuotationParmTable.initFromSalesQuotationTable(_salesQuotationTable);

        _salesQuotationParmTable.Transdate              = this.parmTransDate();
        _salesQuotationParmTable.ParmId                 = this.parmId();
        _salesQuotationParmTable.Ordering               = this.documentStatus();
        _salesQuotationParmTable.BatchType              = this.batchType();
        _salesQuotationParmTable.BatchAdministration    = this.parmMultiForm();
        _salesQuotationParmTable.ParmJobStatus          = ParmJobStatus::Waiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteQuotations</Name>
				<Source><![CDATA[
    boolean  deleteQuotations()
    {
        boolean deleted = false;

        this.displayProgress();

        if (salesQuotationTable.validateDelete())
        {
            ttsbegin;

            salesQuotationTable.delete();
            this.postUpdate();
            deleted=true;

            ttscommit;
        }

        return deleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Args            parameters = new Args();

        parameters.name(formstr(SalesQuotationDeleteQuotations));
        parameters.caller(this);
        FormRun salesQuotationDelete = classfactory.formRunClass(parameters);

        salesQuotationDelete.init();

        if (showDialog)
        {
            return salesQuotationDelete;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    void displayProgress()
    {
        this.progressUpdate(strfmt("@SYS50878",salesQuotationTable.QuotationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLinesQuery</Name>
				<Source><![CDATA[
    void  initLinesQuery()
    {
        SalesQuotationDelete salesQuotationDeleteServer;

        this.updateQueryBuildSalesQuotationTable();

        if (chooseLines.prompt())
        {
            SalesQuotationParmTable::deleteWithoutUpdate(parmId);
            this.chooseLines();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSalesQuotationTable</Name>
				<Source><![CDATA[
    void  initParmSalesQuotationTable(SalesQuotationTable  _salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        if (! salesQuotationTable)
        {
            multiForm = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linesToDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the number of lines to be deleted.
    /// </summary>
    /// <returns>
    ///    The number of lines to be deleted.
    /// </returns>
    private NumberOfRecords linesToDelete()
    {
        select count(RecId) from salesQuotationParmTable
            where salesQuotationParmTable.ParmId == parmId  &&
            salesQuotationParmTable.ParmJobStatus == ParmJobStatus::Waiting;

        return salesQuotationParmTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(boolean  getParmId = true)
    {
        super();

        showQueryForm       = false;
        showDialog          = true;

        if (getParmId)
        {
            parmId = NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        this.packChooseLines();
        return [#CurrentVersion,#ParmList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packChooseLines</Name>
				<Source><![CDATA[
    protected void packChooseLines()
    {
        if (chooseLines)
        {
            chooseLinesPacked = chooseLines.pack();
        }
        else
        {
            chooseLinesPacked = connull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    ParmId  parmId(ParmId  _parmId = parmId)
    {
        parmId = _parmId;

        return parmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultiForm</Name>
				<Source><![CDATA[
    boolean parmMultiForm(boolean  _multiForm = multiForm)
    {
        multiForm = _multiForm;

        return multiForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuotationType</Name>
				<Source><![CDATA[
    QuotationType parmQuotationType(QuotationType _quotationType = quotationType)
    {
        quotationType   =   _quotationType;
        return quotationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowQueryForm</Name>
				<Source><![CDATA[
    boolean  parmShowQueryForm(boolean  _showQueryForm = showQueryForm)
    {
        showQueryForm = _showQueryForm;

        return showQueryForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    TransDate parmTransDate(TransDate  _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    void  postUpdate()
    {
        SalesQuotationParmTable parmTable = SalesQuotationParmTable::find(salesQuotationParmTable.QuotationId,
                                                                          salesQuotationParmTable.ParmId,
                                                                          true);
        parmTable.updateParmJobStatusExecuted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptInit</Name>
				<Source><![CDATA[
    void prePromptInit()
    {
        if (salesQuotationTable)
        {
            this.parmShowQueryForm(false);
            this.initLinesQuery();
        }
        else
        {
            this.parmShowQueryForm(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    void progressUpdate(str text)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(text);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildParmTable</Name>
				<Source><![CDATA[
    QueryRun  queryBuildParmTable(ParmId    _parmId)
    {
        Query query = new Query();
        QueryBuildDataSource dataSource = query.addDataSource(tablenum(SalesQuotationParmTable));
        dataSource.update(true);

        dataSource.addRange(fieldnum(SalesQuotationParmTable, QuotationId));
        dataSource.addRange(fieldnum(SalesQuotationParmTable, ParmId)).value(queryValue(_parmId));
        dataSource.addRange(fieldnum(SalesQuotationParmTable, ParmJobStatus)).value(queryValue(ParmJobStatus::Waiting));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQuotationStatusQueryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds query range for <c>SalesQuotationStatus</c>.
    /// </summary>
    /// <param name = "_salesQuotationTabledataSource">A <c>QueryBuildDataSource</c> object.</param>
    protected void addQuotationStatusQueryRange(QueryBuildDataSource _salesQuotationTabledataSource)
    {
        QueryBuildRange queryBuildRangeStatus = _salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, QuotationStatus));
        queryBuildRangeStatus.value(queryValue(SalesQuotationStatus::Created)+", "+queryValue(SalesQuotationStatus::Confirmed)+", "+queryValue(SalesQuotationStatus::Lost)+", "+queryValue(SalesQuotationStatus::Cancelled));
        queryBuildRangeStatus.status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    QueryRun  queryBuildSalesQuotationTable()
    {
        chooseLines = new QueryRun(querystr(SalesQuotationUpdate));
        QueryBuildDataSource salesQuotationTabledataSource = chooseLines.query().dataSourceTable(tablenum(SalesQuotationTable));

        this.addQuotationStatusQueryRange(salesQuotationTabledataSource);

        QueryBuildRange queryBuildRangeType = salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, QuotationType));
        queryBuildRangeType.value(queryValue(quotationType));
        queryBuildRangeType.status(RangeStatus::Locked);

        QueryBuildRange queryBuildRangeTemplate = salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, TemplateName));
        queryBuildRangeTemplate.value(SysQuery::valueEmptyString());
        queryBuildRangeTemplate.status(RangeStatus::Locked);

        salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, QuotationId));
        salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, CustAccount));
        salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, CreatedDateTime));
        salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, QuotationExpiryDate));
        salesQuotationTabledataSource.addRange(fieldnum(SalesQuotationTable, BusRelAccount));

        QueryBuildDataSource salesQuotationLinedataSource = chooseLines.query().dataSourceTable(tablenum(SalesQuotationLine));
        salesQuotationLinedataSource.joinMode(JoinMode::OuterJoin);

        salesQuotationLinedataSource.addSortField(fieldnum(SalesQuotationLine, QuotationId));
        salesQuotationLinedataSource.addSortField(fieldnum(SalesQuotationLine, LineNum));

        chooseLines.query().dataSourceTable(tablenum(InventDim)).joinMode(JoinMode::OuterJoin);

        if (quotationType == QuotationType::Project)
        {
            SalesQuotation_ProjUtils::addExternalProjectFiltering(chooseLines.query());
        }

        chooseLines.title("@SYS84498");

        return chooseLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void  run()
    {
        #OCCRetryCount
        Counter                             infoLogCounter = infolog.num();
        smmQuotationAlternativeQuotations   alternativeQuotations;

        if (chooseLines != null && !SalesQuotationParmTable::existParmIdJobWaiting(parmId))
        {
            this.chooseLines();
        }

        NumberOfRecords numberOfLinesToDelete = this.linesToDelete();

        if (SalesParameters::find().CancelSales == NoYes::Yes)
        {
            this.progressInit("@SYS84604", numberOfLinesToDelete, #AviFileDel);
        }
        else
        {
            this.progressInit("@SYS84604", numberOfLinesToDelete, #AviFileDelr);
        }

        progress.setText("@SYS26577");
        setprefix("@SYS84498");
        QueryRun query = this.queryBuildParmTable(parmId);

        try
        {
            ttsbegin;
            query.reset();

            while (query.next())
            {
                salesQuotationParmTable = query.get(tablenum(SalesQuotationParmTable));
                salesQuotationTable     = salesQuotationParmTable.salesQuotationTable(true);

                //Delete alternative quotations that are linked.
                delete_from alternativeQuotations
                    where alternativeQuotations.QuotationId       == salesQuotationParmTable.QuotationId ||
                          alternativeQuotations.LinkedQuotationId == salesQuotationParmTable.QuotationId;

                if (salesQuotationTable)
                {
                    ttsbegin;
                    setprefix(#PreFixField(SalesQuotationTable, quotationId));
                    if (!this.deleteQuotations())
                    {
                        this.updateParmJobStatusContainErrors(infolog.copy(infoLogCounter+1,infolog.num()));
                        infoLogCounter = infolog.num();
                    }
                    recordsDeleted++;
                    ttscommit;
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            this.updateParmJobStatusContainErrors(infolog.copy(infoLogCounter+1,infolog.num()));
            infoLogCounter = infolog.num();
        }

        progress = null;
        if (recordsDeleted > 0)
        {
            info(strfmt("@SYS99551",recordsDeleted));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will run by using the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// true if the batch job is run on the AOS server by using the submitting user account; false if the
    /// batch job will be executed on the client.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that cause this method to return true must not access any client-side
    /// functionality. If true is returned, the batch server will execute the job by using the <c>runAs</c>
    /// method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesQuotationDeleteDataSource</Name>
				<Source><![CDATA[
    void  setSalesQuotationDeleteDataSource(FormDataSource      _dataSource)
    {
        salesQuotationDeleteDatasource = _dataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion  :
                [version,#ParmList] = packedClass;
                if (chooseLinesPacked != connull())
                {
                    chooseLines = new QueryRun(chooseLinesPacked);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParmJobStatusContainErrors</Name>
				<Source><![CDATA[
    void updateParmJobStatusContainErrors(container errorText)
    {
        ttsbegin;

        salesQuotationParmTable = SalesQuotationParmTable::find(salesQuotationParmTable.QuotationId,
                                                                salesQuotationParmTable.ParmId,
                                                                true);

        salesQuotationParmTable.Log = Info::infoCon2Str(errorText);
        salesQuotationParmTable.updateParmJobStatusContainErrors();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuildSalesQuotationTable</Name>
				<Source><![CDATA[
    void  updateQueryBuildSalesQuotationTable()
    {
        chooseLines = this.queryBuildSalesQuotationTable();

        if (salesQuotationTable)
        {
            chooseLines.query().dataSourceTable(tablenum(SalesQuotationTable)).rangeField(fieldnum(SalesQuotationTable, QuotationId)).value(queryValue(salesQuotationTable.QuotationId));
            chooseLines.query().dataSourceTable(tablenum(SalesQuotationTable)).rangeField(fieldnum(SalesQuotationTable, CustAccount)).value(queryValue(salesQuotationTable.CustAccount));
        }

        chooseLines.query().interactive(showQueryForm);
        chooseLines.saveUserSetup(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Overrides the <c>Validate</c> method to add a confirmation dialog box
    /// </summary>
    /// <param name="calledFrom">
    ///    The caller.
    /// </param>
    /// <returns>
    ///    true if the <c>run</c> method should be called; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret)
        {
            ret = this.linesToDelete() > 0;
            if (ret)
            {
                ret = (Box::yesNo("@SYS84649",DialogButton::No) == DialogButton::Yes);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesQuotationDelete construct(boolean  getParmId = true)
    {
        return new SalesQuotationDelete(getParmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS84498";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  args)
    {
        SalesQuotationTable         salesQuotationTable;
        Object                      salesQuotationTable_ds;

        if (!args)
            throw error("@SYS25407");

        Common callerRecord = args.record();

        SalesQuotationDelete salesQuotationDelete = SalesQuotationDelete::construct();
        ParmId parmId = salesQuotationDelete.parmId();

        salesQuotationDelete.getLast();
        salesQuotationDelete.parmId(parmId);
        salesQuotationDelete.parmTransDate(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        salesQuotationDelete.parmQuotationType(args.parmEnum());

        if (callerRecord)
        {
            switch (callerRecord.TableId)
            {
                case(tablenum(SalesQuotationTable))  :  salesQuotationTable = callerRecord;
                                                        salesQuotationDelete.initParmSalesQuotationTable(salesQuotationTable);
                                                        salesQuotationTable_ds = FormDataUtil::getFormDataSource(salesQuotationTable);
                                                        break;
            }

            salesQuotationDelete.parmMultiForm(true);
        }

        salesQuotationDelete.prePromptInit();
        if (salesQuotationDelete.prompt())
        {
            salesQuotationDelete.runOperation();
        }

        if (salesQuotationTable_ds)
        {
            boolean recordExists = SalesQuotationTable::exist(salesQuotationTable.QuotationId);
            SalesQuotationDelete::updateCallerDataSource(salesQuotationTable_ds, recordExists);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerDataSource</Name>
				<Source><![CDATA[
    protected static void  updateCallerDataSource(Object _salesQuotationTable_ds,
                                                         boolean _recordExists)
    {
        if (_recordExists)
        {
            _salesQuotationTable_ds.reRead();
            _salesQuotationTable_ds.reFresh();
            if (formDataSourceHasMethod(_salesQuotationTable_ds, identifierstr(editQuotation)))
            {
                _salesQuotationTable_ds.editQuotation();
            }
            if (formDataSourceHasMethod(_salesQuotationTable_ds, identifierstr(reReadLines)))
            {
                _salesQuotationTable_ds.reReadLines();
            }
        }
        else
        {
            _salesQuotationTable_ds.reSearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>