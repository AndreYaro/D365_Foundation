<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsProdPutWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsProdPutWorkTransactionType</c> class handles logic specific to the finished goods put away work transaction type.
/// </summary>
[WhsWorkTransTypeStrategyFactory(WHSWorkTransType::ProdPut)]
class WhsProdPutWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    public boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundClusterSupported</Name>
				<Source><![CDATA[
    internal boolean isInboundClusterSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locationDirectiveQueryName</Name>
				<Source><![CDATA[
    public QueryName locationDirectiveQueryName(WHSLocDirTable _whsLocDirTable)
    {
        switch (_whsLocDirTable.LocateBy)
        {
            case WHSLocDirLocateBy::Cluster:
                return queryStr(WHSWork);
        }
        
        return queryStr(WHSLocDirProdPut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTemplateQueryName</Name>
				<Source><![CDATA[
    public QueryName workTemplateQueryName(WHSWorkTemplateTable _whsWorkTemplateTable)
    {
        return queryStr(WHSWorkTemplateProdPut);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    public WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return WHSWorkExecuteMode::FinishedGoodsPutaway;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLocationDirectiveQuery</Name>
				<Source><![CDATA[
    public void buildLocationDirectiveQuery(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        this.addInventTransIdRange(_parameters.inventTransId, _parameters.query, tableNum(ProdTable), fieldNum(ProdTable, InventTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceOrder</Name>
				<Source><![CDATA[
    public void openSourceOrder(WHSWorkTable _whsWorkTable)
    {
        super(_whsWorkTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceOrderMenuItemDisplayStr</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str sourceOrderMenuItemDisplayStr()
    {
        return menuitemDisplayStr(ProdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceOrderByWorkOrder</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common findSourceOrderByWorkOrder(WHSWorkOrderInterface _workOrder)
    {
        return ProdTable::find(_workOrder.parmOrderNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public container findOrderedAndRemainQty(WhsWorkTable _whsWorkTable, WhsWorkLine _whsWorkLine)
    {
        ProdTable prodTable = ProdTable::findTransId(_whsWorkLine.InventTransId);

        if (prodTable.RecId && PdsGlobal::pdsIsCWItem(prodTable.ItemId))
        {
            return [prodTable.PdsCWBatchSched, prodTable.PdsCWRemainInventPhysical];
        }

        return [prodTable.QtySched, prodTable.RemainInventPhysical];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkCenterLocationId</Name>
				<Source><![CDATA[
    public WMSLocationId findWorkCenterLocationId(WhsWorkTable _whsWorkTable)
    {
        ProdRoute prodRoute;

        select firstonly prodRoute
            where prodRoute.ProdId == _whsWorkTable.OrderNum;

        if (prodRoute)
        {
            return WrkCtrTable::find(prodRoute.displayWrkCtrId()).inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).wmsLocationId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        if (_locDirTable.LocateBy == WHSLocDirLocateBy::Cluster)
        {
            QueryBuildDataSource qbdsWorkTable = _query.dataSourceTable(tableNum(WHSWorkTable));
            SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
            SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));
        }
        else
        {
            QueryBuildDataSource qbdsProdTable = _query.dataSourceTable(tableNum(ProdTable));
            QueryBuildDataSource qbdsInventDim = qbdsProdTable.addDataSource(tableNum(InventDim));
            qbdsInventDim.relations(true);
            qbdsInventDim.joinMode(JoinMode::ExistsJoin);

            SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_locDirTable.InventSiteId));
            SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_locDirTable.InventLocationId));
        }
        
        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateSpecificReservationRequired</Name>
				<Source><![CDATA[
    internal boolean isLicensePlateSpecificReservationRequired()
    {
        if (WhsProdPutWorkLPSpecificReservationFlight::instance().isEnabled())
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>