<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOrderPackingSlipDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The data provider class for the <c>InventTransferOrderPackingSlip</c> report.
/// </summary>
[SRSReportQueryAttribute(querystr(InventTransferOrderPackingSlip))]
public class InventTransOrderPackingSlipDP extends SRSReportDataProviderBase
{
    InventTransferOrderPackingSlipProTmp inventTransferOrderPackingSlipProTmp;
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventTransferOrderPackingSlipProTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>PlInventPackageDepositReportTmp</c> table and retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(InventTransferOrderPackingSlipProTmp))
    ]
    public InventTransferOrderPackingSlipProTmp getInventTransferOrderPackingSlipProTmp()
    {
        select inventTransferOrderPackingSlipProTmp;
        return inventTransferOrderPackingSlipProTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyTransfer</Name>
				<Source><![CDATA[
    private InventTransferQty getQtyTransfer(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        InventTransferJour      curInventTransferJour;

        InventTransferLine inventTransferLine = InventTransferLine::find(_inventTransferJourLine.TransferId, _inventTransferJourLine.LineNum);
        InventTransferQty qtyTransfer = inventTransferLine.QtyTransfer;
        while select TransferId, VoucherId, CreatedDateTime from curInventTransferJour
                    order by TransferId, CreatedDateTime
                    where curInventTransferJour.TransferId == _inventTransferJour.TransferId            &&
                        curInventTransferJour.createdDateTime <  _inventTransferJour.createdDateTime
        {
            InventTransferJourLine localInventTransferJourLine = InventTransferJourLine::find( curInventTransferJour.TransferId,
                                                                                               curInventTransferJour.VoucherId,
                                                                                               _inventTransferJourLine.LineNum,
                                                                                               _inventTransferJourLine.InventDimId);
            qtyTransfer -= localInventTransferJourLine.QtyShipped;
        }
        return qtyTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTransferOrderPackingSlipPro</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts data into the <c>InventTransferOrderPackingSlipTmp</c> temporary table.
    /// </summary>
    /// <param name="_inventTransferJour">
    /// The <c>InventTransferJour</c> table object.
    /// </param>
    /// <param name="_inventTransferJourLine">
    /// The <c>InventTransferJourLine</c> table object.
    /// </param>
    private void insertInventTransferOrderPackingSlipPro(InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        InventTransferTable     inventTransferTable     = InventTransferTable::find(_inventTransferJour.TransferId);
        TransportationDocument  transportationDocument  = TransportationDocument::find(inventTransferTable.TransportationDocument);
        InventLocation          inventLocationFrom      = InventLocation::find(_inventTransferJour.InventLocationIdFrom);
        inventLocation          inventLocationTo        = InventLocation::find(_inventTransferJour.InventLocationIdTo);
        // <GEELT>
        // </GEELT>

        str logisticsPostalAddress(InventLocation _inventLocation, LogisticsLocationRoleType _type)
        {
            LogisticsLocation logisticsLocation = LogisticsLocationDefault::findSimpleDefault(_inventLocation,
                                                                                             LogisticsLocationRole::findBytype(_type));
            if (!logisticsLocation.RecId)
            {
                logisticsLocation = LogisticsLocationDefault::findSimpleDefault(_inventLocation,
                                                                               LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery));
            }

            if (logisticsLocation.RecId)
            {
                return LogisticsPostalAddress::findRecId(LogisticsPostalAddress::addressRecIdFromLocationRecId(logisticsLocation.RecId)).Address;
            }

            return "";
        }

        inventTransferOrderPackingSlipProTmp.PackingSlipTxt     = "@GLS112825" + " " + _inventTransferJour.Num_LT;
        DocumentDateTime_LT documentDateTime = _inventTransferJour.createdDateTime;
        documentDateTime = DateTimeUtil::applyTimeZoneOffset(documentDateTime, DateTimeUtil::getUserPreferredTimeZone());
        inventTransferOrderPackingSlipProTmp.DocumentDate       = strFmt("@SYS82282", DateTimeUtil::date(documentDateTime));
        inventTransferOrderPackingSlipProTmp.DocumentTime       = time2StrHMS(DateTimeUtil::time(documentDateTime));

        inventTransferOrderPackingSlipProTmp.SenderName         = inventLocationFrom.Name;
        inventTransferOrderPackingSlipProTmp.SenderAddress      = strRemoveCr(inventLocationFrom.address());
        inventTransferOrderPackingSlipProTmp.PayeeName          = inventLocationTo.Name;
        inventTransferOrderPackingSlipProTmp.PayeeAddress       = strRemoveCr(inventLocationTo.address());

        inventTransferOrderPackingSlipProTmp.ItemId         = _inventTransferJourLine.ItemId;
        inventTransferOrderPackingSlipProTmp.Description    = _inventTransferJourLine.itemName();
        inventTransferOrderPackingSlipProTmp.UnitId         = _inventTransferJourLine.UnitId;

        InventTransferQty qtyTransfer = this.getQtyTransfer(_inventTransferJour, _inventTransferJourLine);
        inventTransferOrderPackingSlipProTmp.QtyTransfer    = qtyTransfer;
        inventTransferOrderPackingSlipProTmp.QtyShipped     = _inventTransferJourLine.QtyShipped;
        inventTransferOrderPackingSlipProTmp.RemainQuantity = qtyTransfer - _inventTransferJourLine.QtyShipped;
        inventTransferOrderPackingSlipProTmp.GrossWeight    = InventTable::find(_inventTransferJourLine.ItemId).grossWeight() * _inventTransferJourLine.QtyShipped;

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            HcmWorker hcmWorker = HcmWorker::find(HcmWorker::userId2Worker(_inventTransferJour.createdBy));
            inventTransferOrderPackingSlipProTmp.WorkerName = hcmWorker.name();
            inventTransferOrderPackingSlipProTmp.WorkerTitle = hcmWorker.title();
        }
        // </GEELT>

        inventTransferOrderPackingSlipProTmp.PrintTransportationDocument = transportationDocument.DoPrintTransportationDocument;
        if (inventTransferOrderPackingSlipProTmp.PrintTransportationDocument)
        {
            inventTransferOrderPackingSlipProTmp.LoadedAddress      = strRemoveCr(logisticsPostalAddress(inventLocationFrom, LogisticsLocationRoleType::Lading_W));
            inventTransferOrderPackingSlipProTmp.UnLoadedAddress    = strRemoveCr(logisticsPostalAddress(inventLocationTo, LogisticsLocationRoleType::Unlading_W));

            inventTransferOrderPackingSlipProTmp.Carrier                = transportationDocument.carrierName();
            TransportationVehicle transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);
            inventTransferOrderPackingSlipProTmp.VehicleModel           = VehicleModelTable_W::find(transportationVehicle.Model).VehicleModel;
            inventTransferOrderPackingSlipProTmp.VehiclePlateNum        = transportationVehicle.PlateNumber;
            inventTransferOrderPackingSlipProTmp.VehicleTrailerNumber   = transportationVehicle.TrailerNumber;
            inventTransferOrderPackingSlipProTmp.Driver                 = transportationVehicle.DriverName;
            inventTransferOrderPackingSlipProTmp.PackageDescription     = transportationDocument.PackageDescription;
            inventTransferOrderPackingSlipProTmp.PackageDangerDegree    = transportationDocument.PackageDangerDegree;
            inventTransferOrderPackingSlipProTmp.IssuedBy               = transportationDocument.issuedByName();
        }
        inventTransferOrderPackingSlipProTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic for the <c>InventTransferOrderPackingSlip</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            InventTransferJour inventTransferJour = queryRun.get(tablenum(InventTransferJour));
            InventTransferJourLine inventTransferJourLine = queryRun.get(tablenum(InventTransferJourLine));

            this.insertInventTransferOrderPackingSlipPro(inventTransferJour, inventTransferJourLine);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
