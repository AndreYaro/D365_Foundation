<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVATDeclReportPurchBookAdd_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerVATDeclReportPurchBookAdd_RU extends LedgerVATDeclReportPurchBook_RU
{
    container   bookRecIdCon;
    container   correctedBookRecIdCon;
    container   bookRecIdConSales;
    container   correctedSalesBookRecIdCon;
    TransDate   startDate, reportDate;
    Counter     startLineNum;
    int         addListNumber;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotal</Name>
				<Source><![CDATA[
    protected AmountMST calcTotal(SalesPurchBookRecId_RU _correctedBookRecId)
    {
        BookAmountsEngine_RU bookAmountsEngine = BookAmountsEngine_RU::constructForCalc(SalesPurch::Purch, _correctedBookRecId);
        PurchBookTrans_RU    purchBookTransCorrect;
        PurchBookTable_RU    purchBookTableCorrect;
        RefRecId             correctedSalesBookRecId;
        SalesBookTrans_RU    salesBookTransCorrect;
        SalesBookTable_RU    salesBookTableCorrect;
        int                  sign;
        AmountMST            totalTaxAmountVAT20, totalTaxAmountVAT10;

        void addCorrectTotal(SalesPurchBookDataMap_RU    salesPurchBookDataMap)
        {
            sign = 1;

            switch (salesPurchBookDataMap.TableId)
            {
                case tablenum(PurchBookTrans_RU) :
                    break;

                case tablenum(SalesBookTrans_RU) :
                    sign = -1;
                    break;
            }
            totalTaxAmountVAT20 += salesPurchBookDataMap.TaxAmountVAT20 * sign;
            totalTaxAmountVAT10 += salesPurchBookDataMap.TaxAmountVAT10 * sign;
        }

        startLineNum += PurchBookAddListReportExcel_RU::getBookLastNum(_correctedBookRecId, groupByFactures);

        bookAmountsEngine.fetchTaxMap();
        totalTaxAmountVAT20 += bookAmountsEngine.getAmountVATStandard().taxAmountVAT() 
            + bookAmountsEngine.getAmountVATStandard20().taxAmountVAT();
        totalTaxAmountVAT10 += bookAmountsEngine.getAmountVATReduced().taxAmountVAT();

        while select purchBookTransCorrect
        where purchBookTransCorrect.CorrectedPurchBookTable_RU == _correctedBookRecId
            && (!purchBookTransCorrect.CorrectedFactureExternalId
                || (purchBookTransCorrect.CorrectedPurchBookTable_RU && purchBookTransCorrect.CorrectionType == FactureCorrectionType_RU::Unknown) //Amount diff factures
                || purchBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionOriginal
                || purchBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionCorrPurch
            )
            && purchBookTransCorrect.RevisionType != FactureRevisionType_RU::RevisionCorrSales
        exists join purchBookTableCorrect
        where purchBookTableCorrect.RecId        == purchBookTransCorrect.PurchBookTable_RU
            && purchBookTableCorrect.ClosingDate <  startDate
            && purchBookTableCorrect.ClosingDate
        {
            addCorrectTotal(purchBookTransCorrect);
        }

        correctedSalesBookRecId = PurchBookTable_RU::find(_correctedBookRecId).findSalesBook().recId;

        if (correctedSalesBookRecId)
        {
            while select salesBookTransCorrect
            where salesBookTransCorrect.CorrectedSalesBookTable_RU == correctedSalesBookRecId
               && salesBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionCorrPurch
            exists join salesBookTableCorrect
            where salesBookTableCorrect.RecId == salesBookTransCorrect.SalesBookTable_RU
               && salesBookTableCorrect.ClosingDate <  startDate
               && salesBookTableCorrect.ClosingDate
            {
                addCorrectTotal(salesBookTransCorrect);
            }

            select count(RecId) from salesBookTransCorrect
            group by PaymentDate, CorrectedFactureDate, CorrectedFactureExternalId,AccountNum, AccountName, Annulment, FactureJour_RU
            where salesBookTransCorrect.CorrectedSalesBookTable_RU == correctedSalesBookRecId
               && salesBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionCorrPurch
            exists join salesBookTableCorrect
            where salesBookTableCorrect.RecId == salesBookTransCorrect.SalesBookTable_RU
               && salesBookTableCorrect.ClosingDate < startDate
               && salesBookTableCorrect.ClosingDate;

            startLineNum += int642int(salesBookTransCorrect.RecId);
        }

        select count(RecId) from purchBookTransCorrect
        group by PaymentDate, CorrectedFactureDate, CorrectedFactureExternalId, AccountNum, AccountName, CountryGTD, Annulment, FactureJour_RU
        where purchBookTransCorrect.CorrectedPurchBookTable_RU == _correctedBookRecId
            && (  !purchBookTransCorrect.CorrectedFactureExternalId
                || (purchBookTransCorrect.CorrectedPurchBookTable_RU && purchBookTransCorrect.CorrectionType == FactureCorrectionType_RU::Unknown) //Amount diff factures
                || purchBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionOriginal
                || purchBookTransCorrect.RevisionType == FactureRevisionType_RU::RevisionCorrPurch)
            && purchBookTransCorrect.RevisionType != FactureRevisionType_RU::RevisionCorrSales
        exists join purchBookTableCorrect
        where purchBookTableCorrect.RecId == purchBookTransCorrect.PurchBookTable_RU
           && purchBookTableCorrect.ClosingDate < startDate
           && purchBookTableCorrect.ClosingDate;

        startLineNum += int642int(purchBookTransCorrect.RecId);

        return totalTaxAmountVAT20 + totalTaxAmountVAT10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalVATAmountAdd</Name>
				<Source><![CDATA[
    protected AmountMST getTotalVATAmountAdd()
    {
        int                     idx;
        SalesPurchBookRecId_RU  correctedBookRecId;
        AmountMST               totalVATAmountAddLoc;

        for (idx = 1; idx <= conlen(correctedBookRecIdCon); idx++)
        {
            correctedBookRecId = conpeek(correctedBookRecIdCon, idx);
            totalVATAmountAddLoc += this.calcTotal(correctedBookRecId);
        }

        return totalVATAmountAddLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected container initParameters(Query _query)
    {
        Set                             setPeriods          = new Set(Types::Container);
        Map                             mapPeriodBooks      = new Map(Types::Container, Types::Container);
        Map                             mapBookPeriod       = new Map(Types::Int64,     Types::Container);
        Map                             mapPeriodSalesBooks = new Map(Types::Container, Types::Container);
        Map                             mapSalesBookPeriod  = new Map(Types::Int64,     Types::Container);
        int                             i;
        SetEnumerator                   setEnumerator;
        StartDate                       periodStart, periodStartLoc;
        EndDate                         periodEnd, periodEndLoc;
        container                       correctedBookRecIdConPeriod;
        container                       correctedSalesBookRecIdConPeriod;
        container                       ret, setPeriodsPacked;

        if (isCalledFromXMLExcelReport)
        {
            return [fromDate,
                toDate,
                bookRecIdCon,
                bookRecIdConSales,
                correctedBookRecIdCon,
                correctedSalesBookRecIdCon];
        }

        [setPeriodsPacked,
     bookRecIdCon,
     bookRecIdConSales] = PurchBook_AddList_Launcher_RU::initParameters(0,
                                                                        fromDate,
                                                                        toDate,
                                                                        _query,
                                                                        mapPeriodBooks,
                                                                        mapBookPeriod,
                                                                        mapPeriodSalesBooks,
                                                                        mapSalesBookPeriod);

        setPeriods = Set::create(setPeriodsPacked);

        if (setPeriods.elements())
        {
            setEnumerator = setPeriods.getEnumerator();
            while (setEnumerator.moveNext())
            {
                [periodStartLoc, periodEndLoc] = setEnumerator.current();
                periodStart = periodStart ? any2date(min(periodStart, periodStartLoc)) : periodStartLoc;
                periodEnd = periodEnd ? any2date(max(periodEnd, periodEndLoc)) : periodEndLoc;

                correctedBookRecIdConPeriod = mapPeriodBooks.lookup(setEnumerator.current());

                for (i = 1; i <= conlen(correctedBookRecIdConPeriod); i++)
                {
                    correctedBookRecIdCon += conpeek(correctedBookRecIdConPeriod, i);
                }

                if (conlen(bookRecIdConSales) > 0)
                {
                    correctedSalesBookRecIdConPeriod = mapPeriodSalesBooks.lookup(setEnumerator.current());
                    for (i = 1; i <= conlen(correctedSalesBookRecIdConPeriod); i++)
                    {
                        correctedSalesBookRecIdCon += conpeek(correctedSalesBookRecIdConPeriod, i);
                    }
                }
            }

            ret = [periodStart, periodEnd, bookRecIdCon, bookRecIdConSales, correctedBookRecIdCon, correctedSalesBookRecIdCon];
        }
        else
        {
            ret = conNull();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryDefault</Name>
				<Source><![CDATA[
    protected query initQueryDefault()
    {
        Query       query;

        if (isCalledFromXMLExcelReport && purchBookQueryRun)
        {
            query = purchBookQueryRun.query();
        }
        else
        {
            query = PurchBook_AddList_Launcher_RU::createDefaultQuery(0, fromDate, toDate);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun initQueryRun()
    {
        QueryRun             queryRun;
        Query                query;
        QueryBuildDataSource qbdsPurchBookTrans;
        QueryBuildDataSource qbdsSalesBookTrans;
        container            parameters;
        QueryRun             queryRunLocal;

        if (! isCalledFromXMLExcelReport)
        {
            startDate = fromDate;
        }

        query = this.initQueryDefault();

        parameters = this.initParameters(query);

        if (parameters != conNull())
        {
            [fromDate,
             toDate,
             bookRecIdCon,
             bookRecIdConSales,
             correctedBookRecIdCon,
             correctedSalesBookRecIdCon] = parameters;

            qbdsPurchBookTrans = query.dataSourceTable(tablenum(PurchBookTrans_RU));

            findOrCreateRange_W(qbdsPurchBookTrans, fieldnum(PurchBookTrans_RU, PurchBookTable_RU), con2Str(bookRecIdCon));

            findOrCreateRange_W(qbdsPurchBookTrans, fieldnum(PurchBookTrans_RU, CorrectedPurchBookTable_RU), con2Str(correctedBookRecIdCon));

            qbdsSalesBookTrans = query.dataSourceTable(tablenum(SalesBookTrans_RU));

            findOrCreateRange_W(qbdsSalesBookTrans, fieldnum(SalesBookTrans_RU, SalesBookTable_RU), con2Str(bookRecIdConSales));

            if (conlen(correctedSalesBookRecIdCon) > 0)
            {
                findOrCreateRange_W(qbdsSalesBookTrans, fieldnum(SalesBookTrans_RU, CorrectedSalesBookTable_RU), con2Str(correctedSalesBookRecIdCon));
            }
            else
            {
                findOrCreateRange_W(qbdsSalesBookTrans, fieldnum(SalesBookTrans_RU, RecId), SysQuery::valueEmptyString());
            }

            PurchBookAddListReportExcel_RU::setExtQueryRanges(query);

            queryRunLocal = new QueryRun(query);

            queryRun = LedgerVATDeclReportPurchBookAdd_RU::initQueryRunOnTmp(queryRunLocal);

            qbdsPurchBookTrans = queryRun.query().dataSourceTable(tablenum(PurchBookTrans_RU));

            qbdsPurchBookTrans.sortClear();

            qbdsPurchBookTrans.orderMode(OrderMode::GroupBy);
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, PaymentDate));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, FactureDate_External));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, FactureExternalId));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, RevisionSeqNumber));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, Annulment));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, FactureId));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, TransType));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, AccountNum));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, AccountName));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, CountryGTD));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, CorrectedFactureExternalId));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, RefOriginalFacture));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, CorrectionType));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, RevisionType));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, CorrectedFactureDate));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, FactureJour_RU));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, CurrencyCode));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, CommissionAgent));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, OperationTypeCodes));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, PaymDocumentNum));

            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, AmountCurInclVAT));
            qbdsPurchBookTrans.addSortField(fieldnum(PurchBookTrans_RU, AmountInclVAT));

            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, DeliveryDate), SelectionField::Max);
            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, AmountLiableToVAT20), SelectionField::Sum);
            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, AmountLiableToVAT10), SelectionField::Sum);
            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, AmountLiableToVAT0), SelectionField::Sum);
            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, AmountNotLiableToVAT), SelectionField::Sum);
            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, TaxAmountVAT20), SelectionField::Sum);
            qbdsPurchBookTrans.addSelectionField(fieldnum(PurchBookTrans_RU, TaxAmountVAT10), SelectionField::Sum);
        }
        else
        {
            queryRun = null;
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHeader</Name>
				<Source><![CDATA[
    protected void insertHeader()
    {
        header.VATAmountAdd  = this.getTotalVATAmountAdd();
        header.ReportDate    = reportDate;
        header.AddListNumber = addListNumber;

        totalTaxAmount += header.VATAmountAdd;

        update_recordSet line
        setting lineNumber = line.LineNumber + startLineNum;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContract</Name>
				<Source><![CDATA[
    public void setContract(container _contractPack)
    {
        LedgerVATDeclarationContract_RU contract = LedgerVATDeclarationContract_RU::construct();

        super(_contractPack);

        contract.unpack(_contractPack);

        bookRecIdCon                = contract.parmBookRecIdCon();
        correctedBookRecIdCon       = contract.parmCorrectedBookRecIdCon();
        bookRecIdConSales           = contract.parmBookRecIdConSales();
        correctedSalesBookRecIdCon  = contract.parmCorrectedSalesBookRecIdCon();
        startDate                   = contract.parmStartDate();
        reportDate                  = contract.parmReportDate();
        addListNumber               = contract.parmAddListNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerVATDeclReportPurchBookAdd_RU construct()
    {
        return new LedgerVATDeclReportPurchBookAdd_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTrans</Name>
				<Source><![CDATA[
    public static PurchBookTrans_RU getTmpTrans(QueryRun _queryRun)
    {
        PurchBookTrans_RU       purchBookTrans, tmpPurchBookTrans;
        SalesBookTrans_RU       salesBookTrans;
        Integer                 lineNum;

        _queryRun.reset();

        // BP Deviation documented
        tmpPurchBookTrans.setTmp();

        while (_queryRun.next())
        {
            if (_queryRun.changed(tablenum(PurchBookTrans_RU)))
            {
                purchBookTrans = _queryRun.get(tablenum(PurchBookTrans_RU));
                tmpPurchBookTrans.data(purchBookTrans);
                tmpPurchBookTrans.doInsert();
            }

            if (_queryRun.query().dataSourceTable(tablenum(SalesBookTrans_RU)) && _queryRun.changed(tablenum(SalesBookTrans_RU)))
            {
                salesBookTrans = _queryRun.get(tablenum(SalesBookTrans_RU));

                tmpPurchBookTrans.clear();

                tmpPurchBookTrans.AmountLiableToVAT10  = - salesBookTrans.AmountLiableToVAT10;
                tmpPurchBookTrans.TaxAmountVAT10       = - salesBookTrans.TaxAmountVAT10;
                tmpPurchBookTrans.AmountNotLiableToVAT = - salesBookTrans.AmountNotLiableToVAT;
                tmpPurchBookTrans.FactureExternalId    =   salesBookTrans.FactureExternalId;
                tmpPurchBookTrans.AccountName          =   salesBookTrans.AccountName;
                tmpPurchBookTrans.PaymentDate          =   salesBookTrans.PaymentDate;
                tmpPurchBookTrans.AmountInclVAT        = - salesBookTrans.AmountInclVAT;
                tmpPurchBookTrans.AmountLiableToVAT20  = - salesBookTrans.AmountLiableToVAT20;
                tmpPurchBookTrans.TaxAmountVAT20       = - salesBookTrans.TaxAmountVAT20;
                tmpPurchBookTrans.AmountLiableToVAT0   = - salesBookTrans.AmountLiableToVAT0;
                tmpPurchBookTrans.AccountNum           =   salesBookTrans.AccountNum;
                tmpPurchBookTrans.FactureId            =   salesBookTrans.FactureId;
                tmpPurchBookTrans.FactureDate          =   salesBookTrans.FactureDate;
                tmpPurchBookTrans.SettlementDate       =   salesBookTrans.SettlementDate;
                tmpPurchBookTrans.FactureDate_External =   salesBookTrans.FactureDate_External;
                tmpPurchBookTrans.TransType            =   salesBookTrans.TransType;
                tmpPurchBookTrans.DeliveryDate         =   salesBookTrans.FactureDate_External;
                tmpPurchBookTrans.CorrectedFactureExternalId    = salesBookTrans.CorrectedFactureExternalId;
                tmpPurchBookTrans.RefOriginalFacture            = salesBookTrans.RefOriginalFacture;
                tmpPurchBookTrans.RevisionSeqNumber             = salesBookTrans.RevisionSeqNumber;
                tmpPurchBookTrans.CorrectionType                = salesBookTrans.CorrectionType;
                tmpPurchBookTrans.RevisionType                  = salesBookTrans.RevisionType;
                tmpPurchBookTrans.Annulment                     = salesBookTrans.Annulment;
                tmpPurchBookTrans.CorrectedFactureDate          = salesBookTrans.CorrectedFactureDate;
                tmpPurchBookTrans.RefRevisedFacture             = salesBookTrans.RefRevisedFacture;
                tmpPurchBookTrans.CommissionAgent               = salesBookTrans.CommissionAgent;
                tmpPurchBookTrans.PaymDocumentNum               = salesBookTrans.PaymDocumentNum;
                tmpPurchBookTrans.CurrencyCode                  = salesBookTrans.CurrencyCode;
                tmpPurchBookTrans.AmountCurInclVAT              = salesBookTrans.AmountCurInclVAT;
                tmpPurchBookTrans.OperationTypeCodes            = salesBookTrans.OperationTypeCodes;

                if (salesBookTrans.FactureJour_RU)
                {
                    tmpPurchBookTrans.FactureJour_RU              = salesBookTrans.FactureJour_RU;
                }
                else
                {
                    tmpPurchBookTrans.FactureJour_RU              = FactureJour_RU::find(salesBookTrans.FactureId, salesBookTrans.factureModule()).RecId;
                }

                tmpPurchBookTrans.doInsert();
            }
        }

        lineNum = 0;

        while select tmpPurchBookTrans
        order by PaymentDate, FactureDate, FactureExternalId, Annulment desc, RevisionSeqNumber
        {
            lineNum ++;
            tmpPurchBookTrans.LineNum = lineNum;
            tmpPurchBookTrans.doUpdate();
        }

        return tmpPurchBookTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunOnTmp</Name>
				<Source><![CDATA[
    public static QueryRun initQueryRunOnTmp(QueryRun _queryRun)
    {
        Query                query = new Query();
        QueryRun             queryRun;
        QueryBuildDataSource queryBuildDataSource;
        PurchBookTrans_RU    purchBookTrans = LedgerVATDeclReportPurchBookAdd_RU::getTmpTrans(_queryRun);

        queryBuildDataSource = query.addDataSource(tablenum(PurchBookTrans_RU));

        queryRun = new QueryRun(query);
        queryRun.setCursor(purchBookTrans);

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>