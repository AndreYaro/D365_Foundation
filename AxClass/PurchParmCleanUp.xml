<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchParmCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchParmCleanUp extends RunBaseBatch implements BatchRetryable
{
    SalesPurchParmCleanUpMode   cleanUpMode;
    TransDate                   cleanupDate;
    boolean                     setDaysAgo;
    PositiveDays                daysAgo;
    boolean bypassInvoicePreprocessingApplicabilityCheck; // Intentionally not part of #currentlist; should always be reset to no and opted into explicitly

    DialogRunbase               dialog;

    DialogField                 dialogCleanUpMode;
    DialogField                 dialogCleanupDate;
    DialogField                 dialogSetDaysAgo;
    DialogField                 dialogDaysAgo;
    DialogField dialogBypassInvoicePreprocessingApplicabilityCheck;

    #DEFINE.CurrentVersion(3)
    #DEFINE.Version2(2)
    #LOCALMACRO.CurrentList
        cleanUpMode,
        cleanupDate,
        setDaysAgo,
        daysAgo
    #Endmacro

    #LOCALMACRO.Version2List
        cleanUpMode,
        cleanupDate
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteInvoiceTables</Name>
				<Source><![CDATA[
    private void deleteInvoiceTables(utcdatetime _cleanUpDateTime, ParmJobStatus _parmJobStatus)
    {

        // In a subset of scenarios, preprocessing can efficiently delete invoices in set-based operations without
        // needing a while select as below. In such cases, those invoices and their corresponding subtables will
        // already be gone when the while select runs, and if pre-processing is not applicable,
        // they will be removed by the below while select code as previously.
        PurchParmCleanupInvoicePreprocessing preprocessor = PurchParmCleanupInvoicePreprocessing::construct();
        preprocessor.deleteInvoiceTables(_cleanUpDateTime, _parmJobStatus, bypassInvoicePreprocessingApplicabilityCheck);

        VendInvoiceInfoTable localVendInvoiceInfoTable;
        PurchPrepayTable purchPrepayTable;
        VendTrans vendTrans;

        while select localVendInvoiceInfoTable
            where localVendInvoiceInfoTable.CreatedDateTime <= _cleanUpDateTime &&
                localVendInvoiceInfoTable.ParmJobStatus == _parmJobStatus
            outer join RecId, PurchTable from purchPrepayTable
            where  localVendInvoiceInfoTable.PurchId == purchPrepayTable.PurchTable &&
                purchPrepayTable.PrepayApplicationRemaining > 0
        {
            if (purchPrepayTable.RecId == 0)
            {
                boolean fullySettled = true;

                select RecId from vendTrans
                    where vendTrans.Invoice == localVendInvoiceInfoTable.Num &&
                        vendTrans.SettleAmountCur < vendTrans.AmountCur;

                if (vendTrans.RecId)
                {
                    fullySettled = false;
                }
                

                if (fullySettled)
                {
                    ttsbegin;

                    if (_parmJobStatus == ParmJobStatus::Executed)
                    {
                        PurchParmCleanUp::skipDeleteLogic(localVendInvoiceInfoTable);
                    }

                    localVendInvoiceInfoTable.selectForUpdate(true);
                    localVendInvoiceInfoTable.delete();

                    if (!VendInvoicePurchParmCleanUpPerfFlight::instance().isEnabled())
                    {
                        PurchParmCleanUp::cleanupAfterDeleteForInvoiceTables();

                        // This method called with parameter 'true' will delete all orphaned data below VendInvoiceInfoSubTable and acts like a
                        // static in that it all orphaned data is removed.
                        localVendInvoiceInfoTable.deleteWithoutDeleteActions(true);
                    }

                    ttscommit;
                }
            }
        }
        if (VendInvoicePurchParmCleanUpPerfFlight::instance().isEnabled())
        {
            ttsbegin;

            PurchParmCleanUp::cleanupAfterDeleteForInvoiceTables();
            localVendInvoiceInfoTable.deleteWithoutDeleteActions(true);

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDeleteLogic</Name>
				<Source><![CDATA[
    internal static void skipDeleteLogic(Common _common)
    {
        _common.skipDataMethods(true);
        _common.skipDeleteActions(true);
        _common.skipEvents(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupAfterDeleteForInvoiceTables</Name>
				<Source><![CDATA[
    internal static void cleanupAfterDeleteForInvoiceTables()
    {
        PurchParmUpdate                         purchParmUpdate;
        VendInvoiceInfoTable                    vendInvoiceInfoTable;
        VendInvoiceMatching                     vendInvoiceMatching;
        VendInvoiceInfoMarkupMatchingTolerance  vendInvoiceInfoMarkupMatchingTolerance;
        MarkupTrans                             markupTrans;
        VendInvoiceInfoTable_Officials          vendInvoiceInfoTable_Officials;
        FiscalReferenceParm_BR                  fiscalReferenceParm_BR;
        PurchShippingStat_BR                    purchShippingStat_BR;
        VendInvoiceInfoTableCorrectionType_RU   vendInvoiceInfoTableCorrectionType_RU;
        VendInvoiceInfoTable_RU                 vendInvoiceInfoTable_RU;
        VendInvoiceInfoTable_W                  vendInvoiceInfoTable_W;
        VendInvoiceInfoTableSymbol              vendInvoiceInfoTableSymbol;
        SalesTaxTransactionExchangeRate         salesTaxTransactionExchangeRate;
        VendInvoiceInfoTableTaxExtension_IN     vendInvoiceInfoTableTaxExtension_IN;
        VendPaymSched                           vendPaymSched;
        VendInvoiceInfo_PaymentDisbursement     vendInvoiceInfo_PaymentDisbursement;

        ttsbegin;

        PurchParmCleanUp::skipDeleteLogic(purchParmUpdate);
        
        delete_from purchParmUpdate
        notexists join vendInvoiceInfoTable
            where purchParmUpdate.ParmId == vendInvoiceInfoTable.ParmId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceMatching);

        delete_from vendInvoiceMatching
        notexists join vendInvoiceInfoTable
            where vendInvoiceMatching.TableRefId  == vendInvoiceInfoTable.TableRefId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoMarkupMatchingTolerance);
  
        delete_from vendInvoiceInfoMarkupMatchingTolerance
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoMarkupMatchingTolerance.VendInvoiceInfoTableTableRefId == vendInvoiceInfoTable.TableRefId;

        PurchParmCleanUp::skipDeleteLogic(markupTrans);

        delete_from markupTrans
            where markupTrans.TransTableId == vendInvoiceInfoTable.TableId
        notexists join vendInvoiceInfoTable
            where markupTrans.TransRecId == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTable_Officials);

        delete_from vendInvoiceInfoTable_Officials
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTable_Officials.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(fiscalReferenceParm_BR);

        delete_from fiscalReferenceParm_BR
            where fiscalReferenceParm_BR.RefTableId == vendInvoiceInfoTable.TableId
        notexists join vendInvoiceInfoTable
            where fiscalReferenceParm_BR.RefRecID == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(purchShippingStat_BR);

        delete_from purchShippingStat_BR
        notexists join vendInvoiceInfoTable
            where purchShippingStat_BR.VendinvoiceInfoTable == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTableCorrectionType_RU);

        delete_from vendInvoiceInfoTableCorrectionType_RU
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTableCorrectionType_RU.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTable_RU);

        delete_from vendInvoiceInfoTable_RU
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTable_RU.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTable_W);

        delete_from vendInvoiceInfoTable_W
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTable_W.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTableSymbol);

        delete_from vendInvoiceInfoTableSymbol
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTableSymbol.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId;

        if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Purchase))
        {
            TaxSpecificExchangeRate taxSpecificExchangeRate;
            PurchParmCleanUp::skipDeleteLogic(taxSpecificExchangeRate);

            delete_from taxSpecificExchangeRate
                where taxSpecificExchangeRate.SourceTableId == vendInvoiceInfoTable.TableId
                notexists join vendInvoiceInfoTable
                    where taxSpecificExchangeRate.SourceRecId == vendInvoiceInfoTable.RecId;
        }
        else
        {
            PurchParmCleanUp::skipDeleteLogic(salesTaxTransactionExchangeRate);

            delete_from salesTaxTransactionExchangeRate
                where salesTaxTransactionExchangeRate.SourceTableId == vendInvoiceInfoTable.TableId
                notexists join vendInvoiceInfoTable
                    where salesTaxTransactionExchangeRate.SourceRecordId == vendInvoiceInfoTable.RecId;
        }

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfoTableTaxExtension_IN);

        delete_from vendInvoiceInfoTableTaxExtension_IN
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfoTableTaxExtension_IN.VendInvoiceInfoTable == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendPaymSched);

        delete_from vendPaymSched
            where vendPaymSched.ExtTableId == vendInvoiceInfoTable.TableId
        notexists join vendInvoiceInfoTable
            where vendPaymSched.ExtRecId == vendInvoiceInfoTable.RecId;

        PurchParmCleanUp::skipDeleteLogic(vendInvoiceInfo_PaymentDisbursement);

        delete_from vendInvoiceInfo_PaymentDisbursement
        notexists join vendInvoiceInfoTable
            where vendInvoiceInfo_PaymentDisbursement.TableRefId  == vendInvoiceInfoTable.TableRefId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchParmTables</Name>
				<Source><![CDATA[
    private void deletePurchParmTables(utcdatetime _cleanUpDateTime, ParmJobStatus _parmJobStatus)
    {
        PurchParmTable      purchParmTable, purchParmTableLocal;
        PurchParmUpdate     purchParmUpdate;
        PurchParmSubTable   purchParmSubTable;
        PurchParmLine       purchParmLine;
        PurchParmLine_Asset purchParmLine_Asset;
        PurchParmSubLine    purchParmSubLine;
        PurchParmTable_PaymentDisbursement paymentDisbursement;

        ttsbegin;

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            PurchParmCleanUp::skipDeleteLogic(paymentDisbursement);

            delete_from paymentDisbursement
                exists join purchParmTable
                    where paymentDisbursement.ParmId == purchParmTable.ParmId &&
                        paymentDisbursement.TableRefId == purchParmTable.TableRefId &&
                        paymentDisbursement.VendAccount == purchParmTable.InvoiceAccount &&
                        purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
                        purchParmTable.ParmJobStatus == _parmJobStatus;
        }

        PurchParmCleanUp::skipDeleteLogic(purchParmUpdate);

        delete_from purchParmUpdate
            exists join purchParmTable
                where purchParmUpdate.ParmId == purchParmTable.ParmId &&
                    purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
                    purchParmTable.ParmJobStatus == _parmJobStatus;

        PurchParmCleanUp::skipDeleteLogic(purchParmSubTable);

        delete_from purchParmSubTable
            exists join purchParmTable
                where purchParmSubTable.ParmId      == purchParmTable.ParmId   &&
                    purchParmSubTable.TableRefId  == purchParmTable.TableRefId &&
                    purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
                    purchParmTable.ParmJobStatus == _parmJobStatus;

        PurchParmCleanUp::skipDeleteLogic(purchParmLine_Asset);

        delete_from purchParmLine_Asset
            exists join purchParmLine
                where purchParmLine_Asset.PurchParmLineRecId == purchParmLine.RecId
            exists join purchParmTable
                where purchParmLine.ParmId      == purchParmTable.ParmId   &&
                    purchParmLine.TableRefId  == purchParmTable.TableRefId &&
                    purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
                    purchParmTable.ParmJobStatus == _parmJobStatus;

        PurchParmCleanUp::skipDeleteLogic(purchParmSubLine);

        delete_from purchParmSubLine
            exists join purchParmLine
                where purchParmSubLine.LineRefRecId == purchParmLine.RecId
            exists join purchParmTable
                where purchParmLine.ParmId      == purchParmTable.ParmId   &&
                    purchParmLine.TableRefId  == purchParmTable.TableRefId &&
                    purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
                    purchParmTable.ParmJobStatus == _parmJobStatus;

        PurchParmCleanUp::skipDeleteLogic(purchParmLine);

        delete_from purchParmLine
            exists join purchParmTable
                where purchParmLine.ParmId      == purchParmTable.ParmId   &&
                    purchParmLine.TableRefId  == purchParmTable.TableRefId &&
                    purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
                    purchParmTable.ParmJobStatus == _parmJobStatus;

        PurchParmCleanUp::skipDeleteLogic(purchParmTable);

        delete_from purchParmTable
            where purchParmTable.CreatedDateTime <= _cleanUpDateTime &&
            purchParmTable.ParmJobStatus == _parmJobStatus;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTables</Name>
				<Source><![CDATA[
    protected void deleteTables()
    {
        date createdUtil = setDaysAgo ? DateTimeUtil::date(DateTimeUtil::addDays(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), -daysAgo)) : cleanupDate;
        utcdatetime cleanUpDateTime = datetoendUtcDateTime(createdUtil, DateTimeUtil::getUserPreferredTimeZone());

        if (cleanUpMode == SalesPurchParmCleanUpMode::all)
        {
            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::Executed);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::Executed);

            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::ContainErrors);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::ContainErrors);

            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::Waiting);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::Waiting);
        }
        else if (cleanUpMode == SalesPurchParmCleanUpMode::Executed)
        {
            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::Executed);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::Executed);
        }
        else if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting)
        {
            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::Waiting);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::Waiting);
        }
        else
        {
            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::Executed);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::Executed);

            this.deletePurchParmTables(cleanUpDateTime, ParmJobStatus::ContainErrors);
            this.deleteInvoiceTables(cleanUpDateTime, ParmJobStatus::ContainErrors);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        dialog = super();

        dialogCleanUpMode = dialog.addFieldValue(enumStr(SalesPurchParmCleanUpMode), cleanUpMode);
        dialogCleanupDate = dialog.addFieldValue(extendedTypeStr(TransDate), cleanupDate, "@SYS75241","@SCM:PurchParmCleanUpCreatedUntil_HelpText");
        dialogSetDaysAgo = dialog.addFieldValue(enumStr(NoYes), setDaysAgo, "@SCM:PurchParmCleanUpSetDaysAgo", "@SCM:PurchParmCleanUpSetDaysAgo_HelpText");
        dialogDaysAgo = dialog.addFieldValue(extendedTypeStr(PositiveDays), daysAgo, "@SCM:PurchParmCleanUpDaysAgo", "@SCM:PurchParmCleanUpDaysAgo_HelpText");

        dialogSetDaysAgo.control().registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(PurchParmCleanUp, setDaysAgoModified),
            this);

        this.setEnabled();

        bypassInvoicePreprocessingApplicabilityCheck = false;
        if (VendPurchParmCleanupOverride::currentOverrideExists())
        {
            VendInstrumentation::logTelemetry(
                "PO history cleanup",
                classStr(PurchParmCleanUp),
                funcName(),
                "Override option is visible",
                "true");

            dialogBypassInvoicePreprocessingApplicabilityCheck = dialog.addFieldValue(
                identifierStr(NoYes), 
                bypassInvoicePreprocessingApplicabilityCheck,
                "@AccountsPayable:PurchParmCleanupBypassTitle",
                "@AccountsPayable:PurchParmCleanupBypassHelpText");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDaysAgoModified</Name>
				<Source><![CDATA[
    private boolean setDaysAgoModified(FormCheckBoxControl _callerControl)
    {
        this.setEnabled();
        return _callerControl.modified();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEnabled</Name>
				<Source><![CDATA[
    private void setEnabled()
    {
        if (dialogSetDaysAgo.value())
        {
            dialogCleanupDate.Value(dateNull());
            dialogCleanupDate.enabled(false);
            dialogDaysAgo.enabled(true);
        }
        else
        {
            dialogDaysAgo.Value(0);
            dialogDaysAgo.enabled(false);
            dialogCleanupDate.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        cleanUpMode         = dialogCleanUpMode.value();
        cleanupDate         = dialogCleanupDate.value();
        setDaysAgo = dialogSetDaysAgo.value();
        daysAgo = dialogDaysAgo.value();

        if (VendPurchParmCleanupOverride::currentOverrideExists())
        {
            bypassInvoicePreprocessingApplicabilityCheck = dialogBypassInvoicePreprocessingApplicabilityCheck.value();
        }
        else
        {
            bypassInvoicePreprocessingApplicabilityCheck = false;
        }

        if (bypassInvoicePreprocessingApplicabilityCheck)
        {
            bypassInvoicePreprocessingApplicabilityCheck = VendPurchParmCleanupOverride::validateBypassSelectionUsableForDate(cleanupDate);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        if (!this.validateCleanUpMode())
        {
            return;
        }

        try
        {
            this.deleteTables();
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            case #Version2:
                [version, #Version2List] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!cleanupDate && !setDaysAgo)
        {
            ret = checkFailed("@SYS24455");
        }

        return ret && this.validateCleanUpMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCleanUpMode</Name>
				<Source><![CDATA[
    private boolean validateCleanUpMode()
    {
        boolean ret = true;
 
        if (cleanUpMode == SalesPurchParmCleanUpMode::Waiting
            && !SalesPurchParmCleanUpForWaitingFlight::instance().isEnabled())
        {
            ret = checkFailed("@SCM:CleanupWaitingPurchUpdateHistoryNotSupported");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchParmCleanUp construct()
    {
        return new PurchParmCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS147071";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PurchParmCleanUp          purchParmCleanUp = PurchParmCleanUp::newStandard(args);

        if (! purchParmCleanUp.prompt())
            return;

        purchParmCleanUp.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    static PurchParmCleanUp newStandard(Args _args)
    {
        PurchParmCleanUp          purchParmCleanUp = PurchParmCleanUp::construct();
        purchParmCleanUp.getLast();
        purchParmCleanUp.init();

        return purchParmCleanUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>