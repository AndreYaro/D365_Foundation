<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStatusBlockingHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>InventStatusBlockingHelper</c> is a base class for all inventory status blocking helpers.
/// </summary>
public abstract class InventStatusBlockingHelper
{
    InventMovement  movement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>increaseInventoryStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increases the quantity of the specified inventory status blocking.
    /// </summary>
    /// <param name = "_qty">
    ///     Quantity to increase by.
    /// </param>
    /// <param name = "_cwQty">
    ///     Catch weight quantity to increase by.
    /// </param>
    /// <param name = "_movement">
    ///     <c>InventMovement</c> of the transaction that caused the increase.
    /// </param>
    final protected void increaseInventoryStatusBlocking(InventQty      _qty, 
                                                         PdsCWQty       _cwQty, 
                                                         InventMovement _movement = movement)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), _movement.itemId(), _cwQty))
        {
            WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), _movement.itemId());

            this.increaseInventoryStatusBlockingQuantity(_movement, _qty, 0);
        }
        else
        {
            this.increaseInventoryStatusBlockingQuantity(_movement, _qty, _cwQty);
        }        
    }

]]></Source>
			</Method>
			<Method>
				<Name>increaseInventoryStatusBlockingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increases the quantity of the specified inventory status blocking.
    /// </summary>
    /// <param name="_movement">
    ///     <c>InventMovement</c> of the transaction that caused the increase.
    /// </param>
    /// <param name="_qty">
    ///     Quantity to increase by.
    /// </param>
    /// <param name="_cwQty">
    ///     Catch weight handling quantity to increase by.
    /// </param>    
    private void increaseInventoryStatusBlockingQuantity(InventMovement _movement,
                                                         InventQty      _qty,
                                                         PdsCWQty       _cwQty)
    {
        InventDim inventDim = _movement.inventdim();
        InventBlockingInventStatusSync::newStandardHandlingQuantities(_movement, _qty, _cwQty, inventDim, inventDim, true).postSync();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the instance using the specified <c>InventMovement</c>.
    /// </summary>
    /// <param name="_movement">
    ///     <c>InventMovement</c> used for initialization.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     Thrown when called with null parameter.
    /// </exception>
    protected void initFromMovement(InventMovement _movement)
    {
        if (!_movement)
        {
            throw error(Error::missingParameter(this));
        }

        // Instantiating for a non-WHS item has slight runtime perf penalty
        Debug::assert(_movement.isItemWHSEnabled());

        movement  = _movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs post-delete adjustments.
    /// </summary>
    public void postDelete()
    {
        // Do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>postInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs post-insert adjustments.
    /// </summary>
    public void postInsert()
    {
        // Do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>postUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs post-update adjustments.
    /// </summary>
    public void postUpdate()
    {
        // Do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>preDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs pre-delete adjustments.
    /// </summary>
    public void preDelete()
    {
        // Do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>preInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs pre-insert adjustments.
    /// </summary>
    public void preInsert()
    {
        // Do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs pre-update adjustments.
    /// </summary>
    public void preUpdate()
    {
        // Do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceInventoryStatusBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reduces the quantity of the specified inventory status blocking.
    /// </summary>
    /// <param name="_qty">
    ///     Quantity to decrease by.
    /// </param>
    /// <param name="_cwQty">
    ///     Catch weight handling quantity to decrease by.
    /// </param>
    final protected void reduceInventoryStatusBlocking(InventQty _qty, PdsCWQty _cwQty)
    {
        if (WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), movement.itemId(), _cwQty))
        {
            WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), movement.itemId());

            this.reduceInventoryStatusBlockingQuantity(movement, _qty, 0);
        }
        else
        {
            this.reduceInventoryStatusBlockingQuantity(movement, _qty, _cwQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceInventoryStatusBlockingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reduces the quantity of the specified inventory status blocking.
    /// </summary>
    /// <param name="_movement">
    ///     <c>InventMovement</c> of the transaction that caused the decrease.
    /// </param>
    /// <param name="_qty">
    ///     Quantity to decrease by.
    /// </param>
    /// <param name="_cwQty">
    ///     Catch weight handling quantity to decrease by.
    /// </param>
    private void reduceInventoryStatusBlockingQuantity(InventMovement _movement, 
                                                       InventQty      _qty,
                                                       PdsCWQty       _cwQty)
    {
        InventDim inventDim = _movement.inventdim();
        InventBlockingInventStatusSync::newStandardHandlingQuantities(_movement, _qty, _cwQty, inventDim, inventDim, true).preSync();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>InventStatusBlockingHelper</c> class for the specified inventory movement.
    /// </summary>
    /// <param name="_movement">
    /// An inventory movement.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventStatusBlockingHelper</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// An exception indicating that the specified inventory movement is not related to a quality order.
    /// </exception>
    public static InventStatusBlockingHelper construct(InventMovement _movement)
    {
        InventStatusBlockingHelper  ret;

        if (!_movement
            || !WHSInventEnabled::exist(_movement.itemId()))
        {
            return InventStatusBlockingHelperNoOp::construct();
        }

        switch (_movement.buffer().TableId)
        {
            case tableNum(InventQualityOrderTable):
                ret = InventStatusBlockingQualityOrderHelper::construct(_movement as InventMov_QualityOrder);
                break;

            case tableNum(InventBlocking):
                InventBlocking inventBlocking = _movement.buffer();
                if (inventBlocking.BlockingType == InventBlockingType::QualityOrder)
                {
                    ret = InventStatusBlockingQOBlockingHelper::construct(_movement as InventMov_Blocking);
                }
                else
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>