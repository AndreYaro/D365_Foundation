<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceJournalPostTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventInventoryDataServiceJournalPostTask extends RunBaseBatch implements BatchRetryable
{
    private LegalEntityDataAreaId company;
    private InventJournalId journalId;

    private container parameter; // [[DataAreaId, JournalId], ...]
    private InventInstrumentationLogger logger;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        parameter
    #Endmacro
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return InventInventoryDataServiceJournalPostTask::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParameter</Name>
				<Source><![CDATA[
    public container parmParameter(container _parameter = parameter)
    {
        parameter = _parameter;
        return parameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        for (int i = 1; i <= conlen(parameter); i++)
        {
            [company, journalId] = conPeek(parameter, i);

            changecompany(company)
            {
                InventJournalTable inventJournalTable;
                InventJournalTrans inventJournalTrans;

                ttsbegin;

                select firstonly forupdate * from inventJournalTable
                    where inventJournalTable.JournalId == journalId
                    && inventJournalTable.InventoryServiceJournalExpectedStatus == InventoryServiceJournalExpectedStatus::Posted
                    && inventJournalTable.SystemBlocked == NoYes::No;

                if (inventJournalTable)
                {
                    InventJournalTable::initTotal(inventJournalTable);
                    inventJournalTable.SystemBlocked = NoYes::Yes;
                    inventJournalTable.update();

                    var journalCheckPost = InventJournalCheckPost::newJournalCheckPost(JournalCheckPostType::Post, inventJournalTable);
                    journalCheckPost.runOperation();

                    inventJournalTable = InventJournalTable::find(journalId, true);
                    if (inventJournalTable.Posted == NoYes::No)
                    {
                        inventJournalTable.InventoryServiceJournalExpectedStatus = InventoryServiceJournalExpectedStatus::SkipPosting;
                    }
                    inventJournalTable.SystemBlocked = NoYes::No;
                    inventJournalTable.update();

                    InventInventoryDataServiceJournalTransStatusQueue queue;
                    var posted = inventJournalTable.Posted;
                    insert_recordset queue(InventoryServiceTransactionId ,InventTransId, Voucher, ItemId, Company, InventDimId, Posted)
                        select InventoryServiceTransactionId, inventTransId, Voucher, ItemId, DataAreaId, InventDimId, posted
                            from inventJournalTrans
                            where inventJournalTrans.JournalId == journalId;
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventInventoryDataServiceJournalPostTask construct()
    {
        return new InventInventoryDataServiceJournalPostTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:InventInventoryDataServiceJournalPostingTaskDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    public static InventInventoryDataServiceJournalPostTask newFromParameters(container _parameter)
    {
        InventInventoryDataServiceJournalPostTask journalPostTask;

        journalPostTask = InventInventoryDataServiceJournalPostTask::construct();
        journalPostTask.getLast();
        journalPostTask.parmParameter(_parameter);

        return journalPostTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>