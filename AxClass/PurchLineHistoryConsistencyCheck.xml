<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineHistoryConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchLineHistoryConsistencyCheck</c> class is a removal batch job that identifies and removes records from <c>PURCHLINEHISTORY</c> table
/// which correspond to hard-deleted lines from <c>PURCHLINE</c> table.
/// </summary>
public final class PurchLineHistoryConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
    private utcdatetime minTime = DateTimeUtil::minValue();
    private utcdatetime maxTime = DateTimeUtil::maxValue();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    public configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        var instance = new PurchLineHistoryConsistencyCheck();
        instance.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    public Integer executionOrder()
    {
        return 40;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        boolean doUpdate = this.checkFix() == CheckFix::Fix;
        int deletedRecords = this.removeOrphanPurchLineHistoryRecords(doUpdate);

        if (doUpdate)
        {
            this.updateCorrected(deletedRecords);
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeOrphanPurchLineHistoryRecords</Name>
				<Source><![CDATA[
    private int removeOrphanPurchLineHistoryRecords(boolean _doUpdate)
    {
        if(!_doUpdate)
        {
            this.reportOrphanHistoryLines();
            return 0;
        }
        return this.performCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportOrphanHistoryLines</Name>
				<Source><![CDATA[
    private void reportOrphanHistoryLines()
    {
        PurchLineHistory purchLineHistory;
        PurchLine purchLine;

        select validTimeState(minTime, maxTime) count(RecId) 
            from purchLineHistory
            notexists join purchLine
            where purchLine.InventTransId == purchLineHistory.InventTransId;

        warning(strFmt("@ProcurementAndSourcing:PurchLineHistoryConsistencyCheck_ReportOrphanHistoryRecords",purchLineHistory.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>performCleanUp</Name>
				<Source><![CDATA[
    private int performCleanUp()
    {
        PurchLineHistory purchLineHistory;
        PurchLine purchLine;
        PurchInstrumentationLogger instrumentationLogger = PurchInstrumentationLogger::createLogger(classStr(PurchLineHistoryConsistencyCheck));
        int numberOfDeletedRecords = 0;
        
        using (var activity = instrumentationLogger.purchPurchaseOrderActivities().deleteOrphanPurchLinesHistory())
        {
            while select forupdate validTimeState(minTime, maxTime) 
                LineNumber,InventTransId,PurchId
                from purchLineHistory
                notexists join purchLine
                where purchLine.InventTransId == purchLineHistory.InventTransId
            {
                var purchTableRecId = PurchTable::find(purchLineHistory.PurchId, false).RecId;
                
                instrumentationLogger.logInformation(strFmt("%1:%2, %3:%4",
                    PurchPurchaseOrderInstrumentationActivities::PurchTableRecId, int642str(purchTableRecId),
                    PurchPurchaseOrderInstrumentationActivities::PurchLineNumber, int2str(purchLineHistory.LineNumber)));
                
                purchLineHistory.delete();
                numberOfDeletedRecords++;
            }

            activity.addCustomProperty(PurchPurchaseOrderInstrumentationActivities::DeletedPurchLineHistoryRecords, int2str(numberOfDeletedRecords));
        }
        
        warning(strFmt("@ProcurementAndSourcing:PurchLineHistoryConsistencyCheck_ReportDeletedHistoryRecords",numberOfDeletedRecords));
        return numberOfDeletedRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@ProcurementAndSourcing:PurchLineHistoryConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@ProcurementAndSourcing:PurchLineHistoryConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    public ClassId treeParentClassId()
    {
        return classNum(PurchRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>