<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_IntangibleAssetInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class rTax25RegCalc_IntangibleAssetInfo extends RTax25RegCalc_AssetsInfo implements BatchRetryable
{
    protected RAssetAmount netBookGroup;
    protected RAssetAmount netBookSubGroup;
    protected RAssetAmount deprGroup;
    protected RAssetAmount deprSubGroup;
    protected Map map;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    protected void createFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooterGroup</Name>
				<Source><![CDATA[
    private void createFooterGroup(RAssetId _assetId, fieldId _fieldId, RAssetSubGroupId _subGroupId)
    {
        fieldValue = ['',
            '',
            dateNull(),
            _fieldId == fieldnum(RAssetStandards, AssetGroup) ? netBookGroup : netBookSubGroup,
            0,
            '',
            RAssetStandards::find(_assetId, assetStandardId).AssetGroup,
            _fieldId == fieldnum(RAssetStandards, SubGroupId) ? _subGroupId : '',
            0.,
            dateNull(),
            _fieldId == fieldnum(RAssetStandards, AssetGroup) ? deprGroup : deprSubGroup,
            0,
            0.,
            0,
            dateNull(),
            ''];

        regQuery.addFooterRecord(0,
            fieldValue,
            0,
            _fieldId == fieldnum(RAssetStandards, AssetGroup)
                ? strfmt("@GLS117102", RAssetStandards::find(_assetId, assetStandardId).(_fieldId))
                : strfmt("@GLS117103", _subGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderGroup</Name>
				<Source><![CDATA[
    private void createHeaderGroup(RAssetId _assetId, fieldId _fieldId, RAssetSubGroupId _subGroupId)
    {
        regQuery.addHeaderRecord(0,
            conNull(),
            0,
            _fieldId == fieldnum(RAssetStandards, AssetGroup)
                ? strfmt("@GLS117100", RAssetStandards::find(_assetId, assetStandardId).(_fieldId))
                : strfmt("@GLS117101", _subGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRegisterTrans</Name>
				<Source><![CDATA[
    private void createRegisterTrans()
    {
        TransDate operationDate;
        TransDate deductionDate;
        TransDate lastDeprMonth;
        RAssetLifeTime lifeTime;
        RAssetLifeTime monthsLine;
        RTax25NotesLine deductionBase;

        void initialize()
        {
            deductionDate = dateNull();
            operationDate = dateMax();
            deductionBase = '';
            operationAmount = 0.;
            lastDeprMonth = dateNull();
    
            rAssetTable = RAssetTable::find(rAssetStandards.AssetId);
            lifeTime = this.lifeTime(dateTo - 1);
            deprMethod = this.assetDeprMethod(dateFrom);
            this.baseCostValue(dateTo);
        }

        const int StartYear = 2002;
    
        MapIterator iterator = new MapIterator(map);
        while (iterator.more())
        {
            container con = iterator.value();
            for (int trans = 1; trans <= conlen(con); trans++)
            {
                RecId recId = conpeek(con, trans);
                select firstonly rAssetStandards
                    where rAssetStandards.RecId == recId;

                initialize();
    
                rTax25PeriodIterator.first(true);
    
                do
                {
                    select firstonly ReportingDate, AssetTransType, AttachDocumentNumber, AttachDocumentDate from rAssetTrans
                        order by  ReportingDate desc
                        where rAssetTrans.AccountNum == rAssetTable.AccountNum
                            && (!rTax25PeriodIterator.fromDateAccounting()
                                || rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting())
                            && (!rTax25PeriodIterator.fromDateReporting()
                                || rAssetTrans.ReportingDate >= rTax25PeriodIterator.fromDateReporting())
                            && rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()
                            && rAssetTrans.ReportingDate <= rTax25PeriodIterator.toDateReporting()
                            && rAssetTrans.AssetStandardId == assetStandardId
                            && (rAssetTrans.AssetTransType == RAssetTransType::Disposal
                                || rAssetTrans.AssetTransType == RAssetTransType::DisposalSale
                                || rAssetTrans.AssetTransType == RAssetTransType::DisposalScrap)
                            && !rAssetTrans.StornoRecId;
    
                    if (deductionDate < rAssetTrans.ReportingDate)
                    {
                        deductionDate = rAssetTrans.ReportingDate;
                        deductionBase = strfmt("@GLS101406" + "@GLS102908" + enum2str(rAssetTrans.AssetTransType));
    
                        if (rAssetTrans.AttachDocumentNumber)
                        {
                            deductionBase += strfmt("@SYS26801", rAssetTrans.AttachDocumentNumber, rAssetTrans.AttachDocumentDate);
                        }
                    }
    
                    select firstonly ReportingDate from rAssetTrans
                        order by ReportingDate asc
                        where rAssetTrans.AccountNum == rAssetTable.AccountNum
                            && (!rTax25PeriodIterator.fromDateAccounting()
                                || rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting())
                            && (!rTax25PeriodIterator.fromDateReporting()
                                || rAssetTrans.ReportingDate >= rTax25PeriodIterator.fromDateReporting())
                            && rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()
                            && rAssetTrans.ReportingDate <= rTax25PeriodIterator.toDateReporting()
                            && rAssetTrans.AssetStandardId == assetStandardId
                            && rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                            && !rAssetTrans.StornoRecId;
    
                    if (operationDate > rAssetTrans.ReportingDate)
                    {
                        operationDate   = rAssetTrans.ReportingDate;
                    }
    
                    select firstonly ReportingDate from rAssetTrans
                        order by ReportingDate desc
                        where rAssetTrans.AccountNum == rAssetTable.AccountNum
                            && (!rTax25PeriodIterator.fromDateAccounting()
                                || rAssetTrans.AccountingDate >= rTax25PeriodIterator.fromDateAccounting())
                            && (!rTax25PeriodIterator.fromDateReporting()
                                || rAssetTrans.ReportingDate >= rTax25PeriodIterator.fromDateReporting())
                            && rAssetTrans.AccountingDate <= rTax25PeriodIterator.toDateAccounting()
                            && rAssetTrans.ReportingDate <= rTax25PeriodIterator.toDateReporting()
                            && rAssetTrans.AssetStandardId == assetStandardId
                            && rAssetTrans.AssetTransType == RAssetTransType::Depreciation
                            && rAssetTrans.AssetDeprPeriod <= dateTo
                            && !rAssetTrans.StornoRecId;
    
                    if (lastDeprMonth < rAssetTrans.ReportingDate)
                    {
                        lastDeprMonth = rAssetTrans.ReportingDate;
                    }
                }
                while (rTax25PeriodIterator.next());
    
                if (operationDate == dateMax())
                {
                    operationDate = dateNull();
                }
    
                monthsLine = this.deprMonthsCalc(lastDeprMonth);
                this.reduceFactor();
    
                if (operationDate < mkdate(1, 1, StartYear)
                    && deprMethod == RAssetDeprMethod::ReducingBalance)
                {
                    operationAmount = baseCostValue;
                }
    
                this.outputHeaderFooterGroup();
    
                regQuery.addBodyRecord(0,
                    [strfmt(rAssetTable.AccountNum),   //Asset inventary number
                        rAssetTable.Name,  //Asset name
                        operationDate,  //Operation date
                        operationAmount,  //Operation cost value
                        lifeTime,  //Life time
                        rAssetStandards.deprProfile(dateFrom).Name ?
                        rAssetStandards.deprProfile(dateFrom).Name :
                        rAssetStandards.deprProfile(dateFrom).DeprProfile,
                        rAssetStandards.AssetGroup,  //Depreciation group
                        rAssetStandards.subGroupId(dateTo),
                        reduceFactor,  //Reduce factor
                        this.deprStartDate(),  //Depreciation start date
                        -rAssetSumTrans.depreciationValueMST(), //Depreciation amount
                        monthsLine, // Depreciation months
                        baseCostValue, // Base cost value
                        (baseCostValue && rAssetStandards.CostLimitDate) ? lifeTime - this.deprMonthsCalc(rAssetStandards.CostLimitDate - 1) : 0, //Base cost amount
                        deductionDate,  //Deduction document date
                        deductionBase],    //Deduction document number
                    rAssetTable.TableId,
                    rAssetTable.RecId,
                    strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name));

                netBookGroup += operationAmount;
                netBookSubGroup += operationAmount;
                deprGroup += -rAssetSumTrans.depreciationValueMST();
                deprSubGroup += -rAssetSumTrans.depreciationValueMST();
                totalAmount += deprGroup;
            }

            iterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    protected void createTotal()
    {
        this.createRegisterTrans();
        rAssetStandards = null;
        this.outputHeaderFooterGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans _registerJournalTrans = null, Batch _batch = null)
    {
        boolean ret = super(_registerJournalTrans, _batch);
        map = new Map(Types::Container, Types::Container);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputHeaderFooterGroup</Name>
				<Source><![CDATA[
    private void outputHeaderFooterGroup()
    {
        RAssetStandards lastStandards = RAssetStandards::find(lastAssetId, assetStandardId);
        RAssetSubGroupId lastSubGroupId = lastStandards.subGroupId(dateTo);
        RAssetSubGroupId subGroupId = rAssetStandards.subGroupId(dateTo);

        if (lastStandards.AssetGroup != rAssetStandards.AssetGroup
            || lastSubGroupId != subGroupId)
        {
            if (lastSubGroupId != subGroupId && lastSubGroupId)
            {
                this.createFooterGroup(lastStandards.AssetId, fieldnum(RAssetStandards, SubGroupId), lastSubGroupId);
            }

            if (lastStandards.AssetGroup != rAssetStandards.AssetGroup)
            {
                if (lastStandards.AssetGroup)
                {
                    if (!lastSubGroupId)
                    {
                        this.createFooterGroup(lastStandards.AssetId, fieldnum(RAssetStandards, SubGroupId), lastSubGroupId);
                    }

                    this.createFooterGroup(lastStandards.AssetId, fieldnum(RAssetStandards, AssetGroup), '');
                }

                if (rAssetStandards.AssetGroup)
                {
                    this.createHeaderGroup(rAssetStandards.AssetId, fieldnum(RAssetStandards, AssetGroup), '');
                    this.createHeaderGroup(rAssetStandards.AssetId, fieldnum(RAssetStandards, SubGroupId), subGroupId);
                }

                netBookGroup = 0;
                netBookSubGroup = 0;
                deprGroup = 0;
                deprSubGroup = 0;
            }
            else if (lastSubGroupId != subGroupId && subGroupId)
            {
                if (! lastSubGroupId)
                {
                    this.createFooterGroup(lastStandards.AssetId, fieldnum(RAssetStandards, SubGroupId), lastSubGroupId);
                }

                this.createHeaderGroup(rAssetStandards.AssetId, fieldnum(RAssetStandards, SubGroupId), subGroupId);
                
                netBookSubGroup = 0;
                deprSubGroup = 0;
            }
        }

        lastAssetId = rAssetTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    protected AmountMST tableOperation()
    {
        container con;

        if (map.exists([rAssetStandards.AssetGroup, rAssetStandards.subGroupId(dateTo)]))
        {
            con = map.lookup([rAssetStandards.AssetGroup, rAssetStandards.subGroupId(dateTo)]);
        }

        map.insert([rAssetStandards.AssetGroup, rAssetStandards.subGroupId(dateTo)],
            conins(con, conlen(con) + 1, [rAssetStandards.RecId]));

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>