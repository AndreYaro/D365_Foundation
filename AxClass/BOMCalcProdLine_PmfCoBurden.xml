<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcProdLine_PmfCoBurden</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// BOMCalcProdLine_PmfCoBurden runs the Production cost calculation
/// for production order with a co/by burden.
/// </summary>
//FS PMF
class BomCalcProdLine_PmfCoBurden extends BOMCalcProdLine_PmfCoProduct
{
    CostPrice   burdenCost;
    PmfProdCoBy pmfProdCoBy;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates, initializes and runs the calculation.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void calc()
    /// </syntax>
    /// </remarks>
    public void calc()
    {
        setprefix("@SYS28550");
        setprefix(#PreFixField(prodBOM,ItemId));

        if (!this.validate())
        {
            throw Exception::Error;
        }

        this.init();

        this.calcConsumption();

        this.calcBurden();

        if (!this.calcCost(consumptionInventQty))
        {
            return;
        }

        this.updateCalcAmount();
        this.recalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates burden cost for coby products with an overhead.
    /// </summary>
    public void calcBurden()
    {
        burdenCost = 0;

        switch (pmfProdCoBy.BurdenType)
        {
            case PmfBurdenType::Percent :
                // The value in the OverheadAmt field is a percentage of the total cost
                burdenCost = (pmfProdCoBy.OverheadAmt / 100) * this.totalOtherCosts() / (consumptionInventQty ? consumptionInventQty : 1);
                break;
            case PmfBurdenType::PerSeries :
            case PmfBurdenType::PerQuantity :
                // When estimating these two scenarios should behave the same
                if (pmfProdCoBy.CoByQty != 0)
                {
                    burdenCost = pmfProdCoBy.OverheadAmt / pmfProdCoBy.CoByQty;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the cost consumption for the active co/by product.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// protected void calcConsumption()
    /// </syntax>
    /// </remarks>
    protected void calcConsumption()
    {
        Qty                         consumptionBOMQtyVariable,
                                    consumptionBOMQtyConstant;
        BOMCalcProd                 bomCalcProd = this.parmParentBOMCalc();

        switch (pmfProdCoBy.BurdenType)
        {
            case PmfBurdenType::Percent:
                [consumptionBOMQtyVariable, consumptionBOMQtyConstant] = this.calculateBurdenVariableConstantOverhead();
                break;
            case PmfBurdenType::PerQuantity:
            case PmfBurdenType::PerSeries:
                consumptionBOMQtyVariable = pmfProdCoBy.QtyCoByCalc * bomCalcProd.parmPmfCostAllocationPct() / 100;
                break;
        }

        consumptionInventQty = (consumptionBOMQtyVariable + consumptionBOMQtyConstant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProdCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the global ProdCalcTrans record
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// public void initProdCalcTrans()
    /// </syntax>
    /// </remarks>
    public void initProdCalcTrans()
    {
        BOMCalcProd_PmfCoProduct    bomCalcProd_PmfCoProduct = this.parmParentBOMCalc();

        prodCalcTrans.clear();
        prodCalcTrans = PmfCoByProdCalcTrans::findIdRef(
                                pmfProdCoBy.TableId,
                                pmfProdCoBy.RecId,
                                bomCalcProd_PmfCoProduct.parmCoProduct().RecId,
                                true);

        if (prodCalcTrans.RecId)
        {
            this.resetCalcValues();

            itemId          = prodCalcTrans.Resource    ? prodCalcTrans.Resource    : itemId;
            inventUnitId    = prodCalcTrans.UnitId      ? prodCalcTrans.UnitId      : inventUnitId;
            inventDimId     = prodCalcTrans.InventDimId ? prodCalcTrans.InventDimId : inventDimId;
        }
        else
        {
            prodCalcTrans.initFromProdTable(
                bomCalcProd_PmfCoProduct.parmProdTable(),
                calculationType);

            prodCalcTrans.Production        = NoYes::No;
            prodCalcTrans.bom               = NoYes::No;
            prodCalcTrans.Resource          = itemId;
            prodCalcTrans.UnitId            = inventUnitId;
            prodCalcTrans.OprId             = '';
            prodCalcTrans.BOMCalcTransMap::setInventDimStr(inventDimId);
            prodCalcTrans.InventDimId       = inventDimId;
            prodCalcTrans.IdRefTableId      = pmfProdCoBy.TableId;
            prodCalcTrans.IdRefRecId        = pmfProdCoBy.RecId;
            prodCalcTrans.PmfIdRefCoByRecId = bomCalcProd_PmfCoProduct.parmCoProduct().RecId;
            prodCalcTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPmfProdCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the PmfProdCoByparameter.
    /// </summary>
    /// <param name="_pmfProdCoBy">PmfProdCoBy record to set.</param>
    /// <returns>PmfProdCoBy record to get or set.</returns>
    /// <remarks>
    /// <syntax>
    /// public PmfProdCoBy parmPmfProdCoBy(Record _pmfProdCoBy)
    /// </syntax>
    /// </remarks>
    public PmfProdCoBy parmPmfProdCoBy(
        PmfProdCoBy _pmfProdCoBy = pmfProdCoBy)
    {
        pmfProdCoBy = _pmfProdCoBy;
        return pmfProdCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfBurdenAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns calculated burden cost.
    /// </summary>
    /// <returns>Calculated burden cost.</returns>
    /// <remarks>
    /// <syntax>
    /// public CostPrice pmfBurdenAmount()
    /// </syntax>
    /// </remarks>
    public CostPrice pmfBurdenAmount()
    {
        return burdenCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsBurden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the class is representing burden.
    /// </summary>
    /// <returns>
    /// true if the class is representing burden; otherwise, false.
    /// </returns>
    public boolean pmfIsBurden()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalOtherCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overhead amount used in the burden cost calculation.
    /// </summary>
    /// <returns>
    /// The overhead amount for the burden cost calculation.
    /// </returns>
    protected Amount totalOtherCosts()
    {
        Amount  costsVariable,
                costsConstant;

        [costsVariable, costsConstant] = this.calculateBurdenVariableConstantOverhead();

        return costsVariable + costsConstant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if it is valid for the calculation to be run.
    /// </summary>
    /// <param name="_checkBOM">
    /// Boolean value used to determine if class as called with an
    /// active buffer.
    /// </param>
    /// <returns>
    /// Result of validation.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean validate(Enum _checkBOM)
    /// </syntax>
    /// </remarks>
    public boolean validate(boolean _checkBOM = true)
    {
        boolean ret = true;

        if (!itemId)
        {
            return checkFailed("@SYS25157");
        }

        if (!parentBOMCalc)
        {
            return checkFailed(
                strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        if (_checkBOM && !pmfProdCoBy)
        {
            ret = checkFailed(strfmt("@SYS29104", classId2Name(classidget(this))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns new instance of the BOMCalcProdLine_PmfCoBurden class.
    /// </summary>
    /// <returns>New instance of the
    /// BOMCalcProdLine_PmfCoBurden  class.</returns>
    /// <remarks>
    /// <syntax>
    /// public static BOMCalcProdLine_PmfBurden construct()
    /// </syntax>
    /// </remarks>
    public static BOMCalcProdLine_PmfCoBurden construct()
    {
        return new BOMCalcProdLine_PmfCoBurden();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBurdenCalcProd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates new instance of BOMCalcProdLine_PmfCoBurden
    /// class based on imput parameters.
    /// </summary>
    /// <param name="_prodCoBy">Co/By record</param>
    /// <param name="_parentBOMCalcProd">Parent production bom calc</param>
    /// <param name="_lineNum">Line number</param>
    /// <param name="_siteId">Site Id</param>
    /// <returns>New instance of the BOMCalcProdLine_PmfCoBurden  class.</returns>
    /// <remarks>
    /// <syntax>
    /// public static BOMCalcProdLine_PmfCoBurden newBurdenCalcProd(
    ///     Record _prodCoBy,
    ///     BOMCalcProd _parentBOMCalcProd,
    ///     LineNum _lineNum,
    ///     InventSiteId _siteId)
    /// </syntax>
    /// </remarks>
    public static BOMCalcProdLine_PmfCoBurden newBurdenCalcProd(
        PmfProdCoBy         _prodCoBy,
        BOMCalcProd         _parentBOMCalcProd,
        LineNum             _lineNum,
        InventSiteId        _siteId)
    {
        BOMCalcProdLine_PmfCoBurden burden
            = BOMCalcProdLine_PmfCoBurden::construct();

        burden.parmItemId(_prodCoBy.ItemId);
        burden.parmInventDimId(_prodCoBy.InventDimId);
        burden.parmPmfProdCoBy(_prodCoBy);
        burden.parmLineNum(_lineNum);
        burden.parmSiteId(_siteId);

        burden.parmParentBOMCalc(_parentBOMCalcProd);

        return burden;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBurdenVariableConstantOverhead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the overhead variable and constant amount used in the burden cost calculation.
    /// </summary>
    /// <returns>
    /// The container with two elements: the variable overhead amount and the constant overhead amount for the burden cost calculation.
    /// </returns>
    private container calculateBurdenVariableConstantOverhead()
    {
        BOMCalcProd_PmfCoProduct    bomCalcProd_PmfCoProduct = this.parmParentBOMCalc();
        PmfCoByProdCalcTrans        otherCosts;

        select sum(CostAmount),sum(CostMarkup)
            from otherCosts
            where otherCosts.PmfIdRefCoByRecId == bomCalcProd_PmfCoProduct.parmCoProduct().RecId
            &&    otherCosts.CalcType          != ItemCalcType::Burden
            &&   !otherCosts.Production
            &&    otherCosts.CollectRefLevel == this.parmParentBOMCalc().parmLevel() + 1;

        return [otherCosts.CostAmount, otherCosts.CostMarkup];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of <c>BomCalcProdLine_PmfCoBurden</c>.
    /// </summary>
    protected void initParameters()
    {
        BomCalcLinePmfBurdenInitializer bomCalcLinePmfBurdenInitializer = BomCalcLinePmfBurdenInitializer::construct();

        super();

        bomCalcLinePmfBurdenInitializer.initializeBomCalcLine(this);

        bomCalcLinePmfBurdenInitializer.initializeBomCalcLineFromProdCoBy(this, pmfProdCoBy);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>