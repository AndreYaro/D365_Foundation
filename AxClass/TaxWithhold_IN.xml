<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithhold_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class is used to calculate withholding tax.
/// </summary>
public class TaxWithhold_IN
{
    TmpTaxWithholdWorkTrans_IN          taxWithholdWorkTrans;
    real                                rateOfDeduction;
    container                           totalTDSAmount, taxcode,taxRateOfDeduction;
    AmountCur                           transactionAmount;
    TmpTaxWithholdSettledComponents_IN  tmpTaxWithholdSettledComponents;
    /// <summary>
    /// Sets/gets transactionAmountCur.
    /// </summary>
    /// <param name="_transactionAmount">
    /// transactionAmount in Transaction currency.
    /// </param>
    /// <returns>
    /// Sets/gets transactionAmountCur.
    /// </returns>
    /// <remarks>
    /// Sets/gets transactionAmountCur.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTransactionAmount</Name>
				<Source><![CDATA[
    public AmountCur getTransactionAmount(AmountCur _transactionAmount = transactionAmount)
    {
        transactionAmount = _transactionAmount;
        return transactionAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWithholdTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// insert record to TmpTaxWithholdSettledComponents_IN table from TaxWithholdTrans_IN.
    /// </summary>
    /// <param name="_fromDate">
    /// From date.
    /// </param>
    /// <param name="_toDate">
    /// To date.
    /// </param>
    /// <param name="_taxWithholdComponentGroupRecId">
    /// TaxWithholdComponentGroup_IN table recId.
    /// </param>
    /// <param name="_taxWithholdSettleTrans">
    /// TaxWithholdSettleTrans_IN table record.
    /// </param>
    /// <param name="_newVoucher">
    /// Voucher object.
    /// </param>
    /// <remarks>
    /// insert record to TmpTaxWithholdSettledComponents_IN table from TaxWithholdTrans_IN.
    /// </remarks>

    public void initFromTaxWithholdTrans(TransDate                          _fromDate,
                                         TransDate                          _toDate,
                                         TaxWithholdComponentGroupRecId_IN  _taxWithholdComponentGroupRecId,
                                         TaxWithholdSettleTrans_IN          _taxWithholdSettleTrans,
                                         Voucher                            _newVoucher  = '')

    {
        TaxWithholdTrans_IN     taxWithholdTrans;
        TaxWithholdTrans_IN     taxWithholdTransLoc;
        CurrencyExchangeHelper  currencyExchangeHelper;

        ttsbegin;
        while select sum(TaxWithholdAmount) from taxWithholdTrans
            group by TaxWithholdComponent, Voucher, CurrencyCode
            where taxWithholdTrans.TaxWithholdSettlementPeriod == _taxWithholdSettleTrans.TaxWithholdSettlementPeriod
               && taxWithholdTrans.TaxWithholdComponentGroup   == _taxWithholdComponentGroupRecId
               && taxWithholdTrans.Voucher                     == _taxWithholdSettleTrans.OrigVoucher
        {
            tmpTaxWithholdSettledComponents.Amount               = taxWithholdTrans.TaxWithholdAmount;
            tmpTaxWithholdSettledComponents.TaxWithholdComponent = taxWithholdTrans.TaxWithholdComponent;
            tmpTaxWithholdSettledComponents.Currency             = CompanyInfoHelper::standardCurrency();
            tmpTaxWithholdSettledComponents.Secondarycurrency    = Ledger::reportingCurrency();

            if (_newVoucher)
            {
                select sum(TaxWithholdAmount) from taxWithholdTransLoc
                    where taxWithholdTransLoc.TaxWithholdComponent  == taxWithholdTrans.TaxWithholdComponent
                       && taxWithholdTransLoc.TransDate             >= _fromDate
                       && taxWithholdTransLoc.TransDate             <= _toDate
                       && taxWithholdTransLoc.SettledVoucher        == _taxWithholdSettleTrans.Voucher;
            }
            else
            {
                select  sum(TaxWithholdAmount) from taxWithholdTransLoc
                    where taxWithholdTransLoc.TaxWithholdSettlementPeriod   == _taxWithholdSettleTrans.TaxWithholdSettlementPeriod
                       && taxWithholdTransLoc.TaxWithholdComponent          ==  taxWithholdTrans.TaxWithholdComponent
                       && taxWithholdTransLoc.SettledVoucher                != '';
            }

            tmpTaxWithholdSettledComponents.AccumulatedAmount       = taxWithholdTransLoc.TaxWithholdAmount;

            if (TaxWithholdSettledComponentsCurrencyExchangeDate_INFlight::instance().isEnabled())
            {
                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            _taxWithholdSettleTrans.TransDate);
            }
            else
            {
                currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            taxWithholdTrans.TransDate);
            }

            tmpTaxWithholdSettledComponents.AccumulatedAmtcurrency  = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTrans.CurrencyCode,
                                                                                                            tmpTaxWithholdSettledComponents.AccumulatedAmount);

            tmpTaxWithholdSettledComponents.AmountSecondarycurrency = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTrans.CurrencyCode,
                                                                                                            tmpTaxWithholdSettledComponents.Amount);

            tmpTaxWithholdSettledComponents.Status                  = NoYes::Yes;
            tmpTaxWithholdSettledComponents.doInsert();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTaxWithholdRegulation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Load tax withhold regulation.
    /// </summary>
    /// <param name="_tmpTaxWithholdWorkTrans">
    /// The instance of the <c>TmpTaxWithholdWorkTrans_IN</c> class.
    /// </param>
    public void loadTaxWithholdRegulation(TmpTaxWithholdWorkTrans_IN    _tmpTaxWithholdWorkTrans)
    {
        TaxWithholdWorkRegulation_IN    taxWithholdWorkRegulation;
        TaxWithholdUncommitted_IN       taxWithholdUncommitted;

        ttsbegin;
        while select forUpdate SourceBaseAmountCurRegulated, SourceRegulateAmountCur, TaxWithholdCode, SourceTableId, SourceRecId from _tmpTaxWithholdWorkTrans
        {
            select firstOnly crossCompany AdjustedAmountOrigin, AdjustedTaxWithholdAmount, RecId from taxWithholdWorkRegulation
                where taxWithholdWorkRegulation.SourceTableId       == _tmpTaxWithholdWorkTrans.SourceTableId
                    && taxWithholdWorkRegulation.SourceRecId        == _tmpTaxWithholdWorkTrans.SourceRecId
                    && taxWithholdWorkRegulation.TaxWithholdCode    == _tmpTaxWithholdWorkTrans.TaxWithholdCode;

            if (taxWithholdWorkRegulation.RecId != 0)
            {
                _tmpTaxWithholdWorkTrans.SourceBaseAmountCurRegulated = taxWithholdWorkRegulation.AdjustedAmountOrigin;
                _tmpTaxWithholdWorkTrans.SourceRegulateAmountCur      =  taxWithholdWorkRegulation.AdjustedTaxWithholdAmount;
                _tmpTaxWithholdWorkTrans.Update();

                select forUpdate taxWithholdUncommitted
                    where taxWithholdUncommitted.SourceTableId   == _tmpTaxWithholdWorkTrans.SourceTableId
                       && taxWithholdUncommitted.SourceRecId     == _tmpTaxWithholdWorkTrans.SourceRecId
                       && taxWithholdUncommitted.TaxWithholdCode == _tmpTaxWithholdWorkTrans.TaxWithholdCode;

                if (taxWithholdUncommitted.RecId)
                {
                    taxWithholdUncommitted.SourceBaseAmountCurRegulated = taxWithholdWorkRegulation.AdjustedAmountOrigin * sign(taxWithholdUncommitted.SourceBaseAmountCurRegulated);
                    taxWithholdUncommitted.SourceRegulateAmountCur = taxWithholdWorkRegulation.AdjustedTaxWithholdAmount * sign(taxWithholdUncommitted.SourceRegulateAmountCur);
                    taxWithholdUncommitted.TaxAutogenerated = NoYes::No;
                    taxWithholdUncommitted.update();
                }
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rateOfDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// The rate of dedution.
    /// </summary>
    /// <param name="_rateOfDeduction">
    /// The rate of deduction.
    /// </param>
    /// <returns>
    /// The rate of deduction.
    /// </returns>
    public real rateOfDeduction(real _rateOfDeduction = rateOfDeduction)
    {
        rateOfDeduction = _rateOfDeduction;
        return rateOfDeduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCurTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// The total tax amount cur.
    /// </summary>
    /// <returns>
    /// The instance of the <c>AmountCur</c> class.
    /// </returns>
    public AmountCur taxAmountCurTotal()
    {
        select sum(SourceTaxAmountCur) from taxWithholdWorkTrans;

        return taxWithholdWorkTrans.SourceTaxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTCSType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax is TCS type.
    /// </summary>
    /// <returns>
    /// The result of the check, if 'Yes', the tax is TCS type.
    /// </returns>
    public NoYes taxTCSType()
    {
        select firstonly TaxWithholdGroup from  taxWithholdWorkTrans;

        if (TaxWithholdGroupHeading::find(taxWithholdWorkTrans.TaxWithholdGroup).TaxType_IN == TaxWithholdCodeType_IN::TCS)
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxTDSType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax is TDS type.
    /// </summary>
    /// <returns>
    /// The result of the check, if 'Yes', the tax is TDS type.
    /// </returns>
    public NoYes taxTDSType()
    {
        select firstonly TaxWithholdGroup from taxWithholdWorkTrans;

        if (TaxWithholdGroupHeading::find(taxWithholdWorkTrans.TaxWithholdGroup).TaxType_IN == TaxWithholdCodeType_IN::TDS)
        {
            return NoYes::Yes;
        }

        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWithholdSettledComponents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data of <c>TmpTaxWithholdSettledComponents_IN</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TmpTaxWithholdSettledComponents_IN</c> table.
    /// </returns>
    public TmpTaxWithholdSettledComponents_IN  tmpTaxWithholdSettledComponents()
    {
        return tmpTaxWithholdSettledComponents;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWithholdWorkTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data of <c>TmpTaxWithholdWorkTrans_IN</c> table.
    /// </summary>
    /// <param name="_taxWithholdWorkTrans">
    /// An instance of <c>TmpTaxWithholdWorkTrans_IN</c> table.
    /// </param>
    /// <returns>
    /// The data from the <c>TmpTaxWithholdWorkTrans_IN</c> table.
    /// </returns>
    public TmpTaxWithholdWorkTrans_IN tmpTaxWithholdWorkTrans(TmpTaxWithholdWorkTrans_IN _taxWithholdWorkTrans = taxWithholdWorkTrans)
    {
        taxWithholdWorkTrans = _taxWithholdWorkTrans;
        return taxWithholdWorkTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get sign for withhold tax.
    /// </summary>
    /// <param name="_headingTableId">
    /// The heading table tableId.
    /// </param>
    /// <param name="_sourceRecId">
    /// The Source table Record Id.
    /// </param>
    /// <param name="_taxWithholdCode">
    /// The TaxWithholdCode.
    /// </param>
    /// <returns>
    /// Return sign for withhold tax.
    /// </returns>
    public static int getTaxSign(
        RefRecId        _headingTableId,
        RefRecId        _sourceRecId,
        TaxWithholdCode _taxWithholdCode)
    {
        int           sign = 1;
        LedgerJournalTrans  ledgerJournalTransLoc;
        TaxWithholdCodeType_IN taxWithholdType;
        boolean                purchTypeCash = false;

        if (_headingTableId == tableNum(LedgerJournalTable))
        {
            ledgerJournalTransLoc = LedgerJournalTrans::findRecId(_sourceRecId, false);
            LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = ledgerJournalTransLoc.ledgerJournalTransTaxExtensionIN();

            if (ledgerJournalTransTaxExt.TDSGroup != '')
            {
                taxWithholdType = TaxWithholdCodeType_IN::TDS;
            }
            else if (ledgerJournalTransTaxExt.TCSGroup != '')
            {
                taxWithholdType = TaxWithholdCodeType_IN::TCS;
            }

            if ( MainAccount::findByLedgerDimension(ledgerJournalTransLoc.OffsetLedgerDimension).PostingType == LedgerPostingType::PurchCash
                || MainAccount::findByLedgerDimension(ledgerJournalTransLoc.LedgerDimension).PostingType == LedgerPostingType::PurchCash)
            {
                purchTypeCash = true;
            }
            sign = real2int(TaxWithholdCalculation_IN::setDirection(sign,
                    ledgerJournalTransLoc.AccountType,
                    ledgerJournalTransLoc.OffsetAccountType,
                    ledgerJournalTransLoc.AmountCurDebit,
                    ledgerJournalTransLoc.AmountCurCredit,
                    taxWithholdType,
                    LedgerJournalType::Approval,
                    purchTypeCash,
                    SettlementType::None,
                    ledgerJournalTransLoc.Prepayment));
        }

        else if ((TaxWithholdTable::find(_taxWithholdCode).isTDSTaxType_IN()
                && (_headingTableId == tableNum(PurchTable)
                    || _headingTableId == tableNum(VendInvoiceInfoTable)
                    || _headingTableId == tableNum(ProjAdvancedJournal)))
            || (TaxWithholdTable::find(_taxWithholdCode).isTCSTaxType_IN()
                && (_headingTableId == tableNum(SalesTable) || _headingTableId == tableNum(SalesParmTable)
                    || _headingTableId == tableNum(CustInvoiceTable))))
        {
            sign = sign * -1;
        }

        return sign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWithholdTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show withhold taxed.
    /// </summary>
    /// <param name="_taxWithhold">
    /// The withhold tax.
    /// </param>
    /// <param name="_record">
    /// The record.
    /// </param>
    /// <param name="_formRun">
    /// The instance of the <c>FormRun</c> classs.
    /// </param>
    /// <returns>
    /// The instance of the <c>FormRun</c> class.
    /// </returns>
    public static FormRun showWithholdTaxes(TaxWithhold_IN      _taxWithhold,
                                                   Common              _record     = null,
                                                   FormRun             _formRun    = null)
    {
        Args            args;
        FormRun         formRun;

        args = new Args();
        args.caller(_taxWithhold);
        args.record(_record);
        args.parmObject(_formRun);

        formRun = new MenuFunction(menuitemdisplaystr(TaxWithholdTmpWorkTrans_IN), MenuItemType::Display).create(args);

        formRun.run();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWithSettledTaxWithhold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the TaxWithholdSettledComponents_IN form.
    /// </summary>
    /// <param name="_taxWithhold_IN">
    /// TaxWithhold_IN class instance to initialize the Form.
    /// </param>
    /// <param name="_record">
    /// Common buffer.
    /// </param>
    /// <param name="_formRun">
    /// FormRun instance.
    /// </param>
    /// <returns>
    /// return FormRun instance.
    /// </returns>
    /// <remarks>
    /// Opens the TaxWithholdSettledComponents_IN form.
    /// </remarks>

    public static FormRun showWithSettledTaxWithhold(TaxWithhold_IN   _taxWithhold_IN,
                                                            Common           _record     = null,
                                                            FormRun          _formRun    = null)
    {
        Args            args;
        FormRun         formRun;

        args = new Args();
        args.caller(_taxWithhold_IN);
        args.record(_record);
        args.parmObject(_formRun);

        formRun = new MenuFunction(menuitemdisplaystr(TaxWithholdSettledComponents_IN), MenuItemType::Display).create(args);

        formRun.run();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxWithholdCodeType2TaxWithholdType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts enum variable from enum <c>TaxWithholdCodeType_IN</c> to enum <c>TaxWithholdType</c>.
    /// </summary>
    /// <param name="_taxWithholdCodeType">
    /// The <c>TaxWithholdCodeType_IN</c> value to be converted.
    /// </param>
    /// <returns>
    /// The <c>TaxWithholdType_IN</c> value;
    /// </returns>
    static public TaxWithholdType_IN TaxWithholdCodeType2TaxWithholdType(TaxWithholdCodeType_IN _taxWithholdCodeType)
    {
        TaxWithholdType_IN taxWithholdType;

        switch (_taxWithholdCodeType)
        {
            case TaxWithholdCodeType_IN::TCS:
                taxWithholdType = TaxWithholdType_IN::TCS;
                break;
            case TaxWithholdCodeType_IN::TDS:
                taxWithholdType = TaxWithholdType_IN::TDS;
                break;
            default:
                break;
        }
        return taxWithholdType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxWithholdType2TaxWithholdCodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts enum variable from enum <c>TaxWithholdType</c> to enum <c>TaxWithholdCodeType_IN</c>.
    /// </summary>
    /// <param name="_taxWithholdType">
    /// The <c>TaxWithholdType</c> value to be converted.
    /// </param>
    /// <returns>
    /// The <c>TaxWithholdCodeType_IN</c> value;
    /// </returns>
    static public TaxWithholdCodeType_IN TaxWithholdType2TaxWithholdCodeType(TaxWithholdType_IN _taxWithholdType)
    {
        TaxWithholdCodeType_IN taxWithholdCodeType = TaxWithholdCodeType_IN::None;

        switch (_taxWithholdType)
        {
            case TaxWithholdType_IN::TCS:
                taxWithholdCodeType = TaxWithholdCodeType_IN::TCS;
                break;
            case TaxWithholdType_IN::TDS:
                taxWithholdCodeType = TaxWithholdCodeType_IN::TDS;
                break;
            default:
                break;
        }
        return taxWithholdCodeType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>