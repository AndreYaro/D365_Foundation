<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountBalanceCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAccountBalanceCalculator</c> class is responsible for providing bank account balances.
/// </summary>
internal final class BankAccountBalanceCalculator
{
    private BankAccountTable bankAccountTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankAccountTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankAccountBalanceCalculator</c> class with the required elements
    /// for proper execution of the calculator.
    /// </summary>
    /// <param name = "_bankAccountTable">The <c>BankAccountTable</c> table buffer used to calculate balances against.</param>
    /// <returns>A new instance of the <c>BankAccountBalanceCalculator</c> class.</returns>
    internal static BankAccountBalanceCalculator newFromBankAccountTable(BankAccountTable _bankAccountTable)
    {
        BankAccountBalanceCalculator bankAccountBalanceCalculator = new BankAccountBalanceCalculator();
        bankAccountBalanceCalculator.bankAccountTable = _bankAccountTable;

        return bankAccountBalanceCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates bank account balances.
    /// </summary>
    /// <param name = "_balanceAsOfDate">The value used to get the balances as of that date.</param>
    /// <returns>A new instance of the <c>BankAccountBalance</c> class containing the calculated bank account balances.</returns>
    internal BankAccountBalance calculate(TransDate _balanceAsOfDate = dateMax())
    {
        BankAccountTrans bankAccountTrans;

        select sum(AmountCur), sum(AmountCorrect), sum(AmountMST), sum(AmountReportingCurrency) from bankAccountTrans
            where bankAccountTrans.AccountId == bankAccountTable.AccountID
                && bankAccountTrans.TransDate <= _balanceAsOfDate;

        return BankAccountBalance::newFromBalances(
            bankAccountTable.AccountID,
            bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect,
            bankAccountTrans.AmountMST,
            bankAccountTrans.AmountReportingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateByDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the bank account balances per DefaultDimension value.
    /// </summary>
    /// <param name = "_balanceAsOfDate">The value used to get the balances as of that date.</param>
    /// <returns>A <c>List</c> of <c>BankAccountDefaultDimensionBalance</c> class instances containing the balances across DefaultDimension values.</returns>
    internal List calculateByDefaultDimension(TransDate _balanceAsOfDate = dateMax())
    {
        AmountCur balanceCur;
        BankAccountTrans bankAccountTrans, bankAccountTrans2;
        List bankAccountDimensionBalanceList = new List(Types::Class);

        DefaultDimensionMapping defaultDimensionMapping;

        while select DefaultDimension from bankAccountTrans
            group by DefaultDimension
            where bankAccountTrans.AccountId == bankAccountTable.AccountID
                && bankAccountTrans.TransDate <= _balanceAsOfDate
            notexists join defaultDimensionMapping
               where  defaultDimensionMapping.DefaultDimensionInput == bankAccountTrans.DefaultDimension
        {
                DimensionAttributeValueSetStorage storage = DimensionAttributeValueSetStorage::find(bankAccountTrans.DefaultDimension);
                DimensionDefault newDefaultDimension = storage.save();
                
                defaultDimensionMapping.clear();
                defaultDimensionMapping.DefaultDimensionInput = bankAccountTrans.DefaultDimension;
                defaultDimensionMapping.DefaultDimensionMerged = newDefaultDimension;
                defaultDimensionMapping.insert();
        }

        while select sum(AmountCur), sum(AmountCorrect), sum(AmountMST), sum(AmountReportingCurrency) from bankAccountTrans
            join defaultDimensionMapping
            group by defaultDimensionMapping.DefaultDimensionMerged
            where bankAccountTrans.AccountId == bankAccountTable.AccountID
                && bankAccountTrans.TransDate <= _balanceAsOfDate    
                && bankAccountTrans.DefaultDimension == defaultDimensionMapping.DefaultDimensionInput
        {
            balanceCur = bankAccountTrans.AmountCur + bankAccountTrans.AmountCorrect;

            if (balanceCur != 0 || bankAccountTrans.AmountMST != 0 || bankAccountTrans.AmountReportingCurrency != 0)
            {
                bankAccountDimensionBalanceList.addEnd(
                    BankAccountDefaultDimensionBalance::newFromBalances(
                        bankAccountTable.AccountID,
                        defaultDimensionMapping.DefaultDimensionMerged,
                        BankAccountBalance::newFromBalances(bankAccountTable.AccountID, balanceCur, bankAccountTrans.AmountMST, bankAccountTrans.AmountReportingCurrency)));
            }
        }

        return bankAccountDimensionBalanceList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>