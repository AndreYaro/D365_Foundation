<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetImpairmentIndicatorHandler_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class to handle operations of <C>AssetImpairmentIndicator_JP</C>
/// </summary>
public class AssetImpairmentIndicatorHandler_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLatestInfoWithFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the max line number, latest undiscouted cash flow and latest recoverable amount for records user concerned
    /// </summary>
    /// <param name="_indicatorTmp">
    /// Buffer of <C>AssetImpairmentIndicatorTmp_JP</C>
    /// </param>
    /// <returns>
    /// Returns map containing the latest information for different combination of AssetId and BookId
    /// The map has pairs of keys and values like: [AssetId, BookId], [LineNum, undiscountedCashFlow, RecoverableAmount]
    /// </returns>
    /// <remarks>
    /// select a.ASSETID, a.BOOKID, a.LineNum, a.UndiscountedCashFlow, a.RecoverableAmount from ASSETIMPAIRMENTINDICATOR_JP a
    ///     order by a.AssetId ASC, a.BookId ASC, a.ModifyDate DESC, a.LineNum DESC
    ///     where a.ISFINALIZED = 1
    ///     exists join ASSETIMPAIRMENTINDICATORTMP_JP b on a.ASSETID = b.ASSETID and a.BOOKID = b.BOOKID
    /// </remarks>
    protected static Map getLatestInfoWithFilter(AssetImpairmentIndicatorTmp_JP _indicatorTmp)
    {
        Map                             ret;
        AssetImpairmentIndicator_JP     indicator;
        AssetId                         assetId;
        AssetBookId                     bookId;
        LineNum                         num;
        real                            undisCashFlow;
        real                            recovAmt;

        ret = new Map(Types::Container, Types::Container);

        while select AssetId, BookId, LineNum, UndiscountedCashFlow, RecoverableAmount from indicator
            order by AssetId, BookId, ModifyDate desc, LineNum desc
            where indicator.IsFinalized == NoYes::Yes
            exists join _indicatorTmp
            where indicator.AssetId == _indicatorTmp.AssetId
                && indicator.BookId == _indicatorTmp.BookId
        {
            if (assetId != indicator.AssetId || bookId != indicator.BookId)
            {
                if (num)
                {
                    ret.insert([assetId, bookId], [num, undisCashFlow, recovAmt]);
                }
                assetId = indicator.AssetId;
                bookId  = indicator.BookId;
                num = indicator.LineNum;
                undisCashFlow = indicator.UndiscountedCashFlow;
                recovAmt = indicator.RecoverableAmount;
            }

            if (indicator.UndiscountedCashFlow != 0 && undisCashFlow == 0)
            {
                undisCashFlow = indicator.UndiscountedCashFlow;
            }
            if (indicator.RecoverableAmount != 0 && recovAmt == 0)
            {
                recovAmt = indicator.RecoverableAmount;
            }
        }
        if (num)
        {
            ret.insert([assetId, bookId], [num, undisCashFlow, recovAmt]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestInfoWithoutFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the max line number, latest undiscouted cash flow and latest recoverable amount for all non finalized records
    /// </summary>
    /// <returns>
    /// Returns map containing the latest information for different combination of AssetId and BookId
    /// The map has pairs of keys and values like: [AssetId, BookId], [LineNum, undiscountedCashFlow, RecoverableAmount]
    /// </returns>
    /// <remarks>
    /// select a.ASSETID, a.BOOKID, a.LineNum, a.UndiscountedCashFlow, a.RecoverableAmount from ASSETIMPAIRMENTINDICATOR_JP a
    ///     order by a.AssetId ASC, a.BookId ASC, a.ModifyDate DESC, a.LineNum DESC
    ///     where a.ISFINALIZED = 1
    ///     exists join ASSETIMPAIRMENTINDICATOR_JP b on a.ASSETID = b.ASSETID and a.BOOKID = b.BOOKID
    ///     where b.ISFINALIZED = 0
    /// </remarks>
    protected static Map getLatestInfoWithoutFilter()
    {
        Map                             ret;
        AssetImpairmentIndicator_JP     indicatorNotFinalized, indicatorFinalized;
        AssetId                         assetId;
        AssetBookId                     bookId;
        LineNum                         num;
        real                            undisCashFlow;
        real                            recovAmt;

        ret = new Map(Types::Container, Types::Container);

        while select AssetId, BookId, LineNum, UndiscountedCashFlow, RecoverableAmount from indicatorFinalized
            order by AssetId, BookId, ModifyDate desc, LineNum desc
            where indicatorFinalized.IsFinalized == NoYes::Yes
            exists join indicatorNotFinalized
            where indicatorNotFinalized.IsFinalized == NoYes::No
                && indicatorNotFinalized.AssetId == indicatorFinalized.AssetId
                && indicatorNotFinalized.BookId == indicatorFinalized.BookId
        {
            if (assetId != indicatorFinalized.AssetId || bookId != indicatorFinalized.BookId)
            {
                if (num)
                {
                    ret.insert([assetId, bookId], [num, undisCashFlow, recovAmt]);
                }
                assetId         = indicatorFinalized.AssetId;
                bookId          = indicatorFinalized.BookId;
                num             = indicatorFinalized.LineNum;
                undisCashFlow   = indicatorFinalized.UndiscountedCashFlow;
                recovAmt        = indicatorFinalized.RecoverableAmount;
            }

            if (indicatorFinalized.UndiscountedCashFlow != 0 && undisCashFlow == 0)
            {
                undisCashFlow = indicatorFinalized.UndiscountedCashFlow;
            }
            if (indicatorFinalized.RecoverableAmount != 0 && recovAmt == 0)
            {
                recovAmt = indicatorFinalized.RecoverableAmount;
            }
        }
        if (num)
        {
            ret.insert([assetId, bookId], [num, undisCashFlow, recovAmt]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReviewIndicators</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize impairment indicators for the specified composition of AssetId and BookId
    /// </summary>
    /// <param name="_records">
    /// A container contains a set of AssetId and BookId, which are concerned by user
    /// </param>
    /// <remarks>
    /// If there are not finalized indicator for the record, then do nothing;
    /// else, create a <C>AssetImpairmentIndicator_JP</C> for the record
    /// </remarks>
    public static void initReviewIndicators(container _records)
    {
        AssetImpairmentIndicator_JP     indicator;
        AssetImpairmentIndicatorTmp_JP  indicatorTmp;
        AssetTransDate                  currentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        ttsBegin;

        indicatorTmp = AssetImpairmentIndicatorTmp_JP::initDataOnServer(_records);

        insert_recordset indicator (AssetId, BookId, ModifyDate)
            select AssetId, BookId, currentDate from indicatorTmp
            notExists join indicator
            where indicator.AssetId == indicatorTmp.AssetId
                && indicator.BookId == indicatorTmp.BookId
                && indicator.IsFinalized == NoYes::No;
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRecordsWithFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <C>AssetImpairmentTestResultLine_JP</C> from non finalized to finalized with filter
    /// </summary>
    /// <param name="_records">
    /// Query filter for RecId of non finalized <C>AssetImpairmentTestResultLine_JP</C>
    /// </param>
    /// <returns>
    /// Returns [true] if all the non finalized records are updated;
    /// Else, returns [false, Assetid, BookId, ModifyDate] to identify the record which can not be updated
    /// </returns>
    /// <remarks>
    /// select ASSETID, BOOKID, IsFinalized, LineNum, ModifyDate, UndiscountedCashFlow, RecoverableAmount from ASSETIMPAIRMENTINDICATOR_JP a
    ///     where ISFINALIZED = 0 and (RecId = ... || RecId = ...)
    ///     order by a.AssetId ASC, a.BookId ASC, a.ModifyDate ASC, a.CreatedDateTime ASC
    /// </remarks>
    public static container UpdateRecordsWithFilter(container _records)
    {
        container                       ret;
        AssetImpairmentIndicatorTmp_JP  indicatorTmp;
        AssetImpairmentIndicator_JP     indicator, indicator2;
        UnitofWork                      uow = new UnitofWork();
        AssetId                         assetId;
        AssetBookId                     bookId;
        LineNum                         num;
        boolean                         updateFailed;
        Map                             latestInfoMap = new Map(Types::Container, Types::Container);
        container                       latestInfoCon;
        real                            undisCashFlow;
        real                            recovAmt;
        Map     map;

        indicatorTmp = AssetImpairmentIndicatorTmp_JP::initDataOnServer(_records);

        //Check if all non finalized records to be updated are later than finalized records
        while select AssetId, BookId, minOf(ModifyDate) from indicator
            group by AssetId, BookId
            where indicator.IsFinalized == NoYes::No
            join maxOf(ModifyDate) from indicator2
            where indicator2.IsFinalized == NoYes::Yes
                && indicator.AssetId == indicator2.AssetId
                && indicator.BookId == indicator2.BookId
            exists join indicatorTmp
            where indicator.AssetId == indicatorTmp.AssetId
                && indicator.BookId == indicatorTmp.BookId
        {
            if (indicator.ModifyDate < indicator2.ModifyDate)
            {
                return [false, 0, indicator.AssetId, indicator.BookId, indicator.ModifyDate];
            }
        }

        ////Check if all records have nonzero indicators
        select firstOnly AssetId, BookId, ModifyDate from indicator
            exists join indicatorTmp
            where indicator.AssetId == indicatorTmp.AssetId
                && indicator.BookId == indicatorTmp.BookId
                && indicator.IsFinalized == NoYes::No
                && indicator.UndiscountedCashFlow == 0
                && indicator.RecoverableAmount == 0;

        if (indicator.AssetId)
        {
            return [false, 1, indicator.AssetId, indicator.BookId, indicator.ModifyDate];
        }

        map = AssetImpairmentIndicatorHandler_JP::getLatestInfoWithFilter(indicatorTmp);

        while select forupdate AssetId, BookId, IsFinalized, LineNum, ModifyDate, UndiscountedCashFlow, RecoverableAmount from indicator
            order by AssetId, BookId, ModifyDate, CreatedDateTime
            where indicator.IsFinalized == NoYes::No
            exists join indicatorTmp
                where indicator.AssetId == indicatorTmp.AssetId
                    && indicator.BookId == indicatorTmp.BookId

        {
            if (assetId != indicator.AssetId || bookId != indicator.BookId)
            {
                assetId = indicator.AssetId;
                bookId  = indicator.BookId;
                if (map.exists([assetId, bookId]))
                {
                    latestInfoCon   = map.lookup([assetId, bookId]);
                    num             = conPeek(latestInfoCon, 1);
                    undisCashFlow   = conPeek(latestInfoCon, 2);
                    recovAmt        = conPeek(latestInfoCon, 3);
                }
                else
                {
                    num             = 0;
                    undisCashFlow   = 0;
                    recovAmt        = 0;
                }
            }

            if ((indicator.UndiscountedCashFlow == 0 || indicator.UndiscountedCashFlow == undisCashFlow)
                && (indicator.RecoverableAmount == 0 || indicator.RecoverableAmount == recovAmt))
            {
                updateFailed = true;
                ret = [false, 1, indicator.AssetId, indicator.BookId, indicator.ModifyDate];
                break;
            }

            num++;

            indicator.LineNum = num;
            indicator.IsFinalized = NoYes::Yes;
            uow.updateonSaveChanges(indicator);

            if (indicator.UndiscountedCashFlow != 0)
            {
                undisCashFlow = indicator.UndiscountedCashFlow;
            }
            if (indicator.RecoverableAmount != 0)
            {
                recovAmt = indicator.RecoverableAmount;
            }
        }

        if (!updateFailed)
        {
            ret = [true];
            uow.saveChanges();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateRecordsWithoutFilter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <C>AssetImpairmentTestResultLine_JP</C> from non finalized to finalized
    /// </summary>
    /// <returns>
    /// Returns [true] if all the non finalized records are updated;
    /// Else, returns [false, Assetid, BookId, ModifyDate] to identify the record which can not be updated
    /// </returns>
    /// <remarks>
    /// select ASSETID, BOOKID, IsFinalized, LineNum, ModifyDate, UndiscountedCashFlow, RecoverableAmount from ASSETIMPAIRMENTINDICATOR_JP a
    ///     where ISFINALIZED = 0 and (RecId = ... || RecId = ...)
    ///     order by a.AssetId ASC, a.BookId ASC, a.ModifyDate ASC, a.CreatedDateTime ASC
    /// </remarks>
    public static container UpdateRecordsWithoutFilter()
    {
        container                               ret;
        AssetImpairmentIndicator_JP             indicator, indicator2;
        UnitofWork                              uow = new UnitofWork();
        AssetId                         assetId;
        AssetBookId                     bookId;
        LineNum                         num;
        boolean                         updateFailed;
        Map                             map;
        container                       latestInfoCon;
        real                            undisCashFlow;
        real                            recovAmt;

        //Check if all non finalized records to be updated are later than finalized records
        while select AssetId, BookId, minOf(ModifyDate) from indicator
            group by AssetId, BookId
            where indicator.IsFinalized == NoYes::No
            join maxOf(ModifyDate) from indicator2
            where indicator2.IsFinalized == NoYes::Yes
                && indicator.AssetId == indicator2.AssetId
                && indicator.BookId == indicator2.BookId
        {
            if (indicator.ModifyDate < indicator2.ModifyDate)
            {
                return [false, 0, indicator.AssetId, indicator.BookId, indicator.ModifyDate];
            }
        }

        ////Check if all records have nonzero indicators
        select firstOnly AssetId, BookId, ModifyDate from indicator
            where indicator.IsFinalized == NoYes::No
                && indicator.UndiscountedCashFlow == 0
                && indicator.RecoverableAmount == 0;

        if (indicator.AssetId)
        {
            return [false, 1, indicator.AssetId, indicator.BookId, indicator.ModifyDate];
        }

        map = AssetImpairmentIndicatorHandler_JP::getLatestInfoWithoutFilter();

        while select forupdate AssetId, BookId, IsFinalized, LineNum, ModifyDate, UndiscountedCashFlow, RecoverableAmount from indicator
            order by AssetId, BookId, ModifyDate, CreatedDateTime
            where indicator.IsFinalized == NoYes::No
        {
            if (assetId != indicator.AssetId || bookId != indicator.BookId)
            {
                assetId = indicator.AssetId;
                bookId  = indicator.BookId;
                if (map.exists([assetId, bookId]))
                {
                    latestInfoCon   = map.lookup([assetId, bookId]);
                    num             = conPeek(latestInfoCon, 1);
                    undisCashFlow   = conPeek(latestInfoCon, 2);
                    recovAmt        = conPeek(latestInfoCon, 3);
                }
                else
                {
                    num             = 0;
                    undisCashFlow   = 0;
                    recovAmt        = 0;
                }
            }

            if ((indicator.UndiscountedCashFlow == 0 || indicator.UndiscountedCashFlow == undisCashFlow)
                && (indicator.RecoverableAmount == 0 || indicator.RecoverableAmount == recovAmt))
            {
                updateFailed = true;
                ret = [false, 1, indicator.AssetId, indicator.BookId, indicator.ModifyDate];
                break;
            }

            num++;

            indicator.LineNum = num;
            indicator.IsFinalized = NoYes::Yes;
            uow.updateonSaveChanges(indicator);

            if (indicator.UndiscountedCashFlow != 0)
            {
                undisCashFlow = indicator.UndiscountedCashFlow;
            }
            if (indicator.RecoverableAmount != 0)
            {
                recovAmt = indicator.RecoverableAmount;
            }
        }

        if (!updateFailed)
        {
            ret = [true];
            uow.saveChanges();
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>