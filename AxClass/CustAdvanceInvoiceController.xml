<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAdvanceInvoiceController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustAdvanceInvoiceController</c> class is the controller class for the <c>CustAdvanceInvoice</c>
///    report.
/// </summary>
public class CustAdvanceInvoiceController extends CustVendAdvanceInvoiceController implements BatchRetryable
{
    RefRecId    duplicateInvoiceRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDefaultRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report query before dialog is shown to user.
    /// </summary>
    /// <param name="_query">
    /// The report query.
    /// </param>
    protected void addDefaultRanges(Query _query)
    {
        QueryBuildDataSource    childDS, lineDetailDS;
        QueryBuildDataSource qbds;

        super(_query);

        qbds = SysQuery::findOrCreateDataSource(_query, tableNum(CzCustAdvanceInvoiceTable));

        SysQuery::findOrCreateRange(qbds, fieldNum(CzCustAdvanceInvoiceTable, SalesId));
        SysQuery::findOrCreateRange(qbds, fieldNum(CzCustAdvanceInvoiceTable, CustPostingProfile));

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            childDS = SysQuery::findOrCreateDataSource(_query, tableNum(TaxTrans), tableNum(CzCustAdvanceInvoiceTable));
            childDS.joinMode(JoinMode::OuterJoin);
            childDS.relations(true);
            SysQuery::findOrCreateRange(childDS, fieldNum(TaxTrans, Voucher));

            childDS = SysQuery::findOrCreateDataSource(_query, tableNum(SalesTable), tableNum(CzCustAdvanceInvoiceTable));
            childDS.joinMode(JoinMode::OuterJoin);
            childDS.relations(true);
            SysQuery::findOrCreateRange(childDS, fieldNum(SalesTable, SalesId));

            lineDetailDS = SysQuery::findOrCreateDataSource(_query, tableNum(SalesLine), tableNum(SalesTable));
            lineDetailDS.relations(true);
            SysQuery::findOrCreateRange(lineDetailDS, fieldNum(SalesLine, SalesId));

            childDS = SysQuery::findOrCreateDataSource(_query, tableNum(CustInvoiceTable), tableNum(CzCustAdvanceInvoiceTable));
            childDS.joinMode(JoinMode::OuterJoin);
            childDS.relations(true);
            SysQuery::findOrCreateRange(childDS, fieldNum(CustInvoiceTable, InvoiceAccount));

            lineDetailDS = SysQuery::findOrCreateDataSource(_query, tableNum(CustInvoiceLine), tableNum(CustInvoiceTable));
            lineDetailDS.relations(true);
            SysQuery::findOrCreateRange(lineDetailDS, fieldNum(CustInvoiceLine, RecId)).label("@SYS15217");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>FieldId</c> value for the record ID of the specific advance invoice header table.
    /// </summary>
    /// <returns>
    /// The <c>FieldId</c> value for the record ID of the specific advance invoice header table.
    /// </returns>
    protected FieldId getAdvanceInvoiceRecId()
    {
        return fieldNum(CzCustAdvanceInvoiceTable, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdvanceInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an empty table buffer for a specific advance invoice header table.
    /// </summary>
    /// <returns>
    /// The table buffer for a specific advance invoice header table.
    /// </returns>
    protected CzAdvanceInvoiceTable getAdvanceInvoiceTable()
    {
        CzCustAdvanceInvoiceTable custAdvanceInvoiceTable;

        return custAdvanceInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintMgmtDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtDocumentType</c> value of the current report.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtDocumentType</c> value of the current report.
    /// </returns>
    protected PrintMgmtDocumentType getPrintMgmtDocType()
    {
        return PrintMgmtDocumentType::SalesAdvanceInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an instance of form letter object.
    /// </summary>
    /// <remarks>
    /// This method is called by the framework from the <c>startOperation</c> method. It provides the
    /// necessary construction of the form letter class.The implementation class should override this
    /// method to create the correct instance and call the <c>super</c> method to invoke the base class
    /// implementation.This is a framework class. Customizing this class may cause problems with future
    /// upgrades to the software.
    /// </remarks>
    public void initFormLetterReport()
    {
        super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            formLetterReport.parmPrintType(this.parmArgs().parmEnum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReports</Name>
				<Source><![CDATA[
        protected void outputReports()
    {
        // Only print the report if the document is not a Fiscal document
        if (!this.processAsFiscalDocument())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDuplicateInvoiceRecId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmDuplicateInvoiceRecId(RefRecId _duplicateInvoiceRecId = duplicateInvoiceRecId)
    {
        duplicateInvoiceRecId = _duplicateInvoiceRecId;

        return duplicateInvoiceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the contract before the report is run.
    /// </summary>
    /// <remarks>
    ///  The following are common scenarios for which to use this method:
    ///  <list type="bullet">
    ///   <item>
    ///   <description>Modifying the query.</description>
    ///   </item>
    ///   <item>
    ///   <description>Setting the contract values that are hidden from the user on the dialog.</description>
    ///   </item>
    ///   <item>
    ///    <description>
    ///    Subscribing to the <c>renderingComplete</c> event.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void preRunModifyContract()
    {
        CustAdvanceInvoiceContract custContract;

        super();

        custContract = contract as CustAdvanceInvoiceContract;

        custContract.parmPrintCopyOriginal(this.parmArgs().parmEnum());
        custContract.parmDuplicateInvoiceRecId(duplicateInvoiceRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAsFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current advance invoice should be processed as a fiscal document, or as a
    /// normal invoice.
    /// </summary>
    /// <returns>
    /// true if this advance invoice should be processed as a fiscal document; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean processAsFiscalDocument()
    {
        CzCustAdvanceInvoiceTable custAdvanceInvoiceTable = advanceInvoiceTable;
        boolean ret = true;

        switch (custAdvanceInvoiceTable.FiscalDocState_PL)
        {
            case PlFiscalDocState::FiscalDocument         :
                PlFiscalPrinterHandling::generateFiscalDoc(custAdvanceInvoiceTable);
                break;

            case PlFiscalDocState::PrintedFiscalDocument  :
                setPrefix(custAdvanceInvoiceTable.InvoiceId);
                info("@GLS110142");
                break;

            case PlFiscalDocState::Invoice                :
            case PlFiscalDocState::Changed2Invoice        :
                ret = false;
                break;

            default                                      :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        const str LocalizationFeatureReference = 'EEU-00044';
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

        CustAdvanceInvoiceController      controller = new CustAdvanceInvoiceController();
        CustInvoiceDuplicateTable_W duplicateTable;

        if (_args.record() &&
            _args.record().TableId == tablenum(CustInvoiceDuplicateTable_W))
        {
            duplicateTable          = _args.record();
            _args.record(CzCustAdvanceInvoiceTable::findRecId(duplicateTable.InvoiceRecIdRef));
            controller.parmDuplicateInvoiceRecId(duplicateTable.RecId);
        }

        controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::SalesAdvanceInvoice).getDefaultReportFormat());
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>