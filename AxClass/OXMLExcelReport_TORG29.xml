<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_TORG29</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class outputs unified form TORG-29 to excel.
/// </summary>
public class OXMLExcelReport_TORG29 extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingSupported
{
    private const str reportHeader = 'REPORTHEADER';
    private const str reportBody = 'BODY';
    private const str reportFooter = 'REPORTFOOTER';

    private const str receiptPageHeader = 'RECEIPTPAGEHEADER';
    private const str receiptFooter = 'RECEIPTFOOTER';

    private const str issuePageHeader = 'ISSUEPAGEHEADER';
    private const str issueHeader = 'ISSUEHEADER';

    private const str Comma = ', ';
    private const str Space = ' ';
    private const int midday = 43200;

    Amount  amountSum;
    Amount  receiptPlusBalanceGoodsSum;
    Counter recieptLinesTotal;
    Counter issueLinesTotal;
    Counter lineNo;

    InventReport_TORG29_RU    reportData;
    TmpInventReport_TORG29_RU tmpTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    /// <returns>
    ///     Height of the section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real minHeight = 16.50;
        const str lineName = 'lineName';

        return max(document.getNamedRangeHeightWrapped(lineName, this.getLineName()), minHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Executes report.
    /// </summary>
    protected void createReport()
    {
        const int widthColsLocal = 107;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00123, funcName());

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, widthColsLocal);

        this.execute(ReportHeader);

        tmpTrans = reportData.getReceiptOrIssueTrans(true);

        while select tmpTrans
            order by DateFinancial, Voucher
        {
            lineNo++;
            if (this.mustCreateNewPage(true))
            {
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(receiptPageHeader);
            }
            this.execute(reportBody);
            amountSum += tmpTrans.CostAmountPosted;
        }
        receiptPlusBalanceGoodsSum = amountSum + reportData.getStartBalance();

        this.execute(receiptFooter);

        document.insertPageBreak(currentRow, curWorksheetNum);
        amountSum     = 0;
        lineNo        = 0;
        currentHeight = 0;

        this.execute(issueHeader);

        tmpTrans = reportData.getReceiptOrIssueTrans(false);

        while select tmpTrans
            order by DateFinancial, Voucher
        {
            lineNo++;
            if (this.mustCreateNewPage(false))
            {
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(issuePageHeader);
            }
            this.execute(reportBody);
            amountSum += tmpTrans.CostAmountPosted;
        }

        this.execute(ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves name of the new report file.
    /// </summary>
    /// <returns>
    ///     Name of the new report file.
    /// </returns>
    protected Filename fileName()
    {
        return 'Goods_TORG29';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves postfix of a new report file.
    /// </summary>
    /// <returns>
    ///     Postfix of a new report file.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return reportData.parmDocumentNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// Name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TORG29';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills body section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        const str bodyName = 'lineName';
        const str bodyDate = 'lineDocDate';
        const str bodyNum = 'lineDocNum';
        const str bodyAmount = 'lineAmount';

        this.insertValueToSection(bodyName, this.getLineName());

        switch (tmpTrans.ReferenceCategory)
        {
            case InventTransType::Sales, InventTransType::Purch:
                this.insertValueToSection(bodyNum, tmpTrans.InvoiceId);
                break;

            default:
                this.insertValueToSection(bodyNum, tmpTrans.ReferenceId);
        }

        this.insertValueToSection(bodyDate, date2str(tmpTrans.DateFinancial, 123, 2, 2, 2, 2, 2, DateFlags::None));
        this.insertValueToSection(bodyAmount, abs(tmpTrans.CostAmountPosted));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report sections with data depending on section name.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeader();
                break;
            case reportBody:
                this.fillBody();
                break;
            case receiptFooter:
                this.fillReceiptFooter();
                break;
            case reportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReceiptFooter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills receipt footer section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReceiptFooter()
    {
        const str receiptGoodsSum = 'ReceiptGoodsSum';
        const str receiptPlusBalanceGoodsSumConst = 'ReceiptPlusBalanceGoodsSum';

        this.insertValueToSection(receiptGoodsSum, amountSum);
        this.insertValueToSection(receiptPlusBalanceGoodsSumConst, receiptPlusBalanceGoodsSum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report footer section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportFooter()
    {
        const str balanceDateEnd = 'BalanceDateEnd';
        const str balanceDateEndYear = 'BalanceDateEndYear';
        const str issueGoodsSum = 'IssueGoodsSum';
        const str goodsBalanceEnd = 'GoodsBalanceEnd';

        const str accountantTitle = 'AccountantTitle';
        const str accountantName = 'AccountantName';
        const str matResPersonTitle = 'MatResPersonTitle';
        const str matResPersonName = 'MatResPersonName';

        HcmWorker               hcmWorker;
        HcmTitle                hcmTitle;
        RNumDateInWordConverter rNumDateInWordConverter = RNumDateInWordConverter::construct();

        this.insertValueToSection(balanceDateEnd, int2str(dayofmth(reportData.parmToDate())) + Space +
                                                   rNumDateInWordConverter.date2strMonth(reportData.parmToDate()));
        this.insertValueToSection(balanceDateEndYear, year(reportData.parmToDate()));

        this.insertValueToSection(issueGoodsSum,    abs(amountSum));
        this.insertValueToSection(goodsBalanceEnd,  receiptPlusBalanceGoodsSum + amountSum);

        hcmWorker = HcmWorker::find(reportData.parmChecker());
        if (hcmWorker)
        {
            hcmTitle = HcmTitle::find(HcmWorkerTitle::findByWorker(hcmWorker.RecId, DateTimeUtil::newDateTime(reportData.parmDocumentDate(), midday)).Title);

            this.insertValueToSection(AccountantTitle, hcmTitle.TitleId);
            this.insertValueToSection(AccountantName,  hcmWorker.name());
        }

        hcmWorker = HcmWorker::find(reportData.parmFinanciallyChargedPerson());
        if (hcmWorker)
        {
            hcmTitle = HcmTitle::find(HcmWorkerTitle::findByWorker(hcmWorker.RecId, DateTimeUtil::newDateTime(reportData.parmDocumentDate(), midday)).Title);

            this.insertValueToSection(MatResPersonTitle, hcmTitle.TitleId);
            this.insertValueToSection(MatResPersonName,  hcmWorker.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills report header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        const str OKPO = 'OKPO';
        const str CompanyName = 'CompanyName';
        const str DepartmentName = 'DepartmentName';
        const str DocumentNumber = 'DocumentNumber';
        const str DocumentDate = 'DocumentDate';
        const str PeriodDateBegin = 'PeriodDateBegin';
        const str PeriodDateEnd = 'PeriodDateEnd';
        const str RestDateBegin = 'BalanceDateBegin';
        const str RestDateBeginYear = 'BalanceDateBeginYear';
        const str RestGoodSum = 'GoodsBalanceBegin';
        const str TabNumber = 'TabNumber';
        const str MatResPerson = 'MatResPerson';
        const str MatResPersonName = 'MatResPersonName';

        HcmWorker               hcmWorker;
        HcmTitle                hcmTitle;
        CompanyInfo             companyInfo             = CompanyInfo::find();
        RNumDateInWordConverter rNumDateInWordConverter = RNumDateInWordConverter::construct();

        this.insertValueToSection(OKPO,            CompanyInfoHelper::partyOKPOasOfDate_RU(companyInfo, reportData.parmDocumentDate()));
        this.insertValueToSection(CompanyName,     companyInfo.name());
        this.insertValueToSection(DepartmentName,  InventLocation::find(reportData.parmInventLocationId()).Name);

        this.insertValueToSection(DocumentNumber,    reportData.parmDocumentNum());
        this.insertValueToSection(DocumentDate,      date2str(reportData.parmDocumentDate(), 123, 2, 2, 2, 2, 4, DateFlags::None));

        this.insertValueToSection(PeriodDateEnd,     date2str(reportData.parmToDate(), 123, 2, 2, 2, 2, 2, DateFlags::None));
        this.insertValueToSection(RestGoodSum,       reportData.getStartBalance());

        if (reportData.parmFromDate())
        {
            this.insertValueToSection(PeriodDateBegin,   date2str(reportData.parmFromDate(), 123, 2, 2, 2, 2, 2, DateFlags::None));
            this.insertValueToSection(RestDateBegin,     int2str(dayofmth(reportData.parmFromDate())) + Space +
                                                        rNumDateInWordConverter.date2strMonth(reportData.parmFromDate()));
            this.insertValueToSection(RestDateBeginYear, year(reportData.parmFromDate()));
        }

        hcmWorker = HcmWorker::find(reportData.parmFinanciallyChargedPerson());
        if (hcmWorker)
        {
            this.insertValueToSection(TabNumber,             hcmWorker.PersonnelNumber);

            hcmTitle = HcmTitle::find(HcmWorkerTitle::findByWorker(hcmWorker.RecId, DateTimeUtil::newDateTime(reportData.parmDocumentDate(), midday)).Title);

            this.insertValueToSection(MatResPerson,          hcmTitle.TitleId + Comma + hcmWorker.name());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves name for lines of the body section.
    /// </summary>
    /// <returns>
    /// String with line name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str getLineName()
    {
        str ret;

        switch (tmpTrans.ReferenceCategory)
        {
            case InventTransType::Sales:
                ret = CustTable::find(tmpTrans.CustVendAC).nameAlias() + Comma + "@SYS14204";
                break;
            case InventTransType::Purch:
                ret = VendTable::find(tmpTrans.CustVendAC).nameAlias() + Comma + "@SYS14204";
                break;
            default:
                ret = enum2str(tmpTrans.ReferenceCategory);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Method initializes map which holds section data.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        this.addSection(receiptPageHeader);
        this.addSection(reportBody, true);
        this.addSection(receiptFooter);
        this.addSection(issuePageHeader);
        this.addSection(issueHeader);
        this.addSection(ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines that new page should be created.
    /// </summary>
    /// <param name="_receipt">
    ///     Receipt part of report filled sign.
    /// </param>
    /// <returns>
    ///     True if new page should be created; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage(boolean _receipt)
    {
        real    requiredHeight;
        int     lastSectionLine = _receipt ? recieptLinesTotal: issueLinesTotal;

        requiredHeight = this.getRangeHeight(reportBody);

        if (lineNo == lastSectionLine && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(_receipt ? receiptFooter : reportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes report data.
    /// </summary>
    /// <param name="_reportData">
    ///     <c>InventReport_TORG29_RU</c> class instance with report data.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setReportData(InventReport_TORG29_RU _reportData)
    {
        reportData = _reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves file name of the report template.
    /// </summary>
    /// <returns>
    ///     Report template file name.
    /// </returns>
    protected FileName templateName()
    {
        return resourceStr(TORG29_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates number of cells to be filled with data.
    /// </summary>
    /// <returns>
    ///     Number of cells to be filled with data.
    /// </returns>
    protected Counter totalCells()
    {
        const int cellsBody = 4;
        const int cellsOther = 34;

        TmpInventReport_TORG29_RU tmpTransReceipt = reportData.getReceiptOrIssueTrans(true);
        TmpInventReport_TORG29_RU tmpTransIssue   = reportData.getReceiptOrIssueTrans(false);

        select count(RecId) from tmpTransReceipt;
        recieptLinesTotal = any2int(tmpTransReceipt.RecId);
        recieptLinesTotal = recieptLinesTotal;

        select count(RecId) from tmpTransIssue;
        issueLinesTotal = any2int(tmpTransIssue.RecId);
        issueLinesTotal = issueLinesTotal;

        return (any2int(tmpTransReceipt.RecId) + any2int(tmpTransIssue.RecId)) * cellsBody + cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>OXMLExcelReport_TORG29</c> class.
    /// </summary>
    /// <returns>
    ///     A new instance of the <c>OXMLExcelReport_TORG29</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_TORG29 construct()
    {
        return new OXMLExcelReport_TORG29();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventReportTORG29</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>OXMLExcelReport_TORG29</c> class and initializes it with the report data.
    /// </summary>
    /// <param name="_inventReport">
    ///     <c>InventReport_TORG29_RU</c> class instance with report data.
    /// </param>
    /// <returns>
    ///     Initialized instance of the <c>OXMLExcelReport_TORG29</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_TORG29 newFromInventReportTORG29(InventReport_TORG29_RU _inventReport)
    {
        OXMLExcelReport_TORG29 printoutReport = OXMLExcelReport_TORG29::construct();

        printoutReport.setReportData(_inventReport);

        return printoutReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>