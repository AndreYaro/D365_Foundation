<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingDataManagerSimulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class extends from <c>RetailPricingDataManager</c> class and has an option
/// to include disabled discounts as well, while searching for pricing rules
/// in AX database.
/// Methods in this class, search for pricing rules and product details from
/// the AX database.
/// </summary>
class RetailPricingDataManagerSimulator extends RetailPricingDataManager
{
    internal boolean includeDisabledDiscounts;
    private static readonly str InventDimAllBlank = InventDim::inventDimIdBlank();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RecId _channelRecordId, RetailTransactionId _transactionId, boolean _includeDisabledDiscounts = false, RetailTempOrderItem _tempOrderItem = null, boolean _isTempOrderItemFilled = false)
    {
        super(_channelRecordId, _transactionId, _tempOrderItem, _isTempOrderItemFilled);
    
        includeDisabledDiscounts = _includeDisabledDiscounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description of this data manager.
    /// </summary>
    /// <returns>
    /// Returns description of this data manager.
    /// </returns>
    public str toString()
    {
        return strFmt('RetailPricingDataManagerSimulator for channel %1', mChannelRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs new instance of a <c>RetailPricingDataManagerSimulator</c> which operates in context of given channel.
    /// </summary>
    /// <param name="_channelRecordId">
    /// The record Id of the channel the data manager operates under.
    /// </param>
    /// <param name="_TransactionId">
    /// The transaction id.
    /// </param>
    /// <param name="_includeDisabledDiscounts">
    /// True, if disabled discounts should be considered for pricing calculation.
    /// </param>
    /// <param name="_tempOrderItem">
    /// Temp order item table.
    /// </param>
    /// <param name="_isTempOrderItemFilled">
    /// True, if temp order item is filled.
    /// </param>
    /// <returns>
    /// Instance of the data manager which retrieves data from AX under given channel context
    /// </returns>
    public static RetailPricingDataManagerSimulator construct(RecId _channelRecordId, TransactionID _transactionId, boolean _includeDisabledDiscounts = false, RetailTempOrderItem _tempOrderItem = null, boolean _isTempOrderItemFilled = false)
    {
        RetailPricingDataManagerSimulator pricingManagerSimulator = new RetailPricingDataManagerSimulator(_channelRecordId, _transactionId, _includeDisabledDiscounts, _tempOrderItem, _isTempOrderItemFilled);
    
        return pricingManagerSimulator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadRetailDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns applicable retail discounts based on items, products, validation periods and currency code
    /// supplied as parameter to this method.
    /// </summary>
    /// <param name = "items">List of items.</param>
    /// <param name = "priceGroups">Price groups.</param>
    /// <param name = "minActiveDate">Minimum date for validation period.</param>
    /// <param name = "maxActiveDate">Maximum date for validation period.</param>
    /// <param name = "currencyCode">Currency code.</param>
    /// <param name = "settings">Query result settings.</param>
    /// <returns>Discounts clr object.</returns>
    public System.Object ReadRetailDiscounts(
            System.Object items,
            System.Object priceGroups,
            System.DateTimeOffset minActiveDate,
            System.DateTimeOffset maxActiveDate,
            System.String currencyCode,
            Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        CLRObject discountList;

        // If disabled discounts are not included, call base class method
        if (!this.includeDisabledDiscounts)
        {
            discountList = super(items, priceGroups, minActiveDate, maxActiveDate, currencyCode, settings);
        }
        else // Include disabled discounts as well.
        {
            ValidFromDate minFromDate =  this.GetDateInChannelTimeZone(minActiveDate);
            ValidFromDate maxToDate =  this.GetDateInChannelTimeZone(maxActiveDate);

            RetailPeriodicDiscount periodicDiscount;
            RetailPeriodicDiscountLine periodicDiscountLine;

            RetailDiscountPriceGroup discountPriceGroup;
            RetailGroupMemberLine retailGroupMemberLine;
            EcoResProductCategory productCategory;
            RetailSpecialCategoryMember variantCategory;
            RetailCategoryContainmentLookup categoryLookup;
            RetailGroupMemberLine groupMemberLineForCategoryVariant;
            UnitOfMeasure unitOfMeasure;
            offerIdSet = new Set(Types::String);
            UserId userId = curUserId();

            Map validationPeriodLookup = new Map(Types::String, Types::AnyType);
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount;

            int discountType;

            // Get discount datatable for MatchAllAssociatedPriceGroups set as yes and associated price groups.
            RetailTmpOfferIdWithPriceGroups offerIdWithPriceDiscGroupTmp = this.getOfferIdAndAssociatedPriceGroupList();

            // convert price group record ids into temp table for join
            TmpRecIdFilter priceDiscGroupTmp = this.getTmpPriceGroupTableFromGroupIds(priceGroups);

            #localmacro.WhileSelectPeriodicDiscount
            while select periodicDiscount
                where periodicDiscount.PeriodicDiscountType != RetailDiscountOfferTypeBase::Promotion && periodicDiscount.PeriodicDiscountType != RetailDiscountOfferTypeBase::Shipping
                       && ((periodicDiscount.ValidFrom <= minFromDate || periodicDiscount.ValidFrom <= noDate)
                       && (periodicDiscount.ValidTo >= maxToDate || periodicDiscount.ValidTo <= noDate))
                join periodicDiscountLine
                    where periodicDiscount.OfferId == periodicDiscountLine.OfferId
                join RecId, Product, Variant, Category, InventDimId from retailGroupMemberLine
                    where retailGroupMemberLine.RecId == periodicDiscountLine.RetailGroupMemberLine
            #endmacro

            #localmacro.JoinUnitOfMeasureAndPriceGroup
                outer join RecId, Symbol from unitOfMeasure
                    where unitOfMeasure.RecId == periodicDiscountLine.UnitOfMeasure
                exists join discountPriceGroup
                    where discountPriceGroup.OfferId == periodicDiscount.OfferId
                exists join RefRecId from priceDiscGroupTmp
                    where priceDiscGroupTmp.RefRecId == discountPriceGroup.PriceDiscGroup
            #endmacro

            #localmacro.BuildPeriodicDiscountContainer
            crtDiscount = this.ConvertToCrtPeriodicDiscountV2(
                periodicDiscount,
                periodicDiscountLine,
                unitOfMeasure,
                discountType,
                mTmpOrderItem.itemId,
                mTmpOrderItem.inventDimId);

            discountList.Add(crtDiscount);
            #endmacro

            #localmacro.SetValidationPeriod
            if (periodicDiscount.ValidationPeriodId)
            {
                Microsoft.Dynamics.Commerce.Runtime.DataModel.ValidationPeriod crtValidationPeriod = null;
                if (validationPeriodLookup.exists(periodicDiscount.ValidationPeriodId))
                {
                    crtValidationPeriod = validationPeriodLookup.lookup(periodicDiscount.ValidationPeriodId);
                }
                else
                {
                    crtValidationPeriod = this.GetValidationPeriod(periodicDiscount.ValidationPeriodId);
                    validationPeriodLookup.insert(periodicDiscount.ValidationPeriodId, crtValidationPeriod);
                }

                crtDiscount.ValidationPeriod = crtValidationPeriod;
            }
            #endmacro

            #localmacro.AddOfferIdToTmpOrderData
            if (!offerIdSet.in(periodicDiscount.OfferId))
            {
                mTmpOrderData.clear();
                mTmpOrderData.dataType = RetailTmpOrderDataType::OfferId;
                mTmpOrderData.dataValue = periodicDiscount.OfferId;
                mTmpOrderData.insert();

                offerIdSet.add(periodicDiscount.OfferId);
            }
            #endmacro

            delete_from mTmpOrderData;

            discountList = this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount());

            // get lines matching product
            #WhileSelectPeriodicDiscount
            join mTmpOrderItem
                where retailGroupMemberLine.Variant == 0
                    && (retailGroupMemberLine.InventDimId == '' || retailGroupMemberLine.InventDimId == InventDimAllBlank)
                    && retailGroupMemberLine.Product != 0
                    && retailGroupMemberLine.Product == mTmpOrderItem.Product
                #JoinUnitOfMeasureAndPriceGroup
            {
                // Check is discount applicable.
                if (this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #BuildPeriodicDiscountContainer
                    #SetValidationPeriod
                    #AddOfferIdToTmpOrderData
                }
            }

            // get lines matching the variant
            #WhileSelectPeriodicDiscount
            join mTmpOrderItem
                where retailGroupMemberLine.Variant != 0
                    && (retailGroupMemberLine.InventDimId == '' || retailGroupMemberLine.InventDimId == InventDimAllBlank)
                    && retailGroupMemberLine.Variant == mTmpOrderItem.Variant
                #JoinUnitOfMeasureAndPriceGroup
            {
                // Check is discount applicable.
                if (this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #BuildPeriodicDiscountContainer
                    #SetValidationPeriod
                    #AddOfferIdToTmpOrderData
                }
            }

            // get lines matching the dimension
            #WhileSelectPeriodicDiscount
            join mTmpOrderItem
                where retailGroupMemberLine.Variant == 0
                        && retailGroupMemberLine.Product != 0
                        && retailGroupMemberLine.Product == mTmpOrderItem.Product
                        && mTmpOrderItem.Variant != 0
                        && retailGroupMemberLine.InventDimId != ''
                        && retailGroupMemberLine.InventDimId != InventDimAllBlank
                #JoinUnitOfMeasureAndPriceGroup
            {
                if (this.isVariantMatch(mTmpOrderItem.Variant, retailGroupMemberLine.InventDimId))
                {
                    // Check is discount applicable.
                    if (this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups , priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                    {
                        #BuildPeriodicDiscountContainer
                        #SetValidationPeriod
                        #AddOfferIdToTmpOrderData
                    }
                }
            }

            // get lines matching non-zero category, for product
            #WhileSelectPeriodicDiscount
            && retailGroupMemberLine.Variant == 0
                    && (retailGroupMemberLine.InventDimId == '' || retailGroupMemberLine.InventDimId == InventDimAllBlank)
                    && retailGroupMemberLine.Product == 0
                    && retailGroupMemberLine.Category != 0
                 join mTmpOrderItem
                    where mTmpOrderItem.Product != 0
                join ContainedCategory from categoryLookup
                    where retailGroupMemberLine.Category == categoryLookup.Category
                join Product from productCategory
                    where categoryLookup.ContainedCategory == productCategory.Category
                        && productCategory.Product == mTmpOrderItem.Product
                #JoinUnitOfMeasureAndPriceGroup
            {
                // Check is discount applicable.
                if (this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #BuildPeriodicDiscountContainer
                    #SetValidationPeriod
                    #AddOfferIdToTmpOrderData
                }
            }

            // get lines matching non-zero category, for variant
            #WhileSelectPeriodicDiscount
            && retailGroupMemberLine.Variant == 0
                    && (retailGroupMemberLine.InventDimId == '' || retailGroupMemberLine.InventDimId == InventDimAllBlank)
                    && retailGroupMemberLine.Product == 0
                    && retailGroupMemberLine.Category != 0
                join mTmpOrderItem
                    where mTmpOrderItem.Variant != 0
                join ContainedCategory from categoryLookup
                    where retailGroupMemberLine.Category == categoryLookup.Category
                join RetailGroupMember from variantCategory
                    where categoryLookup.ContainedCategory == variantCategory.Category
                join groupMemberLineForCategoryVariant
                    where groupMemberLineForCategoryVariant.RecId == variantCategory.RetailGroupMember
                        && groupMemberLineForCategoryVariant.Variant == mTmpOrderItem.Variant
                #JoinUnitOfMeasureAndPriceGroup
            {
                // Check is discount applicable.
                if (this.isDiscountApplicable(periodicDiscount.OfferId, periodicDiscount.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #BuildPeriodicDiscountContainer
                    #SetValidationPeriod
                    #AddOfferIdToTmpOrderData
                }
            }

            discountList = discountList.AsReadOnly();
        }

        return discountList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadPriceAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns applicable retail price adjustments based on items, products, validation periods and currency code
    /// supplied as parameter to this method.
    /// </summary>
    /// <param name = "items">List of items.</param>
    /// <param name = "priceGroups">Price groups.</param>
    /// <param name = "minActiveDate">Minimum date for validation period.</param>
    /// <param name = "maxActiveDate">Maximum date for validation period.</param>
    /// <param name = "currencyCode">Currency code.</param>
    /// <param name = "settings">Query result settings.</param>
    /// <returns>Discounts clr object.</returns>
    public System.Object ReadPriceAdjustments(
            System.Object items,
            System.Object priceGroups,
            System.DateTimeOffset minActiveDate,
            System.DateTimeOffset maxActiveDate,
            Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        CLRObject adjustmentList;

        // If disabled adjustments are not included, call base class method
        if (!this.includeDisabledDiscounts)
        {
            adjustmentList = super(items, priceGroups, minActiveDate, maxActiveDate, settings);
        }
        else // Include disabled adjustments as well.
        {
            ValidFromDate minFromDate = this.GetDateInChannelTimeZone(minActiveDate);
            ValidToDate maxToDate = this.GetDateInChannelTimeZone(maxActiveDate);

            RetailPeriodicDiscount promo;
            RetailDiscountLineOffer promoLine;
            RetailDiscountPriceGroup promoPriceGroup;
            RetailGroupMemberLine retailGroupMemberLine;
            EcoResProductCategory productCategory;
            RetailSpecialCategoryMember variantCategory;
            RetailCategoryContainmentLookup categoryLookup;
            RetailGroupMemberLine groupMemberLineForCategoryVariant;
            UnitOfMeasure unitOfMeasure;
            offerIdSet = new Set(Types::String);
            UserId userId = curUserId();

            Map validationPeriodLookup = new Map(Types::String, Types::AnyType);
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment crtPriceAdjustment;

            // Get discount data table for MatchAllAssociatedPriceGroups set as yes and associated price groups.
            RetailTmpOfferIdWithPriceGroups offerIdWithPriceDiscGroupTmp = this.getOfferIdAndAssociatedPriceGroupList();

            // convert price group record ids into temp table for join
            TmpRecIdFilter priceDiscGroupTmp = this.getTmpPriceGroupTableFromGroupIds(priceGroups);

            #localmacro.WhileSelectPriceAdjustment
            while select promo
                   where promo.PeriodicDiscountType == RetailDiscountOfferTypeBase::Promotion
                       && ((promo.ValidFrom <= minFromDate || promo.ValidFrom <= noDate)
                       && (promo.ValidTo >= maxToDate || promo.ValidTo <= noDate))
                join
                    OfferId, discountMethod, offerPrice, discPct, discAmount, RetailGroupMemberLine, RecId
                from promoLine
                    where promo.OfferId == promoLine.OfferId
                join RecId, Product, Variant, Category from retailGroupMemberLine
                    where retailGroupMemberLine.RecId == promoLine.RetailGroupMemberLine
                   // get lines matching the variant, product, or non-zero category
            #endmacro

            #localmacro.JoinUnitOfMeasureAndPriceGroup
            outer join Symbol from unitOfMeasure
                where unitOfMeasure.RecId == promoLine.UnitOfMeasure
            exists join promoPriceGroup
                where promoPriceGroup.OfferId == promo.OfferId
            exists join priceDiscGroupTmp
                where priceDiscGroupTmp.RefRecId == promoPriceGroup.PriceDiscGroup
            #endmacro

            #localmacro.SetValidationPeriod
            if (promo.ValidationPeriodId)
            {
                Microsoft.Dynamics.Commerce.Runtime.DataModel.ValidationPeriod crtValidationPeriod = null;
                if (validationPeriodLookup.exists(promo.ValidationPeriodId))
                {
                    crtValidationPeriod = validationPeriodLookup.lookup(promo.ValidationPeriodId);
                }
                else
                {
                    crtValidationPeriod = this.GetValidationPeriod(promo.ValidationPeriodId);
                    validationPeriodLookup.insert(promo.ValidationPeriodId, crtValidationPeriod);
                }

                crtPriceAdjustment.ValidationPeriod = crtValidationPeriod;
            }
            #endmacro

            #localmacro.AddOfferIdToTmpOrderData
            if (!offerIdSet.in(promo.OfferId))
            {
                mTmpOrderData.clear();
                mTmpOrderData.dataType = RetailTmpOrderDataType::OfferId;
                mTmpOrderData.dataValue = promo.OfferId;
                mTmpOrderData.insert();

                offerIdSet.add(promo.OfferId);
            }
            #endmacro

            delete_from mTmpOrderData;

            adjustmentList = this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment());

            // get lines matching the product
            #WhileSelectPriceAdjustment
            join mTmpOrderItem
                where retailGroupMemberLine.Variant == 0
                    && retailGroupMemberLine.Product != 0
                    && retailGroupMemberLine.Product == mTmpOrderItem.Product
                #JoinUnitOfMeasureAndPriceGroup
            {
                crtPriceAdjustment = this.ConvertToPriceAdjustmentV2(promo, promoLine, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, unitOfMeasure);

                // Check is discount applicable.
                if (this.isDiscountApplicable(promo.OfferId, promo.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #SetValidationPeriod
                    adjustmentList.Add(crtPriceAdjustment);
                    #AddOfferIdToTmpOrderData
                }
            }

            // get lines matching the variant
            #WhileSelectPriceAdjustment
            join mTmpOrderItem
                where retailGroupMemberLine.Variant != 0
                    && retailGroupMemberLine.Variant == mTmpOrderItem.Variant
                #JoinUnitOfMeasureAndPriceGroup
            {
                crtPriceAdjustment = this.ConvertToPriceAdjustmentV2(promo, promoLine, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, unitOfMeasure);

                // Check is discount applicable.
                if (this.isDiscountApplicable(promo.OfferId, promo.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #SetValidationPeriod
                    adjustmentList.Add(crtPriceAdjustment);
                    #AddOfferIdToTmpOrderData
                }
            }

            // get lines matching the category, for product
            #WhileSelectPriceAdjustment
            && retailGroupMemberLine.Variant == 0
                    && retailGroupMemberLine.Product == 0
                    && retailGroupMemberLine.Category != 0
                join mTmpOrderItem
                    where mTmpOrderItem.Product != 0
                join ContainedCategory from categoryLookup
                    where retailGroupMemberLine.Category == categoryLookup.Category
                join Product from productCategory
                    where categoryLookup.ContainedCategory == productCategory.Category
                        && productCategory.Product == mTmpOrderItem.Product
                #JoinUnitOfMeasureAndPriceGroup
            {
                crtPriceAdjustment = this.ConvertToPriceAdjustmentV2(promo, promoLine, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, unitOfMeasure);

                // Check is discount applicable.
                if (this.isDiscountApplicable(promo.OfferId, promo.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #SetValidationPeriod
                    adjustmentList.Add(crtPriceAdjustment);
                    #AddOfferIdToTmpOrderData
                }
            }

            // get lines matching the category, for variant
            #WhileSelectPriceAdjustment
            && retailGroupMemberLine.Variant == 0
                    && retailGroupMemberLine.Product == 0
                    && retailGroupMemberLine.Category != 0
                join mTmpOrderItem
                    where mTmpOrderItem.Variant != 0
                join ContainedCategory from categoryLookup
                    where retailGroupMemberLine.Category == categoryLookup.Category
                join RetailGroupMember from variantCategory
                    where categoryLookup.ContainedCategory == variantCategory.Category
                join groupMemberLineForCategoryVariant
                    where groupMemberLineForCategoryVariant.RecId == variantCategory.RetailGroupMember
                        && groupMemberLineForCategoryVariant.Variant == mTmpOrderItem.Variant
                #JoinUnitOfMeasureAndPriceGroup
            {
                crtPriceAdjustment = this.ConvertToPriceAdjustmentV2(promo, promoLine, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, unitOfMeasure);

                // Check is discount applicable.
                if (this.isDiscountApplicable(promo.OfferId, promo.MatchAllAssociatedPriceGroups, priceDiscGroupTmp, offerIdWithPriceDiscGroupTmp))
                {
                    #SetValidationPeriod
                    adjustmentList.Add(crtPriceAdjustment);
                    #AddOfferIdToTmpOrderData
                }
            }

            adjustmentList = adjustmentList.AsReadOnly();
        }

        return adjustmentList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>