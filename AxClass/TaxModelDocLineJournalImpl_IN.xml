<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineJournalImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxModelDocLineJournalImpl_IN</c> class is the implement of the tax model document line journal.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(LedgerJournalTrans))]
public class TaxModelDocLineJournalImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
    LedgerJournalTrans ledgerJournalTrans;
    LedgerJournalTable ledgerJournalTable;

    LedgerJournalTaxLine ledgerJournalTaxLine;
    TransTaxInformation  partyTransTaxInformation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineTaxDirection</Name>
				<Source><![CDATA[
    private TaxDirection determineTaxDirection(AmountCur _ledgerAmount)
    {
        if (_ledgerAmount)
        {
            return TaxDirection::IncomingTax;
        }
        else
        {
            return TaxDirection::OutgoingTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxDirectionForTaxJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the tax direction for tax journal
    /// </summary>
    /// <param name="_taxCode">
    /// The tax code on the ledger journal trans object
    /// </param>
    /// <param name="_ledgerDimension">
    /// The ledger dimension
    /// </param>
    /// <returns>
    /// The taxDirection
    /// </returns>
    private TaxDirection determineTaxDirectionForTaxJournal(TaxCode _taxCode, DimensionDynamicAccount _ledgerDimension)
    {
        TaxTable                        taxTable;
        LedgerDimensionDefaultAccount   defaultMainAccount;

        taxTable  = TaxTable::find(_taxCode);
        if (taxTable.TaxType_IN != TaxType_IN::None
            && taxTable.TaxType_IN != TaxType_IN::Customs
            && ((taxTable.TaxType_IN == TaxType_IN::Excise)
                || (taxTable.TaxType_IN == TaxType_IN::SalesTax)
                || (taxTable.TaxType_IN == TaxType_IN::ServiceTax)
                || (taxTable.TaxType_IN == TaxType_IN::VAT)))
        {
            defaultMainAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_ledgerDimension);
            if (TaxLedgerAccounts_IN::accountRecoverableExist(defaultMainAccount, taxTable.TaxComponentTable_IN, taxTable.TaxType_IN))
            {
                return TaxDirection::IncomingTax;
            }
            else if (TaxLedgerAccounts_IN::accountPayableExist(defaultMainAccount, taxTable.TaxComponentTable_IN, taxTable.TaxType_IN))
            {
                return TaxDirection::OutgoingTax;
            }
        }

        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        CustTable custTable;

        LedgerJournalTrans ledgerJournalTransParty = ledgerJournalTrans.getPartyRelatedLine();

        if (ledgerJournalTransParty.AccountType == LedgerJournalACType::Cust)
        {
            custTable = ledgerJournalTransParty.findCustTable();
        }
        else if (ledgerJournalTransParty.OffsetAccountType == LedgerJournalACType::Cust)
        {
            custTable = ledgerJournalTransParty.findCustForOffset();
        }

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseDirectSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets direct settlement of this document line.
    /// </summary>
    /// <returns>
    /// The <c>DirectSettlement_IN</c>
    /// </returns>
    public DirectSettlement_IN getExciseDirectSettlement()
    {
        return DirectSettlement_IN::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getServiceTaxAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret ;

        if (this.isLedger2Ledger())
        {
            switch (this.getTaxDirection())
            {
                case TaxDirection::IncomingTax :
                    ret = TaxAccountType_IN::ServiceTaxRecoverableAccount;
                    break;
                case TaxDirection::OutgoingTax :
                    ret = TaxAccountType_IN::ServiceTaxPayableAccount;
                    break;
            }
        }
        else
        {
            ret = super(_taxOnItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceTaxOffsetAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax offset account type based on the given <c>TaxOnItem</c>
    /// </summary>
    /// <param name="_taxOnItem">
    /// The given <c>TaxOnItem</c>
    /// </param>
    /// <returns>
    /// The tax account type.
    /// </returns>
    public TaxAccountType_IN getServiceTaxOffsetAccountType(TaxOnItem _taxOnItem)
    {
        TaxAccountType_IN ret;

        if (this.isLedger2Ledger())
        {
            ret = TaxAccountType_IN::None;
        }
        else
        {
            ret = super(_taxOnItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the tax code for the transaction line.
    /// </summary>
    /// <returns>
    ///    The tax code.
    /// </returns>
    /// <remarks>
    ///    Specifying in a tax code on a transaction line implies that this transaction line is a direct tax
    ///    adjustment. No tax calculations will occur. Instead, the transaction amount is treated as the tax
    ///    amount and will be applied to this tax code. Specify an empty string if this functionality is not
    ///    desired.
    /// </remarks>
    public TaxCode getTaxCode()
    {
        return ledgerJournalTrans.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        TaxDirection            ret;
        SalesPurch              salesPurch;
        TaxEngineTaxJournalLine taxEngineTaxJournalLine = TaxEngineTaxJournalLine::findByLedgerJournalTrans(ledgerJournalTrans.RecId);

        if (taxEngineTaxJournalLine)
        {
            TaxModelTaxable taxJournalModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(taxEngineTaxJournalLine);
            return taxJournalModelDocLine.getTaxDirection();
        }

        switch (ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Vend :
                ret = TaxDirection::IncomingTax;
                break;

            case LedgerJournalACType::Cust :
                ret = TaxDirection::OutgoingTax;
                break;

            case LedgerJournalACType::Ledger :
                if (ledgerJournalTrans.parmOffsetLedgerDimension())
                {
                    switch (ledgerJournalTrans.OffsetAccountType)
                    {
                        case LedgerJournalACType::Bank :
                            // Payment
                            salesPurch = this.getTaxDirectionAccount(ledgerJournalTrans.LedgerDimension);
                            switch (salesPurch)
                            {
                                case salesPurch::Purch :
                                    ret = TaxDirection::IncomingTax;
                                    break;
                                case salesPurch::Sales :
                                    ret = TaxDirection::OutgoingTax;
                                    break;
                                default :
                                    // Ledger Bank Debit -> Incoming
                                    ret = this.determineTaxDirection(ledgerJournalTrans.AmountCurDebit);
                                    break;
                            }
                            break;
                        case LedgerJournalACType::Cust :
                            ret = TaxDirection::OutgoingTax;
                            break;
                        case LedgerJournalACType::Vend :
                            ret = TaxDirection::IncomingTax;
                            break;
                        case LedgerJournalACType::Project :
                            ret = TaxDirection::IncomingTax;
                            break;
                        case LedgerJournalACType::FixedAssets :
                            // Invoice
                            salesPurch = this.getTaxDirectionAccount(ledgerJournalTrans.LedgerDimension);
                            switch (salesPurch)
                            {
                                case salesPurch::Purch :
                                    ret = TaxDirection::IncomingTax;
                                    break;
                                case salesPurch::Sales :
                                    ret = TaxDirection::OutgoingTax;
                                    break;
                                default :
                                    // Ledger Ledger Debit -> Incoming
                                    ret = this.determineTaxDirection(ledgerJournalTrans.AmountCurDebit);
                                    break;
                            }
                            break;
                        case LedgerJournalACType::Ledger :
                        if (ledgerJournalTrans.TaxCode != '')
                            {
                                ret = this.determineTaxDirectionForTaxJournal(ledgerJournalTrans.TaxCode, ledgerJournalTrans.LedgerDimension);
                            }
                            else
                            {
                                // Ledger Ledger Debit -> Incoming
                                ret = this.determineTaxDirection(ledgerJournalTrans.AmountCurDebit);
                            }
                            break;
                        default :
                            // Ledger Ledger Debit -> Incoming
                            ret = this.determineTaxDirection(ledgerJournalTrans.AmountCurDebit);
                    }
                }
                else
                {
                    if (LedgerJournalTrans::isCustomerInvoice(ledgerJournalTrans))
                    {
                        ret = TaxDirection::OutgoingTax;
                    }
                    else if (LedgerJournalTrans::isVendorInvoice(ledgerJournalTrans))
                    {
                        ret = TaxDirection::IncomingTax;
                    }
                }
                break;

            case LedgerJournalACType::Bank :
                switch (ledgerJournalTrans.OffsetAccountType)
                {
                    case LedgerJournalACType::Ledger :
                    case LedgerJournalACType::FixedAssets :
                        salesPurch = this.getTaxDirectionAccount(ledgerJournalTrans.LedgerDimension);
                        switch (salesPurch)
                        {
                            case salesPurch::Purch :
                                ret = TaxDirection::IncomingTax;
                                break;
                            case salesPurch::Sales :
                                ret = TaxDirection::OutgoingTax;
                                break;
                            default :
                                // Bank Ledger Credit -> Incoming
                                ret = this.determineTaxDirection(ledgerJournalTrans.AmountCurCredit);
                                break;
                        }
                        break;
                    case LedgerJournalACType::Project :
                        ret = TaxDirection::IncomingTax;
                        break;
                    default :
                        // Bank Ledger Credit -> Incoming
                        ret = this.determineTaxDirection(ledgerJournalTrans.AmountCurCredit);
                }
                break;

            // <GTE>
            case LedgerJournalACType::Project :
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled()
                && !TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(LedgerJournalTable).skipTaxDocument())
                {
                    switch(ledgerJournalTrans.OffsetAccountType)
                    {
                        case LedgerJournalACType::Cust :
                            ret = TaxDirection::OutgoingTax;
                            break;

                        case LedgerJournalACType::Vend :
                            ret = TaxDirection::IncomingTax;
                            break;
                    }
                }
                break;
            // </GTE>
        }

        // <GTE>
        if (ledgerJournalTrans.TransactionType == LedgerTransType::Fee)
        {
            ret = TaxDirection::IncomingTax;
        }
        // </GTE>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirectionAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction account.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension.
    /// </param>
    /// <returns>
    /// The instance of the <c>SalesPurch</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected SalesPurch getTaxDirectionAccount(LedgerDimensionDefaultAccount _ledgerDimension)
    {
        return MainAccountLegalEntity::findByMainAccountLegalEntity(
            LedgerDimensionFacade::getMainAccountFromLedgerDimension(_ledgerDimension).RecId,
            CompanyInfo::current()).TaxDirection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        TransDate       taxCalculationDate;
        TaxParameters   taxParameters;
        selectableDataArea companyId;

        if (ledgerJournalTaxLine)
        {
            companyId = ledgerJournalTaxLine.getDestinationCompany();
        }
        else
        {
            companyId = ledgerJournalTrans.Company;
        }

        changeCompany(companyId)
        {
            taxParameters = TaxParameters::find();
        }

        if (_taxType == TaxType_IN::Excise)
        {
            if (ledgerJournalTrans.AccountType          == LedgerJournalACType::Vend
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                if (ledgerJournalTrans.DocumentDate
                    && taxParameters.VendorCalculationDateType_IN == VendorCalculationDateType_IN::DocumentDate)
                {
                    taxCalculationDate = ledgerJournalTrans.DocumentDate;
                }
                else
                {
                    taxCalculationDate = ledgerJournalTrans.TransDate;
                }
            }
            else
            {
                taxCalculationDate = ledgerJournalTrans.TransDate;
            }
        }
        else
        {
            if (ledgerJournalTrans.DocumentDate
                && taxParameters.TaxCalculationDateType == TaxCalculationDateType::DocumentDate)
            {
                taxCalculationDate = ledgerJournalTrans.DocumentDate;
            }
            else
            {
                taxCalculationDate = ledgerJournalTrans.TransDate;
            }
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    public VendTable getVendTable()
    {
        VendTable vendTable;

        LedgerJournalTrans ledgerJournalTransParty = ledgerJournalTrans.getPartyRelatedLine();

        if(ledgerJournalTransParty.ledgerJournalTable().JournalType == LedgerJournalType::Approval)
        {
            vendTable = VendTable::find(VendTrans::find(ledgerJournalTransParty.VendTransId).AccountNum);
        }
        else if (ledgerJournalTransParty.AccountType == LedgerJournalACType::Vend)
        {
            vendTable = ledgerJournalTransParty.findVendTable();
        }
        else if (ledgerJournalTransParty.OffsetAccountType == LedgerJournalACType::Vend)
        {
            vendTable = ledgerJournalTransParty.findVendForOffset();
        }

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        ledgerJournalTrans = _documentLineMap;
        ledgerJournalTable = ledgerJournalTrans.ledgerJournalTable();

        super(_documentLineMap);

        if (ledgerJournalTrans.TransactionType == LedgerTransType::Fee && ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger)
        {
            partyTransTaxInformation = TransTaxInformationHelper::newHelper().findTransTaxInformation(
                documentLineMap.SourceTableId, ledgerJournalTrans.RecId);
        }
        else
        {
			partyTransTaxInformation = TransTaxInformationHelper::newHelper().findTransTaxInformation(
				documentLineMap.SourceTableId, LedgerJournalTrans::findRecId(documentLineMap.SourceRecId, false).getPartyRelatedLine().RecId);
        }

     }

]]></Source>
			</Method>
			<Method>
				<Name>isExciseConsignment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the document line is consignment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is consignment;otherwise, false.
    /// </returns>
    public NoYesId isExciseConsignment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isExicseDSA</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction should register DSA.
    /// </summary>
    /// <returns>
    /// True if the document line should register DSA; otherwise, false.
    /// </returns>
    public NoYes isExicseDSA()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedger2Ledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the tax model document line is ledger to ledger.
    /// </summary>
    /// <returns>
    /// Returns true if the tax model document line is ledger to ledger.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isLedger2Ledger()
    {
        return ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
            && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a payment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a payment; otherwise, false.
    /// </returns>
    public NoYes isPayment()
    {
        boolean ret;

        switch (ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Bank :
                ret = true;
                break;

            case LedgerJournalACType::Vend :
            case LedgerJournalACType::Cust :
                switch (ledgerJournalTrans.OffsetAccountType)
                {
                    case LedgerJournalACType::Bank :
                        ret = true;
                        break;
                    case LedgerJournalACType::Ledger :
                        if (this.isPaymentAccount(ledgerJournalTrans.OffsetLedgerDimension))
                        {
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                        break;
                    default :
                        ret = false;
                }
                break;

            case LedgerJournalACType::Ledger :
                switch (ledgerJournalTrans.OffsetAccountType)
                {
                    case LedgerJournalACType::Bank :
                        ret = true;
                        break;
                    case LedgerJournalACType::Ledger :
                        ret = false;
                        break;
                    default :
                        if (this.isPaymentAccount(ledgerJournalTrans.LedgerDimension))
                        {
                            ret = true;
                        }
                        else
                        {
                            ret = false;
                        }
                }
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPaymentAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the default account is payment account.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension default account.
    /// </param>
    /// <returns>
    /// Returns true if the default account is payment account.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isPaymentAccount(LedgerDimensionDefaultAccount _ledgerDimension)
    {
        MainAccount mainAccount;

        mainAccount = MainAccount::findByLedgerDimension(_ledgerDimension);

        return mainAccount.PostingType == LedgerPostingType::PurchCash || mainAccount.PostingType == LedgerPostingType::SalesCash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBaseModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the base Model.
    /// </summary>
    /// <param name="_baseModel">
    /// The base model.
    /// </param>
    public void setBaseModel(Object _baseModel)
    {
        if (_baseModel is LedgerJournalTaxLine)
        {
            ledgerJournalTaxLine = _baseModel as LedgerJournalTaxLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type
    /// </summary>
    /// <returns>
    /// The transaction tax module type
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a foreign transaction or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a foregin foreign transaction; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        return ledgerJournalTrans.ledgerJournalTable().Posted != NoYes::Yes
            && (ledgerJournalTrans.NoEdit != NoYes::Yes || ledgerJournalTrans.TransactionType == LedgerTransType::Fee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation
    public LogisticsPostalAddress getTaxLogisticsPostalAddress(TransTaxInformationType_IN _type = TransTaxInformationType_IN::Normal)
    {
        CompanyInfo         companyInfoLoc;
        DirPartyLocation    dirPartyLocation;
         
        companyInfoLoc      = CompanyInfo::findByCompany_IN(curExt());
        dirPartyLocation    = DirPartyLocation::findPrimaryPartyLocation(companyInfoLoc.RecId);
        
        return LogisticsPostalAddress::findByLocation(dirPartyLocation.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transction company
    /// </summary>
    /// <returns>
    /// The transaction company
    /// </returns>
    public SelectableDataArea getTransactionCompany()
    {
        return ledgerJournalTrans.company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipForTaxDocumentRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax document row should be skipped for generation or not.
    /// </summary>
    /// <returns>
    /// True if the tax document row should be skipped for generation; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldSkipForTaxDocumentRow()
    {
        LedgerJournalTrans  ledgerJournalTransOffsetProject;
        LedgerJournalTrans  ledgerJournalTransOffsetVendor;
        boolean             shouldSkip = false;

        if (((ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                || ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
                || ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
                && ledgerJournalTrans.LedgerDimension
                && !ledgerJournalTrans.OffsetLedgerDimension)
            || ((ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project)
                && !ledgerJournalTrans.LedgerDimension
                && ledgerJournalTrans.OffsetLedgerDimension)
                || ledgerJournalTrans.Transferred == NoYes::Yes)
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
                && !ledgerJournalTrans.OffsetLedgerDimension)
            {
                select firstOnly RecId from ledgerJournalTransOffsetProject
                    where ledgerJournalTransOffsetProject.JournalNum   == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransOffsetProject.Voucher     == ledgerJournalTrans.Voucher
                        && ledgerJournalTransOffsetProject.AccountType == LedgerJournalACType::Project
                        && ledgerJournalTransOffsetProject.LedgerDimension
                        && !ledgerJournalTransOffsetProject.OffsetLedgerDimension;

                // Form multiple line project-customer combination, customer can appear multiple times, and tax is not skipped for customer line.
                if (!ledgerJournalTransOffsetProject)
                {
                    shouldSkip = true;
                }
            }
            else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Project
                    && !ledgerJournalTrans.OffsetLedgerDimension)
            {
                select firstOnly RecId from ledgerJournalTransOffsetVendor
                    where ledgerJournalTransOffsetVendor.JournalNum   == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransOffsetVendor.Voucher     == ledgerJournalTrans.Voucher
                        && ledgerJournalTransOffsetVendor.AccountType == LedgerJournalACType::Vend
                        && ledgerJournalTransOffsetVendor.LedgerDimension
                        && !ledgerJournalTransOffsetVendor.OffsetLedgerDimension;   

                // Form multiple line project-vendor combination, project can appear multiple times, and tax is not skipped for project line.
                if (!ledgerJournalTransOffsetVendor)
                {
                    shouldSkip = true;
                }
            }
            else
            {
                shouldSkip = true;
            }
        }

        return shouldSkip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the line amount for the transaction line.
    /// </summary>
    /// <returns>
    ///   The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        LedgerJournalTrans ledgerJournalTransLoc;

        // For Multi lines
        if (!ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            boolean isCustomerInvoice = LedgerJournalTrans::isCustomerInvoice(ledgerJournalTrans);
            boolean isCustomerPayment = LedgerJournalTrans::isCustomerPayment(ledgerJournalTrans);
            boolean isVendorInvoice = LedgerJournalTrans::isVendorInvoice(ledgerJournalTrans);
            boolean isVendorPayment = LedgerJournalTrans::isVendorPayment(ledgerJournalTrans);

            if (isCustomerInvoice || isCustomerPayment)
            {
                select firstonly ledgerJournalTransLoc
                    where ledgerJournalTransLoc.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransLoc.Voucher == ledgerJournalTrans.Voucher
                        && ledgerJournalTransLoc.AccountType == LedgerJournalACType::Cust;
            }
            else if (isVendorInvoice || isVendorPayment)
            {
                select firstonly ledgerJournalTransLoc
                    where ledgerJournalTransLoc.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTransLoc.Voucher == ledgerJournalTrans.Voucher
                        && ledgerJournalTransLoc.AccountType == LedgerJournalACType::Vend;
            }

            if (ledgerJournalTransLoc)
            {
                // For vendor/customer payment journal, another side of account must be only one bank account 
                // or multi ledger main account with post type: order cash or purchase cash. (Note: GST tax 
                // will not be posted when post vendor/customer payment)
                // Thus the amount in two sides with same sign is not specially handled for vendor payment.
                if ((ledgerJournalTransLoc.amount() * ledgerJournalTrans.amount() < 0
                        && !isCustomerPayment
                        && !isVendorInvoice)
                    || isCustomerInvoice)
                {
                    return -ledgerJournalTrans.amount();
                }
                else
                {
                    return ledgerJournalTrans.amount();
                }
            }
        }

        if (this.isPayment())
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust 
                || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
            {
                return -ledgerJournalTrans.amount();
            }

            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
                || ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
            {
                return ledgerJournalTrans.amount();
            }
        }

        // For normal scenario:  vendor invoice, bank invoice, or customer payment, the normal scenario should be credit
        // Therefore credit amount should be positive, debit amount should be negative
        if (((ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
              || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project
              || ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::FixedAssets)
            && ledgerJournalTrans.parmLedgerDimension()
            && (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
              || ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)))
        {
            return -ledgerJournalTrans.amount();
        }

        // For vise-versa scenario:  customer invoice, project invoice, and vendor payment, the vise-versa scenario should be credit
        // Therefore credit amount should be postive, debit amount should be negative
        if (((ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
              || ledgerJournalTrans.AccountType == LedgerJournalACType::Project
              || ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets)
            && ledgerJournalTrans.parmLedgerDimension()
            && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
            || (ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                && ledgerJournalTrans.parmLedgerDimension()
                && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project))
        {
            return -ledgerJournalTrans.amount();
        }

        return ledgerJournalTrans.amount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        LogisticsPostalAddress  logisticsPostalAddress; 

        if (partyTransTaxInformation.VendorLocation)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(partyTransTaxInformation.VendorLocation);
        }
        else if (partyTransTaxInformation.CustomerLocation)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(partyTransTaxInformation.CustomerLocation);
        }
        else if (partyTransTaxInformation.BankLocation)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findByLocation(partyTransTaxInformation.BankLocation);
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the prepayment
    /// </summary>
    /// <returns><c>NoYes</c></returns>
    public NoYes getPrepayment()
    {
        return ledgerJournalTrans.Prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        TaxInformation_IN   taxInformation_IN; 

        if (partyTransTaxInformation.CustomerTaxInformation)
        {
            taxInformation_IN = TaxInformation_IN::find(partyTransTaxInformation.CustomerTaxInformation);
        }
        else if (partyTransTaxInformation.VendorTaxInformation)
        {
            taxInformation_IN = TaxInformation_IN::find(partyTransTaxInformation.VendorTaxInformation);
        }
        else if (partyTransTaxInformation.BankTaxInformation)
        {
            taxInformation_IN = TaxInformation_IN::find(partyTransTaxInformation.BankTaxInformation);
        }

        return taxInformation_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    public Qty getQuantity()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTransTaxInforamtion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax information for Party.
    /// </summary>
    /// <returns>
    /// The record of TransTaxInformation.
    /// </returns>
    public TransTaxInformation getPartyTransTaxInforamtion()
    {
        return partyTransTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return ledgerJournalTrans.getPartyRelatedLine().DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return ledgerJournalTrans.getPartyRelatedLine().DocumentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsSEZParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the SEZ property of party.
    /// </summary>
    /// <returns>
    /// yes if the party is SEZ; otherwise, no.
    /// </returns>
    public NoYes getIsSEZParty()
    {
        return LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location).TaxGSTEPZCode_IN == TaxGSTEPZCode_IN::SEZ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsDeemedExport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Deemed export property of party.
    /// </summary>
    /// <returns>
    /// yes if it is Deemed export; otherwise, no.
    /// </returns>
    public NoYes getIsDeemedExport()
    {
        return LogisticsLocationExt::find(this.getPartyLogisticsPostalAddress().Location).isDeemedExportType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>