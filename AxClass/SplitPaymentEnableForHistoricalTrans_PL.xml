<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SplitPaymentEnableForHistoricalTrans_PL</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class creates records in <c>CustTrans_W</c>/<c>VendTrans_W</c> for records in <c>CustTrans</c>/<c>VendTrans</c> that were created
/// before the feature <c>SplitPaymentMandatoryRuleFeature_PL</c> was turned on.
/// </summary>
public final class SplitPaymentEnableForHistoricalTrans_PL extends RunBaseBatch implements BatchRetryable
{
    private TransDate fromDate;
    private TransDate toDate;
    private SplitPaymentDocumentType_PL documentType;

    public DialogField dialogFromDate;
    public DialogField dialogToDate;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        documentType,
        fromDate,
        toDate
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDocumentType</Name>
				<Source><![CDATA[
    public SplitPaymentDocumentType_PL parmDocumentType(SplitPaymentDocumentType_PL _documentType = documentType)
    {
        documentType = _documentType;
        return documentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version thisVersion = RunBase::getVersion(packedClass);

        switch (thisVersion)
        {
            case #CurrentVersion:
                [thisVersion, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <see cref="M:RunBase.pack" />.
    /// </summary>
    public void saveLast()
    {
        // Blocking super() as we do not want to save last value for this case.
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c> method will be called.
    ///    This method should not typically be overridden.
    /// </remarks>
    public void getLast()
    {
        //Blocking super() as we do not want to save last value for this case.
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of this object.
    /// </summary>
    /// <param name="_args">
    /// Arguments object representing the caller form.
    /// </param>
    /// <returns>
    /// An instance of this object, instantiated using provided arguments.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws an error if the argument is null or does not contain a caller.
    /// </exception>
    public static SplitPaymentEnableForHistoricalTrans_PL constructFromArgs(Args _args)
    {
        if (!(_args && _args.caller()))
        {
            throw Error(Error::wrongUseOfFunction(funcname()));
        }

        SplitPaymentEnableForHistoricalTrans_PL createInstance = new SplitPaymentEnableForHistoricalTrans_PL();

        if (formHasMethod(_args.caller() as FormRun, identifierStr(getDocumentType)))
        {
            createInstance.parmDocumentType(_args.caller().getDocumentType());
        }

        return createInstance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        SplitPaymentEnableForHistoricalTrans_PL create_W = SplitPaymentEnableForHistoricalTrans_PL::constructFromArgs(_args);

        if (create_W.prompt())
        {
            create_W.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (this.parmDocumentType() == SplitPaymentDocumentType_PL::Customer)
        {
            CustTrans custTransLocal;
            CustTrans_W custTrans_WLocal, newCustTrans_W;

            insert_recordset newCustTrans_W(CustTrans)
            select RecId from custTransLocal
                where (custTransLocal.TransDate >= this.parmFromDate() && custTransLocal.TransDate <= this.parmToDate())
            notexists join custTrans_WLocal
                where custTransLocal.RecId == CustTrans_WLocal.CustTrans;
        }
        else
        {
            VendTrans vendTransLocal;
            VendTrans_W vendTrans_WLocal, newVendTrans_W;

            insert_recordset newVendTrans_W(VendTrans)
            select RecId from vendTransLocal
                where (vendTransLocal.TransDate >= this.parmFromDate() && vendTransLocal.TransDate <= this.parmToDate())
            notexists join vendTrans_WLocal
                where vendTransLocal.RecId == VendTrans_WLocal.VendTrans;
        }

        info("@SYS9265");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@AccountsPayable:EnableSplitPaymentArchaicTrans";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        var dialogRunbase = super();

        dialogRunbase.addGroup("@SYS14598");
        dialogFromDate = dialogRunbase.addFieldValue(extendedtypestr(TransDate), fromDate, "@SYS80661", "@SYS80661");
        dialogToDate = dialogRunbase.addFieldValue(extendedtypestr(TransDate), toDate, "@SYS35904", "@SYS35904");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        boolean ret;

        this.parmFromDate(dialogFromDate.value());
        this.parmToDate(dialogToDate.value());

        ret = super();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInitializeVariablesFromCallerForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if variables must be initialized from the caller form.
    /// </summary>
    /// <param name = "_args">
    /// <c>Args</c> instance.
    /// </param>
    /// <returns>
    /// true if variables must be initialized; otherwise, false.
    /// </returns>
    protected static boolean mustInitializeVariablesFromCallerForm(Args _args)
    {
        return _args && _args.caller();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (this.parmFromDate() == dateNull())
        {
            ret = checkFailed("@GLS114232");
        }

        if (this.parmToDate() == dateNull())
        {
            ret = checkFailed("@GLS114233");
        }

        if (ret && this.parmFromDate() > toDate)
        {
            ret = checkFailed("@GLS63223");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>