<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalEntityCreateJournalHeaders</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalEntityCreateJournalHeaders</c> class used to insert records into the <c>LedgerJournalTable</c> table related to the <c>LedgerJournalEntity</c> entity.
/// </summary>
public final class LedgerJournalEntityCreateJournalHeaders
{
    private DMFDefinitionGroupExecution dmfDefinitionGroupExecution;
    private LedgerJournalEntityStaging staging;

    private LedgerJournalWFApprovalStatus defaultWFStatus;
    private NoYes workFlowApprovalStatus;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeaders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records to <c>LedgerJournalTable</c> table.
    /// </summary>
    /// <param name = "_dmfDefinitionGroupExecution">
    /// The definition group.
    /// </param>
    /// <param name = "_defaultWFStatus">
    /// The default workflow approval status.
    /// </param>
    /// <param name = "_workFlowApprovalStatus">
    /// The workflow approval status.
    /// </param>
    internal static void createJournalHeaders(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        LedgerJournalWFApprovalStatus _defaultWFStatus,
        NoYes _workFlowApprovalStatus)
    {
        LedgerJournalEntityCreateJournalHeaders ledgerJournalEntityCreateJournalHeaders = new LedgerJournalEntityCreateJournalHeaders();
        ledgerJournalEntityCreateJournalHeaders.initialize(_dmfDefinitionGroupExecution, _defaultWFStatus, _workFlowApprovalStatus);

        SysDaInsertObject insertObject = ledgerJournalEntityCreateJournalHeaders.getLedgerJournalTableInsertObject();
        SysDaQueryObject queryObject = ledgerJournalEntityCreateJournalHeaders.getQueryObject();

        insertObject.query(queryObject);
        SysDaInsertStatement ledgerJournalTableInsertStatement = new SysDaInsertStatement();

        ledgerJournalTableInsertStatement.insert(insertObject);

        ledgerJournalEntityCreateJournalHeaders.handleVoucherAllocatedAtPosting();

        ledgerJournalEntityCreateJournalHeaders.handleLedgerTransTableW(ledgerJournalEntityCreateJournalHeaders);

        ledgerJournalEntityCreateJournalHeaders.handleParentJournalNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleVoucherAllocatedAtPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update <c>LedgerJournalTable</c> to reference the <c>LedgerTempVoucher</c> if the related <c>LedgerJournalName</c> has VoucherAllocatedAtPosting set.
    /// </summary>
    /// <remarks>
    /// This ensures lines added after import will continue to use the temporary number sequence for vouchers instead of the sequence used during posting.
    /// </remarks>
    private void handleVoucherAllocatedAtPosting()
    {
        LedgerJournalName ledgerJournalName;

        LedgerJournalTable header;
        header.skipDataMethods(true);
        header.skipBusinessEvents(true);

        RefRecId ledgerTempVoucherSeq = LedgerParameters::numRefLedgerTempVoucher().NumberSequenceId;

        update_recordset header setting NumberSequenceTable = ledgerTempVoucherSeq
            where header.NumberSequenceTable != ledgerTempVoucherSeq
        exists join staging
            where staging.DefinitionGroup == dmfDefinitionGroupExecution.DefinitionGroup
                && staging.ExecutionId == dmfDefinitionGroupExecution.ExecutionId
                && staging.JournalBatchNumber == header.JournalNum
        exists join ledgerJournalName
            where ledgerJournalName.JournalName == header.JournalName
                && ledgerJournalName.VoucherAllocatedAtPosting == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLedgerTransTableW</Name>
				<Source><![CDATA[
    private void handleLedgerTransTableW(LedgerJournalEntityCreateJournalHeaders _instance)
    {
        #ISOCountryRegionCodes

        boolean enableLedgerJournalTable_W = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCN, #isoLT, #isoLV, #isoEE, #isoRU, #isoCZ, #isoHU, #isoPL]);

        if (!enableLedgerJournalTable_W)
        {
            enableLedgerJournalTable_W = BrazilParameters::isEnabled();
        }

        if (!enableLedgerJournalTable_W)
        {
            enableLedgerJournalTable_W = PaymentFormatCodeSets_W::isISO20022Country();
        }

        if (enableLedgerJournalTable_W)
        {
            LedgerJournalTable ledgerJournalTable;
            LedgerJournalTable_W ledgerJournalTable_W;

            select firstonly RecId from ledgerJournalTable_W
                join RecId from ledgerJournalTable
                    where ledgerJournalTable.RecId == ledgerJournalTable_W.LedgerJournalTable
                exists join staging
                    where staging.DefinitionGroup == dmfDefinitionGroupExecution.DefinitionGroup
                        && staging.ExecutionId == dmfDefinitionGroupExecution.ExecutionId
                        && staging.JournalBatchNumber == ledgerJournalTable.JournalNum;

            if (ledgerJournalTable_W.RecId == 0)
            {
                SysDaInsertObject insertObject = _instance.getLedgerJournalTableWInsertObject();
                SysDaQueryObject queryObject = _instance.getQueryObjectForLedgerJournalTableW();

                insertObject.query(queryObject);

                SysDaInsertStatement ledgerJournalTableWInsertStatement = new SysDaInsertStatement();
                ledgerJournalTableWInsertStatement.insert(insertObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleParentJournalNum</Name>
				<Source><![CDATA[
    private void handleParentJournalNum()
    {
        if (LedgerJournalEntityHeaderParentJournalNumFlight::instance().isEnabled())
        {
            LedgerJournalTable header;

            header.skipEvents(true);
            header.skipDataMethods(true);
            header.skipDatabaseLog(true);
            header.skipBusinessEvents(true);

            update_recordset header
                setting ParentJournalNum = header.JournalNum
                where header.ParentJournalNum == ''
            exists join staging
                where staging.DefinitionGroup == dmfDefinitionGroupExecution.DefinitionGroup
                    && staging.ExecutionId == dmfDefinitionGroupExecution.ExecutionId
                    && staging.JournalBatchNumber == header.JournalNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(
        DMFDefinitionGroupExecution _dmfDefinitionGroupExecution,
        LedgerJournalWFApprovalStatus _defaultWFStatus,
        NoYes _workFlowApprovalStatus)
    {
        dmfDefinitionGroupExecution = _dmfDefinitionGroupExecution;
        defaultWFStatus = _defaultWFStatus;
        workFlowApprovalStatus = _workFlowApprovalStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTableInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>LedgerJournalTable</c> table fields to an Insert object.
    /// </summary>
    /// <returns>
    /// The insert object with the fields added.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaInsertObject getLedgerJournalTableInsertObject()
    {
        LedgerJournalTable ledgerJournalTable;
        ledgerJournalTable.skipDataMethods(true);

        SysDaInsertObject ledgerJournalTableInsertObject = new SysDaInsertObject(ledgerJournalTable);

        ledgerJournalTableInsertObject.fields()
            .add(fieldStr(LedgerJournalTable, JournalName))
            .add(fieldStr(LedgerJournalTable, JournalNum))
            .add(fieldStr(LedgerJournalTable, CurrentOperationsTax))
            .add(fieldStr(LedgerJournalTable, Name))
            .add(fieldStr(LedgerJournalTable, ExchrateSecondary))
            .add(fieldStr(LedgerJournalTable, VoucherAllocatedAtPosting))
            .add(fieldStr(LedgerJournalTable, LedgerJournalInclTax))
            .add(fieldStr(LedgerJournalTable, LinesLimitBeforeDistribution))
            .add(fieldStr(LedgerJournalTable, DetailSummaryPosting))
            .add(fieldStr(LedgerJournalTable, WorkflowApprovalStatus))
            .add(fieldStr(LedgerJournalTable, GroupBlockId))
            .add(fieldStr(LedgerJournalTable, DocumentNum))
            .add(fieldStr(LedgerJournalTable, OffsetAccountType))
            .add(fieldStr(LedgerJournalTable, OffsetLedgerDimension))
            .add(fieldStr(LedgerJournalTable, CurrencyCode))
            .add(fieldStr(LedgerJournalTable, FixedExchRate))
            .add(fieldStr(LedgerJournalTable, NumberSequenceTable));

        return ledgerJournalTableInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getQueryObject()
    {
        SysDaQueryObject ledgerJournalEntityStagingQuery = this.getLedgerJournalEntityStagingQueryObject();

        SysDaQueryObject ledgerJournalNameQuery = this.getLedgerJournalNameQueryObject();
        ledgerJournalEntityStagingQuery.joinClause(SysDaJoinKind::InnerJoin, ledgerJournalNameQuery);

        SysDaQueryObject ledgerJournalTable_ExistsQuery = this.getLedgerJournalTableExistsQueryObject();
        ledgerJournalNameQuery.joinClause(SysDaJoinKind::NotExistsJoin, ledgerJournalTable_ExistsQuery);

        return ledgerJournalEntityStagingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getLedgerJournalEntityStagingQueryObject()
    {
        SysDaQueryObject ledgerJournalEntityStagingQuery = new SysDaQueryObject(staging);

        this.addFieldsToLedgerJournalEntityStagingQueryObject(ledgerJournalEntityStagingQuery);
        this.addGroupByClauseToLedgerJournalEntityStagingQueryObject(ledgerJournalEntityStagingQuery);
        this.addWhereClauseToLedgerJournalEntityStagingQueryObject(ledgerJournalEntityStagingQuery);

        return ledgerJournalEntityStagingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTableWInsertObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>LedgerJournalTable_W</c> table fields to an Insert object.
    /// </summary>
    /// <returns>
    /// The insert object with the fields added.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaInsertObject getLedgerJournalTableWInsertObject()
    {
        LedgerJournalTable_W ledgerJournalTable_W;
        ledgerJournalTable_W.skipDataMethods(true);
        ledgerJournalTable_W.skipBusinessEvents(true);

        SysDaInsertObject ledgerJournalTableWInsertObject = new SysDaInsertObject(ledgerJournalTable_W);

        ledgerJournalTableWInsertObject.fields()
            .add(fieldStr(LedgerJournalTable_W, LedgerJournalTable));

        return ledgerJournalTableWInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryObjectForLedgerJournalTableW</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected final SysDaQueryObject getQueryObjectForLedgerJournalTableW()
    {
        LedgerJournalTable ledgerJournalTable;

        SysDaQueryObject ledgerJournalTableQueryObj = new SysDaQueryObject(ledgerJournalTable);
        SysDaQueryObject stagingQueryObj = new SysDaQueryObject(staging);

        ledgerJournalTableQueryObj.projection()
            .add(fieldStr(LedgerJournalTable, RecId));

        stagingQueryObj.joinClauseKind(SysDaJoinKind::ExistsJoin);

        stagingQueryObj.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(dmfDefinitionGroupExecution, fieldStr(DMFDefinitionGroupExecution, DefinitionGroup)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, DefinitionGroup)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(dmfDefinitionGroupExecution, fieldStr(DMFDefinitionGroupExecution, ExecutionId)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, ExecutionId))))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, JournalNum)),
                new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, JournalBatchNumber)))));

        ledgerJournalTableQueryObj.joinClause(SysDaJoinKind::ExistsJoin, stagingQueryObj);

        return ledgerJournalTableQueryObj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalEntityStaging</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_ledgerJournalEntityStagingQuery">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToLedgerJournalEntityStagingQueryObject(SysDaQueryObject _ledgerJournalEntityStagingQuery)
    {
        _ledgerJournalEntityStagingQuery.projection()
            .add(fieldStr(LedgerJournalEntityStaging, JournalName))
            .add(fieldStr(LedgerJournalEntityStaging, JournalBatchNumber))
            .add(fieldStr(LedgerJournalEntityStaging, PostingLayer))
            .add(fieldStr(LedgerJournalEntityStaging, Description))
            .add(fieldStr(LedgerJournalEntityStaging, ExchangeRateSecondary));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByClauseToLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalEntityStaging</c> fields to the query object group by clause.
    /// </summary>
    /// <param name = "_ledgerJournalEntityStagingQuery">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addGroupByClauseToLedgerJournalEntityStagingQueryObject(SysDaQueryObject _ledgerJournalEntityStagingQuery)
    {
        _ledgerJournalEntityStagingQuery.groupByClause()
            .add(fieldStr(LedgerJournalEntityStaging, JournalName))
            .add(fieldStr(LedgerJournalEntityStaging, JournalBatchNumber))
            .add(fieldStr(LedgerJournalEntityStaging, PostingLayer))
            .add(fieldStr(LedgerJournalEntityStaging, Description))
            .add(fieldStr(LedgerJournalEntityStaging, ExchangeRateSecondary));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToLedgerJournalEntityStagingQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalEntityStaging</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_ledgerJournalEntityStagingQuery">
    /// The query object to add the where clauses to.
    /// </param>
    [Wrappable(true)]
    protected final void addWhereClauseToLedgerJournalEntityStagingQueryObject(SysDaQueryObject _ledgerJournalEntityStagingQuery)
    {
        _ledgerJournalEntityStagingQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, DefinitionGroup)),
                new SysDaFieldExpression(dmfDefinitionGroupExecution, fieldStr(DMFDefinitionGroupExecution, DefinitionGroup))),
            new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, ExecutionId)),
                new SysDaFieldExpression(dmfDefinitionGroupExecution, fieldStr(DMFDefinitionGroupExecution, ExecutionId))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, TransferStatus)),
                new SysDaValueExpression(DMFTransferStatus::NotStarted))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalNameQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getLedgerJournalNameQueryObject()
    {
        LedgerJournalName ledgerJournalName;

        SysDaQueryObject ledgerJournalNameQuery = new SysDaQueryObject(ledgerJournalName);

        this.addFieldsToLedgerJournalNameQueryObject(ledgerJournalNameQuery);
        this.addGroupByClauseToLedgerJournalNameQueryObject(ledgerJournalNameQuery);
        this.addWhereClauseToLedgerJournalNameQueryObject(ledgerJournalNameQuery, ledgerJournalName);
        
        return ledgerJournalNameQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToLedgerJournalNameQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalName</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_ledgerJournalNameQuery">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addFieldsToLedgerJournalNameQueryObject(SysDaQueryObject _ledgerJournalNameQuery)
    {
        _ledgerJournalNameQuery.projection()
            .add(fieldStr(LedgerJournalName, VoucherAllocatedAtPosting))
            .add(fieldStr(LedgerJournalName, LedgerJournalInclTax))
            .add(fieldStr(LedgerJournalName, LinesLimitBeforeDistribution))
            .add(fieldStr(LedgerJournalName, DetailSummary))
            .addValue(defaultWFStatus)
            .add(fieldStr(LedgerJournalName, BlockUserGroupId))
            .add(fieldStr(LedgerJournalName, DocumentNum))
            .add(fieldStr(LedgerJournalName, OffsetAccountType))
            .add(fieldStr(LedgerJournalName, OffsetLedgerDimension))
            .add(fieldStr(LedgerJournalName, CurrencyCode))
            .add(fieldStr(LedgerJournalName, FixedExchRate))
            .add(fieldStr(LedgerJournalName, NumberSequenceTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByClauseToLedgerJournalNameQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalName</c> fields to the query object group by clause.
    /// </summary>
    /// <param name = "_ledgerJournalNameQuery">
    /// The query object to add the fields to.
    /// </param>
    [Wrappable(true)]
    protected final void addGroupByClauseToLedgerJournalNameQueryObject(SysDaQueryObject _ledgerJournalNameQuery)
    {
        _ledgerJournalNameQuery.groupByClause()
            .add(fieldStr(LedgerJournalName, VoucherAllocatedAtPosting))
            .add(fieldStr(LedgerJournalName, LedgerJournalInclTax))
            .add(fieldStr(LedgerJournalName, LinesLimitBeforeDistribution))
            .add(fieldStr(LedgerJournalName, DetailSummary))
            .add(fieldStr(LedgerJournalName, BlockUserGroupId))
            .add(fieldStr(LedgerJournalName, DocumentNum))
            .add(fieldStr(LedgerJournalName, OffsetAccountType))
            .add(fieldStr(LedgerJournalName, OffsetLedgerDimension))
            .add(fieldStr(LedgerJournalName, CurrencyCode))
            .add(fieldStr(LedgerJournalName, FixedExchRate))
            .add(fieldStr(LedgerJournalName, NumberSequenceTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToLedgerJournalNameQueryObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>LedgerJournalName</c> where clause expression to a query object.
    /// </summary>
    /// <param name = "_ledgerJournalNameQuery">
    /// The query object to add the where clauses to.
    /// </param>
    /// <param name = "_ledgerJournalName">
    /// The <c>LedgerJournalName</c> buffer.
    /// </param>
    [Wrappable(true)]
    protected final void addWhereClauseToLedgerJournalNameQueryObject(SysDaQueryObject _ledgerJournalNameQuery, LedgerJournalName _ledgerJournalName)
    {
        _ledgerJournalNameQuery.whereClause(new SysDaAndExpression(
            new SysDaEqualsExpression(new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, JournalName)),
                new SysDaFieldExpression(_ledgerJournalName, fieldStr(LedgerJournalName, JournalName))),
            new SysDaEqualsExpression(new SysDaFieldExpression(_ledgerJournalName, fieldStr(LedgerJournalName, WorkflowApproval)),
                new SysDaValueExpression(workFlowApprovalStatus))));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalTableExistsQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject getLedgerJournalTableExistsQueryObject()
    {
        LedgerJournalTable ledgerJournalTable_Exists;

        SysDaQueryObject ledgerJournalTable_ExistsQuery = new SysDaQueryObject(ledgerJournalTable_Exists);

        ledgerJournalTable_ExistsQuery.whereClause(new SysDaEqualsExpression(
            new SysDaFieldExpression(ledgerJournalTable_Exists, fieldStr(LedgerJournalTable, JournalNum)),
            new SysDaFieldExpression(staging, fieldStr(LedgerJournalEntityStaging, JournalBatchNumber))));

        return ledgerJournalTable_ExistsQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>