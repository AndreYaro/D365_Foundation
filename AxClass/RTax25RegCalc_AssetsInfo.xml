<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_AssetsInfo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_AssetsInfo extends RTax25RegCalc_Assets implements BatchRetryable
{
    RAssetTransReportingView    rAssetTrans;

    RAssetSumCalc               rAssetSumTrans;

    RTax25NotesLine             deprNewBase, deprEndType;
    TransDate                   deprStartDate, deprEndDateS, deprEndDateE, deprNewDate, reduceDate;
    AmountMST                   origCostValue, baseCostValue, operationAmount;
    RAssetDeprMethod            deprMethod;
    NoYesId                     productionSign;
    RAssetDeprPercentage        reduceFactor;

    RefRecId                    profitTableRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetDeprMethod</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RAssetDeprMethod assetDeprMethod(TransDate    _transDate)
    {
        return rAssetStandards.assetDeprMethod(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseCostValue</Name>
				<Source><![CDATA[
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
protected void baseCostValue(TransDate _dateTo, boolean _ret = true)
    {
        RAssetSumCalc tmpSumTrans;
        //AmountMST           tmpOrigCost, tmpBaseCost;
        TransDate     prevDateTo, costLimitDate;
    
        prevDateTo = _ret ? endmth(_dateTo) : _dateTo;
        rAssetSumTrans = RAssetSumCalc_TransCorr::newAssetPeriod(rAssetTable.AccountNum, assetStandardId, prevDateTo);
    
        if (deprMethod != RAssetDeprMethod::TaxLine)
        {
            origCostValue   = rAssetSumTrans.acquisitionValueMST();
            baseCostValue   = 0;
            operationAmount = origCostValue;
        }
        else
        {
            origCostValue   = rAssetSumTrans.acquisitionValueMST();
            operationAmount = origCostValue;
            if (rAssetStandards.CostLimitDate)
            {
                costLimitDate = rAssetStandards.CostLimitDate - 1;
                tmpSumTrans   = RAssetSumCalc_TransCorr::newAssetPeriod(
                    rAssetTable.AccountNum,
                    assetStandardId,
                    costLimitDate,
                    dateNull(),
                    RTax25PeriodFactory::createIteratorDateRange(costLimitDate, costLimitDate)
                    );
                baseCostValue = tmpSumTrans.netBookValueMST();
            }
    
            origCostValue   = baseCostValue ? 0 : rAssetSumTrans.netBookValueMST();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    protected void createFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    protected void createTotal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateInPeriod</Name>
				<Source><![CDATA[
    private TransDate dateInPeriod(TransDate _datePeriod)
    {
        TransDate endDate;
        ;

        switch (registerJournalTrans.PeriodType)
        {
            case RTax25PeriodType::Month       :
                endDate = endmth(nextMth(_datePeriod));
                break;
            case RTax25PeriodType::Quarter     :
                endDate = endmth(nextQtr(_datePeriod));
                break;
            case RTax25PeriodType::HalfYear    :
                endDate = endmth(nextQtr(nextQtr(_datePeriod)));
                break;
            case RTax25PeriodType::Year        :
                endDate = endmth(nextYr(_datePeriod));
                break;
            case RTax25PeriodType::NineMonths:
                endDate = endmth(nextqtr(nextqtr(nextqtr(_datePeriod))));
                break;
        }

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprMonthsCalc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Months deprMonthsCalc(TransDate   _lastDeprDate)
    {
        Months   months = this.monthInterval(this.deprStartDate(), _lastDeprDate) - this.intervalMonths(_lastDeprDate);

        return months > 0 ? months : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprStartDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RAssetDepStartDate deprStartDate()
    {
        return rAssetStandards.DepStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>intervalMonths</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Months intervalMonths(TransDate   _dateTo = dateTo)
    {
        RAssetSuspend   assetSuspend;
        Months          months;
        TransDate       lastSuspend=dateNull(), currentEnd;

        months = 0;
        while select SuspendStart, SuspendEnd
            from assetSuspend
            order by SuspendStart desc
            where  assetSuspend.Assetid      == rAssetTable.AccountNum  &&
                   assetSuspend.SuspendStart <= _dateTo
        {
            if (endmth(lastSuspend) != endmth(assetSuspend.SuspendStart))
            {
                currentEnd   = assetSuspend.SuspendEnd ?
                              (assetSuspend.SuspendEnd >= _dateTo ? _dateTo: assetSuspend.SuspendEnd) : _dateTo;
                months      += this.monthInterval(assetSuspend.SuspendStart, currentEnd);
                lastSuspend  = assetSuspend.SuspendEnd;
            }
        }
        return months;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lifeTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RAssetLifeTime lifeTime(TransDate _transDate)
    {
        return rAssetStandards.lifetime(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>monthInterval</Name>
				<Source><![CDATA[
    private Months monthInterval(TransDate _startDate,
                                 TransDate _endDate)
    {
        Months          months;
        TransDate       startDate = _startDate;
        ;

        if (startDate  && _endDate)
        {
            if (_endDate >= startDate)
            {
                do
                {
                   startDate = nextMth(startDate);
                   months++;
                }
                while (endmth(startDate) <= endmth(_endDate));
            }

        }

        return months;
    }

]]></Source>
			</Method>
			<Method>
				<Name>productionSign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NoYesId productionSign(Voucher      _voucher   = "",
                                     TransDate    _transDate = dateNull())
    {
        RTax25LedgerRange             ledgerRange;
        TmpRTax25LedgerAccountList    mainAccountList;
        LedgerDimensionDefaultAccount defaultAccount;
        GeneralJournalAccountEntry    accountEntry;
        GeneralJournalAccountEntry_W  accountEntryW;

        NoYesId                       ret         = NoYes::No;
        DimensionAttribute            dimAttr     = DimensionAttribute::find(RTax25Parameters::find().DimensionAttribute);
        DimensionAttribute            mainDimAttr = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
        RTax25ProfitTable             profitDim, offsetProfitDim;

        Query                         genQuery,
                                      offsetGenQuery;

        QueryBuildDataSource          genQbds,
                                      offsetGenQbds,
                                      rangeQbds;

        QueryBuildRange               qbrDim,
                                      qbr;

        QueryRun                      genQueryRun,
                                      offsetGenQueryRun;

        RTax25RegisterProfit          regProfit;

        //Ledger Account List creation base on ProfitId
        ledgerRange       = new RTax25LedgerRange();
        ledgerRange.initFromRegisterId(registerId);
        mainAccountList = ledgerRange.mainAccountRangeTable();
        //<-
        profitTableRecId = 0;

        if (! _voucher)
        {
            defaultAccount = RAssetLedgerAccountsByLocation::assetLedgerDimension(rAssetTable.AccountNum,
                                                                                  rAssetTable.location(dateTo),
                                                                                  assetStandardId);

            if (! defaultAccount)
            {
                defaultAccount =  RAssetLedgerAccounts::assetLedgerDimension(rAssetTable.AccountNum,
                                                                             RAssetTransType::Depreciation,
                                                                             assetStandardId,
                                                                             rAssetStandards.postingProfile(dateTo));
            }

            if (mainAccountList && defaultAccount)
            {
                select firstonly mainAccountList
                    order by AccAllInclude asc, OffAllInclude asc
                    where (mainAccountList.MainAccountId == LedgerDimensionFacade::getMainAccountFromLedgerDimension(defaultAccount).RecId ||
                           mainAccountList.AccAllInclude == NoYes::Yes);

                if (mainAccountList)
                {
                    profitTableRecId = mainAccountList.rTax25ProfitTable;
                    if (RTax25RegisterProfit::find(registerId, mainAccountList.rTax25ProfitTable).ProductionAsset ==
                        RTax25AssetProductionType::Production)
                    {
                        ret = NoYes::Yes;
                    }
                }
            }
        }
        else
        {
            while select mainAccountList
                order by AccAllInclude asc, OffAllInclude asc
            {
                profitTableRecId = mainAccountList.rTax25ProfitTable;
                profitDim        = RTax25ProfitTable::findDefaultDimension(mainAccountList.DefaultDimension);
                offsetProfitDim  = RTax25ProfitTable::findDefaultDimension(mainAccountList.OffsetDefaultDimension);
                regProfit        = RTax25RegisterProfit::find(registerId, mainAccountList.rTax25ProfitTable);

                genQuery = new Query();
                genQbds = genQuery.addDataSource(tableNum(GeneralJournalAccountEntry));
                genQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
                genQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(queryValue(NoYes::No));

                // Account
                if (!mainAccountList.AccAllInclude)
                {
                    qbrDim = SysQuery::addDimensionAttributeRange(genQuery,
                                                                  genQbds.name(),
                                                                  fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                                  DimensionComponent::DimensionAttribute,
                                                                  MainAccount::find(mainAccountList.MainAccountId).MainAccountId,
                                                                  mainDimAttr.Name);
                    if (qbrDim)
                    {
                        qbrDim.dataSource().joinMode(JoinMode::ExistsJoin);
                    }
                }

                // Dim
                if (profitDim)
                {
                    qbrDim = SysQuery::addDimensionAttributeRange(genQuery,
                                                                  genQbds.name(),
                                                                  fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                                  DimensionComponent::DimensionAttribute,
                                                                  profitDim ? profitDim.ProfitId : SysQuery::valueEmptyString(),
                                                                  dimAttr.Name);
                    if (qbrDim && profitDim)
                    {
                        qbrDim.dataSource().joinMode(JoinMode::ExistsJoin);
                    }
                }

                rangeQbds = GeneralJournalAccountEntry_W::addDataSource(genQbds);
                rangeQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU));
                rangeQbds.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(SysQuery::valueNotEmptyString());

                genQbds = genQbds.addDataSource(tableNum(GeneralJournalEntry));
                genQbds.fetchMode(QueryFetchMode::One2One);
                genQbds.joinMode(JoinMode::ExistsJoin);
                genQbds.addLink(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry), fieldNum(GeneralJournalEntry, RecId));
                genQbds.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

                rangeQbds = genQbds.addDataSource(tableNum(FiscalCalendarPeriod));
                rangeQbds.fetchMode(QueryFetchMode::One2One);
                rangeQbds.joinMode(JoinMode::ExistsJoin);
                rangeQbds.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldNum(FiscalCalendarPeriod, RecId));

                qbr = rangeQbds.addRange(fieldNum(FiscalCalendarPeriod, Type));
                qbr.status(RangeStatus::Hidden);
                qbr.value(queryValue(FiscalPeriodType::Operating));

                genQbds = genQbds.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
                genQbds.fetchMode(QueryFetchMode::One2One);
                genQbds.joinMode(JoinMode::ExistsJoin);
                genQbds.addLink(fieldNum(GeneralJournalEntry, RecId), fieldNum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry));
                genQbds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, Voucher)).value(_voucher);
                genQbds.addRange(fieldNum(SubledgerVoucherGeneralJournalEntry, AccountingDate)).value(queryValue(_transDate));

                genQueryRun = new QueryRun(genQuery);
                while (genQueryRun.next())
                {
                    accountEntry = genQueryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
                    accountEntryW = genQueryRun.get(tableNum(GeneralJournalAccountEntry_W)) as GeneralJournalAccountEntry_W;

                    offsetGenQuery = new Query();
                    offsetGenQbds = offsetGenQuery.addDataSource(tableNum(GeneralJournalAccountEntry));
                    offsetGenQbds.addSelectionField(fieldNum(GeneralJournalAccountEntry, TableId));
                    offsetGenQbds.addRange(fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry)).value(queryValue(accountEntry.GeneralJournalEntry));
                    offsetGenQbds.addRange(fieldNum(GeneralJournalAccountEntry, IsCredit)).value(queryValue(NoYes::Yes));

                    // Account
                    if (! mainAccountList.OffAllInclude)
                    {
                        qbrDim = SysQuery::addDimensionAttributeRange(offsetGenQuery,
                                                                      offsetGenQbds.name(),
                                                                      fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                                      DimensionComponent::DimensionAttribute,
                                                                      MainAccount::find(mainAccountList.OffsetMainAccountId).MainAccountId,
                                                                      mainDimAttr.Name);
                    }

                    // Dim
                    if (offsetProfitDim)
                    {
                        qbrDim = SysQuery::addDimensionAttributeRange(offsetGenQuery,
                                                                      offsetGenQbds.name(),
                                                                      fieldStr(GeneralJournalAccountEntry, LedgerDimension),
                                                                      DimensionComponent::DimensionAttribute,
                                                                      offsetProfitDim ? offsetProfitDim.ProfitId : SysQuery::valueEmptyString(),
                                                                      dimAttr.Name);
                    }


                    offsetGenQbds = GeneralJournalAccountEntry_W::addDataSource(offsetGenQbds);
                    offsetGenQbds.joinMode(JoinMode::ExistsJoin);
                    offsetGenQbds.addRange(fieldNum(GeneralJournalAccountEntry_W, BondBatchTrans_RU)).value(queryValue(accountEntryW.BondBatchTrans_RU));

                    offsetGenQueryRun = new QueryRun(offsetGenQuery);
                    while (offsetGenQueryRun.next())
                    {
                        if (regProfit.ProductionAsset == RTax25AssetProductionType::Production)
                        {
                            ret = NoYes::Yes;
                            break;
                        }
                    }

                    if (ret) break;
                }

                if (ret) break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reduceFactor</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void reduceFactor(TransDate   _transDate = dateTo - 1)
    {
        RAssetLifeHist   assetLifeHist, assetLifeHistChange;

        reduceFactor = RAssetLifeHist::findDateLifeTime(rAssetTable.AccountNum, _transDate, assetStandardId).NewFactor;

        while select ChangeDate, NewFactor from assetLifeHist
            order by ChangeDate desc
            where assetLifeHist.AccountNum      == rAssetTable.AccountNum &&
                  assetLifeHist.ChangeDate      <= _transDate             &&
                  assetLifeHist.AssetStandardId == assetStandardId
        {
            select firstOnly NewFactor from assetLifeHistChange
                order by ChangeDate desc
                where assetLifeHistChange.AccountNum      == rAssetTable.AccountNum   &&
                      assetLifeHistChange.ChangeDate      <  assetLifeHist.ChangeDate &&
                      assetLifeHistChange.AssetStandardId == assetStandardId;

            if (assetLifeHistChange.NewFactor != assetLifeHist.NewFactor)
                break;
        }

        reduceDate   = assetLifeHist.ChangeDate ? assetLifeHist.ChangeDate : rAssetStandards.DepStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctedPeriodDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the minimum date from the dates which correspond to the end of the quarter in which the reporting date of the corrective transaction is included.
    /// </summary>
    /// <param name="_fromDateCalc">
    ///    Start date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCalc">
    ///    End date of the period in which the accounting date should be included.
    /// </param>
    /// <param name="_toDateCorr">
    ///    End date of the period in which the reporting date should be included.
    /// </param>
    /// <returns>
    ///    Minimum date from the dates which correspond to the end of the quarter in which the corrective transaction is included.
    /// </returns>
    public ReportingDate_RU correctedPeriodDate(FromDate _fromDateCalc, ToDate _toDateCalc, ToDate _toDateCorr)
    {
        ReportingDate_RU            correctedPeriodDate;
        RAssetTransCorrectiveView   assetTrans;
        Query                       query = this.createQuery();
        QueryBuildDataSource        qbdsTrans,
                                    qbdsTable = query.dataSourceTable(tableNum(RAssetTable)),
                                    qbdsStandard = query.dataSourceTable(tableNum(RAssetStandards));
    
        qbdsTable.joinMode(JoinMode::ExistsJoin);
    
        qbdsStandard.firstOnly(true);
        qbdsStandard.sortClear();
        qbdsStandard.addSelectionField(fieldNum(RAssetStandards, TableId));
    
        qbdsTrans = qbdsStandard.addDataSource(tableNum(RAssetTransCorrectiveView));
    
        qbdsTrans.addSelectionField(fieldNum(RAssetTransCorrectiveView, ReportingDate));
    
        qbdsTrans.addSortField(fieldNum(RAssetTransCorrectiveView, ReportingDate), SortOrder::Ascending);
    
        qbdsTrans.addLink(fieldNum(RAssetStandards, AssetId), fieldNum(RAssetTransCorrectiveView, AccountNum));
        qbdsTrans.fetchMode(QueryFetchMode::One2One);
        qbdsTrans.joinMode(JoinMode::InnerJoin);
    
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AssetStandardId)).value(queryValue(assetStandardId));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, AccountingDate)).value(queryRange(_fromDateCalc, _toDateCalc));
        qbdsTrans.addRange(fieldNum(RAssetTransCorrectiveView, ReportingDate)).value(queryRange(dateNull(), _toDateCorr));
    
        qr = new QueryRun(query);
    
        if (qr.next())
        {
            assetTrans = qr.get(tableNum(RAssetTransCorrectiveView));
            correctedPeriodDate = dateEndQtr(assetTrans.ReportingDate);
        }
    
        return correctedPeriodDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>