<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFiscalDocumentLineTax_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class maps information from FiscalDocument Tax tables useful for NF-e.
/// </summary>
class EFiscalDocumentLineTax_BR
{
    TaxBaseCur taxBaseAmount, taxBaseAmountOther, taxSubstTaxBaseAmount, taxBaseAmountExempt;
    TaxAmount taxAmount, taxAmountOther, taxSubstTaxAmount, taxSubstTaxBaseAmountOther, taxSubstTaxAmountOther, taxSubstTaxBaseAmountExempt;
    boolean hasTaxTrans, includedTax, retainedTax;
    TaxationCode_BR taxationCode;
    FITaxationOrigin_BR taxationOrigin;
    TaxValue taxValue, taxReductionPct, taxSubstMarkupPct, taxSubstTaxValue, taxSubstReductionPct;

    FiscalDocumentLine_BR   line;
    TaxType_BR              taxType_BR;
    TaxFiscalValue_BR       fiscalValue;
    TaxExemptCode_BR        exemptCode_BR;
    ICMSDifRecipientTaxAmount   icmsDifRecipientTaxAmount;
    ICMSDifIssuerTaxAmount      icmsDifIssuerTaxAmount;

    TaxPovertyFundPercentage_BR taxPovertyFundPercentage, taxSubstPovertyFundPercentage;
    TaxPovertyFundAmount_BR     taxPovertyFundAmount, taxSubstPovertyFundAmount;
    TaxPovertyFundBaseAmount_BR taxPovertyFundBaseAmount, taxSubstPovertyFundBaseAmount;

    private PresumedTaxAmount_BR        presumedICMSSTTaxAmount;
    private PresumedTaxBaseAmount_BR    presumedICMSSTTaxBaseAmount;
    private PresumedTaxPercentage_BR    presumedICMSSTTaxPercentage;
    private PresumedTaxAmount_BR        presumedICMSTaxAmount;
    private PresumedFCPTaxAmount_BR     presumedFCPSTTaxAmount;
    private PresumedFCPTaxBaseAmount_BR presumedFCPSTTaxBaseAmount;
    private PresumedFCPTaxPercentage_BR presumedFCPSTTaxPercentage;
    private PresumedFCPTaxAmount_BR     presumedFCPTaxAmount;
    private boolean isDualBase;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fiscalValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Fiscal value for current tax / line configuration.
    /// </summary>
    /// <returns>Taxation value.</returns>
    public TaxFiscalValue_BR fiscalValue()
    {
        return fiscalValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>icmsDifIssuerTaxAmount</Name>
				<Source><![CDATA[
    ICMSDifIssuerTaxAmount icmsDifIssuerTaxAmount()
    {
        return icmsDifIssuerTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>icmsDifRecipientTaxAmount</Name>
				<Source><![CDATA[
    ICMSDifRecipientTaxAmount icmsDifRecipientTaxAmount()
    {
        return icmsDifRecipientTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether tax information exists for the given tax / line.
    /// </summary>
    /// <returns>true if tax information exists; false otherwise.</returns>
    public boolean hasTaxTrans()
    {
        return hasTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>benefitCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Benefit code
    /// </summary>
    /// <returns>
    /// The Benefit code
    /// </returns>
    public FBFiscalDocumentTaxAdjustmentCode_BR benefitCode()
    {
        return line.BenefitCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax amount is included in price.
    /// </summary>
    /// <returns>true if tax is included in price; false otherwise.</returns>
    public boolean includedTax()
    {
        return includedTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDualBase</Name>
				<Source><![CDATA[
    public boolean isDualBase()
    {
        return isDualBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPresumedTax</Name>
				<Source><![CDATA[
    private void initPresumedTax(FiscalDocumentLine_BR _fiscalDocumentLine)
    {
        FiscalDocumentTaxTrans_BR         taxTrans;
        FiscalDocumentTaxTransPresumed_BR taxTransPresumedICMS, taxTransPresumedICMSST;
        boolean existPresumedST;
    
        select sum(PresumedTaxAmount), sum(PresumedFCPTaxAmount), sum(PresumedvICMSSubstituto)
            from taxTransPresumedICMS
            group by taxTransPresumedICMS.PresumedTaxPercentage, taxTransPresumedICMS.PresumedFCPTaxPercentage
            exists join taxTrans
                where taxTrans.RecId == taxTransPresumedICMS.FiscalDocumentTaxTrans_BR
                    && taxTrans.Type == TaxType_BR::ICMS
                    && taxTrans.TaxationCode == FiscalBooksConstants_BR::taxationCode60
                    && taxTrans.FiscalDocumentLine == _fiscalDocumentLine.RecId;

        select firstOnly sum(PresumedTaxAmount), sum(PresumedTaxBaseAmount), sum(PresumedFCPTaxAmount), sum(PresumedFCPTaxBaseAmount)
            from taxTransPresumedICMSST
            group by taxTransPresumedICMSST.PresumedTaxPercentage, taxTransPresumedICMSST.PresumedFCPTaxPercentage
            exists join taxTrans
                where taxTrans.RecId == taxTransPresumedICMSST.FiscalDocumentTaxTrans_BR
                    && taxTrans.Type == TaxType_BR::ICMSST
                    && taxTrans.TaxationCode == FiscalBooksConstants_BR::taxationCode60
                    && taxTrans.FiscalDocumentLine == _fiscalDocumentLine.RecId;

        existPresumedST = taxTransPresumedICMSST.PresumedTaxAmount != 0;

        FiscalDocumentTaxTransPresumed_BR taxTransPresumed;

        if (existPresumedST)
        {
            taxTransPresumed.data(taxTransPresumedICMSST);
        }
        else
        {
            taxTransPresumed.data(taxTransPresumedICMS);
        }

        presumedICMSSTTaxAmount =  taxTransPresumed.PresumedTaxAmount;
        presumedICMSSTTaxBaseAmount =  taxTransPresumed.PresumedTaxBaseAmount;
        presumedFCPSTTaxAmount =  taxTransPresumed.PresumedFCPTaxAmount;
        presumedFCPSTTaxBaseAmount =  taxTransPresumed.PresumedFCPTaxBaseAmount;
        presumedICMSSTTaxPercentage =  taxTransPresumed.PresumedTaxPercentage;
        presumedFCPSTTaxPercentage =  taxTransPresumed.PresumedFCPTaxPercentage;
        presumedICMSTaxAmount = taxTransPresumedICMS.PresumedvICMSSubstituto;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPovertyFund</Name>
				<Source><![CDATA[
    private void initTaxPovertyFund(FiscalDocumentLine_BR _fiscalDocumentLine, TaxType_BR _taxType = TaxType_BR::ICMSDiff)
    {
        FiscalDocumentTaxTrans_BR               taxTrans;
        FiscalDocumentTaxTransPovertyFund_BR    taxTransPovertyFund;
    
        select sum(TaxPovertyFundAmount), sum(TaxPovertyFundBaseAmount) from taxTransPovertyFund
            group by taxTransPovertyFund.TaxPovertyFundPercentage
            exists join taxTrans
                where taxTrans.RecId == taxTransPovertyFund.FiscalDocumentTaxTrans_BR
                    &&  taxTrans.Type == _taxType
                    &&  taxTrans.FiscalDocumentLine == _fiscalDocumentLine.RecId;

        if (taxTransPovertyFund)
        {
            taxPovertyFundPercentage    = taxTransPovertyFund.TaxPovertyFundPercentage;
            taxPovertyFundAmount        = taxTransPovertyFund.TaxPovertyFundAmount;
            taxPovertyFundBaseAmount    = taxTransPovertyFund.TaxPovertyFundBaseAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(FiscalDocumentLine_BR _fiscalDocumentLine, TaxType_BR _taxType, str _taxationCodeList = '')
    {
        FiscalDocumentTaxTrans_BR                   taxTrans, taxTransIcmsSt, taxSubstitutionTrans;
        FiscalDocumentTaxTransOutgoingICMSDif_BR    taxTransICMSDif;

        FiscalDocumentTaxTransPovertyFund_BR        taxTransPovertyFund;

        taxType_BR = _taxType;

        select sum(TaxAmount), sum(TaxAmountOther), sum(TaxBaseAmount),sum(TaxBaseAmountOther), sum(TaxBaseAmountExempt), count(recId)
            from taxTrans
            group by TaxReductionPct, TaxationCode, TaxValue, TaxationOrigin, IncludedTax, RetainedTax, FiscalValue, TaxExemptCode
            where taxTrans.Type == _taxType
               && taxTrans.fiscalDocumentLine == _fiscalDocumentLine.RecID;

        if (_taxType == TaxType_BR::ICMS)
        {
            select sum(TaxAmount), sum(TaxAmountOther), sum(TaxBaseAmount), sum(TaxBaseAmountOther), sum(TaxBaseAmountExempt), count(recId)
                from taxSubstitutionTrans
                group by TaxReductionPct, TaxationCode, TaxValue, TaxationOrigin, IncludedTax, RetainedTax, TaxSubstitutionMarkupPct
                where taxSubstitutionTrans.Type == TaxType_BR::ICMSST
                   && taxSubstitutionTrans.fiscalDocumentLine == _fiscalDocumentLine.RecID;
        }

        if (_taxationCodeList)
        {
            while (taxTrans &&
                   strScan(_taxationCodeList, taxTrans.TaxationCode, 1, strLen(_taxationCodeList)) == 0)
            {
                next taxTrans;
            }
        }

        line                    = _fiscalDocumentLine;

        hasTaxTrans             = (taxTrans.RecId != 0 || taxSubstitutionTrans.RecId != 0);
        taxAmount               = taxTrans.TaxAmount;
        taxAmountOther          = taxTrans.TaxAmountOther;
        taxBaseAmount           = taxTrans.TaxBaseAmount;
        taxBaseAmountOther      = taxTrans.TaxBaseAmountOther;
        includedTax             = taxTrans.includedTax;
        retainedTax             = taxTrans.RetainedTax;
        taxationCode            = taxTrans.taxationCode;
        taxationOrigin          = taxTrans.taxationOrigin;
        taxValue                = taxTrans.taxValue;
        taxReductionPct         = taxTrans.TaxReductionPct;
        fiscalValue             = taxTrans.FiscalValue;
        exemptCode_BR           = taxTrans.TaxExemptCode;
        taxBaseAmountExempt     = taxTrans.TaxBaseAmountExempt;

        if (taxSubstitutionTrans.RecId)
        {
            taxationCode               = taxSubstitutionTrans.taxationCode; // Overide the ICMS taxation code
            taxSubstTaxBaseAmount      = taxSubstitutionTrans.TaxBaseAmount;
            taxSubstTaxAmount          = taxSubstitutionTrans.TaxAmount;
            taxSubstTaxAmountOther     = taxSubstitutionTrans.TaxAmountOther;
            taxSubstTaxBaseAmountOther = taxSubstitutionTrans.TaxBaseAmountOther;
            taxSubstTaxBaseAmountExempt = taxSubstitutionTrans.TaxBaseAmountExempt;
            taxSubstMarkupPct          = taxSubstitutionTrans.TaxSubstitutionMarkupPct;
            taxSubstTaxValue           = taxSubstitutionTrans.TaxValue;
            taxSubstReductionPct       = taxSubstitutionTrans.TaxReductionPct;

            select sum(TaxPovertyFundAmount), sum(TaxPovertyFundBaseAmount) from taxTransPovertyFund
                group by taxTransPovertyFund.TaxPovertyFundPercentage
                exists join taxTransIcmsSt
                    where   taxTransIcmsSt.RecId == taxTransPovertyFund.FiscalDocumentTaxTrans_BR
                        &&  taxTransIcmsSt.Type == TaxType_BR::ICMSST
                        &&  taxTransIcmsSt.FiscalDocumentLine == _fiscalDocumentLine.RecId;
            
            taxSubstPovertyFundPercentage   = taxTransPovertyFund.TaxPovertyFundPercentage;
            taxSubstPovertyFundAmount       = taxTransPovertyFund.TaxPovertyFundAmount;
            taxSubstPovertyFundBaseAmount   = taxTransPovertyFund.TaxPovertyFundBaseAmount;
        }

        if (_taxType == TaxType_BR::ICMSDiff)
        {
            select sum(ICMSDifRecipientTaxAmount), sum(ICMSDifIssuerTaxAmount) from taxTransICMSDif
                where taxTransICMSDif.FiscalDocumentLine == _fiscalDocumentLine.RecID;
            icmsDifRecipientTaxAmount = taxTransICMSDif.ICMSDifRecipientTaxAmount;
            icmsDifIssuerTaxAmount = taxTransICMSDif.ICMSDifIssuerTaxAmount;

            if (FeatureStateProvider::isFeatureEnabled(TaxCalculationDualBaseForARFeature_BR::instance()))
            {
                FiscalDocumentTaxTrans_BR fdTaxTrans;

                select firstonly TaxTrans from fdTaxTrans
                    where fdTaxTrans.Type == _taxType
                        && fdTaxTrans.fiscalDocumentLine == _fiscalDocumentLine.RecID;

                isDualBase = TaxTable::find(TaxTrans::findByRecId(fdTaxTrans.TaxTrans).TaxCode).TaxBase == TaxBaseType::PctPerGross;
            }
        }

        this.initTaxPovertyFund(_fiscalDocumentLine, _taxType);

        FiscalEstablishment_BR fiscalEstablishment = FiscalEstablishment_BR::findById(FiscalDocument_BR::find(_fiscalDocumentLine.FiscalDocument).FiscalEstablishment);

        if (BrazilParameters::find().ICMSPresumedTax == NoYes::Yes
            && fiscalEstablishment.checkTechnicalNoteIsEnabled(EFDocConstants_BR::NFeNT2018005v120)
            && taxTrans.TaxationCode == FiscalBooksConstants_BR::taxationCode60
            && taxSubstitutionTrans.TaxationCode == FiscalBooksConstants_BR::taxationCode60)
        {
            this.initPresumedTax(_fiscalDocumentLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedICMSSTTaxAmount</Name>
				<Source><![CDATA[
    public PresumedTaxAmount_BR presumedICMSSTTaxAmount()
    {
        return presumedICMSSTTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedICMSSTTaxBaseAmount</Name>
				<Source><![CDATA[
    public PresumedTaxBaseAmount_BR presumedICMSSTTaxBaseAmount()
    {
        return presumedICMSSTTaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedICMSSTTaxPercentage</Name>
				<Source><![CDATA[
    public PresumedTaxPercentage_BR presumedICMSSTTaxPercentage()
    {
        return presumedICMSSTTaxPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedFCPSTTaxAmount</Name>
				<Source><![CDATA[
    public PresumedFCPTaxAmount_BR presumedFCPSTTaxAmount()
    {
        return presumedFCPSTTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedFCPSTTaxBaseAmount</Name>
				<Source><![CDATA[
    public PresumedFCPTaxBaseAmount_BR presumedFCPSTTaxBaseAmount()
    {
        return presumedFCPSTTaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedFCPSTTaxPercentage</Name>
				<Source><![CDATA[
    public PresumedFCPTaxPercentage_BR presumedFCPSTTaxPercentage()
    {
        return presumedFCPSTTaxPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedICMSTaxAmount</Name>
				<Source><![CDATA[
    public PresumedTaxAmount_BR presumedICMSTaxAmount()
    {
        return presumedICMSTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>presumedFCPTaxAmount</Name>
				<Source><![CDATA[
    public PresumedFCPTaxAmount_BR presumedFCPTaxAmount()
    {
        return presumedFCPTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retainedTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax was retained in purchase and recovered in sales.
    /// </summary>
    /// <returns>true if tax was retained; false otherwise.</returns>
    public boolean retainedTax()
    {
        return retainedTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tax amount for the given configuration.
    /// </summary>
    /// <returns>Tax amount.</returns>
    TaxAmount taxAmount()
    {
        if (taxAmount && taxAmountOther)
        {
            return taxAmount + taxAmountOther;
        }

        if (this.isImporting())
        {
            if (taxType_BR == TaxType_BR::ICMS && this.taxationCode() == '51')
            {
                return taxAmount;
            }

            return (taxAmount ? taxAmount : taxAmountOther);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountFromBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves tax amount exempt.
    /// </summary>
    /// <returns>Tax amount exempt.</returns>
    public TaxBase taxAmountFromBaseAmount()
    {
        return abs((taxBaseAmountOther + taxBaseAmountExempt) * taxvalue / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax amount, other base.
    /// </summary>
    /// <returns>tax amount, other base.</returns>
    TaxAmount taxAmountOther()
    {
        return abs(taxAmountOther);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the taxation code for the given tax / line configuration.
    /// </summary>
    /// <returns>taxation code.</returns>
    TaxationCode_BR taxationCode()
    {
        return taxationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxationOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the taxation origin for the given tax and line configuration.
    /// </summary>
    /// <returns>A single digit string, with '0' for national, '1' for direct import, or '2' for import.</returns>
    str taxationOrigin()
    {
        return taxationCode ? int2str(enum2int(taxationOrigin)) : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves tax base amount.
    /// </summary>
    /// <returns>Tax base amount.</returns>
    TaxBase taxBaseAmount()
    {
        if (this.isImporting())
        {
            if (taxType_BR == TaxType_BR::ICMS && this.taxationCode() == '51')
            {
                return abs(taxBaseAmount);
            }

            return abs(taxBaseAmount) + abs(taxBaseAmountOther);
        }

        return abs(taxBaseAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves tax base amount other.
    /// </summary>
    /// <returns>Tax base amount other.</returns>
    TaxBase taxBaseAmountOther()
    {
        return abs(taxBaseAmountOther);
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the taxation value for current tax / line configuration.
    /// </summary>
    /// <returns>Taxation value.</returns>
    TaxValue taxPct()
    {
        return taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPovertyFundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax poverty fund amount.
    /// </summary>
    /// <returns>
    /// The tax poverty fund amount.
    /// </returns>
    public TaxAmount taxPovertyFundAmount()
    {
        return taxPovertyFundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPovertyFundBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax poverty fund base amount.
    /// </summary>
    /// <returns>
    /// The tax poverty fund base amount.
    /// </returns>
    public TaxPovertyFundBaseAmount_BR taxPovertyFundBaseAmount()
    {
        return taxPovertyFundBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxPovertyFundPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax poverty fund percentage.
    /// </summary>
    /// <returns>
    /// The tax poverty fund percentage.
    /// </returns>
    public TaxValue taxPovertyFundPercentage()
    {
        return taxPovertyFundPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxPovertyFundAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary substitution tax poverty fund amount.
    /// </summary>
    /// <returns>
    /// Tributary substitution tax poverty fund amount.
    /// </returns>
    public TaxPovertyFundAmount_BR tribSubstTaxPovertyFundAmount()
    {
        return taxSubstPovertyFundAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxPovertyFundBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary substitution tax poverty fund base amount.
    /// </summary>
    /// <returns>
    /// Tributary substitution tax poverty fund base amount.
    /// </returns>
    public TaxPovertyFundBaseAmount_BR tribSubstTaxPovertyFundBaseAmount()
    {
        return taxSubstPovertyFundBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxPovertyFundPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary substitution tax poverty fund percentage.
    /// </summary>
    /// <returns>
    /// Tributary substitution tax poverty fund percentage.
    /// </returns>
    public TaxPovertyFundPercentage_BR tribSubstTaxPovertyFundPercentage()
    {
        return taxSubstPovertyFundPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxReductionPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax reduction percentage.
    /// </summary>
    /// <returns>Tax reduction percentage.</returns>
    TaxValue taxReductionPct()
    {
        return taxReductionPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstMarkupPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tributary subsitution markup percentage.
    /// </summary>
    /// <returns>Tributary subsitution markup percentage.</returns>
    TaxValue tribSubstMarkupPct()
    {
        return taxSubstMarkupPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstReductionPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary subsitution reduction base percentage.
    /// </summary>
    /// <returns>
    /// Tributary subsitution reduction base percentage.
    /// </returns>
    TaxValue tribSubstReductionPct()
    {
        return taxSubstReductionPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary subsitution tax amount.
    /// </summary>
    /// <returns>Tributary subsitution tax amount.</returns>
    TaxAmount tribSubstTaxAmount()
    {
        return taxSubstTaxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxAmountFromBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary subsitution exempt tax amount.
    /// </summary>
    /// <returns>Tributary subsitution exempt tax amount.</returns>
    public TaxAmount tribSubstTaxAmountFromBaseAmount()
    {
        return abs((taxSubstTaxBaseAmountOther + taxSubstTaxBaseAmountExempt) * taxSubstTaxValue / 100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxAmountOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary subsitution tax amount.
    /// </summary>
    /// <returns>Tributary subsitution tax amount.</returns>
    TaxAmount tribSubstTaxAmountOther()
    {
        return taxSubstTaxAmountOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary subsitution tax base amount.
    /// </summary>
    /// <returns>Tributary subsitution tax base amount.</returns>
    TaxBase tribSubstTaxBaseAmount()
    {
        return taxSubstTaxBaseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxBaseAmountOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tributary subsitution tax base amount.
    /// </summary>
    /// <returns>Tributary subsitution tax base amount.</returns>
    TaxBase tribSubstTaxBaseAmountOther()
    {
        return taxSubstTaxBaseAmountOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tribSubstTaxPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tributary subsitution taxation value.
    /// </summary>
    /// <returns>Tributary substitution taxation value.</returns>
    TaxValue tribSubstTaxPct()
    {
        return taxSubstTaxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxExemptCode</Name>
				<Source><![CDATA[
    public TaxExemptCode_BR taxExemptCode()
    {
        const TaxExemptCode_BR DefaultExemptCode = '999';
        return exemptCode_BR ? exemptCode_BR : DefaultExemptCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an EFiscalDocumentLineTax_BR object according to the given parameters.
    /// </summary>
    /// <param name="_fiscalDocumentLine">Fiscal document line to retrieve the taxes from</param>
    /// <param name="_taxType">Tax type to be retrieved</param>
    /// <param name="_taxationCodeList">string containing a coma-separated list of taxation codes to be retrieved</param>
    /// <returns>EFiscalDocumentLineTax_BR to map the information from provided parameters.</returns>
    public static EFiscalDocumentLineTax_BR construct(FiscalDocumentLine_BR _fiscalDocumentLine, TaxType_BR _taxType, str _taxationCodeList = '')
    {
        return new EFiscalDocumentLineTax_BR(_fiscalDocumentLine, _taxType, _taxationCodeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImporting</Name>
				<Source><![CDATA[
    internal boolean isImporting()
    {
        return line.fiscalDocument_BR().isImporting();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>