<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkStatusUpdateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>WHSWorkStatusUpdateEventHandler</c> class handles the processing of the <c>WHSWorkStatusUpdateEvent</c>.
/// </summary>
internal class WHSWorkStatusUpdateEventHandler
{
    private WHSWorkTable workTable;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWorkStatusUpdateEventHandler construct()
    {
        return new WHSWorkStatusUpdateEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSWorkStatusUpdateEventHandler</c> class, based on a specific work ID.
    /// </summary>
    /// <param name = "_workId">The current work ID of the <c>WHSWorkTable</c> record for which its work status event will be handle.</param>
    /// <returns>A new instance of the <c>WHSWorkStatusUpdateEventHandler</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkStatusUpdateEventHandler newFromWorkId(WHSWorkId _workId)
    {
        if (!_workId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return WHSWorkStatusUpdateEventHandler::newFromWorkTable(WHSWorkTable::find(_workId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSWorkStatusUpdateEventHandler</c> class, based on the given work table.
    /// </summary>
    /// <param name = "_workTable">The <c>WHSWorkTable</c> record for which its work status event will be handle.</param>
    /// <returns>A new instance of the <c>WHSWorkStatusUpdateEventHandler</c> class.</returns>
    [Hookable(false)]
    internal static WHSWorkStatusUpdateEventHandler newFromWorkTable(WHSWorkTable _workTable)
    {
        if (!_workTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSWorkStatusUpdateEventHandler workStatusUpdateEventHandler = WHSWorkStatusUpdateEventHandler::construct();

        workStatusUpdateEventHandler.parmWorkTable(_workTable);

        return workStatusUpdateEventHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected WHSWorkTable parmWorkTable(WHSWorkTable _workTable = workTable)
    {
        workTable = _workTable;

        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeUpdatesForWorkStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment and load status based on the current work status.
    /// </summary>
    [Hookable(false)]
    internal void executeUpdatesForWorkStatusUpdate()
    {
        this.doExecuteUpdatesForWorkStatusUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doExecuteUpdatesForWorkStatusUpdate</Name>
				<Source><![CDATA[
    private void doExecuteUpdatesForWorkStatusUpdate()
    {
        switch (this.workTable.WorkStatus)
        {
            case WHSWorkStatus::Open:
                this.updateActionsWhenWorkOpen();
                break;

            case WHSWorkStatus::InProcess:
                this.updateActionsWhenWorkInProcess();
                break;

            case WHSWorkStatus::Closed:
                this.updateActionsWhenWorkClosed();
                break;

            case WHSWorkStatus::Cancelled:
                this.updateActionsWhenWorkCancelled();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActionsWhenWorkCancelled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles updates for cancelled work.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateActionsWhenWorkCancelled()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActionsWhenWorkOpen</Name>
				<Source><![CDATA[
    private void updateActionsWhenWorkOpen()
    {
        WHSShipmentTable::updateShipmentStatus(workTable.ShipmentId, WHSShipmentStatus::InProcess);
        WHSLoadTable::updateLoadStatus(workTable.LoadId, WHSLoadStatus::InProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActionsWhenWorkInProcess</Name>
				<Source><![CDATA[
    private void updateActionsWhenWorkInProcess()
    {
        WHSLoadStatusUpdater::newFromLoadId(workTable.LoadId).updateWhenWorkStarted();
        WHSShipmentStatusUpdater::newFromShipmentId(workTable.ShipmentId).updateWhenWorkStarted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActionsWhenWorkClosed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles updates for closed work.
    /// </summary>
    [Replaceable(true)]
    protected void updateActionsWhenWorkClosed()
    {
        if (workTable.WorkTransType == WHSWorkTransType::SortedInventoryPicking)
        {
            workTable.updateLoadStatusForSorting();
        }

        // Don't update status of shipments or loads if the work is of type transferReceipt.
        if (this.workTable.WorkTransType != WHSWorkTransType::TransferReceipt)
        {
            workTable.updateStatusForAllWorkRelatedLoads();

            workTable.updateShipmentStatus();
    
            if (this.workTable.canUpdateWorkForDockInventoryManagement())
            {
                workTable.updateLoadShipStatusForDockInventoryManagement();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>