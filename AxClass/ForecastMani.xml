<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastMani</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ForecastMani extends BudgetManipulation
{
    static private readonly Decimals discPercentDecimals = new DictType(new SysDictField(tableNum(BudgetMap), fieldNum(BudgetMap, DiscPercent)).typeId()).effectivePrecision();


    [FormObservable]
    ForecastManiField           field;
    [FormObservable]
    NoYes                       changeItemId;
    [FormObservable]
    ItemId                      itemId;
    [FormObservable]
    NoYes                       changeConfigId;
    [FormObservable]
    EcoResItemConfigurationName configId;
    [FormObservable]
    NoYes                       changeItemGroupId;
    [FormObservable]
    ItemGroupId                 itemGroupId;

    Object                      dialog;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        Field,
        ChangeItemId,
        ItemId,
        ChangeItemGroupId,
        ItemGroupId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields(BudgetMap _budget)
    {
        super(_budget);

        _budget.ItemId      = changeItemId
            ? itemId
            : _budget.ItemId;
        _budget.ItemGroupId   = changeItemGroupId
            ? itemGroupId
            : _budget.ItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFieldBeChanged</Name>
				<Source><![CDATA[
    boolean mustFieldBeChanged()
    {
        return (field != ForecastManiField::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container  pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeItemGroupId</Name>
				<Source><![CDATA[
    NoYes parmChangeItemGroupId(NoYes selection = changeItemGroupId)
    {
        changeItemGroupId = selection;

        return changeItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeItemId</Name>
				<Source><![CDATA[
    NoYes parmChangeItemId(NoYes selection = changeItemId)
    {
        changeItemId = selection;

        return changeItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmField</Name>
				<Source><![CDATA[
    ForecastManiField parmField(ForecastManiField selection = field)
    {
        field= selection;

        return field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemGroupId</Name>
				<Source><![CDATA[
    ItemGroupId  parmItemGroupId(ItemGroupId selection = itemGroupId)
    {
        itemGroupId = selection;

        return itemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    ItemId parmItemId(ItemId selection = itemId)
    {
        itemId = selection;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    void setField(BudgetMap budget)
    {
        UnitOfMeasureSymbol unitIdInvent;
        super(budget);

        if (! field)
            return;

        switch (field)
        {
            case ForecastManiField::Qty  :
                budget.Qty   = decround(budget.Qty   * factor + constant, UnitOfMeasure::unitOfMeasureDecimalPrecision(
                    UnitOfMeasure::unitOfMeasureIdBySymbol(budget.UnitId)));
                if (budget.ItemId)
                {
                    unitIdInvent = InventTable::find(budget.ItemId).inventUnitId();
                    budget.InventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(budget.ItemId,
                                                                                                             budget.InventDimId,
                                                                                                             budget.Qty,
                                                                                                             budget.UnitId,
                                                                                                             unitIdInvent,
                                                                                                             NoYes::Yes);
                    budget.InventQty = decround(budget.InventQty,InventTable::inventDecimals(budget.ItemId));
                }
                break;
            case ForecastManiField::Price:
                budget.Price= CurrencyExchangeHelper::price(budget.Price * factor + constant, budget.Currency);
                break;
            case ForecastManiField::Markup:
                budget.Markup = CurrencyExchangeHelper::amount(budget.Markup * factor + constant, budget.Currency);
                break;
            case ForecastManiField::DiscPercent :
                budget.DiscPercent  = decround(budget.DiscPercent  * factor + constant, ForecastMani::discPercentDecimals);
                break;
            case ForecastManiField::DiscAmount:
                budget.DiscAmount = CurrencyExchangeHelper::price(budget.DiscAmount * factor + constant, budget.Currency);
                break;
            case ForecastManiField::Amount:
                budget.Amount   = CurrencyExchangeHelper::amount(budget.Amount * factor + constant, budget.Currency);
                break;
        }
        if (field != ForecastManiField::Amount)
            budget.Amount= budget.calcLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean         ret;
        Integer         version     = conpeek(packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object calledFrom = null)
    {
        boolean ok = super();

        switch (administration)
        {
            case BudgetMani::Copying,BudgetMani::UpdateNow:
                if (changeItemId && itemId)
                {
                    ok = InventTable::checkExist(itemId) && ok;
                }
                if (changeItemGroupId && itemGroupId)
                {
                    ok = InventItemGroup::checkExist(itemGroupId) && ok;
                }

                if (field == ForecastManiField::Qty && factor < 0)
                {
                    ok = checkFailed("@SYS50502");
                }
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>