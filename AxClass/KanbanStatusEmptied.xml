<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanStatusEmptied</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanStatusEmptied</c> class performs operations for kanbans that are in the Emptied state.
/// </summary>
public class KanbanStatusEmptied extends KanbanStatus
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a kanban with status <c>LeanKanbanStatus::Emptied</c> can be deleted.
    /// </summary>
    /// <returns>
    /// True, if no physically updated transactions remain, otherwise false;
    /// </returns>
    public boolean canDelete()
    {
        if (KanbanStatusEmptiedFailDeleteDeductedFlight::instance().isEnabled() &&
            InventTransIdSum::newTransOriginId(kanban.InventTransOriginId()).physicalInventNotFinancial())
        {        
            return checkFailed(strfmt("@SYS19413", StatusIssue::Deducted));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a kanban can have received quantity.
    /// </summary>
    /// <returns>
    ///    true if the kanban can have received quantity; otherwise, false.
    /// </returns>
    public boolean canHaveReceivedQty()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minStatusTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the minimum transaction date for a status change.
    /// </summary>
    /// <returns>
    ///    The minimum transaction date.
    /// </returns>
    public TransDate minStatusTransactionDate()
    {
        // may be set when status is reverted
        TransDate transDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(
                                                                      kanban.EmptiedDateTime,
                                                                      DateTimeUtil::getCompanyTimeZone()));
        transDate           = max(transDate,super());
        transDate           = max(transDate,kanban.maxInventTransDate());

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanStatus construct()
    {
        return new KanbanStatusEmptied();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>