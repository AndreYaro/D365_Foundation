<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckUnPost_Bonus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class for bonus journals unposting.
/// </summary>
class RhrmJournalCheckUnPost_Bonus extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDeletePayTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if payroll lines can be deleted.
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The payroll journal.
    /// </param>
    /// <returns>
    /// True if payroll lines can be deleted.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canDeletePayTrans(RPayJournalTable _rPayJournalTable)
    {
        boolean ret = true;
        RPayJournalTrans rPayJournalTrans;

        while select TransDate, TransType, Number from rPayJournalTrans
            where rPayJournalTrans.JournalId == _rPayJournalTable.JournalId
        {
            ret = ret && endmth(rPayJournalTrans.TransDate) >= RPayParameters::payPeriod(
                                                                rPayJournalTrans.TransType == RPayTypeString::Employee ?
                                                                rPayJournalTrans.Number :
                                                                '');
            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;
        RPayJournalTable rPayJournalTable;
        RHRMOrderTable   orderTable;

        ret = super(_journalTransList);

        orderTable = RHRMOrderTable::findJournal(journalTableData.journalTable().JournalId);
        rPayJournalTable = RPayJournalTable::find(orderTable.PayJournalNum);

        if (rPayJournalTable)
        {
            if (journalCheckPostType == JournalCheckPostType::Post)
            {
                if (Box::yesNo(strFmt("@RUP6041", rPayJournalTable.JournalId),
                    DialogButton::No) == DialogButton::No)
                {
                    ret = false;
                }
            }
            else
            {
                info(strFmt("@RUP6042", rPayJournalTable.JournalId));
            }

            if (ret)
            {
                if (rPayJournalTable.Posted)
                {
                    ret = this.checkUnPostPayJournal(rPayJournalTable);
                }

                if (this.canDeletePayTrans(rPayJournalTable))
                {
                    ret = ret && this.validateDeletePayJournalTrans(rPayJournalTable);
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnPostPayJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if journal can be unposted.
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The payroll journal table record.
    /// </param>
    /// <returns>
    /// True if journal can be unposted.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkUnPostPayJournal(RPayJournalTable _rPayJournalTable)
    {
        boolean ret;
        RPayJournalCheckUnPost        journalCheckPost;

        journalCheckPost = this.getPayJournalCheckUnPost(_rPayJournalTable);

        journalCheckPost.parmJournalCheckPostType(JournalCheckPostType::Check);
        journalCheckPost.runOperation();

        ret = (journalCheckPost.journalErrorListCount() == 0 && journalCheckPost.parmCheckJournalResult());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePayJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes payroll journal lines.
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The payroll journal.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void deletePayJournalTrans(RPayJournalTable _rPayJournalTable)
    {
        RPayJournalTrans rPayJournalTrans;

        delete_from rPayJournalTrans
            where rPayJournalTrans.JournalId == _rPayJournalTable.JournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayJournalCheckUnPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base class <c>RPayJournalCheckUnPost</c> instance associated with payroll journal.
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The payroll journal.
    /// </param>
    /// <returns>
    /// The <c>RPayJournalCheckUnPost</c> class instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RPayJournalCheckUnPost getPayJournalCheckUnPost(RPayJournalTable _rPayJournalTable)
    {
        RPayJournalCheckUnPost        journalCheckPost;

        journalCheckPost = RPayJournalCheckUnPost::construct(_rPayJournalTable);
        journalCheckPost.getLast();

        journalCheckPost.parmAutoBlock(false);
        journalCheckPost.parmShowInfoResult(true);
        journalCheckPost.parmJournalTableId(_rPayJournalTable.TableId);
        journalCheckPost.parmJournalId(_rPayJournalTable.JournalId);

        return journalCheckPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post the journal.
    /// </summary>
    /// <param name="_journalTransList">
    /// The list of lines to be posted.
    /// </param>
    protected void postJournal(JournalTransList _journalTransList)
    {
        RPayJournalTable rPayJournalTable;

        void updatePayJournal(RPayJournalTable _rPayJournalTable)
        {
            RPayJournalTable rPayJournalTableUpdate;

            if (_rPayJournalTable.Posted)
            {
                this.unPostPayJournal(_rPayJournalTable);
                journalTableData.journalTable().reread();
            }

            if (this.canDeletePayTrans(_rPayJournalTable))
            {
                rPayJournalTableUpdate = RPayJournalTable::find(_rPayJournalTable.JournalId, true);
                this.deletePayJournalTrans(rPayJournalTableUpdate);
                rPayJournalTableUpdate.RHRMOrderTable = 0;

                JournalTableData::newTable(rPayJournalTableUpdate).initTotal();
                rPayJournalTableUpdate.update();
            }
        }

        super(_journalTransList);

        while select rPayJournalTable
            where rPayJournalTable.RHRMOrderTable   == journalTableData.journalTable().RecId &&
                  rPayJournalTable.Posted           == NoYes::No
        {
            updatePayJournal(rPayJournalTable);
        }

        rPayJournalTable = RPayJournalTable::find(RHRMOrderTable::findJournal(journalTableData.journalTable().JournalId).PayJournalNum);

        if (rPayJournalTable)
        {
            updatePayJournal(rPayJournalTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPostPayJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unposts the journal/
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The list of lines to be unposted.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void unPostPayJournal(RPayJournalTable _rPayJournalTable)
    {
        RPayJournalCheckUnPost        journalCheckPost;

        journalCheckPost = this.getPayJournalCheckUnPost(_rPayJournalTable);

        journalCheckPost.parmJournalCheckPostType(JournalCheckPostType::Post);

        journalCheckPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDeletePayJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates payroll journal lines are valid for deletion.
    /// </summary>
    /// <param name="_rPayJournalTable">
    /// The payroll journal.
    /// </param>
    /// <returns>
    /// True if all journal lines are valid for deletion, otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean validateDeletePayJournalTrans(RPayJournalTable _rPayJournalTable)
    {
        boolean ret = true;
        RPayJournalTrans rPayJournalTrans;

        while select rPayJournalTrans
            where rPayJournalTrans.JournalId == _rPayJournalTable.JournalId
        {
            ret = rPayJournalTrans.validateDelete() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>