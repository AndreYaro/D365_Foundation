<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollTaxTypeInitialization</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollTaxTypeInitialization</c> class initializes all the default payroll tax type information.
/// </summary>
public class PayrollTaxTypeInitialization
{
    #PayrollConstants
    #ISOCountryRegionCodes

    System.Int16                                numCityExemptions;

    InteropPermission                           permission;
    PayrollPayStatement                         payStatement;
    PayrollPaymDate                             paymentDate;
    PayrollPayPeriod                            payPeriod;
    PeriodEnd                                   payPeriodEndDate;
    HcmWorker                                   hcmWorker;
    LogisticsAddressCountryRegionId             countryRegionId;
    PayrollWorkerTaxRegion                      workerTaxRegionUsedByResidency;
    RecId                                       currLE;
    str                                         residentTaxLocation;
    boolean                                     isEmployeeRRTAExempt;
    boolean                                     isEmployerRRTAExempt;
    boolean                                     isRRTAEnabled;

    // Reflection types for future tax engine calls
    System.Type                                 steType;
    int                                         invokeMethodFlag,
                                                instanceFlag,
                                                publicFlag,
                                                combinedFlag;
    System.Reflection.BindingFlags              methodBindingFlags;
    System.Reflection.Binder                    binder;
    System.String                               nullString;
    System.Object[]                             params;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadRRTAExemptionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether employer/employee RRTA or FICA should be calculated for the current pay statement.
    /// </summary>
    private void loadRRTAExemptionStatus()
    {
        isEmployeeRRTAExempt = this.isEmployeeExemptFromRRTA();
        isEmployerRRTAExempt = this.isEmployerExemptFromRRTA();
        isRRTAEnabled = this.isRRTAEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmployeeExemptFromRRTA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current employee is exempt from RRTA.
    /// </summary>
    /// <returns>
    /// isExempt status
    /// </returns>
    private boolean isEmployeeExemptFromRRTA()
    {
        boolean isExempt = true;

        //
        // If either tier of employee RRTA is marked as being non-exempt, then
        // we will calculate employee RRTA and not calculate FICA.
        //
        PayrollWorkerTaxCode workerTaxCode = this.getPayrollWorkerTaxCodeOfType(PayrollTaxCodeType::RRTA1);

        // Check if worker is exempt from tier 1
        if (workerTaxCode.RecId)
        {
            isExempt = workerTaxCode.isExempt(paymentDate);
        }

        // If worker is exempt from tier 1, check if worker is also exempt from tier 2
        if (isExempt)
        {
            workerTaxCode = this.getPayrollWorkerTaxCodeOfType(PayrollTaxCodeType::RRTA2);

            if (workerTaxCode.RecId)
            {
                isExempt = workerTaxCode.isExempt(paymentDate);
            }
        }

        return isExempt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEmployerExemptFromRRTA</Name>
				<Source><![CDATA[
    private boolean isEmployerExemptFromRRTA()
    {
        boolean isExempt = true;

        //
        // If either tier of employer RRTA is marked as being non-exempt, then
        // we will calculate employer RRTA and not calculate FICA.
        //
        PayrollWorkerTaxCode workerTaxCode = this.getPayrollWorkerTaxCodeOfType(PayrollTaxCodeType::ER_RRTA1);

        // Check if employer is exempt from tier 1
        if (workerTaxCode.RecId)
        {
            isExempt = workerTaxCode.isExempt(paymentDate);
        }

        // If employer is exempt from tier 1, check if employer is also exempt from tier 2
        if (isExempt)
        {
            workerTaxCode = this.getPayrollWorkerTaxCodeOfType(PayrollTaxCodeType::ER_RRTA2);

            if (workerTaxCode.RecId)
            {
                isExempt = workerTaxCode.isExempt(paymentDate);
            }
        }

        return isExempt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRRTAEnabled</Name>
				<Source><![CDATA[
    private boolean isRRTAEnabled()
    {
        boolean isEnabled = false;

        //
        // RRTA taxes are enabled if both of the following two conditions are met:
        // 1. Either the employee or the employer are not exempt from RRTA taxes
        // 2. Railroad taxes are enabled
        //
        if (!isEmployeeRRTAExempt || !isEmployerRRTAExempt)
        {
            HcmSharedParameters parameters = HcmSharedParameters::find();
            isEnabled = parameters.EnableRailroadTaxes;
        }

        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollWorkerTaxCodeOfType</Name>
				<Source><![CDATA[
    private PayrollWorkerTaxCode getPayrollWorkerTaxCodeOfType(PayrollTaxCodeType _type)
    {
        PayrollTaxCode taxCode;
        PayrollWorkerTaxCode workerTaxCode;

        select * from workerTaxCode
            where workerTaxCode.Worker == payStatement.Worker
            join RecId from taxCode
                where taxCode.RecId == workerTaxCode.PayrollTaxCode
                && TaxCode.CountryRegionId == countryRegionId
                && taxCode.Type == _type;

        return workerTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustStateLocationCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adjusts the state GNIS location code to be properly formatted for exceptions such as Maryland
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <returns>
    ///     A formatted GNIS location.
    /// </returns>
    private PayrollGNIS adjustStateLocationCode(PayrollGNIS _locationCode)
    {
        str                         currentLocationStateCode;
        PayrollGNIS                 locationCode;
        boolean                     isResidentLocation;

        currentLocationStateCode = PayrollTaxEngineUtil::getTaxCodeSegment(_locationCode, PayrollTaxCodeSegment::State);

        // Determine if the current location state is the worker's resident state
        isResidentLocation = currentLocationStateCode == PayrollTaxEngineUtil::getTaxCodeSegment(residentTaxLocation, PayrollTaxCodeSegment::State);

        if (str2int(currentLocationStateCode) == PayrollUSState::MD && isResidentLocation)
        {
            // If the current location is Maryland and the worker is a Maryland resident, then we need to use that location code for state tax methods
            locationCode = residentTaxLocation;
        }
        else
        {
            // No GNIS adjustment necessary
            locationCode = _locationCode;
        }

        return locationCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResidentTaxLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the worker's resident tax region.
    /// </summary>
    /// <returns>
    ///     The the residentTaxRegion value.
    /// </returns>
    public str getResidentTaxLocation()
    {
        return residentTaxLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerTaxRegionForSymmetryForTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the first <c>PayrollWorkerTaxRegionForSymmetry</c> record that is applicable
    ///     to the specific tax code for the current worker.
    /// </summary>
    /// <param name="_taxCodeId">
    ///     Specifies the Symmetry tax code identifier used to match up to a <c>PayrollWorkerTaxRegionForSymmetry</c> record.
    /// </param>
    /// <returns>
    ///     A <c>PayrollWorkerTaxRegionForSymmetry</c> record that is applicable to the specific tax code.
    /// </returns>
    private PayrollWorkerTaxRegionForSymmetry getWorkerTaxRegionForSymmetryForTaxCode(PayrollTaxCodeId _taxCodeId)
    {
        PayrollTaxRegionForSymmetry                 taxRegionSym;
        PayrollWorkerTaxRegion                      workerTaxRegion;
        PayrollWorkerTaxRegionForSymmetry           workerTaxRegionSym;
        System.Collections.ArrayList                taxList;
        System.Collections.IEnumerator              taxListIter;
        System.Int16                                zeroInt16 = 0;
        str                                         taxCodeId;
        boolean                                     isMatchFound;

        permission.assert();
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs an instance of the PayrollTaxTypeInitialization initialized with a specific instance of the tax engine.
    /// </summary>
    /// <param name="_payStatement">
    ///     Specifies the record ID of pay statement.
    /// </param>
    protected void new(PayrollPayStatement _payStatement)
    {
        PayrollWorkerResidentTaxRegion      workerResidentTaxRegion;
        payStatement    = _payStatement;
        paymentDate     = _payStatement.PaymentDate;
        payPeriod        = PayrollPayPeriod::find(_payStatement.PayPeriod);
        payPeriodEndDate = payPeriod.PeriodEndDate;

        workerResidentTaxRegion = PayrollWorkerResidentTaxRegion::findByWorker(_payStatement.Worker, paymentDate);

        workerTaxRegionUsedByResidency = PayrollWorkerTaxRegion::find(workerResidentTaxRegion.WorkerTaxRegion);
        residentTaxLocation = PayrollTaxRegionForSymmetry::findByTaxRegion(workerTaxRegionUsedByResidency.TaxRegion).gnis;

        hcmWorker       = HcmWorker::find(_payStatement.Worker);
        countryRegionId = LogisticsAddressCountryRegion::findByISOCode(#isoUS).CountryRegionId;
        currLE          = CompanyInfo::current();
    
        this.loadRRTAExemptionStatus();

        // Initialize the types needed for calls to the tax engine via .Net Reflection when new APIs are introduced
        binder = null;
        nullString = null;
        params = null;
        methodBindingFlags = System.Reflection.BindingFlags::Default;
        invokeMethodFlag = CLRInterop::getAnyTypeForObject(System.Reflection.BindingFlags::InvokeMethod);
        instanceFlag = CLRInterop::getAnyTypeForObject(System.Reflection.BindingFlags::Instance);
        publicFlag = CLRInterop::getAnyTypeForObject(System.Reflection.BindingFlags::Public);
        combinedFlag = invokeMethodFlag | instanceFlag | publicFlag;
        methodBindingFlags = System.Enum::ToObject(methodBindingFlags.GetType(), combinedFlag);

        permission = new InteropPermission(InteropKind::ClrInterop);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerRUIA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the employer Railroad Unemployment Insurance Authority
    ///     tax processing.
    /// </summary>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     The buffer of the tax code detail.
    /// </param>
    public void setEmployerRUIA(boolean _isExempt, PayrollTaxCodeDetail _detail)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for City tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResident">
    ///     Specifies if it is a resident.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     Specifies the record ID of the worker tax code.
    /// </param>
    /// <param name="_method">
    ///     Specifies the method modifier value.
    /// </param>
    public void setCity(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResident,
        PayrollWorkerTaxCode    _workerTaxCode,
        PayrollMethodModifier   _method)
    {
      
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCounty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for County tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCounty">
    ///     Specifies if it is a resident county.
    /// </param>
    public void setCounty(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResidentCounty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEIT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Earned Income tax processing.
    /// </summary>
    /// <param name="_taxCodeId">
    ///     Specifies the Symmetry tax code being processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCity">
    ///     Specifies if it is a resident city.
    /// </param>
    public void setEIT(
        PayrollTaxCodeId                    _taxCodeId,
        boolean                             _isExempt,
        boolean                             _isResidentCity)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerFUTA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the employer Federal Unemployment tax processing.
    /// </summary>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of tax code detail.
    /// </param>
    public void setEmployerFUTA(boolean _isExempt, PayrollTaxCodeDetail _detail)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerSDI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the State Disability Insurance tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of tax code detail.
    /// </param>
    /// <param name="_method">
    ///     Specifies the method modifier value.
    /// </param>
    /// <param name="_sutaState">
    ///     Specifies the sutaState value.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setEmployerSDI(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        PayrollMethodModifier   _method,
        str                     _sutaState,
        Amount                  _taxTotalYtd)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerSDIWashington</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the employer Washington Industrial Insurance tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     The <c>PayrollWorkerTaxCode</c> record containing the SDI tax rate.
    /// </param>
    /// <param name="_productiveHours">
    ///     The productive hours the worker has worked in Washington.
    /// </param>
    public void setEmployerSDIWashington(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollWorkerTaxCode    _workerTaxCode,
        Amount                  _productiveHours = 0.0)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerSUTA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for employer State Unemployment tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of tax code detail.
    /// </param>
    public void setEmployerSUTA(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerTransit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the employer Oregon Transit tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_taxCode">
    ///     Specifies the tax code.
    /// </param>
    public void setEmployerTransit(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeId        _taxCode)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerUHI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the employer Massachusetts Unemployment Health
    ///     Insurance tax processing.
    /// </summary>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of the tax code detail.
    /// </param>
    /// <param name="_sutaState">
    ///     Specifies the suta state.
    /// </param>
    /// <remarks>
    ///     Currently only Massachusetts has a UHI tax.
    /// </remarks>
    public void setEmployerUHI(
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        str                     _sutaState)
    {
        PayrollPayStatement         payStmt;
        PayrollUSState              usState;
        int                         enumVal;
        PayrollUSTaxTransactionHistory  usTaxTransactionHistory;

        permission.assert();

        enumVal = str2enum(usState, _sutaState);

        if (_sutaState == #MA)
        {
            // Calculate the amount of wages taxed for Massachussets YTD
            select sum(SubjectWages) from usTaxTransactionHistory
                where usTaxTransactionHistory.TaxCode == _detail.PayrollTaxCode
                && usTaxTransactionHistory.PersonnelNumber == hcmWorker.PersonnelNumber
                && usTaxTransactionHistory.TaxationState == enumVal
                    exists join RecId from payStmt
                        where payStmt.RecId == usTaxTransactionHistory.PayStatement
                        && payStmt.PaymentDate >= DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), paymentDate)
                        && payStmt.PaymentDate <= DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), paymentDate);
        }

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerWC</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for the employer worker's compensation tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of the tax code detail.
    /// </param>
    public void setEmployerWC(PayrollGNIS _locationCode, boolean _isExempt, PayrollTaxCodeDetail _detail)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStateMiscellaneousParametersForWorkerTaxCode</Name>
				<Source><![CDATA[
    internal void setStateMiscellaneousParametersForWorkerTaxCode(
        PayrollGNIS _locationCode,
        PayrollWorkerTaxCode _workerTaxCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerEMACS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the parameters for the Massachusetts Employer Medical Assistance Contribution Supplement tax
    /// </summary>
    /// <param name="_locationCode">
    /// Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    /// Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    /// The <c>PayrollTaxCodeDetail</c> record containing the wage base and rate.
    /// </param>
    /// <param name="_taxTotalYtd">
    /// The total year to date tax amount.
    /// </param>
    public void setEmployerEMACS(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        Amount                  _taxTotalYtd)
    {
        //
        // Define a default number of employees that is greater than the 5 required for this tax to be applicable.
        // This gives the customer the ability to exempt employees if this tax is not applicable.
        //
        #Define.DefaultNumberOfEmployees(100)
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerECET</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the parameters for Employer Expense Compensation taxes.
    /// </summary>
    /// <param name="_locationCode">
    /// Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_detail">
    /// The <c>PayrollTaxCodeDetail</c> record containing the wage base and rate.
    /// </param>
    /// <param name="_taxTotalYtd">
    /// The total year to date tax amount.
    /// </param>
    /// <param name="_isExempt">
    /// Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    internal void setEmployerECET(
        PayrollGNIS             _locationCode,
        PayrollTaxCodeDetail    _detail,
        Amount                  _taxTotalYtd,
        boolean                 _isExempt
    )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEmployerFLI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies parameters for Family Leave Insurance tax processing.
    /// </summary>
    /// <param name="_locationCode">
    /// Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    /// Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    /// The <c>PayrollTaxCodeDetail</c> record containing the wage base and rate.
    /// </param>
    /// <param name="_taxTotalYtd">
    /// The total year to date tax amount.
    /// </param>
    internal void setEmployerFLI(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        Amount                  _taxTotalYtd
    )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWashingtonPMFL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets family and medical leave insurance parameters for Washington state tax regions.
    /// </summary>
    /// <param name = "_employerWorkerTaxCodeDetail">
    /// The <c>PayrollTaxCodeDetail</c> record containing the wage base and rate.
    /// </param>
    /// <param name = "_employerTaxTotalYtd">
    /// The total year to date tax amount.
    /// </param>
    /// <param name = "_isEmployerExempt">
    /// Specifies if the employer is exempt from tax calculation.
    /// </param>
    internal void setWashingtonPMFL(
        PayrollTaxCodeDetail _employerWorkerTaxCodeDetail,
        Amount _employerTaxTotalYtd,
        boolean _isEmployerExempt)
    {
        //
        // Define a default number of employees that is greater than the 50 necessary for employer withholding to be
        // applicable. If an employer has less than 50 employees, they can set exemptions to avoid tax calculation.
        //
        const int DefaultNumberOfEmployees = 100;
        const str WashingtionFLIMethodName = 'setWashingtonPFML';

        permission.assert();

        // Find the employee WA FLI worker tax code
        PayrollWorkerTaxCode workerTaxCodeForEmployeeWashingtonFLI = this.getWorkerTaxCodeByWorkerTypeAndState(
            payStatement.Worker,
            PayrollTaxCodeType::FLI,
            PayrollUSState::WA
        );

        boolean isWorkerExemptFromEmployeeFLI = workerTaxCodeForEmployeeWashingtonFLI.isExempt(paymentDate);

        Amount ytdTotalTaxWithholdingForWashingtonFLI = _employerTaxTotalYtd;

        // The tax engine expects YTD tax withholdings for both employee and employer portions of the tax,
        // so if the employee is not exempt from paying the tax the YTD employee withholdings will need to be
        // calculated and added to the employer YTD withholdings
        if (!isWorkerExemptFromEmployeeFLI)
        {
            // Calculate the YTD withholdings for the employee portion of the WA FLI tax
            Amount ytdTaxWithholdingForEmployeeWashingtonFLI = PayrollPayStatementTotals::calcTaxCodeTotalForCurrentYear(
                payStatement.RecId,
                workerTaxCodeForEmployeeWashingtonFLI.PayrollTaxCode,
                payStatement.Worker,
                paymentDate
            );

            // Add the employee YTD withholdings to the already calculated employer YTD withholdings
            ytdTotalTaxWithholdingForWashingtonFLI += ytdTaxWithholdingForEmployeeWashingtonFLI;
        }

        // Setting the exemption flag to true in the below call to the tax engine will exempt both employer and employee
        // from paying the tax. In order to allow for only exempting the employer, the number of employees specified to the
        // tax engine should be updated to a value less than 50 when the user has elected to exempt the employer.
        // This only prevents the employer side of the tax from calculating.
        int numberOfEmployees = _isEmployerExempt ? 0 : DefaultNumberOfEmployees;

        // Initializing the array of parameter values to pass into the method invocation
        params = new System.Object[7]();
        params.SetValue(numberOfEmployees, 0); // Number of employees
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMassachusettsPFML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets family and medical leave insurance parameters for Massachusetts state tax regions.
    /// </summary>
    /// <param name = "_employerWorkerTaxCodeDetail">
    /// The <c>PayrollTaxCodeDetail</c> record containing the wage base and rate
    /// </param>
    /// <param name = "_workerTaxCode">
    /// The worker tax code for family medical leave insurance.
    /// </param>
    /// <param name = "_employerTaxTotalYtd">
    /// Total year to date tax withholding for the employer portion of the tax.
    /// </param>
    /// <param name = "_isEmployerExempt">
    /// Specifies if the employer is exempt from family and medical leave tax contributions. 
    /// </param>
    internal void setMassachusettsPFML(
        PayrollTaxCodeDetail _employerWorkerTaxCodeDetail,
        PayrollWorkerTaxCode _workerTaxCode,
        Amount _employerTaxTotalYtd,
        boolean _isEmployerExempt)
    {
        const str MassachussetsEmployerFamilyLeaveRateParameterName = 'EMPLOYER_FAMILY_PERCENTAGE';
        const str MassachussetsEmployerMedicalLeaveRateParameterName = 'EMPLOYER_MEDICAL_PERCENTAGE';

        //
        // Define a default number of employees that is greater than the 25 necessary for employer withholding to be
        // applicable. If an employer has less than 25 employees, they can set exemptions to avoid tax calculation.
        //
        const int DefaultNumberOfEmployees = 50;
        const str MassachusettsFLIMethodName = 'setMassachusettsPFML';

        permission.assert();

        // Setting the exemption flag to true in the below call to the tax engine will exempt both employer and employee
        // from paying the tax. In order to allow for only exempting the employer, the number of employees specified to the
        // tax engine should be updated to a value less than 25 when the user has elected to exempt the employer.
        // Depending on employer contribution rates, this may prevent any employer tax from being taken out.
        int numberOfEmployees = _isEmployerExempt ? 0 : DefaultNumberOfEmployees;

        // Find the employee MA FLI worker tax code
        PayrollWorkerTaxCode workerTaxCodeForEmployeeMassachusettsFLI = this.getWorkerTaxCodeByWorkerTypeAndState(
            payStatement.Worker,
            PayrollTaxCodeType::FLI,
            PayrollUSState::MA
        );

        Amount ytdTotalTaxWithholdingForMassachusettsFLI = _employerTaxTotalYtd;

        boolean isWorkerExemptFromEmployeeFLI = workerTaxCodeForEmployeeMassachusettsFLI.isExempt(paymentDate);

        // The tax engine expects YTD tax withholdings for both employee and employer portions of the tax,
        // so if the employee is not exempt from paying the tax the YTD employee withholdings will need to be
        // calculated and added to the employer YTD withholdings
        if (!isWorkerExemptFromEmployeeFLI)
        {
            // Calculate the YTD withholdings for the employee portion of the MA FLI tax
            Amount ytdTaxWithholdingForEmployeeMassachusettsFLI = PayrollPayStatementTotals::calcTaxCodeTotalForCurrentYear(
                payStatement.RecId,
                workerTaxCodeForEmployeeMassachusettsFLI.PayrollTaxCode,
                payStatement.Worker,
                paymentDate
            );

            // Add the employee YTD withholdings to the already calculated employer YTD withholdings
            ytdTotalTaxWithholdingForMassachusettsFLI += ytdTaxWithholdingForEmployeeMassachusettsFLI;
        }

        //// Employers can elect to cover a certain percentage of the employee portion of each tax
       
        // Initializing the array of parameter values to pass into the method invocation
        params = new System.Object[8]();
        params.SetValue(numberOfEmployees, 0); // Number of employees
        params.SetValue(0, 1); // Number of 1099 workers
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkerTaxCodeByWorkerTypeAndState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a <c>PayrollWorkerTaxCode</c> for a given worker, tax code type, and tax code state combination.
    /// </summary>
    /// <param name = "_worker">The worker.</param>
    /// <param name = "_taxCodeType">The type of worker tax code to target.</param>
    /// <param name = "_state">The state to which the worker tax code should belong.</param>
    /// <returns>A <c>PayrollWorkerTaxCode</c> record.</returns>
    private PayrollWorkerTaxCode getWorkerTaxCodeByWorkerTypeAndState(
        HcmWorkerRecId _worker,
        PayrollTaxCodeType _taxCodeType,
        PayrollUSState _state)
    {
        PayrollTaxCode taxCode;
        PayrollWorkerTaxCode workerTaxCode;
        PayrollTaxEngineTaxCodeForSymmetry symmetryTaxCode;

        while select workerTaxCode
            join Type, RecId from taxCode
                where workerTaxCode.PayrollTaxCode == taxCode.RecId
                   && workerTaxCode.Worker == _worker
            join Code, PayrollTaxCode, RecId from symmetryTaxCode
                where taxCode.RecId == symmetryTaxCode.PayrollTaxCode
                   && taxCode.Type == _taxCodeType
        {
            int taxCodeState = str2int(PayrollTaxEngineUtil::getTaxCodeSegment(symmetryTaxCode.Code, PayrollTaxCodeSegment::State));

            if (taxCodeState == _state)
            {
                break;
            }
        }

        return workerTaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEMST</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for PA EMST tax processing
    /// </summary>
    /// <param name="_taxCodeId">
    ///     Specifies the Symmetry tax code being processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCity">
    ///     Specifies if it is a resident city.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setEMST(
        PayrollTaxCodeId                    _taxCodeId,
        boolean                             _isExempt,
        boolean                             _isResidentCity,
        Amount                              _taxTotalYtd)
    {
        PayrollWorkerTaxRegionForSymmetry   workerTaxRegionSym;
        PayrollTaxRegionForSymmetry         taxRegionSym;

        permission.assert();

        // Find a tax region that is applicable to the current tax code.
        workerTaxRegionSym = this.getWorkerTaxRegionForSymmetryForTaxCode(_taxCodeId);

        // Get the actual GNIS code for the worker tax region so that the tax will calculate properly
        taxRegionSym = PayrollTaxRegionForSymmetry::findByTaxRegion(PayrollWorkerTaxRegion::find(workerTaxRegionSym.WorkerTaxRegion).TaxRegion);

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFICA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for FICA (Social Security) tax processing
    /// </summary>
    /// <param name="_isEmployeeExempt">
    ///     Specifies if the employee is exempt from the tax calculation.
    /// </param>
    public void setFICA(boolean _isEmployeeExempt)
    {
        PayrollWorkerTaxCode        workerTaxCodeEmployerFICA;
        boolean                     isEmployerFICAExempt;

        permission.assert();

        if (isRRTAEnabled)
        {
            // RRTA is a replacement for FICA, so don't continue
            return;
        }

        PayrollTaxCode employeeFICA = PayrollTaxCode::findByCodeCountryRegion(#EMPLOYEEFICA, countryRegionId);
        PayrollTaxCode employerFICA = PayrollTaxCode::findByCodeCountryRegion(#EMPLOYERFICACODE, countryRegionId);

        PayrollTaxEngineTaxCode employeeTaxEngineTaxCodeFICA = PayrollTaxEngineTaxCode::findByPayrollTaxCode(employeeFICA.RecId);
        PayrollTaxEngineTaxCode employerTaxEngineCodeFICA = PayrollTaxEngineTaxCode::findByPayrollTaxCode(employerFICA.RecId);

        PayrollTaxEngineTaxCodeForSymmetry employeeSymmetryTaxCodeFICA = 
            PayrollTaxEngineTaxCodeForSymmetry::find(employeeTaxEngineTaxCodeFICA.RecId);

        PayrollTaxEngineTaxCodeForSymmetry employerSymmetryTaxCodeFICA =
            PayrollTaxEngineTaxCodeForSymmetry::find(employerTaxEngineCodeFICA.RecId);

        workerTaxCodeEmployerFICA = PayrollWorkerTaxCode::findByTaxCodeWorker(employerFICA.RecId, payStatement.Worker);

        isEmployerFICAExempt = workerTaxCodeEmployerFICA.isExempt(paymentDate);

        // Set employee FICA parameters
        this.setJurisdictionData(employeeSymmetryTaxCodeFICA.Code, #FEDERALLOCATIONCODE, _isEmployeeExempt, true, true);

        // Set employee FICA parameters
        this.setJurisdictionData(employerSymmetryTaxCodeFICA.Code, #FEDERALLOCATIONCODE, isEmployerFICAExempt, true, true);

        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFIT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Federal Income Tax processing.
    /// </summary>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     Specifies the record ID of the worker tax code.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     An error is thrown if the federal filing status has not been
    ///     specified for the worker.
    /// </exception>
    public void setFIT(boolean _isExempt, PayrollWorkerTaxCode _workerTaxCode)
    {
        System.Int16                            numFedAllowances;

        permission.assert();

        numFedAllowances = str2int(_workerTaxCode.getValueForParameter(#TOTALALLOWANCES, paymentDate));
      
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFLI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for New Jersey Family Leave Insurance tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of tax code detail.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setFLI(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        Amount                  _taxTotalYtd)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHCSF</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for New Jersey Health Care Subsidy Fund tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of tax code detail.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setHCSF(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        Amount                  _taxTotalYtd)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMedicare</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Medicare and Additional Medicare tax processing
    /// </summary>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    public void setMedicare(boolean _isExempt)
    {
        PayrollTaxMedicareTypeInitialization::setMedicare(payStatement, paymentDate, countryRegionId, _isExempt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRRTA</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for RRTA (Railroad Retirement Tax Act) tax processing.
    /// </summary>
    /// <remarks>
    ///     RRTA represents four different tax codes (two employee and two employer):
    ///         RRTA Tier I Tax
    ///         RRTA Tier II Tax
    ///         Employer RRTA Tier I Tax
    ///         Employer RRTA Tier II Tax
    /// </remarks>
    public void setRRTA()
    {
        permission.assert();
        
        if (!isRRTAEnabled)
        {
            return;
        }

        // Retrieve the RecIds of the payroll tax codes for the RRTA taxes
        PayrollTaxCodeRecId employeeRRTATier1RecId = PayrollTaxCode::findByCodeCountryRegion(#EMPLOYEERRTA1, countryRegionId).RecId;
        PayrollTaxCodeRecId employeeRRTATier2RecId = PayrollTaxCode::findByCodeCountryRegion(#EMPLOYEERRTA2, countryRegionId).RecId;
        PayrollTaxCodeRecId employerRRTATier1RecId = PayrollTaxCode::findByCodeCountryRegion(#EMPLOYERRRTA1, countryRegionId).RecId;
        PayrollTaxCodeRecId employerRRTATier2RecId = PayrollTaxCode::findByCodeCountryRegion(#EMPLOYERRRTA2, countryRegionId).RecId;

        // Calculate the YTD withholding for all RRTA tax codes for the worker
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMHT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Kentucky County Mental Health tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCounty">
    ///     Specifies if it is a resident county.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setMHT(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResidentCounty,
        Amount                  _taxTotalYtd)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMOT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for West Virginia Municipal Occupation Fee tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCity">
    ///     Specifies if it is a resident city.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     Specifies the record ID of the worker tax code.
    /// </param>
    public void setMOT(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResidentCity,
        PayrollWorkerTaxCode    _workerTaxCode)
    {
        permission.assert();
        numCityExemptions = str2int(_workerTaxCode.getValueForParameter(#TOTALEXEMPTIONS, paymentDate));
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOLF</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Kentucky City Occupational License Fee or West Virginia City Service Fee processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResident">
    ///     Specifies if it is a resident.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     Specifies the record ID of the worker tax code.
    /// </param>
    public void setOLF(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResident,
        PayrollWorkerTaxCode    _workerTaxCode)
    {
        permission.assert();
        numCityExemptions = str2int(_workerTaxCode.getValueForParameter(#TOTALEXEMPTIONS, paymentDate));
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOLFCounty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Kentucky County Occupational License Fee processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCounty">
    ///     Specifies if it is a resident county.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setOLFCounty(
        PayrollGNIS _locationCode,
        boolean     _isExempt,
        boolean     _isResidentCounty,
        Amount      _taxTotalYtd)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOLTS</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Kentucky County Occupational License Fee for Schools processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCounty">
    ///     Specifies if it is a resident county.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setOLTS(
        PayrollGNIS _locationCode,
        boolean     _isExempt,
        boolean     _isResidentCounty,
        Amount      _taxTotalYtd)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSCHL</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Ohio School Districts Tax processing
    /// </summary>
    /// <param name="_taxCodeId">
    ///     Specifies the Symmetry tax code being processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    public void setSCHL(
        PayrollTaxCodeId                  _taxCodeId,
        boolean                           _isExempt)
    {
        PayrollWorkerTaxRegionForSymmetry   workerTaxRegionSym;
        PayrollTaxRegionForSymmetry         taxRegionSym;
        boolean                             isResident;

        permission.assert();

        // Find a tax region that is applicable to the current tax code.
        workerTaxRegionSym = this.getWorkerTaxRegionForSymmetryForTaxCode(_taxCodeId);

        //
        // There can only be one resident tax region for a worker, so if the worker tax region matches
        // the resident worker tax region, we can assume that the school district Ids will be the same,
        // thus indicating that they are the resident of the school district.
        //
        isResident = (workerTaxRegionSym.WorkerTaxRegion == workerTaxRegionUsedByResidency.RecId);

        // Get the actual GNIS code for the worker tax region so that the tax will calculate properly
        taxRegionSym = PayrollTaxRegionForSymmetry::findByTaxRegion(PayrollWorkerTaxRegion::find(workerTaxRegionSym.WorkerTaxRegion).TaxRegion);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSCT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Kentucky County Senior Citizen Tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCounty">
    ///     Specifies if it is a resident county.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setSCT(
        PayrollGNIS     _locationCode,
        boolean         _isExempt,
        boolean         _isResidentCounty,
        Amount          _taxTotalYtd)
    {
        permission.assert();
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSDI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for State Disability Insurance tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     The <c>PayrollTaxCodeDetail</c> record containing the SDI tax rate
    ///     (depending on the type of SDI tax) and wage base.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     The <c>PayrollWorkerTaxCode</c> record containing the SDI tax rate,
    ///     depending on the type of SDI tax.
    /// </param>
    /// <param name="_method">
    ///     Specifies the method modifier value.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setSDI(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        PayrollWorkerTaxCode    _workerTaxCode,
        PayrollMethodModifier   _method,
        Amount                  _taxTotalYtd)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSIT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for State Income tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentState">
    ///     Specifies if it is a resident state.
    /// </param>
    /// <param name="_workerTaxCode">
    ///     Specifies the record ID of the worker tax code.
    /// </param>
    public void setSIT(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        boolean                 _isResidentState,
        PayrollWorkerTaxCode    _workerTaxCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalculationMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the regular and supplemental calculation methods for a given location code.
    /// </summary>
    /// <param name = "_locationCode">The location code for which calculation methods should be set.</param>
    /// <param name = "_workerTaxCode">The worker tax code that will determine calculation methods.</param>
    internal void setCalculationMethods(PayrollGNIS _locationCode, PayrollWorkerTaxCode _workerTaxCode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSUI</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for State Unemployment Insurance tax processing
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of the tax code detail.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setSUI(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        Amount                  _taxTotalYtd)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTT</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for Kentucky County Transit Tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_isResidentCounty">
    ///     Specifies if it is a resident county.
    /// </param>
    /// <param name="_taxTotalYtd">
    ///     Specifies the total ytd tax amount.
    /// </param>
    public void setTT(
        PayrollGNIS _locationCode,
        boolean     _isExempt,
        boolean     _isResidentCounty,
        Amount      _taxTotalYtd)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWC</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for state Worker’s Compensation insurance tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of the tax code detail.
    /// </param>
    /// <param name="_method">
    ///     Specifies the method modifier value, which provides additional instructions for
    ///     how specifically to process the tax.
    /// </param>
    public void setWC(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail,
        PayrollMethodModifier   _method)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWCForNewMexico</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for New Mexico state Worker’s Compensation insurance tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    /// <param name="_detail">
    ///     Specifies the record ID of the tax code detail.
    /// </param>
    internal void setWCForNewMexico(
        PayrollGNIS             _locationCode,
        boolean                 _isExempt,
        PayrollTaxCodeDetail    _detail)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfCurrentPayPeriodIsLastFullPeriodInQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current <c>PayrollPayPeriod</c> record is the last full pay period in its quarter.
    /// </summary>
    /// <returns>True if the pay period is the last full period in its quarter; else, false.</returns>
    private boolean checkIfCurrentPayPeriodIsLastFullPeriodInQuarter()
    {
        PayrollPayPeriod nextOpenPayPeriod;

        // Find the next open pay period immediately after the current pay period
        select firstonly RecId, PeriodEndDate from nextOpenPayPeriod
            where nextOpenPayPeriod.PayCycle == payPeriod.PayCycle
               && nextOpenPayPeriod.PeriodStatus == PayrollPeriodStatus::Open
               && nextOpenPayPeriod.PeriodEndDate > payPeriodEndDate;

        boolean arePayPeriodsInDifferentQuarters = false;

        if (nextOpenPayPeriod.RecId)
        {
            TransDate nextPayPeriodEndDate = nextOpenPayPeriod.PeriodEndDate;
            arePayPeriodsInDifferentQuarters = dateEndQtr(payPeriodEndDate) != dateEndQtr(nextPayPeriodEndDate);
        }
        else
        {
            //
            // If the next pay period has not been set up then it most likely falls in the next payroll year.
            // This indicates that the current pay period is the last full period in its quarter.
            //
            arePayPeriodsInDifferentQuarters = true;
        }

        return arePayPeriodsInDifferentQuarters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStateTransit</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Specifies parameters for state transit tax processing.
    /// </summary>
    /// <param name="_locationCode">
    ///     Specifies the value of the location Code to be processed.
    /// </param>
    /// <param name="_taxCodeDetail">
    /// The <c>PayrollTaxCodeDetail</c> record containing the wage base and rate.
    /// </param>
    /// <param name="_isResident">
    ///     Specifies if the employee is a resident of the location code.
    /// </param>
    /// <param name="_isCourtesyWithholding">
    ///     Specifies whether or not to apply courtesy withholding.
    /// </param>
    /// <param name="_isExempt">
    ///     Specifies if the tax code is exempt from the tax calculation.
    /// </param>
    internal void setStateTransit(
        PayrollGNIS             _locationCode,
        PayrollTaxCodeDetail    _taxCodeDetail,
        boolean                 _isResident,
        boolean                 _isCourtesyWithholding,
        boolean                 _isExempt
    )
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates an instance of the class <c>PayrollTaxTypeInitialization </c>
    ///     and updates its internal state variables.
    /// </summary>
    /// <param name="_payStatement">
    ///     Specifies the record ID of pay statement.
    /// </param>
    /// <returns>
    ///     An instance of the class <c>PayrollTaxTypeInitialization </c>.
    /// </returns>
    public static PayrollTaxTypeInitialization construct(PayrollPayStatement _payStatement)
    {
        return new PayrollTaxTypeInitialization(_payStatement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJurisdictionData</Name>
				<Source><![CDATA[
    private void setJurisdictionData(
        PayrollTaxCodeId _taxCode,
        PayrollGNIS _locationCode,
        boolean _isExempt,
        boolean _isResident,
        boolean _autoAdjust = true,
        boolean _hasNonResCertificate = false
       )
    {     
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>