<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesOrderEntryStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider class for SalesOrderEntryStatistics_CustItem SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the SalesOrderEntryStatistics_CustItem SSRS Report.
/// </remarks>
[
    SRSReportQuery(querystr(SalesOrderEntryStatistics)),
    SRSReportParameterAttribute(classstr(SalesOrderEntryStatisticsContract))
]
public class SalesOrderEntryStatisticsDP extends SRSReportDataProviderBase
{
    SalesOrderEntryStatistics       salesOrderEntryStatistics_Period1;
    SalesOrderEntryStatistics       salesOrderEntryStatistics_Period2;

    CustAccount                     orderAccount;
    ItemId                          itemId;
    SalesUnit                       salesUnit;
    AmountMST                       lineAmountMST_Period1;
    SalesContributionMarginMST      contributionMarginMST_Period1;
    AmountMST                       lineAmountMST_Period2;
    SalesContributionMarginMST      contributionMarginMST_Period2;
    SalesQty                        qty_Period1;
    SalesQty                        qty_Period2;

    SalesOrderEntryStatisticsTmp    salesOrderEntryStatisticsTmp;
    FromDate                        fromDate_Period1;
    ToDate                          toDate_Period1;
    FromDate                        fromDate_Period2;
    ToDate                          toDate_Period2;

    private const str Period1 = 'period1';
    private const str Period2 = 'period2';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSalesOrderEntryStatisticsTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from <c>SalesOrderEntryStatistics_CustItemTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>SalesOrderEntryStatistics_CustItemTmp</c> table.
    /// </returns>
    [
        SRSReportDataSet(tablestr(SalesOrderEntryStatisticsTmp))
    ]
    public SalesOrderEntryStatisticsTmp getSalesOrderEntryStatisticsTmp()
    {
        select salesOrderEntryStatisticsTmp;
        return salesOrderEntryStatisticsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the <c>SalesOrderEntryStatistics_CustItemTmp</c> temporary table based on the
    /// input string.
    /// </summary>
    /// <param name="_name">
    /// The period from which the data is coming.
    /// </param>
    private void insert(str _name)
    {
        //common data
        salesOrderEntryStatisticsTmp.CustAccount   = orderAccount;
        salesOrderEntryStatisticsTmp.Name          = CustTable::find(orderAccount).Name();
        salesOrderEntryStatisticsTmp.ItemId        = itemId;
        salesOrderEntryStatisticsTmp.ItemName      = inventTable::find(itemId).defaultProductName();
        salesOrderEntryStatisticsTmp.UnitId        = salesUnit;

        if (_name == Period1)
        {
            salesOrderEntryStatisticsTmp.SalesQty1     = qty_Period1;
            salesOrderEntryStatisticsTmp.SalesAmount1  = lineAmountMST_Period1;
            salesOrderEntryStatisticsTmp.Margin1       = contributionMarginMST_Period1;
        }
        else if (_name == Period2)
        {
            salesOrderEntryStatisticsTmp.SalesQty2     = qty_Period2;
            salesOrderEntryStatisticsTmp.SalesAmount2  = lineAmountMST_Period2;
            salesOrderEntryStatisticsTmp.Margin2       = contributionMarginMST_Period2;
        }
        salesOrderEntryStatisticsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.This method will be called by SSRS at
    /// runtime.It computes data and populates the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        SalesOrderEntryStatistics   salesOrderEntryStatistics_Current;

        SalesOrderEntryStatisticsContract salesOrderEntryStatisticsContract = this.parmDataContract() as SalesOrderEntryStatisticsContract;

        fromDate_Period1    = salesOrderEntryStatisticsContract.parmFromDate_Period1();
        toDate_Period1      = salesOrderEntryStatisticsContract.parmToDate_Period1();
        fromDate_Period2    = salesOrderEntryStatisticsContract.parmFromDate_Period2();
        toDate_Period2      = salesOrderEntryStatisticsContract.parmToDate_Period2();

        QueryRun queryRun_Period1 = new QueryRun(this.parmQuery());
        QueryRun queryRun_Period2 = new QueryRun(this.parmQuery());

        if (fromDate_Period1 || toDate_Period1)
        {
            queryRun_Period1.query().dataSourceTable(tablenum(SalesOrderEntryStatistics)).addRange(fieldnum(SalesOrderEntryStatistics, TransDate)).value(queryRange(fromDate_Period1, toDate_Period1));
        }
        else
        {
            queryRun_Period1.query().dataSourceTable(tablenum(SalesOrderEntryStatistics)).addRange(fieldnum(SalesOrderEntryStatistics, TransDate)).value('');
        }

        if (fromDate_Period2 || toDate_Period2)
        {
            queryRun_Period2.query().dataSourceTable(tablenum(SalesOrderEntryStatistics)).addRange(fieldnum(SalesOrderEntryStatistics, TransDate)).value(queryRange(fromDate_Period2, toDate_Period2));
        }
        else
        {
            queryRun_Period2.query().dataSourceTable(tablenum(SalesOrderEntryStatistics)).addRange(fieldnum(SalesOrderEntryStatistics, TransDate)).value(queryRange('', ''));
        }

        queryRun_Period1.next();
        queryRun_Period2.next();

        salesOrderEntryStatistics_Period1 = queryRun_Period1.get(tablenum(SalesOrderEntryStatistics));
        salesOrderEntryStatistics_Period2 = queryRun_Period2.get(tablenum(SalesOrderEntryStatistics));

        while (salesOrderEntryStatistics_Period1.RecId || salesOrderEntryStatistics_Period2.RecId)
        {
            if (salesOrderEntryStatistics_Period1.RecId     &&
               (!salesOrderEntryStatistics_Period2.RecId                                                          ||
               salesOrderEntryStatistics_Period1.CustAccount    < salesOrderEntryStatistics_Period2.CustAccount   ||
               (salesOrderEntryStatistics_Period1.CustAccount   == salesOrderEntryStatistics_Period2.CustAccount  &&
               salesOrderEntryStatistics_Period1.ItemId         <= salesOrderEntryStatistics_Period2.ItemId)))
            {
                salesOrderEntryStatistics_Current = salesOrderEntryStatistics_Period1;
            }
            else
            {
                salesOrderEntryStatistics_Current = salesOrderEntryStatistics_Period2;
            }

            if (orderAccount   != salesOrderEntryStatistics_Current.CustAccount
                || itemId      != salesOrderEntryStatistics_Current.ItemId)
            {
                orderAccount = salesOrderEntryStatistics_Current.CustAccount;

                if (itemId != salesOrderEntryStatistics_Current.ItemId)
                {
                    salesUnit = inventTable::find(salesOrderEntryStatistics_Current.ItemId).salesUnitId();
                }

                itemId = salesOrderEntryStatistics_Current.ItemId;
            }

            if (orderAccount    == salesOrderEntryStatistics_Period1.CustAccount
                && itemId       == salesOrderEntryStatistics_Period1.ItemId)
            {
                qty_Period1                   = salesOrderEntryStatistics_Period1.SalesQty;
                lineAmountMST_Period1         = salesOrderEntryStatistics_Period1.SalesAmount;
                contributionMarginMST_Period1 = (salesOrderEntryStatistics_Period1.SalesAmount - salesOrderEntryStatistics_Period1.CostAmount);

                this.insert(Period1);
                salesOrderEntryStatisticsTmp.clear();
                queryRun_Period1.next();
                salesOrderEntryStatistics_Period1 = queryRun_Period1.get(tablenum(SalesOrderEntryStatistics));
            }

            if (orderAccount == salesOrderEntryStatistics_Period2.CustAccount
                && itemId == salesOrderEntryStatistics_Period2.ItemId)
            {
                qty_Period2                   = salesOrderEntryStatistics_Period2.SalesQty;
                lineAmountMST_Period2         = salesOrderEntryStatistics_Period2.SalesAmount;
                contributionMarginMST_Period2 = (salesOrderEntryStatistics_Period2.SalesAmount - salesOrderEntryStatistics_Period2.CostAmount);

                this.insert(Period2);
                salesOrderEntryStatisticsTmp.clear();
                queryRun_Period2.next();
                salesOrderEntryStatistics_Period2 = queryRun_Period2.get(tablenum(SalesOrderEntryStatistics));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
