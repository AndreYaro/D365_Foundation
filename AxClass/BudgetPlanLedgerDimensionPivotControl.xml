<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLedgerDimensionPivotControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates and generates a <c>DimensionAttributeValueCombination</c> for a <c>BudgetPlanLine</c>.
/// </summary>
public class BudgetPlanLedgerDimensionPivotControl
{
    DataAreaId                      dataAreaId;
    Level                           dimensionHierarchylevelCount;
    LedgerRecId                     processLedger;
    List                            errorMessages;
    Map                             dimensionSpecifiers = new Map(Types::Int64, Types::Container);
    Map                             dimensionValuesStorage = new Map(Types::Container, Types::Class);
    Map                             mainAccountCache = new Map(Types::Int64, Types::String);
    DimensionHierarchyId            defaultAccountStructure;
    DimensionHierarchyId            layoutAccountStructure;
    DimensionAttribute              mainAccountDimensionAttribute;
    BudgetPlanLineEffectiveDate     effectiveDate;
    BudgetPlanLayoutRecId           layoutRecId;
    BudgetPlanLayoutElementOrdinal  ordinal;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findDimensionAttribute</Name>
				<Source><![CDATA[
    /// <summary> Finds a <c>DimensionAttribute</c> record based on its position on the referenced <c>BudgetPlanLayout</c>. </summary>
    /// <param name = "_index"> The position of the attribute in the layout. </param>
    /// <returns> The <c>DimensionAttribute</c> found at the position specified. </returns>
    protected DimensionAttribute findDimensionAttribute(ArrayIdx _index)
    {
        container               dimensionAttributeContainer;
        DimensionAttribute      dimensionAttribute;

        dimensionAttributeContainer = BudgetPlanCache::getValue(
                                            BudgetPlanCacheScope::DimensionAttribute,
                                            [this.layoutRecId, _index]);

        if (dimensionAttributeContainer == conNull())
        {
            BudgetPlanLayoutMapping layoutMapping;
            LanguageId              currentUserLanguage = currentUserLanguage();

            select firstonly FieldLabel
                from layoutMapping
                where layoutMapping.Layout          == this.layoutRecId
                    && layoutMapping.LanguageId     == currentUserLanguage
                    && layoutMapping.Ordinal        == 0
                    && layoutMapping.ElementIndex   == _index;

            dimensionAttribute = DimensionAttribute::findByLocalizedName(layoutMapping.FieldLabel);

            BudgetPlanCache::insertValue(
                BudgetPlanCacheScope::DimensionAttribute,
                [this.layoutRecId, _index],
                [dimensionAttribute]);
        }
        else
        {
            dimensionAttribute = conPeek(dimensionAttributeContainer, 1);
        }

        return dimensionAttribute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionAttributeIndex</Name>
				<Source><![CDATA[
    /// <summary> Finds the position of a <c>DimensionAttribute</c> based on the dimension attribute's record ID. </summary>
    /// <param name = "_dimensionAttributeRecId"> The record ID of the <c>DimensionAttribute</c>. </param>
    /// <returns> The position of the <c>DimensionAttribute</c> record ID specified. </returns>
    protected ArrayIdx findDimensionAttributeIndex(DimensionAttributeRecId _dimensionAttributeRecId)
    {
        ArrayIdx    elementIndex;
        container   elementIndexContainer;

        elementIndexContainer = BudgetPlanCache::getValue(
                                    BudgetPlanCacheScope::DimensionAttributeIndex,
                                    [this.layoutRecId, _dimensionAttributeRecId]);

        if (elementIndexContainer == conNull())
        {
            BudgetPlanLayoutMapping layoutMapping;
            LanguageId              currentUserLanguage = currentUserLanguage();
            DimensionAttribute      dimensionAttribute;

            while select FieldLabel, ElementIndex
                from layoutMapping
                where layoutMapping.Layout      == this.layoutRecId
                    && layoutMapping.LanguageId == currentUserLanguage
                    && layoutMapping.Ordinal    == 0
            {
                dimensionAttribute = DimensionAttribute::findByLocalizedName(layoutMapping.FieldLabel);
                if (dimensionAttribute.RecId == _dimensionAttributeRecId)
                {
                    elementIndex = layoutMapping.ElementIndex;
                    BudgetPlanCache::insertValue(
                        BudgetPlanCacheScope::DimensionAttributeIndex,
                        [this.layoutRecId, _dimensionAttributeRecId],
                        [elementIndex]);
                    break;
                }
            }
        }
        else
        {
            elementIndex = conPeek(elementIndexContainer, 1);
        }

        return elementIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMainAccountIncluded</Name>
				<Source><![CDATA[
    /// <summary> Determines if main account is included as a dimension in the current layout's focus. </summary>
    /// <returns> true if main account is included; otherwise, false. </returns>
    protected boolean isMainAccountIncluded()
    {
        DimensionHierarchy      dimensionHierarchy;
        DimensionHierarchyLevel dimensionHierarchyLevel;

        select firstonly RecId from dimensionHierarchy
            where dimensionHierarchy.RecId == layoutAccountStructure
            exists join dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == dimensionHierarchy.RecId
                    && dimensionHierarchyLevel.DimensionAttribute == mainAccountDimensionAttribute.RecId;

        return dimensionHierarchy.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSegmentValue</Name>
				<Source><![CDATA[
    /// <summary> Validates individual segment value. </summary>
    /// <param name = "_dimensionAttributeIndex"> The position of the dimension attribute in the current account structure. </param>
    /// <param name = "_dimensionValues"> The dimension array in its current state. </param>
    public void validateSegmentValue(
        ArrayIdx                    _dimensionAttributeIndex,
        DimensionSetSegmentValue    _dimensionValues)
    {
        DimensionAttributeValueValidationStatusContract dimensionValidationStatusContract;
        DimensionAttributeValueValidationRequest        dimensionValidationRequest;
        DimensionAttribute                              dimensionAttribute = this.findDimensionAttribute(_dimensionAttributeIndex);

        changecompany (this.dataAreaId)
        {
            DimensionAttributeValue dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(
                dimensionAttribute, _dimensionValues[_dimensionAttributeIndex], false, true);

            dimensionValidationRequest = DimensionAttributeValueValidationRequest::newForDimensionAttributeValueRecId(
                                        dimensionAttributeValue.RecId,
                                        this.effectiveDate,
                                        _dimensionValues[_dimensionAttributeIndex]);
            dimensionValidationRequest.parmDoActiveDatesValidation(true);
            dimensionValidationRequest.parmDoSuspendedValidation(true);

            dimensionValidationStatusContract = DimensionAttributeValueValidation::getStatus(dimensionValidationRequest);

            errorMessages    = new List(Types::String);
            errorMessages    = dimensionValidationStatusContract.getValidationMessages();

            this.displayErrorMessages(errorMessages);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>segmentValueExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the segment value exists.
    /// </summary>
    /// <param name = "_dimensionValues"> The dimension array in its current state. </param>
    /// <param name = "_valueIndex"> The index of the segment that changed. </param>
    /// <returns> true if the segment value exists; otherwise, false. </returns>
    public boolean segmentValueExists(DimensionSetSegmentValue _dimensionValues, ArrayIdx _valueIndex)
    {
        return DimensionAttributeValue::findByDimensionAttributeAndValue(
                    this.findDimensionAttribute(_valueIndex),
                    _dimensionValues[_valueIndex],
                    false,
                    (_dimensionValues[_valueIndex] != BudgetPlanningConstants::emptyString)) != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCombination</Name>
				<Source><![CDATA[
    /// <summary> Validates the ledger dimension combination. </summary>
    /// <param name = "_dimensionValues"> The individual segment values to be validated. </param>
    /// <param name = "_dimensionStorage"> The object representing the state of the control; optional. </param>
    /// <returns> The validation status. </returns>
    public DimensionValidationStatus validateCombination(DimensionSetSegmentValue _dimensionValues, DimensionStorage _dimensionStorage = null)
    {
        DimensionValidationStatus           validationStatus = DimensionValidationStatus::Valid;
        DimensionValidationRequest          request;
        DimensionValidationStatusContract   status;
        List                                errorList;

        changecompany (this.dataAreaId)
        {
            DimensionStorage dimensionStorage = prmIsDefault(_dimensionStorage)? this.getDimensionStorage(_dimensionValues): _dimensionStorage;
            if (dimensionStorage)
            {
                request = DimensionValidationRequest::newForDimensionStorage(dimensionStorage, this.effectiveDate);
                request.parmDoValueActiveDatesValidation(true);
                request.parmDoValueSuspendedValidation(true);

                status           = DimensionValidation::getStatus(request);
                validationStatus = status.parmValidationStatus();
                errorList        = status.parmValidationMessages();
            }
        }

        this.displayErrorMessages(errorList);

        return validationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the validated financial dimension segments and their values.
    /// </summary>
    /// <param name = "_dimensionValues"> The financial segment values to be validated. </param>
    /// <returns> The valid set of segments to display. </returns>
    public DimensionSetSegmentValue getValidSegments(DimensionSetSegmentValue _dimensionValues)
    {
        DimensionSetSegmentValue dimensionValues;

        changecompany (this.dataAreaId)
        {
            DimensionStorage dimensionStorage = this.getDimensionStorage(_dimensionValues);
            if (dimensionStorage)
            {
                ArrayIdx                            elementIndex;
                DimensionAttributeRecId             dimensionAttributeRecId;
                DimensionHierarchyId                dimensionHierarchyId;
                DimensionStorageSegment             storageSegment;
                DimensionStorageSegmentCollection   segmentCollection;
                Counter                             segmentsCount;

                Counter hierarchyCount = dimensionStorage.hierarchyCount();
                for (int i = 1; i <= hierarchyCount; i++)
                {
                    dimensionHierarchyId = dimensionStorage.getHierarchyId(i);
                    segmentCollection    = dimensionStorage.getSegmentCollectionForHierarchy(dimensionHierarchyId);

                    segmentsCount = segmentCollection.elements();
                    for (int j = 1; j <= segmentsCount; j++)
                    {
                        storageSegment = segmentCollection.getSegment(j);

                        dimensionAttributeRecId = storageSegment.parmDimensionAttributeId();

                        elementIndex = this.findDimensionAttributeIndex(dimensionAttributeRecId);
                        if (elementIndex)
                        {
                            dimensionValues[elementIndex] = storageSegment.parmDisplayValue();
                        }
                    }
                }
            }
        }

        return dimensionValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>DimensionStorage</c> object representing the current state of the control.
    /// </summary>
    /// <param name = "_dimensionValues">The dimensions value list array.</param>
    /// <returns>
    /// The <c>DimensionStorage</c> object representing the current state of the control.
    /// </returns>
    protected DimensionStorage getDimensionStorage(DimensionSetSegmentValue _dimensionValues, boolean _clearCache = false)
    {
        boolean                     foundInCache;
        boolean                     createIfNecessary;
        boolean                     defaultMainAccountIncluded;
        BudgetPlanColumnRuleValue   defaultFilteredMainAccount   = this.getDefaultMainAccountValue();
        DimensionAttribute          dimensionAttribute;
        DimensionAttributeValue     dimensionAttributeValue;
        DimensionHierarchyId        accountStructure             = this.defaultAccountStructure;
        str                         dimensionValuesString        = BudgetPlanLedgerDimensionPivotControl::buildDimensionValueString(_dimensionValues, dimensionHierarchylevelCount);

        container dimensionValuesStorageKey = [layoutAccountStructure, dimensionValuesString, accountStructure, this.effectiveDate, defaultFilteredMainAccount];

        foundInCache = this.clearOrFindDimensionStorage(dimensionValuesStorageKey, _clearCache);
        if (!foundInCache)
        {
            // Build the dimension specifiers based on the values entered by the user.
            for (int i = 1; i <= dimensionHierarchylevelCount && !foundInCache; i++)
            {
                dimensionAttribute      = this.findDimensionAttribute(i);
                createIfNecessary       = (_dimensionValues[i] != BudgetPlanningConstants::emptyString);
                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute, _dimensionValues[i], false, createIfNecessary);
                dimensionSpecifiers.insert(dimensionAttribute.RecId, [_dimensionValues[i], dimensionAttributeValue.RecId, dimensionAttributeValue.HashKey]);

                if (this.isMainAccountIncluded()
                    && _dimensionValues[i] != BudgetPlanningConstants::emptyString
                    && dimensionAttributeValue.DimensionAttribute == mainAccountDimensionAttribute.RecId)
                {
                    accountStructure = DimensionHierarchy::getAccountStructure(MainAccount::findByMainAccountId(_dimensionValues[i]).RecId, this.processLedger);

                    dimensionValuesStorageKey = [layoutAccountStructure, dimensionValuesString, accountStructure, this.effectiveDate, defaultFilteredMainAccount];
                    foundInCache = this.clearOrFindDimensionStorage(dimensionValuesStorageKey, _clearCache);
                }
            }

            // Add the main account if a filter exists and it doesn't exist as a row attribute.
            if (!this.isMainAccountIncluded())
            {
                createIfNecessary = (defaultFilteredMainAccount != BudgetPlanningConstants::emptyString);
                defaultMainAccountIncluded = createIfNecessary;

                dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(mainAccountDimensionAttribute, defaultFilteredMainAccount, false, createIfNecessary);
                dimensionSpecifiers.insert(mainAccountDimensionAttribute.RecId, [defaultFilteredMainAccount, dimensionAttributeValue.RecId, dimensionAttributeValue.HashKey]);

                if (defaultMainAccountIncluded)
                {
                    accountStructure = DimensionHierarchy::getAccountStructure(MainAccount::findByMainAccountId(defaultFilteredMainAccount).RecId, this.processLedger);
                }

                dimensionValuesStorageKey = [layoutAccountStructure, dimensionValuesString, accountStructure, this.effectiveDate, defaultFilteredMainAccount];
                foundInCache = this.clearOrFindDimensionStorage(dimensionValuesStorageKey, _clearCache);
            }

            // New combination encountered. Build dimension storage.
            if (!foundInCache)
            {
                LedgerDimensionDefaultingEngine dimensionDefaultingEngine = LedgerDimensionDefaultingEngine::constructForAccountStructure(accountStructure, dimensionSpecifiers, LedgerDimensionType::BudgetPlanning);

                DimensionStorage dimensionStorage = dimensionDefaultingEngine.getStorage(LedgerDimensionType::BudgetPlanning);

                dimensionValuesStorage.insert(dimensionValuesStorageKey, dimensionStorage);
            }
        }

        return dimensionValuesStorage.lookup(dimensionValuesStorageKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearOrFindDimensionStorage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears or finds the cached <c>DimensionStorage</c> object.
    /// </summary>
    /// <param name = "_dimensionKey"> The key to use to lookup the cached object. </param>
    /// <param name = "_clearCache"> Boolean flag that indicates where the stored object should be removed from cache. </param>
    /// <returns> true if the object was found; otherwise, false. </returns>
    protected boolean clearOrFindDimensionStorage(container _dimensionKey, boolean _clearCache)
    {
        if (_clearCache)
        {
            dimensionValuesStorage.remove(_dimensionKey);
        }

        return dimensionValuesStorage.exists(_dimensionKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultMainAccountValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>MainAccount</c> filter on the current column.
    /// </summary>
    /// <returns>The filter value found.</returns>
    protected BudgetPlanColumnRuleValue getDefaultMainAccountValue()
    {
        BudgetPlanColumnRuleValue defaultFilteredMainAccount;

        // Retrieve a defaulted main account dimension value if one is present for the layout element.
        // If none have been added in the cache or used in a column rule filter, do not apply a default main account.
        if (this.ordinal)
        {
            BudgetPlanLayoutElement budgetPlanLayoutElement = BudgetPlanLayoutElement::findByLayoutOrdinal(this.layoutRecId, this.ordinal);

            if (mainAccountCache.exists(budgetPlanLayoutElement.RecId))
            {
                defaultFilteredMainAccount = mainAccountCache.lookup(budgetPlanLayoutElement.RecId);
            }
            else
            {
                BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstDimensionAttributeColumnRuleFilter(budgetPlanLayoutElement.ElementDefinition, tableStr(MainAccount));

                if (budgetPlanColumnRule.RecId)
                {
                    defaultFilteredMainAccount = budgetPlanColumnRule.RightSideValueOne;
                    mainAccountCache.insert(budgetPlanLayoutElement.RecId, budgetPlanColumnRule.RightSideValueOne);
                }
            }
        }

        return defaultFilteredMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionValueString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a string representation of the dimension segment values.
    /// </summary>
    /// <param name = "_dimensionValues">The <c>DimensionSetSegmentValue</c> EDT to build the string from.</param>
    /// <param name = "_dimensionHierarchyLevelCount">The <c>Level</c> EDT to provide the upper bound for the dimension values.</param>
    /// <returns>The string value of the dimension segment values.</returns>
    public static str buildDimensionValueString(DimensionSetSegmentValue _dimensionValues, Level _dimensionHierarchyLevelCount)
    {
        str dimensionValuesString;

        for (int i = 1; i <= _dimensionHierarchyLevelCount; i++)
        {
            if (_dimensionValues[i] != BudgetPlanningConstants::emptyString)
            {
                dimensionValuesString += strfmt('%1-', _dimensionValues[i]);
            }
            else
            {
                dimensionValuesString += ' -';
            }
        }

        return subStr(dimensionValuesString, 1, strLen(dimensionValuesString) - 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToSegmentArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the segment values from the <c>BudgetPlanLineActiveView</c> to a segment array.
    /// </summary>
    /// <param name = "_budgetPlanLineActiveView"> The <c>BudgetPlanLineActiveView</c> buffer to use. </param>
    /// <returns> The segment values copied into an array. </returns>
    public static DimensionSetSegmentValue convertToSegmentArray(BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        DimensionSetSegmentValue segmentValues;

        segmentValues[1] = _budgetPlanLineActiveView.DimensionValue1;
        segmentValues[2] = _budgetPlanLineActiveView.DimensionValue2;
        segmentValues[3] = _budgetPlanLineActiveView.DimensionValue3;
        segmentValues[4] = _budgetPlanLineActiveView.DimensionValue4;
        segmentValues[5] = _budgetPlanLineActiveView.DimensionValue5;
        segmentValues[6] = _budgetPlanLineActiveView.DimensionValue6;
        segmentValues[7] = _budgetPlanLineActiveView.DimensionValue7;
        segmentValues[8] = _budgetPlanLineActiveView.DimensionValue8;
        segmentValues[9] = _budgetPlanLineActiveView.DimensionValue9;
        segmentValues[10] = _budgetPlanLineActiveView.DimensionValue10;
        segmentValues[11] = _budgetPlanLineActiveView.DimensionValue11;

        return segmentValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertToDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the segment values from the segments array into the <c>BudgetPlanLineActiveView</c> buffer.
    /// </summary>
    /// <param name = "_segmentValues"> The segment values to copy values from. </param>
    /// <param name = "_budgetPlanLineActiveView"> The buffer to copy the segment values to. </param>
    public static void convertToDimensionValues(DimensionSetSegmentValue _segmentValues, BudgetPlanLineActiveView _budgetPlanLineActiveView)
    {
        _budgetPlanLineActiveView.DimensionValue1 = _segmentValues[1];
        _budgetPlanLineActiveView.DimensionValue2 = _segmentValues[2];
        _budgetPlanLineActiveView.DimensionValue3 = _segmentValues[3];
        _budgetPlanLineActiveView.DimensionValue4 = _segmentValues[4];
        _budgetPlanLineActiveView.DimensionValue5 = _segmentValues[5];
        _budgetPlanLineActiveView.DimensionValue6 = _segmentValues[6];
        _budgetPlanLineActiveView.DimensionValue7 = _segmentValues[7];
        _budgetPlanLineActiveView.DimensionValue8 = _segmentValues[8];
        _budgetPlanLineActiveView.DimensionValue9 = _segmentValues[9];
        _budgetPlanLineActiveView.DimensionValue10 = _segmentValues[10];
        _budgetPlanLineActiveView.DimensionValue11 = _segmentValues[11];
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayErrorMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display a list of error messages to the user.
    /// </summary>
    /// <param name = "_errorMessages">
    /// The list of error messages.
    /// </param>
    protected void displayErrorMessages(List _errorMessages)
    {
        if (_errorMessages && _errorMessages.elements() > 0)
        {
            ListEnumerator enumerator = _errorMessages.getEnumerator();

            while (enumerator.moveNext())
            {
                warning(enumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a <c>LedgerDimensionBudgetPlanning</c> value for the dimension values.
    /// </summary>
    /// <param name = "_dimensionValues">The dimension values to generate a combination for.</param>
    /// <returns>The <c>LedgerDimensionBudgetPlanning</c> record ID of the <c>DimensionAttributeValueCombination</c> record persisted or found.</returns>
    public LedgerDimensionBudgetPlanning generateLedgerDimension(DimensionSetSegmentValue _dimensionValues)
    {
        LedgerDimensionBudgetPlanning budgetPlanningLedgerDimension;

        changecompany (this.dataAreaId)
        {
            DimensionStorage dimensionStorage = this.getDimensionStorage(_dimensionValues);

            if (dimensionStorage)
            {
                errorMessages = new List(Types::String);

                DimensionValidationStatus status = this.validateCombination(_dimensionValues, dimensionStorage);
                if (status == DimensionValidationStatus::StructureChanged)
                {
                    // If the structure changed, remove it from cache and regenerate the dimension storage.
                    dimensionStorage = this.getDimensionStorage(_dimensionValues, true);
                    this.validateCombination(_dimensionValues, dimensionStorage);
                }
                else if (status == DimensionValidationStatus::Invalid)
                {
                    this.displayErrorMessages(errorMessages);
                }

                budgetPlanningLedgerDimension = dimensionStorage.save();
            }
        }

        return budgetPlanningLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEffectiveDate</Name>
				<Source><![CDATA[
    public BudgetPlanLineEffectiveDate parmEffectiveDate(BudgetPlanLineEffectiveDate _effectiveDate = effectiveDate)
    {
        effectiveDate = _effectiveDate;

        return effectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrdinal</Name>
				<Source><![CDATA[
    public BudgetPlanLayoutElementOrdinal parmOrdinal(BudgetPlanLayoutElementOrdinal _ordinal = ordinal)
    {
        ordinal = _ordinal;

        return ordinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimensionFocusContainsValidSegments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>BudgetPlanLayout</c>'s <c>DimensionHierarchy</c> is a proper subset of
    /// any one of the default account structures for the current ledger.
    /// </summary>
    /// <param name = "_processRecId"> The record ID of the <c>BudgetPlanningProcess</c> record. </param>
    /// <param name = "_layoutRecId"> The record ID of the <c>BudgetPlanLayout</c> record. </param>
    /// <returns>true if the segments are contained in the defaults; otherwise, false.</returns>
    public static boolean checkDimensionFocusContainsValidSegments(BudgetPlanningProcessRecId _processRecId, BudgetPlanLayoutRecId _layoutRecId)
    {
        if (!_processRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLedgerDimensionPivotControl, checkDimensionFocusContainsValidSegments),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanningProcessRecId))));
        }
        else if (!_layoutRecId)
        {
            throw error(strFmt("@Budget:MissingParameterValue", staticMethodStr(BudgetPlanLedgerDimensionPivotControl, checkDimensionFocusContainsValidSegments),
                                                                extendedTypeId2pname(extendedTypeNum(BudgetPlanLayoutRecId))));
        }

        boolean                 foundDimensionInAccountStructure;
        DataAreaId              dataAreaId = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(BudgetPlanningProcess::find(_processRecId).Ledger));
        DimensionHierarchyId    layoutAccountStructure = BudgetPlanLayout::find(_layoutRecId).DimensionHierarchy;
        Level                   dimensionHierarchylevelCount = DimensionHierarchy::getLevelCount(layoutAccountStructure);

        changecompany (dataAreaId)
        {
            DimensionHierarchyLevel                 dimensionHierarchyLevel;
            DimensionHierarchyLevel                 dimensionHierarchyLevelRule;
            BudgetPlanDimensionRule                 dimensionRule;
            BudgetPlanDimensionAccountStructure     dimensionAccountStructure;
            LedgerRecId                             ledgerRecId = Ledger::current();

            select count(RecId) from dimensionHierarchyLevel
                where dimensionHierarchyLevel.DimensionHierarchy == layoutAccountStructure
                exists join dimensionAccountStructure
                    where dimensionAccountStructure.DimensionHierarchy  == dimensionHierarchyLevel.DimensionHierarchy
                        && dimensionAccountStructure.DimensionAttribute == dimensionHierarchyLevel.DimensionAttribute
                        && dimensionAccountStructure.Ledger             == ledgerRecId;

            select count(RecId) from dimensionHierarchyLevelRule
                where dimensionHierarchyLevelRule.DimensionHierarchy == layoutAccountStructure
                exists join dimensionRule
                    where dimensionRule.DimensionHierarchy  == dimensionHierarchyLevelRule.DimensionHierarchy
                        && dimensionRule.DimensionAttribute == dimensionHierarchyLevelRule.DimensionAttribute
                        && dimensionRule.Ledger             == ledgerRecId
                    notexists join dimensionAccountStructure
                        where dimensionAccountStructure.DimensionHierarchy  == dimensionRule.DimensionHierarchy
                            && dimensionAccountStructure.DimensionAttribute == dimensionRule.DimensionAttribute
                            && dimensionAccountStructure.Ledger             == dimensionRule.Ledger;

            // Dimension attribute counts should match the focus count
            foundDimensionInAccountStructure = (dimensionHierarchylevelCount == (dimensionHierarchyLevel.RecId + dimensionHierarchyLevelRule.RecId));
            if (!foundDimensionInAccountStructure)
            {
                throw error("@Budget:DimensionFocusAccountStructureMismatch");
            }
        }

        return foundDimensionInAccountStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>BudgetPlanLedgerDimensionPivotControl</c> object.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">The record ID of the <c>BudgetPlanHeader</c>.</param>
    protected void initialize(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanHeader        header  = BudgetPlanHeader::find(_budgetPlanHeaderRecId);
        BudgetPlanningProcess   process = BudgetPlanningProcess::find(header.BudgetPlanningProcess);

        layoutRecId                     = header.Layout;
        defaultAccountStructure         = process.AccountStructure;
        processLedger                   = process.Ledger;
        dataAreaId                      = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(process.Ledger));
        layoutAccountStructure          = BudgetPlanLayout::find(layoutRecId).DimensionHierarchy;
        effectiveDate                   = BudgetPlanningProcessHelper::getProcessCycleStartDate(header.BudgetPlanningProcess);
        dimensionHierarchylevelCount    = DimensionHierarchy::getLevelCount(layoutAccountStructure);
        mainAccountDimensionAttribute   = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        // Force the use of parameterized constructor
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBudgetPlanHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>BudgetPlanLedgerDimensionPivotControl</c> from the <c>BudgetPlanHeader</c> value.
    /// </summary>
    /// <param name = "_budgetPlanHeaderRecId">The <c>BudgetPlanHeader</c> to use to initialize the <c>BudgetPlanLedgerDimensionPivotControl</c> object.</param>
    /// <returns>The initialized <c>BudgetPlanLedgerDimensionPivotControl</c> object.</returns>
    public static BudgetPlanLedgerDimensionPivotControl newFromBudgetPlanHeader(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLedgerDimensionPivotControl budgetPlanLedgerDimensionPivotControl = new BudgetPlanLedgerDimensionPivotControl();

        budgetPlanLedgerDimensionPivotControl.initialize(_budgetPlanHeaderRecId);

        return budgetPlanLedgerDimensionPivotControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateLedgerDimensionForRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the <c>LedgerDimensionBudgetPlanning</c> value based on the request provided.
    /// </summary>
    /// <param name = "_budgetPlanLedgerDimensionPivotRequest"> The request containing parameters to generate the <c>LedgerDimensionBudgetPlanning</c> value. </param>
    /// <returns> The <c>LedgerDimensionBudgetPlanning</c> value generated based on the request provided. </returns>
    public static LedgerDimensionBudgetPlanning generateLedgerDimensionForRequest(BudgetPlanLedgerDimensionPivotRequest _budgetPlanLedgerDimensionPivotRequest)
    {
        LedgerDimensionBudgetPlanning  ledgerDimension;

        if (_budgetPlanLedgerDimensionPivotRequest.validate())
        {
            BudgetPlanLedgerDimensionPivotControl budgetPlanLedgerDimensionPivotControl = new BudgetPlanLedgerDimensionPivotControl();

            budgetPlanLedgerDimensionPivotControl.initialize(_budgetPlanLedgerDimensionPivotRequest.getBudgetPlanLineActiveView().BudgetPlanHeader);
            budgetPlanLedgerDimensionPivotControl.parmOrdinal(_budgetPlanLedgerDimensionPivotRequest.getOrdinal());

            ledgerDimension = budgetPlanLedgerDimensionPivotControl.generateLedgerDimension(
                                    BudgetPlanLedgerDimensionPivotControl::convertToSegmentArray(_budgetPlanLedgerDimensionPivotRequest.getBudgetPlanLineActiveView()));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>