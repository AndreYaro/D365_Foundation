<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocationFastDefault</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Allocate vouchers for depreciation books transactional data.
/// This class uses the fast default number sequence and runs set-based allocation.
/// </summary>
public class ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocationFastDefault
    extends ReleaseUpdateDB70_FixedAssetJournalDepBookRemovalVouchersAllocation
{
    NumberSequenceCode numberSequenceCode;

    int numberSequenceFirstNumber;
    str numberSequencePrefix;
    int numberSequenceAlphanumericLength;
    int numberSequenceNextNumberAfterAllocation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateVouchers</Name>
				<Source><![CDATA[
    public void allocateVouchers()
    {
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLDropFastNumberSequenceAllocationTmpTable());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCreateFastNumberSequenceAllocationTmpTable());

        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLAllocateIntegerNumbersInTmpTableForJournals());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLAllocateIntegerNumbersInTmpTableForTransWithoutJournals());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLAllocateIntegerNumbersInTmpTableForGroupTransWithoutJournals_IN());

        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLUpdateVoucherNumberInTmpTable());

        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCopyVoucherToJournalTransUpgradeTmp());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCopyVoucherWithJournalToDepBookTrans());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCopyVoucherWithJournalToGroupTransINUpgradeTmp_IN());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCopyVoucherWithoutJournalToDepBookTrans());
        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLCopyVoucherWithoutJournalToGroupTransINUpgradeTmp_IN());

        ResultSet resultSetTmpTableMax = ReleaseUpdateDB70_FixedAssets::executeSqlQueryWithResultsStatic(this.getSQLGetMaxNumberFromTmpTable());
        resultSetTmpTableMax.next();
        numberSequenceNextNumberAfterAllocation = resultSetTmpTableMax.getInt(1) + 1;

        ReleaseUpdateDB70_FixedAssets::executeSqlStatementStatic(this.getSQLDropFastNumberSequenceAllocationTmpTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequenceCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NumberSequenceCode parmNumberSequenceCode(NumberSequenceCode _numberSequenceCode = numberSequenceCode)
    {
        numberSequenceCode = _numberSequenceCode;

        return numberSequenceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequenceFirstNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmNumberSequenceFirstNumber(int _numberSequenceFirstNumber = numberSequenceFirstNumber)
    {
        numberSequenceFirstNumber = _numberSequenceFirstNumber;

        return numberSequenceFirstNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequencePrefix</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str parmNumberSequencePrefix(str _numberSequencePrefix = numberSequencePrefix)
    {
        numberSequencePrefix = _numberSequencePrefix;

        return numberSequencePrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberSequenceAlphnumericLength</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmNumberSequenceAlphnumericLength(int _numberSequenceAlphanumericLength = numberSequenceAlphanumericLength)
    {
        numberSequenceAlphanumericLength = _numberSequenceAlphanumericLength;

        return numberSequenceAlphanumericLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyNumberSequenceMatchesNumberOfTransactions</Name>
				<Source><![CDATA[
    protected boolean verifyNumberSequenceMatchesNumberOfTransactions(int64 _numberOfTransactions)
    {
        boolean ret = true;

        if (_numberOfTransactions > power(10, numberSequenceAlphanumericLength) - numberSequenceFirstNumber)
        {
            warning(numberSequenceCode);
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSequenceTable findOrCreateNumberSequence()
    {
        return this.createNumberSequence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCreateFastNumberSequenceAllocationTmpTable</Name>
				<Source><![CDATA[
    private str getSQLCreateFastNumberSequenceAllocationTmpTable()
    {
        str sqlStatement = strFmt(@"
            IF OBJECT_ID ( 'dbo.ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP', 'U') IS NULL
                CREATE TABLE [dbo].[ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP](
                    [ID] [int] NOT NULL IDENTITY(%1,1),
                    [VOUCHER] [nvarchar](20) NULL,
                    [TARGETTABLENAME] [nvarchar](50) NOT NULL,
                    [TARGETTABLERECID] [bigint] NOT NULL
                      CONSTRAINT [I_ASSETNUMBERSEQFASTALLOCATIONIDX] PRIMARY KEY CLUSTERED
                    (
                       [ID] ASC
                    )WITH (PAD_INDEX = OFF, STATISTICS_NORECOMPUTE = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS = ON, ALLOW_PAGE_LOCKS = ON) ON [PRIMARY]
                ) ON [PRIMARY]",
            numberSequenceFirstNumber);

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLDropFastNumberSequenceAllocationTmpTable</Name>
				<Source><![CDATA[
    private str getSQLDropFastNumberSequenceAllocationTmpTable()
    {
        str sqlStatement = @"
            IF OBJECT_ID ( 'dbo.ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP', 'U') IS NOT NULL
                DROP TABLE ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP";

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLAllocateIntegerNumbersInTmpTableForJournals</Name>
				<Source><![CDATA[
    private str getSQLAllocateIntegerNumbersInTmpTableForJournals()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO dbo.[ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP] ([TARGETTABLENAME], [TARGETTABLERECID])
            SELECT 'ASSETDEPBOOKJOURNALTRANS', [ASSETDEPBOOKJOURNALTRANS].[RECID]
                FROM [ASSETDEPBOOKJOURNALTRANS]
                WHERE [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = '%1'
                  AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = %2",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLAllocateIntegerNumbersInTmpTableForTransWithoutJournals</Name>
				<Source><![CDATA[
    private str getSQLAllocateIntegerNumbersInTmpTableForTransWithoutJournals()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO dbo.[ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP] ([TARGETTABLENAME], [TARGETTABLERECID])
            SELECT 'ASSETDEPBOOKTRANS', [ASSETDEPBOOKTRANS].[RECID]
                FROM [ASSETDEPBOOKTRANS]
                WHERE [ASSETDEPBOOKTRANS].[DATAAREAID] = '%1'
                    AND [ASSETDEPBOOKTRANS].[PARTITION] = %2
                    AND [ASSETDEPBOOKTRANS].[ORIGINATINGVOUCHER] = ''
                    AND NOT EXISTS
            (SELECT RECID FROM [ASSETDEPBOOKJOURNALTRANS]
                WHERE [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [ASSETDEPBOOKTRANS].[JOURNALNUMBER]
                    AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [ASSETDEPBOOKTRANS].[JOURNALLINENUM]
                    AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETDEPBOOKTRANS].[DATAAREAID]
                    AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETDEPBOOKTRANS].[PARTITION])",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLAllocateIntegerNumbersInTmpTableForGroupTransWithoutJournals_IN</Name>
				<Source><![CDATA[
    private str getSQLAllocateIntegerNumbersInTmpTableForGroupTransWithoutJournals_IN()
    {
        str sqlStatement = strFmt(@"
            INSERT INTO dbo.[ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP] ([TARGETTABLENAME], [TARGETTABLERECID])
            SELECT 'ASSETGROUPDEPBOOKTRANSINUPGRADETMP', [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[RECID]
                FROM [ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
                WHERE [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[DATAAREAID] = '%1'
                    AND [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[PARTITION] = %2
                    AND [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[ORIGINATINGVOUCHER] = ''
                    AND NOT EXISTS
            (SELECT RECID FROM [ASSETDEPBOOKJOURNALTRANS]
                WHERE [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[JOURNALNUMBER]
                    AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[JOURNALLINENUM]
                    AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[DATAAREAID]
                    AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[PARTITION])",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLUpdateVoucherNumberInTmpTable</Name>
				<Source><![CDATA[
    private str getSQLUpdateVoucherNumberInTmpTable()
    {
        str sqlStatement = strFmt(@"
            UPDATE dbo.[ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP]
                SET [VOUCHER] = '%1' + RIGHT(REPLICATE('0', %2) + CONVERT(nvarchar(20), ID), %2)
                FROM [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP]",
            numberSequencePrefix,
            numberSequenceAlphanumericLength);

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLGetMaxNumberFromTmpTable</Name>
				<Source><![CDATA[
    private str getSQLGetMaxNumberFromTmpTable()
    {
        str sqlStatement = strFmt(@"
            SELECT MAX(ID) FROM dbo.[ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP]");

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCopyVoucherToJournalTransUpgradeTmp</Name>
				<Source><![CDATA[
    private str getSQLCopyVoucherToJournalTransUpgradeTmp()
    {
        str sqlStatement = strFmt(@"
            UPDATE [dbo].[ASSETDEPBOOKJOURNALTRANS]
                SET [ASSETDEPBOOKJOURNALTRANS].[VOUCHER] = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[VOUCHER]
            FROM [ASSETDEPBOOKJOURNALTRANS]
            JOIN [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP]
                 ON 'ASSETDEPBOOKJOURNALTRANS' = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[TARGETTABLENAME]
                AND [ASSETDEPBOOKJOURNALTRANS].[RECID] = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[TARGETTABLERECID]
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = '%1'
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] =  %2",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCopyVoucherWithJournalToDepBookTrans</Name>
				<Source><![CDATA[
    private str getSQLCopyVoucherWithJournalToDepBookTrans()
    {
        str sqlStatement = strFmt(@"
            UPDATE [dbo].[ASSETDEPBOOKTRANS]
                SET [ASSETDEPBOOKTRANS].[ORIGINATINGVOUCHER] = [ASSETDEPBOOKJOURNALTRANS].[VOUCHER]
            FROM [ASSETDEPBOOKTRANS]
            JOIN [ASSETDEPBOOKJOURNALTRANS]
                 ON [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [ASSETDEPBOOKTRANS].[JOURNALNUMBER]
                AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [ASSETDEPBOOKTRANS].[JOURNALLINENUM]
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETDEPBOOKTRANS].[DATAAREAID]
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETDEPBOOKTRANS].[PARTITION]
                AND [ASSETDEPBOOKTRANS].[ORIGINATINGVOUCHER] = ''
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = '%1'
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = %2",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCopyVoucherWithJournalToGroupTransINUpgradeTmp_IN</Name>
				<Source><![CDATA[
    private str getSQLCopyVoucherWithJournalToGroupTransINUpgradeTmp_IN()
    {
        str sqlStatement = strFmt(@"
            UPDATE [dbo].[ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
                SET [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[ORIGINATINGVOUCHER] = [ASSETDEPBOOKJOURNALTRANS].[VOUCHER]
            FROM [ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
            JOIN [ASSETDEPBOOKJOURNALTRANS]
                 ON [ASSETDEPBOOKJOURNALTRANS].[JOURNALID] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[JOURNALNUMBER]
                AND [ASSETDEPBOOKJOURNALTRANS].[LINENUM] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[JOURNALLINENUM]
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[DATAAREAID]
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[PARTITION]
                AND [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[ORIGINATINGVOUCHER] = ''
                AND [ASSETDEPBOOKJOURNALTRANS].[DATAAREAID] = '%1'
                AND [ASSETDEPBOOKJOURNALTRANS].[PARTITION] = %2",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCopyVoucherWithoutJournalToDepBookTrans</Name>
				<Source><![CDATA[
    private str getSQLCopyVoucherWithoutJournalToDepBookTrans()
    {
        str sqlStatement = strFmt(@"
            UPDATE [dbo].[ASSETDEPBOOKTRANS]
                SET [ASSETDEPBOOKTRANS].[ORIGINATINGVOUCHER] = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[VOUCHER]
            FROM [ASSETDEPBOOKTRANS]
            JOIN [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP]
                 ON 'ASSETDEPBOOKTRANS' = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[TARGETTABLENAME]
                AND [ASSETDEPBOOKTRANS].[RECID] = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[TARGETTABLERECID]
                AND [ASSETDEPBOOKTRANS].[DATAAREAID] = '%1'
                AND [ASSETDEPBOOKTRANS].[PARTITION] = %2",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSQLCopyVoucherWithoutJournalToGroupTransINUpgradeTmp_IN</Name>
				<Source><![CDATA[
    private str getSQLCopyVoucherWithoutJournalToGroupTransINUpgradeTmp_IN()
    {
        str sqlStatement = strFmt(@"
            UPDATE [dbo].[ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
                SET [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[ORIGINATINGVOUCHER] = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[VOUCHER]
            FROM [ASSETGROUPDEPBOOKTRANSINUPGRADETMP]
            JOIN [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP]
                 ON 'ASSETGROUPDEPBOOKTRANSINUPGRADETMP' = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[TARGETTABLENAME]
                AND [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[RECID] = [ASSETNUMBERSEQFASTALLOCATIONUPGRADETMP].[TARGETTABLERECID]
                AND [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[DATAAREAID] = '%1'
                AND [ASSETGROUPDEPBOOKTRANSINUPGRADETMP].[PARTITION] = %2",
            curExt(),
            getCurrentPartitionRecId());

        return sqlStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNumberSequence</Name>
				<Source><![CDATA[
    private NumberSequenceTable createNumberSequence()
    {
        NumberSequenceTable numberSequenceTableLocal;
        RefRecId numberSequenceScopeId = NumberSeqScopeFactory::createDataAreaScope(curExt()).getId(true);

        while (NumberSequenceTable::existByNaturalKey(numberSequenceCode, numberSequenceScopeId))
        {
            numberSequenceCode += '2';

            int maxLenght = new DictType(extendedTypeNum(NumberSequenceCode)).stringLen();

            if (strLen(numberSequenceCode) > maxLenght)
            {
                return numberSequenceTableLocal;
            }
        }

        numberSequenceTableLocal.initValue();
        numberSequenceTableLocal.Manual = NoYes::No;
        numberSequenceTableLocal.Continuous = NoYes::No;
        numberSequenceTableLocal.CleanAtAccess    = numberSequenceTableLocal.Continuous ? NoYes::Yes : NoYes::No;
        numberSequenceTableLocal.Txt = "@FixedAssets:FA_ConfigSupplemental_DataUpgradeDefaultNumberSequenceText";
        numberSequenceTableLocal.Lowest = numberSequenceFirstNumber;
        numberSequenceTableLocal.NextRec = numberSequenceNextNumberAfterAllocation;
        numberSequenceTableLocal.Highest = real2int(power(10, numberSequenceAlphanumericLength)) - 1;
        numberSequenceTableLocal.CleanAtAccess = (numberSequenceTableLocal.Manual || !numberSequenceTableLocal.Continuous) ? NoYes::No : numberSequenceTableLocal.CleanAtAccess;

        numberSequenceTableLocal.NumberSequenceScope = numberSequenceScopeId;
        numberSequenceTableLocal.NumberSequence = numberSequenceCode;

        numberSequenceTableLocal.Format = strFmt('%1%2', numberSequencePrefix, strRep('#', numberSequenceAlphanumericLength));
        numberSequenceTableLocal.AnnotatedFormat = NumberSeq::createAnnotatedFormatFromFormat(numberSequenceTableLocal.Format);

        if (numberSequenceTableLocal.validateWrite())
        {
            numberSequenceTableLocal.insert();
        }
        else
        {
            // Leave RecId empty in case of errors
            numberSequenceTableLocal.RecId = 0;
        }

        return numberSequenceTableLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>