<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBilling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRBilling</c> class processes all payment billing and charges that do not go through invoice processing.
/// </summary>
/// <remarks>
///     This class is the parent class for all payment billing and charging needs when
///     a transaction does not go through the invoicing process.
///     Currently the MCR product has Continuity orders which can have pay on a schedule
///     transactions and installment orders which are also paid on schedule.
///     Since these orders do not go through invoicing like a regular pay now order, the
///     customer has to be billed and charged when the payment comes due. The batch programs
///     Continuity billing and Installment billing take care of the payment billing and charging.
/// </remarks>
class MCRBilling extends RunBaseBatch implements BatchRetryable
{
    boolean         detailInfolog;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates a confirmation notice to the customer letting them know a
    ///     payment has been posted or that payment is due.
    /// </summary>
    /// <param name="_inputBuffer">
    ///     The record for which the confirmation will be generated.
    /// </param>
    /// <param name="_mcrCustPaymType">
    ///     The payment type used in the related input record.
    /// </param>
    /// <param name="_retailEventNotificationType">
    ///     The event type for which the confirmation is being generated.
    /// </param>
    /// <param name="_processDate">
    ///     The date for which the the confirmation is generated; optional.
    /// </param>
    /// <returns>
    ///     true if the confirmation is generated; otherwise false.
    /// </returns>
    protected boolean generateConfirmation(Common _inputBuffer,
                                MCRCustPaymType _mcrCustPaymType,
                                RetailEventNotificationType _retailEventNotificationType,
                                Date _processDate = DateNull())
    {
        MCRInstallmentPayment installmentPayment;
        MCRInstallmentPayment installmentPayment_upd;
        MCRContinuityPayment  continuityPayment;

        //Raise the event depending on the type of payment.
        switch (_mcrCustPaymType)
        {
            case MCRCustPaymType::CreditCard:
            case MCRCustPaymType::OnAccount:
                switch (_inputBuffer.TableId)
                {
                    case tablenum(MCRContinuityPayment):
                        continuityPayment = _inputBuffer.data();
                        RetailEventNotificationAction::InsertRetailOENAction(_retailEventNotificationType,
                            continuityPayment.RecId,
                            SalesTable::find(installmentPayment.SalesID));
                    break;
                    case tablenum(MCRInstallmentPayment):
                        installmentPayment = _inputBuffer.data();
                        RetailEventNotificationAction::InsertRetailOENAction(_retailEventNotificationType,
                            installmentPayment.RecId,
                            SalesTable::find(installmentPayment.SalesID));
                        ttsBegin;
                        installmentPayment_upd = MCRInstallmentPayment::findBySchedLine(installmentPayment.SalesID,
                                                                                installmentPayment.PaymSched,
                                                                                installmentPayment.CustPaymSchedLineRecID,
                                                                                true);
                        //Update the payment with the print date.
                        if (installmentPayment_Upd)
                        {
                            installmentPayment_upd.PrintDate = _processDate;
                            installmentPayment_upd.PaymentStatus = MCRSchedulePaymStatus::Billed;
                            if (installmentPayment_upd.validateWrite())
                            {
                                installmentPayment_upd.update();
                            }
                            else
                            {
                                throw error("@SYS104318");
                            }
                        }

                        ttsCommit;

                    break;
                    default:
                        return false;
                }
            break;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the payment as a pre-payment when it is a credit card.
    /// </summary>
    /// <param name="_inputPaymentBuffer">
    ///     The payment record to be posted.
    /// </param>
    /// <returns>
    ///     true if a non-negative amount is posted; otherwise, false.
    /// </returns>
    protected boolean postPayment(Common _inputPaymentBuffer)
    {
        MCRCustPaymTable        mcrCustPaymTable;
        MCRCustPaymTotals       mcrCustPaymTotals;
        MCRInstallmentPayment   installmentPayment;
        MCRContinuityPayment    continuityPayment;
        boolean                 paymPostingStatus = false;
        // Payment acceleration was forcing the error message
        //      to display the wrong amoutn.  Save it off so
        //      the user will know how much failed.
        AmountCur           origAmt;
        switch (_inputPaymentBuffer.TableId)
        {
            case tablenum(MCRInstallmentPayment):
                installmentPayment = _inputPaymentBuffer.data();
                //Read the payment record from the Continuity Payment reference.
                mcrCustPaymTable = MCRCustPaymTable::findByRecID(installmentPayment.CustPaymTableRecID, true);
            break;
            case tablenum(MCRContinuityPayment):
                continuityPayment =_inputPaymentBuffer.data();
                //Read the payment record from the Continuity Payment reference.
                mcrCustPaymTable = MCRCustPaymTable::findByRecID(continuityPayment.MCRCustPaymTableRecID);
            break;
        }
        // Save off the amount, just in case there's an error and payments are accelerated
        origAmt = mcrCustPaymTable.Amount;
        // Create the payment class to process the payment.
        mcrCustPaymTotals = MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId, mcrCustPaymTable.RefRecId);

        try
        {
            mcrCustPaymTotals.processPayments(MCRProcessPaymAction::PostAll, false, true, mcrCustPaymTable.RecId);
        }
        catch
        {
            paymPostingStatus = false;
        }

        mcrCustPaymTable.reread();

        if (mcrCustPaymTable.PostedAmount != 0)
        {
            paymPostingStatus = true;
        }

        // Update the posted date on the continuity payment
        if (mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized
            || mcrCustPaymTable.Status == MCRCustPaymStatus::Posted
            || mcrCustPaymTable.Status == MCRCustPaymStatus::Paid)
        {
            //Posting the payment message.
            if (detailInfolog)
            {
                info(strfmt("@MCR12877",
                            mcrCustPaymTable.displaySalesId(),
                            num2str(MCRCustPaymTable.Amount, 0, 2, 0, 0)));
            }
        }
        else
        {
            //Posting payment but not authorized.
            if (detailInfolog)
            {
                info(strfmt("@MCR12878",
                    MCRCustPaymTable.displaySalesId(),
                    num2str(origAmt, 0, 3, 0, 0)));
            }
        }
        return paymPostingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates bills and credit card charges for continuity
    /// payment schedules and installment billing.
    /// </summary>
    /// <param name="_inputBuffer">
    /// Header record the payment information relates to.
    /// </param>
    /// <param name="_custPaymRecID">
    /// The rec ID of the new payment record.
    /// </param>
    /// <param name="_custPaymSchedLineRecID">
    /// The rec ID of the schedule line being processed.
    /// </param>
    /// <returns>
    /// A <c>MCRInstallmentPayment</c> or <c>MCRContinuityPayment</c> record.
    /// </returns>
    public Common processPayments(Common _inputBuffer,
                                  RecID _custPaymRecID,
                                  RecID _custPaymSchedLineRecID)
    {
        MCRInstallmentPayment           mcrInstallmentPayment;
        MCRInstallmentPlanSalesTable    mcrInstallmentPlanSalesTable;
        MCRContinuityPayment            mcrContinuityPayment;
        MCRContinuityCustHeader         mcrContinuityCustHeader;
        Common                          outputRecord;

        switch (_inputBuffer.TableId)
        {
            case tablenum(MCRInstallmentPlanSalesTable):
                mcrInstallmentPlanSalesTable = _inputBuffer.data();
                ttsBegin;
                mcrInstallmentPayment = MCRInstallmentPayment::findBySchedLine(mcrInstallmentPlanSalesTable.SalesId,
                                                                            mcrInstallmentPlanSalesTable.PaymSchedId,
                                                                            _custPaymSchedLineRecID,
                                                                            true);
                if (!mcrInstallmentPayment)
                {
                    mcrInstallmentPayment = MCRInstallmentPayment::insertInstallmentPayment(mcrInstallmentPlanSalesTable.SalesId,
                                                                                    mcrInstallmentPlanSalesTable.PaymSchedId,
                                                                                    _custPaymSchedLineRecID,
                                                                                    _custPaymRecID);
                }
                else
                {
                    mcrInstallmentPayment.PaymentStatus = MCRSchedulePaymStatus::Charged;
                    mcrInstallmentPayment.CustPaymTableRecID = _custPaymrecID;
                    mcrInstallmentPayment.update();
                }
                this.updatePaymentScheduleLine(_custPaymSchedLineRecID, _custPaymRecID, _inputBuffer.TableId);
                outputRecord = mcrInstallmentPayment.data();
                ttsCommit;
                break;
            case tablenum(MCRContinuityCustHeader):
                mcrContinuityCustHeader = _inputBuffer.data();
                ttsBegin;
                mcrContinuityPayment.SalesID = mcrContinuityCustHeader.SalesId;
                mcrContinuityPayment.CustAccount = mcrContinuityCustHeader.CustAccount;
                mcrContinuityPayment.MCRCustPaymTableRecID = _custPaymRecID;
                mcrContinuityPayment.insert();
                mcrContinuityPayment.reread();
                outputRecord=mcrContinuityPayment.data();
                this.updatePaymentScheduleLine(_custPaymSchedLineRecID, _custPaymRecID, _inputBuffer.TableId);
                ttsCommit;
                break;
        }
        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret;

        ret = super(packedClass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentScheduleLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the payment schedule with the payment record.
    /// </summary>
    /// <param name="_recID">
    ///     The recID for the payment record being updated.
    /// </param>
    /// <param name="_paymentRecID">
    ///     The recID for the payment record used to update.
    /// </param>
    /// <param name="_tableID">
    ///     The tableID of the table being updated.
    /// </param>
    /// <returns>
    ///     true if the payment record has been updated; otherwise, false.
    /// </returns>
    protected boolean updatePaymentScheduleLine(RecID _recID, RecID _paymentRecID, TableID _tableID)
    {
        CustPaymSchedLine   custPaymSchedLine_upd;
        boolean             ret = false;
        custPaymSchedLine_upd = CustPaymSchedLine::MCRFindByRecID(_recID, true);

        if (custPaymSchedLine_upd)
        {
            ttsBegin;
            switch (_tableID)
            {
                case tablenum(MCRContinuityCustHeader):
                    custPaymSchedLine_upd.MCRContinuityPaymRecID = _paymentRecID;
                break;
                case tablenum(MCRInstallmentPlanSalesTable):
                    custPaymSchedLine_upd.MCRInstallmentPaymRecID = _paymentRecID;
                break;
            }
            if (custPaymSchedLine_upd.validateWrite())
            {
                custPaymSchedLine_upd.update();
            }
            else
            {
                throw error("@SYS104318");
            }
            ttsCommit;
            ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static MCRBilling construct(MCRBillingType _billingType)
    {
        MCRBilling mcrBilling = null;
        switch (_billingType)
        {
            case MCRBillingType::ContinuityBilling:
                mcrBilling =MCRContinuityBilling::construct();
                break;
            case MCRBillingType::InstallmentBilling:
                mcrBilling = MCRBilling_Installment::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
        return mcrBilling;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        MCRBilling       mcrBilling;
        MCRBillingType   mcrBillingType;

        if (_args)
        {
            mcrBillingType = _args.parmEnum();

            mcrBilling = MCRBilling::construct(mcrBillingType);
            if (mcrBilling.prompt())
            {
                mcrBilling.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>