<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOpenQtyCriticalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventOpenQtyCriticalDP</c> class provides data for the <c>InventOpenQtyCritical</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventOpenQtyCritical)),
    SRSReportParameterAttribute(classStr(InventOpenQtyCriticalContract))
]
public class InventOpenQtyCriticalDP extends SrsReportDataProviderPreProcessTempDB
{
    InventTable                     inventTable;
    InventOpenQtyCriticalTmp        inventOpenQtyCriticalTmp;
    InventTransOrigin               inventTransOrigin;
    InventTrans                     inventTrans;

    InventQty                       openQty;
    Specification                   specification;
    Map                             mapQueryFinancial;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventOpenQtyCriticalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches data from the temporary <c>InventOpenQtyCriticalTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventOpenQtyCriticalTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('InventOpenQtyCriticalTmp')
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventOpenQtyCriticalTmp getInventOpenQtyCriticalTmp()
    {
        select * from inventOpenQtyCriticalTmp;
        return inventOpenQtyCriticalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the selected records into the temporary table.
    /// </summary>
    /// <param name="_insertTrans">
    ///    A Boolean value that indicates whether to insert the transaction data.
    /// </param>
    /// <param name="_markedTransaction">
    ///    A Boolean value that indicates whether this is a marked transaction.
    /// </param>
    private void insertIntoTempTable(boolean _insertTrans, boolean _markedTransaction)
    {
        inventOpenQtyCriticalTmp.ItemId                     = inventTable.ItemId;
        inventOpenQtyCriticalTmp.ItemName                   = inventTable.defaultProductName();
        inventOpenQtyCriticalTmp.Specification              = this.specification();
        inventOpenQtyCriticalTmp.OpenQty                    = this.openQty();
        inventOpenQtyCriticalTmp.InventUnitId               = inventTable.inventUnitId();

        if (_insertTrans)
        {
            inventOpenQtyCriticalTmp.DateStatus             = inventTrans.DateStatus;
            inventOpenQtyCriticalTmp.ReferenceCategory      = inventTransOrigin.ReferenceCategory;
            inventOpenQtyCriticalTmp.ReferenceId            = inventTransOrigin.ReferenceId;
            inventOpenQtyCriticalTmp.InventTransId          = inventTransOrigin.InventTransId;
            inventOpenQtyCriticalTmp.StatusReceipt          = inventTrans.StatusReceipt;
            inventOpenQtyCriticalTmp.Qty                    = inventTrans.Qty;
            inventOpenQtyCriticalTmp.ShowTrans              = NoYes::Yes;
        }
        else
        {
            inventOpenQtyCriticalTmp.ShowTrans              = NoYes::No;
        }
        if (_markedTransaction)
        {
            inventOpenQtyCriticalTmp.MarkedTransaction      = NoYes::Yes;
        }
        else
        {
            inventOpenQtyCriticalTmp.MarkedTransaction      = NoYes::No;
        }
        inventOpenQtyCriticalTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>investigateMarkedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the marked transactions for the item.
    /// </summary>
    private void investigateMarkedTrans()
    {
        InventTrans                     issue;
        InventTrans                     receipt;
        InventTransOrigin               receiptOrigin;
        boolean                         insertReciepts;
        InventOpenQtyCriticalContract   rdpContract = this.parmDataContract() as InventOpenQtyCriticalContract;
        TransDate                       closingDate = rdpContract.parmClosingDate();
        boolean                         showTrans   = rdpContract.parmShowTrans();

        while select sum(Qty), sum(QtySettled) from issue
            group by InventTransOrigin, MarkingRefInventTransOrigin
            where issue.ValueOpen                == InventTransOpen::Yes
            && issue.StatusReceipt               == StatusReceipt::None
            && issue.StatusIssue                 == StatusIssue::Sold
            && issue.DateFinancial               <= closingDate
            && issue.MarkingRefInventTransOrigin
            && issue.ItemId                      == inventTable.ItemId
        {
            select  sum(Qty), sum(QtySettled) from receipt
                where receipt.InventTransOrigin          == issue.MarkingRefInventTransOrigin
                && receipt.ValueOpen                     == InventTransOpen::Yes
                && receipt.StatusReceipt                 == StatusReceipt::Purchased
                && receipt.StatusIssue                   == StatusIssue::None
                && receipt.DateFinancial                 <= closingDate
                && receipt.MarkingRefInventTransOrigin   == issue.InventTransOrigin;

            if ((receipt.Qty-receipt.QtySettled) + (issue.Qty-issue.QtySettled) < 0)
            {
                openQty = (receipt.Qty-receipt.QtySettled) + (issue.Qty-issue.QtySettled);
                specification = "@SYS97050";
                if (showTrans)
                {
                    while select receiptOrigin
                        group by receiptOrigin.InventTransId, receiptOrigin.ReferenceCategory, receiptOrigin.ReferenceId,
                        receipt.StatusReceipt, receipt.DateStatus where receiptOrigin.RecId == issue.MarkingRefInventTransOrigin
                        join sum(Qty) from receipt
                        where receipt.InventTransOrigin             == receiptOrigin.RecId
                        && receipt.StatusReceipt                 >= StatusReceipt::Purchased
                        && receipt.StatusReceipt                 <= StatusReceipt::Ordered
                        && receipt.StatusIssue                   == StatusIssue::None
                        && receipt.MarkingRefInventTransOrigin   == issue.InventTransOrigin
                    {
                        if (receipt.StatusReceipt != StatusReceipt::Purchased || receipt.DateStatus > closingDate)
                        {
                            if (!insertReciepts)
                            {
                                insertReciepts = true;
                            }
                            inventTrans.data(receipt);
                            inventTransOrigin.data(receiptOrigin);
                            this.insertIntoTempTable(insertReciepts,true);
                            openQty = 0;
                        }
                    }
                }
                if (!insertReciepts)
                {
                    this.insertIntoTempTable(insertReciepts,true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>investigateUnMarkedTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the unmarked transactions for the item.
    /// </summary>
    private void investigateUnMarkedTrans()
    {
        InventTransOrigin   receiptOrigin;
        InventTrans         receipt;

        InventDim           inventDim;
        InventDimParm       inventDimParm;
        boolean             insertReciepts;

        InventOpenQtyCriticalContract   rdpContract = this.parmDataContract() as InventOpenQtyCriticalContract;
        TransDate                       closingDate = rdpContract.parmClosingDate();
        boolean                         showTrans   = rdpContract.parmShowTrans();

        Query queryTrans = this.queryInventTrans();

        if (queryTrans)
        {
            QueryRun queryRunInventTrans = new QueryRun(queryTrans);

            while (queryRunInventTrans.next())
            {
                InventTrans inventTransSum = queryRunInventTrans.get(tableNum(InventTrans));
                InventDim inventDimFinancial = queryRunInventTrans.get(tableNum(InventDim));

                openQty = inventTransSum.Qty - inventTransSum.QtySettled; // open quantity for the financial dimension

                if (openQty < 0)
                {
                    inventDimParm.initFromInventDim(inventDimFinancial);

                    if (! inventDimParm.isAllFlagNo())
                    {
                        specification = strFmt("@SYS97062",inventDimFinancial.preFix());
                    }
                    else
                    {
                        specification = "";
                    }

                    if (showTrans)
                    {
                        while select forceplaceholders receiptOrigin
                            group by receiptOrigin.InventTransId, receiptOrigin.ReferenceCategory, receiptOrigin.ReferenceId, receipt.StatusReceipt, receipt.DateStatus  // fields in report
                            where receiptOrigin.ItemId == inventTable.ItemId
                            join forceplaceholders sum(Qty) from receipt
                            where receipt.InventTransOrigin             == receiptOrigin.RecId
                            && receipt.ValueOpen                     == InventTransOpen::Yes
                            && receipt.DateStatus                    <= closingDate
                            && receipt.StatusReceipt                 >= StatusReceipt::Received
                            && receipt.StatusReceipt                 <= StatusReceipt::Ordered
                            && receipt.StatusIssue                   == StatusIssue::None
                            && receipt.MarkingRefInventTransOrigin   == 0
                            #InventDimExistsJoin(receipt.inventDimId,inventDim,inventDimFinancial,inventDimParm)
                        {
                            if (!insertReciepts)
                            {
                                insertReciepts = true;
                            }
                            inventTrans.data(receipt);
                            inventTransOrigin.data(receiptOrigin);
                            this.insertIntoTempTable(insertReciepts,false);
                        }
                    }

                    if (!insertReciepts)
                    {
                        this.insertIntoTempTable(insertReciepts,false);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The invent quantity for the item.
    /// </summary>
    /// <returns>
    ///    The invent quantity.
    /// </returns>
    private InventQty openQty()
    {
        return openQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic by calling the helper methods and inserting data into the
    ///    temporary table.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        InventOpenQtyCriticalContract   rdpContract = this.parmDataContract() as InventOpenQtyCriticalContract;
        TransDate                       closingDate = rdpContract.parmClosingDate();

        Query query = this.parmQuery();

        QueryBuildRange qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventTable)), fieldNum(InventTable, ItemType));
        qbr.value(InventItemType::valueMustInventBeControlled());

        qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DateFinancial));
        qbr.value('..'+queryValue(closingDate));

        qbr = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(InventModelGroup)), fieldNum(InventModelGroup, InventModel));
        qbr.value(InventModelType::queryValueIsSettled());

        QueryRun qrun = new QueryRun(query);

        while (qrun.next())
        {
            Common record = qrun.get(tableNum(InventTable));
            inventTable.data(record);
            this.investigateMarkedTrans();
            this.investigateUnMarkedTrans();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds and returns a query for unmarked transaction calculation.
    /// </summary>
    /// <returns>
    ///    The query object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query queryInventTrans()
    {
        Query                           queryTrans;
        InventDimParm                   inventDimParm;
        InventDimGroupSetup             inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
        InventOpenQtyCriticalContract   rdpContract         = this.parmDataContract() as InventOpenQtyCriticalContract;
        TransDate                       closingDate         = rdpContract.parmClosingDate();

        #query

        if (inventTable.RecId)
        {
            if (! mapQueryFinancial)
            {
                mapQueryFinancial = new Map(Types::String, Types::Class);
            }

            if (mapQueryFinancial.exists(inventDimGroupSetup.hashString()))
            {
                queryTrans = mapQueryFinancial.lookup(inventDimGroupSetup.hashString());
            }
            if (! queryTrans)
            {
                inventDimGroupSetup.inventDimParmActiveFinancialInventory(inventDimParm);

                queryTrans = new Query();
                QueryBuildDataSource qbsTrans = queryTrans.addDataSource(tableNum(InventTrans));

                SysQuery::findOrCreateRange(qbsTrans,fieldNum(InventTrans,ItemId));

                SysQuery::findOrCreateRange(qbsTrans,fieldNum(InventTrans,DateFinancial)).value('..'+queryValue(closingDate));
                SysQuery::findOrCreateRange(qbsTrans,fieldNum(InventTrans,StatusReceipt)).value('..'+queryValue(StatusReceipt::Purchased));
                SysQuery::findOrCreateRange(qbsTrans,fieldNum(InventTrans,StatusIssue)).value('..'+queryValue(StatusIssue::Sold));

                SysQuery::findOrCreateRange(qbsTrans,fieldNum(InventTrans,MarkingRefInventTransOrigin)).value(queryValue(0));
                SysQuery::findOrCreateRange(qbsTrans,fieldNum(InventTrans,ValueOpen)).value(queryValue(NoYes::Yes));

                qbsTrans.addSortField(fieldNum(InventTrans,ItemId));

                qbsTrans.orderMode(OrderMode::GroupBy);

                qbsTrans.fields().addField(fieldNum(InventTrans,Qty),SelectionField::Sum);
                qbsTrans.fields().addField(fieldNum(InventTrans,QtySettled),SelectionField::Sum);

                qbsTrans.addSortIndex(indexNum(InventTrans,ItemIdx));
                qbsTrans.indexIsHint(true);

                // InventDim
                QueryBuildDataSource qbsDim = qbsTrans.addDataSource(tableNum(InventDim));
                qbsDim.joinMode(JoinMode::InnerJoin);
                qbsDim.relations(true);

                inventDimParm.queryAddSortField(qbsDim);

                qbsDim.addSortIndex(indexNum(InventDim,DimIdIdx));
                qbsDim.indexIsHint(true);

                queryTrans.literals(#queryForcePlaceholders);

                mapQueryFinancial.insert(inventDimGroupSetup.hashString(), queryTrans);
            }
            if (queryTrans)
            {
                SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)),fieldNum(InventTrans,ItemId)).value(queryValue(inventTable.ItemId));
                return queryTrans;
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specification</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the specification for the item by using the transaction type.
    /// </summary>
    /// <returns>
    ///    The specification string.
    /// </returns>
    private Specification specification()
    {
        return specification;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>