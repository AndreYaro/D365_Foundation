<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxArchiveTransHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for populating records in <c>TaxArchiveTrans</c>. 
/// </summary>
internal final class TaxArchiveTransHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateData</Name>
				<Source><![CDATA[
    internal static void createOrUpdateData()
    {
        Ledger ledger;
        FiscalCalendarYear fiscalCalYear;

        while select ledger
            outer join fiscalCalYear
                where fiscalCalYear.FiscalCalendar == ledger.FiscalCalendar
        {
            changecompany (ledger.Name)
            {
                if (TaxArchiveTransHelper::existsInTaxTransForFiscalCalendarYear(fiscalCalYear))
                {
                    TaxArchiveTrans taxArchiveTrans = TaxArchiveTrans::findOrCreate(
                        ledger.FiscalCalendar,
                        fiscalCalYear.RecId,
                        curExt(),
                        true);

                    if (TaxArchiveTransHelper::shouldArchiveTransBeCheckedForReadiness(taxArchiveTrans))
                    {
                        boolean existsOpenFiscalPeriod = TaxArchiveTransHelper::existsOpenLedgerFiscalPeriods(
                            ledger.FiscalCalendar,
                            fiscalCalYear.RecId,
                            ledger.RecId);

                        LedgerArchiveStatus calculatedArchiveStatus =
                            existsOpenFiscalPeriod ?
                            LedgerArchiveStatus::NotReady :
                            LedgerArchiveStatus::Ready;

                        if (taxArchiveTrans.Status != calculatedArchiveStatus)
                        {
                            ttsbegin;
                            taxArchiveTrans.Status = calculatedArchiveStatus;
                            taxArchiveTrans.update();
                            ttscommit;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsInTaxTransForFiscalCalendarYear</Name>
				<Source><![CDATA[
    private static boolean existsInTaxTransForFiscalCalendarYear(FiscalCalendarYear _fiscalCalYear)
    {
        TaxTrans taxTrans;

        select firstonly RecId from taxTrans
            where taxTrans.TransDate >= _fiscalCalYear.StartDate
                && taxTrans.TransDate <= _fiscalCalYear.EndDate
                && taxTrans.DataAreaId == curExt();

        return taxTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOpenLedgerFiscalPeriods</Name>
				<Source><![CDATA[
    private static boolean existsOpenLedgerFiscalPeriods(
        FiscalCalendarRecId _fiscalCalendarRecId,
        FiscalCalendarYearRecId _fiscalCalendarYearRecId,
        LedgerRecId _ledgerRecId)
    {
        LedgerFiscalCalendarPeriod ledgerFiscalCalendarPeriod;
        FiscalCalendarPeriod fiscalCalendarPeriod;

        select firstonly RecId from ledgerFiscalCalendarPeriod
            join fiscalCalendarPeriod
                where ledgerFiscalCalendarPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId
                    && fiscalCalendarPeriod.FiscalCalendar == _fiscalCalendarRecId
                    && fiscalCalendarPeriod.FiscalCalendarYear == _fiscalCalendarYearRecId
                    && ledgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Open
                    && ledgerFiscalCalendarPeriod.Ledger == _ledgerRecId;

        return ledgerFiscalCalendarPeriod.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldArchiveTransBeCheckedForReadiness</Name>
				<Source><![CDATA[
    private static boolean shouldArchiveTransBeCheckedForReadiness(TaxArchiveTrans _archiveTrans)
    {
        var shouldArchiveTransBeChecked = false;

        // If the given archive trans is in a ready or not ready state, it should be updated
        // to ensure any changes in its readiness are taken into account.
        if (_archiveTrans.Status == LedgerArchiveStatus::Ready ||
            _archiveTrans.Status == LedgerArchiveStatus::NotReady)
        {
            shouldArchiveTransBeChecked = true;
        }
        else
        {
            // If the given archive trans is not in a ready or not ready state, determine whether or not the given
            // archive trans can be moved to history. If it can, the readiness for the archive trans should be checked.
            shouldArchiveTransBeChecked = _archiveTrans.canArchiveTransBeMovedToHistory();
        }

        return shouldArchiveTransBeChecked;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>