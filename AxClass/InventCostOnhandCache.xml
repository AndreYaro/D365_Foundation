<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostOnhandCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Caches <c>InventOnHand</c> for financial inventory dimensions.
/// </summary>
class InventCostOnhandCache
{
    Map         mapItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the cache for the item if 
    ///     1. the item is setup to include the physical value in the cost.
    ///     2. the item's inventModelGroup is moving average and allows negative physical.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> that is processed by <c>InventUpd_Physical</c> or <c>InventUpd_Financial</c>
    /// </param>
    /// <remarks>
    /// If the item setup to include the physical value in the cost, then the physical value for the movement is subtracted from the cost and
    /// the cache cannot reused for another movement with the same item.
    /// If the item is moving average and allows negative physical, the way to calculate cost amount from negative qty to positive qty 
    /// is different. So the cache cannot be reused.
    /// </remarks>
    public void clearCache(InventMovement  _movement)
    {
        if (_movement.inventModelGroup().InclPhysicalValueInCost || (_movement.inventModelGroup().NegativePhysical && _movement.inventModelGroup().InventModel == InventModel::MovingAverage))
        {
            mapItem.remove(_movement.itemId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the map that maps financial dimensions to <c>InventOnHand</c> objects.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to get the map.
    /// </param>
    /// <returns>
    /// A dimension map instance related to specified item.
    /// </returns>
    private Map getDimensionMap(ItemId _itemId)
    {
        if (!mapItem.exists(_itemId))
        {
            mapItem.insert(_itemId, new Map(Types::String,Types::Class));
        }

        return mapItem.lookup(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the financial inventory on-hand for an inventory dimension.
    /// </summary>
    /// <param name="_movement">
    /// The <c>InventMovement</c> that is processed by <c>InventUpd_Physical</c> or <c>InventUpd_Financial</c>
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table record.
    /// </param>
    /// <returns>
    /// An <c>InventOnHand</c> class instance with the financial inventory.
    /// </returns>
    public InventOnhand getOnhand(
        InventMovement  _movement,
        InventDim       _inventDim)
    {
        InventDim       inventDimFinancial;

        InventTrans     inventTrans;
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        Map mapDimension = this.getDimensionMap(_movement.itemId());

        inventDimFinancial.copyDimFinancial(_movement.inventDimGroupSetup(),_inventDim);

        str dimKey = inventDimFinancial.mapKey();

        if (!mapDimension.exists(dimkey))
        {
            _movement.inventDimGroupSetup().inventDimParmActiveFinancialInventory(inventDimParm);
        
            InventOnhand inventOnhand = InventOnhand::newFinancialUpdate(_movement,_inventDim);
            inventOnhand.parmUseInventSumDirectly(true);

            if (_movement.inventModelGroup().InclPhysicalValueInCost
                && (_movement.inventTable().ItemType != ItemType::Service))
            {
                // Physical values are included in average cost price calculation - deduct own contribution
                select forceselectorder sum(Qty), sum(PdsCWQty), sum(CostAmountPhysical), sum(CostAmountSecCurPhysical_RU)
                    from inventTrans
                    group by StatusIssue, StatusReceipt
                    where inventTrans.InventTransOrigin == _movement.inventTransOriginId()
                            && ((inventTrans.StatusReceipt == StatusReceipt::None && inventTrans.StatusIssue == StatusIssue::Deducted)
                            || (inventTrans.StatusReceipt == StatusReceipt::Received && inventTrans.StatusIssue == StatusIssue::None))
                        #InventDimExistsJoin(inventTrans.InventDimId,inventDim,inventDimFinancial,inventDimParm);

                InventSum inventSum = inventOnhand.inventSumWithoutAvailability(false);
                inventSum.subInventTransOnSum(inventTrans);   // deduct physical inventory and values
            }

            mapDimension.insert(dimkey,inventOnhand);
        }

        return mapDimension.lookup(dimKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        mapItem = new Map(Types::String,Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostOnhandCache construct()
    {
        return new InventCostOnhandCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>