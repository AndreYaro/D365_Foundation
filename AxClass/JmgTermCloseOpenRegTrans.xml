<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermCloseOpenRegTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgTermCloseOpenRegTrans</c> class is used to insert a stop job registration for an
/// active start job registration.
/// </summary>
class JmgTermCloseOpenRegTrans extends RunBaseBatch implements BatchRetryable
{
    JmgDate         closeDate;
    JmgTime         closeTime;
    JmgWorkerRecId  worker;
    JmgJobId        jobId;
    boolean         closeOkCheck;
    DialogField     fieldCloseDate;
    DialogField     fieldCloseTime;
    [SysObsolete('This field is not displayed to the form anymore', false, 18\06\2022)]
    DialogField     fieldCloseOkCheck;
    utcDateTime     jobRegDateTime;

    #define.CurrentVersion(5)
    #LOCALMACRO.CurrentList
        closeDate,
        closeTime,
        closeOkCheck,
        worker,
        jobId,
        jobRegDateTime
    #ENDMACRO

    #Define.closingString("@SYS15212")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStopRegisterationJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and posts a stopped registration job.
    /// </summary>
    /// <param name="_jmgJobBundle">
    /// The instance of the <c>JmgJobBundle</c> class that creates and posts the stopped registration job.
    /// </param>
    /// <param name="_closeDate">
    /// The <c>JmgDate</c> date that is used to post the stopped registration job.
    /// </param>
    /// <param name="_closeTime">
    /// The <c>JmgTime</c> time that is used to post the stopped registration job.
    /// </param>
    public void createStopRegisterationJob(JmgJobBundle _jmgJobBundle = new JmgJobBundle(worker, false, false, false), JmgDate _closeDate = closeDate, JmgTime _closeTime = closeTime)
    {
        // add current started job
        _jmgJobBundle.addJob(JmgJobTable::find(jobId));
        JmgTermJob job = JmgTermJob::construct(jobId);
        
        if (job.requireFeedbackInfo())
        {
            // set expected state to stop
            _jmgJobBundle.setFeedbackStatusOnActiveJobs(JmgFeedbackStatus::Stopped);

            // create and post stopped job
            _jmgJobBundle.makeFeedbackOnActiveJobs(_closeDate, _closeTime);
        }
        else
        {
            // create stop job if feedback info is not required
            _jmgJobBundle.stopActiveJobs();
        }

        info("@SCM:JmgTermCloseOpenRegTransSuccessful");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase   dialog =  super();

        dialog.caption("@SYS39344");

        fieldCloseDate      = dialog.addField(extendedtypestr(JmgDate));
        fieldCloseTime      = dialog.addField(extendedtypestr(JmgTime));

        fieldCloseDate.value(closeDate);
        fieldCloseTime.value(closeTime);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        closeDate    = fieldCloseDate.value();
        closeTime    = fieldCloseTime.value();
        
        closeOkCheck = true;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS39344";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJmgTermRegReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets references to the start job registration for a matching stop job registration is inserted.
    /// </summary>
    /// <param name="_jobId">
    /// A <c>JmgJobId</c> job ID value of the start job.
    /// </param>
    /// <param name="_worker">
    /// A <c>JmgWorkerRecId</c> worker value of the start job.
    /// </param>
    /// <param name="_regDateTime">
    /// A <c>UtcDateTime</c> dateTime value of the start job.
    /// </param>
    public void initJmgTermRegReferences(JmgJobId _jobId, JmgWorkerRecId _worker, UtcDateTime _regDateTime)
    {
        jobId           = _jobId;
        jobRegDateTime  = _regDateTime;
        worker          = _worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the caller form data source.
    /// </summary>
    /// <param name="_args">
    /// An instance of the <c>Args</c> class.
    /// </param>
    public void refreshCaller(Args _args)
    {
        JmgTermReg  jmgTermReg;

        if (_args.dataset() == tablenum(JmgTermReg))
        {
            jmgTermReg = _args.record();

            if (FormDataUtil::isFormDataSource(jmgTermReg))
            {
                FormDataUtil::getFormDataSource(jmgTermReg).research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (closeOkCheck)
        {
            JmgTermCloseOpenRegTrans::runOnServer(this.pack());
        }
        else
        {
            warning("@SCM:JmgTermCloseOpenRegTransFail");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>setDefaultCloseDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the current close date and time to the current UTC time stamp value.
    /// </summary>
    private void setDefaultCloseDateTime()
    {
        utcDateTime now = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), DateTimeUtil::getUserPreferredTimeZone());

        closeDate   = DateTimeUtil::date(now);
        closeTime   = DateTimeUtil::time(now);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version  = conpeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
            break;

            default : return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        return super() && this.validateJobCloseDateAndTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJobCloseDateAndTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the specified close date and time values against the original date and time values from
    /// the started registration.
    /// </summary>
    /// <returns>
    /// true if the specified close date and time is greater than the original start date and time values;
    /// otherwise, false.
    /// </returns>
    protected boolean validateJobCloseDateAndTime()
    {
        boolean     ret = true;
        utcDateTime jobCloseDateTime = DateTimeUtil::newDateTime(closeDate, closeTime);

        // The registration date time is stored in user preferred time zoe, so we need to adjust current date time value,
        // prior to perform any comparison operations
        jobCloseDateTime = DateTimeUtil::removeTimeZoneOffset(jobCloseDateTime, DateTimeUtil::getUserPreferredTimeZone());

        if (jobCloseDateTime < jobRegDateTime)
        {
            ret = checkFailed("@SYS106059");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JmgTermCloseOpenRegTrans construct()
    {
        return new JmgTermCloseOpenRegTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        JmgTermCloseOpenRegTrans    closeOpenRegTrans = JmgTermCloseOpenRegTrans::newFromArgs(_args);

        if (closeOpenRegTrans.prompt())
        {
            closeOpenRegTrans.runOperation();

            closeOpenRegTrans.refreshCaller(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    public static JmgTermCloseOpenRegTrans newFromArgs(Args _args)
    {
        JmgTermCloseOpenRegTrans    jmgTermCloseOpenRegTrans = JmgTermCloseOpenRegTrans::construct();
        JmgTermReg                  jmgTermReg;

        jmgTermCloseOpenRegTrans.getLast();

        if (_args && _args.dataset() == tablenum(JmgTermReg))
        {
            jmgTermReg = _args.record();

            jmgTermCloseOpenRegTrans.initJmgTermRegReferences(jmgTermReg.JobId, jmgTermReg.Worker, jmgTermReg.RegDateTime);
            jmgTermCloseOpenRegTrans.setDefaultCloseDateTime();
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return JmgTermCloseOpenRegTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPackedClass</Name>
				<Source><![CDATA[
    public static JmgTermCloseOpenRegTrans newFromPackedClass(container _packedClass)
    {
        JmgTermCloseOpenRegTrans jmgTermCloseOpenRegTrans;

        jmgTermCloseOpenRegTrans = JmgTermCloseOpenRegTrans::construct();
        jmgTermCloseOpenRegTrans.unpack(_packedClass);

        return jmgTermCloseOpenRegTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    public static void runOnServer(container _packedClass)
    {
        JmgTermCloseOpenRegTrans jmgTermCloseOpenRegTrans = JmgTermCloseOpenRegTrans::newFromPackedClass(_packedClass);

        jmgTermCloseOpenRegTrans.createStopRegisterationJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>