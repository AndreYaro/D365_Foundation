<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandCompositeCriteria</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventOnHandCompositeCriteria</c> class allows combining multiple inventory on hand criteria into a single object.
/// </summary>
public class InventOnHandCompositeCriteria extends InventOnHandCriteria
{
    List criteriaList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a criteria to the composite.
    /// </summary>
    /// <param name="_criteria">
    ///    The child criteria.
    /// </param>
    public void addCriteria(InventOnHandCriteria _criteria)
    {
        if (_criteria && _criteria.mustBeApplied())
        {
            criteriaList.addEnd(_criteria);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>affectedDimensions</Name>
				<Source><![CDATA[
    public Set affectedDimensions()
    {
        Set                     result = new Set(Types::Integer);
        Enumerator              criteriaEnumerator, dimensionSetEnumerator;

        criteriaEnumerator = criteriaList.getEnumerator();

        while (criteriaEnumerator.moveNext())
        {
            InventOnHandCriteria childCriteria = criteriaEnumerator.current();
            dimensionSetEnumerator = childCriteria.affectedDimensions().getEnumerator();

            while (dimensionSetEnumerator.moveNext())
            {
                result.add(dimensionSetEnumerator.current());
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMustBeApplied</Name>
				<Source><![CDATA[
    protected boolean calcMustBeApplied()
    {
        return !criteriaList.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if this instance of <c>InventOnHandCompositeCriteria</c> has a child criteria of the given class.
    /// </summary>
    /// <param name="_criteriaClassId">
    /// Class ID of the criteria to search for.
    /// </param>
    /// <returns>
    /// true if the instance has a child criteria of the given class; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Recursive method; if a child criteria is composite, the child's criteria are also searched.
    /// </remarks>
    public boolean containsCriteria(ClassId _criteriaClassId)
    {
        Enumerator enumerator = criteriaList.getEnumerator();

        while (enumerator.moveNext())
        {
            InventOnHandCriteria childCriteria = enumerator.current();
            InventOnHandCompositeCriteria childCompositeCriteria = childCriteria as InventOnHandCompositeCriteria;
            SysDictClass childDictClass = new SysDictClass(classIdGet(childCriteria));

            if (childCompositeCriteria && childCompositeCriteria.containsCriteria(_criteriaClassId))
            {
                return true;
            }
            else if (childDictClass && childDictClass.isExtending(_criteriaClassId))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>criteriaList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the list of on-hand criteria objects for this composite criteria.
    /// </summary>
    /// <returns>
    ///    The list of on-hand criteria objects.
    /// </returns>
    protected List criteriaList()
    {
        return criteriaList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doApplyToOnHandQuery</Name>
				<Source><![CDATA[
    protected void doApplyToOnHandQuery(InventOnHandQuery _onHandQuery)
    {
        Enumerator enumerator = criteriaList.getEnumerator();

        while (enumerator.moveNext())
        {
            InventOnHandCriteria childCriteria = enumerator.current();
            childCriteria.applyToOnHandQuery(_onHandQuery);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the class instance.
    /// </summary>
    protected void init()
    {
        criteriaList = new List(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatchedByInventDim</Name>
				<Source><![CDATA[
    public boolean isMatchedByInventDim(InventDim _inventDim)
    {
        Enumerator enumerator = criteriaList.getEnumerator();

        while (enumerator.moveNext())
        {
            InventOnHandCriteria childCriteria = enumerator.current();

            if (!childCriteria.isMatchedByInventDim(_inventDim))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAppliedToQuery</Name>
				<Source><![CDATA[
    public boolean mustBeAppliedToQuery(InventOnHandQuery _onHandQuery)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventOnHandCompositeCriteria construct()
    {
        return new InventOnHandCompositeCriteria();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventOnHandCompositeCriteria</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventOnHandCompositeCriteria</c> class.
    /// </returns>
    public static InventOnHandCompositeCriteria newStandard()
    {
        InventOnHandCompositeCriteria   inventOnHandCompositeCriteria = InventOnHandCompositeCriteria::construct();

        return inventOnHandCompositeCriteria;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
