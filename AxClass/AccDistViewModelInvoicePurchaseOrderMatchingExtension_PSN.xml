<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccDistViewModelInvoicePurchaseOrderMatchingExtension_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_ProductOrder), SourceDocument_ProductOrder::PurchaseOrder, classStr(AccountingDistributionFormView), classStr(AccDistFormViewExtension_PSN))]
[SourceDocumentEnumClassExtAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice, classStr(AccountingDistributionFormView), classStr(AccDistFormViewExtension_PSN))]
public class AccDistViewModelInvoicePurchaseOrderMatchingExtension_PSN extends AccDistViewModelExtension
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    protected final void subscribe()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector))
            && FeatureStateProvider::isFeatureEnabled(AccDistInvoicePurchaseOrderMatchingFeature_PSN::instance()))
        {
            accountingDistributionViewModel.accDistWritingEventHandler += eventhandler(this.accountingDistributionWriting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentVendorInvoiceReferencedByPurchaseOrder</Name>
				<Source><![CDATA[
    private boolean isDocumentVendorInvoiceReferencedByPurchaseOrder(AccountingDistribution _accountingDistribution)
    {
        boolean documentIsVendorInvoiceReferencedByPO;

        if (this.getSourceDocumentType(_accountingDistribution.SourceDocumentLine) == enumStr(SourceDocumentLine_VendorInvoice))
        {
            AccountingDistribution accountingDistributionReference = AccountingDistribution::find(_accountingDistribution.ReferenceDistribution);

            documentIsVendorInvoiceReferencedByPO = this.getSourceDocumentType(accountingDistributionReference.SourceDocumentLine) == enumStr(SourceDocumentLine_ProductOrder);
        }

        return documentIsVendorInvoiceReferencedByPO;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocumentType</Name>
				<Source><![CDATA[
    private EnumName getSourceDocumentType(SourceDocumentLineRecId _sourceDocumentLine)
    {
        return SourceDocumentLine::find(_sourceDocumentLine).TypeEnumName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionsForLockedPurchaseDimensionsFeature</Name>
				<Source><![CDATA[
    private container validateDimensionsForLockedPurchaseDimensionsFeature(LedgerDimensionAccount _newLedgerDimension,  LedgerDimensionAccount _oldLedgerDimension)
    {
        container newAndOldLedgerDimension = [_newLedgerDimension, _oldLedgerDimension];
        container warningMessages = AccDistInvoicePurchaseOrderMatchingCache_PSN::getValue(newAndOldLedgerDimension);

        if (!warningMessages)
        {
            warningMessages = this.validateDimensionsForLockedPurchaseDimensionCalculation(_newLedgerDimension, _oldLedgerDimension);
            AccDistInvoicePurchaseOrderMatchingCache_PSN::insertValue(newAndOldLedgerDimension, warningMessages);
        }

        return warningMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDimensionsForLockedPurchaseDimensionCalculation</Name>
				<Source><![CDATA[
    private container validateDimensionsForLockedPurchaseDimensionCalculation(LedgerDimensionAccount _newLedgerDimension, LedgerDimensionAccount _oldLedgerDimension)
    {
        container warningMessages;

        if (_newLedgerDimension != _oldLedgerDimension
            && !LedgerDimensionFacade::areEqual(_newLedgerDimension, _oldLedgerDimension))
        {
            DimensionStorageSegmentCollection invalidSegments = AccDistInvoicePurchaseOrderMatching_PSN::findInvalidAttributeValuesForPurchFixedDimensionFeature(_oldLedgerDimension, _newLedgerDimension);
            
            if (invalidSegments)
            {
                for (int collectionIndex = 1; collectionIndex <= invalidSegments.elements(); collectionIndex++)
                {
                    DimensionStorageSegment dimensionStorageSegment = invalidSegments.getSegment(collectionIndex);
                    
                    DimensionAttribute dimensionAttribute = DimensionAttribute::find(dimensionStorageSegment.parmDimensionAttributeId());

                   warningMessages += strFmt("@AccountsPayable:InvoiceMatchingValidationError", dimensionAttribute.Name);
                }
            }
         }

         return warningMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingDistributionWriting</Name>
				<Source><![CDATA[
    internal void accountingDistributionWriting()
    {
        if (FeatureStateProvider::isFeatureEnabled(AccDistInvoicePurchaseOrderMatchingFeature_PSN::instance())
            && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            AccountingDistribution accountingDistribution = accountingDistributionViewModel.parmActiveAccountingDistribution();
            AccountingDistribution accountingDistributionOrig = AccountingDistribution::find(accountingDistribution.ReferenceDistribution);

            if (accountingDistribution.ReferenceDistribution
                && this.isDocumentVendorInvoiceReferencedByPurchaseOrder(accountingDistribution))
            {
                container warningMessages = this.validateDimensionsForLockedPurchaseDimensionsFeature(accountingDistribution.LedgerDimension, accountingDistributionOrig.LedgerDimension);
                
                if (warningMessages)
                {
                    for (int messageIndex = 1; messageIndex <= conLen(warningMessages); messageIndex++)
                    {
                        warning(conPeek(warningMessages, messageIndex));
                    }
                    AccountingDistribution lastSavedAccountingDistribution = accountingDistribution.orig();

                    accountingDistribution.LedgerDimension = lastSavedAccountingDistribution.LedgerDimension;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>