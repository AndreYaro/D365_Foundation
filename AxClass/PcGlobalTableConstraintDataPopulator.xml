<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcGlobalTableConstraintDataPopulator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Populates the data source of the user defined table constraint edit form.
/// </summary>
class PcGlobalTableConstraintDataPopulator
{
    PCGlobalTableConstraintDataSourcePop dataSourcePopulator;

    Map columnNameToDataSource;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        dataSourcePopulator = PCGlobalTableConstraintDataSourcePop::construct();

        columnNameToDataSource = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColumnNameToDataSource</Name>
				<Source><![CDATA[
        public Map parmColumnNameToDataSource(Map _columnNameToDataSource = columnNameToDataSource)
    {
        columnNameToDataSource = _columnNameToDataSource;

        return columnNameToDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataSourcePopulator</Name>
				<Source><![CDATA[
        public PCGlobalTableConstraintDataSourcePop parmDataSourcePopulator(PCGlobalTableConstraintDataSourcePop _dataSourcePopulator = dataSourcePopulator)
    {
        dataSourcePopulator = _dataSourcePopulator;

        return dataSourcePopulator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populate</Name>
				<Source><![CDATA[
/// <summary>
    /// Populates the form data sources from the table constraint definition.
    /// </summary>
    /// <param name="_tableConstraintDefinition">
    /// A table constraint definition.
    /// </param>
    /// <param name="_formRun">
    /// A <c>FormRun</c> instance.
    /// </param>
    /// <returns>
    /// The row data map
    /// </returns>
    public Map populate(PCGlobalTableConstraintDefinition _tableConstraintDefinition, FormRun _formRun)
    {
        int             i;
        int             dataSourceCount;
        str             datasourceColumnName;
        FormDataSource  formDataSource;

        PCContractNotNull::assertRecord(_tableConstraintDefinition, funcName());
        PCContractNotNull::assertObject(_formRun, funcName());

        dataSourceCount = _formRun.dataSourceCount();

        for (i = 1; i <= dataSourceCount; i++)
        {
            formDataSource          = _formRun.dataSource(i);
            datasourceColumnName    = formDataSource.name();

            // filter out data sources which are not used for the content of the table constraint
            if (PCTableConstraintColumnDefinition::findByNameAndDefinition(datasourceColumnName, _tableConstraintDefinition.RecId).RecId != 0)
            {
                columnNameToDataSource.insert(datasourceColumnName, formDataSource);
            }
        }

        return dataSourcePopulator.populate(_tableConstraintDefinition, columnNameToDataSource);
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCGlobalTableConstraintDataPopulator construct()
    {
        return new PCGlobalTableConstraintDataPopulator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>