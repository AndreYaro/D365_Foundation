<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxProj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TaxProj extends Tax
{
    SalesCalcTax_ProjProposal   salesCalcTax;

    TableId             lineTableId;
    RecId               lineRecId;

    MarkupTrans         markupTrans;

    NoYes               markupAdminister;
    TransDate           calculationDate;

    private boolean isEnableOrigInvoiceDateForCreditNoteFlight = FeatureStateProvider::isFeatureEnabled(ProjCreditNoteUseOrigInvoiceDateForExchRateFlight::instance());
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    TaxAmount calc()
    {
        TaxAmount                       taxAmount;
        TaxBase                         baseInTotal;
        Amount                          transLineAmount;
        Amount                          baseAmount;
        Percent                         cashDisc = CashDisc::find(salesCalcTax.parmProjProposalJour().CashDiscCode).Percent;
        TaxCalculationAdjustment        taxCalculationAdjustment;
        boolean                         success = true;
        // <GEEU>
        ProjProposalJour                projProposalJour;
        ProjInvoiceJour                 projInvoiceJour;
        // </GEEU>
        // <GBR>
        boolean                         brazilianParametersAreEnabled;
        // </GBR> 

        if (!headingRecId)
        {
            return 0;
        }

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            taxAmount = this.calcUsingTaxIntegration();
            return taxAmount;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        Microsoft.Dynamics.Ax.Xpp.ErrorException errorEx;
        Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource taxEventSourceLog = Microsoft.Dynamics.Tax.Instrumentation.TaxEventSource::Log;
        System.Diagnostics.Stopwatch stopWatch;
        guid identifier;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();
            identifier = newGuid();

            if (TaxCalculationInstrumentationToggle::instance().isEnabled())
            {
                taxEventSourceLog.CalculateTaxStart(identifier, TaxUncommitted::callStackInfo());
            }
            else
            {
                taxEventSourceLog.CalculateTaxStart(identifier);
            }

            stopWatch.Start();

            TransDate invoiceDate = taxDate;
            projProposalJour = salesCalcTax.parmProjProposalJour();
            projInvoiceJour = salesCalcTax.parmProjInvoiceJourOrig();
            this.setTaxDateToInvoiceDateIfCreditNote(projProposalJour, projInvoiceJour);

            // <GBR>
            brazilianParametersAreEnabled = BrazilParameters::isEnabled();

            if (brazilianParametersAreEnabled)
            {
                useAndConsumption_BR = salesCalcTax.useAndConsumption_BR();
            }
            // </GBR>

            if (!skipTableMarkup)
            {
                salesCalcTax.initCursorMarkupHeader(salesCalcTax.markupHeaderTableId(),
                                                    salesCalcTax.markupHeaderRecID());
                this.calcMarkup();
            }

            salesCalcTax.initCursor();
            while (salesCalcTax.nextLine())
            {
                lineTableId = salesCalcTax.transTableId();
                lineRecId   = salesCalcTax.transRecId();
                transLineAmount = salesCalcTax.transLineAmount();
                baseAmount  = -transLineAmount;
                baseInTotal  += baseAmount;
                if (this.taxParameters().TaxLessCashDisc)
                {
                    baseAmount -= baseAmount * cashDisc / 100;
                }

                // <GEEU>
                this.parmVatRegData_W();
                // </GEEU>

                this.insertLineInInternal(baseAmount,
                                          salesCalcTax.transQty() * -1,
                                          salesCalcTax.transSalesUnit(),
                                          salesCalcTax.transItemId(),
                                          salesCalcTax.transPcsPrice(),
                                          salesCalcTax.transDimension(),
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(salesCalcTax.operationAccount(), salesCalcTax.transDimension()),
                                          salesCalcTax.operationPosting());

                // <GBR>
                if (brazilianParametersAreEnabled)
                {
                    this.updateTaxationOriginOnTaxWorkTrans_BR(salesCalcTax.taxationOrigin_BR());
                }
                // </GBR>

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();
                    this.saveInProcessTransaction();
                    if (!taxCalculateTotal &&
                        salesCalcTax.exchRate() != ExchangeRateHelper::exchRate(sourceCurrencyCode, invoiceDate))
                    {
                        this.adjustAmountLine(salesCalcTax.exchRate(),0);
                    }
                }

                if (salesCalcTax.transTaxGroup() && SalesCalcTax.transTaxItemGroup())
                {
                    taxableDocumentLines++;
                }
                if (salesCalcTax.projTrans().itemType() == ProjOrigin::SalesOrder
                 && !skipLineMarkup)
                {
                    this.calcMarkup();
                }
            }

            if (! this.checkTaxCodesInTotal())
            {
                throw error("@SYS22772");
            }

            if (taxCalculateTotal)
            {
                this.insertTotalInInternal(cashDisc);
                taxAmount = this.calcTax();
                this.saveTotalInProcessTransaction();

                if (salesCalcTax.exchRate() != ExchangeRateHelper::exchRate(sourceCurrencyCode, invoiceDate))
                {
                    this.adjustAmount(salesCalcTax.exchRate(),0);
                }
            }
            this.roundTaxOnTaxGroup();

            taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
            if (taxCalculationAdjustment)
            {
                taxCalculationAdjustment.loadTaxAdjustments();
            }

            this.calculateBankTaxExchangeRate(projProposalJour, projInvoiceJour);

            taxAmount = this.totalTaxAmount();
        }
        catch (errorEx) // errorEx is the same as Exception::Error
        {
            success = false;
            taxEventSourceLog.TaxProcessError(guid2Str(newGuid()),
                                              errorEx.Message,
                                              errorEx.StackTrace,
                                              methodStr(TaxProj, calc));
            throw Exception::Error;
        }
        finally
        {
            stopWatch.Stop();
            select count(RecId) from taxWorkTrans;
            taxEventSourceLog.CalculateTaxStop(identifier,
                                               SysCountryRegionCode::countryInfo(),
                                               tableId2Name(headingTableId),
                                               TaxTelemetryConstants::salesTax,
                                               stopWatch.ElapsedMilliseconds,
                                               taxableDocumentLines,
                                               markupTransTaxableDocumentLines,
                                               taxWorkTrans.RecId,
                                               false,
                                               headingTableId,
                                               tableId2Name(headingTableId),
                                               headingRecId,
                                               success);
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBankTaxExchangeRate</Name>
				<Source><![CDATA[
    private void calculateBankTaxExchangeRate(
        ProjProposalJour _projProposalJour,
        ProjInvoiceJour _projInvoiceJour)
    {
        boolean isTaxSpecificExchRateEnabledByBusinessProcess = TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByBusinessProcess(TaxIntegrationBusinessProcess::Project);

        if (this.parmUseTaxExchangeRate()
            && (this.parmAccountingCurrency() != this.getTransactionalCurrency()
                || isTaxSpecificExchRateEnabledByBusinessProcess))
        {
            if (isTaxSpecificExchRateEnabledByBusinessProcess)
            {
                VatDueDate_W vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(this.headingTableId(), this.headingRecId());

                if (!vatDueDate)
                {
                    if (_projInvoiceJour)
                    {
                        vatDueDate = TaxSpecificExchangeRate::getDateOfVATRegister(_projInvoiceJour.TableId, _projInvoiceJour.RecId);
                    }
                    else
                    {
                        vatDueDate = conPeek(this.parmVatRegData_W(), 1);
                        if (!vatDueDate)
                        {
                            vatDueDate = this.parmTaxDate();
                        }
                    }
                }

                TaxSpecificExchangeRateHelper taxSpecificExchangeRateHelper = new TaxSpecificExchangeRateHelper(
                    this.headingTableId(),
                    this.headingRecId(),
                    TransactionType::Sales,
                    this.getTransactionalCurrency(),
                    vatDueDate);

                taxSpecificExchangeRateHelper.maintainAccountingCurrencyTaxSpecificExchangeRate();
                taxSpecificExchangeRateHelper.maintainReportingCurrencyTaxSpecificExchangeRate();

                TmpTaxWorkTrans localTaxWorkTrans;
                localTaxWorkTrans.setTmpData(taxWorkTrans);

                while select CurrencyCode from localTaxWorkTrans
                    group by localTaxWorkTrans.CurrencyCode
                {
                    taxSpecificExchangeRateHelper.maintainTaxSpecificExchangeRate(localTaxWorkTrans.CurrencyCode);
                }
            }
            else
            {
                SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(this.headingTableId(), this.headingRecId());

                if (!salesTaxTransactionExchangeRate)
                {
                    if (_projInvoiceJour)
                    {
                        salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(_projInvoiceJour.TableId, _projInvoiceJour.RecId);
                        SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(_projProposalJour.TableId, _projProposalJour.RecId,
                            _projProposalJour.CurrencyId, salesTaxTransactionExchangeRate.SalesTaxExchangeRate, this.parmTaxDate(), NoYes::Yes);
                    }
                    else
                    {
                        SalesTaxExchangeRateHelper::maintainSalesTaxTransactionExchangeRate(_projProposalJour,
                            this.getTransactionalCurrency(), TransactionType::Sales, this.parmTaxDate());
                    }
                }
            }

            this.calculateTaxDifferenceAmount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxDateToInvoiceDateIfCreditNote</Name>
				<Source><![CDATA[
    private void setTaxDateToInvoiceDateIfCreditNote(
        ProjProposalJour _projProposalJour = salesCalcTax.parmProjProposalJour(),
        ProjInvoiceJour _projInvoiceJour = salesCalcTax.parmProjInvoiceJourOrig())
    {
        if (_projProposalJour)
        {
            // If <c>ProjCreditNoteUseOrigInvoiceDateForExchRateFlight</c> flight is enabled and transaction is credit note.
            // then system considers invoice date of original transaction for tax calculation of credit note.
            if (_projInvoiceJour.InvoiceDate && isEnableOrigInvoiceDateForCreditNoteFlight)
            {
                taxDate = _projInvoiceJour.InvoiceDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcUsingTaxIntegration</Name>
				<Source><![CDATA[
    private TaxAmount calcUsingTaxIntegration()
    {
        ProjProposalJour projProposalJour = salesCalcTax.parmProjProposalJour();
        TaxIntegrationDocumentObject document = TaxIntegrationDocumentObject::constructWithRecord(projProposalJour);

        this.setFieldsForLegacyTax();
        this.setFieldsForTaxIntegrationDocumentObject(document);

        TaxIntegrationFacade::calculate(document);

        boolean isTaxIntTaxAdjustReportDiffAmountFlightEnabled = TaxIntegrationTaxAdjustReportDiffAmountFlight::instance().isEnabled();
        if (!isTaxIntTaxAdjustReportDiffAmountFlightEnabled)
        {
            this.calculateBankTaxExchangeRate(
                projProposalJour,
                salesCalcTax.parmProjInvoiceJourOrig());
        }

        TaxCalculationAdjustment taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        if (isTaxIntTaxAdjustReportDiffAmountFlightEnabled)
        {
            this.calculateBankTaxExchangeRate(
                projProposalJour,
                salesCalcTax.parmProjInvoiceJourOrig());
        }

        return this.totalTaxAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForLegacyTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for legacy tax.
    /// </summary>
    /// <remarks>
    /// This method is called by calcUsingTaxIntegration().
    /// </remarks>
    protected void setFieldsForLegacyTax()
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.parmVatRegData_W(salesCalcTax.vatRegData_W());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsForTaxIntegrationDocumentObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields for tax integration document object.
    /// </summary>
    /// <param name = "_document">The tax integration document object.</param>
    protected void setFieldsForTaxIntegrationDocumentObject(TaxIntegrationDocumentObject _document)
    {
        _document.setCompany(this.getCompany());
        _document.setHeadingTableId(this.headingTableId());
        _document.setHeadingRecId(this.headingRecId());

        _document.setIncludingTax(NoYes::No);

        this.setTaxDateToInvoiceDateIfCreditNote();
        _document.setTransactionDate(this.taxDate);
        _document.setInvoiceDate(salesCalcTax.invoiceDate());

        _document.setSign(-1);
        _document.setSource(TaxModuleType::Project);
        _document.setBusinessProcess(TaxIntegrationBusinessProcess::Project);
        _document.setPrepaid(this.isPrePayment());
        _document.setEUROTriangulation(this.getTriangulation());

        _document.setLegacyTax(this);
        _document.setShouldSkipDocumentCharge(skipTableMarkup);
        _document.setShouldSkipLineCharge(skipLineMarkup);

        ExchRate exchRateProjProposal = salesCalcTax.exchRate();
        if (exchRateProjProposal != ExchangeRateHelper::exchRate(sourceCurrencyCode, salesCalcTax.invoiceDate()))
        {
            _document.setAccountingCurrencyFixedExchangeRate(exchRateProjProposal);
        }

        ProjProposalJour projProposalJour = salesCalcTax.parmProjProposalJour();
        Percent cashDisc = CashDisc::find(projProposalJour.CashDiscCode).Percent;
        _document.setCashDiscountPercent(cashDisc);
        _document.setCashDiscountAmount(projProposalJour.CashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcMarkup</Name>
				<Source><![CDATA[
    protected void calcMarkup()
    {
        TaxAmount   taxAmount;
        NoYes       moreMarkup;
        Amount      baseAmount;
        Percent     cashDisc = CashDisc::find(salesCalcTax.parmProjProposalJour().CashDiscCode).Percent;

        moreMarkup  = true;
        while (moreMarkup)
        {
            markupTrans = salesCalcTax.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister= NoYes::Yes;

                baseAmount = salesCalcTax.markupAmount() * -1;

                if (this.taxParameters().TaxLessCashDisc)
                {
                    baseAmount -= baseAmount * cashDisc / 100;
                }

                this.insertLineInInternal(baseAmount,
                                          0,
                                          '',
                                          '',
                                          0,
                                          salesCalcTax.transDimension(),
                                          LedgerDimensionFacade::serviceCreateLedgerDimension(salesCalcTax.operationAccountMarkup(), salesCalcTax.transDimension()),
                                          salesCalcTax.operationPostingMarkup());

                if (taxCalculateLine)
                {
                    taxAmount = this.calcTax();
                    this.saveInProcessTransaction();
                }

                if (SalesCalcTax.transTaxGroup() && SalesCalcTax.transTaxItemGroup())
                {
                    markupTransTaxableDocumentLines++;
                }
            }
            else
            {
                markupAdminister= NoYes::No;
                moreMarkup  = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxCodesByLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks tax codes on the intersection
    /// </summary>
    /// <returns>
    ///     True if the intersection is correct, otherwise false
    /// </returns>
    protected boolean checkTaxCodesByLine()
    {
        TaxTable         taxTable;
        TaxCode          lastTaxCode        = '';

        boolean ret;

        ret = super();

        // <GBR>
        If (BrazilParameters::isEnabled() && (salesCalcTax.projTrans().itemType() != ProjOrigin::SalesOrder))
        {
            while select taxWorkTrans
                order by TaxCode
                where taxWorkTrans.SourceTableId    == this.sourceTableId() &&
                      taxWorkTrans.SourceRecId      == this.sourceRecId() &&
                      taxWorkTrans.IsDeleted        == NoYes::No
            {
                select IncludedTax_BR, RetainedTax_BR from taxTable
                    where taxTable.TaxCode == taxWorkTrans.TaxCode;

                if (lastTaxCode != taxWorkTrans.TaxCode)
                {
                    if (!taxTable.IncludedTax_BR && !taxTable.RetainedTax_BR)
                    {
                        ret = checkFailed("@SYS4081685");
                    }
                }
            }
        }
        // </GBR>

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markup</Name>
				<Source><![CDATA[
    protected void markup(InventTransId  _transId)
    {
        NoYes  moreMarkup;

        moreMarkup = true;
        while (moreMarkup)
        {
            markupTrans = salesCalcTax.nextMarkupLine();
            if (markupTrans)
            {
                markupAdminister = NoYes::Yes;

                this.insertIntersection(salesCalcTax.markupTaxGroup(),
                                        salesCalcTax.markupTaxItemGroup(),
                                        _transId,
                                        markupTrans.Txt,
                                        taxDate);

                if (! this.checkTaxCodesByLine())
                {
                    throw error("@SYS22772");
                }
            }
            else
            {
                markupAdminister    = NoYes::No;
                moreMarkup          = false;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesCalcTax _salesCalcTax)
    {
        TransDate               taxCalculationDate;

        salesCalcTax            = _salesCalcTax;
        taxModuleType           = TaxModuleType::Project;
        headingTableId          = salesCalcTax.tableId();
        headingRecId            = salesCalcTax.recID();
        sourceCurrencyCode      = salesCalcTax.currencyCode();
        triangulation           = salesCalcTax.triangulation();
        taxDate                 = salesCalcTax.invoiceDate();

        super();

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            return;
        }

        // <GEEU>
        this.parmVatRegData_W(_salesCalcTax.vatRegData_W());
        // </GEEU>
        salesCalcTax.initCursorMarkupHeader(salesCalcTax.markupHeaderTableId(),
                                            salesCalcTax.markupHeaderRecID());
        this.markup('');

        salesCalcTax.initCursor();
        while (salesCalcTax.nextLine())
        {
            if (salesCalcTax.projTrans() && salesCalcTax.projTrans().hasTaxBuffer())
            {
                taxCalculationDate = this.determineTaxCalculationDateByTrans();
            }
            else
            {
                taxCalculationDate         = salesCalcTax.invoiceDate();
            }
            
            this.setReasonTableRefRecIdBeingCalculated(salesCalcTax.getLineReasonTableRefRecId(), salesCalcTax.getHeaderReasonTableRefRecId());

            lineTableId = salesCalcTax.transTableId();
            lineRecId   = salesCalcTax.transRecId();

            this.insertIntersection(salesCalcTax.transTaxGroup(),
                                    salesCalcTax.transTaxItemGroup(),
                                    salesCalcTax.transTransId(),
                                    salesCalcTax.transItemId(),
                                    taxCalculationDate);

            if (! this.checkTaxCodesByLine())
            {
                throw error("@SYS22772");
            }

            if (salesCalcTax.projTrans() && salesCalcTax.projTrans().hasTaxBuffer() && salesCalcTax.projTrans().itemType() == ProjOrigin::SalesOrder)
            {
                this.markup(salesCalcTax.transTransId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineTaxCalculationDateByTrans</Name>
				<Source><![CDATA[
    internal TransDate determineTaxCalculationDateByTrans(ProjTrans _projTrans = salesCalcTax.projTrans())
    {
        TransDate taxCalculationDate;
        if (_projTrans.itemType() == ProjOrigin::SalesOrder)
        {
            if (TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate)
            {
                taxCalculationDate  =  _projTrans.getTaxTransDate();
            }
            else
            {
                taxCalculationDate = salesCalcTax.invoiceDate();
            }
        }
        else
        {
            boolean isCreditNote;
            TransDate origInvoiceDate;

            [isCreditNote, origInvoiceDate] = this.checkIsCreditNoteByProjTrans(_projTrans);

            TaxCalculationProjDateType taxCalcDateType = ProjParameters::find().TaxCalcDateType;

            if (isCreditNote && origInvoiceDate && taxCalcDateType == TaxCalculationProjDateType::InvoiceDate)
            {
                taxCalculationDate = origInvoiceDate;
            }
            else if (isCreditNote || taxCalcDateType == TaxCalculationProjDateType::ProjectDate)
            {
                taxCalculationDate = _projTrans.getTaxTransDate();
            }
            else
            {
                taxCalculationDate = salesCalcTax.invoiceDate();
            }
        }
        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsCreditNoteByProjTrans</Name>
				<Source><![CDATA[
    private container checkIsCreditNoteByProjTrans(ProjTrans _projTrans = salesCalcTax.projTrans())
    {
        boolean isMarkedForCreditNote = false;
        TransDate invoiceDate;
        ProjTrans projTrans = _projTrans;
        if (projTrans && projTrans.transId())
        {
            ProjTransPosting projTransPosting = ProjTransPosting::findTransId(projTrans.transId());
            switch(ProjTransPosting.ProjTransType)
            {
                case(ProjTransType::OnAccount):
                    ProjOnAccTransSale projOnAccTransSale = ProjOnAccTransSale::findFirstByTransIdAndFundingSource(projTransPosting.TransId, projTransPosting.ProjFundingSource);
                    isMarkedForCreditNote = projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal;

                    if (projOnAccTransSale && isMarkedForCreditNote && isEnableOrigInvoiceDateForCreditNoteFlight)
                    {
                        invoiceDate = ProjInvoiceOnAcc::findTransId(projOnAccTransSale.TransId).InvoiceDate;
                    }
                    break;

                case(ProjTransType::Cost):
                    ProjCostTransSale projCostTransSale = ProjCostTransSale::findByTransIdFundingSourceId(projTransPosting.TransId, projTransPosting.ProjFundingSource);
                    isMarkedForCreditNote = projCostTransSale.TransStatus == ProjTransStatus::CreditnoteProposal;

                    if (projCostTransSale && isMarkedForCreditNote && isEnableOrigInvoiceDateForCreditNoteFlight)
                    {
                        invoiceDate = ProjInvoiceCost::findTransId(projCostTransSale.TransId).InvoiceDate;
                    }
                    break;

                case(ProjTransType::Hour):
                    ProjEmplTransSale projEmplTransSale = ProjEmplTransSale::findByTransIdFundingSourceId(projTransPosting.TransId, projTransPosting.ProjFundingSource);
                    isMarkedForCreditNote = projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal;

                    if (projEmplTransSale && isMarkedForCreditNote && isEnableOrigInvoiceDateForCreditNoteFlight)
                    {
                        invoiceDate = ProjInvoiceEmpl::findTransId(projEmplTransSale.TransId).InvoiceDate;
                    }
                    break;

                case (ProjTransType::Item):
                    ProjItemTransSale projItemTransSale = ProjItemTransSale::findByTransIdFundingSourceId(ProjTransPosting.TransId, ProjTransPosting.ProjFundingSource);
                    isMarkedForCreditNote = projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal;

                    if (projItemTransSale && isMarkedForCreditNote && isEnableOrigInvoiceDateForCreditNoteFlight)
                    {
                        invoiceDate = ProjInvoiceItem::findTransId(projItemTransSale.ProjTransId).InvoiceDate;
                    }
                    break;

                case (ProjTransType::Revenue):
                    ProjRevenueTransSale projRevenueTransSale = ProjRevenueTransSale::findByTransIdFundingSourceId(ProjTransPosting.TransId, ProjTransPosting.ProjFundingSource);
                    isMarkedForCreditNote = projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal;

                    if (projRevenueTransSale && isMarkedForCreditNote && isEnableOrigInvoiceDateForCreditNoteFlight)
                    {
                        invoiceDate = ProjInvoiceRevenue::findTransId(projRevenueTransSale.TransId).InvoiceDate;
                    }
                    break;
            }
        }
        
        return [isMarkedForCreditNote, invoiceDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsCreditNote</Name>
				<Source><![CDATA[
    protected container checkIsCreditNote()
    {
        return this.checkIsCreditNoteByProjTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension_RU</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount offsetLedgerDimension_RU(TaxLedgerAccountGroup _taxLedgerAccountGroup)
    {
        LedgerDimensionDefaultAccount defaultAccount;

        if (TaxParameters::find().TaxSpecPosting_RU == NoYes::Yes)
        {
            defaultAccount = _taxLedgerAccountGroup.TaxOutgoingOffsetLedgerDimension_RU;

            if (!defaultAccount)
            {
                throw error(strFmt("@GLS103651", _taxLedgerAccountGroup.TaxAccountGroup));
            }
        }
        else
        {
            defaultAccount = super(_taxLedgerAccountGroup);
        }

        return defaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    /// <remarks>
    /// This method is designed to be overridden by derived classes. The base implementation returns 0.
    /// </remarks>
    public RecId sourceRecId()
    {
        if (markupAdminister)
        {
            return markupTrans.RecId;
        }
        else
        {
            return lineRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    /// <remarks>
    /// This method is overridden by derived classes. The base implementation returns 0.
    /// </remarks>
    public RefTableId sourceTableId()
    {
        if (markupAdminister)
        {
            return markupTrans.TableId;
        }
        else
        {
            return lineTableId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    public boolean useSalesTaxAdjustments()
    {
        boolean useSalesTaxAdjustments;

        useSalesTaxAdjustments = salesCalcTax && salesCalcTax.useSalesTaxAdjustments();

        return useSalesTaxAdjustments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesCalcTax</Name>
				<Source><![CDATA[
    internal SalesCalcTax_ProjProposal salesCalcTax()
    {
        return salesCalcTax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>