<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SimulationBalanceClean_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class deletes <c>DimensionFocusBalanceSim_IT</c> or <c>GeneralLedgerBalanceSim_IT</c> records having zero amount.
/// </summary>
public class SimulationBalanceClean_IT extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns true.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@ExtendedItallianLocalization:SimulationBalanceCleaning";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>DimensionFocusBalanceSim</c> or <c>GeneralLedgerBalanceSim_IT</c> records having zero amount.
    /// </summary>
    public void run()
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceSim_IT generalLedgerBalanceSim;

            delete_from generalLedgerBalanceSim
                where generalLedgerBalanceSim.DebitAccountingCurrencyAmount == 0
                    && generalLedgerBalanceSim.DebitReportingCurrencyAmount == 0
                    && generalLedgerBalanceSim.CreditAccountingCurrencyAmount == 0
                    && generalLedgerBalanceSim.CreditReportingCurrencyAmount == 0;
        }
        else
        {
            DimensionFocusBalanceSim_IT dimensionFocusBalanceSim;

            delete_from dimensionFocusBalanceSim
                where dimensionFocusBalanceSim.DebitAccountingCurrencyAmount == 0
                    && dimensionFocusBalanceSim.DebitReportingCurrencyAmount == 0
                    && dimensionFocusBalanceSim.CreditAccountingCurrencyAmount == 0
                    && dimensionFocusBalanceSim.CreditReportingCurrencyAmount == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SimulationBalanceClean_IT construct()
    {
        return new SimulationBalanceClean_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SimulationBalanceClean_IT simulationBalanceClean = SimulationBalanceClean_IT::construct();

        if (simulationBalanceClean.prompt())
        {
            simulationBalanceClean.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>