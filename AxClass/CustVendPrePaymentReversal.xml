<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPrePaymentReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendPrePaymentReversal
{
    boolean         invoiceAmountSignAdjusted;
    ModuleCustVend  module;
    Counter         settlementGroupPlaceHolder;

    CustVendTransSettlement custVendTransSettlement;
    CustVendSettle          custVendSettle;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findPrePaymentSourceRecId</Name>
				<Source><![CDATA[
    private RecId findPrePaymentSourceRecId(CustVendTrans _custVendTransPrepayment)
    {
        LedgerJournalTrans ledgerJournalTrans;

        if (_custVendTransPrepayment.TableId == tablenum(CustTrans))
        {
            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher == _custVendTransPrepayment.Voucher
                    && ledgerJournalTrans.TransDate == _custVendTransPrepayment.TransDate
                    && ledgerJournalTrans.CustTransId == _custVendTransPrepayment.RecId;
        }
        else if (_custVendTransPrepayment.TableId == tableNum(VendTrans))
        {
            select firstonly RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher == _custVendTransPrepayment.Voucher
                    && ledgerJournalTrans.TransDate == _custVendTransPrepayment.TransDate
                    && ledgerJournalTrans.VendTransId == _custVendTransPrepayment.RecId;
        }

        return LedgerJournalTrans.Recid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAmountCur</Name>
				<Source><![CDATA[
    private container invoiceAmountCur(CustVendSettlement _custVendSettlement)
    {
        AmountCur       amountCur;
        DiscAmount      discAmount;
        ;

        switch (module)
        {
            case ModuleCustVend::Cust :
                amountCur  = _custVendSettlement.SettleAmountCur + _custVendSettlement.PennyDiff;
                discAmount = _custVendSettlement.UtilizedCashDisc;
                break;

            case ModuleCustVend::Vend :
                amountCur  = _custVendSettlement.SettleAmountCur + _custVendSettlement.PennyDiff;
                discAmount = _custVendSettlement.UtilizedCashDisc;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return [amountCur, discAmount];
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType</Name>
				<Source><![CDATA[
    LedgerPostingType ledgerPostingType()
    {
        LedgerPostingType   ledgerPostingType;

        switch (module)
        {
            case ModuleCustVend::Cust :
                ledgerPostingType = LedgerPostingType::CustPayment;
                break;

            case ModuleCustVend::Vend :
                ledgerPostingType = LedgerPostingType::VendPayment;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ledgerPostingType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreatePrepaymentWithLog_W</Name>
				<Source><![CDATA[
    public boolean mustCreatePrepaymentWithLog_W()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTaxReversePrePayment</Name>
				<Source><![CDATA[
    private TaxReversePrePayment newTaxReversePrePayment(CustVendSettlement _custVendSettlement,
                                                         CustVendTrans      _custVendTrans,
                                                         Percent            _percent,
                                                         CurrencyCode       _invoiceCurrencyCode)
    {
        TaxReversePrePayment taxReversePrePayment;
        date paymentDate = CustVendTransPostingLog_RU::usePostingLog() ? _custVendTrans.TransDate : _custVendSettlement.TransDate;

        taxReversePrePayment = new TaxReversePrePayment(_percent);

        switch (module)
        {
            case ModuleCustVend::Cust :
                taxReversePrePayment.initFromSettlement(
                    paymentDate,
                    _custVendTrans.TransDate,
                    _custVendTrans.Voucher, //_custVendSettlement.offsetTransVoucher,
                    -_percent,
                    _invoiceCurrencyCode,
                    _custVendTrans.TableId,
                    _custVendTrans.RecId);
                break;

            case ModuleCustVend::Vend :
                taxReversePrePayment.initFromSettlement(
                    paymentDate,
                    _custVendTrans.TransDate,
                    _custVendTrans.Voucher,
                    -_percent,
                    _invoiceCurrencyCode,
                    _custVendTrans.TableId,
                    _custVendTrans.RecId);
                break;
        }

        return taxReversePrePayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfileDifference</Name>
				<Source><![CDATA[
    boolean postingProfileDifference(CustVendSettlement  _custVendSettlement)
    {
        CustTrans       custTrans;
        CustTrans       custTransOffset;
        VendTrans       vendTrans;
        VendTrans       vendTransOffset;
        boolean         ret;

        switch (module)
        {
            case ModuleCustVend::Cust :
                // This code only executes for a single company where so don't need to
                // check OffsetCompany field.
                select firstonly PostingProfile from custTrans
                    where custTrans.RecId == _custVendSettlement.OffsetRecId;

                select firstonly PostingProfile from custTransOffset
                    where custTransOffset.RecId == _custVendSettlement.TransRecId;

                ret = custTrans.PostingProfile != custTransOffset.PostingProfile;
                break;

            case ModuleCustVend::Vend :
                // This code only executes for a single company where so don't need to
                // check OffsetCompany field.
                select firstonly PostingProfile from vendTrans
                    where vendTrans.RecId == _custVendSettlement.OffsetRecId;

                select firstonly PostingProfile from vendTransOffset
                    where vendTransOffset.RecId == _custVendSettlement.TransRecId;

                ret = vendTrans.PostingProfile != vendTransOffset.PostingProfile;
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingProfileSettle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>CustTrans</c>, <c>CustSettlement</c>, and general journal records for posting
    ///    profile differences.
    /// </summary>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher to use for settlement.
    /// </param>
    /// <param name="_custVendTrans">
    ///    The <c>CustVendTrans</c> record to use for settlement.
    /// </param>
    /// <param name="_amountCur">
    ///    The posting profile difference amount.
    /// </param>
    /// <param name="_custVendTransSettlement">
    ///    The instance of the <c>CustVendTransSettlement</c> class to use when adding <c>CustTrans</c> and
    ///    <c>CustSettlement</c> records.
    /// </param>
    /// <param name="_settlementGroupPlaceHolder">
    ///    The placeholder settlement group for the settlement.
    /// </param>
    /// <param name="_transDimesion">
    ///    The dimension of the new transactions.
    /// </param>
    /// <param name="_postingProfile">
    ///    The posting profile of the new transactions.
    /// </param>
    /// <param name="_ledgerTransTxt">
    ///    The type of transaction text for the posting profile transactions.
    /// </param>
    /// <param name="_amountMST">
    ///    The posting profile difference monetary standard (MST) amount.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency of the new transactions.
    /// </param>
    /// <param name="_amountMSTSecondary">
    /// The posting profile difference amount in reporting currency.
    /// </param>
    /// <param name="_ledgerDimensionAccount">
    /// Ledger dimension to post to General Ledger.
    /// </param>
    /// <param name="_recordCustVendTrans">
    /// Ledger dimension to post to General Ledger.
    /// </param>
    /// <param name="_postToGeneralLedger">
    /// Ledger dimension to post to General Ledger.
    /// </param>
    public void postingProfileSettle(
        LedgerVoucher           _ledgerVoucher,
        CustVendTrans           _custVendTrans,
        AmountCur               _amountCur,
        CustVendTransSettlement _custVendTransSettlement,
        Counter                 _settlementGroupPlaceHolder,
        DimensionDefault        _transDimesion,
        PostingProfile          _postingProfile,
        LedgerTransTxt          _ledgerTransTxt,
        AmountMST               _amountMST,
        CurrencyCode            _currencyCode,
        AmountMSTSecondary      _amountMSTSecondary     = 0,
        LedgerDimensionAccount  _ledgerDimensionAccount = 0,
        boolean                 _recordCustVendTrans = true,
        boolean                 _postToGeneralLedger = true)
    {
        CustVendTrans               localCustVendTrans;
        TransTxt                    localTransTxt;
        TransactionTxt              transactionTxt;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerDimensionAccount      ledgerDimensionMerged;
        CurrencyExchangeHelper      exchangeRateHelper;
        // <GEERU><GEECZ>
        #ISOCountryRegionCodes
        boolean                     countryRegion_RUCZ = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU, #isoCZ]);
        LedgerRecId                 currentLedgerRecId;
        CurrencyCode                currentReportingCurrency;
        CustVendTrans_W             custVendTrans_W;
        // </GEECZ></GEERU>

        // get a new concrete instance of the CustTrans or VendTrans
        localCustVendTrans = _custVendTrans.data();
        localCustVendTrans.clear();

        if (_currencyCode == '')
        {
            _currencyCode = _custVendTrans.CurrencyCode;
        }

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(_ledgerTransTxt);
        transactionTxt.setVoucher(_custVendTrans.Voucher);
        // <GEERU><GEECZ>
        if (!countryRegion_RUCZ)
        {
        // </GEECZ></GEERU>
            transactionTxt.setDate(_ledgerVoucher.lastTransDate());
        // <GEERU>
        }
        else
        {
            transactionTxt.setDate(_ledgerVoucher.findLedgerVoucherObject().parmTransDate());
        }
        // </GEERU>
        transactionTxt.setKey1(_custVendTrans.AccountNum);
        transactionTxt.setFormLetter(_custVendTrans.Voucher);
        localTransTxt = transactionTxt.txt();

        localCustVendTrans.clear();

        localCustVendTrans.AccountNum = _custVendTrans.AccountNum;
        localCustVendTrans.Voucher = _ledgerVoucher.lastVoucher();
        // <GEERU><GEECZ>
        if (countryRegion_RUCZ)
        {
            localCustVendTrans.TransDate = _ledgerVoucher.findLedgerVoucherObject().parmTransDate();
        }
        else
        {
        // </GEECZ></GEERU>
            localCustVendTrans.Invoice = _custVendTrans.Invoice;
            localCustVendTrans.TransDate = _ledgerVoucher.lastTransDate();
        // <GEERU>
        }
        // </GEERU>

        localCustVendTrans.DefaultDimension  = _transDimesion;
        // <GEERU>
        if (_ledgerDimensionAccount)
        {
            localCustVendTrans.DefaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(_ledgerDimensionAccount);
        }
        // </GEERU>
        localCustVendTrans.PostingProfile = _postingProfile;
        localCustVendTrans.TransType = LedgerTransType::Settlement;
        localCustVendTrans.PaymMode = _custVendTrans.PaymMode;
        localCustVendTrans.PaymSpec = _custVendTrans.PaymSpec;
        localCustVendTrans.Txt = localTransTxt;

        localCustVendTrans.AmountCur = _amountCur;
        localCustVendTrans.AmountMST = _amountMST;
        localCustVendTrans.SettleAmountCur = localCustVendTrans.AmountCur;
        localCustVendTrans.SettleAmountMST = localCustVendTrans.AmountMST;

        localCustVendTrans.CurrencyCode = _currencyCode;
        localCustVendTrans.ExchRate = CurrencyExchange::calculateExchangeRate(localCustVendTrans.AmountCur, localCustVendTrans.AmountMST);

        localCustVendTrans.LastSettleDate = _ledgerVoucher.findLedgerVoucherObject().parmTransDate();
        localCustVendTrans.LastSettleVoucher = localCustVendTrans.Voucher;
        localCustVendTrans.LastSettleCompany = localCustVendTrans.DataAreaId;
        localCustVendTrans.LastSettleAccountNum = localCustVendTrans.AccountNum;
        localCustVendTrans.Closed = localCustVendTrans.LastSettleDate;

        localCustVendTrans.initFromPostingProfile(_postingProfile);
        // <GEERU><GEECZ>

        if (countryRegion_RUCZ)
        {
            currentLedgerRecId = Ledger::primaryLedger(CompanyInfo::current(localCustVendTrans.DataAreaId));

            Ledger ledger = Ledger::find(currentLedgerRecId);
            currentReportingCurrency = ledger.ReportingCurrency;

            if (currentReportingCurrency)
            {
                localCustVendTrans.ReportingCurrencyAmount  = _amountMSTSecondary;
                localCustVendTrans.SettleAmountReporting    = localCustVendTrans.ReportingCurrencyAmount;

                ExchangeRateHelper helper = ExchangeRateHelper::newExchangeDate(currentLedgerRecId, localCustVendTrans.CurrencyCode, _custVendTrans.TransDate);
                helper.parmToCurrency(currentReportingCurrency);
                helper.parmExchangeRateTypeRecId(ledger.ReportingCurrencyExchangeRateType);

                localCustVendTrans.ReportingCurrencyExchRate = helper.getExchangeRate1();
                localCustVendTrans.ReportingCurrencyExchRateSecondary = helper.getExchangeRate2();
                localCustVendTrans.ReportingCurrencyCrossRate = helper.getCrossRate();
            }
            localCustVendTrans.Correct                  = _ledgerVoucher.findLedgerVoucherObject().parmCorrection();

            custVendTrans_W = localCustVendTrans.CustVendTrans::getCustVendTrans_W();
            custVendTrans_W.CorrectReporting_RU      = localCustVendTrans.Correct;
            localCustVendTrans.CustVendTrans::packCustVendTrans_W(custVendTrans_W);

            localCustVendTrans.Txt                      = _custVendTrans.Txt + "@GLS105105";
        }

        // </GEECZ></GEERU>

        // <GEERU>
        if (_recordCustVendTrans)
        {
        // </GEERU>
            // When the CustTrans record is created and the offsetRecId should
            // should point to another CustTrans record with the same settlement group and trans type.
            _custVendTransSettlement.addTransAndDefaultSettlement(localCustVendTrans, _settlementGroupPlaceHolder, true);
        // <GEERU>
        }

        if (_postToGeneralLedger)
        {
        // </GEERU>

            _ledgerVoucher.findLedgerVoucherObject().parmLedgerTransType(LedgerTransType::Settlement);

            ledgerVoucherObject = _ledgerVoucher.findLedgerVoucherObject();
            exchangeRateHelper  = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), ledgerVoucherObject.parmAccountingDate());
            exchangeRateHelper.parmExchangeRate1(localCustVendTrans.ExchRate);
            ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(localCustVendTrans.summaryLedgerDimension(), _transDimesion);

            // <GEERU>
            if (_ledgerDimensionAccount)
            {
                ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(_ledgerDimensionAccount);
            }
            // </GEERU>
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAccountingAmountsDefault(
                ledgerVoucherObject,
                (module == ModuleCustVend::Cust) ? LedgerPostingType::CustSettlement : LedgerPostingType::VendSettlement,
                ledgerDimensionMerged,
                _currencyCode,
                _amountCur,
                _amountMST,
                exchangeRateHelper);

            ledgerVoucherTransObject.parmSourceTableId(localCustVendTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(localCustVendTrans.RecId);
            ledgerVoucherTransObject.parmTransTxt(localTransTxt);
            // <GEERU>
            if (_amountMSTSecondary)
            {
                ledgerVoucherTransObject.parmReportingCurrencyAmount(_amountMSTSecondary);
            }
            // </GEERU>
            _ledgerVoucher.addTrans(ledgerVoucherTransObject);

            // <GEERU><GEECZ>
            if (!countryRegion_RUCZ)
            {
            // </GEECZ></GEERU>
                _ledgerVoucher.findLedgerVoucherObject().lastTransTxt('');
                _ledgerVoucher.findLedgerVoucherObject().parmLedgerTransType(LedgerTransType::None);
            // <GEERU>
            }
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePostingProfileBalance</Name>
				<Source><![CDATA[
    // This method is called during unapply when the transaction and offset transactions
    // have different posting profiles and it is not a prepayment.
    public void reversePostingProfileBalance(CustVendTrans      _custVendTrans,
                                             CustVendSettlement _custVendSettlement,
                                             LedgerVoucher      _ledgerVoucher,
                                             CurrencyCode       _invoiceCurrencyCode,
                                             AmountCur          _invoiceAmountCur)
    {
        AmountCur       invoiceAmountCur;
        AmountMST       invoiceAmountMST;
        TransDate       transactionDate;
        CustVendTrans   custVendTransOffset;
        CurrencyCode    settlementCurrencyCode;
        ;

        invoiceAmountCur = _invoiceAmountCur + _custVendSettlement.PennyDiff - _custVendSettlement.UtilizedCashDisc;

        switch (module)
        {
            case ModuleCustVend::Cust :
                            // if there is an exchange adj it means this is the debit transaction
                            if (_custVendSettlement.ExchAdjustment)
                            {
                                invoiceAmountMST = invoiceAmountCur * (_custVendTrans.AmountMST / _custVendTrans.AmountCur);
                                settlementCurrencyCode = _custVendTrans.CurrencyCode;
                            }
                            else
                            {
                                custVendTransOffset = _custVendTrans.data();

                                // This code only executes for a single company where so don't need to
                                // check OffsetCompany field.
                                select firstonly custVendTransOffset
                                    where custVendTransOffset.RecId == _custVendSettlement.OffsetRecId;

                                settlementCurrencyCode = custVendTransOffset.CurrencyCode;
                                transactionDate      = _custVendTrans.TransDate;

                                invoiceAmountCur = CurrencyExchangeHelper::curAmount2CurAmount(invoiceAmountCur, _custVendTrans.CurrencyCode, custVendTransOffset.CurrencyCode, transactionDate);
                                invoiceAmountMST = invoiceAmountCur * (custVendTransOffset.AmountMST / custVendTransOffset.AmountCur);
                            }
                            // round the invoiceAmountMSt
                            invoiceAmountMST = CurrencyExchangeHelper::amount(invoiceAmountMST);

                            //move from prepayment summary account
                            this.postingProfileSettle(_ledgerVoucher,
                                                      _custVendTrans,
                                                      CurrencyExchangeHelper::curAmount2CurAmount(invoiceAmountCur, _invoiceCurrencyCode, _custVendTrans.CurrencyCode, _ledgerVoucher.lastTransDate()),
                                                      custVendTransSettlement,
                                                      settlementGroupPlaceHolder,
                                                       _custVendTrans.DefaultDimension,
                                                       _custVendTrans.PostingProfile,
                                                       LedgerTransTxt::ReversedSettlement,
                                                       invoiceAmountMST,
                                                       settlementCurrencyCode);

                            break;
            case ModuleCustVend::Vend :
                            if (_custVendSettlement.ExchAdjustment)
                            {
                                invoiceAmountMST = invoiceAmountCur * (_custVendTrans.AmountMST / _custVendTrans.AmountCur);
                                settlementCurrencyCode = _custVendTrans.CurrencyCode;
                            }
                            else
                            {
                                custVendTransOffset = _custVendTrans.data();

                                // This code only executes for a single company where so don't need to
                                // check OffsetCompany field.
                                select firstonly custVendTransOffset
                                    where custVendTransOffset.RecId == _custVendSettlement.OffsetRecId;

                                settlementCurrencyCode = custVendTransOffset.CurrencyCode;
                                transactionDate      = _custVendTrans.TransDate;

                                invoiceAmountCur = CurrencyExchangeHelper::curAmount2CurAmount(invoiceAmountCur, _custVendTrans.CurrencyCode, custVendTransOffset.CurrencyCode, transactionDate);
                                invoiceAmountMST = invoiceAmountCur * (custVendTransOffset.AmountMST / custVendTransOffset.AmountCur);
                            }
                            // round the invoiceAmountMSt
                            invoiceAmountMST = CurrencyExchangeHelper::amount(invoiceAmountMST);

                            //move from prepayment summaryaccount
                            this.postingProfileSettle(_ledgerVoucher,
                                                      _custVendTrans,
                                                      CurrencyExchangeHelper::curAmount2CurAmount(invoiceAmountCur, _invoiceCurrencyCode, _custVendTrans.CurrencyCode, _ledgerVoucher.lastTransDate()),
                                                      custVendTransSettlement,
                                                      settlementGroupPlaceHolder,
                                                       _custVendTrans.DefaultDimension,
                                                       _custVendTrans.PostingProfile,
                                                       LedgerTransTxt::ReversedSettlement,
                                                       invoiceAmountMST,
                                                       settlementCurrencyCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePrePaymentTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverses the sales tax on a prepayment transaction.
    /// </summary>
    /// <param name="_custVendTransPrepayment">
    ///    The <c>CustVendTrans</c> record that is a prepayment.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher that is used to create the reverse tax transactions.
    /// </param>
    /// <param name="_settleAmountCurPrepayment">
    ///    The settlement amount settled of the prepayment transaction in transaction currency.
    /// </param>
    /// <param name="_settleAmountMST">
    /// The settlement amount settled of the prepayment transaction in standard currency.
    /// </param>
    /// <param name="_settleAmountReporting">
    /// The settlement amount settled of the prepayment transaction in reporting currency.
    /// </param>
    /// <param name="_custVendTransOffset">
    /// The offset CustVendTrans record.
    /// </param>
    public void reversePrePaymentTax(
        CustVendTrans   _custVendTransPrepayment,
        LedgerVoucher   _ledgerVoucher,

        AmountCur       _settleAmountCurPrepayment,  // settlement amount in debit trans currency
        AmountMST       _settleAmountMST     = 0,
        AmountMSTSecondary  _settleAmountReporting  = 0,
        CustVendTrans   _custVendTransOffset = new DictTable(_custVendTransPrepayment.TableId).makeRecord())
    {
        TaxReversePrePayment            taxReversePrePayment;
        AmountCur                       taxAmountCur;
        AmountMST                       amountDiffMST;
        LedgerDimensionDefaultAccount   vatPrePaymentLedgerDimension;
        Percent                         percent;
        ExchRate                        prepaymentExchRate;
        LedgerPostingController         ledgerPostingController;

        // <GEERU>
        LedgerBondClient_RU         ledgerBondClient = _ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
        LedgerBondId_RU             vatPrePaymentAccountVRefId;
        // </GEERU>

        #ISOCountryRegionCodes
        boolean                     countryRegion_CZ = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);

        CurrencyExchangeHelper      exchangeRateHelper;
        LedgerDimensionAccount      mergedLedgerDimension;
        LedgerVoucherObject         ledgerVoucherObject;
        LedgerVoucherTransObject    ledgerVoucherTransObject;
        TaxTrans                    taxTrans;
        TaxGroupData                taxGroupData;
        TransactionTxt              transactionTxt;
        TransTxt                    settlementTransTxt;
        RecId                       prePaymentSourceRecId;
        boolean                     useSourceTableIdAndRecIdJoin;

        Debug::assert(curext() == _custVendTransPrepayment.company());

        if (_custVendTransPrepayment.AmountCur)
        {
            // calculate the percentage that the settlement amount is in relation to prepayment amount
            percent = abs(_settleAmountCurPrepayment / _custVendTransPrepayment.AmountCur * 100);

            if (percent > 100)
            {
                percent = 100;
            }

            // get the prepayment exchange rate
            prepaymentExchRate = _custVendTransPrepayment.exchRateCurToMst();
        }

        // If percent is 0, there is no tax to adjust, so can return
        if (percent == 0)
        {
            return ;
        }

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::Settlement);
        transactionTxt.setVoucher(_custVendTransPrepayment.Voucher);
        transactionTxt.setDate(_ledgerVoucher.lastTransDate());
        transactionTxt.setKey1(_custVendTransPrepayment.AccountNum);
        transactionTxt.setFormLetter(_custVendTransPrepayment.Voucher);
        settlementTransTxt = transactionTxt.txt();
        _ledgerVoucher.findLedgerVoucherObject().lastTransTxt(settlementTransTxt);

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher);

        prePaymentSourceRecId = this.findPrePaymentSourceRecId(_custVendTransPrepayment);

        // use tax engine to calc the prepayment tax amount that has to be reversed.
        // this also will create the ledger trans to reverse Sales Tax Payable
        if (FeatureStateProvider::isFeatureEnabled(CustVendAdjustTaxAmountsForReversingPrepaymentFeature_CZ::instance())
            && _custVendTransPrepayment.TableId == tableNum(VendTrans))
        {
            taxReversePrePayment = new TaxReversePrePaymentUsingManualTaxAmountAdjustments(percent);
        }
        else
        {
            taxReversePrePayment = new TaxReversePrePayment(percent);
        }

        if (countryRegion_CZ)
        {
            taxReversePrePayment.initFromSettlement(_custVendTransPrepayment.TransDate,
                                                    _custVendTransPrepayment.TransDate,
                                                    _custVendTransPrepayment.Voucher,
                                                    percent,
                                                    _custVendTransPrepayment.CurrencyCode,
                                                    _custVendTransPrepayment.TableId,
                                                    _custVendTransPrepayment.RecId,
                                                    // <GEEU>
                                                    _custVendTransOffset);
                                                    // </GEEU>
        }
        else
        {
            taxReversePrePayment.initFromSettlement(_custVendTransPrepayment.TransDate,
                                                    _custVendTransPrepayment.TransDate,
                                                    _custVendTransPrepayment.Voucher,
                                                    percent,
                                                    _custVendTransPrepayment.CurrencyCode,
                                                    tableNum(LedgerJournalTrans),
                                                    prePaymentSourceRecId,
                                                    // <GEEU>
                                                    _custVendTransOffset,
                                                    // </GEEU>
                                                    _custVendTransPrepayment);
        }

        if (!countryRegion_CZ && prePaymentSourceRecId)
        {
            useSourceTableIdAndRecIdJoin = true;
            taxReversePrePayment.parmUseSourceTableIdAndRecIdJoin(true);
        }

        taxReversePrePayment.parmSettlementReportingCrossRate(_custVendTransPrepayment.getReportingCombinedExchangeRate());

        [taxAmountCur, amountDiffMST] = taxReversePrePayment.calcPostAndInsertTaxes(ledgerPostingController);

        if (taxAmountCur || amountDiffMST)
        {
            // find prepayment VAT summeryaccount
            vatPrePaymentLedgerDimension = this.vatPrePaymentAccount(_custVendTransPrepayment);

            select firstonly TaxGroup,TaxCode from taxTrans
                where taxTrans.Voucher == _custVendTransPrepayment.Voucher
                   && taxTrans.TransDate == _custVendTransPrepayment.TransDate
                   && taxTrans.ExemptTax == NoYes::No
                   && taxTrans.TaxOrigin == TaxOrigin::Tax;

            taxGroupData = TaxGroupData::find(taxTrans.TaxGroup, taxTrans.TaxCode);

            if (taxAmountCur && !taxGroupData.UseTax)
            {
                ledgerVoucherObject = ledgerPostingController.getReference();
                exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                    Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                    ledgerVoucherObject.parmAccountingDate());

                mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(vatPrePaymentLedgerDimension, _custVendTransPrepayment.DefaultDimension);

                exchangeRateHelper.parmExchangeRate1(prepaymentExchRate);
                _custVendTransPrepayment.setExchangeHelperReportingExchRate(exchangeRateHelper);

                // Create ledger trans to reverse the Sales tax prepayment
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                    ledgerPostingController.getReference(),
                    this.ledgerPostingType(),
                    mergedLedgerDimension,
                    _custVendTransPrepayment.CurrencyCode,
                    -taxAmountCur,
                    exchangeRateHelper);

                ledgerVoucherTransObject.parmSourceTableId(_custVendTransPrepayment.TableId);
                ledgerVoucherTransObject.parmSourceRecId(_custVendTransPrepayment.RecId);
                ledgerVoucherTransObject.parmText(settlementTransTxt);

                while select RecId from taxTrans
                    where taxTrans.Voucher == _ledgerVoucher.lastVoucher()
                        && taxTrans.TransDate == _ledgerVoucher.lastTransDate()
                        && taxTrans.ExemptTax == NoYes::No
                        && taxTrans.TaxOrigin == TaxOrigin::TaxReversed
                        && (!useSourceTableIdAndRecIdJoin
                            || (taxTrans.SourceTableId == tableNum(LedgerJournalTrans) && taxTrans.SourceRecId == prePaymentSourceRecId))
                {
                    ledgerVoucherTransObject.addTaxTransRelationship(taxTrans.RecId , TaxTransRelationshipType::TransactionLineAccount);
                }

                ledgerPostingController.addTrans(ledgerVoucherTransObject);
                // <GEERU>
                if (ledgerBondClient)
                {
                    vatPrePaymentAccountVRefId = ledgerBondClient.lastVrefId();
                }
                // </GEERU>
            }

            // if there was a diff posted in taxReversePrePayment, move it VAT prepayment summary account
            if (amountDiffMST)
            {
                ledgerVoucherObject = ledgerPostingController.getReference();

                mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(vatPrePaymentLedgerDimension, _custVendTransPrepayment.DefaultDimension);

                ledgerVoucherTransObject= LedgerVoucherTransObject::newAdjustmentDefault(
                    ledgerVoucherObject,//newTransRoundOff(
                    this.ledgerPostingType(),
                    //_ledgerVoucher.lastVoucher(),
                    //_ledgerVoucher.lastTransDate(),
                    mergedLedgerDimension,
                    _custVendTransPrepayment.CurrencyCode,
                    -amountDiffMST,
                    0);

                ledgerVoucherTransObject.parmText(settlementTransTxt);
                ledgerPostingController.addTrans(ledgerVoucherTransObject);
            }

            // <GEERU>
            if (ledgerBondClient)
            {
                if (ledgerBondClient.currentLogLength())
                {
                    if (vatPrePaymentAccountVRefId)
                    {
                        ledgerBondClient.bondVRef2Log(vatPrePaymentAccountVRefId);
                    }
                    else
                    {
                        ledgerBondClient.bondLastVRef2CurrentLog();
                    }
                }
                ledgerBondClient.removeCurrentLogObject();
            }
            // </GEERU>
        }
        _ledgerVoucher.findLedgerVoucherObject().lastTransTxt('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseReversePrePayment</Name>
				<Source><![CDATA[
    // This method is used to unapply a prepayment
    public Percent reverseReversePrePayment(CustVendTrans      _custVendTrans,
                                            CustVendSettlement _custVendSettlement,
                                            LedgerVoucher      _ledgerVoucher,
                                            CurrencyCode       _invoiceCurrencyCode,
                                            AmountCur          _invoiceAmount,
                                            Percent            _prevPercent)
    {
        TaxReversePrePayment            taxReversePrePayment;
        AmountCur                       taxAmountCur;
        AmountMST                       amountDiffMST;
        LedgerDimensionDefaultAccount   vatPrePaymentLedgerDimension;
        Percent                         percent;
        AmountCur                       invoiceAmountCur;
        AmountMST                       invoiceAmountMST;
        TransDate                       transDate;
        Percent                         prevPercent;
        CustVendTrans                   custVendTransOffset;
        DiscAmount                      utilizedCashDisc;
        ExchRate                        exchRate;
        LedgerPostingController         ledgerPostingController;

        // <GEERU>
        LedgerBondClient_RU             ledgerBondClient = _ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
        LedgerBondId_RU                 vatPrePaymentAccountVRefId;
        LedgerBondId_RU                 vatAmountDiffMSTVRefId;
        // </GEERU>

        CurrencyExchangeHelper          exchangeRateHelper;
        LedgerDimensionAccount          mergedLedgerDimension;
        LedgerVoucherObject             ledgerVoucherObject;
        LedgerVoucherTransObject        ledgerVoucherTransObject;

        ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher);

        transDate                            = ledgerPostingController.getReference().parmTransDate();
        [invoiceAmountCur, utilizedCashDisc] = this.invoiceAmountCur(_custVendSettlement);

        custVendTransOffset = _custVendTrans.data();

        // This code only executes for a single company where so don't need to
        // check OffsetCompany field.
        select firstonly custVendTransOffset
            where custVendTransOffset.RecId == _custVendSettlement.OffsetRecId;

        // if exchange adjustment is on the _custVendSettlement this means that the prepayment
        // was applied to the payment using functions settlement, in this case use the
        // amounts on the custVendTrans to calculate the invoiceAmountMST, otherwise
        // use the amount on the offset transaction
        if (_custVendSettlement.ExchAdjustment)
        {
            invoiceAmountMST = invoiceAmountCur * (_custVendTrans.AmountMST / _custVendTrans.AmountCur);
        }
        else
        {
            invoiceAmountMST = invoiceAmountCur * (custVendTransOffset.AmountMST / custVendTransOffset.AmountCur);
        }
        invoiceAmountMST = CurrencyExchangeHelper::amount(invoiceAmountMST);

        if (_custVendTrans.AmountCur)
        {
            if (_invoiceCurrencyCode == _custVendTrans.CurrencyCode)
            {
                percent = abs((invoiceAmountCur - utilizedCashDisc) / _custVendTrans.AmountCur * 100);
            }
            else
            {
                percent = abs(CurrencyExchangeHelper::mstAmount(invoiceAmountCur - utilizedCashDisc, _invoiceCurrencyCode, transDate) /_custVendTrans.AmountMST * 100);
            }
            if (percent > 100)
            {
                percent = 100;
            }

            // tax distribution calculates
            percent -= prevPercent;
            prevPercent += percent;
        }

        if (percent != 0)
        {
            // <GEERU>
            if (ledgerBondClient)
            {
                ledgerBondClient.addNewLogObject();
            }

            // </GEERU>
            invoiceAmountCur = CurrencyExchangeHelper::amount(invoiceAmountCur, _custVendTrans.CurrencyCode);

            taxReversePrePayment = this.newTaxReversePrePayment(_custVendSettlement,
                                                                _custVendTrans,
                                                                percent,
                                                                _custVendTrans.CurrencyCode); // _invoiceCurrencyCode,

            [taxAmountCur, amountDiffMST] = taxReversePrePayment.calcPostAndInsertTaxes(ledgerPostingController);

            switch (module)
            {
                case ModuleCustVend::Cust :
                            //move from prepayment summeryaccount
                            this.postingProfileSettle(ledgerPostingController.getJournal(),
                                                      custVendTransOffset,
                                                      CurrencyExchangeHelper::curAmount2CurAmount(invoiceAmountCur, _invoiceCurrencyCode, _custVendTrans.CurrencyCode, custVendTransOffset.TransDate),
                                                      custVendTransSettlement,
                                                      settlementGroupPlaceHolder,
                                                      _custVendTrans.DefaultDimension,
                                                      _custVendTrans.PostingProfile,
                                                      LedgerTransTxt::ReversedSettlement,
                                                      invoiceAmountMST,
                                                      _custVendTrans.CurrencyCode);

                            //move to summeryaccount
                            this.postingProfileSettle(ledgerPostingController.getJournal(),
                                                      custVendTransOffset,
                                                      CurrencyExchangeHelper::curAmount2CurAmount(-invoiceAmountCur, _invoiceCurrencyCode, _custVendTrans.CurrencyCode, custVendTransOffset.TransDate),
                                                      custVendTransSettlement,
                                                      settlementGroupPlaceHolder,
                                                      custVendTransOffset.DefaultDimension,
                                                      custVendTransOffset.PostingProfile,
                                                      LedgerTransTxt::ReversedSettlement,
                                                      -invoiceAmountMST,
                                                      _custVendTrans.CurrencyCode);

                            break;
                case ModuleCustVend::Vend :
                            //move from prepayment summaryaccount
                            this.postingProfileSettle(ledgerPostingController.getJournal(),
                                                      custVendTransOffset,
                                                      CurrencyExchangeHelper::curAmount2CurAmount(invoiceAmountCur, _invoiceCurrencyCode, _custVendTrans.CurrencyCode, custVendTransOffset.TransDate),
                                                      custVendTransSettlement,
                                                      settlementGroupPlaceHolder,
                                                      _custVendTrans.DefaultDimension,
                                                      _custVendTrans.PostingProfile,
                                                      LedgerTransTxt::ReversedSettlement,
                                                      invoiceAmountMST,
                                                      _custVendTrans.CurrencyCode);

                             //move to summeryaccount
                             this.postingProfileSettle(ledgerPostingController.getJournal(),
                                                       custVendTransOffset,
                                                       CurrencyExchangeHelper::curAmount2CurAmount(-invoiceAmountCur, _invoiceCurrencyCode, _custVendTrans.CurrencyCode, custVendTransOffset.TransDate),
                                                        custVendTransSettlement,
                                                        settlementGroupPlaceHolder,
                                                        custVendTransOffset.DefaultDimension,
                                                        custVendTransOffset.PostingProfile,
                                                        LedgerTransTxt::ReversedSettlement,
                                                        -invoiceAmountMST,
                                                        _custVendTrans.CurrencyCode);
                             break;
            }

            // calculate the exchange rate for the transaction
            exchRate = (_custVendTrans.AmountMST / _custVendTrans.AmountCur) * 100;

            // <GEERU>
            if (ledgerBondClient)
            {
                ledgerBondClient.bondLast2();
            }

            // </GEERU>
            if (taxAmountCur || amountDiffMST)
            {
               // Find prepayment VAT summeryaccount
                vatPrePaymentLedgerDimension = this.vatPrePaymentAccount(_custVendTrans);

                if (taxAmountCur)
                {
                    ledgerVoucherObject = ledgerPostingController.getReference();
                    exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(
                        Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                        ledgerVoucherObject.parmAccountingDate());

                    mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(vatPrePaymentLedgerDimension, _custVendTrans.DefaultDimension);

                    exchangeRateHelper.parmExchangeRate1(exchRate);

                        //move from VAT prepayment summeryaccount
                    ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                                                            ledgerPostingController.getReference(),
                                                                            this.ledgerPostingType(),
                                                                            mergedLedgerDimension,
                                                                           _custVendTrans.CurrencyCode,
                                                                           -taxAmountCur,
                                                                           exchangeRateHelper);

                    // <GEERU>
                    if (ledgerBondClient)
                    {
                        vatPrePaymentAccountVRefId = ledgerBondClient.lastVrefId();
                    }
                    // </GEERU>
                    ledgerVoucherTransObject.parmSourceTableId(_custVendTrans.TableId);
                    ledgerVoucherTransObject.parmSourceRecId(_custVendTrans.RecId);
                    ledgerPostingController.addTrans(ledgerVoucherTransObject);
                }

                //if there was a diff posted in taxReversePrePayment we move it VAT prepayment summeryaccount
                if (amountDiffMST)
                {
                    ledgerVoucherObject = ledgerPostingController.getReference();

                    mergedLedgerDimension   = LedgerDimensionFacade::serviceCreateLedgerDimension(vatPrePaymentLedgerDimension, _custVendTrans.DefaultDimension);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
                                                                            ledgerVoucherObject,
                                                                            this.ledgerPostingType(),
                                                                            mergedLedgerDimension,
                                                                           _custVendTrans.CurrencyCode,
                                                                           -amountDiffMST,
                                                                            0);
                    ledgerPostingController.addTrans(ledgerVoucherTransObject);
                    // <GEERU>
                    if (ledgerBondClient)
                    {
                        vatAmountDiffMSTVRefId = ledgerBondClient.lastVrefId();
                    }
                    // </GEERU>
                }
            }

            // <GEERU>
            if (ledgerBondClient)
            {
                if (vatPrePaymentAccountVRefId)
                {
                    ledgerBondClient.bondVRef2Log(vatPrePaymentAccountVRefId);
                }

                if (vatAmountDiffMSTVRefId)
                {
                    ledgerBondClient.bondVRef2Log(vatAmountDiffMSTVRefId);
                }
                ledgerBondClient.removeCurrentLogObject();
            }
            // </GEERU>
        }

        return prevPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransSettlement</Name>
				<Source><![CDATA[
    private void setCustVendTransSettlement(CustVendTransSettlement _custVendTransSettlement)
    {
        custVendTransSettlement = _custVendTransSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModule</Name>
				<Source><![CDATA[
    private void setModule(ModuleCustVend _module)
    {
        module = _module;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSettlementGroup</Name>
				<Source><![CDATA[
    private void setSettlementGroup(Counter _settlementGroupPlaceHolder)
    {
        settlementGroupPlaceHolder = _settlementGroupPlaceHolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatPrePaymentAccount</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount vatPrePaymentAccount(CustVendTrans  _custVendTrans)
    {
        LedgerDimensionDefaultAccount   ledgerDimension;

        switch (module)
        {
            case ModuleCustVend::Cust :
                ledgerDimension = CustLedgerAccounts::vatPrepaymentsLedgerDimension(_custVendTrans.AccountNum,
                                                                         _custVendTrans.PostingProfile);
                break;

            case ModuleCustVend::Vend :
                ledgerDimension = VendLedgerAccounts::vatPrepaymentsLedgerDimension(_custVendTrans.AccountNum,
                                                                          _custVendTrans.PostingProfile);
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CustVendPrePaymentReversal</c> class.
    /// </summary>
    /// <param name = "_module">
    ///     The <c>ModuleCustVend</c> enumeration value used to create the new <c>CustVendPaymentReversal</c> class instance.
    /// </param>
    /// <param name = "_custVendTransSettlement">
    ///     The <c>CustVendTransSettlement</c> class object.
    /// </param>
    /// <param name = "_settlementGroupPlaceHolder">
    ///     The settlement group place holder.
    /// </param>
    /// <returns>
    ///     A new instance of the <c>CustVendPrePaymentReversal</c> class.
    /// </returns>
    public static CustVendPrePaymentReversal construct(ModuleCustVend _module,
        CustVendTransSettlement _custVendTransSettlement,
        Counter _settlementGroupPlaceHolder)
    {
        CustVendPrePaymentReversal custVendPrePaymentReversal = CustVendPrePaymentReversal::newCustVendPrePaymentReversal(_module);
        if(!custVendPrePaymentReversal)
        {
            // If <c>CustVendPrePaymentReversal</c> object is null, throw an error
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        custVendPrePaymentReversal.setModule(_module);
        custVendPrePaymentReversal.setCustVendTransSettlement(_custVendTransSettlement);
        custVendPrePaymentReversal.setSettlementGroup(_settlementGroupPlaceHolder);

        return custVendPrePaymentReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendPrePaymentReversal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>CustVendPrePaymentReversal</c> class.
    /// </summary>
    /// <param name = "_module">
    ///     The <c>ModuleCustVend</c> enumeration value used to create the new <c>CustVendPaymentReversal</c> class instance.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>CustVendPrePaymentReversal</c> class.
    /// </returns>
    protected static CustVendPrePaymentReversal newCustVendPrePaymentReversal(ModuleCustVend _module)
    {
        CustVendPrePaymentReversal custVendPrePaymentReversal;

        switch (_module)
        {
            case ModuleCustVend::Cust :
                if (CustParameters::find().ReversePrepayment_W)
                {
                    custVendPrePaymentReversal = new CustVendPrePaymentReversal_RU();
                }
                else
                {
                    custVendPrePaymentReversal = new CustVendPrePaymentReversal();
                }
                break;

            case ModuleCustVend::Vend :
                if (VendParameters::find().ReversePrepayment_W)
                {
                    custVendPrePaymentReversal = new CustVendPrePaymentReversal_RU();
                }
                else
                {
                    custVendPrePaymentReversal = new CustVendPrePaymentReversal();
                }
                break;
        }

        return custVendPrePaymentReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustVendTrans</Name>
				<Source><![CDATA[
    public static CustVendPrePaymentReversal newCustVendTrans(CustVendTrans           _custVendTrans,
                                                              CustVendTransSettlement _custVendTransSettlement,
                                                              Counter _settlementGroupPlaceHolder)
    {
        // <GEERU>
        CustVendPrePaymentReversal  custVendPrePaymentReversal;
        // </GEERU>

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans) :

                // <GEERU>
                custVendPrePaymentReversal = CustVendPrePaymentReversal::construct(ModuleCustVend::Cust,
                                                                                   _custVendTransSettlement,
                                                                                   _settlementGroupPlaceHolder);
                                                                                   // </GEERU>
                break;

            case tableNum(VendTrans) :

                // <GEERU>
                custVendPrePaymentReversal = CustVendPrePaymentReversal::construct(ModuleCustVend::Vend,
                                                                                   _custVendTransSettlement,
                                                                                   _settlementGroupPlaceHolder);
                                                                                   // </GEERU>
                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return custVendPrePaymentReversal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendSettle_RU</Name>
				<Source><![CDATA[
    public CustVendSettle parmCustVendSettle_RU(CustVendSettle _custVendSettle = custVendSettle)
    {
        custVendSettle = _custVendSettle;
        return custVendSettle;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>