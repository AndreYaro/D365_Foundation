<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQFormletterParmDataReject</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQFormletterParmDataReject extends PurchRFQFormletterParmData
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mayJournalBePosted</Name>
				<Source><![CDATA[
    public boolean mayJournalBePosted(Common _purchRFQTable)
    {
        PurchRFQTable tmpPurchRFQTable = _purchRFQTable as PurchRFQTable;
        boolean ret = super(_purchRFQTable);

        if (!this.parmMultiSelectRequired() &&
            (tmpPurchRFQTable.StatusLow == PurchRFQStatus::Accepted ||
            tmpPurchRFQTable.StatusLow == PurchRFQStatus::Rejected))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rejectChooseLines</Name>
				<Source><![CDATA[
    protected void rejectChooseLines()
    {
        PurchRFQLine            localPurchRFQLine;
        PurchRFQTable           localPurchRFQTable, prevPurchRFQTable;
        PurchRFQReplyLine       localPurchRFQReplyLine;
        PurchRFQParmTable       localPurchRFQParmTable;
        PurchRFQParmTable       acceptParmTable;
        PurchRFQParmUpdate      acceptParmUpdate;
        PurchRFQParmLine        acceptParmLine;
        TradeLineRefId          tableRef = '';
        boolean                 mayJournalBePosted  = false;
        boolean                 purchRFQParmLinesExist;

        void createParmTable()
        {
            if (this.allowCreateParmTable())
            {
                if (!localPurchRFQParmTable)
                {
                    localPurchRFQParmTable.clear();

                    this.createParmTable(localPurchRFQTable,localPurchRFQLine,tableRef,false);
                }

                this.allowCreateParmTable(this.parmAllowEmptyParmTable());
            }
        }

        ttsbegin;
        this.initRecordLists();

        this.allowCreateParmTable(this.parmAllowEmptyParmTable());

        purchRFQParmLinesExist = (select firstonly RecId from purchRFQParmLine
                                    where purchRFQParmLine.ParmId == parmId).RecId != 0;

        acceptParmUpdate = PurchRFQParmUpdate::find(this.parmCallerParmId());
        while select rfqCaseId from acceptParmTable
            group by rfqCaseId
            where acceptParmTable.ParmId == acceptParmUpdate.ParmId
        {
            while select localPurchRFQTable
                where localPurchRFQTable.rfqCaseId == acceptParmTable.rfqCaseId
                join localPurchRFQLine
                    where localPurchRFQLine.rfqId == localPurchRFQTable.rfqId &&
                          localPurchRFQLine.Status == PurchRFQStatus::Received
                     notexists join acceptParmLine
                        where acceptParmLine.ParmId == acceptParmUpdate.ParmId &&
                              acceptParmLine.rfqLineRecId == localPurchRFQLine.RecId
            {
                if (localPurchRFQTable.RecId != prevPurchRFQTable.RecId)
                {
                    prevPurchRFQTable = localPurchRFQTable.data();
                    mayJournalBePosted = this.mayJournalBePosted(localPurchRFQTable);
                    tableRef = formletterParmData::getNewTableRefId();
                    localPurchRFQParmTable = null;
                }
                if (!mayJournalBePosted)
                    continue;

                localPurchRFQReplyLine = PurchRFQReplyLine::findRFQLine(localPurchRFQLine.RecId);

                if (!purchRFQParmLinesExist || !PurchRFQParmLine::existWaiting(parmId, localPurchRFQLine.rfqId, localPurchRFQLine.InventTransId))
                {
                    if ((this.createParmLine(localPurchRFQLine, tableRef) ||  this.parmAllowEmptyParmTable())
                         && !parmTableMap.exists(this.parmTableMapKey(localPurchRFQLine)))
                    {
                        createParmTable();
                    }
                }
            }
        }
        this.insertRecordLists();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectChooseLines</Name>
				<Source><![CDATA[
    protected void selectChooseLines(boolean _append = false)
    {
        if (this.parmCallerParmId())
        {
            this.rejectChooseLines();
        }
        else
        {
            super(_append);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQFormletterParmDataReject construct()
    {
        return new PurchRFQFormletterParmDataReject();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>