<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayProdScrap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle production scrapping.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ProductionScrap)]
class WhsWorkExecuteDisplayProdScrap extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    public boolean processControl(WhsControl _control, str _value)
    {
        var fieldValues = _control.parmContext().fieldValues;

        switch (true)
        {
            case _control is WhsControlItemId:
                if (_control.parmData() != "@WAX402")
                {
                    fieldValues.parmItemId(_control.parmData());

                    ProdBOM prodBOM;
                    select firstonly prodBOM
                        where prodBOM.ProdId    == fieldValues.parmProdId()   &&
                              prodBOM.ItemId    == fieldValues.parmItemId();

                    if (!prodBOM)
                    {
                        fieldValues.parmItemId('');
                        return _control.fail("@WAX774");
                    }
                }
                break;

            case _control is WhsControlUOM:
                if (!WHSControlQtyToScrap::validateQty(fieldValues.parmQtyToScrap(), _control.parmData(), fieldValues.parmItemId(), fieldValues.parmProdId()))
                {
                    return _control.fail("@WAX1172");
                }
                break;
        }

        return super(_control, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProdScrap</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for Production Item Scrapping screen.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildProdScrap(container  _con)
    {
        container                   ret = _con;
        ProdTable                   prodTable;
        ProdBOM                     prodBOM;
        WHSInventTable              whsInventTable;
        WHSProductionScrapHistory   productionScrapHistory;
        WrkCtrTable                 wrkCtrTable;
        WMSLocation                 location;

        ret += [this.buildControl(#RFLabel, 'ProdScrap', "@WAX2260", 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFText, #ProdId, "@WAX725", 1, pass.lookupStr(#ProdId), extendedTypeNum(ProdId), '', 0)];

        if (pass.exists(#ProdId) && pass.lookup(#ProdId) != '')
        {
            prodTable = ProdTable::find(pass.lookup(#ProdId));

            ret += [this.buildControl(#RFText, #ItemId, "@WAX1240", 1, pass.lookupStr(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];

            if (pass.exists(#ItemId) && pass.lookup(#ItemId) != '')
            {
                whsInventTable  = WHSInventTable::find(pass.lookup(#ItemId));
                boolean batchEnabled = this.isBatchEnabled();

                if (whsInventTable.rfDescription1)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", whsInventTable.rfDescription1), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription1))];
                }
                else
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription1, strFmt("\t        %1", InventTable::find(whsInventTable.ItemId).productNameWhsWorkExecute()), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(EcoResProductName))];
                }

                if (whsInventTable.rfDescription2)
                {
                    ret += [this.buildControl(#RFLabel, #RFDescription2, strFmt("\t        %1", whsInventTable.rfDescription2), 1, '', #WHSRFUndefinedDataType, '', 0, false, "", WHSRFColorText::Default, extendedTypeNum(WHSRFDescription2))];
                }

                if (pass.lookupStr(#WMSLocationId))
                {
                    ret += [this.buildControl(#RFText, #WMSLocationId, "@SYS80395", 1, pass.lookup(#WMSLocationId), extendedTypeNum(WMSLocationId), '', 0)];

                    if (batchEnabled)
                    {
                        ret += [this.buildControl(#RFText, #BatchId, "@SYS14462", 1, pass.lookupStr(#BatchId), extendedTypeNum(InventBatchId), '', 0)];
                    }

                    location = WMSLocation::find(pass.lookup(#WMSLocationId), pass.lookup(#InventLocationId));

                    if (location.whsLocationIsLPControlled())
                    {
                        ret += [this.buildControl(#RFText, #LicensePlateId, "@WAX1198", 1, pass.lookupStr(#LicensePlateId), extendedTypeNum(WHSLicensePlateId), '', 0)];
                    }

                    if (!pass.exists(#QtyScrapped))
                    {
                        pass.insert(#QtyScrapped, productionScrapHistory.getQtyScrapped(pass.lookup(#ProdId), pass.lookup(#ItemId)));
                    }

                    ret += [this.buildControl(#RFLabel, #QtyScrapped , strFmt("@WAX2273", pass.lookup(#QtyScrapped), InventTable::find(pass.lookup(#ItemId)).bomUnitId) , 1, '', #WHSRFUndefinedDataType, '', 0, true, "", WHSRFColorText::Default, extendedTypeNum(Qty))];

                    ret += [this.buildControl(#RFText, #QtyToScrap, "@WAX2265", 1, pass.lookupStr(#QtyToScrap), extendedTypeNum(Qty), '', 0)];

                    ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
                }
                else
                {
                    select firstonly OprNum, ProdId from prodBOM
                        where prodBOM.ProdId    == prodTable.ProdId
                            && prodBOM.ItemId   == pass.lookup(#ItemId);

                    wrkCtrTable = WrkCtrTable::find(ProdRoute::find(prodBOM.ProdId, prodBOM.OprNum, RouteOprPriority::Primary).displayWrkCtrId());

                    location = WMSLocation::find(wrkCtrTable.inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).wmsLocationId, wrkCtrTable.inputWMSLocation(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())).InventLocationId);

                    ret += [this.buildControl(#RFText, #WMSLocationId, "@SYS80395", 1, location.wMSLocationId, extendedTypeNum(WMSLocationId), '', 0)];
                }
            }
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;
        WHSRFPassthrough        fieldValues;
        container               tmpFieldValues;
        boolean                 complete;
        boolean                 rebuild;

        mode = WHSWorkExecuteMode::ProductionScrap;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0: // Enter Prod Id
                ret = this.buildProdScrap(ret);
                ret = this.addCancelButton(ret, 1, true);
                step = 1;
                break;

            case 1: // Enter Item Id, Location, Batch Id (if required)
                hasError = this.hasError(con);

                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);
                pass = this.combineMaps(pass, fieldValues);

                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = this.rebuildErrorCon(con);
                    ret = this.addOkButton(ret);
                    ret = this.addCancelButton(ret, 1, true);

                    this.clearPassAndFieldValues(fieldValues, pass, #QtyToScrap);
                    this.clearPassAndFieldValues(fieldValues, pass, #QtyScrapped);
                    break;
                }

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (complete && pass.exists(#ItemId) && pass.exists(#WMSLocationId)
                    && (this.isBatchEnabled() ? pass.exists(#BatchId) : true))
                {
                    ret = conNull();
                    ret = this.buildProdScrap(ret);
                    ret = this.addCancelButton(ret, 1, true);
                    step = 2;
                }
                else
                {
                    ret = conNull();
                    ret = this.buildProdScrap(ret);
                    ret = this.addCancelButton(ret, 1, true);
                }
                break;

            case 2: // Enter quantity to scrap
                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, con, pass);
                fieldValues = WHSRFPassthrough::create(tmpFieldValues);

                if (fieldValues.exists(#BatchId) && fieldValues.lookup(#BatchId) != pass.lookup(#BatchId))
                {
                    rebuild = true;
                    step = 1;

                    this.clearPassAndFieldValues(fieldValues, pass, #QtyToScrap);
                    this.clearPassAndFieldValues(fieldValues, pass, #QtyScrapped);
                }
                if (fieldValues.lookupStr(#WMSLocationId) != pass.lookup(#WMSLocationId))
                {
                    rebuild = true;

                    this.clearPassAndFieldValues(fieldValues, pass, #QtyToScrap);
                    this.clearPassAndFieldValues(fieldValues, pass, #QtyScrapped);
                    this.clearPassAndFieldValues(fieldValues, pass, #BatchId);
                }
                if (fieldValues.exists(#ItemId) && fieldValues.lookup(#ItemId) != pass.lookup(#ItemId))
                {
                    rebuild = true;
                    step = 1;

                    this.clearPassAndFieldValues(fieldValues, pass, #QtyToScrap);
                    this.clearPassAndFieldValues(fieldValues, pass, #QtyScrapped);
                    this.clearPassAndFieldValues(fieldValues, pass, #WMSLocationId);
                    this.clearPassAndFieldValues(fieldValues, pass, #BatchId);
                }
                if (fieldValues.exists(#ProdId) && fieldValues.lookup(#ProdId) != pass.lookup(#ProdId))
                {
                    rebuild = true;
                    step = 1;

                    this.clearPassAndFieldValues(fieldValues, pass, #QtyToScrap);
                    this.clearPassAndFieldValues(fieldValues, pass, #QtyScrapped);
                    this.clearPassAndFieldValues(fieldValues, pass, #WMSLocationId);
                    this.clearPassAndFieldValues(fieldValues, pass, #ItemId);
                    this.clearPassAndFieldValues(fieldValues, pass, #BatchId);
                }

                pass = this.combineMaps(pass, fieldValues);

                hasError = this.hasError(con);

                if (hasError)
                {
                    ret = this.rebuildErrorCon(con);

                    if (conLen(ret) < conLen(con))
                    {
                        ret = this.addOkButton(ret);
                        ret = this.addCancelButton(ret, 1, true);

                        step = 1;
                        ret = conPoke(ret, 1, conPoke(conPeek(ret, 1), 2, step));

                        this.clearPassAndFieldValues(fieldValues, pass, #QtyToScrap);
                        this.clearPassAndFieldValues(fieldValues, pass, #QtyScrapped);
                    }

                    break;
                }

                [ret, complete] = this.processFieldValues(con, fieldValues);

                if (complete && pass.exists(#QtyToScrap))
                {
                    WHSProductionScrapHistory::createProdPickingListJournal(
                        pass.lookup(#ProdId),
                        pass.lookup(#ItemId),
                        pass.lookupNum(#QtyToScrap),
                        pass.lookup(#SelectedValueUOM),
                        userId,
                        pass.lookup(#InventLocationId),
                        pass.lookup(#WMSLocationId),
                        pass.lookupStr(#LicensePlateId),
                        pass.lookupStr(#BatchId));

                    pass.remove(#ProdId);
                    pass.remove(#ItemId);
                    pass.remove(#WMSLocationId);
                    pass.remove(#QtyToScrap);
                    pass.remove(#SelectedValueUOM);
                    pass.remove(#QtyScrapped);
                    pass.remove(#LicensePlateId);
                    pass.remove(#BatchId);

                    ret = conNull();
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    ret = this.buildProdScrap(ret);
                    ret = this.addCancelButton(ret, 1, true);
                    step = 1;
                }
                else if (rebuild)
                {
                    ret = conNull();
                    ret = this.buildProdScrap(ret);
                    ret = this.addCancelButton(ret, 1, true);
                }
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildErrorCon</Name>
				<Source><![CDATA[
    /// <summary>
	/// Keeps only fields that have error on the form state.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before rebuilding.
	/// </param>
	/// <returns>
	/// Container containing the form state after rebuilding.
	/// </returns>
    container rebuildErrorCon(container     _con)
    {
        container   ret = _con;
        boolean     clearControl = true;
        int         i
        ;

        for (i = conLen(ret); i > 2; i--)
        {
            if (conPeek(conPeek(_con, i), #error) == '0' && clearControl)
            {
                ret = conDel(ret, i, 1);
            }
            else
            {
                clearControl = false;

                if (conPeek(conPeek(_con, i), #name) == #QtyToScrap)
                {
                    ret = _con;
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPassAndFieldValues</Name>
				<Source><![CDATA[
    private void clearPassAndFieldValues(WHSRFPassthrough _fieldValues, WHSRFPassthrough _pass, str _field)
    {
        if (_fieldValues.exists(_field))
        {
            _fieldValues.insert(_field, '');
        }
        if (_pass.exists(_field))
        {
            _pass.remove(_field);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    private boolean isBatchEnabled()
    {
        return InventTable::find(pass.lookup(#ItemId)).isItemBatchActivated();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>