<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchTotalsDelayCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchTotalsDelayCalc</c> class is used to delay the <c>PurchTotals</c> calculation.
/// </summary>
internal final class PurchTotalsDelayCalc
{
    Set purchTableRecIdSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPurchTableRecId</Name>
				<Source><![CDATA[
    private void addPurchTableRecId(RecId _purchTableRecId)
    {
        purchTableRecIdSet.add(_purchTableRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        purchTableRecIdSet = new Set(Types::Int64);
        this.registerEventHandlers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsAbort</Name>
				<Source><![CDATA[
    private void onTtsAbort()
    {
        this.unregisterEventHandlers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsPreCommit</Name>
				<Source><![CDATA[
    private void onTtsPreCommit()
    {
        this.unregisterEventHandlers();
        this.puchTotalsCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>puchTotalsCalc</Name>
				<Source><![CDATA[
    private void puchTotalsCalc()
    {
        SetEnumerator sePurchTableRecIdSet = PurchTableRecIdSet.getEnumerator();
        PurchTable purchTable;
        while (sePurchTableRecIdSet.moveNext())
        {
            while select forupdate crosscompany purchTable
                where purchTable.RecId == sePurchTableRecIdSet.current()
            {
                changecompany(purchTable.DataAreaId)
                {
                    PurchTotals::newPurchTable(purchTable).calc();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    private void registerEventHandlers()
    {
        appl.onTtsNotifyAbort += eventhandler(this.onTtsAbort);
        appl.onTtsNotifyPreCommit += eventhandler(this.onTtsPreCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandlers</Name>
				<Source><![CDATA[
    private void unregisterEventHandlers()
    {
        appl.onTtsNotifyAbort -= eventhandler(this.onTtsAbort);
        appl.onTtsNotifyPreCommit -= eventhandler(this.onTtsPreCommit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>delayCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records the <c>PurchTable</c> RecId for delay calculation.
    /// </summary>
    /// <param name="_purchTableRecId">
    /// The <c>PurchTable</c> RecId.
    /// </param>
    internal static void delayCalc(RecId _purchTableRecId)
    {
        PurchTotalsDelayCalc instance = PurchTotalsDelayCalc::instance();

        if (instance != null && _purchTableRecId)
        {
            instance.addPurchTableRecId(_purchTableRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    internal static PurchTotalsDelayCalc instance()
    {
        PurchTotalsDelayCalc singleton;

        if (appl.ttsLevel() > 0)
        {
            singleton = SysTransactionScopeCache::get(classStr(PurchTotalsDelayCalc), staticMethodStr(PurchTotalsDelayCalc, instance), null);

            if (singleton == null)
            {
                singleton = new PurchTotalsDelayCalc();
                SysTransactionScopeCache::set(classStr(PurchTotalsDelayCalc), staticMethodStr(PurchTotalsDelayCalc, instance), singleton);
            }
        }

        return singleton;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>