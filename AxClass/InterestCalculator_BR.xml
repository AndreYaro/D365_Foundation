<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterestCalculator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The FinInterestCalculator_Br class is used to calculate Interest Amount using the Interest Data from
/// <table>CustInterestTable_BR</table> or <table>VendInterestTable_BR</table>
/// </summary>
class InterestCalculator_BR
{
    CustVendInterest_BR     custVendFinInterestData;    // Mapping with Interest Data
    date                    paymentDate;                // Payment Date
    date                    origDueDate;                // Initial Due Date
    AmountCur               originalAmount;             // Amount to be calculated
    CurrencyCode            currencyCode;               // Currency used

    date                    newDueDate;

    int                     dueByDays;                  // Number of Days after the Due Date
    int                     dayMonth;

    AmountCur               calculatedAmount;           // Calculated Amount (with interest)
    AmountCur               prevCalcInterestAmount;

    PaymCalendarIDerivationSource  calendarDerivation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute the calculation
    /// </summary>
    /// <returns>
    /// Returns the Interest Amount
    /// </returns>
    public AmountCur calculate()
    {
        PaymCalendarProcessor paymCalendarProc;

        paymCalendarProc = PaymCalendarProcessor::construct();
        newDueDate = paymCalendarProc.adjustDate(newDueDate,
                                                 PaymentDueDateUpdatePolicy::Next,
                                                 calendarDerivation);

        if (paymentDate && (paymentDate > newDueDate))
        {
            if (custVendFinInterestData)
            {
                if (custVendFinInterestData.InterestPct > 0 && custVendFinInterestData.InterestCalcPer > 0)
                {
                    switch (custVendFinInterestData.DayMonth)
                    {
                        case DayMonth::Day:
                            dayMonth = 1;
                            break;
                        case DayMonth::Month:
                            dayMonth = 30;
                            break;
                    }

                    calculatedAmount = ((dueByDays / (custVendFinInterestData.InterestCalcPer * dayMonth)) * (custVendFinInterestData.InterestPct/100) * originalAmount);
                }
                else
                {
                    if (custVendFinInterestData.InterestCalcPer <= 0)
                    {
                        warning(strfmt("@GLS1256", fieldpname(VendInterestSetup_BR, InterestCalcPer), fieldpname(VendInterestSetup_BR, InterestCode), custVendFinInterestData.InterestCode));
                    }
                    calculatedAmount = 0;
                }
            }
            else
            {
                calculatedAmount = prevCalcInterestAmount;
            }
        }
        else
        {
            calculatedAmount = 0;
        }

        return CurrencyExchangeHelper::amount(calculatedAmount, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the initialization for the <c>FinInterestCalculator_Br</c> class.
    /// </summary>
    /// <param name="_custVendFinInterestData">
    /// Mapping used to get the Interest Basic Information (percent, days, days of grace..)
    /// </param>
    /// <param name="_paymentDate">
    /// Payment Date used to calculate the Interest
    /// </param>
    /// <param name="_origdueDate">
    /// Due Date used to calculate the Interest
    /// </param>
    /// <param name="_originalAmount">
    /// Amount used to calculate the interest
    /// </param>
    /// <param name="_currencyCode">
    /// Currency used.
    /// </param>
    /// <param name="_calendarDerivation">
    /// <c>PaymCalendarIDerivationSource</c> instance to retrieve calendar information.
    /// </param>
    /// <param name="_prevCalcInterestAmount">
    /// Previous Interest amount calculated.
    /// </param>
    public void new(CustVendInterest_BR                 _custVendFinInterestData,
                    date                                _paymentDate,
                    date                                _origdueDate,
                    AmountCur                           _originalAmount,
                    CurrencyCode                        _currencyCode,
                    PaymCalendarIDerivationSource       _calendarDerivation,
                    AmountCur                           _prevCalcInterestAmount = 0)
    {
        custVendFinInterestData = _custVendFinInterestData;
        paymentDate             = _paymentDate;
        origDueDate             = _origdueDate;
        newDueDate              = _origdueDate + _custVendFinInterestData.Days;
        dueByDays               = _paymentDate - _origDueDate;
        originalAmount          = _originalAmount;
        currencyCode            = _currencyCode;
        calendarDerivation      = _calendarDerivation;
        calculatedAmount        = 0;
        prevCalcInterestAmount  = _prevCalcInterestAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmountPerDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest amount per day for a given amount.
    /// </summary>
    /// <param name="_interestSetup">
    /// <c>CustVendInterest_BR</c> map to retrieve the interest parameters.
    /// </param>
    /// <param name="_amount">
    /// The amount from which to calculate the interest.
    /// </param>
    /// <returns>
    /// Interest amount per day.
    /// </returns>
    /// <remarks>
    /// Grace days are not taken into account, since the total interest period is unknown. Thus the
    /// total interest amount may not be exactly the amount returned by this method times the number of
    /// days.
    /// </remarks>
    public static FinInterestAmount_BR interestAmountPerDay(CustVendInterest_BR _interestSetup, AmountMST _amount)
    {
        int days;

        if (!_interestSetup.InterestCalcPer)
        {
            return 0;
        }

        if (_interestSetup.DayMonth == DayMonth::Day)
        {
            days = 1;
        }
        else
        {
            // Month case
            days = 30;
        }

        return (_interestSetup.InterestPct / 100) * _amount / (days * _interestSetup.InterestCalcPer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestAmountPerMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest amount per month for a given amount.
    /// </summary>
    /// <param name="_interestSetup">
    /// <c>CustVendInterest_BR</c> map to retrieve the interest parameters.
    /// </param>
    /// <param name="_amount">
    /// The amount from which to calculate the interest.
    /// </param>
    /// <returns>
    /// Interest amount per month.
    /// </returns>
    /// <remarks>
    /// Grace days are not taken into account, since the total interest period is unknown. Thus the
    /// total interest amount may not be exactly the amount returned by this method times the number of
    /// months.
    /// </remarks>
    public static FinInterestAmount_BR interestAmountPerMonth(CustVendInterest_BR _interestSetup, AmountMST _amount)
    {
        int timesPerMonth;

        if (!_interestSetup.InterestCalcPer)
        {
            return 0;
        }

        if (_interestSetup.DayMonth == DayMonth::Month)
        {
            timesPerMonth = 1;
        }
        else // interest rate is per day
        {
            timesPerMonth = 30;
        }

        return (_interestSetup.InterestPct / 100) * _amount * timesPerMonth / _interestSetup.InterestCalcPer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interestPctPerMonth</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the interest percentage per month.
    /// </summary>
    /// <param name="_interestSetup">
    /// <c>CustVendInterest_BR</c> map to retrieve the interest parameters.
    /// </param>
    /// <returns>
    /// Interest percentage per month.
    /// </returns>
    public static InterestPct_BR interestPctPerMonth(CustVendInterest_BR _interestSetup)
    {
        int timesPerMonth;

        if (!_interestSetup.InterestCalcPer)
        {
            return 0;
        }

        if (_interestSetup.DayMonth == DayMonth::Month)
        {
            timesPerMonth = 1;
        }
        else // interest rate is per day
        {
            timesPerMonth = 30;
        }

        return _interestSetup.InterestPct * timesPerMonth / _interestSetup.InterestCalcPer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>