<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEntryCertificateCreate_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustEntryCertificateCreate_W</c> class is intended to create entry certificates based on packing slips or invoices.
/// </summary>
public class CustEntryCertificateCreate_W extends RunBaseBatch implements BatchRetryable
{
    private const int CurrentVersion = 1;
    private Common  record;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmRecord</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common parmRecord(Common _record = record)
    {
        record = _record;
        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            switch (record.TableId)
            {
                case tableNum(CustPackingSlipJour):
                    CustPackingSlipJour custPackingSlipJour = record;
                    CustEntryCertificateJour_W::constructFromPackingSlip(custPackingSlipJour);
                    break;

                case tableNum(CustInvoiceJour):
                    CustInvoiceJour custInvoiceJour = record;
                    CustEntryCertificateJour_W::constructFromInvoice(custInvoiceJour);
                    break;

                default:
                    break;
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    /// A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, record];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    /// The packed class in a container.
    /// </param>
    /// <returns>
    /// true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    /// When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, record] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check to see if Audit policy can run in a new session.
    /// </summary>
    /// <returns>
    /// False.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Description of the class.
    /// </summary>
    /// <returns>
    /// Text description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS4004136";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the certificate creation.
    /// </summary>
    /// <param name = "_args">
    /// Arguments.
    /// </param>
    public static void main(Args _args)
    {
        if ( _args
            && _args.record()
            && (_args.dataset() == tableNum(CustPackingSlipJour) || _args.dataset() == tableNum(CustInvoiceJour)))
        {
            CustEntryCertificateCreate_W custEntryCertificateCreate = new CustEntryCertificateCreate_W();
            custEntryCertificateCreate.parmRecord(_args.record());

            if (custEntryCertificateCreate.prompt())
            {
                custEntryCertificateCreate.runOperation();

                FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
                if (formDataSource)
                {
                    formDataSource.reread();
                    formDataSource.refresh();
                    formDataSource.active();
                }
            }
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>