<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplTransSource_CashDoc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplTransSource_CashDoc_RU extends EmplTransSource_RU
{
    RCashTrans      cashTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillSourceData</Name>
				<Source><![CDATA[
        protected void fillSourceData()
    {
        TaxTrans taxTrans;

        select sum(SourceTaxAmountCur),
               sum(SourceBaseAmountCur),
               sum(TaxBaseAmount),
               sum(TaxAmount)
        from taxTrans
        where taxTrans.Voucher          == cashTrans.Voucher    &&
              taxTrans.TransDate        == cashTrans.TransDate  &&
              taxTrans.TaxDirection     != TaxDirection::UseTax &&
              taxTrans.TaxOrigin        != TaxOrigin::Transfer;

        sourceAmountCur        = taxTrans.SourceBaseAmountCur;
        sourceAmountMST        = taxTrans.TaxBaseAmount;
        sourceTaxAmountCur     = taxTrans.SourceTaxAmountCur;
        sourceTaxAmountMST     = taxTrans.TaxAmount;

        sourceAmountCur        = sourceAmountCur ? sourceAmountCur + sourceTaxAmountCur : cashTrans.AmountCur;
        sourceAmountMST        = sourceAmountMST ? sourceAmountMST + sourceTaxAmountMST : cashTrans.AmountMST;
        sourceCurrencyCode     = cashTrans.CurrencyCode;
        sourceName             = "@GLS104472";
        sourceNum              = cashTrans.AccountNum;
        sourceTableId          = tableNum(RCashTrans);
        sourceRecId            = cashTrans.RecId;
        sourceTransDate        = cashTrans.TransDate;
        sourceDescription      = cashTrans.Txt;
        sourceType             = EmplTransSourceType_RU::CashDoc;
        sourceTaxGroup         = taxTrans.TaxGroup;
        sourceTaxItemGroup     = taxTrans.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceRecord</Name>
				<Source><![CDATA[
        protected void findSourceRecord()
    {
        cashTrans = RCashTrans::findRecId(emplTrans.RefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOutputNames</Name>
				<Source><![CDATA[
        protected void initOutputNames()
    {
        ;
        formName       = formStr(RCashTrans);
        itemOutputName = menuitemOutputStr(RCashOrderDispatcher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Ledger dimension
    /// </summary>
    /// <returns>
    ///  <c>LedgerDimensionAccount</c>
    /// </returns>
    public LedgerDimensionAccount ledgerDimension()
    {
        return cashTrans.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Offset ledger dimension
    /// </summary>
    /// <returns>
    ///  <c>LedgerDimensionAccount</c>
    /// </returns>
    public LedgerDimensionAccount offsetLedgerDimension()
    {
        return cashTrans.OffsetLedgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>