<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocRecXmlDivergApproverController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The controller for the approval of the divergences between the received XML and the vendor invoice
/// </summary>
class EFDocRecXmlDivergApproverController_BR extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;
        EFDocRecXmlDivergApproverContract_BR  dataContract;

        ret = super();

        dataContract = this.getDataContractObject();

        if (dataContract.parmApprovalReason() == '')
        {
            ret = checkFailed(strFmt("@SYS84753", fieldId2pname(tableNum(EFDocReceivedXmlApprovedDivergences_BR), fieldNum(EFDocReceivedXmlApprovedDivergences_BR, ApprovalReason))));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>EFDocRecXmlDivergApproverController_BR</c> class based on the <c>Args</c> object
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object that contains parameters for the construction of the controller
    /// </param>
    /// <returns>
    /// A new instance of the <c>EFDocRecXmlDivergApproverController_BR</c> class
    /// </returns>
    public static EFDocRecXmlDivergApproverController_BR construct(Args _args)
    {
        EFDocRecXmlDivergApproverController_BR  controller;
        EFDocRecXmlDivergApproverContract_BR    contract;
        EFDocumentReceivedXML_BR                receivedXml;
        EFDocRecXmlDivergApprovedAmounts_BR      approvedAmounts;

        if (_args.dataset() == tableNum(EFDocumentReceivedXML_BR))
        {
            controller = new EFDocRecXmlDivergApproverController_BR();

            controller.initializeFromArgs(_args);

            receivedXml = _args.record();
            approvedAmounts = _args.parmObject() as EFDocRecXmlDivergApprovedAmounts_BR;

            contract = controller.getDataContractObject();

            contract.parmReceivedXmlRecId(receivedXml.RecId);
            contract.parmApprovedAmounts(approvedAmounts);

            controller.parmShowDialog(true);
            controller.showBatchTab(false);
            controller.parmExecutionMode(SysOperationExecutionMode::Synchronous);
            controller.parmLoadFromSysLastValue(false);
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EFDocRecXmlDivergApproverController_BR  controller = EFDocRecXmlDivergApproverController_BR::construct(_args);

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>