<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxUncommittedDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>TaxUncommittedDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for tax uncommitted data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationTransactionProvider))]
[DimensionStructureSynchronizationProviderCaption("@Tax:TaxUncommittedDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterfaceAttribute(true)]
public class TaxUncommittedDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationTransactionProvider, DimensionStructureISynchronizationTransactionProviderV2
{
    private const str InstrumentationNamespace = classStr(TaxUncommittedDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(TaxUncommittedDimensionStructureSynchronizationProvider),
            staticMethodStr(TaxUncommittedDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TaxUncommittedDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            TaxUncommitted taxUncommitted;
            AccountingDistribution accountingDistribution;
            SourceDocumentLine sourceDocumentLine;
            AccountingEvent accountingEvent;
            PurchTable purchTable;
            DimensionAttributeValueCombination dimAttrValueCombination;
            int purchTableId = tableNum(PurchTable);
            int purchTableHistoryId = tableNum(PurchTableHistory);
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            boolean prevent = false;

            CompanyInfo companyInfo = CompanyInfo::find(_ledger.PrimaryForLegalEntity);

            // --- Extract LedgerDimension's from unposted taxUncommitted ---
            // --- Note: For PO's, taxUncommitted.Company will either be companyId or empty
            // LedgerDimension
            select firstonly RecId from taxUncommitted
                where taxUncommitted.Posted == NoYes::No &&
                    taxUncommitted.HeadingTableId == purchTableId
                exists join dimAttrValueCombination
                    where dimAttrValueCombination.RecId == taxUncommitted.LedgerDimension
                        && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                        || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                exists join dimAttrValueGroupCombination
                    where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                exists join dimAttrValueGroup
                    where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                        && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId
                exists join purchTable
                    where purchTable.RecId == taxUncommitted.HeadingRecId
                        && purchTable.DocumentState == VersioningDocumentState::Confirmed
                        && purchTable.PurchStatus != PurchStatus::Invoiced
                exists join accountingDistribution
                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                        && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing;

            if (taxUncommitted.RecId)
            {
                prevent = true;
            }
            else
            {
                // OperationLedgerDimension
                select firstonly RecId from taxUncommitted
                    where taxUncommitted.Posted == NoYes::No
                        && taxUncommitted.HeadingTableId == purchTableId
                    exists join dimAttrValueCombination
                        where dimAttrValueCombination.RecId == taxUncommitted.OperationLedgerDimension
                            && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                            || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                    exists join dimAttrValueGroupCombination
                        where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                    exists join dimAttrValueGroup
                        where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                            && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId
                    exists join purchTable
                        where purchTable.RecId == taxUncommitted.HeadingRecId
                            && purchTable.DocumentState == VersioningDocumentState::Confirmed
                            && purchTable.PurchStatus != PurchStatus::Invoiced
                    exists join accountingDistribution
                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                            && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing;

                if (taxUncommitted.RecId)
                {
                    prevent = true;
                }
            }

            if (!prevent)
            {
                // TaxOffsetUseTaxLedgerDimension
                select firstonly RecId from taxUncommitted
                    where taxUncommitted.Posted == NoYes::No
                        && taxUncommitted.HeadingTableId == purchTableId
                    exists join dimAttrValueCombination
                        where dimAttrValueCombination.RecId == taxUncommitted.TaxOffsetUseTaxLedgerDimension
                            && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                            || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                    exists join dimAttrValueGroupCombination
                        where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                    exists join dimAttrValueGroup
                        where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                            && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId
                    exists join purchTable
                        where purchTable.RecId == taxUncommitted.HeadingRecId
                            && purchTable.DocumentState == VersioningDocumentState::Confirmed
                            && purchTable.PurchStatus != PurchStatus::Invoiced
                    exists join accountingDistribution
                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                            && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing;

                if (taxUncommitted.RecId)
                {
                    prevent = true;
                }
            }

            if (prevent)
            {
                // The account structure is referenced by tax uncommited
                checkFailed(strfmt("@Tax:TaxUncommitedLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                _ret.booleanResult(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                dimSynchronize;
            DimensionSynchronize                dimSynchronizeNotExists;
            DimensionSynchronizeLedger          dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            TaxUncommitted                      taxUncommitted;
            AccountingDistribution              accountingDistribution;
            SourceDocumentLine                  sourceDocumentLine;
            AccountingEvent                     accountingEvent;
            PurchTable                          purchTable;
            DimensionAttributeValueCombination  dimAttrValueCombination;
            int                                 purchTableId = tableNum(PurchTable);
            int                                 purchTableHistoryId = tableNum(PurchTableHistory);
            DataArea                            company;
            DataAreaId                          companyId;
 
            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TaxUncommittedDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    // Process ledger dimension's from tax uncommitted
                    accountingDistribution.skipDeleteActions(true);
                    accountingDistribution.skipEvents(true);

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                        exists join dimSynchronizeLedger
                            where dimSynchronizeLedger.DataArea == company.Id
                    {
                        companyId = company.Id;

                        changecompany(companyId)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            taxUncommitted.clear();
                            purchTable.clear();

                            if (TaxUncommittedDimensionStructureSyncPerfImprvFlight::instance().isEnabled())
                            {
                                TaxUncommittedDimensionStructureSyncTmp accountingDistributionTmp, accountingDistributionTmpExists;
                                accountingDistributionTmpExists.linkPhysicalTableInstance(accountingDistributionTmp);

                                // delete distributions which are non-reversal and not posted to GL (non-PO)
                                insert_recordset accountingDistributionTmp
                                (
                                    SourceDocumentLineRecId,
                                    AccountingDistributionRecId
                                )
                                select SourceDocumentLine from taxUncommitted
                                    where taxUncommitted.HeadingTableId != purchTableId &&
                                        taxUncommitted.HeadingTableId != purchTableHistoryId &&
                                        taxUncommitted.SourceDocumentLine != 0
                                    join RecId from accountingDistribution
                                        where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing &&
                                            accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                    notexists join accountingEvent
                                        where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                            accountingEvent.State != AccountingEventState::Started
                                    notexists join accountingDistributionTmpExists
                                        where accountingDistributionTmpExists.AccountingDistributionRecId == accountingDistribution.RecId;

                                // delete distributions which are non-reversal and not posted to GL (non-confirmed PO)
                                // (note: all taxUncommitted associated to purchTableHistoryId should be confirmed)
                                insert_recordset accountingDistributionTmp
                                (
                                    PurchTableRecId,
                                    TaxUncommittedRecId,
                                    AccountingDistributionRecId,
                                    SourceDocumentLineRecId
                                )
                                select RecId from purchTable
                                    where purchTable.DocumentState != VersioningDocumentState::Confirmed
                                    join RecId from taxUncommitted
                                        where taxUncommitted.HeadingRecId == purchTable.RecId &&
                                            taxUncommitted.HeadingTableId == purchTableId
                                    join RecId from accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                            accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    join RecId from sourceDocumentLine
                                        where sourceDocumentLine.RecId == taxUncommitted.SourceDocumentLine &&
                                            (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed ||
                                            sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                                    notexists join accountingEvent
                                        where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                            accountingEvent.State != AccountingEventState::Started
                                    notexists join accountingDistributionTmpExists
                                        where accountingDistributionTmpExists.AccountingDistributionRecId == accountingDistribution.RecId;

                                select firstonly RecId from accountingDistributionTmpExists;
                                if (accountingDistributionTmpExists.RecId)
                                {
                                    // delete tables which have cascade delete relations to AccountingDistritbution
                                    insert_recordset accountingDistributionTmp
                                    (
                                        AccountingDistributionRecId,
                                        SourceDocumentLineRecId
                                    )
                                    select RecId, SourceDocumentLine from accountingDistribution
                                        where accountingDistribution.ParentDistribution != 0
                                        exists join accountingDistributionTmpExists
                                            where accountingDistributionTmpExists.AccountingDistributionRecId == accountingDistribution.ParentDistribution;

                                    TrvAccountingDistribution trvAccountingDistribution;
                                    ProjectAccountingDistribution projectAccountingDistribution;
                                    SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;

                                    trvAccountingDistribution.skipEvents(true);
                                    trvAccountingDistribution.skipDeleteActions(true);
                                    projectAccountingDistribution.skipEvents(true);
                                    projectAccountingDistribution.skipDataMethods(true);
                                    projectAccountingDistribution.skipDeleteActions(true);
                                    subledgerJournalAccountEntryDistribution.skipEvents(true);
                                    subledgerJournalAccountEntryDistribution.skipDeleteActions(true);

                                    delete_from accountingDistribution
                                        exists join accountingDistributionTmp
                                            where accountingDistributionTmp.AccountingDistributionRecId == accountingDistribution.RecId;

                                    delete_from trvAccountingDistribution
                                        exists join accountingDistributionTmp
                                            where accountingDistributionTmp.AccountingDistributionRecId == trvAccountingDistribution.AccountingDistribution;

                                    delete_from projectAccountingDistribution
                                        exists join accountingDistributionTmp
                                            where accountingDistributionTmp.AccountingDistributionRecId == projectAccountingDistribution.AccountingDistribution;

                                    delete_from subledgerJournalAccountEntryDistribution
                                        exists join accountingDistributionTmp
                                            where accountingDistributionTmp.AccountingDistributionRecId == subledgerJournalAccountEntryDistribution.AccountingDistribution;

                                    // delete source document lines which have no distribution.
                                    sourceDocumentLine.skipEvents(true);
                                    sourceDocumentLine.skipDataMethods(true);
                                    sourceDocumentLine.skipDeleteActions(true);

                                    delete_from sourceDocumentLine
                                        where (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed ||
                                            sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                                        exists join accountingDistributionTmp
                                            where accountingDistributionTmp.SourceDocumentLineRecId == sourceDocumentLine.RecId;

                                    // delete any existing TaxUncommitted records which have no SDL reference
                                    delete_from taxUncommitted
                                        exists join accountingDistributionTmp
                                            where accountingDistributionTmp.SourceDocumentLineRecId == taxUncommitted.SourceDocumentLine;

                                    // delete any existing TaxUncommitted records for non-SourceDocument (journals, etc)
                                    delete_from taxUncommitted
                                        where taxUncommitted.SourceDocumentLine == 0;
                                }
                            }
                            else
                            {
                                // delete distributions which are non-reversal and not posted to GL (non-PO)
                                delete_from accountingDistribution
                                    where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    exists join taxUncommitted
                                        where taxUncommitted.SourceDocumentLine == accountingDistribution.SourceDocumentLine &&
                                            taxUncommitted.HeadingTableId != purchTableId &&
                                            taxUncommitted.HeadingTableId != purchTableHistoryId &&
                                            taxUncommitted.SourceDocumentLine != 0
                                    notexists join accountingEvent
                                        where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                            accountingEvent.State != AccountingEventState::Started;

                                // delete distributions which are non-reversal and not posted to GL (non-confirmed PO)
                                // (note: all taxUncommitted associated to purchTableHistoryId should be confirmed)
                                delete_from accountingDistribution
                                    where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    exists join taxUncommitted
                                        where taxUncommitted.SourceDocumentLine == accountingDistribution.SourceDocumentLine &&
                                            taxUncommitted.HeadingTableId == purchTableId
                                    join RecId from purchTable  // not using exists join to avoid a bad sql query plan
                                        where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                            purchTable.DocumentState != VersioningDocumentState::Confirmed
                                    exists join sourceDocumentLine
                                        where (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed ||
                                            sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                                    notexists join accountingEvent
                                        where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                            accountingEvent.State != AccountingEventState::Started;

                                // delete tables which have cascade delete relations to AccountingDistritbution
                                AccountingDistribution parentAccountingDistribution;
                                delete_from accountingDistribution
                                    where accountingDistribution.ParentDistribution != 0
                                    notexists join parentAccountingDistribution
                                        where parentAccountingDistribution.RecId == accountingDistribution.ParentDistribution;

                                TrvAccountingDistribution trvAccountingDistribution;
                                ProjectAccountingDistribution projectAccountingDistribution;
                                SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;

                                trvAccountingDistribution.skipEvents(true);
                                trvAccountingDistribution.skipDeleteActions(true);
                                projectAccountingDistribution.skipEvents(true);
                                projectAccountingDistribution.skipDataMethods(true);
                                projectAccountingDistribution.skipDeleteActions(true);
                                subledgerJournalAccountEntryDistribution.skipEvents(true);
                                subledgerJournalAccountEntryDistribution.skipDeleteActions(true);

                                delete_from trvAccountingDistribution
                                    where trvAccountingDistribution.AccountingDistribution != 0
                                    notexists join accountingDistribution
                                        where accountingDistribution.RecId == trvAccountingDistribution.AccountingDistribution;

                                delete_from projectAccountingDistribution
                                    where projectAccountingDistribution.AccountingDistribution != 0
                                    notexists join accountingDistribution
                                        where accountingDistribution.RecId == projectAccountingDistribution.AccountingDistribution;

                                delete_from subledgerJournalAccountEntryDistribution
                                    where subledgerJournalAccountEntryDistribution.AccountingDistribution != 0
                                    notexists join accountingDistribution
                                        where accountingDistribution.RecId == subledgerJournalAccountEntryDistribution.AccountingDistribution;

                                // delete source document lines which have no distribution.
                                sourceDocumentLine.clear();
                                sourceDocumentLine.skipEvents(true);
                                sourceDocumentLine.skipDataMethods(true);
                                sourceDocumentLine.skipDeleteActions(true);
                                delete_from sourceDocumentLine
                                    where (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed ||
                                        sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                                exists join taxUncommitted
                                    where taxUncommitted.SourceDocumentLine == sourceDocumentLine.RecId &&
                                        taxUncommitted.SourceDocumentLine != 0
                                notexists join accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == sourceDocumentLine.RecId;

                                // delete any existing TaxUncommitted records which have no SDL reference
                                delete_from taxUncommitted
                                    where taxUncommitted.SourceDocumentLine != 0
                                    notexists join sourceDocumentLine
                                        where sourceDocumentLine.RecId == taxUncommitted.SourceDocumentLine;

                                // delete any existing TaxUncommitted records for non-SourceDocument (journals, etc)
                                delete_from taxUncommitted
                                    where taxUncommitted.SourceDocumentLine == 0;

                                // --- Extract LedgerDimension's from unposted taxUncommitted ---
                                // --- Note: For PO's, taxUncommitted.Company will either be companyId or empty
                                // LedgerDimension
                                insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select LedgerDimension, companyId from taxUncommitted
                                    group by taxUncommitted.LedgerDimension, taxUncommitted.Company, dimAttrValueCombination.LedgerDimensionType
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == taxUncommitted.LedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join purchTable
                                        where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                            purchTable.DocumentState == VersioningDocumentState::Confirmed
                                    exists join accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                            accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == taxUncommitted.LedgerDimension;

                                activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                                activityContext.addCustomProperty('WereRecordsInserted_LedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                                // OperationLedgerDimension
                                insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select OperationLedgerDimension, companyId from taxUncommitted
                                    group by taxUncommitted.OperationLedgerDimension, taxUncommitted.Company, dimAttrValueCombination.LedgerDimensionType
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == taxUncommitted.OperationLedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join purchTable
                                        where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                            purchTable.DocumentState == VersioningDocumentState::Confirmed
                                    exists join accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                            accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == taxUncommitted.OperationLedgerDimension;

                                activityContext.addCustomProperty('WereRecordsInserted_OperationLedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                                // TaxOffsetUseTaxLedgerDimension
                                insert_recordset dimSynchronize (OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select TaxOffsetUseTaxLedgerDimension, companyId from taxUncommitted
                                    group by taxUncommitted.TaxOffsetUseTaxLedgerDimension, taxUncommitted.Company, dimAttrValueCombination.LedgerDimensionType
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == taxUncommitted.TaxOffsetUseTaxLedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join purchTable
                                        where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                            purchTable.DocumentState == VersioningDocumentState::Confirmed
                                    exists join accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                            accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == taxUncommitted.TaxOffsetUseTaxLedgerDimension;

                                activityContext.addCustomProperty('WereRecordsInserted_TaxOffsetUseTaxLedgerDimension', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        return DimensionStructureChangeSynchronize::synchronizeStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        if (TaxUncommittedDimensionStructureSyncPerfImprvFlight::instance().isEnabled())
        {
            return;
        }

        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize        dimSynchronize;
            DimensionSynchronizeLedger  dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            TaxUncommitted              taxUncommitted;
            AccountingDistribution      accountingDistribution;
            PurchTable                  purchTable;
            int                         purchTableId = tableNum(PurchTable);
            DataArea                    company;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TaxUncommittedDimensionStructureSynchronizationProvider, updateProviderReferences));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    // Update tax uncommited with the new ledger dimension values
                    while select Id from company
                        where company.IsVirtual == NoYes::No
                        exists join dimSynchronizeLedger
                            where dimSynchronizeLedger.DataArea == company.Id
                    {
                        changecompany(company.Id)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            taxUncommitted.clear();
                            purchTable.clear();

                            // LedgerDimension
                            update_recordset taxUncommitted
                                setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                join purchTable
                                    where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                        purchTable.DocumentState == VersioningDocumentState::Confirmed
                                join accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                        accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join RecId, UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == taxUncommitted.LedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                            Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", taxUncommitted.rowCount(), tableId2PName(taxUncommitted.TableId), company.Id));

                            activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                            activityContext.addCustomProperty('WereRecordsUpdated_LedgerDimension', int2str(taxUncommitted.rowCount() > 0));

                            // OperationLedgerDimension
                            update_recordset taxUncommitted
                                setting OperationLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                join purchTable
                                    where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                        purchTable.DocumentState == VersioningDocumentState::Confirmed
                                join accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                        accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join RecId, UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == taxUncommitted.OperationLedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                            activityContext.addCustomProperty('WereRecordsUpdated_OperationLedgerDimension', int2str(taxUncommitted.rowCount() > 0));

                            // TaxOffsetUseTaxLedgerDimension
                            update_recordset taxUncommitted
                                setting TaxOffsetUseTaxLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                join purchTable
                                    where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                        purchTable.DocumentState == VersioningDocumentState::Confirmed
                                join accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                        accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join RecId, UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == taxUncommitted.TaxOffsetUseTaxLedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension;

                            activityContext.addCustomProperty('WereRecordsUpdated_TaxOffsetUseTaxLedgerDimension', int2str(taxUncommitted.rowCount() > 0));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _request)
    {
        const int purchTableId = tableNum(PurchTable);

        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
        DataArea company;
        PurchTable purchTable;
        TaxUncommitted taxUncommitted;
        AccountingDistribution accountingDistribution;
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TaxUncommittedDimensionStructureSynchronizationProvider, updateProviderReferencesV2));

        try
        {
            ttsbegin;
            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    // Update tax uncommited with the new ledger dimension values
                    while select Id from company
                        where company.IsVirtual == NoYes::No
                        exists join dimSynchronizeLedger
                            where dimSynchronizeLedger.DataArea == company.Id
                                && dimSynchronizeLedger.BatchJobId == batchJobId
                    {
                        changecompany(company.Id)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            taxUncommitted.clear();
                            purchTable.clear();

                            // LedgerDimension
                            update_recordset taxUncommitted
                                setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where taxUncommitted.Posted == NoYes::No
                                        && taxUncommitted.HeadingTableId == purchTableId
                                join RecId from purchTable
                                    where purchTable.RecId == taxUncommitted.HeadingRecId
                                        && purchTable.DocumentState == VersioningDocumentState::Confirmed
                                        && purchTable.PurchStatus != PurchStatus::Invoiced
                                join RecId from accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                        && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == taxUncommitted.LedgerDimension
                                        && dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                        && dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                            Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", taxUncommitted.rowCount(), tableId2PName(taxUncommitted.TableId), company.Id));

                            activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                            activityContext.addCustomProperty('WereRecordsUpdated_LedgerDimension', int2str(taxUncommitted.rowCount() > 0));

                            // OperationLedgerDimension
                            update_recordset taxUncommitted
                                setting OperationLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where taxUncommitted.Posted == NoYes::No
                                        && taxUncommitted.HeadingTableId == purchTableId
                                join RecId from purchTable
                                    where purchTable.RecId == taxUncommitted.HeadingRecId
                                        && purchTable.DocumentState == VersioningDocumentState::Confirmed
                                        && purchTable.PurchStatus != PurchStatus::Invoiced
                                join RecId from accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                        && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == taxUncommitted.OperationLedgerDimension
                                        && dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                        && dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                            activityContext.addCustomProperty('WereRecordsUpdated_OperationLedgerDimension', int2str(taxUncommitted.rowCount() > 0));

                            // TaxOffsetUseTaxLedgerDimension
                            update_recordset taxUncommitted
                                setting TaxOffsetUseTaxLedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                join RecId from purchTable
                                    where purchTable.RecId == taxUncommitted.HeadingRecId
                                        && purchTable.DocumentState == VersioningDocumentState::Confirmed
                                        && purchTable.PurchStatus != PurchStatus::Invoiced
                                join RecId from accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                        && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join UpdatedLedgerDimension from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == taxUncommitted.TaxOffsetUseTaxLedgerDimension
                                        && dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                                        && dimSynchronize.ProviderStatusTrackingId == _request.parmProviderStatusTrackingId();

                            activityContext.addCustomProperty('WereRecordsUpdated_TaxOffsetUseTaxLedgerDimension', int2str(taxUncommitted.rowCount() > 0));
                        }
                    }
                }
            }
            ttscommit;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() > MaxRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        const TableId purchTableId = tableNum(PurchTable);
        const TableId purchTableHistoryId = tableNum(PurchTableHistory);

        DimensionSynchronizeDetail dimSynchronize;
        DimensionSynchronizeDetail dimSynchronizeNotExists;
        DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
        DimensionAttributeValueCombination dimAttrValueCombination;
        DataArea company;
        DataAreaId companyId;
        RefRecId correlationId;
        DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(TaxUncommittedDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();
            unchecked(Uncheck::XDS)
            {
                select forupdate firstonly dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();
                    correlationId = dimensionStructureSyncProviderStatusTracking.RecId;

                    ttsbegin;

                    AccountingDistribution accountingDistribution;
                    TaxUncommitted taxUncommitted;
                    PurchTable purchTable;
                    AccountingEvent accountingEvent;
                    SourceDocumentLine sourceDocumentLine;

                    accountingDistribution.skipDeleteActions(true);
                    accountingDistribution.skipEvents(true);

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                        exists join dimSynchronizeLedger
                            where dimSynchronizeLedger.DataArea == company.Id
                                && dimSynchronizeLedger.BatchJobId == batchJobId
                    {
                        companyId = company.Id;

                        changecompany(companyId)
                        {
                            // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                            taxUncommitted.clear();
                            purchTable.clear();

                            TaxUncommittedDimensionStructureSyncTmp accountingDistributionTmp, accountingDistributionTmpExists;
                            accountingDistributionTmpExists.linkPhysicalTableInstance(accountingDistributionTmp);

                            // delete distributions which are non-reversal and not posted to GL (non-PO)
                            insert_recordset accountingDistributionTmp
                            (
                                SourceDocumentLineRecId,
                                AccountingDistributionRecId
                            )
                            select SourceDocumentLine from taxUncommitted
                                where taxUncommitted.HeadingTableId != purchTableId &&
                                    taxUncommitted.HeadingTableId != purchTableHistoryId &&
                                    taxUncommitted.SourceDocumentLine != 0
                                join RecId from accountingDistribution
                                    where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing &&
                                        accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                notexists join accountingEvent
                                    where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                        accountingEvent.State != AccountingEventState::Started
                                notexists join accountingDistributionTmpExists
                                    where accountingDistributionTmpExists.AccountingDistributionRecId == accountingDistribution.RecId;

                            // delete distributions which are non-reversal and not posted to GL (non-confirmed PO)
                            // (note: all taxUncommitted associated to purchTableHistoryId should be confirmed)
                            insert_recordset accountingDistributionTmp
                            (
                                PurchTableRecId,
                                TaxUncommittedRecId,
                                AccountingDistributionRecId,
                                SourceDocumentLineRecId
                            )
                            select RecId from purchTable
                                where purchTable.DocumentState != VersioningDocumentState::Confirmed
                                join RecId from taxUncommitted
                                    where taxUncommitted.HeadingRecId == purchTable.RecId &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                join RecId from accountingDistribution
                                    where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                        accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                join RecId from sourceDocumentLine
                                    where sourceDocumentLine.RecId == taxUncommitted.SourceDocumentLine &&
                                        (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed ||
                                        sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                                notexists join accountingEvent
                                    where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                        accountingEvent.State != AccountingEventState::Started
                                notexists join accountingDistributionTmpExists
                                    where accountingDistributionTmpExists.AccountingDistributionRecId == accountingDistribution.RecId;

                            select firstonly RecId from accountingDistributionTmpExists;
                            if (accountingDistributionTmpExists.RecId)
                            {
                                // delete tables which have cascade delete relations to AccountingDistritbution
                                insert_recordset accountingDistributionTmp
                                (
                                    AccountingDistributionRecId,
                                    SourceDocumentLineRecId
                                )
                                select RecId, SourceDocumentLine from accountingDistribution
                                    where accountingDistribution.ParentDistribution != 0
                                    exists join accountingDistributionTmpExists
                                        where accountingDistributionTmpExists.AccountingDistributionRecId == accountingDistribution.ParentDistribution;

                                TrvAccountingDistribution trvAccountingDistribution;
                                ProjectAccountingDistribution projectAccountingDistribution;
                                SubledgerJournalAccountEntryDistribution subledgerJournalAccountEntryDistribution;

                                trvAccountingDistribution.skipEvents(true);
                                trvAccountingDistribution.skipDeleteActions(true);
                                projectAccountingDistribution.skipEvents(true);
                                projectAccountingDistribution.skipDataMethods(true);
                                projectAccountingDistribution.skipDeleteActions(true);
                                subledgerJournalAccountEntryDistribution.skipEvents(true);
                                subledgerJournalAccountEntryDistribution.skipDeleteActions(true);

                                delete_from accountingDistribution
                                    exists join accountingDistributionTmp
                                        where accountingDistributionTmp.AccountingDistributionRecId == accountingDistribution.RecId;

                                delete_from trvAccountingDistribution
                                    exists join accountingDistributionTmp
                                        where accountingDistributionTmp.AccountingDistributionRecId == trvAccountingDistribution.AccountingDistribution;

                                delete_from projectAccountingDistribution
                                    exists join accountingDistributionTmp
                                        where accountingDistributionTmp.AccountingDistributionRecId == projectAccountingDistribution.AccountingDistribution;

                                delete_from subledgerJournalAccountEntryDistribution
                                    exists join accountingDistributionTmp
                                        where accountingDistributionTmp.AccountingDistributionRecId == subledgerJournalAccountEntryDistribution.AccountingDistribution;

                                // delete source document lines which have no distribution.
                                sourceDocumentLine.skipEvents(true);
                                sourceDocumentLine.skipDataMethods(true);
                                sourceDocumentLine.skipDeleteActions(true);

                                delete_from sourceDocumentLine
                                    where (sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::FullyDistributed ||
                                        sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::PartlyDistributed)
                                    exists join accountingDistributionTmp
                                        where accountingDistributionTmp.SourceDocumentLineRecId == sourceDocumentLine.RecId;

                                // delete any existing TaxUncommitted records which have no SDL reference
                                delete_from taxUncommitted
                                    exists join accountingDistributionTmp
                                        where accountingDistributionTmp.SourceDocumentLineRecId == taxUncommitted.SourceDocumentLine;

                                // delete any existing TaxUncommitted records for non-SourceDocument (journals, etc)
                                delete_from taxUncommitted
                                    where taxUncommitted.SourceDocumentLine == 0;
                            }

                            // --- Extract LedgerDimension's from unposted taxUncommitted ---
                            // --- Note: For PO's, taxUncommitted.Company will either be companyId or empty
                            // LedgerDimension
                            insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select correlationId, LedgerDimension, companyId from taxUncommitted
                                    group by taxUncommitted.LedgerDimension, taxUncommitted.Company, dimAttrValueCombination.LedgerDimensionType
                                    where taxUncommitted.Posted == NoYes::No &&
                                        taxUncommitted.HeadingTableId == purchTableId
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == taxUncommitted.LedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join purchTable
                                        where purchTable.RecId == taxUncommitted.HeadingRecId &&
                                            purchTable.DocumentState == VersioningDocumentState::Confirmed
                                            && purchTable.PurchStatus != PurchStatus::Invoiced
                                    exists join accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine &&
                                            accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == taxUncommitted.LedgerDimension
                                            && dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                            activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                            activityContext.addCustomProperty('WereRecordsInserted_LedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                            // OperationLedgerDimension
                            insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select correlationId, OperationLedgerDimension, companyId from taxUncommitted
                                    group by taxUncommitted.OperationLedgerDimension, taxUncommitted.Company, dimAttrValueCombination.LedgerDimensionType
                                    where taxUncommitted.Posted == NoYes::No
                                        && taxUncommitted.HeadingTableId == purchTableId
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == taxUncommitted.OperationLedgerDimension
                                            && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                                || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join purchTable
                                        where purchTable.RecId == taxUncommitted.HeadingRecId
                                            && purchTable.DocumentState == VersioningDocumentState::Confirmed
                                            && purchTable.PurchStatus != PurchStatus::Invoiced
                                    exists join accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                            && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == taxUncommitted.OperationLedgerDimension
                                            && dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                            activityContext.addCustomProperty('WereRecordsInserted_OperationLedgerDimension', int2str(dimSynchronize.rowCount() > 0));

                            // TaxOffsetUseTaxLedgerDimension
                            insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, DataArea, LedgerDimensionType)
                                select correlationId, TaxOffsetUseTaxLedgerDimension, companyId from taxUncommitted
                                    group by taxUncommitted.TaxOffsetUseTaxLedgerDimension, taxUncommitted.Company, dimAttrValueCombination.LedgerDimensionType
                                    where taxUncommitted.Posted == NoYes::No
                                        && taxUncommitted.HeadingTableId == purchTableId
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == taxUncommitted.TaxOffsetUseTaxLedgerDimension
                                            && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                                                || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    exists join purchTable
                                        where purchTable.RecId == taxUncommitted.HeadingRecId
                                            && purchTable.DocumentState == VersioningDocumentState::Confirmed
                                            && purchTable.PurchStatus != PurchStatus::Invoiced
                                    exists join accountingDistribution
                                        where accountingDistribution.SourceDocumentLine == taxUncommitted.SourceDocumentLine
                                            && accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == taxUncommitted.TaxOffsetUseTaxLedgerDimension
                                            && dimSynchronizeNotExists.ProviderStatusTrackingId == correlationId;

                            activityContext.addCustomProperty('WereRecordsInserted_TaxOffsetUseTaxLedgerDimension', int2str(dimSynchronize.rowCount() > 0));
                        }
                    }

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();
                    ttscommit;
                }
                else
                {
                    correlationId = dimensionStructureSyncProviderStatusTracking.RecId;
                }
            }
        }

        return correlationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimSynchronize)
    {
        LedgerDimensionBase ledgerDimension = _dimSynchronize.OriginalLedgerDimension;

        DimensionStorage dimStorage = DimensionValidation::syncStructureChanges(ledgerDimension, true, true);

        if (dimStorage)
        {
            ledgerDimension = dimStorage.save();
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>