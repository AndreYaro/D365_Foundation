<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxSourceDocumentLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxSourceDocumentLine extends AxInternalBase
{
    SourceDocumentLine SourceDocumentLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _SourceDocumentLine = SourceDocumentLine)
    {
        if (!prmisdefault(_SourceDocumentLine))
        {
            super(_SourceDocumentLine);
            SourceDocumentLine = _SourceDocumentLine;
        }
        else
        {
            super();
        }

        return SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an empty record for the table that the AxBC class relates to.
    /// </summary>
    /// <returns>
    /// An empty record from the table that the AxBC class relates to.
    /// </returns>
    /// <remarks>
    /// In order to obtain a cleared record that is used when you initialize before inserting new records,
    /// the abstract <c>emptyRecord</c> method on the <c>AxInternalBase</c> class must be implemented.The
    /// overriding methods must follow the following template:     (Code Example Removed)
    /// </remarks>
    protected common emptyRecord()
    {
        SourceDocumentLine localSourceDocumentLine;
        ;
        return localSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingStatus</Name>
				<Source><![CDATA[
    public SourceDocumentLineAccountingStatus parmAccountingStatus(SourceDocumentLineAccountingStatus _accountingStatus = SourceDocumentLineAccountingStatus::None)
    {
        if (!prmisdefault(_accountingStatus))
        {
            this.setField(fieldNum(SourceDocumentLine, AccountingStatus), _accountingStatus);
        }

        return sourceDocumentLine.AccountingStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsFinal</Name>
				<Source><![CDATA[
    public NoYes parmIsFinal(NoYes _isFinal = NoYes::No)
    {
        if (!prmisdefault(_isFinal))
        {
            this.setField(fieldNum(SourceDocumentLine, IsFinal), _isFinal);
        }

        return sourceDocumentLine.IsFinal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTermQuantity</Name>
				<Source><![CDATA[
    public Qty parmTermQuantity(Qty _termQuantity = 0)
    {
        if (!prmisdefault(_termQuantity))

        {
            this.setField(fieldNum(SourceDocumentLine, TermQuantity), _termQuantity);
        }

        return sourceDocumentLine.TermQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLineRecId parmParentSourceDocumentLine(SourceDocumentLineRecId _parentSourceDocumentLine = 0)
    {
        if (!prmisdefault(_parentSourceDocumentLine))
        {
            this.setField(fieldNum(SourceDocumentLine, ParentSourceDocumentLine), _parentSourceDocumentLine);
        }

        return sourceDocumentLine.ParentSourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentHeader</Name>
				<Source><![CDATA[
    public SourceDocumentHeaderRecId parmSourceDocumentHeader(SourceDocumentHeaderRecId _sourceDocumentHeader = 0)
    {
        if (!prmisdefault(_sourceDocumentHeader))
        {
            this.setField(fieldNum(SourceDocumentLine, SourceDocumentHeader), _sourceDocumentHeader);
        }

        return sourceDocumentLine.SourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRelationType</Name>
				<Source><![CDATA[
    public RefTableId parmSourceRelationType(RefTableId _sourceRelationType = 0)
    {
        if (!prmisdefault(_sourceRelationType))
        {
            this.setField(fieldNum(SourceDocumentLine, SourceRelationType), _sourceRelationType);
        }

        return sourceDocumentLine.SourceRelationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeEnumName</Name>
				<Source><![CDATA[
    public enumName parmTypeEnumName(enumName _typeEnumName = '')
    {
        if (!prmisdefault(_typeEnumName))
        {
            this.setField(fieldNum(SourceDocumentLine, TypeEnumName), _typeEnumName);
        }

        return sourceDocumentLine.TypeEnumName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTypeEnumValue</Name>
				<Source><![CDATA[
    public SourceDocumentTypeEnumValue parmTypeEnumValue(SourceDocumentTypeEnumValue _typeEnumValue = 0)
    {
        if (!prmisdefault(_typeEnumValue))
        {
            this.setField(fieldNum(SourceDocumentLine, TypeEnumValue), _typeEnumValue);
        }

        return sourceDocumentLine.TypeEnumValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that all default methods are called before inserting or updating a record.
    /// </summary>
    /// <remarks>
    ///    In order to make sure that all defaulting methods are called before inserting or updating a record,
    ///    the <c>setTableFields</c> method on the <c>AxInternalBase</c> class must be overridden in the AxBC
    ///    class.The method should include a call to all defaulting methods (that is, setFieldName
    ///    methods).Code the defaulting business logic in the different setFieldName methods. Therefore, you
    ///    do not have to put the setFieldName methods in a specific order in this method.
    /// </remarks>
    protected void setTableFields()
    {
        this.currentRecord().defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLine</Name>
				<Source><![CDATA[
    public SourceDocumentLine sourceDocumentLine(SourceDocumentLine _sourceDocumentLine = sourceDocumentLine)
    {
        if (!prmisdefault(_sourceDocumentLine))
        {
            this.setCurrentRecordFromExternal(_sourceDocumentLine);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxSourceDocumentLine construct()
    {
        return new AxSourceDocumentLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSourceDocumentLine</Name>
				<Source><![CDATA[
    public static AxSourceDocumentLine newSourceDocumentLine(SourceDocumentLine _SourceDocumentLine)
    {
        AxSourceDocumentLine AxSourceDocumentLine = AxSourceDocumentLine::construct();
        ;
        AxSourceDocumentLine.SourceDocumentLine(_SourceDocumentLine);

        return AxSourceDocumentLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>