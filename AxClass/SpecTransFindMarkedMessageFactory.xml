<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransFindMarkedMessageFactory</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransMarkedByFactory</c> class generates an instance of the <c>SpecTransIMarkedBy</c> interface for messaging.
/// </summary>
internal static final class SpecTransFindMarkedMessageFactory
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromSpecRecord</Name>
				<Source><![CDATA[
    internal static SpecTransIFindMarkedMessage newFromSpecRecord(DataAreaId _specCompany, RefTableId _specTableId, RefRecId _specRecId)
    {
        SpecTransMarkedByType markedByType = SpecTransFindMarkedMessageFactory::getSpecTransMarkedByTypeBySpec(_specCompany, _specTableId);

        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(
            enumStr(SpecTransMarkedByType),
            enum2Symbol(enumNum(SpecTransMarkedByType), enum2int(markedByType)));

        SpecTransIFindMarkedMessage instance = SysPluginFactory::Instance(
            identifierStr(Dynamics.AX.Application),
            classStr(SpecTransIFindMarkedMessage),
            metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.init(_specCompany, _specRecId);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransMarkedByTypeBySpec</Name>
				<Source><![CDATA[
    private static SpecTransMarkedByType getSpecTransMarkedByTypeBySpec(DataAreaId _specCompany, RefTableId _specTableId)
    {
        SpecTransMarkedByType markedByType = SpecTransMarkedByType::Unknown;

        if (_specCompany != ''
            && xDataArea::exist(_specCompany)
            && _specTableId != 0)
        {
            switch (_specTableId)
            {
                case tableNum(LedgerJournalTrans):
                    markedByType = SpecTransMarkedByType::PaymentJournal;
                    break;

                case tableNum(CustVendPaymProposalLine):
                    markedByType = SpecTransMarkedByType::PaymentProposal;
                    break;

                case tableNum(CustTable):
                    markedByType = SpecTransMarkedByType::Customer;
                    break;

                case tableNum(VendTable):
                    markedByType = SpecTransMarkedByType::Vendor;
                    break;

                case tableNum(SalesTable):
                    markedByType = SpecTransMarkedByType::SalesOrder;
                    break;

                case tableNum(PurchTable):
                    markedByType = SpecTransMarkedByType::PurchaseOrder;
                    break;

                case tableNum(CustInvoiceTable):
                    markedByType = SpecTransMarkedByType::FreeTextInvoice;
                    break;

                case tableNum(SpecContext):
                    markedByType = SpecTransMarkedByType::SpecContext;
                    break;

                default:
                    markedByType = SpecTransFindMarkedExternalMessageFactory::getSpecTransMarkedByTypeByExternalSpec(_specCompany, _specTableId);
                    break;
            }
        }

        return markedByType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>