<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetInventoryPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetInventoryPost extends RunBaseBatch implements BatchRetryable
{
    QueryRun             queryRun;
    RAssetInventoryTable assetInventoryTable;

    DialogField          dialogEndDate;
    EndDate              endDate;
    RAssetStandardId     assetStandardId;
    DialogField          dialogAssetStandardId;

    Counter              progressCounter;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        assetStandardId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTable</Name>
				<Source><![CDATA[
    private LedgerJournalTable createJournalTable()
    {
        LedgerJournalTable ledgerJournalTable;

        ttsbegin;

        ledgerJournalTable.JournalName         = assetInventoryTable.JournalName;
        ledgerJournalTable.JournalType         = LedgerJournalType::Assets_RU;

        ledgerJournalTable.insert();

        assetInventoryTable.LedgerJournalNum = ledgerJournalTable.JournalNum;

        ttscommit;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalTrans</Name>
				<Source><![CDATA[
    private void createJournalTrans(RAssetInventoryTrans _assetInventoryTrans,
                                    LedgerJournalTable   _ledgerJournalTable)
    {
        RAssetProposal           rAssetProposal;
        RAssetStandards          rAssetStandards = RAssetStandards::find(_assetInventoryTrans.AccountNum, _assetInventoryTrans.AssetStandardId);


        if (_assetInventoryTrans.FactQty - _assetInventoryTrans.AccountingQty > 0)
        {
            rAssetProposal = RAssetProposal::construct(RAssetTransType::Acquisition);
            rAssetProposal.initParameters(_ledgerJournalTable.JournalNum, assetInventoryTable.EndDate, rAssetStandards);
            rAssetProposal.createJournalLines(_assetInventoryTrans.AssetStandardId, false);
        }
        else if (_assetInventoryTrans.FactQty - _assetInventoryTrans.AccountingQty < 0)
        {
            rAssetProposal = RAssetProposal::construct(RAssetTransType::Disposal);
            rAssetProposal.initParameters(_ledgerJournalTable.JournalNum,
                                          assetInventoryTable.EndDate,
                                          rAssetStandards,
                                          RAssetStandardTable::find(_assetInventoryTrans.AssetStandardId).PostingProfileShortage);
            rAssetProposal.createJournalLines(_assetInventoryTrans.AssetStandardId, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@GLS116529");
        dialogEndDate         = dialog.addFieldValue(extendedTypeStr(RAssetTransDate), assetInventoryTable.StartDate, "@SYS22065");
        dialogAssetStandardId = dialog.addField(extendedTypeStr(RAssetStandardId), "@GLS116120");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProgress</Name>
				<Source><![CDATA[
    private void displayProgress(RAssetId _assetId)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(strFmt("@GLS116533", _assetId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;

        endDate         = dialogEndDate.value();
        assetStandardId = dialogAssetStandardId.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    // created for using in Test Automation
    public EndDate parmEndDate(EndDate _endDate = endDate)
    {
        endDate = _endDate;
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryTable</Name>
				<Source><![CDATA[
    public RAssetInventoryTable parmInventoryTable(RAssetInventoryTable _assetInventoryTable = assetInventoryTable)
    {
        assetInventoryTable = _assetInventoryTable;
        return assetInventoryTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRAssetStandardId</Name>
				<Source><![CDATA[
    // created for using in Test Automation
    public RAssetStandardId parmRAssetStandardId(RAssetStandardId _assetStandardId = assetStandardId)
    {
        assetStandardId = _assetStandardId;
        return assetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        boolean ret;
        ;

        if (! RAssetInventoryTrans::findRecRef(assetInventoryTable.RecId))
            return checkFailed("@SYS27671");

        if (LedgerJournalTable::find(assetInventoryTable.LedgerJournalNum))
            return checkFailed("@GLS116531");

        ret = super();

        if (ret)
        {
            this.getFromDialog();
            if (endDate < assetInventoryTable.StartDate)
                return checkFailed("@GLS116530");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #LOCALMACRO.range
            "(AccountingQty != FactQty)"
        #ENDMACRO

        Query                   query           = new Query();
        QueryBuildDataSource    queryDataSource = query.addDataSource(tableNum(RAssetInventoryTrans));

        RAssetInventoryTrans    assetInventoryTrans;
        LedgerJournalTable      ledgerJournalTable;

        Counter                 progressTotal;
        #macrolib.AviFiles
        ;

        queryDataSource.addRange(fieldNum(RAssetInventoryTrans, InventoryTableRecId)).value(queryValue(assetInventoryTable.RecId));
        queryDataSource.addRange(fieldNum(RAssetInventoryTrans, AccountingQty)).value(#range);

        if (assetStandardId)
            queryDataSource.addRange(fieldNum(RAssetInventoryTrans, AssetStandardId)).value(queryValue(assetStandardId));

        queryRun                    = new QueryRun(query);
        progressTotal               = SysQuery::countTotal(queryRun);

        ttsbegin;
        assetInventoryTable.EndDate = endDate;

        if (! progressTotal)
        {
            assetInventoryTable.doUpdate();
            ttscommit;
            return;
        }

        ledgerJournalTable = this.createJournalTable();

        if (! ledgerJournalTable)
           throw Exception::Error;

        this.progressInit("@GLS116566", progressTotal, #AviUpdate);
        progress = this.parmProgress();

        queryRun.query().dataSourceTable(tableNum(RAssetInventoryTrans)).update(true);
        while (queryRun.next())
        {
            assetInventoryTrans = queryRun.get(tableNum(RAssetInventoryTrans));
            this.displayProgress(assetInventoryTrans.AccountNum);
            this.createJournalTrans(assetInventoryTrans, ledgerJournalTable);
        }
        assetInventoryTable.doUpdate();
        ttscommit;
        if ((select firstonly RecId from ledgerJournalTrans
                 where ledgerJournalTrans.JournalNum == assetInventoryTable.LedgerJournalNum &&
                       ledgerJournalTrans.TransDate  == assetInventoryTable.EndDate).RecId)
            info("@GLS220504");
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version     = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RAssetInventoryPost assetInventoryPost = new RAssetInventoryPost();

        assetInventoryPost.parmInventoryTable(_args.record());

        if (assetInventoryPost.prompt())
        {
            assetInventoryPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>