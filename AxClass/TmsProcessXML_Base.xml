<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TmsProcessXML_Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsProcessXML_Base</c> class contains the base methods to serialize and deserialize transportation related information
/// during communication between the managed code.
/// </summary>
public abstract class TmsProcessXML_Base
{
    #TMSXML
    
    private const int ConvertNumberOfDecimals = 2;

    TMSAddressPhone             fromAddress;
    TMSAddressPhone             toAddress;
    TMSAddressPhone             segmentFromAddress;
    TMSAddressPhone             segmentToAddress;
    AddressZipCodeId            toPostalRange;
    AmountMST                   value;
    boolean                     manualApportionment;
    Common                      commonRec;
    container                   rateTables;
    container                   errors;
    CurrencyCode                currencyCode;
    CustAccount                 custAccount;
    CustVendAC                  custInvoiceAccount;
    DimensionDefault            orderDim;
    DlvTermId                   segmentFreight;
    DlvTermId                   freightTerm;
    InventSiteId                inventSiteId;
    InventLocationId            inventLocationId;
    RecId                       recId;
    RecId                       parentRecId;
    InventTransType             parentInventTransType;
    RefRecId                    routeRecId;
    RefRecId                    routeGuideRecId;
    RefRecId                    rateRecId;
    RefTableId                  rateTableId;
    ShipCarrierTrackingNum      trackingNumber;
    str                         status;
    TMSId                       id;
    TMSApptUTCDateTime          dlvDateTime;//Requested delivery date
    TMSApptUTCDateTime          calcDlvDateTime;//Calculated delivery date
    TMSApptUTCDateTime          shipDateTime;//Requested/Calculated ship date
    TMSMiles                    miles;
    TMSModeCode                 segmentMode;
    TMSName                     routePlanName;
    TMSName                     routeGuideName;
    TMSCarrierCode              segmentCarrier;
    TMSCarrierServiceCode       segmentService;
    TMSCarrierGroupCode         segmentGroup;
    TMSCommunicationType        communicationType;
    TMSCarrierCode              carrierCode;
    TMSCarrierCode              routeCarrierCode;
    TMSCarrierGroupCode         carrierGroupCode;
    TMSCarrierServiceCode       carrierServiceCode;
    TMSEquipmentCode            equipment;
    TMSResponsibleForPayment    segmentResponsible;
    TMSResponsibleForPayment    originResponsible;
    TMSRecordType               recordType;
    TMSRouteCode                routeCode;
    TMSRouteId                  routeId;
    TMSRouteConfigCode          routeConfigCode;
    TMSRouteSegment             segment;
    TMSResponsibleForPayment    destResponsible;
    TMSSequence                 routeSequence;
    TMSTransitTime              transitDays;
    TMSTransportationTemplateId transportationTemplateId;
    TMSVendorCode               segmentVendorCode;
    TMSVendorInvoiceCode        segmentVendorInvoiceCode;
    TMSVendorCode               destVendorCode;
    TMSVendorInvoiceCode        destVendorInvoiceCode;
    TMSVendorCode               originVendorCode;
    TMSVendorInvoiceCode        originVendorInvoiceCode;
    VendAccount                 vendAccount;
    CustVendAC                  vendInvoiceAccount;
    Volume                      volume;
    Weight                      weight;
    WHSLTLClassCode             ltlClass;
    WHSSTCCCode                 stcc;
    WHSLoadTemplateId           loadTemplateId;
    TMSModeCode                 mode;
    TMSDirection                loadDirection;
    XmlDocument                 requestDoc;
    XmlDocument                 responseDoc;
    XmlNode                     segmentPickup;
    XmlNode                     segmentDropoff;
    XmlNode                     newXMLNode;
    TMSRouteSegmentLoadLine     segmentLoadLine;
    boolean                     segmentRate;
    TMSHubMasterCode            segmentDestHub;
    TMSHubMasterCode            segmentOriginHub;
    WHSMasterTrackingNum        masterTrackingNum;
    TMSRate                     overrideRate;
    boolean                     createRoute;
    RefRecId                    overrideRouteRecId;
    Num                         freightBillId;
    LogisticsPostalAddressRecId originalOriginPostalAddress;
    LogisticsPostalAddressRecId originalDestinationPostalAddress;
    boolean                     directDelivery;
    TMSRouteSegmentConfigRecId  routeSegmentConfigRecId;
    TMSScheduledRoute           isScheduledRoute;

    private TMSCarrierCustomerAccountNumber carrierCustomerAccountNumber;
    private TMSShippingLabelRequestType shippingLabelRequestType;

    internal readonly boolean isShippingLabelRequestTypeEnabled = TMSParameters::isShippingLabelRequestTypeEnabled();
    internal readonly boolean isReturnLabelSPSPrintingFlightEnabled = WHSReturnLabelSPSPrintingFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addConstraintToRate</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds constraint to rate.
	/// </summary>
	/// <param name="_tableId">
	/// Table id of the record.
	/// </param>
	/// <param name="_recId">
	/// Id of the record.
	/// </param>
	/// <param name="_action">
	/// Action constraint to be added.
	/// </param>
    public void addConstraintToRate(TableId _tableId, RecId _recId, TMSAction _action)
    {
        TMSRouteSegmentTable    segmentTable;
        TMSRouteTable           routeTable;

        ttsbegin;

        switch (_tableId)
        {
            case tableNum(TMSRouteSegmentTable):
                segmentTable = TMSRouteSegmentTable::find(_recId, true);

                if (_action > segmentTable.Action)
                {
                    segmentTable.Action = _action;
                    segmentTable.update();
                }

                routeTable = TMSRouteTable::find(segmentTable.RouteRecId, true);

                if (_action > routeTable.Action)
                {
                    routeTable.Action = _action;
                    routeTable.update();
                }

                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDestinationAddressOnRoute</Name>
				<Source><![CDATA[
    private boolean checkDestinationAddressOnRoute(TMSRoute _route)
    {
        TMSRouteSegment         routeSegment;
        LogisticsPostalAddress  postalAddress;

        // Scan over all segments of route to make sure destination address is a part of the route
        select firstOnly RecId from routeSegment
            where routeSegment.RouteCode == _route.RouteCode
            join ZipCode from postalAddress
                where postalAddress.Location    == routeSegment.DestinationLocation
                &&    postalAddress.ZipCode     == toAddress.parmPostalCode();

        return routeSegment.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handle the currency conversions
    /// </summary>
    /// <param name="_fromCurr">
    ///     Currency converting from
    /// </param>
    /// <param name="_toCurrency">
    ///     Currency converting to
    /// </param>
    /// <param name="_value">
    ///     The value to convert from one currency to another
    /// </param>
    /// <returns>
    ///     Converted value
    /// </returns>
    public TMSRate convertCurrency(
        CurrencyCode _fromCurr,
        CurrencyCode _toCurrency,
        TMSRate _value)
    {
        CurrencyExchangeHelper  currencyExchangeHelper;

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return currencyExchangeHelper.calculateCurrencyToCurrency(_fromCurr, _toCurrency, _value, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertStr2UTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a string value to a UTC date/time
    /// </summary>
    /// <param name="_str">
    /// String value to be converted
    /// </param>
    /// <returns>
    /// UTC date/time from string parameter
    /// </returns>
    public utcdatetime convertStr2UTCDateTime(str  _str)
    {
        System.DateTime                     dateTime;
        int                                 monthVal;
        int                                 dayVal;
        int                                 yearVal;
        int                                 hourVal;
        int                                 minuteVal;
        int                                 secondVal;
        date                                dateVal;
        TimeOfDay                           timeVal;
        utcDateTime                         result = utcDateTimeNull();
        System.Globalization.CultureInfo    culture;

        if (_str != "")
        {
            culture = System.Globalization.CultureInfo::get_InvariantCulture();
            dateTime = System.DateTime::Parse(_str, culture);
            monthVal = dateTime.get_Month();
            dayVal = dateTime.get_Day();
            yearVal = dateTime.get_Year();
            hourVal = dateTime.get_Hour();
            minuteVal = dateTime.get_Minute();
            secondVal = dateTime.get_Second();
            dateVal = mkDate(dayVal, monthVal, yearVal);
            timeVal = (3600 * hourVal) + (60 * minuteVal) + secondVal;
            result = DateTimeUtil::newDateTime(dateVal, timeVal);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertUTCDateTime2Str</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a UTC date/time to a string value
    /// </summary>
    /// <param name="_utcDateTime">
    /// The date/time to be converted
    /// </param>
    /// <returns>
    /// String version of date/time parameter
    /// </returns>
    public str convertUTCDateTime2Str(utcdatetime  _utcDateTime)
    {
        str     ret;
        System.DateTime                     dateTime;
        System.Int32                        yearVal;
        System.Int32                        monthVal;
        System.Int32                        dayVal;
        System.Int32                        hourVal;
        System.Int32                        minuteVal;
        System.Int32                        secondVal;
        System.Globalization.CultureInfo    culture;

        if (DateTimeUtil::date(_utcDateTime) != DateTimeUtil::date(utcDateTimeNull()))
        {
            culture = System.Globalization.CultureInfo::get_InvariantCulture();
            yearVal = DateTimeUtil::year(_utcDateTime);
            monthVal = DateTimeUtil::month(_utcDateTime);
            dayVal = DateTimeUtil::day(_utcDateTime);
            hourVal = DateTimeUtil::hour(_utcDateTime);
            minuteVal = DateTimeUtil::minute(_utcDateTime);
            secondVal = DateTimeUtil::second(_utcDateTime);
            dateTime = new System.DateTime(yearVal, monthVal, dayVal, hourVal, minuteVal, secondVal);

            ret = dateTime.ToString(culture);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFreightBillDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the associated freight bill detail if freight reconciliation is enabled.
    /// </summary>
    /// <param name="_detail">
    ///     The route rate detail.
    /// </param>
    /// <param name="_xmlNode">
    ///     The xml node with the associated detail.
    /// </param>
    public void createFreightBillDetail(TMSRouteRateDetail _detail, XmlNode _xmlNode)
    {
        if (!TMSParameters::find().EnableFreightReconcile)
        {
            return;
        }

        TMSFreightBillDetail            freightBillDetail;
        WHSLoadTable                    loadTable       = WHSLoadTable::find(id);
        WHSShipmentTable                shipmentTable;
        TMSRouteSegment                 routeSegment    = TMSRouteSegment::find(_detail.RouteCode, _detail.Sequence);
        TMSFreightBillTypeAssignment    freightBillTypeAssignment;
       
        if (!freightBillId)
        {
            freightBillId = NumberSeq::newGetNum(TMSParameters::numRefTMSFreightBillId()).num();
        }

        if ((communicationType == TMSCommunicationType::Confirmation || communicationType == TMSCommunicationType::Apportionment)
            && TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
        {
            TMSRouteSegmentShipment routeSegementShipment;

            select firstonly shipmentTable
                exists join routeSegementShipment
                    where routeSegementShipment.Id          == shipmentTable.ShipmentId
                       && routeSegementShipment.Sequence    == _detail.Sequence
                       && routeSegementShipment.RouteCode   == _detail.RouteCode;
        }

        if (!shipmentTable)
        {
            shipmentTable  = WHSShipmentTable::findByLoadId(loadTable.LoadId);
        }

        freightBillDetail.FreightBillId             = freightBillId;
        freightBillDetail.RouteCode                 = _detail.RouteCode;
        freightBillDetail.Sequence                  = _detail.Sequence;
        freightBillDetail.LineType                  = _detail.RateType == TMSRateType::Rate ?
                                                                            TMSLineType::Freight :
                                                                            TMSLineType::Accessorial;
        freightBillDetail.LoadId                    = loadTable.LoadId;
        freightBillDetail.ShipmentId                = shipmentTable.ShipmentId;
        freightBillDetail.RateCur                   = _detail.ShipperRate;
        freightBillDetail.RateUnitRate              = _detail.RateUnitRate;
        freightBillDetail.RateUnit                  = _detail.RateUnit;
        freightBillDetail.RateId                    = _detail.RateId;
        freightBillDetail.RateNote                  = _detail.RateNote;
        freightBillDetail.CarrierCode               = _detail.CarrierCode;
        freightBillDetail.CarrierServiceCode        = _detail.CarrierServiceCode;
        freightBillDetail.VendorCode                = _detail.VendorCode;
        freightBillDetail.VendorInvoiceCode         = _detail.VendorInvoiceCode;
        freightBillDetail.BillingGroupId            = _detail.BillingGroupId;
        freightBillDetail.ExternalCode              = _detail.ExternalCode;
        freightBillDetail.CurrencyCode              = _detail.CurrencyCode;
        freightBillDetail.Direction                 = TMSGlobal::loadDirection2TransportDirection(loadTable.LoadDirection);
        freightBillDetail.RelatedAccountNum         = loadTable.AccountNum;
        freightBillDetail.RelatedOrderNum           = loadTable.OrderNum;
        freightBillDetail.ShipUTCDateTime           = routeSegment.ScheduledShipUTCDateTime;
        freightBillDetail.DeliveryUTCDateTime       = routeSegment.ActualArrivalUTCDateTime;
        freightBillDetail.HubMasterCode             = _detail.HubMasterCode;
        freightBillDetail.Weight                    = weight;
        freightBillDetail.Qty                       = 0;
        freightBillDetail.Value                     = TMSProcessXML_Base::real2str(value);
        freightBillDetail.stccCode                  = stcc;
        freightBillDetail.EquipmentCode             = equipment;
        freightBillDetail.OriginPostalAddress       = routeSegment.originPostalAddress().RecId;
        freightBillDetail.DestinationPostalAddress  = routeSegment.destinationPostalAddress().RecId;
        freightBillDetail.BillOfLadingId            = shipmentTable.BillOfLadingId;
        freightBillDetail.ProNum                    = shipmentTable.ProNum;
        freightBillDetail.VoyageNum                 = loadTable.VoyageNum;
        freightBillDetail.VesselName                = loadTable.VesselName;
        freightBillDetail.TrailerNumber             = loadTable.TrailerNumber;
        freightBillDetail.TractorNumber             = loadTable.TractorNumber;
        freightBillDetail.BookingNum                = loadTable.BookingNum;

        select firstonly freightBillTypeAssignment
            where freightBillTypeAssignment.CarrierCode == _detail.CarrierCode;
        freightBillDetail.FreightBillTypeId         = freightBillTypeAssignment.FreightBillTypeId;

        freightBillDetail.insert();

        this.writeNode(_xmlNode, #objectId, int642str(freightBillDetail.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Consolidate the creation of the markup trans records.
    /// </summary>
    /// <param name="_markupTrans">
    ///     Variable of a partially initialized markupTrans record
    /// </param>
    /// <param name="_value">
    ///     The value of the markupTrans record
    /// </param>
    /// <param name="_currencyCode">
    ///     The currency of the value of the markupTrans record
    /// </param>
    /// <param name="_transactionTxt">
    ///     The text to display on the markupTrans record
    /// </param>
    /// <param name="_baseCurrencyCode">
    ///     The Currency of the origin record
    /// </param>
    /// <param name="_markupCategory">
    ///     The category for the markupTrans record.
    /// </param>
    /// <returns>
    ///     The create MarkupTrans record
    /// </returns>
    public MarkupTrans createMarkupTrans(
        MarkupTrans     _markupTrans,
        TMSRate         _value,
        CurrencyCode    _currencyCode,
        str             _transactionTxt,
        CurrencyCode    _baseCurrencyCode = '',
        MarkupCategoryType  _markupCategory = MarkupCategory::Fixed)
    {
        MarkupTrans             markupTrans     = _markupTrans;
        CurrencyCode            markupCurrency  = _currencyCode;
        TMSRate                 markupValue     = _value;

        if (_baseCurrencyCode != '' && _baseCurrencyCode != markupCurrency)
        {
            markupValue = this.convertCurrency(markupCurrency, _baseCurrencyCode, markupValue);
            markupCurrency = _baseCurrencyCode;
        }

        markupTrans.initValue();
        markupTrans.MarkupCategory  = _markupCategory;
        markupTrans.modifiedField(fieldNum(MarkupTrans, MarkupCategory));
        markupTrans.ModuleCategory  = HeadingLine::Line;
        markupTrans.Value           = markupValue;
        markupTrans.CurrencyCode    = markupCurrency;
        markupTrans.Txt             = _transactionTxt;
        markupTrans.insert();

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMiscMarkupCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the miscellaneous markup category node, and returns the enum for it.
    /// </summary>
    /// <param name="_rateNode">
    /// The xml node to find the category.
    /// </param>
    /// <returns>
    /// The markup category for the miscellaneous charge.
    /// </returns>
    private MarkupCategory getMiscMarkupCategory(XmlNode _rateNode)
    {
        MarkupCategory markup = MarkupCategory::Fixed;

        str strMarkupEnumValue = this.returnNamedNode(_rateNode, #miscMarkupCategoryValue);
        if (strMarkupEnumValue)
        {
            markup = any2Enum(str2Int(strMarkupEnumValue));
        }
        else
        {
            str strMarkup = this.returnNamedNode(_rateNode, #miscMarkupCategory);

            if (strMarkup)
            {
                markup = any2Enum(str2Int(strMarkup));
            }
        }

        return markup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    /// <summary>
	/// Builds a request xml for processing in transportation management system.
	/// </summary>
	/// <returns>
	/// XML document.
	/// </returns>
    public XML createXML()
    {
        switch (recordType)
        {
            case TMSRecordType::Sales:
                commonRec = SalesTable::find(id);
                break;

            case TMSRecordType::Load:
                commonRec = WHSLoadTable::find(id);
                break;

            case TMSRecordType::Shipment:
                commonRec = WHSShipmentTable::find(id);
                break;

            case TMSRecordType::Purch:
                commonRec = PurchTable::find(id);
                break;

            case TMSRecordType::Container:
                commonRec = WHSContainerTable::findByContainerId(id);
                break;

            case TMSRecordType::None:
                commonRec = TMSRateRouteAddress::findByRecId(recId);
                break;
        }

        if (id)
        {
            ttsbegin;

            this.deletePreviousInformation(commonRec);

            ttscommit;
        }

        this.writeXML();

        return requestDoc.xml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePreviousInformation</Name>
				<Source><![CDATA[
    /// <summary>
	/// Deletes routes created previously for a record.
	/// </summary>
	/// <param name="_common">
	/// Record that has routes created before.
	/// </param>
    public void deletePreviousInformation(Common _common)
    {
        TMSRouteTable::deleteByRefRecord(_common.TableId, _common.RecId);

        if (parentRecId)
        {
            TMSRouteTable::deleteByRefRecord(this.findParent().TableId, parentRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRateRouteDetails</Name>
				<Source><![CDATA[
    /// <summary>
	/// Deletes all <c>TMSRouteRateDetail</c> records created for a route segment.
	/// </summary>
	/// <param name="_routeCode">
	/// Route code of the route segment.
	/// </param>
	/// <param name="_sequence">
	/// Sequence number of the route segment.
	/// </param>
    public void deleteRateRouteDetails(TMSRouteCode _routeCode, TMSSequence _sequence)
    {
        TMSRouteRateDetail      detail;

        ttsbegin;

        delete_from detail
            where detail.RouteCode       == _routeCode    &&
                  detail.Sequence        == _sequence;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSegmentLoadLines</Name>
				<Source><![CDATA[
    /// <summary>
	/// Deletes all <c>TMSRouteSegmentLoadLine</c> records assigned to route segment.
	/// </summary>
	/// <param name="_routeCode">
	/// Route code of the route segment.
	/// </param>
	/// <param name="_sequence">
	/// Sequence of the route segment.
	/// </param>
    public void deleteSegmentLoadLines(TMSRouteCode _routeCode, TMSSequence _sequence)
    {
        TMSRouteSegmentLoadLine     line;

        ttsbegin;

        while select forupdate line
            where line.RouteCode     == _routeCode &&
                  line.Sequence      == _sequence
        {
            line.delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
	/// Executes sending request to TMS managed system and receiving the response.
	/// </summary>
    public void execute()
    {
        TMSCommProxy        commProxy = this.getTMSCommProxy();
        container           con;
        XML                 xml;
        TMSTransaction      transaction;

        con = this.sendTransaction();

        xml = conPeek(con, 2);

        if (!manualApportionment)
        {
            xml = commProxy.sendRequest(xml);
        }

        ttsbegin;

        transaction = TMSTransaction::find(conPeek(con, 1), true);
        transaction.ResponseData = xml;
        transaction.update();

        ttscommit;

        this.readXML(xml);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLoadOrderNum</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds order number from a load.
	/// </summary>
	/// <param name="_loadId">
	/// Load id of the load record.
	/// </param>
	/// <returns>
	/// Order number of the load.
	/// </returns>
    public TMSId findLoadOrderNum(WHSLoadId _loadId)
    {
        WHSLoadLine     loadLine;

        select firstonly OrderNum from loadLine where loadLine.LoadId == _loadId;

        return loadLine.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findShipmentOrderNum</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds order number from shipment.
	/// </summary>
	/// <param name="_shipmentId">
	/// Shipment id.
	/// </param>
	/// <returns>
	/// Order number of the shipment.
	/// </returns>
    public TMSId findShipmentOrderNum(WHSShipmentId _shipmentId)
    {
        WHSLoadLine     loadLine;

        select firstonly OrderNum from loadLine where loadLine.ShipmentId == _shipmentId;

        return loadLine.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClass</Name>
				<Source><![CDATA[
    /// <summary>
	/// Returns designation of class from LTL class code.
	/// </summary>
	/// <param name="_ltlClass">
	/// LTL class code.
	/// </param>
	/// <returns>
	/// Designation of class from LTL class code.
	/// </returns>
    public WHSClass getClass(WHSLTLClassCode _ltlClass)
    {
        return WHSLTLClass::find(_ltlClass).Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestDoc</Name>
				<Source><![CDATA[
    /// <summary>
	/// Returns XML document for sending request.
	/// </summary>
	/// <returns>
	/// XML document for sending request.
	/// </returns>
    public XmlDocument getRequestDoc()
    {
        if (!requestDoc)
        {
            requestDoc = XmlDocument::newBlank();
        }

        return requestDoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTMSCommProxy</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates new <c>TMSCommProxy</c> instance.
	/// </summary>
	/// <returns>
	/// The <c>TMSCommProxy</c> instance.
	/// </returns>
    protected TMSCommProxy getTMSCommProxy()
    {
        return new TMSCommProxy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateItemWeightVolumeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the total weight, volume and value of the items.
    /// </summary>
    /// <param name="_itemId">
    /// Item Id
    /// </param>
    /// <param name="_qty">
    /// Total quantity
    /// </param>
    /// <param name="_unitId">
    /// Unit of measure of the item in the container
    /// </param>
    /// <param name="_inventDimId">
    /// The dimension ID for conversion.
    /// </param>
    /// <returns>
    /// Container with the item weight, volume, and value.
    /// </returns>
    public static container calculateItemWeightVolumeValue(
        ItemId              _itemId,
        Qty                 _qty,
        UnitOfMeasureSymbol _unitId,
        InventDimId         _inventDimId)
    {
        WHSPhysDimUOM   physDim     = WHSPhysDimUOM::getPhysDimUOMByItem(_itemId, _unitId);
        Weight          itemWeight  = physDim.Weight * _qty;
        Volume          itemVolume  = physDim.displayVolume() * _qty;
        InventTable     inventTable = InventTable::find(_itemId);
        PurchUnit       purchUnit   = InventTableModule::find(_itemId, ModuleInventPurchSales::Purch).UnitId;

        AmountMST itemValue = inventTable.purchPcsPrice() * EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(_itemId,
                                                                                                                                  _inventDimId,
                                                                                                                                  _qty,
                                                                                                                                  _unitId,
                                                                                                                                  purchUnit,
                                                                                                                                  NoYes::No,
                                                                                                                                  NoYes::No);
        return [itemWeight, itemVolume, itemValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarrierCode</Name>
				<Source><![CDATA[
    public TMSCarrierCode parmCarrierCode(TMSCarrierCode _carrierCode = carrierCode)
    {
        carrierCode = _carrierCode;

        return carrierCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarrierGroupCode</Name>
				<Source><![CDATA[
    public TMSCarrierGroupCode parmCarrierGroupCode(TMSCarrierGroupCode _carrierGroupCode = carrierGroupCode)
    {
        carrierGroupCode = _carrierGroupCode;

        return carrierGroupCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarrierServiceCode</Name>
				<Source><![CDATA[
    public TMSCarrierServiceCode parmCarrierServiceCode(TMSCarrierServiceCode _carrierServiceCode = carrierServiceCode)
    {
        carrierServiceCode = _carrierServiceCode;

        return carrierServiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateRoute</Name>
				<Source><![CDATA[
    // Will create a route upon ship confirm (when a route
    //  does not yet exist)
    public boolean parmCreateRoute(boolean _createRoute = createRoute)
    {
        createRoute = _createRoute;

        return createRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmCurrencyCode(CurrencyCode _currencyCode = currencyCode)
    {
        currencyCode = _currencyCode;

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustAccount(CustAccount _custAccount = custAccount)
    {
        custAccount = _custAccount;

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmCustInvoiceAccount(CustVendAC _custInvoiceAccount = custInvoiceAccount)
    {
        custInvoiceAccount = _custInvoiceAccount;

        return custInvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestResponsible</Name>
				<Source><![CDATA[
    public TMSResponsibleForPayment parmDestResponsible(TMSResponsibleForPayment _destResponsible = destResponsible)
    {
        destResponsible = _destResponsible;

        return destResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestVendorCode</Name>
				<Source><![CDATA[
    public TMSVendorCode parmDestVendorCode(TMSVendorCode _destVendorCode = destVendorCode)
    {
        destVendorCode = _destVendorCode;

        return destVendorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestVendorInvoiceCode</Name>
				<Source><![CDATA[
    public TMSVendorInvoiceCode parmDestVendorInvoiceCode(TMSVendorCode _destVendorInvoiceCode = destVendorInvoiceCode)
    {
        destVendorInvoiceCode = _destVendorInvoiceCode;

        return destVendorInvoiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDirectDelivery</Name>
				<Source><![CDATA[
    public boolean parmDirectDelivery(boolean _directDelivery = directDelivery)
    {
        directDelivery = _directDelivery;

        return directDelivery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDlvDateTime</Name>
				<Source><![CDATA[
    public TMSApptUTCDateTime parmDlvDateTime(TMSApptUTCDateTime _dlvDateTime = dlvDateTime)
    {
        dlvDateTime = _dlvDateTime;

        return dlvDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEquipment</Name>
				<Source><![CDATA[
    public TMSEquipmentCode parmEquipment(TMSEquipmentCode _equipment = equipment)
    {
        equipment = _equipment;

        return equipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrors</Name>
				<Source><![CDATA[
    public container parmErrors(container _errors = errors)
    {
        errors = _errors;

        return errors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreightTerm</Name>
				<Source><![CDATA[
    public DlvTermId parmFreightTerm(DlvTermId _freightTerm = freightTerm)
    {
        freightTerm = _freightTerm;

        return freightTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromAddress</Name>
				<Source><![CDATA[
    public TMSAddressPhone parmFromAddress(TMSAddressPhone _fromAddress = fromAddress)
    {
        if (_fromAddress.parmPostalCode() || _fromAddress.parmCountryRegion())
        {
            fromAddress = _fromAddress;
        }

        return fromAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    public TMSId parmId(TMSId _id = id)
    {
        id = _id;

        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmInventSiteId(InventSiteId _inventSiteId = inventSiteId)
    {
        inventSiteId = _inventSiteId;

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadTemplateId</Name>
				<Source><![CDATA[
    public WHSLoadTemplateId parmLoadTemplateId(WHSLoadTemplateId _loadTemplateId = loadTemplateId)
    {
        loadTemplateId = _loadTemplateId;

        return loadTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLTLClass</Name>
				<Source><![CDATA[
    public WHSLTLClassCode parmLTLClass(WHSLTLClassCode _ltlClass = ltlClass)
    {
        ltlClass = _ltlClass;

        return ltlClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmManualApportionment</Name>
				<Source><![CDATA[
    public boolean parmManualApportionment(boolean _manualApportionment = manualApportionment)
    {
        manualApportionment = _manualApportionment;

        return manualApportionment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMasterTrackingNum</Name>
				<Source><![CDATA[
    public WHSMasterTrackingNum parmMasterTrackingNum(WHSMasterTrackingNum _masterTrackingNum = masterTrackingNum)
    {
        masterTrackingNum = _masterTrackingNum;

        return masterTrackingNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMode</Name>
				<Source><![CDATA[
    public TMSModeCode parmMode(TMSModeCode _mode = mode)
    {
        mode = _mode;

        return mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderDim</Name>
				<Source><![CDATA[
    public DimensionDefault parmOrderDim(DimensionDefault _orderDim = orderDim)
    {
        orderDim = _orderDim;

        return orderDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalDestinationPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmOriginalDestinationPostalAddress(LogisticsPostalAddressRecId  _originalDestinationPostlaAddress = originalDestinationPostalAddress)
    {
        originalDestinationPostalAddress = _originalDestinationPostlaAddress;

        return originalDestinationPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginalOriginPostalAddress</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmOriginalOriginPostalAddress(LogisticsPostalAddressRecId _originalOriginPostalAddress = originalOriginPostalAddress)
    {
        originalOriginPostalAddress = _originalOriginPostalAddress;

        return originalOriginPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginResponsible</Name>
				<Source><![CDATA[
    public TMSResponsibleForPayment parmOriginResponsible(TMSResponsibleForPayment _originResponsible = originResponsible)
    {
        originResponsible = _originResponsible;

        return originResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginVendorCode</Name>
				<Source><![CDATA[
    public TMSVendorCode parmOriginVendorCode(TMSVendorCode _originVendorCode = originVendorCode)
    {
        originVendorCode = _originVendorCode;

        return originVendorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOriginVendorInvoiceCode</Name>
				<Source><![CDATA[
    public TMSVendorInvoiceCode parmOriginVendorInvoiceCode(TMSVendorInvoiceCode _originVendorInvoiceCode = originVendorInvoiceCode)
    {
        originVendorInvoiceCode = _originVendorInvoiceCode;

        return originVendorInvoiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentRecId</Name>
				<Source><![CDATA[
    public RecId parmParentRecId(RecId _parentRecId = parentRecId)
    {
        parentRecId = _parentRecId;

        return parentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecId</Name>
				<Source><![CDATA[
    public RecId parmRecId(RecId _recId = recId)
    {
        recId = _recId;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordType</Name>
				<Source><![CDATA[
    public TMSRecordType parmRecordType(TMSRecordType _recordType = recordType)
    {
        recordType = _recordType;

        return recordType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteCode</Name>
				<Source><![CDATA[
    public TMSRouteCode parmRouteCode(TMSRouteCode _routeCode = routeCode)
    {
        routeCode = _routeCode;

        return routeCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteConfigCode</Name>
				<Source><![CDATA[
    public TMSRouteConfigCode parmRouteConfigCode(TMSRouteConfigCode _routeConfigCode = routeConfigCode)
    {
        routeConfigCode = _routeConfigCode;

        return routeConfigCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteGuideName</Name>
				<Source><![CDATA[
    public TMSName parmRouteGuideName(TMSName _routeGuideName = routeGuideName)
    {
        routeGuideName = _routeGuideName;

        return routeGuideName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteGuideRecId</Name>
				<Source><![CDATA[
    public RefRecId parmRouteGuideRecId(RefRecId _routeGuideRecId = routeGuideRecId)
    {
        routeGuideRecId = _routeGuideRecId;

        return routeGuideRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRoutePlanName</Name>
				<Source><![CDATA[
    public TMSName parmRoutePlanName(TMSName _routePlanName = routePlanName)
    {
        routePlanName = _routePlanName;

        return routePlanName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteSequence</Name>
				<Source><![CDATA[
    public TMSSequence parmRouteSequence(TMSSequence _routeSequence = routeSequence)
    {
        routeSequence = _routeSequence;

        return routeSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSegmentResponsible</Name>
				<Source><![CDATA[
    public TMSResponsibleForPayment parmSegmentResponsible(TMSResponsibleForPayment _segmentResponsible = segmentResponsible)
    {
        segmentResponsible = _segmentResponsible;

        return segmentResponsible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSegmentVendorCode</Name>
				<Source><![CDATA[
    public TMSVendorCode parmSegmentVendorCode(TMSVendorCode _segmentVendorCode = segmentVendorCode)
    {
        segmentVendorCode = _segmentVendorCode;

        return segmentVendorCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSegmentVendorInvoiceCode</Name>
				<Source><![CDATA[
    public TMSVendorInvoiceCode parmSegmentVendorInvoiceCode(TMSVendorInvoiceCode _segmentVendorInvoiceCode = segmentVendorInvoiceCode)
    {
        segmentVendorInvoiceCode = _segmentVendorInvoiceCode;

        return segmentVendorInvoiceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipDateTime</Name>
				<Source><![CDATA[
    public TMSApptUTCDateTime parmShipDateTime(TMSApptUTCDateTime _shipDateTime = shipDateTime)
    {
        shipDateTime = _shipDateTime;

        return shipDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSTCC</Name>
				<Source><![CDATA[
    public WHSSTCCCode parmSTCC(WHSSTCCCode _stcc = stcc)
    {
        stcc = _stcc;

        return stcc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToAddress</Name>
				<Source><![CDATA[
    public TMSAddressPhone parmToAddress(TMSAddressPhone _toAddress = toAddress)
    {
        if (_toAddress.parmPostalCode() || _toAddress.parmCountryRegion())
        {
            toAddress = _toAddress;
        }

        return toAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTrackingNumber</Name>
				<Source><![CDATA[
    public ShipCarrierTrackingNum parmTrackingNumber(ShipCarrierTrackingNum _trackingNumber = trackingNumber)
    {
        trackingNumber = _trackingNumber;

        return trackingNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransportationTemplateId</Name>
				<Source><![CDATA[
    public TMSTransportationTemplateId parmTransportationTemplateId(TMSTransportationTemplateId _transportationTemplateId = transportationTemplateId)
    {
        transportationTemplateId = _transportationTemplateId;

        return transportationTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommunicationType</Name>
				<Source><![CDATA[
    public TMSCommunicationType parmCommunicationType(TMSCommunicationType _communicationType = communicationType)
    {
        communicationType = _communicationType;

        return communicationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValue</Name>
				<Source><![CDATA[
    public AmountMST parmValue(AmountMST _value = value)
    {
        value = _value;

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendAccount</Name>
				<Source><![CDATA[
    public VendAccount parmVendAccount(VendAccount _vendAccount = vendAccount)
    {
        vendAccount = _vendAccount;

        return vendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendInvoiceAccount</Name>
				<Source><![CDATA[
    public CustVendAC parmVendInvoiceAccount(CustVendAC _vendInvoiceAccount = vendInvoiceAccount)
    {
        vendInvoiceAccount = _vendInvoiceAccount;

        return vendInvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVolume</Name>
				<Source><![CDATA[
    public Volume parmVolume(Volume _volume = volume)
    {
        volume = _volume;

        return volume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWeight</Name>
				<Source><![CDATA[
    public Weight parmWeight(Weight _weight = weight)
    {
        weight = _weight;

        return weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCarrierCustomerAccountNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final public TMSCarrierCustomerAccountNumber parmCarrierCustomerAccountNumber(TMSCarrierCustomerAccountNumber _carrierCustomerAccountNumber = carrierCustomerAccountNumber)
    {
        carrierCustomerAccountNumber = _carrierCustomerAccountNumber;

        return carrierCustomerAccountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShippingLabelRequestType</Name>
				<Source><![CDATA[
    internal TMSShippingLabelRequestType parmShippingLabelRequestType(TMSShippingLabelRequestType _shippingLabelRequestType = shippingLabelRequestType)
    {
        shippingLabelRequestType = _shippingLabelRequestType;

        return shippingLabelRequestType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRequest</Name>
				<Source><![CDATA[
    /// <summary>
	/// Sends a request to managed TMS system and receives a response.
	/// </summary>
	/// <param name="xml">
	/// XML document for request.
	/// </param>
	/// <returns>
	/// Response XML coming from managed TMS system.
	/// </returns>
    public XML processRequest(XML xml)
    {
        TMSCommProxy commProxy = new TMSCommProxy();
        XML result = commProxy.sendRequest(xml);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the address nodes out of the XML
    /// </summary>
    /// <param name="_xmlNode">
    /// XML node
    /// </param>
    /// <param name="level">
    /// Route accessorial level
    /// </param>
    /// <param name="_tableId">
    /// Table id
    /// </param>
    /// <param name="_recId">
    /// Record id
    /// </param>
    /// <returns>
    /// Address object containing individual pieces of information
    /// </returns>
    public TMSAddressPhone readAddress(XmlNode _xmlNode, TMSRouteAccessorialLevel level, TableId _tableId = 0, RecId _recId = 0)
    {
        TMSAddressPhone ret = new TMSAddressPhone();

        ret.parmStreet(this.returnNamedNode(_xmlNode, #address));
        ret.parmCity(this.returnNamedNode(_xmlNode, #city));
        ret.parmState(this.returnNamedNode(_xmlNode, #state));
        ret.parmCountryRegion(this.returnNamedNode(_xmlNode, #countryRegion));
        ret.parmCounty(this.returnNamedNode(_xmlNode, #county));
        ret.parmPostalCode(this.returnNamedNode(_xmlNode, #postal));
        ret.parmName(this.returnNamedNode(_xmlNode, #hubMasterCode));
        ret.parmResidential(symbol2Enum(enumNum(ShipCarrierResidentialDest), this.returnNamedNode(_xmlNode, #residential)));
        ret.parmPhone(this.returnNamedNode(_xmlNode, #phone));

        if (ret.parmName() == '')
        {
            ret.parmName(this.returnNamedNode(_xmlNode, #name));
        }

        if (communicationType != TMSCommunicationType::Route && _tableId && _recId && level == TMSRouteAccessorialLevel::Shipment)
        {
            this.readRatingEntities(_xmlNode, TMSRateType::Hub, _tableId, _recId, ret.parmName());
        }

        this.readRatingZoneMasters(_xmlNode, _tableId, _recId);
        this.readMileage(_xmlNode, _tableId, _recId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads from source document that contains result of apportioned transfer line.
	/// </summary>
	/// <param name="_xmlNode">
	/// Source document.
	/// </param>
	/// <param name="_transferLine">
	/// Apportioned transfer line.
	/// </param>
    public void readAppInventTransferLine(XmlNode _xmlNode, InventTransferLine _transferLine)
    {
        InventTransferLine          transferLine = _transferLine;
        TMSTransferCharges          transferCharge;
        XmlNodeList                 appList;
        XmlNode                     appNode;
        XmlNodeList                 rateList;
        XmlNode                     rateNode;
        TMSRateType                 rateType;
        TMSId                       code;
        DlvTerm                     dlvTerm;
        RefRecId                    freightBillRecId;

        appList         = _xmlNode.selectNodes(#apportionment);
        appNode         = appList.nextNode();
        dlvTerm         = DlvTerm::find(freightTerm);

        if (appNode
        &&  dlvTerm.RecId
        &&  dlvTerm.ShipCarrierApplyFreeMinimum == NoYes::No)
        {
            rateList    = appNode.selectNodes(#rate);
            rateNode    = rateList.nextNode();

            while (rateNode)
            {
                rateType            = str2int(this.returnNamedNode(rateNode, #rateType));
                code                = this.returnNamedNode(rateNode, #code);
                freightBillRecId    = str2int64(this.returnNamedNode(rateNode, #objectId));

                if ((code == segmentDestHub
                &&   destResponsible == TMSResponsibleForPayment::Company)
                ||  (code == segmentOriginHub
                &&   originResponsible == TMSResponsibleForPayment::Company)
                ||  (code != segmentOriginHub
                &&   code != segmentDestHub
                &&   segmentResponsible == TMSResponsibleForPayment::Company))
                {
                    MarkupTable markupTable = markupTable::find(this.markupModuleTypeFromNode(rateNode),
                                                                this.returnNamedNode(rateNode, #chargeCode));

                    MarkupTrans markupTrans;

                    markupTrans.MarkupCode      = markupTable.MarkupCode;
                    markupTrans.TaxItemGroup    = markupTable.TaxItemGroup;
                    markupTrans.ModuleType      = markupTable.ModuleType;
                    markupTrans.TransTableId    = transferLine.TableId;
                    markupTrans.TransRecId      = transferLine.RecId;

                    markupTrans = this.createMarkupTrans(markupTrans,
                                                         any2Real(this.returnNamedNode(rateNode, #totalRate)),
                                                         this.returnNamedNode(rateNode, #currencyCode),
                                                         strFmt("@TRX757", rateType, code, segmentCarrier),
                                                         this.returnNamedNode(rateNode, #currencyCode),
                                                         this.getMiscMarkupCategory(rateNode));

                    transferCharge.TransferId               = transferLine.TransferId;
                    transferCharge.TransferLineNum          = transferLine.LineNum;
                    transferCharge.ModuleType               = MarkupModuleType::Invent;
                    transferCharge.MarkupCode               = this.returnNamedNode(rateNode, #chargeCode);
                    transferCharge.CurrencyCode             = this.returnNamedNode(rateNode, #currencyCode);
                    transferCharge.Txt                      = strFmt("@TRX757", rateType, code, segmentCarrier);
                    transferCharge.Value                    = any2real(this.returnNamedNode(rateNode, #totalRate));
                    transferCharge.FreightBillDetailRecId   = freightBillRecId;
                    transferCharge.LineNum                  = TMSTransferCharges::lastLineNum(transferLine.TransferId,
                                                                                                  transferLine.LineNum) + 1;
                    transferCharge.insert();

                    this.createMarkupTransRelatedRecords(markupTrans.RecId, freightBillRecId);
                }

                rateNode = rateList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads from source document that contains result of apportioned line.
	/// </summary>
	/// <param name="_xmlNode">
	/// Source document.
	/// </param>
    public void readAppLine(XmlNode _xmlNode)
    {
        InventTransId   inventTransId = this.returnNamedNode(_xmlNode, #InventTransId);

        switch (InventTransOrigin::findByInventTransId(inventTransId).ReferenceCategory)
        {
            case InventTransType::Sales:
                this.readAppSalesLine(_xmlNode, SalesLine::findInventTransId(inventTransId));
                break;

            case InventTransType::Purch:
                this.readAppPurchLine(_xmlNode, PurchLine::findInventTransId(inventTransId));
                break;

            case InventTransType::TransferOrderShip:
                this.readAppInventTransferLine(_xmlNode, InventTransferLine::findTransIdShip(inventTransId));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Process the response xml for apportioned purchase lines.
    /// </summary>
    /// <param name="_xmlNode">
    ///     XML node to be processed
    /// </param>
    /// <param name="_purchLine">
    ///     Origin Record
    /// </param>
    public void readAppPurchLine(XmlNode _xmlNode, PurchLine _purchLine)
    {
        PurchLine                   purchLine = _purchLine;
        MarkupTrans                 markupTrans;
        MarkupTable                 markupTable;
        XmlNodeList                 appList;
        XmlNode                     appNode;
        XmlNodeList                 rateList;
        XmlNode                     rateNode;
        TMSRateType                 rateType;
        TMSId                       code;
        DlvTerm                     dlvTerm;
        RefRecId                    freightBillRecId;
        TMSDiscountType             chargeType;
        MarkupCategory              markupCategory;

        appList         = _xmlNode.selectNodes(#apportionment);
        appNode         = appList.nextNode();
        dlvTerm         = DlvTerm::find(freightTerm);

        if (appNode)
        {
            rateList    = appNode.selectNodes(#rate);
            rateNode    = rateList.nextNode();

            while (rateNode)
            {
                rateType            = str2int(this.returnNamedNode(rateNode, #rateType));
                code                = this.returnNamedNode(rateNode, #code);
                freightBillRecId    = str2int64(this.returnNamedNode(rateNode, #objectId));
                chargeType          = any2Enum(symbol2Enum(enumNum(TMSDiscountType), this.returnNamedNode(rateNode, #chargeType)));

                if ((code == segmentDestHub                                     &&
                     destResponsible == TMSResponsibleForPayment::Company)      ||
                    (code == segmentOriginHub                                   &&
                     originResponsible == TMSResponsibleForPayment::Company)    ||
                    (code != segmentOriginHub                                   &&
                     code != segmentDestHub                                     &&
                     segmentResponsible == TMSResponsibleForPayment::Company))
                {
                    if (dlvTerm.ShipCarrierApplyFreeMinimum == NoYes::No)
                    {
                        markupTable = MarkupTable::find(this.markupModuleTypeFromNode(rateNode),
                                                        this.returnNamedNode(rateNode, #chargeCode));
                        markupTrans.clear();

                        if (directDelivery && chargeType == TMSDiscountType::Customer)
                        {
                            markupTrans.initFromSalesLine(SalesLine::findInventTransId(purchLine.InventRefTransId));
                        }
                        else
                        {
                            markupTrans.initFromPurchLine(purchLine);
                        }

                        markupCategory = this.getMiscMarkupCategory(rateNode);

                        this.initializeChargeTransactions(markupTrans, markupTable, purchLine, rateNode);

                        markupTrans = this.createMarkupTrans(markupTrans,
                            any2real(this.returnNamedNode(rateNode, #totalRate)),
                            this.returnNamedNode(rateNode, #currencyCode),
                            strFmt("@TRX757", rateType, code, segmentCarrier),
                            purchLine.CurrencyCode,
                            markupCategory);

                        this.createMarkupTransRelatedRecords(markupTrans.RecId, freightBillRecId);
                    }
                }

                rateNode = rateList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeChargeTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the charge transactions.
    /// </summary>
    /// <param name = "_markupTrans">The charge transaction table record.</param>
    /// <param name = "_markupTable">The charge code table record.</param>
    /// <param name = "_purchLine">The purchase line table record.</param>
    /// <param name = "_rateNode">The XML node to be searched in.</param>
    protected void initializeChargeTransactions(
        MarkupTrans _markupTrans,
        MarkupTable _markupTable,
        PurchLine   _purchLine,
        XmlNode     _rateNode)
    {
        _markupTrans.MarkupCode     = _markupTable.MarkupCode;
        _markupTrans.TaxItemGroup   = _markupTable.TaxItemGroup;
        _markupTrans.TaxGroup       = _purchLine.purchTable().TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Process the response xml for apportioned sales lines.
    /// </summary>
    /// <param name="_xmlNode">
    ///     XML node to be processed
    /// </param>
    /// <param name="_salesLine">
    ///     Origin Record
    /// </param>
    public void readAppSalesLine(XmlNode _xmlNode, SalesLine _salesLine)
    {
        SalesLine                   salesLine = _salesLine;
        MarkupTrans                 markupTrans;
        MarkupTable                 markupTable;
        XmlNodeList                 appList;
        XmlNode                     appNode;
        XmlNodeList                 rateList;
        XmlNode                     rateNode;
        TMSRateType                 rateType;
        TMSId                       code;
        DlvTerm                     dlvTerm;
        RefRecId                    freightBillRecId;
        SalesTable                  salesTable;
        MarkupCategory              markupCategory;

        appList         = _xmlNode.selectNodes(#apportionment);
        appNode         = appList.nextNode();
        dlvTerm         = DlvTerm::find(freightTerm);

        if (appNode)
        {
            rateList    = appNode.selectNodes(#rate);
            rateNode    = rateList.nextNode();

            while (rateNode)
            {
                rateType            = str2int(this.returnNamedNode(rateNode, #rateType));
                code                = this.returnNamedNode(rateNode, #code);
                freightBillRecId    = str2int64(this.returnNamedNode(rateNode, #objectId));

                if ((code == segmentDestHub                                     &&
                     destResponsible == TMSResponsibleForPayment::Company)      ||
                    (code == segmentOriginHub                                   &&
                     originResponsible == TMSResponsibleForPayment::Company)    ||
                    (code != segmentOriginHub                                   &&
                     code != segmentDestHub                                     &&
                     segmentResponsible == TMSResponsibleForPayment::Company))
                {
                    salesTable = _salesLine.salesTable();

                    if (dlvTerm.ShipCarrierApplyFreeMinimum == NoYes::No    ||
                        salesTable.amountDelivered() + salesTable.amountRemainSalesPhysical() < dlvTerm.ShipCarrierFreeMinimum)
                    {
                        markupCategory = this.getMiscMarkupCategory(rateNode);

                        markupTable = MarkupTable::find(this.markupModuleTypeFromNode(rateNode),
                                                        this.returnNamedNode(rateNode, #chargeCode));
                        markupTrans.clear();
                        markupTrans.MarkupCode      = markupTable.MarkupCode;
                        markupTrans.TaxItemGroup    = markupTable.TaxItemGroup;
                        markupTrans.TaxGroup        = salesTable.TaxGroup;
                        markupTrans.initFromSalesLine(salesLine);
                        markupTrans = this.createMarkupTrans(markupTrans,
                            any2real(this.returnNamedNode(rateNode, #totalRate)),
                            this.returnNamedNode(rateNode, #currencyCode),
                            strFmt("@TRX757", rateType, code, segmentCarrier),
                            markupTable.isMarkupOfTypeLedgerLedger() ? this.returnNamedNode(rateNode, #currencyCode) : salesLine.CurrencyCode,
                            markupCategory);

                        this.createMarkupTransRelatedRecords(markupTrans.RecId, freightBillRecId);
                    }
                }

                rateNode = rateList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupModuleTypeFromNode</Name>
				<Source><![CDATA[
    private MarkupModuleType markupModuleTypeFromNode(XmlNode _node)
    {
        return any2enum(symbol2Enum(enumNum(MarkupModuleType), this.returnNamedNode(_node, #moduleType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMarkupTransRelatedRecords</Name>
				<Source><![CDATA[
    private void createMarkupTransRelatedRecords(
        RefRecId    _markupTransRecId,
        RefRecId    _freightBillRecId)
    {
        TMSRouteMarkupTrans routeMarkupTrans;

        routeMarkupTrans.RouteCode  = routeCode;
        routeMarkupTrans.RefRecId   = _markupTransRecId;
        routeMarkupTrans.insert();

        if (_freightBillRecId)
        {
            TMSFreightBillMarkupTrans freightBillMarkupTrans;

            freightBillMarkupTrans.FreightBillDetailTableId = tableNum(TMSFreightBillDetail);
            freightBillMarkupTrans.FreightBillDetailRecId   = _freightBillRecId;
            freightBillMarkupTrans.MarkupTransTableId       = tableNum(MarkupTrans);
            freightBillMarkupTrans.MarkupTransRecId         = _markupTransRecId;
            freightBillMarkupTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppSegment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes the response xml from apportioned route segment.
	/// </summary>
	/// <param name="_xmlNode">
	/// Source document containing response xml.
	/// </param>
    public void readAppSegment(XmlNode _xmlNode)
    {
        segmentResponsible = any2Enum(symbol2Enum(enumNum(TMSResponsibleForPayment), this.returnNamedNode(_xmlNode, #responsible)));

        if (segmentCarrier == '')
        {
            segmentCarrier = TMSRouteSegment::find(routeCode, routeSequence).CarrierCode;
        }

        this.readAppShippingEntity(_xmlNode);
        this.readRatingErrors(_xmlNode, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAppShippingEntity</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes shipping entities from response xml of apportionment operation.
	/// </summary>
	/// <param name="_xmlNode">
	/// Source document.
	/// </param>
    public void readAppShippingEntity(XmlNode _xmlNode)
    {
        XmlNodeList     shipEntList;
        XmlNode         shipNode;

        shipEntList = _xmlNode.selectNodes(#shipping);
        shipNode    = shipEntList.nextNode();

        while (shipNode)
        {
            switch (this.returnNamedNode(shipNode, #shippingEntityType))
            {
                case #typeLine:
                    this.readAppLine(shipNode);
                    break;

                case #typeSegment, #typeShipment:
                    this.readAppSegment(shipNode);
                    break;

                default:
                    this.readAppShippingEntity(shipNode);
            }

            this.readOverrideEntities(shipNode);
            this.readRatingEntities(shipNode);

            shipNode    = shipEntList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readConf</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads confirmation xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// The xml node.
	/// </param>
    public void readConf(XmlNode _xmlNode)
    {
        XmlNodeList     rateList;
        XmlNode         requestNode;
        XmlNodeList     shipList;
        XmlNode         shipNode;

        rateList    = _xmlNode.selectNodes(#request);
        requestNode = rateList.nextNode();

        while (requestNode)
        {
            shipList    = _xmlNode.selectNodes(#shipping);
            shipNode = shipList.nextNode();

            requestNode = rateList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readConfirmationOther</Name>
				<Source><![CDATA[
    private void readConfirmationOther( TMSId                    _rateId,
                                        TMSRateType              _rateType,
                                        XmlNode                  _xmlNode,
                                        TMSRate                  _totalRate,
                                        TMSRateUnit              _unit,
                                        TMSRateUnitRate          _unitRate,
                                        MarkupCode               _chargeCode,
                                        TMSRateType              _rateTypeVar,
                                        TMSId                    _rateIdVar,
                                        TMSResponsibleForPayment _responsible,
                                        TMSVendorCode            _vendor,
                                        TMSVendorInvoiceCode     _vendorInvoice,
                                        NoYesId                  _user,
                                        TMSBillingGroupId        _billingGroupId,
                                        TMSExternalCode          _externalCode,
                                        CurrencyCode             _rateCurrency,
                                        TMSShipperRate           _shipperRate,
                                        TMSCustomerRate          _customerRate)
    {
        TMSRate                     totalRate       = _totalRate;
        TMSRateUnit                 unit            = _unit;
        TMSRateUnitRate             unitRate        = _unitRate;
        MarkupCode                  chargeCode      = _chargeCode;
        TMSRateType                 rateType        = _rateTypeVar;
        TMSId                       rateId          = _rateIdVar;
        TMSRouteRateDetail          routeRateDetail;
        TMSResponsibleForPayment    responsible     = _responsible;
        TMSVendorCode               vendor          = _vendor;
        TMSVendorInvoiceCode        vendorInvoice   = _vendorInvoice;
        NoYesId                     user            = _user;
        TMSBillingGroupId           billingGroupId  = _billingGroupId;
        TMSExternalCode             externalCode    = _externalCode;
        CurrencyCode                rateCurrency    = _rateCurrency;
        TMSShipperRate              shipperRate     = _shipperRate;
        TMSCustomerRate             customerRate    = _customerRate;

        if (communicationType != TMSCommunicationType::Confirmation && communicationType != TMSCommunicationType::Apportionment && !segmentRate)
        {
            segmentLoadLine.RateId       = _rateId;
            segmentLoadLine.RateType     = _rateType;
            segmentLoadLine.RateCur      = totalRate;
            segmentLoadLine.CurrencyCode = currencyCode;
            segmentLoadLine.MarkupCode   = chargeCode;
            segmentLoadLine.insert();
        }

        if (communicationType == TMSCommunicationType::Confirmation)
        {
            routeRateDetail.RouteCode                    = routeCode;
            routeRateDetail.Sequence                     = routeSequence;
            routeRateDetail.Id                           = id;
            routeRateDetail.RouteAccessorialLevel        = recordType == TMSRecordType::Load ? TMSRouteAccessorialLevel::Load : TMSRouteAccessorialLevel::Shipment;
            routeRateDetail.AccessorialAssignmentLevel   = TMSAccessorialAssignmentLevel::Shipment;
            routeRateDetail.Generated                    = user != NoYes::Yes;
            routeRateDetail.RateType                     = rateType;
            routeRateDetail.RateId                       = rateId;
            routeRateDetail.RateCur                      = totalRate;
            routeRateDetail.RateUnit                     = unit;
            routeRateDetail.RateUnitRate                 = unitRate;
            routeRateDetail.MarkupCode                   = chargeCode;
            routeRateDetail.ResponsibleForPayment        = responsible;
            routeRateDetail.VendorCode                   = vendor;
            routeRateDetail.VendorInvoiceCode            = vendorInvoice;
            routeRateDetail.CarrierCode                  = carrierCode;
            routeRateDetail.CarrierServiceCode           = carrierServiceCode;
            routeRateDetail.BillingGroupId               = billingGroupId;
            routeRateDetail.ExternalCode                 = externalCode;
            routeRateDetail.CurrencyCode                 = rateCurrency;
            routeRateDetail.ShipperRate                  = this.hasShipperRate(_xmlNode) ? shipperRate : totalRate;
            routeRateDetail.CustomerRate                 = this.hasCustomerRate(_xmlNode) ? customerRate : totalRate;

            if (rateType == TMSRateType::Hub)
            {
                routeRateDetail.HubMasterCode            = rateId;
            }

            if (communicationType == TMSCommunicationType::Confirmation && status != #notSupported)
            {
                routeRateDetail.insert();
            }

            if (!segmentRate)
            {
                this.createFreightBillDetail(routeRateDetail, _xmlNode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readMileage</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads miles from mileage xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// The xml node.
	/// </param>
	/// <param name="_tableId">
	/// The table id.
	/// </param>
	/// <param name="_recId">
	/// The record id.
	/// </param>
    public void readMileage(XmlNode _xmlNode, TableId _tableId = 0, RecId _recId = 0)
    {
        XmlNodeList             mileList;
        XmlNode                 mileNode;
        TMSMileageEngineCode    mileageCode;

        mileList = _xmlNode.selectNodes(#Mileage);
        mileNode = mileList.nextNode();

        while (mileNode)
        {
            mileageCode = this.returnNamedNode(mileNode, #mileageCode);
            miles       = any2real(this.returnNamedNode(mileNode, #miles));
            mileNode    = mileList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readOverrideEntities</Name>
				<Source><![CDATA[
    /// <summary>
	/// Process all entities that have overridden charges from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// Source document containing response xml.
	/// </param>
	/// <param name="_rateType">
	/// Rate type of the rate operation.
	/// </param>
	/// <param name="_tableId">
	/// Table id.
	/// </param>
	/// <param name="_recId">
	/// Record id.
	/// </param>
    public void readOverrideEntities(XmlNode _xmlNode, TMSRateType _rateType = TMSRateType::Rate, TableId _tableId = 0, RecId _recId = 0)
    {
        XmlNodeList     ratingList;
        XmlNode         ratingNode;
        XmlNodeList     rateList;
        XmlNode         rateNode;

        ratingList  = _xmlNode.selectNodes(#overrideEntities);
        ratingNode  = ratingList.nextNode();

        if (ratingNode)
        {
            rateList    = ratingNode.selectNodes(#overrideEntity);
            rateNode    = rateList.nextNode();

            while (rateNode)
            {
                this.readOverrideEntity(rateNode, _rateType, _tableId, _recId);
                rateNode      = rateList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readOverrideEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an entity that has overridden charges from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// Source document containing response xml.
	/// </param>
	/// <param name="_rateType">
	/// Rate type of the rate operation.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the entity.
	/// </param>
    public void readOverrideEntity(XmlNode _xmlNode, TMSRateType _rateType, TableId _tableId = 0, RecId _recId = 0)
    {
        TMSCarrierCode          rateCarrier;
        TMSCarrierServiceCode   rateServiceCode;
        TMSRate                 totalRate;
        CurrencyCode            currency;
        TMSChargeOverrideTable  overrideTable;
        TMSRouteOverride        routeOverride;
        XmlNodeList             rateList;
        XmlNode                 rateNode;

        rateCarrier     = this.returnNamedNode(_xmlNode, #carrier);
        rateServiceCode = this.returnNamedNode(_xmlNode, #carrierService);
        totalRate       = any2real(this.returnNamedNode(_xmlNode, #totalRate));
        currency        = this.returnNamedNode(_xmlNode, #currencyCode);

        overrideTable.RouteId            = routeId;
        overrideTable.RefTableId         = _tableId;
        overrideTable.RefRecId           = _recId;
        overrideTable.RouteRecId         = routeRecId;
        overrideTable.CarrierCode        = rateCarrier;
        overrideTable.CarrierServiceCode = rateServiceCode;
        overrideTable.TotalRate          = totalRate;
        overrideTable.CurrencyCode       = currency;

        if (overrideRouteRecId  == routeRecId)
        {
            overrideRate += overrideTable.TotalRate;
        }
        else
        {
            overrideRate        = overrideTable.TotalRate;
            overrideRouteRecId  = routeRecId;
        }

        if (communicationType != TMSCommunicationType::Confirmation && routeId != '')
        {
            overrideTable.insert();
        }
        else if (routeId)
        {
            routeOverride.RouteCode          = routeCode;
            routeOverride.CarrierCode        = overrideTable.CarrierCode;
            routeOverride.CarrierServiceCode = overrideTable.CarrierServiceCode;
            routeOverride.CurrencyCode       = overrideTable.CurrencyCode;
            routeOverride.TotalRate          = overrideTable.TotalRate;
            routeOverride.insert();
        }

        rateList        = _xmlNode.selectNodes(#rate);
        rateNode        = rateList.nextNode();

        while (rateNode && routeId)
        {
            this.readOverrideEntityRate(rateNode, overrideTable.TableId, overrideTable.RecId);

            rateNode        = rateList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readOverrideEntityRate</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rate details of the overrided entity from xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing rate details.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the entity.
	/// </param>
    public void readOverrideEntityRate(XmlNode _xmlNode, TableId _tableId = 0, RecId _recId = 0)
    {
        TMSRateDetails              rateDetails;
        TMSRateType                 rateType;
        TMSRate                     totalRate;
        TMSRateUnit                 unit;
        TMSRateUnitRate             unitRate;
        MarkupCode                  chargeCode;
        TMSId                       rateId;
        CurrencyCode                rateCurrency;

        if (communicationType != TMSCommunicationType::Confirmation)
        {
            rateType        = str2int(this.returnNamedNode(_xmlNode, #rateType));
            totalRate       = any2real(this.returnNamedNode(_xmlNode, #totalRate));
            unit            = any2int(this.returnNamedNode(_xmlNode, #units));
            unitRate        = any2real(this.returnNamedNode(_xmlNode, #unitRate));
            chargeCode      = this.returnNamedNode(_xmlNode, #chargeCode);
            rateId          = this.returnNamedNode(_xmlNode, #code);
            rateCurrency    = this.returnNamedNode(_xmlNode, #currencyCode);

            rateDetails.RefTableId                  = _tableId;
            rateDetails.RefRecId                    = _recId;
            rateDetails.Id                          = rateId;
            rateDetails.RateType                    = rateType;
            rateDetails.RateCur                     = totalRate;
            rateDetails.RateUnit                    = unit;
            rateDetails.RateUnitRate                = unitRate;
            rateDetails.CurrencyCode                = rateCurrency;
            rateDetails.MarkupCode                  = chargeCode;
            rateDetails.ShipperRate                 = totalRate;
            rateDetails.CustomerRate                = totalRate;
            rateDetails.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readProNumber</Name>
				<Source><![CDATA[
    /// <summary>
	/// Updates pro number of shipment record.
    /// </summary>
    /// <param name="_proNum">
    /// The pro number.
    /// </param>
    public void readProNumber(WHSProNum _proNum)
    {
        WHSShipmentTable        shipmentTable;

        ttsbegin;

        switch (recordType)
        {
            case TMSRecordType::Load:
                while select forupdate shipmentTable
                    where shipmentTable.LoadId == id
                {
                    shipmentTable.ProNum = _proNum;
                    shipmentTable.update();
                }
                break;

            case TMSRecordType::Shipment:
                shipmentTable = commonRec;
                shipmentTable.selectForUpdate(true);
                shipmentTable.ProNum = _proNum;
                shipmentTable.write();
                break;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRateRoute</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a <c>TMSRouteTable</c> record.
	/// </summary>
	/// <param name="_carrierCode">
	/// Carrier code of the route.
	/// </param>
	/// <param name="_carrierService">
	/// Carrier service of the route.
	/// </param>
	/// <param name="_modeCode">
	/// Mode code of the route.
	/// </param>
    public void readRateRoute(TMSCarrierCode _carrierCode, TMSCarrierServiceCode _carrierService, TMSModeCode _modeCode)
    {
        TMSRouteTable       routeTable;

        routeId = strFmt('%1-%2', _carrierCode, _carrierService);

        if (parentRecId != 0)
        {
            commonRec = this.findParent();
        }

        routeTable.RefTableId   = commonRec.TableId;
        routeTable.RefRecId     = commonRec.RecId;
        routeTable.RouteId               = routeId;
        routeTable.CarrierCode           = _carrierCode;
        routeTable.CarrierServiceCode    = _carrierService;
        routeTable.ModeCode              = _modeCode;
        routeTable.insert();

        routeRecId                          = routeTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customerRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The customer rate.
    /// </summary>
    /// <param name = "_rateNode">The rate node.</param>
    /// <param name = "_routeTable">The route.</param>
    /// <returns>A customer rate value.</returns>
    protected TMSCustomerRate customerRate(XmlNode _rateNode, TMSRouteTable _routeTable)
    {
        return any2real(this.returnNamedNode(_rateNode, #customerRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The route rate.
    /// </summary>
    /// <param name = "_rateNode">The rate node.</param>
    /// <param name = "_routeTable">The route.</param>
    /// <returns>A route rate value.</returns>
    protected TMSCustomerRate routeRate(XmlNode _rateNode, TMSRouteTable _routeTable)
    {
        return any2real(this.returnNamedNode(_rateNode, #totalRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeRateDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the rate details record from the rates node.
    /// </summary>
    /// <param name = "_rateDetail">The rate details.</param>
    /// <param name = "_ratesNode">The rates node.</param>
    /// <param name = "_routeTable">The route.</param>
    protected void initializeRateDetail(TMSRateDetails _rateDetail, XmlNode _ratesNode, TMSRouteTable _routeTable)
    {

        _rateDetail.RateCur                  = any2real(this.returnNamedNode(_ratesNode, #totalRate));
        _rateDetail.CurrencyCode             = this.returnNamedNode(_ratesNode, #currencyCode);
        _rateDetail.Id                       = this.returnNamedNode(_ratesNode, #code);
        _rateDetail.RateType                 = str2int(this.returnNamedNode(_ratesNode, #rateType));
        _rateDetail.RateUnitRate             = any2real(this.returnNamedNode(_ratesNode, #unitRate));
        _rateDetail.RateUnit                 = any2real(this.returnNamedNode(_ratesNode, #units));
        _rateDetail.MarkupCode               = this.returnNamedNode(_ratesNode, #freightTerm);

        _rateDetail.ShipperRate              = this.shipperRate(_ratesNode);
        _rateDetail.CustomerRate             = this.hasOverrideRate() ? overrideRate : this.customerRate(_ratesNode, _routeTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipperRate</Name>
				<Source><![CDATA[
    private TMSShipperRate shipperRate(XmlNode _ratesNode)
    {
        return any2real(this.returnNamedNode(_ratesNode, #shipperRate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     reading the rate transaction shipment node of the response xml
    /// </summary>
    /// <param name="_xmlNode">
    ///     XML Node to be processed
    /// </param>
    public void readRateShipment(XmlNode _xmlNode)
    {
        TMSRouteAccessorialLevel    level = TMSRouteAccessorialLevel::Shipment;
        utcDateTime                 requestedShip = this.convertStr2UTCDateTime(this.returnNamedNode(_xmlNode, #shipDate));
        utcDateTime                 requestedDelivery;
        utcDateTime                 now = DateTimeUtil::utcNow();
        boolean                     requestedShipHasValue = requestedShip != utcDateTimeNull();
        boolean                     requestedDeliveryHasValue = dlvDateTime != utcDateTimeNull();
        boolean                     needCalcShipDateByDeliveryDate = !requestedShipHasValue && requestedDeliveryHasValue;

        requestedShip       = requestedShipHasValue ? requestedShip : now;
        requestedDelivery   = requestedDeliveryHasValue ? dlvDateTime : now;

        XmlNodeList addressList         = _xmlNode.selectNodes(#pickUp);
        XmlNode addressNode             = addressList.nextNode();
        TMSAddressPhone pickupAdd       = this.readAddress(addressNode, level);

        addressList                 = _xmlNode.selectNodes(#dropOff);
        addressNode                 = addressList.nextNode();
        TMSAddressPhone dropOffAdd  = this.readAddress(addressNode, level);

        TMSFreightTermCode freightTermCode = this.returnNamedNode(_xmlNode, #freightTerm);

        utcDateTime calcShipDateTime;

        XmlNodeList ratingList  = _xmlNode.selectNodes(#ratings);
        XmlNode ratingNode      = ratingList.nextNode();

        if (ratingNode)
        {
            XmlNodeList     rateList        = ratingNode.selectNodes(#rating);
            XmlNode         rateNode        = rateList.nextNode();
            CurrencyCode    companyCurrency = CompanyInfoHelper::standardCurrency();

            ttsbegin;
            while (rateNode)
            {
                XmlNode transitNode = this.readTransitTime(rateNode);

                calcShipDateTime = DateTimeUtil::addDays(requestedDelivery, -real2int(roundUp(transitDays, 1)));
                shipDateTime     = needCalcShipDateByDeliveryDate ? calcShipDateTime : requestedShip;
                calcDlvDateTime  = DateTimeUtil::addDays(shipDateTime, real2int(roundUp(transitDays, 1)));
                calcDlvDateTime  = max(calcDlvDateTime, requestedDelivery);
                routeCarrierCode = this.returnNamedNode(rateNode, #carrier);

                TMSRouteTable routeTable;
                routeTable.CarrierCode          = routeCarrierCode;
                routeTable.CarrierServiceCode   = this.returnNamedNode(rateNode, #carrierService);
                routeTable.ModeCode             = this.returnNamedNode(rateNode, #modeCode);
                routeTable.RouteId              = strFmt('%1-%2', routeTable.CarrierCode, routeTable.CarrierServiceCode);

                if (parentRecId != 0)
                {
                    Common parentsTable = this.findParent();
                    routeTable.RefTableId       = parentsTable.TableId;
                    routeTable.RefRecId         = parentsTable.RecId;
                }
                else
                {
                    routeTable.RefTableId           = commonRec.TableId;
                    routeTable.RefRecId             = commonRec.RecId;
                }

                routeTable.ShipUTCDateTime          = shipDateTime;
                routeTable.DeliveryUTCDateTime      = calcDlvDateTime;

                CurrencyCode routeCurrency      = this.returnNamedNode(rateNode, #currencyCode);
                TMSRate routeRate               = this.routeRate(rateNode, routeTable);
                boolean needCurrencyConversion  = false;

                if (routeCurrency == companyCurrency)
                {
                    routeTable.TotalRate            = routeRate;
                    routeTable.CurrencyCode         = routeCurrency;
                }
                else
                {
                    if (communicationType            == TMSCommunicationType::RateShop
                        && routeCurrency    == '')
                    {
                        routeTable.TotalRate        = routeRate;
                        routeTable.CurrencyCode     = companyCurrency;
                    }
                    else
                    {
                        needCurrencyConversion      = true;
                        routeTable.TotalRate        = this.convertCurrency(routeCurrency, companyCurrency, routeRate);
                        routeTable.CurrencyCode     = companyCurrency;
                    }
                }
                // Must write the table first for reference fields to evaluate the override entities
                routeTable.insert();

                routeId = routeTable.RouteId;
                routeRecId = routeTable.RecId;
                this.readOverrideEntities(_xmlNode, TMSRateType::Rate, routeTable.RefTableId, routeTable.RefRecId);

                // Charge Override - update the route table after the override entities have been evaluated.
                TMSCustomerRate customerRate = this.customerRate(rateNode, routeTable);
                if (this.hasOverrideRate())
                {
                    routeTable.CustomerRate         = overrideRate;
                }
                else
                {
                    if (!needCurrencyConversion)
                    {
                        routeTable.CustomerRate = this.hasCustomerRate(rateNode) ? customerRate : routeTable.TotalRate;
                    }
                    else
                    {
                        routeTable.CustomerRate = this.hasCustomerRate(rateNode) ?  this.convertCurrency(routeCurrency,
                                                                                        companyCurrency,
                                                                                        customerRate) : routeTable.TotalRate;
                    }
                }

                TMSShipperRate shipperRate = this.shipperRate(rateNode);
                if (!needCurrencyConversion)
                {
                    routeTable.ShipperRate      = this.hasShipperRate(rateNode) ? shipperRate : routeTable.TotalRate;
                }
                else
                {
                    routeTable.ShipperRate      = this.hasShipperRate(rateNode) ? this.convertCurrency(routeCurrency,
                                                                                        companyCurrency,
                                                                                        shipperRate) : routeTable.TotalRate;
                }

                routeTable.write();

                TMSRouteSegmentTable segmentTable;
                segmentTable.RouteRecId                         = routeTable.RecId;
                segmentTable.RouteId                            = routeTable.RouteId;
                segmentTable.RefTableId                         = routeTable.RefTableId;
                segmentTable.RefRecId                           = routeTable.RefRecId;
                segmentTable.OriginName                         = pickupAdd.parmName();
                segmentTable.OriginalOriginPostalAddress        = this.parmOriginalOriginPostalAddress();
                segmentTable.OriginAddress                      = pickupAdd.parmStreet();
                segmentTable.OriginCity                         = pickupAdd.parmCity();
                segmentTable.OriginCounty                       = pickupAdd.parmCounty();
                segmentTable.OriginState                        = pickupAdd.parmState();
                segmentTable.OriginCountryRegion                = pickupAdd.parmCountryRegion();
                segmentTable.OriginCountryRegionISOCode         = LogisticsAddressCountryRegion::find(segmentTable.OriginCountryRegion).isOcode;
                segmentTable.OriginPostalCode                   = pickupAdd.parmPostalCode();
                segmentTable.OriginResidential                  = pickupAdd.parmResidential();
                segmentTable.DestinationName                    = dropOffAdd.parmName();
                segmentTable.OriginalDestinationPostalAddress   = this.parmOriginalDestinationPostalAddress();
                segmentTable.DestinationAddress                 = dropOffAdd.parmStreet();
                segmentTable.DestinationCity                    = dropOffAdd.parmCity();
                segmentTable.DestinationState                   = dropOffAdd.parmState();
                segmentTable.DestinationCountryRegion           = dropOffAdd.parmCountryRegion();
                segmentTable.DestinationCounty                  = dropOffAdd.parmCounty();
                segmentTable.DestinationCountryRegionISOCode    = LogisticsAddressCountryRegion::find(segmentTable.DestinationCountryRegion).isOcode;
                segmentTable.DestinationPostalCode              = dropOffAdd.parmPostalCode();
                segmentTable.DestinationResidential             = dropOffAdd.parmResidential();
                segmentTable.CarrierCode                        = routeTable.CarrierCode;
                segmentTable.CarrierServiceCode                 = routeTable.CarrierServiceCode;
                segmentTable.ModeCode                           = routeTable.ModeCode;
                segmentTable.TotalRate                          = routeTable.TotalRate;
                segmentTable.ShipperRate                        = routeTable.ShipperRate;
                segmentTable.CustomerRate                       = routeTable.CustomerRate;
                segmentTable.CurrencyCode                       = routeTable.CurrencyCode;
                segmentTable.ShipUTCDateTime                    = routeTable.ShipUTCDateTime;
                segmentTable.DeliveryUTCDateTime                = routeTable.DeliveryUTCDateTime;
                segmentTable.TransitTime                        = transitDays;
                segmentTable.FreightTermCode                    = freightTermCode;
                segmentTable.Miles                              = miles;
                segmentTable.insert();

                XmlNodeList ratesList   = rateNode.selectNodes(#rate);
                XmlNode ratesNode       = ratesList.nextNode();

                while (ratesNode)
                {
                    TMSRateDetails rateDetail;
                    rateDetail.RefTableId               = segmentTable.TableId;
                    rateDetail.RefRecId                 = segmentTable.RecId;

                    this.initializeRateDetail(rateDetail, ratesNode, routeTable);

                    TMSVendorCode               defaultVendorCode = TMSCarrier::find(routeTable.CarrierCode).VendorCode;
                    TMSResponsibleForPayment    responsible;
                    TMSVendorCode               vendor;
                    TMSVendorInvoiceCode        vendorInvoice;
                    switch (rateDetail.RateType)
                    {
                        case TMSRateType::Rate:
                            responsible         = segmentResponsible;
                            vendor              = segmentVendorCode ? segmentVendorCode : defaultVendorCode;
                            vendorInvoice       = segmentVendorInvoiceCode ? segmentVendorInvoiceCode : defaultVendorCode;
                            break;

                        case TMSRateType::Accessorial:
                            responsible         = TMSResponsibleForPayment::Company;
                            vendor              = defaultVendorCode;
                            vendorInvoice       = defaultVendorCode;
                            break;

                        default:
                            responsible         = TMSResponsibleForPayment::Company;
                            vendor              = defaultVendorCode;
                            vendorInvoice       = defaultVendorCode;
                            break;
                    }

                    rateDetail.ResponsibleForPayment     = responsible;
                    rateDetail.VendorCode                = vendor;
                    rateDetail.VendorInvoiceCode         = vendorInvoice;
                    rateDetail.insert();

                    ratesNode    = ratesList.nextNode();
                }

                this.readShippingEntity(_xmlNode, segmentTable.TableId, segmentTable.RecId);

                this.readRatingErrors(rateNode, segmentTable.TableId, segmentTable.RecId);

                if (transitNode)
                {
                    this.readTransitError(transitNode, segmentTable.TableId, segmentTable.RecId);
                }

                this.readRatingConstraints(rateNode, segmentTable.TableId, segmentTable.RecId);
                this.readRatingZoneMasters(rateNode, segmentTable.TableId, segmentTable.RecId);

                rateNode = rateList.nextNode();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingConstraint</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rating constraint from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing constraint information.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the rated entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the rated entity.
	/// </param>
    public void readRatingConstraint(XmlNode _xmlNode, TableId _tableId, RefRecId _recId)
    {
        TMSRateDetails          rateDetails;
        TMSAction               action;
        TMSId                   constraintCode;
        TMSName                 name;
        str                     constraintType;
        TMSRouteSegmentTable    segmentTable;
        TMSRouteTable           routeTable;

        constraintType  = this.returnNamedNode(_xmlNode, #constraintType);
        constraintCode  = this.returnNamedNode(_xmlNode, #code);
        name            = this.returnNamedNode(_xmlNode, #name );
        action          = any2int(this.returnNamedNode(_xmlNode, #action));

        rateDetails.RefTableId   = _tableId;
        rateDetails.RefRecId     = _recId;
        rateDetails.Id           = constraintCode;
        rateDetails.RateType     = TMSRateType::Constraint;
        rateDetails.RateNote     = strFmt('%1 (%2) - %3', action, constraintType, constraintCode);
        rateDetails.insert();

        this.addConstraintToRate(_tableId, _recId, action);

        if (_tableId == tableNum(TMSRouteSegmentTable))
        {
            segmentTable = TMSRouteSegmentTable::find(_recId, true);
            segmentTable.HasErrors = true;
            segmentTable.update();

            routeTable = TMSRouteTable::find(segmentTable.RouteRecId, true);
            routeTable.HasErrors = true;
            routeTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingConstraints</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rating constraints from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing rating constraints.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the rated entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the rated entity.
	/// </param>
    public void readRatingConstraints(XmlNode _xmlNode, TableId _tableId, RefRecId _recId)
    {
        XmlNodeList             constraintsList;
        XmlNode                 constraintsNode;
        XmlNodeList             constraintList;
        XmlNode                 constraintNode;

        constraintsList    = _xmlNode.selectNodes(#constraints);
        constraintsNode    = constraintsList.nextNode();

        if (constraintsNode)
        {
            constraintList      = constraintsNode.selectNodes(#constraint);
            constraintNode     = constraintList.nextNode();

            while (constraintNode)
            {
                this.readRatingConstraint(constraintNode, _tableId, _recId);
                constraintNode = constraintList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingEntities</Name>
				<Source><![CDATA[
    /// <summary>
	/// Read the response rating entities node in the xml
	/// </summary>
	/// <param name="_xmlNode">
	/// XML Node to be processed
	/// </param>
	/// <param name="_rateType">
	/// Rate Type to be passed
	/// </param>
	/// <param name="_tableId">
	/// The origin record table reference
	/// </param>
	/// <param name="_recId">
	/// The origin record reference
	/// </param>
	/// <param name="_rateId">
	/// The rate id to be passed to the rate node
	/// </param>
    public void readRatingEntities(XmlNode _xmlNode, TMSRateType _rateType = TMSRateType::Rate, TableId _tableId = 0, RecId _recId = 0, TMSId _rateId = '')
    {
        XmlNodeList     ratingList;
        XmlNode         ratingNode;
        XmlNodeList     rateList;
        XmlNode         rateNode;

        ratingList  = _xmlNode.selectNodes(#ratings);
        ratingNode  = ratingList.nextNode();

        if (ratingNode)
        {
            rateList    = ratingNode.selectNodes(#rating);
            rateNode    = rateList.nextNode();

            while (rateNode)
            {
                this.readRatingEntity(rateNode, _rateType, _tableId, _recId, _rateId);
                rateNode      = rateList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingEntity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Read the response rating entity node in the xml
    /// </summary>
    /// <param name="_xmlNode">
    ///     XML Node to be processed
    /// </param>
    /// <param name="_rateType">
    ///     Rate Type to be passed
    /// </param>
    /// <param name="_tableId">
    ///     The origin record table reference
    /// </param>
    /// <param name="_recId">
    ///     The origin record reference
    /// </param>
    /// <param name="_rateId">
    ///     The rate id to be passed to the rate node
    /// </param>
    public void readRatingEntity(
        XmlNode     _xmlNode,
        TMSRateType _rateType,
        TableId     _tableId = 0,
        RecId       _recId = 0,
        TMSId       _rateId = '')
    {
        TMSCarrierCode          rateCarrier;
        TMSCarrierServiceCode   rateServiceCode;
        TMSRate                 totalRate;
        XmlNodeList             rateList;
        XmlNode                 rateNode;
        TMSRouteRateDetail      routeRateDetail;
        TMSRouteSegment         confSegment;
        WHSProNum               proNum;
        TMSShipperRate          shipperRate;
        TMSCustomerRate         customerRate;

        rateCarrier     = this.returnNamedNode(_xmlNode, #carrier);
        rateServiceCode = this.returnNamedNode(_xmlNode, #carrierService);
        totalRate       = any2real(this.returnNamedNode(_xmlNode, #totalRate));
        shipperRate     = any2real(this.returnNamedNode(_xmlNode, #shipperRate));
        customerRate    = any2real(this.returnNamedNode(_xmlNode, #customerRate));
        status          = this.returnNamedNode(_xmlNode, #status);
        proNum          = this.returnNamedNode(_xmlNode, #proNumber);

        rateList        = _xmlNode.selectNodes(#rate);
        rateNode        = rateList.nextNode();

        this.readTransitTime(_xmlNode);

        if (communicationType == TMSCommunicationType::Confirmation)
        {
            if (proNum)
            {
                this.readProNumber(proNum);
            }

            if (status != #notSupported)
            {
                ttsbegin;

                delete_from routeRateDetail
                    where routeRateDetail.RouteCode == routeCode     &&
                          routeRateDetail.Sequence  == routeSequence;

                confSegment                 = TMSRouteSegment::find(routeCode, routeSequence, true);

                confSegment.RateCur         = totalRate;
                confSegment.ShipperRate     = this.hasShipperRate(_xmlNode) ? shipperRate : totalRate;

                if (this.hasOverrideRate())
                {
                    confSegment.CustomerRate = overrideRate;
                }
                else
                {
                    confSegment.CustomerRate = this.hasCustomerRate(_xmlNode) ? customerRate : totalRate;
                }

                if (!confSegment)
                {
                    confSegment.RouteCode = routeCode;
                    confSegment.Sequence = routeSequence;
                    confSegment.insert();
                }
                else
                {
                    confSegment.update();
                }

                ttscommit;
            }
        }

        boolean updateTimeOnSegment = true;

        while (rateNode)
        {
            this.readRatingEntityRate(rateNode, _rateType, _tableId, _recId, _rateId, updateTimeOnSegment);

            // The transit time should only be calculated on segment in the first iteration.
            // Additional accessorial charges have no effect on increasing the transit time.
            updateTimeOnSegment = false;

            rateNode = rateList.nextNode();
        }

        this.readRatingErrors(_xmlNode, _tableId, _recId);
        this.readRatingConstraints(_xmlNode, _tableId, _recId);
        this.readRatingZoneMasters(_xmlNode, _tableId, _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingEntityRate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reads the rate nodes that are embedded in the rating entity in the response xml.
    /// </summary>
    /// <param name="_xmlNode">
    ///     XML Node to be processed.
    /// </param>
    /// <param name="_rateType">
    ///     Rate Type to be passed.
    /// </param>
    /// <param name="_tableId">
    ///     The origin record table reference.
    /// </param>
    /// <param name="_recId">
    ///     The origin record reference.
    /// </param>
    /// <param name="_recId">
    ///     The origin record reference.
    /// </param>
    /// <param name="_updateSegmentTime">
    ///     A Boolean parameter determining whether the transit time and dates on <c>TMSRouteSegmentTable</c> should be not updated; optional.
    /// </param>
    public void readRatingEntityRate(
        XmlNode     _xmlNode,
        TMSRateType _rateType,
        TableId     _tableId = 0,
        RecId       _recId = 0,
        TMSId       _rateId = '',
        boolean     _updateSegmentTime = true)
    {
        TMSRate                     totalRate;
        TMSRouteTable               routeTable;
        TMSRouteSegmentTable        segmentTable;
        TMSRateUnit                 unit;
        TMSRateUnitRate             unitRate;
        XmlNode                     transitNode;
        MarkupCode                  chargeCode;
        TMSRateType                 rateType;
        TMSId                       rateId;
        TMSResponsibleForPayment    responsible;
        TMSVendorCode               vendor;
        TMSVendorInvoiceCode        vendorInvoice;
        TMSCarrierCode              defaultCarrierCode;
        NoYesId                     user;
        TMSBillingGroupId           billingGroupId;
        TMSExternalCode             externalCode;
        CurrencyCode                rateCurrency;
        TMSShipperRate              shipperRate;
        TMSCustomerRate             customerRate;
        TMSRate                     segmentTotalRate;
        TMSShipperRate              segmentShipperRate;
        TMSCustomerRate             segmentCustomerRate;

        rateType        = str2int(this.returnNamedNode(_xmlNode, #rateType));
        totalRate       = any2real(this.returnNamedNode(_xmlNode, #totalRate));
        unit            = any2real(this.returnNamedNode(_xmlNode, #units));
        unitRate        = any2real(this.returnNamedNode(_xmlNode, #unitRate));
        chargeCode      = this.returnNamedNode(_xmlNode, #chargeCode);
        rateId          = this.returnNamedNode(_xmlNode, #code);
        user            = this.returnNamedNodeBooleanToNoYes(_xmlNode, #user);
        billingGroupId  = this.returnNamedNode(_xmlNode, #billingGroup);
        externalCode    = this.returnNamedNode(_xmlNode, #externalCode);
        rateCurrency    = this.returnNamedNode(_xmlNode, #currencyCode);
        shipperRate     = any2real(this.returnNamedNode(_xmlNode, #shipperRate));
        customerRate    = this.hasOverrideRate() ? overrideRate : any2real(this.returnNamedNode(_xmlNode, #customerRate));

        shipDateTime    = shipDateTime == utcDateTimeNull() ? DateTimeUtil::utcNow() : shipDateTime;

        ttsbegin;

        segmentTable = TMSRouteSegmentTable::find(_recId, true);

        // During a ship transaction the _recId may not be valid.
        if (!segmentTable)
        {
            segmentTable = TMSRouteSegmentTable::findByRouteSequence(routeId, routeSequence, true);
        }

        defaultCarrierCode  = segmentTable.CarrierCode ? segmentTable.CarrierCode : carrierCode;

        [responsible,
         vendor,
         vendorInvoice] = this.returnResponsibleAndVendorCode(rateType, rateId);

        if (communicationType != TMSCommunicationType::Confirmation && communicationType != TMSCommunicationType::Apportionment && !segmentRate)
        {
            if (segmentTable.CurrencyCode == '' || segmentTable.CurrencyCode == rateCurrency)
            {
                segmentTable.CurrencyCode   = rateCurrency;
                segmentTotalRate            = totalRate;
                segmentShipperRate          = this.hasShipperRate(_xmlNode)? shipperRate : totalRate;
                segmentCustomerRate         = this.hasCustomerRate(_xmlNode) ? customerRate : totalRate;
            }
            else
            {
                segmentTotalRate           = this.convertCurrency(rateCurrency, segmentTable.CurrencyCode, totalRate);
                segmentShipperRate         = this.hasShipperRate(_xmlNode) ? this.convertCurrency(rateCurrency,
                                                                                              segmentTable.CurrencyCode,
                                                                                              shipperRate) : segmentTotalRate;
                segmentCustomerRate        = this.hasCustomerRate(_xmlNode) ? this.convertCurrency(rateCurrency,
                                                                                               segmentTable.CurrencyCode,
                                                                                               customerRate) : segmentTotalRate;
            }

            segmentTable.TotalRate              += segmentTotalRate;
            segmentTable.ShipperRate            += segmentShipperRate;
            if (this.hasOverrideRate())
            {
                segmentTable.CustomerRate = overrideRate;
            }
            else
            {
                segmentTable.CustomerRate += segmentCustomerRate;
            }

            routeTable = TMSRouteTable::findByRouteIdRefRecord(segmentTable.RouteId, commonRec.TableId, commonRec.RecId, true);

            if (!routeTable)
            {
                routeTable.RouteId = segmentTable.RouteId;
                routeTable.RefTableId = commonRec.TableId;
                routeTable.RefRecId = commonRec.RecId;
            }

            if (_updateSegmentTime)
            {
                int segmentOffsetForShipDate = real2int(roundUp(routeTable.transitTime(), 1));
                calcDlvDateTime = DateTimeUtil::addDays(shipDateTime, real2int(roundUp(transitDays, 1)) + segmentOffsetForShipDate);
                segmentTable.TransitTime = transitDays;
                segmentTable.ShipUTCDateTime = DateTimeUtil::addDays(shipDateTime, segmentOffsetForShipDate);
                segmentTable.DeliveryUTCDateTime = calcDlvDateTime;
            }

            segmentTable.update();

            if (!routeTable.CurrencyCode)
            {
                routeTable.CurrencyCode = CompanyInfoHelper::standardCurrency();
            }

            routeTable = this.writeRouteTable(routeTable, segmentCustomerRate, segmentTotalRate, segmentShipperRate, segmentTable.CurrencyCode);

            if (!segmentRate)
            {
                TMSRateDetails rateDetails;

                rateDetails.RefTableId               = segmentTable.TableId;
                rateDetails.RefRecId                 = segmentTable.RecId;
                rateDetails.Id                       = rateId;
                rateDetails.RateType                 = rateType;
                rateDetails.RateCur                  = totalRate;
                rateDetails.RateUnit                 = unit;
                rateDetails.RateUnitRate             = unitRate;
                rateDetails.CurrencyCode             = rateCurrency;
                rateDetails.MarkupCode               = chargeCode;
                rateDetails.ResponsibleForPayment    = responsible;
                rateDetails.VendorCode               = vendor;
                rateDetails.VendorInvoiceCode        = vendorInvoice;
                rateDetails.ShipperRate              = this.hasShipperRate(_xmlNode) ? shipperRate : totalRate;
                rateDetails.CustomerRate             = this.hasCustomerRate(_xmlNode)? customerRate : totalRate;

                rateDetails.insert();
            }

            if (_tableId && _recId)
            {
                this.readRatingErrors(_xmlNode, _tableId, _recId);
                if (transitNode)
                {
                    this.readTransitError(transitNode, _tableId, _recId);
                }
                this.readRatingConstraints(_xmlNode, _tableId, _recId);
                this.readRatingZoneMasters(_xmlNode, _tableId, _recId);
            }
        }
        else
        {
            if (communicationType != TMSCommunicationType::Confirmation && communicationType != TMSCommunicationType::Apportionment && !segmentRate)
            {
                segmentLoadLine.RateId       = _rateId;
                segmentLoadLine.RateType     = _rateType;
                segmentLoadLine.RateCur      = totalRate;
                segmentLoadLine.CurrencyCode = currencyCode;
                segmentLoadLine.MarkupCode   = chargeCode;
                segmentLoadLine.insert();
            }

            this.readConfirmationOther(_rateId, _rateType, _xmlNode, totalRate, unit, unitRate, chargeCode,
                                        rateType, rateId, responsible, vendor, vendorInvoice, user,
                                        billingGroupId, externalCode, rateCurrency, shipperRate, customerRate);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingError</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rating error from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing rating error.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the rated entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the rated entity.
	/// </param>
    public void readRatingError(XmlNode _xmlNode, TableId _tableId, RecId _recId)
    {
        TMSRateDetails          rateDetails;
        TMSApptNote             errorNote;
        TMSId                   errorId;
        TMSRouteSegmentTable    segmentTable;
        TMSRouteTable           routeTable;

        if (!segmentRate)
        {
            errorNote   = this.returnNamedNode(_xmlNode, #errorDesc);
            errorId     = this.returnNamedNode(_xmlNode, #errorCode);

            if (communicationType == TMSCommunicationType::Apportionment ||
                communicationType == TMSCommunicationType::Confirmation  ||
                communicationType == TMSCommunicationType::Ship)
            {
                throw error(strFmt("@TRX2709", errorId, errorNote));
            }

            errors += errorNote;

            rateDetails.RefTableId  = _tableId;
            rateDetails.RefRecId    = _recId;
            rateDetails.RateType    = TMSRateType::Error;
            rateDetails.Id          = errorId;
            rateDetails.RateNote    = errorNote;
            rateDetails.insert();

            ttsbegin;

            if (_tableId == tableNum(TMSRouteSegmentTable))
            {
                segmentTable = TMSRouteSegmentTable::find(_recId, true);
                segmentTable.HasErrors = true;
                segmentTable.update();

                routeTable = TMSRouteTable::find(segmentTable.RouteRecId, true);
                routeTable.HasErrors = true;
                routeTable.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingErrors</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rating errors from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing rating errors.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the rated entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the rated entity.
	/// </param>
    public void readRatingErrors(XmlNode _xmlNode, TableId _tableId, RefRecId _recId)
    {
        XmlNodeList errorsList;
        XmlNode     errorsNode;
        XmlNodeList errorList;
        XmlNode     errorNode;

        errorsList = _xmlNode.selectNodes(#errors);
        errorsNode = errorsList.nextNode();

        if (errorsNode)
        {
            errorList = errorsNode.selectNodes(#error);
            errorNode = errorList.nextNode();

            while (errorNode)
            {
                this.readRatingError(errorNode, _tableId, _recId);
                errorNode = errorList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingZoneMaster</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rate zone master from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing zone master information.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the rated entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the rated entity.
	/// </param>
    public void readRatingZoneMaster(XmlNode _xmlNode, TableId _tableId = 0, RecId _recId = 0)
    {
        TMSZoneMasterCode       zoneMaster;
        TMSZone                 zone;

        zoneMaster      = this.returnNamedNode(_xmlNode, #zoneMasterCode);
        zone            = this.returnNamedNode(_xmlNode, #zone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readRatingZoneMasters</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads rate zone masters in the response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing zone masters information.
	/// </param>
	/// <param name="_tableId">
	/// Table id of the rated entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the rated entity.
	/// </param>
    public void readRatingZoneMasters(XmlNode _xmlNode, TableId _tableId = 0, RecId _recId = 0)
    {
        XmlNodeList             zonesList;
        XmlNode                 zonesNode;
        XmlNodeList             zoneList;
        XmlNode                 zoneNode;

        zonesList    = _xmlNode.selectNodes(#zoneMasters);
        zonesNode    = zonesList.nextNode();

        if (zonesNode)
        {
            zoneList     = zonesNode.selectNodes(#zoneMaster);
            zoneNode     = zoneList.nextNode();

            while (zoneNode)
            {
                this.readRatingZoneMaster(zoneNode, _tableId, _recId);
                zoneNode = zoneList.nextNode();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipContainer</Name>
				<Source><![CDATA[
    /// <summary>
	/// Reads ship container from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML document containing information.
	/// </param>
    public void readShipContainer(XmlNode _xmlNode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipLine</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes line typed shipment node of the response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
	/// <param name="_tableId">
	/// Table id.
	/// </param>
	/// <param name="_recId">
	/// Record id.
	/// </param>
    public void readShipLine(XmlNode _xmlNode, RefTableId _tableId, RefRecId _recId)
    {
        TMSRateRouteLine    line;

        line.RefTableId             = _tableId;
        line.RefRecId               = _recId;
        line.ItemId                 = this.returnNamedNode(_xmlNode, #itemId);
        line.InventTransId          = this.returnNamedNode(_xmlNode, #InventTransId);
        line.LoadLineRecId          = any2int64(this.returnNamedNode(_xmlNode, #RecId));
        line.Weight                 = any2real(this.returnNamedNode(_xmlNode, #weight));
        line.Volume                 = any2real(this.returnNamedNode(_xmlNode, #volume));
        line.HarmonizedCode         = this.returnNamedNode(_xmlNode, #harmonize);
        line.ltlClassCode           = this.returnNamedNode(_xmlNode, #class);
        line.stccCode               = this.returnNamedNode(_xmlNode, #stcc);

        if (communicationType != TMSCommunicationType::Confirmation)
        {
            line.insert();
        }
        else
        {
            segmentLoadLine.LoadLineRecId       = line.LoadLineRecId;
            segmentLoadLine.InventTransId       = line.InventTransId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipPayment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes payment information of shipment node from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
	/// <returns>
	/// Container containing payment information.
	/// </returns>
    public container readShipPayment(XmlNode _xmlNode)
    {
        TMSResponsibleForPayment        responsible;
        TMSVendorCode                   vendor;
        TMSVendorInvoiceCode            invoice;

        responsible = any2Enum(symbol2Enum(enumNum(TMSResponsibleForPayment), this.returnNamedNode(_xmlNode, #responsible)));
        vendor      = this.returnNamedNode(_xmlNode, #vendorCode);
        invoice     = this.returnNamedNode(_xmlNode, #vendorInvoiceCode);

        return [responsible, vendor, invoice];
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShippingEntity</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes shipment nodes from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node containing shipment nodes.
	/// </param>
	/// <param name="_tableId">
	/// Table id.
	/// </param>
	/// <param name="_recId">
	/// Record id.
	/// </param>
	/// <param name="_segmentNode">
	/// XML node containing segment information.
	/// </param>
    public void readShippingEntity(XmlNode _xmlNode, RefTableId _tableId = 0, RefRecId _recId = 0, XmlNode _segmentNode = null)
    {
        XmlNodeList     shipEntList;
        XmlNode         shipNode;

        shipEntList = _xmlNode.selectNodes(#shipping);
        shipNode    = shipEntList.nextNode();

        while (shipNode)
        {
            switch (this.returnNamedNode(shipNode, #shippingEntityType))
            {
                case #typeShipment:
                    if (communicationType == TMSCommunicationType::RateShop)
                    {
                        this.readRateShipment(shipNode);
                    }
                    else
                    {
                        this.readShipShipment(shipNode, _segmentNode);
                    }
                    break;

                case #typeLine:
                    this.readShipLine(shipNode, _tableId, _recId);
                    break;

                case #typeContainer:
                    this.readShipContainer(shipNode);
                    break;

                case #typeRoute:
                    this.readShipRoute(shipNode);
                    break;

                case #typeSegment:
                    this.readShipSegment(shipNode);
                    break;

                default:
                    exceptionTextFallThrough();
            }

            shipNode    = shipEntList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipRoute</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes route information of shipment node from response xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node containing route information.
	/// </param>
    public void readShipRoute(XmlNode _xmlNode)
    {
        TMSRoute                route;
        TMSRoute                scheduledRouteCheck;
        TMSRouteTable           routeTable;
        TMSName                 routeGuide;
        TMSName                 routePlan;
        boolean                 destinationOnSegment = false;

        // Route ID carries the value of Route guide record ID
        routeId                 = this.returnNamedNode(_xmlNode, #routeGuideRecId);
        routeConfigCode         = this.returnNamedNode(_xmlNode, #routeConfigCode);
        routePlan               = this.returnNamedNode(_xmlNode, #routePlanName);
        routeGuide              = this.returnNamedNode(_xmlNode, #routeGuideName);

        if (communicationType != TMSCommunicationType::Confirmation)
        {
            if (communicationType != TMSCommunicationType::RateShop && communicationType != TMSCommunicationType::Rate)
            {
                // Only validate for scheduled routes
                if (isScheduledRoute == NoYes::Yes)
                {
                    // Retrieve route record matching a particular route plan name and guide
                    select firstOnly RouteCode from scheduledRouteCheck
                    where scheduledRouteCheck.RoutePlanName   == routePlan
                    &&    scheduledRouteCheck.RouteConfigCode == routeConfigCode
                    &&    scheduledRouteCheck.RouteSchedule != 0;

                    // Make sure destination address is a part of the route
                    destinationOnSegment = this.checkDestinationAddressOnRoute(scheduledRouteCheck);
                }

                if (!routeId)
                {
                    routeId = int2str(str2int((select firstonly tmsRouteTable order by RouteId).RouteId) - 1);
                }

                if (parentRecId != 0)
                {
                    commonRec = this.findParent();
                }

                // Skip over records that do not match scheduledRoute parameter
                // For records that involve a scheduled route, make sure the destination is on a route segment
                if (!isScheduledRoute || destinationOnSegment == isScheduledRoute)
                {
                    routeTable.RefTableId           = commonRec.TableId;
                    routeTable.RefRecId             = commonRec.RecId;
                    routeTable.initFromTMSRouteGuideId(routeId);
                    routeTable.RouteGuideName       = routeGuide;
                    routeTable.RoutePlanName        = routePlan;
                    routeTable.RouteConfigCode      = routeConfigCode;
                    routeTable.IsScheduledRoute       = isScheduledRoute;

                    routeTable.insert();
                    routeRecId = routeTable.RecId;
                }
            }
        }
        else
        {
            if (createRoute)
            {
                route.setRouteCode();
                route.InventSiteId       = inventSiteId;
                route.InventLocationId   = inventLocationId;
                route.RouteConfigCode    = routeConfigCode;
                route.RoutePlanName      = routePlan;
                route.insert();

                routeCode = route.RouteCode;
            }

            segmentLoadLine.RouteCode    = routeCode;
            segmentLoadLine.Id           = id;
        }

        this.readShippingEntity(_xmlNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipSegment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes segment information of shipment node from xml document.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node containing segment information.
	/// </param>
    public void readShipSegment(XmlNode _xmlNode)
    {
        XmlNodeList                 pickupList;
        XmlNodeList                 dropoffList;
        TMSRouteSegmentTable        segmentTable;
        TMSAddressPhone             pickupAdd;
        TMSAddressPhone             dropOffAdd;
        TMSSequence                 sequence;
        TMSRouteAccessorialLevel    level = TMSRouteAccessorialLevel::Segment;

        segmentCarrier      = this.returnNamedNode(_xmlNode, #carrier);
        segmentService      = this.returnNamedNode(_xmlNode, #carrierService);
        segmentGroup        = this.returnNamedNode(_xmlNode, #carrierGroup);
        segmentMode         = this.returnNamedNode(_xmlNode, #modeCode);
        segmentFreight      = this.returnNamedNode(_xmlNode, #freightTerm);
        sequence            = str2int(this.returnNamedNode(_xmlNode, #sequence));

        if (communicationType == TMSCommunicationType::Confirmation)
        {
            segmentLoadLine.Sequence                 = sequence;
            segmentLoadLine.Generated                = NoYes::Yes;
            this.deleteRateRouteDetails(segmentLoadLine.RouteCode, sequence);
        }

        [segmentResponsible,
        segmentVendorCode,
        segmentVendorInvoiceCode]   = this.readShipPayment(_xmlNode);

        pickupList                  = _xmlNode.selectNodes(#pickUp);
        segmentPickup               = pickupList.nextNode();

        [originResponsible,
        originVendorCode,
        originVendorInvoiceCode]    = this.readShipPayment(segmentPickup);

        dropoffList                 = _xmlNode.selectNodes(#dropOff);
        segmentDropoff              = dropoffList.nextNode();

        [destResponsible,
        destVendorCode,
        destVendorInvoiceCode]      = this.readShipPayment(segmentDropoff);

        miles                       = 0;
        pickupAdd                   = this.readAddress(segmentPickup, level, segmentTable.TableId, segmentTable.RecId);
        dropOffAdd                  = this.readAddress(segmentDropoff, level, segmentTable.TableId, segmentTable.RecId);
        segmentOriginHub            = this.returnNamedNode(segmentPickup, #routeHub);
        segmentDestHub              = this.returnNamedNode(segmentDropoff, #routeHub);

        segmentFromAddress          = pickupAdd;
        segmentToAddress            = dropOffAdd;

        this.readShippingEntity(_xmlNode, segmentTable.TableId, segmentTable.RecId, _xmlNode);

        overrideRate = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes shipment information of shipment node from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
	/// <param name="_segmentNode">
	/// Segment node to be processed.
	/// </param>
    public abstract void readShipShipment(XmlNode _xmlNode, XmlNode _segmentNode = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>readTransitError</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes transit errors from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
	/// <param name="_tableId">
	/// Table id.
	/// </param>
	/// <param name="_recId">
	/// Record id.
	/// </param>
    public void readTransitError(XmlNode _xmlNode, TableId _tableId, RecId _recId)
    {
        this.readRatingErrors(_xmlNode, _tableId, _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>readTransitTime</Name>
				<Source><![CDATA[
    /// <summary>
	/// Processes transit time from response xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be processed.
	/// </param>
	/// <returns>
	/// XML node containing transit time information.
	/// </returns>
    public XmlNode readTransitTime(XmlNode _xmlNode)
    {
        XmlNodeList         transitList;
        XmlNode             transitNode;

        transitList = _xmlNode.selectNodes(#transitTime);
        transitNode = transitList.nextNode();

        transitDays = transitNode ? any2real(this.returnNamedNode(transitNode, #transitDays)) : 0;

        return transitNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXML</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reads and processes TMS xml.
    /// </summary>
    /// <param name="_xml">
    ///     The xml to read.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     There was an error processing the xml.
    /// </exception>
    public void readXML(XML _xml)
    {
        XmlParseError       xmlError;
        XmlNode             transactionNode;
        XmlNodeList         rateList;
        XmlNode             requestNode;

        responseDoc = XmlDocument::newXml(_xml);
        xmlError    = responseDoc.parseError();

        try
        {
            ttsbegin;

            if (xmlError && xmlError.errorCode() != 0)
            {
                xmlError.reason();
            }

            transactionNode     = responseDoc.documentElement();
            communicationType   = symbol2Enum(enumNum(TMSCommunicationType), this.returnNamedNode(transactionNode, #communicationType));

            carrierCode         = this.returnNamedNode(transactionNode, #carrier);
            carrierServiceCode  = this.returnNamedNode(transactionNode, #carrierService);
            carrierGroupCode    = this.returnNamedNode(transactionNode, #carrierGroup);

            rateList    = transactionNode.selectNodes(#request);
            requestNode = rateList.nextNode();

            while (requestNode)
            {
                if (communicationType != TMSCommunicationType::Apportionment)
                {
                    this.readShippingEntity(requestNode);
                }
                else
                {
                    this.readAppShippingEntity(requestNode);
                }

                requestNode = rateList.nextNode();
            }

            ttscommit;

            this.updateRouteTable();

            if (TMSSustainabilityIntegrationFeature::instance().isEnabled())
            {
                TMSParameters tmsParameters = TMSParameters::find();
                if (tmsParameters.SustainabilityEngineEnabled)
                {
                    TMSSustainabilityProcessor::updateEmissionWithRefId([commonRec.RecId, commonRec.TableId], weight);
                }
            }

            if (communicationType == TMSCommunicationType::Confirmation)
            {
                this.updateRoute();
                this.runApportionment(_xml);
            }
        }
        catch
        {
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnNamedNode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Returns text of a given node in xml node.
	/// </summary>
	/// <param name="_node">
	/// XML node to be searched in.
	/// </param>
	/// <param name="_id">
	/// Id of the given node.
	/// </param>
	/// <returns>
	/// Text of the given node.
	/// </returns>
    public str returnNamedNode(XmlNode _node, str _id)
    {
        XmlNode         xmlNode;
        XmlNodeList     xmlList;
        str             item;

        xmlList     = _node.selectNodes(_id);
        xmlNode     = xmlList.nextNode();

        if (xmlNode)
        {
            item = xmlNode.text();
        }

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnNamedNodeBooleanToNoYes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the text of a given node in xml node which represents a boolean, converted to a NoYes enum.
    /// </summary>
    /// <param name="_node">
    /// XML node to be searched in.
    /// </param>
    /// <param name="_id">
    /// Id of the given node.
    /// </param>
    /// <returns>
    /// Text of the given node converted to a NoYes enum
    /// </returns>
    public NoYes returnNamedNodeBooleanToNoYes(XmlNode _node, str _id)
    {
        System.Boolean b = true;
        return str2Capital(this.returnNamedNode(_node, _id)) == str2Capital(b.ToString(System.Globalization.CultureInfo::InvariantCulture)) ? NoYes::Yes : NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnResponsibleAndVendorCode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds who is responsible for payment for the rate.
	/// </summary>
	/// <param name="_rateType">
	/// Type of the rate.
	/// </param>
	/// <param name="_rateId">
	/// Id of the rate.
	/// </param>
	/// <returns>
	/// Container containing responsible information.
	/// </returns>
    public container returnResponsibleAndVendorCode(TMSRateType _rateType, TMSId _rateId)
    {
        TMSResponsibleForPayment    responsible;
        TMSVendorCode               vendor;
        TMSVendorInvoiceCode        vendorInvoice;

        TMSVendorCode defaultVendorCode   = TMSCarrier::find(carrierCode).VendorCode;
        VendTable carrierVendor = VendTable::find(defaultVendorCode);
        TMSVendorInvoiceCode defaultVendorInvoiceCode = carrierVendor.InvoiceAccount ? carrierVendor.InvoiceAccount : defaultVendorCode;

        switch (_rateType)
        {
            case TMSRateType::Rate:
                responsible         = segmentResponsible;
                vendor              = segmentVendorCode ? segmentVendorCode : defaultVendorCode;
                vendorInvoice       = segmentVendorInvoiceCode ? segmentVendorInvoiceCode : defaultVendorInvoiceCode;
                break;

            case TMSRateType::Hub:
                if (_rateId == segmentDestHub)
                {
                    responsible     = destResponsible;
                    vendor          = destVendorCode ? destVendorCode : defaultVendorCode;
                    vendorInvoice   = destVendorInvoiceCode ? destVendorInvoiceCode : defaultVendorInvoiceCode;
                }
                else if (_rateId == segmentOriginHub)
                {
                    responsible     = originResponsible;
                    vendor          = originVendorCode ? originVendorCode : defaultVendorCode;
                    vendorInvoice   = originVendorInvoiceCode ? originVendorInvoiceCode : defaultVendorInvoiceCode;
                }
                break;

            case TMSRateType::Accessorial:
                responsible         = TMSResponsibleForPayment::Company;
                vendor              = defaultVendorCode;
                vendorInvoice       = defaultVendorInvoiceCode;
                break;

            default:
                responsible         = TMSResponsibleForPayment::Company;
                vendor               = defaultVendorCode;
                vendorInvoice        = defaultVendorInvoiceCode;
                break;
        }

        return [responsible, vendor, vendorInvoice];
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApportionment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Runs apportionment on the rate.
	/// </summary>
	/// <param name="_xml">
	/// XML node containing rate information.
	/// </param>
	/// <exception cref="Exception::Error">
	/// There is an error while running apportionment.
	/// </exception>
    public void runApportionment(XML _xml)
    {
        TMSCommProxy        commProxy  = this.getTMSCommProxy();
        XML                 xml;
        XmlDocument         appDoc;
        XmlNode             transactionNode;
        XmlNodeList         typeList;
        XmlNode             typeNode;
        TMSTransaction      transaction;

        appDoc = XmlDocument::newXml(_xml);

        transactionNode = responseDoc.documentElement();
        typeList = transactionNode.selectNodes(#communicationType);
        typeNode = typeList.nextNode();

        typeNode.text(enum2Symbol(enumNum(TMSCommunicationType), TMSCommunicationType::Apportionment));

        xml = transactionNode.xml();

        xml = commProxy.sendRequest(xml);

        transaction.TransactionTypeCode  = enum2Symbol(enumNum(TMSCommunicationType), TMSCommunicationType::Apportionment);
        transaction.RequestData          = xml;
        transaction.Id                   = id;
        transaction.OrderNum             = this.findLoadOrderNum(id);
        transaction.insert();

        if (!xml)
        {
            xml = TMSTransaction::find(transaction.RecId).ResponseData;
        }

        this.readXML(xml);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTransaction</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a <c>TMSTransaction</c> record containing request data.
	/// </summary>
	/// <returns>
	/// Container containing transaction data.
	/// </returns>
    public container sendTransaction()
    {
        TMSTransaction  transaction;
        XML             xml;

        xml =  this.createXML();

        transaction.TransactionTypeCode  = enum2Symbol(enumNum(TMSCommunicationType), communicationType);
        transaction.RequestData          = xml;
        transaction.Id                   = id;
        transaction.OrderNum             = this.findLoadOrderNum(id);
        transaction.insert();

        return [transaction.RecId, xml];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates route with status and shipped date / time
    /// </summary>
    public void updateRoute()
    {
        TMSRoute        route = TMSRoute::find(routeCode, true);

        ttsbegin;

        route.ShipUTCDateTime = shipDateTime;
        route.RouteStatus = TMSRouteStatus::Confirmed;
        route.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRouteTable</Name>
				<Source><![CDATA[
    private void updateRouteTable()
    {
        TMSRouteTable           routeTable;
        TMSRouteSegmentTable    segmentTable;
        int64                   i;
        CurrencyCode            currency;

        while select forupdate routeTable
            where routeTable.createdBy  == curUserId()
               && routeTable.RefTableId == commonRec.TableId
               && routeTable.RefRecId   == commonRec.RecId
        {
            i = 0;

            while select segmentTable
                group by segmentTable.CurrencyCode
                where segmentTable.RefTableId   == routeTable.RefTableId &&
                      segmentTable.RefRecId     == routeTable.RefRecId &&
                      segmentTable.RouteId      == routeTable.RouteId
            {
                currency = segmentTable.CurrencyCode;
                i++;
            }

            if (i == 1)
            {
                // if there is no route currency code
                // and there is only one segment in the
                // route, set the segment currency as
                // the route currency
                if (!RouteTable.CurrencyCode)
                {
                    ttsbegin;

                    routeTable.CurrencyCode = currency;
                    routeTable.update();

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAccountInfo</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes account info to request node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be sent.
	/// </param>
    public void writeAccountInfo(XmlNode _xmlNode)
    {
        XmlNode         accountNode;

        accountNode = this.writeXMLNode(_xmlNode, #accounts);
        this.writeXMLElement(accountNode, #customerCode, custAccount);
        this.writeXMLElement(accountNode, #customerGroupId, CustTable::find(custAccount).CustGroup);
        this.writeXMLElement(accountNode, #customerInvoiceCode, custInvoiceAccount);
        this.writeXMLElement(accountNode, #vendorCode, vendAccount);
        this.writeXMLElement(accountNode, #vendorGroupId, VendTable::find(vendAccount).VendGroup);
        this.writeXMLElement(accountNode, #vendorInvoiceCode, vendInvoiceAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes address nodes on XML
    /// </summary>
    /// <param name="_xmlNode">
    /// XML node
    /// </param>
    /// <param name="_address">
    /// Object that stores address information
    /// </param>
    public void writeAddress(XmlNode _xmlNode, TMSAddressPhone _address)
    {
        if (_address.parmName())
        {
            this.writeXMLElement(_xmlNode, #name, _address.parmName());
        }

        this.writeXMLElement(_xmlNode, #address, _address.parmStreet());
        this.writeXMLElement(_xmlNode, #city, _address.parmCity());
        this.writeXMLElement(_xmlNode, #state, _address.parmState());
        this.writeXMLElement(_xmlNode, #postal, _address.parmPostalCode());
        this.writeXMLElement(_xmlNode, #countryRegion, _address.parmCountryRegion());
        this.writeXMLElement(_xmlNode, #county, _address.parmCounty());
        this.writeXMLElement(_xmlNode, #countryRegionISOCode, LogisticsAddressCountryRegion::find(_address.parmCountryRegion()).isOcode);
        this.writeXMLElement(_xmlNode, #phone, _address.parmPhone());
        this.writeXMLElement(_xmlNode, #residential, Global::enum2Symbol(enumNum(ShipCarrierResidentialDest), _address.parmResidential()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeCarrierInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates an xml node with carrier and other pertinent information.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The xml node to be expanded.
    /// </param>
    public void writeCarrierInfo(XmlNode _xmlNode)
    {
        this.writeXMLElement(_xmlNode, #FreightTerm, freightTerm);
        this.writeXMLElement(_xmlNode, #carrier, carrierCode);
        this.writeXMLElement(_xmlNode, #carrierService, carrierServiceCode);
        this.writeXMLElement(_xmlNode, #carrierGroup, carrierGroupCode);
        this.writeXMLElement(_xmlNode, #inventSiteId, inventSiteId);
        this.writeXMLElement(_xmlNode, #inventLocationId, inventLocationId);
        this.writeXMLElement(_xmlNode, #modeCode, mode);
        this.writeXMLElement(_xmlNode, #baseCurrency, currencyCode);

        this.writeDimension(_xmlNode, orderDim);

        if (vendAccount)
        {
            this.writeXMLElement(_xmlNode, #moduleType, Global::enum2Symbol(enumNum(MarkupModuleType), enum2int(MarkupModuleType::Vend)));
        }
        else if (custAccount) 
        {
            this.writeXMLElement(_xmlNode, #moduleType, Global::enum2Symbol(enumNum(MarkupModuleType), enum2int(MarkupModuleType::Cust)));
        }
        else
        {
            this.writeXMLElement(_xmlNode, #moduleType, Global::enum2Symbol(enumNum(MarkupModuleType), enum2int(MarkupModuleType::Invent)));
        }

        this.writeXMLElement(_xmlNode, TMSProcessXmlConstants::CarrierCustomerAccountNumber, this.parmCarrierCustomerAccountNumber());

        if (isShippingLabelRequestTypeEnabled)
        {
            this.writeXMLElement(_xmlNode, TMSProcessXmlConstants::ShippingLabelRequestType, enum2Symbol(enumNum(TMSShippingLabelRequestType), enum2int(this.parmShippingLabelRequestType())));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readSegmentContainerLabelFromXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the container shipping label details from the xml
    /// </summary>
    /// <param name = "_segmentContainer">An instance of <c>TMSRouteSegmentContainer</c> record to be updated with the labe details</param>
    /// <param name = "_rateNode">Xml node received from th external engines</param>
    final protected void readSegmentContainerLabelFromXml(TMSRouteSegmentContainer _segmentContainer, XmlNode _rateNode)
    {        
        _segmentContainer.ContainerShippingLabelType = symbol2Enum(enumNum(TMSContainerShippingLabelType), this.returnNamedNode(_rateNode, TMSProcessXmlConstants::ContainerShippingLabelType));
        if (isShippingLabelRequestTypeEnabled)
        {
            _segmentContainer.ContainerReturnShippingLabelType = symbol2Enum(enumNum(TMSContainerShippingLabelType), this.returnNamedNode(_rateNode, TMSProcessXmlConstants::ContainerReturnShippingLabelType));
        }
       
        _segmentContainer.ContainerShippingLabel = this.returnNamedNode(_rateNode, TMSProcessXmlConstants::ContainerShippingLabel);

        if (isShippingLabelRequestTypeEnabled)
        {
            _segmentContainer.ContainerReturnShippingLabel = this.returnNamedNode(_rateNode, TMSProcessXmlConstants::ContainerReturnShippingLabel);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the default dimension to the xml.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The xml node to be expanded.
    /// </param>
    /// <param name="_defaultDimension">
    ///     The default dimension to be added to the xml.
    /// </param>
    protected void writeDimension(XmlNode _xmlNode, DimensionDefault _defaultDimension)
    {
        XmlNode                         dimNode;
        DimensionAttributeValueSetItem  dimAttrValueSetItem;
        DimensionAttributeValue         dimAttrValue;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionAttribute              dimAttr;

        dimNode = this.writeXMLNode(_xmlNode, #defaultDimension);

        while select DimensionAttribute from dimAttrSetItem
            order by dimAttr.Name
            where dimAttrSetItem.DimensionAttributeSet == DimensionCache::getDimensionAttributeSetForLedger()
                && dimAttrSetItem.DimensionAttribute    != DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
            join Name, RecId from dimAttr
                where dimAttr.RecId == dimAttrSetItem.DimensionAttribute
        {
            select DisplayValue from dimAttrValueSetItem
                where dimAttrValueSetItem.DimensionAttributeValueSet == _defaultDimension
                exists join dimAttrValue
                    where dimAttrValue.RecId              == dimAttrValueSetItem.DimensionAttributeValue
                        && dimAttrValue.DimensionAttribute == dimAttr.RecId;

            this.writeXMLElement(dimNode, dimAttr.Name, dimAttrValueSetItem.DisplayValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeNode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes data to an xml node.
	/// </summary>
	/// <param name="_node">
	/// XML node to be written.
	/// </param>
	/// <param name="_id">
	/// Id of the data.
	/// </param>
	/// <param name="_text">
	/// Text of the data.
	/// </param>
    public void writeNode(XmlNode _node, str _id, str _text)
    {
        XmlNode         xmlNode;
        XmlNodeList     xmlList;

        xmlList     = _node.selectNodes(_id);
        xmlNode     = xmlList.nextNode();

        if (xmlNode)
        {
            xmlNode.text(_text);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRequest</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes a request node in an xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
    public void writeRequest(XmlNode _xmlNode)
    {
        XmlNode         requestNode;

        requestNode = this.writeXMLNode(_xmlNode, #request);

        this.writeShippingEntity(requestNode, #typeShipment, '', weight, this.getClass(ltlClass), volume);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRouteTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes information to the route.
    /// </summary>
    /// <param name="_routeTable">
    /// Route header record.
    /// </param>
    /// <param name="_customerRate">
    /// Customer rate that will be set on the route.
    /// </param>
    /// <param name="_totalRate">
    /// Total rate to be written to the route.
    /// </param>
    /// <param name="_shipperRate">
    /// Shipper rate to be written to the route.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency code for the customer, shipper and total rate.
    /// </param>
    /// <returns>
    /// Route record.
    /// </returns>
    private TMSRouteTable writeRouteTable(
        TMSRouteTable   _routeTable,
        TMSCustomerRate _customerRate,
        TMSRate         _totalRate,
        TMSShipperRate  _shipperRate,
        CurrencyCode    _currencyCode)
    {
        TMSRouteTable	routeTable = _routeTable;
        TMSCustomerRate customerRate;
        TMSRate         totalRate;
        TMSShipperRate  shipperRate;

        if (routeTable.CurrencyCode == _currencyCode)
        {
			customerRate	= _customerRate;
			totalRate       = _totalRate;
			shipperRate     = _shipperRate;
        }
        else
		{
            customerRate	= TMSGlobal::convertCurrency(_currencyCode, routeTable.CurrencyCode, _customerRate);
            totalRate		= TMSGlobal::convertCurrency(_currencyCode, routeTable.CurrencyCode, _totalRate);
            shipperRate		= TMSGlobal::convertCurrency(_currencyCode, routeTable.CurrencyCode, _shipperRate);
        }

        routeTable.TotalRate     += totalRate;
        routeTable.ShipperRate   += shipperRate;

        if (this.hasOverrideRate())
        {
            routeTable.CustomerRate = overrideRate;
        }
        else
        {
            routeTable.CustomerRate  += customerRate;
        }

        routeTable.ShipUTCDateTime      = shipDateTime;
        routeTable.DeliveryUTCDateTime  = calcDlvDateTime;

        routeTable.write();

        return routeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipContainer</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes container information to shipment node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
	/// <param name="_weight">
	/// Weight to be written.
	/// </param>
	/// <param name="_class">
	/// Class to be written.
	/// </param>
	/// <param name="_volume">
	/// Volume to be written.
	/// </param>
    public void writeShipContainer(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipContainerAccessorials</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the container accessorials to the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    public void writeShipContainerAccessorials(XmlNode _xmlNode)
    {
        XmlNode                     rateNode;
        TMSShipmentAccessorialTable shipmentAccessorial;

        while select CurrencyCode,AccessorialMasterCode,CarrierAccessorialId,RateCur,RouteAccessorialLevel from    shipmentAccessorial
            where shipmentAccessorial.ContainerId == id
        {
            rateNode = this.writeXMLNode(_xmlNode, #rate);

            this.writeXMLElement(rateNode, #rateType, int2str(enum2int(TMSRateType::Accessorial)));
            this.writeXMLElement(rateNode, #code, shipmentAccessorial.AccessorialMasterCode);
            this.writeXMLElement(rateNode, #totalRate, TMSProcessXML_Base::real2str(shipmentAccessorial.RateCur));
            this.writeXMLElement(rateNode, #currencyCode, shipmentAccessorial.CurrencyCode);
            this.writeXMLElement(rateNode, #unitRate, TMSProcessXML_Base::real2str(shipmentAccessorial.RateCur));
            this.writeXMLElement(rateNode, #units, '1');
            this.writeXMLElement(rateNode, #user, strFmt('%1', true));
            this.writeXMLElement(rateNode, #carrierAcc, shipmentAccessorial.CarrierAccessorialId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipCustomer</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes customer information to request xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
    public void writeShipCustomer(XmlNode _xmlNode)
    {
        XmlNode customerNode = this.writeXMLNode(_xmlNode, #customer);

        TMSAddressPhone address = this.shipCustomerAddress();
        
        if (address)
        {
            this.writeAddress(customerNode, address);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shipCustomerAddress</Name>
				<Source><![CDATA[
    protected TMSAddressPhone shipCustomerAddress()
    {
        if (custAccount)
        {
            return TMSAddressPhone::initFromCustAccount(custAccount);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipDeliveryAccessorials</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the delivery accessorials to the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_shipmentId">
    ///     The Id of the shipment.
    /// </param>
    public void writeShipDeliveryAccessorials(XmlNode _xmlNode, WHSShipmentId _shipmentId)
    {
        TMSShipmentAccessorialTable     shipmentAccessorial;

        XmlNode deliveriesNode = this.writeXMLNode(_xmlNode, #AccDeliveries);

        while select shipmentAccessorial
            where shipmentAccessorial.ShipmentId == _shipmentId
        {
            XmlNode deliveryNode = this.writeXMLNode(deliveriesNode, #AccDelivery);
            this.writeShipDeliveryNode(deliveryNode, shipmentAccessorial);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipDeliveryNode</Name>
				<Source><![CDATA[
    [Hookable]
    protected void writeShipDeliveryNode(XmlNode _deliveryNode, TMSShipmentAccessorialTable _shipmentAccessorial)
    {
        this.writeXMLElement(_deliveryNode, #carrierAcc, _shipmentAccessorial.CarrierAccessorialId);
        this.writeXMLElement(_deliveryNode, #AccDeliveryValue, TMSProcessXML_Base::real2str(_shipmentAccessorial.RateCur));

        this.writeXMLElement(_deliveryNode, TMSProcessXmlConstants::AccessorialDeliveryType, int2str(enum2int(_shipmentAccessorial.AccessorialDeliveryType)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the details of the object for the request.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    /// <param name="_itemId">
    ///     The associated item id.
    /// </param>
    /// <param name="_weight">
    ///     The weight of the line.
    /// </param>
    /// <param name="_class">
    ///     The class of the line.
    /// </param>
    /// <param name="_volume">
    ///     The volume of the line.
    /// </param>
    /// <param name="_value">
    ///     The value of the line.
    /// </param>
    /// <param name="_recId">
    ///     The record Id of the line.
    /// </param>
    /// <param name="_qty">
    ///     The quantity on the line.
    /// </param>
    public void writeShipLine(
        XmlNode _xmlNode,
        ItemId _itemId,
        Weight _weight,
        WHSClass _class,
        Volume _volume,
        AmountMST _value,
        RefRecId _recId,
        Qty _qty)
    {
        WHSLoadLine                         loadLine = WHSLoadLine::findbyRecId(_recId);
        WHSEcoResProductTransportationCodes whsEcoResProductTransportationCodes = WHSEcoResProductTransportationCodes::findByItemId(_itemId);

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeLine);
        this.writeXMLElement(_xmlNode, #itemId, _itemId);
        this.writeXMLElement(_xmlNode, #qty, TMSProcessXML_Base::real2str(_qty));
        this.writeXMLElement(_xmlNode, #weight, TMSProcessXML_Base::real2str(_weight));
        this.writeXMLElement(_xmlNode, #class, TMSProcessXML_Base::real2str(_class));
        this.writeXMLElement(_xmlNode, #stcc, whsEcoResProductTransportationCodes.stccCode);
        this.writeXMLElement(_xmlNode, #harmonize, WHSHarmonized::find(whsEcoResProductTransportationCodes.HarmonizedCode).Name);
        this.writeXMLElement(_xmlNode, #volume, TMSProcessXML_Base::real2str(_volume));
        this.writeXMLElement(_xmlNode, #value, TMSProcessXML_Base::real2str(_value));
        this.writeXMLElement(_xmlNode, #filterCode1, strFmt('%1', WHSInventTable::find(_itemId).FilterCode[1]));
        this.writeXMLElement(_xmlNode, #filterCode2, strFmt('%1', WHSInventTable::find(_itemId).FilterCode[2]));
        this.writeXMLElement(_xmlNode, #filterCode3, strFmt('%1', WHSInventTable::find(_itemId).FilterCode[3]));
        this.writeXMLElement(_xmlNode, #filterCode4, strFmt('%1', WHSInventTable::find(_itemId).FilterCode[4]));
        this.writeXMLElement(_xmlNode, #InventTransId, loadLine.InventTransId);
        this.writeXMLElement(_xmlNode, #RecId,  strFmt('%1', loadLine.RecId));
        this.writeXMLElement(_xmlNode, #PackQty,  TMSProcessXML_Base::real2str(loadLine.PackingQty));

        if (TMSFeatureFlightState::TMSDistributeShipmentToRouteSegmentFeature())
        {
            TMSLoadLineResolver tmsLoadLineResolver = TMSLoadLineResolver::construct(loadLine);
            XmlNode fromNode = this.writeXMLNode(_xmlNode, #pickup);
            this.writeAddress(fromNode, tmsLoadLineResolver.originAddressPhone());
            this.writeXMLElement(fromNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(originResponsible)));
            this.writeXMLElement(fromNode, #vendorCode, originVendorCode);
            this.writeXMLElement(fromNode, #vendorInvoiceCode, originVendorInvoiceCode);

            XmlNode toNode = this.writeXMLNode(_xmlNode, #dropoff);
            this.writeAddress(toNode, tmsLoadLineResolver.destinationAddressPhone());
            this.writeXMLElement(toNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(destResponsible)));
            this.writeXMLElement(toNode, #vendorCode, destVendorCode);
            this.writeXMLElement(toNode, #vendorInvoiceCode, destVendorInvoiceCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipManualAccessorials</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the manually created accessorials on the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    public void writeShipManualAccessorials(XmlNode _xmlNode)
    {
        XmlNode                     ratingsNode;
        XmlNode                     ratingNode;
        XmlNode                     rateNode;
        TMSRouteAccessorialTable    routeAccessorialTable;
        TMSRouteRateDetail          routeRateDetail;
        TMSRouteSegment             routeSegment;
        TMSShipmentAccessorialTable shipmentAccessorial;
        TMSRate                     totalRate;

        select count(RecId) from routeAccessorialTable
            where routeAccessorialTable.RouteCode    == routeCode        &&
                  routeAccessorialTable.RouteCode    != ''               &&
                 (routeAccessorialTable.Sequence     == routeSequence    ||
                 (routeAccessorialTable.Sequence     == 0                &&
                  routeSequence                      == 1));

        select count(RecId) from routeRateDetail
            where routeRateDetail.RouteCode    == routeCode        &&
                  routeRateDetail.RouteCode    != ''               &&
                 (routeRateDetail.Sequence     == routeSequence    ||
                 (routeRateDetail.Sequence     == 0                &&
                  routeSequence                == 1));

        select count(RecId) from shipmentAccessorial
            where shipmentAccessorial.ContainerId == id;

        if (routeAccessorialTable.RecId || routeRateDetail.RecId || shipmentAccessorial.RecId)
        {
            ratingsNode         = this.writeXMLNode(_xmlNode, #ratings);
            ratingNode          = this.writeXMLNode(ratingsNode, #rating);

            if (routeRateDetail.RecId != 0)
            {
                select firstonly routeSegment
                    join RouteCode from routeRateDetail
                    where routeSegment.RouteCode == routeCode    &&
                          routeSegment.RouteCode == routeRateDetail.RouteCode;
            }

            if (routeSegment.RecId != 0 && routeAccessorialTable.RecId != 0)
            {
                select firstonly CarrierCode, CarrierServiceCode from routeSegment
                    join routeAccessorialTable
                    where routeSegment.RouteCode == routeCode    &&
                          routeSegment.RouteCode == routeAccessorialTable.RouteCode;
            }

            if (routeSegment.CarrierCode && routeSegment.CarrierServiceCode)
            {
                this.writeXMLElement(ratingNode, #carrier, routeSegment.CarrierCode);
                this.writeXMLElement(ratingNode, #carrierService, routeSegment.CarrierServiceCode);
                this.writeXMLElement(ratingNode, #method, TMSCarrierService::find(routeSegment.CarrierServiceCode, routeSegment.CarrierCode).MethodCode);
                this.writeXMLElement(ratingNode, #modeCode, TMSCarrier::find(routeSegment.CarrierCode).ModeCode);
            }
            else
            {
                this.writeXMLElement(ratingNode, #carrier, carrierCode);
                this.writeXMLElement(ratingNode, #carrierService, carrierServiceCode);
                this.writeXMLElement(ratingNode, #method, TMSCarrierService::find(carrierServiceCode, carrierCode).MethodCode);
                this.writeXMLElement(ratingNode, #modeCode, TMSCarrier::find(carrierCode).ModeCode);
            }

            if (manualApportionment)
            {
                totalRate = (select sum(RateCur)
                                from tmsRouteAccessorialTable
                                where tmsRouteAccessorialTable.RouteCode    == routeCode        &&
                                      tmsRouteAccessorialTable.RouteCode    != ''               &&
                                     (tmsRouteAccessorialTable.Sequence     == routeSequence    ||
                                     (tmsRouteAccessorialTable.Sequence     == 0                &&
                                      routeSequence                         == 1))).RateCur;
                this.writeXMLElement(ratingNode, #totalRate, TMSProcessXML_Base::real2str(totalRate));
            }

            TMSBillingGroupId billingGroupId;

            if (this.shouldBillingGroupIdBeWrittenToRateNode(routeRateDetail))
            {
                billingGroupId = TMSCarrierService::find(carrierServiceCode, carrierCode).BillingGroupId;
            }

            while select CurrencyCode,RateCur,RateId,RateType,RouteAccessorialLevel from routeAccessorialTable
                where routeAccessorialTable.RouteCode    == routeCode        &&
                      routeAccessorialTable.RouteCode    != ''               &&
                     (routeAccessorialTable.Sequence     == routeSequence    ||
                     (routeAccessorialTable.Sequence     == 0                &&
                      routeSequence                      == 1))
            {
                rateNode = this.writeXMLNode(ratingNode, #rate);
                this.writeRouteAccessorialCharges(rateNode, routeAccessorialTable);

                if (this.shouldBillingGroupIdBeWrittenToRateNode(routeRateDetail))
                {
                    this.writeXMLElement(rateNode, #billingGroup, billingGroupId);
                }                 
            }

            this.writeShipRateDetails(ratingNode);
            this.writeShipContainerAccessorials(ratingNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBillingGroupIdBeWrittenToRateNode</Name>
				<Source><![CDATA[
    private boolean shouldBillingGroupIdBeWrittenToRateNode(TMSRouteRateDetail _routeRateDetail)
    {
        return manualApportionment && !_routeRateDetail.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRouteAccessorialCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes route accessorial charge nodes to xml node.
    /// </summary>
    /// <param name = "_xmlNode">The XML node to be written.</param>
    /// <param name = "_routeAccessorialTable">The route accessorial charges table record.</param>
    protected void writeRouteAccessorialCharges(XmlNode _xmlNode, TMSRouteAccessorialTable _routeAccessorialTable)
    {
        this.writeXMLElement(_xmlNode, #rateType, int2str(enum2int(_routeAccessorialTable.RateType)));
        this.writeXMLElement(_xmlNode, #code, _routeAccessorialTable.RateId);
        this.writeXMLElement(_xmlNode, #totalRate, TMSProcessXML_Base::real2str(_routeAccessorialTable.RateCur));
        this.writeXMLElement(_xmlNode, #currencyCode, strFmt('%1', _routeAccessorialTable.CurrencyCode));
        this.writeXMLElement(_xmlNode, #unitRate, TMSProcessXML_Base::real2str(_routeAccessorialTable.RateCur));
        this.writeXMLElement(_xmlNode, #units, '1');
        this.writeXMLElement(_xmlNode, #user, strFmt('%1', true));
        this.writeXMLElement(_xmlNode, #objectId, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShippingEntity</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes shipment node to request node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
	/// <param name="_shipType">
	/// Type of the shipping entity.
	/// </param>
	/// <param name="_item">
	/// Item id of the shipping entity.
	/// </param>
	/// <param name="_weight">
	/// Weight of the shipping entity.
	/// </param>
	/// <param name="_class">
	/// Class of the shipping entity.
	/// </param>
	/// <param name="_volume">
	/// Volume of the shipping entity.
	/// </param>
	/// <param name="_value">
	/// Value of the shipping entity.
	/// </param>
	/// <param name="_recId">
	/// Record id of the shipping entity.
	/// </param>
	/// <param name="_qty">
	/// Quantity of the shipping entity.
	/// </param>
    public void writeShippingEntity(XmlNode        _xmlNode,
                             str            _shipType,
                             ItemId         _item       = '',
                             Weight         _weight     = 0.0,
                             WHSClass       _class      = 0.0,
                             Volume         _volume     = 0.0,
                             AmountMST      _value      = 0.0,
                             RefRecId       _recId      = 0,
                             Qty            _qty        = 0.0 )
    {
        XmlNode         shipNode;

        shipNode = this.writeXMLNode(_xmlNode, #shipping);

        switch (_shipType)
        {
            case #typeRoute:
                this.writeShipRoute(shipNode);
                break;

            case #typeSegment:
                this.writeShipSegment(shipNode);
                break;

            case #typeShipment:
                this.writeShipShipment(shipNode, _weight, _class, _volume, _xmlNode);
                break;

            case #typeContainer:
                this.writeShipContainer(shipNode, _weight, _class, _volume);
                break;

            case #typeLine:
                this.writeShipLine(shipNode, _item, _weight, _class, _volume, _value, _recId, _qty);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipRateDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the rate details on the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    public void writeShipRateDetails(XmlNode _xmlNode)
    {
        XmlNode                     rateNode;
        TMSRouteRateDetail          routeRateDetail;

        while select CurrencyCode, CustomerRate, RateCur, RateId, RouteAccessorialLevel, ShipperRate, RateType from routeRateDetail
            where routeRateDetail.RouteCode    == routeCode        &&
                  routeRateDetail.RouteCode    != ''               &&
                 (routeRateDetail.Sequence     == routeSequence    ||
                 (routeRateDetail.Sequence     == 0                &&
                  routeSequence                == 1))
        {
            rateNode = this.writeXMLNode(_xmlNode, #rate);

            this.writeXMLElement(rateNode, #rateType, int2str(enum2int(routeRateDetail.RateType)));
            this.writeXMLElement(rateNode, #code, routeRateDetail.RateId);
            this.writeXMLElement(rateNode, #totalRate, TMSProcessXML_Base::real2str(routeRateDetail.RateCur));            

            if (this.hasTMSRate(routeRateDetail.ShipperRate))
            {
                this.writeXMLElement(rateNode, #shipperRate, TMSProcessXML_Base::real2str(routeRateDetail.ShipperRate));
            }

            if (this.hasTMSRate(routeRateDetail.CustomerRate))
            {
                this.writeXMLElement(rateNode, #customerRate, TMSProcessXML_Base::real2str(routeRateDetail.CustomerRate));
            }

            this.writeXMLElement(rateNode, #currencyCode, routeRateDetail.CurrencyCode);
            this.writeXMLElement(rateNode, #unitRate, TMSProcessXML_Base::real2str(routeRateDetail.RateCur));
            this.writeXMLElement(rateNode, #units, '1');
            this.writeXMLElement(rateNode, #user, strFmt('%1', false));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipRoute</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes route information to request xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
    public void writeShipRoute(XmlNode _xmlNode)
    {
        XmlNode                 routeNode;
        TMSRoute                route;

        route = TMSRoute::find(routeCode);
        routeNode           = this.writeXMLNode(_xmlNode, #shipping);
        this.writeXMLElement(_xmlNode, #routeConfigCode, route.RouteConfigCode);
        this.writeXMLElement(_xmlNode, #routePlanName, route.RoutePlanName);

        while select segment
            where segment.RouteCode  == routeCode
        {
            this.writeShippingEntity(_xmlNode, #typeSegment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the address and shipment information.
    /// </summary>
    /// <param name="_xmlNode">
    /// Current XML node
    /// </param>
    public void writeShipSegment(XmlNode _xmlNode)
    {
        XmlNode                 pickNode;
        XmlNode                 dropNode;
        TMSAddressPhone         pickAdd = new TMSAddressPhone();
        TMSAddressPhone         dropAdd = new TMSAddressPhone();

        this.writeXMLElement(_xmlNode, #shippingEntityType, #typeSegment);
        this.writeXMLElement(_xmlNode, #sequence, int2str(segment.Sequence));
        this.writeXMLElement(_xmlNode, #freightTerm, segment.DlvTermId);
        this.writeXMLElement(_xmlNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segment.ResponsibleForPayment)));
        this.writeXMLElement(_xmlNode, #vendorCode, segment.VendorCode);
        this.writeXMLElement(_xmlNode, #vendorInvoiceCode, segment.VendorInvoiceCode);
        this.writeXMLElement(_xmlNode, #carrier, segment.CarrierCode);
        this.writeXMLElement(_xmlNode, #carrierService, segment.CarrierServiceCode);
        this.writeXMLElement(_xmlNode, #carrierGroup, segment.CarrierGroupCode);
        this.writeXMLElement(_xmlNode, #modeCode, segment.ModeCode);

        pickNode = this.writeXMLNode(_xmlNode, #pickup);
        pickAdd.setLogisticsPostalAddress(segment.originPostalAddress());
        pickAdd.parmName(segment.OriginName);
        pickAdd.parmResidential(segment.OriginResidential);

        this.writeAddress(pickNode, pickAdd);
        this.writeXMLElement(pickNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segment.OriginResponsibleForPayment)));
        this.writeXMLElement(pickNode, #vendorCode, segment.OriginVendorCode);
        this.writeXMLElement(pickNode, #vendorInvoiceCode, segment.OriginVendorInvoiceCode);

        dropNode = this.writeXMLNode(_xmlNode, #dropoff);
        dropAdd.setLogisticsPostalAddress(segment.destinationPostalAddress());
        dropAdd.parmName(segment.DestinationName);
        dropAdd.parmResidential(segment.DestinationResidential);

        this.writeAddress(dropNode, dropAdd);
        this.writeXMLElement(dropNode, #responsible, enum2Symbol(enumNum(TMSResponsibleForPayment), enum2int(segment.DestinationResponsibleForPayment)));
        this.writeXMLElement(dropNode, #vendorCode, segment.DestinationVendorCode);
        this.writeXMLElement(dropNode, #vendorInvoiceCode, segment.DestinationVendorInvoiceCode);

        this.writeShippingEntity(_xmlNode, #typeShipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipShipment</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes shipment information to request xml.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
	/// <param name="_weight">
	/// Weight of the shipment.
	/// </param>
	/// <param name="_class">
	/// Class of the shipment.
	/// </param>
	/// <param name="_volume">
	/// Volume of the shipment.
	/// </param>
	/// <param name="_parentNode">
	/// Parent node of the xml.
	/// </param>
    public void writeShipShipment(XmlNode _xmlNode, Weight _weight, WHSClass _class, Volume _volume, XmlNode _parentNode)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeShipSumRateDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Write the summed rate details on the xml node.
    /// </summary>
    /// <param name="_xmlNode">
    ///     The associated xml node.
    /// </param>
    public void writeShipSumRateDetails(XmlNode _xmlNode)
    {
        XmlNode                     rateNode;
        TMSRouteRateDetail          routeRateDetail;

        select sum (RateCur)
            from routeRateDetail
            where routeRateDetail.RouteCode    == routeCode        &&
                 (routeRateDetail.Sequence     == routeSequence    ||
                 (routeRateDetail.Sequence     == 0                &&
                  routeSequence                == 1));
        rateNode = this.writeXMLNode(_xmlNode, #rate);

        this.writeXMLElement(rateNode, #rateType, int2str(enum2int(TMSRateType::Rate)));
        this.writeXMLElement(rateNode, #code, routeRateDetail.RateId);
        this.writeXMLElement(rateNode, #totalRate, TMSProcessXML_Base::real2str(routeRateDetail.RateCur));

        if (this.hasTMSRate(routeRateDetail.ShipperRate))
        {
            this.writeXMLElement(rateNode, #shipperRate, TMSProcessXML_Base::real2str(routeRateDetail.ShipperRate));
        }

        if (this.hasTMSRate(routeRateDetail.CustomerRate))
        {
            this.writeXMLElement(rateNode, #customerRate, TMSProcessXML_Base::real2str(routeRateDetail.CustomerRate));
        }

        this.writeXMLElement(rateNode, #currencyCode, routeRateDetail.CurrencyCode);
        this.writeXMLElement(rateNode, #unitRate, TMSProcessXML_Base::real2str(routeRateDetail.RateCur));
        this.writeXMLElement(rateNode, #units, '1');
        this.writeXMLElement(rateNode, #user, strFmt('%1', false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXML</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes a request xml to be processed by transportation managed system.
	/// </summary>
    public void writeXML()
    {
        XmlNode         transNode;

        requestDoc = this.getRequestDoc();
        transNode  = requestDoc.createElement(#transaction);
        requestDoc.appendChild(transNode);

        this.writeXMLElement(transNode, #communicationType, Global::enum2Symbol(enumNum(TMSCommunicationType), communicationType));

        this.writeCarrierInfo(transNode);
        this.writeAccountInfo(transNode);
        this.writeRequest(transNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLElement</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes xml element into an xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// XML node to be written.
	/// </param>
	/// <param name="_element">
	/// Element tag.
	/// </param>
	/// <param name="_text">
	/// Text of the element.
	/// </param>
    public void writeXMLElement(XmlNode _xmlNode, str _element, str _text)
    {
        XmlNode     node;
        boolean     noWeightClass;

        if (Global::str2numOK(_text) && _element == #class)
        {
            noWeightClass = str2num(_text) == 0;
        }

        if (!noWeightClass)
        {
            node = requestDoc.createElement(_element);
            node.text(_text);
            _xmlNode.appendChild(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeXMLNode</Name>
				<Source><![CDATA[
    /// <summary>
	/// Writes an xml node in another xml node.
	/// </summary>
	/// <param name="_xmlNode">
	/// Parent xml node.
	/// </param>
	/// <param name="_element">
	/// Element to be written in the child node.
	/// </param>
	/// <returns>
	/// Child xml node.
	/// </returns>
    public XmlNode writeXMLNode(XmlNode _xmlNode, str _element)
    {
        XmlNode     node;

        node = requestDoc.createElement(_element);
        _xmlNode.appendChild(node);

        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
	/// Constructs a <c>TMSProcessXML_Base</c> instance based on the record type.
	/// </summary>
	/// <param name="_recordType">
	/// The record type.
	/// </param>
	/// <returns>
	/// The <c>TMSProcessXML_Base</c> instance.
	/// </returns>
    public static TMSProcessXML_Base construct(TMSRecordType _recordType)
    {
        switch (_recordType)
        {
            case TMSRecordType::Load            : return TMSProcessXML_Load::construct();
            case TMSRecordType::Sales           : return TMSProcessXML_Sales::construct();
            case TMSRecordType::Purch           : return TMSProcessXML_Purch::construct();
            default                             : return TMSProcessXML_Adhoc::construct();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClassFromItem</Name>
				<Source><![CDATA[
    /// <summary>
	/// Returns class information from <c>WHSEcoResProductTransportationCodes</c> item id.
	/// </summary>
	/// <param name="_itemId">
	/// Item id of the record.
	/// </param>
	/// <returns>
	/// <c>WHSClass</c> of the item.
	/// </returns>
    public static WHSClass getClassFromItem(ItemId _itemId)
    {
        return WHSLTLClass::find(WHSNMFC::find(WHSEcoResProductTransportationCodes::findByItemId(_itemId).nmfcCode).ltlClassCode).Class;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewUTCDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new UTC date/time value with the company time zone applied
    /// </summary>
    /// <param name="_date">
    /// Date parameter
    /// </param>
    /// <param name="_time">
    /// Time parameter
    /// </param>
    /// <returns>
    /// UTC date/time value after time zone application
    /// </returns>
    public static utcdatetime getNewUTCDateTime(TransDate _date, TimeOfDay _time)
    {
        utcdatetime result;

        if (_date == dateNull())
        {
            result = utcDateTimeNull();
        }
        else
        {
            result = DateTimeUtil::newDateTime(_date, _time, DateTimeUtil::getCompanyTimeZone());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>real2str</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts the real variable to string.
    /// </summary>
    /// <param name="_real">
    ///     A real value.
    /// </param>
    /// <param name="_digits">
    ///     Number of decimals.
    /// </param>
    /// <returns>
    ///     The converted string value.
    /// </returns>
    public static str real2str(
        real _real,
        int  _digits = ConvertNumberOfDecimals)
    {
        return num2str(_real, 0, _digits, DecimalSeparator::Dot, ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the parent.
    /// </summary>
    /// <returns>
    ///    The parent record.
    /// </returns>
    public Common findParent()
    {
        Common      ret;
        InventTransferTable transferTable;

        if (parentRecId != 0)
        {
            switch (parentInventTransType)
            {
                case InventTransType::Sales:
                    ret = SalesTable::findRecId(parentRecId);
                    break;

                case InventTransType::Purch:
                    ret = PurchTable::findRecId(parentRecId);
                    break;

                case InventTransType::TransferOrderShip:
                    select firstOnly transferTable
                        where transferTable.RecId == parentRecId;
                    ret = transferTable;
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromAddressNotNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves address of origin.
    /// </summary>
    /// <returns>
    /// Address of origin.
    /// </returns>
    protected TMSAddressPhone getFromAddressNotNull()
    {
        return fromAddress == null ? new TMSAddressPhone() : fromAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the currency from the order associated to the load.
    /// </summary>
    /// <param name="_loadLine">
    /// A <c>WHSLoadLine</c> record for which to look up the currency.
    /// </param>
    /// <returns>
    /// A <c>CurrencyCode</c> data type value that represents the base currency for the load.
    /// </returns>
    public CurrencyCode getOrderCurrency(WhsLoadLine _loadLine)
    {
        TMSSourceDocument tmsSourceDocument;

        tmsSourceDocument = TMSSourceDocument::construct(_loadLine.getOrderCommonFromLoadLine());

        return tmsSourceDocument.currency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToAddressNotNull</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves address of destination.
    /// </summary>
    /// <returns>
    /// Address of destination.
    /// </returns>
    protected TMSAddressPhone getToAddressNotNull()
    {
        return toAddress == null ? new TMSAddressPhone() : toAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCarrierFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes carrier fields.
    /// </summary>
    /// <param name="_carrierCode">
    ///     The carrier code.
    /// </param>
    /// <param name="_carrierServiceCode">
    ///     The carrier service code.
    /// </param>
    /// <param name="_carrierGroupCode">
    ///     The carrier group code.
    /// </param>
    /// <param name="_modeCode">
    ///     The mode code.
    /// </param>
    /// <param name="_transportationTemplateId">
    ///     The transportation template Id.
    /// </param>
    public void initCarrierFields(
        TMSCarrierCode              _carrierCode,
        TMSCarrierServiceCode       _carrierServiceCode,
        TMSCarrierGroupCode         _carrierGroupCode,
        TMSModeCode                 _modeCode,
        TMSTransportationTemplateId _transportationTemplateId)
    {
        this.parmCarrierCode(_carrierCode);
        this.parmCarrierServiceCode(_carrierServiceCode);
        this.parmCarrierGroupCode(_carrierGroupCode);
        this.parmMode(_modeCode);
        this.parmTransportationTemplateId(_transportationTemplateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRouteTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values from route
    /// </summary>
    /// <param name="_routeTable">
    ///     The <c>TMSRouteTable</c> record to initialize from
    /// </param>
    public void initFromRouteTable(TMSRoute _routeTable)
    {
        this.parmRouteConfigCode(_routeTable.RouteConfigCode);
        this.parmRouteGuideName(_routeTable.Name);
        this.parmRoutePlanName(_routeTable.RoutePlanName);
        this.parmRouteCode(_routeTable.RouteCode);

        this.parmInventSiteId(_routeTable.InventSiteId);
        this.parmInventLocationId(_routeTable.InventLocationId);

        this.parmManualApportionment(_routeTable.Manual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSegment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values from route segment
    /// </summary>
    /// <param name="_segment">
    ///     The <c>TMSRouteSegment</c> record to initialize from
    /// </param>
    public void initFromSegment(TMSRouteSegment     _segment)
    {
        TMSAddressPhone     fromAdd;
        TMSAddressPhone     toAdd;

        if (_segment.CarrierCode == '')
        {
            throw error("@TRX1293");
        }

        this.parmRouteSequence(_segment.Sequence);

        fromAdd = new TMSAddressPhone();
        fromAdd.setLogisticsPostalAddress(_segment.originPostalAddress());
        fromAdd.parmName(_segment.OriginName);
        fromAdd.parmResidential(_segment.OriginResidential);
        this.parmFromAddress(fromAdd);

        toAdd = new TMSAddressPhone();
        toAdd.setLogisticsPostalAddress(_segment.destinationPostalAddress());
        toAdd.parmName(_segment.DestinationName);
        toAdd.parmResidential(_segment.DestinationResidential);
        this.parmToAddress(toAdd);

        this.initCarrierFields(_segment.CarrierCode, _segment.CarrierServiceCode, _segment.CarrierGroupCode, _segment.ModeCode, '');

        if (DateTimeUtil::date(_segment.ScheduledShipUTCDateTime) <= DateTimeUtil::date(DateTimeUtil::utcNow()))
        {
            this.parmDlvDateTime(_segment.ScheduledArrivalUTCDateTime);
        }

        this.parmSegmentResponsible(_segment.ResponsibleForPayment);
        this.parmSegmentVendorCode(_segment.VendorCode);
        this.parmSegmentVendorInvoiceCode(_segment.VendorInvoiceCode);
        this.parmOriginResponsible(_segment.OriginResponsibleForPayment);
        this.parmOriginVendorCode(_segment.OriginVendorCode);
        this.parmOriginVendorInvoiceCode(_segment.OriginVendorInvoiceCode);
        this.parmDestResponsible(_segment.DestinationResponsibleForPayment);
        this.parmDestVendorCode(_segment.DestinationVendorCode);
        this.parmDestVendorInvoiceCode(_segment.DestinationVendorInvoiceCode);
        this.parmSegmentConfigRecId(_segment.TMSRouteSegmentConfig);

        if (TMSCarrier::find(_segment.CarrierCode).RatingEnabled == NoYes::Yes)
        {
            this.parmCommunicationType(TMSCommunicationType::Confirmation);
        }
        else
        {
            this.parmCommunicationType(TMSCommunicationType::Apportionment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmScheduledRoute</Name>
				<Source><![CDATA[
    public TMSScheduledRoute parmScheduledRoute(TMSScheduledRoute _isScheduledRoute = isScheduledRoute)
    {
        isScheduledRoute = _isScheduledRoute;

        return isScheduledRoute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSegmentConfigRecId</Name>
				<Source><![CDATA[
    public RefRecId parmSegmentConfigRecId(TMSRouteSegmentConfigRecId _routeSegmentConfigRecId = routeSegmentConfigRecId)
    {
        routeSegmentConfigRecId = _routeSegmentConfigRecId;
        return routeSegmentConfigRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes values from shipment.
    /// </summary>
    /// <param name="_shipment">
    ///     The <c>WHSShipmentTable</c> record to initialize from
    /// </param>
    public void initFromShipment(WHSShipmentTable _shipment)
    {
        WHSLoadLine         loadLine;
        TMSSourceDocument   tmsSourceDocument;
        TMSAddressPhone     shipWarehouseAddress = TMSAddressPhone::initFromInventLocation(InventLocation::find(_shipment.InventLocationId), true);

        select firstonly loadLine
            where loadLine.ShipmentId == _shipment.ShipmentId;

        tmsSourceDocument = TMSSourceDocument::construct(loadLine.getOrderCommonFromLoadLine());
        tmsSourceDocument.initializeProcessXML(this);
        tmsSourceDocument.initializeAddressesOnTMSProcessXML(this, shipWarehouseAddress);

        this.initCarrierFields(_shipment.CarrierCode, _shipment.CarrierServiceCode, _shipment.CarrierGroupCode, _shipment.ModeCode, '');
        this.parmFreightTerm(_shipment.DlvTermId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShippingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes shipping dimensions
    /// </summary>
    /// <param name="_weight">
    ///     The weight
    /// </param>
    /// <param name="_volume">
    ///     The volume
    /// </param>
    /// <param name="_value">
    ///     The value
    /// </param>
    /// <param name="_equipment">
    ///     The equipment
    /// </param>
    public void initShippingDimensions(
        TMSWeight           _weight,
        Volume              _volume,
        AmountMST           _value,
        TMSEquipmentCode    _equipment)
    {
        this.parmWeight(_weight);
        this.parmVolume(_volume);
        this.parmValue(_value);
        this.parmEquipment(_equipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentInventTransType</Name>
				<Source><![CDATA[
    /// <summary>
	/// Parameter method for parentInventTransType field.
	/// </summary>
	/// <param name="_parentInventTransType">
	/// The value to be set to field.
	/// </param>
	/// <returns>
	/// The value of the field.
	/// </returns>
    public InventTransType parmParentInventTransType(InventTransType _parentInventTransType = parentInventTransType)
    {
        parentInventTransType = _parentInventTransType;

        return parentInventTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readAllDocumentErrors</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads recursively all errors in a particular document node.
    /// </summary>
    /// <param name="_xmlNode">
    /// The XML document node containing errors.
    /// </param>
    protected void readAllDocumentErrors(XMLNode _xmlNode)
    {
        XmlNodeList errorsList;
        XmlNode     errorsNode;
        XmlNodeList errorList;
        XmlNode     errorNode;

        errorsList = _xmlNode.selectNodes('//' + #errors);
        errorsNode = errorsList.nextNode();

        while (errorsNode)
        {
            errorList = errorsNode.selectNodes(#error);
            errorNode = errorList.nextNode();

            while (errorNode)
            {
                errors += this.returnNamedNode(errorNode, #errorDesc);
                errorNode = errorList.nextNode();
            }

            errorsNode = errorsList.nextNode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeRouteSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes the route segment record.
    /// </summary>
    /// <param name="_route">
    /// Current route.
    /// </param>
    /// <returns>
    /// Route segment record.
    /// </returns>
    public TMSRouteSegment writeRouteSegment(TMSRoute _route)
    {
        TMSRouteSegment     routeSegment;

        routeSegment.RouteCode                  = _route.RouteCode;
        routeSegment.Sequence                   = 1;
        routeSegment.CarrierCode                = carrierCode;
        routeSegment.CarrierServiceCode         = carrierServiceCode;
        routeSegment.ModeCode                   = TMSCarrier::find(carrierCode).ModeCode;

        routeSegment.OriginName                 = fromAddress.parmName();
        routeSegment.OriginLocation             = fromAddress.parmLocation();
        routeSegment.OriginResidential          = fromAddress.parmResidential();

        routeSegment.DestinationName            = toAddress.parmName();
        routeSegment.DestinationLocation        = toAddress.parmLocation();
        routeSegment.DestinationResidential     = toAddress.parmResidential();
        routeSegment.insert();

        return routeSegment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOverrideRate</Name>
				<Source><![CDATA[
    private boolean hasOverrideRate()
    {
        return overrideRouteRecId;
	}

]]></Source>
			</Method>
			<Method>
				<Name>hasCustomerRate</Name>
				<Source><![CDATA[
    private boolean hasCustomerRate(XmlNode _xmlNode)
    {
        return this.returnNamedNode(_xmlNode, #customerRate) != '';
	}

]]></Source>
			</Method>
			<Method>
				<Name>hasShipperRate</Name>
				<Source><![CDATA[
    private boolean hasShipperRate(XmlNode _xmlNode)
    {
        return this.returnNamedNode(_xmlNode, #shipperRate) != '';
	}

]]></Source>
			</Method>
			<Method>
				<Name>hasTMSRate</Name>
				<Source><![CDATA[
	private boolean hasTMSRate(real _rate)
    {
        return TMSProcessXML_Base::real2str(_rate) != '';
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>