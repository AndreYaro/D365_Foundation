<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>AxLogisticsAddressDistrict</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>AxLogisticsAddressDistrict</c> class is the <c>AxBC</c> class for the
/// <c>LogisticsAddressDistrict</c> table..
/// </summary>
class AxLogisticsAddressDistrict extends AxInternalBase
{
    LogisticsAddressDistrict LogisticsAddressDistrict;
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>axOrig</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the original instance of the <c>AxBC</c> class.
    /// </summary>
    /// <returns>
    /// The original instance of the <c>AxBC</c> class.
    /// </returns>
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
      </Method>
      <Method>
        <Name>currentRecord</Name>
        <Source><![CDATA[
        public Common currentRecord(Common _LogisticsAddressDistrict = LogisticsAddressDistrict)
    {
        if (!prmisdefault(_LogisticsAddressDistrict))
        {
            super(_LogisticsAddressDistrict);
            LogisticsAddressDistrict = _LogisticsAddressDistrict;
        }
        else
        {
            super();
        }

        return LogisticsAddressDistrict;
    }

]]></Source>
      </Method>
      <Method>
        <Name>emptyRecord</Name>
        <Source><![CDATA[
    /// <summary>
    /// Returns an empty record for the table that the <c>AxBC</c> class relates to.
    /// </summary>
    /// <returns>
    /// An empty record from the table that the <c>AxBC</c> class relates to.
    /// </returns>
    protected Common emptyRecord()
    {
        LogisticsAddressDistrict localLogisticsAddressDistrict;
        return localLogisticsAddressDistrict;
    }
]]></Source>
      </Method>
      <Method>
        <Name>logisticsAddressDistrict</Name>
        <Source><![CDATA[
    /// <summary>
    /// Gets the current <c>LogisticsAddressDistrict</c> record.
    /// </summary>
    /// <param name="_logisticsAddressDistrict">
    /// A <c>LogisticsAddressDistrict</c> record; optional.
    /// </param>
    /// <returns>
    /// The current <c>LogisticsAddressDistrict</c> record.
    /// </returns>
    public LogisticsAddressDistrict logisticsAddressDistrict(LogisticsAddressDistrict _logisticsAddressDistrict = logisticsAddressDistrict)
    {
        if (!prmisdefault(_logisticsAddressDistrict))
        {
            this.setCurrentRecordFromExternal(_logisticsAddressDistrict);
        }

        return this.currentRecord();
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCity</Name>
        <Source><![CDATA[
        public LogisticsAddressCityRecId parmCity(LogisticsAddressCityRecId _city = 0)
    {
        if (!prmisdefault(_city))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, City), _city);
        }

        return logisticsAddressDistrict.City;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCountryRegionId_RU</Name>
        <Source><![CDATA[
        public str parmCountryRegionId_RU(str _countryRegionId = '')
    {
        if (!prmisdefault(_countryRegionId))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, CountryRegionId_RU), _countryRegionId);
        }

        return logisticsAddressDistrict.CountryRegionId_RU;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCountyId_RU</Name>
        <Source><![CDATA[
        public str parmCountyId_RU(str _countyId = '')
    {
        if (!prmisdefault(_countyId))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, CountyId_RU), _countyId);
        }

        return logisticsAddressDistrict.CountyId_RU;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmDescription</Name>
        <Source><![CDATA[
        public LogisticsAddressDistrictDescr parmDescription(LogisticsAddressDistrictDescr _description = '')
    {
        if (!prmisdefault(_description))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, Description), _description);
        }

        return logisticsAddressDistrict.Description;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmName</Name>
        <Source><![CDATA[
        public LogisticsAddressDistrictName parmName(LogisticsAddressDistrictName _name = '')
    {
        if (!prmisdefault(_name))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, Name), _name);
        }

        return logisticsAddressDistrict.Name;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProperties_RU</Name>
        <Source><![CDATA[
        public LogisticsAddressPropertiesId_RU parmProperties_RU(LogisticsAddressPropertiesId_RU _propertiesId = 0)
    {
        if (!prmisdefault(_propertiesId))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, Properties_RU), _propertiesId);
        }

        return logisticsAddressDistrict.Properties_RU;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmStateId_RU</Name>
        <Source><![CDATA[
        public str parmStateId_RU(str _stateId = '')
    {
        if (!prmisdefault(_stateId))
        {
            this.setField(fieldNum(LogisticsAddressDistrict, StateId_RU), _stateId);
        }

        return logisticsAddressDistrict.StateId_RU;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setTableFields</Name>
        <Source><![CDATA[
    /// <summary>
    ///    Ensures that all default methods are called before inserting or updating a record.
    /// </summary>
    /// <remarks>
    ///    In order to make sure that all defaulting methods are called before inserting or updating a record,
    ///    the <c>setTableFields</c> method on the <c>AxInternalBase</c> class must be overridden in the AxBC
    ///    class.The method should include a call to all defaulting methods (that is, setFieldName
    ///    methods).Code the defaulting business logic in the different setFieldName methods. Therefore, you
    ///    do not have to put the setFieldName methods in a specific order in this method.
    /// </remarks>
    protected void setTableFields()
    {
        this.currentRecord().defaultRow();
    }

]]></Source>
      </Method>
      <Method>
        <Name>construct</Name>
        <Source><![CDATA[
        static AxLogisticsAddressDistrict construct()
    {
        return new AxLogisticsAddressDistrict();
    }

]]></Source>
      </Method>
      <Method>
        <Name>newLogisticsAddressDistrict</Name>
        <Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AxLogisticsAddressDistrict</c> class.
    /// </summary>
    /// <param name="_LogisticsAddressDistrict">
    /// The <c>LogisticsAddressDistrict</c> record from which to create the instance.
    /// </param>
    /// <returns>
    /// A new instance of the <c>AxLogisticsAddressDistrict</c> class.
    /// </returns>
    public static AxLogisticsAddressDistrict newLogisticsAddressDistrict(LogisticsAddressDistrict _LogisticsAddressDistrict)
    {
        AxLogisticsAddressDistrict AxLogisticsAddressDistrict = AxLogisticsAddressDistrict::construct();
        AxLogisticsAddressDistrict.LogisticsAddressDistrict(_LogisticsAddressDistrict);

        return AxLogisticsAddressDistrict;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>