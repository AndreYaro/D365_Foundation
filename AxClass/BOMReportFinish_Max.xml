<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomReportFinish_Max</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomReportFinish_Max extends BOMReportFinishBase
{
    TmpBOM                  tmpBOM;

    container               onHandCon;
    InventQty               onHand[];

    InventDimParm           childInventDimParm;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBOMParmReportFinish</Name>
				<Source><![CDATA[
    void createBOMParmReportFinish(InventTable inventTable)
    {
        BOMVersion  bomVersion;
        ItemId      itemId;

        itemId = inventTable.isCoByProduct()?inventTable.PmfPlanningItemId:inventTable.ItemId;

        bomVersion.recordLevelSecurity(true);

        bomParmReportFinish.setTmp();

        while select bomVersion
            where bomVersion.ItemId == itemId
             &&   bomVersion.Approved == NoYes::Yes
             &&   (bomVersion.FromDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || ! bomVersion.FromDate)
             &&   (bomVersion.ToDate   >= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) || ! bomVersion.ToDate)
        {
            bomParmReportFinish.ParmId      = '1';
            bomParmReportFinish.TransDate   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            bomParmReportFinish.initFromBOMVersion(bomVersion);
            bomParmReportFinish.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventOnhand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventOnHand</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventOnHand</c> class.
    /// </returns>
    protected InventOnhand createInventOnhand()
    {
        return InventOnhand::newItemDim(
                tmpBOM.ItemId,
                tmpBOM.inventDim(),
                childInventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventOnhandQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>InventOnHandQty</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventOnHandQty</c> class.
    /// </returns>
    protected InventOnHandQty createInventOnhandQty()
    {
        return InventOnHandQty::newItemDim(
                tmpBOM.ItemId,
                tmpBOM.inventDim(),
                childInventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMReceipt</Name>
				<Source><![CDATA[
    void initBOMReceipt(ItemId itemId)
    {
        InventTable inventTable = InventTable::find(itemId);
        tmpBOM.clear();
        tmpBOM.initFromInventTable(inventTable);
        tmpBOM.bomLine          = NoYes::No;
        tmpBOM.Level            = level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxRepFinish</Name>
				<Source><![CDATA[
    InventQty maxRepFinish(
        InventQty       inventOnHand,
        InventQty       qty,
        BOMCalcData     parentCalcData,
        ItemId          itemId
        )
    {
        InventQty maxRepFinish;

        if (inventOnHand <= 0)
            return 0;

        if (! qty)
            return 0;

        maxRepFinish = roundDownDec(
            parentCalcData.seriesSize() * inventOnHand / -qty,
            InventTable::inventDecimals(itemId));

        return maxRepFinish;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmChildInventDimParm(InventDimParm _childInventDimParm = childInventDimParm)
    {
        childInventDimParm = _childInventDimParm;

        return childInventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        #OCCRetryCount
        BOMCalcData                 bomCalcData;

        PmfFormulaCoBy              pmfFormulaCoBy;
        Qty                         serieSize;

        if (! this.validate())
            throw error("@SYS18447");

        setPrefix("@SYS12772");

        try
        {
            ttsbegin;
            bomCalcData = this.initBOMCalcData();
            while select pmfFormulaCoBy
                where pmfFormulaCoBy.bomId == bomParmReportFinish.bomId
            {
                tmpBOM.initFromInventTable(pmfFormulaCoBy.inventTable());

                serieSize = bomCalcData.seriesSize();

                tmpBOM.Qty = pmfFormulaCoBy.CoByQtySerie
                    ? (abs(serieSize) * pmfFormulaCoBy.CoByQty) / pmfFormulaCoBy.CoByQtySerie
                    : abs(serieSize) * pmfFormulaCoBy.CoByQty;

                if (PdsGlobal::pdsIsCWItem(tmpBOM.ItemId))
                {
                    tmpBOM.PdsCWQty = roundDownDec(PdsCatchWeight::cwQty(pmfFormulaCoBy.ItemId, tmpBOM.Qty), 0);
                    tmpBOM.Qty = PdsCatchWeight::inventQty(tmpBOM.ItemId, tmpBOM.PdsCWQty, tmpBOM.inventTable().inventUnitId());
                }

                tmpBOM.insert();
            }

            this.initBOMReceipt(bomParmReportFinish.ItemId);
            tmpBOM.initFromBOMparmReportFinish(bomParmReportFinish);
            this.updateInventOnHand();
            tmpBOM.insert();

            bomCalcData = this.initBOMCalcData();

            this.searchBOM(
                bomParmReportFinish.bomId,
                bomParmReportFinish.ItemId,
                bomParmReportFinish.inventDim(),
                bomCalcData);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchBOM</Name>
				<Source><![CDATA[
    void searchBOM(
        BOMId         _bomId,
        ItemId        _itemId,
        InventDim     _inventDim,
        BOMCalcData   _parentBOMCalcData
        )
    {
        RecId       recId;
        LineNum     curLineNum;
        TmpBOM      tmpBOMBOM;
        InventQty   minMaxReportFinish = -1;
        InventTable inventTable;

        PmfFormulaCoBy  pmfFormulaCoBy;
        PdsCWInventQty  cwMinMaxReportFinish;
        ItemId          parentItemId = tmpBOM.ItemId;

        curLineNum      = lineNum;
        recId           = tmpBOM.RecId;

        tmpBOM.bomLine = false;
        tmpBOM.update();

        super(_bomId, _itemId, _inventDim, _parentBOMCalcData);

        if (! recId)
            return;

        tmpBOMBOM.setTmpData(tmpBOM);

        while select tmpBOMBOM
            where tmpBOMBOM.Level   == level+1
               && tmpBOMBOM.LineNum  > curLineNum
            notexists join inventTable
                where inventTable.ItemId    == tmpBOMBOM.ItemId
                   && inventTable.ItemType  ==ItemType::Service
        {
            // If BOm
            if ( InventTable::find(tmpBOMBOM.ItemId).isProducedByDefault() && !tmpBOMBOM.bomLine)
            {
                //
                // if the line is itself produced, the *MaxRepFinish fields contain the
                // quantities that can be produced for that specific item. This quantity must
                // now be converted to the quantity that can be produced for the parent.
                //
                if (PdsGlobal::pdsIsCWItem(tmpBOMBOM.ItemId))
                {
                    tmpBOMBOM.MaxRepFinish = this.maxRepFinish(
                            tmpBOMBOM.PdsCWInventOnHand + tmpBOMBOM.PdsCWMaxRepFinish,
                            tmpBOMBOM.PdsCWOrigQty,
                            _parentBOMCalcData,
                            tmpBOMBOM.ItemId);
                }
                else
                {
                    // Currently max. rep. finish plus onhand
                    tmpBOMBOM.MaxRepFinish = this.maxRepFinish(
                            tmpBOMBOM.InventOnHand+tmpBOMBOM.MaxRepFinish,
                            tmpBOMBOM.OrigQty,
                            _parentBOMCalcData,
                            tmpBOMBOM.ItemId);

                    // No update !!
                }
                if (PdsGlobal::pdsIsCWItem(parentItemId))
                {
                    tmpBOMBOM.PdsCWMaxRepFinish = roundDownDec(PdsCatchWeight::convertQtyToCWQty(parentItemId, tmpBOMBOM.MaxRepFinish, InventTable::find(parentItemId).inventUnitId(), NoYes::No), 0);
                    tmpBOMBOM.MaxRepFinish = PdsCatchWeight::inventQty(parentItemId, tmpBOMBOM.PdsCWMaxRepFinish, InventTable::find(parentItemId).inventUnitId());
                }
            }

            if (this.mustUpdateMinMaxReportFinishFromTmpBOM(tmpBOMBOM, minMaxReportFinish))
            {
                minMaxReportFinish = tmpBOMBOM.MaxRepFinish;
                cwMinMaxReportFinish = tmpBOMBOM.PdsCWMaxRepFinish;
            }
        }

        ttsbegin;

        select forupdate tmpBOMBOM
            where tmpBOMBOM.RecId == recId;

        if (tmpBOMBOM && minMaxReportFinish != -1)
        {
            if (PdsGlobal::pdsIsCWItem(tmpBOMBOM.ItemId))
            {
                if (cwMinMaxReportFinish == 0)
                {
                    cwMinMaxReportFinish = PdsCatchWeight::cwQty(tmpBOMBOM.ItemId, minMaxReportFinish);
                }

                tmpBOMBOM.PdsCWMaxRepFinish = cwMinMaxReportFinish;
                tmpBOMBOM.MaxRepFinish = PdsCatchWeight::inventQty(tmpBOMBOM.ItemId, tmpBOMBOM.PdsCWMaxRepFinish, tmpBOMBOM.inventTable().inventUnitId());
            }
            else
            {
                tmpBOMBOM.MaxRepFinish = minMaxReportFinish;
            }

            tmpBOMBOM.update();

            if (tmpBOMBOM.Level == 0)
            {
                while select forupdate tmpBOMBOM
                    where tmpBOMBOM.RecId != recId
                        && tmpBOMBOM.Level == 0
                {
                    if (tmpBOMBOM && minMaxReportFinish != -1)
                    {
                        select PdsCWQty, CoByQty, CoByQtySerie from pmfFormulaCoBy
                            where pmfFormulaCoBy.ItemId == tmpBOMBOM.ItemId
                                && pmfFormulaCoBy.bomId == bomParmReportFinish.bomId;

                        if (PdsGlobal::pdsIsCWItem(tmpBOMBOM.ItemId))
                        {
                            if (pmfFormulaCoBy.CoByQtySerie)
                            {
                                tmpBOMBOM.PdsCWMaxRepFinish = roundDownDec((minMaxReportFinish * pmfFormulaCoBy.PdsCWQty) / pmfFormulaCoBy.CoByQtySerie, 0);
                            }
                            else
                            {
                                tmpBOMBOM.MaxRepFinish  = 0;
                            }
                            tmpBOMBOM.MaxRepFinish = PdsCatchWeight::inventQty(tmpBOMBOM.ItemId, tmpBOMBOM.PdsCWMaxRepFinish, tmpBOMBOM.inventTable().inventUnitId());
                        }
                        else
                        {
                            if (pmfFormulaCoBy.CoByQtySerie)
                            {
                                tmpBOMBOM.MaxRepFinish = (minMaxReportFinish * pmfFormulaCoBy.CoByQty) / pmfFormulaCoBy.CoByQtySerie;
                            }
                            else
                            {
                                tmpBOMBOM.MaxRepFinish  = 0;
                            }
                        }
                        tmpBOMBOM.update();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateMinMaxReportFinishFromTmpBOM</Name>
				<Source><![CDATA[
	/// <summary>
    /// Check whether the minimum value for the maximum BOM quantity reported as finish should be updated.
    /// </summary>
    /// <param name = "_tmpBOM">The <c>TmpBOM</c> record to check.</param>
    /// <param name = "_minMaxReportFinish">The current minimum value for the max quantity reported as finished</param>
    /// <returns>true if the minimum should be updated; otherwise, false.</returns>
    protected boolean mustUpdateMinMaxReportFinishFromTmpBOM(TmpBOM _tmpBOM, InventQty _minMaxReportFinish)
    {
        return this.mustUpdateMinMaxReportFinish(_tmpBOM.MaxRepFinish, _minMaxReportFinish);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateMinMaxReportFinish</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether the minimum value for the maximum BOM quantity reported as finish should be updated.
    /// </summary>
    /// <param name = "_maxRepFinishQty">The maximum quantity reported as finish to check.</param>
    /// <param name = "_minMaxReportFinish">The current minimum value for the max quantity reported as finished</param>
    /// <returns>true if the minimum should be updated; otherwise, false.</returns>
    protected boolean mustUpdateMinMaxReportFinish(InventQty _bomMaxRepFinishQty, InventQty _minMaxReportFinish)
    {
        return _bomMaxRepFinishQty < _minMaxReportFinish
            || _minMaxReportFinish == -1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpBOM</Name>
				<Source><![CDATA[
    TmpBOM tmpBOM()
    {
        return tmpBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMConsumption</Name>
				<Source><![CDATA[
    InventQty updateBOMConsumption(
        BOMSearch       search,
        BOMCalcData     parentBOMCalcData,
        InventTable     inventTable,
        RouteId         routeId,
        InventDim       parentInventDim)
    {
        InventQty               expandQty;
        int                     onHandI;

        PdsCWInventQty          pdsCWExpandQty;
        ItemId                  parentItemId;

        #localmacro.onHandId
            [tmpBOM.itemId,tmpBOM.inventDimId]
        #endmacro
        tmpBOM.clear();
        tmpBOM.initFromInventTable(inventTable);
        tmpBOM.initFromBOM(search.bom());
        tmpBOM.setInventDimIdFromBOM(search.bom(),search.parmParentItemId(),parentInventDim,routeId);
        tmpBOM.bomLine              = true;
        tmpBOM.Level                = level;

        if (inventTable.pdsCWItem())
        {
            [tmpBOM.Qty, tmpBOM.PdsCWQty]
                          = this.pdsCWCalcQty(search,parentBOMCalcData,inventTable);
        }
        else
        {
            tmpBOM.Qty                  = this.calcQty(search,parentBOMCalcData,inventTable);
        }

        if (bomParmReportFinish.OverrideDimension)
            tmpBOM.DefaultDimension = tmpBOM.copyDimension(bomParmReportFinish.DefaultDimension);

        onHandI = conFind(onHandCon,#onHandId);

        childInventDimParm.initFromInventDim(tmpBOM.inventDim());

        this.updateInventOnHand();

        // Sub previously used
        if (inventTable.pdsCWItem())
        {
            if (onHandI)
            {
                tmpBOM.PdsCWInventOnHand    -= onHand[onHandI];
                tmpBOM.InventOnHand         = PdsCatchWeight::inventQty(inventTable.ItemId, tmpBOM.PdsCWInventOnHand, tmpBOM.unitId());
            }

            pdsCWExpandQty      = this.expandQty(search, tmpBOM.PdsCWQty, tmpBOM.PdsCWInventOnHand, inventTable);
            expandQty           = PdsCatchWeight::inventQty(tmpBOM.ItemId, pdsCWExpandQty, inventTable.inventUnitId());

            tmpBOM.PdsCWOrigQty = tmpBOM.PdsCWQty;
            tmpBOM.PdsCWQty     = tmpBOM.PdsCWQty + pdsCWExpandQty;

            tmpBOM.OrigQty      = PdsCatchWeight::inventQty(inventTable.ItemId, tmpBOM.PdsCWOrigQty, tmpBOM.unitId());
            tmpBOM.Qty          = PdsCatchWeight::inventQty(inventTable.ItemId, tmpBOM.PdsCWQty, tmpBOM.unitId());

            tmpBOM.MaxRepFinish = this.maxRepFinish(
                PdsCatchWeight::inventQty(inventTable.ItemId, tmpBOM.PdsCWInventOnHand, tmpBOM.unitId()),
                tmpBOM.Qty,
                parentBOMCalcData,
                inventTable.ItemId);
        }
        else
        {
            if (onHandI)
                tmpBOM.InventOnHand -= onHand[onHandI];

            expandQty       = this.expandQty(search,tmpBOM.Qty,tmpBOM.InventOnHand,inventTable);
            tmpBOM.OrigQty  = this.roundQty(tmpBOM.Qty,0,inventTable.ItemId);
            tmpBOM.Qty      = this.roundQty(tmpBOM.Qty,expandQty,inventTable.ItemId);

            tmpBOM.MaxRepFinish = this.maxRepFinish(
                tmpBOM.InventOnHand,
                tmpBOM.Qty,
                parentBOMCalcData,
                inventTable.ItemId);
        }
        parentItemId = search.parmParentItemId();
        if (PdsGlobal::pdsIsCWItem(parentItemId))
        {
            // Convert inventory quantity to CW quantity of the parent item
            tmpBOM.PdsCWMaxRepFinish = roundDownDec(PdsCatchWeight::convertQtyToCWQty(parentItemId, tmpBOM.MaxRepFinish, InventTable::find(parentItemId).inventUnitId(), false), 0);

            // Convert the rounded CW quantity back to nominal inventory quantity
            tmpBOM.MaxRepFinish = PdsCatchWeight::inventQty(parentItemId, tmpBOM.PdsCWMaxRepFinish);
        }

        tmpBOM.LineNum = lineNum;
        tmpBOM.insert();

        // Accumulate qty.
        if (! onHandI)
        {
            onHandCon   += [#onHandId];
            onHandI     =  conLen(onHandCon);
        }

        if (inventTable.pdsCWItem())
        {
            onHand[onHandI] += -tmpBOM.PdsCWQty;
        }
        else
        {
            onHand[onHandI] += -tmpBOM.Qty;
        }

        return expandQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the on hand inventory quantity for the current BOM line.
    /// </summary>
    protected void updateInventOnHand()
    {
        InventOnHandQty inventOnHandQty = this.createInventOnhandQty();
        tmpBOM.InventOnHand = inventOnHandQty.availPhysical();
        tmpBOM.PdsCWInventOnHand = inventOnHandQty.pdsCWAvailPhysical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParmBuffer</Name>
				<Source><![CDATA[
    static BOMReportFinish_Max newParmBuffer(BOMParmReportFinish    _bomParmReportFinish)
    {
        BOMReportFinish_Max   bomReportFinish;

        bomReportFinish = new BOMReportFinish_Max();
        bomReportFinish.parmParmBuffer(_bomParmReportFinish);

        return bomReportFinish;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>