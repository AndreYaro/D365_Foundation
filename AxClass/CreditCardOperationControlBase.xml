<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CreditCardOperationControlBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class CreditCardOperationControlBase implements ICreditCardOperationControl
{
    private static Map StateTransitMap;
    protected CreditCardRequestContext creditCardRequestContext;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canProceed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to check if current operation could go through if there's inconsistency.
    /// Add a wrapper layer, base class implements the interface, it provides the default implementation in canByOperation.
    /// </summary>
    /// <param name = "_nextStatus">next status</param>
    /// <returns>True if the request can come to the next status, otherwise; false</returns>
    boolean canProceed(CreditCardRequestStatus _nextStatus)
    {
        return this.canProceedByOperation(_nextStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProceedByOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to check if current operation could go through if there's inconsistency.
    /// By default, it uses the parent class's state map to control whether it could be transited to next state or not. 
    /// Each sub class provides the separate implementation to have more precious control.
    /// </summary>
    /// <param name = "_nextStatus">next status</param>
    /// <returns>True if the request can come to the next status, otherwise; false</returns>
    abstract protected internal boolean canProceedByOperation(CreditCardRequestStatus _nextStatus)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransit</Name>
				<Source><![CDATA[
    protected internal boolean canTransit(CreditCardRequestStatus _nextStatus)
    {
        Map stateMap = this.getDefaultStateTransit();
        CreditCardRequestStatus currentStatus = creditCardRequestContext.getCurrentStatus();

        return stateMap.exists(currentStatus) && stateMap.lookup(currentStatus).in(_nextStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultStateTransit</Name>
				<Source><![CDATA[
    protected internal Map getDefaultStateTransit()
    {
        if (StateTransitMap == null)
        {
            CreditCardOperationControlBase::initDefaultStateTransitMap();
        }
        return StateTransitMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ICreditCardOperationControl construct(CreditCardRequestContext _creditCardRequestContext)
    {
        ICreditCardOperationControl creditCardOperationControl;
        
        switch (_creditCardRequestContext.getCreditCardOperation())
        {
            case CreditCardOperation::Authorize:
                creditCardOperationControl = CreditCardOperationControlAuthorization::construct(_creditCardRequestContext);
                break;

            case CreditCardOperation::AuthorizeAndCapture:
            case CreditCardOperation::CaptureAfterAuthorize:
                creditCardOperationControl = CreditCardOperationControlCapture::construct(_creditCardRequestContext);
                break;

            case CreditCardOperation::Void:
                creditCardOperationControl = CreditCardOperationControlVoid::construct(_creditCardRequestContext);
                break;

            case CreditCardOperation::Refund:
                creditCardOperationControl = CreditCardOperationControlRefund::construct(_creditCardRequestContext);
                break;

            default:
                creditCardOperationControl = CreditCardOperationControlDefault::construct(_creditCardRequestContext);
                break;
        }
        return creditCardOperationControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultStateTransitMap</Name>
				<Source><![CDATA[
    private static void initDefaultStateTransitMap()
    {
        StateTransitMap = new Map(Types::Enum, Types::AnyType);

        Set statusSet = new Set(Types::Enum);
        statusSet.add(CreditCardRequestStatus::NoResponse);
        statusSet.add(CreditCardRequestStatus::NetworkError);
        statusSet.add(CreditCardRequestStatus::Received);
        StateTransitMap.insert(CreditCardRequestStatus::InProcess, statusSet);

        Set statusSetManuallyResolved = new Set(Types::Enum);
        statusSetManuallyResolved.add(CreditCardRequestStatus::ManuallyResolved);
        StateTransitMap.insert(CreditCardRequestStatus::NetworkError, statusSetManuallyResolved);
        StateTransitMap.insert(CreditCardRequestStatus::NoResponse, statusSetManuallyResolved);

        Set statusSetInProcess = new Set(Types::Enum);
        statusSetInProcess.add(CreditCardRequestStatus::InProcess);
        StateTransitMap.insert(CreditCardRequestStatus::None, statusSetInProcess);
        StateTransitMap.insert(CreditCardRequestStatus::Received, statusSetInProcess);
        StateTransitMap.insert(CreditCardRequestStatus::ManuallyResolved, statusSetInProcess);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>