<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResWorkflowWorkItemActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource workflow item action manager class provides services to the menu item classes that are used for processing workflow outcomes.
/// </summary>
class ResWorkflowWorkItemActionManager extends WorkflowWorkItemActionManager
{
    private boolean findWorkflowForAnyUser;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmFindWorkflowForAnyUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or set find workflow for any user setting.
    /// </summary>
    /// <param name="_findWorkflowForAnyUser">Boolean value of find workflow for any user.</param>
    /// <returns>Boolean value of find workflow for any user.</returns>
    public boolean parmFindWorkflowForAnyUser(boolean _findWorkflowForAnyUser = findWorkflowForAnyUser)
    {
        findWorkflowForAnyUser = _findWorkflowForAnyUser;
        return findWorkflowForAnyUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runWorkflowWorkItemAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts for action dialog and performs the workflow work item action.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// Could not find the workflow work item action for the selected menu item.
    /// </exception>
    protected void runWorkflowWorkItemAction()
    {
        if (this.parmWorkflowWorkItem())
        {
            if (this.parmWorkflowWorkItemActionType() == WorkflowWorkItemActionType::None)
            {
                this.parmWorkflowWorkItemActionType(WorkflowWorkItemActionManager::findActionTypeForMenuItem(this.parmWorkflowWorkItem(), this.parmArgs().menuItemName()));

                if (this.parmWorkflowWorkItemActionType() == WorkflowWorkItemActionType::None)
                {
                    throw error("@SYS109040");
                }
            }

            this.takeWorkItemAction();

            if (this.parmCaller().name() == formStr(ResWorkflowDropDialogForm))
            {
                this.updateWorkflowControls();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkflowWorkItem</Name>
				<Source><![CDATA[
    private void setWorkflowWorkItem(container _workItemsContainer)
    {
        List                    workItems = new List(Types::Guid);
        WorkflowWorkItemTable   workItemTable;

        workItems = List::create(_workItemsContainer);
        ListEnumerator workItemEnumerator = workItems.getEnumerator();

        while (workItemEnumerator.moveNext())
        {
            this.parmWorkflowWorkItem(WorkflowWorkItemTable::find(workItemEnumerator.current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkItemsForOriginator</Name>
				<Source><![CDATA[
    private container findWorkItemsForOriginator(Common workflowEnabledRecord)
    {
        WorkflowWorkItemTable   workflowWorkItemTable;
        List                    workItems = new List(Types::Guid);
        ResRequestLine          resRequestLineTable;

        if (workflowEnabledRecord.TableId == tableNum(WorkflowWorkItemTable))
        {
            WorkflowWorkItemTable sourceWorkItemTable = WorkflowWorkItemTable::findRecId(workflowEnabledRecord.RecId);
            workItems.addEnd(sourceWorkItemTable.Id);
        }

        workflowWorkItemTable.disableCache(true);

        // Work items originated by the current user.
        while select Id from workflowWorkItemTable where
            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending &&
            workflowWorkItemTable.RefRecId == workflowEnabledRecord.RecId &&
            workflowWorkItemTable.RefTableId == workflowEnabledRecord.TableId
        exists join resRequestLineTable where
            resRequestLineTable.RecId == workflowWorkItemTable.RefRecId
                && resRequestLineTable.CreatedBy == curUserId()
        {
            workItems.addEnd(workflowWorkItemTable.Id);
        }

        return [workItems.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the workflow work item action or the line item workflow action.
    /// </summary>
    public void run()
    {
        boolean                         isDependentLineItemWorkflow = false;
        str                             lineItemWorkflowName;
        workflowTypeName                parentWorkflowTypeName;
        WorkflowTrackingStatusTable     trackingStatusTable;
        container                       workItemsContainer;

        if (this.parmFindWorkflowForAnyUser())
        {
            [workItemsContainer, trackingStatusTable] = this.findWorkItemsAndTrackingData(this.parmArgs().record());
        }
        else
        {
            [workItemsContainer, trackingStatusTable] = SysWorkflowFormControls::findWorkItemsAndTrackingData(this.parmArgs().record());
        }

        this.setWorkflowWorkItem(workItemsContainer);

        // If the workflow is not assigned to the current user as approver, then validate if the current user is the originator.
        if (!this.parmWorkflowWorkItem())
        {
            [workItemsContainer] = this.findWorkItemsForOriginator(this.parmArgs().record());
            this.setWorkflowWorkItem(workItemsContainer);
        }

        if (this.parmWorkflowWorkItem())
        {
            this.runWorkflowWorkItemAction();
        }
        else
        {
            [workItemsContainer, trackingStatusTable] = SysWorkflowFormControls::findWorkItemsAndTrackingData(this.parmArgs().record());

            // determine if this is a line item workflow action
            if (trackingStatusTable.ParentCorrelationId)
            {
                [isDependentLineItemWorkflow, lineItemWorkflowName, parentWorkflowTypeName] =
                    SysWorkflow::isDependentLineItemWorkflow(trackingStatusTable.ParentCorrelationId, trackingStatusTable.versionTable().workflowTable());

                if (isDependentLineItemWorkflow)
                {
                    this.parmWorkflowCorrelationId(trackingStatusTable.CorrelationId);
                    SysDictWorkflowLineItemWorkflow dictLineItemWorkflow = new SysDictWorkflowLineItemWorkflow(parentWorkflowTypeName, lineItemWorkflowName);

                    if (this.parmArgs().menuItemName() == dictLineItemWorkflow.recallMenuItem())
                    {
                        this.parmWorkflowWorkItemActionType(WorkflowWorkItemActionType::RecallLineItem);
                    }

                    this.runLineItemWorkflowAction();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkItemsAndTrackingData</Name>
				<Source><![CDATA[
    private container findWorkItemsAndTrackingData(Common workflowEnabledRecord)
    {
        container workItemsContainer;

        [workItemsContainer] = this.findWorkItemsForAnyUser(workflowEnabledRecord);

        // Find tracking status record for current document where the current user is an originator.
        WorkflowTrackingStatusTable trackingStatusTable = Workflow::findTrackingStatusForDocument(workflowEnabledRecord);

        return [workItemsContainer, trackingStatusTable];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkItemsForAnyUser</Name>
				<Source><![CDATA[
    private container findWorkItemsForAnyUser(Common workflowEnabledRecord)
    {
        WorkflowWorkItemTable workflowWorkItemTable;
        WorkflowWorkItemQueueAssignee workItemQueueAssignee;
        List workItems = new List(Types::Guid);

        if (workflowEnabledRecord.TableId == tableNum(WorkflowWorkItemTable))
        {
            WorkflowWorkItemTable sourceWorkItemTable = WorkflowWorkItemTable::findRecId(workflowEnabledRecord.RecId);
            workItems.addEnd(sourceWorkItemTable.Id);
        }

        workflowWorkItemTable.disableCache(true);

        // Work items assigns to any user.
        while select Id from workflowWorkItemTable where
            workflowWorkItemTable.Status == WorkflowWorkItemStatus::Pending &&
            workflowWorkItemTable.RefRecId == workflowEnabledRecord.RecId &&
            workflowWorkItemTable.RefTableId == workflowEnabledRecord.TableId
        {
            workItems.addEnd(workflowWorkItemTable.Id);
        }

        return [workItems.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the main method of <c>WorkflowWorkItemActionManager</c> to initialize the workflow comment parameters.
    /// </summary>
    /// <param name = "_args">Arguments for this class.</param>
    public static void main(Args _args)
    {
        ResWorkflowWorkItemActionManager workflowWorkItemActionManager = new ResWorkflowWorkItemActionManager();
        object caller = _args.caller();

        workflowWorkItemActionManager.parmArgs(_args);
        workflowWorkItemActionManager.parmCaller(caller);
        workflowWorkItemActionManager.parmWorkflowComment(caller.parmWorkflowComment());
        workflowWorkItemActionManager.parmTargetUser(caller.parmTargetUser());
        workflowWorkItemActionManager.parmTargetQueue(caller.parmTargetQueue());
        workflowWorkItemActionManager.parmWorkflowWorkItemActionType(caller.parmWorkflowWorkItemActionType());
        workflowWorkItemActionManager.parmFindWorkflowForAnyUser(caller.parmFindWorkflowForAnyUser());
        workflowWorkItemActionManager.parmIsActionDialogClosedOK(true);
        workflowWorkItemActionManager.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
