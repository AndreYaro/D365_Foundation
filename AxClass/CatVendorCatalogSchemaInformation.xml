<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorCatalogSchemaInformation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CatVendorCatalogSchemaInformation</c> class manages actions around vendor catalog schema, 
/// for example allows an user to download the schema file for a specific vendor catalog.
/// </summary>
public final class CatVendorCatalogSchemaInformation
{
    private const str VendorCatalogSchemaGeneration = "VendorCatalogSchemaGeneration";
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CatVendorCatalog catVendorCatalog =  _args.record() as CatVendorCatalog;
   
        if (!catVendorCatalog)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CatVendorCatalogTemplateCategory vendorCatalogTemplate = _args.parmEnum();
      
        if (vendorCatalogTemplate != CatVendorCatalogTemplateCategory::ProcurementCategory)
        {
            throw error("@SYS18879");
        }
         
        CatVendorCatalogSchemaInformation catVendorCatalogSchemaInformation = new CatVendorCatalogSchemaInformation();
        catVendorCatalogSchemaInformation.downloadVendorCatalogSchema(catVendorCatalog, vendorCatalogTemplate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadVendorCatalogSchema</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads the vendor catalog schema file.
    /// </summary>
    /// <param name="_catalog">
    /// The vendor catalog for which to download the catalog import file template.
    /// </param>
    /// <param name="_vendorCatalogTemplate">
    /// A <c>CatVendorCatalogTemplateCategory</c> enum value that indicates the type of vendor catalog template.
    /// </param>
    private void downloadVendorCatalogSchema(
        CatVendorCatalog _catalog, 
        CatVendorCatalogTemplateCategory _vendorCatalogTemplate = CatVendorCatalogTemplateCategory::ProcurementCategory)
    {
        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        stopWatch.Start();

        CatVendorCatalogSchemaBuilder builder = CatVendorCatalogSchemaBuilder::newFromVendorCatalog(_catalog, _vendorCatalogTemplate);
        var _schema = builder.buildCompositeEntitySchema();

        builder.verifyAndSendFileToUser(_schema);

        stopWatch.Stop();
        
        this.logInstrumentationMeasure(_catalog, VendorCatalogSchemaGeneration, stopWatch.ElapsedMilliseconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInstrumentationMeasure</Name>
				<Source><![CDATA[
    private void logInstrumentationMeasure(CatVendorCatalog _catalog, str _measureName, int64 _measure)
    {
        str context = classStr(CatVendorCatalogSchemaInformation);
        str contextId = int642Str(_catalog.RecId);
        
        Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Info,
            strFmt("Context: %1, ContextInstanceId: %2, MeasureName: %3, Measure: %4", context, contextId, _measureName, _measure));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>