<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalInformationCopy_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>FiscalInformationCopy_BR</c> provides methods to copy fiscal information from a source table to a target table.
/// </summary>
class FiscalInformationCopy_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyFiscalInfoFromCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies fiscal information values from a customer or a vendor that shares the same party.
    /// </summary>
    /// <param name="_common">
    /// The current record that will have the values copied from another one.
    /// </param>
    /// <exception cref="Exception::Error">
    /// When the parameter record is not a customer or a vendor.
    /// </exception>
    public static void copyFiscalInfoFromCustVend(Common _common)
    {
        CustTable custTable;
        VendTable vendTable;
        RecId custTableRecId;
        RecId vendTableRecId;
        DirPartyRecId partyRecId;

        if (_common is CustTable)
        {
            custTable = _common;
            partyRecId = custTable.Party;
            custTableRecId = custTable.RecId;
        }
        else if (_common is VendTable)
        {
            vendTable = _common;
            partyRecId = vendTable.Party;
            vendTableRecId = vendTable.RecId;
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CustTable custTableXCompany;
        select crossCompany custTableXCompany where custTableXCompany.Party == partyRecId && custTableXCompany.RecId != custTableRecId;

        VendTable vendTableXCompany;
        select crossCompany vendTableXCompany where vendTableXCompany.Party == partyRecId && vendTableXCompany.RecId != vendTableRecId;

        if (custTableXCompany)
        {
            FiscalInformationCopy_BR::copyToRelatedEntities(custTableXCompany, _common, false);
        }
        else if (vendTableXCompany)
        {
            FiscalInformationCopy_BR::copyToRelatedEntities(vendTableXCompany, _common, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFiscalInfoFromLogisticsLocationExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies fiscal information values from location.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The current <c>FiscalEstablishment_BR</c> table record that will have the values copied from location.
    /// </param>
    public static void copyFiscalInfoFromLogisticsLocationExt(FiscalEstablishment_BR _fiscalEstablishment)
    {
        DirPartyLocation dirPartyLocation = DirPartyLocation::findRec(_fiscalEstablishment.DirPartyLocation);

        if (dirPartyLocation)
        {
            LogisticsLocationExt logisticsLocationExt = LogisticsLocationExt::find(dirPartyLocation.Location);

            if (logisticsLocationExt)
            {
                FiscalInformationCopy_BR::copyToRelatedEntities(logisticsLocationExt, _fiscalEstablishment, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFiscalInfoToCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies fiscal information values to related records that share the same party across companies.
    /// </summary>
    /// <param name="_sourceCommon">
    /// The current record that holds the values to be copies to other customers and vendors.
    /// </param>
    /// <exception cref="Exception::Error">
    /// When the parameter record is not a customer or vendor.
    /// </exception>
    public static void copyFiscalInfoToCustVend(Common _sourceCommon)
    {
        CustTable custTable;
        VendTable vendTable;
        SalesCarrier salesCarrier;
        DirPartyRecId partyRecId;
        RecId custSourceRecId;
        RecId vendSourceRecId;

        ttsbegin;

        if (_sourceCommon is CustTable)
        {
            custTable = _sourceCommon;
            partyRecId = custTable.Party;
            custSourceRecId = custTable.RecId;
        }
        else if (_sourceCommon is VendTable)
        {
            vendTable = _sourceCommon;
            partyRecId = vendTable.Party;
            vendSourceRecId = vendTable.RecId;

            salesCarrier = SalesCarrier::findByVendorParty_BR(partyRecId, true);

            if (salesCarrier)
            {
                FiscalInformationCopy_BR::copyToRelatedEntities(_sourceCommon, salesCarrier);
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CustTable custTableXCompany;
        while select forUpdate crossCompany custTableXCompany where custTableXCompany.Party == partyRecId && custTableXCompany.RecId != custSourceRecId
        {
            changeCompany(custTableXCompany.company())
            {
                FiscalInformationCopy_BR::copyToRelatedEntities(_sourceCommon, custTableXCompany);
            }
        }

        VendTable vendTableXCompany;
        while select forUpdate crossCompany vendTableXCompany where vendTableXCompany.Party == partyRecId && vendTableXCompany.RecId != vendSourceRecId
        {
            changeCompany(vendTableXCompany.company())
            {
                FiscalInformationCopy_BR::copyToRelatedEntities(_sourceCommon, vendTableXCompany);

                salesCarrier = SalesCarrier::findByVendorParty_BR(partyRecId, true);

                if (salesCarrier)
                {
                    FiscalInformationCopy_BR::copyToRelatedEntities(_sourceCommon, salesCarrier);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFiscalInfoToLogisticsLocationExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies Fiscal information values from fiscal establishment to location.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// The current <c>FiscalEstablishment_BR</c> table record that holds the values to be copies to location.
    /// </param>
    public static void copyFiscalInfoToLogisticsLocationExt(FiscalEstablishment_BR _fiscalEstablishment)
    {
        ttsbegin;

        DirPartyLocation dirPartyLocation = DirPartyLocation::findRec(_fiscalEstablishment.DirPartyLocation);

        if (dirPartyLocation)
        {
            LogisticsLocationExt logisticsLocationExt = LogisticsLocationExt::find(dirPartyLocation.Location, true);

            if (logisticsLocationExt)
            {
                FiscalInformationCopy_BR::copyToRelatedEntities(_fiscalEstablishment, logisticsLocationExt);
            }
            else
            {
                logisticsLocationExt.Location = dirPartyLocation.Location;
                FiscalInformationCopy_BR::copyToRelatedEntities(_fiscalEstablishment, logisticsLocationExt, false);

                unchecked(Uncheck::TableSecurityPermission)
                {
                    logisticsLocationExt.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToRelatedEntities</Name>
				<Source><![CDATA[
    private static void copyToRelatedEntities(Common _sourceCommon, Common _targetCommon, boolean _persist = true)
    {
        SysDictFieldGroup sourceFieldGroup = FiscalInformationCopy_BR::getFiscalInfoDictFieldGroup(_sourceCommon.TableId);
        SysDictFieldGroup targetFieldGroup = FiscalInformationCopy_BR::getFiscalInfoDictFieldGroup(_targetCommon.TableId);

        if (sourceFieldGroup && targetFieldGroup)
        {
            boolean modified = false;
            boolean ret = true;
            for (int i = 1; i <= sourceFieldGroup.numberOfFields(); i++)
            {
                SysDictField sourceField = new SysDictField(_sourceCommon.TableId, sourceFieldGroup.field(i));

                for (int j = 1; j <= targetFieldGroup.numberOfFields(); j++)
                {
                    SysDictField targetField = new SysDictField(_targetCommon.TableId, targetFieldGroup.field(j));

                    if (sourceField.typeId() == targetField.typeId() && sourceField.name() == targetField.name())
                    {
                        if (_targetCommon.(targetField.id()) != _sourceCommon.(sourceField.id()))
                        {
                            _targetCommon.(targetField.id()) = _sourceCommon.(sourceField.id());
                            ret = ret && _targetCommon.validateField(targetField.id());
                            modified = true;
                        }
                    }
                }
            }

            if (!ret)
            {
                throw error("@SYS93289");
            }

            if (_persist && modified)
            {
                ttsbegin;

                unchecked(Uncheck::TableSecurityPermission)
                {
                    _targetCommon.doUpdate();
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalInfoDictFieldGroup</Name>
				<Source><![CDATA[
    private static SysDictFieldGroup getFiscalInfoDictFieldGroup(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(CustTable):
                return new SysDictFieldGroup(tableNum(CustTable), tableFieldgroupStr(CustTable, National_BR));

            case tableNum(VendTable):
                return new SysDictFieldGroup(tableNum(VendTable), tableFieldgroupStr(VendTable, National_BR));

            case tableNum(FiscalEstablishment_BR):
                return new SysDictFieldGroup(tableNum(FiscalEstablishment_BR), tableFieldgroupStr(FiscalEstablishment_BR, TaxRegistrationNumbers));

            case tableNum(SalesCarrier):
                return new SysDictFieldGroup(tableNum(SalesCarrier), tableFieldgroupStr(SalesCarrier, FiscalInformation_BR));

            case tableNum(LogisticsLocationExt):
                return new SysDictFieldGroup(tableNum(LogisticsLocationExt), tableFieldgroupStr(LogisticsLocationExt, FiscalInformation));

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>twoCustVendTableHaveSameFiscalInformation</Name>
				<Source><![CDATA[
    internal static boolean twoCustVendTableHaveSameFiscalInformation(CustVendTable _origin, CustVendTable _current)
    {
        Common originCommon = _origin;
        Common currentCommon = _current;

        SysDictFieldGroup fieldGroup = FiscalInformationCopy_BR::getFiscalInfoDictFieldGroup(_origin.TableId);

        for (int i = fieldGroup.numberOfFields(); i > 0 ; --i)
        {
            FieldId fieldId = fieldGroup.field(i);
            if (originCommon.(fieldId) != currentCommon.(fieldId)) return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>