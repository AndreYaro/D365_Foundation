<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCaseActivitiesHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler for <c>smmActivities</c>.
/// </summary>
class ProjCaseActivitiesHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>smmActivities_Post_delete</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, delete))]
    public static void smmActivities_Post_delete(XppPrePostArgs _args)
    {
        smmActivities activities = _args.getThis();

        // the parent of the deleted activity may have chance to update its start/end dateTime
        smmActivities parent=activities.getParentSmmActivities(activities.orig());

        //After deletion, the parent of the deleted activity may have chance to update its start/end dateTime
        if (parent && !isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            if (parent.StartDateTime == activities.StartDateTime)
            {
                activities.setParentStartDateTime(parent,parent.StartDateTime, activities.getEarliestStartDateFromChildren(parent));
            }
            if (parent.EndDateTime == activities.EndDateTime)
            {
                activities.setParentEndDateTime(parent,parent.EndDateTime, activities.getLatestEndDateFromChildren(parent));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_onValidatedDelete</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(smmActivities), DataEventType::ValidatedDelete)]
    public static void smmActivities_onValidatedDelete(Common _sender, DataEventArgs _e)
    {
        smmActivities activities = _sender;
        validateEventArgs validateEventArgs = _e as validateEventArgs;

        if (ProjCaseActivitiesHandler::checkWorkerOwnsActivity(activities))
        {
            // Cannot delete other people's activities
            validateEventArgs.parmValidateResult(checkFailed("@SYS81037"));
        }

        if (ProjPlanVersion::findByActivityRecId(activities.RecId))
        {
            // If the activity is referenced by project work breakdown structure, then deletion should not be allowed from activities form which should be deleted from project work breakdown structure form.
            throw error("@Proj:ErrorMessageWhenDeletingActivities");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkWorkerOwnsActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the worker owns the activity being deleted.
    /// </summary>
    /// <param name = "_activities">
    /// <c>smmActivities></c> table buffer.
    /// </param>
    /// <returns>
    /// true if <c>ResponsibleWorker</c> on <c>smmActivities</c> is set to worker other than current worker and the activity is not a project activity; otherwise, false.
    /// </returns>
    protected static boolean checkWorkerOwnsActivity(smmActivities _activities)
    {
        return(_activities.ResponsibleWorker && _activities.ResponsibleWorker != smmUtility::getCurrentContactWorker() && !ProjCaseActivitiesHandler::isProjectActivity(_activities));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether the activity is associated to a project.
    /// </summary>
    /// <returns>
    ///     Whether the activity is associated to a project.
    /// </returns>
    /// <remarks>
    ///  Activities that are part of a project WBS are associated to a project.
    /// </remarks>
    public static boolean isProjectActivity(smmActivities _activities)
    {
        HierarchyTreeTable hierarchyTreeTable;
        Hierarchy hierarchy;

        select firstOnly RecId from hierarchyTreeTable
        where hierarchyTreeTable.RefRecId == _activities.RecId
            exists join RecId from hierarchy
            where hierarchy.HierarchyId == hierarchyTreeTable.HierarchyId
                  && hierarchy.HierarchyType == HierarchyType::Project;

        if (hierarchyTreeTable)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smmActivities_Post_update</Name>
				<Source><![CDATA[
    [PostHandlerFor(tableStr(smmActivities), tableMethodStr(smmActivities, update))]
    public static void smmActivities_Post_update(XppPrePostArgs _args)
    {
        smmActivities activities = _args.getThis();

        // If the activity is a project activity, and the Closed status has changed, then sync the JmgJobTable
        if (isConfigurationkeyEnabled(configurationKeyNum(JmgJob))  &&
            ProjActivity::exist(activities.ActivityNumber)       &&
            activities.orig().Closed != activities.Closed)
        {
            JmgJobTable::synchronizeProjActivity(ProjActivity::find(activities.ActivityNumber));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>