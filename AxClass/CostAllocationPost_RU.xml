<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostAllocationPost_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CostAllocationPost_RU
{
    CostAllocationForm_RU       costAllocationForm;

    TmpCostAllocationBase_RU    costAllocationBase;
    TmpCostAllocationResult_RU  costAllocationResult;
    CostAllocationHistory_RU    costAllocationHistory;

    TmpCostAllocationResult_RU  grCostAllocationResult;

    LedgerVoucher               ledgerVoucher;
    LedgerVoucherObject         ledgerVoucherObject;

    Voucher                     costAllocationVoucher;
    Num                         costAllocationNum;

    Sign                        sign;

    CostAllocationParmId_RU     costAllocationParmId;
    Set                         setOrigReverseHistory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkFactureBookProcessingNotExists</Name>
				<Source><![CDATA[
    public boolean checkFactureBookProcessingNotExists(VendInvoiceTrans _sourceVendInvoiceTrans)
    {
        FactureTrans_RU sourceFactureTrans = FactureTrans_RU::findVendInvoiceTrans(_sourceVendInvoiceTrans);

        if (sourceFactureTrans && FactureJour_RU::find(sourceFactureTrans.FactureId, sourceFactureTrans.Module).bookProcessingExists())
        {
            return checkFailed(strfmt("@GLS110618",
                                      _sourceVendInvoiceTrans.vendInvoiceJour().vendName(), sourceFactureTrans.FactureId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSourceVendInvoiceLedgerAccount</Name>
				<Source><![CDATA[
    public void checkSourceVendInvoiceLedgerAccount(VendInvoiceTrans _sourceVendInvoiceTrans)
    {
        if (_sourceVendInvoiceTrans && !_sourceVendInvoiceTrans.LedgerDimension)
        {
            throw error(strfmt("@GLS110801",
                               fieldid2pname(tablenum(VendInvoiceTrans), fieldnum(VendInvoiceTrans, LedgerDimension)),
                               tableStr(VendInvoiceTrans)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAllocationForm</Name>
				<Source><![CDATA[
    public CostAllocationForm_RU costAllocationForm()
    {
        return costAllocationForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateParmId</Name>
				<Source><![CDATA[
    public CostAllocationParmId_RU generateParmId()
    {
        costAllocationParmId = NumberSeq::newGetNum(PurchParameters::numRefCostAllocationParmId_RU()).num();
        if (!costAllocationParmId)
        {
            throw error(strfmt("@SYS53911",PurchParameters::numRefCostAllocationParmId_RU().referenceLabel(),
                               PurchParameters::numRefCostAllocationParmId_RU().referenceModuleLabel()));
        }

        return costAllocationParmId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    protected void initFromCaller(Object _callerForm)
    {
        costAllocationForm      = _callerForm.costAllocationForm();
        sign                    = costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel ? -1 : 1;

        costAllocationBase.setTmpData(_callerForm.costAllocationBase());
        costAllocationResult.setTmpData(_callerForm.costAllocationResult());
        grCostAllocationResult.setTmpData(_callerForm.costAllocationResult());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    protected void initLedgerVoucher(NumberSequenceReference    _numberSeqReference,
                                     SysModule                  _sysModule,
                                     LedgerTransType            _ledgerTransType,
                                     TransDate                  _transDate)
    {
        NumberSeq numberSeq = NumberSeq::newGetNumAndVoucher(_numberSeqReference, _numberSeqReference);

        [costAllocationNum, costAllocationVoucher] = numberSeq.numAndVoucher();

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     _sysModule,
                                                     numberSeq.parmVoucherSequenceCode());

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(costAllocationVoucher,
                                                              _transDate,
                                                              _sysModule,
                                                              _ledgerTransType);

        ledgerVoucherObject.parmCorrection(costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel);
        ledgerVoucher.addVoucher(ledgerVoucherObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Loads distributions for source VendInvoiceTrans referenced by parameters
    /// </summary>
    /// <param name="_accountingEvent">
    /// The <c>AccountingEvent</c> to get distributions for.
    /// </param>
    /// <param name="_sourceDocumentLine">
    /// The <c>SourceDocumentLine</c> to get distributions for.
    /// </param>
    /// <returns>
    ///   container of pairs [LedgerDimension, AmountCur, MonetaryAmount]
    /// </returns>
    protected container loadDistribution(RefRecId _accountingEvent, RefRecId _sourceDocumentLine)
    {
        container               ret;

        List                    sourceLineDistributionList = AccountingDistribution::getDistributionList(_accountingEvent, _sourceDocumentLine);
        ListEnumerator          le                         = sourceLineDistributionList.getEnumerator();

        while (le.moveNext())
        {
            AccountingDistribution sourceDocumentDistribution = le.current();
            ret += [[sourceDocumentDistribution.LedgerDimension, sourceDocumentDistribution.TransactionCurrencyAmount, sourceDocumentDistribution.MonetaryAmount]];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
protected void new()
    {
        setOrigReverseHistory = new Set(Types::Container);
    }
]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        if (!this.validate())
        {
            throw error("@SYS25904");
        }

        try
        {
            ttsbegin;

            this.runPost();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEndActions</Name>
				<Source><![CDATA[
    protected void runEndActions()
    {
        delete_from costAllocationResult
            where costAllocationResult.Mark;

        delete_from costAllocationBase
            notexists join costAllocationResult
                where costAllocationResult.AllocBaseRecId == costAllocationBase.RecId;

        costAllocationForm.executeDS();
        costAllocationForm.initMarkRecordSets();

        if (costAllocationForm.showCancelledHistory() == NoYes::Yes)
        {
            costAllocationForm.initFormData();
        }

        costAllocationForm.fdsVendInvoiceTrans().executeQuery();
        costAllocationForm.recalcAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPost</Name>
				<Source><![CDATA[
    protected void runPost()
    {
        Error::missingOverride(funcname());
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = true;

        select firstonly sum(Amount) from costAllocationResult
            where costAllocationResult.Mark;

        if (!costAllocationResult.Amount)
        {
            ret = checkFailed("@SYS27671");
        }

        if (!costAllocationForm.postingDate())
        {
            if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Allocation)
            {
                ret = checkFailed("@GLS114528");
            }
            else
            {
                ret = checkFailed("@GLS114529");
            }
        }

        if (costAllocationForm.costAllocationProcessType() == CostAllocationProcessType_RU::Cancel)
        {
            while select PostedDate from costAllocationResult
                where costAllocationResult.Mark         &&
                      costAllocationResult.PostedDate   &&
                      costAllocationResult.PostedDate > costAllocationForm.postingDate()
            {
                ret = checkFailed(strfmt("@GLS114530",
                                         costAllocationForm.postingDate(),
                                         costAllocationResult.PostedDate));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        if (!_args || !_args.caller() || !formHasMethod(_args.caller(), identifierstr(costAllocationForm)))
        {
            throw error("@SYS59121");
        }

        CostAllocationPost_RU::newFromCaller(_args.caller()).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCaller</Name>
				<Source><![CDATA[
    public static CostAllocationPost_RU newFromCaller(Object _callerForm)
    {
        CostAllocationPost_RU   costAllocationPost;

        if (! _callerForm ||
            ! formHasMethod(_callerForm, identifierstr(costAllocationType)) ||
            ! formHasMethod(_callerForm, identifierstr(costAllocationForm)) ||
            ! formHasMethod(_callerForm, identifierstr(costAllocationBase)) ||
            ! formHasMethod(_callerForm, identifierstr(costAllocationResult)))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        CostAllocationType_RU costAllocationType = _callerForm.costAllocationType();
        switch (costAllocationType)
        {
            case CostAllocationType_RU::Overhead:
                costAllocationPost =  new CostAllocationPostOverhead_RU();
                break;

            case CostAllocationType_RU::Indebtedness:
                costAllocationPost =  new CostAllocationPostIndebtedness_RU();
                break;

            case CostAllocationType_RU::Expenses:
                costAllocationPost =  new CostAllocationPostExpenses_RU();
                break;
        }

        costAllocationPost.initFromCaller(_callerForm);
        return costAllocationPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates reporting date information for correcting cost allocation.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Thrown in case of an attempt to cancel cost allocations for several periods.
    /// </exception>

    protected void createTransLink()
    {
        RefRecId                    origRecId, reverseRecId;
        LedgerTransLink_RU          ledgerTransLink;
        CostAllocationHistory_RU    origAllocationHistory;
        CostAllocationHistory_RU    allocationHistory;
        Map                         reportingDateMap = new Map(Types::Container, Types::Date);
        SetEnumerator               setEnumerator = setOrigReverseHistory.getEnumerator();

        void validateOriginalDate(Voucher _cancellingVoucher, TransDate _cancellingDate)
        {
            container key = [_cancellingVoucher, _cancellingDate];

            if (! reportingDateMap.exists(key))
            {
                reportingDateMap.insert(key, dateEndMth(origAllocationHistory.TransDate));
            }

            if (reportingDateMap.lookup(key) != dateEndMth(origAllocationHistory.TransDate))
            {
                throw error("@SYP4860749");
            }
        }

        while (setEnumerator.moveNext())
        {
            [origRecId, reverseRecId] = setEnumerator.current();

            origAllocationHistory   = CostAllocationHistory_RU::findRecId(origRecId);
            allocationHistory       = CostAllocationHistory_RU::findRecId(reverseRecId);

            validateOriginalDate(allocationHistory.VoucherInvoice, allocationHistory.TransDate);

            ledgerTransLink = LedgerTransLink_RU::newTrans(allocationHistory, origAllocationHistory);
            ledgerTransLink.parmReportingDate(origAllocationHistory.TransDate);
            ledgerTransLink.parmVoucherField(fieldnum(CostAllocationHistory_RU, VoucherInvoice));
            ledgerTransLink.parmAccountingDateField(fieldnum(CostAllocationHistory_RU, TransDate));
            ledgerTransLink.run();

            if (allocationHistory.VoucherIndebtness)
            {
                validateOriginalDate(allocationHistory.VoucherIndebtness, allocationHistory.TransDate);

                ledgerTransLink.parmVoucherField(fieldnum(CostAllocationHistory_RU, VoucherIndebtness));
                ledgerTransLink.run();
            }

            if (allocationHistory.AllocatedInvoiceTransRecId && allocationHistory.VoucherCreditNote)
            {
                origAllocationHistory.TransDate = VendInvoiceTrans::findRecId(origAllocationHistory.AllocatedInvoiceTransRecId).InvoiceDate;
                allocationHistory.TransDate     = VendInvoiceTrans::findRecId(allocationHistory.AllocatedInvoiceTransRecId).InvoiceDate;

                validateOriginalDate(allocationHistory.VoucherCreditNote, allocationHistory.TransDate);

                ledgerTransLink = LedgerTransLink_RU::newTrans(allocationHistory, origAllocationHistory);
                ledgerTransLink.parmReportingDate(origAllocationHistory.TransDate);
                ledgerTransLink.parmVoucherField(fieldnum(CostAllocationHistory_RU, VoucherCreditNote));
                ledgerTransLink.parmAccountingDateField(fieldnum(CostAllocationHistory_RU, TransDate));
                ledgerTransLink.run();
            }
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
