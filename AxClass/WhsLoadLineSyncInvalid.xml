<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLoadLineSyncInvalid</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSLoadLineSyncInvalid</c> class synchronizes the invalid flag between load lines and the load table.
/// </summary>
public class WhsLoadLineSyncInvalid
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the <c>WHSLoadTable</c> record when a load line is deleted.
    /// </summary>
    /// <param name="_whsLoadLine">
    ///    The load line that is deleted.
    /// </param>
    public static void delete(WHSLoadLine _whsLoadLine)
    {
        if (   _whsLoadLine.Invalid
            && !WHSLoadTable::hasLoadInvalidLines(_whsLoadLine.LoadId,_whsLoadLine.RecId))
        {
            WHSLoadLineSyncInvalid::setLoadTableInvalid(_whsLoadLine.LoadId,NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the <c>WHSLoadTable</c> record when a load line is inserted.
    /// </summary>
    /// <param name="_whsLoadLine">
    ///    The load line that is inserted.
    /// </param>
    public static void insert(WHSLoadLine _whsLoadLine)
    {
        if (_whsLoadLine.Invalid)
        {
            WHSLoadLineSyncInvalid::setLoadTableInvalid(_whsLoadLine.LoadId,_whsLoadLine.Invalid);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadTableInvalid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the <c>WHSLoadTable</c> record if thevalue of the invalid flag changes.
    /// </summary>
    /// <param name="_loadId">
    ///    The load ID.
    /// </param>
    /// <param name="_invalid">
    ///    The new value of the invalid flag.
    /// </param>
    private static void setLoadTableInvalid(
        WHSLoadId  _loadId,
        WHSInvalid _invalid)
    {
        if (_loadId)
        {
            WHSLoadTable    whsLoadTable;

            ttsbegin;
            update_recordset whsLoadTable
                setting Invalid = _invalid
                where whsLoadTable.LoadId  == _loadId
                   && whsLoadTable.Invalid != _invalid;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the <c>WHSLoadTable</c> record when a load line is updated.
    /// </summary>
    /// <param name="_whsLoadLine">
    ///    The load line that is updated.
    /// </param>
    public static void update(WHSLoadLine _whsLoadLine)
    {
        if (_whsLoadLine.Invalid != _whsLoadLine.orig().Invalid)
        {
            if (_whsLoadLine.Invalid)
            {
                WHSLoadLineSyncInvalid::setLoadTableInvalid(_whsLoadLine.LoadId,_whsLoadLine.Invalid);
            }
            else
            {
                if (!WHSLoadTable::hasLoadInvalidLines(_whsLoadLine.LoadId,_whsLoadLine.RecId))
                {
                    WHSLoadLineSyncInvalid::setLoadTableInvalid(_whsLoadLine.LoadId,_whsLoadLine.Invalid);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>