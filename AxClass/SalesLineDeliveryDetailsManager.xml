<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesLineDeliveryDetailsManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class implements all the operations done on the <c>SalesLineDeliveryDetails</c> form.
/// </summary>
public class SalesLineDeliveryDetailsManager
{
    private SalesLine                           originalLine;
    private SalesLine                           simulatedLine;
    private InventDim                           originalInventDimCache;
    private InventDim                           simulatedInventDimCache;
    UnitOfMeasureSymbol                         inventoryUnit;
    private SalesLinePartialDeliveryProvider    partialDeliveryProvider;

    SalesTmpDeliverySuggestions                 suggestion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>SalesLineDeliveryDetailsManager</c> class.
    /// </summary>
    /// <param name = "_originalLine">The original sales line.</param>
    /// <param name = "_simulatedLine">A copy of the original sales line which will keep the simulated results.</param>
    /// <returns>The constructed object.</returns>
    public static SalesLineDeliveryDetailsManager construct(SalesLine _originalLine, SalesLine _simulatedLine = _originalLine.data())
    {
        SalesLineDeliveryDetailsManager result = new SalesLineDeliveryDetailsManager();

        result.originalLine = _originalLine;
        result.simulatedLine = _simulatedLine;
        result.inventoryUnit = _originalLine.inventTable().inventUnitId();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applySuggestion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the simulation by applying a precalculated suggestion.
    /// </summary>
    /// <param name = "_suggestion">The suggestion to use.</param>
    /// <param name = "_dimensionsToMerge">A set of editable dimensions that should get applied.</param>
    /// <param name = "_lockedOrVisibleDims">A set of editable dimensions that are locked or visible.</param>
    public void applySuggestion(
        SalesTmpDeliverySuggestions _suggestion,
        InventDimParm               _dimensionsToMerge,
        InventDimParm               _lockedOrVisibleDims)
    {
        suggestion = _suggestion;
        simulatedLine.DeliveryType              = _suggestion.DeliveryType;
        simulatedLine.SourcingVendAccount       = _suggestion.SourcingVendAccount;
        simulatedLine.SourcingOrigin            = _suggestion.SourcingOrigin;
        simulatedLine.SourcingCompanyId         = _suggestion.SourcingCompanyId;
        simulatedLine.SourcingInventSiteId      = _suggestion.SourcingInventSiteId;
        simulatedLine.SourcingInventLocationId  = _suggestion.SourcingInventLocationId;
        this.applyChanges(_suggestion.ShipQty, InventDim::find(_suggestion.InventDimId), _dimensionsToMerge, _suggestion.DeliveryModeId, _lockedOrVisibleDims);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the simulation by trying to ship the full quantity using the specified inventory dimensions.
    /// </summary>
    /// <param name = "_newDimensions">New dimension values to use.</param>
    /// <param name = "_dimensionsToMerge">A set of editable dimensions that should get applied.</param>
    /// <param name = "_lockedOrVisibleDims">A set of editable dimensions that are locked or visible.</param>
    public void applyInventDim(InventDim _newDimensions, InventDimParm _dimensionsToMerge,  InventDimParm _lockedOrVisibleDims)
    {
        this.applyChanges(originalLine.SalesQty, _newDimensions, _dimensionsToMerge, null, _lockedOrVisibleDims);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDlvMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the simulation by choosing a different delivery mode.
    /// </summary>
    /// <param name = "_newDlvMode">The delivery mode to use.</param>
    public void applyDlvMode(DlvMode _newDlvMode)
    {
        this.applyChanges(0, null, null, _newDlvMode.Code, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCommitChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the simulated changes can be saved to the actual sales order line, asking the user for confirmation if needed.
    /// </summary>
    /// <returns>True if the changes can be saved, false otherwise.</returns>
    public boolean canCommitChanges()
    {
        boolean result = true;
        boolean productDimensionsChanged;
        Set modifiedDimensionsSet =  new Set(Types::Integer);

        // Dialog asking the user if to default the vendor should not be shown since vendor is explicit in deliver alternatives
        simulatedLine.SkipDefaultingSourcingVendor = NoYes::Yes;

        if (result && simulatedLine.DeliveryType != originalLine.DeliveryType)
        {
            result = simulatedLine.validateField(fieldNum(SalesLine, DeliveryType));
        }

        if (result && simulatedLine.SourcingVendAccount != originalLine.SourcingVendAccount)
        {
            result = simulatedLine.validateField(fieldNum(SalesLine, SourcingVendAccount));
        }

        if (result && simulatedLine.InventDimId != originalLine.InventDimId)
        {
            modifiedDimensionsSet = SalesLineDeliveryDetailsManager::modifiedDimensions(this.originalInventDim(), this.simulatedInventDim());

            result = originalLine.type().validateModifyInventDimSet(this.simulatedInventDim(), modifiedDimensionsSet);
        }

        if (result)
        {
            if (simulatedLine.SalesQty < originalLine.SalesQty)
            {
                partialDeliveryProvider =  SalesLinePartialDeliveryProvider::newFromLines(originalLine, simulatedLine, modifiedDimensionsSet);
                partialDeliveryProvider.promptForDecision();

                result = partialDeliveryProvider.getPartialDeliveryActions() != SalesLinePartialDeliveryActions::NoAction;
            }
            else
            {
                result = simulatedLine.validateWrite();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the simulated changes to the actual sales order line.
    /// </summary>
    public void commitChanges()
    {
        if (simulatedLine.SalesQty < originalLine.SalesQty)
        {
            partialDeliveryProvider.execute();
        }
        else
        {
            if (simulatedLine.DlvMode != originalLine.DlvMode)
            {
                originalLine.DlvMode = simulatedLine.DlvMode;
                originalLine.modifiedField(fieldNum(SalesTable, DlvMode));
            }

            originalLine.initFromSourcingSpecification(simulatedLine);

            // We need to supress "Lead time changed, recalculate ship and receipt dates?" from coming up - so we assign the dates here
            if (originalLine.isDerivedIntercompanyLine())
            {
                originalLine.ReceiptDateConfirmed = simulatedLine.ReceiptDateRequested;
                originalLine.ShippingDateConfirmed = simulatedLine.ShippingDateRequested;
            }
            else
            {
                originalLine.ReceiptDateRequested = simulatedLine.ReceiptDateRequested;
                originalLine.ShippingDateRequested = simulatedLine.ShippingDateRequested;
            }

            if (this.simulatedInventDim().InventDimId != originalInventDimCache.InventDimId)
            {
                originalLine.modifyInventDimSet(this.simulatedInventDim(),
                                                SalesLineDeliveryDetailsManager::modifiedDimensions(originalInventDimCache, simulatedInventDimCache),
                                                true, // resetPrice
                                                true); // skipInventDimDefaulting

                if (simulatedLine.DeliveryDateControlType != originalLine.DeliveryDateControlType)
                {
                    DialogButton selection = Box::yesNo(strFmt("@SCM:DeliveryDateControlTypeChangeMessage", originalLine.DeliveryDateControlType), DialogButton::Yes);
                    if (selection == DialogButton::No)
                    {
                        return;
                    }
                }
            }

            // Assign dates again to ensure the user selected dates are written back on the lines.
            if (originalLine.isDerivedIntercompanyLine())
            {
                originalLine.ReceiptDateConfirmed = simulatedLine.ReceiptDateRequested;
                originalLine.ShippingDateConfirmed = simulatedLine.ShippingDateRequested;
            }
            else
            {
                originalLine.ReceiptDateRequested = simulatedLine.ReceiptDateRequested;
                originalLine.ShippingDateRequested = simulatedLine.ShippingDateRequested;
            }

            if (originalLine.isDeliveryDateControlTypeClassicCTP())
            {
                originalLine.ReceiptDateConfirmed = dateNull();
                originalLine.ShippingDateConfirmed = dateNull();
                SalesLineDeliveryDetailsHelper::resetReqTrans(originalLine, originalLine.inventDimId);
                SalesLine::setConfirmedDatesUsingUIStrategy(originalLine);
            }
            
            ttsbegin;
            originalLine.update();
            ttscommit;

            if (this.savedDatesAreDifferentFromSuggested(suggestion, originalLine))
            {
                warning("@SCM:SavedDeliveryDatesAreDifferentFromDeliveryAlternativeSuggestion");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>savedDatesAreDifferentFromSuggested</Name>
				<Source><![CDATA[
    private boolean savedDatesAreDifferentFromSuggested(
        SalesTmpDeliverySuggestions _suggestion,
        SalesLine                   _savedSalesLine)
    {
        if (_suggestion.RecId == 0)
        {
            // Suggestion was not provided so it is not possible to claim that the dates are different from suggested
            return false;
        }

        if (originalLine.isDerivedIntercompanyLine())
        {
            return (suggestion.ShipDate != _savedSalesLine.ShippingDateConfirmed)
                || (suggestion.ReceiptDate != _savedSalesLine.ReceiptDateConfirmed);
        }
        else
        {
            return (_savedSalesLine.ShippingDateRequested && suggestion.ShipDate != _savedSalesLine.ShippingDateRequested)
                || (_savedSalesLine.ReceiptDateRequested && suggestion.ReceiptDate != _savedSalesLine.ReceiptDateRequested)
                || (_savedSalesLine.ShippingDateConfirmed && suggestion.ShipDate != _savedSalesLine.ShippingDateConfirmed)
                || (_savedSalesLine.ReceiptDateConfirmed && suggestion.ReceiptDate != _savedSalesLine.ReceiptDateConfirmed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyChanges</Name>
				<Source><![CDATA[
    private void applyChanges(
        SalesQty        _newQty,
        InventDim       _newDimensions,
        InventDimParm   _dimensionsToMerge,
        DlvModeId       _newDlvMode,
        InventDimParm   _lockedOrVisibleDims)
    {
        Debug::assert(appl.ttsLevel() == 0);

        if (_newDimensions)
        {
            InventDim     salesInventDim;

            salesInventDim.initFromInventDim(this.originalInventDim(), _lockedOrVisibleDims.selectedDimFields());

            // always merge site and warehouse - they both need to be used and coherent on the sales line
            InventDimParm dimensionsToMerge;
            dimensionsToMerge.data(_dimensionsToMerge);
            dimensionsToMerge.InventSiteIdFlag = NoYes::Yes;
            dimensionsToMerge.InventLocationIdFlag = NoYes::Yes;

            salesInventDim.initFromInventDim(_newDimensions, dimensionsToMerge.selectedDimFields());

            simulatedLine.InventDimId = InventDim::findOrCreate(salesInventDim).InventDimId;
        }

        if (_newQty)
        {
            simulatedLine.SalesQty = _newQty;

            InventQty inventQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(simulatedLine.ItemId,
                                                                                                        simulatedLine.InventDimId,
                                                                                                        _newQty,
                                                                                                        simulatedLine.SalesUnit,
                                                                                                        inventoryUnit,
                                                                                                        NoYes::Yes);

            simulatedLine.QtyOrdered = inventQty;
            simulatedLine.RemainInventPhysical = inventQty + originalLine.RemainInventPhysical - originalLine.QtyOrdered;
        }

        if (_newDlvMode)
        {
            simulatedLine.DlvMode = _newDlvMode;
        }

        simulatedLine.ReceiptDateRequested = dateNull();
        simulatedLine.ShippingDateRequested = dateNull();
        simulatedLine.ReceiptDateConfirmed = dateNull();
        simulatedLine.ShippingDateConfirmed = dateNull();

        ttsbegin;
        if (simulatedLine.isDeliveryDateControlTypeClassicCTP())
        {
            SalesLineDeliveryDetailsHelper::simulateExplosion(simulatedLine, this.originalInventDim(),simulatedLine.inventDim());
        }

        SalesCalcAvailableDlvDates::initDateFields(simulatedLine);
        ttsabort;

        FormObjectSet simulatedLineDS = FormDataUtil::getFormDataSource(simulatedLine);
        if (simulatedLineDS)
        {
            simulatedLineDS.research(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalInventDim</Name>
				<Source><![CDATA[
    private InventDim originalInventDim()
    {
        if (originalInventDimCache.inventDimId != originalLine.InventDimId)
        {
            originalInventDimCache = originalLine.inventDim();
        }
        return originalInventDimCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulatedInventDim</Name>
				<Source><![CDATA[
    private InventDim simulatedInventDim()
    {
        if (simulatedInventDimCache.inventDimId != simulatedLine.InventDimId)
        {
            simulatedInventDimCache = simulatedLine.inventDim();
        }
        return simulatedInventDimCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifiedDimensions</Name>
				<Source><![CDATA[
    public static Set modifiedDimensions(InventDim _originalDimensions, InventDim _simulatedDimensions)
    {
        Set result = new Set(Types::Integer);

        ListEnumerator          dimFields   = InventDim::dimFieldListEnumerator();

        while (dimFields.moveNext())
        {
            FieldId dimFieldId = dimFields.current();

            if (_originalDimensions.(dimFieldId) != _simulatedDimensions.(dimFieldId)
                && SalesLineDeliveryDetailsManager::isDimensionModified(dimFieldId))
            {
                result.add(dimFieldId);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimensionModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines wheter change of a specific inventory dimension field is considered a change to the inventory dimension.       
    /// </summary>
    /// <param name = "_dimFieldId">
    /// A <c>FieldId</c> type specifying the inventory dimension field to validate.
    /// </param>
    /// <returns>
    /// true if a given field change is considered a change to the inventory dimension, otherwise; false. 
    /// </returns>
    private static boolean isDimensionModified(FieldId _dimFieldId)
    {
        boolean ret; 
        
        if (InventDim::isFieldIdStorageDimension(_dimFieldId))
        {
            if (_dimFieldId == fieldNum(InventDim, InventSiteId) || _dimFieldId == fieldNum(InventDim, InventLocationId))
            {
                ret = true;
            }
        }
        else
        {
            ret = true;
        }
        
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>