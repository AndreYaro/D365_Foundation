<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalDocumentLineLedgerDimensionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FBFiscalDocumentLineLedgerDimensionHelper</c> class helps to collect ledger dimensions for the fiscal document line.
/// </summary>
public final class FBFiscalDocumentLineLedgerDimensionHelper
{
    private FiscalDocument_BR fiscalDocument;
    private FiscalDocumentLine_BR fiscalDocumentLine;

    private const TransDate fiscalDate = 01\11\2017;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills ledger dimension.
    /// </summary>
    public static void fillLedgerDimension()
    {
        FBFiscalDocumentLineLedgerDimensionHelper helper = new FBFiscalDocumentLineLedgerDimensionHelper();

        helper.fillLedgerDimensionFromVendInvoice();

        helper.fillLedgerDimensionFromCustInvoice();

        helper.fillLedgerDimensionFromSalesComplementary();

        helper.fillLedgerDimensionFromPurchComplementary();

        helper.fillLedgerDimensionFromInventTransfer();

        helper.fillLedgerDimensionFromTaxFiscalDocument();

        helper.fillLedgerDimensionFromCustPackingSlip();

        helper.fillLedgerDimensionFromProjectInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSourceQuery</Name>
				<Source><![CDATA[
    private Query createSourceQuery()
    {
        Query sourceQuery = new Query();
        QueryBuildDataSource qbds = sourceQuery.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.addRange(fieldNum(FiscalDocumentLine_BR, FinancialLedgerDimension)).value(queryValue(0));
        qbds.addSelectionField(fieldNum(FiscalDocumentLine_BR, RecId));

        qbds = qbds.addDataSource(tableNum(FiscalDocument_BR));
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, FiscalDocument), fieldNum(FiscalDocument_BR, RecId));
        qbds.addRange(fieldNum(FiscalDocument_BR, FiscalDocumentDate)).value(queryRange(fiscalDate, maxDate()));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, RecId));
        qbds.fetchMode(QueryFetchMode::One2One);

        return sourceQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordInsertList</Name>
				<Source><![CDATA[
    private RecordInsertList initRecordInsertList(FBFiscalDocumentLineLedgerDimRecIdTmp _ledgerDimRecIdTable)
    {
        return new RecordInsertList(tableNum(FBFiscalDocumentLineLedgerDimRecIdTmp), true, true, true, true, true, _ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoRecordInsertList</Name>
				<Source><![CDATA[
    private void insertIntoRecordInsertList(RecordInsertList _ril, FBFiscalDocumentLineLedgerDimRecIdTmp _ledgerDimRecIdTable)
    {
        if (_ledgerDimRecIdTable.LedgerDimension && _ril)
        {
            _ril.add(_ledgerDimRecIdTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRefLink</Name>
				<Source><![CDATA[
    private QueryBuildDataSource addRefLink(Query _sourceQuery, TableId _refTableId, FieldId _refTableIdField, FieldId _refFieldIdField)
    {
        QueryBuildDataSource qbds = _sourceQuery.dataSourceTable(tableNum(FiscalDocumentLine_BR)).addDataSource(_refTableId);
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, RefTableId), _refTableIdField);
        qbds.addLink(fieldNum(FiscalDocumentLine_BR, RefRecId), _refFieldIdField);
        qbds.fetchMode(QueryFetchMode::One2One);

        return qbds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromVendInvoice</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromVendInvoice()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(VendInvoiceTrans), fieldNum(VendInvoiceTrans, TableId), fieldNum(VendInvoiceTrans, RecId));

        qbds = qbds.addDataSource(tableNum(PurchLine));
        qbds.addLink(fieldNum(VendInvoiceTrans, InventTransId), fieldNum(PurchLine, InventTransId));
        qbds.joinMode(JoinMode::OuterJoin);

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorVendInvoice_BR::getFinancialDimensionFromVendInvoiceTransAndPurchLine(
                qr.get(tableNum(VendInvoiceTrans)),
                qr.get(tableNum(PurchLine)));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromCustInvoice</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromCustInvoice()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(CustInvoiceTrans), fieldNum(CustInvoiceTrans, TableId), fieldNum(CustInvoiceTrans, RecId));

        qbds = qbds.addDataSource(tableNum(SalesLine));
        qbds.addLink(fieldNum(CustInvoiceTrans, InventTransId), fieldNum(SalesLine, InventTransId));
        qbds.joinMode(JoinMode::OuterJoin);

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorCustInvoice_BR::getFinancialDimension(
                qr.get(tableNum(CustInvoiceTrans)),
                qr.get(tableNum(SalesLine)));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromSalesComplementary</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromSalesComplementary()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(SalesComplementaryInvoiceLine), fieldNum(SalesComplementaryInvoiceLine, TableId), fieldNum(SalesComplementaryInvoiceLine, RecId));

        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.addLink(fieldNum(SalesComplementaryInvoiceLine, OriginalFiscalDocumentLine), fieldNum(FiscalDocumentLine_BR, RecId));

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorSalesComplInv::getFinancialDimension(
                qr.get(tableNum(SalesComplementaryInvoiceLine)),
                qr.get(tableNum(FiscalDocumentLine_BR), 2));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromPurchComplementary</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromPurchComplementary()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(PurchComplementaryInvoiceLine), fieldNum(PurchComplementaryInvoiceLine, TableId), fieldNum(PurchComplementaryInvoiceLine, RecId));

        qbds = qbds.addDataSource(tableNum(FiscalDocumentLine_BR));
        qbds.addLink(fieldNum(PurchComplementaryInvoiceLine, ComplementedFiscalDocumentLine), fieldNum(FiscalDocumentLine_BR, RecId));

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorPurchComplInv::getFinancialDimension(
                qr.get(tableNum(PurchComplementaryInvoiceLine)),
                qr.get(tableNum(FiscalDocumentLine_BR), 2));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromInventTransfer</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromInventTransfer()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(InventTransferJourLine), fieldNum(InventTransferJourLine, TableId), fieldNum(InventTransferJourLine, RecId));

        qbds = sourceQuery.dataSourceTable(tableNum(FiscalDocument_BR)).addDataSource(tableNum(InventTransferJour));
        qbds.addLink(fieldNum(FiscalDocument_BR, RefTableId), fieldNum(InventTransferJour, TableId));
        qbds.addLink(fieldNum(FiscalDocument_BR, RefRecId), fieldNum(InventTransferJour, RecId));
        qbds.fetchMode(QueryFetchMode::One2One);

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorInvTransfer_BR::getFinancialDimension(
                qr.get(tableNum(InventTransferJourLine)),
                qr.get(tableNum(InventTransferJour)));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromTaxFiscalDocument</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromTaxFiscalDocument()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(TaxFiscalDocumentLine_BR), fieldNum(TaxFiscalDocumentLine_BR, TableId), fieldNum(TaxFiscalDocumentLine_BR, RecId));

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorTaxTransfer_BR::getFinancialDimension(qr.get(tableNum(TaxFiscalDocumentLine_BR)));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromCustPackingSlip</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromCustPackingSlip()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(CustPackingSlipTrans), fieldNum(CustPackingSlipTrans, TableId), fieldNum(CustPackingSlipTrans, RecId));
        qbds.addSelectionField(fieldNum(CustPackingSlipTrans, RecId));

        qbds = qbds.addDataSource(tableNum(SalesLine));
        qbds.addLink(fieldNum(CustPackingSlipTrans, InventTransId), fieldNum(SalesLine, InventTransId));

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorPackingSlip_BR::getFinancialDimension(qr.get(tableNum(SalesLine)));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillLedgerDimensionFromProjectInvoice</Name>
				<Source><![CDATA[
    private void fillLedgerDimensionFromProjectInvoice()
    {
        FBFiscalDocumentLineLedgerDimRecIdTmp ledgerDimRecIdTable;
        RecordInsertList ril = this.initRecordInsertList(ledgerDimRecIdTable);

        Query sourceQuery = this.createSourceQuery();
        QueryBuildDataSource qbds = this.addRefLink(sourceQuery, tableNum(ProjInvoiceJour), fieldNum(ProjInvoiceJour, TableId), fieldNum(ProjInvoiceJour, RecId));

        QueryRun qr = new QueryRun(sourceQuery);

        while (qr.next())
        {
            ledgerDimRecIdTable.RefRecId = qr.get(tableNum(FiscalDocumentLine_BR)).RecId;
            ledgerDimRecIdTable.LedgerDimension = FiscalDocParmDataCreatorProjInv_BR::getFinancialDimension(qr.get(tableNum(ProjInvoiceJour)));

            this.insertIntoRecordInsertList(ril, ledgerDimRecIdTable);
        }

        this.updateFiscalDocumentLine(ril, ledgerDimRecIdTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocumentLine</Name>
				<Source><![CDATA[
    private void updateFiscalDocumentLine(RecordInsertList _ril, FBFiscalDocumentLineLedgerDimRecIdTmp _ledgerDimRecIdTable)
    {
        if (_ril)
        {
            _ril.insertDatabase();
        }

        ttsbegin;

        update_recordset fiscalDocumentLine setting FinancialLedgerDimension = _ledgerDimRecIdTable.LedgerDimension
            join _ledgerDimRecIdTable
                where _ledgerDimRecIdTable.RefRecId == fiscalDocumentLine.RecId
                    && fiscalDocumentLine.FinancialLedgerDimension == 0;

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>