<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerTurnoverTypeCustVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RLedgerTurnoverTypeCustVend</c> class implements common logic for customer and vendor turnover statements.
/// </summary>
abstract class RLedgerTurnoverTypeCustVend extends RLedgerTurnoverType
{
    const int glAccount = 1;
    const int custVendAccount = 2;

    const str recIdFieldName = 'RecId';

    Voucher         voucher;
    TransDate       accountingDate;
    PostingProfile  postingProfile;
    MainAccountNum  mainAccountNum;
    container       groupParamNames;
    Set             dimParamSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMainAccountRange</Name>
				<Source><![CDATA[
    public void addMainAccountRange(MainAccountRange _accountRange, boolean _offset = false)
    {
        if (! _offset)
        {
            super(_accountRange, _offset);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>counteragentName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a conteragent name for the code.
    /// </summary>
    /// <param name="_custVendAccount">
    /// The conteragent code.
    /// </param>
    /// <returns>
    /// A conteragent name for the code.
    /// </returns>
    abstract protected Name counteragentName(CustVendAC _custVendAccount)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrecalcData</Name>
				<Source><![CDATA[
    public void createPrecalcData(Common _trans,
                                  Common _transHeader,
                                  Common _transSplit)
    {
        int                                  idx;
        str                                  value;
        str                                  paramName;
        RecId                                combinationRecId;
        boolean                              newCombination;
        RLedgerTurnoverParamTransLink        paramTransLink;
        Map                                  mapParamValues;
        MapEnumerator                        mapEnumerator;
        RLedgerTurnoverParamHashKey          paramHashKey;
        CustVendTrans                        custVendTrans  = _trans;
        container                            paramNames     = this.groupParamNames();

        paramHashKey = new RLedgerTurnoverParamHashKey();

        ttsBegin;

        paramTransLink = RLedgerTurnoverParamTransLink::find(custVendTrans.TableId, custVendTrans.RecId, true);
        if (paramTransLink)
        {
            mapParamValues = RLedgerTurnoverParamValue::getValues(paramTransLink.ParamValueCombination);
        }

        for (idx = 1; idx <= conlen(paramNames); idx++)
        {
            paramName = conpeek(paramNames, idx);
            switch (paramName)
            {
                case conpeek(paramNames, glAccount) :
                    if (! mapParamValues)
                    {
                        this.getMainAccountNum(custVendTrans);
                        value = mainAccountNum;
                    }
                    break;

                case conpeek(paramNames, custVendAccount) :
                    if (! mapParamValues)
                    {
                        value = custVendTrans.AccountNum;
                    }
                    break;

                default :
                    if (! mapParamValues)
                    {
                        value = RLedgerTurnoverType::getDefaultDimensionDisplayValue(custVendTrans.DefaultDimension, mapDimAttrRecId.lookup(paramName));
                    }
            }

            if (mapParamValues)
            {
                if (! mapParamValues.exists(paramName))
                {
                    throw error("@SYS4081708");
                }

                value = con2Str(mapParamValues.lookup(paramName));
            }

            paramHashKey.addParamValue(paramName, value);
        }

        [combinationRecId, newCombination] = RLedgerTurnoverParamValueCombination::findOrCreate(this.reportType(), paramHashKey.getParamStr());

        paramTransLink.ParamValueCombination = combinationRecId;
        if (paramTransLink.RecId)
        {
            paramTransLink.update();
        }
        else
        {
            paramTransLink.RefRecId     = custVendTrans.RecId;
            paramTransLink.RefTableId   = custVendTrans.TableId;
            paramTransLink.insert();
        }

        if (newCombination)
        {
            mapEnumerator = paramHashKey.mapParamValues().getEnumerator();
            while (mapEnumerator.moveNext())
            {
                RLedgerTurnoverParamValue::create(mapEnumerator.currentKey(), con2Str(mapEnumerator.currentValue()), combinationRecId);
            }
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the transaction field holding the counteragent account.
    /// </summary>
    /// <returns>
    /// The field ID for the transaction field holding the counteragent account.
    /// </returns>
    abstract protected FieldId fieldAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the transaction field holding the invoice ID.
    /// </summary>
    /// <returns>
    /// The field ID for the transaction field holding the invoice ID.
    /// </returns>
    abstract protected FieldId fieldInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldMainAccount</Name>
				<Source><![CDATA[
    public container fieldMainAccount()
    {
        return [tablenum(MainAccount), fieldnum(MainAccount, MainAccountId)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldPostingProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the transaction field holding the posting profile.
    /// </summary>
    /// <returns>
    /// The field ID for the transaction field holding the posting profile.
    /// </returns>
    abstract protected FieldId fieldPostingProfile()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the settlement transaction field holding the amount in currency.
    /// </summary>
    /// <returns>
    /// The field ID for the settlement transaction field holding the amount in currency.
    /// </returns>
    abstract protected FieldId fieldSettleAmountCur()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettleAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the settlement transaction field holding the amount in accounting currency.
    /// </summary>
    /// <returns>
    /// The field ID for the settlement transaction field holding the amount in accounting currency.
    /// </returns>
    abstract protected FieldId fieldSettleAmountMST()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettleAmountMSTSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the settlement transaction field holding the amount in reporting currency.
    /// </summary>
    /// <returns>
    /// The field ID for the settlement transaction field holding the amount in reporting currency.
    /// </returns>
    abstract protected FieldId fieldSettleAmountMSTSec()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettleExchAdj</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the settlement transaction field holding the exchange adjustment amount.
    /// </summary>
    /// <returns>
    /// The field ID for the settlement transaction field holding the exchange adjustment amount.
    /// </returns>
    abstract protected FieldId fieldSettleExchAdj()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettleExchAdjSec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the settlement transaction field holding the exchange adjustment amount for reporting currency.
    /// </summary>
    /// <returns>
    /// The field ID for the settlement transaction field holding the exchange adjustment amount for reporting currency.
    /// </returns>
    abstract protected FieldId fieldSettleExchAdjSec()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldSettleTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the settlement transaction field holding the transaction record ID.
    /// </summary>
    /// <returns>
    /// The field ID for the settlement transaction field holding the transaction record ID.
    /// </returns>
    abstract protected FieldId fieldSettleTransRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the transaction field holding the transaction type.
    /// </summary>
    /// <returns>
    /// The field ID for the transaction field holding the transaction type.
    /// </returns>
    abstract protected FieldId fieldTransType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field ID for the transaction field holding the transaction voucher.
    /// </summary>
    /// <returns>
    /// The field ID for the transaction field holding the transaction voucher.
    /// </returns>
    abstract protected FieldId fieldVoucher()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the Main account for the transaction.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The transaction table buffer.
    /// </param>
    protected void getMainAccountNum(CustVendTrans _custVendTrans)
    {
        LedgerDimensionAccount getLedgerDimension(boolean _theSameCreatedTransactionId)
        {
            GeneralJournalAccountEntry generalJournalAccountEntry;
            GeneralJournalEntry generalJournalEntry;
            SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

            select firstonly LedgerDimension from generalJournalAccountEntry
                where (!_theSameCreatedTransactionId || generalJournalAccountEntry.CreatedTransactionId == _custVendTrans.CreatedTransactionId)
                    && generalJournalAccountEntry.IsCorrection == _custVendTrans.Correct
                    && ((_custVendTrans.AmountMST && generalJournalAccountEntry.AccountingCurrencyAmount * _custVendTrans.AmountMST > 0) ||
                        (! _custVendTrans.AmountMST && generalJournalAccountEntry.ReportingCurrencyAmount * _custVendTrans.ReportingCurrencyAmount > 0))
                    && generalJournalAccountEntry.PostingType in this.ledgerPostingType()
                exists join generalJournalEntry
                    where generalJournalEntry.RecId  == generalJournalAccountEntry.GeneralJournalEntry
                       && generalJournalEntry.Ledger == Ledger::current()
                exists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
                       && subledgerVoucherGeneralJournalEntry.Voucher             == voucher
                       && subledgerVoucherGeneralJournalEntry.AccountingDate      == accountingDate;

            return generalJournalAccountEntry.LedgerDimension;
        }

        if (_custVendTrans.Voucher          != voucher          ||
            _custVendTrans.TransDate        != accountingDate   ||
            _custVendTrans.PostingProfile   != postingProfile)
        {
            voucher         = _custVendTrans.Voucher;
            accountingDate  = _custVendTrans.TransDate;
            postingProfile  = _custVendTrans.PostingProfile;

            LedgerDimensionAccount ledgerDimensionAccount = getLedgerDimension(true);

            if (!ledgerDimensionAccount)
            {
                ledgerDimensionAccount = getLedgerDimension(false);
            }

            if (ledgerDimensionAccount)
            {
                mainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(ledgerDimensionAccount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupKeyData</Name>
				<Source><![CDATA[
    public container groupKeyData(container _key)
    {
        int         idx;
        str         key;
        container   ret;

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            key = conpeek(_key, idx);
            switch (key)
            {
                case conpeek(this.groupParamNames(), custVendAccount) :
                    ret += this.fieldAccount();
                    break;
                case conpeek(this.groupParamNames(), glAccount) :
                    return [fieldName2id(this.transTableId(), recIdFieldName)];
                default :
                    if (! conFind(ret, conPeek(this.fieldDefaultDimension(), 2)))
                    {
                        ret += conPeek(this.fieldDefaultDimension(), 2);
                    }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamDefault</Name>
				<Source><![CDATA[
    public container groupParamDefault()
    {
        return [conpeek(this.groupParamNames(), custVendAccount),
                conpeek(this.groupParamNames(), glAccount)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamLabels</Name>
				<Source><![CDATA[
    public container groupParamLabels(container _key)
    {
        int         idx;
        str         key;
        container   value;
        container   paramLabels;

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            key = conpeek(_key, idx);

            switch (key)
            {
                case conpeek(this.groupParamNames(), glAccount)        :
                    value = [fieldid2pname(tablenum(MainAccount), fieldnum(MainAccount, MainAccountId))];
                    break;
                default :
                    value = [key];
            }

            paramLabels = conins(paramLabels, conlen(paramLabels) + 1, value);
        }

        return paramLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamNames</Name>
				<Source><![CDATA[
    public container groupParamNames()
    {
        DimensionAttributeSetItem   dimAttrSetItem;
        DimensionAttribute          dimAttr;

        if (groupParamNames)
        {
            return groupParamNames;
        }

        groupParamNames = ["@SYS135766", fieldid2pname(this.transTableId(), this.fieldAccount()) ];

        while select DimensionAttribute from dimAttrSetItem
            where dimAttrSetItem.DimensionAttributeSet == DimensionCache::getDimensionAttributeSetForLedger()
               && dimAttrSetItem.DimensionAttribute    != DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
        join Name, RecId from dimAttr
            where dimAttr.RecId == dimAttrSetItem.DimensionAttribute
        {
            groupParamNames += dimAttr.Name;
            mapDimAttrRecId.insert(dimAttr.Name, dimAttr.RecId);
            dimParamSet.add(dimAttr.Name);
        }

        return groupParamNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValueName</Name>
				<Source><![CDATA[
    public Name groupParamValueName(Name _paramName, container _paramValue, Common _common = null)
    {
        Name ret;

        switch (_paramName)
        {
            case conpeek(this.groupParamNames(), glAccount)        :
                ret = MainAccount::getLocalizedNameByMainAccountId(conPeek(_paramValue, 1));
                break;
            case conpeek(this.groupParamNames(), custVendAccount)  :
                ret = this.counteragentName(conPeek(_paramValue, 1));
                break;
            default :
                ret = RLedgerTurnoverType::getDefaultDimensionAttributeName(_common.(conPeek(this.fieldDefaultDimension(), 2)),
                                                                            _paramName,
                                                                            conPeek(_paramValue, 1));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupParamValues</Name>
				<Source><![CDATA[
    public container groupParamValues(Common    _trans,
                                      container _key,
                                      Common    _transHeader = null,
                                      Common    _transSplit  = null)
    {
        int             idx;
        str             key;
        container       value;
        container       paramValues;
        CustVendTrans   custVendTrans   = _trans;
        container       paramNames      = this.groupParamNames();

        for (idx = 1; idx <= conlen(_key); idx++)
        {
            key = conpeek(_key, idx);
            switch (key)
            {
                case conpeek(paramNames, glAccount)        :
                    this.getMainAccountNum(custVendTrans);
                    value = [mainAccountNum];
                    break;

                case conpeek(paramNames, custVendAccount)  :
                    value = [custVendTrans.AccountNum];
                    break;

                default :
                    value = [ RLedgerTurnoverType::getDefaultDimensionDisplayValue(custVendTrans.DefaultDimension, mapDimAttrRecId.lookup(key)) ];
            }

            paramValues = conins(paramValues, conlen(paramValues) + 1, value);
        }

        return paramValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransIncluded</Name>
				<Source><![CDATA[
    public boolean isTransIncluded(Common           _trans,
                                   Common           _subtrans,
                                   CurrencyType_RU  _currencyType,
                                   TransDate        _fromDate = dateNull(),
                                   TransDate        _toDate   = dateNull())
    {
        CustVendTrans custVendTrans = _trans;

        if (! super(_trans, _subtrans, _currencyType, _fromDate, _toDate))
        {
            return false;
        }

        this.getMainAccountNum(custVendTrans);

        if (accountNumSet.elements() && ! accountNumSet.in(mainAccountNum))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyMainAccount</Name>
				<Source><![CDATA[
    public str keyMainAccount()
    {
        return conpeek(this.groupParamNames(), glAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container holding the ledger posting types for counteragent balance transactions.
    /// </summary>
    /// <returns>
    /// A container holding the ledger posting types for counteragent balance transactions.
    /// </returns>
    abstract protected container ledgerPostingType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        dimParamSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public container query()
    {
        Query query = new Query(super());

        findOrCreateRange_W(query.dataSourceTable(this.transTableId()), this.fieldAccount());

        return query.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledAmount</Name>
				<Source><![CDATA[
    public Amount settledAmount(Common             _trans,
                                Common             _settlement,
                                TransDate          _dateFrom,
                                TransDate          _dateTo,
                                CurrencyType_RU    _currencyType)
    {
        Amount               amount;
        CustVendTrans        custVendTrans      = _trans;
        CustVendSettlement   custVendSettlement = _settlement;

        if (! expandedBalance)
        {
            return 0;
        }

        switch (_currencyType)
        {
            case CurrencyType_RU::Standard :
                if (custVendTrans.TransType == LedgerTransType::ExchAdjustment ||
                    custVendTrans.TransType == LedgerTransType::AdvanceAdjustment_RU)
                {
                    amount = custVendSettlement.SettleAmountMST;
                }
                else
                {
                    amount = custVendSettlement.SettleAmountMST - custVendSettlement.ExchAdjustment;
                }
                break;
            case CurrencyType_RU::Currency  :
                amount = custVendSettlement.SettleAmountCur;
                break;
            case CurrencyType_RU::Secondary :
                if (custVendTrans.TransType == LedgerTransType::ExchAdjustment ||
                    custVendTrans.TransType == LedgerTransType::AdvanceAdjustment_RU)
                {
                    amount = custVendSettlement.SettleAmountReporting;
                }
                else
                {
                    amount = custVendSettlement.SettleAmountReporting - custVendSettlement.ExchAdjustmentReporting;
                }
                break;
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settledTransAmounts</Name>
				<Source><![CDATA[
    public container settledTransAmounts(Common          _trans,
                                         TransDate       _dateFrom,
                                         TransDate       _dateTo,
                                         CurrencyType_RU _currencyType,
                                         Common          _trans_W)
    {
        Amount              amount;
        boolean             isDebit;
        container           ret                = [0, 0];
        CustVendTrans       custVendTrans      = _trans;
        CustVendSettlement  custVendSettlement = CustVendTransStatic::construct(custVendTrans).custVendSettlement();

        if (! expandedBalance)
        {
            return ret;
        }

        select sum(SettleAmountCur),
               sum(SettleAmountMST),
               sum(SettleAmountReporting),
               sum(ExchAdjustment),
               sum(ExchAdjustmentReporting) from custVendSettlement
        where custVendSettlement.TransRecId == custVendTrans.RecId
           && custVendSettlement.TransDate  >= _dateFrom
           && custVendSettlement.TransDate  <= _dateTo;

        amount      = this.settledAmount(custVendTrans, custVendSettlement, _dateFrom, _dateTo, _currencyType);
        isDebit     = conPeek(this.transAmounts(_trans, _currencyType, _trans_W), 1) != 0;

        ret = isDebit ? conPoke(ret, 1, amount) : conPoke(ret, 2, -amount);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDetailLabels</Name>
				<Source><![CDATA[
    public container transDetailLabels()
    {
        return ["@SYS67", "@GLS104522", '', '', "@SYS13566"];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDetails</Name>
				<Source><![CDATA[
    public container transDetails(Common _trans, Common _transHeader = null)
    {
        CustVendTrans   custVendTrans = _trans;
        Description     description;
        ;

        description = custVendTrans.DocumentNum && custVendTrans.DocumentDate ?
                      strfmt("@GLS107210", custVendTrans.DocumentNum,
                                           custVendTrans.DocumentDate)        : '';

        return [custVendTrans.TransDate,
                custVendTrans.Invoice                       ?
                strfmt("@SYS21352", custVendTrans.Invoice)  :
                description,
                custVendTrans.DocumentNum,
                custVendTrans.DocumentDate,
                custVendTrans.Txt,
                custVendTrans.RecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>transKeyData</Name>
				<Source><![CDATA[
    public container transKeyData()
    {
        return [fieldName2id(this.transTableId(), recIdFieldName)];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>