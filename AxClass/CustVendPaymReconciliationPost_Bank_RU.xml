<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymReconciliationPost_Bank_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendPaymReconciliationPost_Bank_RU extends CustVendPaymReconciliationPost implements BatchRetryable
{
    LedgerJournalType       journalType;
    Name                    newNameVend;
    DialogField             dialogFieldJournalNameVend;
    CompanyBankAccountId    bankAccountId;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        newName,
        newNameVend,
        deleteEmptyJournals
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookResearch</Name>
				<Source><![CDATA[
    public void bookResearch(boolean _promptOK = true)
    {
        if (this.parmCallerForm())
        {
            callerForm.bookResearch(_promptOK);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentStatus</Name>
				<Source><![CDATA[
    public boolean checkPaymentStatus(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.PaymentStatus == CustVendPaymStatus::Confirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLedgerJournalTable</Name>
				<Source><![CDATA[
    public LedgerJournalTable createNewLedgerJournalTable(LedgerJournalName _ledgerJournalName = null, LedgerJournalTable _ledgerJournalTable = null)
    {
        LedgerJournalTable ledgerJournalTable = super(_ledgerJournalName);

        ttsbegin;

        ledgerJournalTable.selectForUpdate();

        ledgerJournalTable.LedgerJournalInclTax = _ledgerJournalName.LedgerJournalInclTax;

        if (this.journalType() == LedgerJournalType::Payment)
        {
            ledgerJournalTable.Name = newNameVend;
        }

        ledgerJournalTable.doUpdate();

        createdJournals.ins(ledgerJournalTable);

        ttscommit;

        return ledgerJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase(CustVendPaymReconciliationPost_Bank_RU::description(),
                                                 this);

        dialogFieldJournalName     = dialog.addFieldValue(extendedTypeStr(Name), newName, "@GLS107679", "@SYS66090");
        dialogFieldJournalNameVend = dialog.addFieldValue(extendedTypeStr(Name), newNameVend, "@GLS107680", "@SYS66090");
        dialogFieldDeleteEmpty     = dialog.addFieldValue(extendedTypeStr(NoYesId), deleteEmptyJournals, "@SYS67967", "@SYS67968");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        newNameVend = dialogFieldJournalNameVend.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalType</Name>
				<Source><![CDATA[
    public LedgerJournalType journalType(LedgerJournalType _journalType = journalType)
    {
        journalType = _journalType;
        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountId</Name>
				<Source><![CDATA[
    private CompanyBankAccountId parmBankAccountId(CompanyBankAccountId _bankAccountId = bankAccountId)
    {
        ;
        bankAccountId = _bankAccountId;
        return bankAccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNewJournals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts created journals to GL
    /// </summary>
    /// <param name="_createdJournals">
    /// <c>RecordSortedList</c> with created journals
    /// </param>
    void postNewJournals(RecordSortedList _createdJournals = this.createdJournals())
    {
        Args                args;
        LedgerJournalTable  ledgerJournalTable;
        ;

        args = new Args();
        args.caller(this);

        if (_createdJournals.first(ledgerJournalTable))
        {
            do
            {
                setPrefix(strFmt("@SYS28641", ledgerJournalTable.JournalName, ledgerJournalTable.JournalNum));
                args.record(ledgerJournalTable);
                new MenuFunction(menuitemActionStr(LedgerJourPostLJTransCustPaym), MenuItemType::Action).run(args);
            }
            while (_createdJournals.next(ledgerJournalTable));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    public void queryBuild()
    {
        QueryBuildDataSource queryBuildDataSource;
        super();

        queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).
                         addRange(fieldNum(LedgerJournalTrans, OffsetAccountType)).
                         value(queryValue(enum2str(LedgerJournalACType::Bank)));

        queryBuildDataSource = queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).addDataSource(tableNum(DimensionAttributeLevelValueView));
        queryBuildDataSource.addLink(fieldNum(LedgerJournalTrans, OffsetLedgerDimension), fieldNum(DimensionAttributeLevelValueView, ValueCombinationRecId));
        queryBuildDataSource.addRange(fieldNum(DimensionAttributeLevelValueView, DisplayValue)).value(bankAccountId);
        queryBuildDataSource.addRange(fieldNum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(LedgerDynamicAccountHelper::getDimensionAttributeFromAccountType(enum2int(LedgerJournalACType::Bank)).RecId));

        queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).
                         addRange(fieldNum(LedgerJournalTrans, PaymentStatus)).
                         value(queryValue(enum2str(CustVendPaymStatus::Confirmed)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return journalType == LedgerJournalType::Payment ? "@SYS82164" : "@SYS82163";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return journalType == LedgerJournalType::Payment  ?
               TransactionLogType::VendPaymReconciliation :
               TransactionLogType::CustPaymReconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (! newNameVend)
        {
            ret = checkFailed("@SYS63354");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS107678";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustVendPaymReconciliationPost_Bank_RU   custVendPaymReconciliationPost;
        BankAccountStatement                     bankAccountStatement;
        Object                                   callerForm;
        ;

        custVendPaymReconciliationPost = new CustVendPaymReconciliationPost_Bank_RU();

        callerForm = args.caller();

        if (callerForm && callerForm.name() == formStr(BankReconciliation_RU))
        {
            custVendPaymReconciliationPost.parmCallerForm(callerForm);

            bankAccountStatement = callerForm.bankAccountStatement();
            custVendPaymReconciliationPost.parmBankAccountId(bankAccountStatement.AccountId);
        }
        else
        {
            throw error("@SYS53138");
        }

        if (custVendPaymReconciliationPost.prompt())
        {
            CustVendPaymReconciliationPost_Bank_RU::runServer(LedgerJournalType::CustPayment,
                                                              custVendPaymReconciliationPost.pack(),
                                                              bankAccountStatement.AccountId);

            CustVendPaymReconciliationPost_Bank_RU::runServer(LedgerJournalType::Payment,
                                                              custVendPaymReconciliationPost.pack(),
                                                              bankAccountStatement.AccountId);

            custVendPaymReconciliationPost.bookResearch(true);
        }
        else
        {
            custVendPaymReconciliationPost.bookResearch(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    private static void runServer(LedgerJournalType    _ledgerJournalType,
                                         container            _packedData,
                                         CompanyBankAccountId _bankAccountId)
    {
        LedgerJournalTrans                     ledgerJournalTrans;
        LedgerJournalTable                     ledgerJournalTable;
        LedgerJournalName                      ledgerJournalName;
        CustVendPaymReconciliationPost_Bank_RU custVendPaymReconciliationPost;
        DimensionAttributeLevelValueView       dimAttrLevelValueView;
        ;

        select firstonly ledgerJournalTrans
            where ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                  ledgerJournalTrans.PaymentStatus     == CustVendPaymStatus::Confirmed
        exists join dimAttrLevelValueView
            where dimAttrLevelValueView.ValueCombinationRecId == ledgerJournalTrans.OffsetLedgerDimension
               && dimAttrLevelValueView.DisplayValue          == _bankAccountId
               && dimAttrLevelValueView.DimensionAttribute    == LedgerDynamicAccountHelper::getDimensionAttributeFromAccountType(enum2int(LedgerJournalACType::Bank)).RecId
        exists join ledgerJournalTable
            where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum    &&
                  ledgerJournalTable.Posted     == NoYes::No
        exists join ledgerJournalName
            where ledgerJournalName.JournalName == ledgerJournalTable.JournalName   &&
                  ledgerJournalName.JournalType == _ledgerJournalType;

    //qbdsChild.addRange(fieldnum(DimensionAttributeLevelValueView, DimensionAttribute)).value(queryValue(dimAttr.RecId));
        if (ledgerJournalTrans)
        {
            setPrefix(enum2str(_ledgerJournalType));
            custVendPaymReconciliationPost = new CustVendPaymReconciliationPost_Bank_RU();

            custVendPaymReconciliationPost.journalType(_ledgerJournalType);
            custVendPaymReconciliationPost.parmBankAccountId(_bankAccountId);
            custVendPaymReconciliationPost.unpack(_packedData);
            custVendPaymReconciliationPost.queryBuild();
            custVendPaymReconciliationPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>