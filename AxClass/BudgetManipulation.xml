<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetManipulation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class BudgetManipulation extends RunBase
{
    QueryRun            queryRun;

    [FormObservable]
    BudgetMani          administration;
    [FormObservable]
    NoYes               changeModel;
    [FormObservable]
    SysBudgetModelId    model;
    [FormObservable]
    NoYes               changeDim;
    [FormObservable]
    DimensionDefault    dimension;
    [FormObservable]
    NoYes               changePeriod;
    [FormObservable]
    Integer             displacementQty;
    [FormObservable]
    PeriodUnit          displacementMethod;
    [FormObservable]
    Factor              factor;
    [FormObservable]
    Constant            constant;

    SysTmpRecIdMap      transUpd;

    #define.CurrentVersion(3)
    #localmacro.CurrentList
        Administration,
        ChangeModel,
        Model,
        ChangeDim,
        Dimension,
        ChangePeriod,
        DisplacementQty,
        DisplacementMethod,
        Factor,
        Constant
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>baseQuery</Name>
				<Source><![CDATA[
    protected Query baseQuery()
    {
        ;
        return this.search();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyingUpdate</Name>
				<Source><![CDATA[
    void copyingUpdate(BudgetMap budget)
    {
        ;
        this.initFields(budget);
        this.setPeriod(budget);
        this.setField(budget);

        if (budget.validateWrite())
        {
            if (administration== BudgetMani::Copying)
            {
                budget.insert();
            }
            else
            {
                budget.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        if (inCheckClose)
        {
            if (administration == BudgetMani::Deletion)
            {
                if (Box::yesNo("@SYS12190",DialogButton::Yes) != DialogButton::Yes)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFields</Name>
				<Source><![CDATA[
    void initFields(BudgetMap initBudget)
    {
        initBudget.ModelNum             = changeModel      ? model         : initBudget.ModelNum;
        initBudget.DefaultDimension     = initBudget.copyDimension(changeDim        ? dimension     : initBudget.DefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables of the class.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when the code calls the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        queryRun = new QueryRun(this.baseQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeBaseandDatasourceQuery</Name>
				<Source><![CDATA[
    public void mergeBaseandDatasourceQuery(Query _dataSourceQuery)
    {
        Query   mergedQuery;
        ;

        mergedQuery = new Query(this.baseQuery());

        SysQuery::mergeRanges(mergedQuery, _dataSourceQuery, 1, false, true);

        mergedQuery.userUpdate(true);

        mergedQuery.dataSourceNo(1).update(true);

        queryRun = new QueryRun(mergedQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFieldBeChanged</Name>
				<Source><![CDATA[
    boolean mustFieldBeChanged()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        ;

        transUpd    = SysTmpRecIdMap::construct(Types::Integer);
        factor      = 1;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAdministration</Name>
				<Source><![CDATA[
    BudgetMani parmAdministration(BudgetMani selection = administration)
    {
        administration = selection;

        return administration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeDim</Name>
				<Source><![CDATA[
    NoYes parmChangeDim(NoYes selection = changeDim)
    {
        changeDim = selection;

        return changeDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangeModel</Name>
				<Source><![CDATA[
    NoYes parmChangeModel(NoYes selection = changeModel)
    {
        changeModel = selection;

        return changeModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChangePeriod</Name>
				<Source><![CDATA[
    NoYes parmChangePeriod(NoYes selection = changePeriod)
    {
        changePeriod = selection;

        return changePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmConstant</Name>
				<Source><![CDATA[
    Constant parmConstant(Constant selection = constant)
    {
        ;
        constant = selection;

        return constant;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault parmDefaultDimension(DimensionDefault _selection = dimension)
    {
        dimension = _selection;

        return dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplacementMethod</Name>
				<Source><![CDATA[
    PeriodUnit parmDisplacementMethod(PeriodUnit selection = displacementMethod)
    {
        displacementMethod= selection;

        return displacementMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplacementQty</Name>
				<Source><![CDATA[
    Integer parmDisplacementQty(Integer selection = displacementQty)
    {
        displacementQty= selection;

        return displacementQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactor</Name>
				<Source><![CDATA[
    Factor parmFactor(Factor selection = factor)
    {
        ;
        factor = selection;

        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModel</Name>
				<Source><![CDATA[
    SysBudgetModelId parmModel(SysBudgetModelId selection = model)
    {
        model = selection;

        return model;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>QueryRun</c> class that is used by the <c>QueryPrompt</c> class.
    /// </summary>
    /// <returns>
    ///    The <c>QueryRun</c> class, which is used by the <c>QueryPrompt</c> .
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is in the dialog and if a select menu item is added to a
    ///    dialog box. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do
    ///    it in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        BudgetMap   budget;
        ;

        ttsbegin;

        while (queryRun.next())
        {
            budget = queryRun.getNo(1);

            if (!transUpd.lookup(budget.RecId))
            {
                setprefix(strfmt("@SYS23390", budget.ModelNum, date2StrUsr(budget.StartDate, DateFlags::FormatAll), budget.Comment));

                switch (administration)
                {
                    case BudgetMani::Copying,
                         BudgetMani::UpdateNow :
                        if ((budget.TableId == tablenum(ProjForecastEmpl)) ||
                            (!budget.ExpandId))
                        {
                            this.copyingUpdate(budget);
                            transUpd.insert(budget.RecId, 1);
                        }
                        break;

                    case BudgetMani::Deletion :
                        budget.delete();
                        transUpd.insert(budget.RecId, 1);
                        break;
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>search</Name>
				<Source><![CDATA[
    Query search()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setField</Name>
				<Source><![CDATA[
    void setField(BudgetMap budget)
    {
        // Overload
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriod</Name>
				<Source><![CDATA[
    public void setPeriod(BudgetMap budget)
    {
        Futures                 budgetPeriod;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarYear      fiscalCalendarYear;

        if (! changePeriod)
        {
            return;
        }

        budgetPeriod        = Futures::construct(budget.StartDate,displacementQty,displacementMethod);
        budget.StartDate    = budgetPeriod.next();

        if (budget.TableId == tablenum(ForecastSales) ||
            budget.TableId == tablenum(ProjForecastCost) ||
            budget.TableId == tablenum(ProjForecastEmpl) ||
            budget.TableId == tablenum(ProjForecastRevenue))
        {
            if (budget.InvoiceDate)
            {
                budgetPeriod            = Futures::construct(budget.InvoiceDate,displacementQty,displacementMethod);
                budget.InvoiceDate      = budgetPeriod.next();
            }

            if (budget.SalesPaymDate)
            {
                budgetPeriod            = Futures::construct(budget.SalesPaymDate,displacementQty,displacementMethod);
                budget.SalesPaymDate    = budgetPeriod.next();
            }

            if (budget.EliminationDate)
            {
                budgetPeriod            = Futures::construct(budget.EliminationDate,displacementQty,displacementMethod);
                budget.EliminationDate  = budgetPeriod.next();
            }
        }

        if (budget.TableId == tablenum(ForecastSales) ||
            budget.TableId == tablenum(ProjForecastCost) ||
            budget.TableId == tablenum(ProjForecastEmpl))
        {
            if (budget.CostPaymDate)
            {
                budgetPeriod         = Futures::construct(budget.CostPaymDate,displacementQty,displacementMethod);
                budget.CostPaymDate  = budgetPeriod.next();
            }
        }

        if (budget.EndDate)
        {
            budgetPeriod        = Futures::construct(budget.EndDate,displacementQty,displacementMethod);
            budget.EndDate      = budgetPeriod.next();

            select firstonly Type, StartDate, FiscalCalendarYear, RecId from fiscalCalendarPeriod
                where fiscalCalendarPeriod.Type         ==  FiscalPeriodType::Closing &&
                      fiscalCalendarPeriod.StartDate    >=  budget.StartDate
                join RecId, FiscalCalendar from fiscalCalendarYear
                where fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                &&    fiscalCalendarYear.FiscalCalendar == CompanyInfoHelper::fiscalCalendarRecId();

            if (fiscalCalendarPeriod.RecId  &&
                fiscalCalendarPeriod.StartDate   <= budget.EndDate)
            {
                budget.EndDate      = fiscalCalendarPeriod.StartDate;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version         version     = RunBase::getVersion(_packedClass);
        PackedQueryRun  packedQueryRun;
        ;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQueryRun] = _packedClass;

                if (packedQueryRun)
                {
                    queryRun = new QueryRun(packedQueryRun);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        boolean ok = true;

        switch (administration)
        {
            case BudgetMani::Copying,BudgetMani::UpdateNow :

                if (this.mustFieldBeChanged())
                {
                    if (! factor && ! constant)
                    {
                        ok = checkFailed("@SYS16903") && ok;
                    }
                }

                if (changePeriod && ! displacementQty)
                {
                    ok  = checkFailed("@SYS16759") && ok;
                }

                if (changeDim && dimension)
                {
                    ok = DimensionValidation::validateDefaultDimension(dimension);
                }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static BudgetManipulation construct(BudgetMap _budgetMap)
    {
        BudgetManipulation  budgetManipulation;

        switch (_budgetMap.TableId)
        {
            case tablenum(ForecastSales):
                budgetManipulation = new ForecastManiSales();
                break;

            case tablenum(ForecastPurch):
                budgetManipulation = new ForecastManiPurch();
                break;

            case tablenum(ProjForecastEmpl):
                budgetManipulation = new ProjBudgetManiEmpl();
                break;

            case tablenum(ProjForecastCost):
                budgetManipulation = new ProjBudgetManiCost();
                break;

            case tablenum(ProjForecastRevenue):
                budgetManipulation = new ProjBudgetManiRevenue();
                break;

            default:
                throw error(strfmt("@SYS23396",funcname()));
        }

        return budgetManipulation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BudgetManipulation  manipulation    = BudgetManipulation::construct(args.record());
        FormDataSource      datasource      = FormDataUtil::getFormDataSource(args.record());
        ;

        manipulation.getLast();
        manipulation.mergeBaseandDatasourceQuery(new Query(datasource.queryRun().query()));

        if (manipulation.prompt())
        {
            manipulation.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>