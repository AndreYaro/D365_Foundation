<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchReport_Invoice4Paym_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchReport_Invoice4Paym_RU extends SalesPurchReport_RU
{
    CostAllocationHistory_RU costAllocationHistory;
    protected const str blank = ' ';
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets document status.
    /// </summary>
    /// <returns><c>DocumentStatus</c> object.</returns>
    public DocumentStatus documentStatus()
    {
        if (header.SalesPurchId)
        {
            return DocumentStatus::Invoice4Paym_RU;
        }
        else
        {
            return DocumentStatus::FreeTextInvoice4Paym_RU;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    /// <param name="_excelReport">
    /// Excel report to be executed
    /// </param>
    private void doPrint(XMLExcelReport_Invoice4Paym_RU _excelReport)
    {
        _excelReport.parmData(header, dynamicData);
        _excelReport.parmSalesPurchReport(this);
        _excelReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether report specified in lastValueElementName should be executed
    /// </summary>
    /// <returns>
    /// Always FALSE as it uses excel for ouput
    /// </returns>
    public boolean doRun()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcCashDisc</Name>
				<Source><![CDATA[
    protected boolean mustCalcCashDisc()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
    protected void prepareDynamicLine()
    {
        TaxPackagingQty     taxPackingQty;
        Qty                 qty, qtyInStandardUnits;

        AmountCur           markupItemPosted;
        TaxAmountVAT_RU     markupVATAmount;
        TaxAmountExcise_RU  markupExcise;
        

        if (!costAllocationHistory)
        {
            super();
        }
        else
        {
            CustVendInvoiceJour custVendInvoiceJour = VendInvoiceJour::findRecId(costAllocationHistory.AllocatedInvoiceJourRecId);

            lineNum++;

            dynamicData.clear();
            dynamicData.initFromReportTable(header);

            reverseLine = invoiceTrans.LineAmount < 0 ? -1 : 1;
            ItemId itemId = FormLetter::journalItemId(this.getModule(),
                                                      invoiceTrans.ItemId,
                                                      invoiceTrans.ExternalItemId_RU);

            EcoResProductRecId product = InventTable::itemProduct(itemId);

            dynamicData.LineNum = lineNum;

            dynamicData.ItemName = strFmt("@GLS114553",
                                         custVendInvoiceJour.InvoiceId,
                                         invoiceTrans.Name_RU,
                                         VendTable::find(custVendInvoiceJour.InvoiceAccount).name());

            if (mappingExists(tableNum(CustVendInvoiceJour),
                              custVendInvoiceJour.TableId,
                              fieldNum(CustVendInvoiceJour, DefaultDimension)))
            {
                PurchAgreementHeaderExt_RU purchAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(custVendInvoiceJour.DefaultDimension) as PurchAgreementHeaderExt_RU;
                PurchAgreementHeader purchAgreementHeader = PurchAgreementHeader::find(purchAgreementHeaderExt.AgreementHeader);

                if (purchAgreementHeader)
                {
                    dynamicData.ItemName += blank + strFmt("@GLS113549",
                                                            purchAgreementHeader.PurchNumberSequence,
                                                            purchAgreementHeaderExt.AgreementDate);
                }
            }

            UnitOfMeasure invoiceTransUnitOfMeasure = UnitOfMeasure::findBySymbol(invoiceTrans.Unit_RU);

            dynamicData.ItemId  = itemId;
            dynamicData.Unit    = UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
                invoiceTransUnitOfMeasure.RecId,
                this.languageId());

            if (!dynamicData.Unit)
            {
                dynamicData.Unit = invoiceTrans.Unit_RU;
            }

            dynamicData.CodeOKEI        = UnitOfMeasure_RU::codeOKEI_RU(invoiceTransUnitOfMeasure);

            // Signed quantity in trade units
            qty = abs(invoiceTrans.Qty ? invoiceTrans.Qty : (invoiceTrans.LineAmount ? sign(invoiceTrans.LineAmount) : 0));
            if (!qty)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            dynamicData.Qty = qty  * reverseInvoice;

            UnitOfMeasureSymbol standardUnit              = InventTableModule::find(itemId, ModuleInventPurchSales::Invent).UnitId;
            UnitOfMeasure       standardUnitUnitOfMeasure = UnitOfMeasure::findBySymbol(standardUnit);
            boolean             conversionOk              = EcoResProductUnitConverter::canBeConvertedForReleasedProduct(itemId,
                                                                                                                         invoiceTrans.InventDimId,
                                                                                                                         invoiceTransUnitOfMeasure.RecId,
                                                                                                                         standardUnitUnitOfMeasure.RecId);

            if (! conversionOk)
            {
                warning(strFmt("@SYS28690", invoiceTrans.Unit_RU, standardUnit));
            }

            if (conversionOk && invoiceTrans.Unit_RU && invoiceTrans.Qty)
            {
                qtyInStandardUnits = EcoResProductUnitConverter::convertForReleasedProduct(itemId,
                                                                                           invoiceTrans.InventDimId,
                                                                                           qty,
                                                                                           invoiceTransUnitOfMeasure.RecId,
                                                                                           standardUnitUnitOfMeasure.RecId,
                                                                                           NoYes::Yes);
            }
            else
            {
                qtyInStandardUnits = qty;
            }

            InventTable inventTable = InventTable::find(invoiceTrans.ItemId);
            if (qtyInStandardUnits)
            {
                taxPackingQty = abs(inventTable.TaxPackagingQty) * qty / qtyInStandardUnits;
            }

            dynamicData.TaxPackagingQty = taxPackingQty;
            dynamicData.QtyNumber       = abs(taxPackingQty ? roundUp(invoiceTrans.Qty / taxPackingQty, 1) : 0);
            dynamicData.Packing         = inventTable.Packing_RU;
            dynamicData.GrossWeight     = abs(qtyInStandardUnits * inventTable.grossWeight());
            dynamicData.VatValue        = invoiceTrans.CustVendInvoiceTrans::getVATValue_RU();
            dynamicData.VatValueStr     = this.getVatValueStr(invoiceTrans);

            // Amounts
            [ markupItemPosted,
              markupVATAmount,
              markupExcise ] = this.markupIncludedInLine();

            dynamicData.vatAmount   = !dynamicData.VatValue ? 0 :
                                          (printInMST ?
                                          abs(invoiceTrans.LineAmountMST_W) - abs(invoiceTrans.LineAmountMST_W) / (1 + dynamicData.VatValue / 100) :
                                          abs(invoiceTrans.LineAmount) - abs(invoiceTrans.LineAmount) / (1 + dynamicData.VatValue / 100));

            dynamicData.vatAmount   = dynamicData.vatAmount * reverseInvoice;
            dynamicData.LineAmount  = (printInMST ? invoiceTrans.LineAmountMST_W : invoiceTrans.LineAmount) + markupItemPosted + markupExcise;
            dynamicData.LineAmount  = abs(dynamicData.LineAmount) * reverseInvoice - dynamicData.vatAmount;
            dynamicData.Price       = CurrencyExchangeHelper::price(abs(dynamicData.LineAmount + markupItemPosted + markupExcise) / qty);

            dynamicData.LineAmountWithTax   = dynamicData.LineAmount + dynamicData.vatAmount;
            dynamicData.LineAmount          = dynamicData.LineAmountWithTax - dynamicData.vatAmount; // exchange bug fix

            this.addLineAmountToHeader(dynamicData.LineAmount,
                                       dynamicData.vatAmount,
                                       dynamicData.LineAmountWithTax,
                                       qty,
                                       dynamicData.QtyNumber,
                                       dynamicData.GrossWeight,
                                       abs(qtyInStandardUnits * inventTable.NetWeight));

            invoiceJour.InvoiceAmount = abs(invoiceJour.InvoiceAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        super();

        select firstonly costAllocationHistory
            where costAllocationHistory.CustVendInvoice4PaymJourRecId == invoiceJour.RecId;

        header.CustName        = invoiceJour.DeliveryName_RU;
        header.CustBankAddress = invoiceJour.deliveryAddress_RU();

        header.DueDate         = invoiceJour.FixedDueDate ?
                                 invoiceJour.FixedDueDate :
                                 PaymTerm::find(invoiceJour.Payment).due(invoiceJour.InvoiceDate);

        OffSessionId_RU offSessionId = invoiceJour.CustVendInvoiceJour::getOffSessionId_RU();

        [ header.AcceptorName,
          header.AcceptorTitle ]    = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Responsible);
        [ header.TakerName,
          header.TakerTitle ]       = OfficialsTrans_RU::getNameTitleByIdPosition(offSessionId, OffPosition_RU::Filler);

        header.Notes                = CustInvoice4PaymJour_RU::findRecId(invoiceJour.RecId).Notes;

        if (mappingExists(tableNum(CustVendInvoiceJour),
                          invoiceJour.TableId,
                          fieldNum(CustVendInvoiceJour, DefaultDimension)))
        {
            SalesAgreementHeaderExt_RU salesAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(invoiceJour.DefaultDimension) as SalesAgreementHeaderExt_RU;
            SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

            header.AgreementId = salesAgreementHeader.SalesNumberSequence;
            header.AgreementDocumentTitle = salesAgreementHeader.DocumentTitle;
            header.AgreementDate = salesAgreementHeaderExt.AgreementDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates header description for report
    /// </summary>
    /// <returns>
    /// Header description
    /// </returns>
    protected FreeTxt prepareTxtData()
    {
        FreeTxt ret = blank + strFmt("@GLS102354", invoiceJour.InvoiceDate);

        if (! proforma)
        {
            ret = blank + invoiceJour.InvoiceId + ret;

            switch (printCopyOriginal)
            {
                case PrintCopyOriginal::Copy     :
                    ret = "@GLS111678" + ret;
                    break;

                case PrintCopyOriginal::Original :
                    ret = "@GLS102245" + ret;
                    break;
            }
        }
        else
        {
            ret = "@GLS102244" + ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTxtData_Sec</Name>
				<Source><![CDATA[
    final protected FreeTxt prepareTxtData_Sec()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNote</Name>
				<Source><![CDATA[
    protected boolean reverseCreditNote()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates report, prepares data for report and executes it
    /// </summary>
    public void run()
    {
        super();

        XMLExcelReport_Invoice4Paym_RU excelReport = XMLExcelReport_Invoice4Paym_RU::construct();

        this.doPrint(excelReport);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if can run impersonated.
    /// </summary>
    /// <returns>True.</returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>