<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransSalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransSalesLine extends ProjTransItem
{
    SalesLine  salesLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that indicates whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced by using the status of the project.
    /// </remarks>
    public boolean canBeInvoiced(
        boolean _chargeable = false)
    {
        boolean ret = true;

        if ((salesLine.SalesType     == SalesType::ItemReq)    ||
            (salesLine.SalesStatus   == SalesStatus::Invoiced) ||
            (salesLine.SalesStatus   == SalesStatus::Canceled))
        {
            ret = false;
        }

        if (!ProjLineProperty::find(this.linePropertyId()).ToBeInvoiced)
        {
            ret = false;
        }

        if (ret)
        {
            ret = ProjInvoiceTable::isBillingRuleInvoiceable(this.projId(), this.categoryId(), this.psaContractLineNum(), this.transType());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return salesLine.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        return salesLine.CostPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return salesLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return salesLine.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item that is associated with this transaction.
    /// </returns>
    public ItemId itemId()
    {
        return salesLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc</Name>
				<Source><![CDATA[
    public SalesLineDisc lineDisc()
    {
        return salesLine.LineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return salesLine.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SalesLine _salesLine)
    {
        salesLine   = _salesLine;

        super(_salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return salesLine.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with this transaction.
    /// </returns>
    public ProjProposalId proposalId()
    {
        return ProjProposalItem::findInvent(salesLine.InventTransId).ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    Qty qty()
    {
        return salesLine.SalesQty   - salesLine.invoicedInTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return salesLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLineRevenueLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for sales line revenue that will be used by this transaction.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales line revenue that will be used by this transaction.
    /// </param>
    /// <param name="_fundingSourceID">
    /// The funding source that is associated with the project contract that will be used by this
    /// transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for invoiced revenue.
    /// </returns>
    public LedgerDimensionDefaultAccount salesLineRevenueLedgerDimension(SalesLine _salesLine, ProjFundingSourceRefId _fundingSourceID)
    {
        // <GBR>
        if (ProjParameters::find().EnableCancelPostingProfiles && salesLine.LineAmount < 0)
        {
            return this.canceledRevenueAccountLedgerDimension(_fundingSourceID);
        }
        // </GBR>

        return super(_salesLine, _fundingSourceID);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the funding source for sales line.
    /// </summary>
    /// <returns>
    /// Returns the <c> ProjFundingSourceRefId </c> for the sales line. 
    /// </returns>
    public ProjFundingSourceRefId fundingSource()
    {
        ProjTable projTable = ProjTable::find(this.ProjId());

        if (ProjInvoiceTable::hasMultipleFundingSources(projTable.ProjInvoiceProjId))
		{
            return salesLine.salesTable().FundingSource;
		}
        else
        {
			return ProjFundingSource::fundingSourceForSalesOrder(projTable.ProjInvoiceProjId);
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        return salesLine.SalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// The sales unit for this transaction.
    /// </returns>
    public UnitOfMeasureSymbol salesUnit()
    {
        return salesLine.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(InventTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    public TaxGroup taxGroup()
    {
        return salesLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    public TaxItemGroup taxItemGroup()
    {
        return salesLine.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    TransDate transDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventTrans ID.
    /// </summary>
    /// <returns>
    /// The inventTrans ID.
    /// </returns>
    public InventTransId inventTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    public TransactionID transId()
    {
        return salesLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return salesLine.calcLineAmount(this.qty());
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return salesLine.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>