<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransItemProposal_Project</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransItemProposal_Project extends ProjTransItem
{
    ProjProposalItem    projProposalItem;
    ProjItemTrans       projItemTrans;
    ProjTransStatus     proposalTransStatus;

    boolean             calcTransCostMST;
    AmountMST           transCostMST;
    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projItemTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId categoryId()
    {
        return projItemTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projItemTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projItemTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projProposalItem.projProposalJour().FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDate</Name>
				<Source><![CDATA[
    TransDate getTaxTransDate()
    {
        return projItemTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxBuffer</Name>
				<Source><![CDATA[
    boolean hasTaxBuffer()
    {
        if (projItemTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    InventDimId inventDimId()
    {
        InventDimId inventDimId;
        if (TaxProjTransItemProposalInventDimFlight::instance().isEnabled())
        {
            inventDimId = projItemTrans.InventDimId;
        }
        else
        {
            inventDimId = projProposalItem.salesLine().InventDimId;
        }
        return inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    public InventTransId inventTransId()
    {
        return projProposalItem.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the inventory item hat is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend the class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ItemId itemId()
    {
        return projItemTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemLedgerAccountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for the inventory item that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ledger dimension for the inventory item that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public LedgerDimensionDefaultAccount itemLedgerAccountLedgerDimension()
    {
        return projItemTrans.LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction origin for this transaction.
    /// </summary>
    /// <returns>
    /// The <c>ProjItemType::Project</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method can be overridden by classes that extend this class to return a different transaction
    /// origin for the specific transaction.
    /// </remarks>
    ProjTransactionOrigin itemType()
    {
        return ProjOrigin::ItemRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to be posted to the general ledger.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST               ret;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransItemProposal_Project)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projProposalItemDetail
                    where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                        join projItemTransSale
                            where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalItemSale(projProposalItem, projProposalItemDetail, projItemTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projItemTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalItem _projProposalItem)
    {
        projProposalItem    = _projProposalItem;
        projItemTrans       = _projProposalItem.projItemTrans();

        super(_projProposalItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetAccountItemLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for cost minus item to be used by this transaction.
    /// </summary>
    /// <param name="_fundingSourceID">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for cost minus item.
    /// </returns>
    public LedgerDimensionDefaultAccount offsetAccountItemLedgerDimension(ProjFundingSourceRefId _fundingSourceID)
    {
        LedgerDimensionDefaultAccount ret;

        ret = super(_fundingSourceID);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packingSlipId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the packing slip that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the packing slip that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public PackingSlipId packingSlipId()
    {
        return projItemTrans.PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projAdjustRefId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project adjustment reference that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project adjustment reference that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjAdjustRefId projAdjustRefId()
    {
        return projItemTrans.ProjAdjustRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    public ProjId projId()
    {
        return projItemTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjProposalId proposalId()
    {
        return projProposalItem.ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalTransStatus</Name>
				<Source><![CDATA[
    private ProjTransStatus proposalTransStatus()
    {
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;

        if (!proposalTransStatus)
        {
            select RecId from projProposalItemDetail
                where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                    join TransStatus from projItemTransSale
                        where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId;

            proposalTransStatus = projItemTransSale.TransStatus;
        }

        return proposalTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projProposalItem.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    public Qty qty()
    {
        boolean invoiced   = ProjProposalJour::find(projProposalItem.ProposalId).LineProperty   == ProjLinePropertyCode::Invoiced;

        if (invoiced)
        {
            return (select projInvoiceItem
                        where projInvoiceItem.ProjInvoiceId == ProjProposalJour::find(projProposalItem.ProposalId).ProjInvoiceId
                           && projInvoiceItem.ProjTransId   == this.transId()).Qty;
        }
        else
        {
            if (this.proposalTransStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -projItemTrans.Qty;
            }
            else
            {
                return projItemTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projProposalItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revenueAccountLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger dimension for invoiced revenue to be used by this transaction.
    /// </summary>
    /// <param name="_fundingSourceID">
    /// The funding source that is associated with the project contract to be used by this transaction.
    /// </param>
    /// <returns>
    /// The ledger dimension for invoiced revenue.
    /// </returns>
    public LedgerDimensionDefaultAccount revenueAccountLedgerDimension(ProjFundingSourceRefId _fundingSourceID)
    {
        if (!this.itemLedgerAccountLedgerDimension())
        {
            return super(_fundingSourceID);
        }

        return this.itemLedgerAccountLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    ///    The sales price for this transaction.
    /// </returns>
    public SalesPrice salesPrice()
    {
        SalesPrice  salesPrice;
        ProjItemTransSale      projItemTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransItemProposal_Project)))
        {
            select count(RecId), sum(SalesPrice) from projItemTransSale
                where projItemTransSale.ProjTransId == projItemTrans.ProjTransId;

            //Multiple funding sources exist
            if (projItemTransSale.RecId > 1)
            {
                if (projItemTrans.TotalSalesAmountCur)
                {
                    salesPrice = CurrencyExchangeHelper::price(this.transTurnover() * projItemTransSale.SalesPrice / projItemtrans.TotalSalesAmountCur, this.currencyIdSales());
                }
                else
                {
                    salesPrice = 0;
                }
            }
            else
            {
                salesPrice = projItemTransSale.SalesPrice;
            }
        }
        else
        {
            salesPrice = super();
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales unit for this transaction.
    /// </summary>
    /// <returns>
    /// Sales unit.
    /// </returns>
    public UnitOfMeasureSymbol salesUnit()
    {
        return projItemTrans.SalesUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjProposalItem));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projProposalItem.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projProposalItem.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCostMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in company currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public AmountMST transCostMST()
    {
        Amount                  ret;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;
        ProjItemTransCost       projItemTransCost;
        ProjTransStatus         locSaleTransStatus;
        container               con;
        Query                   query;
        QueryRun                queryRun;
        ProjTrans               projTransSale;
        ProjTrans               projtransCostMST;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransItemProposal_Project)))
        {
            if (!calcTransCostMST)
            {
                calcTransCostMST = true;
                while select projProposalItemDetail
                    where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                        join projItemTransSale
                            where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalItemSale(projProposalItem, projProposalItemDetail, projItemTransSale);
                    locSaleTransStatus = projTransSale.transStatus();

                    con = ProjItemTransCost::findForSalesRefRecId(projProposalItemDetail.SaleRefRecId);
                    query = new Query(con);
                    queryRun = new QueryRun(query);
                    while (queryRun.next())
                    {
                        projItemTransCost = queryRun.get(tableNum(ProjItemTransCost));
                        projtransCostMST = ProjTrans::newProjProposalItemCost(projProposalItem, projProposalItemDetail, projItemTransCost, locSaleTransStatus);
                        transCostMST += projtransCostMST.transCostMST();
                    }
                }
            }

            ret = transCostMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    TransDate   transDate()
    {
        return projProposalItem.projItemTrans().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projProposalItem.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransItemProposal_Project)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projProposalItemDetail
                    where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
                        join projItemTransSale
                            where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalItemSale(projProposalItem, projProposalItemDetail, projItemTransSale);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            return projProposalItemDetail.AmountCur;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverGTE</Name>
				<Source><![CDATA[
    public AmountCur transTurnoverGTE()
    {
        ITaxDocumentLine             taxDocumentLineObject;
        AmountCur                    inclTaxAmount;
        AmountCur                    balanceGTE;
        AmountCur                    balance           = this.transTurnover();
        TaxEngineProjItemTransHeader itemTransHeader   = TaxEngineProjItemTransHeader::findOrCreateByProjProposalJour(projProposalItem.projProposalJour());
        ITaxDocument                 taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(itemTransHeader.TableId, itemTransHeader.RecId);
        
        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(projProposalItem.TableId, projProposalItem.RecId);
            inclTaxAmount = taxDocumentLineObject.getInclTax().amountTransactionCurrency();

            if (inclTaxAmount)
            {
                if (balance < 0)
                {
                    balanceGTE = CurrencyExchangeHelper::amount(abs(balance) - abs(inclTaxAmount)) * -1;
                }
                else
                {
                    balanceGTE = CurrencyExchangeHelper::amount(balance - abs(inclTaxAmount));
                }
            }
            else
            {
                balanceGTE = balance;
            }
        }
        else
        {
            balanceGTE = balance;
        }
        return balanceGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    ///    The total cost of this transaction.
    /// </returns>
    public Amount transCost()
    {
        CurrencyExchangeHelper exchHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId), this.transDate());
        return exchHelper.calculateAccountingToTransaction(this.currencyIdCost(), this.transCostMST(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    public TransTxt txt()
    {
        return projProposalItem.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>