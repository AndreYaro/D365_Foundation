<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsAutoCreateLoadLineTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSAutoCreateLoadLineTransfer</c> is responsible for creating load lines automatically for transfer lines.
/// </summary>
[WHSAutoCreateLoadLineAttribute(tableStr(InventTransferLine))]
class WhsAutoCreateLoadLineTransfer extends WHSAutoCreateLoadLine
{
    InventTransferLine  transferLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a load line for a transfer line.
    /// </summary>
    public void autoCreateLoadLine()
    {
        using (var activityContext = this.instrumentationLogger().autoMaintainLoadLineActivities().maintainLoadLine(transferLine.QtyTransfer))
        {
            InventLocationId inventLocationId = transferLine.inventTransferTable().InventLocationIdFrom;
            WHSLoadLine loadLine;

            if (InventLocation::isAutoUpdateShipmentAlwaysEnabled(inventLocationId))
            {
                if (this.shouldAutoUpdateShipment(transferLine.TransferId, WHSWorkTransType::TransferIssue, InventTransType::TransferOrderShip))
                {
                    WHSShipmentTable shipmentTable = this.locateAutoUpdateShipment(transferLine.TransferId, WHSWorkTransType::TransferIssue, InventTransType::TransferOrderShip);

                    this.findOrCreateWaveForShipment(shipmentTable);

                    loadLine.ShipmentId = shipmentTable.ShipmentId;

                    this.updateWHSInventTransferLine();
                }
                else
                {
                    return;
                }
            }
            else
            {
                if (!this.shouldAutoCreateLoadLine())
                {
                    return;
                }

                WHSLoadTemplateId loadTemplateId = this.findLoadTemplateId(TMSSalesTable::find(transferLine.TransferId).TransportationTemplateId, transferLine.ItemId);
                TMSLoadPaysFreight loadPaysFreight = TMSDlvTerm::find(InventTransferTable::find(transferLine.TransferId).DlvTermId).TransferChargesToOrder;

                // Try to find existing load for the order.
                WHSLoadTable loadTable;

                select firstonly LoadId from loadTable
                    exists join loadLine
                    where loadLine.LoadId               == loadTable.LoadId
                    &&    loadLine.OrderNum             == transferLine.TransferId
                    &&    loadLine.InventTransType      == InventTransType::TransferOrderShip
                    &&    loadLine.TransportRequest     == NoYes::No
                    &&    loadTable.LoadTemplateId      == loadTemplateId
                    &&    loadTable.LoadPaysFreight     == loadPaysFreight
                    &&    loadTable.InventLocationId    == inventLocationId
                    &&    loadTable.LoadStatus          != WHSLoadStatus::Shipped;

                if (!loadTable.LoadId)
                {
                    loadTable = this.createLoadTable(loadTemplateId, WHSLoadDirection::Outbound, transferLine.ItemId, inventLocationId, loadPaysFreight);
                }

                // Create the Load Line record
                loadLine.clear();
                loadLine.LoadId          = loadTable.LoadId;
            }

            loadLine.initFromTransferLine(transferLine);
        
            loadLine.insert();

            this.instrumentationLogger().autoMaintainLoadLineActivities().maintainedLoadLine(activityContext, SysAppCRUDOperation::Create);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
        protected void initFromBuffer(Common _common)
    {
        if (!(_common is InventTransferLine))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        transferLine = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAutoCreateLoadLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not a load line should be created automatically for a given transfer order line
    /// </summary>
    /// <returns>
    /// Returns a flag that indicates if the load line should be automatically generated
    /// </returns>
    protected boolean shouldAutoCreateLoadLine()
    {
        boolean         ret;
        boolean         whsEnabled;
        boolean         tmsEnabled;

        whsEnabled = WHSInventEnabled::exist(transferLine.ItemId);
        tmsEnabled = TMSInventEnabled::exist(transferLine.ItemId);

        ret = (whsEnabled && WHSParameters::find().AutoCreateLoadTO) || (tmsEnabled && TMSParameters::find().AutoCreateLoadTO);

        ret = ret && this.checkInventDim(transferLine.inventDim());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOrderBeenReleasedToWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the transfer order has been released to warehouse.
    /// </summary>
    /// <returns>
    /// true if the transfer order has been released; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean hasOrderBeenReleasedToWarehouse()
    {
        WHSInventTransferLine whsInventTransferLine;
        InventTransferLine inventTransferLine;

        select firstonly RecId from whsInventTransferLine
            where whsInventTransferLine.ReleasedQty > 0
                join inventTransferLine
                    where inventTransferLine.RecId == whsInventTransferLine.InventTransferLine
                        && inventTransferLine.TransferId == transferLine.TransferId
                        && inventTransferLine.RecId != transferLine.RecId;
            
        if (whsInventTransferLine.RecId != 0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new shipment for the load line based on the transfer line.
    /// </summary>
    /// <returns>
    /// <c>WHSShipmentTable</c> record.
    /// </returns>
    [Hookable(false)]
    internal WHSShipmentTable createNewShipment()
    {
        WHSShipmentTable shipmentTable;

        ttsbegin;

        shipmentTable.initShipmentForTransferOrder(WHSWarehouseReleaseTransferOrderParameters::newFromParameters(false, InventTransferTable::find(transferLine.TransferId), transferLine));
        shipmentTable.insert();

        ttscommit;

        return shipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWHSInventTransferLine</Name>
				<Source><![CDATA[
    private void updateWHSInventTransferLine()
    {
        WHSInventTransferLine whsInventTransferLine = WHSInventTransferLine::findByInventTransId(transferLine.InventTransId, true);

        whsInventTransferLine.ReleasedQty = this.getHandlingQty();

        whsInventTransferLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHandlingQty</Name>
				<Source><![CDATA[
    private InventHandlingQty getHandlingQty()
    {
        if (PdsGlobal::pdsIsCWItem(transferLine.ItemId))
        {
            return transferLine.PdsCWQtyTransfer;
        }
        
        return transferLine.QtyTransfer;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>