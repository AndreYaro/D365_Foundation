<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocMsgExporter_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Coordenades the process of retrieving the messages that needs to be processed and
/// sends them to the webservices.
/// </summary>
public class EFDocMsgExporter_BR extends RunBaseBatch implements BatchRetryable
{
    #FiscalDocumentModels_BR
    boolean messageProcesedWithError;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSendDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a given fiscal establishment is able to communicate with government web services.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// <c>FiscalEstablishment_BR</c> to be validated.
    /// </param>
    /// <returns>
    /// true if the fiscal establishment is able to communicate with government; false otherwise.
    /// </returns>
    protected boolean canSendDocument(FiscalEstablishment_BR _fiscalEstablishment)
    {
        boolean ret = true;

        setPrefix(strFmt("@GLS222568", _fiscalEstablishment.FiscalEstablishmentId));

        ret = this.checkFiscalEstablishmentCertificate(_fiscalEstablishment);

        if (!_fiscalEstablishment.EFDocEnvironment)
        {
            ret = checkFailed("@SYS4081410");
        }

        if (!_fiscalEstablishment.EFDocAuthority)
        {
            error("@GLS222569");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSendNFCeDocument</Name>
				<Source><![CDATA[
    private boolean canSendNFCeDocument(FiscalEstablishment_BR _fiscalEstablishment)
    {
        boolean ret = true;

        setPrefix(strFmt("@GLS222568", _fiscalEstablishment.FiscalEstablishmentId));

        ret = this.checkFiscalEstablishmentCertificate(_fiscalEstablishment);

        if (!_fiscalEstablishment.ConsumerEFDocEnvironment)
        {
            ret = checkFailed("@NFE:RetailEFDocConsEnvCheckError");
        }

        if (!_fiscalEstablishment.ConsumerEFDocAuthority)
        {
            ret = checkFailed("@NFE:RetailEFDocConsAuthCheckError");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFiscalEstablishmentCertificate</Name>
				<Source><![CDATA[
    private boolean checkFiscalEstablishmentCertificate(FiscalEstablishment_BR _fiscalEstablishment)
    {
        boolean ret = true;
        boolean useAdvCertificateStore = SystemParameters::find().UseAdvCertificateStore;

        if ((!useAdvCertificateStore && !_fiscalEstablishment.EFDocDigitalCertificateSubject)
            || (useAdvCertificateStore && !_fiscalEstablishment.EFDocKeyVaultCertificateRef))
        {
            error("@GLS222567");
            ret = false;
        }
        else
        {
            System.Security.Cryptography.X509Certificates.X509Certificate2 certificate = CertificateHelper_BR::getDigitalCertificate(_fiscalEstablishment.EFDocKeyVaultCertificateRef, _fiscalEstablishment.EFDocDigitalCertificateSubject);
            utcdatetime validFrom = Global::CLRSystemDateTime2UtcDateTime(certificate.get_NotBefore());
            utcdatetime validTo = Global::CLRSystemDateTime2UtcDateTime(certificate.get_NotAfter());

            if (validTo < DateTimeUtil::utcNow())
            {
                ret = checkFailed(strFmt("@SYS4081398",
                                         certificate.Subject,
                                         datetime2str(validTo, DateFlags::FormatAll)));
            }
            else if (validFrom > DateTimeUtil::utcNow())
            {
                ret = checkFailed(strFmt("@SYS4081409",
                                         certificate.Subject,
                                         datetime2str(validFrom, DateFlags::FormatAll)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListMessageToInquire</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of messages that should be inquired.
    /// </summary>
    /// <param name="_messageType">
    /// The message type to build the query from.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create message list.
    /// </param>
    /// <returns>
    /// A map from fiscal establishment ID to <c>EFiscalDocumentList_BR</c> of documents that should be inquired.
    /// </returns>
    protected Map getListMessageToInquire(EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode)
    {
        return this.getMessageList(EFDocMessageStatus_BR::Sent, _messageType, _contingencyMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListMessageToSend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the list of messages that should be sent.
    /// </summary>
    /// <param name="_messageType">
    /// The message type to build the query from.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create the message list to be sent.
    /// </param>
    /// <returns>
    /// A map from fiscal establishment ID to <c>EFiscalDocumentList_BR</c> of documents that should be sent.
    /// </returns>
    private Map getListMessageToSend(EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode)
    {
        return this.getMessageList(EFDocMessageStatus_BR::Waiting, _messageType, _contingencyMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the implementation of <c>IEFDocMsg_BR</c> for a given message type.
    /// </summary>
    /// <param name="_messageType">
    /// <c>EFDocMessageType_BR</c> to build the message for.
    /// </param>
    /// <returns>
    /// An implementation of <c>IEFDocMsg_BR</c> for the given message type.
    /// </returns>
    protected IEFDocMsg_BR getMessage(EFDocMessageType_BR _messageType)
    {
        return EFDocMsgBase_BR::createFromMessageType(_messageType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageList</Name>
				<Source><![CDATA[
    private Map getMessageList(EFDocMessageStatus_BR _status, EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode)
    {
        EFiscalDocumentList_BR  list;
        EFDocument_BR           eFDocument;
        FiscalDocument_BR       fiscalDocument;
        FiscalEstablishment_BR  fiscalEstablishment;
        EFDocContingencyMode_BR contingencyMode;
        Set                     checkedFiscalEstablishments = new Set(Types::String);
        Map                     documentsPerEstablishment   = new Map(Types::Record, Types::Class);

        while select fiscalEstablishment
        {
            contingencyMode = EFDocContingencyMode_BR::getCurrentContingencyMode(fiscalEstablishment.FiscalEstablishmentId);

            if (contingencyMode.Mode != EFDocContingMode_BR::SecurityForm && contingencyMode.Mode != EFDocContingMode_BR::SecurityFormDA)
            {
                while select fiscalDocument
                    join RecId from eFDocument
                    where eFDocument.MessageStatus   == _status
                       && eFDocument.MessageType     == _messageType
                       && eFDocument.RefRecId        == fiscalDocument.RecId
                       && eFDocument.ContingencyMode == _contingencyMode
                       && fiscalDocument.FiscalEstablishment == fiscalEstablishment.FiscalEstablishmentId
                {
                    // To avoid printing the same error messages multiple times, control
                    // which fiscal establishments have been validated
                    if (!checkedFiscalEstablishments.in(fiscalDocument.FiscalEstablishment))
                    {
                        checkedFiscalEstablishments.add(fiscalDocument.FiscalEstablishment);
                        if ((fiscalDocument.Model == EFDocConstants_BR::Model55
                            && this.canSendDocument(fiscalEstablishment))
                            || (fiscalDocument.Model == EFDocConstants_BR::Model65
                            && this.canSendNFCeDocument(fiscalEstablishment)))
                        {
                            documentsPerEstablishment.insert(fiscalEstablishment, EFiscalDocumentList_BR::construct());
                        }
                    }

                    // Just valid fiscal establishments are inserted in the map
                    if (documentsPerEstablishment.exists(fiscalEstablishment))
                    {
                        list = documentsPerEstablishment.lookup(fiscalEstablishment);
                        list.add(EFiscalDocument_BR::construct(fiscalDocument));
                    }
                }
            }
        }

        return documentsPerEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the return transport class for a given fiscal establishment and message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// <c>FiscalEstablishment_BR</c> to build the transport for.
    /// </param>
    /// <param name="_messageType">
    /// <c>EFDocMessageType_BR</c> to build the transport for.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create the transport.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model that will be used to create the transport
    /// </param>
    /// <returns>
    /// An implementation of <c>IEFDocMsgTransport</c>.
    /// </returns>
    protected IEFDocMsgTransport getReturnTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode, FiscalDocumentModel_BR _fiscalDocumentModel = #FiscalDocModel_55)
    {
        return EFDocFactory_BR::construct().createReturnTransport(_fiscalEstablishment, _messageType, _contingencyMode, _fiscalDocumentModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSendTransport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the send transport class for a given fiscal establishment and message type.
    /// </summary>
    /// <param name="_fiscalEstablishment">
    /// <c>FiscalEstablishment_BR</c> to build the transport for.
    /// </param>
    /// <param name="_messageType">
    /// <c>EFDocMessageType_BR</c> to build the transport for.
    /// </param>
    /// <param name="_contingencyMode">
    /// The contingency mode for which to create the transport.
    /// </param>
    /// <param name="_fiscalDocumentModel">
    /// The fiscal document model to create the transport
    /// </param>
    /// <returns>
    /// An implementation of <c>IEFDocMsgTransport</c>.
    /// </returns>
    protected IEFDocMsgTransport getSendTransport(FiscalEstablishment_BR _fiscalEstablishment, EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode, FiscalDocumentModel_BR _fiscalDocumentModel = #FiscalDocModel_55)
    {
        return EFDocFactory_BR::construct().createSendTransport(_fiscalEstablishment, _messageType, _contingencyMode, _fiscalDocumentModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>receive</Name>
				<Source><![CDATA[
    private void receive(EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode)
    {
        try
        {
            IEFDocMsg_BR message = this.getMessage(_messageType);
            Map documentsPerEstablishments = this.getListMessageToInquire(_messageType, _contingencyMode);
            MapEnumerator fiscalEstablishments = documentsPerEstablishments.getEnumerator();

            while (fiscalEstablishments.moveNext())
            {
                FiscalEstablishment_BR currEstablishment = fiscalEstablishments.current();
                EFiscalDocumentList_BR documentList = documentsPerEstablishments.lookup(currEstablishment);

                while (documentList.moveNext())
                {
                    EFiscalDocument_BR eFiscalDocument = documentList.current();

                    try
                    {
                        EFiscalDocumentReturnInfo_BR msgReturn = message.receive(
                            eFiscalDocument,
                            this.getReturnTransport(
                                currEstablishment,
                                _messageType,
                                _contingencyMode,
                                this.fiscalDocumentModel(_contingencyMode)));
                    }
                    catch
                    {
                        messageProcesedWithError = true;
                    }
                }
            }
        }
        catch
        {
            messageProcesedWithError = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiveMsgReturns</Name>
				<Source><![CDATA[
    /// <summary>
    /// Communicates with government web services to get the results of the
    /// batch operations sent previously.
    /// </summary>
    /// <param name="_messageType">
    /// The type of the message to be inquired.
    /// </param>
    protected void receiveMsgReturns(EFDocMessageType_BR _messageType)
    {
        this.receive(_messageType, EFDocContingMode_BR::ConsumerEFDocOffline);
        this.receive(_messageType, EFDocContingMode_BR::SvcAn);
        this.receive(_messageType, EFDocContingMode_BR::SvcRs);
        this.receive(_messageType, EFDocContingMode_BR::SecurityForm);
        this.receive(_messageType, EFDocContingMode_BR::SecurityFormDA);
        this.receive(_messageType, EFDocContingMode_BR::Off);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        setprefix("@GLS62994");

        EFDocFormatClassInfo_BR::checkDefaultData();

        this.sendMessages(EFDocMessageType_BR::Submit);
        this.sendMessages(EFDocMessageType_BR::Cancel);
        this.sendMessages(EFDocMessageType_BR::Discard);
        this.receiveMsgReturns(EFDocMessageType_BR::Submit);

        if (messageProcesedWithError)
        {
            error("@Brazil:EFDocMsgExporterError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>send</Name>
				<Source><![CDATA[
    private void send(EFDocMessageType_BR _messageType, EFDocContingMode_BR _contingencyMode)
    {
        try
        {
            Map documentsPerEstablishments = this.getListMessageToSend(_messageType, _contingencyMode);
            MapEnumerator fiscalEstablishments = documentsPerEstablishments.getEnumerator();
            boolean documentsInContingencyModeSVC;

            switch (_contingencyMode)
            {
                case EFDocContingMode_BR::SvcAn:
                case EFDocContingMode_BR::SvcRs:
                    documentsInContingencyModeSVC = true;
                    break;
            }

            IEFDocMsg_BR msgSender = this.getMessage(_messageType);

            while (fiscalEstablishments.moveNext())
            {
                try
                {
                    FiscalEstablishment_BR currEstablishment = fiscalEstablishments.current();
                    EFiscalDocumentList_BR messages = documentsPerEstablishments.lookup(currEstablishment);

                    if (!documentsInContingencyModeSVC && currEstablishment.isSvcContingencyTurnedOn())
                    {
                        continue;
                    }
                    else if(documentsInContingencyModeSVC && currEstablishment.isSvcContingencyTurnedOn())
                    {
                        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00056, funcName());
                    }

                    if (_messageType == EFDocMessageType_BR::Discard && documentsInContingencyModeSVC)
                    {
                        this.sendDiscardMessagesToOriginalAuthority(messages, currEstablishment);
                    }
                    else
                    {
                        if (_contingencyMode == EFDocContingMode_BR::SecurityForm
                            || _contingencyMode == EFDocContingMode_BR::SecurityFormDA)
                        {
                            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00054, funcName());
                        }

                        msgSender.send(messages,
                            this.getSendTransport(
                                currEstablishment,
                                _messageType,
                                _contingencyMode,
                                this.fiscalDocumentModel(_contingencyMode)));
                    }
                }
                catch
                {
                    messageProcesedWithError = true;
                }
            }
        }
        catch
        {
            messageProcesedWithError = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends messages of an specified type to the government.
    /// </summary>
    /// <param name="_messageType">
    /// The type of the messages to be sent.
    /// </param>
    protected void sendMessages(EFDocMessageType_BR _messageType)
    {
        this.send(_messageType, EFDocContingMode_BR::ConsumerEFDocOffline);
        this.send(_messageType, EFDocContingMode_BR::SvcAn);
        this.send(_messageType, EFDocContingMode_BR::SvcRs);
        this.send(_messageType, EFDocContingMode_BR::SecurityForm);
        this.send(_messageType, EFDocContingMode_BR::SecurityFormDA);
        this.send(_messageType, EFDocContingMode_BR::Off);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks data after serialization.
    /// </summary>
    /// <param name="packedClass">A container with packed data.</param>
    /// <returns><c>true</c> if data was successfully unpacked; <c>false</c> otherwise.</returns>
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>EFDocMsgExporter_BR</c> object.
    /// </summary>
    /// <returns>A <c>EFDocMsgExporter_BR</c> object.</returns>
    public static EFDocMsgExporter_BR construct()
    {
        return new EFDocMsgExporter_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a description of the class' task.
    /// </summary>
    /// <returns>A string with the class description.</returns>
    public static str description()
    {
        return "@GLS62575";
    }

]]></Source>
			</Method>
			<Method>
				<Name>exportNFCeDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits NFC-e documents.
    /// </summary>
    internal void exportNFCeDocuments()
    {
        setprefix("@GLS62994");

        EFDocFormatClassInfo_BR::checkDefaultData();

        this.send(EFDocMessageType_BR::Submit, EFDocContingMode_BR::ConsumerEFDocOffline);
        this.receive(EFDocMessageType_BR::Submit, EFDocContingMode_BR::ConsumerEFDocOffline);

        if (messageProcesedWithError)
        {
            error("@Brazil:EFDocMsgExporterError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes class' job.
    /// </summary>
    /// <param name="args">The parameters for the job execution.</param>
    static void main(Args args)
    {
        EFDocMsgExporter_BR exporter;

        exporter = EFDocMsgExporter_BR::construct();

        if (exporter.prompt())
        {
            exporter.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalDocumentModel</Name>
				<Source><![CDATA[
    private FiscalDocumentModel_BR fiscalDocumentModel(EFDocContingMode_BR _contingencyMode, FiscalDocument_BR fiscaldocument = null)
    {
        return _contingencyMode == EFDocContingMode_BR::ConsumerEFDocOffline ? #FiscalDocModel_65 : #FiscalDocModel_55;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendDiscardMessagesToOriginalAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends discard messages to the original authority (contingency mode - Off)
    /// </summary>
    /// <param name="_messages">
    /// List of messages to be sent
    /// </param>
    /// <param name="_fiscalEstablishment">
    /// Fiscal Establishment related to the list of messages to be sent
    /// </param>
    private void sendDiscardMessagesToOriginalAuthority(EFiscalDocumentList_BR _messages, FiscalEstablishment_BR _fiscalEstablishment)
    {
        IEFDocMsg_BR    msgSender;

        msgSender = this.getMessage(EFDocMessageType_BR::Discard);
        msgSender.send(_messages, this.getSendTransport(_fiscalEstablishment, EFDocMessageType_BR::Discard, EFDocContingMode_BR::Off));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (BusinessDocumentParameters::isFeatureEnabled([EInvoicingFeaturesForService::BR00053]))
        {
            ret = checkFailed("@BusinessDocumentSubmissionService:OperationDidntRunNFe");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>