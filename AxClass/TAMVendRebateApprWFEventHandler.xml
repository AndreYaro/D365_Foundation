<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMVendRebateApprWFEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMVendRebateApprWFEventHandler</c> class is the event handler class for managing the
/// workflow document started event, workflow document canceled event, and the workflow document
/// completed event.
/// </summary>
class TAMVendRebateApprWFEventHandler implements 
    WorkflowCanceledEventHandler,
    WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the <c>WFApprovalStatus</c> field on the <c>TAMVendRebateAgreement</c> table to the
    ///     <c>TAMVendRebateApprovalStatus::NotSubmitted</c> enumeration value.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///     An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///     This method is called from workflow framework when the workflow is canceled.
    /// </remarks>
    public void canceled(WorkflowEventArgs _workflowEventArgs)
    {
        TAMVendRebateAgreement::setWorkflowStatus(
            _workflowEventArgs.parmWorkflowContext().parmRecId(),
            TAMVendRebateApprovalStatus::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the completed event for the workflow document.
    /// </summary>
    /// <param name="_workflowEventArgs">
    /// An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    public void completed(WorkflowEventArgs _workflowEventArgs)
    {
        WorkflowTrackingTable               workflowTrackingTable;
        WorkflowTrackingStatusTable         workflowTrackingStatusTable;
        TAMVendRebateAgreement              tamVendRebateAgreement;

        ttsBegin;
        tamVendRebateAgreement = TAMVendRebateAgreement::find(_workflowEventArgs.parmWorkflowContext().parmRecId(), true);

        if (tamVendRebateAgreement)
        {
            select firstonly User from workflowTrackingTable
                where workflowTrackingTable.TrackingContext == workflowtrackingcontext::WorkItem
                    && workflowTrackingTable.TrackingType == workflowtrackingtype::Approval
                exists join workflowTrackingStatusTable
                    where workflowTrackingStatusTable.CorrelationId == _workflowEventArgs.parmWorkflowContext().parmWorkflowCorrelationId()
                        && workflowTrackingStatusTable.Recid == workflowTrackingTable.WorkflowTrackingStatusTable;

            tamVendRebateAgreement.WFApprovalStatus = TAMVendRebateApprovalStatus::Approved;
            tamVendRebateAgreement.Validated        = NoYes::Yes;

            if (workflowTrackingTable)
            {
                // Only set the Verifier if a workflowTrackingTable record was found.
                tamVendRebateAgreement.Verifier     = HcmWorker::userId2Worker(workflowTrackingTable.User);
            }

            tamVendRebateAgreement.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>