<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXChangeTracking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>RetailCDXChangeTracking</c> performs retail CDX change tracking.
/// </summary>
public class RetailCDXChangeTracking
{
    RetailCDXChangeRefTable1 ref1;
    RetailCDXChangeRefTable2 ref2;
    RetailCDXDataSyncContext ctContext;

    List sourceTables;
    Set executedCTQuery;

    Connection conn;
    Statement stmt;
    str sql;
    Partition partitionID;

    private RetailCDXDownloadSubjobSourceContext subjobSourceCtx;

    private RetailCDXDownloadSubjobSourceLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        executedCTQuery = new Set(Types::String);
        sourceTables = new List(Types::String);

        partitionID = getcurrentpartitionrecid();

        conn = new Connection();
        stmt = conn.createStatement();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutedCTQueries</Name>
				<Source><![CDATA[
    internal void setExecutedCTQueries(Set _executedCTQueries)
    {
        executedCTQuery = _executedCTQueries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramDataSyncContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current data sync context.
    /// </summary>
    /// <param name="_ctContext">Data sync context.</param>
    /// <returns>Current data sync context.</returns>
    public RetailCDXDataSyncContext paramDataSyncContext(RetailCDXDataSyncContext _ctContext)
    {
        ctContext = _ctContext;

        return ctContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChangeTracking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs change tracking on database.
    /// </summary>
    public void runChangeTracking()
    {
        Microsoft.Dynamics.Ax.Xpp.ErrorException xppEx;
        System.Exception ex;

        try
        {
            logger.logCDXSubjobDownloadSourceChangeTrackingStart();

            if (!ctContext || !subjobSourceCtx)
            {
                // Data sync context is not set.
                throw error("@REX4160452");
            }

            this.runChangeTracking_table(tableNum(RetailCDXDataStoreChannel));

            if (subjobSourceCtx.paramIsAXTableTempDB())
            {
                TableId tid = subjobSourceCtx.getTableIdFromRelation(RetailCDXConstants::RelTableRelationName);

                int i = 0;
                while (tid)
                {
                    if (i == 0)
                    {
                        this.runDeleteChangeTracking_table(tid);
                    }

                    this.runChangeTracking_table(tid);

                    i++;
                    tid = subjobSourceCtx.getTableIDFromRelation(RetailCDXConstants::RelTableRelationName + int2str(i));
                }
            }
            else
            {
                TableId tid = tableName2id(subjobSourceCtx.paramAXSourceTableName());
                this.runDeleteChangeTracking_table(tid);
                this.runChangeTracking_table(tid);
            }
        }
        catch (xppEx)
        {
            ex = xppEx;
            logger.logCDXSubjobDownloadSourceChangeTrackingFailure(ex);

            if (RetailCDXChangeTrackingAux::isChangeTrackingDisable())
            {
                throw error("@Retail:CdxErrorTableTrackingDisable");
            }
            else
            {
                throw error(strFmt("@Retail:ChangedRecordDetectionError", subjobSourceCtx.paramSubjobId()));
            }
        }
        catch (ex)
        {
            logger.logCDXSubjobDownloadSourceChangeTrackingFailure(ex);
            throw error(strFmt("@Retail:ChangedRecordDetectionError", subjobSourceCtx.paramSubjobId()));
        }
        finally
        {
            ctContext.addException(ex);
            logger.logCDXSubjobDownloadSourceChangeTrackingStop(ex);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChangeTracking_table</Name>
				<Source><![CDATA[
    internal void runChangeTracking_table(TableId tid)
    {
        RetailCDXChangeTrackingSQL ctQueries;
        RetailCDXChangeTrackingQueue queryQueue;
        str partition_filter;

        // Check if change tracking is enabled with "track columns update" option set
        if (RetailCdxTrackColumnsUpdateFlight::instance().isEnabled() && !RetailCDXChangeTrackingAux::isTrackColumnsUpdatedOnEnabled(tid))
        {
            throw error(strFmt("@Retail:ChangeTrackingWithTrackColumnsUpdated", tableId2Name(tid)));
        }

        partition_filter = strFmt(' AND t.[PARTITION] = %1', partitionID);

        while select QueryID, SqlCTQuery
        from ctQueries
            order by ctQueries.QueryID
            exists join queryQueue
            where ctQueries.RetailConnChannelSchema == ctContext.getChannelSchema()
               && queryQueue.RetailConnChannelSchema == ctContext.getChannelSchema()
               && queryQueue.RefTableID == tid
               && queryQueue.QueryType == RetailCDXSqlQueryTypeEnum::InsertUpdate
               && ctQueries.QueryID == queryQueue.QueryID
               && queryQueue.IsForCacheBasedQuery == ctContext.paramIsCacheBasedQueryEnabled()
        {
            sql = ctQueries.SqlCTQuery;
            sql = this.modifyToInsertCurrentVersion(sql);
            sql = strFmt(sql, ctContext.getPhysicalNameChangeRefTable1(), ctContext.paramLastSyncVer(), partitionID, ctContext.paramCurrentSyncVer()); // %4 is used to filter out inserts after the current version.
            sql = strReplace(sql, '__PARTITION_FILTER__', partition_filter);

            // dont skip the change tracking check for the channel to datastore mapping table
            // as its not saved in any of the intermediate delta sync tables.
            if (tid != tableNum(RetailCDXDataStoreChannel) && executedCTQuery.in(sql))
            {
                continue;
            }

            executedCTQuery.add(sql);

            logger.logChangeTrackingStartQuery(tableId2Name(tid), ctQueries.QueryID, RetailCDXSqlQueryTypeEnum::InsertUpdate);

            int rowCount = RetailCDXChangeTrackingAux::executeSqlStmt(stmt, sql);

            logger.logChangeTrackingFinishQuery(tableId2Name(tid), ctQueries.QueryID, RetailCDXSqlQueryTypeEnum::InsertUpdate, rowCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyToInsertCurrentVersion</Name>
				<Source><![CDATA[
    private str modifyToInsertCurrentVersion(str _sql)
    {
        const str filter = 'CT.SYS_CHANGE_OPERATION = \'I\'';
        const str newFilter = '(' +  filter + ' AND CT.SYS_CHANGE_CREATION_VERSION <= %4)'; // SYS_CHANGE_CREATION_VERSION is the version associated with the insert operation.

        if (RetailCDXFeatureControl::isChangeTrackingByRangeDisabled())
        {
            return sql;
        }
        return strReplace(_sql, filter, newFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runDeleteChangeTracking_table</Name>
				<Source><![CDATA[
    private void runDeleteChangeTracking_table(TableId tid)
    {
        RetailCDXChangeTrackingSQL ctQueries;
        RetailCDXChangeTrackingQueue queryQueue;
        str partition_filter;

        select firstOnly QueryID, SqlCTQuery
        from ctQueries
            exists join queryQueue
            where ctQueries.RetailConnChannelSchema == ctContext.getChannelSchema()
               && queryQueue.RetailConnChannelSchema == ctContext.getChannelSchema()
               && queryQueue.RefTableID == tid
               && queryQueue.QueryType == RetailCDXSqlQueryTypeEnum::Delete
               && ctQueries.QueryID == queryQueue.QueryID
               && queryQueue.IsForCacheBasedQuery == ctContext.paramIsCacheBasedQueryEnabled();

        partition_filter = strFmt(' AND CT.[PARTITION] = %1', partitionID);

        sql = ctQueries.SqlCTQuery;
        sql = this.modifyToDeleteCurrentVersion(sql);
        sql = strFmt(sql, ctContext.getPhysicalNameChangeRefTable3(), ctContext.paramLastSyncVer(), partitionID, ctContext.paramCurrentSyncVer());
        sql = strReplace(sql, '__PARTITION_FILTER__', partition_filter);

        if (executedCTQuery.in(sql))
        {
            return;
        }

        executedCTQuery.add(sql);

        logger.logChangeTrackingStartQuery(tableId2Name(tid), ctQueries.QueryID, RetailCDXSqlQueryTypeEnum::Delete);

        int rowCount = RetailCDXChangeTrackingAux::executeSqlStmt(stmt, sql);

        logger.logChangeTrackingFinishQuery(tableId2Name(tid), ctQueries.QueryID, RetailCDXSqlQueryTypeEnum::Delete, rowCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyToDeleteCurrentVersion</Name>
				<Source><![CDATA[
    private str modifyToDeleteCurrentVersion(str _sql)
    {
        const str filter = 'CT.SYS_CHANGE_OPERATION = \'D\'';
        const str newFilter = '' +  filter + ' AND CT.SYS_CHANGE_VERSION <= %4';

        if (RetailCDXFeatureControl::isChangeTrackingByRangeDisabled())
        {
            return sql;
        }

        return strReplace(_sql, filter, newFilter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>RetailCDXChangeTracking</c> object for detecting changed records.
    /// </summary>
    /// <param name = "_subjobSourceCtx">The subjob source context object.</param>
    /// <returns>The <c>RetailCDXChangeTracking</c> object.</returns>
    internal static RetailCDXChangeTracking createInstance(RetailCDXDownloadSubjobSourceContext _subjobSourceCtx)
    {
        RetailCDXChangeTracking ct = new RetailCDXChangeTracking();

        ct.initFromSubjobSourceContext(_subjobSourceCtx);

        return ct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSubjobSourceContext</Name>
				<Source><![CDATA[
    private void initFromSubjobSourceContext(RetailCDXDownloadSubjobSourceContext _subjobSourceCtx)
    {
        this.subjobSourceCtx = _subjobSourceCtx;
        this.ctContext = _subjobSourceCtx.paramDataSyncContext();

        // if its cache based approach we keep track of executed CT queries on the jobs data sync context level
        // so as not to run them again after they are executed once because their end result is cached already.
        if (this.ctContext.paramIsCacheBasedQueryEnabled())
        {
            this.executedCTQuery = this.ctContext.paramExecutedCTQueriesTracker();
        }

        this.logger = _subjobSourceCtx.paramSubjobLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstanceFromJobSourceCtx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>RetailCDXChangeTracking</c> object for detecting changed records.
    /// </summary>
    /// <param name = "_jobSourceCtx">The job source context object.</param>
    /// <returns>The <c>RetailCDXChangeTracking</c> object.</returns>
    internal static RetailCDXChangeTracking createInstanceFromJobSourceCtx(RetailCDXDataSyncContext _jobSourceCtx)
    {
        RetailCDXChangeTracking ct = new RetailCDXChangeTracking();

        ct.ctContext = _jobSourceCtx;
        ct.logger = new RetailCDXDownloadSubjobSourceLogger(_jobSourceCtx);

        return ct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>