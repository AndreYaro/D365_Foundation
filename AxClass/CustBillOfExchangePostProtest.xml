<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangePostProtest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>CustBillOfExchangePostProtestHonored</c> is used when a protest bill of exchange journal is posted.
/// </summary>
public class CustBillOfExchangePostProtest extends CustBillOfExchangePost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postNextStep</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new open transactions for transactions settled by the settling transaction.
    /// </summary>
    /// <param name = "_custVoucher">
    ///     An instance of <c>CustVendVoucher</c>.
    /// </param>
    /// <param name = "_settlingTrans">
    ///     A <c>CustVendTrans</c> table buffer.
    /// </param>
    protected void postNextStep(CustVendVoucher _custVoucher, CustVendTrans _settlingTrans)
    {
        CustVoucher custVoucher = _custVoucher;
        CustTrans settlingTrans = _settlingTrans;
        CustTrans nextStepTrans;

        if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
        {
            super(custVoucher, settlingTrans);
        }
        else
        {
            nextStepTrans.data(settlingTrans);

            custVoucher.parmSettlementType(this.getSettlementType());
            custVoucher.parmPostingProfile(CustVendNegInstPost::getPostingProfile(
                ledgerJournalType,
                ledgerJournalTrans.BankRemittanceType));

            // Creates new open transactions for transactions settled by the settling transaction.

            // This code is run when posting a Bill Of Exchange Protest Journal for non-settled transactions.
            // In this code the settlingTrans, settledTrans, and custSettlement will always be in the current company so we do not
            // need to do a cross company select statement and do not need to changeCompany after the select statement.
            CustSettlement custSettlement;
            CustTrans settledTrans;
            while select TransRecId, OffsetRecId from custSettlement
                where custSettlement.TransRecId == settlingTrans.RecId
            join settledTrans
                where settledTrans.RecId == custSettlement.OffsetRecid
            {
                nextStepTrans.AmountCur = settledTrans.AmountCur;
                nextStepTrans.AmountMST = settledTrans.AmountMST;
                custVoucher.parmAmountCur(nextStepTrans.AmountCur);
                custVoucher.parmTransTxt(strfmt("@SYS83923", enum2str(ledgerJournalTrans.CustVendNegInstProtestReason), settledTrans.BillOfExchangeID));

                custVoucher.post(ledgerVoucher, nextStepTrans);

                CustBillOfExchangeJour custBillOfExchangeJour = CustBillOfExchangeJour::find(settledTrans.BillOfExchangeID, true);
                nextStepTrans.AmountCur = -nextStepTrans.AmountCur;
                CustBillOfExchangeTrans custBillOfExchangeTrans = this.insertNegInstTrans(custBillOfExchangeJour, nextStepTrans);

                if (isConditionalTaxSpain)
                {
                    this.taxSettlement_ES(custBillOfExchangeTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlingStep</Name>
				<Source><![CDATA[
    protected void postSettlingStep(CustVendVoucher custVendVoucher, CustVendTrans settlingTrans)
    {
        super(custVendVoucher, settlingTrans);

        if (ledgerJournalTrans.BankRemittanceType == BankRemittanceType::Discount
            && ledgerJournalTrans.BankAccountId)
        {
            BankVoucher bankVoucher = BankVoucher::newBankVoucher(
                settlingTrans.AmountCur,
                settlingTrans.CurrencyCode,
                ledgerJournalTrans.BankAccountId,
                settlingTrans.PaymMode,
                settlingTrans.PaymReference,
                '',
                settlingTrans.Txt,
                custVendVoucher.parmLedgerPostingType(),
                settlingTrans.DefaultDimension,
                BankAccountTable::findLedgerDimension(ledgerJournalTrans.BankAccountId),
                ledgerJournalTrans.BankTransType,
                settlingTrans.ExchRate,
                settlingTrans.ExchRateSecond,
                Currency::noYes2UnknownNoYes(ledgerJournalTrans.Triangulation),
                settlingTrans.ReportingCurrencyExchRate,
                settlingTrans.ReportingCurrencyExchRateSecondary);

            bankVoucher.parmSourceTableId(ledgerJournalTrans.TableId);
            bankVoucher.parmSourceRecId(ledgerJournalTrans.RecId);
            bankVoucher.post(ledgerVoucher);

            LedgerDimensionDefaultAccount ledgerDimensionLiabilities = CustLedgerAccounts::liabilitiesLedgerDimension(
                settlingTrans.AccountNum,
                CustParameters::find().PostingProfileBillsRemitDiscount);

            LedgerDimensionAccount ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionLiabilities, settlingTrans.DefaultDimension);

            LedgerVoucherObject ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject();
            CurrencyExchangeHelper exchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                ledgerVoucherObject.parmAccountingDate());

            exchRateHelper.parmExchangeRate1(settlingTrans.ExchRate);
            exchRateHelper.parmExchangeRate2(settlingTrans.ExchRateSecond);
            exchRateHelper.parmReportingExchangeRate1(settlingTrans.ReportingCurrencyExchRate);
            exchRateHelper.parmReportingExchangeRate2(settlingTrans.ReportingCurrencyExchRateSecondary);

            LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                ledgerVoucherObject,
                custVendVoucher.parmLedgerPostingType(),
                ledgerDimensionMerged,
                settlingTrans.CurrencyCode,
                -settlingTrans.AmountCur,
                exchRateHelper);
            ledgerVoucherTransObject.parmSourceTableId(settlingTrans.TableId);
            ledgerVoucherTransObject.parmSourceRecId(settlingTrans.RecId);
            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>protestProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the selected option to protest settled process; that can be "as invoice" or "as open payment".
    /// </summary>
    /// <returns>
    ///     The protest settled process option.
    ///</returns>
    public CustVendNegInstProtestProcess protestProcess()
    {
        return ledgerJournalTrans.ledgerJournalTable().CustVendNegInstProtestProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>seqNum</Name>
				<Source><![CDATA[
    protected CustVendNegInstSeqNum seqNum(CustBillOfExchangeID _custBillOfExchangeID)
    {
        CustVendNegInstSeqNum seqNum = super(_custBillOfExchangeID);

        if (this.protestProcess() != CustVendNegInstProtestProcess::OpenTrans)
        {
            seqNum++;
        }

        return seqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::Protested;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>