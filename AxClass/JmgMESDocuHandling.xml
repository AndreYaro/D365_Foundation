<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgMESDocuHandling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgMESDocuHandling</c> class is used to handle documents in the registration form.
/// </summary>
class JmgMESDocuHandling
{
    container               linksRef;
    container               jobIds;
    container               checkBoxes;
    container               reqRef;
    container               reqJob;
    FormFunctionButtonControl   mnuBtn;
    JmgWorkerRecId          lastWorker;
    private boolean isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled = JmgPFEAttachmentJobDocuRefFilterFlightV2::instance().isEnabled();
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDialogBody</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a check box control for each document to the specified <c>FormGroupControl</c> object.
    /// </summary>
    /// <param name="_fgc">
    ///    The <c>FormGroupControl</c> object to add controls to.
    /// </param>
    /// <param name="_createReqDocs">
    ///    A Boolean value that specifies whether only required reading documents are added to the dialog.
    /// </param>
    void createDialogBody(FormGroupControl _fgc, boolean _createReqDocs = false)
    {
        JmgJobId    lastJobId = 'inValidJobId';
        JmgJobId    currentJobId;
        JmgJobTable jobTbl;
        FormStaticTextControl   fst;
        FormCheckBoxControl     fcb;
        FormGroupControl        subGroup;
        int                     docCount;
        int                     jobIdCount = 0;
        container               refs;
        container               ids;

        refs = _createReqDocs ? reqRef : linksRef;
        ids  = _createReqDocs ? reqjob : jobIds;

        checkBoxes = connull();

        for (docCount = 1; docCount <= _fgc.controlCount();docCount++)
        {
            _fgc.controlNum(docCount).visible(false);
        }

        for (docCount = 1; docCount <= conlen(refs);docCount++)
        {
            currentJobId = conpeek(ids,docCount);

            if (currentJobId != lastJobId)
            {
                jobTbl = JmgJobTable::find(currentJobId);
                subGroup = _fgc.addControl(FormControlType::Group,'jobidGroup'+int2str(jobIdcount));
                subGroup.columns(2);
                subGroup.frameType(1);
                fst = subGroup.addControl(FormControlType::StaticText,'jobid'+int2str(doccount));
                fst.text(jobTbl.ModuleRefId);
                fst = subGroup.addControl(FormControlType::StaticText,'jobid_'+int2str(doccount));
                fst.text(enum2str(jobTbl.Type)+ '  ' + jobTbl.Description);
                jobIdCount++;
            }
            subGroup = _fgc.addControl(FormControlType::Group,'documentGroup'+int2str(docCount));
            subGroup.columns(1);
            subGroup.frameType(1);
            fcb = subGroup.addControl(FormControlType::CheckBox,'check'+int2str(docCount));
            DocuRef docuRefRecord = DocuRef::findRecId(conpeek(refs, docCount));
            fcb.label(docuRefRecord.Name);
            fcb.style(CheckBoxStyle::Checkbox);
            fcb.value(1);
            fcb.enabled(true);
            fcb.widthMode(FormWidth::SizeToAvailable);
            checkBoxes += fcb.id();
            if (docuRefRecord.Notes)
            {
                FormStaticTextControl docuRefNotesdetails = subGroup.addControl(FormControlType::StaticText, 'notes' + int2str(docCount));
                docuRefNotesdetails.text(docuRefRecord.Notes);
            }
            lastJobId = currentJobId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRequestedReading</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the required reading documents.
    /// </summary>
    void findRequestedReading()
    {
        DocuRef                 docRef;
        JmgDocumentGroupMember  docMem;
        JmgDocumentGroupType    docType;

        reqRef = connull();
        reqJob = connull();
        //Remember to filter if employee is allowed to see docs that are returned.
        for (int i = 1; i <= conlen(linksRef); i++)
        {
            RecId docuRefRecId = conpeek(linksRef,i);
            JmgJobId jobId = conPeek(jobIds,i);

            while select docRef
                where docRef.RecId == docuRefRecId
            join DocuType, DocumentRequiredReading, DocumentRequiredOnce, DocumentGroup from docType
                where docRef.TypeId == docType.DocuType
                   && docType.DocumentRequiredReading == NoYes::Yes
            join Worker, DocumentGroup from docMem
                where docMem.Worker == lastWorker
                   && docMem.DocumentGroup == docType.DocumentGroup
            {
                if (!isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled && (!docType.DocumentRequiredOnce || (docType.DocumentRequiredOnce && !JmgDocumentLog::hasReadDocument(lastWorker,docRef.RecId))))
                {
                    reqRef += docRef.RecId;
                    reqJob += jobId;
                }

                if (isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled)
                { 
                    if (!docType.DocumentRequiredOnce || (docType.DocumentRequiredOnce && !JmgDocumentLog::hasReadDocumentByJobId(lastWorker, docRef.RecId, jobId)))
                    {
                        reqRef += docRef.RecId;
                        reqJob += jobId;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isThereRequestedReading</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether required reading is available.
    /// </summary>
    /// <returns>
    ///    true if a document that requires reading exists; otherwise, false.
    /// </returns>
    boolean isThereRequestedReading()
    {
        return conlen(reqref);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAllFilesAsRead</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the selected documents as read.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object, which contains the documents read.
    /// </param>
    /// <param name="_isReqDocs">
    ///    A Boolean value that specifies whether only required documents are marked as read.
    /// </param>
    void markAllFilesAsRead(FormRun _formRun, boolean _isReqDocs = false)
    {
        JmgDocumentLog  docLog;
        container oldRefs = _isReqDocs ? reqRef : linksRef;
        container oldJobIds  = _isReqDocs ? reqjob : jobIds;
        if (conlen(checkBoxes) != conlen(oldRefs))
        {
            info("@SYS302290");
            return;
        }
        for (int checkCount = 1; checkCount <= conlen(checkBoxes);checkCount++)
        {
            FormCheckBoxControl fcb = _formRun.control(conpeek(checkBoxes,checkCount));
            if (fcb.value())
            {
                if (!isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled && !JmgDocumentLog::hasReadDocument(lastWorker,conpeek(oldRefs,checkCount)))
                {
                    docLog.RefRecId = conpeek(oldRefs,checkCount);
                    docLog.Worker = lastWorker;
                    docLog.insert();
                }

                if (isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled)
                { 
                    JmgJobId jobId = conpeek(oldJobIds, checkCount);
                    if (!JmgDocumentLog::hasReadDocumentByJobId(lastWorker,conpeek(oldRefs,checkCount), jobId))
                    {
                        JmgJobTable jmgJobTable = JmgJobTable::find(jobId);
                        docLog.init(conpeek(oldRefs,checkCount), lastWorker, jmgJobTable.ModuleRefId);
                        docLog.insert();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllRequiredDocumentsRead</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all required documents have been read
    /// </summary>
    /// <returns>
    /// true if all required documents have been read; false otherwise
    /// </returns>
    public boolean checkAllRequiredDocumentsRead()
    {
        boolean reqDocsRead = true;

        for (int checkCount = 1; checkCount <= conlen(reqRef);checkCount++)
        {
            if (!isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled && !JmgDocumentLog::hasReadDocument(lastWorker, conPeek(reqRef, checkCount)))
            {
                reqDocsRead = false;
                break;
            }

            if (isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled && !JmgDocumentLog::hasReadDocumentByJobId(lastWorker, conPeek(reqRef, checkCount), conpeek(jobIds, checkCount)))
            {
                reqDocsRead = false;
                break;
            }
        }

        return reqDocsRead;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgMESDocuHandling</c> class.
    /// </summary>
    /// <param name="_mnuBtn">
    ///    A reference to the menu item button that called the <c>JmgMESDocuHandling</c> class.
    /// </param>
    protected void new(FormFunctionButtonControl _mnuBtn = null)
    {
        mnuBtn = _mnuBtn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openMarkedFiles</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the selected documents.
    /// </summary>
    /// <param name="_formRun">
    ///    The <c>FormRun</c> object that contains the selected documents.
    /// </param>
    /// <param name="_isReqDocs">
    ///    A Boolean value that specifies whether only required documents are opened.
    /// </param>
    public void openMarkedFiles(FormRun _formRun, boolean _isReqDocs = false)
    {
        container oldRefs = _isReqDocs ? reqRef : linksRef;

        if (conlen(checkBoxes) != conlen(oldRefs))
        {
            info("@SYS302290");
            return;
        }

        container newDocRef;
        container newJobIds;
        container oldJobIds  = _isReqDocs ? reqjob : jobIds;

        for (int checkCount = 1; checkCount <= conlen(checkBoxes);checkCount++)
        {
            FormCheckBoxControl fcb = _formRun.control(conpeek(checkBoxes, checkCount));
            if (fcb.value())
            {
                newDocRef += conpeek(oldRefs, checkCount);
                newJobIds += conpeek(oldJobIds, checkCount);
            }
        }

        if (!isJmgPFEAttachmentJobDocuRefFilterFlightV2Enabled)
        {
            JmgMESDocuHandling::openFiles(newDocRef, lastWorker);
        }
        else
        {
            JmgMESDocuHandling::openFilesAndMarkDocumentAsRead(newDocRef, newJobIds, lastWorker);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the menu button control that is used to activate the document handling.
    /// </summary>
    /// <param name="_mnuBtn">
    ///    The <c>FormFunctionButtonControl</c> object that is used to activate the document handling.
    /// </param>
    public void parmMenuButton(FormFunctionButtonControl _mnuBtn)
    {
        mnuBtn = _mnuBtn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocs</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the list of documents, which is shown when the dialog is opened.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker who is requesting the documents.
    /// </param>
    /// <param name="_jobIds">
    ///    A list of job IDs for which documents are shown.
    /// </param>
    void updateDocs(JmgWorkerRecId _worker, container _jobIds)
    {
        JmgJobDocuRef           jobDocRef;
        DocuRef                 docRef;
        int                     counter = 1;
        boolean                 thereAreDocs = false;
        JmgJobId                jobId;

        linksRef = connull();
        jobIds   = connull();

        for (counter = 1; counter <= conlen(_jobIds);counter++)
        {
            jobId = conpeek(_jobIds,counter);
            while select JobId, RefRecId, RefTableId from jobDocRef
                where jobDocRef.JobId == jobId
            join docRef
                where jobDocRef.dataAreaId  == docRef.RefCompanyId
                   && jobDocRef.RefTableId  == docRef.RefTableId
                   && jobDocRef.RefRecId    == docRef.RefRecId
            {
                //filter per employee here
                if (JmgDocumentGroupType::workerAllowedToSeeType(_worker,docRef.TypeId))
                {
                    linksRef += docRef.RecId;
                    jobIds += jobId;

                    thereAreDocs = true;
                }
            }
        }
        if (mnuBtn)
        {
            mnuBtn.enabled(thereAreDocs);
        }
        lastWorker = _worker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocsForAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the list of documents, which is shown when the dialog is opened.
    /// </summary>
    /// <param name="_jobIds">
    ///    A list of job IDs for which documents are shown.
    /// </param>
    void updateDocsForAll(container _jobIds)
    {
        JmgJobDocuRef   jobDocRef;
        DocuRef         docRef;
        int             counter = 1;
        boolean         thereAreDocs = false;
        JmgJobId        jobId;
        int             selectedJobsCount = conLen(_jobIds);

        linksRef = conNull();
        jobIds   = conNull();

        for (counter = 1; counter <= selectedJobsCount;counter++)
        {
            jobId = conPeek(_jobIds,counter);
            while select JobId, RefRecId, RefTableId from jobDocRef
                where jobDocRef.JobId == jobId
            join docRef
                where jobDocRef.dataAreaId  == docRef.RefCompanyId
                   && jobDocRef.RefTableId  == docRef.RefTableId
                   && jobDocRef.RefRecId    == docRef.RefRecId
            {
                linksRef += docRef.RecId;
                jobIds += jobId;
                thereAreDocs = true;
            }
        }
        if (mnuBtn)
        {
            mnuBtn.enabled(thereAreDocs);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgMESDocuHandling</c> class.
    /// </summary>
    /// <param name="_mnuBtn">
    ///    The menu item button which opens the document handling dialog.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>JmgMESDocuHandling</c> class.
    /// </returns>
    static JmgMESDocuHandling construct(FormFunctionButtonControl _mnuBtn = null)
    {
        return new JmgMESDocuHandling(_mnuBtn);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFile</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the document that is referred to by the <c>DocuRef</c> record.
    /// </summary>
    /// <param name="_docRef">
    ///    The <c>DocuRef</c> record, which refers to the document to open.
    /// </param>
    static void openFile(DocuRef _docRef)
    {
        MenuFunction mf = new MenuFunction(menuitemactionstr(DocuActionOpen), MenuItemType::Action);
        mf.run(JmgMESDocuHandling::initializeOpenDocumentArgs(_docRef));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOpenDocumentArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the arguments to pass to open the document.
    /// </summary>
    /// <param name="_docRef">
    ///    The <c>DocuRef</c> record, which refers to the document to open.
    /// </param>
    /// <returns>An <c>Args</c> instance for opening the file.</returns>
    protected static Args initializeOpenDocumentArgs(DocuRef _docRef)
    {
        Args args = new Args();
        args.record(_docRef);
        args.parmEnumType(enumnum(DocuCode));
        args.parmEnum(DocuCode::Open);

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFiles</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the documents that are specified in the <c>_docRefs</c> parameter.
    /// </summary>
    /// <param name="_docRefs">
    ///    A container that has <c>DocuRef</c> records, which refers to the documents to show.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker who is opening the documents.
    /// </param>
    [SysObsolete("This method is not used. Use openFilesAndMarkDocumentAsRead instead", false, 15\05\2024)]
    public static void openFiles(container _docRefs, JmgWorkerRecId _worker)
    {
        JmgDocumentLog docLog;
        int i;
        for (i = 1; i <= conlen(_docRefs);i++)
        {
            JmgMESDocuHandling::openFile(DocuRef::findRecId(conpeek(_docRefs,i)));
            if (!JmgDocumentLog::hasReadDocument(_worker,conpeek(_docRefs,i)))
            {
                docLog.RefRecId = conpeek(_docRefs,i);
                docLog.Worker = _worker;
                docLog.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>openFilesAndMarkDocumentAsRead</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the documents that are specified in the <c>_docRefs</c> parameter.
    /// </summary>
    /// <param name="_docRefs">
    ///    A container that has <c>DocuRef</c> records, which refers to the documents to show.
    /// </param>
    /// <param name="_jobIds">
    ///    A container that has <c>JmgJobId</c> records, which refers to the jobs.
    /// </param>
    /// <param name="_worker">
    ///    The ID of the worker who is opening the documents.
    /// </param>
    private static void openFilesAndMarkDocumentAsRead(container _docRefs, container _jobIds, JmgWorkerRecId _worker)
    {
        for (int i = 1; i <= conlen(_docRefs);i++)
        {
            JmgMESDocuHandling::openFile(DocuRef::findRecId(conpeek(_docRefs,i)));
            if (!JmgDocumentLog::hasReadDocumentByJobId(_worker, conpeek(_docRefs,i), conpeek(_jobIds, i)))
            {
                JmgJobTable jmgJobTable = JmgJobTable::find(conpeek(_jobIds, i));

                JmgDocumentLog docLog;
                docLog.init(conpeek(_docRefs,i), _worker, jmgJobTable.ModuleRefId);
                docLog.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>