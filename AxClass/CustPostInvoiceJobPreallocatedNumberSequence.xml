<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPostInvoiceJobPreallocatedNumberSequence</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsoleteAttribute('CustPostInvoiceJobPreallocatedNumberSequence is deprecated and should not be used', false, 30\06\2022)]
public static class CustPostInvoiceJobPreallocatedNumberSequence
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>useNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches and marks as used a voucher and invoice number (if one has been preallocated) from the provided number sequence for the given invoice.
    /// One more both numbers may be blank, in which case the caller must roll back to the standard method of generating a number sequence number.
    /// Any numbers that are returned (even if one is returned and the other is blank) MUST be used within the scope of the current TTS transaction,
    /// as they will be marked as successfully consumed when the transaction commits.
    /// </summary>
    /// <param name = "_invoiceRecId">The reference to the invoice.</param>
    /// <param name = "_invoiceNumberId">The reference to the number sequence used to generate invoice numbers for this invoice.</param>
    /// <param name = "_invoiceVoucherId">The reference to the number sequence used to generate voucher numbers for this invocie.</param>
    /// <param name = "_onlyInvoiceNumbers">Indicates that only the invoice number should be generated; the voucher number is then returned empty.</param>
    /// <returns>A preallocated voucher and invoice number (if one has been preallocated) from the provided number sequence for the given invoice, or blank.</returns>
    internal static container useNumbers(RefRecId _invoiceRecId, RefRecId _invoiceNumberId, RefRecId _invoiceVoucherId, NoYes _onlyInvoiceNumbers = NoYes::No)
    {
        Num invoiceNumber = CustPostInvoiceJobPreallocatedNumberSequence::useNumberSingleType(_invoiceRecId, _invoiceNumberId, NoYes::No);
        Num voucherNumber = '';
        if (!_onlyInvoiceNumbers)
        {
            voucherNumber = CustPostInvoiceJobPreallocatedNumberSequence::useNumberSingleType(_invoiceRecId, _invoiceVoucherId, NoYes::Yes); 
        }

        if (!invoiceNumber)
        {
            CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobPreallocatedNumberSequence), strFmt('useNumbers call unable to find preallocated value - invoice number. NumSeqRecID: %1, InvoiceRecId: %2', _invoiceNumberId, _invoiceRecId));
        }

        if (!voucherNumber && !_onlyInvoiceNumbers)
        {
            CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobPreallocatedNumberSequence), strFmt('useNumbers call unable to find preallocated value - voucher number. NumSeqRecID: %1, InvoiceRecId: %2', _invoiceVoucherId, _invoiceRecId));
        }

        if (_onlyInvoiceNumbers)
        {
            voucherNumber = invoiceNumber;
        }

        return [invoiceNumber, voucherNumber];
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNumbers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Preallocates a set of numbers and associates them with given invoice RecIds.
    /// </summary>
    /// <param name = "_invoiceRecId">The reference to the invoice.</param>
    /// <param name = "_invoiceNumberId">The reference to the number sequence used to generate invoice numbers for this invoice.</param>
    /// <param name = "_invoiceVoucherId">The reference to the number sequence used to generate voucher numbers for this invocie.</param>
    /// <param name = "_onlyInvoiceNumbers">Indicates that only the invoice number should be generated; the voucher number is then not reserved.</param>
    internal static void allocateNumbers(container _invoiceRecIds, RefRecId _invoiceNumberId, RefRecId _invoiceVoucherId, NoYes _onlyInvoiceNumbers = NoYes::No)
    {
        #OCCRetryCount

        CustPostInvoiceJobNumberSequenceListCleanup::quickCleanup();

        if (appl.ttsLevel() != 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
        int64 elapsedMs;
        stopwatch.Start();

        int invoiceCount = conLen(_invoiceRecIds);
        
        if (invoiceCount < 1)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        try
        {
            ttsbegin;
            NumberSequenceTable numberNumberSequenceTable;
            NumberSequenceTable voucherNumberSequenceTable;

            //take lock on the two NSTs
            select pessimisticlock numberNumberSequenceTable where numberNumberSequenceTable.RecId == _invoiceNumberId;
            boolean sameNumberSequence;
            if (_invoiceNumberId != _invoiceVoucherId && !_onlyInvoiceNumbers)
            {
                select pessimisticlock voucherNumberSequenceTable where voucherNumberSequenceTable.RecId == _invoiceVoucherId;
            }
            else
            {
                sameNumberSequence = true;
            }

            if (!numberNumberSequenceTable.RecId || (!sameNumberSequence && !voucherNumberSequenceTable.RecId))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            // Reserve invoice numbers
            CustPostInvoiceJobPreallocatedNumberSequence::allocateNumbersSingleType(_invoiceRecIds, numberNumberSequenceTable, NoYes::No);

            if (!_onlyInvoiceNumbers)
            {
                // Reserve voucher numbers
                if (sameNumberSequence)
                {
                    CustPostInvoiceJobPreallocatedNumberSequence::allocateNumbersSingleType(_invoiceRecIds, numberNumberSequenceTable, NoYes::Yes);
                }
                else
                {
                    CustPostInvoiceJobPreallocatedNumberSequence::allocateNumbersSingleType(_invoiceRecIds, voucherNumberSequenceTable, NoYes::Yes);
                }
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            int currRetryCount = xSession::currentRetryCount();
            if (currRetryCount >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            int maxRetryOfTransientSqlConnectionError = 3;
            int currentRetryCount = xSession::currentRetryCount();
            if (maxRetryOfTransientSqlConnectionError > currentRetryCount)
            {
                sleep(60 * 1000 * min(currentRetryCount, 5));
                retry;
            }
            else
            {
                throw Exception::TransientSqlConnectionError;
            }
        }

        elapsedMs = stopwatch.get_ElapsedMilliseconds();
        CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobPreallocatedNumberSequence), strFmt('Finished allocating numbers. MS per invoice: %1, small volume: %2', elapsedMs/invoiceCount, invoiceCount<100));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsSetAllocated</Name>
				<Source><![CDATA[
    protected static void markAsSetAllocated(NumberSequenceList _numberSequenceList)
    {
        // Chain of Command extension point
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateNumbersSingleType</Name>
				<Source><![CDATA[
    private static void allocateNumbersSingleType(container _invoiceRecIds, NumberSequenceTable _numberSequenceTable, NoYes _isVoucher)
    {
        container invoiceIdsForNumbers = _invoiceRecIds;

        RefRecId numberSequenceId = _numberSequenceTable.RecId;

        // preallocation is not necessary for non-continuous sequences, as there is sufficient caching on regular number sequence generation in that case
        // check that the sequence is actually continuous and no-op if it's not
        if (!_numberSequenceTable.Continuous)
        {
            return;
        }

        System.Diagnostics.Stopwatch stopwatch = new System.Diagnostics.Stopwatch();
        int64 elapsedMs;
        stopwatch.Start();

        // first allocate from free available numbers
        NumberSequenceList freeNumberSequenceList;
        int assignedFreeNumbers;
        RecordInsertList freeNumberAssociationsRecordInsertList = new RecordInsertList(tableNum(CustPostInvoiceJobNumberSequenceList));
        while select forupdate freeNumberSequenceList
            where freeNumberSequenceList.Status == NumStatus::Free
                && freeNumberSequenceList.NumberSequenceId == numberSequenceId
        {
            int contIndex = assignedFreeNumbers + 1; // container index is 1 bigger than we actually processed due to indexes starting at 1
            if (contIndex > conLen(invoiceIdsForNumbers))
            {
                break;
            }
            
            // allocate this number
            CustPostInvoiceJobNumberSequenceList association;
            association.IsVoucher = _isVoucher;
            association.NumberSequenceListRefRecId = freeNumberSequenceList.RecId;
            association.InvoiceRefRecId = conpeek(invoiceIdsForNumbers, contIndex);

            freeNumberAssociationsRecordInsertList.add(association);

            freeNumberSequenceList.Status = NumStatus::Active;
            CustPostInvoiceJobPreallocatedNumberSequence::markAsSetAllocated(freeNumberSequenceList);
            freeNumberSequenceList.TransId = 0; //set to 0 if it isn't already, because transIds of 0 are not cleaned up in bulk cleanup operations
            freeNumberSequenceList.update();

            assignedFreeNumbers++;
        }
        
        if (assignedFreeNumbers > 0)
        {
            freeNumberAssociationsRecordInsertList.insertDatabase();
            elapsedMs = stopwatch.get_ElapsedMilliseconds();
            CustPostInvoiceJobPreallocatedNumberSequenceTelemetryLogger::logInformation(classStr(CustPostInvoiceJobPreallocatedNumberSequence), strFmt('Free numbers found and reused in the course of allocation. MS per invoice: %1, small batch: %2', elapsedMs/assignedFreeNumbers, assignedFreeNumbers<100));
        }

        int numbersStillRequired = conLen(invoiceIdsForNumbers) - assignedFreeNumbers;
        if (numbersStillRequired > 0)
        {
            // next allocate however many fresh numbers still required
            int oldNextRecForNumber = _numberSequenceTable.NextRec;
            
            RecordInsertList newNumberSequenceListRecordInsertList = new RecordInsertList(tableNum(NumberSequenceList));
            RecordInsertList newNumberAssociationsRecordInsertList = new RecordInsertList(tableNum(CustPostInvoiceJobNumberSequenceList));

            NumberSequenceList numberSequenceListForNumber;
            systemSequence sysSequence = new systemSequence();
            sysSequence.suspendRecIds(numberSequenceListForNumber.TableId);

            int freshNumbersAllocated;

            // start from 0 because NextRec itself is free and should be used
            for (int i = 0; i < numbersStillRequired; i++)
            {
                RefRecId invoiceRecId = conpeek(invoiceIdsForNumbers, assignedFreeNumbers + i + 1); // containers are 1-based, our i is 0-based because of NextRec

                int currentNextRecForNumber = oldNextRecForNumber + i;
                
                // pre-insert exist check not needed as it would mean a List record exists for a number seq for which NextRec has not yet advanced,
                // which is an error condition and failure is reasonable in that case
            
                // insert NumberSequenceLists
                numberSequenceListForNumber.clear();
                numberSequenceListForNumber.NumberSequenceId = numberSequenceId;
                numberSequenceListForNumber.NextRec = currentNextRecForNumber;
                numberSequenceListForNumber.Status = NumStatus::Active;
                CustPostInvoiceJobPreallocatedNumberSequence::markAsSetAllocated(numberSequenceListForNumber);
                numberSequenceListForNumber.RecId = sysSequence.reserveValues(1, numberSequenceListForNumber.TableId);
                newNumberSequenceListRecordInsertList.add(numberSequenceListForNumber);

                // insert CustPostInvoiceJobNumberSequenceList referencing above list and invocieRecId
                CustPostInvoiceJobNumberSequenceList invoiceNumberSequenceList;
                invoiceNumberSequenceList.InvoiceRefRecId = invoiceRecId;
                invoiceNumberSequenceList.NumberSequenceListRefRecId = numberSequenceListForNumber.RecId;
                invoiceNumberSequenceList.IsVoucher = _isVoucher;
                newNumberAssociationsRecordInsertList.add(invoiceNumberSequenceList);

                freshNumbersAllocated += 1;
            }

            newNumberSequenceListRecordInsertList.insertDatabase();
            newNumberAssociationsRecordInsertList.insertDatabase();

            sysSequence.removeRecIdSuspension(numberSequenceListForNumber.TableId);

            _numberSequenceTable.NextRec += freshNumbersAllocated;
            _numberSequenceTable.update();

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>useNumberSingleType</Name>
				<Source><![CDATA[
    private static Num useNumberSingleType(RefRecId _invoiceRecId, RefRecId _numberSequenceId, NoYes _isVoucher)
    {
        CustPostInvoiceJobNumberSequenceList invoiceNumberSequenceList;
        NumberSequenceList numberSequenceListForNumber;
        // picks the newest record, so that older ones can age and become subject to cleanup
        select forupdate firstonly invoiceNumberSequenceList 
            order by invoiceNumberSequenceList.CreatedDateTime desc
            join forupdate firstonly numberSequenceListForNumber
            where invoiceNumberSequenceList.InvoiceRefRecId == _invoiceRecId 
                && invoiceNumberSequenceList.IsVoucher == _isVoucher
                && numberSequenceListForNumber.RecId == invoiceNumberSequenceList.NumberSequenceListRefRecId
                && numberSequenceListForNumber.NumberSequenceId == _numberSequenceId
                && numberSequenceListForNumber.Status == NumStatus::Active; 

        if (!invoiceNumberSequenceList.RecId || !numberSequenceListForNumber.RecId)
        {
            return '';
        }

        NumberSequenceRange invoiceNumberRaw = numberSequenceListForNumber.NextRec;
        NumberSequenceTable invoiceNumSeq = NumberSequenceTable::find(_numberSequenceId);
        Num invoiceNumberFormatted = NumberSeq::numInsertFormatV2(invoiceNumberRaw, invoiceNumSeq.Format);

        numberSequenceListForNumber.delete();
        invoiceNumberSequenceList.delete();

        return invoiceNumberFormatted;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>