<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermCheckInOutState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTermCheckInOutState</c> class is used to check the current clock-in and clock-out status
///    of a worker.
/// </summary>
class JmgTermCheckInOutState
{
    boolean fClockInStatus;
    JmgDateTime fClockInDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getClockInDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the last clock-in date time for the worker.
    /// </summary>
    /// <returns>
    ///    The last clock-in date time for the worker.
    /// </returns>
    JmgDateTime getClockInDateTime()
    {
        return fClockInDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClockInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current clock in status for the worker.
    /// </summary>
    /// <returns>
    ///    true if the worker is currently clocked-in; otherwise, false.
    /// </returns>
    boolean getClockInStatus()
    {
        return fClockInStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>JmgTermCheckInOutState</c> class for the specified worker.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker for which to check the clock-in status.
    /// </param>
    void new(JmgWorkerRecId _worker)
    {
        this.setJmgTransParm(_worker);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClockInDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the last clock in date time for the worker.
    /// </summary>
    /// <param name="_clockInDateTime">
    ///    The last clock in date time for the worker.
    /// </param>
    void setClockInDateTime(JmgDateTime _clockInDateTime)
    {
        fClockInDateTime = _clockInDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClockInStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Set the current clock-in status for the worker.
    /// </summary>
    /// <param name="_clockInStatus">
    ///    A Boolean value that specifies whether the worker is currently clocked-in.
    /// </param>
    void setClockInStatus(boolean _clockInStatus)
    {
        fClockInStatus = _clockInStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setJmgTransParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>JmgTermCheckInOutState</c> object with values that are read from the database.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker to read values for.
    /// </param>
    void setJmgTransParm(JmgWorkerRecId _worker)
    {
        JmgTermReg  termReg;
        JmgDateTime fClockInChkTime = DateTimeUtil::addDays(DateTimeUtil::utcNow(), 2);

        fClockInStatus   = 0;
        fClockInDateTime = DateTimeUtil::minValue();

        select firstonly RegDateTime from termReg
            order by RegDateTime desc
            where termReg.Worker == _worker &&
                    termReg.RegType == JmgTermRegType::ClockIn &&
                    termReg.RegDateTime <= fClockInChkTime;

        if (termReg)
        {
            this.setClockInDateTime(termReg.RegDateTime);
            this.setClockInStatus(NoYes::Yes);
        }

        select firstonly RegDateTime from termReg
            order by RegDateTime desc
            where termReg.Worker == _worker &&
                    termReg.RegType == JmgTermRegType::ClockOut &&
                    termReg.RegDateTime <= fClockInChkTime;

        if (termReg)
        {
            if (termReg.RegDateTime >= fClockInDateTime)
            {
                this.setClockInDateTime(DateTimeUtil::minValue());
                this.setClockInStatus(NoYes::No);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>