<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_Simulation_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class extends <c>LedgerJournalCheckPost</c> in order to support GL simulations. implements BatchRetryable
/// </summary>
public class LedgerJournalCheckPost_Simulation_IT extends LedgerJournalCheckPost
{
    public LedgerPostingGeneralJournalControllerSim_IT controller;
    public RefRecId tmpRecId;
    public LedgerJournalEngine ledgerJournalEngine;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerJournalEngine</Name>
				<Source><![CDATA[
    public void parmLedgerJournalEngine(LedgerJournalEngine _ledgerJournalEngine)
    {
        ledgerJournalEngine = _ledgerJournalEngine;

        // hold a reference to the server posting results because it will require a RPC to go through the LedgerJournalEngine
        postingResults = ledgerJournalEngine.parmPostingResults_Server();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTransaction</Name>
				<Source><![CDATA[
    private boolean createVoucherTransaction()
    {
        boolean ok = true;
        ledgerVoucher = LedgerVoucher::newLedgerCheck(
            ledgerJournalTable.DetailSummaryPosting,
            SysModule::Ledger,
            NumberSequenceTable::find(ledgerJournalTable.NumberSequenceTable).NumberSequence,
            this.isApprovalJournal());

        ledgerVoucher.parmCheckTransOnInsert(true);
        ledgerVoucher.parmLedgerJournalId(ledgerJournalTable.JournalNum);

        LedgerJournalTrans ledgerJournalTrans;
        Voucher prevVoucher;
        LedgerVoucherObject ledgerVoucherObject;

        while select ledgerJournalTrans
            index NumVoucherIdx
            order by JournalNum, Voucher, AccountType
            where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                && (voucherNum == '' || ledgerJournalTrans.Voucher == voucherNum)
        {
            if (prevVoucher != ledgerJournalTrans.Voucher)
            {
                ledgerVoucherObject = LedgerVoucherObject::newVoucher(
                    ledgerJournalTrans.Voucher,
                    ledgerJournalTrans.TransDate,
                    SysModule::None,
                    LedgerTransType::None,
                    NoYes::No,
                    ledgerJournalTable.CurrentOperationsTax,
                    '',
                    dateNull(),
                    dateNull());

                ledgerVoucher.addVoucher(ledgerVoucherObject);

                prevVoucher = ledgerJournalTrans.Voucher;
            }

            boolean isOffset = false;

            if (!ledgerJournalTrans.LedgerDimension && ledgerJournalTrans.OffsetLedgerDimension)
            {
                ledgerJournalTrans = this.ledgerJournalTransOffset(ledgerJournalTrans);
                isOffset = true;
            }

            while (ledgerJournalTrans.LedgerDimension && ok)
            {
                LedgerJournalTransUpdate ledgerJournalTransUpdate = LedgerJournalTransUpdate::construct(ledgerJournalTrans, isOffset);

                ledgerJournalTransUpdate.parmTmpVoucherMap(tmpVoucherMap);

                LedgerJournalTrans journalTrans = ledgerJournalTrans.data();
                journalTrans.LedgerDimension = ledgerJournalTransUpdate.ledgerDimension(ledgerJournalTrans);

                ok = ledgerVoucher.addTrans(LedgerVoucherTransObject::newTransLedgerJournal(journalTrans));

                ledgerJournalTrans = this.ledgerJournalTransOffset(ledgerJournalTrans);

                isOffset = !isOffset;
            }

            if (!ok)
            {
                break;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        controller = LedgerPostingGeneralJournalControllerSim_IT::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSimulationJournal</Name>
				<Source><![CDATA[
    private container postSimulationJournal()
    {
        tmpRecId = 1;
        LedgerEntryJournalSim_IT ledgerEntryJournalSim;
        //Init LedgerEntryJournalSim
        ledgerEntryJournalSim.clear();
        ledgerEntryJournalSim.JournalNumber = ledgerJournalTable.JournalNum;
        ledgerEntryJournalSim.LedgerJournalTableDataAreaId = ledgerJournalTable.dataAreaId;

        LedgerVoucherList ledgerVoucherList = ledgerVoucher.getInternalCollection();

        boolean haveRecords = ledgerVoucherList.first();

        while (haveRecords)
        {
            this.postSimulationVoucher(ledgerVoucherList.item(), ledgerEntryJournalSim);

            numOfVouchersBooked++;

            haveRecords = ledgerVoucherList.next();
        }

        controller.transfer();

        return [true, true];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSimulationVoucher</Name>
				<Source><![CDATA[
    private void postSimulationVoucher(LedgerVoucherObject _ledgerVoucherObject, LedgerEntryJournalSim_IT _ledgerEntryJournalSim)
    {
        ttsBegin;
        GeneralJournalEntrySim_IT generalJournalEntrySim;
        generalJournalEntrySim.clear();
        generalJournalEntrySim.initFromGeneralJournalEntry(_ledgerVoucherObject.parmGeneralJournalEntry());
        generalJournalEntrySim.LedgerEntryJournal = _ledgerEntryJournalSim.RecId;
        generalJournalEntrySim.SimulationJournalNameId = ledgerJournalTable.JournalName;
        generalJournalEntrySim.SimulationJournalNameDataAreaId = ledgerJournalTable.dataAreaId;
        generalJournalEntrySim.RecId = tmpRecId;
        tmpRecId++;

        //Account entries
        LedgerVoucherTransList ledgerTransList = _ledgerVoucherObject.getInternalCollection();

        boolean haveRecords = ledgerTransList.first();

        while (haveRecords)
        {
            LedgerVoucherTransObject ledgerVoucherTransObject = ledgerTransList.item();
            GeneralJournalAccountEntrySim_IT generalJournalAccountEntrySim;
            generalJournalAccountEntrySim.initFromGeneralJournalAccountEntry(ledgerVoucherTransObject.parmGeneralJournalAccountEntry());
            generalJournalAccountEntrySim.GeneralJournalEntry = generalJournalEntrySim.RecId;
            controller.add(ledgerJournalTable.DetailSummaryPosting, generalJournalEntrySim, generalJournalAccountEntrySim, _ledgerEntryJournalSim);
            haveRecords = ledgerTransList.next();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInternal</Name>
				<Source><![CDATA[
    protected void runInternal()
    {
        #OCCRetryCount

        boolean postingSuccess;
        boolean intercompanyPostingSuccess;
        Counter progressTotal;
        boolean postJournalNow;

        try
        {
            // Attempt to block the journal. Retry until it doesn't fail or the
            // maximum retry count is reached. Do nothing on failures since the
            // block failed and the result is that nothing is blocked.

            ttsbegin;

            ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId, true);
            ledgerJournalName = ledgerJournalTable.ledgerJournalName();

            if (inTransfer)
            {
                inTransfer = false;
            }
            else
            {
                if (!this.validate())
                {
                    throw error(strFmt("@GeneralLedger:GeneralJournalPostPreValidateFail", ledgerJournalId));
                }

                if (!ledgerJournalTable.checkNotSystemBlocked() 
                    || !ledgerJournalTable.checkNotGroupBlocked() 
                    || !ledgerJournalTable.checkNotUserBlocked() 
                    || !ledgerJournalTable.checkNotInUse())
                {
                    throw error(strFmt("@GeneralLedger:GeneralJournalPostPreValidateFail", ledgerJournalId));
                }

                this.updateSystemBlock(ledgerJournalTable, true);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }

     try
     {
         // Attempt to process the journal. Retry until it doesn't fail or the
         // maximum retry count is reached. Make sure it is unblocked by all
         // paths when it succeeds or the maximum retry count is reached.

         //
         // Updates to the LedgerJournalTable during the previous validation process
         // require a re-set of these values.
         //
         ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId);
         ledgerJournalName = ledgerJournalTable.ledgerJournalName();

         numOfVouchersBooked = 0;
         progressTotal = voucherNum ? 1 : ledgerJournalTable.numOfVouchers();

         if (progressTotal)
         {
             // Posted journals should not be checked or posted
             if (ledgerJournalTable.Posted == NoYes::No
                && ledgerJournalTable.SimulationPosted_IT == NoYes::No)
             {
                 if (postingResults != null)
                 {
                     ledgerPostingMessageCollection = LedgerPostingMessageLog::construct();
                     postingResults.parmLedgerPostingMessageLog(ledgerPostingMessageCollection);
                     postingResults.clearErrorLog();
                 }


                this.progressInit("@SYS25781", progressTotal, #AviFormLetter);
                progress.setText("@SYS26577");

                boolean skipCommit;
                boolean skipFinalLogic;
                boolean skipPostProcessing;

                ttsbegin;

                if (ledgerJournalTable.ledgerJournalName().RequiresSimulationValidation_IT)
                {
                    postJournalNow = this.checkJournal();
                }
                else
                {
                    postJournalNow = this.createVoucherTransaction();
                }

                if (!postJournalNow)
                {
                    throw error("@SYS23002");
                }

                [postingSuccess, intercompanyPostingSuccess] = this.postSimulationJournal();

                if (!skipFinalLogic)
                {
                    if (!(postingSuccess && intercompanyPostingSuccess))
                    {
                        if (transferErrors)
                        {
                            inTransfer = true;

                            skipCommit = true;
                            skipFinalLogic = true;
                            skipPostProcessing = true;

                            //  Release the system block.
                            this.updateSystemBlockCheckedPostedJournal();
                        }
                        else
                        {
                            throw error("@SYS21628");
                        }
                    }
                    else if (numOfVouchersBooked)
                    {
                        //
                        // Updates to the LedgerJournalTable during the previous posting process
                        // require a re-set of this value.
                        //
                        ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId, true);

                        [ledgerJournalTable.JournalTotalDebit,
                            ledgerJournalTable.JournalTotalCredit,
                            ledgerJournalTable.JournalTotalOffsetBalance] = LedgerJournalTable::journalBalanceMST(ledgerJournalId);

                        this.ledgerTransferToJournal(ledgerJournalId);

                        if (!errorJournalDeleted)
                        {
                            ledgerJournalTable.SimulationPosted_IT = NoYes::Yes;

                            if (this.transferErrors())
                            {
                                //
                                // The journal balances must be recalculated to account for
                                // transfered error transactions.
                                //
                                [ledgerJournalTable.JournalTotalDebit,
                                    ledgerJournalTable.JournalTotalCredit,
                                    ledgerJournalTable.JournalTotalOffsetBalance] = LedgerJournalTable::journalBalanceMST(ledgerJournalId);

                                ledgerJournalTable.Log = strFmt("@SYS53324", this.numOfErrorsInList(), errorLedgerJournalId);
                            }

                            LedgerJournalCheckPostPurch::purchLineSubmitToWorkflow(ledgerJournalTable);
                        }

                        ledgerJournalTable.update();

                        TransactionLog::create(TransactionLogType::LedgerJournal, ledgerJournalTable.JournalNum + ' ' + ledgerJournalTable.Name);
                    }

                    // there is a double check of skipFinalLogic because it can be set inside the first check
                    if (!skipFinalLogic)
                    {
                        // Submit the budget funds available check for the posted journal.
                        this.initBudgetCheckForPostJournal();
                        LedgerJournalCheckPostBudget::submitBudgetForPostJournal(this);
                    }
                }

                if (skipCommit)
                {
                    ttsabort;
                }
                else
                {
                    ttscommit;
                }

                if (!FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
                {
                    DimensionFocusUpdateBalanceSim_IT::processAutomaticUpdates();
                }

                if (!skipPostProcessing)
                {
                    //  The journal was successfully posted; release the system block.
                    this.updateSystemBlockCheckedPostedJournal();

                    if (postingSuccess && intercompanyPostingSuccess)
                    {
                        if (!bquiet)
                        {
                            if (voucherNum)
                            {
                                info(strFmt("@SYS9799", LedgerJournalTrans::findTmpVoucher(voucherNum, tmpVoucherMap)));
                            }
                            else
                            {
                                info(strFmt("@SYS25783", numOfVouchersBooked));
                            }
                        }
                    }
                    else
                    {
                        if (!intercompanyPostingSuccess || !transferErrors)
                        {
                            if (voucherNum)
                            {
                                if(!bquiet)
                                {
                                    info(strFmt("@SYS19281", LedgerJournalTrans::findTmpVoucher(voucherNum, tmpVoucherMap)));
                                }
                            }
                            else
                            {
                                checkFailed("@SYS23002");
                            }
                        }
                        this.reuseTmpVoucher(); // restore the voucher of the unposted ledgerJournalTrans
                    }
                }

                }
            }
            else
            {
                throw info("@SYS27671");
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.removeSystemBlock();

                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                this.removeSystemBlock();

                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            ttsbegin;

            // capture any errors thrown during posting because only errors that
            // return false during validation have been captured so far
            this.updateTransInfoLog();

            // Buffer values may have changed this requires a new "find with lock" for updating the "System blocked" information.
            ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId, true);

            // Un-block the journal and throw the error.
            this.updateSystemBlock(ledgerJournalTable, false);

            ttscommit;

            // Chain the exception forward so that processes like batch recognize the
            // error and therefore correctly update their success status.
            throw Exception::Error;
        }
        catch (Exception::Info)
        {
            ttsbegin;

            // Buffer values may have changed this requires a new "find with lock" for updating the "System blocked" information.
            ledgerJournalTable = LedgerJournalTable::find(ledgerJournalId, true);

            // Un-block the journal and display the info block
            this.updateSystemBlock(ledgerJournalTable, false);

            ttscommit;

            // Chain the exception forward so that processes like batch recognize the
            // error and therefore correctly update their success status.
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>