<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsLocationDirectiveStrategyFEFOBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLocationDirectiveStrategyFEFOBatch</c> class implements the FEFO batch reservation strategy.
/// </summary>
[WhsLocationDirectiveStrategyFactory(WhsLocDirStrategy::FEFOBatch)]
class WhsLocationDirectiveStrategyFEFOBatch extends WhsLocationDirectiveStrategy
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(
        WHSLocDirTable  _locDirTable,
        WHSLocDirLine   _locDirLine,
        WHSLocDirAction _locDirAction)
    {
        boolean ret = true;
        
        if (_locDirAction.BatchEnabled == NoYes::No)
        {
            ret = checkFailed("@WAX4152");
        }

        if (!WhsWorkTransactionType::singletonFromTypeOrDefault(_locDirTable.WorkTransType).isItemRelatedPicking())
        {
            ret = checkFailed(strFmt("@WAX5583", _locDirAction.LocDirStrategy, _locDirTable.WorkTransType));
        }

        if (_locDirTable.WorkType != WHSWorkType::Pick)
        {
            ret = checkFailed(strFmt("@WAX4602", _locDirAction.LocDirStrategy, _locDirTable.WorkType));
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reliesOnDimensionsBelowLocation</Name>
				<Source><![CDATA[
    public boolean reliesOnDimensionsBelowLocation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsRequiredToChange</Name>
				<Source><![CDATA[
    public Set dimensionsRequiredToChange()
    {
        Set result = super();
        result.add(fieldStr(InventDim, InventBatchId));
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>requiresBatchDimension</Name>
				<Source><![CDATA[
    public boolean requiresBatchDimension()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicableForParameters</Name>
				<Source><![CDATA[
    public boolean isApplicableForParameters(WhsLocationDirectiveStrategyParameters _params)
    {
        return WhsReservationHierarchyInventDimUtil::isBatchBelowLocation(InventTable::find(_params.ItemId));    
    }

]]></Source>
			</Method>
			<Method>
				<Name>performStrategy</Name>
				<Source><![CDATA[
    public boolean performStrategy(
        WhsLocationDirective _locationDirective, 
        WhsLocationDirectiveStrategyParameters _parameters)
    {
        boolean             strategyResult;
        InventDim           batchLocInventDim;
        Qty                 batchQtyAvail;
        Qty                 inWorkQty;
        Qty                 openBatchWorkTotal;

        if (_parameters.WorkType == WHSWorkType::Pick)
        {
            // We need to determine how much of the batch is available in the location.
            batchLocInventDim.data(_parameters.InventDim);
            batchLocInventDim.clearInventDimId();
            batchLocInventDim.InventBatchId = _parameters.InventBatchId;
            batchLocInventDim.wmsLocationId = _parameters.Location.wMSLocationId;
            batchLocInventDim.inventLocationId = _parameters.Location.inventLocationId;
            batchLocInventDim.InventSiteId = _parameters.Location.inventSiteId();

            InventTable inventTable = InventTable::find(_parameters.ItemId);
            // We are being passed an inventDim which is used as criteria for the on-hand and the criteria has a batch added.
            // This may lead to a gap in the dimensions so we need to ensure we use the correct calculations. We do not know
            // if the caller already has a reservation on the dimensions in the criteria and therefore we cannot calculate the
            // available quantity for all levels since we might conflict with the callers own reservation. The best we can do
            // is to calculate for the hierarchy levels where the on-hand is found and up until the level specified on the dimensions.
            // This way we consider scenarios where a serial numbers are below batch and reservations exist on the batch level
            List reservationHiearchyListAllFields = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);

            WHSReservationHierarchyLevel deepestLevel = WHSReservationHierarchyInventDimUtil::deepestLevelFromInventDimParm(reservationHiearchyListAllFields, batchLocInventDim.toDimParm());

            WHSInventReserveQty whsInventReserveQty = WHSInventReserveQty::newFromParms(inventTable,
                                                                batchLocInventDim,
                                                                batchLocInventDim.toDimParm());
            whsInventReserveQty.parmUpperLevelOfMinimumCalculation(deepestLevel);

            if (PdsGlobal::pdsIsCWItem(inventTable.ItemId))
            {
                batchQtyAvail = whsInventReserveQty.pdsCWAvailPhysical();
            }
            else
            {
                batchQtyAvail = whsInventReserveQty.availPhysical();
            }

            // Find total work in temp table that has been soft allocated for this batch
            inWorkQty = WHSLocationDirective::getTotalInTempTable(_parameters.Location.InventLocationId,
                                                                  _parameters.Location.wmsLocationId,
                                                                  _parameters.InventDim,
                                                                  _parameters.InventUOM,
                                                                  _parameters.ItemId,
                                                                  _parameters.WorkType,
                                                                  _parameters.InventBatchId);

            // Find total open work that has been soft allocated for this batch
            openBatchWorkTotal = WhsLocationDirectiveStrategyFEFOBatch::getTotalOpenWork(_parameters.Location.InventLocationId,
                                                                   _parameters.Location.wmsLocationId,
                                                                   _parameters.InventDim,
                                                                   _parameters.InventUOM,
                                                                   _parameters.ItemId,
                                                                   _parameters.InventDim.InventStatusId,
                                                                   _parameters.InventBatchId);

            batchQtyAvail = batchQtyAvail - inWorkQty - openBatchWorkTotal;
            
            _locationDirective.parmAvailQty(min(batchQtyAvail, _parameters.AvailQty));
            // Set the oldest batch parameter so it can be set on the tmpWorkLine
            _locationDirective.parmFEFOBatchId(_parameters.InventBatchId);
            strategyResult = true;
        }

        return strategyResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOpenWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total quantity of the open pick work for FEFO batch.
    /// </summary>
    /// <param name="_inventLocationId">
    /// Warehouse id of the work being done.
    /// </param>
    /// <param name="_locationId">
    /// Location id of the work being done.
    /// </param>
    /// <param name="_itemDim">
    /// Item inventory dimensions.
    /// </param>
    /// <param name="_unitId">
    /// UOM of the work being done.
    /// </param>
    /// <param name="_itemId">
    /// Item id of the work being done.
    /// </param>
    /// <param name="_inventStatusId">
    /// Item status of the work being done.
    /// </param>
    /// <param name="_fefoBatchId">
    /// FEFO batch id of the work being done.
    /// </param>
    /// <returns>
    /// Total quantity of the items on open pick work for FEFO batch.
    /// </returns>
    static public Qty getTotalOpenWork(InventLocationId      _inventLocationId,
                                       WMSLocationId         _locationId,
                                       InventDim             _itemDim,
                                       UnitOfMeasureSymbol   _unitId,
                                       ItemId                _itemId,
                                       WHSInventStatusId     _inventStatusId,
                                       WHSFEFOBatchId        _fefoBatchId)
    {
        Qty             qtyInWork;
        WHSWorkLine     workLine;
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        inventDimParm.setAllProductDimensions();

        if (InventTable::find(_itemId).isProductVariantUnitConversionEnabled())
        {
            while select UnitId, sum(QtyRemain), InventDimId from workLine
                group by InventDimId, UnitId
            #InventDimJoin(workLine.InventDimId, inventDim, _itemDim, inventDimParm) &&
                  workLine.ItemId               == _itemId                           &&
                  inventDim.InventLocationId    == _inventLocationId                 &&
                  workLine.wmsLocationId        == _locationId                       &&
                  inventDim.InventStatusId      == _inventStatusId                   &&
                  (workLine.WorkStatus          == WHSWorkStatus::Open               ||
                  workLine.WorkStatus           == WHSWorkStatus::InProcess)         &&
                  workLine.WorkType             == WHSWorkType::Pick                 &&
                  (workLine.fefoBatchId         == _fefoBatchId                      ||
                  !_fefoBatchId)
            {
                qtyInWork += WHSLocationDirective::convertQtyGivenUnitSymbols(
                    WHSLocationDirective::parmReleasedProductUnitConverter(),
                    workLine.QtyRemain,
                    workLine.UnitId,
                    _unitId,
                    _itemId,
                    workLine.InventDimId);
            }
        }
        else
        {
            while select UnitId, sum(QtyRemain) from workLine
                group by UnitId
                #InventDimJoin(workLine.InventDimId, inventDim, _itemDim, inventDimParm) &&
                      workLine.ItemId               == _itemId                           &&
                      inventDim.InventLocationId    == _inventLocationId                 &&
                      workLine.wmsLocationId        == _locationId                       &&
                      inventDim.InventStatusId      == _inventStatusId                   &&
                      (workLine.WorkStatus          == WHSWorkStatus::Open               ||
                      workLine.WorkStatus           == WHSWorkStatus::InProcess)         &&
                      workLine.WorkType             == WHSWorkType::Pick                 &&
                      (workLine.fefoBatchId         == _fefoBatchId                      ||
                      !_fefoBatchId)
            {
                qtyInWork += WHSLocationDirective::convertQtyGivenUnitSymbols(
                    WHSLocationDirective::parmReleasedProductUnitConverter(),
                    workLine.QtyRemain,
                    workLine.UnitId,
                    _unitId,
                    _itemId);
            }
        }
        return qtyInWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyPickLocDirActionQuery</Name>
				<Source><![CDATA[
    public boolean modifyPickLocDirActionQuery(WhsLocationDirectiveActionQuery _actionQuery, Query _query)
    {
        WhsLocationDirectiveStrategyFEFOBatch::addBatchFEFOSort(_query);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBatchFEFOSort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a sort over batch expiration as the first sort in the query.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> object.
    /// The parameter will be modified since it is reference variable.
    /// </param>
    static public void addBatchFEFOSort(Query _query)
    {
        const int tablePosition = 1;
        const int fieldPosition = 2;
        const int directionPosition = 3;

        container               con;
        int                     i;
        int                     length;
        QueryOrderByField       tmp;

        // Get number of sorts on current query
        length =  _query.orderByFieldCount();

        // Loop over current sort fields and store them in containers
        for (i = 1; i <= length; ++i)
        {
            tmp = _query.orderByField(i);
            con += [[tmp.dataSource().table(), tmp.fieldID(), tmp.direction()]];
        }

        // Remove all sort fields on the query
        _query.clearOrderBy();

        // Add sort over batch expiration date
        _query.dataSourceTable(tableNum(InventBatch)).addOrderByField(fieldNum(InventBatch, ExpDate));

        length = conLen(con);

        // Loop over the container of sort fields and add them back in order.
        for (i = 1; i <= length; ++i)
        {
            container dsContainer = conPeek(con, i);
            _query.dataSourceTable(conPeek(dsContainer, tablePosition)).addOrderByField(conPeek(dsContainer, fieldPosition), conPeek(dsContainer, directionPosition));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>