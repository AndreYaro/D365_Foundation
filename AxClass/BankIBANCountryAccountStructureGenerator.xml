<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankIBANCountryAccountStructureGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains methods for generating IBAN country account structures from XML.
/// </summary>
public class BankIBANCountryAccountStructureGenerator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateIBANAccountStructuresFromXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads IBAN country account structures from an underlying XML resource and persists
    /// them in the database.
    /// </summary>
    public static void generateIBANAccountStructuresFromXML()
    {
        XmlDocument structureXML = BankIBANCountryAccountStructureGenerator::getIBANAccountStructureXmlResource();

        XmlNodeList countryAccountStructureNodes = structureXML.getElementsByTagName('IBANStructure');

        for (int i = 0; i < countryAccountStructureNodes.length(); i++)
        {
            XmlNode node = countryAccountStructureNodes.item(i);
            BankIBANCountryAccountStructureGenerator::writeIBANCountryAccountStructure(node);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeIBANCountryAccountStructure</Name>
				<Source><![CDATA[
    private static void writeIBANCountryAccountStructure(XmlNode _node)
    {
        BankIBANCountryAccountStructure countryAccountStructure;
        countryAccountStructure.Country = _node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, Country)).text();
        countryAccountStructure.CountryCode = _node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, CountryCode)).text();
        countryAccountStructure.Length = str2Int(_node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, Length)).text());
        countryAccountStructure.AccountStart = str2Int(_node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, AccountStart)).text());
        countryAccountStructure.AccountLength = str2Int(_node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, AccountLength)).text());
        countryAccountStructure.RoutingStart = str2Int(_node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, RoutingStart)).text());
        countryAccountStructure.RoutingLength = str2Int(_node.selectSingleNode(fieldStr(BankIBANCountryAccountStructure, RoutingLength)).text());

        countryAccountStructure.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIBANAccountStructureXmlResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the XML stored in the specified AOT Resource.
    /// </summary>
    /// <returns>
    /// Returns an <c>XmlDocument</c> object of the XML that is stored in the specified
    /// resource in the AOT. Null is returned if no XML is found.
    /// </returns>
    private static XmlDocument getIBANAccountStructureXmlResource()
    {
        XmlDocument sourceXML;

        // Get the XML string holding the data from the specified resource item
        resourceNode resourceNode = new resourceNode(resourceStr(BankIBANCountryAccountStructure));

        if (resourceNode.isFound() && resourceNode.resourceType() == SysResourceType::XMLDoc)
        {
            container data = SysResource::getResourceNodeData(resourceNode);
            str source = conPeek(data, 1);

            if (source)
            {
                sourceXML = XmlDocument::newXml(source);
            }
        }

        return sourceXML;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>