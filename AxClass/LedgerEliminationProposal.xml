<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerEliminationProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerEliminationProposal</c> class declares the variables that are required for the class.
/// </summary>
/// <remarks>
///    This class defines a local macro that contains the parameters so they can be packed and unpacked.
/// </remarks>
public class LedgerEliminationProposal extends RunBase
{
    LedgerEliminationProcessRule    ledgerEliminationProcessRule;

    LedgerEliminationRuleId         ruleId;
    Description                     description;
    TransDate                       fromDate;
    TransDate                       toDate;
    TransDate                       glPostingDate;
    SelectableDataArea              sourceCompany;
    LedgerJournalNameId             journalName;
    LedgerJournalId                 journalNum;
    ReasonRefRecID                  reasonRefRecId;
    PostReleaseDate                 releaseDate;

    private static const int CurrentVersion = 4;

    #LOCALMACRO.CurrentList
        ruleId,
        fromDate,
        toDate,
        glPostingDate,
        journalName,
        journalNum,
        sourceCompany,
        reasonRefRecId,
        releaseDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a dialog using the <c>LedgerEliminationProposal</c> form to initiate elimination proposal
    ///    processing.
    /// </summary>
    /// <returns>
    ///    A dialog based on the <c>LedgerEliminationProposal</c> form.
    /// </returns>
    public Object dialog()
    {
        DialogRunbase dialog = Dialog::newFormnameRunbase(formstr(LedgerEliminationProposal), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the current instance into a container.
    /// </summary>
    /// <returns>
    ///    A container that holds the current instance.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>fromDate</c> variable for the class to use to establish account balance date
    ///    ranges.
    /// </summary>
    /// <param name="_fromDate">
    ///    The <c>TransDate</c> value to set the variable to.
    /// </param>
    /// <returns>
    ///    The value of the <c>fromDate</c> variable.
    /// </returns>
    public TransDate parmFromDate(TransDate _fromDate  = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGLPostingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>glPostingDate</c> variable that is used to set the transaction date on the
    ///    journal
    /// </summary>
    /// <param name="_glPostingDate">
    ///    The <c>TransDate</c> value to set the variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>glPostingDate</c> variable.
    /// </returns>
    public TransDate parmGLPostingDate(TransDate _glPostingDate  = glPostingDate)
    {
        glPostingDate = _glPostingDate;

        return glPostingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>journalName</c> variable for the class from which the generated journal is
    ///    based.
    /// </summary>
    /// <param name="_journalName">
    ///    The <c>LedgerJournalNameId</c> value to set the variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>journalName</c> variable.
    /// </returns>
    public LedgerJournalNameId parmJournalName(LedgerJournalNameId _journalName  = journalName)
    {
        journalName = _journalName;

        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>journalNum</c> variable for the class.
    /// </summary>
    /// <param name="_journalNum">
    ///    The <c>LedgerJournalId</c> value to set the variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>journalNum</c> variable.
    /// </returns>
    public LedgerJournalId parmJournalNum(LedgerJournalId _journalNum  = journalNum)
    {
        journalNum = _journalNum;

        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>reasonRefRecId</c> variable for the class.
    /// </summary>
    /// <param name="_reasonRefRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>reasonRefRecId</c> variable.
    /// </returns>
    public ReasonRefRecId parmReasonRefRecId(ReasonRefRecId _reasonRefRecId  = reasonRefRecId)
    {
        reasonRefRecId = _reasonRefRecId;

        return reasonRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>releaseDate</c> variable for the class.
    /// </summary>
    /// <param name="_releaseDate">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>releaseDate</c> variable.
    /// </returns>
    public PostReleaseDate parmReleaseDate(PostReleaseDate _releaseDate  = releaseDate)
    {
        releaseDate = _releaseDate;

        return releaseDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRuleId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>ruleId</c> variable for the class.
    /// </summary>
    /// <param name="_ruleId">
    ///    The <c>LedgerEliminationRuleId</c> value to set the variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>ruleId</c> variable.
    /// </returns>
    public LedgerEliminationRuleId parmRuleId(LedgerEliminationRuleId _ruleId  = ruleId)
    {
        ruleId = _ruleId;

        return ruleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>sourceCompany</c> variable for the class.
    /// </summary>
    /// <param name="_sourceCompany">
    ///    The <c>selectableDataArea</c> value to set the variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>sourceCompany</c> variable.
    /// </returns>
    public selectableDataArea parmSourceCompany(selectableDataArea _sourceCompany  = sourceCompany)
    {
        sourceCompany = _sourceCompany;

        return sourceCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the <c>toDate</c> variable for the class.
    /// </summary>
    /// <param name="_toDate">
    ///    The <c>TransDate</c> value to set the variable to; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>toDate</c> variable.
    /// </returns>
    public TransDate parmToDate(TransDate _toDate  = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the current elimination proposal to produce journal lines.
    /// </summary>
    /// <remarks>
    ///    This method deals with the processing of a single elimination rule to produce journal lines.
    /// </remarks>
    public void run()
    {
        ledgerEliminationProcessRule = LedgerEliminationProcessRule::construct();

        ledgerEliminationProcessRule.processProposal(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LedgerEliminationProposal</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>LedgerEliminationProposal</c> class.
    /// </returns>
    public static LedgerEliminationProposal construct()
    {
        return new LedgerEliminationProposal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerEliminationProposal   ledgerEliminationProposal = LedgerEliminationProposal::construct();
        FormDataSource              formDataSource = FormDataUtil::getFormDataSource(_args.record());
        LedgerJournalTable          ledgerJournalTable = _args.caller().ledgerJournalTable();
        LedgerJournalEngine         ledgerJournalEngine = _args.caller().ledgerJournalEngine();

        if (ledgerEliminationProposal.prompt())
        {
            // the journal number and name which are required
            ledgerEliminationProposal.parmJournalNum(ledgerJournalTable.JournalNum);
            ledgerEliminationProposal.parmJournalName(ledgerJournalTable.JournalName);

            ledgerEliminationProposal.runOperation();

            // reexecutes the ledgerjournaltrans query to display the new records
            formDataSource.executeQuery();

            // updates the journal totals for the records added so totals on the form display correctly
            ledgerJournalEngine.ledgerJournalTableUpdateTotals(ledgerJournalTable,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>