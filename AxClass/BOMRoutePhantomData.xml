<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomRoutePhantomData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMRoutePhantomData</c> class holds the route and BOM information.
/// </summary>
/// <remarks>
///    Route and BOM information is stored in a map by using an artificial number as a unique key to make
///    sure that BOM and routes can be handled if a multiple occurrence within the same tree exists. In
///    addition to the route and BOM information, information for the operation number shift is stored and
///    passed from one call to the other. The temporary route table is filled when new route records are
///    added to make sure the renumbering algorithm is applied properly.The renumbering algorithm is based
///    on the algorithm used by the production calculation for the <c>prodRoute</c> records.
/// </remarks>

class BomRoutePhantomData
{
    // Handling of routes
    OprNum                      oprNumOffset;
    OprNum                      oprNumFirst;

    // storage structures
    Map                         bomMap;
    Map                         routeMap;
    Map                         routeParentBOMMap;
    BOMCalcTmpRoutePhantom      routePhantom;

    // Sequencial counters
    int                         bomCnt;
    int                         routeCnt;

    // Control flag
    boolean                     phantomExpanded;

    // Variables from BOMCalc
    PriceCalcId                 priceCalcId;

    private boolean             useRouteLevel;
    private RouteLevel          routeLevel;
    private RouteId             routeId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a BOM record to the map.
    /// </summary>
    /// <param name="_bom">
    ///    The BOM record, that should be added to the map.
    /// </param>
    /// <remarks>
    ///    The artificial counter is increased by one, when a new record is added.
    /// </remarks>
    public void addBOM(
        BOM   _bom
        )
    {
        bomCnt ++;

        bomMap.insert(bomCnt, _bom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a route and its parent BOM to the storage structures.
    /// </summary>
    /// <param name="_route">
    ///    The route record that should be added to the map.
    /// </param>
    /// <param name="_parentBOM">
    ///    The parent BOM record that should be added to the map.
    /// </param>
    /// <remarks>
    ///    The <c>routeCnt</c> class variable is incremented by 1 when a new route is added. The
    ///    <c>routeCnt</c> counter is used as a key for the route map and for the parent BOM map. The route is
    ///    stored in the temporary table BOMCalcTmpRoutePhantom.
    /// </remarks>
    public void addRoute(
        Route _route,
        BOM   _parentBOM
        )
    {
        routeCnt ++;

        // Add the route to the data structure and update the corresponding values
        routeMap.insert(routeCnt, _route);
        routeParentBOMMap.insert(routeCnt, _parentBOM);
        oprNumOffset = _route.OprNum;

        routePhantom.initFromRoute(_route);
        routePhantom.PriceCalcId = priceCalcId;
        routePhantom.RouteCnt = routeCnt;
        routePhantom.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPhantomRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the given operation number in a temporary table and returns the route belonging to this
    ///    operation number.
    /// </summary>
    /// <param name="_oprNumBOM">
    ///    The operation number for which the route should be found
    /// </param>
    /// <returns>
    ///    The route record belonging to the given operation number.
    /// </returns>
    /// <remarks>
    ///    The route will be found using either route level or operation number.
    ///    If a route level is specified using call to <c>useRouteLevelWhenFindPhantomRoute</c> then the route level is used when finding the route.
    ///    Otherwise the below logic will be used to determine the operation number used when finding the route.
    ///    Operation numbers are looked up in this sequence:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>The operation number for the phantom</description>
    ///       </item>
    ///       <item>
    ///          <description>The operation number for the BOM</description>
    ///       </item>
    ///       <item>
    ///          <description>The first given operation number</description>
    ///       </item>
    ///    </list>
    ///     The BOM operation number includes the offset that was used to insert the records into the
    ///    temporary table structure. Each route is inserted into the route map and into a temporary table.
    ///    The temporary table is used to retrieve the artificial counter, which then can be used to get the
    ///    original record out of the map.
    /// </remarks>
    public Route findPhantomRoute(
        OprNum      _oprNumBOM  // including offset
        )
    {
        if (useRouteLevel)
        {
            this.findRoutePhantomByLevel(routeLevel, routeId);
        }
        else
        {
            routePhantom.clear();
        
            if (! routePhantom.RecId && _oprNumBOM)
            {
                this.selectTmpRoutePhantom(_oprNumBOM);
            }

            if (! routePhantom.RecId && oprNumFirst)
            {
                this.selectTmpRoutePhantom(oprNumFirst);
            }
        }

        Route route = this.getExpandedRoute();

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpandedRoute</Name>
				<Source><![CDATA[
    private Route getExpandedRoute()
    {
        Route route;
        // Now get the corresponding route
        if (routeMap.exists(routePhantom.RouteCnt))
        {
            route = routeMap.lookup(routePhantom.RouteCnt);
        }

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRouteParentBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the parent BOM record belonging to an artificial route counter.
    /// </summary>
    /// <param name="_routeCnt">
    ///    The route counter for which the parent BOM record should be found.
    /// </param>
    /// <returns>
    ///    The parent BOM record belonging to an artificial route counter.
    /// </returns>
    /// <remarks>
    ///    The artificial route counter is used as a key in both the route and the parent BOM map, and so
    ///    allows you to retrieve the route and the parent BOM.
    /// </remarks>
    public BOM getRouteParentBOM(int _routeCnt)
    {
        if (routeParentBOMMap.exists(_routeCnt))
        {
            return routeParentBOMMap.lookup(_routeCnt);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>BOMRoutePhantomData</c> class.
    /// </summary>
    /// <remarks>
    ///    The storage structures for the expansion process are initialized by this method. There is one
    ///    temporary table, and 3 maps: one for the BOMs, one for the routes and one for the parent BOMs for a
    ///    route.
    /// </remarks>
    protected void new()
    {
        bomMap              = new Map(Types::Integer, Types::Record);
        routeMap            = new Map(Types::Integer, Types::Record);
        routeParentBOMMap   = new Map(Types::Integer, Types::Record);

        bomCnt   = 0;
        routeCnt = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMMap</Name>
				<Source><![CDATA[
    public Map parmBOMMap()
    {
        return bomMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumFirst</Name>
				<Source><![CDATA[
    public OprNum parmOprNumFirst(OprNum _oprNumFirst = oprNumFirst)
    {
        oprNumFirst = _oprNumFirst;

        return oprNumFirst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOprNumOffset</Name>
				<Source><![CDATA[
    public OprNum parmOprNumOffset(OprNum _oprNumOffset = oprNumOffset)
    {
        oprNumOffset = _oprNumOffset;

        return oprNumOffset;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhantomExpanded</Name>
				<Source><![CDATA[
    public boolean parmPhantomExpanded(boolean _phantomExpanded = phantomExpanded)
    {
        phantomExpanded = _phantomExpanded;

        return phantomExpanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceCalcId</Name>
				<Source><![CDATA[
    public PriceCalcId parmPriceCalcId(PriceCalcId _priceCalcId = priceCalcId)
    {
        priceCalcId = _priceCalcId;

        return priceCalcId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteId</Name>
				<Source><![CDATA[
    public RouteId parmRouteId(routeId _routeId = routeId)
    {
        routeId = _routeId;

        return routeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRouteLevelWhenFindPhantomRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether phantom route is found using route level.
    /// </summary>
    /// <param name="_useRouteLevel">Use route level when finding phantom route.</param>
    /// <param name="_routeLevel">Route level used when finding phantom route.</param>
    public void useRouteLevelWhenFindPhantomRoute(boolean _useRouteLevel, RouteLevel _routeLevel = 0)
    {
        useRouteLevel = _useRouteLevel;
        routeLevel = _routeLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRouteMap</Name>
				<Source><![CDATA[
    public Map parmRouteMap()
    {
        return routeMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectTmpRoutePhantom</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Selects a temporary route record for a given operation number.
    /// </summary>
    /// <param name="_oprNum">
    ///    The operation number for which the temporary route record should be found.
    /// </param>
    /// <remarks>
    ///    The <c>routeCnt</c> class variable is incremented by 1 whenever a route record is added. It is used
    ///    as the key value to allow the relevant temporary route record to be selected from the
    ///    BOMCalcTmpRoutePhantom table.
    /// </remarks>
    protected void selectTmpRoutePhantom(OprNum _oprNum)
    {
        select firstonly routePhantom
        where routePhantom.PriceCalcId == priceCalcId
           && routePhantom.OprNum      == _oprNum
           && routePhantom.OprPriority == RouteOprPriority::Primary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRoutePhantomByLevel</Name>
				<Source><![CDATA[
    private void findRoutePhantomByLevel(RouteLevel _level, RouteId _routeId)
    {
        routePhantom.clear();

        select firstonly routePhantom
            where routePhantom.PriceCalcId == priceCalcId
                && routePhantom.RouteId == _routeId
                && routePhantom.Level == _level
                && routePhantom.OprPriority == RouteOprPriority::Primary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMRoutePhantomData construct()
    {
        return new BOMRoutePhantomData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBOMCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BOMRoutePhantomData</c> class for a given <c>BOMCalcItem</c>
    ///    instance.
    /// </summary>
    /// <param name="_bomCalcItem">
    ///    The BOMCalcItem node for which the <c>BOMRoutePhantomData</c> class should be initialized.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BOMRoutePhantomData</c> class.
    /// </returns>
    /// <remarks>
    ///    The calculation number and level of the <c>BOMCalcItem</c> instance are used to retrieve the
    ///    highest BOMCalcTrans operation number, which will then be set as the operation number offset. The
    ///    calculation number is used to identify the run of the BOM Calculation for which this
    ///    <c>BOMRoutePhantomData</c> class is used.
    /// </remarks>
    public static BOMRoutePhantomData newFromBOMCalc(BOMCalcItem _bomCalcItem)
    {
        BOMRoutePhantomData phantomData;
        OprNum              oprNumOffSet;
        phantomData = BOMRoutePhantomData::construct();

        // Initialize oprNumOffSet
        oprNumOffSet = BOMCalcTrans::highestOprNum(_bomCalcItem.parmPriceCalcId(), _bomCalcItem.parmLevel() + 1);

        phantomData.parmOprNumOffset(oprNumOffSet);
        phantomData.parmPriceCalcId(_bomCalcItem.parmPriceCalcId());

        return phantomData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>