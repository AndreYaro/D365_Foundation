<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxThaiGovCertificationFeatureChecker</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>TaxGovCertificationFeatureChecker_TH</c> class provides checking
///     whether each feature for Thailand Government Certification is enabled.
/// </summary>
public class TaxThaiGovCertificationFeatureChecker
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAverageVATEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the Average VAT feature is enabled.
    /// </summary>
    /// <returns>
    ///     Returns true if
    ///         1) Parameter "Manage Realized and Unrealized VAT" is checked.
    ///         2) Parameter "Use tax branch" is checked.
    ///     Otherwise, returns false.
    /// </returns>
    public static boolean isAverageVATEnabled()
    {
        boolean         ret;

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchParamMarked())
        {
            ret         = TaxParameters::find().ConditionalTax;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCountryRegionTH</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the primary address is for Thailand.
    /// </summary>
    /// <returns>
    ///     Returns true if the primary address is for Thailand. Otherwise, returns false.
    /// </returns>
    public static boolean isCountryRegionTH(str country = curExt())
    {
        #isoCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#ISOTH], country);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBranchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the tax branch feature is enabled.
    /// </summary>
    /// <returns>
    ///     Returns true if the feature is enabled. Otherwise, returns false.
    /// </returns>
    public static boolean isTaxBranchEnabled()
    {
        DimensionAttribute              dimAttr;
        DimensionAttributeSetItem       dimAttrSetItem;
        DimensionEnumeration            dimensionSetId;
        boolean                         ret;

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchParamMarked())
        {
            dimensionSetId = DimensionCache::getDimensionAttributeSetForLedger();

            select firstonly RecId from dimAttrSetItem
                join RecId from dimAttr
                where dimAttrSetItem.DimensionAttributeSet  == dimensionSetId
                    && dimAttrSetItem.DimensionAttribute    == dimAttr.RecId
                    && dimAttr.BackingEntityType            == tableNum(DimAttributeTaxBranch);

            if (dimAttrSetItem.RecId)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBranchParamMarked</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the tax branch parameter is marked.
    /// </summary>
    /// <returns>
    ///     Returns true if the parameter is marked. Otherwise, returns false.
    /// </returns>
    public static boolean isTaxBranchParamMarked()
    {
        return (TaxThaiGovCertificationFeatureChecker::isCountryRegionTH()
                && isConfigurationkeyEnabled(configurationKeyNum(TaxThailandGovCertification))
                && TaxParameters::find().TaxBranchEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxWithholdEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checkes if the withholding tax feature for Thailand is enabled or not.
    /// </summary>
    /// <returns>
    /// true if enabled; otherwise, return false.
    /// </returns>
    public static boolean isTaxWithholdEnabled()
    {
        return isConfigurationkeyEnabled(configurationKeyNum(TaxThailandGovCertification))
            && TaxThaiGovCertificationFeatureChecker::isCountryRegionTH();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUnrealizedVATEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the Unrealized and Realized VAT feature is enabled.
    /// </summary>
    /// <returns>
    ///     Returns true if
    ///         1) Parameter "Manage Realized and Unrealized VAT" is checked.
    ///         2) Parameter "Use tax branch" is checked.
    ///     Otherwise, returns false.
    /// </returns>
    public static boolean isUnrealizedVATEnabled()
    {
        boolean         ret;

        if (TaxThaiGovCertificationFeatureChecker::isTaxBranchParamMarked())
        {
            ret         = TaxParameters::find().ConditionalTax;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubstitutionAdjustmentEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the substitution/adjustment invoices feature is enabled.
    /// </summary>
    /// <returns>
    ///     Returns true if
    ///         1) Unrealized and Realized VAT feature is enabled.
    ///         2) Parameter "Enable tax document‘s substitution/adjustment function" is enabled.
    ///     Otherwise, returns false.
    /// </returns>
    public static boolean isSubstitutionAdjustmentEnabled()
    {
        boolean ret;

        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ret  = CustParameters::find().EnableSubstitutionInvoices_TH;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjInvoicesSubstitutionAdjustmentEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     This method indicates whether the substitution/adjustment project invoices feature is enabled.
    /// </summary>
    /// <returns>
    ///     Returns true if
    ///         1) Unrealized and Realized VAT feature is enabled.
    ///         2) Parameter "Enable tax document‘s substitution/adjustment function" is enabled for project invoices.
    ///     Otherwise, returns false.
    /// </returns>
    public static boolean isProjInvoicesSubstitutionAdjustmentEnabled()
    {
        boolean ret;

        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            ret  = CustParameters::find().EnableSubstitutionProjectInvoices_TH;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>