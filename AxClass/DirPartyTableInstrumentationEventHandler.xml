<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyTableInstrumentationEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class DirPartyTableInstrumentationEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>DirPartyTable_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs diagnostics when a <c>DirPartyTable</c> record is deleted.
    /// </summary>
    /// <param name="_sender">The <c>DirPartyTable</c> row that was deleted.</param>
    /// <param name="_e">The data event args.</param>
    [DataEventHandler(tableStr(DirPartyTable), DataEventType::Deleted)]
    public final static void DirPartyTable_onDeleted(Common _sender, DataEventArgs _e)
    {
        const str DeleteMessage = 'DirPartyTableDeleted';
        const str FoundInView = 'FoundInPartyView';

        // Check to see if that party is currently used as a foreign key reference on any of the party-based entities.
        DirPartyView partyView;
        select firstonly RecId
            from partyView
        where partyView.Party == _sender.RecId;

        str partyFoundInView = (partyView.RecId == 0) ? 'false' : 'true';
        str partyDeleted = int642Str(_sender.RecId);

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(DirPartyTableInstrumentationEventHandler));
        logger.logInformation(strFmt('%1: %2, %3: %4', DeleteMessage, partyDeleted, FoundInView, partyFoundInView));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>