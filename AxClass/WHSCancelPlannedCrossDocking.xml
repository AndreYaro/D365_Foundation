<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCancelPlannedCrossDocking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles cancelling planned cross docks.
/// </summary>
internal final class WHSCancelPlannedCrossDocking extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private WHSLoadLine loadLine;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public container pack()
    {
        return [#CurrentVersion, loadLine];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     ret = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, loadLine] = packedClass;

                if (!loadLine)
                {
                    ret = false;
                }
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSCancelPlannedCrossDocking construct()
    {
        return new WHSCancelPlannedCrossDocking();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel planned cross docking for the <c>WHSLoadLine</c>.
    /// </summary>
    /// <param name = "_args">The arguments.</param>
    [Hookable(false)]
    internal static void main(Args _args)
    {
        WHSLoadLine localLoadLine = _args.record() as WHSLoadLine;

        if (localLoadLine.RecId != 0)
        {
            WHSCancelPlannedCrossDocking cancelPlannedCrossDocking = WHSCancelPlannedCrossDocking::construct();

            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(cancelPlannedCrossDocking))
            {
                cancelPlannedCrossDocking.loadLine = localLoadLine;

                cancelPlannedCrossDocking.runOperation();
            }

            if (FormDataUtil::isFormDataSource(localLoadLine))
            {
                FormDataSource dataSource = FormDataUtil::getFormDataSource(localLoadLine) as FormDataSource;

                dataSource.research();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel planned cross docking for specified load line.
    /// </summary>
    [Hookable(false)]
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            WHSCrossDockingPlanned::cancelPlannedCrossDocking(loadLine, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSCancelPlannedCrossDocking));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSCancelPlannedCrossDocking);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>