<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDeclarationOXML_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AlcoholDeclarationOXML_RU</c> class and its child classes performs printing
///    to Excel of the calculated data of the alcohol declaration and daily journal.
/// </summary>
class AlcoholDeclarationOXML_RU extends XMLExcelReport_RU implements BatchRetryable
{
    AlcoholDeclarationJournalTable_RU           journalTableCaller;
    AlcoholDeclarationJournalTrans_RU           journalTransCaller;
    AlcoholDeclarationJournalId_RU              journalId;
    CompanyInfo                                 companyInfo;
    Common                                      common;

    LogisticsPostalAddress                      companyPostalAddress;
    LogisticsAddressCity                        companyAddressCity;
    LogisticsAddressStreet_RU                   companyAddressStreet;

    Set                                         journalTransBranchSet;
    Set                                         licenseSet;

    SetEnumerator                               licenceSetEnumerator,
                                                branchSetEnumerator;

    int                                         qtyOfPagesOnSheet2, curPageOnSheet2;
    int                                         intTransfCol1, intTransfCol2;           // variables store # of columns with internal transfers

    ArrayExtend_RU                              totalByManufacturerArray;
    ArrayExtend_RU                              totalByTypeArray;
    ArrayExtend_RU                              arrayStr, arrayReal, totalArray;
    int                                         lineNum, qtyFromCol, lastCol;
    str                                         text;
    boolean                                     insertX;                                // variable shows whether to print 'X' in internal transfer columns

    boolean                                     printTotalByCompany;
    DialogField                                 fieldPrintTotalByCompany;
    VendAccount                                 alcoholRegulationAuthorityId;
    boolean                                     printHeadAuthority;                     // print Alcohol Regulation Authority from the separate division with empty Vendor (head division)

    protected const int LicensesPerSheet = 6;
    protected const int BranchesPerSheet = 6;
    protected const str Xsymb = 'X';
    protected const int PosFromRow = 2;
    protected const int PosFromCol = 3;

    protected const str Sheet1 = 'SHEET1';
    protected const str Sheet2 = 'SHEET2';

    protected const str Headermovement = 'HEADERMOVEMENT';
    protected const str Totallinemovement = 'TOTALLINEMOVEMENT';
    protected const str Bodylinemovement = 'BODYLINEMOVEMENT';
    protected const str Footermovement = 'FOOTERMOVEMENT';

    protected const str Headerreceiptissue = 'HEADERRECEIPTISSUE';
    protected const str Totallinereceiptissue = 'TOTALLINERECEIPTISSUE';
    protected const str Bodylinereceiptissue = 'BODYLINERECEIPTISSUE';
    protected const str Footerreceiptissue = 'FOOTERRECEIPTISSUE';

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args   _args)
    {
        Set                                         printSet = new Set(Types::Int64);
        NoneOneOfAllSelected                        selection;
        AlcoholDeclarationJournalTrans_RU           journalTrans;
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranch;
        Object                                      formRunObject;

        if (   ! _args
            &&  _args.dataset() != tablenum(AlcoholDailyJournalTable_RU)
            &&  _args.dataset() != tablenum(AlcoholDeclarationJournalTrans_RU)
            &&  _args.dataset() != tablenum(AlcoholDeclarationJournalTransBranch_RU))
        {
            throw error("@GLS104275");
        }

        switch (_args.dataset())
        {
            case tablenum(AlcoholDailyJournalTable_RU):
                AlcoholDeclarationOXML_RU::printDailyJournal(_args.record());
                break;

            case tablenum(AlcoholDeclarationJournalTrans_RU):
                journalTrans = _args.record();
                printSet = Set::create(journalTrans.getJournalTransBranchSet());
                AlcoholDeclarationOXML_RU::printJournalTransBranchSet(journalTrans, printSet.pack(), false, true);
                break;

            case tablenum(AlcoholDeclarationJournalTransBranch_RU):
                journalTransBranch  = _args.record();
                journalTrans        = journalTransBranch.journalTrans();
                selection           = _args.parmEnum();

                switch (selection)
                {
                    case NoneOneOfAllSelected::None:
                        printSet.add(journalTransBranch.RecId);
                        AlcoholDeclarationOXML_RU::printJournalTransBranchSet(journalTrans, printSet.pack(), false, false);
                        break;

                    case NoneOneOfAllSelected::OneOf:
                        formRunObject = _args.caller();
                        AlcoholDeclarationOXML_RU::printJournalTransBranchSet(journalTrans, formRunObject.getMarkedSet(), true, false);
                        break;

                    case NoneOneOfAllSelected::All:
                        printSet = Set::create(journalTrans.getJournalTransBranchSet());
                        AlcoholDeclarationOXML_RU::printJournalTransBranchSet(journalTrans, printSet.pack(), false, true);
                        break;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the activity type (wholesale or retail) of the current child of the <c>AlcoholDeclarationOXML_RU</c> class.
    /// </summary>
    /// <returns>
    ///    The activity type to which the current object corresponds.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in the child classes.
    /// </remarks>
    protected AlcoholActivityType_RU activityType()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>branchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the header based on the branch ID, which is used in the printable form.
    /// </summary>
    /// <param name="_branchId">
    ///    This is the ID of the branch.
    /// </param>
    /// <returns>
    ///    Information about the branch including INN, RCC and address, which will be printed.
    /// </returns>
    protected str branchHeader(BranchId_RU  _branchId)
    {
        Branches_RU     branch = Branches_RU::find(_branchId);
        VendTable       vendTable;

        if (branch.VendAccount)
        {
            vendTable = branch.vendTable();

            return strRemoveCr(strfmt("@SYS4002870",
                                      _branchId,
                                      vendTable.partyINN_RU(),
                                      vendTable.partyKPPasOfDate_RU(),
                                      vendTable.postalAddress().Address));
        }
        else
        {
            return strRemoveCr(strfmt("@SYS4002870",
                                      _branchId,
                                      CompanyInfoHelper::partyINN_RU(companyInfo),
                                      CompanyInfoHelper::partyKPP_RU(companyInfo),
                                      companyInfo.postalAddress().Address));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates height of body section.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of section.
    /// </param>
    /// <returns>
    ///     Height of body section.
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        return 12.75;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Executes report.
    /// </summary>
    protected void createReport()
    {
        this.initValue();
        this.initSectionMap();

        this.setCurrentWorksheetNum(1);
        this.execute(Sheet1);

        this.prepareLicenseSet();
        this.setCurrentWorksheetNum(2);

        qtyOfPagesOnSheet2 = max(roundUp(licenseSet.elements() / LicensesPerSheet, 1),
                                 roundUp(journalTransBranchSet.elements() / BranchesPerSheet, 1));

        licenceSetEnumerator = licenseSet.getEnumerator();
        branchSetEnumerator  = journalTransBranchSet.getEnumerator();

        for (curPageOnSheet2 = 1; curPageOnSheet2 <= qtyOfPagesOnSheet2; curPageOnSheet2++)
        {
            this.execute(Sheet2);
            document.insertPageBreak(currentRow, 2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>declarationType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the declaration type of the current child of the <c>AlcoholDeclarationOXML_RU</c> class.
    /// </summary>
    /// <returns>
    ///    The declaration type to which the current object corresponds.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in the child classes.
    /// </remarks>
    protected AlcoholDeclarationType_RU declarationType()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </summary>
    /// <returns>
    ///    An object that contains the dialog box.
    /// </returns>
    public Object dialog()
    {
        Dialog  dialog;

        dialog = super();

        dialog.caption(this.isDaily() ? "@SYS4003391" : "@SYS4002866");
        fieldPrintTotalByCompany = dialog.addFieldValue(extendedtypestr(NoYesId), printTotalByCompany, "@SYS4002869");
        fieldPrintTotalByCompany.enabled(! this.isDaily());

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the new file
    /// </summary>
    /// <returns>
    ///    Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'AlcoholDeclarationOXML';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Postfix for a new file
    /// </summary>
    /// <returns>
    ///    Empty string.
    /// </returns>
    protected Filename fileNamePostfix()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBodyLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the body line of the report.
    /// </summary>
    private void fillBodyLine()
    {
        int     i, curCol = 1;

        for (i = 1; i <= arrayStr.lastIndex(); i++)
        {
            this.insertValueToSection('body_' + int2str(curWorksheetNum) + '_' + int2str(curCol), arrayStr.value(i));
            curCol++;
        }

        for (i = 1; i <= arrayReal.lastIndex(); i++)
        {
            this.insertValueToSection('body_' + int2str(curWorksheetNum) + '_' + int2str(curCol), arrayReal.value(i));
            curCol++;
        }

        if (insertX)
        {
            this.insertValueToSection('body_' + int2str(curWorksheetNum) + '_' + int2str(intTransfCol1), Xsymb);
            this.insertValueToSection('body_' + int2str(curWorksheetNum) + '_' + int2str(intTransfCol2), Xsymb);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCellsLeft</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the plurality of merged cells from left.
    /// </summary>
    /// <param name="_bookmark">
    ///    Bookmark of the cell from where to start printing.
    /// </param>
    /// <param name="_text">
    ///    What to print.
    /// </param>
    /// <param name="_number">
    ///    Quantity of cells where the text should be printed.
    /// </param>
    /// <param name="_cellMacro">
    ///    Quantity of ordinary cells in one merged cell.
    /// </param>
    protected void fillCellsLeft(str _bookmark, str _text, int _number = strlen(_text), int _cellMacro = 0)
    {
        int         c, number, firstColumn, row;
        str         cell;
        container   rangeInfo = document.workbook().parseBookmark(_bookmark);

        row             = conPeek(rangeInfo, PosFromRow);
        firstColumn     = conPeek(rangeInfo, PosFromCol);
        number = min(strlen(_text), _number);

        while (c < number)
        {
            c ++;
            cell = ComExcelDocument_RU::numToNameCell(firstColumn + (c - 1) * _cellMacro, row);
            document.insertValue(cell, substr(_text, c, 1), curWorksheetNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCellsRight</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the plurality of merged cells from right.
    /// </summary>
    /// <param name="_bookmark">
    ///    Cell name from where to start printing.
    /// </param>
    /// <param name="_text">
    ///    What to print.
    /// </param>
    /// <param name="_number">
    ///    Quantity of cells where the text should be printed.
    /// </param>
    /// <param name="_filler">
    ///    The string which have to be used to fill empty merged cells.
    /// </param>
    /// <param name="_cellMacro">
    ///    Quantity of ordinary cells in one merged cell.
    /// </param>
    protected void fillCellsRight(str _bookmark, str _text, int _number = strlen(_text), str _filler = "", int _cellMacro = 0)
    {
        int         c, number, lastColumn, row;
        str         cell;
        container   rangeInfo = document.workbook().parseBookmark(_bookmark);

        row            = conPeek(rangeInfo, PosFromRow);
        lastColumn     = conPeek(rangeInfo, PosFromCol);
        number = min(strlen(_text), _number);
        c = number;

        while (c > 0)
        {
            cell = ComExcelDocument_RU::numToNameCell(lastColumn + (c - number) * _cellMacro, row);
            document.insertValue(cell, substr(_text, c, 1), curWorksheetNum);
            c--;
        }

        if (strlen(_filler) != 0)
        {
            c = _number - number;
            while (c > 0)
            {
                cell = ComExcelDocument_RU::numToNameCell(lastColumn + (c - _number) * _cellMacro, row);
                document.insertValue(cell, _filler, curWorksheetNum);
                c--;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Fills specified report section with data.
    /// </summary>
    /// <param name="_bookmark">
    ///     Name of the section.
    /// </param>
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case Sheet1:
                this.fillSheet1();
                break;

            case Sheet2:
                this.fillSheet2();
                break;

            case Totallinemovement:
                this.fillTotalLine();
                break;

            case Bodylinemovement:
                this.fillBodyLine();
                break;

            case Totallinereceiptissue:
                this.fillTotalLine();
                break;

            case Bodylinereceiptissue:
                this.fillBodyLine();
                break;

            case Footermovement:
                this.fillFooterMovement();
                break;

            case Footerreceiptissue:
                this.fillFooterReceiptIssue();
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooterMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills footer for the movement sheet.
    /// </summary>
    private void fillFooterMovement()
    {
        this.insertValueToSection('directorNameMovement',   OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Director).Name);
        this.insertValueToSection('accountantNameMovement', OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Accountant).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFooterReceiptIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills footer for the receipt/issue sheet.
    /// </summary>
    private void fillFooterReceiptIssue()
    {
        this.insertValueToSection('directorNameReceiptIssue',   OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Director).Name);
        this.insertValueToSection('accountantNameReceiptIssue', OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Accountant).Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills Excel sheet with alcohol production movement data.
    /// </summary>
    protected void fillMovement()
    {
        AlcoholDeclarationTransMovement_RU          declarationTrans;
        SetEnumerator                               se;
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranch;

        qtyFromCol  = this.movementTextColQty() + 1;
        lastCol     = this.movementColQty();
        this.execute(Headermovement);

        if (printTotalByCompany)
        {
            this.printBranchMovement('', "@SYS4002871");
        }

        se = journalTransBranchSet.getEnumerator();

        while (se.moveNext())
        {
            journalTransBranch = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());

            select firstonly declarationTrans
                where declarationTrans.BranchId  == journalTransBranch.BranchId
                   && declarationTrans.JournalId == journalId
                   && declarationTrans.AlcoholDeclarationType == this.declarationType();

            if (!declarationTrans)
                continue;

            this.printBranchMovement(journalTransBranch.BranchId, this.branchHeader(journalTransBranch.BranchId));
        }

        if (pageHeight - currentHeight < (this.footerRowsQty() + 1) * this.calcRangeHeight(''))
        {
            document.insertPageBreak(currentRow, curWorksheetNum);
            currentHeight = 0;
        }

        this.execute(Footermovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReceiptIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills Excel sheet with alcohol production receipt/issue data.
    /// </summary>
    /// <param name="_declarationTransType">
    ///    The type of the records to print (receipt or issue).
    /// </param>
    protected void fillReceiptIssue(AlcoholDeclarationTransType_RU     _declarationTransType)
    {
        AlcoholDeclarationTrans_RU                  declarationTrans;
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranch;
        SetEnumerator                               se;

        lineNum     = 0;
        qtyFromCol  = this.receiptIssueColQty();
        lastCol     = this.receiptIssueColQty();
        this.execute(Headerreceiptissue);

        if (printTotalByCompany)
        {
            this.printBranchReceiptIssue(_declarationTransType, '', "@SYS4002871");
        }

        se = journalTransBranchSet.getEnumerator();

        while (se.moveNext())
        {
            journalTransBranch = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());

            select firstonly declarationTrans
                where declarationTrans.BranchId                 == journalTransBranch.BranchId
                   && declarationTrans.JournalId                == journalId
                   && declarationTrans.AlcoholDeclarationType   == this.declarationType()
                   && declarationTrans.Type                     == _declarationTransType;

            if (! declarationTrans)
                continue;

            this.printBranchReceiptIssue(_declarationTransType, journalTransBranch.BranchId, this.branchHeader(journalTransBranch.BranchId));
        }

        if (pageHeight - currentHeight < (this.footerRowsQty() + 1) * this.calcRangeHeight(''))
        {
            document.insertPageBreak(currentRow, curWorksheetNum);
            currentHeight = 0;
        }

        this.execute(Footerreceiptissue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheet1</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the first sheet of the alcohol declaration.
    /// </summary>
    protected void fillSheet1()
    {
        const str CellINN = 'CJ7';
        const str CellKPP = 'AG9';
        const str YearCell = 'AX18';
        const str CorrectionNumCell = 'BI14';
        const str MarkSign = 'V';
        const str Filler = '0';
        const str CompanyNameCell = 'E25';
        const str IsCorrectionCell = 'AG14';
        const str IsPrimaryCell = 'S14';
        const str FirstPeriodCell = 'AX16';
        const str SecondPeriodCell = 'BQ16';
        const str ThirdPeriodCell = 'CI16';
        const str FourthPeriodCell = 'DC16';
        const str ZipcodeStartCell = 'Y33';
        const str ZipCell = 'Z33';
        const str StateCell = 'BH33';
        const str CountyCell = 'BY33';
        const str CityCell = 'AF34';
        const str StreetCell = 'CF34';
        const str EstateBuildingCell = 'X35';
        const str PhoneFaxCell = 'X36';
        const str EmailCell = 'AG38';
        const str DirectorCell = 'V49';
        const str AccountantCell = 'Y55';
        const str AlcoholRegulationAuthorityNameCell = 'AA21';
        Branches_RU     headBranch;

        this.fillCellsRight(CellINN,  CompanyInfoHelper::partyINN_RU(companyInfo), 12, Filler, 5);
        this.fillCellsLeft (CellKPP,  CompanyInfoHelper::partyKPP_RU(companyInfo), 9, 5);
        this.fillCellsLeft (YearCell, int2str(journalTableCaller.FiscalYear), 4, 3);

        if (journalTableCaller.isCorrectionJournal())
        {
            document.insertValue(IsCorrectionCell, MarkSign, curWorksheetNum);
            this.fillCellsRight(CorrectionNumCell, int2str(journalTableCaller.CorrectionNum), 2, Filler, 3);
        }
        else
        {
            document.insertValue(IsPrimaryCell, MarkSign, curWorksheetNum);
        }

        switch (journalTableCaller.PeriodNum)
        {
            case 1: document.insertValue(FirstPeriodCell, MarkSign, curWorksheetNum); break;
            case 2: document.insertValue(SecondPeriodCell, MarkSign, curWorksheetNum); break;
            case 3: document.insertValue(ThirdPeriodCell, MarkSign, curWorksheetNum); break;
            case 4: document.insertValue(FourthPeriodCell, MarkSign, curWorksheetNum); break;
            default: break;
        }

        if (printHeadAuthority)
        {
            select firstonly AlcoholRegulationAuthorityId from headBranch
                where ! headBranch.VendAccount;

            document.insertValue(AlcoholRegulationAuthorityNameCell, VendTable::find(headBranch.AlcoholRegulationAuthorityId).name(), curWorksheetNum);
        }
        else
        {
            document.insertValue(AlcoholRegulationAuthorityNameCell, VendTable::find(alcoholRegulationAuthorityId).name(), curWorksheetNum);
        }

        document.insertValue(CompanyNameCell,     companyInfo.Name, curWorksheetNum);
        document.insertValue(ZipcodeStartCell,    substr(companyInfo.postalAddress().ZipCode,1,1),curWorksheetNum);
        this.fillCellsLeft(ZipCell,               substr(companyInfo.postalAddress().ZipCode,2,5),5,3);
        this.fillCellsLeft(StateCell,             companyPostalAddress.stateFullName_RU(),2,3);
        document.insertValue(CountyCell,          strRemoveCr(companyPostalAddress.countyFullName_RU()), curWorksheetNum);
        document.insertValue(CityCell,            strRemoveCr(companyAddressCity.fullName_RU()), curWorksheetNum);
        document.insertValue(StreetCell,          strRemoveCr(companyAddressStreet.fullName()), curWorksheetNum);
        document.insertValue(EstateBuildingCell,  strRemoveCr(companyPostalAddress.BuildingCompliment), curWorksheetNum);
        document.insertValue(PhoneFaxCell,        strfmt("@SYS70938", companyInfo.phone(), companyInfo.teleFax()), curWorksheetNum);
        document.insertValue(EmailCell,           strRemoveCr(companyInfo.email()), curWorksheetNum);

        document.insertValue(DirectorCell,   OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Director).Name, curWorksheetNum);
        document.insertValue(AccountantCell, OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Accountant).Name, curWorksheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheet2</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the second sheet of the alcohol declaration.
    /// </summary>
    private void fillSheet2()
    {
        const str Filler = '0';
        const str PageNoCell = 'CA9';
        const str CellINN = 'CJ7';
        const str CellKPP = 'AG9';
        int i;
        AlcoholLicenseTable_RU licenseTable;
        Branches_RU branches;
        VendTable vendTable;
        AlcoholDeclarationJournalTransBranch_RU journalTransBranch;
        LogisticsPostalAddress postalAddress;
        LogisticsAddressCity addressCity;
        LogisticsAddressStreet_RU addressStreet;
        KPPU_RU KPP;
        LogisticsAddressZipCodeId zipCode;
        LogisticsAddressStateId stateId;


        this.fillCellsRight(CellINN, CompanyInfoHelper::partyINN_RU(companyInfo), 12, Filler, 5);
        this.fillCellsLeft (CellKPP, CompanyInfoHelper::partyKPP_RU(companyInfo), 9, 5);
        document.insertValue(PageNoCell, strfmt('Стр. %1', strRfix(int2str(curPageOnSheet2 + 1), 3, Filler)), curWorksheetNum);

        // filling licenses
        if (this.declarationType() != AlcoholDeclarationType_RU::Retail12)
        {
            for (i = 1; i <= LicensesPerSheet; i++)
            {
                if (licenceSetEnumerator.moveNext())
                {
                    licenseTable = AlcoholLicenseTable_RU::findRecId(licenceSetEnumerator.current());
                }
                else
                {
                    licenseTable.clear();
                }

                this.insertValueToSection('LicenseSeries'       + int2str(i), licenseTable.LicenseSeries);
                this.insertValueToSection('LicenseNum'          + int2str(i), licenseTable.LicenseNum);
                this.insertValueToSection('LicenseFromDate'     + int2str(i), strFmt('%1', licenseTable.FromDate));
                this.insertValueToSection('LicenseToDate'       + int2str(i), strFmt('%1', licenseTable.ToDate));
                this.insertValueToSection('ActivityKindId'      + int2str(i), licenseTable.ActivityKindId);
            }
        }

        for (i = 1; i <= BranchesPerSheet; i++)
        {
            if (branchSetEnumerator.moveNext())
            {
                journalTransBranch  = AlcoholDeclarationJournalTransBranch_RU::findRecId(branchSetEnumerator.current());
                branches            = Branches_RU::find(journalTransBranch.BranchId);
                vendTable           = VendTable::find(branches.VendAccount);

                if (vendTable)
                {
                    KPP             = vendTable.partyKPPasOfDate_RU();
                    postalAddress   = vendTable.postalAddress();
                    zipCode         = postalAddress.ZipCode;
                    stateId         = postalAddress.State;
                    addressCity     = LogisticsAddressCity::find_RU(companyPostalAddress.CityRecId);
                    addressStreet   = LogisticsAddressStreet_RU::findRecID(companyPostalAddress.StreetId_RU);
                }
                else
                {
                    KPP             = CompanyInfoHelper::partyKPP_RU(companyInfo);
                    postalAddress   = companyPostalAddress;
                    zipCode         = companyPostalAddress.ZipCode;
                    stateId         = companyPostalAddress.State;
                    addressCity     = companyAddressCity;
                    addressStreet   = companyAddressStreet;
                }
            }
            else
            {
                KPP = strRep(' ', 9);
                zipCode = strRep(' ', 6);
                stateId = strRep(' ', 2);
                journalTransBranch.clear();
                branches.clear();
                vendTable.clear();
                postalAddress.clear();
                addressCity.clear();
                addressStreet.clear();
            }

            this.fillCellsLeft('KPP_' + int2str(i),   KPP, 9, 3);
            this.fillCellsLeft('ZIP_' + int2str(i),   zipCode, 6, 3);
            this.fillCellsLeft('STATE_' + int2str(i), stateId, 2, 3);
            this.insertValueToSection('COUNTY_' + int2str(i), postalAddress.countyFullName_RU());
            this.insertValueToSection('CITY_' + int2str(i), addressCity.fullName_RU());
            this.insertValueToSection('STREET_' + int2str(i), addressStreet.fullName());
            this.insertValueToSection('BUILDING_' + int2str(i), postalAddress.BuildingCompliment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheet3</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the third sheet of Excel document with data.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden in the child classes.
    /// </remarks>
    protected void fillSheet3()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheet4</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the fourth sheet of Excel document with data.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden in the child classes.
    /// </remarks>
    protected void fillSheet4()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the total line.
    /// </summary>
    private void fillTotalLine()
    {
        int     i, curCol = qtyFromCol;

        if (! this.isDaily())
        {
            this.insertValueToSection('total_' + int2str(curWorksheetNum) + '_1', lineNum);
            this.insertValueToSection('total_' + int2str(curWorksheetNum) + '_2', text);
        }

        if (totalarray)
        {
            for (i = 1; i <= totalarray.lastIndex(); i++)
            {
                this.insertValueToSection('total_' + int2str(curWorksheetNum) + '_' + int2str(curCol), totalArray.value(i));
                curCol++;
            }
        }
        else
        {
            for (i = qtyFromCol; i <= lastCol; i++)
            {
                this.insertValueToSection('total_' + int2str(curWorksheetNum) + '_' + int2str(i), '');
            }
        }

        if (insertX)
        {
            this.insertValueToSection('total_' + int2str(curWorksheetNum) + '_' + int2str(intTransfCol1), Xsymb);
            this.insertValueToSection('total_' + int2str(curWorksheetNum) + '_' + int2str(intTransfCol2), Xsymb);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>footerRowsQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the heigth of the footer (in rows) of the document on sheets 3 and 4, which can't be alone on the page without data lines.
    /// </summary>
    /// <returns>
    ///    The footer height in rows.
    /// </returns>
    protected int footerRowsQty()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the dialog box field values.
    /// </summary>
    /// <returns>
    ///    Returns true, if super() returned true, false otherwise.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        printTotalByCompany = fieldPrintTotalByCompany.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a list of report sections which should be executed.
    /// </summary>
    protected void initSectionMap()
    {
        this.addSection(Sheet1);
        this.addSection(Sheet2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes variables which will be often used during printing.
    /// </summary>
    public void initValue()
    {
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranch;
        SetEnumerator                               se = journalTransBranchSet.getEnumerator();

        se.moveNext();
        journalTransBranch = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());  // find any record from the current set

        journalTransCaller      = journalTransBranch.journalTrans();
        journalId               = journalTransCaller.JournalId;
        journalTableCaller      = journalTransCaller.journalTable();
        companyInfo             = CompanyInfo::find();
        alcoholRegulationAuthorityId = Branches_RU::find(journalTransBranch.BranchId).AlcoholRegulationAuthorityId;

        companyPostalAddress    = companyInfo.postalAddress();
        companyAddressCity      = LogisticsAddressCity::find_RU(companyPostalAddress.CityRecId);
        companyAddressStreet    = LogisticsAddressStreet_RU::findRecID(companyPostalAddress.StreetId_RU);
        licenseSet              = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBodyLineMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the declaration trans record into the Excel report.
    /// </summary>
    /// <param name="_declarationTrans">
    ///    AlcoholDeclarationTransMovement_RU record which is being printed.
    /// </param>
    protected void insertBodyLineMovement(AlcoholDeclarationTransMovement_RU      _declarationTrans)
    {
        int     i, j;

        arrayStr = new ArrayExtend_RU(Types::String, this.movementTextColQty());

        i = 1;
        arrayStr.value(i,   strfmt("@SYS82282", lineNum));
        i++;
        arrayStr.value(i,   AlcoholProductionType_RU::find(_declarationTrans.AlcoholProductionTypeId).Name);
        i++;
        arrayStr.value(i,   _declarationTrans.AlcoholProductionTypeId);
        i++;
        arrayStr.value(i,   _declarationTrans.manufacturerName());
        i++;
        arrayStr.value(i,   _declarationTrans.manufacturerINN());
        i++;
        arrayStr.value(i,   _declarationTrans.manufacturerKPP());
        i++;

        arrayReal = new ArrayExtend_RU(Types::Real, this.movementColQty() - this.movementTextColQty());

        i = 1;
        arrayReal.value(i, _declarationTrans.PeriodStartQty);
        i++;
        arrayReal.value(i, _declarationTrans.ManufacturerPurchQty);
        i++;
        arrayReal.value(i, _declarationTrans.WholesalePurchQty);
        i++;
        arrayReal.value(i, _declarationTrans.ImportPurchQty);
        i++;
        arrayReal.value(i, _declarationTrans.TotalPurchQty);
        i++;
        arrayReal.value(i, _declarationTrans.PurchReturnQty);
        i++;
        arrayReal.value(i, _declarationTrans.OtherRecieptQty +
                           (this.declarationType() == AlcoholDeclarationType_RU::Retail12 ? _declarationTrans.InternalTransferReceiptQty : 0));

        if (this.declarationType() == AlcoholDeclarationType_RU::Wholesale5 ||
            this.declarationType() == AlcoholDeclarationType_RU::Retail11)
        {
            i++;
            arrayReal.value(i, _declarationTrans.InternalTransferReceiptQty);
            intTransfCol1 = i + this.movementTextColQty();
        }

        i++;
        arrayReal.value(i,  _declarationTrans.TotalReceiptQty);

        if (this.declarationType() == AlcoholDeclarationType_RU::Wholesale5)
        {
            i++;
            arrayReal.value(i, _declarationTrans.WholesaleSalesQty);
            i++;
            arrayReal.value(i, _declarationTrans.RetailSalesQty);
            i++;
            arrayReal.value(i, _declarationTrans.ExportSalesQty);
        }

        i++;
        arrayReal.value(i, _declarationTrans.TotalSalesQty);
        i++;
        arrayReal.value(i, _declarationTrans.OtherIssueQty +
                           (this.declarationType() == AlcoholDeclarationType_RU::Retail12 ? _declarationTrans.InternalTransferIssueQty : 0));
        i++;
        arrayReal.value(i, _declarationTrans.SalesReturnQty);

        if (this.declarationType() == AlcoholDeclarationType_RU::Wholesale5 ||
            this.declarationType() == AlcoholDeclarationType_RU::Retail11)
        {
            i++;
            arrayReal.value(i, _declarationTrans.InternalTransferIssueQty);
            intTransfCol2 = i + this.movementTextColQty();
        }

        i++;
        arrayReal.value(i, _declarationTrans.TotalIssueQty);
        i++;
        arrayReal.value(i, _declarationTrans.PeriodEndQty);

        // adding to total array
        for (j = 1; j <= i; j++)
        {
            totalByTypeArray.value(j, totalByTypeArray.value(j) + arrayReal.value(j));
        }

        this.execute(Bodylinemovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBodyLineReceiptIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the declaration trans record into the Excel report.
    /// </summary>
    /// <param name="_declarationTrans">
    ///    AlcoholDeclarationTrans_RU record which is being printed.
    /// </param>
    protected void insertBodyLineReceiptIssue(AlcoholDeclarationTrans_RU      _declarationTrans)
    {
        AlcoholLicenseTable_RU      alcoholLicenseTable;
        CustVendTable               custVendTable = _declarationTrans.custVendTable();
        int                         i;

        alcoholLicenseTable = AlcoholLicenseTable_RU::find(_declarationTrans.LicenseSeriesNum);
        arrayStr = new ArrayExtend_RU(Types::String);

        i = 1;
        arrayStr.value(i,  strfmt("@SYS82282", lineNum));
        i++;
        arrayStr.value(i,  AlcoholProductionType_RU::find(_declarationTrans.AlcoholProductionTypeId).Name);
        i++;
        arrayStr.value(i,  _declarationTrans.AlcoholProductionTypeId);
        i++;
        arrayStr.value(i,  _declarationTrans.manufacturerName());
        i++;
        arrayStr.value(i,  _declarationTrans.manufacturerINN());
        i++;
        arrayStr.value(i,  _declarationTrans.manufacturerKPP());
        i++;
        arrayStr.value(i,  custVendTable.name());

        if (   this.declarationType() == AlcoholDeclarationType_RU::Wholesale6
            || this.declarationType() == AlcoholDeclarationType_RU::Wholesale7)
        {
            i++;
            arrayStr.value(i, DirParty::primaryPostalAddress(custVendTable.Party).getAddressAsLine_RU());
        }

        i++;
        arrayStr.value(i, custVendTable.partyINNasOfDate_RU());
        i++;
        arrayStr.value(i, custVendTable.partyKPPasOfDate_RU());

        if (this.declarationType() == AlcoholDeclarationType_RU::Wholesale6 ||
            this.declarationType() == AlcoholDeclarationType_RU::Wholesale7 ||
            this.declarationType() == AlcoholDeclarationType_RU::Retail11)
        {
            i++;
            arrayStr.value(i, alcoholLicenseTable.LicenseSeriesNum);
            i++;
            arrayStr.value(i, strfmt("@SYS82282", alcoholLicenseTable.FromDate));
            i++;
            arrayStr.value(i, strfmt("@SYS82282", alcoholLicenseTable.ToDate));
            i++;
            arrayStr.value(i, alcoholLicenseTable.IssuedBy);
        }

        if (this.declarationType() == AlcoholDeclarationType_RU::Wholesale6 ||
            this.declarationType() == AlcoholDeclarationType_RU::Wholesale7)
        {
            i++;
            arrayStr.value(i, _declarationTrans.NotificationNum);
            i++;
            arrayStr.value(i, strfmt("@SYS82282", _declarationTrans.NotificationDate));
            i++;
            arrayStr.value(i, _declarationTrans.NotificationVolume ? strfmt("@SYS82282", _declarationTrans.NotificationVolume) : "");
        }

        i++;
        arrayStr.value(i, strfmt("@SYS82282", _declarationTrans.TransDate));
        i++;
        arrayStr.value(i, _declarationTrans.InvoiceId);
        i++;
        arrayStr.value(i, _declarationTrans.InventGTDId);

        arrayReal = new ArrayExtend_RU(Types::Real, 1);
        arrayReal.value(1, _declarationTrans.Qty);

        // adding to total arrays
        totalByManufacturerArray.value(1, totalByManufacturerArray.value(1) + _declarationTrans.Qty);
        totalByTypeArray.value        (1, totalByTypeArray.value(1)         + _declarationTrans.Qty);

        this.execute(Bodylinereceiptissue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDaily</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows if the current class relates to the processing of daily journal.
    /// </summary>
    /// <returns>
    ///    true for daily journal, false otherwise.
    /// </returns>
    protected boolean isDaily()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of columns on the sheet with movement data.
    /// </summary>
    /// <returns>
    ///    Quantity of columns on the sheet with movement data.
    /// </returns>
    protected int movementColQty()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementTextColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of text columns on the sheet with movement data.
    /// </summary>
    /// <returns>
    ///    Quantity of text columns on the sheet with movement data.
    /// </returns>
    protected int movementTextColQty()
    {
        return 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>AlcoholDeclarationOXML_RU</c> class.
    /// </summary>
    /// <param name="_common">
    ///    This is either the declaration journal line or the daily journal table from which data is being printed.
    /// </param>
    public void new(Common    _common)
    {
        super();
        common = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [CurrentVersion, printTotalByCompany];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBranchSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Passes the set of recIds of the lines which have to be printed in the report.
    /// </summary>
    /// <param name="_packedSet">
    ///    Packed set of recIds of records in AlcoholDeclarationJournalTransBranch_RU table which have to be printed.
    /// </param>
    /// <returns>
    ///    Packed set of recIds of records in AlcoholDeclarationJournalTransBranch_RU table which have to be printed.
    /// </returns>
    public container parmBranchSet(container _packedSet = journalTransBranchSet.pack())
    {
        journalTransBranchSet = Set::create(_packedSet);
        return journalTransBranchSet.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintHeadAuthority</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Passes the parameter showing if to take Alcohol Authority Name on the first page from the head separate division.
    /// </summary>
    /// <param name="_printHeadAuthority">
    ///    Boolean parameter.
    /// </param>
    /// <returns>
    ///    Current value of parameter.
    /// </returns>
    public boolean parmPrintHeadAuthority(boolean _printHeadAuthority = printHeadAuthority)
    {
        printHeadAuthority = _printHeadAuthority;
        return printHeadAuthority;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareLicenseSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares the set with licenses which have to be printed on the second page of the alcohol declaration.
    /// </summary>
    private void prepareLicenseSet()
    {
        AlcoholLicenseTable_RU                      licenseTable;
        AlcoholLicenseRelTable_RU                   licenseRelTable;
        SetEnumerator                               se;
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranch;
        VendTable                                   vendTable;
        Branches_RU                                 branches;

        if (this.declarationType() != AlcoholDeclarationType_RU::Retail12)
        {
            while select RecId from licenseTable
                where licenseTable.FromDate     <= journalTableCaller.ToDate    // there should be date intersection
                   && licenseTable.ToDate       >= journalTableCaller.FromDate  // there should be date intersection
                   && licenseTable.ActivityType == this.activityType()
            exists join licenseRelTable
                where licenseRelTable.Party == companyInfo.RecId
                   && licenseRelTable.LicenseSeriesNum == licenseTable.LicenseSeriesNum
            {
                licenseSet.add(licenseTable.RecId);
            }

            se = journalTransBranchSet.getEnumerator();

            while (se.moveNext())
            {
                journalTransBranch = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());

                while select RecId from licenseTable
                    where licenseTable.FromDate     <= journalTableCaller.ToDate    // there should be date intersection
                       && licenseTable.ToDate       >= journalTableCaller.FromDate  // there should be date intersection
                       && licenseTable.ActivityType == this.activityType()
                exists join licenseRelTable
                    where licenseRelTable.LicenseSeriesNum       == licenseTable.LicenseSeriesNum
                exists join vendTable
                    where vendTable.Party == licenseRelTable.Party
                exists join branches
                    where branches.VendAccount == vendTable.AccountNum
                       && branches.BranchId    == journalTransBranch.BranchId
                {
                    licenseSet.add(licenseTable.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBranchMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the data related to the one branch on the movement sheet.
    /// </summary>
    /// <param name="_branchId">
    ///    The id of the separate division, for which the data have to be printed.
    /// </param>
    /// <param name="_header">
    ///    Text which has to be printed in the header of the section.
    /// </param>
    protected void printBranchMovement(BranchId_RU    _branchId = '',
                                       str            _header = '')
    {
        AlcoholDeclarationTransMovement_RU          declarationTrans,
                                                    declarationTransGroupType;

        lineNum++;
        text        = _header;
        totalArray  = null;
        insertX     = false;
        this.execute(Totallinemovement);

        while select declarationTransGroupType
            group by AlcoholProductionTypeId
            where (declarationTransGroupType.BranchId  == _branchId || ! _branchId)
                && declarationTransGroupType.JournalId == journalId
                && declarationTransGroupType.AlcoholDeclarationType == this.declarationType()
        {
            totalByTypeArray = new ArrayExtend_RU(Types::Real, this.movementColQty() - this.movementTextColQty());

            if (_branchId)
            {
                insertX = false;

                while select declarationTrans
                    order by AlcoholProductionTypeId, ManufacturerId
                    where declarationTrans.JournalId                == journalId
                       && declarationTrans.AlcoholDeclarationType   == this.declarationType()
                       && declarationTrans.BranchId                 == _branchId
                       && declarationTrans.AlcoholProductionTypeId  == declarationTransGroupType.AlcoholProductionTypeId
                {
                    lineNum++;
                    this.insertBodyLineMovement(declarationTrans);
                }
            }
            else
            {
                insertX = (   this.declarationType() == AlcoholDeclarationType_RU::Wholesale5
                           || this.declarationType() == AlcoholDeclarationType_RU::Retail11);

                while select sum(PeriodStartQty),  sum(ManufacturerPurchQty), sum(WholesalePurchQty), sum(ImportPurchQty),
                             sum(TotalPurchQty),   sum(PurchReturnQty),       sum(OtherRecieptQty),   sum(InternalTransferReceiptQty),
                             sum(TotalReceiptQty), sum(WholesaleSalesQty),    sum(RetailSalesQty),    sum(ExportSalesQty),
                             sum(TotalSalesQty),   sum(OtherIssueQty),        sum(SalesReturnQty),    sum(InternalTransferIssueQty),
                             sum(TotalIssueQty),   sum(PeriodEndQty) from declarationTrans
                    group by AlcoholProductionTypeId, ManufacturerId
                    where declarationTrans.JournalId                == journalId
                       && declarationTrans.AlcoholDeclarationType   == this.declarationType()
                       && declarationTrans.AlcoholProductionTypeId  == declarationTransGroupType.AlcoholProductionTypeId
                {
                    lineNum++;
                    this.insertBodyLineMovement(declarationTrans);
                }
            }

            lineNum++;

            text        = strfmt("@SYS4002868", declarationTransGroupType.AlcoholProductionTypeId);
            totalArray  = totalByTypeArray;
            insertX     = _branchId ? false : (   this.declarationType() == AlcoholDeclarationType_RU::Wholesale5
                                               || this.declarationType() == AlcoholDeclarationType_RU::Retail11);
            this.execute(Totallinemovement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printBranchReceiptIssue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the data related to the one branch on the receipt/issue sheet.
    /// </summary>
    /// <param name="_declarationTransType">
    ///    The type of the records to print (receipt or issue).
    /// </param>
    /// <param name="_branchId">
    ///    The id of the separate division, for which the data have to be printed.
    /// </param>
    /// <param name="_header">
    ///    Text which has to be printed in the header of the section.
    /// </param>
    protected void printBranchReceiptIssue(AlcoholDeclarationTransType_RU   _declarationTransType,
                                           BranchId_RU                      _branchId = '',
                                           str                              _header = '')
    {
        AlcoholDeclarationTrans_RU                  declarationTrans,
                                                    declarationTransGroupType,
                                                    declarationTransGroupManufacturer;

        lineNum++;
        text        = _header;
        totalArray  = null;
        this.execute(Totallinereceiptissue);

        while select declarationTransGroupType
            group by AlcoholProductionTypeId
            where (declarationTransGroupType.BranchId == _branchId || ! _branchId)
                && declarationTransGroupType.JournalId == journalId
                && declarationTransGroupType.AlcoholDeclarationType == this.declarationType()
                && declarationTransGroupType.Type     == _declarationTransType
        {
            totalByTypeArray = new ArrayExtend_RU(Types::Real, 1);

            while select declarationTransGroupManufacturer
                group by ManufacturerId
                where declarationTransGroupManufacturer.JournalId               == journalId
                   && declarationTransGroupManufacturer.AlcoholDeclarationType  == this.declarationType()
                   && (declarationTransGroupManufacturer.BranchId               == _branchId || ! _branchId)
                   && declarationTransGroupManufacturer.AlcoholProductionTypeId == declarationTransGroupType.AlcoholProductionTypeId
                   && declarationTransGroupManufacturer.Type                    == _declarationTransType
            {
                totalByManufacturerArray = new ArrayExtend_RU(Types::Real, 1);

                if (_branchId)
                {
                    while select declarationTrans
                        order by AlcoholProductionTypeId, ManufacturerId
                        where declarationTrans.JournalId                == journalId
                           && declarationTrans.AlcoholDeclarationType   == this.declarationType()
                           && (declarationTrans.BranchId                == _branchId)
                           && declarationTrans.AlcoholProductionTypeId  == declarationTransGroupType.AlcoholProductionTypeId
                           && declarationTrans.ManufacturerId           == declarationTransGroupManufacturer.ManufacturerId
                           && declarationTrans.Type                     == _declarationTransType
                    {
                        lineNum++;
                        this.insertBodyLineReceiptIssue(declarationTrans);
                    }
                }
                else
                {
                    while select sum(Qty) from declarationTrans
                        group by AlcoholProductionTypeId, ManufacturerId, CustVend, CustVendAC, LicenseSeriesNum, TransDate,
                                 InvoiceId, InventGTDId, IsReturn, Type, NotificationNum, NotificationDate, NotificationVolume
                        where declarationTrans.JournalId                == journalId
                           && declarationTrans.AlcoholDeclarationType   == this.declarationType()
                           && declarationTrans.AlcoholProductionTypeId  == declarationTransGroupType.AlcoholProductionTypeId
                           && declarationTrans.ManufacturerId           == declarationTransGroupManufacturer.ManufacturerId
                           && declarationTrans.Type                     == _declarationTransType
                    {
                        lineNum++;
                        this.insertBodyLineReceiptIssue(declarationTrans);
                    }
                }

                lineNum++;

                text = strfmt("@SYS4002872", declarationTransGroupType.AlcoholProductionTypeId, declarationTransGroupManufacturer.ManufacturerId);
                totalArray = totalByManufacturerArray;
                this.execute(Totallinereceiptissue);
            }

            lineNum++;

            text = strfmt("@SYS4002868", declarationTransGroupType.AlcoholProductionTypeId);
            totalArray = totalByTypeArray;
            this.execute(Totallinereceiptissue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptIssueColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of rows on the sheet with receipt and issue data.
    /// </summary>
    /// <returns>
    ///    Quantity of rows on the sheet with receipt and issue data.
    /// </returns>
    protected int receiptIssueColQty()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns name of the working copy for report.
    /// </summary>
    /// <returns>
    ///    Name of the working copy for report.
    /// </returns>
    protected Filename templateName()
    {
        throw error(strFmt("@SYS18885", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the approximate quantity of the cells to be filled in the document to use it in the progress bar.
    /// </summary>
    /// <returns>
    /// The approximate quantity of the cells to be filled in the document.
    /// </returns>
    protected Counter totalCells()
    {
        return journalTransBranchSet.elements() * 200;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer     version = conpeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion:
                [version, printTotalByCompany] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an appropriate object of <c>AlcoholDeclarationOXML_RU</c> hierarchy.
    /// </summary>
    /// <param name="_common">
    ///    The common variable which contains alcohol declaration type which has to be printed.
    /// </param>
    /// <returns>
    ///    The object of the appropriate <c>AlcoholDeclarationOXML_RU</c> child class.
    /// </returns>
    public static AlcoholDeclarationOXML_RU construct(Common    _common)
    {
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranch;
        AlcoholDailyJournalTable_RU                 dailyJournalTable;
        AlcoholDeclarationType_RU                   alcoholDeclarationType;
        boolean                                     isDaily = false;

        switch (_common.TableId)
        {
            case tablenum(AlcoholDeclarationJournalTransBranch_RU) :
                 journalTransBranch     = _common;
                 alcoholDeclarationType = journalTransBranch.AlcoholDeclarationType;
                 break;

            case tablenum(AlcoholDailyJournalTable_RU) :
                 dailyJournalTable      = _common;
                 alcoholDeclarationType = dailyJournalTable.AlcoholDeclarationType;
                 isDaily = true;
                 break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        switch (alcoholDeclarationType)
        {
            case AlcoholDeclarationType_RU::Wholesale5:
                return new AlcoholDeclarationOXML5_RU(_common);

            case AlcoholDeclarationType_RU::Wholesale6:
                return new AlcoholDeclarationOXML6_RU(_common);

            case AlcoholDeclarationType_RU::Wholesale7:
                return new AlcoholDeclarationOXML7_RU(_common);

            case AlcoholDeclarationType_RU::Retail11:
                if (isDaily)
                {
                    return new AlcoholDeclarationOXML11Daily_RU(_common);
                }
                else
                {
                    return new AlcoholDeclarationOXML11_RU(_common);
                }

            case AlcoholDeclarationType_RU::Retail12:
                if (isDaily)
                {
                    return new AlcoholDeclarationOXML12Daily_RU(_common);
                }
                else
                {
                    return new AlcoholDeclarationOXML12_RU(_common);
                }

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDailyJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the daily journal table which is passed as a parameter.
    /// </summary>
    /// <param name="_dailyJournalTable">
    ///    The <c>AlcoholDailyJournalTable_RU</c> variable which is being printed.
    /// </param>
    public static void printDailyJournal(AlcoholDailyJournalTable_RU        _dailyJournalTable)

    {
        AlcoholDeclarationOXML_RU       runClass;
        Set                             set = new Set(Types::Int64);

        runClass = AlcoholDeclarationOXML_RU::construct(_dailyJournalTable);

        if (runClass.prompt())
        {
            set.add(_dailyJournalTable.RecId);
            runClass.parmBranchSet(set.pack());
            runClass.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournalTransBranchSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the declaration for the number of branches which are passed as a parameter.
    /// </summary>
    /// <param name="_journalTrans">
    ///    The <c>AlcoholDeclarationJournalTrans_RU</c> variable to which the branches belong.
    /// </param>
    /// <param name="_packedSet">
    ///    Packed set of recIds of records in <c>AlcoholDeclarationJournalTransBranch_RU</c> table which have to be printed.
    /// </param>
    /// <param name="_groupByAlcoholAuthorityId">
    ///    Shows whether to group printed data by <c>AlcoholAuthorityId</c> and print separate report for each authority, or not.
    /// </param>
    /// <param name="_printHeadAuthority">
    ///    Shows whether to print alcohol regulation authority from the head separate division.
    /// </param>
    public static void printJournalTransBranchSet(AlcoholDeclarationJournalTrans_RU     _journalTrans,
                                                  container                             _packedSet,
                                                  boolean                               _groupByAlcoholAuthorityId = false,
                                                  boolean                               _printHeadAuthority        = false)
    {
        AlcoholDeclarationOXML_RU                   runClass;
        Set                                         markedSet, printSet;
        SetEnumerator                               se;
        TmpFrmVirtual                               tmpFrmVirtual, tmpFrmVirtualGroup;
        AlcoholDeclarationJournalTransBranch_RU     journalTransBranchLocal;

        markedSet = Set::create(_packedSet);
        se = markedSet.getEnumerator();

        while (se.moveNext())
        {
            journalTransBranchLocal = AlcoholDeclarationJournalTransBranch_RU::findRecId(se.current());

            if (!journalTransBranchLocal.Approved)
            {
                delete_from tmpFrmVirtual;
                throw error("@SYS39365");
            }

            if (_groupByAlcoholAuthorityId)
            {
                tmpFrmVirtual.clear();
                tmpFrmVirtual.RecordNo = journalTransBranchLocal.RecId;
                tmpFrmVirtual.Id       = Branches_RU::find(journalTransBranchLocal.BranchId).AlcoholRegulationAuthorityId;
                tmpFrmVirtual.insert();
            }
        }

        runClass = AlcoholDeclarationOXML_RU::construct(journalTransBranchLocal);
        runClass.parmPrintHeadAuthority(_printHeadAuthority);

        if (runClass.prompt())
        {
            if (_groupByAlcoholAuthorityId)
            {
                tmpFrmVirtualGroup.setTmpData(tmpFrmVirtual);

                while select tmpFrmVirtualGroup
                    group by Id
                {
                    printSet = new Set(Types::Int64);
                    while select tmpFrmVirtual
                        where tmpFrmVirtual.Id == tmpFrmVirtualGroup.Id
                    {
                        printSet.add(tmpFrmVirtual.RecordNo);
                    }
                    runClass.parmBranchSet(printSet.pack());
                    runClass.runOperation();
                }
            }
            else
            {
                runClass.parmBranchSet(_packedSet);
                runClass.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>