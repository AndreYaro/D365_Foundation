<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankLGActionTypeRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankLGActionTypeRequest</c> class is used to do the request action for the letter of guarantee.
/// </summary>
class BankLGActionTypeRequest extends BankLGActionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doAction</Name>
				<Source><![CDATA[
        protected void doAction()
    {
        ttsbegin;
        // Create new LG
        bankLGGuarantee.OriginType                          = actionParms.parmOriginType();
        bankLGGuarantee.Number                              = NumberSeq::newGetNum(BankParameters::numRefBankLGNumber()).num();
        bankLGGuarantee.RequestReason                       = actionParms.parmPurposeCodeId();
        bankLGGuarantee.BankAccountCurrencyGuaranteeAmount  = actionParms.parmValueCur();
        bankLGGuarantee.ExpiryDateTime                      = actionParms.parmExpiryDateTime();
        bankLGGuarantee.updateStatus(actionParms.getActionType());
        bankLGGuarantee.insert();

        // Link the origin document to this new LG
        this.linkOriginDocumentToLG(
            bankLGGuarantee.OriginType,
            actionParms.parmOriginNum(),
            bankLGGuarantee.RecId);

        // Create request action
        bankLGAction.ActionNum                          = NumberSeq::newGetNum(BankParameters::numRefBankLGTransNum()).num();
        bankLGAction.RequestAction                      = BankLGRequestActionType::Request;
        bankLGAction.ExecutionAction                    = BankLGExecutionActionType::None;
        bankLGAction.RequestDateTime                    = DateTimeUtil::getSystemDateTime();
        bankLGAction.Guarantee                          = bankLGGuarantee.RecId;
        bankLGAction.BankAccountCurrencyGuaranteeAmount = bankLGGuarantee.BankAccountCurrencyGuaranteeAmount;
        bankLGAction.insert();

        // Update the last action and default dimension of LG
        bankLGGuarantee.DefaultDimension    = bankLGGuarantee.getOriginDocument().DefaultDimension;
        bankLGGuarantee.CurrentAction       = bankLGAction.RecId;
        bankLGGuarantee.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkOriginDocumentToLG</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the origin document to build the relation link between the origin document and a
    ///    <c>BankLG</c> record.
    /// </summary>
    /// <param name="_originType">
    ///    The type of the origin document.
    /// </param>
    /// <param name="_originNum">
    ///    The document ID of the origin document.
    /// </param>
    /// <param name="_bankLGRefRecId">
    ///    The record ID of a <c>BankLG</c> record.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    There is already a letter of guarantee for the origin document.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The origin document cannot be found.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void linkOriginDocumentToLG(
        BankLGOriginType    _originType,
        BankLGOriginNum     _originNum,
        BankLGRefRecId      _bankLGRefRecId)
    {
        BankLGGuaranteeRelationMap  bankLGGuaranteeRelationMap;
        BankLGDocumentMap           bankLGDocumentMap = BankLGDocumentMap::find(_originType, _originNum, true);

        if (bankLGDocumentMap.RecId)
        {
            switch(bankLGDocumentMap.BankLGDocumentMap::parmBankDocumentType())
            {
                case BankDocumentType::LetterOfGuarantee:
                    bankLGGuaranteeRelationMap = bankLGDocumentMap.BankLGDocumentMap::bankLGGuaranteeRelationMap();

                    if (bankLGGuaranteeRelationMap.RecId && bankLGGuaranteeRelationMap.Guarantee)
                    {
                        // The origin document already have a LG.
                        throw error("@SYS317962");
                    }
                    else
                    {
                        ttsBegin;
                        bankLGGuaranteeRelationMap.DocumentId  = _originNum;
                        bankLGGuaranteeRelationMap.Guarantee   = _bankLGRefRecId;
                        bankLGGuaranteeRelationMap.insert();
                        ttsCommit;
                    }
                    break;
                default:
                    // The bank document type of origin document is not marked as Letter of Guarantee.
                    throw error("@SYS317940");
                    break;
            }
        }
        else
        {
            // The origin doucment does not exist.
            throw error("@SYS317961");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateActionParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the action parameters.
    /// </summary>
    /// <returns>
    ///    true if all parameters are valid; otherwise, false.
    /// </returns>
    protected boolean validateActionParms()
    {
        boolean ret = super();

        if (ret)
        {
            if (actionParms.parmOriginNum()         == ''
                || actionParms.parmPurposeCodeId()  == '')
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>