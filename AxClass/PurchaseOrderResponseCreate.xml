<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchaseOrderResponseCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the prepopulation of the vendor response to a purchase order.
/// </summary>
public class PurchaseOrderResponseCreate
{
    private readonly TransDate documentDate;
    private readonly PurchTable purchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the response document.
    /// </summary>
    /// <returns>RecId of the created header record.</returns>
    public PurchaseOrderResponseHeaderRecId run()
    {
        ttsbegin;
        var responseHeader = this.createPurchaseOrderResponseHeader();
        this.createPurchaseOrderResponseLines(responseHeader);
        this.attachDocumentToPurchaseOrderResponseHeader(responseHeader);
        this.attachDocumentToPurchaseOrderResponseLines(responseHeader.RecId);
        this.updateEarliestDeliveryDate(responseHeader.RecId);
        ttscommit;

        return responseHeader.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderResponseHeader</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseHeader createPurchaseOrderResponseHeader()
    {
        PurchaseOrderResponseHeader purchaseOrderResponseHeader =
            purchTable.responseHeader(true);

        if (purchaseOrderResponseHeader)
        {
            purchaseOrderResponseHeader.archiveExistingAndCreateNewVersion(PurchTableVersion::findLatest(purchTable.PurchId, purchTable.DataAreaId).RecId);
            this.assignHeaderValues(purchaseOrderResponseHeader);
            purchaseOrderResponseHeader.update();
        }
        else
        {
            this.assignHeaderValues(purchaseOrderResponseHeader);
            purchaseOrderResponseHeader.insert();
        }

        return purchaseOrderResponseHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignHeaderValues</Name>
				<Source><![CDATA[
    private void assignHeaderValues(PurchaseOrderResponseHeader _purchaseOrderResponseHeader)
    {
        _purchaseOrderResponseHeader.initFromPurchTableLastVersion(purchTable);
        _purchaseOrderResponseHeader.DocumentDate = documentDate;
        _purchaseOrderResponseHeader.ConsumptionState = ConsumptionState::NotConsumed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPurchaseOrderResponseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase order response lines based on the given purchase order response.
    /// </summary>
    /// <param name = "_responseHeader">
    /// The purchase order response.
    /// </param>
    protected void createPurchaseOrderResponseLines(PurchaseOrderResponseHeader _responseHeader)
    {
        _responseHeader.deleteExistingLines();

        RecordInsertList orderResponseLineList = new RecordInsertList(tableNum(PurchaseOrderResponseLine));

        PurchLine purchLine;
        PurchaseOrderResponseLine purchaseOrderResponseLine;

        while select purchLine
            where purchLine.PurchId == purchTable.PurchId
               && purchLine.LineDeliveryType != LineDeliveryType::OrderLineWithMultipleDeliveries
               && purchLine.IsDeleted == NoYes::No
        {
            purchaseOrderResponseLine.clear();
            purchaseOrderResponseLine.initFromPurchLineLastVersion(purchLine);
            purchaseOrderResponseLine.PurchaseOrderResponseHeader = _responseHeader.RecId;
            purchaseOrderResponseLine.ConsumptionState = ConsumptionState::NotConsumed;
            orderResponseLineList.add(purchaseOrderResponseLine);
        }

        orderResponseLineList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEarliestDeliveryDate</Name>
				<Source><![CDATA[
    private void updateEarliestDeliveryDate(PurchaseOrderResponseHeaderRecId _responseHeaderRecId)
    {
        PurchaseOrderResponseLine purchaseOrderResponseLine;

        select firstonly purchaseOrderResponseLine
            order by DeliveryDate
            where purchaseOrderResponseLine.PurchaseOrderResponseHeader == _responseHeaderRecId;

        PurchaseOrderResponseHeader purchaseOrderResponseHeader = PurchaseOrderResponseHeader::find(_responseHeaderRecId, true);
        purchaseOrderResponseHeader.EarliestDlvDate = purchaseOrderResponseLine.DeliveryDate;
        purchaseOrderResponseHeader.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>PurchaseOrderResponseCreate</c> class.
    /// </summary>
    /// <param name = "_purchTable">A <c>PurchTable</c> buffer.</param>
    /// <param name = "_requestDocumentDate">Document date of request sent.</param>
    /// <returns>An instance of <c>PurchaseOrderResponseCreate</c> class.</returns>
    public static PurchaseOrderResponseCreate newFromPurchTable(PurchTable _purchTable, TransDate _requestDocumentDate)
    {
        PurchaseOrderResponseCreate orderResponseCreate =
            new PurchaseOrderResponseCreate(_purchTable, _requestDocumentDate);

        return orderResponseCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(PurchTable _purchTable, TransDate _documentDate)
    {
        this.purchTable = _purchTable;
        this.documentDate = _documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachDocumentToPurchaseOrderResponseHeader</Name>
				<Source><![CDATA[
    private void attachDocumentToPurchaseOrderResponseHeader(PurchaseOrderResponseHeader _responseHeader)
    {
        _responseHeader.deleteExistingAttachedDocument();

        DocuRef docuRef, docuRefToInsert;
        RecordInsertList docuRefForResponseHeaderList = new RecordInsertList(tableNum(Docuref));

        while select docuRef
            where docuRef.RefTableId == purchTable.TableId
                && docuRef.RefRecId == purchTable.RecId
                && docuRef.RefCompanyId == purchTable.DataAreaId
                && docuRef.Restriction == DocuRestriction::External
        {
            docuRefToInsert.initDocuRef(_responseHeader.TableId, _responseHeader.RecId, docuRef);
            docuRefForResponseHeaderList.add(docuRefToInsert);
        }
        docuRefForResponseHeaderList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>attachDocumentToPurchaseOrderResponseLines</Name>
				<Source><![CDATA[
    private void attachDocumentToPurchaseOrderResponseLines(PurchaseOrderResponseHeaderRecId _responseHeaderRecId)
    {
        DocuRef docuRef, docuRefToInsert;
        PurchaseOrderResponseLine purchaseOrderResponseLine;
        RecordInsertList docuRefForResponseLineList = new RecordInsertList(tableNum(Docuref));

        while select docuRef
            join purchaseOrderResponseLine
                where purchaseOrderResponseLine.PurchaseOrderResponseHeader == _responseHeaderRecId
                    && docuRef.RefTableId == tableNum(PurchLine)
                    && docuRef.RefRecId == purchaseOrderResponseLine.PurchLine
                    && docuRef.RefCompanyId == purchaseOrderResponseLine.DataAreaId
                    && docuRef.Restriction == DocuRestriction::External
        {
            docuRefToInsert.initDocuRef(purchaseOrderResponseLine.TableId, purchaseOrderResponseLine.RecId, docuRef);
            docuRefForResponseLineList.add(docuRefToInsert);
        }
        docuRefForResponseLineList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>