<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchBaileeController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchBaileeController</c> class is the helper class for the associated SRS Report.
/// </summary>
class PurchBaileeController extends SrsPrintMgmtController implements BatchRetryable
{
    PrintCopyOriginal           printCopyOriginal;
    PurchInvoiceJournalPrint    purchInvoiceJournalPrint;
    RecordSortedList            journalList;
    VendInvoiceJour             vendInvoiceJour;

    PurchBaileeContract         purchBaileeContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
        protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            PrintMgmtHierarchyType::Purch,
            PrintMgmtNodeType::PurchTable,
            PrintMgmtDocumentType::PurchaseOrderBailee);

        printMgmtReportRun.parmReportRunController(this);

        if (purchInvoiceJournalPrint)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            printMgmtReportRun.parmForcePrintJobSettings(!purchInvoiceJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            //forcePrintJobSettings is reversal to usePrintManagement
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads instances of the <c>PrintMgmtPrintSettingDetail</c> class that are used for printing the
    ///    report.
    /// </summary>
    /// <param name="_jourTable">
    ///    The journal table that is currently being printed.
    /// </param>
    /// <param name="_transTable">
    ///    The table to which print management information has been related.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID that should be used to retrieve footer text.
    /// </param>
    /// <param name="_documentKeyValue">
    ///    A human readable value that uniquely identifies the document to be printed.
    /// </param>
    /// <remarks>
    ///    Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    ///    instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    ///    iterate over the print settings that have been found. The <c>getCurrentPrintSetting</c> method will
    ///    then return the current instance of the <c>PrintMgmtPrintSettingDetail</c> class which can be used
    ///    to retrieve printer settings for the current copy of the report.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        boolean isValidReference(Common _referencedTableBuffer)
        {
            PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();

            nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::PurchTable));
            nodeInstance.parmReferencedTableBuffer(_referencedTableBuffer);

            return nodeInstance.isValidReference();
        }

        void setSettingDetail(PrintMgmtDocInstanceType _type, SRSPrintDestinationSettings _defaultSettings)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();

            PrintMgmtReportFormat       printMgmtReportFormat;

            printMgmtReportFormat = PrintMgmtReportFormat::findSystem(PrintMgmtDocumentType::PurchaseOrderBailee);

            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);

            printSettingDetail.parmType(_type);

            printSettingDetail.parmInstanceName(enum2str(_type));

            // Since this will be reported to the screen, one copy is the only thing that makes sense
            printSettingDetail.parmNumberOfCopies(1);

            printSettingDetail.parmPrintJobSettings(_defaultSettings);

            printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
        }

        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint && isValidReference(_transTable))
        {
            // Print an original
            printMgmtReportRun.load(_jourTable, _transTable, _languageId, _documentKeyValue);
        }
        else if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            // Print a copy
            setSettingDetail(PrintMgmtDocInstanceType::Copy, printMgmtReportRun.parmDefaultCopyPrintJobSettings());
        }
        else
        {
            // Print an original.  We also default to print one original when we are trying to
            // print using Print Mgmt information, but don't have a valid table reference.
            // This covers the reprint case where the original transaction record may not be present.
            setSettingDetail(PrintMgmtDocInstanceType::Original, printMgmtReportRun.parmDefaultOriginalPrintJobSettings());
        }

        if (!printMgmtReportRun.more())
        {
            checkFailed("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
        protected void runPrintMgmt()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        if (!journalList)
        {
            throw error("@SYS26348");
        }
        if (SysDictClass::isEqualOrSuperclass(classIdGet(args.caller()), classNum(FormletterJournalPrint)))
        {
            purchInvoiceJournalPrint = args.caller();
        }

        while (journalList.next(vendInvoiceJour) && !this.parmCancelRun())
        {
            if (!vendInvoiceJour)
            {
                throw error("@SYS26348");
            }

            this.initPrintMgmtReportRun();

            this.loadPrintSettings(vendInvoiceJour, vendInvoiceJour.purchTable(), vendInvoiceJour.LanguageId);
            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        PurchBaileeController   reportController = new PurchBaileeController();

        if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::PurchaseOrderBailee, _args))
        {
            return;
        }

        reportController.parmArgs(_args);
        reportController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderBailee).getDefaultReportFormat());
        reportController.parmShowDialog(false);
        reportController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>