<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimUpdatePreventionTriggerBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimUpdatePreventionTriggerBuilder</c> class is responsible for preventing the table <c>InventDim</c> from updating its dimensions value.
/// </summary>
final internal class InventDimUpdatePreventionTriggerBuilder extends ApplicationSQLObjects
{
    public static const str InventDimUpdatePreventionTriggerName = 'INVENTDIMUPDATEPREVENTIONTRIGGER';
    private static const str InsertedTableName = 'INSERTED';
    private static const str DeletedTableName = 'DELETED';

    private str inventDimTableName;
    private str inventDimPartition;
    private str inventDimDataAreaId;
    private str inventDimRecId;
    private str inventDimInventDimId;
    private str inventDimConfigId;
    private str inventDimInventBatchId;
    private str inventDimInventColorId;
    private str inventDimInventLocationId;
    private str inventDimInventSerialId;
    private str inventDimInventSiteId;
    private str inventDimInventSizeId;
    private str inventDimInventStatusId;
    private str inventDimInventStyleId;
    private str inventDimInventVersionId;
    private str inventDimLicensePlateId;
    private str inventDimWMSLocationId;
    private str inventDimWMSPalletId;
    private str inventDimInventGtdId_RU;
    private str inventDimInventOwnerId_RU;
    private str inventDimInventProfileId_RU;
    private str inventDimInventDimension1;
    private str inventDimInventDimension2;
    private str inventDimInventDimension3;
    private str inventDimInventDimension4;
    private str inventDimInventDimension5;
    private str inventDimInventDimension6;
    private str inventDimInventDimension7;
    private str inventDimInventDimension8;
    private str inventDimInventDimension9;
    private str inventDimInventDimension10;
    private str inventDimInventDimension11;
    private str inventDimInventDimension12;
    private str inventDimSha1HashHex;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTriggers</Name>
				<Source><![CDATA[
    protected boolean createTriggers()
    {
        this.dropTrigger(InventDimUpdatePreventionTriggerBuilder::InventDimUpdatePreventionTriggerName);

        boolean isSuccessful;

        var logger = InventInstrumentationLogger::createLogger(classStr(InventDimUpdatePreventionTriggerBuilder));
        var activity = logger.activity(methodStr(InventDimUpdatePreventionTriggerBuilder, createTriggers));
        using (var activityContext = logger.activityContext(activity))
        {
            if (InventSumInventDimDBTriggerSkipCreationFlight::instance().isEnabled())
            {
                var helper = InventSumInventDimTriggerSQLStatementHelper::construct();

                isSuccessful = helper.existTrigger(InventDimUpdatePreventionTriggerBuilder::InventDimUpdatePreventionTriggerName)
                            || this.createInventDimUpdatePreventionTrigger();
            }
            else
            {
                isSuccessful =  this.createInventDimUpdatePreventionTrigger();
            }
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventDimUpdatePreventionTrigger</Name>
				<Source><![CDATA[
    private boolean createInventDimUpdatePreventionTrigger()
    {
        // Drop the trigger.
        boolean isSuccessful = this.dropTrigger(InventDimUpdatePreventionTriggerBuilder::InventDimUpdatePreventionTriggerName);

        if (isSuccessful)
        {
            SysSQLStatementText sqlStatementText = this.getInventDimUpdatePreventionTriggerSqlStmt();
            isSuccessful = this.executeSQLStatement(sqlStatementText);
        }

        return isSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimUpdatePreventionTriggerSqlStmt</Name>
				<Source><![CDATA[
    private SysSQLStatementText getInventDimUpdatePreventionTriggerSqlStmt()
    {
        /* 
        CREATE TRIGGER INVENTDIMUPDATEPREVENTIONTRIGGER ON dbo.INVENTDIM
        AFTER UPDATE
        AS
        BEGIN
            SET COUNT ON;
            IF (UPDATE(INVENTDIM) OR UPDATE(CONFIGID) OR UPDATE(INVENTSIZEID) OR UPDATE(INVENTCOLORID) OR UPDATE(INVENTSTYLEID) OR UPDATE(INVENTVERSIONID) 
            OR UPDATE(INVENTSITEID) OR UPDATE(INVENTLOCATIONID) OR UPDATE(INVENTBATCHID) OR UPDATE(WMSLOCATIONID) OR UPDATE(WMSPALLETID) 
            OR UPDATE(LICENSEPLATEID) OR UPDATE(INVENTSTATUSID) OR UPDATE(INVENTSERIALID) OR UPDATE(INVENTDIMENSION1) OR UPDATE(INVENTDIMENSION2) 
            OR UPDATE(INVENTDIMENSION3) OR UPDATE(INVENTDIMENSION4) OR UPDATE(INVENTDIMENSION5) OR UPDATE(INVENTDIMENSION6) OR UPDATE(INVENTDIMENSION7) 
            OR UPDATE(INVENTDIMENSION8) OR UPDATE(INVENTDIMENSION9) OR UPDATE(INVENTDIMENSION10) OR UPDATE(INVENTDIMENSION11) OR UPDATE(INVENTDIMENSION12) 
            OR UPDATE(INVENTGTDID_RU) OR UPDATE(INVENTPROFILEID_RU) OR UPDATE(INVENTOWNERID_RU))
            BEGIN
                IF 0 = (select count(*) from inserted) return;
                if EXISTS (SELECT TOP 1 RECID FROM INSERTED
                    WHERE EXISTS (SELECT 'x' FROM DELETED WHERE DELETED.RECID = INSERTED.RECID AND
                    DELETED.PARTITION = INSERTED.PARTITION AND
                    DELETED.DATAAREAID = INSERTED.DATAAREAID AND
                    DELETED.SHA1HASHHEX = INSERTED.SHA1HASHHEX AND
                    (DELETED.INVENTDIMID <> INSERTED.INVENTDIMID OR
                    DELETED.INVENTDIMENSION1 <> INSERTED.INVENTDIMENSION1 OR
                    DELETED.INVENTDIMENSION2 <> INSERTED.INVENTDIMENSION2 OR
                    DELETED.INVENTDIMENSION3 <> INSERTED.INVENTDIMENSION3 OR
                    DELETED.INVENTDIMENSION4 <> INSERTED.INVENTDIMENSION4 OR
                    DELETED.INVENTDIMENSION5 <> INSERTED.INVENTDIMENSION5 OR
                    DELETED.INVENTDIMENSION6 <> INSERTED.INVENTDIMENSION6 OR
                    DELETED.INVENTDIMENSION7 <> INSERTED.INVENTDIMENSION7 OR
                    DELETED.INVENTDIMENSION8 <> INSERTED.INVENTDIMENSION8 OR
                    DELETED.INVENTDIMENSION9 <> INSERTED.INVENTDIMENSION9 OR
                    DELETED.INVENTDIMENSION10 <> INSERTED.INVENTDIMENSION10 OR
                    DELETED.INVENTDIMENSION11 <> INSERTED.INVENTDIMENSION11 OR
                    DELETED.INVENTDIMENSION12 <> INSERTED.INVENTDIMENSION12 OR
                    DELETED.INVENTGTDID_RU <> INSERTED.INVENTGTDID_RU OR
                    DELETED.INVENTPROFILEID_RU <> INSERTED.INVENTPROFILEID_RU OR
                    DELETED.INVENTOWNERID_RU <> INSERTED.INVENTOWNERID_RU OR
                    DELETED.CONFIGID <> INSERTED.CONFIGID OR
                    DELETED.INVENTSIZEID <> INSERTED.INVENTSIZEID OR
                    DELETED.INVENTCOLORID <> INSERTED.INVENTCOLORID OR
                    DELETED.INVENTSTYLEID <> INSERTED.INVENTSTYLEID OR
                    DELETED.INVENTVERSIONID <> INSERTED.INVENTVERSIONID OR
                    DELETED.WMSLOCATIONID <> INSERTED.WMSLOCATIONID OR
                    DELETED.WMSPALLETID <> INSERTED.WMSPALLETID OR
                    DELETED.LICENSEPLATEID <> INSERTED.LICENSEPLATEID OR
                    DELETED.INVENTSTATUSID <> INSERTED.INVENTSTATUSID OR
                    DELETED.INVENTSITEID <> INSERTED.INVENTSITEID OR
                    DELETED.INVENTLOCATIONID <> INSERTED.INVENTLOCATIONID OR
                    DELETED.INVENTBATCHID <> INSERTED.INVENTBATCHID OR
                    DELETED.INVENTSERIALID <> INSERTED.INVENTSERIALID)))

                    BEGIN
                        ROLLBACK TRANSACTION
                        RAISERROR('InventDim table can not be ever updated. Only inserts are allowed into the table. If you believe you have valid scenario for updating inventory dimension please contact Microsoft Support.', 16, 1)
                    END
            END
            SET NOCOUNT OFF;
        END 
    */ 
        SysSQLStatementText sqlStmt = 'CREATE TRIGGER ' + InventDimUpdatePreventionTriggerBuilder::InventDimUpdatePreventionTriggerName + ' ON ' + inventDimTableName + '\n';
        sqlStmt += 'AFTER UPDATE\n';
        sqlStmt += 'AS\n';
        sqlStmt += 'BEGIN\n';

        sqlStmt += ' SET NOCOUNT ON;\n';
        sqlStmt += ' IF (UPDATE(INVENTDIMID) OR UPDATE(INVENTGTDID_RU) OR UPDATE(INVENTOWNERID_RU) OR UPDATE(INVENTPROFILEID_RU)';
        sqlStmt += ' OR UPDATE(CONFIGID) OR UPDATE(INVENTSIZEID) OR UPDATE(INVENTCOLORID) OR UPDATE(INVENTSTYLEID) OR UPDATE(WMSLOCATIONID)';
        sqlStmt += ' OR UPDATE(WMSPALLETID) OR UPDATE(LICENSEPLATEID) OR UPDATE(INVENTSTATUSID) OR UPDATE(INVENTSITEID) OR UPDATE(INVENTLOCATIONID)';
        sqlStmt += ' OR UPDATE(INVENTBATCHID) OR UPDATE(INVENTSERIALID) OR UPDATE(INVENTDIMENSION1) OR UPDATE(INVENTDIMENSION2) OR UPDATE(INVENTDIMENSION3)';
        sqlStmt += ' OR UPDATE(INVENTDIMENSION4) OR UPDATE(INVENTDIMENSION5) OR UPDATE(INVENTDIMENSION6) OR UPDATE(INVENTDIMENSION7) OR UPDATE(INVENTDIMENSION8)';
        sqlStmt += ' OR UPDATE(INVENTDIMENSION9) OR UPDATE(INVENTDIMENSION10) OR UPDATE(INVENTDIMENSION11) OR UPDATE(INVENTDIMENSION12))\n BEGIN\n';

        sqlStmt += 'IF 0 = (select count(*) from inserted) return;\n';
        sqlStmt += 'IF EXISTS (\n';
        sqlStmt += 'SELECT TOP 1 ' + inventDimRecId + ' FROM ' + InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '\n';

        sqlStmt += 'WHERE EXISTS (SELECT \'x\' FROM ' + InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '\n WHERE ';
        sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimRecId + ' = ' +
                   InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimRecId;

        sqlStmt += ' AND ' + InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimPartition + ' = ' +
                             InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimPartition;

        sqlStmt += ' AND ' + InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimDataAreaId + ' = ' +
                             InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimDataAreaId + '\n';

        sqlStmt += 'AND ' + InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimSha1HashHex + ' = ' +
                            InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimSha1HashHex + ' AND\n';
        sqlStmt += '(\n';

        sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimId + ' <> ' +
                   InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimId + ' OR \n';

        if (inventDimInventDimension1)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension1 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension1 + ' OR \n';
        }

        if (inventDimInventDimension2)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension2 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension2 + ' OR \n';
        }

        if (inventDimInventDimension3)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension3 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension3 + ' OR \n';
        }

        if (inventDimInventDimension4)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension4 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension4 + ' OR \n';
        }

        if (inventDimInventDimension5)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension5 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension5 + ' OR \n';
        }

        if (inventDimInventDimension6)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension6 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension6 + ' OR \n';
        }

        if (inventDimInventDimension7)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension7 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension7 + ' OR \n';
        }

        if (inventDimInventDimension8)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension8 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension8 + ' OR \n';
        }

        if (inventDimInventDimension9)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension9 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension9 + ' OR \n';
        }

        if (inventDimInventDimension10)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension10 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension10 + ' OR \n';
        }

        if (inventDimInventDimension11)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension11 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension11 + ' OR \n';
        }

        if (inventDimInventDimension12)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventDimension12 + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventDimension12 + ' OR \n';
        }

        if (inventDimInventGtdId_RU)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventGtdId_RU + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventGtdId_RU + ' OR \n';
        }

        if (inventDimInventOwnerId_RU)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventOwnerId_RU + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventOwnerId_RU + ' OR \n';
        }

        if (inventDimInventProfileId_RU)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventProfileId_RU + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventProfileId_RU + ' OR \n';
        }

        if (inventDimConfigId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimConfigId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimConfigId + ' OR \n';
        }

        if (inventDimInventSizeId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventSizeId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventSizeId + ' OR \n';
        }

        if (inventDimInventColorId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventColorId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventColorId + ' OR \n';
        }
        
        if (inventDimInventStyleId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventStyleId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventStyleId + ' OR \n';
        } 
        
        if (inventDimInventVersionId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventVersionId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventVersionId + ' OR \n';
        }

        if (inventDimWMSLocationId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimWMSLocationId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimWMSLocationId + ' OR \n';
        }

        if (inventDimWMSPalletId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimWMSPalletId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimWMSPalletId + ' OR \n';
        }

        if (inventDimLicensePlateId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimLicensePlateId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimLicensePlateId + ' OR \n';
        }

        if (inventDimInventStatusId)
        {
            sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventStatusId + ' <> ' +
                       InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventStatusId + ' OR \n';
        }

        sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventSiteId + ' <> ' +
                   InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventSiteId + ' OR \n';

        sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventLocationId + ' <> ' +
                   InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventLocationId + ' OR \n';

        sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventBatchId + ' <> ' +
                   InventDimUpdatePreventionTriggerBuilder::InsertedTableName + '.' + inventDimInventBatchId + ' OR \n';

        sqlStmt += InventDimUpdatePreventionTriggerBuilder::DeletedTableName + '.' + inventDimInventSerialId + ' <> ' +
                   InventDimUpdatePreventionTriggerBuilder::insertedTableName + '.' + inventDimInventSerialId + ')))\n';
    
        sqlStmt += '    BEGIN\n';
        sqlStmt += '    ROLLBACK TRANSACTION\n';
        sqlStmt += '    RAISERROR(\'';
        sqlStmt += 'InventDim table can not be ever updated. Only inserts are allowed into the table. If you believe you have valid scenario for updating inventory dimension please contact Microsoft Support.';
        sqlStmt += '\', 16, 1)';
        sqlStmt += '\n    END\n';

        sqlStmt += 'END\n';
        sqlStmt += 'SET NOCOUNT OFF;\n';

        sqlStmt += 'END\n';

        return sqlStmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var builder = InventDimUpdatePreventionTriggerBuilder::contruct();

        builder.createSqlObjects();
    }

]]></Source>
			</Method>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    public static InventDimUpdatePreventionTriggerBuilder contruct()
    {
        return new InventDimUpdatePreventionTriggerBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize(boolean _runOnSeparateUserConnection = false)
    {
        super(_runOnSeparateUserConnection);

        SysDictTable inventDimDictTable     = new SysDictTable(tableNum(InventDim));
        inventDimTableName                  = inventDimDictTable.name(DbBackend::Sql);
        inventDimPartition                  = inventDimDictTable.fieldObject(fieldNum(InventDim, Partition)).name(DbBackend::Native);
        inventDimDataAreaId                 = inventDimDictTable.fieldObject(fieldNum(InventDim, DataAreaId)).name(DbBackend::Native);
        inventDimRecId                      = inventDimDictTable.fieldObject(fieldNum(InventDim, RecId)).name(DbBackend::Native);
        inventDimInventDimId                = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimId)).name(DbBackend::Native);
        inventDimConfigId                   = inventDimDictTable.fieldObject(fieldNum(InventDim, Configid)).name(DbBackend::Native);
        inventDimInventBatchId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventBatchId)).name(DbBackend::Native);
        inventDimInventColorId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventColorId)).name(DbBackend::Native);
        inventDimInventLocationId           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventLocationId)).name(DbBackend::Native);
        inventDimInventSerialId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSerialId)).name(DbBackend::Native);
        inventDimInventSiteId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSiteId)).name(DbBackend::Native);
        inventDimInventSizeId               = inventDimDictTable.fieldObject(fieldNum(InventDim, InventSizeId)).name(DbBackend::Native);
        inventDimInventStatusId             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStatusId)).name(DbBackend::Native);
        inventDimInventStyleId              = inventDimDictTable.fieldObject(fieldNum(InventDim, InventStyleId)).name(DbBackend::Native);
        inventDimInventVersionId            = inventDimDictTable.fieldObject(fieldNum(InventDim, InventVersionId)).name(DbBackend::Native);
        inventDimLicensePlateId             = inventDimDictTable.fieldObject(fieldNum(InventDim, LicensePlateId)).name(DbBackend::Native);
        inventDimWMSLocationId              = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSLocationId)).name(DbBackend::Native);
        inventDimWMSPalletId                = inventDimDictTable.fieldObject(fieldNum(InventDim, wMSPalletId)).name(DbBackend::Native);
        inventDimInventGtdId_RU             = inventDimDictTable.fieldObject(fieldNum(InventDim, InventGtdId_RU)).name(DbBackend::Native);
        inventDimInventOwnerId_RU           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventOwnerId_RU)).name(DbBackend::Native);
        inventDimInventProfileId_RU         = inventDimDictTable.fieldObject(fieldNum(InventDim, InventProfileId_RU)).name(DbBackend::Native);
        inventDimInventDimension1           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension1)).name(DbBackend::Native);
        inventDimInventDimension2           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension2)).name(DbBackend::Native);
        inventDimInventDimension3           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension3)).name(DbBackend::Native);
        inventDimInventDimension4           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension4)).name(DbBackend::Native);
        inventDimInventDimension5           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension5)).name(DbBackend::Native);
        inventDimInventDimension6           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension6)).name(DbBackend::Native);
        inventDimInventDimension7           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension7)).name(DbBackend::Native);
        inventDimInventDimension8           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension8)).name(DbBackend::Native);
        inventDimInventDimension9           = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension9)).name(DbBackend::Native);
        inventDimInventDimension10          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension10)).name(DbBackend::Native);
        inventDimInventDimension11          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension11)).name(DbBackend::Native);
        inventDimInventDimension12          = inventDimDictTable.fieldObject(fieldNum(InventDim, InventDimension12)).name(DbBackend::Native);
        inventDimSha1HashHex                = inventDimDictTable.fieldObject(fieldNum(InventDim, Sha1HashHex)).name(DbBackend::Native);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTriggers</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static void buildTriggers()
    {
        #OCCRetryCount

        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            try
            {
                var builder = InventDimUpdatePreventionTriggerBuilder::contruct();
                builder.createSqlObjects();
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::Deadlock;
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>