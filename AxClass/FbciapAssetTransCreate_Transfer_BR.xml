<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FbciapAssetTransCreate_Transfer_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates the transfer transaction
/// </summary>
class FbciapAssetTransCreate_Transfer_BR extends FBCIAPAssetTransCreate_BR
{
    FBCIAPAssetTable_BR     fbCIAPAssetTable;

    FiscalDocument_BR       fiscalDocument;
    FiscalDocumentLine_BR   fiscalDocumentLine;

    NoYesId                 calculateInstallmentForOutgoing;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
        public void create()
    {
        if (fiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
        {
            this.processTransferOutgoing();
        }
        else
        {
            this.processTransferAcquisiton();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEndOfCreditTransaction</Name>
				<Source><![CDATA[
        private void createEndOfCreditTransaction(FBCIAPAssetTable_BR _ciapAssetTable)
    {
        FBCIAPAssetTrans_BR ciapAssetTrans;

        ciapAssetTrans.clear();
        ciapAssetTrans.fbciapAssessment_BR    = ciapAssessment.RecId;
        ciapAssetTrans.fbciapAssetTable_BR    = _ciapAssetTable.RecId;
        ciapAssetTrans.TransType              = FBCIAPAssetTransType_BR::BA;
        ciapAssetTrans.TransDate              = ciapAssessment.ToDate;
        ciapAssetTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateCIAPAsset</Name>
				<Source><![CDATA[
        private FBCIAPAssetTable_BR findOrCreateCIAPAsset(FBCIAPAssetTable_BR _origCiapAssetTable)
    {
        AssetTable          assetTable;
        FBCIAPAssetTable_BR ciapAssetTable;
        Factor              remaningICMSFactor;

        void initCiapAssetTable()
        {
            ciapAssetTable.Status                   = FBCIAPAssetStatus_BR::Open;
            ciapAssetTable.DefaultDimension         = _origCiapAssetTable.DefaultDimension;
            ciapAssetTable.Installments             = _origCiapAssetTable.RemainingInstallments;
            ciapAssetTable.RemainingInstallments    = _origCiapAssetTable.RemainingInstallments;
            ciapAssetTable.LedgerDimension          = _origCiapAssetTable.LedgerDimension;

            remaningICMSFactor = _origCiapAssetTable.remainingICMSAmount() / _origCiapAssetTable.icmsToRecover();

            ciapAssetTable.icmsAmount               = _origCiapAssetTable.icmsAmount        * remaningICMSFactor;
            ciapAssetTable.icmsDiffAmount           = _origCiapAssetTable.icmsDiffAmount    * remaningICMSFactor;
            ciapAssetTable.icmsFreightAmount        = _origCiapAssetTable.icmsFreightAmount * remaningICMSFactor;
            ciapAssetTable.icmsstAmount             = _origCiapAssetTable.icmsstAmount      * remaningICMSFactor;
        }

        select forupdate ciapAssetTable
            where ciapAssetTable.AssetTable == _origCiapAssetTable.AssetTable
                && ciapAssetTable.FiscalEstablishment_BR == fiscalEstablishmentRecId
                && ciapAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                && ciapAssetTable.Status != FBCIAPAssetStatus_BR::Closed;

        setPrefix(strFmt('%1:%2', "@SYS25653", assetTable.AssetId));

        if (!ciapAssetTable)
        {
            assetTable = AssetTable::find(_origCiapAssetTable.AssetTable);

            if (assetTable.FiscalEstablishment_BR != fiscalEstablishmentRecId)
            {
                throw error(strFmt("@SYS4006724", FiscalEstablishment_BR::find(assetTable.FiscalEstablishment_BR).FiscalEstablishmentId));
            }

            ciapAssetTable.initFromAssetTable(assetTable);
            initCiapAssetTable();

            ciapAssetTable.insert();
        }

        return ciapAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTaxAmount</Name>
				<Source><![CDATA[
        private AmountMST findTaxAmount(TaxType_BR _taxtype)
    {
        FBTaxTransTotalsByLine_BR taxTransTotalsByLine = FBFiscalDocumentTaxSummarizer_BR::construct(fiscalDocument).getTaxTransForLineByType(fiscalDocumentLine, _taxtype);

        return taxTransTotalsByLine.parmTaxAmountOther();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateInstallmentForOutgoing</Name>
				<Source><![CDATA[
        public NoYesId parmCalculateInstallmentForOutgoing(NoYesId _calculateInstallmentForOutgoing = calculateInstallmentForOutgoing)
    {
        calculateInstallmentForOutgoing = _calculateInstallmentForOutgoing;

        return calculateInstallmentForOutgoing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscaldocument</Name>
				<Source><![CDATA[
        public FiscalDocument_BR parmFiscaldocument(FiscalDocument_BR _fiscaldocument = fiscaldocument)
    {
        fiscaldocument = _fiscaldocument;

        return fiscaldocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscaldocumentLine</Name>
				<Source><![CDATA[
        public FiscalDocumentLine_BR parmFiscaldocumentLine(FiscalDocumentLine_BR _fiscaldocumentLine = fiscaldocumentLine)
    {
        fiscaldocumentLine = _fiscaldocumentLine;

        return fiscaldocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransferAcquisiton</Name>
				<Source><![CDATA[
        private void processTransferAcquisiton()
    {
        FiscalEstablishment_BR  outgoingFiscalEstablishment;
        FiscalDocument_BR       outgoingFiscalDocument;
        FiscalDocumentLine_BR   outgoingFiscalDocumentLine;
        FBCIAPAssetTable_BR     outgoingCIAPAssetTable;
        FBCIAPAssetTable_BR     acquisitonCIAPAssetTable;

        void create(FBCIAPAssetTable_BR _ciapAssetTable)
        {
            FBCIAPAssetTrans_FiscalDoc_BR fbCIAPAssetTrans_FiscalDoc;
            FBCIAPCreditCalc_BR           ciapCreditCalc;

            select RecId from fbCIAPAssetTrans
                where fbCIAPAssetTrans.TransType == FBCIAPAssetTransType_BR::IM
                exists join fbCIAPAssetTrans_FiscalDoc
                    where fbCIAPAssetTrans_FiscalDoc.FBCIAPAssetTrans_BR == fbCIAPAssetTrans.RecId
                        && fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR == fiscaldocument.RecId;

            // Do not process if already acquired
            if (fbCIAPAssetTrans.RecId)
            {
                return;
            }

            fbCIAPAssetTrans.fbciapAssetTable_BR    = _ciapAssetTable.RecId;
            fbCIAPAssetTrans.fbciapAssessment_BR     = ciapAssessment.RecId;
            fbCIAPAssetTrans.TransType              = FBCIAPAssetTransType_BR::IM;
            fbCIAPAssetTrans.TransDate              = fiscaldocument.AccountingDate;

            fbCIAPAssetTrans.icmsAmount             = _ciapAssetTable.icmsAmount;
            fbCIAPAssetTrans.icmsstAmount           = _ciapAssetTable.icmsstAmount;
            fbCIAPAssetTrans.icmsDiffAmount         = _ciapAssetTable.icmsDiffAmount;
            fbCIAPAssetTrans.icmsFreightAmount      = _ciapAssetTable.icmsFreightAmount;

            if (!calculateInstallmentForOutgoing && fbCIAPAssetTrans.icmsToRecover())
            {
                ciapCreditCalc = FBCIAPCreditCalc_BR::construct(_ciapAssetTable);

                fbCIAPAssetTrans.InstallmentNum         = 1;
                fbCIAPAssetTrans.InstallmentAmount      = ciapCreditCalc.calc();
            }

            fbCIAPAssetTrans.insert();

            fbCIAPAssetTrans_FiscalDoc.fbciapAssetTable_BR      = fbCIAPAssetTable.RecId;
            fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR        = fiscaldocument.RecId;
            fbCIAPAssetTrans_FiscalDoc.FiscalDocumentLine_BR    = fiscaldocumentLine.RecId;

            fbCIAPAssetTrans_FiscalDoc.fbciapAssetTrans_BR = fbCIAPAssetTrans.RecId;
            fbCIAPAssetTrans_FiscalDoc.insert();

            if (_ciapAssetTable.RemainingInstallments == 0)
            {
                this.createEndOfCreditTransaction(_ciapAssetTable);
            }
        }

        select outgoingFiscalDocument
            where outgoingFiscalDocument.FiscalDocumentNumber         == fiscaldocument.FiscalDocumentNumber
                && outgoingFiscalDocument.FiscalDocumentSeries        == fiscaldocument.FiscalDocumentSeries
                && outgoingFiscalDocument.FiscalEstablishmentCNPJCPF  == fiscaldocument.ThirdPartyCNPJCPF
            join RecId from outgoingFiscalEstablishment
                where outgoingFiscalEstablishment.FiscalEstablishmentId == outgoingFiscalDocument.FiscalEstablishment;

        select outgoingFiscalDocumentLine
            where outgoingFiscalDocumentLine.FiscalDocument == outgoingFiscalDocument.RecId
                && outgoingFiscalDocumentLine.AssetId == fiscaldocumentLine.AssetId;

        while select outgoingCIAPAssetTable
            where outgoingCIAPAssetTable.FiscalEstablishment_BR == outgoingFiscalEstablishment.RecId
                && outgoingCIAPAssetTable.FiscalEstablishmentDataArea == outgoingFiscalEstablishment.dataAreaId
                && outgoingCIAPAssetTable.AssetTable == outgoingFiscalDocumentLine.AssetId
        {
            acquisitonCIAPAssetTable = this.findOrCreateCIAPAsset(outgoingCIAPAssetTable);

            create(acquisitonCIAPAssetTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTransferOutgoing</Name>
				<Source><![CDATA[
        private void processTransferOutgoing()
    {
        FBCIAPCreditCalc_BR             ciapCreditCalc;
        FBCIAPAssetTrans_FiscalDoc_BR   fbCIAPAssetTrans_FiscalDoc;

        // delete previous ICMS credit transactions that was generated when the tax assessment was created
        FBCIAPAssetTransCreate_BR::deleteICMSInstallmentCreditTransaction(fiscaldocumentLine.AssetId, ciapAssessment);

        while select forupdate fbCIAPAssetTable
            where fbCIAPAssetTable.AssetTable == fiscaldocumentLine.AssetId
                && fbCIAPAssetTable.FiscalEstablishment_BR == ciapAssessment.fiscalEstablishment().RecId
                && fbCIAPAssetTable.FiscalEstablishmentDataArea == bookingPeriod.FiscalEstablishmentDataArea
                && fbCIAPAssetTable.Status == FBCIAPAssetStatus_BR::Open
        {
            fbCIAPAssetTrans.clear();
            fbCIAPAssetTrans.fbciapAssetTable_BR    = fbCIAPAssetTable.RecId;
            fbCIAPAssetTrans.fbciapAssessment_BR    = ciapAssessment.RecId;
            fbCIAPAssetTrans.TransType              = FBCIAPAssetTransType_BR::ATTransfer;
            fbCIAPAssetTrans.TransDate              = fiscaldocument.FiscalDocumentDate;
            fbCIAPAssetTrans.icmsAmount             = fbCIAPAssetTable.icmsAmount;
            fbCIAPAssetTrans.icmsDiffAmount         = fbCIAPAssetTable.icmsDiffAmount;
            fbCIAPAssetTrans.icmsstAmount           = fbCIAPAssetTable.icmsstAmount;
            fbCIAPAssetTrans.icmsFreightAmount      = fbCIAPAssetTable.icmsFreightAmount;

            if (calculateInstallmentForOutgoing)
            {
                ciapCreditCalc = FBCIAPCreditCalc_BR::construct(fbCIAPAssetTable);

                fbCIAPAssetTrans.InstallmentAmount      = ciapCreditCalc.calc();
                fbCIAPAssetTrans.InstallmentNum         = ciapCreditCalc.installmentNum();
            }

            fbCIAPAssetTrans.insert();

            if (fiscaldocument)
            {
                fbCIAPAssetTrans_FiscalDoc.fbciapAssetTrans_BR      = fbCIAPAssetTrans.RecId;
                fbCIAPAssetTrans_FiscalDoc.fbciapAssetTable_BR      = fbCIAPAssetTable.RecId;
                fbCIAPAssetTrans_FiscalDoc.FiscalDocument_BR        = fiscaldocument.RecId;
                fbCIAPAssetTrans_FiscalDoc.FiscalDocumentLine_BR    = fiscaldocumentLine.RecId;
                fbCIAPAssetTrans_FiscalDoc.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>