<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBonusMethod</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to calculate special depreciation allowance.
/// </summary>
public class AssetBonusMethod
{
    AssetBook       assetBook;
    TransDate       bonusTransDate;
    Array           bonusAmountList;   
    Array           bonusNameList;
    Counter         currentCount;
    AssetAmount     totalBonusAmount;
    boolean         isReportingCurrencyDepreciation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bonusCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of bonus records that exist for the Asset Id and book Id.
    /// </summary>
    /// <returns>Number of bonus depreciation records</returns>
    protected Counter bonusCount()
    {
        return any2int((select count(RecId) from AssetBookBonus
            where AssetBookBonus.BookId == assetBook.BookId &&
                  AssetBookBonus.AssetId == assetBook.AssetId).RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBonusDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the date of bonus depreciation.
    /// </summary>
    /// <returns>Date of the transaction</returns>
    public TransDate parmBonusDate()
    {
        return bonusTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBonusAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the bonus amounts for an asset id and a book id
    /// </summary>
    protected void calcBonusAmount()
    {
        AssetBookBonus          assetBookBonus;
        AssetAmount             remainingAvailableForBonusAmount;
        AssetAmount             acquistionAmount;
        AssetAmount             postedBonusAmount;
        AssetAmount             currentBonusAmount;
        Counter                 arrayCount = 1;

        totalBonusAmount = 0;

        // if asset hasn't been acquired use the acquisition price on the asset
        if (isReportingCurrencyDepreciation)
        {
            acquistionAmount = AssetTrans::acquisitionAmountReportingCurrency(assetBook.AssetId, dateMax(), assetBook.BookId);

            // check if bonus already posted for reporting currency
            postedBonusAmount = AssetTrans::amountReportingCurrencyPerDateTranstype(assetBook.AssetId, dateMax(), assetBook.BookId, AssetTransType::BonusDepreciation);
        }
        else
        {
            acquistionAmount = AssetTrans::acquisitionAmount(assetBook.AssetId, dateMax(), assetBook.BookId); 
           
            // check if bonus already posted
            postedBonusAmount = AssetTrans::amountMSTPerDateTranstype(assetBook.AssetId, dateMax(), assetBook.BookId, AssetTransType::BonusDepreciation);
        }        

        if (!acquistionAmount)
        {
            if (isReportingCurrencyDepreciation)
            {
                acquistionAmount = assetBook.AcquisitionPriceReportingCurrency;                
            }
            else
            {
                acquistionAmount = assetBook.AcquisitionPrice;
            }
        }       

        remainingAvailableForBonusAmount = acquistionAmount + postedBonusAmount;
        if (assetBook.getAcquisitionAmountSign() * remainingAvailableForBonusAmount <= 0)
        {
            return;
        }
        
        CurrencyExchangeHelper currencyExchangeHelper;
        CurrencyCode           accountingCurrency;
        if (isReportingCurrencyDepreciation)
        {
            currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), bonusTransDate);
            accountingCurrency = Ledger::accountingCurrency();
        }
        // calculate the bonus amount
        while select Amount, Percentage, BonusId from assetBookBonus
            order by Priority
            where assetBookBonus.BookId == assetBook.BookId
                && assetBookBonus.AssetId == assetBook.AssetId
        {
            // when remaining reaches zero no additional bonus trans will be generated
            if (remainingAvailableForBonusAmount == 0)
            {
                break;
            }

            currentBonusAmount = 0.0;

            // check if have an amount or percent
            if (assetBookBonus.Amount)
            {
                if (isReportingCurrencyDepreciation)
                {                    
                    currentBonusAmount = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(accountingCurrency, assetBookBonus.Amount);
                }
                else
                {
                    currentBonusAmount = assetBookBonus.Amount;
                }
            }
            else if (assetBookBonus.Percentage)
            {
                currentBonusAmount = remainingAvailableForBonusAmount * assetBookBonus.Percentage / 100;
            }

            // take into account current precision and the roundOffDepreciation field
            currentBonusAmount = CurrencyExchangeHelper::amount(currentBonusAmount);

            if (isReportingCurrencyDepreciation)
            {
                currentBonusAmount = AssetBookTable::find(assetBook.BookId).roundOffDepreciationReportingCurrency(currentBonusAmount);
            }
            else
            {
                currentBonusAmount = AssetBookTable::find(assetBook.BookId).roundOffDepreciation(currentBonusAmount);
            }
            // bonus can't be greater than remaining acquistion cost
            if (assetBook.getAcquisitionAmountSign() * currentBonusAmount 
                <= assetBook.getAcquisitionAmountSign() * remainingAvailableForBonusAmount)
            {
                bonusAmountList.value(arrayCount, currentBonusAmount);
                bonusNameList.value(arrayCount, assetBookBonus.BonusId);
                remainingAvailableForBonusAmount -= currentBonusAmount;
                totalBonusAmount += currentBonusAmount;
                arrayCount++;
            }
            else if (assetBook.getAcquisitionAmountSign() * remainingAvailableForBonusAmount > 0)
            {
                bonusAmountList.value(arrayCount, remainingAvailableForBonusAmount);
                bonusNameList.value(arrayCount, assetBookBonus.BonusId);
                totalBonusAmount += remainingAvailableForBonusAmount;
                remainingAvailableForBonusAmount = 0;
                arrayCount++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBonusTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the transaction date that should be used on the journal.
    /// </summary>
    protected void calcBonusTransDate()
    {
        AssetTableInterval          assetTableInterval;
        AssetDepreciationProfile    assetDepreciationProfile;
        AssetTransDate              startDate;

        // calculate the transaction date using the depreciationStartDate,
        // if depreciation start date is blank use usedFromDate,
        // if both are blank use the system date
        if (assetBook.DepreciationStartDate)
        {
            startDate = assetBook.DepreciationStartDate;
        }
        else
        {
            if (assetBook.UsedFromDate)
            {
                startDate = assetBook.UsedFromDate;
            }
            else
            {
                startDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }
        }

        // get the period end date for the records
        assetDepreciationProfile = assetBook.depreciationProfile();
        assetTableInterval = AssetTableInterval::construct(
                assetDepreciationProfile,
                assetBook.assetBookTable().getFiscalCalendar());

        bonusTransDate = assetTableInterval.endPeriod(startDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBonusRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if bonus depreciation can be calculated for the asset id and book id
    /// </summary>
    /// <returns>True if bonus can be calculated, otherwise false</returns>
    protected boolean checkBonusRecord()
    {
        boolean ret = false;

        // To get Start date and End date.
        // check if the asset bonus records for the asset book
        if (this.bonusCount())
        {
            // check if depreciation transaction are already posted
            if (!AssetTrans::existDepreciationTrans(assetBook.AssetId, assetBook.BookId))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBonusRecord_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if a bonus amount exists for the depreciation.
    /// </summary>
    /// <returns>
    /// Returns true if a bonus amount exists.
    /// </returns>
    public boolean checkBonusRecord_IN()
    {
        boolean                     ret = false;
        AssetTableInterval          deprInterval;
        boolean                     depreciationExtProfile;
        AssetBookTable              assetBookTable = AssetBookTable::find(assetBook.BookId);
        AssetTransDate              periodstart;
        AssetTransDate              periodEnd;
        date                        sysDate;
        AssetGroupTrans_IN          assetGroupTransLoc;
        AssetGroupInformation_IN    assetGroupInformation;

        deprInterval = depreciationExtProfile ? AssetTableInterval::construct(assetBook.depreciationExtProfile(), assetBookTable.FiscalCalendar):
                                                AssetTableInterval::construct(assetBook.depreciationProfile(), assetBookTable.FiscalCalendar);

        select TransType from assetGroupInformation
            join AssetGroupInformation from assetGroupTransLoc
            where assetGroupTransLoc.BookId == assetBook.BookId &&
                  assetGroupTransLoc.AssetId            == assetBook.AssetId;

        if (depreciationExtProfile)
        {
            if (assetBook.LastDepreciationDateExtraOrd)
            {
                periodstart = assetBook.LastDepreciationDateExtraOrd + 1;
                periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDateExtraOrd + 1);

                if (assetGroupInformation.TransType == AssetTransType::BonusDepreciation)
                {
                    return false;
                }
                else
                {
                    periodstart = assetBook.DepreciationStartDate;
                    periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
                    sysDate     = deprInterval.endPeriod(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                    if (!(assetBook.DepreciationStartDate >= periodstart && assetBook.DepreciationStartDate <= periodEnd) || (periodstart > sysDate || periodEnd != sysDate))
                    {
                        return false;
                    }
                }
            }
            else
            {
                periodstart = assetBook.DepreciationStartDate;
                periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
                sysDate     = deprInterval.endPeriod(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                if (!(assetBook.DepreciationStartDate >= periodstart && assetBook.DepreciationStartDate <= periodEnd) || (periodstart > sysDate || periodEnd != sysDate))
                {
                    return false;
                }
            }
        }
        else
        {
            if (assetBook.LastDepreciationDate)
            {
                periodstart = assetBook.LastDepreciationDate + 1;
                periodEnd   = deprInterval.endPeriod(assetBook.LastDepreciationDate + 1);

                if (assetGroupInformation.TransType == AssetTransType::BonusDepreciation)
                {
                    return false;
                }
                else
                {
                    periodstart = assetBook.DepreciationStartDate;
                    periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
                    sysDate     = deprInterval.endPeriod(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
                    if (!(assetBook.DepreciationStartDate >= periodstart && assetBook.DepreciationStartDate <= periodEnd) || (periodstart > sysDate || periodEnd != sysDate))
                    {
                        return false;
                    }
                }
            }
            else
            {
                periodstart = assetBook.DepreciationStartDate;
                periodEnd   = deprInterval.endPeriod(assetBook.DepreciationStartDate);
                sysDate     = deprInterval.endPeriod(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

                if (!(assetBook.DepreciationStartDate >= periodstart && assetBook.DepreciationStartDate <= periodEnd) || (periodstart > sysDate || periodEnd != sysDate))
                {
                    return false;
                }
            }
        }

        // check if the asset bonus records for the asset dep book
        if (this.bonusCount())
        {
            // check if depreciation transaction are already posted
            if (!AssetGroupTrans_IN::existBonusDepreciationTrans(assetGroupInformation.AssetGroup, assetBook.BookId, periodstart, periodEnd, assetBook.AssetId))
            {
                if (!AssetTrans::existDepreciationTrans(assetBook.AssetId, assetBook.BookId, false))
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextBonusAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the next bonus amount from the bonus list
    /// </summary>
    /// <returns>Bonus depreciation amount</returns>
    public AssetAmount getNextBonusAmount()
    {
        return bonusAmountList.value(currentCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextBonusName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the id of the next bonus from the bonus list
    /// </summary>
    /// <returns>Bonus id</returns>
    public AssetBonusId getNextBonusName()
    {
        return bonusNameList.value(currentCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class based on the <c>AssetBook</c> buffer
    /// </summary>
    /// <param name = "_assetBook"><c>AssetBook</c> buffer</param>
    protected void initFromAssetBook(AssetBook _assetBook)
    {
        // initialize class variables
        assetBook = _assetBook;
        bonusAmountList = new Array(Types::Real);
        bonusNameList = new Array(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if next bonus amount stored in bonus list is available
    /// </summary>
    /// <returns>Returns true if there is another bonus amount, otherwise false.</returns>
    public boolean next()
    {
        if (bonusAmountList.lastIndex() == 0)
        {
            return false;
        }

        if (currentCount >= bonusAmountList.lastIndex())
        {
            return false;
        }

        currentCount++;
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalBonusAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the sum of all bonus amounts for the asset and book
    /// </summary>
    /// <returns>Sum of all bonus amounts</returns>
    public AssetAmount totalBonusAmount()
    {
        return totalBonusAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAssetBook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetBonusMethod</c> class.
    /// </summary>
    /// <param name = "_assetBook"><c>AssetBook</c> table buffer used for initialization</param>
    /// <returns>An instance of <c>AssetBonusMethod</c> class</returns>
    public static AssetBonusMethod newAssetBook(AssetBook _assetBook)
    {
        AssetBonusMethod assetBonusMethod;
        // <GIN>
        if (AssetParameters::isDepreciationIncomeTaxActEnable_IN()
            && _assetBook.AssetGroupDepreciation_IN)
        {
            assetBonusMethod = new AssetBonusMethod_IN(_assetBook);
        }
        else
        {
        // </GIN>
            assetBonusMethod = new AssetBonusMethod();
            assetBonusMethod.initFromAssetBook(_assetBook);
        // <GIN>
        }
        // </GIN>

        return assetBonusMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Main routine that generates the bonus depreciation and determines transaction date.
    /// </summary>
    public void run()
    {
        if (this.checkBonusRecord())
        {
            this.calcBonusTransDate();
            this.calcBonusAmount();            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReportingCurrencyDepreciation</Name>
				<Source><![CDATA[
    public boolean parmIsReportingCurrencyDepreciation(boolean _isReportingCurrencyDepreciation = isReportingCurrencyDepreciation)
    {
        isReportingCurrencyDepreciation = _isReportingCurrencyDepreciation;

        return isReportingCurrencyDepreciation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>