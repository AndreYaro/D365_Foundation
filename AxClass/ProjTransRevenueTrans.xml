<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransRevenueTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransRevenueTrans extends ProjTransRevenue
{
    ProjRevenueTrans    projRevenueTrans;

    boolean             getCanBeInvoiced;
    boolean             canBeInvoiced;
    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
    boolean             getVoucherInvoice;
    Voucher             voucherInvoice;

    ProjRevenueTransTaxExtensionIN projRevenueTransTaxExtensionIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether a transaction can be adjusted.
    /// </summary>
    /// <returns>
    /// true if the transaction can be adjusted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A transaction can only be adjusted if it has been posted.
    /// </remarks>
    public boolean adjustable()
    {
        ProjRevenueTrans        childProjRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 adjustableSale = true;

        if (projRevenueTrans.TransactionOrigin == ProjOrigin::BeginningBalance)
        {
            return false;
        }

        if (projRevenueTrans.TransactionOrigin == ProjOrigin::FreeTextInvoice)
        {
            return false;
        }

        if (projRevenueTrans.CategoryId && ProjCategory::find(projRevenueTrans.CategoryId).SetupEstimate == NoYes::Yes)
        {
            return false;
        }

        select firstonly RecId from childProjRevenueTrans
            where childProjRevenueTrans.AdjRefTransId == projRevenueTrans.TransId;

        if (!childProjRevenueTrans.RecId)
        {
            if (projRevenueTrans.AdjRefTransId)
            {
                ProjRevenueTrans parentTrans;

                select firstonly RecId, TotalSalesAmountCur from parentTrans
                        where parentTrans.TransId == projRevenueTrans.AdjRefTransId;

                if (parentTrans.RecId)
                {
                    if ((parentTrans.TotalSalesAmountCur > 0 && projRevenueTrans.TotalSalesAmountCur < 0) ||
                        (parentTrans.TotalSalesAmountCur < 0 && projRevenueTrans.TotalSalesAmountCur > 0))
                    {
                        return false;
                    }
                }
            }
        }
        else
        {
            return false;
        }

        while select TransStatus from projRevenueTransSale
            where projRevenueTransSale.TransId == projRevenueTrans.TransId
        {
            adjustableSale = adjustableSale && ProjParameters::adjustable(projRevenueTransSale.TransStatus);
            if (!adjustableSale)
            {
                break;
            }
        }

        return !childProjRevenueTrans.RecId && adjustableSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Assessable value for this transaction.
    /// </summary>
    /// <returns>
    /// Assessable value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountCur assessableValue_IN()
    {
        return projRevenueTransTaxExtensionIN.AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether this transaction can be invoiced.
    /// </summary>
    /// <param name="_chargeable">
    /// A Boolean value that indicates whether invoice proposal transactions can be invoiced; optional.
    /// </param>
    /// <returns>
    /// true if this transaction can be invoiced; otherwise, false .
    /// </returns>
    /// <remarks>
    /// If the project line property of the project that is associated with this transaction indicates that
    /// the project is not chargeable, it cannot be invoiced. Otherwise, the funding type is validated and
    /// the <c>ProjTrans.canTransStatusBeInvoiced</c> method is called to determine whether the transaction
    /// can be invoiced based on its status.
    /// </remarks>
    public boolean canBeInvoiced(
        boolean _chargeable = false)
    {
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 ret = true;

        ProjTable projTableLocal = this.projTable();

        //  allow FixedPrice Project appeared in fee journal can be invoiced.
        if (ProjMultipleContractLinesForProjectFeatureHelper::isTimeMaterialBillingMethod(projTableLocal, ProjTransType::Revenue) ||
            ProjMultipleContractLinesForProjectFeatureHelper::isFixedPriceBillingMethod(projTableLocal, ProjTransType::Revenue))
        {
            if (this.originRevenue() == ProjOrigin::Subscription)
            {
                ret = this.canTransStatusBeInvoiced(_chargeable);
            }
        }

        if (ret)
        {
            if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
            {
                if (!getCanBeInvoiced)
                {
                    getCanBeInvoiced = true;
                    while select projRevenueTransSale
                        where projRevenueTransSale.TransId == this.transId()
                    {
                        canBeInvoiced = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).canBeInvoiced();
                        if (canBeInvoiced)
                        {
                            break;
                        }
                    }
                }

                ret = canBeInvoiced;
            }
            else
            {
                ret = super(_chargeable);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    /// <remarks>
    /// This abstract method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjCategoryId categoryId()
    {
        return projRevenueTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projRevenueTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return projRevenueTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction has been invoiced.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  boolean invoiced()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            while select projRevenueTransSale
                where projRevenueTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).invoiced();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the invoice ID of the invoice for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjInvoiceId invoiceId()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        ProjInvoiceId           ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            while select projRevenueTransSale
                where projRevenueTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).invoiceId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the value of the correction field associated with the transaction.
    /// </summary>
    /// <returns>
    /// The value of the correction field associated with the transaction.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes to support storno.
    /// </remarks>
    public LedgerCorrection isCorrection()
    {
        LedgerCorrection ret;

        ret = projRevenueTrans.IsCorrection;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST               ret;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projRevenueTransSale
                    where projRevenueTransSale.TransId == projRevenueTrans.TransId
                {
                    projTransSale = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projRevenueTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Maximum retail price value for this transaction.
    /// </summary>
    /// <returns>
    /// Maximum retail price value for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return projRevenueTransTaxExtensionIN.MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjRevenueTrans _projRevenueTrans)
    {
        projRevenueTrans    = _projRevenueTrans;
        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            projRevenueTransTaxExtensionIN = ProjRevenueTransTaxExtensionIN::findByProjRevenueTrans(_projRevenueTrans.RecId);
        }
        // </GIN>
        super(_projRevenueTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the origin of revenues on this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjOriginRevenue::Journal</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ProjOrigin originRevenue()
    {
        return projRevenueTrans.TransactionOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projRevenueTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this transaction is from a project proposal.
    /// </summary>
    /// <returns>
    /// true if this transaction is from a project proposal; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction. This base class implementation returns false.
    /// </remarks>
    public  boolean proposal()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        boolean                 ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            while select projRevenueTransSale
                where projRevenueTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).proposal();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public  ProjProposalId proposalId()
    {
        ProjRevenueTransSale    projRevenueTransSale;
        ProjProposalId          ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            while select projRevenueTransSale
                where projRevenueTransSale.TransId == this.transId()
            {
                ret = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale).proposalId();
                if (ret)
                {
                    break;
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projRevenueTrans.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        return projRevenueTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public RecId recId()
    {
        return projRevenueTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    public ResourceRecId resource()
    {
        return projRevenueTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    public ResourceCategoryRecId resourceCategory()
    {
        return projRevenueTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice  ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            ret = this.qty() ? CurrencyExchangeHelper::price(this.transTurnover() / this.qty(), this.currencyIdSales()) : 0;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaBasePrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the base price of the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMABasePrice smaBasePrice()
    {
        return projRevenueTrans.smaBasePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaEnddate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date for the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMAEnddate smaEnddate()
    {
        return projRevenueTrans.smaEnddate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaIndex</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the index to use for the calculation of the indexed sales price for the subscription that
    /// is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMAIndex smaIndex()
    {
        return projRevenueTrans.smaIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date for the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// A null date.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMAStartDate smaStartDate()
    {
        return projRevenueTrans.smaStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the subscription that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMASubscriptionId smaSubscriptionId()
    {
        return projRevenueTrans.smaSubscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>smaSubscriptionPeriodType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the subscription type of the subscription associated with this transaction.
    /// </summary>
    /// <returns>
    /// The <c>SMASubscriptionPeriodType::Regular</c> enumeration value.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public SMASubscriptionPeriodType smaSubscriptionPeriodType()
    {
        return projRevenueTrans.smaSubscriptionPeriodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// Always returns zero.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjRevenueTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxGroup taxGroup()
    {
        return projRevenueTrans.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projRevenueTrans.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return projRevenueTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TransactionID transId()
    {
        return projRevenueTrans.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            ret = projRevenueTrans.TotalSalesAmountCur;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return projRevenueTrans.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    public Voucher voucherInvoice()
    {
        Voucher                 ret;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransRevenueTrans)))
        {
            if (!getVoucherInvoice)
            {
                getVoucherInvoice = true;
                while select projRevenueTransSale
                    where projRevenueTransSale.TransId == projRevenueTrans.TransId
                {
                    projTransSale = ProjTrans::newProjRevenueTransSale(projRevenueTrans, projRevenueTransSale);
                    voucherInvoice = projTransSale.voucherInvoice();
                    if (voucherInvoice)
                    {
                        break;
                    }
                }
            }

            ret = voucherInvoice;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public Voucher voucherOriginal()
    {
        return projRevenueTrans.VoucherJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the activity number for the transaction.
    /// </summary>
    /// <returns>
    /// The activity number.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return projRevenueTrans.ActivityNumber;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>