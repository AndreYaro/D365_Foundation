<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPurchaseOrderGenerationAsync</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqPurchaseOrderGenerationAsync</c> class is used to call on the
/// <c>PurchReqPurchaseOrderGenerationAsync</c> class to create purchase orders in asynchronous mode.
/// </summary>
class PurchReqPurchaseOrderGenerationAsync
{
    private PurchReqInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase orders in asynchronous mode.
    /// </summary>
    /// <param name="_dataContract">
    /// A <c>PurchReqPurchaseOrderGenerationRequest</c> object that acts as a data contract.
    /// </param>
    public void run(PurchReqPurchaseOrderGenerationRequest _dataContract)
    {
        PurchReqTable purchReqTable = this.purchaseRequistionWithRetry(_dataContract.parmPurchReqTableRecId());

        using (var activityContext = this.instrumentationLogger().purchaseOrderGeneration().run(purchReqTable))
        {
            if (purchReqTable.canRecordBudgetFundReservation())
            {
                using (var activityContextBudget = this.instrumentationLogger().purchaseOrderGeneration().recordBudgetFundReservation(purchReqTable.RecId))
                {
                    purchReqTable.recordBudgetFundReservation();
                }
            }
            else
            {
                using (var activityContextStrategy = this.instrumentationLogger().purchaseOrderGeneration().runAutoPurchOrderGeneration(purchReqTable.RecId))
                {
                    RequisitionReleaseStrategy::runAutoPurchOrderGeneration(purchReqTable.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchaseRequistionWithRetry</Name>
				<Source><![CDATA[
    private PurchReqTable purchaseRequistionWithRetry(PurchReqRefRecId _purchReqRecId)
    {
        const int MaximumRetries10 = 10; 
        const int MaximumRetries15 = 15;

        int maximumRetries = PurchReqGenerationAsyncExtendRetryCountFlight::instance().isEnabled() ? MaximumRetries15 : MaximumRetries10;
        
        PurchReqTable purchReqTable = PurchReqTable::find(_purchReqRecId);

        if (purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::InReview)
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().purchaseOrderGeneration().purchaseRequistionWithRetry(_purchReqRecId))
            {
                int currentRetryCount;

                while (currentRetryCount < maximumRetries
                    && purchReqTable.RequisitionStatus != PurchReqRequisitionStatus::Approved)
                {
                    currentRetryCount++;

                    purchReqTable = this.checkIfRequisitionStatusIsApproved(_purchReqRecId, currentRetryCount);

                    this.instrumentationLogger().logInformation(strFmt('Retry:%1 - %2.RecId:%3 - %2.RequisitionStatus:%4', currentRetryCount, tableStr(PurchReqTable), purchReqTable.RecId, int2Str(purchReqTable.RequisitionStatus)));
                }

                activityContext
                    .addCustomProperty('RequisitionStatus', int2Str(purchReqTable.RequisitionStatus));
            }
        }

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfRequisitionStatusIsApproved</Name>
				<Source><![CDATA[
    private PurchReqTable checkIfRequisitionStatusIsApproved(PurchReqRefRecId _purchReqRecId, int _currentRetryCount)
    {
        const int SleepTimeMs = 1000;
        const int MaximumRetriesWithOneSecond = 10;
        const int SleepOneSecond  = 1;
        const int SleepFiveSeconds = 5;

        PurchReqTable purchReqTable = PurchReqTable::find(_purchReqRecId);

        if (purchReqTable.RequisitionStatus == PurchReqRequisitionStatus::InReview)
        {
            int sleepSeconds = _currentRetryCount <= MaximumRetriesWithOneSecond ? SleepOneSecond : SleepFiveSeconds;
            sleep(SleepTimeMs * sleepSeconds);
        }

        return purchReqTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates purchase order lines for requisition lines asynchronously.
    /// </summary>
    /// <param name="_purchReqTable">
    /// A record in the <c>PurchReqTable</c> table.
    /// </param>
    public static void runAsync(PurchReqTable _purchReqTable)
    {
        using (var activityContextStrategy =  PurchReqInstrumentationLogger::createLogger(classStr(PurchReqPurchaseOrderGenerationAsync)).purchaseOrderGeneration().runAsync(_purchReqTable.RecId))
        {
            SysOperationServiceController           controller;
            PurchReqPurchaseOrderGenerationRequest  dataContract;
            int                                     infoLogLineStart = infologLine();

            controller = new PurchReqPurchasOrderGenerationController(
                    classStr(PurchReqPurchaseOrderGenerationAsync),
                    methodStr(PurchReqPurchaseOrderGenerationAsync, run),
                    SysOperationExecutionMode::ReliableAsynchronous);

            dataContract = controller.getDataContractObject('_dataContract');
            dataContract.parmPurchReqTableRecId(_purchReqTable.RecId);

            controller.run();

            infolog.clear(infologLineStart);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal PurchReqInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchReqInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>