<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesQuotationUpdate extends RunBaseBatch
{
    Object                          callerFormDataSource;
    SysQueryRun                     chooseLines;

    SalesQuotationTable             salesQuotationTable;
    SalesQuotationLine              salesQuotationLine;

    QuotationType                   callerModuleAxapta;

    boolean                         showQueryForm;
    boolean                         showDialog;
    boolean                         alternativeQuotations;

    smmQuotationReasonId            reasonId;

    DialogField                     dialogReasonId;

    DialogRunbase                   dialogRunbase;
    QueryRun                        queryRun;

    Counter                         numberOfRecords;

    SalesQuotationTable             origQuotation;
    boolean                         includeCreated;

    TmpSalesQuotationMassUpdate     tmpSalesQuotationMassUpdate;
    boolean                         calledFromOpportunity;
    boolean                         cdsLockingOptionProjectQuotations;

    #define.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        ReasonId,
        alternativeQuotations
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>callerFormDataSource</Name>
				<Source><![CDATA[
    FormDataSource callerFormDataSource(FormDataSource _callerFormDataSource = callerFormDataSource)
    {
        callerFormDataSource = _callerFormDataSource;
        return callerFormDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns true.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus  documentStatus()
    {
        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus2SalesQuotationStatus</Name>
				<Source><![CDATA[
    public SalesQuotationStatusNew documentStatus2SalesQuotationStatus(DocumentStatus _documentStatus)
    {
        SalesQuotationStatusNew salesQuotationStatus = SalesQuotationStatusNew::None;

        switch (_documentStatus)
        {
            case DocumentStatus::Cancelled      :
                salesQuotationStatus = SalesQuotationStatusNew::Cancelled;
                break;
            case DocumentStatus::Lost           :
                salesQuotationStatus = SalesQuotationStatusNew::Lost;
                break;
        }

        return salesQuotationStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCallerModuleFromParm</Name>
				<Source><![CDATA[
    void getCallerModuleFromParm(str _parm)
    {
        callerModuleAxapta = this.convertParmToQuotationType(_parm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBePostedFailed</Name>
				<Source><![CDATA[
    private boolean mayQuotationBePostedFailed(SalesQuotationTable _salesQuotationTable)
    {
        switch (_salesQuotationTable.QuotationType)
        {
            case QuotationType::Sales :
                // Quotation should have a status of either create or sent.
                return checkFailed("@SYS105491");

            case QuotationType::Project :
                return checkFailed("@SYS4010147");
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayQuotationBePosted</Name>
				<Source><![CDATA[
    public boolean mayQuotationBePosted(SalesQuotationTable _salesQuotationTable)
    {
        boolean ok = true;

        if (calledFromOpportunity)
        {
            if (_salesQuotationTable.isTemplate())
            {
                // Cannot update template quotations.
                ok = checkFailed("@SYS105492");
            }

            if (!_salesQuotationTable.canQuotationBePosted())
            {
                ok = this.mayQuotationBePostedFailed(_salesQuotationTable);
            }
        }
        else
        {
            ok =  _salesQuotationTable.mayCancelledBeUpdated(includeCreated);

            if (ok)
            {
                if (_salesQuotationTable.QuotationType == QuotationType::Project)
                {
                    boolean isExternallyManaged = cdsLockingOptionProjectQuotations && Project::isProjectExternallyManaged(salesQuotationTable.ProjIdRef);
                    if (isExternallyManaged)
                    {
                        // no error message in this case, just ignore the record
                        ok = false;
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertParmToQuotationType</Name>
				<Source><![CDATA[
    [Replaceable]
    protected QuotationType convertParmToQuotationType(str _parm)
    {
        const str Sales     = 'Sales';
        const str Project   = 'Project';

        switch (_parm)
        {
            case Sales   : 
                return QuotationType::Sales;

            case Project : 
                return QuotationType::Project;

            default :
                throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmSalesQuotationTable</Name>
				<Source><![CDATA[
    protected void  initParmSalesQuotationTable(SalesQuotationTable  _salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery(Query  _query = this.queryRun().query())
    {
        SalesQuotationTable                 localSalesQuotationTable;

        smmQuotationAlternativeQuotations   localAlternativeQuotations;

        Query query = _query;

        QueryBuildRange queryBuildRangeType = query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationType));
        queryBuildRangeType.value(queryValue(callerModuleAxapta));
        queryBuildRangeType.status(RangeStatus::Locked);

        QueryBuildRange queryBuildRangeTemplate = query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, TemplateName));
        queryBuildRangeTemplate.value(SysQuery::valueEmptyString());
        queryBuildRangeTemplate.status(RangeStatus::Locked);

        if (smmQuotationAlternativeQuotations::exist(origQuotation.QuotationId))
        {
            numberOfRecords = 0;
            switch (origQuotation.QuotationType)
            {
                case QuotationType::Sales :
                    while select LinkedQuotationId
                        from  localAlternativeQuotations
                        index QuotationIdx
                        where localAlternativeQuotations.QuotationId        == origQuotation.QuotationId
                        join QuotationId from localSalesQuotationTable
                            where localSalesQuotationTable.QuotationId      == localAlternativeQuotations.LinkedQuotationId &&
                                 (localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Created ||
                                  localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Sent)
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(localAlternativeQuotations.LinkedQuotationId);

                        numberOfRecords++;
                    }
                    break;

                case QuotationType::Project :
                    // Project quotations includ both Sent and Revised documents in the count
                    while select LinkedQuotationId
                        from  localAlternativeQuotations
                        index QuotationIdx
                        where localAlternativeQuotations.QuotationId        == origQuotation.QuotationId
                        join QuotationId from localSalesQuotationTable
                            where localSalesQuotationTable.QuotationId      == localAlternativeQuotations.LinkedQuotationId &&
                                 (localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Created ||
                                  localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Sent    ||
                                  localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Revised)
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(localAlternativeQuotations.LinkedQuotationId);

                        numberOfRecords++;
                    }
                    break;
            }
        }
        else if (smmQuotationAlternativeQuotations::existLinked(origQuotation.QuotationId))
        {
            numberOfRecords = 0;

            QuotationIdBase mainAlternativeQuotationId = smmQuotationAlternativeQuotations::findLinkedQuotation(origQuotation.QuotationId).QuotationId;
            SalesQuotationTable tmpSalesQuotationTable = SalesQuotationTable::find(mainAlternativeQuotationId);

            switch (origQuotation.QuotationType)
            {
                case QuotationType::Sales :
                    if (tmpSalesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                        tmpSalesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent)
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(mainAlternativeQuotationId);

                        numberOfRecords++;
                    }
                    break;

                case QuotationType::Project :
                    // Project includes both Sent and Revised documents
                    if (tmpSalesQuotationTable.QuotationStatus == SalesQuotationStatus::Created ||
                        tmpSalesQuotationTable.QuotationStatus == SalesQuotationStatus::Sent    ||
                        tmpSalesQuotationTable.QuotationStatus == SalesQuotationStatus::Revised)
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(mainAlternativeQuotationId);

                        numberOfRecords++;
                    }
                    break;
            }

            switch (origQuotation.QuotationType)
            {
                case QuotationType::Sales :
                    while select LinkedQuotationId
                        from  localAlternativeQuotations
                        index QuotationIdx
                        where localAlternativeQuotations.QuotationId        == mainAlternativeQuotationId &&        // Find all quotations that are linked together by the main altenative quotation
                              localAlternativeQuotations.LinkedQuotationId  != origQuotation.QuotationId            // - do not include the quotation that has just won.
                        join QuotationId from localSalesQuotationTable
                            where localSalesQuotationTable.QuotationId      == localAlternativeQuotations.LinkedQuotationId &&
                                 (localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Created ||
                                  localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Sent)
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(localAlternativeQuotations.LinkedQuotationId);

                        numberOfRecords++;
                    }
                    break;

                case QuotationType::Project :
                    while select LinkedQuotationId
                        from  localAlternativeQuotations
                        index QuotationIdx
                        where localAlternativeQuotations.QuotationId        == mainAlternativeQuotationId &&        // Find all quotations that are linked together by the main altenative quotation
                              localAlternativeQuotations.LinkedQuotationId  != origQuotation.QuotationId            // - do not include the quotation that has just won.
                        join QuotationId from localSalesQuotationTable
                            where localSalesQuotationTable.QuotationId      == localAlternativeQuotations.LinkedQuotationId &&
                                 (localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Created ||
                                  localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Sent    ||
                                  localSalesQuotationTable.QuotationStatus  == SalesQuotationStatus::Revised)
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(localAlternativeQuotations.LinkedQuotationId);

                        numberOfRecords++;
                    }
                    break;
            }
        }
        else
        {
            if (!callerFormDataSource)
            {
                if (calledFromOpportunity)
                {
                    while select tmpSalesQuotationMassUpdate
                        where tmpSalesQuotationMassUpdate.StatusTo == this.documentStatus2SalesQuotationStatus(this.documentStatus())
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(tmpSalesQuotationMassUpdate.QuotationId);
                    }
                }
                else
                {
                    QueryBuildRange queryBuildRange = query.dataSourceNo(1).addRange(fieldNum(SalesQuotationTable, QuotationId));
                    queryBuildRange.value(salesQuotationTable.QuotationId);
                }
            }
            else
            {
                Map mapSalesQuotationRecord = Map::create(FormLetter::getFormRecord(callerFormDataSource));
                MapEnumerator mapSalesQuotationRecordEnumerator = mapSalesQuotationRecord.getEnumerator();

                numberOfRecords = 0;
                while (mapSalesQuotationRecordEnumerator.moveNext())
                {
                    localSalesQuotationTable = mapSalesQuotationRecordEnumerator.currentValue();

                    if (salesQuotationTable.canQuotationBePosted())
                    {
                        query.dataSourceTable(tableNum(SalesQuotationTable)).addRange(fieldNum(SalesQuotationTable, QuotationId)).value(localSalesQuotationTable.QuotationId);
                    }
                    else
                    {
                        info(strFmt("@SYS84632",localSalesQuotationTable.QuotationType, localSalesQuotationTable.QuotationId));
                        continue;
                    }

                    numberOfRecords++;
                }
            }
        }

        this.queryRun().query(query);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
     void  new()
    {
        super();

        showQueryForm           = true;
        showDialog              = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfRecords</Name>
				<Source><![CDATA[
    Counter numberOfRecords(Counter _numberOfRecords = numberOfRecords)
    {
        numberOfRecords = _numberOfRecords;

        return numberOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container  pack()
    {
        return [#CurrentVersion,#CurrentList,queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromOpportunity</Name>
				<Source><![CDATA[
    public boolean parmCalledFromOpportunity(boolean _calledFromOpportunity = calledFromOpportunity)
    {
        calledFromOpportunity = _calledFromOpportunity;

        return calledFromOpportunity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerModule</Name>
				<Source><![CDATA[
    QuotationType parmCallerModule(QuotationType _callerModuleAxapta = callerModuleAxapta)
    {
        callerModuleAxapta = _callerModuleAxapta;
        return callerModuleAxapta;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeCreated</Name>
				<Source><![CDATA[
    boolean parmIncludeCreated(boolean _includeCreated = includeCreated)
    {
        includeCreated = _includeCreated;
        return includeCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonId</Name>
				<Source><![CDATA[
    public smmQuotationReasonId parmReasonId(smmQuotationReasonId _reasonId = reasonId)
    {
        reasonId = _reasonId;

        return reasonId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpTable</Name>
				<Source><![CDATA[
    public TmpSalesQuotationMassUpdate parmTmpTable(TmpSalesQuotationMassUpdate _tmpSalesQuotationMassUpdate = tmpSalesQuotationMassUpdate)
    {
        tmpSalesQuotationMassUpdate = _tmpSalesQuotationMassUpdate;

        return tmpSalesQuotationMassUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun(QueryRun  _queryRun = queryRun)
    {
        queryRun = _queryRun;

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunBuild</Name>
				<Source><![CDATA[
    abstract QueryRun queryRunBuild()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you want a batch job that extends this class to run on a client, you must override this method
    /// to return false. Jobs that return true must not access any client-side functionality. If true is
    /// returned, the batch server will execute the job by using the <c>runAs</c> method.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAlternativeQuotations</Name>
				<Source><![CDATA[
    public void setAlternativeQuotations(boolean _setAlternativeQuotations)
    {
        alternativeQuotations = _setAlternativeQuotations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrigQuotation</Name>
				<Source><![CDATA[
    public void setOrigQuotation(SalesQuotationTable _origQuotation)
    {
        origQuotation = _origQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog box.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,packedQuery] = packedClass;
                this.queryRun(new QueryRun(packedQuery));
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLinkedAlternativeQuotations</Name>
				<Source><![CDATA[
    void updateLinkedAlternativeQuotations()
    {
        Counter                             recordsUpdatedLost = 0, recordsUpdatedCanceled = 0;

        ttsbegin;

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(SalesQuotationTable)))
            {
                salesQuotationTable = queryRun.get(tableNum(SalesQuotationTable));

                salesQuotationTable.ReasonId                    = reasonId;
                if (salesQuotationTable.mayLostBeUpdated())
                {
                    salesQuotationTable.QuotationStatus   = SalesQuotationStatus::Lost;
                    salesQuotationTable.update(true, this.isInBatch());
                    recordsUpdatedLost++;
                }
                else
                {
                    salesQuotationTable.QuotationStatus    = SalesQuotationStatus::Cancelled;
                    salesQuotationTable.update(true, this.isInBatch());
                    recordsUpdatedCanceled++;
                }
            }
        }

        if (recordsUpdatedLost > 0)
        {
            info(strFmt("@SYS99552",recordsUpdatedLost,"@SYS36618"));
        }
        if (recordsUpdatedCanceled > 0)
        {
            info(strFmt("@SYS99552",recordsUpdatedCanceled,"@SYS3012"));
        }

        if (!recordsUpdatedLost &&
            !recordsUpdatedCanceled)
        {
            checkFailed("@SYS25907");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesQuotationUpdate</c> instance.
    /// </summary>
    protected void initialize()
    {
        this.setAlternativeQuotations(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SalesQuotationUpdate</c> object from the <c>SalesQuotationStatus</c>.
    /// </summary>
    /// <param name = "_toSalesQuotationStatus">The sales quotation status.</param>
    /// <returns>An instance of <c>SalesQuotationUpdate</c> if found.</returns>
    public static SalesQuotationUpdate construct(SalesQuotationStatus  _toSalesQuotationStatus)
    {
        SalesQuotationUpdate salesQuotationUpdate = SalesQuotationUpdate::constructNoThrow(_toSalesQuotationStatus);

        if (!salesQuotationUpdate)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        salesQuotationUpdate.initialize();

        return salesQuotationUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructNoThrow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>SalesQuotationUpdate</c> object from the <c>SalesQuotationStatus</c>.
    /// </summary>
    /// <param name = "_toSalesQuotationStatus">The sales quotation status.</param>
    /// <returns>An instance of <c>SalesQuotationUpdate</c>; otherwise, null.</returns>
    [Hookable(false)]
    public static SalesQuotationUpdate constructNoThrow(SalesQuotationStatus  _toSalesQuotationStatus)
    {
        SalesQuotationStatusFactoryAttribute attr = new SalesQuotationStatusFactoryAttribute(_toSalesQuotationStatus);

        return SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(SalesQuotationUpdate), attr) as SalesQuotationUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromOpportunity</Name>
				<Source><![CDATA[
    static SalesQuotationUpdate constructFromOpportunity(TmpSalesQuotationMassUpdate _tmpSalesQuotationMassUpdate, SalesQuotationStatus  _toSalesQuotationStatus)
    {
        SalesQuotationUpdate salesQuotationUpdate = SalesQuotationUpdate::construct(_toSalesQuotationStatus);
        if (salesQuotationUpdate)
        {
            salesQuotationUpdate.parmCallerModule(_tmpSalesQuotationMassUpdate.QuotationType);
            salesQuotationUpdate.parmIncludeCreated(true);
            salesQuotationUpdate.parmTmpTable(_tmpSalesQuotationMassUpdate);
            salesQuotationUpdate.parmCalledFromOpportunity(true);
            salesQuotationUpdate.queryRun(salesQuotationUpdate.queryRunBuild());
            salesQuotationUpdate.initQuery();
        }
        return salesQuotationUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromSalesQuotationTable</Name>
				<Source><![CDATA[
    static SalesQuotationUpdate constructFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable,SalesQuotationStatus  _toSalesQuotationStatus,boolean _includeCreated = false)
    {
        SalesQuotationUpdate salesQuotationUpdate = SalesQuotationUpdate::construct(_toSalesQuotationStatus);
        if (salesQuotationUpdate)
        {
            salesQuotationUpdate.parmCallerModule(_salesQuotationTable.QuotationType);
            salesQuotationUpdate.initParmSalesQuotationTable(_salesQuotationTable);
            salesQuotationUpdate.parmIncludeCreated(_includeCreated);
            salesQuotationUpdate.getLast();
            //Set alternative quotations to false again because of the above getLast() method.
            salesQuotationUpdate.setAlternativeQuotations(false);
            salesQuotationUpdate.queryRun(salesQuotationUpdate.queryRunBuild());
            salesQuotationUpdate.initQuery();
        }
        return salesQuotationUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args, boolean _alternativeQuotations = false)
    {
        Object                  callerFormDataSource;
        Common                  record      = args.record();
        int                     parmEnum    = args.parmEnum();
        SalesQuotationTable     salesQuotationTable;
        SalesQuotationTable     salesQuotationTableLinked;

        if (!args)
        {
            throw error("@SYS25407");
        }

        if (_alternativeQuotations)
        {
            salesQuotationTable = record;
            if (smmQuotationAlternativeQuotations::exist(salesQuotationTable.QuotationId))
            {
                salesQuotationTableLinked   = SalesQuotationTable::find(smmQuotationAlternativeQuotations::find(salesQuotationTable.QuotationId).LinkedQuotationId);
            }
            else
            {
                salesQuotationTableLinked   = SalesQuotationTable::find(smmQuotationAlternativeQuotations::findLinkedQuotation(salesQuotationTable.QuotationId).QuotationId);
            }

            record                          = salesQuotationTableLinked.data();

            if ((salesQuotationTableLinked.QuotationType == QuotationType::Sales && salesQuotationTableLinked.QuotationStatus == SalesQuotationStatus::Sent) ||
                (salesQuotationTableLinked.QuotationType == QuotationType::Project &&
                    (salesQuotationTableLinked.QuotationStatus == SalesQuotationStatus::Sent || salesQuotationTableLinked.QuotationStatus == SalesQuotationStatus::Revised)))
            {
                parmEnum                    = SalesQuotationStatus::Lost;
            }
            else if (salesQuotationTableLinked.QuotationStatus == SalesQuotationStatus::Created)
            {
                parmEnum                    = SalesQuotationStatus::Cancelled;
            }
        }

        SalesQuotationUpdate salesQuotationUpdate = SalesQuotationUpdate::construct(parmEnum);

        salesQuotationUpdate.getCallerModuleFromParm(args.parm());

        if (_alternativeQuotations)
        {
            salesQuotationUpdate.setOrigQuotation(salesQuotationTable);
        }

        if (record)
        {
            switch (record.TableId)
            {
                case tableNum(SalesQuotationTable)    : salesQuotationTable = record;
                                                        salesQuotationUpdate.initParmSalesQuotationTable(salesQuotationTable);
                                                        callerFormDataSource = FormDataUtil::getFormDataSource(salesQuotationTable);
                                                        salesQuotationUpdate.callerFormDataSource(callerFormDataSource);
                                                        break;

                default                               : throw error(strFmt("@SYS84624",funcName()));
            }
        }

        salesQuotationUpdate.getLast();
        salesQuotationUpdate.queryRun(salesQuotationUpdate.queryRunBuild());

        salesQuotationUpdate.setAlternativeQuotations(_alternativeQuotations);

        salesQuotationUpdate.initQuery();

        // It is necessary to check number of records when updating alternative quotations. This is to avoid the dialog appearing if all alternative quotations are confirmed.
        if (!_alternativeQuotations || salesQuotationUpdate.numberOfRecords() >= 1)
        {
            if (salesQuotationUpdate.prompt())
            {
                if (_alternativeQuotations)
                {
                    salesQuotationUpdate.updateLinkedAlternativeQuotations();
                }
                else
                {
                    salesQuotationUpdate.runOperation();
                }

                if (salesQuotationUpdate.mustRefreshCallerDataSource(args, salesQuotationTable))
                {
                    if (salesQuotationUpdate.numberOfRecords() > 1)
                    {
                        callerFormDataSource.executeQuery();
                    }
                    else
                    {
                        if (SalesQuotationTable::exist(salesQuotationTable.QuotationId))
                        {
                            callerFormDataSource.reRead();
                            callerFormDataSource.reFresh();
                            if (formDataSourceHasMethod(callerFormDataSource, identifierStr(reReadLines)))
                            {
                                callerFormDataSource.reReadLines();
                            }
                        }
                        else
                        {
                            callerFormDataSource.reSearch();
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRefreshCallerDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the input objects are set.
    /// </summary>
    /// <param name="_args">
    /// Args that carries the caller parameter informations.
    /// </param>
    /// <param name="_salesQuotationTable">
    /// The given sales quotation table record.
    /// </param>
    /// <returns>
    /// true if input objects are set; otherwise, false.
    /// </returns>
    [SuppressBpWarning("BPParameterNotUsed", "Parameter _args is used by extensions that wrap this method.")]
    protected boolean mustRefreshCallerDataSource(Args _args, SalesQuotationTable _salesQuotationTable)
    {
        Object callerFormDS = FormDataUtil::getFormDataSource(_salesQuotationTable);
        return (_salesQuotationTable && callerFormDS);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>