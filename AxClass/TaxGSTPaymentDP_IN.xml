<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTPaymentDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>GSTPaymentInvoiceDP_IN</c> class provides base implementation of a data provider class for AR and AP payment reports.
/// </summary>
public class TaxGSTPaymentDP_IN extends GSTInvoiceDPBase_IN
{
    TaxEngineLedgerJournalTransHeader taxEngineLedgerJournalTransHeader;
    LedgerJournalTrans ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataFromContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data from the contract class.
    /// </summary>
    public void getDataFromContract()
    {
        contract = gstInvoiceDPBase.parmDataContract() as GSTInvoiceContract_IN;
        ledgerJournalTrans = LedgerJournalTrans::findRecId(contract.parmRecordId(), false);

        if (ledgerJournalTrans)
        {
            select firstOnly taxEngineLedgerJournalTransHeader
                where taxEngineLedgerJournalTransHeader.JournalNum == ledgerJournalTrans.JournalNum
                    && taxEngineLedgerJournalTransHeader.Voucher    == ledgerJournalTrans.Voucher;

            this.parmInvoiceJournal(taxEngineLedgerJournalTransHeader);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceHeaderFooterTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceHeaderFooterTmp()
    {
        CustTrans custTrans;
        VendTrans vendTrans;
        AmountCur amountCur;
        taxModelTaxable = TaxModelDocLineFactory::newTaxModelDocLine(ledgerJournalTrans);

        super();

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
        {
            custTrans = CustTrans::findByVoucher(ledgerJournalTrans.Voucher);
            amountCur = abs(custTrans.AmountCur);
            gstInvoiceHeaderFooterTmp.IsDomesticSales = NoYes::Yes;
        }
        else if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend)
        {
            vendTrans = VendTrans::findVoucherDate(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
            amountCur = vendTrans.AmountCur;
        }

        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInFigure = amountCur;
        gstInvoiceHeaderFooterTmp.TotalInvoiceValueInWords = numeralsToTxt_IN(abs(amountCur));

        gstInvoiceHeaderFooterTmp.insert();
        gstInvoiceHeaderFooterTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoGSTInvoiceTmp</Name>
				<Source><![CDATA[
    protected void insertIntoGSTInvoiceTmp(str _className = '')
    {
        LedgerJournalTrans ledgerJournalTransLoc;

        super(_className);

        if (lineTableId && lineRecId && classStr(ITaxDocumentLine) == _className)
        {
            if (lineTableId == tableNum(LedgerJournalTrans))
            {
                ledgerJournalTransLoc = LedgerJournalTrans::findRecId(lineRecId, false);

                gstInvoiceTmp.Name          = ledgerJournalTransLoc.Txt;
                gstInvoiceTmp.LineAmount    = ledgerJournalTransLoc.AmountCurCredit ? ledgerJournalTransLoc.AmountCurCredit : ledgerJournalTransLoc.AmountCurDebit;
            }

            if (taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::AdvanceRefundVoucher)
            {
                gstInvoiceTmp.TaxableValue = abs(gstInvoiceTmp.TaxableValue);
            }
        }

        if (classStr(ITaxDocumentComponentLine) == _className && taxDocumentExtension.TaxInvReferenceType == GSTReference_IN::AdvanceRefundVoucher)
        {
            gstInvoiceTmp.TaxComponentAmount = abs(gstInvoiceTmp.TaxComponentAmount);
            gstInvoiceTmp.ReverseChargeAmount = abs(gstInvoiceTmp.ReverseChargeAmount);
        }

        gstInvoiceTmp.insert();
        gstInvoiceTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that <c>createdTransactionId</c> of inserted record is different than default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        gstInvoiceHeaderFooterTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
        gstInvoiceTmp.setConnection(gstInvoiceDPBase.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>