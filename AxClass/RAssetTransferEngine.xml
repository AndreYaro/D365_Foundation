<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransferEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetTransferEngine
{
    protected const str GroupDelivermenName = 'Delivermen';
    protected const str GroupReceiverName = 'Receiver';
    protected const str ButtonCreateAssetName = 'CreateAsset';
    protected const str ButtonAutoCreateName = 'autoCreate';
    protected const str TabPageAssetMoveStandardName = 'MoveStandard';
    protected const str AccountNumName = 'AccountNum';
    protected const str AssetIdName = 'AssetId';
    protected const str AccountGroupName = 'AccountGroup';
    protected const str AssetGroupName = 'AssetGroup';
    protected const str buttonPrintName = 'MenuButton';
    protected const str CompanyTableName = 'CompanyTable';

    protected RAssetTransferTable rAssetTransferTable;
    protected FormDataSource rAssetTransferTable_ds;
    protected RAssetTransferTrans rAssetTransferTrans;
    protected FormDataSource rAssetTransferTrans_ds;
    protected FormRun formRunTable;
    protected FormRun formRunTrans;
    protected FormGroupControl groupReceiver;
    protected FormGroupControl groupDelivermen;
    protected FormMenuButtonControl buttonPrint;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateLine</Name>
				<Source><![CDATA[
    public void autoCreateLine(RAssetTransferTrans _rAssetTransferTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public void create()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// initializes internal variables with values from RAssetTransferTable table
    /// </summary>
    /// <param name="_rAssetTransferTable">
    /// The header line of transfer journal
    /// </param>
    /// <exception cref="Exception::Error">
    /// shows the exception if the form data sourse of RAssetTransferTable table is null
    /// </exception>
    public void initFromRAssetTransferTable(RAssetTransferTable _rAssetTransferTable)
    {
        rAssetTransferTable = _rAssetTransferTable;
        rAssetTransferTable_ds = FormDataUtil::getFormDataSource(rAssetTransferTable);

        if (! rAssetTransferTable_ds)
        {
            throw error(strFmt("@GLS103487", funcName()));
        }

        formRunTable = rAssetTransferTable_ds.formRun();

        groupDelivermen = formRunTable.design().controlName(GroupDelivermenName);
        groupReceiver = formRunTable.design().controlName(GroupReceiverName);
        buttonPrint = formRunTable.design().controlName(ButtonPrintName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAcountNum</Name>
				<Source><![CDATA[
    public void lookupAcountNum(FormStringControl _lookupCtrl)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupAssetId</Name>
				<Source><![CDATA[
    public void lookupAssetId(FormStringControl _lookupCtrl, CompanyId _companyId)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetTransferTrans</Name>
				<Source><![CDATA[
    public RAssetTransferTrans rAssetTransferTrans(RAssetTransferTrans _rAssetTransferTrans = rAssetTransferTrans)
    {
        rAssetTransferTrans = _rAssetTransferTrans;
        rAssetTransferTrans_ds = FormDataUtil::getFormDataSource(rAssetTransferTrans);

        if (rAssetTransferTrans_ds)
        {
            formRunTrans = rAssetTransferTrans_ds.formRun();
        }

        return rAssetTransferTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTableDesign</Name>
				<Source><![CDATA[
    public void updateTableDesign()
    {
        formRunTable.resetSize();
        formRunTable.arrange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransDesign</Name>
				<Source><![CDATA[
    public void updateTransDesign()
    {
        rAssetTransferTrans_ds.allowEdit(!rAssetTransferTable.Posted);
        rAssetTransferTrans_ds.allowCreate(!rAssetTransferTable.Posted);
        rAssetTransferTrans_ds.allowDelete(!rAssetTransferTable.Posted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteTable</Name>
				<Source><![CDATA[
    public boolean validateWriteTable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteTrans</Name>
				<Source><![CDATA[
    public boolean validateWriteTrans()
    {
        boolean ret = true;

        RAssetTransferTrans assetTransferTransLocal;

        if (rAssetTransferTrans.AccountNum)
        {
            select firstonly RecId from assetTransferTransLocal
                where assetTransferTransLocal.RecId != rAssetTransferTrans.RecId
                    && assetTransferTransLocal.AccountNum == rAssetTransferTrans.AccountNum
                    && assetTransferTransLocal.TransferTableRecId == rAssetTransferTrans.TransferTableRecId;

            if (assetTransferTransLocal.RecId != 0)
            {
                switch (rAssetTransferTable.MoveType)
                {
                    case RAssetMoveType::CompanyIssue:
                        ret = checkFailed(strFmt("@GLS116711", rAssetTransferTrans.AccountNum));
                        break;

                    case RAssetMoveType::CompanyReceipt:
                        ret = checkFailed(strFmt("@GLS116710", rAssetTransferTrans.AccountNum));
                        break;

                    case RAssetMoveType::Transfer:
                        ret = checkFailed(strFmt("@SYS67761", rAssetTransferTrans.AccountNum));
                        break;

                    default:
                        break;
                }
            }
        }
        else if (rAssetTransferTrans.AssetId)
        {
            select firstonly RecId from assetTransferTransLocal
                where assetTransferTransLocal.RecId != rAssetTransferTrans.RecId
                    && assetTransferTransLocal.AssetId == rAssetTransferTrans.AssetId
                    && assetTransferTransLocal.TransferTableRecId == rAssetTransferTrans.TransferTableRecId;

            if (assetTransferTransLocal.RecId != 0)
            {
                ret = rAssetTransferTable.MoveType == RAssetMoveType::CompanyIssue
                    ? checkFailed(strFmt("@GLS116710", rAssetTransferTrans.AssetId))
                    : checkFailed(strFmt("@GLS116711", rAssetTransferTrans.AssetId));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTrans</Name>
				<Source><![CDATA[
    public void writeTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetTransferEngine construct(RAssetTransferTable _rAssetTransferTable)
    {
        RAssetTransferEngine rAssetTransferEngine;

        switch (_rAssetTransferTable.MoveType)
        {
            case RAssetMoveType::CompanyIssue:
                rAssetTransferEngine = new RAssetTransferEngine_CompanyIssue();
                break;

            case RAssetMoveType::CompanyReceipt:
                rAssetTransferEngine = new RAssetTransferEngine_CompanyReceipt();
                break;

            case RAssetMoveType::Transfer:
                rAssetTransferEngine = new RAssetTransferEngine_Both();
                break;

            default:
                throw error("@SYS59121");
        }

        return rAssetTransferEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>