<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmCreateVacationsFromSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmCreateVacationsFromSchedule
{
    RHRMOrderTable         rhrmOrderTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initValue(RHRMOrderTable _hrmOrderTable)
    {
        ;

        rhrmOrderTable = RHRMOrderTable::find(_hrmOrderTable.RecId); // fresh data
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean prompt()
    {
        boolean ret = true;
        ;

        if (rhrmOrderTable.Posted == NoYes::Yes)
            ret = checkFailed("@RUP10");

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        RHRMLeaveScheduleTable hrmLeaveScheduleTable;
        RPayVacationTable      payVacationTable;
        RHRMOrderTrans         hrmOrderTrans;
        LineNum                lineNum = (select maxof(LineNum) from rhrmOrderTrans
                                              where rhrmOrderTrans.OrderTableRecId == rhrmOrderTable.RecId).LineNum;

        Object                rhrmCreateDialog;
        Args                  args = new Args(formStr(RHRMTransferFromSchedule));
        FormDataSource        tmpRPayVacationTable_ds;

        void autoCreateLines()
        {
            hrmOrderTrans.clear();

            lineNum                                = lineNum + 1.0;
            hrmOrderTrans.LineNum                  = lineNum;
            hrmOrderTrans.OrderTableRecId          = rhrmOrderTable.RecId;
            hrmOrderTrans.JournalId                = rhrmOrderTable.JournalId;
            hrmOrderTrans.EmplId                   = payVacationTable.EmplId;
            hrmOrderTrans.EmploymentFactor         = 1.;
            hrmOrderTrans.LeaveScheduleTransRecId  = payVacationTable.RecId;
            hrmOrderTrans.PayVacationDuration      = payVacationTable.PayVacationDuration;
            hrmOrderTrans.VacationTypeId           = payVacationTable.HrmVacationTypeId;
            hrmOrderTrans.StartDate                = payVacationTable.StartDate;
            hrmOrderTrans.DayNumber                = payVacationTable.DayNumber;

            hrmLeaveScheduleTable                  = hrmLeaveScheduleTable ? hrmLeaveScheduleTable :
                                                      RHRMLeaveScheduleTable::find(payVacationTable.FormationYear, true);

            hrmOrderTrans.AttachDocDate            = hrmLeaveScheduleTable.TransDate;
            hrmOrderTrans.AttachDocNum             = hrmLeaveScheduleTable.LeaveScheduleNum;

            if (!hrmOrderTrans.setEndDate())
                return;

            hrmOrderTrans.setPeriodDate();

            if (!hrmOrderTrans.validateWrite())
                return;

            hrmOrderTrans.insert();
        }

        rhrmCreateDialog = classfactory.formRunClass(args);
        rhrmCreateDialog.init();
        rhrmCreateDialog.run();
        rhrmCreateDialog.wait();

        if (rhrmCreateDialog.closedOk())
        {
            tmpRPayVacationTable_ds = rhrmCreateDialog.dataSource(tableStr(RPayVacationTable));

            ttsbegin;

            rhrmOrderTable = RHRMOrderTable::find(rhrmOrderTable.RecId, true); // fresh data

            if (tmpRPayVacationTable_ds.anyMarked())
            {
                for (payVacationTable = tmpRPayVacationTable_ds.getFirst(true, false); payVacationTable;
                     payVacationTable = tmpRPayVacationTable_ds.getNext())
                {
                    autoCreateLines();
                }
            }
            else
            {
                payVacationTable = tmpRPayVacationTable_ds.cursor();
                if (payVacationTable.RecId)
                {
                    autoCreateLines();
                }
            }

            rhrmOrderTable.NumOfLines = any2int((select count(RecId) from rhrmOrderTrans
                                                     where rhrmOrderTrans.OrderTableRecId == rhrmOrderTable.RecId).RecId);
            rhrmOrderTable.doUpdate();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        RHRMCreateVacationsFromSchedule   hrmCreateVacationsFromSchedule;
        FormDataSource                    formDataSource;
        ;

        if (! _args || _args.dataset() != tableNum(RHRMOrderTrans))
            throw error(strFmt("@SYS25516", "@RUP1894"));

        hrmCreateVacationsFromSchedule = new RHRMCreateVacationsFromSchedule();
        hrmCreateVacationsFromSchedule.initValue(_args.caller().hrmOrderTable());

        if (hrmCreateVacationsFromSchedule.prompt())
        {
            hrmCreateVacationsFromSchedule.run();
            formDataSource         = FormDataUtil::getFormDataSource(_args.record());
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>