<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsSameLotBatchResolution_ChangeQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Same Lot Batch reservation solution. This class resolves the same lot
/// batch reservation issue by updating the movements transaction
/// quantity.
/// </summary>
/// <remarks>
/// The class needs the following parameters set, before executing the resolution
/// procedure:
/// movement:  The movement to resolve the reservation issue for
/// updQty:    The quantity to update the movement with (in transaction units)
/// cwUpdQty:  The catch weight quantity to update the movement with
/// </remarks>
class PdsSameLotBatchResolution_ChangeQty implements PdsSameLotBatchResolution
{
    InventMovement  movement;
    InventQty       updQty;
    PdsCWInventQty  cwUpdQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>abortManualReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indication if the manual reservation has to be aborted after executing the resolution procedure.
    /// </summary>
    /// <returns>
    /// always returns false
    /// </returns>
    /// <remarks>
    /// The manual reservation does not need to be aborted after executing the
    /// resolution procedure as the user then can actually reserve the quantity, that
    /// he tried to reserve in the first place.
    /// </remarks>
    public boolean abortManualReservation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMovCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new catch-weight quantity for the movement transaction.
    /// </summary>
    /// <returns>
    /// A quantity.
    /// </returns>
    protected PdsCWInventQty calculateMovCWQty()
    {
        return cwUpdQty * movement.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMovQtyInventUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new quantity for the movement transaction in inventory units.
    /// </summary>
    /// <returns>
    /// A quantity.
    /// </returns>
    protected InventQty calculateMovQtyInventUnit()
    {
        return EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(movement.itemId(),
                                                                                     movement.inventDimId(),
                                                                                     this.calculateMovQtyTransUnit(),
                                                                                     movement.transUnitId(),
                                                                                     movement.inventTable().inventUnitId(),
                                                                                     NoYes::Yes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMovQtyTransUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the new quantity for the movement transaction in transaction units.
    /// </summary>
    /// <returns>
    /// A quantity.
    /// </returns>
    protected UnitQty calculateMovQtyTransUnit()
    {
        return updQty * movement.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>continueReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the reservation process should continue.
    /// </summary>
    /// <returns>
    /// always true.
    /// </returns>
    /// <remarks>
    /// The reservation does not need to be aborted after executing the
    /// resolution procedure as the user then can actually reserve the quantity, that
    /// he tried to reserve in the first place.
    /// </remarks>
    public boolean continueReservation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMovement</Name>
				<Source><![CDATA[
    public InventMovement parmMovement(InventMovement _movement = movement)
    {
        if (!prmisdefault(_movement))
        {
            movement = _movement;
        }

        return movement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWUpdQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmPdsCWUpdQty(PdsCWInventQty _cwUpdQty = cwUpdQty)
    {
        if (!prmisdefault(_cwUpdQty))
        {
            cwUpdQty = _cwUpdQty;
        }

        return cwUpdQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdQty</Name>
				<Source><![CDATA[
    public InventQty parmUpdQty(InventQty _updQty = updQty)
    {
        if (!prmisdefault(_updQty))
        {
            updQty = _updQty;
        }

        return updQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the same batch reservation issue by lowering the transaction quantity.
    /// </summary>
    /// <remarks>
    /// The quantity of the movement will be adjusted to the provided quantity.
    /// This will also update the quantity of the transaction which caused the conflict.
    /// In case updating the quantity would change the sign on the movement transaction, an error will be thrown.
    /// </remarks>
    public void resolve()
    {
        InventMovement  origMovement = movement.newMovement_Orig();
        UnitQty         newMovQtyTransUnit = this.calculateMovQtyTransUnit();
        PdsCWInventQty  newMovCwQty = this.calculateMovCWQty();

        if (origMovement &&
             (newMovQtyTransUnit * origMovement.transQtyUnit() < 0
              || (newMovCwQty * origMovement.pdsCWTransQty() < 0)))
        {
            throw error("@SYS25506"); // Quantity may not change sign
        }

        movement.pdsCWSetTransQty(newMovCwQty);
        movement.setTransQtyUnit(newMovQtyTransUnit);
        movement.setTransQty(this.calculateMovQtyInventUnit());

        if (movement.transId())
        {
            if (movement.mustBeRemainControlled())
            {
                movement.pdsCWAddRemainPhysical(
                    movement.pdsCWTransQty() - origMovement.pdsCWTransQty());
                movement.addRemainPhysicalUnit(
                    movement.transQtyUnit() - origMovement.transQtyUnit());
                movement.addRemainPhysical(
                    movement.transQty() - origMovement.transQty());
            }

            this.updateThisMovementBuffer();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateThisMovementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the buffer of this instance's movement.
    /// </summary>
    protected void updateThisMovementBuffer()
    {
        PdsSameLotBatchResolution_ChangeQty::updateMovementBuffer(movement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PdsSameLotBatchResolution_ChangeQty construct()
    {
        return new PdsSameLotBatchResolution_ChangeQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new resolution procedure with the passed parameters.
    /// </summary>
    /// <param name="_movement">
    /// The movement to resolve the reservation issue for.
    /// </param>
    /// <param name="_updQty">
    /// The quantity to update the movement with.
    /// This quantity has to be in transaction units.
    /// </param>
    /// <param name="_cwUpdQty">
    /// The catch weight quantity to update the movement with.
    /// </param>
    /// <returns>
    /// The new resolution procedure.
    /// </returns>
    /// <remarks>
    /// Note, that the updQty parameter is in transaction units.
    /// </remarks>
    public static PdsSameLotBatchResolution_ChangeQty newParameters(
        InventMovement  _movement,
        InventQty       _updQty,
        PdsCWInventQty  _cwUpdQty = 0)
    {
        PdsSameLotBatchResolution_ChangeQty resolution;

        resolution = PdsSameLotBatchResolution_ChangeQty::construct();
        resolution.parmMovement(_movement);
        resolution.parmUpdQty(_updQty);
        resolution.parmPdsCWUpdQty(_cwUpdQty);

        return resolution;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMovementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a  new movement on the server prior to updating the buffer to avoid
    /// passing a movement from the client to the server, throwing 'the cursor is invalid for instantiating recordViewCache'
    /// infolog.
    /// </summary>
    /// <param name="_movement">
    /// The movement to update the buffer for.
    /// </param>
    private static void updateMovementBuffer(InventMovement _movement)
    {
        InventMovement movement = InventMovement::constructNoThrow(_movement.buffer());

        movement.updateBuffer(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>