<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AbstractBankQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class AbstractBankQuery implements IBankQuery
{
    protected Query query;
    private Map groupByFields;
    private Map aggregationFields;
    private Map ranges;
    private Map havingFilters;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        query = new Query();
        groupByFields = new Map(Types::Integer, Types::Class);
        aggregationFields = new Map(Types::Integer, Types::Class);
        ranges = new Map(Types::Integer, Types::Class);
        havingFilters = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    public Query getQuery()
    {
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public void buildQuery()
    {
        MapEnumerator groupByFieldsEnumerator = groupByFields.getEnumerator();

        while (groupByFieldsEnumerator.moveNext())
        {
            QueryBuildDataSource qbds = query.dataSourceTable(groupByFieldsEnumerator.currentKey());
            List fields = groupByFieldsEnumerator.currentValue();
            ListEnumerator fieldsEnumerator = fields.getEnumerator();
            while (fieldsEnumerator.moveNext())
            {
                BankGroupByField field = fieldsEnumerator.current();
                qbds.addGroupByAndSelectionField(field.getFieldId());
            }
        }

        MapEnumerator aggregationFieldsEnumerator = aggregationFields.getEnumerator();

        while (aggregationFieldsEnumerator.moveNext())
        {
            QueryBuildDataSource qbds = query.dataSourceTable(aggregationFieldsEnumerator.currentKey());
            List fields = aggregationFieldsEnumerator.currentValue();
            ListEnumerator fieldsEnumerator = fields.getEnumerator();
            while (fieldsEnumerator.moveNext())
            {
                BankAggregationField field = fieldsEnumerator.current();
                qbds.addSelectionField(field.getFieldId(), field.getArrgegationType());
            }
        }

        this.applyRanges();

        MapEnumerator havingFiltersEnumerator = havingFilters.getEnumerator();

        while (havingFiltersEnumerator.moveNext())
        {
            QueryBuildDataSource qbds = query.dataSourceTable(havingFiltersEnumerator.currentKey());
            List filters = havingFiltersEnumerator.currentValue();
            ListEnumerator filtersEnumerator = filters.getEnumerator();
            while (filtersEnumerator.moveNext())
            {
                BankHavingFilter filter = filtersEnumerator.current();
                query.addHavingFilter(qbds, fieldId2Name(filter.getTableId(), filter.getFieldId()), filter.getArrgegationFunction()).value(filter.getFilterValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGroupByField</Name>
				<Source><![CDATA[
    public void addGroupByField(BankGroupByField _field)
    {
        TableId tableId = _field.getTableId();
        if (groupByFields.exists(tableId))
        {
            List fields = groupByFields.lookup(tableId);
            fields.addEnd(_field);
        }
        else
        {
            List fields = new List(Types::Class);
            fields.addEnd(_field);
            groupByFields.insert(tableId, fields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAggregationField</Name>
				<Source><![CDATA[
    public void addAggregationField(BankAggregationField _field)
    {
        TableId tableId = _field.getTableId();
        if (aggregationFields.exists(tableId))
        {
            List fields = aggregationFields.lookup(tableId);
            fields.addEnd(_field);
        }
        else
        {
            List fields = new List(Types::Class);
            fields.addEnd(_field);
            aggregationFields.insert(tableId, fields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldRange</Name>
				<Source><![CDATA[
    public void addFieldRange(BankQueryRange _range)
    {
        TableId tableId = _range.getTableId();
        if (ranges.exists(tableId))
        {
            List fields = ranges.lookup(tableId);
            fields.addEnd(_range);
        }
        else
        {
            List fields = new List(Types::Class);
            fields.addEnd(_range);
            ranges.insert(tableId, fields);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHavingFilter</Name>
				<Source><![CDATA[
    public void addHavingFilter(BankHavingFilter _havingFilter)
    {
        TableId tableId = _havingFilter.getTableId();
        if (havingFilters.exists(tableId))
        {
            List filters = havingFilters.lookup(tableId);
            filters.addEnd(_havingFilter);
        }
        else
        {
            List filters = new List(Types::Class);
            filters.addEnd(_havingFilter);
            havingFilters.insert(tableId, filters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRanges</Name>
				<Source><![CDATA[
    internal protected void resetRanges()
    {
        ranges = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRanges</Name>
				<Source><![CDATA[
    internal protected void applyRanges()
    {
        MapEnumerator rangesEnumerator = ranges.getEnumerator();

        while (rangesEnumerator.moveNext())
        {
            QueryBuildDataSource qbds = query.dataSourceTable(rangesEnumerator.currentKey());
            List rangeList = rangesEnumerator.currentValue();
            ListEnumerator rangeListEnumerator = rangeList.getEnumerator();
            while (rangeListEnumerator.moveNext())
            {
                BankQueryRange bankQueryRange = rangeListEnumerator.current();
                qbds.addRange(bankQueryRange.getFieldId()).value(bankQueryRange.getRangeValue());
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>