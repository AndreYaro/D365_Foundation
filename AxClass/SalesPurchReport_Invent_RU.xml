<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchReport_Invent_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchReport_Invent_RU extends SalesPurchReport_Invoice_RU
{
    Set inventLocationCache;
    Map inventPostingCache;

    InventParameters               inventParameters;

    TmpSalesPurchReportSubtable_RU subHeader;

    boolean writeLine;

    SalesPurchDialog_RU filterDialog;
    QueryRun            filterQueryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustSubheader</Name>
				<Source><![CDATA[
    final protected void adjustSubheader(AmountCur _difference)
    {
        this.fetchSubheader(dynamicData.InventLocationId);

        subHeader.TotalAmtWithVAT += _difference;
        subHeader.TotalAmtVAT     += _difference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    final protected void clearCache()
    {
        inventLocationCache = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>consigneeAccount</Name>
				<Source><![CDATA[
    final protected CustVendAC consigneeAccount()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>consignorAccount</Name>
				<Source><![CDATA[
    final protected CustVendAC consignorAccount()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPrintoutType</Name>
				<Source><![CDATA[
    abstract protected PrintoutTypeTable_RU defaultPrintoutType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRun</Name>
				<Source><![CDATA[
    //overloaded for Excel report
    final public boolean doRun()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchSubheader</Name>
				<Source><![CDATA[
    final protected void fetchSubheader(InventLocationId _location,
                                        Counter          _internalId = header.InternalId)
    {
        if (subHeader.InventLocationId != _location ||
            subHeader.InternalId       != _internalId)
        {
            this.finalizeSubheader();
            select firstonly forupdate subHeader
                where subHeader.InventLocationId == _location &&
                      subHeader.InternalId       == _internalId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeSubheader</Name>
				<Source><![CDATA[
    final protected void finalizeSubheader()
    {
        if (subHeader.orig().TotalAmtWithVAT != subHeader.TotalAmtWithVAT ||
            subHeader.orig().TotalAmtVAT     != subHeader.TotalAmtVAT     ||
            subHeader.orig().PrintoutType    != subHeader.PrintoutType)
        {
            subHeader.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPrintout</Name>
				<Source><![CDATA[
    abstract protected PrintoutTable_RU findPrintout(Common           _invoiceJour,
                                                     InventLocationId _location)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventPosting</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the ledger dimension from the inventory posting.
    /// </summary>
    #define.InventPostingKey([ dynamicData.ItemId, dynamicData.Category, inventDim.InventProfileId_RU ])
    protected void initInventPosting()
    {
        LedgerDimensionDefaultAccount   invPosting;

        if (! inventPostingCache)
        {
            inventPostingCache = new Map(Types::Container, Types::Int64);
        }

        if (dynamicData.ItemId || dynamicData.Category)
        {
            InventDim inventDim = InventDim::find(invoiceTrans.InventDimId);
            
            if (inventPostingCache.exists(#InventPostingKey))
            {
                invPosting = inventPostingCache.lookup(#InventPostingKey);
            }
            else
            {
                invPosting = InventPosting::itemLedgerDimensionFromParameter(this.buildItemLedgerDimensionParameter(inventDim));
                inventPostingCache.insert(#InventPostingKey, invPosting);
            }

            dynamicData.InventPostingAccount = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(invPosting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemLedgerDimensionParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a parameter for searching an inventory posting ledger dimension for an item.
    /// </summary>
    /// <param name="_inventDim">Inventory dimension.</param>
    /// <returns>The built parameter instance.</returns>
    protected InventPostingItemLedgerDimensionParameters buildItemLedgerDimensionParameter(InventDim _inventDim)
    {
        InventPostingItemLedgerDimensionParameters searchParameters = InventPostingItemLedgerDimensionParameters::newFromParameters(
            this.inventAccountType(),
            dynamicData.ItemId,
            '');

        searchParameters.ItemCategory = dynamicData.Category;
        searchParameters.InventDim_RU = InventDim::find(invoiceTrans.InventDimId);

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventAccountType</Name>
				<Source><![CDATA[
    abstract protected InventAccountType inventAccountType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    //overloaded for Excel report
    final public identifierName lastValueElementName()
    {
        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDialog</Name>
				<Source><![CDATA[
    abstract protected SalesPurchDialog_RU newDialog()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares data in temporary tables for this report
    /// </summary>
    /// <remarks>
    /// InventParameters selected to get Analysis Dimension code
    /// </remarks>
    protected void prepareData()
    {
        inventParameters = InventParameters::find();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareDynamicLine</Name>
				<Source><![CDATA[
    protected void prepareDynamicLine()
    {
        writeLine = true;

        if (! inventPostingCache)
        {
            inventPostingCache = new Map(Types::Container, Types::Int64);
        }

        super();

        InventDim inventDim = InventDim::find(invoiceTrans.InventDimId);

        this.initInventPosting();

        dynamicData.InventLocationId = inventDim.InventLocationId;

        this.prepareReportSubheader(inventDim.InventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareExtraLines</Name>
				<Source><![CDATA[
    final protected void prepareExtraLines(Amount _amount, str _txt)
    {
        super(_amount, _txt);
        writeLine = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareMarkupLine</Name>
				<Source><![CDATA[
    final protected void prepareMarkupLine(MarkupTrans _markupTrans)
    {
        super(_markupTrans);
        writeLine = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportHeader</Name>
				<Source><![CDATA[
    protected void prepareReportHeader()
    {
        super();

        this.clearCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReportSubheader</Name>
				<Source><![CDATA[
    protected void prepareReportSubheader(InventLocationId _location,
                                        Counter          _internalId = header.InternalId)
    {
        if (! inventLocationCache.in(_location))
        {
            inventLocationCache.add(_location);

            PrintoutTable_RU tmpPrintout = this.findPrintout(invoiceJour,
                                                             _location);
            this.finalizeSubheader();
            subHeader.createFromLocationId(_location,
                                           _internalId,
                                           tmpPrintout.JournalNum,
                                           invoiceJour.CustVendInvoiceJour::getOffSessionId_RU(),
                                           this.offReportType());
            subHeader.PrintoutType = this.defaultPrintoutType();
        }

        this.fetchSubheader(_location, _internalId);

        subHeader.TotalAmtWithVAT += dynamicData.LineAmountWithTax;
        subHeader.TotalAmtVAT     += dynamicData.vatAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateReportDesign</Name>
				<Source><![CDATA[
    //overloaded for Excel report
    final protected void preUpdateReportDesign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    //overloaded for Excel report
    public boolean prompt()
    {
        boolean ret;

        if (formletterJournalPrint)
        {
            ret = true;
        }
        else
        {
            if (filterDialog)
            {
                ret = true;
            }
            else
            {
                filterDialog = this.newDialog();
                ret          = filterDialog.prompt();
            }

            if (ret)
            {
                filterQueryRun = filterDialog.queryRun();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    protected Query query()
    {
        Query qr = new Query();
        qr.addDataSource(tableNum(PrintoutTable_RU));

        return qr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCreditNote</Name>
				<Source><![CDATA[
    final protected boolean reverseCreditNote()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeFormLetterReport</Name>
				<Source><![CDATA[
    //overloaded for Excel report
    final protected void storeFormLetterReport(CustVendInvoiceJour _invoiceJour, RefRecId _key)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferData</Name>
				<Source><![CDATA[
    final protected void transferData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>useRoundOff</Name>
				<Source><![CDATA[
    protected boolean useRoundOff()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDynamicLine</Name>
				<Source><![CDATA[
    protected void writeDynamicLine()
    {
        if (writeLine)
        {
            super();
        }
        else
        {
            lineNum --;
        }

        writeLine = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>