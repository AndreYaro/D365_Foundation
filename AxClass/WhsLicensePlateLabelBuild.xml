<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateLabelBuild</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLicensePlateLabelBuild</c> class is used to create license plate labels and printing them.
/// </summary>
public class WhsLicensePlateLabelBuild
{
    protected WHSLicensePlateLabel          label;
    protected WHSRFMenuItemTable            menuItemTable;
    protected WHSWorkTable                  workTable;
    protected WHSWorkLine                   printWorkLine;
    protected WHSWorkLine                   prevWorkLine;
    protected WHSWorkLine                   nextWorkLine;
    protected WHSWorkLine                   firstWorkLine;
    protected WHSWorkId                     workId;
    protected WHSUserId                     userId;
    protected real                          numNextLines;
    protected real                          numPrevLines;
    protected WhsWorkTransactionType        workTransactionType;
    protected LogisticsPostalAddress        toAddress;
    protected LogisticsPostalAddress        shipmentToAddress;
    private WHSLoadTable                    loadTable;
    private Map                             licensePlateLabelBuildConfigMap;
    private Set                             licensePlateLabelBuildSkipFieldsCurrentSet;
    private InventDimId                     transferOrderReceiveInventDimId;
    private boolean                         multipleRelatedWorks;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLicensePlateLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds license plate labels.
    /// </summary>
    /// <returns>
    /// The license plate label id.
    /// </returns>
    public WHSLabelId buildLicensePlateLabels()
    {
        WHSWorkLine     workLine;
        WHSLabelId      labelId;
        int             counter;
        EcoResReleasedProductUnitConverter      releasedProductUnitConverter;

        ttsbegin;

        releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

        if (this.isWorkUsedForLPLabelBuild())
        {
            if (nextWorkLine)
            {
                if (printWorkLine.RecId != 0)
                {
                    while select workLine
                    where workLine.WorkId    == printWorkLine.WorkId  &&
                          workLine.LineNum   > printWorkLine.LineNum
                    {
                        if (counter == numNextLines)
                        {
                            break;
                        }
                        this.insertSingleLabelPrintLine(workLine, releasedProductUnitConverter);
                        ++counter;
                    }

                    labelId = "@WAX402";
                }
                else
                {
                    this.insertSingleLabelMenuItem(releasedProductUnitConverter);
                }
            }
            else
            {
                if (printWorkLine.RecId != 0)
                {
                    labelId = this.insertSingleLabelPrintLine(nextWorkLine ? nextWorkLine : printWorkLine, releasedProductUnitConverter);
                }
                else
                {
                    this.insertSingleLabelMenuItem(releasedProductUnitConverter);
                }
            }
        }
        else
        {
            this.insertSingleLabelMenuItem(releasedProductUnitConverter);
        }

        if (!WHSDeferredReceivingSkipPrintContext::skipPrint())
        {
            this.printLabel();
        }

        ttscommit;

        return labelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected AccountName getAccountName(WHSWorkLine _workLine)
    {
        AccountName  accountName;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, AccountName)))
        {
            return accountName;
        }

        if (workTransactionType)
        {
            accountName = workTransactionType.findAccountName(label.AccountNum);
            
            if (label.AccountNum && !accountName)
            {
                return this.findAccountNameFromSourceDocumentDetails(_workLine.InventTransId, workTable.OrderNum, workTable.InventLocationId);
            }
        }                

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAccountNameFromSourceDocumentDetails</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal AccountName findAccountNameFromSourceDocumentDetails(
        InventTransId _inventTransId,
        WHSOrderNum _orderNum,
        InventLocationId _inventLocationId)
    {
        AccountName accountName;

        return accountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSFromName getFromName()
    {
        WHSFromName fromName;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, FromName)))
        {
            return fromName;
        }

        if (workTransactionType)
        {
            fromName = workTransactionType.findFromName(workTable, label);
        }

        return fromName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected LineNum getOrderLineNum(WHSWorkLine _workLine)
    {
        anytype     lineNum;

        if (!_workLine || this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, LineNum)))
        {
            return lineNum;
        }

        if (!_workLine.InventTransId)
        {
            lineNum = 0;
        }
        else if (workTransactionType)
        {
            lineNum = workTransactionType.findOrderLineNumFromInventTransId(_workLine.InventTransId);
        }

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSToName getToName()
    {
        WHSToName toName;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, ToName)))
        {
            return toName;
        }

        if (toAddress && this.useLogisticsLocationDescription(workTable.WorkTransType))
        {
            toName = LogisticsLocation::find(toAddress.Location).Description;
        }
        else if (workTransactionType)
        {
            toName = workTransactionType.findToName(workTable, label);
        }

        return toName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLogisticsLocationDescription</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean useLogisticsLocationDescription(WHSWorkTransType _workTransType)
    {
        return _workTransType == WHSWorkTransType::Sales || _workTransType == WHSWorkTransType::CrossDocking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentToName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSToName getShipmentToName()
    {
        WHSToName toName;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, ShipmentToName)))
        {
            return toName;
        }

        if (shipmentToAddress && this.useLogisticsLocationDescription(workTable.WorkTransType))
        {
            toName = LogisticsLocation::find(shipmentToAddress.Location).Description;
        }
        else if (workTransactionType)
        {
            toName = workTransactionType.findToName(workTable, label);
        }

        return toName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected AccountNum getAccountNum(WHSWorkLine _workLine)
    {
        AccountNum  accountNum;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, AccountNum)))
        {
            return accountNum;
        }

        if (workTransactionType && (_workLine.InventTransId || workTable.OrderNum))
        {
            return workTransactionType.findAccountNum(workTable, _workLine);
        }
        
        if (workTable.ShipmentId)
        {
            accountNum = WHSShipmentTable::find(workTable.ShipmentId).AccountNum;            
        }
        
        if (!accountNum)
        {
            accountNum = loadTable.AccountNum;
        }

        return accountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCarrierCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSCarrierCode getCarrierCode(WHSLoadId _loadId)
    {
        WHSCarrierCode  carrierCode;

        if (!_loadId || this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, CarrierCode)))
        {
            return carrierCode;
        }

        carrierCode = WHSLoadTable::find(_loadId).CarrierCode;

        return carrierCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustPurchaseOrder</Name>
				<Source><![CDATA[
    private CustPurchaseOrder getCustPurchaseOrder()
    {
        CustPurchaseOrder   custPurchaseOrder;

        if (workTransactionType)
        {
            custPurchaseOrder = workTransactionType.findCustPurchaseOrder(Label);
        }

        return custPurchaseOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromWMSLocationId</Name>
				<Source><![CDATA[
    private WMSLocationId getFromWMSLocationId(WHSWorkLine _workLine)
    {
        WMSLocationId   ret = _workLine.wmsLocationId;
        WHSWorkLine     tmpWorkLine;

        select firstonly wmsLocationId from tmpWorkLine
            where tmpWorkLine.WorkId == workTable.WorkId;

        ret = tmpWorkLine.wmsLocationId;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemIdSummary</Name>
				<Source><![CDATA[
    private ItemId getItemIdSummary()
    {
        WHSWorkLine     workLine;
        ItemId          itemId = nextWorkLine.ItemId;

        while select WorkType, ItemId from workLine
            where workLine.WorkId       == printWorkLine.WorkId  &&
                  workLine.LineNum      >= nextWorkLine.LineNum
        {
            if (workLine.WorkType   != nextWorkLine.WorkType ||
                workLine.ItemId     != nextWorkLine.ItemId)
            {
                itemId = "@WAX402";
                break;
            }
        }

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the license plate Id from the work line.
    /// </summary>
    /// <param name = "_workLine">The work line record.</param>
    /// <returns>The license plate Id.</returns>
    protected WHSLicensePlateId findLicensePlateId(WHSWorkLine _workLine)
    {
        WHSWorkInventTrans  workInventTrans;
        WHSLicensePlateId   licensePlateId = workTable.TargetLicensePlateId;

        if (!licensePlateId)
        {
            if (numPrevLines == 1)
            {
                if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(_workLine.WorkId))
                {
                    licensePlateId = this.queryLicensePlateFromTransactionReceipt(_workLine.WorkId, _workLine.LineNum, false);
                }
                else
                {
                    select firstonly InventTransIdTo from workInventTrans
                        where workInventTrans.WorkId    == _workLine.WorkId  &&
                              workInventTrans.LineNum   == _workLine.LineNum;

                    licensePlateId = InventDim::find(InventTrans::findTransId(workInventTrans.InventTransIdTo).InventDimId).LicensePlateId;
                }
            }
            else
            {
                WHSLicensePlateId tmpLicensePlateId;
                WHSWorkLine       tmpWorkLine;

                if (WHSInventoryTransactionConfigurationProvider::shouldUseWorkInventoryTransactionQuery(_workLine.WorkId))
                {
                    while select WorkType from tmpWorkLine
                        where tmpWorkLine.WorkId        == _workLine.WorkId      &&
                              tmpWorkLine.LineNum       <= _workLine.LineNum
                    {
                        if (tmpWorkLine.WorkType != _workLine.WorkType)
                        {
                            break;
                        }

                        licensePlateId = this.queryLicensePlateFromTransactionReceipt(_workLine.WorkId, _workLine.LineNum, true);

                        if (licensePlateId == "@WAX402")
                        {
                            break;
                        }

                        if (tmpLicensePlateId && licensePlateId != tmpLicensePlateId)
                        {
                            licensePlateId = "@WAX402";
                            break;
                        }

                        tmpLicensePlateId = licensePlateId;
                    }
                }
                else
                {
                    while select WorkType from tmpWorkLine
                        join InventTransIdTo from workInventTrans
                        where tmpWorkLine.WorkId        == _workLine.WorkId      &&
                              tmpWorkLine.LineNum       <= _workLine.LineNum        &&
                              workInventTrans.WorkId    == tmpWorkLine.WorkId    &&
                              workInventTrans.LineNum   == tmpWorkLine.LineNum
                    {
                        licensePlateId = InventDim::find(InventTrans::findTransId(workInventTrans.InventTransIdTo).InventDimId).LicensePlateId;

                        if (tmpWorkLine.WorkType != _workLine.WorkType)
                        {
                            break;
                        }

                        if (licensePlateId != tmpLicensePlateId)
                        {
                            licensePlateId = "@WAX402";
                            break;
                        }

                        tmpLicensePlateId = licensePlateId;
                    }
                }
            }
        }

        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryLicensePlateFromTransactionReceipt</Name>
				<Source><![CDATA[
    private WHSLicensePlateId queryLicensePlateFromTransactionReceipt(WHSWorkId _workId, WHSLineNum _lineNum, boolean _queryMultiple)
    {
        WHSLicensePlateId licensePlateId;
        WHSLicensePlateId tmpLicensePlateId;

        // We don't foresee that we will reach this method under normal circumstances.
        // Added support of the new stack just to make sure we don't introduce a potential regression - especially when those APIs are used in the ways we can predict from the core code.
        // Logging the corresponding telemetry so we can deprecate this code if we don't see wide usage in customer environments.
        this.logUnexpectedUsage();

        WHSWorkInventoryTransactionDescriptor inventoryUpdateDescriptor = WHSWorkInventoryTransactionQuery::newFromWorkId(_workId).registeredReceiptByWorkLine(
            _lineNum,
            WHSWorkInventoryTransactionQueryParameters::construct()
                .setFirstOnly(!_queryMultiple));

        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = inventoryUpdateDescriptor.getEnumerator();
        while (enumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement inventoryTransactionDescriptorElement = enumerator.current();

            licensePlateId = inventoryTransactionDescriptorElement
                .parmInventoryDimensionsDescriptor()
                .parmStorageDimensions()
                .parmLicensePlateId();

            if (tmpLicensePlateId && licensePlateId != tmpLicensePlateId)
            {
                licensePlateId = "@WAX402";
                break;
            }

            tmpLicensePlateId = licensePlateId;
        }

        return licensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logUnexpectedUsage</Name>
				<Source><![CDATA[
    private void logUnexpectedUsage()
    {
        SysInstrumentationEventDataJsonSerializer serializer = new SysInstrumentationEventDataJsonSerializer();

        serializer.setValue(classStr(WHSLicensePlateLabelBuild), methodStr(WHSLicensePlateLabelBuild, queryLicensePlateFromTransactionReceipt));
        serializer.setValue('CallStack', WHSInstrumentationLogger::currentStackTrace());
 
        Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation.XppRuntimeEventSource::EventWriteInfoLogMark(Exception::Info, serializer.toString());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadLine</Name>
				<Source><![CDATA[
    private WHSLoadLine getLoadLine(WHSWorkLine _workLine)
    {
        WHSLoadLine         loadLine;
        InventTransOrigin   inventTransOrigin;

        // Skip fetching load line if we want to skip initialization of Carrier code and Pro number as it is used only to fetch these two fields from WHSLoadTable
        if (!_workLine 
            ||this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, CarrierCode))
            || this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, ProNum)))
        {
            return loadLine;
        }

        select firstonly LoadId, ShipmentId from loadLine
            where loadLine.OrderNum == label.OrderNum
                exists join inventTransOrigin
                    where inventTransOrigin.ReferenceCategory == loadLine.InventTransType
                       && inventTransOrigin.InventTransId == _workLine.InventTransId;

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumNextLines</Name>
				<Source><![CDATA[
    private real getNumNextLines()
    {
        WHSWorkLine     tmpWorkLine;
        LineNum         lineNum;
        real            ret;

        if (nextWorkLine.LineNum)
        {
            while select LineNum, WorkType from tmpWorkLine
                where tmpWorkLine.WorkId    == printWorkLine.WorkId  &&
                      tmpWorkLine.LineNum    > nextWorkLine.LineNum
            {
                if (tmpWorkLine.WorkType != nextWorkLine.WorkType)
                {
                    break;
                }
                lineNum = tmpWorkLine.LineNum;
            }

            if (!lineNum || lineNum == nextWorkLine.LineNum)
            {
                ret = 1;
            }
            else
            {
                ret = lineNum - printWorkLine.LineNum;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumPrevLines</Name>
				<Source><![CDATA[
    private real getNumPrevLines()
    {
        WHSWorkLine     tmpWorkLine;
        LineNum         lineNum;
        real            ret;

        if (prevWorkLine.LineNum)
        {
            while select LineNum, WorkType from tmpWorkLine
                where tmpWorkLine.WorkId    == printWorkLine.WorkId  &&
                      tmpWorkLine.LineNum    < prevWorkLine.LineNum
            {
                if (tmpWorkLine.WorkType != prevWorkLine.WorkType)
                {
                    break;
                }
                lineNum = tmpWorkLine.LineNum;
            }

            lineNum = tmpWorkLine.LineNum;

            if (!lineNum || lineNum == prevWorkLine.LineNum)
            {
                ret = 1;
            }
            else
            {
                ret = prevWorkLine.LineNum - lineNum + 1;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected WHSProNum getProNum(WHSShipmentId _shipmentId)
    {
        WHSProNum proNum;

        if (!_shipmentId || this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, ProNum)))
        {
            return proNum;
        }

        proNum = WHSShipmentTable::find(_shipmentId).ProNum;

        return proNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtySummary</Name>
				<Source><![CDATA[
    private Qty getQtySummary()
    {
        WHSWorkLine     workLine;
        Qty             qty;

        while select WorkType, QtyWork from workLine
            where workLine.WorkId       == printWorkLine.WorkId  &&
                  workLine.LineNum      >= nextWorkLine.LineNum
        {
            if (workLine.WorkType != nextWorkLine.WorkType)
            {
                break;
            }
            qty += workLine.QtyWork;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLabelToLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get To location id for label.
    /// </summary>
    /// <param name = "_workLine">The Work Line record.</param>
    /// <returns>To location id for label.</returns>
    protected WMSLocationId getLabelToLocationId(WHSWorkLine _workLine)
    {
        WHSWorkLine     tmpWorkLine;

        // Get the last line's location
        select firstonly wmsLocationId from tmpWorkLine
            order by tmpWorkLine.LineNum desc
            where tmpWorkLine.WorkId == workTable.WorkId;

        WMSLocationId ret = tmpWorkLine.wmsLocationId;

        if (!ret)
        {
            // Get the Next Line's Location
            while select tmpWorkLine
                where tmpWorkLine.WorkId    == _workLine.WorkId  &&
                      tmpWorkLine.LineNum    > _workLine.LineNum
            {
                if (tmpWorkLine.WorkType != _workLine.WorkType)
                {
                    ret = tmpWorkLine.wmsLocationId;
                    break;
                }
                if (tmpWorkLine.wmsLocationId != ret)
                {
                    ret = "@WAX402";
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkCenterLocationId</Name>
				<Source><![CDATA[
    private WMSLocationId getWorkCenterLocationId()
    {
        WMSLocationId   wmsLocationId;

        if (this.shouldSkipFieldInitialization(fieldStr(WHSLicensePlateLabel, WorkCenterLocationId)))
        {
            return wmsLocationId;
        }

        if (workTransactionType)
        {
            wmsLocationId = workTransactionType.findWorkCenterLocationId(workTable);
        }

        return wmsLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkTemplateCode</Name>
				<Source><![CDATA[
    private WHSWorkTemplateCode getWorkTemplateCode(WHSWorkLine _workLine)
    {
        return WHSWorkTable::find(_workLine.WorkId).WorkTemplateCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelFromInventDimParm</Name>
				<Source><![CDATA[
    private void initLabelFromInventDimParm(
        InventDim     _inventDim,
        InventDimParm _inventDimParm)
    {
        if (this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupProductDimensions)
        && this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupTrackingDimensions))
        {
            return;
        }

        ListEnumerator  enumerator  = InventDim::dimFieldListEnumerator();

        while (enumerator.moveNext())
        {
            FieldId inventDimFieldId     = enumerator.current();
            FieldId inventDimParmFieldId = InventDim::dim2dimParm(inventDimFieldId);
            str inventDimFieldValue      = _inventDim.(inventDimFieldId);

            if (_inventDimParm.(inventDimParmFieldId) && inventDimFieldValue)
            {
                str fieldName = fieldId2name(tableNum(InventDim), inventDimFieldId);
                if (fieldName2id(label.TableId, fieldName) != 0)
                {
                    label.setFieldValue(fieldName, inventDimFieldValue);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initToAddress</Name>
				<Source><![CDATA[
    private void initToAddress(WHSWorkLine _workLine)
    {
        if (!_workLine || this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupToAddress))
        {
            return;
        }

        if (workTransactionType)
        {
            if (label.OrderNum)
            {
                toAddress = workTransactionType.findToAddress(workTable, label);
            }
            else
            {
                loadTable = this.findWorkLineLoad(_workLine);
            
                if (loadTable)
                {
                    toAddress = LogisticsPostalAddress::findRecId(loadTable.DestinationPostalAddress);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShipmentToAddress</Name>
				<Source><![CDATA[
    private void initShipmentToAddress(WHSWorkLine _workLine)
    {
        
        if (!_workLine || this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupShipmentToAddress))
        {
            return;
        }

        if (workTransactionType)
        {
            if (label.OrderNum)
            {
                shipmentToAddress = workTransactionType.findToAddress(workTable, label);
            }
            else
            {
                shipmentToAddress = this.findShipmentToAddress(_workLine);
            }
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the label from a <c>WHSWorkLine</c> record.
    /// </summary>
    /// <param name="_workLine">
    /// The _workline used to initialize the label.
    /// </param>
    /// <param name="_converter">
    /// Product Unit Converter which is used in the method.
    /// </param>
    [Hookable(false)]
    protected void initLabel(WHSWorkLine _workLine, EcoResReleasedProductUnitConverter _converter)
    {
        InventTransOrigin inventTransOrigin;
        
        if (_workLine.InventTransId)
        {
            inventTransOrigin = InventTransOrigin::findByInventTransId(_workLine.InventTransId);
        }

        InventDim inventDimTrans = this.initInventDimTrans(_workLine, inventTransOrigin);

        InventDim inventDim = _workLine.inventDim();
        // Despite the fact that there can be more than one inventory transaction with different batch/serial numbers,
        // We made an explicit decision to take the first of the corresponding inventory transactions for the batch/serial below case.
        inventDimTrans.mergeUsedDim(InventDimGroupSetup::newItemId(_workLine.ItemId), inventDim);
               
        this.initLicensePlateLabelBuildConfigCache(workTable);
        this.initializeLicensePlateLabelFromWorkTable();

        this.initToAddress(_workLine);
        this.initShipmentToAddress(_workLine);

        if (!label.OrderNum && _workLine.InventTransId)
        {
            label.OrderNum          = inventTransOrigin.ReferenceId;
        }

        label.ItemId                = _workLine.ItemId;
        label.ShipmentId            = _workLine.ShipmentId;
        this.setPackingQty(_workLine);
        label.ItemName              = InventTable::find(label.ItemId).defaultProductName();
        label.Qty                   = _workLine.QtyWork;
        label.UnitID                = _workLine.UnitId;
        label.InventUnitId          = WHSCatchWeightHelper::inventHandlingUnitId(label.ItemId);
        label.InventQty             = _converter.convert(label.Qty,
                                                    UnitOfMeasure::findBySymbol(label.UnitID).RecId,
                                                    UnitOfMeasure::findBySymbol(label.InventUnitId).RecId,
                                                    NoYes::No,
                                                    label.ItemId,
                                                    inventDim.InventDimId,
                                                    NoYes::No);
        this.setOrderedAndRemainQty(_workLine);

        label.LineNum               = this.getOrderLineNum(_workLine);
        label.AccountNum            = this.getAccountNum(_workLine);
        label.AccountName           = this.getAccountName(_workLine);
        label.ToName                = this.getToName();
        label.ShipmentToName        = this.getShipmentToName();
        label.FromName              = this.getFromName();
        label.UserId                = userId;
        label.WorkCenterLocationId  = this.getWorkCenterLocationId();
        label.WorkTemplateCode      = this.getWorkTemplateCode(_workLine);

        label.UCCCompanyPrefix      = WHSParameters::find().UCCCompanyPrefix;

        label.Weight                = InventTable::find(label.ItemId).grossWeight() * label.InventQty;

        this.initLabelInventDims(inventDimTrans);

        this.labelInitialized(label, _workLine, _converter, this);

        this.initializeLabelFromWorkLines(firstWorkLine, firstWorkLine);

        label.LicensePlateId = workTable.TargetLicensePlateId;
        
        this.initLabelExceptionType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimTrans</Name>
				<Source><![CDATA[
    private InventDim initInventDimTrans(WHSWorkLine _workLine, InventTransOrigin _inventTransOrigin)
    {
        InventDim inventDimTrans;

        if (_workLine.InventTransId
            && _workLine.whsWorkTable().WorkTransType != WHSWorkTransType::TransferIssue
            && _inventTransOrigin.ReferenceCategory == InventTransType::TransferOrderShip)
        {
            if (transferOrderReceiveInventDimId)
            {
                inventDimTrans = InventDim::find(transferOrderReceiveInventDimId);
            }
            else
            {
                InventTransferLine inventTransferLine = _inventTransOrigin.originator();

                if (workTable.TargetLicensePlateId)
                {
                    InventDim inventDimCriteria;
                    inventDimCriteria.LicensePlateId = workTable.TargetLicensePlateId;

                    InventDimParm inventDimParm;
                    inventDimParm.initFromInventDim(inventDimCriteria);

                    InventTrans inventTrans;
                    InventTransOrigin inventTransOrigin;
                    InventDim inventDim;

                    select firstonly inventDimId from inventTrans
                        order by inventTrans.inventDimId, inventTrans.RecId
                        exists join inventTransOrigin
                            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                               && inventTransOrigin.InventTransId == inventTransferLine.InventTransIdReceive
                        #InventDimExistsJoin(inventTrans.inventDimId, inventDim, inventDimCriteria, inventDimParm);

                    inventDimTrans = inventTrans.inventDim();
                }

                if (!inventDimTrans.RecId)
                {
                    inventDimTrans = InventDim::find(InventTrans::findTransId(inventTransferLine.InventTransIdReceive).inventDimId);
                }
            }
        }

        if (!inventDimTrans)
        {
            inventDimTrans = _workLine.findInventTransDim();
        }

        return inventDimTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelInventDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void initLabelInventDims(InventDim _inventDim)
    {
        InventDimParm inventDimParm;

        this.setAllProductDimensions(inventDimParm);
        this.setAllTrackingDimensions(inventDimParm);

        this.initLabelFromInventDimParm(_inventDim, inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for adding additional initialization logic for the label.
    /// </summary>
    /// <param name = "_label">License plate label being created.</param>
    /// <param name = "_workLine">Work line used to initialize the label.</param>
    /// <param name = "_converter">Unit of measure converter.</param>
    /// <param name = "_labelBuilder">License plate label builder class instance.</param>
    delegate void labelInitialized(WHSLicensePlateLabel _label, WHSWorkLine _workLine, EcoResReleasedProductUnitConverter _converter, WHSLicensePlateLabelBuild _labelBuilder)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLabelExceptionType</Name>
				<Source><![CDATA[
    private void initLabelExceptionType()
    {
        if (multipleRelatedWorks)
        {
            label.LabelExceptionType = WHSLicensePlateLabelExceptionType::MultipleRelatedWorks;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findShipmentToAddress</Name>
				<Source><![CDATA[
    private LogisticsPostalAddress findShipmentToAddress(WHSWorkLine _workLine)
    {
        LogisticsPostalAddress localToAddress;

        WHSShipmentTable shipment = WHSShipmentTable::find(workTable.ShipmentId);
        localToAddress = LogisticsPostalAddress::findRecId(shipment.DeliveryPostalAddress);
        
        if (!localToAddress)
        {
            loadTable = this.findWorkLineLoad(_workLine);
            localToAddress = LogisticsPostalAddress::findRecId(loadTable.DestinationPostalAddress);
        }
        
        return localToAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkLineLoad</Name>
				<Source><![CDATA[
    private WHSLoadTable findWorkLineLoad(WHSWorkLine _workLine)
    {
        WHSLoadTable workLineLoadTable;
        WHSWorkLine workLine;

        select firstonly LoadLineRefRecId from workLine
            where workLine.LoadLineRefRecId
               && workLine.WorkId == _workLine.WorkId;

        if (workLine.LoadLineRefRecId)
        {
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(workLine.LoadLineRefRecId);
            workLineLoadTable = WHSLoadTable::find(loadLine.LoadId);
        }

        return workLineLoadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLicensePlateLabelFromWorkTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes license plate label from the work header.
    /// </summary>
    protected void initializeLicensePlateLabelFromWorkTable()
    {
        label.clear();
        label.setLabelId();
        label.UserId              = userId;
        label.WorkId              = workTable.WorkId;
        label.WorkTransType       = workTable.WorkTransType;
        label.OrderNum            = workTable.OrderNum;
        label.InventSiteId        = workTable.InventSiteId;
        label.InventLocationId    = workTable.InventLocationId;

        if (workTable.LoadId)
        {
            label.CarrierCode = this.getCarrierCode(workTable.LoadId);
        }

        if (workTable.ShipmentId)
        {
            label.ProNum      = this.getProNum(workTable.ShipmentId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSingleLabelMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a single label as a menu item.
    /// </summary>
    /// <param name = "_converter">The unit converter.</param>
    /// <returns>The ID of the created label.</returns>
    protected final WHSLabelId insertSingleLabelMenuItem(EcoResReleasedProductUnitConverter _converter)
    {
        ttsbegin;

        this.initLabel(firstWorkLine, _converter);

        label.insert();

        ttscommit;

        return label.LabelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSingleLabelPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a single label to be printed for a work line.
    /// </summary>
    /// <param name = "_workLine">The work line.</param>
    /// <param name = "_converter">The unit converter.</param>
    /// <returns>The ID of the created label.</returns>
    protected final WHSLabelId insertSingleLabelPrintLine(WHSWorkLine _workLine, EcoResReleasedProductUnitConverter _converter)
    {
        ttsbegin;

        this.initLabel(_workLine, _converter);

        this.initializeLabelFromWorkLines(_workLine, nextWorkLine);
        label.LicensePlateId        = this.findLicensePlateId(_workLine);

        this.setToAddress();
        this.setShipmentToAddress();
        this.setFromAddress();
        label.CustPurchaseOrder     = this.getCustPurchaseOrder();
        label.insert();

        ttscommit;

        return label.LabelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLabelFromWorkLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes location and zone for label from work lines.
    /// </summary>
    /// <param name = "_fromWorkLine">The work line with the from location.</param>
    /// <param name = "_toWorkLine">The work line with the to location.</param>
    protected void initializeLabelFromWorkLines(WHSWorkLine _fromWorkLine, WhsWorkLine _toWorkLine)
    {
        label.wmsLocationIdFrom     = this.getFromWMSLocationId(_fromWorkLine);
        label.ZoneIdFrom            = WMSLocation::find(label.wmsLocationIdFrom, workTable.InventLocationId).ZoneId;
        label.wmsLocationIdTo       = this.getLabelToLocationId(_toWorkLine);
        label.ZoneIdTo              = WMSLocation::find(label.wmsLocationIdTo, workTable.InventLocationId).ZoneId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(
        WHSWorkId          _workId,
        WHSWorkLine        _workLine = null,
        WHSMenuItemName    _menuItemName = '',
        WHSUserId          _userId = '')
    {
        if (!_workId)
        {
            throw error("@WAX2249");
        }

        // Set the User Id
        userId = _userId;

        // Set the Print Work Line global variable
        printWorkLine = _workLine;

        // Find the Work Header
        workTable = WHSWorkTable::find(_workId);
        workTransactionType = WhsWorkTransactionType::singletonFromType(workTable.WorkTransType);

        // Find both the previous and next Work Lines
        if (printWorkLine.RecId != 0)
        {
            prevWorkLine = WHSWorkLine::find(printWorkLine.WorkId, printWorkLine.LineNum - 1);
            nextWorkLine = WHSWorkLine::find(printWorkLine.WorkId, printWorkLine.LineNum + 1);

            // Determine the number of lines before and after the current print line
            numNextLines = this.getNumNextLines();
            numPrevLines = this.getNumPrevLines();
        }
        else
        {
            firstWorkLine = WHSWorkLine::find(_workId, 1);
            menuItemTable = WHSRFMenuItemTable::find(_menuItemName);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLicensePlateLabelForPrintLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes license plate label for print label.
    /// </summary>
    /// <param name = "_licensePlateLabel">The license plate label record.</param>
    protected void initializeLicensePlateLabelForPrintLabel(WHSLicensePlateLabel _licensePlateLabel)
    {
        _licensePlateLabel.PrintedDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDocumentRouting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document routing.
    /// </summary>
    /// <returns>The created document routing.</returns>
    protected WHSDocumentRouting createDocumentRouting()
    {
        return WHSDocumentRouting::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useLicensePlateLabelPrintEnumerator</Name>
				<Source><![CDATA[
    internal boolean useLicensePlateLabelPrintEnumerator()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints license plate label using document routing.
    /// </summary>
    protected void printLabel()
    {
        WHSDocumentRouting          documentRouting = this.createDocumentRouting();
        WHSLicensePlateLabel        licensePlateLabel;
        WHSLastPrintedLicensePlate  lastPrintedLP;

        if (WHSDeferredReceivingPrintLabelFlight::instance().isEnabled() && this.useLicensePlateLabelPrintEnumerator())
        {
            ttsbegin;

            WHSLicensePlateLabelPrintWithoutWorkEnumerator enumerator = WHSLicensePlateLabelPrintWithoutWorkEnumerator::newFromLicensePlateId(label.LicensePlateId);
            while (enumerator.moveNext())
            {
                licensePlateLabel = enumerator.current();
                this.printSingleLabel(licensePlateLabel, documentRouting);
                lastPrintedLP = licensePlateLabel.LicensePlateId;
            }

            ttscommit;
        }
        else
        {
            ttsbegin;

            while select forupdate licensePlateLabel
                where licensePlateLabel.PrintedDate == dateNull() &&
                      (!this.isWorkUsedForLPLabelBuild() || licensePlateLabel.WorkId == workTable.WorkId)
            {
                this.printSingleLabel(licensePlateLabel, documentRouting);

                lastPrintedLP = licensePlateLabel.LicensePlateId;
            }

            ttscommit;

            if (lastPrintedLP)
            {
                WHSWorkUserSession::updateLastPrintedLicensePlate(userId, lastPrintedLP);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSingleLabel</Name>
				<Source><![CDATA[
    private void printSingleLabel(WHSLicensePlateLabel _licensePlateLabel, WHSDocumentRouting _documentRouting)
    {
        this.initializeLicensePlateLabelForPrintLabel(_licensePlateLabel);

        if (this.canUpdateLicensePlateLabel(_licensePlateLabel))
        {
            _licensePlateLabel.update();
        }

        _documentRouting.printDocument(_licensePlateLabel.WorkTransType, _licensePlateLabel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkUsedForLPLabelBuild</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isWorkUsedForLPLabelBuild()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateLicensePlateLabel</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canUpdateLicensePlateLabel(WHSLicensePlateLabel _licensePlateLabel)
    {
        return true; // Used as an extension point.
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFromAddress</Name>
				<Source><![CDATA[
    private void setFromAddress()
    {
        if (this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupFromAddress))
        {
            return;
        }

        LogisticsPostalAddress  address;
        
        if (workTransactionType)
        {
            address = workTransactionType.findFromAddress(workTable, label);
        }

        this.initializeFromAddressFields(address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromAddressFields</Name>
				<Source><![CDATA[
    protected void initializeFromAddressFields(LogisticsPostalAddress _fromAddress)
    {

        label.AddressCityFrom         = _fromAddress.City;
        label.AddressStateIdFrom      = _fromAddress.State;
        label.AddressStreetFrom       = _fromAddress.Street;
        label.AddressZipCodeIdFrom    = _fromAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderedAndRemainQty</Name>
				<Source><![CDATA[
    public void setOrderedAndRemainQty(WHSWorkLine _workLine)
    {
        if (workTransactionType)
        {
            [label.OrderedQty, label.RemainingQty] = workTransactionType.findOrderedAndRemainQty(workTable, _workLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPackingQty</Name>
				<Source><![CDATA[
    private void setPackingQty(WHSWorkLine _workLine)
    {
        if (_workLine.LoadLineRefRecId)
        {
            label.PackingQty = WHSLoadLine::findbyRecId(_workLine.LoadLineRefRecId).PackingQty;
        }
        else
        {
            label.PackingQty = WHSInventTable::getDefaultPackingQty(_workLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setToAddress</Name>
				<Source><![CDATA[
    private void setToAddress()
    {        
        if (toAddress)
        {
            this.initializeToAddressFields(toAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setShipmentToAddress</Name>
				<Source><![CDATA[
    private void setShipmentToAddress()
    {
        if (shipmentToAddress)
        {
            this.initializeShipmentToAddressFields(shipmentToAddress);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeToAddressFields</Name>
				<Source><![CDATA[
    protected void initializeToAddressFields(LogisticsPostalAddress _toAddress)
    {
        label.AddressCityTo      = _toAddress.City;
        label.AddressStateIdTo   = _toAddress.State;
        label.AddressStreetTo    = _toAddress.Street;
        label.AddressZipCodeIdTo = _toAddress.ZipCode;
        label.CountryRegionIdTo  = _toAddress.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeShipmentToAddressFields</Name>
				<Source><![CDATA[
    protected void initializeShipmentToAddressFields(LogisticsPostalAddress _toAddress)
    {
        label.ShipmentAddressCityTo      = _toAddress.City;
        label.ShipmentAddressStateIdTo   = _toAddress.State;
        label.ShipmentAddressStreetTo    = _toAddress.Street;
        label.ShipmentAddressZipCodeIdTo = _toAddress.ZipCode;
        label.ShipmentCountryRegionIdTo  = _toAddress.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNestedLicensePlateLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and prints License Plate Labels records based on <c>WHSLicensePLate</c> table
    /// </summary>
    /// <param name="_parentLicensePlate">
    /// Parent License plate
    /// </param>
    /// <remarks>
    /// If parent license plate has no nested license plates a single record is created
    /// </remarks>
    public void buildNestedLicensePlateLabels(WHSLicensePlateId _parentLicensePlate)
    {
        WHSLicensePlate   whsLicensePlate;
        RecordInsertList  recordInsertList;

        if (WHSLicensePlate::exist(_parentLicensePlate))
        {
            ttsbegin;

            recordInsertList = new RecordInsertList(tableNum(WHSLicensePlateLabel));
            
            this.initializeLicensePlateLabelFromWorkTable();
            label.LicensePlateId = _parentLicensePlate;
            recordInsertList.add(label);

            if (WHSLicensePlate::find(_parentLicensePlate).LicensePlateLevel > 0)
            {
                while select LicensePlateId from whsLicensePlate
                    where whsLicensePlate.LicensePlateParent == _parentLicensePlate
                {
                    this.initializeLicensePlateLabelFromWorkTable();
                    label.LicensePlateId = whsLicensePlate.LicensePlateId;
                    recordInsertList.add(label);
                }
            }

            recordInsertList.insertDatabase();

            ttscommit;
        }

        if (!WHSDeferredReceivingSkipPrintContext::skipPrint() || !WHSDeferredLPReceivingFlight::instance().isEnabled())
        {
            this.printLabel();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildAllLicensePlateLabels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and prints License Plate Labels for nested license plate or non-nested license plate.
    /// </summary>
    /// <param name="_parentLicensePlate">
    /// Parent License plate
    /// </param>
    /// <remarks>
    /// If parent license plate has nested license plates, multiple license plate labels are created.
    /// If parent license plate has no nested license plate, a single license plate label is created.
    /// </remarks>
    public void buildAllLicensePlateLabels(WHSLicensePlateId _parentLicensePlate)
    {
        WHSLicensePlate   whsLicensePlate = WHSLicensePlate::find(_parentLicensePlate);
        
        if (whsLicensePlate && whsLicensePlate.LicensePlateLevel > 0)
        {
            this.buildNestedLicensePlateLabels(whsLicensePlate.LicensePlateId);
        }
        else
        {
            this.buildLicensePlateLabels();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateLabelBuildConfigMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores or Retrieves the cached configuration data map. This can be used by the other delegate handlers to avoid the refetch of data that is already cached.
    /// </summary>
    /// <param name = "_licensePlateLabelBuildConfigMap">cached configuration data map</param>
    /// <returns>
    /// cached configuration data map
    /// </returns>
    [Hookable(false)]
    public Map parmLicensePlateLabelBuildConfigMap(Map _licensePlateLabelBuildConfigMap = licensePlateLabelBuildConfigMap)
    {
        licensePlateLabelBuildConfigMap = _licensePlateLabelBuildConfigMap;

        return licensePlateLabelBuildConfigMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLicensePlateLabelBuildSkipFieldsCurrentSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///Stores or Retrieves the currently in use cached configuration data set. This can be used by the other delegate handlers to avoid the refetch of data that is already cached.
    /// </summary>
    /// <param name = "_licensePlateLabelBuildSkipFieldsCurrentSet">cached configuration data set</param>
    /// <returns>
    /// cached configuration data set
    /// </returns>
    [Hookable(false)]
    public Set parmLicensePlateLabelBuildSkipFieldsCurrentSet(Set _licensePlateLabelBuildSkipFieldsCurrentSet = licensePlateLabelBuildSkipFieldsCurrentSet)
    {
        licensePlateLabelBuildSkipFieldsCurrentSet = _licensePlateLabelBuildSkipFieldsCurrentSet;

        return licensePlateLabelBuildSkipFieldsCurrentSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLicensePlateLabelBuildConfigCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the license plate label build configuration data in the local cached data.
    /// </summary>
    /// <param name = "_workTable">Work table used to get the configuration data.</param>    
    private void initLicensePlateLabelBuildConfigCache(WHSWorkTable _workTable)
    {
        WhsLicensePlateLabelBuildConfig licensePlateLabelBuildConfig = WhsLicensePlateLabelBuildConfig::findLicensePlateLabelBuildConfig(_workTable.WorkTemplateCode, _workTable.WorkTransType);

        if (!licensePlateLabelBuildConfig)
        {
            // No label build configuration is in use
            licensePlateLabelBuildSkipFieldsCurrentSet = null;
            return;
        }

        if (licensePlateLabelBuildConfigMap)
        {
            if (licensePlateLabelBuildConfigMap.exists(licensePlateLabelBuildConfig.RecId))
            {
                // Reuse the already cached settings
                licensePlateLabelBuildSkipFieldsCurrentSet = licensePlateLabelBuildConfigMap.lookup(licensePlateLabelBuildConfig.RecId);
                return;
            }
        }
        else
        {
            // First use, start initialization of the map
            licensePlateLabelBuildConfigMap = new Map(Types::Int64, Types::Class);
        }

        // If we reach here, means that the given label build configuration is for the first time used and we do need to cache it
        licensePlateLabelBuildSkipFieldsCurrentSet = new Set(Types::String);

        WHSLicensePlateLabelBuildConfigSkipField licensePlateLabelBuildConfigSkipField;

        while select SkipFieldName from licensePlateLabelBuildConfigSkipField
            where licensePlateLabelBuildConfigSkipField.LicensePlateLabelBuildConfigRecId == licensePlateLabelBuildConfig.RecId
        {
            licensePlateLabelBuildSkipFieldsCurrentSet.add(licensePlateLabelBuildConfigSkipField.SkipFieldName);
        }

        licensePlateLabelBuildConfigMap.insert(licensePlateLabelBuildConfig.RecId, licensePlateLabelBuildSkipFieldsCurrentSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipFieldInitialization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the initialization of a given field should be skipped.
    /// </summary>
    /// <param name = "_skipFieldName">Fieldname to be verified.</param>
    /// <returns>true if initialization of the field should be skipped; otherwise, false.</returns>
    [Hookable(false)]
    protected boolean shouldSkipFieldInitialization(RefFieldName _skipFieldName)
    {
        if (!licensePlateLabelBuildSkipFieldsCurrentSet)
        {
            return false;
        }
                
        return licensePlateLabelBuildSkipFieldsCurrentSet.in(_skipFieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the product dimension groups to be initialized
    /// </summary>
    /// <param name = "_inventDimParm">related inventory dimension parameter record</param>
    private void setAllProductDimensions(InventDimParm _inventDimParm)
    {
        if (this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupProductDimensions))
        {
            return;
        }

        _inventDimParm.setAllProductDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllTrackingDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the tracking dimension groups to be initialized
    /// </summary>
    /// <param name = "_inventDimParm">related inventory dimension parameter record</param>
    private void setAllTrackingDimensions(InventDimParm _inventDimParm)
    {
        if (this.shouldSkipFieldInitialization(WhsLicensePlateLabelBuildConfiguration::FieldGroupTrackingDimensions))
        {
            return;
        }

        _inventDimParm.setAllTrackingDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferOrderReceiveInventDimId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimId parmTransferOrderReceiveInventDimId(InventDimId _transferOrderReceiveInventDimId = transferOrderReceiveInventDimId)
    {
        transferOrderReceiveInventDimId = _transferOrderReceiveInventDimId;
        return transferOrderReceiveInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMultipleRelatedWorks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmMultipleRelatedWorks(boolean _multipleRelatedWorks = multipleRelatedWorks)
    {
        multipleRelatedWorks = _multipleRelatedWorks;
        return multipleRelatedWorks;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>