<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymReceiptTaxInvDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymReceiptTaxInvDP</c> class is the report data provider class for the
/// <c>PaymReceiptTaxInv</c> report.
/// This report is used for Thailand only.
/// </summary>
[SRSReportParameterAttribute(classStr(PaymReceiptTaxInvContract))]
public class PaymReceiptTaxInvDP extends SRSReportDataProviderBase
{
    private const str ThaiPrefix = 'th';
    PaymReceiptTaxInvReportTmp          paymReceiptTaxInvReportTmp;
    PaymReceiptTaxInvContract           paymReceiptTaxInvContract;

    RecId                               custTransPaymId;
    CustSettlement                      custSettlePaym;
    CustTrans                           custTransInv;
    CustInvoiceJour                     custInvoiceJour;
    LedgerJournalTrans                  ledgerJournalTransInv;
    TaxTrans                            taxTrans;
    TaxTrans                            taxTransPaym;
    TaxTrans                            taxTransInv;
    Counter                             counter;
    InvoiceTaxType                      invoiceTaxType;
    boolean                             isReceipt;
    AmountMSTDebCred                    totalPaymAmountMST;
    TaxWithholdTrans                    taxWithholdTrans;
    CurrencyCode                        currencyCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>excuteSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the section.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void excuteSection()
    {
        boolean             isRealizedVAT;
        TempStr             totalInword;

        while select custSettlePaym
            group by custSettlePaym.SettleAmountCur,custSettlePaym.SettleAmountMST,
            custTransInv.RecId, custTransInv.Invoice, custTransInv.TransDate, custTransInv.DueDate, custTransInv.AmountCur, custTransInv.AmountMST,
            custInvoiceJour.LedgerVoucher,custInvoiceJour.InvoiceDate, custInvoiceJour.SumTax, custInvoiceJour.SumTaxMST,
            ledgerJournalTransInv.Voucher, ledgerJournalTransInv.TransDate
            where custSettlePaym.OffsetRecid    == custTransPaymId
            join custTransInv
                where custSettlePaym.TransRecId     == custTransInv.RecId
            outer join custInvoiceJour
                where custTransInv.Invoice          == custInvoiceJour.InvoiceId
                    && custTransInv.TransDate       == custInvoiceJour.InvoiceDate
                    && custTransInv.AccountNum      == custInvoiceJour.InvoiceAccount
            outer join ledgerJournalTransInv
                where custTransInv.Voucher          == ledgerJournalTransInv.Voucher
                    && custTransInv.TransDate       == ledgerJournalTransInv.TransDate
        {
            if (custInvoiceJour)
            {
                select firstOnly RecId from taxWithholdTrans
                    where taxWithholdTrans.CustTransInvoiceId   == custTransInv.RecId;

                taxTrans = TaxTrans::find(custInvoiceJour.LedgerVoucher, custInvoiceJour.InvoiceDate);
                if (taxTrans.RecId || taxWithholdTrans.RecId)
                {
                    isRealizedVAT = custInvoiceJour.isRealizedVAT();
                    if ((isReceipt && isRealizedVAT)
                        || (!isReceipt && !isRealizedVAT))
                    {
                        this.insertToTmpTable();
                    }
                }
            }
            else if (ledgerJournalTransInv)
            {
                select firstonly taxTrans
                    where taxTrans.Voucher == ledgerJournalTransInv.Voucher
                        && taxTrans.TransDate == ledgerJournalTransInv.TransDate;

                isRealizedVAT = TaxTable::isRealizedVAT(taxTrans.TaxCode);
                if (taxTrans.RecId)
                {
                    if ((isReceipt && isRealizedVAT)
                        || (!isReceipt && !isRealizedVAT))
                    {
                        this.insertToTmpTable();
                    }
                }
            }
        }

        if (strLwr(subStr(currentUserLanguage(), 1, 2)) == ThaiPrefix)
        {
            totalInword = numeralsToThaiTxt(abs(totalPaymAmountMST));
        }
        else
        {
            totalInword = numeralsToTxt(abs(totalPaymAmountMST));
        }
        update_recordSet paymReceiptTaxInvReportTmp
            setting TotalPaymAmountMSTInLetters = totalInword;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReceiptTaxInvReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets data from the <c>PaymReceiptTaxInvReportTmp_TH</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>PaymReceiptTaxInvReportTmp_TH</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(PaymReceiptTaxInvReportTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymReceiptTaxInvReportTmp getPaymReceiptTaxInvReportTmp()
    {
        select paymReceiptTaxInvReportTmp;
        return paymReceiptTaxInvReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoiceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// nitializes the invoice type.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initInvoiceType()
    {
        if (invoiceTaxType == InvoiceTaxType::Realized)
        {
            isReceipt = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertToTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the current data into <C>PaymReceiptTaxInvReportTmp</C>.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insertToTmpTable()
    {
        counter++;
        paymReceiptTaxInvReportTmp.Counter          = counter;
        paymReceiptTaxInvReportTmp.InvoiceNum       = custTransInv.Invoice;
        paymReceiptTaxInvReportTmp.InvoiceDate      = custTransInv.TransDate;
        paymReceiptTaxInvReportTmp.DueDate          = custTransInv.DueDate;
        paymReceiptTaxInvReportTmp.InvoiceAmountCur = custTransInv.AmountCur;
        paymReceiptTaxInvReportTmp.InvoiceAmountMST = custTransInv.AmountMST;
        paymReceiptTaxInvReportTmp.PaymAmountCur    = abs(custSettlePaym.SettleAmountCur);
        paymReceiptTaxInvReportTmp.PaymAmountMST    = custSettlePaym.SettleAmountMST;
        paymReceiptTaxInvReportTmp.CurrencyCode     = currencyCode;

        // sumtotal payment amount
        totalPaymAmountMST                          += paymReceiptTaxInvReportTmp.PaymAmountMST;

        if (custInvoiceJour)
        {
        paymReceiptTaxInvReportTmp.vatAmountCur     = custInvoiceJour.SumTax;
        paymReceiptTaxInvReportTmp.vatAmountMST     = custInvoiceJour.SumTaxMST;

            if (taxTrans)
            {
                select sum(TaxBaseAmount) from taxTrans
                    where taxTrans.Voucher      == custInvoiceJour.LedgerVoucher
                        && taxTrans.TransDate   == custInvoiceJour.InvoiceDate;

                paymReceiptTaxInvReportTmp.BaseAmount = - taxTrans.TaxBaseAmount;
            }
            if (taxWithholdTrans)
            {
                TaxWithholdTrans taxWithholdTransLoc;
                CustTrans custTransPaym = CustTrans::find(custTransPaymId);

                select TaxWithholdAmount, TaxWithholdBaseAmount from taxWithholdTransLoc
                    where taxWithholdTransLoc.CustTransInvoiceId == custTransInv.RecId
                        && taxWithholdTransLoc.Voucher == custTransPaym.Voucher
                        && taxWithholdTransLoc.TransDate == custTransPaym.TransDate;

                paymReceiptTaxInvReportTmp.InvoiceTaxWithholdAmount = -taxWithholdTransLoc.TaxWithholdAmount;
                paymReceiptTaxInvReportTmp.TaxWithholdBaseAmount = -taxWithholdTransLoc.TaxWithholdBaseAmount;
            }
        }
        else if (ledgerJournalTransInv)
        {
            if (taxTrans)
            {
                if (isFlightEnabled(LocalizationFlights::IgnoreChangesMadeInKB4617956ReceiptReport_TH))
                {
                    select sum(TaxBaseAmount),sum(TaxAmount),sum(TaxAmountCur) from taxTrans
                        where taxTrans.SourceRecId == ledgerJournalTransInv.RecId
                            && taxTrans.SourceTableId == tableNum(LedgerJournalTrans);
                }
                else
                {
                    select sum(TaxBaseAmount),sum(TaxAmount),sum(TaxAmountCur) from taxTrans
                        where taxTrans.Voucher == ledgerJournalTransInv.Voucher
                            && taxTrans.TransDate == ledgerJournalTransInv.TransDate;
                }
            }

            paymReceiptTaxInvReportTmp.vatAmountCur     =  - taxTrans.TaxAmountCur;
            paymReceiptTaxInvReportTmp.vatAmountMST     =  - taxTrans.TaxAmount;
            paymReceiptTaxInvReportTmp.BaseAmount       =  - taxTrans.TaxBaseAmount;
        }

        if (isReceipt)
        {
            totalPaymAmountMST += paymReceiptTaxInvReportTmp.InvoiceTaxWithholdAmount;
        }

        paymReceiptTaxInvReportTmp.insert();
        paymReceiptTaxInvReportTmp.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic.This method will be called by SSRS at
    ///    runtime.The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        paymReceiptTaxInvContract   = this.parmDataContract() as PaymReceiptTaxInvContract;

        invoiceTaxType          = paymReceiptTaxInvContract.parmInvoiceTaxType();
        custTransPaymId         = paymReceiptTaxInvContract.parmCustTransPaymId();
        currencyCode            = paymReceiptTaxInvContract.parmCurrencyCode();
        counter                 = 0;

        this.initInvoiceType();

        if (isFlightEnabled(LocalizationFlights::IgnoreChangesMadeInKB4617956ReceiptReport_TH))
        {
            this.excuteSectionWithFlight();
        }
        else
        {
            this.excuteSection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excuteSectionWithFlight</Name>
				<Source><![CDATA[
    private void excuteSectionWithFlight()
    {
        boolean isRealizedVAT;
        TempStr totalInword;

        while select custSettlePaym
            where custSettlePaym.OffsetRecid == custTransPaymId
            join custTransInv
                where custSettlePaym.TransRecId == custTransInv.RecId
            outer join custInvoiceJour
                where custTransInv.Invoice == custInvoiceJour.InvoiceId
                    && custTransInv.TransDate == custInvoiceJour.InvoiceDate
                    && custTransInv.AccountNum == custInvoiceJour.InvoiceAccount
            outer join ledgerJournalTransInv
                where custTransInv.Voucher == ledgerJournalTransInv.Voucher
                    && custTransInv.TransDate == ledgerJournalTransInv.TransDate
        {
            if (custInvoiceJour)
            {
                select firstOnly RecId from taxWithholdTrans
                    where taxWithholdTrans.CustTransInvoiceId == custTransInv.RecId;

                taxTrans = TaxTrans::find(custInvoiceJour.LedgerVoucher, custInvoiceJour.InvoiceDate);
                if (taxTrans.RecId || taxWithholdTrans.RecId)
                {
                    isRealizedVAT = custInvoiceJour.isRealizedVAT();
                    if ((isReceipt && isRealizedVAT)
                        || (!isReceipt && !isRealizedVAT))
                    {
                        this.insertToTmpTable();
                    }
                }
            }
            else if (ledgerJournalTransInv)
            {
                select firstonly taxTrans
                    where taxTrans.SourceRecId == ledgerJournalTransInv.RecId
                        && taxTrans.SourceTableId == tableNum(LedgerJournalTrans);

                isRealizedVAT = TaxTable::isRealizedVAT(taxTrans.TaxCode);
                if (taxTrans.RecId)
                {
                    if ((isReceipt && isRealizedVAT)
                        || (!isReceipt && !isRealizedVAT))
                    {
                        this.insertToTmpTable();
                    }
                }
            }
        }

        if (strLwr(subStr(currentUserLanguage(), 1, 2)) == ThaiPrefix)
        {
            totalInword = numeralsToThaiTxt(abs(totalPaymAmountMST));
        }
        else
        {
            totalInword = numeralsToTxt(abs(totalPaymAmountMST));
        }
        update_recordSet paymReceiptTaxInvReportTmp
            setting TotalPaymAmountMSTInLetters = totalInword;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>