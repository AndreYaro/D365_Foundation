<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateTableStatusType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Abstract class that holds the rebate processes specific to their current status.
/// </summary>
abstract public class PdsRebateTableStatusType
{
    PdsRebateTable pdsRebateTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the rebate can be deleted.
    /// </summary>
    /// <returns>
    /// true, if the rebate can be deleted; otherwise, false.
    /// </returns>
    public boolean canBeDeleted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a rebate record is inserted.
    /// </summary>
    public void inserting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a rebate record has been inserted.
    /// </summary>
    public void inserted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerPostingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate starting amount.
    /// </summary>
    /// <returns>
    /// The rebate starting amount.
    /// </returns>
    public Amount ledgerPostingAmount()
    {
        return pdsRebateTable.PdsStartingRebateAmt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsRebateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>PdsRebateTable</c> table record on which rebate process is performing.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// The <c>PdsRebateTable</c> table record.
    /// </param>
    /// <returns>
    /// The rebate table record.
    /// </returns>
    protected PdsRebateTable parmPdsRebateTable(Common _pdsRebateTable = pdsRebateTable)
    {
        if (!prmisdefault(_pdsRebateTable))
        {
            pdsRebateTable = _pdsRebateTable;
        }

        return pdsRebateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate status.
    /// </summary>
    /// <returns>
    /// The rebate status.
    /// </returns>
    abstract public PdsRebateStatus pdsRebateStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runApproved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the rebate approval is allowed or not.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Rebate approval is not allowed for the rebates of statuses Free, MarkForCredit, ToCalculate, Processed and Approved.
    /// </exception>
    public void runApproved()
    {
        throw error(strfmt("@PDS1507", this.PdsRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a rebate record is deleted.
    /// </summary>
    public void deleting()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a rebate record has been deleted.
    /// </summary>
    public void deleted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether rebate payment is allowed or not.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Rebate payment is not allowed for rebates of statuses Approved, ToCalculate and Processed.
    /// </exception>
    public void runPayment()
    {
        throw error(strfmt("@PDS1510", this.PdsRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether rebate processing is allowed or not.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Rebate processing is not allowed for rebates of statuses Calculated, ToCalculate and Processed.
    /// </exception>
    public void runProcessed(
        boolean _forAdjustment  = false)
    {
        throw error(strfmt("@PDS1511", this.PdsRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCancel</Name>
				<Source><![CDATA[
    public void runCancel()
    {
        throw error(strfmt("@SCM:RebateCancelNotAllowed", this.PdsRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPurge</Name>
				<Source><![CDATA[
    public void runPurge()
    {
        throw error(strfmt("@SCM:RebatePurgeNotAllowed", this.PdsRebateStatus()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFinalStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the rebate to the 'Processed' status.
    /// </summary>
    public void setFinalStatus()
    {
        pdsRebateTable.PdsRebateStatus = PdsRebateStatus::Processed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInitialStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the initial status of the rebate based on the cumulating type of the rebate agreement.
    /// </summary>
    public void setInitialStatus()
    {
        PdsRebateAgreement  pdsRebateAgreement = pdsRebateTable.pdsRebateAgreement();

        if (pdsRebateAgreement.PdsApprovalRequired      == NoYes::Yes
            && pdsRebateAgreement.PdsCumulateSalesBy    == PdsCumulationPeriod::Invoice)
        {
            pdsRebateTable.PdsRebateStatus    = PdsRebateStatus::Calculated;
        }
        else if (pdsRebateAgreement.PdsApprovalRequired == NoYes::Yes
            && pdsRebateAgreement.PdsCumulateSalesBy    != PdsCumulationPeriod::Invoice)
        {
            pdsRebateTable.PdsRebateStatus    = PdsRebateStatus::ToCalculate;
        }
        else
        {
            pdsRebateTable.PdsRebateStatus    = PdsRebateStatus::Approved;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets next status for rebates based on current statuses.
    /// </summary>
    public void setNextStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRebatesToCumulate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and sets the rebate amounts after cumulating.
    /// </summary>
    public void updateRebatesToCumulate()
    {
        pdsRebateTable.setCorrectedRebateAmount();
        pdsRebateTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates changes to a field in the <c>PdsRebateTable</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The field name to Validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// true if the value in the field change is valid; otherwise, false.
    /// </returns>
    public boolean validateFieldValue(fieldName _fieldName, int _arrayIndex = 1)
    {
        return pdsRebateTable.type().validateFieldValue(_fieldName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PdsRebateTableStatusType</c> class based on the reference buffer.
    /// </summary>
    /// <param name="_buffer">
    /// The reference buffer that decides which derived version of the class to instantiate.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsRebateTableStatusType</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The class cannot be instantiated based on the specified <paramref name="_buffer" /> parameter.
    /// </exception>
    public static PdsRebateTableStatusType newBuffer(Common _buffer)
    {
        PdsRebateTableStatusType    pdsRebateTableStatusType;
        PdsRebateTable              pdsRebateTable;

        switch (_buffer.TableId)
        {
            case tablenum(PdsRebateTable)  :
                pdsRebateTable = _buffer;
                break;
            default :
                throw error("@SYS72176");
        }

        pdsRebateTableStatusType = pdsRebateTableStatusType::initPdsRebateTableStatusType(pdsRebateTable);

        pdsRebateTableStatusType.parmPdsRebateTable(pdsRebateTable);

        return pdsRebateTableStatusType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPdsRebateTableStatusType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>PdsRebateTableStatusType</c> class based on PdsRebateStatus of PdsRebateTable.
    /// </summary>
    /// <param name="_pdsRebateTable">
    /// The table that decides which derived version of the class to instantiate.
    /// </param>
    /// <returns>
    /// A new instance of <c>PdsRebateTableStatusType</c> class.
    /// </returns>
    protected static pdsRebateTableStatusType initPdsRebateTableStatusType(PdsRebateTable _pdsRebateTable)
    {
        PdsRebateTableStatusType pdsRebateTableStatusType;

        switch (_pdsRebateTable.PdsRebateStatus)
        {
            case PdsRebateStatus::Approved :
                pdsRebateTableStatusType = PdsRebateTableStatusType_Approved::construct();
                break;

            case PdsRebateStatus::Calculated :
                pdsRebateTableStatusType = PdsRebateTableStatusType_Calculated::construct();
                break;

            case PdsRebateStatus::Free:
                pdsRebateTableStatusType = PdsRebateTableStatusType_Free::construct();
                break;

            case PdsRebateStatus::MarkForCredit :
                pdsRebateTableStatusType = PdsRebateTableStatusType_MarkForCredit::construct();
                break;

            case PdsRebateStatus::Processed :
                pdsRebateTableStatusType = PdsRebateTableStatusType_Processed::construct();
                break;

            case PdsRebateStatus::ToCalculate :
                pdsRebateTableStatusType = PdsRebateTableStatusType_ToCalculate::construct();
                break;

            case PdsRebateStatus::Canceled :
                pdsRebateTableStatusType = PdsRebateTableStatusType_Canceled::construct();
                break;
        }

        return pdsRebateTableStatusType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>