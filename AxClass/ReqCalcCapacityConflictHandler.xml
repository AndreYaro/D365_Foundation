<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcCapacityConflictHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class implements the handling of scheduling capacity conflicts for master planning.
/// </summary>
public class ReqCalcCapacityConflictHandler implements WrkCtrCapacityConflictHandlerInterface
{
    ReqProcessId processId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capacityConflict</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a capacity conflict for a given order ID.
    /// </summary>
    /// <param name="_orderId">
    /// The order ID.
    /// </param>
    public void capacityConflict(InventTransRefId _orderId)
    {
        ReqCalcCapacityConflictOrders capacityConflictOrders;

        capacityConflictOrders.RefId = _orderId;
        capacityConflictOrders.ProcessDataAreaId = curext();
        capacityConflictOrders.ProcessId = processId;

        capacityConflictOrders.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapacityConflictsCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the capacity conflicts count for the current capacity conflicts handler.
    /// </summary>
    /// <returns>
    /// The capacity conflicts count.
    /// </returns>
    public int getCapacityConflictsCount()
    {
        ReqCalcCapacityConflictOrders capacityConflictsOrders;

        select count(RecId) from capacityConflictsOrders
        where   capacityConflictsOrders.ProcessId == processId &&
                capacityConflictsOrders.ProcessDataAreaId == curext();

        return any2int(capacityConflictsOrders.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessId</Name>
				<Source><![CDATA[
        public ReqProcessId parmProcessId(ReqProcessId _processId = processId)
    {
        processId = _processId;
        return processId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static ReqCalcCapacityConflictHandler construct()
    {
        return new ReqCalcCapacityConflictHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProcessId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ReqCalcCapacityConflictHandler</c> class.
    /// </summary>
    /// <param name="_processId">
    /// The master scheduling process ID.
    /// </param>
    /// <returns>
    /// A new <c>ReqCalcCapacityConflictHandler</c> instance.
    /// </returns>
    public static ReqCalcCapacityConflictHandler newProcessId(ReqProcessId _processId)
    {
        ReqCalcCapacityConflictHandler capacityConflictHandler = ReqCalcCapacityConflictHandler::construct();

        capacityConflictHandler.parmProcessId(_processId);

        return capacityConflictHandler;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>