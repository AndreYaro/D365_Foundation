<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalAutomationCriteriaFormInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>CustVendPaymProposalAutomationCriteriaFormInteraction</c> class handles all form level interaction for individual uptake scenarios
/// of payment proposal automations.
/// </summary>
[ExportInterface]
internal abstract class CustVendPaymProposalAutomationCriteriaFormInteraction
{
    protected CustVendPaymProposalAutomationCriteriaFormState formState;

    private SysQueryRun sysQueryRun;
    private boolean isInitialized;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromFormState</Name>
				<Source><![CDATA[
    internal static CustVendPaymProposalAutomationCriteriaFormInteraction constructFromFormState(
        ProcessScheduleTypeName _typeName,
        CustVendPaymProposalAutomationCriteriaFormState _formState)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(extendedTypeStr(ProcessScheduleTypeName), _typeName);

        CustVendPaymProposalAutomationCriteriaFormInteraction automationCriteriaForm =
            SysPluginFactory::Instance('Dynamics.AX.Application', classStr(CustVendPaymProposalAutomationCriteriaFormInteraction), metadataCollection) as CustVendPaymProposalAutomationCriteriaFormInteraction;
        
        automationCriteriaForm.initialize(_formState);

        return automationCriteriaForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(CustVendPaymProposalAutomationCriteriaFormState _formState)
    {
        this.formState = _formState;

        this.validateCriteriaRecordExists();
        this.registerEventOverrides();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCriteriaRecordExists</Name>
				<Source><![CDATA[
    private void validateCriteriaRecordExists()
    {
        if (!isInitialized && !formState.initialSchedulingContract.parmIsCreation())
        {
            if (formState.initialSchedulingContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Series)
            {
                if (this.findAutomationCriteriaRecordForSeries(formState.initialSchedulingContract.getProcessScheduleSeriesData()).RecId == 0)
                {
                    throw error("@CashManagement:CustVendPaymProposalAutomationSeriesNotFound");
                }
            }
            else
            {
                if (this.findAutomationCriteriaRecordForOccurrence(formState.initialSchedulingContract.getProcessScheduleOccurrenceData()).RecId == 0)
                {
                    throw error("@CashManagement:CustVendPaymProposalAutomationOccurrenceNotFound");
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        return formState.controls.automationCriteria_ds.validateWrite();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    internal void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingContract)
    {
        this.setScheduleSeries(_schedulingContract.getProcessScheduleSeriesData().getSeriesRecId());
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    internal void updateScheduleSeries()
    {
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingContract)
    {
        this.setScheduleOccurrence(_schedulingContract.getProcessScheduleOccurrenceData().getOccurrenceRecId());
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void updateScheduledOccurrence()
    {
        this.writeToDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToDataSource</Name>
				<Source><![CDATA[
    private void writeToDataSource()
    {
        ttsbegin;

        FormDataSource dataSource = formState.controls.automationCriteria_ds;
        dataSource.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the existing automation criteria record from the given <c>ProcessScheduleSeries</c> table buffer.
    /// </summary>
    /// <param name = "_processScheduleSeries">The <c>ProcessScheduleSeries</c> table buffer holding the reference to an existing series.</param>
    /// <returns>A table buffer containing an existing automation criteria record.</returns>
    protected abstract Common findAutomationCriteriaRecordForSeries(ProcessScheduleSeriesData _processScheduleSeries)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAutomationCriteriaRecordForOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the existing automation criteria record from the given <c>ProcessScheduleOccurrence</c> table buffer.
    /// </summary>
    /// <param name = "_processScheduleOccurrence">The <c>ProcessScheduleOccurrence</c> table buffer holding the reference to an existing series.</param>
    /// <returns>A table buffer containing an existing automation criteria record.</returns>
    protected abstract Common findAutomationCriteriaRecordForOccurrence(ProcessScheduleOccurrenceData _processScheduleOccurrence)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field that references the <c>ScheduleSeries</c> table.
    /// </summary>
    /// <param name = "_scheduleSeries">The <c>RecId</c> value of the <c>ScheduleSeries</c> table to be referenced.</param>
    protected abstract void setScheduleSeries(RecId _scheduleSeries)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setScheduleOccurrence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the field that references the <c>ScheduleOccurrence</c> table.
    /// </summary>
    /// <param name = "_scheduleOccurrence">The <c>RecId</c> value of the <c>ScheduleOccurrence</c> table to be referenced.</param>
    protected abstract void setScheduleOccurrence(RecId _scheduleOccurrence)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetToDateOffsetDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the field representing the to date offset days.
    /// </summary>
    protected abstract void resetToDateOffsetDays()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMinimumPaymentDateOffsetDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the field representing the minimum payment date offset days.
    /// </summary>
    protected abstract void resetMinimumPaymentDateOffsetDays()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSummarizedPaymentDateOffsetDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the field representing the summarized payment date offset days.
    /// </summary>
    protected abstract void resetSummarizedPaymentDateOffsetDays()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the field representing the offset account.
    /// </summary>
    protected abstract void resetOffsetAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSavedIncludeInvoicesFromOtherCompaniesValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the current record's value for the field representing include invoices from other companies.
    /// </summary>
    /// <returns>The current value for include invoices from other companies.</returns>
    protected abstract NoYes getSavedIncludeInvoicesFromOtherCompaniesValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOccurrenceFromSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults all criteria values of a new occurrence from the saved series.
    /// </summary>
    protected abstract void defaultOccurrenceFromSeries()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventOverrides</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers form control event overrides.
    /// </summary>
    [Wrappable(false)]
    protected void registerEventOverrides()
    {
        this.registerJournalNameOverrides();
        this.registerUseDaysForToDateOverrides();
        this.registerUseDaysForMinimumPaymentDateOverrides();
        this.registerUseDaysForSummarizedPaymentDateOverrides();
        this.registerDefaultOffsetAccountTypeOverrides();
        this.registerAutomationCriteriaDataSourceOverrides();
        this.registerIncludeInvoicesFromOtherCompaniesOverrides();
        this.registerSysQueryButtonOverrides();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerJournalNameOverrides</Name>
				<Source><![CDATA[
    private void registerJournalNameOverrides()
    {
        FormStringControl journalNameControl = formState.controls.journalNameControl;
        journalNameControl.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, journalNameLookup),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerUseDaysForToDateOverrides</Name>
				<Source><![CDATA[
    private void registerUseDaysForToDateOverrides()
    {
        FormCheckBoxControl useDaysForToDateControl = formState.controls.useToDateOffsetDaysControl;
        useDaysForToDateControl.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, useToDateOffsetDaysModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerUseDaysForMinimumPaymentDateOverrides</Name>
				<Source><![CDATA[
    private void registerUseDaysForMinimumPaymentDateOverrides()
    {
        FormCheckBoxControl useDaysForMinimumPaymentDateControl = formState.controls.useMinimumPaymentDateOffsetDaysControl;
        useDaysForMinimumPaymentDateControl.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, useMinimumPaymentDateOffsetDaysModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerUseDaysForSummarizedPaymentDateOverrides</Name>
				<Source><![CDATA[
    private void registerUseDaysForSummarizedPaymentDateOverrides()
    {
        FormCheckBoxControl useDaysForSummarizedPaymentDateControl = formState.controls.useSummarizedPaymentDateOffsetDaysControl;
        useDaysForSummarizedPaymentDateControl.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, useSummarizedPaymentDateOffsetDaysModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDefaultOffsetAccountTypeOverrides</Name>
				<Source><![CDATA[
    private void registerDefaultOffsetAccountTypeOverrides()
    {
        FormComboBoxControl defaultOffsetAccountTypeControl = formState.controls.defaultOffsetAccountTypeControl;
        defaultOffsetAccountTypeControl.registerOverrideMethod(
            methodStr(FormComboBoxControl, modified),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, defaultOffsetAccountTypeModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerAutomationCriteriaDataSourceOverrides</Name>
				<Source><![CDATA[
    private void registerAutomationCriteriaDataSourceOverrides()
    {
        FormDataSource automationCriteria_ds = formState.controls.automationCriteria_ds;
        automationCriteria_ds.registerOverrideMethod(
            methodStr(FormDataSource, executeQuery),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, automationCriteriaDataSourceExecuteQuery),
            this);

        automationCriteria_ds.registerOverrideMethod(
            methodStr(FormDataSource, leaveRecord),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, automationCriteriaDataSourceLeaveRecord),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerIncludeInvoicesFromOtherCompaniesOverrides</Name>
				<Source><![CDATA[
    private void registerIncludeInvoicesFromOtherCompaniesOverrides()
    {
        FormCheckBoxControl includeInvoicesFromOtherCompaniesControl = formState.controls.includeInvoicesFromOtherCompaniesControl;
        includeInvoicesFromOtherCompaniesControl.registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, includeInvoicesFromOtherCompaniesModified),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerSysQueryButtonOverrides</Name>
				<Source><![CDATA[
    private void registerSysQueryButtonOverrides()
    {
        FormFunctionButtonControl sysQueryRunButton = formState.controls.sysQueryRunButtonControl;
        sysQueryRunButton.registerOverrideMethod(
            methodStr(FormFunctionButtonControl, clicked),
            methodStr(CustVendPaymProposalAutomationCriteriaFormInteraction, querySelectButtonClicked),
            this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameLookup</Name>
				<Source><![CDATA[
    private void journalNameLookup(FormStringControl _journalNameControl)
    {
        CustVendPaymProposalAutomationCriteriaJournalNameLookup::lookupJournalName(_journalNameControl, formState.supportedJournalTypes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useToDateOffsetDaysModified</Name>
				<Source><![CDATA[
    private boolean useToDateOffsetDaysModified(FormCheckBoxControl _useToDateOffsetDaysControl)
    {
        boolean ret = _useToDateOffsetDaysControl.modified();

        FormIntControl toDateOffsetDaysControl = formState.controls.toDateOffsetDaysControl;

        if (!_useToDateOffsetDaysControl.checked())
        {
            toDateOffsetDaysControl.enabled(false);
            toDateOffsetDaysControl.showZero(0);
            this.resetToDateOffsetDays();
        }
        else
        {
            toDateOffsetDaysControl.enabled(true);
            toDateOffsetDaysControl.showZero(1);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useMinimumPaymentDateOffsetDaysModified</Name>
				<Source><![CDATA[
    private boolean useMinimumPaymentDateOffsetDaysModified(FormCheckBoxControl _useMinimumPaymentDateOffsetDaysControl)
    {
        boolean ret = _useMinimumPaymentDateOffsetDaysControl.modified();

        FormIntControl minimumPaymentDateOffsetDaysControl = formState.controls.minimumPaymentDateOffsetDaysControl;

        if (!_useMinimumPaymentDateOffsetDaysControl.checked())
        {
            minimumPaymentDateOffsetDaysControl.enabled(false);
            minimumPaymentDateOffsetDaysControl.showZero(0);
            this.resetMinimumPaymentDateOffsetDays();
        }
        else
        {
            minimumPaymentDateOffsetDaysControl.enabled(true);
            minimumPaymentDateOffsetDaysControl.showZero(1);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSummarizedPaymentDateOffsetDaysModified</Name>
				<Source><![CDATA[
    private boolean useSummarizedPaymentDateOffsetDaysModified(FormCheckBoxControl _useSummarizedPaymentDateOffsetDaysControl)
    {
        boolean ret = _useSummarizedPaymentDateOffsetDaysControl.modified();

        FormIntControl summarizedPaymentDateOffsetDaysControl = formState.controls.summarizedPaymentDateOffsetDaysControl;

        if (!_useSummarizedPaymentDateOffsetDaysControl.checked())
        {
            summarizedPaymentDateOffsetDaysControl.enabled(false);
            summarizedPaymentDateOffsetDaysControl.showZero(0);
            this.resetSummarizedPaymentDateOffsetDays();
        }
        else
        {
            summarizedPaymentDateOffsetDaysControl.enabled(true);
            summarizedPaymentDateOffsetDaysControl.showZero(1);
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetAccountTypeModified</Name>
				<Source><![CDATA[
    private boolean defaultOffsetAccountTypeModified(FormComboBoxControl _defaultOffsetAccountTypeControl)
    {
        boolean wasModified = _defaultOffsetAccountTypeControl.modified();

        if (wasModified)
        {
            FormSegmentedEntryControl defaultOffsetAccountControl = formState.controls.defaultOffsetAccountControl;
            
            SegmentedEntryControl defaulOffsetAccountSegmentedEntryControl = defaultOffsetAccountControl as SegmentedEntryControl;
            defaulOffsetAccountSegmentedEntryControl.parmAccountTypeEnumValue(_defaultOffsetAccountTypeControl.selection());

            defaultOffsetAccountControl.allowEdit(_defaultOffsetAccountTypeControl.selection() != LedgerJournalACTypeForPaymProposal::None);
            
            defaulOffsetAccountSegmentedEntryControl.clearReference(true);
        }
    
        return wasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceExecuteQuery</Name>
				<Source><![CDATA[
    private void automationCriteriaDataSourceExecuteQuery(FormDataSource _formDataSource)
    {
        if (!isInitialized)
        {
            _formDataSource.executeQuery();

            // If we are a new record and not modifying an existing record, then create a new record.
            if (formState.initialSchedulingContract.parmIsCreation())
            {
                _formDataSource.create();

                // If we are creating an occurrence record, and it's coming from an already created Series,
                // then we need to hydrate the form controls with values from the series.
                if (formState.initialSchedulingContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Occurrence
                    && formState.initialSchedulingContract.getProcessScheduleSeriesData().getSeriesRecId() != 0)
                {
                    this.defaultOccurrenceFromSeries();
                }
            }
            else
            {
                if (formState.initialSchedulingContract.getProcessScheduleSeriesOccurrence() == ProcessScheduleSeriesOccurrence::Series)
                {
                    _formDataSource.positionToRecord(this.findAutomationCriteriaRecordForSeries(formState.initialSchedulingContract.getProcessScheduleSeriesData()));
                }
                else
                {
                    _formDataSource.positionToRecord(this.findAutomationCriteriaRecordForOccurrence(formState.initialSchedulingContract.getProcessScheduleOccurrenceData()));
                }
            }

            this.setControlState();

            isInitialized = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setControlState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets necessary form control state.
    /// </summary>
    protected void setControlState()
    {
        FormIntControl toDateOffsetDaysControl = formState.controls.toDateOffsetDaysControl;
        toDateOffsetDaysControl.enabled(formState.controls.useToDateOffsetDaysControl.value());

        FormIntControl minimumPaymentDateOffsetDaysControl = formState.controls.minimumPaymentDateOffsetDaysControl;
        minimumPaymentDateOffsetDaysControl.enabled(formState.controls.useMinimumPaymentDateOffsetDaysControl.value());
        
        FormIntControl summarizedPaymentDateOffsetDaysControl = formState.controls.summarizedPaymentDateOffsetDaysControl;
        summarizedPaymentDateOffsetDaysControl.enabled(formState.controls.useSummarizedPaymentDateOffsetDaysControl.value());

        FormCheckBoxControl proposeSeparatePaymentPerCompanyControl = formState.controls.proposeSeparatePaymentPerCompanyControl;
        proposeSeparatePaymentPerCompanyControl.enabled(formState.controls.includeInvoicesFromOtherCompaniesControl.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>automationCriteriaDataSourceLeaveRecord</Name>
				<Source><![CDATA[
    private boolean automationCriteriaDataSourceLeaveRecord(FormDataSource _formDataSource)
    {
        // Return true and do not call super(), so leaving the data source forces a save event to occur.
        // This is deferred to later in order to properly support transactional integrity with the process automation framework.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInvoicesFromOtherCompaniesModified</Name>
				<Source><![CDATA[
    private boolean includeInvoicesFromOtherCompaniesModified(FormCheckBoxControl _formCheckBoxControl)
    {
        boolean wasModified = _formCheckBoxControl.modified();

        if (wasModified)
        {
            NoYes includeInvoicesFromOtherCompanies = _formCheckBoxControl.value();

            this.setProposeSeparatePaymentPerCompanyEnablement(includeInvoicesFromOtherCompanies);
            this.updateQueryToIncludeCrossCompanyInvoices(includeInvoicesFromOtherCompanies);
        }

        return wasModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProposeSeparatePaymentPerCompanyEnablement</Name>
				<Source><![CDATA[
    private void setProposeSeparatePaymentPerCompanyEnablement(NoYes _includeInvoicesFromOtherCompanies)
    {
        FormCheckBoxControl proposeSeparatePaymentPerCompanyControl = formState.controls.proposeSeparatePaymentPerCompanyControl;

        if (_includeInvoicesFromOtherCompanies == NoYes::Yes)
        {
            proposeSeparatePaymentPerCompanyControl.enabled(true);
        }
        else
        {
            proposeSeparatePaymentPerCompanyControl.enabled(false);
            proposeSeparatePaymentPerCompanyControl.value(NoYes::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryToIncludeCrossCompanyInvoices</Name>
				<Source><![CDATA[
    private void updateQueryToIncludeCrossCompanyInvoices(NoYes _includeInvoicesFromOtherCompanies)
    {
        Query paymentProposalQuery = formState.workingPaymentProposalQuery;

        paymentProposalQuery.allowCrossCompany(_includeInvoicesFromOtherCompanies);
        
        if (this.shouldApplySharedServicesCompanies(_includeInvoicesFromOtherCompanies))
        {
            paymentProposalQuery.clearCompanyRange();

            container sharedServiceBoundaryCompanies = CustVendOpenTransManager::findSharedServiceCompanies(curext());

            for (int i = 1; i <= conLen(sharedServiceBoundaryCompanies); i++)
            {
                paymentProposalQuery.addCompanyRange(conPeek(sharedServiceBoundaryCompanies, i));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldApplySharedServicesCompanies</Name>
				<Source><![CDATA[
    private boolean shouldApplySharedServicesCompanies(NoYes _includeInvoicesFromOtherCompanies)
    {
        return _includeInvoicesFromOtherCompanies == NoYes::Yes &&
            (formState.initialSchedulingContract.parmIsCreation() || this.getSavedIncludeInvoicesFromOtherCompaniesValue() == NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySelectButtonClicked</Name>
				<Source><![CDATA[
    private void querySelectButtonClicked(FormFunctionButtonControl _queryButton)
    {
        SysQueryRun sysQueryRunLocal = this.getSysQueryRun();
        
        if (sysQueryRunLocal)
        {
            if (sysQueryRunLocal.prompt())
            {
                formState.workingPaymentProposalQuery = sysQueryRunLocal.query();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysQueryRun</Name>
				<Source><![CDATA[
    private SysQueryRun getSysQueryRun()
    {
        Query queryLocal = formState.workingPaymentProposalQuery;

        sysQueryRun = new SysQueryRun(queryLocal);
        sysQueryRun.promptLoadLastUsedQuery(true);
        sysQueryRun.promptAllowSave(false);
        sysQueryRun.promptShowSorting(false);
        sysQueryRun.promptSaveQueryPrUser(false);
        sysQueryRun.promptAllowAddDataSource(true);
        sysQueryRun.promptAllowAddRange(QueryAllowAdd::AllFields);
        sysQueryRun.userUpdate(formState.controls.automationCriteria_ds.canEdit());

        return sysQueryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>