<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EPaymentXMLFormat_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EPaymentXMLFormat_MX</c> class handles the formatting of the EPayment XML document for current version: CFDI v3.3
/// </summary>
abstract class EPaymentXMLFormat_MX
{
    protected const str pagoPrefix = 'pago10';
    protected const str pagoNamespace = 'http://www.sat.gob.mx/Pagos';
    protected const str cfdiPrefix = 'cfdi';
    protected const str cfdiNamespace = 'http://www.sat.gob.mx/cfd/3';

    protected const str ForeignerRFC = 'XEXX010101000';
    protected const str XXXcurrency = 'XXX';
    internal protected boolean regularPositiveTaxExists;
    internal protected boolean regularNegativeTaxExists;

    CustTrans payment;
    CustSettlement paymentSettlement;

    PaymentType_MX paymentType;

    XmlDocument xmlDocument;

    str currentPrefix, currentNamespace, schemaLocation;

    XmlElement comprobanteImpuestosElement, comprobanteRetencionesElement, comprobanteTrasladosElement;
    TaxAmount totalNegativeTaxAmount, totalPositiveTaxAmount;
    AmountCur subtotalAmount;
    Map conceptoTaxesMap;

    CurrencyCode                       currencyCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changePrefixAndXmlns</Name>
				<Source><![CDATA[
    protected void changePrefixAndXmlns(str _prefix, str _namespace)
    {
        currentPrefix = _prefix;
        currentNamespace = _namespace;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIRelacionadoElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Relacionado node.
    /// </summary>
    /// <param name = "_reference">
    /// The <c>EInvoiceCFDIReference_MX</c> record.
    /// </param>
    /// <returns>
	/// The created Relacionado element.
	/// </returns>
    protected XmlElement createCFDIRelacionadoElement(EInvoiceCFDIReference_MX _reference)
    {
        XmlElement relacionadoElement = this.createElement('CfdiRelacionado');
        relacionadoElement.setAttribute('UUID', _reference.cfdiuuid);

        return relacionadoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCFDIRelacionadosElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Relacionados node.
    /// </summary>
    /// <returns>The created Relacionados element.</returns>
    protected XmlElement createCFDIRelacionadosElement()
    {
        XmlElement relacionadosElement;
        EInvoiceCFDIReference_MX reference;
        RefRecId eInvoiceRecId = EInvoiceJour_MX::findByRef(payment.TableId, payment.RecId).RecId;

        select reference
        where reference.eInvoiceJour_MX == eInvoiceRecId;

        if (reference)
        {
            relacionadosElement = this.createElement('CfdiRelacionados');
            relacionadosElement.setAttribute('TipoRelacion', strFmt('0%1', enum2int(reference.ReferenceType)));

            while (reference)
            {
                this.appendChildIfNotNull(relacionadosElement, this.createCFDIRelacionadoElement(reference));

                next reference;
            }
        }

        return relacionadosElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComprobanteElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Comprobante node.
    /// </summary>
    /// <returns>The created Comprobante element.</returns>
    protected XmlElement createComprobanteElement()
    {
        XmlElement comprobanteElement = this.createElement('Comprobante');

        XmlAttribute schemaLocationAttribute = xmlDocument.createAttribute2('xsi:schemaLocation', 'http://www.w3.org/2001/XMLSchema-instance');
        schemaLocationAttribute.value(schemaLocation);

        CustTrans_W payment_w = payment.custTrans_W();

        this.setXmlNsAttribute(comprobanteElement);
        comprobanteElement.setAttributeNode(schemaLocationAttribute);

        comprobanteElement.setAttribute('Version', this.getComprobanteVersion());
        this.setAttributeIfNotNull(comprobanteElement, 'Serie', payment_w.cfdiSeries_MX);
        this.setAttributeIfNotNull(comprobanteElement, 'Folio', num2str(payment_w.cfdiNumber_MX, 0, 0, 1, 0));
        comprobanteElement.setAttribute('Fecha', this.getCurrentDateTime());

        comprobanteElement.setAttribute('LugarExpedicion', this.getLugarExpedicion());

        this.setAttributeIfNotNull(comprobanteElement, 'Confirmacion', payment_w.cfdiConfirmNumber_MX);
        this.appendChildIfNotNull(comprobanteElement, this.createCFDIRelacionadosElement());

        comprobanteElement.appendChild(this.createEmisorElement());
        comprobanteElement.appendChild(this.createReceptorElement());
        comprobanteElement.appendChild(this.createConceptosElement());

        //Comprobante/Impuestos section
        this.appendChildIfHasChildNodes(comprobanteImpuestosElement, comprobanteRetencionesElement);
        this.appendChildIfHasChildNodes(comprobanteImpuestosElement, comprobanteTrasladosElement);

        if (comprobanteImpuestosElement.hasChildNodes())
        {
            if (regularPositiveTaxExists)
            {
                comprobanteImpuestosElement.setAttribute('TotalImpuestosRetenidos', this.formatXmlAmount(totalPositiveTaxAmount, currencyCode));
            }

            if (regularNegativeTaxExists)
            {
                comprobanteImpuestosElement.setAttribute('TotalImpuestosTrasladados', this.formatXmlAmount(totalNegativeTaxAmount, currencyCode));
            }
            comprobanteElement.appendChild(comprobanteImpuestosElement);
        }

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptoElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Concepto node.
    /// </summary>
    /// <param name = "_conceptoSource">
    /// The source recorde for the Concept element.
    /// </param>
    /// <returns>
	/// The created Concepto element.
	/// </returns>
    protected XmlElement createConceptoElement(Common _conceptoSource = null)
    {
        XmlElement conceptoElement = this.createElement('Concepto');

        conceptoElement.setAttribute('ClaveProdServ', '84111506');
        conceptoElement.setAttribute('ClaveUnidad', 'ACT');

        this.appendChildIfNotNull(conceptoElement, this.createImpuestosElement(_conceptoSource));

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptosElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Conceptos node.
    /// </summary>
    /// <returns>The created Conceptos element.</returns>
    protected XmlElement createConceptosElement()
    {
        XmlElement conceptosElement = this.createElement('Conceptos');
        List conceptoSourceList = this.getConceptoSourceList();

        if (conceptoSourceList && conceptoSourceList.elements())
        {
            ListEnumerator enumerator = conceptoSourceList.getEnumerator();
            while(enumerator.moveNext())
            {
                XmlElement conceptoElement = this.createConceptoElement(enumerator.current());
                conceptosElement.appendChild(conceptoElement);
            }
        }
        else
        {
            XmlElement conceptoElement = this.createConceptoElement();
            conceptosElement.appendChild(conceptoElement);
        }

        return conceptosElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a XmlElement.
    /// </summary>
    /// <param name="_elementName">The name of the element to be created.</param>
    /// <returns>The created XmlElement.</returns>
    protected XmlElement createElement(str _elementName)
    {
        return xmlDocument.createElement3(currentPrefix, _elementName, currentNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmisorElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Emissor node.
    /// </summary>
    /// <returns>The created Emissor element.</returns>
    protected XmlElement createEmisorElement()
    {
        XmlElement emisorElement = this.createElement(this.emisorAttributeName());
        CompanyInfo cmpInfo = CompanyInfo::find();

        emisorElement.setAttribute(this.rfcAttributeName(), cmpInfo.Rfc_MX);
        this.setAttributeIfNotNull(emisorElement, this.nombreAttributeName(), cmpInfo.Name);
        emisorElement.setAttribute(this.regimenFiscalAttributeName(), cmpInfo.TaxRegimeCode_MX);

        return emisorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createImpuestosElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Impuestos node.
    /// </summary>
    /// <param name = "_common">
    /// The <c>Common</c> record.
    /// </param>
    /// <returns>
    /// The created Impuestos element.
    /// </returns>
    protected XmlElement createImpuestosElement(Common _common)
    {
        this.fetchTaxes(_common);

        XmlElement impuestosElement = this.createElement(this.impuestosElementName());
        if (this.isImpuestosDRProcessing())
        {
            this.appendChildIfNotNull(impuestosElement, this.createRetencionesElement(_common.RecId));
            this.appendChildIfNotNull(impuestosElement, this.createTrasladosElement(_common.RecId));
        }
        else
        {
            this.appendChildIfNotNull(impuestosElement, this.createTrasladosElement(_common.RecId));
            this.appendChildIfNotNull(impuestosElement, this.createRetencionesElement(_common.RecId));
        }

        if (impuestosElement.hasChildNodes())
        {
            return impuestosElement;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReceptorElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an XML element for the receptor.
    /// </summary>
    /// <returns>
    /// An XmlElement object that represents the receptor element.
    /// </returns>
    /// <exception cref="Error">
    /// Thrown when the customer is not found.
    /// </exception>
    protected XmlElement createReceptorElement()
    {
        CustTable customer;
        str receptorName;

        select firstonly SATREGISTRATIONNAME_MX, Party, ForeignTaxRegistration_MX from customer
            where customer.AccountNum == payment.AccountNum;

        // throw error if customer is not found
        if (!customer)
        {
            throw error(strFmt("@MexicoCFDI:CustomerNotFound_Error", payment.AccountNum));
        }

        receptorName = customer.SATRegistrationName_MX == "" ?
            DirPartyTable::findRec(customer.Party).Name : customer.SATRegistrationName_MX;
        
        return this.populateReceptorNode(customer, receptorName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateReceptorNode</Name>
				<Source><![CDATA[
    private XmlElement populateReceptorNode(CustTable _customer, str _receptorName)
    {
        XmlElement receptorElement = this.createElement(this.receptorAttributeName());
        receptorElement.setAttribute(this.rfcAttributeName(), this.getRecipientRfc());
        this.setAttributeIfNotNull(receptorElement, this.nombreAttributeName(), _receptorName);
        this.setAttributeIfNotEqual(receptorElement, this.residenciaFiscalAttributeName(), _customer.postalAddress().CountryRegionId, 'MEX');
        this.setAttributeIfNotNull(receptorElement, this.numRegIdTribAttributeName(), _customer.ForeignTaxRegistration_MX);
        receptorElement.setAttribute(this.usoCFDIAttributeName(), this.usoCFDI());
        return receptorElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetencionesElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// creates the Retenciones node.
    /// </summary>
    /// <param name = "_sourceRecId">
    /// The source record for the node.
    /// </param>
    /// <returns>
	/// The created Retenciones element.
	/// </returns>
    protected XmlElement createRetencionesElement(RecId _sourceRecId)
    {
        XmlElement retenciones = this.createElement(this.retencionesElementName());

        if (conceptoTaxesMap.exists([_sourceRecId, 'positive']))
        {
            TaxTrans taxTrans;
            Map mapTaxAmounts = new Map(Types::Container, Types::Container);

            List positiveTaxesList = conceptoTaxesMap.lookup([_sourceRecId, 'positive']);
            ListEnumerator enumerator = positiveTaxesList.getEnumerator();
            while (enumerator.moveNext())
            {
                taxTrans = enumerator.current();
                this.groupTaxAmounts(mapTaxAmounts, taxTrans);
            }

            MapEnumerator me = mapTaxAmounts.getEnumerator();
            while (me.moveNext())
            {
                taxTrans.clear();

                this.setTaxTransKeyValues(me, taxTrans);
                [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur] = me.currentValue();

                this.processTaxSection(retenciones, taxTrans, false);
            }

            if (mapTaxAmounts.elements())
            {
                return retenciones;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrasladosElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the Traslados node.
    /// </summary>
    /// <param name = "_sourceRecId">
    /// The source record for the node.
    /// </param>
    /// <returns>The created Traslados element.</returns>
    protected XmlElement createTrasladosElement(RecId _sourceRecId)
    {
        XmlElement traslados = this.createElement(this.trasladosElementName());

        if (conceptoTaxesMap.exists([_sourceRecId, 'negative']))
        {
            TaxTrans taxTrans;
            Map mapTaxAmounts = new Map(Types::Container, Types::Container);

            List negativeTaxesList = conceptoTaxesMap.lookup([_sourceRecId, 'negative']);
            ListEnumerator enumerator = negativeTaxesList.getEnumerator();
            while (enumerator.moveNext())
            {
                taxTrans = enumerator.current();
                this.groupTaxAmounts(mapTaxAmounts, taxTrans);
            }

            MapEnumerator me = mapTaxAmounts.getEnumerator();
            while (me.moveNext())
            {
                NoYes isExemptTax = taxTrans.ExemptTax;
                taxTrans.clear();

                this.setTaxTransKeyValues(me, taxTrans);
                [taxTrans.SourceBaseAmountCur, taxTrans.SourceTaxAmountCur] = me.currentValue();
                taxTrans.ExemptTax = isExemptTax;

                this.processTaxSection(traslados, taxTrans, true);
            }

            if (mapTaxAmounts.elements())
            {
                return traslados;
            }
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>escape</Name>
				<Source><![CDATA[
    protected str escape(str _input)
    {
        str output = System.Security.SecurityElement::Escape(_input);
        return output;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxes</Name>
				<Source><![CDATA[
    protected abstract void fetchTaxes(Common _taxSource)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTaxSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filling the Tax node.
    /// </summary>
    /// <param name="_taxSection">
    /// The <c>XmlElement</c> with Tax section.
    /// </param>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> record.
    /// </param>
    /// <param name="_exportTaxBase">
    /// The boolean value, that indicates to add attribute Base.
    /// </param>
    /// <param name="_exportRateType">
    /// The boolean value, that indicates to add attribute TipoFactor.
    /// </param>
    /// <param name="_exportTaxRate">
    /// The boolean value, that indicates to add attribute TasaOCuota.
    /// </param>
    protected void fillTaxSection(
        XmlElement _taxSection,
        TaxTrans _taxTrans,
        boolean _exportTaxBase = true,
        boolean _exportRateType = true,
        boolean _exportTaxRate = true)
    {
        AmountCur baseAmount = _taxTrans.SourceBaseAmountCurRegulated ?
                               _taxTrans.SourceBaseAmountCurRegulated :
                               _taxTrans.SourceBaseAmountCur;

        AmountCur taxAmount = _taxTrans.SourceRegulateAmountCur ?
                              _taxTrans.SourceRegulateAmountCur :
                              _taxTrans.SourceTaxAmountCur;

        if (_exportTaxBase)
        {
            _taxSection.setAttribute(this.baseAttributeName(), this.formatXmlAmount(baseAmount, currencyCode));
        }

        _taxSection.setAttribute(this.impuestoAttributeName(), this.formatTaxType(_taxTrans.TaxType_MX));

        if (_exportRateType)
        {
            _taxSection.setAttribute(this.tipoFactorAttributeName(), this.formatRateType(_taxTrans));
        }

        if (this.shouldSetTasaOCuotaAttribute(_exportTaxRate, _taxTrans))
        {
            _taxSection.setAttribute(this.tasaOCuotaAttributeName(), num2str(abs(_taxTrans.TaxValue) / 100, 1, 6, 1, 0));
        }

        if (this.shouldSetImporteAttribute(_taxTrans))
        {
            _taxSection.setAttribute(this.importeAttributeName(), this.formatXmlAmount(taxAmount, currencyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax rate value.
    /// </summary>
    /// <param name="_taxTrans">
    /// The <c>TaxTrans</c> record.
    /// </param>
    /// <returns>
    /// The string with tax rate.
    /// </returns>
    protected str formatRateType(TaxTrans _taxTrans)
    {
        str rateTypeStr;

        if (_taxTrans.ExemptTax)
        {
            rateTypeStr = 'Exento';
        }
        else
        {
            rateTypeStr = 'Tasa';
        }

        return rateTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatTaxType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The tax type enum.
    /// </param>
    /// <returns>
    /// The string with tax type.
    /// </returns>
    protected str formatTaxType(TaxType_MX _taxType)
    {
        str taxTypeStr;

        switch (_taxType)
        {
            case TaxType_MX::ISR:
                taxTypeStr = '001';
                break;

            case TaxType_MX::IVA:
                taxTypeStr = '002';
                break;

            case TaxType_MX::IEPS:
                taxTypeStr = '003';
                break;

            default:
                break;
        }

        return taxTypeStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats amount to string.
    /// </summary>
    /// <param name="_number">
    /// The amount value.
    /// </param>
    /// <param name="_currencyCode">
    /// The string with Currency Code.
    /// </param>
    /// <returns>
    /// The string with amount value.
    /// </returns>
    protected str formatXmlAmount(real _number, str _currencyCode = '')
    {
        int decimals;

        if ( _currencyCode == XXXcurrency )
        {
            decimals = 0;
        }
        else
        {
            Currency currency = Currency::find(!_currencyCode ? payment.CurrencyCode : _currencyCode);
            real precision = currency.RoundingPrecision ? currency.RoundingPrecision : 0.01;
            str valueStr = new SysAnyType(precision).value();
            decimals = strLen(valueStr) - strFind(valueStr, '.', 1, strLen(valueStr));
        }

        return num2str
        (
            abs(_number),
            1,
            decimals,     // decimal digits
            1,            // Decimal separator (.)
            0             // No Thousands separator
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatExchangeRateAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats exchange rate to string.
    /// </summary>
    /// <param name = "_rate">Exchange rate value.</param>
    /// <returns>The string with exchange rate value.</returns>
    protected str formatExchangeRateAmount(real _rate)
    {
        return num2str(_rate, 0, 6, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatExchangeRateTenDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats exchange rate to string in 10 decimals.
    /// </summary>
    /// <param name = "_rate">Exchange rate value.</param>
    /// <returns>The string with exchange rate value.</returns>
    protected str formatExchangeRateTenDecimals(real _rate)
    {
        return num2str(_rate, 0, 10, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a XML an electronic payment.
    /// </summary>
    /// <returns>The XML an electronic payment.</returns>
    public XmlDocument generateXML()
    {
        xmlDocument = XmlDocument::newBlank('UTF-8');

        comprobanteImpuestosElement = this.createElement('Impuestos');
        comprobanteRetencionesElement = this.createElement('Retenciones');
        comprobanteTrasladosElement = this.createElement('Traslados');

        XmlElement comprobanteElement = this.createComprobanteElement();
        xmlDocument.appendChild(comprobanteElement);

        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoSourceList</Name>
				<Source><![CDATA[
    protected abstract List getConceptoSourceList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateTimeStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets string with payment date.
    /// </summary>
    /// <returns>The payment date string</returns>
    protected str getDateTimeStr()
    {
        utcdatetime dt = DateTimeUtil::newDateTime(payment.TransDate, str2time('12:00:00'));

        return DateTimeUtil::toStr(dt);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEInvoiceJourMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialisates the <c>EInvoiceJourBaseMap_MX</c> class.
    /// </summary>
    /// <param name="_invoice">
    /// The <c>CustTrans</c> record.
    /// </param>
    /// <returns>
    /// The instance of <c>EInvoiceJourBaseMap_MX</c> class.
    /// </returns>
    protected EInvoiceJourBaseMap_MX getEInvoiceJourMap(CustTrans _invoice, boolean _forUpdate = false)
    {
        EInvoiceJour_MX eInvJour;
        CustInvoiceJour custInvoiceJour;
        ProjInvoiceJour projInvoiceJour;
        Common common;

        custInvoiceJour.selectForUpdate(_forUpdate);

        select firstonly custInvoiceJour
            where custInvoiceJour.InvoiceId == _invoice.Invoice
                && custInvoiceJour.InvoiceDate == _invoice.TransDate
                && custInvoiceJour.LedgerVoucher == _invoice.Voucher
        exists join eInvJour
            where eInvJour.RefTableId == custInvoiceJour.TableId
                && eInvJour.RefRecId == custInvoiceJour.RecId;

        if (custInvoiceJour)
        {
            common = custInvoiceJour;
        }
        else
        {
            projInvoiceJour.selectForUpdate(_forUpdate);

            select firstonly projInvoiceJour
                where projInvoiceJour.ProjInvoiceId == _invoice.Invoice
                    && projInvoiceJour.InvoiceDate == _invoice.TransDate
                    && projInvoiceJour.LedgerVoucher == _invoice.Voucher
            exists join eInvJour
                where eInvJour.RefTableId == projInvoiceJour.TableId
                    && eInvJour.RefRecId == projInvoiceJour.RecId;

            common = projInvoiceJour;
        }

        if (common)
        {
            return EInvoiceJourBaseMap_MX::construct(common);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormattedPaymentType</Name>
				<Source><![CDATA[
    protected str getFormattedPaymentType()
    {
        return num2str0(enum2int(paymentType), 2, 0, 1, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVersion</Name>
				<Source><![CDATA[
    protected str getVersion()
    {
        return "1.0";
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTaxAmounts</Name>
				<Source><![CDATA[
    protected void groupTaxAmounts(Map _mapTransAmounts, TaxTrans _taxTrans)
    {
        AmountCur baseAmount;
        AmountCur taxAmount;
        container key = this.getKeyContainer(_taxTrans);

        if (_mapTransAmounts.exists(key))
        {
            [baseAmount, taxAmount] = _mapTransAmounts.lookup(key);
        }

        baseAmount += _taxTrans.SourceBaseAmountCurRegulated ?
                      _taxTrans.SourceBaseAmountCurRegulated :
                      _taxTrans.SourceBaseAmountCur;

        taxAmount += _taxTrans.SourceRegulateAmountCur ?
                     _taxTrans.SourceRegulateAmountCur :
                     _taxTrans.SourceTaxAmountCur;

        _mapTransAmounts.insert(key, [baseAmount, taxAmount]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustTrans _payment, CustSettlement _paymentSettlement = null)
    {
        payment = _payment;
        paymentSettlement = _paymentSettlement;

        paymentType = CustPaymModeTable::find(payment.PaymMode).PaymentType_MX;

        this.changePrefixAndXmlns(cfdiPrefix, this.getCfdiNameSpace());

        schemaLocation = this.getSchemaLocation();

        conceptoTaxesMap = new Map(Types::Container, Types::Class);

        currencyCode = payment.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxSection</Name>
				<Source><![CDATA[
    protected void processTaxSection(XmlElement _conceptoRelatedElement, TaxTrans _taxTrans, boolean _isTraslado)
    {
        str tagName = _isTraslado ? this.trasladoElementName() : this.retencionElementName();
        AmountCur taxAmount = _taxTrans.SourceRegulateAmountCur ?
                              _taxTrans.SourceRegulateAmountCur :
                              _taxTrans.SourceTaxAmountCur;

        XmlElement conceptoDescendant = this.createElement(tagName);
        if (!_isTraslado && this.isImpuestosPProcessing())
        {
            this.fillTaxSection(conceptoDescendant, _taxTrans, false, false, false);
        }
        else
        {
            this.fillTaxSection(conceptoDescendant, _taxTrans);
        }
        _conceptoRelatedElement.appendChild(conceptoDescendant);

        if (!this.isImpuestosDRProcessing() && !this.isImpuestosPProcessing())
        {
            XmlElement comprobanteDescendant = this.createElement(tagName);
            boolean exportTaxBase = this.shouldExportTaxBaseInComprobanteDescendant(_isTraslado);
            this.fillTaxSection(comprobanteDescendant, _taxTrans, exportTaxBase, _isTraslado, _isTraslado);
            if (_isTraslado)
            {
                comprobanteTrasladosElement.appendChild(comprobanteDescendant);
                totalNegativeTaxAmount += taxAmount;
            }
            else
            {
                comprobanteRetencionesElement.appendChild(comprobanteDescendant);
                totalPositiveTaxAmount += taxAmount;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setXmlNsAttribute</Name>
				<Source><![CDATA[
    protected void setXmlNsAttribute(XmlElement _xmlElement)
    {
        _xmlElement.setAttribute('xmlns:' + currentPrefix, currentNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeIfNotEqual</Name>
				<Source><![CDATA[
    protected void setAttributeIfNotEqual(XmlElement element, str name, str value, str criteria = '')
    {
        if( element && name && (value != criteria) )
        {
            element.setAttribute(name, value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAttributeIfNotNull</Name>
				<Source><![CDATA[
    protected void setAttributeIfNotNull(XmlElement element, str name, str value)
    {
        this.setAttributeIfNotEqual(element, Name, value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildIfNotNull</Name>
				<Source><![CDATA[
    protected XmlNode appendChildIfNotNull(XmlNode node, XmlNode appendNode)
    {
        if( node && appendNode )
        {
            node.appendChild(appendNode);
        }
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendChildIfHasChildNodes</Name>
				<Source><![CDATA[
    protected XmlNode appendChildIfHasChildNodes(XmlNode node, XmlNode appendNode)
    {
        if( node && appendNode && appendNode.hasChildNodes() )
        {
            node.appendChild(appendNode);
        }
        return node;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EPaymentXMLFormat_MX construct(
        CustTrans _payment,
        CFDIDocType_MX _docType,
        CustSettlement _paymentSettlement = null)
    {
        EPaymentXMLFormat_MX instance;
        EInvoiceCFDIParameters_MX eInvoiceCFDIParam = EInvoiceCFDIParameters_MX::find();

        switch(_docType)
        {
            case CFDIDocType_MX::Advance:
                switch (eInvoiceCFDIParam.CFDIVersion)
                {
                    case EInvoiceCFDIVersion_MX::V4:
                        instance = new EPaymentXMLFormatAdvance_V4_MX(_payment);
                        break;

                    default:
                        instance = new EPaymentXMLFormatAdvance_MX(_payment);
                        break;
                }
                break;

            case CFDIDocType_MX::PaymentComplement:
                switch (eInvoiceCFDIParam.CFDIVersion)
                {
                    case EInvoiceCFDIVersion_MX::V4:
                        instance = new EPaymentXMLFormatComplement_V4_MX(_payment);
                        break;

                    default:
                        instance = new EPaymentXMLFormatComplement_MX(_payment);
                        break;
                }
                break;

            case CFDIDocType_MX::AdvanceSettle:
                instance = new EPaymentXMLFormatAdvanceSettlement_MX(_payment, _paymentSettlement);
                break;

            case CFDIDocType_MX::AdvanceReverse:
                switch (eInvoiceCFDIParam.CFDIVersion)
                {
                    case EInvoiceCFDIVersion_MX::V4:
                        instance = new EPaymentXMLFormatAdvanceReverse_V4_MX(_payment, _paymentSettlement);
                        break;

                    default:
                        instance = new EPaymentXMLFormatAdvanceReverse_MX(_payment, _paymentSettlement);
                        break;
                }
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDateTime</Name>
				<Source><![CDATA[
    private str getCurrentDateTime()
    {
        return DateTimeUtil::toStr(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatXmlAmountCheckDecimal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats amount to string with the corresponding number of decimals.
    /// </summary>
    /// <param name="_number">
    /// The amount value.
    /// </param>
    /// <param name = "_decimals">
    /// Number of decimals to format the value.
    /// </param>
    /// <returns>
    /// Formatted string.
    /// </returns>
    protected str formatXmlAmountCheckDecimal(
        real _number,
        int _decimals = 6)
    {
        return num2str(
            abs(_number),
            1,
            _decimals,
            DecimalSeparator::Dot,
            ThousandSeparator::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCfdiNameSpace</Name>
				<Source><![CDATA[
    protected str getCfdiNameSpace()
    {
        return 'http://www.sat.gob.mx/cfd/3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagoNamespace</Name>
				<Source><![CDATA[
    protected str getPagoNamespace()
    {
        return 'http://www.sat.gob.mx/Pagos';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPagoPrefix</Name>
				<Source><![CDATA[
    protected str getPagoPrefix()
    {
        return 'pago10';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSchemaLocation</Name>
				<Source><![CDATA[
    protected str getSchemaLocation()
    {
        return 'http://www.sat.gob.mx/cfd/3 http://www.sat.gob.mx/sitio_internet/cfd/3/cfdv33.xsd';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComprobanteVersion</Name>
				<Source><![CDATA[
    protected str getComprobanteVersion()
    {
        return '3.3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecipientRfc</Name>
				<Source><![CDATA[
    protected Rfc_MX getRecipientRfc()
    {
        CustTable customer = CustTable::find(payment.AccountNum);
        return customer.CompanyType_MX == CompanyType_MX::ForeignCompany ? ForeignerRFC :customer.Rfc_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLugarExpedicion</Name>
				<Source><![CDATA[
    protected str getLugarExpedicion()
    {
        return LogisticsPostalAddress::findByLocation(CompanyInfo::find().PrimaryAddressLocation).ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldExportTaxBaseInComprobanteDescendant</Name>
				<Source><![CDATA[
    protected boolean shouldExportTaxBaseInComprobanteDescendant(boolean _isTraslado)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>impuestosElementName</Name>
				<Source><![CDATA[
    protected str impuestosElementName()
    {
        return 'Impuestos';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trasladosElementName</Name>
				<Source><![CDATA[
    protected str trasladosElementName()
    {
        return 'Traslados';
    }

]]></Source>
			</Method>
			<Method>
				<Name>trasladoElementName</Name>
				<Source><![CDATA[
    protected str trasladoElementName()
    {
        return 'Traslado';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionesElementName</Name>
				<Source><![CDATA[
    protected str retencionesElementName()
    {
        return 'Retenciones';
    }

]]></Source>
			</Method>
			<Method>
				<Name>retencionElementName</Name>
				<Source><![CDATA[
    protected str retencionElementName()
    {
        return 'Retencion';
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAttributeName</Name>
				<Source><![CDATA[
    protected str baseAttributeName()
    {
        return 'Base';
    }

]]></Source>
			</Method>
			<Method>
				<Name>impuestoAttributeName</Name>
				<Source><![CDATA[
    protected str impuestoAttributeName()
    {
        return 'Impuesto';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tipoFactorAttributeName</Name>
				<Source><![CDATA[
    protected str tipoFactorAttributeName()
    {
        return 'TipoFactor';
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasaOCuotaAttributeName</Name>
				<Source><![CDATA[
    protected str tasaOCuotaAttributeName()
    {
        return 'TasaOCuota';
    }

]]></Source>
			</Method>
			<Method>
				<Name>importeAttributeName</Name>
				<Source><![CDATA[
    protected str importeAttributeName()
    {
        return 'Importe';
    }

]]></Source>
			</Method>
			<Method>
				<Name>receptorAttributeName</Name>
				<Source><![CDATA[
    protected str receptorAttributeName()
    {
        return 'Receptor';
    }

]]></Source>
			</Method>
			<Method>
				<Name>nombreAttributeName</Name>
				<Source><![CDATA[
    protected str nombreAttributeName()
    {
        return 'Nombre';
    }

]]></Source>
			</Method>
			<Method>
				<Name>rfcAttributeName</Name>
				<Source><![CDATA[
    protected str rfcAttributeName()
    {
        return 'Rfc';
    }

]]></Source>
			</Method>
			<Method>
				<Name>residenciaFiscalAttributeName</Name>
				<Source><![CDATA[
    protected str residenciaFiscalAttributeName()
    {
        return 'ResidenciaFiscal';
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRegIdTribAttributeName</Name>
				<Source><![CDATA[
    protected str numRegIdTribAttributeName()
    {
        return 'NumRegIdTrib';
    }

]]></Source>
			</Method>
			<Method>
				<Name>emisorAttributeName</Name>
				<Source><![CDATA[
    protected str emisorAttributeName()
    {
        return 'Emisor';
    }

]]></Source>
			</Method>
			<Method>
				<Name>regimenFiscalAttributeName</Name>
				<Source><![CDATA[
    protected str regimenFiscalAttributeName()
    {
        return 'RegimenFiscal';
    }

]]></Source>
			</Method>
			<Method>
				<Name>usoCFDIAttributeName</Name>
				<Source><![CDATA[
    protected str usoCFDIAttributeName()
    {
        return 'UsoCFDI';
    }

]]></Source>
			</Method>
			<Method>
				<Name>usoCFDI</Name>
				<Source><![CDATA[
    protected str usoCFDI()
    {
        return 'P01';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpuestosDRProcessing</Name>
				<Source><![CDATA[
    protected boolean isImpuestosDRProcessing()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isImpuestosPProcessing</Name>
				<Source><![CDATA[
    protected boolean isImpuestosPProcessing()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetTasaOCuotaAttribute</Name>
				<Source><![CDATA[
    private boolean shouldSetTasaOCuotaAttribute(boolean _exportTaxRate, TaxTrans _taxTrans)
    {
        return _exportTaxRate && !_taxTrans.ExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetImporteAttribute</Name>
				<Source><![CDATA[
    private boolean shouldSetImporteAttribute(TaxTrans _taxTrans)
    {
        return !_taxTrans.ExemptTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyContainer</Name>
				<Source><![CDATA[
    protected container getKeyContainer(TaxTrans _taxTrans)
    {
        return [_taxTrans.TaxType_MX, _taxTrans.TaxValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxTransKeyValues</Name>
				<Source><![CDATA[
    protected void setTaxTransKeyValues(MapEnumerator _me, TaxTrans _taxTrans)
    {
        [_taxTrans.TaxType_MX, _taxTrans.TaxValue] = _me.currentKey();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>