<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReleaseLoadToWarehouseService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service class that releases loads to the warehouse.
/// </summary>
public class WHSReleaseLoadToWarehouseService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>releaseLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases load to warehouse when post load button is clicked.
    /// </summary>
    /// <param name = "_contract">Holds the parameters used to determine which loads release to the warehouse.</param>
    public void releaseLoads(WHSReleaseLoadToWarehouseContract _contract)
    {
		if (!_contract)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        using (WHSInstrumentationReleaseToWarehousePerformanceTask perfTask = WHSInstrumentationReleaseToWarehousePerformanceTask::newFromAction('releaseLoads'))
        {
            QueryRun			releaseLoads	= new QueryRun(_contract.parmQuery());
            CustCreditMaxCheck	creditMaxCheck	= _contract.parmCreditMaxCheck();
            int                 releasedLoads   = 0;
            container			shipmentIdsContainer;
            boolean             mustCheckCanBuildWaveFromShipmentsOfLoad = this.mustCheckCanBuildWaveFromShipmentsOfLoad();

            while (releaseLoads.next())
            {
                WHSLoadTable loadTable = releaseLoads.get(tableNum(WHSLoadTable));

                if (loadTable)
                {
                    boolean validLoad = this.postLoad(loadTable, creditMaxCheck);

                    if (this.mustAddShipmentsForLoad(loadTable, validLoad, mustCheckCanBuildWaveFromShipmentsOfLoad))
                    {
                        shipmentIdsContainer += loadTable.getShipmentIds();
                        releasedLoads++;
                    }
                }
            }

            perfTask.setReleasedLoads(releasedLoads);
            perfTask.setReleasedShipments(conLen(shipmentIdsContainer));

            this.createWave(shipmentIdsContainer);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddShipmentsForLoad</Name>
				<Source><![CDATA[
    private boolean mustAddShipmentsForLoad(WHSLoadTable _loadTable,
        boolean _validLoad,
        boolean _mustCheckCanBuildWaveFromShipmentsOfLoad)
    {      
        return _validLoad
            && (!_mustCheckCanBuildWaveFromShipmentsOfLoad
                || this.canBuildWaveFromShipmentsOfLoad(_loadTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckCanBuildWaveFromShipmentsOfLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustCheckCanBuildWaveFromShipmentsOfLoad()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBuildWaveFromShipmentsOfLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean canBuildWaveFromShipmentsOfLoad(WHSLoadTable _loadTable)
    {
        return true;      
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWave</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void createWave(container _shipmentIdsContainer)
    {
        WHSWaveTable::buildWaveFromShipments(_shipmentIdsContainer);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    private boolean postLoad(
        WHSLoadTable		_loadTable,
        CustCreditMaxCheck	_creditMaxCheck)
    {
        if (this.canPostLoad(_loadTable))
        {
            return WhsLoadPostEngine::post(_loadTable, false, _creditMaxCheck);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    protected internal boolean canPostLoad(WHSLoadTable _loadTable)
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>