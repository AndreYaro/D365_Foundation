<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollBankPrintTestCheque</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollBankPrintTestCheque</c> class extends <c>BankPrintTestCheque</c> for payroll.
/// </summary>
class PayrollBankPrintTestCheque extends BankPrintTestCheque
{
    PayrollTmpChequePrintout            payrollTmpChequePrintout;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBenefitAccruals</Name>
				<Source><![CDATA[
    private void createBenefitAccruals(TmpChequePrintout _tmpChequePrintout,
                                                HrmDescription  _code,
                                                AmountCur       _ytdAccrued,
                                                AmountCur       _ytdUsed,
                                                AmountCur       _ytdAmount)
    {
        payrollTmpChequePrintout = this.createPayStatementHeader(_tmpChequePrintout, _code, PayrollPayStatementReportSection::Benefit);
        payrollTmpChequePrintout.PayrollYTDAccrued = _ytdAccrued;
        payrollTmpChequePrintout.PayrollYTDUsed    = _ytdUsed;
        payrollTmpChequePrintout.PayrollYTDAmount  = _ytdAmount;

        payrollTmpChequePrintout.insert();
        payrollTmpChequePrintout.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBenefits</Name>
				<Source><![CDATA[
    private void createBenefits(TmpChequePrintout                    _tmpChequePrintout,
                                        PayrollPayStatementReportSection    _payrollPayStatementReportSection,
                                        HrmDescription                      _code,
                                        AmountCur                           _currAmt,
                                        AmountCur                           _ytdAmt)
    {
        payrollTmpChequePrintout = this.createPayStatementHeader(_tmpChequePrintout, _code, _payrollPayStatementReportSection);
        payrollTmpChequePrintout.PayrollCurrentAmount = _currAmt;
        payrollTmpChequePrintout.PayrollYTDAmount = _ytdAmt;

        payrollTmpChequePrintout.insert();
        payrollTmpChequePrintout.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEarnings</Name>
				<Source><![CDATA[
    private void createEarnings(TmpChequePrintout                    _tmpChequePrintout,
                                        PayrollPayStatementReportSection    _payrollPayStatementReportSection,
                                        HrmDescription                      _code,
                                        PayrollQuantityUnit                 _payrollQuantityUnit,
                                        PayrollEarningQuantity              _quantity,
                                        PayrollEarningRate                  _rate,
                                        AmountCur                           _currAmt,
                                        AmountCur                           _ytdAmt)
    {
        payrollTmpChequePrintout = this.createPayStatementHeader(_tmpChequePrintout, _code, _payrollPayStatementReportSection);
        payrollTmpChequePrintout.PayrollQuantityUnit = _payrollQuantityUnit;
        payrollTmpChequePrintout.PayrollQuantity = _quantity;
        payrollTmpChequePrintout.PayrollRate = _rate;
        payrollTmpChequePrintout.PayrollCurrentAmount = _currAmt;
        payrollTmpChequePrintout.PayrollYTDAmount = _ytdAmt;

        payrollTmpChequePrintout.insert();
        payrollTmpChequePrintout.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPayStatementHeader</Name>
				<Source><![CDATA[
    private PayrollTmpChequePrintout createPayStatementHeader(TmpChequePrintout                     _tmpChequePrintout,
                                                                HrmDescription                      _code,
                                                                PayrollPayStatementReportSection    _reportSection)
    {
        #Define.PaymentNumber("123456")
        #Define.PersonnelNumber("123456789")

        payrollTmpChequePrintout.AccountId      = _tmpChequePrintout.AccountId;
        payrollTmpChequePrintout.AccountNum     = _tmpChequePrintout.AccountNum;
        payrollTmpChequePrintout.Address        = _tmpChequePrintout.Address;
        payrollTmpChequePrintout.AmountCur      = _tmpChequePrintout.AmountCur;
        payrollTmpChequePrintout.AmountMST      = _tmpChequePrintout.AmountMST;
        payrollTmpChequePrintout.AmountTxt      = _tmpChequePrintout.AmountTxt;
        payrollTmpChequePrintout.BankCopyCustomWatermark = _tmpChequePrintout.BankCopyCustomWatermark;
        payrollTmpChequePrintout.BankCopySignatureText = _tmpChequePrintout.BankCopySignatureText;
        payrollTmpChequePrintout.BankName       = _tmpChequePrintout.BankName;
        payrollTmpChequePrintout.ChequeFormType = _tmpChequePrintout.ChequeFormType;
        payrollTmpChequePrintout.ChequeNum      = _tmpChequePrintout.ChequeNum;
        payrollTmpChequePrintout.ChequeTop      = _tmpChequePrintout.ChequeTop;
        payrollTmpChequePrintout.ChequeTopDrop  = _tmpChequePrintout.ChequeTopDrop;
        payrollTmpChequePrintout.City           = _tmpChequePrintout.City;
        payrollTmpChequePrintout.CompanyCity    = _tmpChequePrintout.CompanyCity;
        payrollTmpChequePrintout.Copy           = _tmpChequePrintout.Copy;
        payrollTmpChequePrintout.CountryRegionId= _tmpChequePrintout.CountryRegionId;
        payrollTmpChequePrintout.County         = _tmpChequePrintout.County;
        payrollTmpChequePrintout.CurrencyCode   = _tmpChequePrintout.CurrencyCode;
        payrollTmpChequePrintout.CurrencyTxt    = _tmpChequePrintout.CurrencyTxt;
        payrollTmpChequePrintout.IsNonNegotiableCheque = _tmpChequePrintout.IsNonNegotiableCheque;
        payrollTmpChequePrintout.MaturityDate   = _tmpChequePrintout.MaturityDate;
        payrollTmpChequePrintout.micrLine       = _tmpChequePrintout.micrLine;
        payrollTmpChequePrintout.Numerals2Letter = _tmpChequePrintout.Numerals2Letter;
        payrollTmpChequePrintout.RecipientName  = _tmpChequePrintout.RecipientName;
        payrollTmpChequePrintout.RegistrationNum= _tmpChequePrintout.RegistrationNum;
        payrollTmpChequePrintout.Signature1     = _tmpChequePrintout.Signature1;
        payrollTmpChequePrintout.Signature2     = _tmpChequePrintout.Signature2;
        payrollTmpChequePrintout.State          = _tmpChequePrintout.State;
        payrollTmpChequePrintout.Street         = _tmpChequePrintout.Street;
        payrollTmpChequePrintout.TransactionRecId= _tmpChequePrintout.TransactionRecId;
        payrollTmpChequePrintout.TransDate      = _tmpChequePrintout.TransDate;
        payrollTmpChequePrintout.Void           = _tmpChequePrintout.Void;

        payrollTmpChequePrintout.PayrollPaymentDate             = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        payrollTmpChequePrintout.PayrollPaymentNumber           = #PaymentNumber;
        payrollTmpChequePrintout.PayrollPayPeriodStr            = strFmt("@Payroll:Num_1To2", DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()));
        payrollTmpChequePrintout.PersonnelNumber                = #PersonnelNumber;
        payrollTmpChequePrintout.PayrollReportDataRowCounter    = 1;
        payrollTmpChequePrintout.PayrollCode                    = _code;
        payrollTmpChequePrintout.PayrollReportSection           = _reportSection;

        return payrollTmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxes</Name>
				<Source><![CDATA[
    private void createTaxes(TmpChequePrintout                  _tmpChequePrintout,
                            PayrollPayStatementReportSection    _payrollPayStatementReportSection,
                                    HrmDescription              _code,
                                    AmountCur                   _currAmt,
                                    AmountCur                   _ytdAmt)
    {
        payrollTmpChequePrintout = this.createPayStatementHeader(_tmpChequePrintout, _code, _payrollPayStatementReportSection);
        payrollTmpChequePrintout.PayrollCurrentAmount = _currAmt;
        payrollTmpChequePrintout.PayrollYTDAmount = _ytdAmt;

        payrollTmpChequePrintout.insert();
        payrollTmpChequePrintout.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocLength</Name>
				<Source><![CDATA[
    protected ChequeLength getDocLength(ChequeFormType _chequeFormType)
    {
        ChequeLength    chequeDocMm;

        switch (_chequeFormType)
        {
            case ChequeFormType::USPayrollStyle :
                chequeDocMm = 88.89;
                break;

            default:
                throw error("@SYS26828");
        }

        return chequeDocMm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertPayStatementData</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Cretae test data for PayrollWorkerPayCheckReport
    /// </summary>

    public void insertPayStatementData()
    {
        #DEFINE.Test1('Test1')
        #DEFINE.Test2('Test2')
        #DEFINE.Test3('Test3')
        #DEFINE.Test4('Test4')
        #DEFINE.Test5('Test5')
        #DEFINE.Test6('Test6')
        #DEFINE.Test7('Test7')
        #DEFINE.Test8('Test8')
        #DEFINE.Test9('Test9')
        #DEFINE.Test10('Test10')
        #DEFINE.Test11('Test11')
        #DEFINE.Test12('Test12')
        #DEFINE.Test13('Test13')
        #DEFINE.Test14('Test14')
        #DEFINE.Test15('Test15')
        #DEFINE.Test16('Test16')

        this.createEarnings(tmpChequePrintout, PayrollPayStatementReportSection::Earning, #Test2, PayrollQuantityUnit::Hours, 99.9999, 99.9999, 9999.99, 9999.99);
        this.createEarnings(tmpChequePrintout, PayrollPayStatementReportSection::Earning, #Test3, PayrollQuantityUnit::Hours, 99.9999, 99.9999, 9999.99, 9999.99);
        this.createEarnings(tmpChequePrintout, PayrollPayStatementReportSection::TotalGrossEarnings, #Test4, PayrollQuantityUnit::Hours, 99.9999, 99.9999, 9999.99, 9999.99);
        this.createEarnings(tmpChequePrintout, PayrollPayStatementReportSection::TotalNetEarnings, #Test5, PayrollQuantityUnit::Hours, 99.9999, 99.9999, 9999.99, 9999.99);

        this.createBenefits(tmpChequePrintout, PayrollPayStatementReportSection::Deduction, #Test6, 9999.99, 9999.99);
        this.createBenefits(tmpChequePrintout, PayrollPayStatementReportSection::Deduction, #Test7, 9999.99, 9999.99);
        this.createBenefits(tmpChequePrintout, PayrollPayStatementReportSection::TotalDeductions, #Test8, 9999.99, 9999.99);

        this.createTaxes(tmpChequePrintout, PayrollPayStatementReportSection::Tax, #Test9, 9999.99, 9999.99);
        this.createTaxes(tmpChequePrintout, PayrollPayStatementReportSection::Tax, #Test10, 9999.99, 9999.99);
        this.createTaxes(tmpChequePrintout, PayrollPayStatementReportSection::TotalTaxes, #Test11, 9999.99, 9999.99);

        this.createBenefitAccruals(tmpChequePrintout, #Test12, 9999.99, 9999.99, 9999.99);
        this.createBenefitAccruals(tmpChequePrintout, #Test13, 9999.99, 9999.99, 9999.99);

        this.createBenefits(tmpChequePrintout, PayrollPayStatementReportSection::Contribution, #Test14, 9999.99, 9999.99);
        this.createBenefits(tmpChequePrintout, PayrollPayStatementReportSection::Contribution, #Test15, 9999.99, 9999.99);
        this.createBenefits(tmpChequePrintout, PayrollPayStatementReportSection::TotalContributions, #Test16, 9999.99, 9999.99);

        payrollTmpChequePrintout = this.createPayStatementHeader(tmpChequePrintout, #Test1, PayrollPayStatementReportSection::Header);
        payrollTmpChequePrintout.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayrollTmpChequePrintout</Name>
				<Source><![CDATA[
    public PayrollTmpChequePrintout parmPayrollTmpChequePrintout()
    {
        return payrollTmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to print negotiable , non-negotiable, or both check and run the check reports.
    /// </summary>
    void run()
    {
        tmpChequePrintout.clear();

        if ( printChequeCopy || printCheque )
        {
            if (printCheque == NoYes::Yes)
            {
                this.createTestCheque();
            }

            if (printChequeCopy == NoYes::Yes)
            {
                this.createTestCheque(printChequeCopy);
            }

            if (tmpChequePrintout.ChequeFormType == ChequeFormType::USPayrollStyle)
            {
                this.insertPayStatementData();
            }

            PayrollBankPrintTestCheque::printCheque(payrollTmpChequePrintout, this);
        }
        else
        {
            info("@SYS132257");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankPrintTestCheque</c> class.
    /// </summary>
    /// <param name="_bankChequeLayout">
    ///     The <c>BankChequeLayout</c> value to set.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PayrollBankChequePrint</c> class.
    /// </returns>
    public static BankPrintTestCheque construct(BankChequeLayout _bankChequeLayout)
    {
        return new PayrollBankPrintTestCheque(_bankChequeLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PayrollBankPrintTestCheque  payrollBankPrintTestCheque;

        payrollBankPrintTestCheque =  PayrollBankPrintTestCheque::construct(args.record());

        if (payrollBankPrintTestCheque.prompt())
        {
            payrollBankPrintTestCheque.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printCheque</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Prints out the payroll check.
    /// </summary>
    /// <param name="_payrollTmpChequePrintout">
    ///     The temporary cheque printout object to print.
    /// </param>
    /// <param name="_this">
    ///     The object calling the <c>printCheque</c> method.
    /// </param>
    static void printCheque(PayrollTmpChequePrintout    _payrollTmpChequePrintout,
                            Object                      _this)
    {
        Args                        args;
        PayrollBankChequePrint      payrollBankChequePrint;
        PayrollBankPrintTestCheque  payrollBankPrintTestCheque;

        if (_payrollTmpChequePrintout)
        {
            args = new Args();
            payrollBankPrintTestCheque = _this;

            payrollBankChequePrint = PayrollBankChequePrint::construct(_payrollTmpChequePrintout, payrollBankPrintTestCheque.getPrinterSettings());

            args.caller(_this);
            args.object(payrollBankChequePrint);

            switch (_payrollTmpChequePrintout.ChequeFormType)
            {
                case ChequeFormType::USPayrollStyle :
                    args.name(classStr(PayrollBankPrintTestCheque));
                    new MenuFunction(menuitemOutputStr(PayrollWorkerPayCheck), MenuItemType::Output).run(args);
                    break;

                default :
                    throw  error("@SYS26828");
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>