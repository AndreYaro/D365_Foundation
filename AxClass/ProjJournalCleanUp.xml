<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjJournalCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjJournalCleanUp extends RunBaseBatch implements BatchRetryable
{
    QueryRun queryRun;

    NoYes includeHour;
    NoYes includeFee;
    NoYes includeBeginningBalance;

    Integer countDeleted;

    DialogField dialogHour;
    DialogField dialogFee;
    DialogField dialogBeginningBalance;

    ProjJournalId journalId;

    #define.CurrentVersion(2)

    #localmacro.Version1
        includeHour,
        includeFee
    #endmacro

    #localmacro.CurrentList
        includeHour,
        includeFee,
        includeBeginningBalance
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deleteJournals</Name>
				<Source><![CDATA[
    protected void deleteJournals(ProjJournalTable _projJournalTable)
    {
        ProjJournalTable projJournalTable;

        if (_projJournalTable.Posted &&
            ((_projJournalTable.JournalType == ProjJournalType::Hour     && includeHour) ||
             (_projJournalTable.JournalType == ProjJournalType::Revenue  && includeFee) ||
             (_projJournalTable.JournalType == ProjJournalType::BegBalance  && includeBeginningBalance) ))
        {
            delete_from projJournalTable where projJournalTable.JournalId == _projJournalTable.JournalId;
            countDeleted++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        Dialog dialogRunBase;

        dialogRunBase = super();

        dialogRunBase.caption(this.title());

        dialogRunBase.addGroup("@SYS74966");

        dialogHour = dialogRunBase.addFieldValue(enumstr(NoYes), includeHour, "@SYS5269");
        dialogFee = dialogRunBase.addFieldValue(enumstr(NoYes), includeFee, "@SYS9154");
        dialogBeginningBalance = dialogRunBase.addFieldValue(enumstr(NoYes), includeBeginningBalance, "@SYS134438");

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        this.parmIncludeHour(dialogHour.value());
        this.parmIncludeFee(dialogFee.value());
        this.parmIncludeBeginningBalance(dialogBeginningBalance.value());

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(querystr(ProjJournalCleanUp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeBeginningBalance</Name>
				<Source><![CDATA[
    public NoYes parmIncludeBeginningBalance(NoYes _includeBeginningBalance = includeBeginningBalance)
    {
        includeBeginningBalance  = _includeBeginningBalance;

        return includeBeginningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeFee</Name>
				<Source><![CDATA[
    public NoYes parmIncludeFee(NoYes _includeFee = includeFee)
    {
        includeFee  = _includeFee;

        return includeFee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeHour</Name>
				<Source><![CDATA[
    public NoYes parmIncludeHour(NoYes _includeHour = includeHour)
    {
        includeHour  = _includeHour;

        return includeHour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    /// The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    /// dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    /// in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ProjJournalTable projJournalTable;

        try
        {
            ttsbegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            while (queryRun.next())
            {
                projJournalTable = queryRun.get(tablenum(ProjJournalTable));

                this.deleteJournals(projJournalTable);
            }

            ttscommit;

            info(strfmt("@SYS95369", countDeleted));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    /// return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    /// <remarks>
    /// If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    /// return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    /// be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    str title()
    {
        return "@SYS99084";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret = true;

        switch (version)
        {
            case 1:
                [version, #Version1, packedQuery] = packedClass;
                break;

            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                break;

            default:
                ret = false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProjJournalCleanUp construct()
    {
        return new ProjJournalCleanUp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS74933";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProjJournalCleanUp projJournalCleanUp;

        projJournalCleanUp = new ProjJournalCleanUp();

        if (projJournalCleanUp.prompt())
        {
            projJournalCleanUp.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>