<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceCFDIAddressMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>EInvoiceCFDIAddressMap</c> class provides an abstraction to obtain address information that is required to create the XML document
/// </summary>
public class EInvoiceCFDIAddressMap
{
    LogisticsAddressStreet                  street;
    LogisticsAddressStreetNumber            streetNumber;
    LogisticsAddressBuildingCompliment      buildingComplement;
    LogisticsAddressCityName                city;
    LogisticsAddressCountyName              county;
    LogisticsAddressCountyId                countyId;
    LogisticsAddressStatename               state;
    LogisticsAddressStateId                 stateId;
    LogisticsAddressCountryRegionShortName  countryRegion;
    LogisticsAddressZipCodeId               zipCode;
    LogisticsAddressCountryRegionId         countryRegionId;
    LogisticsAddressCityKey                 cityKey;
    private LogisticsAddressDistrictName districtName;
    private Timezone timezone;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmCityKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the city key of the current logistics postal address.
    /// </summary>
    /// <returns>The city key of the current logistics postal address.</returns>
    public LogisticsAddressCityKey parmCityKey(LogisticsAddressCityKey _cityKey = cityKey)
    {
        cityKey = _cityKey;

        return cityKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the street of the current logistics postal address.
    /// </summary>
    /// <returns>The street of the current logistics postal address.</returns>
    public LogisticsAddressStreet parmStreet(LogisticsAddressStreet _street = street)
    {
        street = strReplace(_street,"\n", " ");

        return street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreetNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the streetNumber of the current logistics postal address.
    /// </summary>
    /// <returns>The streetNumber of the current logistics postal address.</returns>
    public LogisticsAddressStreetNumber parmStreetNumber(LogisticsAddressStreetNumber _streetNumber = streetNumber)
    {
        streetNumber = _streetNumber;

        return streetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuildingComplement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BuildingComplement of the posted document.
    /// </summary>
    /// <returns>The BuildingComplement of the posted document.</returns>
    public LogisticsAddressBuildingCompliment parmBuildingComplement(LogisticsAddressBuildingCompliment _buildingComplement = buildingComplement)
    {
        buildingComplement = _buildingComplement;

        return buildingComplement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the emitent city of the current logistics postal address.
    /// </summary>
    /// <returns>The city of the current logistics postal address.</returns>
    public LogisticsAddressCityName parmCity(LogisticsAddressCityName _city = city)
    {
        city = _city;

        return city;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountyId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the county id of the current logistics postal address.
    /// </summary>
    /// <returns>The county id of the current logistics postal address.</returns>
    public LogisticsAddressCountyId parmCountyId(LogisticsAddressCountyId _countyId = countyId)
    {
        countyId = _countyId;

        return countyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCounty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the county name of the current logistics postal address.
    /// </summary>
    /// <returns>The county name of the current logistics postal address.</returns>
    public LogisticsAddressCountyName parmCounty(LogisticsAddressCountyName _county = county)
    {
        county = _county;

        return county;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the state of the current logistics postal address.
    /// </summary>
    /// <returns>The state of the current logistics postal address.</returns>
    public LogisticsAddressStatename parmState(LogisticsAddressStatename _state = state)
    {
        state = _state;

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateId</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Gets the state ID of the current logistics postal address.
    /// </summary>
    /// <returns>The state ID of the current logistics postal address.</returns>
    public LogisticsAddressStateId parmStateId(LogisticsAddressStateId _stateId = stateId)
    {
        stateId = _stateId;

        return stateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country region name of the current logistics postal address.
    /// </summary>
    /// <returns>The country region name of the current logistics postal address.</returns>
    public LogisticsAddressCountryRegionShortName parmCountryRegion(LogisticsAddressCountryRegionShortName _countryRegion = countryRegion)
    {
        countryRegion = _countryRegion;

        return countryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country region ID of the current logistics postal address.
    /// </summary>
    /// <returns>The country region ID of the current logistics postal address.</returns>
    public LogisticsAddressCountryRegionId parmCountryRegionId(LogisticsAddressCountryRegionId _countryRegionId = countryRegionId)
    {
        countryRegionId = _countryRegionId;

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZipCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the zip code of the current logistics postal address.
    /// </summary>
    /// <returns>The zip code of the current logistics postal address.</returns>
    public LogisticsAddressZipCodeId parmZipCode(LogisticsAddressZipCodeId _zipCode = zipCode)
    {
        zipCode = _zipCode;

        return zipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistrictName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the district name of the current logistics postal address.
    /// </summary>
    /// <returns>The district name of the current logistics postal address.</returns>
    public LogisticsAddressDistrictName parmDistrictName(LogisticsAddressDistrictName _districtName = districtName)
    {
        districtName = _districtName;

        return districtName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do not use this to instantiate a new instance of <c>EInvoiceCFDIAddressMap</c>
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPostalAddress</Name>
				<Source><![CDATA[
    private void initFromPostalAddress(LogisticsPostalAddress _address)
    {
        this.parmStreet(_address.Street);
        this.parmStreetNumber(_address.StreetNumber);
        this.parmBuildingComplement(_address.BuildingCompliment);
        this.parmCityKey(LogisticsAddressCity::findRecId(_address.CityRecId).CityKey);
        this.parmCity(_address.City);
        this.parmCounty(LogisticsAddressCounty::find(_address.CountryRegionId, _address.State, _address.County).Name);
        this.parmCountyId(LogisticsAddressCounty::find(_address.CountryRegionId, _address.State, _address.County).CountyId);
        this.parmState(LogisticsAddressState::find(_address.CountryRegionId, _address.State).Name);
        this.parmStateId(LogisticsAddressState::find(_address.CountryRegionId, _address.State).StateId);
        this.parmCountryRegion(LogisticsAddressCountryRegionTranslation::find(_address.CountryRegionId).ShortName);
        this.parmCountryRegionId(LogisticsAddressCountryRegionTranslation::find(_address.CountryRegionId).CountryRegionId);
        this.parmZipCode(_address.ZipCode);
        this.parmDistrictName(_address.DistrictName);
        this.parmTimezone(_address.TimeZone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EInvoiceCFDIAddressMap</c>.
    /// </summary>
    /// <param name="_address">A valid <c>LogisticsPostalAddress</c> record.</param>
    /// <returns>An empty instance of <c>EInvoiceCFDIAddressMap</c></returns>
    public static EInvoiceCFDIAddressMap construct()
    {
        return new EInvoiceCFDIAddressMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EInvoiceCFDIAddressMap</c> with the given <c>LogisticsPostalAddress</c>
    /// </summary>
    /// <param name="_address">A valid <c>LogisticsPostalAddress</c> record.</param>
    /// <returns>A new instance of <c>EInvoiceCFDIAddressMap</c></returns>
    public static EInvoiceCFDIAddressMap constructFromPostalAddress(LogisticsPostalAddress _address)
    {
        EInvoiceCFDIAddressMap addressMap = new EInvoiceCFDIAddressMap();

        addressMap.initFromPostalAddress(_address);

        return addressMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>EInvoiceCFDIAddressMap</c> with the given <c>LogisticsPostalAddress</c>
    /// </summary>
    /// <param name="_addressRecId">A valid rec id of a <c>LogisticsPostalAddress</c> record.</param>
    /// <returns>A new instance of <c>EInvoiceCFDIAddressMap</c></returns>
    public static EInvoiceCFDIAddressMap constructFromPostalAddressRecId(LogisticsPostalAddressRecId _addressRecId)
    {
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(_addressRecId);

        return EInvoiceCFDIAddressMap::constructFromPostalAddress(address);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimezone</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Timezone parmTimezone(Timezone _timezone = timezone)
    {
        timezone = _timezone;

        return timezone;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>