<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankStatementLineReversePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankStatementLineReversePost</c>class performs reverse posting of bank statement line post table.
/// </summary>
internal class BankStatementLineReversePost
{
    private BankStmtISOReportEntry statementLine;
    private TransDate reversalDate;
    private ReasonTableRef reverseReason;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BankStatementLineReversePost</c>.
    /// </summary>
    /// <param name="_statementLine">The statement line to post.</param>
    /// <param name="_reversalDate">The reversal date.</param>
    /// <param name="_reverseReason">The reverse reason.</param>
    /// <returns>A new instance of <c>BankStatementLineReversePost</c>.</returns>
    internal static BankStatementLineReversePost construct(BankStmtISOReportEntry _statementLine, TransDate _reversalDate, ReasonTableRef _reverseReason)
    {
        if (FeatureStateProvider::isFeatureEnabled(BankModernReconciliationFeature::instance()))
        {
            BankStatementLineReversePost lineReversePost = new BankStatementLineReversePost();
            lineReversePost.statementLine = _statementLine;
            lineReversePost.reversalDate = _reversalDate;
            lineReversePost.reverseReason = _reverseReason;
            return lineReversePost;
        }
        else
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses post the statement line, updates the statement header and line post table and unmatches for the reversed voucher.
    /// </summary>
    internal void post()
    {
        ttsbegin;
        this.validateStatementLineForReversePosting(statementLine);
        BankStatementLinePostTable linePostTable = BankStatementLinePostTable::find(statementLine.BankStatementLinePostTable);
        this.reverseLinePostTableNewTransactions(statementLine, linePostTable, reversalDate, reverseReason);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLinePostTableNewTransactions</Name>
				<Source><![CDATA[
    private void reverseLinePostTableNewTransactions(
        BankStmtISOReportEntry _statementLine,
        BankStatementLinePostTable _linePostTable,
        TransDate _reversalDate,
        ReasonTableRef __reverseReason)
    {
        BankStmtISOReportEntry statementLineToReverse = BankStmtISOReportEntry::find(_statementLine.RecId, true);
        Voucher voucherToReverse = statementLineToReverse.Voucher;

        this.checkGeneralJournalEntry(voucherToReverse);

        Voucher reversalVoucher = NumberSeq::newGetNum(BankParameters::numRefBankStatementReversalVoucher(), false).num();

        TransDate originalDate = statementLineToReverse.AccountingDate;
        TransDate actualReversalDate = _reversalDate ? _reversalDate : originalDate;

        BankStatementReversePost::checkReversalDate(actualReversalDate, originalDate);

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(_linePostTable, false, SourceDocumentAccountingStatus::InProcess);
        SourceDocumentLineImplementationList sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

        BankStmtISODecimal originalAmount = statementLineToReverse.Amount;

        statementLineToReverse.Amount = 0;
        statementLineToReverse.Voucher = reversalVoucher;
        statementLineToReverse.AccountingDate = actualReversalDate;
        statementLineToReverse.doUpdate();

        TaxUncommitted::deleteForDocumentLine(statementLineToReverse.TableId, statementLineToReverse.RecId, false, true);
        SourceDocumentProcessorFacade::submitSourceDocumentLineImplementation(statementLineToReverse, false, SourceDocumentLineAccountingStatus::FullyDistributed);
        sourceDocumentLineImplementationList.addEnd(statementLineToReverse);

        BankStatementReverseHistory::recordLinePostTableReverse(_linePostTable, statementLineToReverse, voucherToReverse, reversalVoucher);

        SourceDocumentProcessorFacade::submitSourceDocumentImplementation(
            _linePostTable,
            false,
            SourceDocumentAccountingStatus::Completed,
            null,
            curUserId(),
            true,
            sourceDocumentLineImplementationList);

        this.reverseTaxTrans(voucherToReverse, reversalVoucher, 0, 0, originalDate, actualReversalDate);
        this.createReversedBankAccountTransToLinePostTable(_linePostTable, voucherToReverse, reversalVoucher, actualReversalDate);
        this.createVoucherLink(
            voucherToReverse,
            originalDate,
            reversalVoucher,
            actualReversalDate);

        BankStmtISOReportEntry statementLineToReverseReread = BankStmtISOReportEntry::find(_statementLine.RecId, true);
        statementLineToReverseReread.Amount = originalAmount;
        statementLineToReverseReread.doUpdate();
        statementLineToReverseReread.reversePostedStatementLineAndPostingInfo();

        this.processLinePostTableAndStatement(_linePostTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinePostTableAndStatement</Name>
				<Source><![CDATA[
    private void processLinePostTableAndStatement(BankStatementLinePostTable _linePostTable)
    {
        ttsbegin;
        _linePostTable.selectForUpdate(true);
        _linePostTable.PostingStatus = BankStatementLinePostStatus::Reversed;
        _linePostTable.update();

        TaxUncommitted::deleteForDocumentHeader(_linePostTable.TableId, _linePostTable.RecId, false);

        BankStmtISOAccountStatement statement = statementLine.getStatement();
        if (!statement.existPostedLine() && statement.Voucher == '')
        {
            statement.selectForUpdate(true);
            statement.Posted = false;
            statement.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedBankAccountTransToLinePostTable</Name>
				<Source><![CDATA[
    private void createReversedBankAccountTransToLinePostTable(
        BankStatementLinePostTable _linePostTable,
        Voucher _voucherToReverse,
        Voucher _reversalVoucher,
        TransDate _reversalDate)
    {
        BankAccountTrans bankAccountTrans;
        BankStmtISOReportEntry statementLineLoc;

        while select bankAccountTrans
            exists join statementLineLoc
            where bankAccountTrans.SourceRecId == statementLineLoc.RecId
                && bankAccountTrans.SourceTableId == statementLineLoc.TableId
                && bankAccountTrans.Voucher == _voucherToReverse
                && statementLineLoc.BankStatementLinePostTable == _linePostTable.RecId
        {
            BankAccountTrans reversedBankAccountTrans = bankAccountTrans.data();

            reversedBankAccountTrans.Voucher = _reversalVoucher;
            reversedBankAccountTrans.TransDate = _reversalDate;
            reversedBankAccountTrans.Included = NoYes::No;
            reversedBankAccountTrans.Reconciled = NoYes::Yes;
            reversedBankAccountTrans.AmountCur = -bankAccountTrans.AmountCur;
            reversedBankAccountTrans.AmountMST = -bankAccountTrans.AmountMST;
            reversedBankAccountTrans.AmountReportingCurrency = -bankAccountTrans.AmountReportingCurrency;
            reversedBankAccountTrans.BankTransAmountCur = -bankAccountTrans.BankTransAmountCur;
            reversedBankAccountTrans.ReasonRefRecID = reverseReason.RecId;
            reversedBankAccountTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxTrans</Name>
				<Source><![CDATA[
    private void reverseTaxTrans(Voucher _voucherToReverse, Voucher _reversalVoucher, RecId _reverseRecId, TableId _reverseTableId, TransDate _origTransDate, TransDate _reversalDate)
    {
        LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail, SysModule::Ledger, null);

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(_reversalVoucher, _reversalDate, SysModule::Ledger));

        TaxReverseTax reverseTax = new TaxReverseTax(
            _reversalVoucher,
            _reversalDate,
            reverseReason.ReasonComment);

        reverseTax.setReverseRecId(_reverseRecId);
        reverseTax.setReverseTableId(_reverseTableId);

        reverseTax.calcAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher), _voucherToReverse, _origTransDate);

        if (_reverseRecId == 0)
        {
            TaxTrans taxTrans;
            taxTrans.skipDataMethods(true);
            taxTrans.skipDatabaseLog(true);
            taxTrans.skipEvents(true);

            TaxTrans originalTaxTrans;
            update_recordset taxTrans
                setting SourceRecId = originalTaxTrans.SourceRecId,
                    SourceTableId = originalTaxTrans.SourceTableId
                join originalTaxTrans
                where originalTaxTrans.Voucher == _voucherToReverse
                    && originalTaxTrans.SourceDocumentLine == taxTrans.SourceDocumentLine
                    && taxTrans.Voucher == _reversalVoucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkGeneralJournalEntry</Name>
				<Source><![CDATA[
    private void checkGeneralJournalEntry(Voucher _voucherToReverse)
    {
        GeneralJournalEntry generalJournalEntry;
        select firstonly RecId from generalJournalEntry
            where generalJournalEntry.SubledgerVoucher == _voucherToReverse;

        if (generalJournalEntry.RecId == 0)
        {
            throw error("@CashManagement:SubLedgerTransferNotFinished");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherLink</Name>
				<Source><![CDATA[
    private void createVoucherLink(Voucher _parentVoucher, TransDate _parentTransDate, Voucher _relatedVoucher, TransDate _relatedTransDate)
    {
        RecId voucherGroupId = LedgerTransVoucherLink::findOrCreateParentVoucherLink(_parentVoucher, _parentTransDate).VoucherGroupId;
        LedgerTransVoucherLink::getCurrentVoucherGroupId(voucherGroupId, _relatedVoucher, _relatedTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatementLineForReversePosting</Name>
				<Source><![CDATA[
    private void validateStatementLineForReversePosting(BankStmtISOReportEntry _statementLine)
    {
        // Validates line
        if (!_statementLine.RecId || !_statementLine.isPosted() || _statementLine.isNewBankDocument == NoYes::No || _statementLine.SourceDocumentLine == 0)
        {
            throw error("@Bank:StatementLineNotSupportReverse");
        }

        // Validates line post table
        BankStatementLinePostTable linePostTable = BankStatementLinePostTable::find(_statementLine.BankStatementLinePostTable);
        if (!linePostTable.RecId || linePostTable.PostingStatus != BankStatementLinePostStatus::Posted || linePostTable.SourceDocumentHeader == 0)
        {
            throw error(strFmt("@Bank:AlteredDataCannotSupportReverseError", tableStr(BankStatementLinePostTable)));
        }

        // Validates line post table only and exactly has one line
        BankStmtISOReportEntry statementLineLoc;
        select count(RecId) from statementLineLoc
            where statementLineLoc.BankStatementLinePostTable == linePostTable.RecId;
        if (statementLineLoc.RecId != 1)
        {
            throw error(strFmt("@Bank:AlteredDataCannotSupportReverseError", tableStr(BankStmtISOReportEntry)));
        }

        // Validates statement
        BankStmtISOAccountStatement statement = _statementLine.getStatement();
        if (statement.Posted == false)
        {
            throw error("@CashManagement:UnpostedBankStatementCannotBeReversed");
        }
        if (statement.isStatementHeaderPosted())
        {
            throw error("@Bank:StatementHeaderHasBeenPostedError");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>