<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAccountDimensionResolver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetAccountDimensionResolver</c> class resolves budget account dimension values.
/// </summary>
public class BudgetAccountDimensionResolver extends DimensionResolver
{
    Name                    accountStructure;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newResolver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetAccountDimensionResolver</c> class.
    /// </summary>
    /// <param name="_dimensionValues">
    /// A string of the display values of the dimension separated by the chart of accounts delimiter character of the system.
    /// </param>
    /// <param name="_accountStructure">
    /// The account structure name.
    /// </param>
    /// <returns>
    /// The new instance of the <c>BudgetAccountDimensionResolver</c> class.
    /// </returns>
    public static BudgetAccountDimensionResolver newResolver(
        DefaultDimensionIntegrationValues   _dimensionValues,
        Name                                _accountStructure)
    {
        BudgetAccountDimensionResolver budgetAccountDimensionResolver = new BudgetAccountDimensionResolver();

        budgetAccountDimensionResolver.parmDimensionFormat(budgetAccountDimensionResolver.getDimensionAttributeFormat());
        budgetAccountDimensionResolver.parmDimensionValues(_dimensionValues);

        Name accountStructure = _accountStructure;

        if (!accountStructure && budgetAccountDimensionResolver.checkCountsMatch() 
                && BudgetParameters::find().DeriveAccountStructureFromCombination)
        {
            Name mainAccountName = DimensionAttribute::getWellKnownDimensionAttributeName(DimensionAttributeType::MainAccount);

            budgetAccountDimensionResolver.buildDimensionContractValueList();
            DimensionNameValueListContract nameValueList = budgetAccountDimensionResolver.getDimensionContract();
            ListEnumerator nameValueListEnumerator = nameValueList.parmValues().getEnumerator();

            DimensionValue mainAccountDimensionValue;

            while (nameValueListEnumerator.moveNext())
            {
                DimensionAttributeValueContract valueContract = nameValueListEnumerator.current() as DimensionAttributeValueContract;
            
                if (valueContract.parmName() == mainAccountName)
                {
                    mainAccountDimensionValue = valueContract.parmValue();

                    DimensionHierarchyId accountStructureId = DimensionHierarchy::getAccountStructure(
                        MainAccount::findByMainAccountId(mainAccountDimensionValue).RecId,
                        Ledger::current());

                    accountStructure = DimensionHierarchy::find(accountStructureId).Name;

                    break;
                }
            }

            if (!accountStructure)
            {
                throw error(strFmt("@Budget:MainAccountNotPresentInAccountStructure", mainAccountDimensionValue));
            }
        }

        budgetAccountDimensionResolver.parmAccountStructure(accountStructure);

        return budgetAccountDimensionResolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountStructure</Name>
				<Source><![CDATA[
    public Name parmAccountStructure(Name _accountStructure = accountStructure)
    {
        accountStructure = _accountStructure;
        return accountStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionContractValueList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the dimension contract from the dimension names and values, setting the account structure.
    /// </summary>
    protected void buildDimensionContractValueList()
    {
        super();
        BudgetAccountContract budgetAccountContract = this.getDimensionContract();
        budgetAccountContract.parmAccountStructure(this.parmAccountStructure());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionNameValueListServiceProvider</Name>
				<Source><![CDATA[
    protected DimensionNameValueListServiceProvider getDimensionNameValueListServiceProvider(
        DimensionNameValueListContract _dimensionNameValueListContract)
    {
        BudgetAccountContract budgetAccountContract = _dimensionNameValueListContract;

        if (!budgetAccountContract)
        {
            throw error("@SYS326400", DimensionServiceFaults::DimensionContractIsNotInitialized);
        }

        return BudgetDimensionCombinationServiceProvider::newForBudgetAccountContract(budgetAccountContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStorageResultValidationMessages</Name>
				<Source><![CDATA[
    protected List getStorageResultValidationMessages(DimensionStorageResult _result)
    {
        List validationMessages;

        switch (_result.parmStatus())
        {
            case DimensionStorageResultStatus::InvalidPrimaryStructure:
                BudgetAccountContract budgetAccountContract = _result.getDimensionNameValueListContract();
                validationMessages = new List(Types::String);

                if (budgetAccountContract.parmAccountStructure())
                {
                    validationMessages.addEnd(strFmt("@SYS342561", budgetAccountContract.parmAccountStructure()));
                }
                else
                {
                    validationMessages.addEnd("@SYS317163");
                }
                break;

            default:
                validationMessages = super(_result);
                break;
        }

        return validationMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDimensionContract</Name>
				<Source><![CDATA[
    protected DimensionNameValueListContract constructDimensionContract()
    {
        return new BudgetAccountContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionAttributeFormat</Name>
				<Source><![CDATA[
    protected DefaultDimensionIntegrationStructureDisplay getDimensionAttributeFormat()
    {
        DefaultDimensionIntegrationStructureDisplay dimensionAttributesFormat;

        dimensionAttributesFormat = DimensionHierarchy::getDisplayStringDimensionIntegrationStructure(
            DimensionDataEntityStructureType::DataEntityBudgetDimensionFormat);

        return dimensionAttributesFormat;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExtendedDataTypeName</Name>
				<Source><![CDATA[
    protected ExtendedDataTypeName getExtendedDataTypeName()
    {
        return extendedtypestr(LedgerDimensionBudget);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumValue</Name>
				<Source><![CDATA[
    protected DimensionAccountType getEnumValue()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyName</Name>
				<Source><![CDATA[
    protected Name getDimensionHierarchyName()
    {
        return accountStructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionHierarchyType</Name>
				<Source><![CDATA[
    protected DimensionHierarchyType getDimensionHierarchyType()
    {
        return DimensionHierarchyType::DataEntityBudgetDimensionFormat;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>