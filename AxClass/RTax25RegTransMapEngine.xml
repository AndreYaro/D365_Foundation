<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegTransMapEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RTax25RegTransMapEngine</c> class supports the Tax register transaction lines forms with a variety of features.
/// </summary>
public class RTax25RegTransMapEngine
{
    FormRun                    formRun;
    RTax25RegType              regType;
    Form                       form;
    RTax25RegisterJournalTrans registerJournalTrans;
    RTax25RegisterType         registerType;
    container                  regFieldId;
    NumberOf                   fieldCnt;
    Set                        hidedFields;
    RTax25RegCalcController    calcController;
    FormDataSource             formDataSource;
    TableId                    detachedTableId;
    RTax25RegisterTransMap     origTrans;

    boolean                    isFolder;
    Map                        folderHeaders, folderFooters, folderBody;
    private static int foldState = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>append</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void append(RTax25RegisterTransMap _appendTrans)
    {
        RTax25RegisterTransMap   regTrans = new SysDictTable(detachedTableId).makeRecord();

        select firstonly regTrans
            where regTrans.JournalTransRefRecId == _appendTrans.JournalTransRefRecId &&
                  regTrans.LineNumber           == _appendTrans.LineNumber;

        if (regTrans.RecId)
        {
            if (Box::yesNo("@GLS104004",DialogButton::Yes,"@GLS104005","@GLS104006") == DialogButton::No)
            {
                return;
            }
            regTrans.renumbering(_appendTrans.LineNumber);
            if (isFolder)
            {
                this.initFolders();
                this.setFolderFilter();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifiedParentRegisters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canModifiedParentRegisters()
    {
        return calcController.canModifiedParentRegisters(registerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeFolderState</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void changeFolderState(RTax25RegisterLineNum64 _lineNum, ReportBlockType _blockType)
    {
        void changeState(Map _map1, Map _map2)
        {
            container c1, c2;
            if (_map1.exists(_lineNum))
            {
                c1 = _map1.lookup(_lineNum);
                c2 = _map2.lookup(conPeek(c1, 1));

                c1 = conPoke(c1, foldState, !conPeek(c1, foldState));
                c2 = conPoke(c2, foldState, !conPeek(c2, foldState));

                _map1.insert(_lineNum, c1);
                _map2.insert(conPeek(c1, 1), c2);
            }
        }

        if (!isFolder)
            return;

        if (_blockType == ReportBlockType::Header)
        {
            changeState(folderHeaders, folderFooters);
        }
        else if (_blockType == ReportBlockType::Footer)
        {
            changeState(folderFooters, folderHeaders);
        }

        this.setFolderFilter();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createDesign()
    {
        FormBuildDataSource     formBuildDataSource;
        FormBuildGridControl    gridControl;
        FormBuildStringControl  formBuildStringControl;
        FormBuildGroupControl   groupControl;
        Object                  formBuildControl;
        SysDictField            dictField;
        int                     i, j;
        FieldId                 fieldId;

        formBuildDataSource = formRun.form().dataSource(1);
        formBuildDataSource.table(detachedTableId);

        formBuildDataSource.index(indexName2Id(detachedTableId, 'JournalRegisterLineTypeIdx'));

        gridControl = formRun.form().design().control('Grid');
        gridControl.dataSource(formBuildDataSource.name());

        fieldId   = fieldName2Id(detachedTableId, 'LineNumber');
        dictField = new SysDictField(detachedTableId, fieldId);
        formBuildControl = gridControl.addDataField(formBuildDataSource.id(), fieldId);
        formBuildControl.label(dictField.label());
        formBuildControl.helpText(dictField.help());

        for (i = 1; i <= fieldCnt; i++)
        {
            fieldId   = conpeek(regFieldId, i);
            dictField = new SysDictField(detachedTableId, fieldId);
            if (! hidedFields.in(i))
            {
                for (j = 1; j <= dictField.arraySize(); j++)
                {
                    if (dictField.baseType() == Types::String ||
                        dictField.baseType() == Types::RString ||
                        dictField.baseType() == Types::VarString)
                    {
                        formBuildStringControl = gridControl.addDataField(formBuildDataSource.id(), fieldId2Ext(fieldId, j));
                        formBuildStringControl.displayHeightMode(0);
                        formBuildStringControl.displayHeightValue(1);
                        formBuildStringControl.label(conpeek(regType.fieldLabel(), i));
                        formBuildStringControl.helpText(conpeek(regType.fieldDescription(), i));
                        formBuildStringControl.allowEdit(true);
                    }
                    else if (dictField.baseType() != Types::Container)
                    {
                        formBuildControl = gridControl.addDataField(formBuildDataSource.id(), fieldId2Ext(fieldId, j));
                        formBuildControl.label(conpeek(regType.fieldLabel(), i));
                        formBuildControl.helpText(conpeek(regType.fieldDescription(), i));
                        if (dictField.baseType() == Types::Integer ||
                            dictField.baseType() == Types::Real)
                            formBuildControl.showZero(RepShowZero::No);
                    }
                }
            }
        }
        formBuildStringControl = formRun.form().design().control('LineDescriptionFooter');
        formBuildStringControl.dataSource(formBuildDataSource.name());
        formBuildStringControl.dataField(fieldName2Id(detachedTableId, 'LineDescription'));

        groupControl = formRun.form().design().control('GroupProfit');
        groupControl.dataSource(formBuildDataSource.name());
        groupControl.dataGroup('ExpenseCode');

        formBuildControl = formRun.form().design().control('ProfitAmountFooter');
        formBuildControl.dataSource(formBuildDataSource.name());
        formBuildControl.dataField(fieldName2Id(detachedTableId, 'ProfitAmount'));

        groupControl = formRun.form().design().control('ProfitTypeGroup');
        groupControl.dataSource(formBuildDataSource.name());
        groupControl.dataGroup('ExpenseCode');

        groupControl = formRun.form().design().control('LineDescriptionGroup');
        groupControl.dataSource(formBuildDataSource.name());
        groupControl.dataGroup('LineParameters');

        groupControl = formRun.form().design().control('LineStatusGroup');
        groupControl.dataSource(formBuildDataSource.name());
        groupControl.dataGroup('Status');
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void delete()
    {
        if (origTrans.RecId)
        {
            ttsbegin;
            this.deleteTotals(origTrans.LineNumber);
            this.updateTotals(null, origTrans);
            this.updateParentRegisterStatus();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFolder</Name>
				<Source><![CDATA[
    private void deleteFolder(RTax25RegisterLineNum64 _headerLineNum)
    {
        if (isFolder && folderHeaders.exists(_headerLineNum))
        {
            folderFooters.remove(conPeek(folderHeaders.lookup(_headerLineNum), 1));
            folderHeaders.remove(_headerLineNum);
            this.setFolderFilter();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTotals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean deleteTotals(RTax25RegisterLineNum64 _lineNumber)
    {
        RTax25RegisterLineNum64  lineNumberHeader;
        boolean                  ret = false;
        RTax25RegisterTransMap   regTransHeader = new SysDictTable(detachedTableId).makeRecord(),
                                 regTrans       = new SysDictTable(detachedTableId).makeRecord();

        select firstonly forupdate RecId, LineNumber from regTrans
            order by LineNumber desc
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId  &&
                  regTrans.BlockType            == ReportBlockType::Header     &&
                  regTrans.LineNumber           <  _lineNumber;

        if (! regTrans.RecId)
            return ret;

        regTransHeader =  regTrans.data();
        select firstonly forupdate BlockType from regTrans
            order by LineNumber
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                  regTrans.LineNumber           >  regTransHeader.LineNumber;

        if (regTrans.BlockType == ReportBlockType::Footer)
        {
            lineNumberHeader = regTransHeader.LineNumber;
            this.deleteFolder(lineNumberHeader);
            regTransHeader.doDelete();
            regTrans.doDelete();
            ret = true;
            this.deleteTotals(lineNumberHeader);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected FormRun formRun(FormRun _formRun)
    {
        formRun = _formRun;
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTrans getJournalTrans()
    {
        return registerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean init()
    {
        Object                profitObj;

        formDataSource = formRun.dataSource(1);

        str formCaption = RTax25RegisterTable::registerName(regType.registerId());
        formRun.design().caption(formCaption ? formCaption : regType.description());

        profitObj = formDataSource.object(fieldName2Id(detachedTableId, 'RTax25ProfitTable'));
        profitObj.allowEdit(regType.registerType() != RTax25RegisterType::Deferrals);

        this.initFolders();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFolders</Name>
				<Source><![CDATA[
    private void initFolders()
    {
        int                     level;
        Array                   headers  = new Array(Types::Int64);
        RTax25RegisterTransMap  regTrans = new SysDictTable(detachedTableId).makeRecord();
        NoYes                   isFolderCollapsed;

        if (regType.disableCollapseFolders())
        {
            isFolder = false;
            return;
        }

        folderHeaders = new Map(Types::Int64, Types::Container);
        folderFooters = new Map(Types::Int64, Types::Container);
        folderBody    = new Map(Types::Int64, Types::Integer);

        isFolderCollapsed = this.isFolderCollapsed();

        while select LineNumber, BlockType from regTrans
            order by LineNumber
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId
        {
            switch (regTrans.BlockType)
            {
                case ReportBlockType::Header:
                    level++;
                    headers.value(level, regTrans.LineNumber);
                    break;

                case ReportBlockType::Body:
                    folderBody.insert(regTrans.LineNumber, level);
                    break;

                case ReportBlockType::Footer:
                    if (level > 0)
                    {
                        folderHeaders.insert(headers.value(level), [regTrans.LineNumber, isFolderCollapsed, level]);
                        folderFooters.insert(regTrans.LineNumber, [headers.value(level), isFolderCollapsed, level]);
                        level--;
                    }
                    break;
            }
        }
        isFolder = folderHeaders.elements() && !level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFolder</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isFolder()
    {
        return isFolder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFolderCollapsed</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isFolderCollapsed()
    {
        return RTax25RegisterTable::findRegisterId(registerJournalTrans.RegisterId).Expand ? NoYes::No : NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRegUpdated</Name>
				<Source><![CDATA[
    private boolean isRegUpdated(Common _mainTrans,
                                 Common _origTrans)
    {
        int     i;

        for (i = 1; i <= fieldCnt; i++)
        {
            if (_mainTrans.(conpeek(regFieldId, i)) != _origTrans.(conpeek(regFieldId, i)))
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(RTax25RegisterJournalTrans _registerJournalTrans)
    {
        form                 = new Form(formstr(RTax25RegisterTransMap), true);
        registerJournalTrans = _registerJournalTrans;
        registerType         = RTax25RegisterTable::registerId2Type(_registerJournalTrans.RegisterId);
        regType              = RTax25RegType::construct(registerType, _registerJournalTrans.AssessedTaxRegisterType);
        detachedTableId      = regType.detachedTableId();
        regFieldId           = regType.fieldId();
        fieldCnt             = regType.fieldCount();
        hidedFields          = RTax25RegisterHideSetup::hidedFields(_registerJournalTrans);
        calcController       = new RTax25RegCalcController();
        calcController.rTax25RegisterJournalTable(registerJournalTrans.registerJournalTable());

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigRegisterTransMap</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    RTax25RegisterTransMap parmOrigRegisterTransMap(RTax25RegisterTransMap _origTrans = origTrans)
    {
        origTrans = _origTrans;
        return origTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegType regType()
    {
        return regType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        Args args = new Args();

        args.object(form);
        args.caller(this);
        args.record(registerJournalTrans);
        formRun = classfactory.formRunClass(args);
        formRun.init();

        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFolderFilter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setFolderFilter()
    {
        str                 filter;
        MapEnumerator       enumerator;

        if (! isFolder)
        {
            return;
        }

        enumerator = folderHeaders.getEnumerator();
        formDataSource.query().dataSourceTable(detachedTableId).clearRange(fieldName2Id(detachedTableId, 'LineNumber'));

        while (enumerator.moveNext())
        {
            if (conPeek(enumerator.currentValue(), foldState))
            {
                filter += strFmt('!%1..%2,', enumerator.currentKey(), conPeek(enumerator.currentValue(), 1) - 1);
            }
        }
        if (filter)
        {
            filter = strDel(filter, strLen(filter), 1);
        }

        SysQuery::findOrCreateRange(formDataSource.query().dataSourceTable(detachedTableId), fieldName2Id(detachedTableId, 'LineNumber')).value(filter);

        formDataSource.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLevel</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showLevel(RTax25RegisterGroupDeprShow _deprShow)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParentRegisterStatus</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateParentRegisterStatus()
    {
        registerJournalTrans.Status = RTax25RegisterStatus::NotCalculated;
        calcController.updateParentRegisterStatus(registerJournalTrans);
        registerJournalTrans.Status = RTax25RegisterStatus::Calculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean updateTotals(RTax25RegisterTransMap _mainTrans,
                                   RTax25RegisterTransMap _origTrans = null)
    {
        container               updFieldId, updValue;
        Common                  common, commonMain = _mainTrans, commonOrig = _origTrans;
        int                     i , openHeader = 0;
        boolean                 ret = false;
        RTax25RegisterTransMap  regTrans     = new SysDictTable(detachedTableId).makeRecord();
        container               headerFields = regType.headerFields();
        anytype                 anyZero = 0;
        if ((! _mainTrans && ! _origTrans) || ! headerFields)
            return ret;

        for (i = 1; i <= fieldCnt; i++)
        {
            if (!hidedFields.in(i) && conpeek(headerFields, i) &&
                (! _origTrans || ! _mainTrans ||
                 commonMain.(conpeek(regFieldId, i)) != commonOrig.(conpeek(regFieldId, i))))
            {
                updFieldId += conpeek(regFieldId, i);
                updValue = updValue +
                          ((_mainTrans ? commonMain.(conpeek(regFieldId, i)) : anyZero) -
                           (_origTrans ? commonOrig.(conpeek(regFieldId, i)) : anyZero));
            }
        }

        if (! conlen(updFieldId))
            return ret;

        while select forupdate regTrans
            order by LineNumber
            where regTrans.JournalTransRefRecId == registerJournalTrans.RecId &&
                 (regTrans.BlockType            == ReportBlockType::Header    ||
                  regTrans.BlockType            == ReportBlockType::Footer)   &&
                  regTrans.LineNumber           >  (_mainTrans ? _mainTrans.LineNumber : _origTrans.LineNumber)
        {
            if (regTrans.BlockType == ReportBlockType::Footer)
            {
                if (! openHeader)
                {
                    common = regTrans;
                    for (i = 1; i <= conlen(updFieldId) ; i++)
                    {
                        common.(conpeek(updFieldId, i)) += conpeek(updValue, i);
                        ret = true;
                    }

                    common.doUpdate();
                }
                if (openHeader)
                {
                    openHeader --;
                }
            }
            else
            {
                openHeader++;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean write(boolean _append = false)
    {
        RTax25RegisterTransMap  regTrans = formDataSource.cursor().data();
        boolean                 ret      = false;

        if (_append || this.isRegUpdated(regTrans, origTrans))
        {
            ttsbegin;
            regTrans.reread();
            regTrans.selectForUpdate(true);
            if (_append)
                regTrans.ManualInput = NoYes::Yes;
            else
                regTrans.Corrected = NoYes::Yes;
            regTrans.doUpdate();

            if (regTrans.LineNumber != origTrans.LineNumber)
            {
                this.updateTotals(regTrans);
                this.updateTotals(null, origTrans);

                this.initFolders();
                this.setFolderFilter();
                ret = true;
            }
            else
            {
                ret = this.updateTotals(regTrans, origTrans);
            }

            if (ret)
                this.updateParentRegisterStatus();

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegTransMapEngine construct(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        RTax25RegisterType rTax25RegisterType = RTax25RegisterTable::registerId2Type(_rTax25RegisterJournalTrans.RegisterId);
        
        if (_rTax25RegisterJournalTrans.RegisterJournalType == RTax25RegisterJournalType::Asset_RU)
            return new RTax25RegTransMapEngine_Assessed(_rTax25RegisterJournalTrans);

        switch (rTax25RegisterType)
        {
            case RTax25RegisterType::PaymentConsumption,
                 RTax25RegisterType::PaymentReceipt,
                 RTax25RegisterType::NonInventReceipt  :
                return new RTax25RegTransMapEngine_Ledger(_rTax25RegisterJournalTrans);

            case RTax25RegisterType::DebtDebitInventory:
            case RTax25RegisterType::DebtDebitInventoryRAP:

            case RTax25RegisterType::DebtCreditInventory:

            case RTax25RegisterType::AssetsCost,
                 RTax25RegisterType::AssetsDisposal,
                 RTax25RegisterType::TangibleAssetInfo,
                 RTax25RegisterType::TangibleDepreciation,
                 RTax25RegisterType::TangibleGroupDepreciation,
                 RTax25RegisterType::IntangibleAssetInfo,
                 RTax25RegisterType::IntangibleDepreciation,
                 RTax25RegisterType::IntangibleGroupDepreciation,
                 RTax25RegisterType::AssetDeprBonusRecovery:
                return new RTax25RegTransMapEngine_Assets(_rTax25RegisterJournalTrans);

            case RTax25RegisterType::TaxRemainGoods:
                return new RTax25RegTransMapEngine_TaxRemainGoods(_rTax25RegisterJournalTrans);

            default:
                return RTax25RegTransMapEngine::constructDefault(_rTax25RegisterJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method provides the extension point for adding a new RTax25 register into the part of RTax25 framework.
    /// </summary>
    /// <param name = "_rTax25RegisterJournalTrans">A register journal transaction table cursor.</param>
    /// <returns>An instance of a class <c>RTax25RegTransMapEngine</c>.</returns>
    protected static RTax25RegTransMapEngine constructDefault(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans)
    {
        return new RTax25RegTransMapEngine(_rTax25RegisterJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                     common = _args.record();
        RTax25RegTransMapEngine    engine;
        RTax25RegisterJournalTrans rTax25RegisterJournalTrans;
        FormDataSource             formDataSource;
        
        if (common.TableId != tablenum(RTax25RegisterJournalTrans))
        {
            return;
        }
        engine = RTax25RegTransMapEngine::construct(common);
        engine.run();
        formDataSource = FormDataUtil::getFormDataSource(common);
        rTax25RegisterJournalTrans = common.data();
        if (formDataSource)
        {
            formDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newRegisterJournalTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25RegTransMapEngine newRegisterJournalTrans(RTax25RegisterJournalTrans _rTax25RegisterJournalTrans,
                                                                  FormRun                    _formRun)
    {
        RTax25RegTransMapEngine    engine;
        
        if (_formRun.name() != formstr(RTax25RegisterTransMap))
        {
            throw error("@GLS104275");
        }
        engine = RTax25RegTransMapEngine::construct(_rTax25RegisterJournalTrans);
        engine.formRun(_formRun);

        return engine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>