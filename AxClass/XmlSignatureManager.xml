<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XmlSignatureManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Electronic signature for European electronic invoices.
/// </summary>
public class XmlSignatureManager
{
    private DigitalCertificateSubject certificateSubject;
    private XMLCertificate xmlCertificate;
    private TransDateTime timeStamp;
    private XMLDocument xmlDocumentToSign;
    private XMLElement xmlElementToSign;

    private str subElementToSignName;
    private str uriAttributeName;
    private boolean uriMustBeBlank;
    private boolean addTimeStamp;
    private str signedXMLNode;

    private const str URIPrefix = '#';

    private const str xmlAttribute_ID = 'Id';
    private const str xmlAttribute_Target = 'Target';

    private const str xmlElement_SignatureProperty = 'SignatureProperty';
    private const str xmlElement_SignatureProperties = 'SignatureProperties';
    private const str xmlElement_Timestamp = 'TimeStamp';

    private const str xmlElementID_SignatureProperties1 = 'SignatureProperties1';

    private const str xmlElementNS_SignatureProperty = @'http://www.w3.org/2000/09/xmldsig#';
    private const str xmlElementNS_Timestamp = @'http://xadesnet.codeplex.com/#timestamp';
    private const str xmlReferenceNS_ToSignatureProperties = xmlElementNS_SignatureProperty + 'SignedProperties';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProperty</Name>
				<Source><![CDATA[
    private void addProperty(System.Xml.XmlDocument _xmlDocument,
        Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml _signedXml,
        System.Xml.XmlElement _propertyNode)
    {
        System.Xml.XmlElement propertiesNode = this.createPropertiesNode(_xmlDocument, _signedXml);

        System.Xml.XmlElement xmlSignaturePropertyElement;
        System.Security.Cryptography.Xml.Signature signature;
        System.String signatureId;

        xmlSignaturePropertyElement = _xmlDocument.CreateElement(xmlElement_SignatureProperty, xmlElementNS_SignatureProperty);

        signature = _signedXml.get_Signature();
        signatureId = signature.get_Id();
        xmlSignaturePropertyElement.SetAttribute(xmlAttribute_Target, signatureId.Insert(0, URIPrefix));

        xmlSignaturePropertyElement.AppendChild(_propertyNode);

        propertiesNode.AppendChild(xmlSignaturePropertyElement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTimestamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the timestamp to the signed part of the XML document.
    /// </summary>
    /// <param name="_xmlDocument">
    /// The XML document to be signed.
    /// </param>
    /// <param name="_signedXml">
    /// The signed XML to add the timestamp.
    /// </param>
    protected void addTimestamp(System.Xml.XmlDocument _xmlDocument,
        Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml _signedXml)
    {
        System.Xml.XmlElement xmlTimestampElement;

        if (addTimeStamp && xmlDocumentToSign)
        {
            timeStamp = DateTimeUtil::utcNow();

            xmlTimestampElement = _xmlDocument.CreateElement(xmlElement_Timestamp, xmlElementNS_Timestamp);

            xmlTimestampElement.set_InnerText(DateTimeUtil::toStr(timeStamp) + 'Z');

            this.addProperty(_xmlDocument, _signedXml, xmlTimestampElement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPropertiesNode</Name>
				<Source><![CDATA[
    private System.Xml.XmlElement createPropertiesNode(
        System.Xml.XmlDocument _xmlDocument,
        Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml _signedXml)
    {
        System.Xml.XmlElement signaturePropertiesElement;
        System.Xml.XmlNodeList xmlNodeList;
        System.Security.Cryptography.Xml.DataObject dataObject;
        System.Security.Cryptography.Xml.Reference referenceToProperties;

        signaturePropertiesElement = _xmlDocument.CreateElement(xmlElement_SignatureProperties, xmlElementNS_SignatureProperty);

        signaturePropertiesElement.SetAttribute(xmlAttribute_ID, xmlElementID_SignatureProperties1);

        xmlNodeList = signaturePropertiesElement.SelectNodes('.');

        dataObject = new System.Security.Cryptography.Xml.DataObject();
        dataObject.set_Data(xmlNodeList);
        _signedXml.AddObject(dataObject);

        referenceToProperties = new System.Security.Cryptography.Xml.Reference();
        referenceToProperties.set_Uri(URIPrefix + xmlElementID_SignatureProperties1);
        referenceToProperties.set_Type(xmlReferenceNS_ToSignatureProperties);

        _signedXml.AddReference(referenceToProperties);

        return signaturePropertiesElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAsymmetricAlgorithm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>System.Security.Cryptography.AsymmetricAlgorithm</c> object from the certificate private key.
    /// </summary>
    /// <param name="_certificate">
    /// The certificate object to retrieve the private key.
    /// </param>
    /// <returns>
    /// The <c>System.Security.Cryptography.AsymmetricAlgorithm</c> object from the certificate private key.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The system does not have enough permission to access the private key.
    /// </exception>
    protected System.Security.Cryptography.AsymmetricAlgorithm getAsymmetricAlgorithm(
    System.Security.Cryptography.X509Certificates.X509Certificate2  _certificate)
    {
        System.Security.Cryptography.AsymmetricAlgorithm rsaProvider;
        str friendlyName;

        try
        {
            friendlyName = _certificate.get_FriendlyName();
            rsaProvider = _certificate.get_PrivateKey();
        }
        catch
        {
            setPrefix(friendlyName);
            error("@AccountsReceivable:IISUserDoesNotHaveCertificatePermissions");
            throw error(AifUtil::getClrErrorMessage());
        }

        return rsaProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCertificate</Name>
				<Source><![CDATA[
    [SysObsolete("This method is obsolete. Call getDigitalCertificate instead.", true, 30\11\2017)]
    protected System.Security.Cryptography.X509Certificates.X509Certificate2  getCertificate(DigitalCertificateSubject _certificateSubject)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDigitalCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes digital certificate.
    /// </summary>
    /// <returns>
    /// The digital certificate object.
    /// </returns>
    protected System.Security.Cryptography.X509Certificates.X509Certificate2 getDigitalCertificate()
    {
        return xmlCertificate.getDigitalCertificate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKeyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>KeyInfo</c> element of the digital signature from the certificate.
    /// </summary>
    /// <param name="_certificate">
    /// The digital certificate.
    /// </param>
    /// <returns>
    /// The <c>System.Security.Cryptography.Xml.KeyInfo</c> object with key information from the digital certificate.
    /// </returns>
    protected System.Security.Cryptography.Xml.KeyInfo getKeyInfo(
    System.Security.Cryptography.X509Certificates.X509Certificate2 _certificate)
    {
        System.Security.Cryptography.Xml.KeyInfo keyInfo;

        keyInfo = new System.Security.Cryptography.Xml.KeyInfo();
        keyInfo.AddClause(new System.Security.Cryptography.Xml.KeyInfoX509Data(_certificate));

        return keyInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewSignedXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>SignedXml</c> object.
    /// </summary>
    /// <param name="_xmlDocument">
    /// The XML document to be signed.
    /// </param>
    /// <returns>
    /// A new <c>SignedXml</c> object.
    /// </returns>
    protected Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml getNewSignedXml(
    System.Xml.XmlDocument _xmlDocument)
    {
        Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml ret;

        new InteropPermission(InteropKind::ClrInterop).assert();

        ret = new Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml(_xmlDocument);

        CodeAccessPermission::revertAssert();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewXmlDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the new XML document object for the current (non-signed) XML.
    /// </summary>
    /// <returns>
    /// A new XML document object.
    /// </returns>
    protected System.Xml.XmlDocument getNewXmlDocument()
    {
        System.Xml.XmlDocument  xmlDocument;

        new InteropPermission(InteropKind::ClrInterop).assert();

        xmlDocument = new System.Xml.XmlDocument();
        xmlDocument.LoadXml(this.xmlToSign());

        CodeAccessPermission::revertAssert();

        return xmlDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateBinaryAssemblyFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the binary assembly by the DLL path.
    /// </summary>
    /// <param name="_assemblyFileName">
    /// The path to the DLL containing the assembly.
    /// </param>
    /// <returns>
    /// The binary assembly instantiated.
    /// </returns>
    protected System.Reflection.Assembly instantiateBinaryAssemblyFromFile(str _assemblyFileName)
    {
        System.Reflection.Assembly assembly = null;

        try
        {
            assembly = System.Reflection.Assembly::LoadFile(_assemblyFileName);
        }
        catch(Exception::CLRError)
        {
            error(AifUtil::getClrErrorMessage());
        }

        if (assembly == null)
        {
            error(strFmt("@SYP4881760", _assemblyFileName));
        }

        return assembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateBinaryAssemblyFromName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the binary assembly by the assembly strong name.
    /// </summary>
    /// <param name="_assemblyName">
    /// The assembly strong name.
    /// </param>
    /// <returns>
    /// The binary assembly instantiated.
    /// </returns>
    protected System.Reflection.Assembly instantiateBinaryAssemblyFromName(str _assemblyName)
    {
        System.Reflection.Assembly assembly;

        try
        {
            assembly = System.Reflection.Assembly::Load(_assemblyName);
        }
        catch(Exception::CLRError)
        {
            error(AifUtil::getClrErrorMessage());
        }

        if (assembly == null)
        {
            error(strFmt("@SYP4881759", _assemblyName));
        }

        return assembly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeStamp</Name>
				<Source><![CDATA[
    public TransDateTime parmTimeStamp()
    {
        return timeStamp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlDocumentToSign</Name>
				<Source><![CDATA[
    public XMLDocument parmXmlDocumentToSign(XMLDocument _xmlDocumentToSign = xmlDocumentToSign)
    {
        xmlDocumentToSign = _xmlDocumentToSign;
        return xmlDocumentToSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmXmlElementToSign</Name>
				<Source><![CDATA[
    public XMLElement parmXmlElementToSign(XMLElement _xmlElementToSign = xmlElementToSign)
    {
        xmlElementToSign = _xmlElementToSign;
        return xmlElementToSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Signs the XML node using the previously specified parameters.
    /// </summary>
    /// <returns>
    /// The current instance of the <c>XmlSignatureManager</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The digital signature cannot be computed.
    /// </exception>
    public XmlSignatureManager sign()
    {
        Microsoft.Dynamics.XmlSign.Xades.ExtendedSignedXml signedXml;
        System.Security.Cryptography.Xml.Signature signedXmlSignature;
        System.Xml.XmlDocument xmlDocument;
        System.Xml.XmlElement xmlDigitalSignature;
        System.Xml.XmlElement xmlDocumentElement;
        System.Xml.XmlNodeList xmlNodeList;
        System.Xml.XmlNode xmlToBeSigned;
        System.Xml.XmlAttributeCollection xmlAttributeCollection;
        int attributeCount, attributeIndex;
        System.Xml.XmlNode eachAttribute;
        str attributeName, attributeInnerText;
        System.Security.Cryptography.Xml.Reference reference;
        System.Security.Cryptography.Xml.XmlDsigC14NTransform c14transform;
        System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform envelopedSignature;
        System.Security.Cryptography.X509Certificates.X509Certificate2 certificate;
        System.Security.Cryptography.Xml.KeyInfo keyInfo;

        System.Security.Cryptography.AsymmetricAlgorithm privateKey;

        boolean isSetURI;
        str signatureId = 'Signature';

        certificate = this.getDigitalCertificate();

        xmlDocument = this.getNewXmlDocument();

        new InteropPermission(InteropKind::ClrInterop).assert();

        signedXml = this.getNewSignedXml(xmlDocument);
        signedXmlSignature = signedXml.get_Signature();
        signedXmlSignature.set_Id(signatureId);

        reference = new System.Security.Cryptography.Xml.Reference();

        xmlNodeList     = xmlDocument.GetElementsByTagName(subElementToSignName);
        xmlToBeSigned   = xmlNodeList.Item(0);

        if (!uriMustBeBlank && uriAttributeName)
        {
            xmlAttributeCollection = xmlToBeSigned.get_Attributes();
            attributeCount = xmlAttributeCollection.get_Count();
            for (attributeIndex = 0; attributeIndex < attributeCount; attributeIndex++)
            {
                eachAttribute = xmlAttributeCollection.Item(attributeIndex);
                attributeName = eachAttribute.get_Name();
                if (attributeName == uriAttributeName)
                {
                    attributeInnerText = eachAttribute.get_InnerText();
                    reference.set_Uri('#' + attributeInnerText);
                    isSetURI = true;
                    break;
                }
            }
        }
        if (!isSetURI)
        {
            reference.set_Uri('');
        }

        privateKey  = this.getAsymmetricAlgorithm(certificate);
        signedXml.set_SigningKey(privateKey);

        envelopedSignature = new System.Security.Cryptography.Xml.XmlDsigEnvelopedSignatureTransform();
        reference.AddTransform(envelopedSignature);

        c14Transform = new System.Security.Cryptography.Xml.XmlDsigC14NTransform();
        reference.AddTransform(c14transform);

        signedXml.AddReference(reference);

        this.addTimestamp(xmlDocument, signedXml);

        keyInfo = this.getKeyInfo(certificate);
        signedXml.set_KeyInfo(keyInfo);

        try
        {
            signedXml.ComputeSignature();
        }
        catch
        {
            throw error(AifUtil::getClrErrorMessage());
        }

        xmlDigitalSignature = signedXml.GetXml();

        xmlDocumentElement = xmlDocument.get_DocumentElement();
        xmlDocumentElement.AppendChild(xmlDocument.ImportNode(xmlDigitalSignature, true));

        signedXMLNode = xmlDocument.get_OuterXml();
        if (xmlDocumentToSign)
        {
            xmlDocumentToSign.loadXml(signedXMLNode);
        }

        CodeAccessPermission::revertAssert();

        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withCertificate</Name>
				<Source><![CDATA[
    [SysObsolete("This method is obsolete. Call withXMLCertificate instead.", true, 30\11\2017)]
    public XmlSignatureManager withCertificate(DigitalCertificateSubject _certificateSubject)
    {
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withXMLCertificate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the Electroinc signature certificate cursor.
    /// </summary>
    /// <param name="_xmlCertificate">
    /// The Electroinc signature certificate record.
    /// </param>
    /// <returns>
    /// The current instance of the <c>XmlSignatureManager</c> class.
    /// </returns>
    public XmlSignatureManager withXMLCertificate(XMLCertificate _xmlCertificate)
    {
        xmlCertificate = _xmlCertificate;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withSubElementToSign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the the name of XML node to be signed.
    /// </summary>
    /// <param name="_subElementToSignName">
    /// The the name of XML node to be signed.
    /// </param>
    /// <returns>
    /// The current instance of the <c>XmlSignatureManager</c> class.
    /// </returns>
    public XmlSignatureManager withSubElementToSign(str _subElementToSignName)
    {
        subElementToSignName = _subElementToSignName;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withTimestamp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the timestamp to be created.
    /// </summary>
    /// <returns>
    /// The current instance of the <c>XmlSignatureManager</c> class.
    /// </returns>
    public XmlSignatureManager withTimestamp()
    {
        addTimeStamp = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withURIBlank</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces the URI to be created as blank.
    /// </summary>
    /// <returns>
    /// The current instance of the <c>XmlSignatureManager</c> class.
    /// </returns>
    public XmlSignatureManager withURIBlank()
    {
        uriMustBeBlank = true;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withURIFromAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the the name of attribute to calculate URI from.
    /// </summary>
    /// <param name="_attributeName">
    /// The name of URI attribute.
    /// </param>
    /// <returns>
    /// The current instance of the <c>XmlSignatureManager</c> class.
    /// </returns>
    public XmlSignatureManager withURIFromAttribute(str _attributeName)
    {
        uriAttributeName = _attributeName;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>xmlToSign</Name>
				<Source><![CDATA[
    private str xmlToSign()
    {
        str ret;

        if (xmlDocumentToSign)
        {
            ret = xmlDocumentToSign.outerXml();
        }
        else if (xmlElementToSign)
        {
            ret = xmlElementToSign.toString();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XmlSignatureManager construct()
    {
        return new XmlSignatureManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>xmlNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>XmlSignatureManager</c> to sign the XML node.
    /// </summary>
    /// <param name="_node">
    /// The XML node to sign.
    /// </param>
    /// <returns>
    /// The new instance of <c>XmlSignatureManager</c>.
    /// </returns>
    public static XmlSignatureManager xmlNode(XMLNode _node)
    {
        XmlSignatureManager manager = XmlSignatureManager::construct();

        if (_node is XMLDocument)
        {
            manager.parmXmlDocumentToSign(_node);
        }
        else if (_node is XMLElement)
        {
            manager.parmXmlElementToSign(_node);
        }

        return manager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>