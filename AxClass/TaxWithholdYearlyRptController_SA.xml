<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdYearlyRptController_SA</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdYearlyRptController_SA</c> class is a report controller class that is used by the
/// Saudi Arabia yearly withholding tax report.
/// </summary>
class TaxWithholdYearlyRptController_SA extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSA00002, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        this.setRangeParm(this.parmReportContract().parmRdlContract(), this.getFirstQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeParm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the report data source based on the input of the user.
    /// </summary>
    /// <param name="contract">
    /// A report contract.
    /// </param>
    /// <param name="reportQuery">
    /// A report query.
    /// </param>
    public void setRangeParm(TaxWithholdYearlyRptRdlContract_SA contract, Query reportQuery)
    {
        CompanyInfo     companyInfo;
        FiscalCalendarRecId fiscalCalendarRecId;
        FiscalCalendarYear fiscalCalendarYear;
        date            fiscalYearFromDate;
        date            fiscalYearEndDate;

        companyInfo = CompanyInfo::find();
        fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(fiscalCalendarRecId, contract.parmTaxWithholdYear());

        fiscalYearFromDate = fiscalCalendarYear.StartDate;
        fiscalYearEndDate = fiscalCalendarYear.EndDate;

        SrsReportHelper::addFromAndToDateRangeToQuery(reportQuery, fiscalYearFromDate, fiscalYearEndDate, tableNum(TaxWithholdTrans), fieldNum(TaxWithholdTrans, TransDate));

        contract.parmTaxWithholdName(companyInfo.name());
        contract.parmTaxWithholdDate(date2str(fiscalCalendarYear.EndDate,
                                     123,
                                     DateDay::Digits2, DateSeparator::Slash,
                                     DateMonth::Digits2, DateSeparator::Slash,
                                     DateYear::Digits4, DateFlags::FormatAll));
        contract.parmFinancialNo(companyInfo.CoRegNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceSA00003, funcName());

        TaxWithholdYearlyRptController_SA controller = new TaxWithholdYearlyRptController_SA();
        controller.parmReportName(ssrsReportStr(TaxWithholdYearlyReport_SA, Report));
        controller.parmDialogCaption("@SYS342869");
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>