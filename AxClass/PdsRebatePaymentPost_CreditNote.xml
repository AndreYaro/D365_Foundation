<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebatePaymentPost_CreditNote</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that holds the rebate specific information for a credit note type of payment.
/// </summary>
class PdsRebatePaymentPost_CreditNote extends PdsRebatePaymentPost
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
/// <summary>
    /// Initializes the <c>LedgerJournalTrans</c> record used for the posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The <c>LedgerJournalTrans</c> table record.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        DimensionDynamicAccount dimensionAccount;
        #ISOCountryRegionCodes

        LedgerJournalTrans ledgerJournalTrans   = super(_ledgerJournalTrans);

        ledgerJournalTrans.AccountType          = LedgerJournalACType::Ledger;
        ledgerJournalTrans.OffsetAccountType    = LedgerJournalACType::Cust;

        ledgerJournalTrans.Txt                  = "@PRO1466";

        ledgerJournalTrans.AmountCurCredit      = 0;
        ledgerJournalTrans.AmountCurDebit       = rebateTableForPostingInfo.PdsCorrectedRebateAmt;

        dimensionAccount = this.dimensionAccount();

        if (dimensionAccount)
        {
            ledgerJournalTrans.LedgerDimension  = dimensionAccount;
        }
        else
        {
            throw error("@SYS25151");
        }

        ledgerJournalTrans.OffsetLedgerDimension  = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(callerRebateTable.CustAccount, LedgerJournalACType::Cust);
        ledgerJournalTrans.OffsetDefaultDimension = this.getDefaultDimension();

        ledgerJournalTrans.TaxGroup     = rebateTableForPostingInfo.TaxGroup;
        ledgerJournalTrans.TaxItemGroup = rebateTableForPostingInfo.TaxItemGroup;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            CustTable custTable = CustTable::find(callerRebateTable.CustAccount);

            ledgerJournalTrans.Addressing_PL = custTable.address();
            ledgerJournalTrans.CustVendName_PL = custTable.name();
            ledgerJournalTrans.VATNumJournal = custTable.VATNum;
            if (TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(ledgerJournalTrans.ledgerJournalTable().JournalType))
            {
                custTable.copyPrimaryRegistrationNumberToVATMap(_ledgerJournalTrans, _ledgerJournalTrans.TransDate);
            }
        }

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalName</c> table record used for payment posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalName()
    {
        return LedgerJournalName::find(PdsRebateParameters::find().PdsARConsumptionJournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerTransType</c> of the payment posting.
    /// </summary>
    /// <returns>
    /// The <c>ledgerTransType</c> of the payment posting.
    /// </returns>
    public LedgerTransType ledgerTransType()
    {
        return LedgerTransType::PdsRebateCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the  rebate transaction type as 'CreditNote'.
    /// </summary>
    /// <returns>
    /// The rebate transaction type.
    /// </returns>
    public PdsRebateTransaction pdsRebateTransaction()
    {
        return PdsRebateTransaction::CreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <returns>
    /// A new class instance.
    /// </returns>
    public static PdsRebatePaymentPost_CreditNote construct()
    {
        return new pdsRebatePaymentPost_CreditNote();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance and runs the class.
    /// </summary>
    /// <param name="_args">
    /// Any arguments passed.
    /// </param>
    public static void main(Args _args)
    {
        PdsRebatePaymentPost pdsRebatePaymentPost = PdsRebatePaymentPost_CreditNote::newFromForm(_args, _args.record());

        pdsRebatePaymentPost.prompt();

        if (pdsRebatePaymentPost.validate())
        {
            pdsRebatePaymentPost.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PdsRebatePaymentPost_CreditNote</c> class.
    /// </summary>
    /// <param name="_args">
    /// The arguments passed.
    /// </param>
    /// <param name="_buffer">
    /// A record buffer on which rebate payment posting is performing.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PdsRebatePaymentPost_CreditNote</c> class.
    /// </returns>
    public static PdsRebatePaymentPost_CreditNote newFromForm(
        Args    _args,
        Common  _buffer)
    {
        PdsRebatePaymentPost_CreditNote pdsRebatePaymentPost_CreditNote;

        pdsRebatePaymentPost_CreditNote = PdsRebatePaymentPost::construct(PdsRebateTransaction::CreditNote);
        pdsRebatePaymentPost_CreditNote.parmArgs(_args);
        pdsRebatePaymentPost_CreditNote.parmPdsRebateTable(_buffer);

        return pdsRebatePaymentPost_CreditNote;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>