<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayMixedLPTOItemReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes transfer order item receiving flow for mixed license plate receiving.
/// </summary>
[WHSMixedLPReceivingMode(WHSMixedLPReceivingMode::TOItemReceiving)]
public class WHSWorkExecuteDisplayMixedLPTOItemReceiving extends WHSWorkExecuteDisplayMixedLPTOReceiving
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildNextRegistration</Name>
				<Source><![CDATA[
    protected container buildNextRegistration(
        container   _con,
        str         _extraText = '')
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        container           ret = _con;
        boolean             hasTOValue = pass.hasValue(#TONum);

        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode);
        ret += [this.buildControl(#RFText, #TONum, "@WAX3858", 1, pass.lookupStr(#TONum), extendedTypeNum(PurchId), '', 0, !hasTOValue)];

        if (hasTOValue)
        {
            ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
        }

        ret += this.buildNextRegistrationButtonList();
       
        if (hasTOValue)
        {
            ret += [this.buildControl(#RFButton, WHSWorkExecuteDisplayMixedLPControls::ChangeTONum, "@WAX:ChangeTONum", 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTOLineNum</Name>
				<Source><![CDATA[
    private LineNum getTOLineNum()
    {
        InventTransferId transferId = pass.lookup(#TONum);
        ItemId itemId = pass.lookup(#ItemId);

        InventDim       inventDimCriteria;
        InventDimParm   inventDimParmFromPass;
        inventDimParmFromPass.setAllProductDimensions();
        inventDimParmFromPass.InventLocationIdFlag = NoYes::Yes;
        pass.initInventDimFromPassParm(inventDimCriteria, inventDimParmFromPass);
        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParmFromPass);

        InventTransferLine  transferLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        LineNum             foundLineNum;

        if (inventDimCriteria.anyProductDimensionSpecified())
        {
            InventDim       localInventDim;
            InventDimParm   inventDimParm;

            inventDimParm.initProductDimensionsAllGroups();

            while select  LineNum, QtyTransfer, InventTransId from transferLine
                where transferLine.TransferId ==  transferId
                &&    transferLine.ItemId     ==  itemId
                join tableID from inventTransOrigin
                    where  inventTransOrigin.InventTransId == transferLine.InventTransIdReceive
                join tableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.StatusReceipt     == StatusReceipt::Ordered
                    &&    inventTrans.StatusIssue       == StatusIssue::None
            #InventDimExistsJoinNoField(transferLine.InventDimId, localInventDim, inventDimCriteria, inventDimParm)
            {
                if (WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(transferLine.InventTransId) < transferLine.QtyTransfer)
                {
                    foundLineNum = transferLine.LineNum;
                    break;
                }
            }
        }
        else
        {
            while select LineNum, QtyTransfer, InventTransId from transferLine
                where transferLine.TransferId ==  transferId
                &&    transferLine.ItemId     ==  itemId
                join tableID from inventTransOrigin
                    where inventTransOrigin.InventTransId == transferLine.InventTransIdReceive
                join tableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&    inventTrans.StatusReceipt     == StatusReceipt::Ordered
                    &&    inventTrans.StatusIssue       == StatusIssue::None
            {
                if (WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(transferLine.InventTransId) < transferLine.QtyTransfer)
                {
                    foundLineNum = transferLine.LineNum;
                    break;
                }
            }
        }

        return foundLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRegistering</Name>
				<Source><![CDATA[
    protected container buildRegistering(
        container   _con,
        str         _extraText = '',
        boolean     _enableContainerType = true)
    {
        WHSRFMenuItemTable  rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
        InventDim           inventDim;
        container           ret = _con;
        boolean             contBuilding;
        boolean             additionalButtons;

        ret += [this.buildControl(#RFLabel, #MixedLPReceiving, pass.exists(#MenuItem) ? rfMenuItem.rfTitle : '', 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += this.buildLPContainerControls(rfMenuItem.DisplayContainerTypeCode, _enableContainerType);

        if (pass.hasValue(#TONum))
        {
            ret += [this.buildControl(#RFText, #TONum, "@WAX3858", 1, pass.lookup(#TONum), extendedTypeNum(InventTransferId), '', 0, false)];

            if (pass.hasValue(#ItemId))
            {
                ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, pass.lookup(#ItemId), extendedTypeNum(InventInventItemSearchItem), '', 0)];
                ret += this.buildItemDescription(pass.lookup(#ItemId));
                
                if (!this.checkProductDimensionsInPass(pass.lookup(#ItemId)))
                {
                    ret = this.buildProductDimensionsFromInventDim(ret, pass.lookup(#ItemId), inventDim);
                }
                else
                {
                    LineNum localLineNum = this.getTOLineNum();

                    ret += [this.buildControl(#RFText, #TOLineNum, "@WAX1236", 1, WHSWorkExecuteDisplay::num2StrDisplay(localLineNum), extendedTypeNum(LineNum), '', 0, false)];
                    pass.insert(#TOLineNum, localLineNum);
                    contBuilding = true;
                }
            }
            else
            {
                ret += [this.buildControl(#RFText, #ItemId, "@SYS14428", 1, '', extendedTypeNum(InventInventItemSearchItem), '', 0)];
                additionalButtons = true;
            }
        }
        else
        {
            ret += [this.buildControl(#RFText, #TONum, "@WAX3858", 1, '', extendedTypeNum(InventTransferId), '', 0)];
            additionalButtons = true;
        }

        if (contBuilding)
        {
            InventTable inventTable = InventTable::find(pass.lookup(#ItemId));
            WHSProdQty  defaultQty  = WHSInventTable::find(inventTable.ItemId).ProdQty;
            inventDim = InventDim::find(InventTransferLine::find(pass.lookup(#TONum), pass.lookupNum(#TOLineNum)).InventDimId);

            ret = this.buildProductDimensionsFromInventDim(ret, inventTable.ItemId, inventDim, false);
        
            if ((!pass.exists(#Qty) || pass.lookupNum(#Qty) == 0) && defaultQty)
            {
                pass.insert(#Qty, defaultQty);
            }
            if (!pass.exists(#SelectedValueUOM) || pass.lookup(#SelectedValueUOM) == '')
            {
                pass.insert(#SelectedValueUOM, WHSUOMSeqGroupTable::getDefaultPurchUOM(inventTable.ItemId));
            }

            ret += [this.buildControl(#RFText, #Qty, "@SYS105177", 1, pass.lookupStr(#Qty), extendedTypeNum(Qty), '', 0)];
            ret = this.buildUOM(ret, '', false, false, false, pass.lookupStr(#SelectedValueUOM));
            ret = this.buildCatchWeight(ret, pass.lookup(#ItemId));

            if (pass.exists(#SelectedValueUOM) 
                && pass.lookup(#SelectedValueUOM) != '' 
                && pass.lookup(#SelectedValueUOM) != WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId))
            {
                if (!pass.exists(#CurrentUOM) || pass.lookup(#CurrentUOM) != pass.lookup(#SelectedValueUOM))
                {
                    pass.insert(#CurrentUOM, pass.lookup(#SelectedValueUOM));
                }
                else if (!pass.exists(#Initiation))
                {
                    pass.remove(#CurrentUOM);
                }

                ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayMixedLPControls::InventConversion, 
                                                    strFmt("1 %1 = %2 %3", pass.lookup(#SelectedValueUOM),
                                                    WHSCatchWeightHelper::convertInventQuantity(inventTable.ItemId,
                                                                                   pass.lookup(#SelectedValueUOM),
                                                                                   1,
                                                                                   inventDim.inventDimId),
                                                    WHSCatchWeightHelper::inventHandlingUnitId(inventTable.ItemId)), 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
            else
            {
                if (pass.exists(#CurrentUOM))
                {
                    pass.remove(#CurrentUOM);
                }
            }
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        if (additionalButtons)
        {
            ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

            if (WHSMixedLicensePlateReceipt::hasOpenRecord(pass.lookup(#LicensePlateId)))
            {
                ret += [this.buildControl(#RFButton, #RFLPComplete, "@WAX:MixedLPComplete", 1, '', #WHSRFUndefinedDataType, '', 0)];
                ret += [this.buildControl(#RFButton, #RFList, "@WAX:MixedLPShowList", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }

            if (pass.hasValue(#TONum))
            {
                ret += [this.buildControl(#RFButton, WHSWorkExecuteDisplayMixedLPControls::ChangeTONum, "@WAX:ChangeTONum", 1, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>