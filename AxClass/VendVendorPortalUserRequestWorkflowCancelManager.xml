<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVendorPortalUserRequestWorkflowCancelManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendVendorPortalUserRequestWorkflowCancelManager</c> class is used for recalling the submitted VendorPortalUserRequest through code
/// </summary>
final class VendVendorPortalUserRequestWorkflowCancelManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VendVendorPortalUserRequestWorkflowCancelManager construct()
    {
        return new VendVendorPortalUserRequestWorkflowCancelManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VendVendorPortalUserRequestWorkflowCancelManager::construct().run(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    private void run(Args _args)
    {
        SysUserRequest userRequest = _args.record() as SysUserRequest;

        if (userRequest.RecId != 0)
        {
            LabelString   cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt;
            [cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt] = WorkflowCancelManager::getDialogContent(_args);

            WorkflowCancelDialog workflowCancelDialog = WorkflowCancelDialog::construct(cancelCaption, cancelActionText, cancelActionHelpText, cancelPrompt);
            workflowCancelDialog.run();

            if (workflowCancelDialog.parmIsClosedOK())
            {
               TableId id = tableNum(SysUserRequest);

                WorkflowTrackingStatusTable     trackingStatusTable;
                select firstonly recId, CorrelationId from trackingStatusTable
                    order by CreatedDateTime
                    where trackingStatusTable.ContextRecId     == userRequest.RecId
                        && trackingStatusTable.ContextTableId  == tableNum(SysUserRequest)
                        && trackingStatusTable.TrackingStatus  != WorkflowTrackingStatus::Cancelled
                        && trackingStatusTable.TrackingStatus  != WorkflowTrackingStatus::Completed;

                if (trackingStatusTable.RecId != 0)
                {
                    Workflow::cancelWorkflow(trackingStatusTable.CorrelationId, workflowCancelDialog.parmWorkflowComment());
                    FormRun callerForm = _args.caller() as FormRun;
                    if (callerForm)
                    {
                        callerForm.dataSource().reread();
                        callerForm.doRefresh();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>