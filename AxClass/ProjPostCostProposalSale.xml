<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPostCostProposalSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPostCostProposalSale extends ProjPostCostProposal
{
    ProjProposalCostDetail  projProposalCostDetail;
    ProjCostTransSale       projCostTransSale;
    ProjInvoiceCostDetail   projInvoiceCostDetail;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustmentLedgerSalesAmount</Name>
				<Source><![CDATA[
        protected AmountCur adjustmentLedgerSalesAmount()
    {
        return this.parmAdjustmentLedgerSalesAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterTurnover</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether revenue should be posted for the transaction.
    /// </summary>
    /// <returns>
    /// true if the revenue amount is non-zero and the <c>parmEnterTurnover</c> method returns true;
    /// otherwise, false.
    /// </returns>
    protected boolean checkEnterTurnover()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondaryTurnover</Name>
				<Source><![CDATA[
        public ExchRate exchRateSecondaryTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceCostDetail   projInvoiceCostDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projCostTransSale.TransStatus))
        {
            projInvoiceCostDetail.reread();
            select projInvoiceCostDetailOrig where projInvoiceCostDetailOrig.RecId == projInvoiceCostDetail.RefRecId;
            projInvoiceJourOrig = projInvoiceCostDetailOrig.projInvoiceCost().projInvoiceJour();
            return projTrans.exchRateSecondarySales(projInvoiceJourOrig.InvoiceDate);
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateTurnover</Name>
				<Source><![CDATA[
        public ExchRate exchRateTurnover()
    {
        ProjInvoiceJour         projInvoiceJourOrig;
        ProjInvoiceCostDetail   projInvoiceCostDetailOrig;

        if (this.checkProjTransStatusIsCreditNoteProposal(projCostTransSale.TransStatus))
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                projInvoiceCostDetail.reread();
                select firstOnly projInvoiceCostDetailOrig where projInvoiceCostDetailOrig.RecId == projInvoiceCostDetail.RefRecId;
                projInvoiceJourOrig = projInvoiceCostDetailOrig.projInvoiceCost().projInvoiceJour();
                return projTrans.exchRateSales(projInvoiceJourOrig.InvoiceDate);

            }
            else
            {
                return projTrans.exchRateSales(projProposalCost.projProposalJour().InvoiceDate);
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(ProjProposalCost  _projProposalCost, ProjProposalCostDetail  _projProposalCostDetail, ProjCostTransSale _projCostTransSale)
    {
        projProposalCostDetail = _projProposalCostDetail;
        projCostTransSale = _projCostTransSale;

        super(_projProposalCost);

        projTrans = ProjTrans::newProjProposalCostSale(_projProposalCost, _projProposalCostDetail, _projCostTransSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projInvoiceUpdate</Name>
				<Source><![CDATA[
        private void projInvoiceUpdate(RefRecId _saleRefRecId)
    {
        ProjInvoiceCostDetail     projInvoiceCostDetailOrginal;
        ProjInvoiceCostDetail     projInvoiceCostDetailReverse;

        ttsbegin;

        select forupdate RefRecId from projInvoiceCostDetailOrginal
            where  projInvoiceCostDetailOrginal.SaleRefRecId == _saleRefRecId
               && !projInvoiceCostDetailOrginal.RefRecId;

        select forupdate RefRecId from projInvoiceCostDetailReverse
            where  projInvoiceCostDetailReverse.SaleRefRecId == _saleRefRecId
               &&  projInvoiceCostDetailReverse.RecId != projInvoiceCostDetailOrginal.RecId
               && !projInvoiceCostDetailReverse.RefRecId;

        projInvoiceCostDetailReverse.RefRecId = projInvoiceCostDetailOrginal.RecId;

        projInvoiceCostDetailOrginal.RefRecId = projInvoiceCostDetailReverse.RecId;

        projInvoiceCostDetailReverse.update();
        projInvoiceCostDetailOrginal.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method before the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmCreateTrans</c> method returns true.
    /// </remarks>
    public void projTransCreate()
    {
        ProjInvoiceCost projInvoiceCost;

        projInvoiceCostDetail.clear();
        projInvoiceCostDetail = ProjInvoiceCostDetail::initInvoiceFromProposal(projProposalCost, projProposalCostDetail, projCostTransSale);

        select RecId from projInvoiceCost
            where projInvoiceCost.ProjInvoiceId == projProposalCost.projProposalJour().ProjInvoiceId &&
                projInvoiceCost.TransId == projProposalCost.projCostTrans().TransId;

        projInvoiceCostDetail.InvoiceRefRecId = projInvoiceCost.RecId;
        projInvoiceCostDetail.insert();

        if (this.checkProjTransStatusIsCreditNoteProposal(projCostTransSale.TransStatus))
        {
            this.projInvoiceUpdate(projCostTransSale.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projTransUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates a transaction posting.
    /// </summary>
    /// <remarks>
    /// This method is called by the <c>postTrans</c> method after the <c>ledgerTransActionsCreate</c>
    /// method when the <c>parmUpdateTrans</c> method returns true.
    /// </remarks>
    public void projTransUpdate()
    {
        projCostTransSale.selectForUpdate(true);
        projCostTransSale.reread();

        if (this.checkCreditNoteSalesAccrued())
        {
            projCostTransSale.LedgerSalesPosted     = this.checkEnterSalesAccrued();
            if (this.checkEnterSalesAccrued())
            {
                projCostTransSale.LedgerSalesAmount = -projTrans.transTurnoverMST();
            }
        }
        else
        {
            projCostTransSale.LedgerSalesAmount     = 0;
            projCostTransSale.LedgerSalesPosted     = NoYes::No;
        }

        projCostTransSale.SalesPrice            = projTrans.salesPrice();
        projCostTransSale.LineAmount            = projTrans.transTurnover();
        if (this.checkProjTransStatusIsCreditNoteProposal(projTrans.transStatus()))
        {
            projCostTransSale.LineAmount = projCostTransSale.LineAmount * -1;
        }
        projCostTransSale.TransStatus           = this.parmTransStatus();

        projCostTransSale.update();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>