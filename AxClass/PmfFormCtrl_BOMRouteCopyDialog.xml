<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_BOMRouteCopyDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>BOMRouteCopyDialog</c> form.
/// </summary>
class PmfFormCtrl_BOMRouteCopyDialog
    extends PmfFormCtrl
{
    BOMRouteCopyJob bomRouteCopyJob;
    boolean         forceFormula;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomRouteCopyJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the copy job class that the form is being called from.
    /// </summary>
    /// <returns>
    /// The caller of the form.
    /// </returns>
    public BOMRouteCopyJob bomRouteCopyJob()
    {
        return bomRouteCopyJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCopyRoute</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the <c>BOMRouteCopyJob</c> instance allows the option to copy routes.
    /// </summary>
    /// <returns>
    ///     true if the <c>BOMRouteCopyJob</c> instance allows the option to copy routes.
    /// </returns>
    public boolean canCopyRoute()
    {
        return this.bomRouteCopyJob().parmCopyRoute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ctrlLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the lookup for some form controls.
    /// </summary>
    /// <param name="_formControl">
    /// The control initiating the lookup.
    /// </param>
    public void ctrlLookup(
        FormControl     _formControl)
    {
        switch (_formControl.name())
        {
            case identifierstr(FromFormulaItemId):
            case identifierstr(FromItemId) :
                if (this.isFormulaEnabled())
                {
                    InventTable::lookupFormulaItemId(_formControl);
                }
                else if (this.isPmfEnabled())
                {
                    InventTable::lookupItemIdCanHaveBOMFormula(_formControl);
                }
                else
                {
                    InventTable::lookupItemIdCanBeProduced(_formControl);
                }
                break;
            case identifierstr(ToBOMId) :
                BOMTable::lookupFormulaItemId(_formControl, PmfBOMFormula::Formula);
                break;
            default :
            // break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        if (!this.bomRouteCopyJob())
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        super();

        if (this.isPmfEnabled())
        {
            this.registerPmfEnabledCtrlRules();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerPmfEnabledCtrlRules</Name>
				<Source><![CDATA[
    protected void registerPmfEnabledCtrlRules()
    {
        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, FromBaseGrp)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isNotFormulaEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, PmfVerFromGrp)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, PmfFormExist)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToFormulaVersionCopy)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, FromProdGrp)),
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, FromProdId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PDS1470");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, FromProdGrp)),
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, FromProdId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToBaseGrp)),
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToBOMId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO101");

        this.registerCtrlRuleNoGroup(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToBOMId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isNotFormulaEnabled),
                ButtonRuleEffectType::Enabled);

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToProdGrp)),
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToProdId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PDS1470");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToProdGrp)),
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToProdId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::HelpText,
                "@PDS1471");

        this.registerCtrlRule(
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToProdGrp)),
                formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, UpdateBOMId)),
                methodstr(PmfFormCtrl_BOMRouteCopyDialog, isFormulaEnabled),
                ButtonRuleEffectType::Label,
                "@PRO115");

        if (this.bomRouteCopyJob().parmCopyCoByOnly())
        {
            formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToType)).enabled(false);
            formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToBaseGrp)).enabled(false);
            formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, PmfFormExist)).enabled(false);
            formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, ToProdGrp)).enabled(false);
            formRun.design().controlName(formcontrolstr(BOMRouteCopyDialog, FromProdGrp)).enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the copy attempt is based on a formula type transaction and if the copy attempt doesn't include route copying.
    /// </summary>
    /// <returns>
    /// true if the copy attempt is based on a formula type transaction and if the copy attempt doesn't include route copying.
    /// </returns>
    /// <remarks>
    /// The batch route feature isn't existing so from a route perspective, item production type <c>BOM</c>, <c>Formula</c> and <c>MainItem</c>
    /// are considered the same.
    /// </remarks>
    public boolean isFormulaEnabled()
    {
        boolean     ret             = false;
        BOMTable    bomTable        = BOMTable::find(this.bomRouteCopyJob().parmToBOMId());
        BOMTable    bomTableFrom    = BOMTable::find(this.bomRouteCopyJob().parmFromBOMId());
        ProdTable   prodTable       = ProdTable::find(this.bomRouteCopyJob().parmToProdId());

        if (forceFormula
            || prodTable.ProdType == ProdType::Process
            || bomTable.PmfBOMFormula == PmfBOMFormula::Formula
            || bomTableFrom.PmfBOMFormula == PmfBOMFormula::Formula)
        {
            ret = true;
        }

        if (ret && this.canCopyRoute())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the copy attempt is not based on a formula type transaction.
    /// </summary>
    /// <returns>
    /// True, if the source record is not a formula type transaction.
    /// </returns>
    public boolean isNotFormulaEnabled()
    {
        return !this.isFormulaEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMRouteCopyJob</Name>
				<Source><![CDATA[
    private BOMRouteCopyJob parmBOMRouteCopyJob(
        BOMRouteCopyJob _bomRouteCopyJob = bomRouteCopyJob)
    {
        if (!prmisdefault(_bomRouteCopyJob))
        {
            bomRouteCopyJob = _bomRouteCopyJob;
        }

        return bomRouteCopyJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs before the actual run method of the form element.
    /// </summary>
    public void runPre()
    {
        if (this.isFormulaEnabled())
        {
            this.parmFormRun().design().caption("@PRO116");
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1 = buffer,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_BOMRouteCopyDialog construct()
    {
        return new PmfFormCtrl_BOMRouteCopyDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element.
    /// </summary>
    /// <param name="_formRun">
    /// The form element to create the form control handler for.
    /// </param>
    /// <returns>
    /// The created form control handler.
    /// </returns>
    public static PmfFormCtrl_BOMRouteCopyDialog newFromForm(FormRun _formRun)
    {
        PmfFormCtrl_BOMRouteCopyDialog frmCtrl;

        frmCtrl = PmfFormCtrl_BOMRouteCopyDialog::construct();
        frmCtrl.parmFormRun(_formRun);
        frmCtrl.parmBOMRouteCopyJob(_formRun.args().caller());
        return frmCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceFormula</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that a formula context is used if the existing data is not sufficient to infer that.
    /// </summary>
    public void forceFormula()
    {
        forceFormula = true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>