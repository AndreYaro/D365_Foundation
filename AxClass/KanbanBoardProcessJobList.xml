<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanBoardProcessJobList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanBoardProcessJobList</c> helper class manages the kanban process jobs list in kanban
///    board forms.
/// </summary>
public class KanbanBoardProcessJobList
{
    FormRun     formRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCancelEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether one or more of the selected kanban jobs can be canceled.
    /// </summary>
    /// <returns>
    ///    true if all the selected jobs can be canceled; otherwise, false.
    /// </returns>
    public boolean checkCancelEnabled()
    {
        return this.checkStatusReset(LeanKanbanJobStatus::NotPlanned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteDetailsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the selected kanban jobs can be changed to completed status by providing deviation
    ///    data.
    /// </summary>
    /// <returns>
    ///    true if the selected kanban jobs are in planned, prepared or in progress status; otherwise, false.
    /// </returns>
    public boolean checkCompleteDetailsEnabled()
    {
        return this.checkCompleteEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCompleteEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the selected kanban jobs can be changed to completed status.
    /// </summary>
    /// <returns>
    ///    true if the selected kanban jobs are in planned, prepared or in progress status; otherwise, false.
    /// </returns>
    public boolean checkCompleteEnabled()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        boolean allJobsPlannedOrPreparedOrInProgress = true;

        // Get the first multi selection or single selection record
        KanbanBoardTmpProcessJob processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                                                      kanbanBoardTmpProcessJob_ds.getFirst(1) :
                                                      kanbanBoardTmpProcessJob_ds.cursor();

        if (!processJobSelected)
        {
            allJobsPlannedOrPreparedOrInProgress = false;
        }

        while (processJobSelected && allJobsPlannedOrPreparedOrInProgress)
        {
            if (   processJobSelected.Status != LeanKanbanJobStatus::Planned
               && processJobSelected.Status != LeanKanbanJobStatus::Prepared
               && processJobSelected.Status != LeanKanbanJobStatus::InProgress)
            {
                allJobsPlannedOrPreparedOrInProgress = false;
            }

            processJobSelected = kanbanBoardTmpProcessJob_ds.getNext();
        }

        return allJobsPlannedOrPreparedOrInProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCreateEventKanbansEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the event kanbans can be created for a selected kanban job.
    /// </summary>
    /// <returns>
    ///    true if any kanban job is selected of statuses before in progress; otherwise, false.
    /// </returns>
    public boolean checkCreateEventKanbansEnabled()
    {
        return this.checkStartEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrepareEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the selected kanban jobs can be changed to prepared status.
    /// </summary>
    /// <returns>
    ///    true if the selected kanban jobs are in planned status; otherwise, false.
    /// </returns>
    public boolean checkPrepareEnabled()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        boolean allJobsPlanned = true;

        // Get the first multi selection or single selection record
        KanbanBoardTmpProcessJob processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                                                      kanbanBoardTmpProcessJob_ds.getFirst(1) :
                                                      kanbanBoardTmpProcessJob_ds.cursor();
        if (!processJobSelected)
            allJobsPlanned = false;

        while (processJobSelected && allJobsPlanned)
        {
            if (processJobSelected.Status != LeanKanbanJobStatus::Planned)
                allJobsPlanned = false;

            processJobSelected = kanbanBoardTmpProcessJob_ds.getNext();
        }

        return allJobsPlanned;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the selected kanban jobs can be printed.
    /// </summary>
    /// <returns>
    ///    true if any kanban job is selected; otherwise, false.
    /// </returns>
    public boolean checkPrintEnabled()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        // Get the first multi selection or single selection record
        KanbanBoardTmpProcessJob processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                                                      kanbanBoardTmpProcessJob_ds.getFirst(1) :
                                                      kanbanBoardTmpProcessJob_ds.cursor();

        return processJobSelected.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrioritizeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the priority of one or more of the selected kanban jobs can be toggled.
    /// </summary>
    /// <returns>
    ///    true if all the selected jobs can be prioritized; otherwise, false.
    /// </returns>
    public boolean checkPrioritizeEnabled()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpProcessJob_ds,
                                                                                      fieldNum(KanbanBoardTmpProcessJob,Job));

        return (selectedJobs != conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRevertStatusEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates that the kanban job status for one or more of the selected kanban jobs that can be
    ///    reverted.
    /// </summary>
    /// <returns>
    ///    true if the kanban job status can be reverted; otherwise, false.
    /// </returns>
    public boolean checkRevertStatusEnabled()
    {
        return this.checkStatusReset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStartEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the selected kanban jobs can be changed to in progress status.
    /// </summary>
    /// <returns>
    ///    true if the selected kanban jobs are in planned or prepared status; otherwise, false.
    /// </returns>
    public boolean checkStartEnabled()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        boolean allJobsPlannedOrPrepared = true;

        // Get the first multi selection or single selection record
        KanbanBoardTmpProcessJob processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                                                      kanbanBoardTmpProcessJob_ds.getFirst(1) :
                                                      kanbanBoardTmpProcessJob_ds.cursor();
        if (!processJobSelected)
        {
            allJobsPlannedOrPrepared = false;
        }

        while (processJobSelected && allJobsPlannedOrPrepared)
        {
            if (   processJobSelected.Status != LeanKanbanJobStatus::Planned
               && processJobSelected.Status != LeanKanbanJobStatus::Prepared)
            {
                allJobsPlannedOrPrepared = false;
            }

            processJobSelected = kanbanBoardTmpProcessJob_ds.getNext();
        }

        return allJobsPlannedOrPrepared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the status of one or more of the selected jobs can be reset to the specified
    ///    status.
    /// </summary>
    /// <param name="_leanKanbanJobStatus">
    ///    The target status; optional.
    /// </param>
    /// <returns>
    ///    true if the status can be reset; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Call this method without a parameter to reset each job by one step.
    /// </remarks>
    protected boolean checkStatusReset(LeanKanbanJobStatus _leanKanbanJobStatus = LeanKanbanJobStatus::Completed)
    {
        boolean                         result;
        int                             conIdx;

        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));
        container selectedJobs = KanbanBoardForm::selectedRecords(kanbanBoardTmpProcessJob_ds,
                                                                                       fieldNum(KanbanBoardTmpProcessJob,Job));

        if (selectedJobs)
        {
            result = true;
            int selectedJobsCount = conlen(selectedJobs);
            for (conIdx = 1; conIdx <= selectedJobsCount; conIdx++)
            {
                KanbanJob           kanbanJob           = KanbanJob::find(conPeek(selectedJobs, conIdx));
                KanbanJobStatus     kanbanJobStatus     = kanbanJob.status();
                LeanKanbanJobStatus leanKanbanJobStatus = prmisDefault(_leanKanbanJobStatus) ? kanbanJobStatus.prevStatus() : _leanKanbanJobStatus;
                result = result
                                                          && kanbanJob
                                                          && kanbanJobStatus.isStatusResetAllowed(leanKanbanJobStatus,true);
                if (!result)
                {
                    break;
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkViewPeggingTreeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies whether the selected kanban jobs can be printed.
    /// </summary>
    /// <returns>
    ///    true if any kanban job is selected; otherwise, false.
    /// </returns>
    public boolean checkViewPeggingTreeEnabled()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        // Get the first multi selection or single selection record
        KanbanBoardTmpProcessJob processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                                                      kanbanBoardTmpProcessJob_ds.getFirst(1) :
                                                      kanbanBoardTmpProcessJob_ds.cursor();

        // Only if there is one selected
        return (processJobSelected && !kanbanBoardTmpProcessJob_ds.getNext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEventKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates event kanbans for the selected kanban jobs and its picking list lines.
    /// </summary>
    /// <param name="_createForAllPickingListLinesOfKanban">
    ///    A Boolean value that specifies if event kanbans should be created for all picking lines of the kanban; optional.
    /// </param>
    public void createEventKanbans(
        boolean _createForAllPickingListLinesOfKanban = false
        )
    {
        KanbanJobPickingList            kanbanJobPickingList;

        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        // Get the first multi selection or single selection record
        KanbanBoardTmpProcessJob processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                                                      kanbanBoardTmpProcessJob_ds.getFirst(1) :
                                                      kanbanBoardTmpProcessJob_ds.cursor();

        while (processJobSelected)
        {
            // Create kanbans for the item itself (semi-finished)
            KanbanJob kanbanJob = KanbanJob::find(processJobSelected.Job);
            ReqEventProcessKanban::newStandard(kanbanJob, true).runOperation();

            // Create event kanbans for each of the picking list lines of the job
            while select kanbanJobPickingList
                where kanbanJobPickingList.Job               == processJobSelected.Job
                   || (kanbanJobPickingList.Kanban           == kanbanJob.Kanban
                   &&  _createForAllPickingListLinesOfKanban == true)
            {
                ReqEventProcessKanban::newStandard(kanbanJobPickingList, true).runOperation();
            }

            processJobSelected = kanbanBoardTmpProcessJob_ds.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    private FormRun parmFormRun(FormRun _formRun = formRun)
    {
        formRun = _formRun;

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printKanbanCards</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends kanban cards to the report to print them.
    /// </summary>
    /// <param name="workCell">
    ///    The name of the work cell from which kanban cards are printed.
    /// </param>
    /// <param name="showDialog">
    ///    A Boolean that indicates whether a dialog with printing options should be opened.
    /// </param>

    public void printKanbanCards(WrkCtrIdBase workCell, boolean showDialog = true)
    {
        KanbanBoardTmpProcessJob        processJobSelected;
        KanbanPrinter                   kanbanPrinter = KanbanPrinter::construct();
        FormDataSource                  kanbanBoardTmpProcessJob_ds;
        List                            cards = new List(Types::String);
        KanbanId                        kanbanId;

        kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        // Get the first multi selection or single selection record
        processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                             kanbanBoardTmpProcessJob_ds.getFirst(1) :
                             kanbanBoardTmpProcessJob_ds.cursor();

        while (processJobSelected)
        {
            // cards should be assigned
            kanbanId = Kanban::findKanbanJobRecId(processJobSelected.Job).KanbanId;
            cards.addEnd(any2str(kanbanId));
            processJobSelected = kanbanBoardTmpProcessJob_ds.getNext();
        }

        kanbanPrinter.printKanbans(cards, workCell, showDialog, KanbanPrintLocation::WorkCell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sends kanban jobs to the report to print their picking lists.
    /// </summary>
    /// <param name="workCell">
    ///    The name of the work cell from which kanban cards are printed.
    /// </param>
    /// <param name="showDialog">
    ///    A Boolean that indicates whether a dialog that has printing options should be opened.
    /// </param>

    public void printPickingList(WrkCtrIdBase workCell, boolean showDialog = true)
    {
        KanbanBoardTmpProcessJob        processJobSelected;
        KanbanPrinter                   kanbanPrinter = KanbanPrinter::construct();
        FormDataSource                  kanbanBoardTmpProcessJob_ds;
        List                            jobs = new List(Types::Int64);

        kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        // Get the first multi selection or single selection record
        processJobSelected = kanbanBoardTmpProcessJob_ds.getFirst(1) ?
                             kanbanBoardTmpProcessJob_ds.getFirst(1) :
                             kanbanBoardTmpProcessJob_ds.cursor();

        while (processJobSelected)
        {
            jobs.addEnd(processJobSelected.Job);
            processJobSelected = kanbanBoardTmpProcessJob_ds.getNext();
        }

        kanbanPrinter.printPickingList(jobs, workCell, showDialog, KanbanPrintLocation::WorkCell);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedJobs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a container that contains selected kanban job record IDs.
    /// </summary>
    /// <returns>
    /// A container of containers that contain selected kanban job and kanban record IDs.
    /// </returns>
    public container selectedJobs()
    {
        FormDataSource kanbanBoardTmpProcessJob_ds = formRun.dataSource(tableStr(KanbanBoardTmpProcessJob));

        return KanbanBoardForm::selectedRecords(
                                        kanbanBoardTmpProcessJob_ds,
                                        0,
                                        [
                                        fieldNum(KanbanBoardTmpProcessJob,Job)
                                        ,
                                        fieldNum(KanbanBoardTmpProcessJob,Kanban)
                                        ]
                                        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanBoardProcessJobList construct()
    {
        return new KanbanBoardProcessJobList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a helper class for the Kanban Board form that manages the kanban process jobs list.
    /// </summary>
    /// <param name="_formRun">
    ///    A <c>FormRun</c> object that represents the Kanban Board form.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>KanbanBoardProcessJobList</c> class.
    /// </returns>
    public static KanbanBoardProcessJobList newForm(FormRun _formRun)
    {
        if (!_formRun)
            return null;

        KanbanBoardProcessJobList kanbanBoardProcessJobList = new KanbanBoardProcessJobList();
        kanbanBoardProcessJobList.parmFormRun (_formRun);

        return kanbanBoardProcessJobList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
