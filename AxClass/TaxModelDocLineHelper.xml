<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The helper class used to help the implementation of Tax model doc line.
/// </summary>
public class TaxModelDocLineHelper
{
    SalesPurchJournalLine   documentLineMap;
    TaxModelTaxable         taxModelTaxable;
    TransTaxInformation     transTaxInformation;
    Map                     transTaxInformationMap;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustGroupId</c> based on the customer account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustGroupId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustGroupId getCustGroupId()
    {
        CustTable custTable = taxModelTaxable.getCustTable();

        if (custTable)
        {
            return custTable.CustGroup;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustTable getCustTable()
    {
        CustTable custTable;

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TableId getDocumentLineMainTableId()
    {
        return documentLineMap.SourceTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecId getDocumentLineMainTableRecId()
    {
        return documentLineMap.SourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineOriginalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesPurchJournalLine</c> of the document line original table.
    /// </summary>
    /// <returns>
    /// The <c>SalesPurchJournalLine</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SalesPurchJournalLine getDocumentLineOriginalTable()
    {
        return documentLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventTransId getInventTransId()
    {
        return documentLineMap.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDimId getInventDimId()
    {
        return documentLineMap.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCommodityCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>EcoResCategoryCommodityCode</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResCategoryCommodityCode</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResCategoryCommodityCode getCommodityCode()
    {
        IntrastatCommodityId commodity;

        if (documentLineMap
            && SysDictField::isFieldMapped(
                tableStr(SalesPurchJournalLine),
                tableId2Name(documentLineMap.TableId),
                fieldStr(SalesPurchJournalLine, IntrastatCommodity)))
        {
            commodity = documentLineMap.IntrastatCommodity;
            if (commodity)
            {
                EcoResCategory category = EcoResCategory::find(commodity);
                return category.Code;
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ItemId getItemId()
    {
        return documentLineMap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product category <c>EcoResCategoryId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResCategoryId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResCategoryId getProductCategory()
    {
        if (documentLineMap 
            && SysDictField::isFieldMapped(
                tableStr(SalesPurchJournalLine), 
                tableId2Name(documentLineMap.TableId), 
                fieldStr(SalesPurchJournalLine, CategoryId)))
        {
            return documentLineMap.CategoryId;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the product type <c>EcoResProductType</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>EcoResProductType</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public EcoResProductType getProductType()
    {
        ItemId itemId = taxModelTaxable.getItemId();
        if (itemId)
        {
            EcoResProduct product = EcoResProduct::findByProductNumber(itemId);
            return product.ProductType;
        }
        
        return EcoResProductType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original <c>TaxModelTaxable</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTaxable</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelTaxable getOriginalTaxModelTaxable()
    {
        return TaxModelDocLineFactory::newTaxModelDocLine(taxModelTaxable.getDocumentLineOriginalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Qty getQuantity()
    {
        return  documentLineMap.SalesPurchQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the reference TaxModel doc line.
    /// </summary>
    /// <returns>
    /// The refernece taxModel doc line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelTaxable getReferenceTaxModelDocLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the tax code for the transaction line.
    /// </summary>
    /// <returns>
    ///    The tax code.
    /// </returns>
    /// <remarks>
    ///    Specifying in a tax code on a transaction line implies that this transaction line is a direct tax
    ///    adjustment. No tax calculations will occur. Instead, the transaction amount is treated as the tax
    ///    amount and will be applied to this tax code. Specify an empty string if this functionality is not
    ///    desired.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxCode getTaxCode()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getTaxCode();
        }
        else
        {
            return "";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::IncomingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The tax group.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxGroup getTaxGroup()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getTaxGroup();
        }
        else
        {
            return documentLineMap.TaxGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the item tax group for the transaction line.
    /// </summary>
    /// <returns>
    ///   The item tax group.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxItemGroup getTaxItemGroup()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getTaxItemGroup();
        }
        else
        {
            return documentLineMap.TaxItemGroup;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLocationRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax location <c>RefRecId</c> on the transaction.
    /// </summary>
    /// <returns>
    /// The tax location of the transaction.
    /// </returns>
    /// <remarks>
    /// The method may be required to be overridden by different type of transaction.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId getTaxLocationRefRecId()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getTaxLocationRefRecId();
        }
        else
        {
            return transTaxInformation.CompanyLocation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    /// This method is used to init TransTaxInformation.CompanyLocation, which should be defaulted from transaction line delivery address
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getTaxLogisticsPostalAddress()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getTaxLogisticsPostalAddress(TransTaxInformationType_IN::Normal);
        }
        else
        {
            //Validate the address effectiveness and add the warning to telemetry for further analysis, no warning message popup
            this.checkLogisticsPostalAddressWithEffectiveDateTime(taxModelTaxable.getTaxLocationRefRecId());
            return LogisticsPostalAddress::findByLocation(taxModelTaxable.getTaxLocationRefRecId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxModelTransactionType</c> of the transaction
    /// </summary>
    /// <returns>
    /// The <c>TaxModelTransactionType</c> of the transaction
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxModelTransactionType getTransactionType()
    {
        if (this.getQuantity() >= 0)
        {
            return TaxModelTransactionType::Normal;
        }
        else
        {
            return TaxModelTransactionType::StrikeBalance;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate getTransDate()
    {
        return documentLineMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendGroupId</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendGroupId</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendGroupId getVendGroupId()
    {
        VendTable vendTable = taxModelTaxable.getVendTable();

        if (VendTable)
        {
            return VendTable.VendGroup;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>VendTable</c> based on the vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>VendTable</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public VendTable getVendTable()
    {
        VendTable vendTable;

        return vendTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBasedOnReferenceTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the doc line is based on reference taxmodel doc line  or not.
    /// </summary>
    /// <returns>
    /// True if the doc line is based on the reference taxModel doc line;Oterwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isBasedOnReferenceTaxModelDocLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForegin</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is related to a foregin account.
    /// </summary>
    /// <returns>
    /// True if the document line is related to a foregin account; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isForegin()
    {
        CustTable custTable;
        VendTable vendTable;
        boolean   ret;

        custTable = taxModelTaxable.getCustTable();

        if (custTable)
        {
            ret = custTable.IsForeign();
        }
        else
        {
            vendTable= taxModelTaxable.getVendTable();
            if (vendTable)
            {
                ret = vendTable.isForeign();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction is a payment or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a payment; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isPayment()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document line buffer.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setDocumentLine(SalesPurchJournalLine    _documentLineMap)
    {
        documentLineMap             = _documentLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxModelTaxable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the instance of <c>TaxModelTaxable</c>
    /// </summary>
    /// <param name="_taxModelTaxable">
    /// The given instance of <c>TaxModelTaxable</c>
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTaxModelTaxable(TaxModelTaxable _taxModelTaxable)
    {
        taxModelTaxable = _taxModelTaxable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes shouldPostTaxTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transction company
    /// </summary>
    /// <returns>
    /// The transaction company
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public SelectableDataArea getTransactionCompany()
    {
        return curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LineAmount getLineAmount()
    {
        return documentLineMap.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustVendTable</c> based on the customer or vendor account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustVendTable</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendTable getPartyTable()
    {
        CustTable custTable;

        custTable = taxModelTaxable.getCustTable();
        if (custTable)
        {
            return custTable;
        }
        else
        {
            return taxModelTaxable.getVendTable();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the document line transaction currency.
    /// </summary>
    /// <returns>The document line transaction currency.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CurrencyCode getTransactionCurrency()
    {
        return documentLineMap.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipForTaxCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Should skip this line for tax calculation.
    /// </summary>
    /// <returns>True if tax should be skipped for calculation, otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean shouldSkipForTaxCalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value for item.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <param name = "_modelType">The invent model type.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueForItem(Name _referenceModelName, ModuleInventPurchSales _modelType)
    {
        InventTableModule inventTableModule;

        switch (_modelType)
        {
            case ModuleInventPurchSales::Purch:
            case ModuleInventPurchSales::Sales:
                inventTableModule = InventTableModule::find(this.getItemId(), _modelType);
                return TaxBusinessService::getERComponentLookupConditionDimValue(_referenceModelName, inventTableModule);

            default :
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueForCustVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value for customer or vendor.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueForCustVend(Name _referenceModelName)
    {
        ERComponentLookupConditionDimValue value;
        CustVendTable custVendTable = this.getPartyTable();

        if (custVendTable)
        {
            value = TaxBusinessService::getERComponentLookupConditionDimValue(_referenceModelName, custVendTable);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueForLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value for legal entity.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueForLegalEntity(Name _referenceModelName)
    {
        DataArea dataArea;

        select firstonly dataArea
            where dataArea.id == curExt();

        return TaxBusinessService::getERComponentLookupConditionDimValue(_referenceModelName, dataArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxIdentificationDimensionValueFromTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax identification dimension's value from transaction.
    /// </summary>
    /// <param name = "_referenceModelName">The reference model name.</param>
    /// <returns>The tax identification dimension's value.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ERComponentLookupConditionDimValue getTaxIdentificationDimensionValueFromTransaction(Name _referenceModelName)
    {
        ERComponentLookupConditionDimValue value;

        if (documentLineMap)
        {
            value = TaxBusinessService::getERComponentLookupConditionDimValue(_referenceModelName, documentLineMap);
        }

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurpose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax document purpose.
    /// </summary>
    /// <returns>The tax document purpose.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxDocumentPurpose getPurpose()
    {
        return TaxDocumentPurpose::Transaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date
    /// </summary>
    /// <returns>
    /// The transaction delivery date
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Date getDeliveryDate()
    {
        return documentLineMap.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldEnableAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should enable accounting or not.
    /// </summary>
    /// <returns>
    /// True if the document line should enable accounting; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes shouldEnableAccounting()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the transaction tax information can be modified or not.
    /// </summary>
    /// <returns>
    /// True if the tax information of document line can be modified; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes canModifyTaxInformation()
    {
        return documentLineMap.SalesPurchJournalLine::salesPurchJournalTable().Posted != NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxExempt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if tax is exempt for the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is exempt for the transaction line; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYesId isTaxExempt()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().isTaxExempt();
        }
        else
        {
            return transTaxInformation.Exempt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPriceInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if the line of the sales tax is a prices include line or not.
    /// </summary>
    /// <returns>
    /// True if the document line is a prices included sales tax line; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes isPriceInclTax()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().isPriceInclTax();
        }
        else
        {
            return transTaxInformation.InclTax;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the transaction tax information buffer.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_transTaxInformation">
    /// The transaction tax information.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setTransTaxInformation(TransTaxInformation	_transTaxInformation)
    {
        transTaxInformation = _transTaxInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransTaxInformationMap</Name>
				<Source><![CDATA[
	/// <summary>
	/// Sets the transaction tax information buffer Map.
	/// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
	/// </summary>
	/// <param name="_transTaxInformation">
	/// The transaction tax information.
	/// </param>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
	public void setTransTaxInformationMap(Map _transTaxInformationMap)
	{
		transTaxInformationMap = _transTaxInformationMap;
	}

]]></Source>
			</Method>
			<Method>
				<Name>getPartyLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getPartyLogisticsPostalAddress()
    {
        LogisticsLocationRecId logisticsLocationRecId;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getPartyLogisticsPostalAddress();
        }
        else
        {
            logisticsLocationRecId = transTaxInformation.CustomerLocation ? transTaxInformation.CustomerLocation : transTaxInformation.VendorLocation;
            //Validate the address effectiveness and add the warning to telemetry for further analysis, no warning message popup
            this.checkLogisticsPostalAddressWithEffectiveDateTime(logisticsLocationRecId);
            return LogisticsPostalAddress::findByLocation(logisticsLocationRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxLogisticsPostalAddressTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax <c>LogisticsPostalAddress</c> of this transaction document line.
    /// </summary>
    /// <returns>
    /// The tax <c>LogisticsPostalAddress</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getTaxLogisticsPostalAddressTable()
    {
        //Validate the address effectiveness and add the warning to telemetry for further analysis, no warning message popup
        this.checkLogisticsPostalAddressWithEffectiveDateTime(taxModelTaxable.getTaxLocationRefRecId());
        return LogisticsPostalAddress::findByLocation(taxModelTaxable.getTaxLocationRefRecId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxRegistrationNumber</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxRegistrationNumber</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxRegistrationNumber getPartyTaxID()
    {
        TaxInformation_IN taxInformation = taxModelTaxable.getPartyTaxInfomationTable();

        if (taxInformation && taxInformation.TaxID)
        {
            TaxRegistration taxRegistration = TaxRegistration::find(taxInformation.TaxID);
            return taxRegistration.RegistrationNumber;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party <c>TaxInformation_IN</c>.
    /// </summary>
    /// <returns>
    /// The party <c>TaxInformation_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxInformation_IN getPartyTaxInfomationTable()
    {
        TaxInformationRefRecId_IN taxInformationRefRecId_IN;

        if (this.getPartyTable())
        {
            taxInformationRefRecId_IN = transTaxInformation.CustomerTaxInformation ? transTaxInformation.CustomerTaxInformation : transTaxInformation.VendorTaxInformation;
            return TaxInformation_IN::find(taxInformationRefRecId_IN);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxInfomationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TaxInformation_IN</c> based on the tax location.
    /// </summary>
    /// <returns>
    /// The <c>TaxInformation_IN</c>
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxInformation_IN getTaxInfomationTable()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            TaxModelTaxable taxModelTaxableRef;
            taxModelTaxableRef = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelTaxable;
            return TaxInformation_IN::find(taxModelTaxableRef.getTransTaxInfomation().TaxInformation);
        }
        else
        {
            return TaxInformation_IN::find(taxModelTaxable.getTransTaxInfomation().TaxInformation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsInterStateTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if it is the inter state transaction.
    /// </summary>
    /// <returns>
    /// True if it is not inter state transaction; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes IsInterStateTransaction()
    {
        boolean                 isInterState;
        LogisticsPostalAddress  partyAddress;
        LogisticsPostalAddress  taxAddress;

        isInterState = NoYes::No;

        partyAddress = taxModelTaxable.getPartyLogisticsPostalAddress();
        taxAddress = taxModelTaxable.getTaxLogisticsPostalAddressTable();

        if (partyAddress && taxAddress
            && ((partyAddress.CountryRegionId != taxAddress.CountryRegionId)
                || (partyAddress.CountryRegionId == taxAddress.CountryRegionId
                    && partyAddress.State != ''
                    && taxAddress.State != ''
                    && partyAddress.State != taxAddress.State))
                    )
        {
            isInterState = NoYes::Yes;
        }

        return isInterState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public UnitOfMeasureSymbol getUnit()
    {
        return documentLineMap.SalesPurchUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption address.
    /// </summary>
    /// <returns>
    /// The comsumption address.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getConsumptionAddress()
    {
        LogisticsPostalAddress  consumptionAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            consumptionAddress = taxModelTaxable.getReferenceTaxModelDocLine().getConsumptionAddress();
        }
        else
        {
            if (taxModelTaxable.getCustTable())
            {
                // For sales transaction, we should take customer address's state id.
                consumptionAddress = taxModelTaxable.getPartyLogisticsPostalAddress();
            }
            else
            {
                // For rest transactions, we should take transaction line company address's (CompanyLocation_IN) state id.
                consumptionAddress = taxModelTaxable.getTaxLogisticsPostalAddressTable();
            }
        }

        return consumptionAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCountryRegionId getConsumptionCountryRegionId()
    {
        LogisticsAddressCountryRegionId countryRegionId;
        LogisticsPostalAddress          consumptionAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getConsumptionCountryRegionId();
        }
        else
        {
            consumptionAddress = taxModelTaxable.getConsumptionAddress();
            if (consumptionAddress)
            {
                countryRegionId = consumptionAddress.CountryRegionId;
            }
        }

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption city name of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption city name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCityName getConsumptionCityName()
    {
        LogisticsAddressCityName    cityName;
        LogisticsPostalAddress      consumptionAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getConsumptionCityName();
        }
        else
        {
            consumptionAddress = taxModelTaxable.getConsumptionAddress();
            if (consumptionAddress)
            {
                cityName = consumptionAddress.City;
            }
        }

        return cityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption state id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressStateId getConsumptionStateId()
    {
        LogisticsAddressStateId stateId;
        LogisticsPostalAddress  consumptionAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getConsumptionStateId();
        }
        else
        {
            consumptionAddress = taxModelTaxable.getConsumptionAddress();

            if (consumptionAddress)
            {
                stateId = consumptionAddress.State;
            }
        }

        return stateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsumptionZipCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the comsumption zip code id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line consumption zip code id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressZipCodeId getConsumptionZipCodeId()
    {
        LogisticsAddressZipCodeId   zipCodeId;
        LogisticsPostalAddress      consumptionAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getConsumptionZipCodeId();
        }
        else
        {
            consumptionAddress = taxModelTaxable.getConsumptionAddress();

            if (consumptionAddress)
            {
                zipCodeId = consumptionAddress.ZipCode;
            }
        }

        return zipCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin address.
    /// </summary>
    /// <returns>
    /// The origin address.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsPostalAddress getOriginAddress()
    {
        LogisticsPostalAddress  originAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            originAddress = taxModelTaxable.getReferenceTaxModelDocLine().getOriginAddress();
        }
        else
        {
            if (taxModelTaxable.getCustTable())
            {
                // For sales transactions, we should take transaction line company address's (CompanyLocation_IN) state id.
                originAddress = taxModelTaxable.getTaxLogisticsPostalAddressTable();
            }
            else
            {
                // For rest transaction, we should take customer address's state id.
                originAddress = taxModelTaxable.getPartyLogisticsPostalAddress();
            }
        }

        return originAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginCountryRegionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin country region id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin country region id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCountryRegionId getOriginCountryRegionId()
    {
        LogisticsAddressCountryRegionId countryRegionId;
        LogisticsPostalAddress          originAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getOriginCountryRegionId();
        }
        else
        {
            originAddress = taxModelTaxable.getOriginAddress();
            if (originAddress)
            {
                countryRegionId = originAddress.CountryRegionId;
            }
        }

        return countryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginCityName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin city name of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin city name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCityName getOriginCityName()
    {
        LogisticsAddressCityName    cityName;
        LogisticsPostalAddress      originAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getOriginCityName();
        }
        else
        {
            originAddress = taxModelTaxable.getOriginAddress();
            if (originAddress)
            {
                cityName = originAddress.City;
            }
        }

        return cityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin state id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin state id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressStateId getOriginStateId()
    {
        LogisticsAddressStateId stateId;
        LogisticsPostalAddress  originAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getOriginStateId();
        }
        else
        {
            originAddress = taxModelTaxable.getOriginAddress();

            if (originAddress)
            {
                stateId = originAddress.State;
            }
        }

        return stateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginZipCodeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the origin zip code id of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction line origin zip code id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressZipCodeId getOriginZipCodeId()
    {
        LogisticsAddressZipCodeId   zipCodeId;
        LogisticsPostalAddress      originAddress;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            return taxModelTaxable.getReferenceTaxModelDocLine().getOriginZipCodeId();
        }
        else
        {
            originAddress = taxModelTaxable.getOriginAddress();

            if (originAddress)
            {
                zipCodeId = originAddress.ZipCode;
            }
        }

        return zipCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPartyCountryRegionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the party country region type of the transaction line.
    /// </summary>
    /// <returns>
    /// The transaction party country region type.
    /// </returns>
    public CountryRegionType getPartyCountryRegionType()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            TaxModelDocLineBaseImpl taxModelDocLineBaseImpl = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelDocLineBaseImpl;

            return taxModelDocLineBaseImpl.getPartyCountryRegionType();
        }
        else
        {
            if (taxModelTaxable.getTaxDirection() == TaxDirection::OutgoingTax)
            {
                return IntrastatCountryRegionParameters::countryRegionType(taxModelTaxable.getConsumptionCountryRegionId(), taxModelTaxable.getOriginCountryRegionId());
            }
            else
            {
                return IntrastatCountryRegionParameters::countryRegionType(taxModelTaxable.getOriginCountryRegionId(), taxModelTaxable.getConsumptionCountryRegionId());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            TaxModelDocLineBaseImpl taxModelDocLineBaseImpl = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelDocLineBaseImpl;

            return taxModelDocLineBaseImpl.getDocumentInvoiceDate();
        }
        else
        {
            InvoiceDate invoiceDate;
            return invoiceDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            TaxModelDocLineBaseImpl taxModelDocLineBaseImpl = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelDocLineBaseImpl;

            return taxModelDocLineBaseImpl.getDocumentDate();
        }
        else
        {
            DocumentDate documentDate;
            return documentDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the tax rate type record.
    /// </summary>
    /// <returns>
    /// The <c>TaxRateType</c>
    public TaxRateType getTaxRateType()
    {
        TaxRateType             taxRateType;
        TaxModelDocLineBaseImpl  taxModelDocLineBaseImpl;

        if (taxModelTaxable.isBasedOnReferenceTaxModelDocLine())
        {
            taxModelDocLineBaseImpl = taxModelTaxable.getReferenceTaxModelDocLine() as TaxModelDocLineBaseImpl;
            taxRateType = taxModelDocLineBaseImpl.getTaxRateType();
        }
        else
        {
            taxRateType = TaxRateType::find(transTaxInformation.TaxRateType);
        }

        return taxRateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLogisticsPostalAddressWithEffectiveDateTime</Name>
				<Source><![CDATA[
    internal void checkLogisticsPostalAddressWithEffectiveDateTime(LogisticsLocationRecId _logisticsLocationRecId)
    {
        TableId mapTableId = tableNum(SalesPurchJournalLine);
        var fieldToBeMapped = fieldNum(SalesPurchJournalLine, TransDate);

        if (mappingExists(mapTableId, documentLineMap.SourceTableId, fieldToBeMapped))
        {
            const int Time235959 = 86399;
            EffectiveDateTime effectiveDateTime = DateTimeUtil::newDateTime(taxModelTaxable.getTransDate(), Time235959, DateTimeUtil::getUserPreferredTimeZone());
            LineNum lineNum = (SysDictField::isFieldMapped(tableStr(SalesPurchJournalLine), tableId2Name(documentLineMap.TableId), fieldStr(SalesPurchJournalLine, LineNum)))? documentLineMap.LineNum : 0;
            TaxLogisticsLocationAddressUtil::checkLogisticsPostalAddress(_logisticsLocationRecId, effectiveDateTime, lineNum);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>