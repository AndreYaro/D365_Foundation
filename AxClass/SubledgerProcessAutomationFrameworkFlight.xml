<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerProcessAutomationFrameworkFlight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Flight logic handles for doing the asynchronous transfer subledger journal entries.
/// </summary>
[SysObsolete("This class is obsolete and will be removed in a future release.", false, 14\12\2023)]
internal  class SubledgerProcessAutomationFrameworkFlight extends Flight
{
    static private SubledgerProcessAutomationFrameworkFlight singleton = new SubledgerProcessAutomationFrameworkFlight();
    internal const str DisableProcessAutomationFramework = 'ProcessAutomation_DisableProcessAutomationFramework';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isEnabledByDefault()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static SubledgerProcessAutomationFrameworkFlight instance()
    {
        return singleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    public static boolean isEnabled()
    {
        boolean isEnabled = SubledgerProcessAutomationFrameworkFlight::instance().isEnabled();

        // For back compatibility, still honor the previous implementation's killswitch, so that the functionality is not suddenly enabled
        // on environments where it was previously disabled by the killswitch
        isEnabled = isEnabled && !SysFlightingService::isFeatureEnabled(DisableProcessAutomationFramework);

        return isEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>