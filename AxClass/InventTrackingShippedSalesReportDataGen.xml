<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTrackingShippedSalesReportDataGen</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTrackingShippedSalesReportDataGen</c> class provides the logic to generate the data needed
///    for the Batch Traceability Report - Shipped to Customers report.
/// </summary>
public class InventTrackingShippedSalesReportDataGen
{
    InventTrackingTmpShippedSalesReportLine tmpReportLine;
    InventTrackingDimTracingCriteria        criteria;
    InventTrackingDimTracingHierarchy       hierarchy;

    Set                                     filteredCustomers;
    Set                                     loadedRecords;
    Set                                     sectionSalesLineLoaded;
    Set                                     processedNodes;
    Map                                     headerData;
    Map                                     nodeRecordCache;
    Map                                     qtyOrdered;

    boolean                                 showResults;
    boolean                                 showAllCustomers;
    private static boolean                  includeWarehouseSpecificInventoryTransactions = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addFromCustJournal</Name>
				<Source><![CDATA[
    private void addFromCustJournal(
        InventTrackingTmpShippedSalesReportLine _header,
        InventTrackingCustJournalTable          _journalTable,
        InventTrackingCustJournalTrans          _journalTrans,
        InventTrans                             _inventTrans)
    {
        tmpReportLine.clear();

        if (showResults
            && (showAllCustomers
                || filteredCustomers.in(_journalTable.CustAccount)))
        {
            this.initHeaderSectionFromCustJournal(tmpReportLine, _header);

            tmpReportLine.initFromInventTrackingCustJournalTable(_journalTable);
            tmpReportLine.initFromInventTrackingCustJournalTrans(_journalTrans);
            tmpReportLine.initFromInventTrans(_inventTrans);

            InventTransOrigin inventTransOrigin = _inventTrans.InventTransOrigin();
            if (!qtyOrdered.exists(inventTransOrigin.InventTransId))
            {
                // Calculate what is remaining.
                // If there is anything remaining, then the sales order is guaranteed to still exist.
                SalesLine salesLine = SalesLine::findInventTransId(inventTransOrigin.InventTransId);
                if (salesLine)
                {
                    tmpReportLine.Remain         = salesLine.RemainSalesPhysical;
                    tmpReportLine.RemainInvent   = salesLine.RemainInventPhysical;
                    tmpReportLine.PdsCWRemain    = salesLine.PdsCWRemainInventPhysical;
                }

                tmpReportLine.QtyOrdered = salesLine ? salesLine.SalesQty : this.deliveredTotal(inventTransOrigin.InventTransId);

                qtyOrdered.insert(inventTransOrigin.InventTransId, tmpReportLine.QtyOrdered);
            }

            tmpReportLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSalesTransactionDataFromNode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds sales transaction data to the report data table.
    /// </summary>
    /// <param name="_nodeId">
    ///    The ID for the current tracing hierarchy node.
    /// </param>
    /// <param name="_inventTransOrigin">
    ///    The record from the <c>InventTransOrigin</c> table related to <paramref name="_inventTrans"/>.
    /// </param>
    /// <param name="_inventTrans">
    ///    The record from the <c>InventTrans</c> table related to <paramref name="_inventTransOrigin"/>.
    /// </param>
    private void addSalesTransactionDataFromNode(
        int                                 _nodeId,
        InventDimTrackingInventTransNode    _node)
    {
        CustInvoiceJour                                 custInvoiceJour;
        CustInvoiceTrans                                custInvoiceTrans;
        CustPackingSlipJour                             custPackingSlipJour;
        CustPackingSlipTrans                            custPackingSlipTrans;
        InventTrackingTmpShippedSalesReportLine         header;
        InventTrans                                     inventTrans;
        InventTrackingDimTracingInventTransDTO          nodeInventTransDTO = _node.parmInventTransDTO();
        InventTrackingDimTracingInventTransOriginDTO    nodeInventTransOriginDTO = _node.parmInventTransOriginDTO();

        if (!nodeInventTransOriginDTO.recId() || nodeInventTransOriginDTO.referenceCategory() != InventTransType::Sales)
        {
            return;
        }

        this.initHeaderInformation(_nodeId, header);
        str sectionSalesLineKey = strFmt('%1#%2#%3#%4#%5', header.Type, header.ItemId, header.InventDimId, nodeInventTransOriginDTO.inventTransId(), nodeInventTransDTO.recId());
        if (sectionSalesLineLoaded.in(sectionSalesLineKey))
        {
            return;
        }
        sectionSalesLineLoaded.add(sectionSalesLineKey);

        // Do not go directly to the invoice or packing slip journals as they do not necessarily reflect the current situation. Rather, they are more of a snapshot of the situation at the
        // time they were posted. So, it's historical in nature. Instead, use the inventory transactions as they always reflect the current situation. Through the inventory transactions, the
        // relevant journals may be obtained.
        select firstOnly inventTrans
                where inventTrans.RecId == nodeInventTransDTO.recId()
                    && (inventTrans.StatusIssue == StatusIssue::Deducted
                        || inventTrans.StatusIssue == StatusIssue::Sold
                        || (inventTrans.ReturnInventTransOrigin
                            && (inventTrans.StatusReceipt == StatusReceipt::Received
                                || inventTrans.StatusReceipt == StatusReceipt::Purchased)))
                outer join custPackingSlipTrans
                    where custPackingSlipTrans.PackingSlipId == inventTrans.PackingSlipId
                        && custPackingSlipTrans.OrigSalesId == nodeInventTransOriginDTO.referenceId()
                        && custPackingSlipTrans.InventTransId == nodeInventTransOriginDTO.inventTransId()
                outer join custPackingSlipJour
                    where custPackingSlipJour.PackingSlipId == custPackingSlipTrans.PackingSlipId
                        && custPackingSlipJour.SalesId == custPackingSlipTrans.SalesId
                        && custPackingSlipJour.DeliveryDate == custPackingSlipTrans.DeliveryDate
                outer join custInvoiceTrans
                    where custInvoiceTrans.InvoiceId == inventTrans.InvoiceId
                        && custInvoiceTrans.OrigSalesId == nodeInventTransOriginDTO.referenceId()
                        && custInvoiceTrans.InventTransId == nodeInventTransOriginDTO.inventTransId()
                outer join custInvoiceJour
                    where custInvoiceJour.InvoiceId == custInvoiceTrans.InvoiceId
                        && custInvoiceJour.SalesId == custInvoiceTrans.SalesId
                        && custInvoiceJour.InvoiceDate == custInvoiceTrans.InvoiceDate
                        && custInvoiceJour.numberSequenceGroup == custInvoiceTrans.numberSequenceGroup;
        if (inventTrans)
        {
            if (inventTrans.InvoiceId)
            {
                this.addFromCustJournal(header, custInvoiceJour, custInvoiceTrans, inventTrans);
            }
            else
            {
                this.addFromCustJournal(header, custPackingSlipJour, custPackingSlipTrans, inventTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventTrackingDimTracingCriteria</c> class with the criteria
    /// properties given in this data generator.
    /// </summary>
    /// <returns>
    ///    A new <c>InventTrackingDimTracingCriteria</c> with the critera properties in this data generator.
    /// </returns>
    protected InventTrackingDimTracingCriteria createCriteria()
    {
        criteria = InventTrackingDimTracingCriteria::construct();
        criteria.parmTraceDirection(ForwardBackward::Forward);

        return criteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveredTotal</Name>
				<Source><![CDATA[
    private SalesQty deliveredTotal(InventTransId _inventTransId)
    {
        SalesQty qty = (select sum(QtyPhysical)
                from CustInvoiceTrans
                where CustInvoiceTrans.InventTransId == _inventTransId).QtyPhysical;

        qty += (select sum(Qty)
                from CustPackingSlipTrans
                where CustPackingSlipTrans.InventTransId == _inventTransId).Qty;

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds or creates the header information for an <c>InventTrackingTmpShippedSalesReportLine</c> record.
    /// </summary>
    /// <param name="_prodId">
    ///     Production number to find or create the header information for.
    /// </param>
    /// <param name="_type">
    ///     Determines whether the header pertains to a Traced or Parent item.
    /// </param>
    /// <param name="_inventTable">
    ///     Inventory record associated with the Traced or Parent item.
    /// </param>
    /// <param name="_inventDim">
    ///     Inventory dimension associated with the Traced or Parent item.
    /// </param>
    /// <returns>
    ///     An <c>InventTrackingTmpShippedSalesReportLine</c> record with the header portion of the record populated.
    /// </returns>
    /// <remarks>
    ///     The parameters _type, _inventTable, and _inventDim are only necessary if the header must be created; otherwise, the parameters are ignored.
    ///     As headers are subsequentially created, they are stored in a map where the production number serves as the key to that map.
    /// </remarks>
    private InventTrackingTmpShippedSalesReportLine findOrCreateHeader(ProdId _prodId, InventTrackingProductType _type, InventTable _inventTable, InventDim _inventDim)
    {
        InventTrackingTmpShippedSalesReportLine header;

        if (headerData.exists(_prodId))
        {
            header = headerData.lookup(_prodId);
        }
        else
        {
            this.loadHeaderFields(header, _type, _inventTable, _inventDim);
            headerData.insert(_prodId, header);
        }

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFilteredCustomerSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gathers a filtered set of customers as specified by a query.
    /// </summary>
    /// <param name="_query">
    ///    A reference to a <c>Query</c> object containing a query to filter customers by.
    /// </param>
    /// <remarks>
    ///    The query is executed and the list of resulting customers are gathered into a set. This set will be consulted later when creating the records for the report.
    /// </remarks>
    private void initFilteredCustomerSet(Query _query)
    {
        CustTable   custTable;

        showAllCustomers    = true;
        showResults         = true;

        if (_query)
        {
            showAllCustomers = false;

            QueryRun queryRun = new QueryRun(_query);
            while (queryRun.next())
            {
                custTable = queryRun.get(custTable.TableId);
                if (!filteredCustomers.in(custTable.AccountNum))
                {
                    filteredCustomers.add(custTable.AccountNum);
                }
            }

            select count(RecId)
                from custTable;

            // If there are customers in the table but the filtered list of customers is empty, then the query did not yield any results. Therefore, the report should not
            // yield any results either.
            if (custTable.RecId && filteredCustomers.empty())
            {
                showResults = false;
            }

            if (custTable.RecId == filteredCustomers.elements())
            {
                // Free the memory
                filteredCustomers = new Set(Types::String);

                showAllCustomers = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds or creates the section header for a given hiearchy node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The ID for the current tracing hierarchy node.
    /// </param>
    /// <param name="_header">
    ///    An <c>InventTrackingSalesLineTmp</c> buffer to contain the header information.
    /// </param>
    protected void initHeaderInformation(int _nodeId, InventTrackingTmpShippedSalesReportLine _header)
    {
        ProdId                                          prodId;

        InventTrackingDimTracingInventTransDTO          inventTransDTO;
        InventTrackingDimTracingInventTransOriginDTO    inventTransOriginDTO;

        int parentId = hierarchy.parentNodeId(_nodeId);
        InventDimTrackingInventTransNode node = hierarchy.findInventTransNodeById(parentId);
        if (node)
        {
            inventTransDTO = node.parmInventTransDTO();
            inventTransOriginDTO = node.parmInventTransOriginDTO();

            if (inventTransOriginDTO.itemId() != criteria.parmItemIdCriteria())
            {
                // Walk up the hierarchy to see if there are any parents.
                while (parentId)
                {
                    node = hierarchy.findInventTransNodeById(parentId);
                    if (node)
                    {
                        inventTransDTO = node.parmInventTransDTO();
                        inventTransOriginDTO = node.parmInventTransOriginDTO();
                    }

                    if (inventTransOriginDTO.recId()
                        && (inventTransOriginDTO.referenceCategory() == InventTransType::Production
                            || inventTransOriginDTO.referenceCategory() == InventTransType::PmfProdCoBy))
                    {
                        prodId = inventTransOriginDTO.referenceId();
                        break;
                    }

                    parentId = hierarchy.parentNodeId(parentId);
                }
            }
        }

        InventTrackingProductType   type;
        InventDim                   inventDim;
        InventTable                 inventTable;

        if (prodId)
        {
            // A parent was found.
            type        = InventTrackingProductType::Parent;
            inventTable = inventTransOriginDTO.inventTable();
            inventDim   = inventTransDTO.inventDim();
        }
        else
        {
            // No parents.
            type        = InventTrackingProductType::Traced;
            inventTable = InventTable::find(criteria.parmItemIdCriteria());
            inventDim   = InventDim::findOrCreate(criteria.parmInventDimCriteria());
        }

        _header.data(this.findOrCreateHeader(prodId,  type, inventTable, inventDim));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeaderSectionFromCustJournal</Name>
				<Source><![CDATA[
    private void initHeaderSectionFromCustJournal(
        InventTrackingTmpShippedSalesReportLine _tmpReportLine,
        InventTrackingTmpShippedSalesReportLine _header)
    {
        _tmpReportLine.initFromHeader(_header);

        if (criteria.parmPdsVendBatchIdCriteria())
        {
            if (_tmpReportLine.InventDimPrint)
            {
                _tmpReportLine.InventDimPrint += '   ';
            }
            _tmpReportLine.InventDimPrint += fieldLabelValue(tableNum(InventBatch), fieldNum(InventBatch, PdsVendBatchId), criteria.parmPdsVendBatchIdCriteria());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables and tables in preparation for creating a new set of report data.
    /// </summary>
    protected void initialize()
    {
        delete_from tmpReportLine;

        loadedRecords           = new Set(Types::String);
        headerData              = new Map(Types::String, Types::Record);
        sectionSalesLineLoaded  = new Set(Types::String);
        nodeRecordCache         = new Map(Types::String, Types::Record);
        processedNodes          = new Set(Types::Integer);
        filteredCustomers       = new Set(Types::String);
        qtyOrdered              = new Map(Types::String, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTraceHeader</Name>
				<Source><![CDATA[
    private void insertTraceHeader()
    {
        InventTrackingTmpShippedSalesReportLine header;

        // No sales trasaction data for the traced information so insert the header record
        if (!headerData.exists(''))
        {
            this.loadHeaderFields(header, InventTrackingProductType::Traced, criteria.inventTable(), InventDim::findOrCreate(criteria.parmInventDimCriteria()));
            headerData.insert('', header);

            tmpReportLine.data(header);
            tmpReportLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the data into the report data tables.
    /// </summary>
    /// <param name="_query">
    ///     A <c>Query</c> object filtering the customers to be loaded into the report data tables.
    /// </param>
    /// <remarks>
    ///    This should be called after all criteria parameters have been set.
    /// </remarks>
    public void load(Query _query = null)
    {
        ttsbegin;

        this.initialize();

        this.initFilteredCustomerSet(_query);

        InventTrackingDimTracingRelations tracingRelations = InventTrackingDimTracingSearch::searchNoPack(criteria);

        if (tracingRelations)
        {
            hierarchy = InventTrackingDimTracingHierarchy::newFromTracingResults(tracingRelations);

            this.loadChildNodes(0);
            this.insertTraceHeader();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadChildNodes</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the data for the child nodes of the given tracing hierarchy node.
    /// </summary>
    /// <param name="_nodeId">
    ///    The ID for the tracing hierarchy node for which to load the data for all child nodes.
    /// </param>
    /// <remarks>
    ///    This will only load data for child nodes that have not been visited and is used recursively. The
    ///    initial caller should use the root node ID <c>0</c>.
    /// </remarks>
    protected void loadChildNodes(int _nodeId)
    {
        List                    toExpand = new List(Types::Integer);

        List childNodes = hierarchy.childNodes(_nodeId);
        if (childNodes && childNodes.elements())
        {
            ListEnumerator le = childNodes.getEnumerator();
            while (le.moveNext())
            {
                int nodeId = le.current();

                InventDimTrackingInventTransNode node = hierarchy.findInventTransNodeById(nodeId);

                if (includeWarehouseSpecificInventoryTransactions && node)
                {
                    str key = node.tracingNodeKey();

                    if (!loadedRecords.in(key))
                    {
                        this.addSalesTransactionDataFromNode(nodeId, node);

                        toExpand.addEnd(nodeId);
                        loadedRecords.add(key);
                    }
                }
                else
                {
                    if (node && node.parmInventTransDTO())
                    {
                        str key = this.recordKey(tableNum(InventTrans), node.parmInventTransDTO().recId());
                        if (!loadedRecords.in(key))
                        {
                            this.addSalesTransactionDataFromNode(nodeId, node);

                            toExpand.addEnd(nodeId);
                            loadedRecords.add(key);
                        }
                    }
                }
            }

            le = toExpand.getEnumerator();
            while (le.moveNext())
            {
                if (!processedNodes.in(le.current()))
                {
                    processedNodes.add(le.current());
                    this.loadChildNodes(le.current());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadHeaderFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the header related fields into a record buffer of the <c>InventTrackingSalesLineTmp</c> table for a new header section.
    /// </summary>
    /// <param name="_tmpReportLine">
    ///    The record buffer for the <c>InventTrackingTmpShippedSalesReportLine</c> table to load the header values into.
    /// </param>
    /// <param name="_trackingProductType">
    ///    The tracking product type for the section.
    /// </param>
    /// <param name="_inventTable">
    ///    The record from the <c>InventTable</c> table for the item to show in the header section.
    /// </param>
    /// <param name="_inventDim">
    ///    The record from the <c>InventDim</c> table for the dimensions to show in the header section.
    /// </param>
    protected void loadHeaderFields(
        InventTrackingTmpShippedSalesReportLine _tmpReportLine,
        InventTrackingProductType               _trackingProductType,
        InventTable                             _inventTable,
        InventDim                               _inventDim)
    {
        EcoResProduct ecoResProduct = _inventTable.product();

        _tmpReportLine.ItemId        = _inventTable.ItemId;
        _tmpReportLine.InventDimId   = _inventDim.InventDimId;
        _tmpReportLine.ProductNumber = ecoResProduct.DisplayProductNumber;
        _tmpReportLine.ProductName   = ecoResProduct.productName();
        _tmpReportLine.Type          = _trackingProductType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpReportLine</Name>
				<Source><![CDATA[
    public InventTrackingTmpShippedSalesReportLine parmTmpReportLine(InventTrackingTmpShippedSalesReportLine _tmpReportLine = tmpReportLine)
    {
        tmpReportLine = _tmpReportLine;

        return tmpReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a key to uniquely identify a record.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of the table.
    /// </param>
    /// <param name="_recId">
    ///    The record ID for the record in table <paramref name="_tableId"/>.
    /// </param>
    /// <returns>
    ///    A key to use to uniquely identify the record.
    /// </returns>
    protected str recordKey(TableId _tableId, RecId _recId)
    {
        return strFmt('%1#%2', _tableId, _recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTrackingShippedSalesReportDataGen construct()
    {
        return new InventTrackingShippedSalesReportDataGen();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReportContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventTrackingShippedSalesReportDataGen</c> class using the given <c>InventTrackingShippedSalesReportContract</c> object.
    /// </summary>
    /// <param name="_contract">
    ///    A reference to the <c>InventTrackingShippedSalesReportContract</c> object.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTrackingShippedSalesReportDataGen</c> class.
    /// </returns>
    public static InventTrackingShippedSalesReportDataGen newFromReportContract(InventTrackingShippedSalesReportContract _contract)
    {
        InventTrackingShippedSalesReportDataGen generator   = InventTrackingShippedSalesReportDataGen::construct();
        InventTrackingDimTracingCriteria        criteria    = generator.createCriteria();

        criteria.parmItemIdCriteria(_contract.parmItemId());
        criteria.parmInventDimCriteria(_contract.parmInventDimContract().parmInventDim());
        criteria.parmFromDateCriteria(_contract.parmFromDate());
        criteria.parmToDateCriteria(_contract.parmToDate());
        criteria.parmPdsVendBatchIdCriteria(_contract.parmPdsVendBatchId());

        return generator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>