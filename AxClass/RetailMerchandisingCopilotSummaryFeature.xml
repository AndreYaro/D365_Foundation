<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMerchandisingCopilotSummaryFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.BusinessPlatform.SharedTypes;

/// <summary>
/// The <c>RetailMerchandisingCopilotSummaryFeature </c> class defines the merchandising copilot summary feature.
/// </summary>
[ExportAttribute(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
internal final class RetailMerchandisingCopilotSummaryFeature implements IFeatureMetadata, IFeatureMetadataEnablementNotifiable, IFeatureLifecycle
{
    private static RetailMerchandisingCopilotSummaryFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeNew</Name>
				<Source><![CDATA[
    private static void typeNew()
    {
        instance = new RetailMerchandisingCopilotSummaryFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static RetailMerchandisingCopilotSummaryFeature instance()
    {
        return RetailMerchandisingCopilotSummaryFeature::instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Retail:RetailMerchandisingCopilotSummaryFeatureLabel");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::Retail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Retail:RetailMerchandisingCopilotSummaryFeatureSummary");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return 'https://learn.microsoft.com/en-us/dynamics365/commerce/merchandising-data-copilot-summary';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabledByDefault()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canDisable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onEnabled()
    {
        // Schedule a recurring batch job for RetailCommerceValidatorAutomatedSchedulerJob,
        // which runs merchandising configuration validator automatically.
        BatchJob batchJob = this.findRecurringValidatorBatchJob();

        if (batchJob)
        {
            // If there is already a recurring batch job, for example, customer enabled this feature before,
            // resume the recurring batch job instead of creating a new one.
            ttsbegin;
            batchJob.Status = BatchStatus::Waiting;
            batchJob.update();
            ttscommit;
        }
        else
        {
            RetailCommerceValidatorAutomatedSchedulerJob validatorSchedulerJob = new RetailCommerceValidatorAutomatedSchedulerJob();

            BatchHeader batchHeader = BatchHeader::construct();
            batchHeader.addTask(validatorSchedulerJob);

            SysRecurrenceData recurrence = SysRecurrence::defaultRecurrence();
            recurrence = SysRecurrence::setRecurrenceNoEnd(recurrence);
            recurrence = SysRecurrence::setRecurrenceUnit(recurrence, SysRecurrenceUnit::Minute, 1);
            batchHeader.parmRecurrenceData(recurrence);

            ttsbegin;
            batchHeader.save();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onDisabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void onDisabled()
    {
        BatchJob batchJob = this.findRecurringValidatorBatchJob();

        if (batchJob)
        {
            switch (batchJob.Status)
            {
                case BatchStatus::Waiting:
                    batchJob.Status = BatchStatus::Hold;
                    break;
                case BatchStatus::Executing:
                    batchJob.Status = BatchStatus::Cancelling;
                    break;
            }

            ttsbegin;
            batchJob.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLifecycleStage FeatureStage()
    {
        return FeatureLifecycleStage::Released;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecurringValidatorBatchJob</Name>
				<Source><![CDATA[
    private BatchJob findRecurringValidatorBatchJob()
    {
        Batch batch;
        BatchJob batchJob;

        select firstonly forupdate batchJob
            exists join batch
            where batch.ClassNumber == classNum(RetailCommerceValidatorAutomatedSchedulerJob)
                && batch.BatchJobId == batchJob.RecId;

        return batchJob;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>