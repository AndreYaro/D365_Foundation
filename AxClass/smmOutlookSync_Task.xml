<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmmOutlookSync_Task</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Microsoft discontinued support for synchronizing contacts, appointments, and tasks between Dynamics 365 Supply Chain Management and Outlook.', false, 01\12\2023)]
class SmmOutlookSync_Task extends smmOutlookSync
{
    smmActivities                       smmActivities;
    smmActivities                       activities;
    smmDeletedActivities                smmDeletedActivities;

    smmOutlookSyncType                  outlookSyncType;
    smmOutlookRecurrenceState           recurrenceState;

    TransDateTime                       syncrhonizeFromDateTime;
    TransDateTime                       syncrhonizeToDateTime;

    TransDate                           syncrhonizeFromDate;
    TransDate                           syncrhonizeToDate;

    boolean                             syncrhonizePrivate;
    boolean                             taskExistInOutlook;
    boolean                             taskDeletedInOutlook;
    boolean                             isMasterRec;

    Counter                             deletedTasks;
    Counter                             updatedTasks;
    Counter                             lines;
    Counter                             numOfExceptions;
    Counter                             exceptionIndex;

    smmDateTimeLastSynchronized         outlookLastDateTimeModified;
    smmActivityOutlookEntryID           outlookEntryId;
    smmContactPersonOutlookEntryID      entryId;

    SysIMapiExTask                      mapiExTask;
    smmITask                            outlookItem;

    container                           con;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearOutlookEntries</Name>
				<Source><![CDATA[
    // Clear entries in outlook which are in axapta.This method is useful in case outlook is migrated/backuped.
    public void clearOutlookEntries()
    {
        // Delete all tasks in Outlook that are in
        while select smmActivities
            where !smmActivities.IsTemplate &&
                  smmActivities.Category            == smmActivityCategory::Task &&
                  smmActivities.ResponsibleWorker   == currentWorker
        {
            // Find task in Outlook
            taskExistInOutlook = this.getOulookItemFromOutlook(strupr(smmActivities.OutlookEntryID), false);

            if (taskExistInOutlook)
            {
                // Delete the task in Outlook
                this.deleteItemInOutlook();
                deletedTasks++;
            }
        }
        // %1 task(s) have been deleted.
        info(strfmt("@SYS91018", deletedTasks));
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOutlookObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes Outlook objects that are opened by mapiEx.
    /// </summary>
    /// <param name="_save">
    /// Boolean to save
    /// </param>
    void closeOutlookObject(boolean _save = false)
    {
        if (mapiExTask)
        {
            if (_save)
            {
                mapiExTask.save();
            }
            mapiExTask.finalize();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInOutlook</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an item in Outlook.
    /// </summary>
    protected void createInOutlook()
    {
        outlookItem = folder.createTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMappingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create the mappint fields.
    /// </summary>
    /// <param name="_smmAxaptaOutlookMapping">
    /// Axapta fields mappint Outlook.
    /// </param>
    protected void createMappingField(smmAxaptaOutlookMapping _smmAxaptaOutlookMapping)
    {
        // Create a container with Outlook field ids and sync directions
        fieldMapping = fieldMapping + [[_smmAxaptaOutlookMapping.OutlookTaskField, _smmAxaptaOutlookMapping.OutlookSyncDirections]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteItemInOutlook</Name>
				<Source><![CDATA[
    public void deleteItemInOutlook()
    {
        outlookItem.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItem</Name>
				<Source><![CDATA[
    public smmIItem getItem()
    {
        return outlookItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOulookItemFromOutlook</Name>
				<Source><![CDATA[
    public boolean getOulookItemFromOutlook(str _outlookEntryId, boolean _echoErrorMessage = true)
    {
        boolean     ret = true;

        try
        {
            outlookItem = mapiEx.getItemFromId(strUpr(_outlookEntryId), outlookItemType);

            if (outlookItem)
            {
                if (outlookItem.parentFolderId() != folder.entryId())
                {
                    ret = false;
                }
            }
            else
            {
                ret = false;
            }
        }
        catch (Exception::Error)
        {
            // Remove unwanted system error message
            infolog.clear(lines);

            if (_echoErrorMessage)
            {
                // Outlook item not found.
                error("@SYS86365");
            }

            return false;
        }

        CodeAccessPermission::revertAssert();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        // Set mapping type
        outlookMappingType = smmOutlookMappingTypes::Tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outlookItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>smmIItem</c> represented by the current task.
    /// </summary>
    /// <returns>
    /// A <c>smmIItem</c> which contains the current task.
    /// </returns>
    public smmIItem outlookItem()
    {
        return outlookItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setActivity</Name>
				<Source><![CDATA[
    void setActivity(smmActivities _smmActivities)
    {
        smmActivities = _smmActivities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBodyTextInAxapta</Name>
				<Source><![CDATA[
    void setBodyTextInAxapta()
    {
        #smmOutlook
        str     outlookBodyText = mapiExTask.Body();
        int     axaptaTagPosition;

        axaptaTagPosition = strscan(outlookBodyText, #AxInformationBegin, 1, strlen(outlookBodyText));

        if (!axaptaTagPosition)
        {
            smmActivities.UserMemo = outlookBodyText;
        }
        else
        {
            smmActivities.UserMemo = substr(outlookBodyText, 1, axaptaTagPosition - 1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldsInOutlook</Name>
				<Source><![CDATA[
    public void setFieldsInOutlook()
    {
        int                         i;
        smmOutlookTaskFields        outlookTaskFields;
        smmOutlookSyncDirections    syncDirection;

        // Traverse through the field mapping container
        for (i = 1; i <= conlen(fieldMapping); i++)
        {
            // Find Outlook task field id
            outlookTaskFields    = conpeek(conpeek(fieldMapping, i), 1);

            // Find synchronization direction
            syncDirection        = conpeek(conpeek(fieldMapping, i), 2);

            // Do not copy if the field is only meant to be copied from Outlook to Axapta
            if (syncDirection != smmOutlookSyncDirections::OutlookToAxaptaOnly && syncDirection != smmOutlookSyncDirections::None)
            {
                // Set the Outlook field values
                this.setFieldValuesInOutlook(outlookTaskFields);
            }
        }

        // Save the Outlook task
        outlookItem = outlookItem.saveItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesInAxapta</Name>
				<Source><![CDATA[
    private void setFieldValuesInAxapta(smmOutlookTaskFields _outlookTaskFields)
    {
        switch (_outlookTaskFields)
        {
            case smmOutlookTaskFields::ActualWork :
                smmActivities.ActualWork = outlookItem.actualWork();
                break;

            case smmOutlookTaskFields::BillingInformation :
                smmActivities.BillingInformation = outlookItem.billingInformation();
                break;

            case smmOutlookTaskFields::Body :
                this.setBodyTextInAxapta();
                break;

            case smmOutlookTaskFields::Categories :
                smmActivities.OutlookCategories = outlookItem.categories();
                break;

            case smmOutlookTaskFields::Complete :
                smmActivities.Closed = outlookItem.complete();
                smmActivities.DoneByWorker = (smmActivities.Closed)?currentWorker:0;
                break;

            case smmOutlookTaskFields::DateCompleted :
                smmActivities.ActualEndDateTime = DateTimeUtil::removeTimeZoneOffset(outlookItem.dateCompleted(),outlookTimeZone);
                // If task is opened - Need to reset fields which are not full synchronized (or not sync)
                if (!smmActivities.ActualEndDateTime)
                    {
                        // Percentage completed reset from 100 if needed
                        if (smmActivities.PercentageCompleted == 100)
                        {
                            smmActivities.PercentageCompleted  = 0;
                        }

                        // Status reset from completed if needed
                        if (smmActivities.ActivityTaskTimeType == smmActivityTaskTimeType::Completed)
                        {
                            smmActivities.ActivityTaskTimeType = smmActivityTaskTimeType::InProgress;
                        }
                    }
                    // If task is completed - Need to reset fields which are not full synchronized (or not sync)
                    else
                    {
                        // Percentage completed reset to 100 if needed
                        if (smmActivities.PercentageCompleted != 100)
                        {
                            smmActivities.PercentageCompleted  = 100;
                        }

                        // Status reset to completed if needed
                        if (smmActivities.ActivityTaskTimeType != smmActivityTaskTimeType::Completed)
                        {
                            smmActivities.ActivityTaskTimeType = smmActivityTaskTimeType::Completed;
                        }
                    }
                break;

            case smmOutlookTaskFields::DueDate :
                smmActivities.EndDateTime             = DateTimeUtil::removeTimeZoneOffset(outlookItem.dueDate(),outlookTimeZone);
                break;

            case smmOutlookTaskFields::Importance :
                this.setTaskPriority(); 
                break;

            case smmOutlookTaskFields::Mileage :
                smmActivities.Mileage = outlookItem.mileage();
                break;

            case smmOutlookTaskFields::PercentComplete       :
                smmActivities.PercentageCompleted = outlookItem.percentComplete();
                break;

            case smmOutlookTaskFields::Reminder :
                smmActivities.ReminderActive          = outlookItem.reminderSet();
                break;

            case smmOutlookTaskFields::ReminderTime  :
                smmActivities.ReminderDateTime = DateTimeUtil::removeTimeZoneOffset(outlookItem.reminderTime(),outlookTimeZone);
                break;

            case smmOutlookTaskFields::Role :
                smmActivities.TaskRole                = outlookItem.role();
                break;

            case smmOutlookTaskFields::Sensitivity :
                smmActivities.Sensitivity             = outlookItem.sensitivity();
                break;

            case smmOutlookTaskFields::StartDate  :
                smmActivities.StartDateTime                         = DateTimeUtil::removeTimeZoneOffset(outlookItem.startDate(),outlookTimeZone);
                break;

            case smmOutlookTaskFields::Status :
                smmActivities.ActivityTaskTimeType    = outlookItem.status();
                break;

            case smmOutlookTaskFields::Subject :
                smmActivities.Purpose                 = outlookItem.subject();
                break;

            case smmOutlookTaskFields::TeamTask   :
                smmActivities.TeamTask                = outlookItem.teamTask();
                break;

            case smmOutlookTaskFields::TotalWork  :
                smmActivities.TotalWork               = outlookItem.totalWork();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the task priority based on appointment importance.
    /// </summary>
    protected void setTaskPriority()
    {
        switch (outlookItem.importance())
        {
            case #olImportanceLow :
                smmActivities.TaskPriority = smmActivityPriority::Low;
                break;

            case #olImportanceNormal :
                smmActivities.TaskPriority = smmActivityPriority::Normal;
                break;

            case #olImportanceHigh :
                smmActivities.TaskPriority = smmActivityPriority::High;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldValuesInOutlook</Name>
				<Source><![CDATA[
    private void setFieldValuesInOutlook(smmOutlookTaskFields _outlookTaskFields)
    {
        utcDateTime actualEndDate;

        switch (_outlookTaskFields)
        {
            case smmOutlookTaskFields::ActualWork               :
                outlookItem.setActualWork(smmActivities.ActualWork);
                break;

            case smmOutlookTaskFields::BillingInformation       :
                outlookItem.setBillingInformation(smmActivities.BillingInformation);
                break;

            case smmOutlookTaskFields::Body                     :
                outlookItem.setBody(smmActivities.UserMemo + '\n' + smmActivities.ExternalMemo);
                break;

            case smmOutlookTaskFields::Categories               :
                outlookItem.setCategories(smmActivities.OutlookCategories);
                break;

            case smmOutlookTaskFields::Company                  :
                outlookItem.setCompanies(smmActivities.DataAreaId);
                break;

            case smmOutlookTaskFields::Complete                 :
                outlookItem.setComplete(smmActivities.Closed);
                break;

            case smmOutlookTaskFields::Contact                  :
                outlookItem.setContactNames(ContactPerson::find(smmActivities.contactPersonId()).personName());
                break;

            case smmOutlookTaskFields::DateCompleted            :
                actualEndDate = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(smmActivities.actualEndDate(),0,DateTimeUtil::getUserPreferredTimeZone()),outlookTimeZone);
                if (actualEndDate != DateTimeUtil::minValue())
                {
                    outlookItem.setDateCompleted(actualEndDate);
                }
            break;

            case smmOutlookTaskFields::DueDate                  :
                outlookItem.setDueDate(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(smmActivities.endDate(),0,DateTimeUtil::getUserPreferredTimeZone()),outlookTimeZone));
                break;

            case smmOutlookTaskFields::Importance               :
                this.setTaskImportance();
                break;

            case smmOutlookTaskFields::Mileage                  :
                outlookItem.setMileage(smmActivities.Mileage);
                break;
            case smmOutlookTaskFields::Owner                    :
                outlookItem.setOwner(HcmWorker::find(smmActivities.ResponsibleWorker).PersonnelNumber);
                break;
            case smmOutlookTaskFields::PercentComplete          :
                outlookItem.setPercentComplete(smmActivities.PercentageCompleted);
                break;
            case smmOutlookTaskFields::Reminder                 :
                outlookItem.setReminderSet(smmActivities.ReminderActive);
                break;
            case smmOutlookTaskFields::ReminderTime             :
                outlookItem.setReminderTime(DateTimeUtil::applyTimeZoneOffset(smmActivities.ReminderDateTime,outlookTimeZone));
                break;
            case smmOutlookTaskFields::Role                     :
                outlookItem.setRole(smmActivities.TaskRole);
                break;
            case smmOutlookTaskFields::Sensitivity              :
                outlookItem.setSensitivity(smmActivities.Sensitivity);
                break;
            case smmOutlookTaskFields::StartDate                :
                outlookItem.setStartDate(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(smmActivities.startDate(),0,DateTimeUtil::getUserPreferredTimeZone()),outlookTimeZone));
                break;
            case smmOutlookTaskFields::Status                   : outlookItem.setStatus(smmActivities.ActivityTaskTimeType);
                break;
            case smmOutlookTaskFields::Subject                  : outlookItem.setSubject(smmActivities.Purpose);
                break;
            case smmOutlookTaskFields::TeamTask                 : outlookItem.setTeamTask(smmActivities.TeamTask);
                break;
            case smmOutlookTaskFields::TotalWork                : outlookItem.setTotalWork(smmActivities.TotalWork);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaskImportance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the appointment importance based on activity priority.
    /// </summary>
    protected void setTaskImportance()
    {
        switch (smmActivities.TaskPriority)
        {
            case smmActivityPriority::Low :
                outlookItem.setImportance(#olImportanceLow);
                break;

            case smmActivityPriority::Normal :
                outlookItem.setImportance(#olImportanceNormal);
                break;

            case smmActivityPriority::High :
                outlookItem.setImportance(#olImportanceHigh);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setItem</Name>
				<Source><![CDATA[
    public void setItem(smmIItem _item)
    {
        outlookItem = _item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookFolder</Name>
				<Source><![CDATA[
    protected void setOutlookFolder()
    {
        OutlookUserSetup    outlookUserSetup = OutlookUserSetup::findByUser(currentUser);
        // Get folder entryid and store id from the current employee
        str folderEntryId =  outlookUserSetup.OutlookTaskOutlookEntryID;
        str folderStoreId =  outlookUserSetup.OutlookTaskOutlookStoreID;

        this.setFolder(folderEntryId, folderStoreId, #olTaskItem, #olFolderTasks);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOutlookItemType</Name>
				<Source><![CDATA[
    protected void setOutlookItemType()
    {
        outlookItemType = smmOutlookMappingTypes::Tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeFromDate</Name>
				<Source><![CDATA[
    public void setSynchronizeFromDate(TransDate _synchronizeFromDate)
    {
        syncrhonizeFromDate = _synchronizeFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeToDate</Name>
				<Source><![CDATA[
    public void setSynchronizeToDate(TransDate _synchronizeToDate)
    {
        syncrhonizeToDate = _synchronizeToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLog</Name>
				<Source><![CDATA[
    // Show the infolog after synchronization
    void showLog()
    {
        if (updatedTasks == 0 && deletedTasks == 0)
        {
            //No task(s) for synchronizing found.
            info("@SYS91051");
        }
        else
        {
            if (updatedTasks)
            {
                // %1 task(s) have been synchronized.
                info(strfmt("@SYS91052", updatedTasks));
            }

            if (deletedTasks)
            {
                // %1 task(s) have been deleted.
                info(strfmt("@SYS91018", deletedTasks));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    public boolean synchronize()
    {
        boolean     errorInSync;

        try
        {
            // Store date and time of the start of the synchronization
            syncDateTime = DateTimeUtil::getSystemDateTime();

            // Include private tasks in synchronization
            syncrhonizePrivate = OutlookUserSetup::findByUser(this.getCurrentUser()).InclPrivateTasks;

            // Delete all tasks in Outlook that were deleted in Axapta since last synchronization
            this.updateDeletedActivitiesInOutlook();

            // Traverse tasks in outlook and synchronize to axapta
            this.synchronizeTasksOutlookToAxapta();

            // Traverse tasks in axapta and synchronize to outlook
            this.synchronizeTasksAxaptaToOutlook();

            // Update the information stored for later update to axapta activities
            this.updateActivitiesCon();

            // Update last synchronization information
            this.updateLastSyncInformation(syncDateTime);

            // Show the syncronization log
            this.showLog();

            // Closing the connection object after successful sync
            this.closeMapiEx();
        }
        catch
        {
            errorInSync = true;
        }

        return !errorInSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeFromDateTime</Name>
				<Source><![CDATA[
    public void setSynchronizeFromDateTime(TransDateTime _synchronizeFromDateTime)
    {
        syncrhonizeFromDateTime = _synchronizeFromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSynchronizeToDateTime</Name>
				<Source><![CDATA[
    public void setSynchronizeToDateTime(TransDateTime _synchronizeToDateTime)
    {
        syncrhonizeToDateTime = _synchronizeToDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeTasksAxaptaToOutlook</Name>
				<Source><![CDATA[
    void synchronizeTasksAxaptaToOutlook()
    {
        // Find all tasks for the employee in the selected sync period that were edited since last syncrhonization
        while select activities
            where activities.ResponsibleWorker   == currentWorker                       &&
                  activities.Category            == smmActivityCategory::Task           &&
                  activities.KeepSynchronized    == NoYes::Yes                          &&
                  !activities.IsTemplate                                                 &&
                  activities.StartDateTime   >= syncrhonizeFromDateTime &&
                  activities.StartDateTime   <= syncrhonizeToDateTime   &&
                  activities.LastEditAxDateTime  >= this.getDateTimeOfLastSynchronization() &&
                  (syncrhonizePrivate || activities.Sensitivity != smmSensitivity::Privat)

        {
            // Pass activity record to the class
            this.setActivity(activities);

            taskDeletedInOutlook = false;

            // Is task synchronized to Outlook before
            if (activities.OutlookEntryID)
            {
                // Search for the task in Outlook
                taskExistInOutlook = this.getOulookItemFromOutlook(strUpr(activities.OutlookEntryID), false);

                // If task exists in outlook and activity has changed since last synchronization
                if (taskExistInOutlook && (activities.LastEditAxDateTime > this.getDateTimeOfLastSynchronization()))
                {
                    // Get Outlook last modify date and time
                    outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);
                    // If there is no change then no need to sync again
                    if (!activities.Modified || (activities.LastEditAxDateTime == outlookLastDateTimeModified))
                    {
                        continue;
                    }

                    // Update in Outlook
                    this.setFieldsInOutlook();

                    entryId = outlookItem.entryId();

                    // Mark the activity as updated for later update in Axapta
                    con = con + [[activities.ActivityNumber, entryId, activities, smmOutlookUpdateAction::Update, outlookLastDateTimeModified]];
                    updatedTasks++;
                }

                // In case a task is deleted in outlook but exists in axapta
                else if (!taskExistInOutlook)
                {
                    // If force synchronisation and deleted task should be created again
                    if (forceSync)
                    {
                        taskDeletedInOutlook = true;
                    }
                    // Clear the link(EntryID and keep synchronised) in axapta
                    else
                    {
                        // Mark the activity as updated for later update in Axapta
                        con = con + [[activities.ActivityNumber, '', activities, smmOutlookUpdateAction::Update,outlookLastDateTimeModified]];
                    }
                }
            }

            // Task has not been syncrhonized before or task was deleted in Outlook and must be recreated
            if (!activities.OutlookEntryID || taskDeletedInOutlook)
            {
                // Create task in Outlook
                this.createInOutlook();
                this.setFieldsInOutlook();

                // Find the entry id of the created Outlook task
                entryId = outlookItem.entryId();

                // Get Outlook last modify date and time
                outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);

                // Mark the activity as updated for later update in Axapta
                con = con + [[activities.ActivityNumber, entryId, activities, smmOutlookUpdateAction::Create, outlookLastDateTimeModified]];
                updatedTasks++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeTasksOutlookToAxapta</Name>
				<Source><![CDATA[
    void synchronizeTasksOutlookToAxapta()
    {
        boolean                         privateTask;
        smmOutlookRecurrencePattern     smmOutlookRecurrencePattern;
        List                            tasks;
        ListEnumerator                  taskEnumerator;

        if (this.getDateTimeOfLastSynchronization())
        {
            tasks = folder.getAllTasksSinceLastSync(this.getDateTimeOfLastSynchronization(),outlookTimeZone);
        }
        else
        {
            tasks = folder.getAllTasks();
        }

        ttsbegin;

        // Traverse Outlook tasks
        taskEnumerator = tasks.getEnumerator();
        while (taskEnumerator.moveNext())
        {
            outlookItem = taskEnumerator.current();

            // Check if task is a private task
            privateTask = (outlookItem.sensitivity() == #olPrivate) ? true : false;

            // Do not syncrhonized private appointments
            if (!privateTask || syncrhonizePrivate)
            {
                // Get Outlook last modify date and time
                outlookLastDateTimeModified = DateTimeUtil::removeTimeZoneOffset(outlookItem.lastModificationTime(),outlookTimeZone);

                // Restrict method filters on HH:MM , to counter check for Ss
                if (outlookLastDateTimeModified < this.getDateTimeOfLastSynchronization() && !outlookItem.isRecurring())
                {
                    // Get next task from outlook
                    continue;
                }

                // Get Outlook entry id
                outlookEntryId = outlookItem.entryId();

                // Find the Axapta activity based on the Outlook entry id
                select firstonly forupdate smmActivities where !smmActivities.IsTemplate && smmActivities.OutlookEntryID == outlookEntryId;
                if (smmActivities)
                {
                    // Only update activity if it wasn't updated in Axapta since last syncrhonization (update in Axapta is always most important)
                    if (!( smmActivities.Modified && (smmActivities.LastEditAxDateTime > this.getDateTimeOfLastSynchronization()))
                          && (outlookLastDateTimeModified != smmActivities.LastEditAxDateTime))
                    {
                        // Update activity in Axapta with information from Outlook
                        this.updateAxaptaTask();

                        // If task is recurring set recurrence state
                        if (this.validateRecurring())
                        {
                            smmActivities.RecurrenceState = smmOutlookRecurrenceState::Master;
                            this.updateItemRecurrencePattern(smmActivities, outlookItem.getRecurrencePattern(),outlookTimeZone);
                        }
                        else
                        {
                            smmActivities.RecurrenceState = smmOutlookRecurrenceState::NotRecurring;
                        }

                        // Update time stamps from outlook to axapta
                        smmActivities.LastEditAxDateTime = outlookLastDateTimeModified;

                        smmActivities.update(false);

                        if (smmActivities.ActivityTaskTimeType == smmActivityTaskTimeType::Completed)
                        {
                            smmOutlookRecurrencePattern = smmOutlookRecurrencePattern::find(outlookEntryId,true);
                            if (smmOutlookRecurrencePattern)
                            {
                                smmOutlookRecurrencePattern.delete();
                            }
                        }

                        updatedTasks++;
                    }
                }
                else
                {
                    smmActivities.clear();

                    smmActivities.ActivityNumber        = smmParameters::getNumber(smmNumbSeqUsed::Activity);
                    smmActivities.Category              = smmActivityCategory::Task;
                    smmActivities.ResponsibleWorker     = currentWorker;
                    smmActivities.OutlookEntryID        = outlookEntryId;
                    smmActivities.Source                = "@SYS94030"; // Microsoft outlook

                    this.updateAxaptaTask();

                    // Update time stamps from outlook to axapta
                    smmActivities.LastEditAxDateTime = syncDateTime;
                    smmActivities.Modified           = NoYes::No;

                    if (this.validateRecurring())
                    {
                        smmActivities.RecurrenceState = smmOutlookRecurrenceState::Master;
                        this.updateItemRecurrencePattern(smmActivities, outlookItem.getRecurrencePattern(),outlookTimeZone);
                    }

                    smmActivities.insert(false);
                    updatedTasks++;
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRecurring</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the current task is recurring.
    /// </summary>
    /// <returns>
    /// Returns true if the task is recurring and the activity task time type of <c>smmActivities</c> table 
    /// is not associated to completed enumaration value; otherwise, false.
    /// </returns>
    [Wrappable(true)]
    protected final boolean validateRecurring()
    {
        return (outlookItem.isRecurring() && smmActivities.ActivityTaskTimeType != smmActivityTaskTimeType::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateActivitiesCon</Name>
				<Source><![CDATA[
    // Update the activities in axapta for changes stored in container
    void updateActivitiesCon()
    {
        smmOutlookUpdateAction  updateAction;
        int                     counter;

        ttsbegin;

        // Traverse the container of activities and actions
        for (counter = 1; counter <= conlen(con); counter++)
        {
            updateAction = conpeek(conpeek(con, counter), 4);

            if (updateAction == smmOutlookUpdateAction::Delete)
            {
                // Find the deletion entry in Axapta
                smmDeletedActivities = smmDeletedActivities::find(conpeek(conpeek(con, counter), 1), currentWorker, true);

                // Remove the deletion entry in Axapta now that the task are deleted from Outlook
                smmDeletedActivities.delete();
            }
            else
            if (updateAction == smmOutlookUpdateAction::Update)
            {
                activities = smmActivities::find(conpeek(conpeek(con, counter), 1), true);

                this.setActivity(activities);
                // In case an task is deleted in outlook , link should be cleared in axapta
                if (!conpeek(conpeek(con, counter), 2))
                {
                    activities.OutlookEntryID       = '';
                }
                activities.LastEditAxDateTime   = conpeek(conpeek(con, counter), 5);
                activities.Modified             = NoYes::No;

                activities.update(false);
            }
            else
            if (updateAction == smmOutlookUpdateAction::Create)
            {
                activities = smmActivities::find(conpeek(conpeek(con, counter), 1), true);

                activities.OutlookEntryID = conpeek(conpeek(con, counter), 2);

                activities.LastEditAxDateTime = conpeek(conpeek(con, counter), 5);
                activities.Modified           = NoYes::No;

                activities.update(false);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAxaptaTask</Name>
				<Source><![CDATA[
    public boolean updateAxaptaTask()
    {
        int                         i;
        smmOutlookTaskFields        outlookTaskFields;
        smmOutlookSyncDirections    syncDirection;
        if (mapiInitialised && mapiEx)
        {
            mapiExTask =  mapiEx.GetTaskFromEntryId(outlookItem.entryId());
        }

        // Traverse through the field mapping container
        for (i = 1; i <= conlen(fieldMapping); i++)
        {
            // Find Outlook task field id
            outlookTaskFields    = conpeek(conpeek(fieldMapping, i), 1);

            // Find synchronization direction
            syncDirection        = conpeek(conpeek(fieldMapping, i), 2);

            // Do not copy if the field in only meant to be copied from Axapta to Outlook
            if (syncDirection != smmOutlookSyncDirections::AxaptaToOutlookOnly  && syncDirection != smmOutlookSyncDirections::None)
            {
                // Set the Axapta field values
                this.setFieldValuesInAxapta(outlookTaskFields);
            }
        }
        if (mapiExTask)
        {
            this.closeOutlookObject();
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeletedActivitiesInOutlook</Name>
				<Source><![CDATA[
    // Delete all tasks in Outlook that were deleted in Axapta since last synchronization
    void updateDeletedActivitiesInOutlook()
    {
        while select smmDeletedActivities
            where smmDeletedActivities.Category             == smmActivityCategory::Task &&
                  smmDeletedActivities.ResponsibleWorker    == currentWorker
        {
            // Find task in Outlook
            taskExistInOutlook = this.getOulookItemFromOutlook(strupr(smmDeletedActivities.OutlookEntryID), false);

            if (taskExistInOutlook)
            {
                // Delete the task in Outlook
                this.deleteItemInOutlook();

                deletedTasks++;
            }

            // Mark the deletion entry for deletion
            con = con + [[smmDeletedActivities.ActivityNumber, '', smmDeletedActivities, smmOutlookUpdateAction::Delete, dateNull(), 0]];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>