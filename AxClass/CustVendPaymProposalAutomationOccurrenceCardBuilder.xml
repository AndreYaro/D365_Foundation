<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymProposalAutomationOccurrenceCardBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using System.Globalization;

/// <summary>
/// Provider for payment proposal automation's schedule occurrence card building.
/// </summary>
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'VendPaymProposalAutomation')]
[Export(identifierStr(Dynamics.AX.Application.ProcessScheduleIBuildOccurrenceCard))]
internal final class CustVendPaymProposalAutomationOccurrenceCardBuilder extends ProcessScheduleOccurrenceCardBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildOccurrenceCardForSuccessfulOccurrence</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ProcessScheduleOccurrenceCard buildOccurrenceCardForSuccessfulOccurrence(ProcessScheduleOccurrenceCardBuilderContract _cardBuilderContract)
    {
        ProcessScheduleOccurrenceCard occurrenceCard = super(_cardBuilderContract);

        ProcessExecutionSourceLink sourceLink = 
            CustVendPaymProposalAutomationCardData::findSourceLinkFromOccurrenceAndStatus(_cardBuilderContract.getOccurrence(), ProcessExecutionSourceStatus::Success);

        if (sourceLink.RecId != 0)
        {
            occurrenceCard.parmSubHeader(this.calculateJournalTotalDisplayValue(_cardBuilderContract, sourceLink));
        }

        return occurrenceCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateJournalTotalDisplayValue</Name>
				<Source><![CDATA[
    private str calculateJournalTotalDisplayValue(ProcessScheduleOccurrenceCardBuilderContract _cardBuilderContract, ProcessExecutionSourceLink _sourceLink)
    {
        str totalStr = '';

        changecompany(ProcessScheduleSeriesCompany::getLegalEntityForSingleCompanyOccurrence(_cardBuilderContract.getOccurrence().RecId))
        {
            LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(_sourceLink.RefRecId);

            if (ledgerJournalTable.RecId != 0)
            {
                CultureInfo cultureInfo = CultureInfo::CreateSpecificCulture(xUserInfo::find().PreferredLocale);

                NumberFormatInfo numberFormatInfo = cultureInfo.NumberFormat;
                numberFormatInfo.NumberDecimalDigits = new SysDictType(extendedTypeNum(AmountCur)).effectivePrecision();
                
                LedgerPaymentControl ledgerPaymentControl = new LedgerPaymentControl();
                ledgerPaymentControl.sumPerCustVendCurCode(ledgerJournalTable.JournalNum);

                TmpLedgerPaymentControlCur paymentControlCur = ledgerPaymentControl.sumPerCurCode();

                int i = 0;

                while select AmountCurDebCred, CurrencyCode from paymentControlCur
                {
                    if (i != 0)
                    {
                        totalStr += (i mod 2 == 0) ? '\n\r' : ' | ';
                    }

                    totalStr += strFmt('%1 %2', System.String::Format(numberFormatInfo, '{0:N}', paymentControlCur.AmountCurDebCred), paymentControlCur.CurrencyCode);

                    i++;
                }
            }
        }
        
        return totalStr;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>