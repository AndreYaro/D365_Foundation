<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransactionReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// Plugin for reversing General Ledger transactions
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.TransactionReversalBase))]
internal final class LedgerTransactionReversal extends TransactionReversalBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverse</Name>
				<Source><![CDATA[
    internal boolean reverse(TransactionReversalExecutionDetail _reversalExecutionDetail, TransactionReversalContract _contract)
    {
        #isoCountryRegionCodes

        TransactionReversal_Ledger ledgerReversal = SysCountryRegionCode::isLegalEntityInCountryRegion(
            [#isoRU]) ? TransactionReversal_Ledger_RU::construct() : TransactionReversal_Ledger::construct();

        ledgerReversal.parmReversalDate(_contract.parmReversalDate());
        ledgerReversal.parmContract(_contract);
        
        GeneralJournalAccountEntry generalJournalAccountEntry;

        if (_reversalExecutionDetail.ReferenceTableId == tableNum(GeneralJournalAccountEntry))
        {
            generalJournalAccountEntry = GeneralJournalAccountEntry::find(_reversalExecutionDetail.ReferenceRecId);
        }
        else
        {
            GeneralJournalEntry GeneralJournalEntry;

            select firstonly RecId from generalJournalEntry 
                where generalJournalEntry.SubLedgerVoucher == _reversalExecutionDetail.SubledgerVoucher
                   && generalJournalEntry.AccountingDate == _reversalExecutionDetail.TransactionDate;

            // Fetch the first line.  It doesn't matter which one as the entire voucher will get reversed.
            select firstonly * from generalJournalAccountEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId;
        }

        boolean isReversed;
        if (generalJournalAccountEntry.RecId != 0)
        {
            isReversed = ledgerReversal.reverseTransaction(generalJournalAccountEntry);
        }

        return isReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJournalCategory</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean isValidJournalCategory(TransactionReversalExecutionDetail _detail)
    {
        boolean isValidJournalCategory = true;

        if (_detail.JournalCategory == LedgerTransType::GeneralJournal)
        {
            isValidJournalCategory = isValidJournalCategory && (CustTrans::findVoucherDate(_detail.SubledgerVoucher, _detail.TransactionDate).RecId == 0);

            isValidJournalCategory = isValidJournalCategory && (VendTrans::findVoucherDate(_detail.SubledgerVoucher, _detail.TransactionDate).RecId == 0);

            isValidJournalCategory = isValidJournalCategory && (AssetTrans::findByVoucher(_detail.SubledgerVoucher, _detail.TransactionDate).RecId == 0);

            isValidJournalCategory = isValidJournalCategory && (BankAccountTrans::findByVoucher(_detail.SubledgerVoucher, _detail.TransactionDate).RecId == 0);

            if (isValidJournalCategory)
            {
                ProjTransPosting proj;
                select firstonly RecId from proj
                    where proj.ProjTransDate == _detail.TransactionDate
                       && proj.Voucher == _detail.SubledgerVoucher;
                
                isValidJournalCategory = (proj.RecId == 0);
            }
        }

        return (isValidJournalCategory
            && (_detail.JournalCategory == LedgerTransType::GeneralJournal
            || _detail.JournalCategory == LedgerTransType::Allocation
            || _detail.JournalCategory == LedgerTransType::Elimination
            || _detail.JournalCategory == LedgerTransType::AdvanceAdjustment_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecurableType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected SecurableType getSecurableType()
    {
        return SecurableType::MenuItemAction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuItemName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected MenuItemName getMenuItemName()
    {
        return menuItemActionStr(TransactionReversal_Ledger);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>