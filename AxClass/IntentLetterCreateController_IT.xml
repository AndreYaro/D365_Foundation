<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntentLetterCreateController_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntentLetterCreateController_IT</c> controller for start intent letter creating.
/// </summary>
public class IntentLetterCreateController_IT extends SysOperationServiceController
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        if (_args && _args.caller() is FormRun)
        {
            Common record = _args.record();

            if (record.tableId == tablenum(IntentLetter_IT))
            {
                IntentLetter_IT intentLetter = record;
                FormDataSource callerFormDataSource = FormDataUtil::getFormDataSource(intentLetter);

                IntentLetterCreateController_IT controller = IntentLetterCreateController_IT::construct();
                controller.parmDialogCaption("@ExtendedItallianLocalization:CreateIntentLetters");

                IntentLetterCreateDataContract_IT contract = controller.getDataContractObject();

                controller.startOperation();

                if (callerFormDataSource)
                {
                    callerFormDataSource.reSearch();
                }
                else
                {
                    Args args = new Args();
                    args.caller(args.caller());
                    FormRun formRun = new MenuFunction(menuitemDisplayStr(IntentLetter_IT), MenuItemType::Display).create(args);
                    formRun.run();
                }

                intentLetter.dataSource().reSearch(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntentLetterCreateController_IT construct()
    {
        IdentifierName className = classStr(IntentLetterCreateService_IT);
        IdentifierName methodName = methodStr(IntentLetterCreateService_IT, runProcessing);
        SysOperationExecutionMode mode = SysOperationExecutionMode::Synchronous;

        IntentLetterCreateController_IT controller = new IntentLetterCreateController_IT(className, methodName, mode);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>