<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchEditLinesForm_PackingSlipCorrection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchEditLinesForm_PackingSlipCorrection
extends     PurchEditLinesForm_PackingSlip
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>chooseButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the Select button.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean chooseButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the Close check box.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean close()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionStatusIssue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>StatusIssue</c> to use for querying inventory transactions on corrections.
    /// </summary>
    /// <param name="_purchQty">
    /// The packing slip line quantity.
    /// </param>
    /// <returns>
    /// The <c>StatusIssue</c> to query for on corrections.
    /// </returns>
    public StatusIssue correctionStatusIssue(PurchQty _purchQty)
    {
        return _purchQty < 0 ? StatusIssue::Deducted : StatusIssue::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionStatusReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>StatusReceipt</c> to use for querying inventory transactions on corrections.
    /// </summary>
    /// <param name="_purchQty">
    /// The packing slip line quantity.
    /// </param>
    /// <returns>
    /// The <c>StatusReceipt</c> to query for on corrections.
    /// </returns>
    public StatusReceipt correctionStatusReceipt(PurchQty _purchQty)
    {
        return _purchQty > 0 ? StatusReceipt::Received : StatusReceipt::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editingCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the caption that must be used for the <c>PurchEditLines</c> form.
    /// </summary>
    /// <returns>
    /// The caption for the packing slip corrections.
    /// </returns>
    str editingCaption()
    {
        return "@SYS323397";
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the postal address can be edited.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    boolean editPostalAddress()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select batch numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The selected <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean lookupInventBatchId(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        InventLookupReturn::lookupInventBatchIdReturn(_purchParmLine.InventTransId, _purchParmLine.ItemId, _formControl, _inventDim.InventSerialId, _filterStr,
            this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
            this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow),
            false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select invent owners.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean lookupInventGTDId_RU(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine)
    {
        InventLookupReturn::lookupInventGTDReturn(_purchParmLine.InventTransId,
                                                  _purchParmLine.ItemId,
                                                  _formControl,
                                                  _filterStr,
                                                  this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
                                                  this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow),
                                                  false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select invent owners.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean lookupInventOwnerId_RU(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine)
    {
        InventLookupReturn::lookupInventOwnerReturn(_purchParmLine.InventTransId,
                                                    _purchParmLine.ItemId,
                                                    _formControl,
                                                    _filterStr,
                                                    this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
                                                    this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow),
                                                    false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a custom lookup to select serial numbers.
    /// </summary>
    /// <param name="_formControl">
    /// The <c>FormControl</c> object for which to display the lookup.
    /// </param>
    /// <param name="_filterStr">
    /// The current value.
    /// </param>
    /// <param name="_purchParmLine">
    /// The selected <c>PurchParmLine</c> record.
    /// </param>
    /// <param name="_inventDim">
    /// The selected <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean lookupInventSerialId(FormControl _formControl, str _filterStr, PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        InventLookupReturn::lookupInventSerialReturn(_purchParmLine.InventTransId, _purchParmLine.ItemId, _formControl, _filterStr, _inventDim.InventBatchId,
            this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
            this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow),
            false);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>otherTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>tabPageOther</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean otherTab()
    {
        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return true;
        }
        // </GEERU>
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>overviewTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>tabPageParmTable</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean overviewTab()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parametersGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>groupParameters</c> control group.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean parametersGroup()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupTab</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PurchEditLines</c> form should display the <c>setup</c> tab page.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean setupTab()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPreserveReceiptStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a preserve receipt statement can be shown.
    /// </summary>
    /// <returns>
    /// true if receipt statements can be shown; otherwise, false.
    /// </returns>
    public boolean showPreserveReceiptStatement()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventDimId</Name>
				<Source><![CDATA[

    /// <summary>
    /// Validates the inventory dimensions that will be used for a parameter line.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimensions to validate.
    /// </param>
    /// <returns>
    /// true if the inventory dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventDimId(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        InventMovement      movement            = InventMovement::construct(_purchParmLine);
        InventDimGroupSetup inventDimGroupSetup = movement.inventDimGroupSetup();
        boolean             ret                 = true;

        if (_purchParmLine.PreviousReceiveNow != _purchParmLine.ReceiveNow
            && _purchParmLine.purchLine().isStocked()
            && (   (!_inventDim.InventSerialId && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim, InventSerialId)))
                || (!_inventDim.InventBatchId  && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim, InventBatchId)))))
        {
            if (_purchParmLine.purchLine().isDropShipment())
            {
                ret = checkFailed("@SYS333615");
            }
            else if (Box::yesNo("@SYS333613", DialogButton::Yes) == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventGTDId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a validation of the GTD inventory dimensions.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains values of the invent owner dimension to be validated.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventGTDId_RU(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        boolean ret = true;
        Query   query;
        QueryRun queryRun;
        InventTrans inventTrans;
        Qty qtyFound;

        if (_inventDim.InventGtdId_RU && _purchParmLine.PreviousReceiveNow != _purchParmLine.ReceiveNow)
        {
            query = InventLookupReturn::queryLookupInventGTDIdReturn(_purchParmLine.InventTransId,
                                                                       _purchParmLine.ItemId,
                                                                       _inventDim.InventGtdId_RU,
                                                                       this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
                                                                       this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow));

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                inventTrans = queryRun.get(tableNum(InventTrans));
                qtyFound += inventTrans.Qty;
            }

            if (!qtyFound)
            {
                ret = checkFailed("@GLS221817");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventOwnerId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a validation of the owner inventory dimensions.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains values of the invent owner dimension to be validated.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventOwnerId_RU(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        boolean ret = true;
        Query   query;
        QueryRun queryRun;
        InventTrans inventTrans;
        Qty qtyFound;

        if (_inventDim.InventOwnerId_RU && _purchParmLine.PreviousReceiveNow != _purchParmLine.ReceiveNow)
        {
            query = InventLookupReturn::queryLookupInventOwnerIdReturn(_purchParmLine.InventTransId,
                                                                       _purchParmLine.ItemId,
                                                                       _inventDim.InventOwnerId_RU,
                                                                       this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
                                                                       this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow));

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                inventTrans = queryRun.get(tableNum(InventTrans));
                qtyFound += inventTrans.Qty;
            }

            if (!qtyFound)
            {
                ret = checkFailed("@GLS221817");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventSerialBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a validation of the serial and batch number inventory dimensions.
    /// </summary>
    /// <param name="_purchParmLine">
    /// The parameter line for which the dimensions are to be validated.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record that contains values of the serial and batch number dimension to be
    /// validated.
    /// </param>
    /// <returns>
    /// true if both dimensions are correct; otherwise, false.
    /// </returns>
    public boolean validateInventSerialBatchId(PurchParmLine _purchParmLine, InventDim _inventDim)
    {
        boolean ret = true;
        Query   query;
        QueryRun queryRun;
        InventTrans inventTrans;
        Qty qtyFound;

        if (_inventDim.InventSerialId && _purchParmLine.PreviousReceiveNow != _purchParmLine.ReceiveNow)
        {
            query = InventLookupReturn::queryLookupInventSerialReturn(_purchParmLine.InventTransId, _purchParmLine.ItemId,
                        _inventDim.InventSerialId, _inventDim.InventBatchId,
                        this.correctionStatusIssue(_purchParmLine.PreviousReceiveNow),
                        this.correctionStatusReceipt(_purchParmLine.PreviousReceiveNow));

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                inventTrans = queryRun.get(tableNum(InventTrans));
                qtyFound += inventTrans.Qty;
            }

            if (!qtyFound)
            {
                ret = checkFailed("@SYS333614");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchEditLinesForm_PackingSlipCorrection construct()
    {
        return new PurchEditLinesForm_PackingSlipCorrection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>