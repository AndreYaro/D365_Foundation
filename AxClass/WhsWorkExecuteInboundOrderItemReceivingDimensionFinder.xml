<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteInboundOrderItemReceivingDimensionFinder</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class WhsWorkExecuteInboundOrderItemReceivingDimensionFinder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getSingleUniqueInventDimForReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds single unique InventDim for receipt.
    /// </summary>
    /// <param name="_inventTable">The item.</param>
    /// <param name="_inventTransType">The receiving InventTransType.</param>
    /// <param name="_orderNum">The order number.</param>
    /// <returns>The InventDim record.</returns>
    [Hookable(false)]
    internal static InventDim getSingleUniqueInventDimForReceipt(InventTable _inventTable, InventTransType _inventTransType, Num _orderNum)
    {
        InventDim inventDim;

        if (_inventTable.hasProductDimensions())
        {
            inventDim = WhsWorkExecuteInboundOrderItemReceivingDimensionFinder::findSingleUniqueInventDimForReceipt(_inventTable.ItemId, _inventTransType, _orderNum);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSingleUniqueInventDimForReceipt</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal static InventDim findSingleUniqueInventDimForReceipt(ItemId _itemId, InventTransType _inventTransType, Num _orderNum)
    {
        InventDim ret;

        if (_inventTransType == InventTransType::Purch)
        {
            PurchLine           purchLineCountInventDim;
            InventTransOrigin   inventTransOrigin;
            InventTrans         inventTrans;
            InventDimId         lastInventDimId;
            InventDimId         inventDimCombinationDimId, lastInventDimCombinationDimId;
            InventDim           inventDim;

            while select InventDimId from purchLineCountInventDim
                where purchLineCountInventDim.PurchId == _orderNum
                    && purchLineCountInventDim.ItemId == _itemId
                join inventDim
                    where inventDim.inventDimId == purchLineCountInventDim.InventDimId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId == purchLineCountInventDim.InventTransId
                exists join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt    == StatusReceipt::Ordered
                        && inventTrans.StatusIssue      == StatusIssue::None
                        && inventTrans.Qty              >  0
            {
                inventDimCombinationDimId = InventDimCombination::findByInventDim(_itemId, inventDim).InventDimId;

                if (lastInventDimCombinationDimId && (lastInventDimCombinationDimId != inventDimCombinationDimId))
                {
                    return null;
                }

                lastInventDimCombinationDimId = inventDimCombinationDimId;

                if (!lastInventDimId)
                {
                    lastInventDimId = purchLineCountInventDim.inventDimId;
                }

            }

            ret = InventDim::find(lastInventDimId);
        }
 
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>