<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobAutoPlanForward</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanJobAutoPlanForward</c> class plans kanban jobs forward from either a specific date or the job due date.
/// </summary>
class KanbanJobAutoPlanForward extends KanbanJobAutoPlan
{
    TransDate                       fromDate;
    boolean                         overrideCapacityShortageReaction;
    LeanCapacityShortageReaction    capacityShortageReaction;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>capacityShortageReaction</Name>
				<Source><![CDATA[
    protected LeanCapacityShortageReaction capacityShortageReaction(LeanProductionFlowModel _leanProductionFlowModel)
    {
        LeanCapacityShortageReaction ret = _leanProductionFlowModel.CapacityShortageReaction;

        if (overrideCapacityShortageReaction)
        {
            ret = capacityShortageReaction;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDatePlanningTimeFence</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the end date of the planning time fence for a given <c>LeanWorkCellScheduleCapacity</c> object.
    /// </summary>
    /// <param name="_leanWorkCellScheduleCapacity">
    /// A <c>LeanWorkCellScheduleCapacity</c> object.
    /// </param>
    /// <returns>
    /// The end date of the planning time fence in the company timezone.
    /// </returns>
    protected TransDate endDatePlanningTimeFence(LeanWorkCellScheduleCapacity _leanWorkCellScheduleCapacity)
    {
        // Ignore planning time fence
        return maxDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        onlyUnplanned = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialLeanWorkScheduleCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the initial <c>LeanWorkCellScheduleCapacity</c> object to use to try to plan a kanban
    ///    job.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> record.
    /// </param>
    /// <returns>
    ///    A <c>LeanWorkCellScheduleCapacity</c> object.
    /// </returns>
    /// <remarks>
    /// For the forward planning EPE cycle is not considered.
    /// </remarks>
    protected LeanWorkCellScheduleCapacity initialLeanWorkScheduleCapacity(KanbanJob _kanbanJob)
    {
        LeanWorkCellScheduleCapacity    leanWorkCellScheduleCapacity;

        if (mapInitialLeanWorkScheduleCapacity.exists(_kanbanJob.RecId))
        {
            leanWorkCellScheduleCapacity = mapInitialLeanWorkScheduleCapacity.lookup(_kanbanJob.RecId);
        }
        else
        {
            WrkCtrResourceGroup wrkCtrResourceGroup = this.wrkCtrResourceGroup(_kanbanJob);

            TransDateTime initialTransDateTimeUTC = max(this.minSchedDateTime(_kanbanJob), this.initialTransDateTime(_kanbanJob));

            leanWorkCellScheduleCapacity = LeanWorkCellScheduleCapacity::newStandard(wrkCtrResourceGroup,initialTransDateTimeUTC);

            //add to cache
            mapInitialLeanWorkScheduleCapacity.insert(_kanbanJob.RecId,leanWorkCellScheduleCapacity);
        }

        return leanWorkCellScheduleCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialTransDateTime</Name>
				<Source><![CDATA[
    public TransDateTime initialTransDateTime(KanbanJob _kanbanJob)
    {
        utcdatetime fromDateTime;

        if (fromDate)
        {
            fromDateTime = DateTimeUtil::newDateTime(fromDate,0,DateTimeUtil::getCompanyTimeZone());
        }
        else
        {
            fromDateTime = _kanbanJob.DueDateTime;
        }

        return max(todaysDateTime,fromDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minSchedDateTime</Name>
				<Source><![CDATA[
    protected TransDateTime minSchedDateTime(KanbanJob _kanbanJob)
    {
        if (fromDate)
        {
            // Always just used the provided date
            return DateTimeUtil::newDateTime(fromDate,0,DateTimeUtil::getCompanyTimeZone());
        }
        else
        {
            return super(_kanbanJob);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCapacityShortageReaction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LeanCapacityShortageReaction parmCapacityShortageReaction(LeanCapacityShortageReaction _capacityShortageReaction = capacityShortageReaction)
    {
        capacityShortageReaction = _capacityShortageReaction;
        return capacityShortageReaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverrideCapacityShortageReaction</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean parmOverrideCapacityShortageReaction(boolean _overrideCapacityShortageReaction = overrideCapacityShortageReaction)
    {
        overrideCapacityShortageReaction = _overrideCapacityShortageReaction;
        return overrideCapacityShortageReaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>schedDirection</Name>
				<Source><![CDATA[
    protected SchedDirection schedDirection()
    {
        return SchedDirection::Forward;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanJobAutoPlanForward construct()
    {
        return new KanbanJobAutoPlanForward();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanJobAutoPlanForward</c> class by using the specified parameters.
    /// </summary>
    /// <param name="_kanban">
    ///    A buffer of the <c>Kanban</c> table.
    /// </param>
    /// <param name="_fromDate">
    ///    A date from which all the jobs should be planned forward; optional.
    /// </param>
    /// <param name="_overrideCapacityShortageReaction">
    ///    A <c>boolean</c> value that indicates if the standard capacity shortage reaction should be overridden; optional.
    /// </param>
    /// <param name="_capacityShortageReaction">
    ///    The capacity shortage reaction that should override the default reaction; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether planning results must be shown in the Infolog; optional.
    /// </param>
    /// <returns>
    ///    A <c>KanbanJobAutoPlanForward</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobAutoPlanForward newKanban(
        Kanban                          _kanban,
        TransDate                       _fromDate = dateNull(),
        boolean                         _overrideCapacityShortageReaction = false,
        LeanCapacityShortageReaction    _capacityShortageReaction = LeanCapacityShortageReactions::Distribute,
        boolean                         _silent = false)
    {
        KanbanJobAutoPlanForward kanbanJobAutoPlan = KanbanJobAutoPlanForward::construct();

        kanbanJobAutoPlan.parmKanban(_kanban);
        kanbanJobAutoPlan.parmFromDate(_fromDate);
        kanbanJobAutoPlan.parmOverrideCapacityShortageReaction(_overrideCapacityShortageReaction);
        kanbanJobAutoPlan.parmCapacityShortageReaction(_capacityShortageReaction);
        kanbanJobAutoPlan.parmSilent(_silent);

        return kanbanJobAutoPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>KanbanJobAutoPlanForward</c> class by using the specified parameter.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A buffer of the <c>KanbanJob</c> table.
    /// </param>
    /// <param name="_fromDate">
    ///    A date from which all the jobs should be planned forward; optional.
    /// </param>
    /// <param name="_overrideCapacityShortageReaction">
    ///    A <c>boolean</c> value that indicates if the standard capacity shortage reaction should be overridden; optional.
    /// </param>
    /// <param name="_capacityShortageReaction">
    ///    The capacity shortage reaction that should override the default reaction; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether planning results must be shown in the Infolog; optional.
    /// </param>
    /// <returns>
    ///    A <c>KanbanJobAutoPlanForward</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanJobAutoPlanForward newKanbanJob(
        KanbanJob                       _kanbanJob,
        TransDate                       _fromDate = dateNull(),
        boolean                         _overrideCapacityShortageReaction = false,
        LeanCapacityShortageReaction    _capacityShortageReaction = LeanCapacityShortageReactions::Distribute,
        boolean                         _silent = false)
    {
        KanbanJobAutoPlanForward kanbanJobAutoPlan = KanbanJobAutoPlanForward::construct();

        kanbanJobAutoPlan.parmKanbanJob(_kanbanJob);
        kanbanJobAutoPlan.parmFromDate(_fromDate);
        kanbanJobAutoPlan.parmOverrideCapacityShortageReaction(_overrideCapacityShortageReaction);
        kanbanJobAutoPlan.parmCapacityShortageReaction(_capacityShortageReaction);
        kanbanJobAutoPlan.parmSilent(_silent);

        return kanbanJobAutoPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>planKanbanJobsSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Plans multiple kanban jobs forward.
    /// </summary>
    /// <param name="_setKanbanJobRecIds">
    ///    A <c>Set</c> containing the RecIds of the KanbanJob records to be planned.
    /// </param>
    /// <param name="_fromDate">
    ///    A date from which all the jobs should be planned forward; optional.
    /// </param>
    /// <param name="_overrideCapacityShortageReaction">
    ///    A <c>boolean</c> value that indicates if the standard capacity shortage reaction should be overridden; optional.
    /// </param>
    /// <param name="_capacityShortageReaction">
    ///    The capacity shortage reaction that should override the default reaction; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that indicates whether planning results must be shown in the Infolog; optional.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void planKanbanJobsSet(
        Set                             _setKanbanJobRecIds,
        TransDate                       _fromDate = dateNull(),
        boolean                         _overrideCapacityShortageReaction = false,
        LeanCapacityShortageReaction    _capacityShortageReaction = LeanCapacityShortageReactions::Distribute,
        boolean                         _silent = false)
    {
        if (_setKanbanJobRecIds)
        {
            SetEnumerator setEnumerator = _setKanbanJobRecIds.getEnumerator();

            while (setEnumerator.moveNext())
            {
                KanbanJob kanbanJob = KanbanJob::find(setEnumerator.current());

                if (kanbanJob)
                {
                    // Plan jobs individually
                    KanbanJobAutoPlanForward kanbanJobAutoPlan = KanbanJobAutoPlanForward::newKanbanJob(kanbanJob, _fromDate, _overrideCapacityShortageReaction, _capacityShortageReaction, _silent);
                    kanbanJobAutoPlan.run();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
