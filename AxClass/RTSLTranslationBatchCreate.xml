<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTSLTranslationBatchCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RTSLTranslationBatchCreate extends RTSLTranslationBatch implements BatchRetryable
{
    QueryRun        queryRun;

    FromDate        fromDate;
    ToDate          toDate;

    DialogField     dialogFromDate, dialogToDate;

    #define.CurrentVersion(1)
    #localMacro.CurrentList
        fromDate,
        toDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog  = super();
        ;
        dialog.addMenuItemButton(MenuItemType::Display,
                                 menuitemdisplaystr(RunBaseQueryDialog));

        dialog.addGroup("@SYS26467");
        dialogFromDate = dialog.addFieldValue(extendedtypestr(FromDate), fromDate);
        dialogToDate   = dialog.addFieldValue(extendedtypestr(ToDate), toDate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        fromDate        = dialogFromDate.value();
        toDate          = dialogToDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion,
                 #CurrentList,
                 classidget(translation),
                 translation.parmRuleGroup().RuleGroupId,
                 queryRun.pack() ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTranslation</Name>
				<Source><![CDATA[
    public RTSLTranslation parmTranslation(RTSLTranslation _translation = translation,boolean _initFromTranslation = true)
    {
        super(_translation);

        translation.init();
        if (_initFromTranslation)
        {
            queryRun = new QueryRun(translation.parmQuery());
            [fromDate, toDate] = translation.getDefaultRange();
        }

        return translation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.validate())
            throw error('');
        try
        {
            ttsbegin;
            translation.parmQuery(queryRun.query());
            translation.setDefaultRange(fromDate, toDate);

            this.progressInit(RTSLTranslation::description(),
                              translation.progressExportTotal(),
                              #AviSearch);

            if (! translation.exportCompany())
                throw error("@SYS25904");

            translation.importCompany();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        boolean         ret     = true;
        int             version = conpeek(_pack, 1);
        int             classId;
        RTSLRuleGroupId groupId;
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [ version, #CurrentList, classId, groupId ] = _pack;
                packedQuery = conpeek(_pack, conlen(_pack));
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun  = new SysQueryRun(packedQuery) ;
                }
                if (! translation)
                {
                    this.parmTranslation(RTSLTranslation::construct(RTSLRuleModule::find(groupId, classId)),false);
                }
                break;
            default              :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (fromDate && toDate && fromDate > toDate)
        {
            return checkFailed("@SYS16982");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS103371";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RTSLTranslationBatch  translationBatch;
        ;

        if (! _args)
            throw error("@SYS25407");

        if (_args.dataset() != tablenum(RTSLRuleModule))
            throw error(strfmt("@SYS29104", RTSLTranslation::description()));

        translationBatch = new RTSLTranslationBatchCreate();
        translationBatch.parmTranslation(RTSLTranslation::construct(_args.record()));

        if (translationBatch.prompt())
        {
            translationBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>