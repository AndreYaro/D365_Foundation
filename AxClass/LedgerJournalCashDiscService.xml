<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCashDiscService</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalCashDiscService
{
    LedgerJournalId     ledgerJournalId;
    Voucher             voucher;
    LedgerJournalTable  ledgerJournalTable;
    LedgerJournalTrans  ledgerJournalTransMain;
    Percent             cashDiscPercent;
    CashDiscCode        cashDiscCode;
    CompanyId           company;
    InvoiceId           invoiceId;
    boolean             journalInclTax;
    boolean             cashDiscInclTax;
    boolean             noCashDiscInTax;
    boolean             useOnlyMain;
    boolean             manualCashDisc;

    // Define the positions for table buffers in the container returned by
    // new_Server().
    #LOCALMACRO.New_ServerList
        ledgerJournalTable,
        ledgerJournalTransMain,
        ledgerJournalTransLocal
    #ENDMACRO
    #DEFINE.LedgerJournalTablePosition(1)
    #DEFINE.LedgerJournalTransMainPosition(2)
    #DEFINE.LedgerJournalTransLocalPosition(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateCashDiscAmount</Name>
				<Source><![CDATA[
    void allocateCashDiscAmount(AmountCur _cashDiscAmount)
    {
        LedgerJournalTrans  ledgerJournalTransLocal;
        LedgerJournalTrans  ledgerJournalTransFieldList;
        AmountCur           totalBaseAmount;
        AmountCur           allocatedAmount;
        AmountCur           largeAmount;
        RecId               recId;
        container           recordDirty;
        ;

        if (useOnlyMain)
        {
            return;
        }

        while select AmountCurDebit, AmountCurCredit from ledgerJournalTransFieldList
            where ledgerJournalTransFieldList.JournalNum  == ledgerJournalId
               && ledgerJournalTransFieldList.Voucher     == voucher
               && ledgerJournalTransFieldList.AccountType != LedgerJournalACType::Cust
               && ledgerJournalTransFieldList.AccountType != LedgerJournalACType::Vend
               && ledgerJournalTransFieldList.AccountType != LedgerJournalACType::Bank
               && ledgerJournalTransFieldList.TaxGroup
        {
            totalBaseAmount  = ledgerJournalTransFieldList.amount();
        }

        if (totalBaseAmount)
        {
            ttsbegin;

            while select forupdate ledgerJournalTransLocal
                where ledgerJournalTransLocal.JournalNum    == ledgerJournalId
                   &&   ledgerJournalTransLocal.Voucher     == voucher
                   &&   ledgerJournalTransLocal.AccountType != LedgerJournalACType::Cust
                   &&   ledgerJournalTransLocal.AccountType != LedgerJournalACType::Vend
                   &&   ledgerJournalTransLocal.AccountType != LedgerJournalACType::Bank
            {
                ledgerJournalTransLocal.CashDiscAmount = abs(_cashDiscAmount) *
                                                         ledgerJournalTransLocal.amount() /
                                                         abs(totalBaseAmount) ;

                allocatedAmount += ledgerJournalTransLocal.CashDiscAmount;

                if (abs(ledgerJournalTransLocal.CashDiscAmount) > largeAmount)
                {
                    largeAmount = abs(ledgerJournalTransLocal.CashDiscAmount);
                    recId = ledgerJournalTransLocal.RecId;
                }

                ledgerJournalTransLocal.update();
                recordDirty += [ledgerJournalTransLocal.RecId];
            }

            if (allocatedAmount != _cashDiscAmount)
            {
                select firstonly forupdate ledgerJournalTransLocal
                    where ledgerJournalTransLocal.JournalNum  == ledgerJournalId
                       && ledgerJournalTransLocal.Voucher     == voucher
                       && ledgerJournalTransLocal.RecId       == recId;

                ledgerJournalTransLocal.CashDiscAmount += (_cashDiscAmount - allocatedAmount);
                ledgerJournalTransLocal.update();
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDisc</Name>
				<Source><![CDATA[
    DiscAmount calcCashDisc(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustTransCashDisc   custTransCashDisc;
        VendTransCashDisc   vendTransCashDisc;
        DiscAmount          cashDiscAmount;

        switch (ledgerJournalTransMain.AccountType)
        {
            case LedgerJournalACType::Cust:
                cashDiscAmount = custTransCashDisc.calcCashDisc(
                    _ledgerJournalTrans.Company,
                    _ledgerJournalTrans.CurrencyCode,
                    this.cashDiscBaseAmount(_ledgerJournalTrans),
                    ledgerJournalTransMain.Due,
                    _ledgerJournalTrans.TransDate,
                    this.cashDiscCode(),
                    _ledgerJournalTrans.TableId,
                    _ledgerJournalTrans.RecId,
                    false,
                    0,
                    _ledgerJournalTrans.TransDate,
                    _ledgerJournalTrans.CashDiscPercent).CashDiscAmount;

                break;

            case LedgerJournalACType::Vend:
                cashDiscAmount = vendTransCashDisc.calcCashDisc(
                    _ledgerJournalTrans.Company,
                    _ledgerJournalTrans.CurrencyCode,
                    this.cashDiscBaseAmount(_ledgerJournalTrans),
                    ledgerJournalTransMain.Due,
                    _ledgerJournalTrans.TransDate,
                    this.cashDiscCode(),
                    _ledgerJournalTrans.TableId,
                    _ledgerJournalTrans.RecId,
                    false,
                    0,
                    _ledgerJournalTrans.TransDate,
                    _ledgerJournalTrans.CashDiscPercent).CashDiscAmount;

                break;
        }

        return cashDiscAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCashDiscAmount</Name>
				<Source><![CDATA[
    AmountCur calcCashDiscAmount(LedgerJournalTrans       _ledgerJournalTrans,
                                 LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null)
    {
        AmountCur   amountCur;

        if (useOnlyMain)
        {
            return 0;
        }

        amountCur = this.cashDiscBaseAmount(_ledgerJournalTrans, _ledgerJournalTrans_Asset);
        amountCur = amountCur * cashDiscPercent / 100;
        amountCur = CurrencyExchangeHelper::amount(amountCur, _ledgerJournalTrans.CurrencyCode);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxAmountCur</Name>
				<Source><![CDATA[
    private AmountCur calcTaxAmountCur(LedgerJournalTrans _ledgerJournalTrans, AmountCur _correctedTaxAmount)
    {
        AmountCur taxAmountCur;

        if (_correctedTaxAmount)
        {
            taxAmountCur = _correctedTaxAmount;
        }
        else
        {
            // For the case when the invoice line is being split across multiple lines.
            //  In this case, since the journal lines are split and we are 'Deducting cash discount before sales tax calculation', we must get
            //  the total tax amount for the invoice for the Vendor line so that it can be removed from the CashDiscountBaseAmount prior to
            //  calculating the cash discount.  When the invoice lines are split, this tax amount is found on other lines on the invoice
            //  (i.e. Ledger, FixedAssets, etc.) so we can't simply look at the total tax amount for the single line.
            if ((noCashDiscInTax
                && (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
                    _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                && !_ledgerJournalTrans.OffsetLedgerDimension
                && _ledgerJournalTrans.ledgerJournalTable().LedgerJournalInclTax) ||

                // same functionality is required if "Cash Discount is calculated on amount including sales tax"
                // parameter is enable for Customer or Vendor scenarios.
                (cashDiscInclTax &&
                (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
                    _ledgerJournalTrans.AccountType == LedgerJournalACType::Cust)
                && !_ledgerJournalTrans.OffsetLedgerDimension))
            {
                taxAmountCur = _ledgerJournalTrans.totalTaxAmountForInvoice(true, false, true);
            }
            else
            {
                using (TaxIntegrationTaxCalculationNoDelayContext taxCalculationNoDelayContext = TaxIntegrationTaxCalculationNoDelayContext::getInstance())
                {
                    taxAmountCur = _ledgerJournalTrans.totalTaxAmountSingleLine(true, false, true);
                }
            }

            // Tax amount calculated for cash discount should always be positive prior to being added/subtracted
            //  from the AmountCurCredit/AmountCurDebit for this method
            taxAmountCur = abs(taxAmountCur);
        }

        return taxAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscBaseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the amount of the journal line to base the discount on.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record to get the base amount for.
    /// </param>
    /// <param name="_ledgerJournalTrans_Asset">
    /// The <c>LedgerJournalTrans_Asset</c> table record no longer used; optional.
    /// </param>
    /// <param name="_correctedTaxAmount">
    /// The corrected tax amount; optional.
    /// </param>
    /// <returns>
    /// The amount of the journal line adjusted by any applicable tax amount.
    /// </returns>
    AmountCur cashDiscBaseAmount(LedgerJournalTrans       _ledgerJournalTrans,
                                 LedgerJournalTrans_Asset _ledgerJournalTrans_Asset = null,
                                 AmountCur                _correctedTaxAmount = 0)
    {
        AmountCur amountCur;
        AmountCur taxAmountCur;
        AmountCur correctedTaxAmount;

        correctedTaxAmount = abs(_correctedTaxAmount);
        if (journalInclTax)
        {
            if (cashDiscInclTax)
            {
                amountCur = _ledgerJournalTrans.amount();
            }
            else
            {
                if (_ledgerJournalTrans.isTaxCalculationNeeded(ledgerJournalTable.isTaxIntegrationEnabled()))
                {
                    using (TaxIntegrationTaxCalculationNoDelayContext taxCalculationNoDelayContext = TaxIntegrationTaxCalculationNoDelayContext::getInstance())
                    {
                        taxAmountCur = this.calcTaxAmountCur(_ledgerJournalTrans, correctedTaxAmount);
                    }
                }

                if (_ledgerJournalTrans.amount() < 0)
                {
                    amountCur = _ledgerJournalTrans.amount() + taxAmountCur;
                }
                else
                {
                    amountCur = _ledgerJournalTrans.amount() - taxAmountCur;
                }
            }
        }
        else
        {
            if (cashDiscInclTax)
            {
                if (_ledgerJournalTrans.isTaxCalculationNeeded(ledgerJournalTable.isTaxIntegrationEnabled()))
                {
                    using (TaxIntegrationTaxCalculationNoDelayContext taxCalculationNoDelayContext = TaxIntegrationTaxCalculationNoDelayContext::getInstance())
                    {
                        taxAmountCur = this.calcTaxAmountCur(_ledgerJournalTrans, correctedTaxAmount);
                    }
                }

                if (_ledgerJournalTrans.amount() < 0)
                {
                    amountCur = _ledgerJournalTrans.amount() - taxAmountCur;
                }
                else
                {
                    amountCur = _ledgerJournalTrans.amount() + taxAmountCur;
                }
            }
            else
            {
                amountCur = _ledgerJournalTrans.amount();
            }
        }
        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    CashDiscCode cashDiscCode()
    {
        return cashDiscCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct cashDiscPercent()
    {
        return cashDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the company ID of the ledger journal.
    /// </summary>
    /// <returns>
    ///    The company ID of the ledger journal.
    /// </returns>
    /// <remarks>
    ///    The company ID of the ledger journal is updated by the <c>setCashDiscParameters</c> method, but the
    ///    value is expected to be the same in those cases.
    /// </remarks>
    public CompanyId getCompany()
    {
        return company;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    InvoiceId invoiceId()
    {
        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualCashDisc</Name>
				<Source><![CDATA[
    boolean manualCashDisc()
    {
        return manualCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(LedgerJournalId    _ledgerJournalId,
             Voucher            _voucher,
             LedgerJournalTrans _defaultmain = ledgerJournalTransMain,
             boolean            _manualCashDisc = false)
    {
        VendTrans           vendTransLocal;
        LedgerJournalTrans  ledgerJournalTransLocal;
        AmountCur           mainAmount;
        container           serverResults;

        ledgerJournalId = _ledgerJournalId;
        voucher         = _voucher;
        noCashDiscInTax = TaxParameters::find().TaxLessCashDisc;

        // Batch up the logic that gets run on the server to avoid RPC calls.
        serverResults = LedgerJournalCashDiscService::new_Server(ledgerJournalId, voucher);

        // Retrieve the table buffer that was initialized on the server.
        ledgerJournalTable = conPeek(serverResults, #LedgerJournalTablePosition);

        if (voucher)
        {
            journalInclTax = ledgerJournalTable.LedgerJournalInclTax;

            // Retrieve the table buffer that was initialized on the server.
            ledgerJournalTransMain = conPeek(serverResults, #LedgerJournalTransMainPosition);
        }
        else
        {
            journalInclTax = TaxParameters::find().JournalInclTax;
            ledgerJournalTransMain = _defaultmain;
        }

        switch (ledgerJournalTransMain.AccountType)
        {
            case LedgerJournalACType::Cust:
                cashDiscInclTax = CustParameters::find().CashDiscVAT;
                break;

            case LedgerJournalACType::Vend:
                cashDiscInclTax = VendParameters::find().CashDiscVAT;
                break;
        }

        cashDiscCode    = ledgerJournalTransMain.CashDiscCode;
        company         = ledgerJournalTransMain.Company;
        invoiceId       = ledgerJournalTransMain.Invoice;

        if (ledgerJournalTable.isTaxIntegrationEnabled())
        {
            LedgerJournalTrans ledgerJournalTransCashDiscInclTax;
            // Always use _defaultmain first, since it covers the unsaved scenario
            // Tax integration data retrieval is per journal number and voucher, should check them
            // In some case, it is an empty buffer.
            if (_defaultmain.JournalNum && _defaultmain.Voucher)
            {
                ledgerJournalTransCashDiscInclTax = _defaultmain;
            }
            else
            {
                // This one is selected from DB, use it only if no _defualtMain.
                ledgerJournalTransCashDiscInclTax = ledgerJournalTransMain;
            }
            TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters =
                TaxIntegrationFacade::getTaxJurisdictionParametersByTable(ledgerJournalTransCashDiscInclTax);

            if (taxIntegrationTaxJurisdictionParameters && !taxIntegrationTaxJurisdictionParameters.empty())
            {
                noCashDiscInTax = taxIntegrationTaxJurisdictionParameters.isCashDiscDeductedBeforeTaxCalculation();
                cashDiscInclTax = taxIntegrationTaxJurisdictionParameters.isCashDiscCalculatedOnAmountInclTax();
            }
        }

        if (company == '')
        {
            company = curext();
        }

        if (TaxParameters::canApplyCashDiscOnInvoice_ES() || ledgerJournalTransMain.CashDiscPercent)
        {
            cashDiscPercent = ledgerJournalTransMain.CashDiscPercent;
        }
        else
        {
            cashDiscPercent = CashDisc::findByCompany(company, cashDiscCode).Percent;
        }

        if (!ledgerJournalTransMain)
        {
            // Retrieve the table buffer that was initialized on the server.
            ledgerJournalTransLocal = conPeek(serverResults, #LedgerJournalTransLocalPosition);

            if (ledgerJournalTransLocal.VendTransId)
            {
                vendTransLocal = VendTrans::find(ledgerJournalTransLocal.VendTransId);
            }
            if (vendTransLocal && vendTransLocal.AmountCur != 0)
            {
                cashDiscPercent = vendTransLocal.possibleCashDisc() * 100 / vendTransLocal.AmountCur;
            }
        }
        else
        {
            mainAmount = ledgerJournalTransMain.amount();
            if (!TaxParameters::canApplyCashDiscOnInvoice_ES())
            {
                if (mainAmount && (_manualCashDisc || LedgerJournalCashDiscService::manualCashDiscExist(ledgerJournalTransMain)))
                {
                    manualCashDisc = true;
                    cashDiscPercent = ledgerJournalTransMain.CashDiscAmount * 100 / mainAmount;
                }
            }
        }
        if (!noCashDiscInTax                        &&
           ((journalInclTax  && cashDiscInclTax)    ||
           (!journalInclTax && !cashDiscInclTax)))
        {
            useOnlyMain = true;
        }

        if (!voucher || !invoiceId)
        {
            useOnlyMain = true; // Used from invoice register without posting
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashDiscParameters</Name>
				<Source><![CDATA[
    void setCashDiscParameters(
        CompanyId _company,
        CashDiscCode _cashDiscCode,
        InvoiceId _invoiceId,
        LedgerJournalACType _ledgerJournalACType = LedgerJournalACType::Ledger,
        DiscPct _cashDiscPercent = 0)
    {
        switch (_ledgerJournalACType)
        {
            case LedgerJournalACType::Cust:
                if (!ledgerJournalTable.isTaxIntegrationEnabled())
                {
                    cashDiscInclTax = CustParameters::find().CashDiscVAT;
                }
                cashDiscCode = _cashDiscCode;
                company = _company;
                invoiceId    = _invoiceId;
                if (_cashDiscPercent)
                {
                    cashDiscPercent = _cashDiscPercent;
                }
                break;

            case LedgerJournalACType::Vend:
                if (!ledgerJournalTable.isTaxIntegrationEnabled())
                {
                    cashDiscInclTax = VendParameters::find().CashDiscVAT;
                }
                cashDiscCode = _cashDiscCode;
                company = _company;
                invoiceId    = _invoiceId;
                if (_cashDiscPercent)
                {
                    cashDiscPercent = _cashDiscPercent;
                }
                break;

            // Invoice approval journal is a special case in that cash discount should be calculated
            // for Ledger and Project account types as well
            case LedgerJournalACType::Ledger:
            case LedgerJournalACType::Project:
                if (noCashDiscInTax && ledgerJournalTable.JournalType == LedgerJournalType::Approval)
                {
                    cashDiscInclTax = VendParameters::find().CashDiscVAT;
                    cashDiscCode = _cashDiscCode;
                    company = _company;
                    invoiceId = _invoiceId;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashDiscPercent</Name>
				<Source><![CDATA[
    void setCashDiscPercent(Percent _percent,
                            LedgerJournalACType _ledgerJournalACType)
    {
        if (!manualCashDisc)
        {
            if (_ledgerJournalACType == LedgerJournalACType::Cust ||
                _ledgerJournalACType == LedgerJournalACType::Vend)
            {
                cashDiscPercent = _percent;
            }
            else
            {
                cashDiscPercent = CashDisc::findByCompany(company, cashDiscCode).Percent;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMain</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the <c>LedgerJournalTrans</c> table record that initiated the discount calculation process.
    /// </summary>
    /// <returns>
    /// A container with the record ID identified as dirty.
    /// </returns>
    container updateMain()
    {
        LedgerJournalTrans  ledgerJournalTransLocal;
        LedgerJournalTrans  ledgerJournalTransMainLocal;
        LedgerJournalTrans  ledgerJournalTransCopy;
        AmountCur           cashDiscAmount;
        AmountCur           cashDiscBaseAmount;
        TransDate           cashDiscDate;
        TransDate           cashDiscBaseDate;
        TransDate           transDate;
        VendTransCashDisc   vendTransCashDisc;
        CustTransCashDisc   custTransCashDisc;
        container           recordDirty;
        boolean             isCashDiscBaseAmountCalculated = false;

        if (useOnlyMain || !ledgerJournalTransMain)
        {
            return recordDirty;
        }

        if (!TaxParameters::canApplyCashDiscOnInvoice_ES())
        {
            if (manualCashDisc || LedgerJournalCashDiscService::manualCashDiscExist(ledgerJournalTransMain))
            {
                return recordDirty;
        }
        }

        ttsbegin;
        while select ledgerJournalTransLocal
        where ledgerJournalTransLocal.JournalNum  == ledgerJournalId
            && ledgerJournalTransLocal.Voucher     == voucher
            && ((ledgerJournalTransLocal.AccountType == LedgerJournalACType::Ledger
                || ledgerJournalTransLocal.AccountType == LedgerJournalACType::Project
                || ledgerJournalTransLocal.AccountType == LedgerJournalACType::FixedAssets)
                || (ledgerJournalTransLocal.OffsetLedgerDimension
                    && (ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::Ledger
                    || ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::Project
                    || ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::FixedAssets)))
        {
            if (ledgerJournalTransLocal.AccountType == LedgerJournalACType::Ledger
                || ledgerJournalTransLocal.AccountType == LedgerJournalACType::Project
                || ledgerJournalTransLocal.AccountType == LedgerJournalACType::FixedAssets)
            {
                cashDiscBaseAmount += this.cashDiscBaseAmount(ledgerJournalTransLocal);
                isCashDiscBaseAmountCalculated = true;
            }

            if (ledgerJournalTransLocal.OffsetLedgerDimension &&
                (ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::Ledger
                || ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::Project
                || ledgerJournalTransLocal.OffsetAccountType == LedgerJournalACType::FixedAssets))
            {
                ledgerJournalTransCopy.data(ledgerJournalTransLocal);
                cashDiscBaseAmount -= this.cashDiscBaseAmount(ledgerJournalTransCopy);
                isCashDiscBaseAmountCalculated = true;
            }
        }

        if (isCashDiscBaseAmountCalculated)
        {
            switch (ledgerJournalTransMain.AccountType)
            {
                case LedgerJournalACType::Cust:
                    transDate = ledgerJournalTransMain.DocumentDate ? ledgerJournalTransMain.DocumentDate : ledgerJournalTransMain.TransDate;
                    cashDiscBaseDate = ledgerJournalTransMain.CashDiscBaseDate ? ledgerJournalTransMain.CashDiscBaseDate : transDate;
                    custTransCashDisc = custTransCashDisc.calcCashDisc(
                        ledgerJournalTransMain.Company,
                        ledgerJournalTransMain.CurrencyCode,
                        -cashDiscBaseAmount,
                        ledgerJournalTransMain.Due,
                        cashDiscBaseDate,
                        this.cashDiscCode(),
                        ledgerJournalTransMain.TableId,
                        ledgerJournalTransMain.RecId,
                        false,
                        0,
                        ledgerJournalTransMain.DocumentDate ? ledgerJournalTransMain.DocumentDate : ledgerJournalTransMain.TransDate,
                        ledgerJournalTransMain.CashDiscPercent);

                    cashDiscAmount = custTransCashDisc.CashDiscAmount;
                    cashDiscDate   = custTransCashDisc.CashDiscdate;
                    break;

                case LedgerJournalACType::Vend:
                    vendTransCashDisc = vendTransCashDisc.calcCashDisc(
                        ledgerJournalTransMain.Company,
                        ledgerJournalTransMain.CurrencyCode,
                        -cashDiscBaseAmount,
                        ledgerJournalTransMain.Due,
                        ledgerJournalTransMain.DocumentDate ? ledgerJournalTransMain.DocumentDate : ledgerJournalTransMain.TransDate,
                        this.cashDiscCode(),
                        ledgerJournalTransMain.TableId,
                        ledgerJournalTransMain.RecId,
                        false,
                        0,
                        ledgerJournalTransMain.DocumentDate ? ledgerJournalTransMain.DocumentDate : ledgerJournalTransMain.TransDate,
                        ledgerJournalTransMain.CashDiscPercent);

                    cashDiscAmount = vendTransCashDisc.CashDiscAmount;
                    cashDiscDate   = vendTransCashDisc.CashDiscdate;
                    break;
            }
        }

        select firstonly forupdate ledgerJournalTransMainLocal
        where ledgerJournalTransMainLocal.JournalNum  == ledgerJournalId &&
              ledgerJournalTransMainLocal.Voucher     == voucher    &&
              ledgerJournalTransMainLocal.RecId       == ledgerJournalTransMain.RecId;

        if (ledgerJournalTransMainLocal)
        {
            ledgerJournalTransMainLocal.CashDiscAmount = cashDiscAmount;
            ledgerJournalTransMainLocal.DateCashDisc   = cashDiscDate;

            if (ledgerJournalTransMainLocal.hasCashDiscChanged()
                || taxIntegrationTaxJurisdictionParameters::shouldCashDiscDeductedBeforeTaxCalc(ledgerJournalTransMainLocal))
            {
                ledgerJournalTransMainLocal.update();
                recordDirty = [ledgerJournalTransMainLocal.RecId];
            }

            ledgerJournalTransMain = ledgerJournalTransMainLocal;
        }

        ttscommit;
        return recordDirty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVoucher</Name>
				<Source><![CDATA[
    container updateVoucher()
    {
        LedgerJournalTrans  ledgerJournalTransLocal;
        container           recordDirty;
        AmountCur           allocatedCashDiscAmount;
        AmountCur           remainAmount;

        if (useOnlyMain)
        {
            return recordDirty;
        }

        ttsbegin;

        while select forupdate ledgerJournalTransLocal
            order by JournalNum, Voucher, Invoice
        where ledgerJournalTransLocal.JournalNum  == ledgerJournalId           &&
              ledgerJournalTransLocal.Voucher     == voucher                   &&
              ledgerJournalTransLocal.AccountType != LedgerJournalACType::Cust &&
              ledgerJournalTransLocal.AccountType != LedgerJournalACType::Vend &&
              ledgerJournalTransLocal.AccountType != LedgerJournalACType::Bank

        {
            ledgerJournalTransLocal.CashDiscAmount   =  this.calcCashDiscAmount(ledgerJournalTransLocal);
            allocatedCashDiscAmount                 += ledgerJournalTransLocal.CashDiscAmount;
            ledgerJournalTransLocal.DateCashDisc     = CashDisc::cashDiscDate(this.cashDiscCode(), ledgerJournalTransLocal.TransDate);

            if (ledgerJournalTransLocal.hasCashDiscChanged())
            {
                ledgerJournalTransLocal.update();
                recordDirty += [ledgerJournalTransLocal.RecId];
            }
        }

        if (allocatedCashDiscAmount && LedgerJournalCashDiscService::manualCashDiscExist(ledgerJournalTransMain))
        {
            remainAmount = -ledgerJournalTransMain.CashDiscAmount - allocatedCashDiscAmount;

            if (remainAmount)
            {
                while select forupdate ledgerJournalTransLocal
                        where ledgerJournalTransLocal.JournalNum == ledgerJournalId &&
                            ledgerJournalTransLocal.Voucher      == voucher &&
                            ledgerJournalTransLocal.AccountType  != LedgerJournalACType::Cust &&
                            ledgerJournalTransLocal.AccountType  != LedgerJournalACType::Vend &&
                            ledgerJournalTransLocal.AccountType  != LedgerJournalACType::Bank
                {
                    ledgerJournalTransLocal.CashDiscAmount += CurrencyExchangeHelper::amount(remainAmount * ledgerJournalTransLocal.CashDiscAmount / allocatedCashDiscAmount, ledgerJournalTransMain.CurrencyCode);

                    if (!ledgerJournalTransLocal.DateCashDisc)
                    {
                        ledgerJournalTransLocal.DateCashDisc     = CashDisc::cashDiscDate(this.cashDiscCode(), ledgerJournalTransLocal.TransDate);
                    }

                    if (ledgerJournalTransLocal.hasCashDiscChanged())
                    {
                        ledgerJournalTransLocal.update();
                    }
                }
            }
        }
        recordDirty += this.updateMain();
        ttscommit;
        return recordDirty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmountCashDisc</Name>
				<Source><![CDATA[
    /*MAN
    Returns base amount for calculation of cashdisc, based on parameter setup in
    customer vendor/module and sales tax module
    Parameter _baseAmountCur is the amount excl sales tax
    */
    static AmountCur baseAmountCashDisc(ModuleCustVend _custVend,
                                        AmountCur      _baseAmountCur,
                                        AmountCur      _taxAmountCur,
                                        Percent        _cashDiscPercent)
    {
        boolean cashDiscInclTax;
        boolean noCashDiscInTax = TaxParameters::canApplyCashDiscOnInvoice_ES();
        ;
        if (_custVend == ModuleCustVend::Cust)
        {
            cashDiscInclTax = TaxCashDiscountParametersHelper::cashDiscInclTax(ModuleCustVend::Cust);
        }
        else
        {
            cashDiscInclTax = TaxCashDiscountParametersHelper::cashDiscInclTax(ModuleCustVend::Vend);
        }

        if (cashDiscInclTax)
        {
            if (noCashDiscInTax)
            {
                return _baseAmountCur + ((1-_cashDiscPercent) * _taxAmountCur);
            }
            else
            {
                return _baseAmountCur + _taxAmountCur;
            }
        }
        else
        {
            return _baseAmountCur;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTaxesIL</Name>
				<Source><![CDATA[
    [SysObsoleteAttribute('Obsolete private method.', true, 30\5\2022)]
    private static container calculateTaxesIL(container _params)
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualCashDiscExist</Name>
				<Source><![CDATA[
    static boolean manualCashDiscExist(LedgerJournalTrans _ledgerJournalTrans)
    {
        CustTransCashDisc   custTransCashDisc;
        VendTransCashDisc   vendTransCashDisc;
        boolean             exist = false;
        ;
        if (!_ledgerJournalTrans.RecId)
        {
            if (_ledgerJournalTrans.CashDiscAmount && !_ledgerJournalTrans.CashDiscCode)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        switch (_ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust :
                select firstonly custTransCashDisc where
                                 custTransCashDisc.RefTableId == _ledgerJournalTrans.TableId &&
                                 custTransCashDisc.RefRecId   == _ledgerJournalTrans.RecId   &&
                                 custTransCashDisc.Manual;

                if (TaxParameters::find().CashDiscOnInvoice)
                {
                    if (!exist && _ledgerJournalTrans.CashDiscAmount && !_ledgerJournalTrans.CashDiscCode && !_ledgerJournalTrans.CashDiscPercent )
                    {
                        exist = true;
                    }
                }
                else
                {
                    if (custTransCashDisc)
                    {
                        exist = true;
                    }
                    if (!exist && _ledgerJournalTrans.CashDiscAmount && !_ledgerJournalTrans.CashDiscCode)
                    {
                        exist = true;
                    }
                }
                break;

            case LedgerJournalACType::Vend :
                select firstonly vendTransCashDisc where
                                 vendTransCashDisc.RefTableId == _ledgerJournalTrans.TableId &&
                                 vendTransCashDisc.RefRecId   == _ledgerJournalTrans.RecId   &&
                                 vendTransCashDisc.Manual;

                if (TaxParameters::canApplyCashDiscOnInvoice_ES())
                {
                    if (!exist && _ledgerJournalTrans.CashDiscAmount && !_ledgerJournalTrans.CashDiscCode && !_ledgerJournalTrans.CashDiscPercent )
                    {
                        exist = true;
                    }
                }
                else
                {
                    if (vendTransCashDisc)
                    {
                        exist = true;
                    }
                    if (!exist && _ledgerJournalTrans.CashDiscAmount && !_ledgerJournalTrans.CashDiscCode)
                    {
                        exist = true;
                    }
                }
                break;

            default :
        }
        return exist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new_Server</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>ledgerJournalTable</c>, <c>ledgerJournalTransMain</c>, and
    ///    <c>ledgerJournalTansLocal</c> table buffers that are needed by the <c>new</c> method.
    /// </summary>
    /// <param name="_ledgerJournalId">
    ///    The <c>JournalId</c> to use to retrieve the table buffers.
    /// </param>
    /// <param name="_voucher">
    ///    The voucher to use to retrieve the table buffers.
    /// </param>
    /// <returns>
    ///    A container that holds the <c>ledgerJournalTable</c>, <c>ledgerJournalTransMain</c>, and
    ///    <c>ledgerJournalTansLocal</c> table buffers that are needed by the new method.
    /// </returns>
    /// <remarks>
    ///    This method was created to group the initialization of several table buffers to reduce RPC calls
    ///    between the client and the server.
    /// </remarks>
    private static container new_Server(LedgerJournalId _ledgerJournalId,
                                               Voucher         _voucher)
    {
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTransMain;
        LedgerJournalTrans ledgerJournalTransLocal;

        ;

        ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalId);

        select firstonly ledgerJournalTransMain
        where ledgerJournalTransMain.JournalNum == _ledgerJournalId &&
              ledgerJournalTransMain.Voucher    == _voucher         &&
              (ledgerJournalTransMain.AccountType == LedgerJournalACType::Cust ||
               ledgerJournalTransMain.AccountType == LedgerJournalACType::Vend);

        select firstonly ledgerJournalTransLocal
        where ledgerJournalTransLocal.JournalNum == _ledgerJournalId &&
              ledgerJournalTransLocal.Voucher    == _voucher;

        return [#New_ServerList];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>