<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintMgmtNode_CustTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PrintMgmtNode_CustTable</c> class is responsible for managing Print Management settings at
///    the <c>CustTable</c> account-level in the Accounts Receivable and Project module.
/// </summary>
public class PrintMgmtNode_CustTable extends PrintMgmtNode
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDisplayCaptionImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the display caption for the node.
    /// </summary>
    /// <param name="_tableBuffer">
    ///    The table buffer that is referenced by the node.
    /// </param>
    /// <returns>
    ///    The display caption used to identify the reference of the node.
    /// </returns>
    /// <remarks>
    ///    Normally the caption includes a prefix like module, account or transaction, followed by the caption
    ///    property of the <paramref name="_tableBuffer" /> parameter.
    /// </remarks>
    protected str getDisplayCaptionImplementation(Common _tableBuffer)
    {
        CustTable custTable = _tableBuffer;

        return(strFmt("@SYS108943", strFmt('%1, %2', custTable.AccountNum, custTable.name())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of valid document types for the node.
    /// </summary>
    /// <returns>
    /// A list of valid document types for the node.
    /// </returns>
    /// <remarks>
    /// Only certain document types are valid for a given node and this method returns that
    /// list.Configuration keys are used to determine this list so the results may vary based on what is
    /// configured in the application.
    /// </remarks>
    public List getDocumentTypes()
    {
        // <GEERU><GEEHU>
        #ISOCountryRegionCodes
        // </GEEHU></GEERU>
        List docTypes;

        docTypes = new List(Types::Enum);

        if (isConfigurationkeyEnabled(configurationKeyNum(QuotationBasic)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::Confirmation);
            docTypes.addEnd(PrintMgmtDocumentType::Quotation);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::SalesOrderConfirmation);
            docTypes.addEnd(PrintMgmtDocumentType::SalesOrderInvoice);
            docTypes.addEnd(PrintMgmtDocumentType::SalesOrderPackingSlip);
            docTypes.addEnd(PrintMgmtDocumentType::InventPickList);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerBasic)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::SalesFreeTextInvoice);
            docTypes.addEnd(PrintMgmtDocumentType::CustAccountStatement);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::SIProjInvoice);
            docTypes.addEnd(PrintMgmtDocumentType::SIProjInvoiceWithBR);
            docTypes.addEnd(PrintMgmtDocumentType::SIManagedProjInvoice);
            docTypes.addEnd(PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice);
            docTypes.addEnd(PrintMgmtDocumentType::ProjectQuotation);
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            docTypes.addEnd(PrintMgmtDocumentType::SalesOrderInvoice4Paym_RU);
            docTypes.addEnd(PrintMgmtDocumentType::SalesFreeTextInvoice4Paym_RU);
            docTypes.addEnd(PrintMgmtDocumentType::SalesOrderFacture);
            docTypes.addEnd(PrintMgmtDocumentType::SalesFreeTextFacture);
            docTypes.addEnd(PrintMgmtDocumentType::SalesOrderBailee);
            docTypes.addEnd(PrintMgmtDocumentType::WMSBillOfLading_RU);
            docTypes.addEnd(PrintMgmtDocumentType::WMSBilOfLadingTranspDocument_RU);
        }
        // </GEERU>
        if (isConfigurationkeyEnabled(configurationKeyNum(CustInterest)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::CustInterestNote);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(CustCollectionLetter)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::CustCollectionLetter);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(TradeBlanketOrder)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::SalesAgreementConfirmation);
        }

        // <GEEHU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            docTypes.addEnd(PrintMgmtDocumentType::TaxReimburstmentSlip_HU);
        }
        // </GEEHU>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            docTypes.addEnd(PrintMgmtDocumentType::ComplementaryInvoice_BR);
            docTypes.addEnd(PrintMgmtDocumentType::ProjDebitNote_BR);
        }
        // </GBR>

        // <GEEU>
        if (isConfigurationkeyEnabled(configurationKeyNum(CzCustVendAdvanceInvoices)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::SalesAdvanceInvoice);
        }
        // </GEEU>

        if (isConfigurationkeyEnabled(configurationKeyNum(Bank)))
        {
            docTypes.addEnd(PrintMgmtDocumentType::CustPaymAdvice);
        }
        
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
        {
            docTypes.addEnd(PrintMgmtDocumentType::CustDebitCreditNote);
        }

        return docTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIconImageResNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the resource ID that is used to display the icon that represents this node.
    /// </summary>
    /// <returns>
    ///    The resource ID that is used to display the icon that represents this node.
    /// </returns>
    /// <remarks>
    ///    The <c>resAppl</c> macro contains the resource ID definitions for icon images. This method returns
    ///    one of those resource IDs. If additional resource IDs are used, they should also be added to the
    ///    build method of the <c>ImageListAppl_PrintMgmt</c> class.
    /// </remarks>
    public int getIconImageResNum()
    {
        #resAppl

        return #ImagePrintManagementAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtNodeType</c> enumeration value of the node.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtNodeType</c> enumeration value of the node.
    /// </returns>
    /// <remarks>
    /// New node types should be defined in the <c>PrintMgmtNodeType</c> enumeration and returned through
    /// this method.
    /// </remarks>
    public PrintMgmtNodeType getNodeType()
    {
        return PrintMgmtNodeType::CustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReferencedTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID that is referenced by this node.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c> table ID that is referenced by this node.
    /// </returns>
    /// <remarks>
    /// Module-level settings are an example of a node that does not actually reference a table in the
    /// system. In this case, you should return a value of 0. If the node references the <c>CustTable</c>
    /// table, it would mean that print management settings are related to records in the <c>CustTable</c>
    /// table. In this case, you should return the table ID of the <c>CustTable</c> table.
    /// </remarks>
    public RefTableId getReferencedTableId()
    {
        return tableNum(CustTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>