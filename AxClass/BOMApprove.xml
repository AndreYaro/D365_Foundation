<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomApprove</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomApprove extends BOMRouteApprove
{
    BOMId       bomId;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        BOMId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockRemoveOfApproval</Name>
				<Source><![CDATA[
    public NoYes blockRemoveOfApproval()
    {
        return blockRemoveOfApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        isAlreadyApproved = BOMTable::find(this.parmBOMId()).Approved;
        blockRemoveOfApproval = BOMParameters::find().BlockRemoveApproval;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    boolean isAlreadyApproved()
    {
        return isAlreadyApproved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMId</Name>
				<Source><![CDATA[
    BOMId parmBOMId(BOMId _bomId = bomId)
    {
        bomId = _bomId;

        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeBOMVersionApproval</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes the approval of all already approved BOM versions of the given BOM ID.
    /// </summary>
    /// <param name="_bomId">
    ///    A BOM ID.
    /// </param>
    protected void removeBOMVersionApproval(BOMId _bomId)
    {
        BOMVersion              bomVersion;
        BOMRouteVersionApprove  bomRouteVersionApprove;

        while select bomVersion
            where bomVersion.bomId    == _bomId
               && bomVersion.Approved == NoYes::Yes
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(SIG)))
            {
                SIGBOMVersionApproveProcedure procedure = SIGBOMVersionApproveProcedure::newBOMVersion(bomVersion);
                if (procedure.signatureRequired())
                {
                    throw error("@SCM:BOMVersionRemoveApprovalError");
                }
            }

            bomRouteVersionApprove = BOMRouteVersionApprove::newBOMVersion(bomVersion);
            bomRouteVersionApprove.parmRemove(NoYes::Yes);
            bomRouteVersionApprove.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        BOMTable table;

        if (! this.validate())
            throw error("@SYS27040");

        try
        {
            ttsbegin;

            table             = BOMTable::find(bomId,true);
            if (remove)
            {
                this.removeBOMVersionApproval(bomId);
                table.Approved    = false;
                table.Approver    = 0;

                if (   #pmfEnabled
                    && table.PmfBOMFormula == PmfBOMFormula::Formula)
                {
                    BOMTable::pmfUnapproveVersionByBOMId(table.BOMId);
                }
            }
            else
            {
                table.Approved    = true;
                table.Approver    = approver;
            }
            if (    remove
                &&  this.isAlreadyApproved()
                &&  !this.blockRemoveOfApproval()
                &&  BOMParameters::find().BlockEditing)
            //
            // this is a special case, we are removing the approval
            // so we need to bypass table validation
            //
            {
                table.doUpdate();
            }
            else
            {
                table.update();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, base] = packedClass;
                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        BOM         bom;
        BOMTable    bomTable;
        boolean     ret;

        bomTable = BOMTable::find(bomId);
        ret = super() && (bomTable.RecId != 0);

        if (   ret
                && #PmfEnabled
                && bomTable.PmfBOMFormula == PmfBOMFormula::Formula
                && !BOM::existBOMId(bomId)
                && !remove)
        {
            ret = false;
            checkFailed("@PDS1520");
        }

        if (ret
                && #PDSPotencyEnabled
                && !this.parmRemove()
                && (bomTable.PmfBOMFormula == PmfBOMFormula::Formula))
        {
            while select bomId, ItemId from bom
                where bom.bomId             == bomId
                   && bom.PDSIngredientType == PDSIngredientTypeEnum::Compensating
            {
                if (!PDSCompensationPrinciple::findByBomItem(bom.bomId,bom.ItemId))
                {
                    ret = checkFailed(strFmt("@PSC173", bom.ItemId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BOMRouteApprove construct()
    {
        return new BOMApprove();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        if (#PmfEnabled)
        {
            return "@PRO124";
        }
        else
        {
            return "@SYS29117";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        BOMApprove                      approve;
        SIGBOMTableApproveProcedure     procedure; //SIG
        Common                          argsRecord = _args.record();

        //SIG - start
        if (isConfigurationkeyEnabled(configurationKeyNum(SIG)) && argsRecord)
        {
            procedure = SIGBOMTableApproveProcedure::newBOMTable(argsRecord);
            if (procedure.signatureRequired())
            {
                procedure.sign();
                return;
            }
        }
        //SIG - end

        if (argsRecord)
        {
            switch (argsRecord.TableId)
            {
                case tableNum(BOMTable):
                    approve = BOMApprove::newBOMTable(argsRecord);
                    break;
                default:
                    throw error(strFmt("@SYS29104", classId2Name(classIdGet(approve))));
            }

            if (approve.prompt())
            {
                using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContext(_args))
                {
                    approve.runOperation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMTable</Name>
				<Source><![CDATA[
    public static BOMApprove newBOMTable(BOMTable table)
    {
        BOMApprove approve = BOMApprove::construct();

        approve.getLast();
        approve.parmBOMId(table.bomId);
        approve.parmApprover(HcmWorker::userId2Worker(curuserid()));
        approve.init();

        return approve;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>