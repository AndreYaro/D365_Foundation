<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostReconciliationMethodStrategyTotalAccount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostReconciliationMethodStrategyAccountCategory</c> class uses the main account to find conflicts
/// and reconcile with general ledger.
/// </summary>
public class CostReconciliationMethodStrategyTotalAccount extends CostReconciliationMethodStrategy
{
    Set                 accountsToAdd, accountsToSubtract,
                        inventoryAccountsToAdd, inventoryAccountsToSubtract,
                        wipAccountsToAdd, wipAccountsToSubtract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>loadAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the main accounts for a total main account.
    /// </summary>
    /// <param name = "_mainAccountId">
    /// The main account ID.
    /// </param>
    /// <remarks>
    /// The specified main account is added if the main account isn't a total account.
    /// </remarks>
    private void loadAccounts(MainAccountNum  _mainAccountId)
    {
        DimensionAttributeValueTotallingCriteria    dimensionAttributeValueTotallingCriteria;
        MainAccount                                 mainAccount;
        boolean                                     noRangeDefined = true;

        accountsToAdd = new Set(Types::String);
        accountsToSubtract = new Set(Types::String);

        var dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(mainDimensionAttribute, _mainAccountId);

        while select InvertTotalSign
                from dimensionAttributeValueTotallingCriteria
                where dimensionAttributeValueTotallingCriteria.DimensionAttributeValue == dimensionAttributeValue.RecId
                join mainAccount
                where mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                    && mainAccount.MainAccountId >= dimensionAttributeValueTotallingCriteria.FromValue
                    && mainAccount.MainAccountId <= dimensionAttributeValueTotallingCriteria.ToValue
                    && (mainAccount.Type == DimensionLedgerAccountType::ProfitAndLoss ||
                        mainAccount.Type == DimensionLedgerAccountType::Revenue ||
                        mainAccount.Type == DimensionLedgerAccountType::Expense ||
                        mainAccount.Type == DimensionLedgerAccountType::BalanceSheet ||
                        mainAccount.Type == DimensionLedgerAccountType::Asset ||
                        mainAccount.Type == DimensionLedgerAccountType::Liability ||
                        mainAccount.Type == DimensionLedgerAccountType::Equity)
        {
            if (dimensionAttributeValueTotallingCriteria.InvertTotalSign)
            {
                accountsToSubtract.add(mainAccount.MainAccountId);
            }
            else
            {
                accountsToAdd.add(mainAccount.MainAccountId);
            }
            noRangeDefined = false;
        }
        if (noRangeDefined)
        {
            accountsToAdd.add(_mainAccountId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadInventoryAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the inventory main accounts.
    /// </summary>
    private void loadInventoryAccounts()
    {
        if (!inventoryAccountsToAdd)
        {
            this.loadAccounts(parameters.InventoryMainAccount);
            inventoryAccountsToAdd = accountsToAdd;
            inventoryAccountsToSubtract = accountsToSubtract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWIPAccounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the WIP main accounts.
    /// </summary>
    private void loadWIPAccounts()
    {
        if (!wipAccountsToAdd)
        {
            this.loadAccounts(parameters.WIPMainAccount);
            wipAccountsToAdd = accountsToAdd;
            wipAccountsToSubtract = accountsToSubtract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAccountBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the balance for two sets of main account IDs for a given date range.
    /// </summary>
    /// <param name = "_accountsToAdd">
    /// The set of main account IDs to add to the balance.
    /// </param>
    /// <param name = "_accountsToSubtract">
    /// The set of main account IDs to subtract from the balance.
    /// </param>
    /// <param name = "_fromDate">
    /// The start of the date range.
    /// </param>
    /// <param name = "_toDate">
    /// The end of the date range.
    /// </param>
    /// <returns>
    /// The balance for two sets of main account IDs for a given date range.
    /// </returns>
    private Amount getTotalAccountBalance(
        Set             _accountsToAdd,
        Set             _accountsToSubtract,
        FromDate        _fromDate,
        ToDate          _toDate)
    {
        AmountMST                                   balance;

        balance += this.getMainAccountsBalance(_accountsToAdd, _fromDate, _toDate);
        balance -= this.getMainAccountsBalance(_accountsToSubtract, _fromDate, _toDate);

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryBalance</Name>
				<Source><![CDATA[
    public Amount getInventoryBalance(TransDate _balanceDate)
    {
        this.loadInventoryAccounts();

        return this.getTotalAccountBalance(inventoryAccountsToAdd, inventoryAccountsToSubtract, dateNull(), _balanceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWIPBalance</Name>
				<Source><![CDATA[
    public Amount getWIPBalance(TransDate _balanceDate)
    {
        this.loadWIPAccounts();

        return this.getTotalAccountBalance(wipAccountsToAdd, wipAccountsToSubtract, dateNull(), _balanceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventoryMainAccountRanges</Name>
				<Source><![CDATA[
    public void addInventoryMainAccountRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
        this.loadInventoryAccounts();
        this.addRanges(_mainAccountQueryBuildDataSource, Set::union(inventoryAccountsToAdd, inventoryAccountsToSubtract));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWIPMainAccountRanges</Name>
				<Source><![CDATA[
    public void addWIPMainAccountRanges(QueryBuildDataSource _mainAccountQueryBuildDataSource)
    {
        this.loadWIPAccounts();
        this.addRanges(_mainAccountQueryBuildDataSource, Set::union(wipAccountsToAdd, wipAccountsToSubtract));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventoryAccount</Name>
				<Source><![CDATA[
    public boolean isInventoryAccount(MainAccountNum _mainAccountId)
    {
        this.loadInventoryAccounts();

        return inventoryAccountsToAdd.in(_mainAccountId) || inventoryAccountsToSubtract.in(_mainAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWIPAccount</Name>
				<Source><![CDATA[
    public boolean isWIPAccount(MainAccountNum _mainAccountId)
    {
        this.loadWIPAccounts();

        return wipAccountsToAdd.in(_mainAccountId) || wipAccountsToSubtract.in(_mainAccountId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CostReconciliationMethodStrategyTotalAccount construct()
    {
        return new CostReconciliationMethodStrategyTotalAccount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>