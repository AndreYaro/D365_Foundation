<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeFormsInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class TradeFormsInstrumentationActivities
{
    private const str InitializingTradeFormsQueryFiltersActivity = "InitializingQueryFilters";
    private const str ActivityContextSeparator = '.';
    private TradeInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(TradeInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static TradeFormsInstrumentationActivities newFromLogger(TradeInstrumentationLogger _logger)
    {
        return new TradeFormsInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQueryInformationTradeForm</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext initializeQueryInformationTradeForm(str _formName)
    {
        return logger.activityContext(_formName + ActivityContextSeparator + InitializingTradeFormsQueryFiltersActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentTradeFormQueryFilters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static void instrumentTradeFormQueryFilters(str _formName, Query _query)
    {
        const str QueryFilterCount = 'QueryFilterCount';
        const str QueryOrderByCount = 'QueryOrderByCount';
        const str QueryGroupByCount = 'QueryGroupByCount';
        const str QueryWildCardFilterCount = 'QueryWildCardFilterCount';
        const str QueryFilterDetails = 'QueryFilterDetails';

        if (_formName && _query)
        {
            TradeInstrumentationLogger instrumentationLogger = TradeInstrumentationLogger::createLogger(_formName);
            using (var activityContext = instrumentationLogger.tradeFormOrderActivities().initializeQueryInformationTradeForm(_formName))
            {
                Query query = _query;
                int countFilters = query.queryFilterCount();
                activityContext.addCustomProperty(QueryFilterCount, any2Str(countFilters));

                int countWildCardFilters;
                List filterInformation = new List(Types::String);
                for (int i = 1; i <= countFilters; i++)
                {
                    QueryFilter qf = query.queryFilter(i);
                    str dataSourceName = qf.dataSource().name();
                    str dataFieldName = qf.field();
                    str filterValue = qf.value();
                    boolean wildcard = strscan(filterValue,'*',0,strlen(filterValue)) != 0;
                    if (wildcard)
                    {
                        countWildCardFilters++;
                    }
                    
                    filterInformation.addEnd(strFmt('%1,%2,%3', dataSourceName, dataFieldName, any2Str(wildcard)));
                }

                activityContext.addCustomProperty(QueryFilterDetails, filterInformation.toString());
                activityContext.addCustomProperty(QueryWildCardFilterCount, any2Str(countWildCardFilters));
            
                int countOrderBy = query.orderByFieldCount();
                activityContext.addCustomProperty(QueryOrderByCount, any2Str(countOrderBy));
            
                int countGroupBy = query.groupByFieldCount();
                activityContext.addCustomProperty(QueryGroupByCount, any2Str(countGroupBy));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>