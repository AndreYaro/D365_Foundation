<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TMSAddressPhone</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TmsAddressPhone</c> class is used to bundle address and phone information together.
/// </summary>
public class TmsAddressPhone
{
    LogisticsPostalAddress              postalAddress;
    LogisticsElectronicAddressLocator   phone;
    TMSName                             name;
    ShipCarrierResidentialDest          residential;
    RecId                               postalAddressRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns address from <c>LogisticsPostalAddress</c> record.
    /// </summary>
    /// <returns>
    /// Address from <c>LogisticsPostalAddress</c> record.
    /// </returns>
    public LogisticsAddressing getAddress()
    {
        return postalAddress.Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    public LogisticsAddressCityName parmCity(LogisticsAddressCityName _city = postalAddress.City)
    {
        postalAddress.City = _city;

        return postalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegion</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionId parmCountryRegion(
        LogisticsAddressCountryRegionId _countryRegion = postalAddress.CountryRegionId)
    {
        postalAddress.CountryRegionId = _countryRegion;

        return postalAddress.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCounty</Name>
				<Source><![CDATA[
    public LogisticsAddressCountyId parmCounty(LogisticsAddressCountyId _county = postalAddress.County)
    {
        postalAddress.County = _county;

        return postalAddress.County;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId parmLocation(LogisticsLocationRecId   _location = postalAddress.Location)
    {
        postalAddress.Location = _location;

        return postalAddress.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public TMSName parmName(TMSName _name = name)
    {
        name = _name;

        if (!name
        && postalAddress.RecId != 0)
        {
            name = LogisticsPostalAddress::locationNameFromRecId(postalAddress.RecId);
        }

        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhone</Name>
				<Source><![CDATA[
    public LogisticsElectronicAddressLocator parmPhone(LogisticsElectronicAddressLocator _phone = phone)
    {
        phone = _phone;

        return phone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostalAddressRecId</Name>
				<Source><![CDATA[
    public LogisticsPostalAddressRecId parmPostalAddressRecId(LogisticsPostalAddressRecId _postalAddress = postalAddressRecId)
    {
        postalAddressRecId = _postalAddress;

        return postalAddressRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostalCode</Name>
				<Source><![CDATA[
    public LogisticsAddressZipCodeId parmPostalCode(LogisticsAddressZipCodeId _postalCode = postalAddress.ZipCode)
    {
        postalAddress.ZipCode = _postalCode;

        return postalAddress.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResidential</Name>
				<Source><![CDATA[
    public ShipCarrierResidentialDest parmResidential(ShipCarrierResidentialDest _residential = residential)
    {
        residential = _residential;

        return residential;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    public LogisticsAddressStateId parmState(LogisticsAddressStateId _state = postalAddress.State)
    {
        postalAddress.State = _state;

        return postalAddress.State;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreet</Name>
				<Source><![CDATA[
    public LogisticsAddressStreet parmStreet(LogisticsAddressStreet _street = postalAddress.Street)
    {
        postalAddress.Street = _street;

        return postalAddress.Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLogisticsPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the postal address information based on a single record
    /// </summary>
    /// <param name="_address">
    /// <c>LogisticsPostalAddress</c> record
    /// </param>
    public void setLogisticsPostalAddress(LogisticsPostalAddress _address)
    {
        postalAddress = _address;

        this.parmPostalAddressRecId(postalAddress.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>CustAccount</c> record.
    /// </summary>
    /// <param name="_account">
    /// Customer account
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    public static TMSAddressPhone initFromCustAccount(CustAccount _account)
    {
        CustTable               custTable   = CustTable::find(_account);
        LogisticsPostalAddress  address;
        TMSAddressPhone         ret         = new TMSAddressPhone();

        address = custTable.postalAddress();
        if (address.RecId == 0)
        {
            address = custTable.invoiceAddress();
        }
        ret.setLogisticsPostalAddress(address);
        ret.parmName(custTable.name());
        ret.parmPhone(custTable.phone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the <c>TMSAddressPhone</c> object with an <c>InventLocation</c> record.
    /// </summary>
    /// <param name="_inventLocation">
    ///     The inventory location.
    /// </param>
    /// <param name="_initPhoneInformation">
    ///     True if phone information needs to be initialized; false, otherwise. Usually initialization is skipped for performance reasons.
    /// </param>
    /// <param name="_logisticsPostalAddressRecId">
    ///     The RecId of a LogisticsPostalAddress record which is not the primary address of the <c>_inventLocation</c>
    /// </param>
    /// <returns>
    ///     The filled-in address information.
    /// </returns>
    public static TMSAddressPhone initFromInventLocation(
        InventLocation                  _inventLocation,
        boolean                         _initPhoneInformation = false,
        LogisticsPostalAddressRecId     _logisticsPostalAddressRecId = 0)
    {
        LogisticsPostalAddress      address;
        TMSAddressPhone             ret     = new TMSAddressPhone();
        LogisticsElectronicAddress  logisticsElectronicAddress;
        LogisticsLocation           logisticsLocation;
        CompanyInfo                 companyInfo;

        if (_inventLocation.RecId != 0)
        {
            if (_logisticsPostalAddressRecId != 0)
            {
                address = LogisticsPostalAddress::findRecId(_logisticsPostalAddressRecId);
                ret.parmName(LogisticsPostalAddress::locationNameFromRecId(_logisticsPostalAddressRecId));
            }

            if (!address)
            {
                address = tmsAddressPhone::findInventLocationLogisticsLocationPostalAddress(_inventLocation);
            }

            if (!address)
            {
                address = _inventLocation.logisticsPostalAddress();
                ret.parmName(strFmt("@SYS76785", _inventLocation.InventLocationId, _inventLocation.Name));
            }

            ret.setLogisticsPostalAddress(address);

            if (_initPhoneInformation)
            {
                select firstonly Locator from logisticsElectronicAddress
                    where logisticsElectronicAddress.Type  == LogisticsElectronicAddressMethodType::Phone
                    exists join logisticsLocation
                    where logisticsLocation.RecId == logisticsElectronicAddress.Location
                        && logisticsLocation.ParentLocation == address.Location;

                ret.parmPhone(logisticsElectronicAddress.Locator);
            }
        }
        else
        {
            companyInfo = CompanyInfo::find();
            address = companyInfo.postalAddress();
            ret.setLogisticsPostalAddress(address);
            ret.parmName(companyInfo.Name);

            if (_initPhoneInformation)
            {
                ret.parmPhone(companyInfo.phone());
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>PurchLine</c> record.
    /// </summary>
    /// <param name="_purchLine">
    /// Purchase order line record
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    /// <remarks>
    /// Uses destination address of the line, usually the warehouse address.
    /// </remarks>
    public static TMSAddressPhone initFromPurchLine(PurchLine _purchLine)
    {
        TMSAddressPhone  ret = new TMSAddressPhone();

        ret.parmName(_purchLine.DeliveryName != '' ? _purchLine.DeliveryName : InventLocation::find(_purchLine.inventDim().InventLocationId).Name);
        ret.setLogisticsPostalAddress(_purchLine.deliveryAddress());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>PurchTable</c> record.
    /// </summary>
    /// <param name="_purchTable">
    /// Purchase order record
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    public static TMSAddressPhone initFromPurchTable(PurchTable _purchTable)
    {
        return TMSAddressPhone::initFromVendAccount(_purchTable.OrderAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesLine">
    /// Sales line record
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    public static TMSAddressPhone initFromSalesLine(SalesLine _salesLine)
    {
        TMSAddressPhone  ret = new TMSAddressPhone();

        ret.setLogisticsPostalAddress(_salesLine.deliveryAddress());
        ret.parmName(_salesLine.DeliveryName  != '' ? _salesLine.DeliveryName : CustTable::find(_salesLine.CustAccount).name());
        ret.parmResidential(_salesLine.salesTable().ShipCarrierResidential);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>SalesTable</c> record.
    /// </summary>
    /// <param name="_salesTable">
    /// Sales order record
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    public static TMSAddressPhone initFromSalesTable(SalesTable _salesTable)
    {
        TMSAddressPhone  ret = new TMSAddressPhone();

        ret.setLogisticsPostalAddress(_salesTable.deliveryAddress());
        ret.parmName(_salesTable.DeliveryName  != '' ? _salesTable.DeliveryName : CustTable::find(_salesTable.CustAccount).name());
        ret.parmResidential(_salesTable.ShipCarrierResidential);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>InventTransferTable</c> record.
    /// </summary>
    /// <param name="_transferTable">
    /// Transfer order record
    /// </param>
    /// <param name="_initPhoneInformation">
    /// True if phone information needs to be initialized; false, otherwise. Usually initialization is skipped for performance reasons.
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    [Hookable(false)]
    public static TMSAddressPhone initFromInventTransferTable(InventTransferTable _transferTable, boolean _initPhoneInformation = false)
    {
        TMSAddressPhone ret = new TMSAddressPhone();
        
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(_transferTable.ToPostalAddress);
        ret.setLogisticsPostalAddress(address);
        ret.parmName(_transferTable.ToAddressName  != '' ? _transferTable.ToAddressName : InventLocation::find(_transferTable.InventLocationIdTo).Name);

        if (_initPhoneInformation)
        {
            LogisticsElectronicAddress  logisticsElectronicAddress;
            LogisticsLocation           logisticsLocation;

            select firstonly Locator from logisticsElectronicAddress
                where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone
                exists join logisticsLocation
                    where logisticsLocation.RecId == logisticsElectronicAddress.Location
                       && logisticsLocation.ParentLocation == address.Location;

            ret.parmPhone(logisticsElectronicAddress.Locator);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferTableFromAdress</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static TMSAddressPhone initFromInventTransferTableFromAdress(InventTransferTable _transferTable, boolean _initPhoneInformation = false)
    {
        TMSAddressPhone ret = new TMSAddressPhone();
        
        LogisticsPostalAddress address = LogisticsPostalAddress::findRecId(_transferTable.FromPostalAddress);
        ret.setLogisticsPostalAddress(address);
        ret.parmName(_transferTable.FromAddressName  != '' ? _transferTable.FromAddressName : InventLocation::find(_transferTable.InventLocationIdFrom).Name);

        if (_initPhoneInformation)
        {
            LogisticsElectronicAddress  logisticsElectronicAddress;
            LogisticsLocation           logisticsLocation;

            select firstonly Locator from logisticsElectronicAddress
                where logisticsElectronicAddress.Type == LogisticsElectronicAddressMethodType::Phone
                exists join logisticsLocation
                    where logisticsLocation.RecId == logisticsElectronicAddress.Location
                       && logisticsLocation.ParentLocation == address.Location;

            ret.parmPhone(logisticsElectronicAddress.Locator);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TMSAddressPhone</c> object with a <c>VendAccount</c> record. Tries to use the
    /// delivery address of the vendor and if there is not one defined, it selects the primary one.
    /// </summary>
    /// <param name="_account">
    /// Vendor account
    /// </param>
    /// <returns>
    /// The filled-in address information.
    /// </returns>
    public static TMSAddressPhone initFromVendAccount(VendAccount _account)
    {
        VendTable               vendTable   = VendTable::find(_account);
        LogisticsPostalAddress  address;
        TMSAddressPhone         ret         = new TMSAddressPhone();

        address = vendTable.deliveryAddress();

        if (address.RecId == 0)
        {
            address = vendTable.postalAddress();
        }

        ret.setLogisticsPostalAddress(address);
        ret.parmName(vendTable.name());
        ret.parmPhone(vendTable.phone());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveMatchingPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or creates the logistics postal address based on if information has changed or not.
    /// </summary>
    /// <param name="_locationName">
    /// Location name.
    /// </param>
    /// <param name="_street">
    /// Street.
    /// </param>
    /// <param name="_city">
    /// City.
    /// </param>
    /// <param name="_county">
    /// County.
    /// </param>
    /// <param name="_zipCode">
    /// Zip code.
    /// </param>
    /// <param name="_state">
    /// State.
    /// </param>
    /// <param name="_countryRegionId">
    /// Country region id.
    /// </param>
    /// <param name="_originalPostalAddress">
    /// Postal address that is inherited on the rate route workbench.
    /// </param>
    /// <returns>
    /// Postal address record that is either maintained from initial address or created new
    /// </returns>
    public static LogisticsPostalAddress retrieveMatchingPostalAddress(
        Description                     _locationName,
        LogisticsAddressStreet          _street,
        LogisticsAddressCityName        _city,
        LogisticsAddressCountyId        _county,
        LogisticsAddressZipCodeId       _zipCode,
        LogisticsAddressStateId         _state,
        LogisticsAddressCountryRegionId _countryRegionId,
        LogisticsPostalAddressRecId     _originalPostalAddress   = 0
        )
    {
        LogisticsPostalAddress              ret;
        LogisticsPostalAddressEntity        postalAddressEntity = new LogisticsPostalAddressEntity();
        LogisticsPostalAddressView          postalAddressView;
        LogisticsPostalAddress              originalPostalAddress;
        LogisticsLocation                   originalLocation;
        boolean                             createAddress = false;

        if (_originalPostalAddress != 0)
        {
            originalPostalAddress   = LogisticsPostalAddress::findRecId(_originalPostalAddress);
            originalLocation        = LogisticsLocation::find(originalPostalAddress.Location);

            if (originalLocation.Description            == _locationName
            && originalPostalAddress.Street             == _street
            && originalPostalAddress.City               == _city
            && originalPostalAddress.ZipCode            == _zipCode
            && originalPostalAddress.State              == _state
            && originalPostalAddress.County             == _county
            && originalPostalAddress.CountryRegionId    == _countryRegionId)
            {
                ret = originalPostalAddress;
            }
            else
            {
                createAddress = true;
            }
        }
        else
        {
            createAddress = true;
        }

        if (createAddress)
        {
            postalAddressView.LocationName      = _locationName;
            postalAddressView.Street            = _street;
            postalAddressView.City              = _city;
            postalAddressView.ZipCode           = _zipCode;
            postalAddressView.State             = _state;
            postalAddressView.County            = _county;
            postalAddressView.CountryRegionId   = _countryRegionId;

            ret = postalAddressEntity.createPostalAddress(postalAddressView);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventLocationLogisticsLocationPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the postal address based on the inventory location, search by following order; default active and primary active postal address.
    /// </summary>
    /// <param name = "_inventLocation">The inventory location record.</param>
    /// <returns>The <c>LogisticsPostalAddress</c> if found.</returns>
    private static LogisticsPostalAddress findInventLocationLogisticsLocationPostalAddress(InventLocation _inventLocation)
    {
        LogisticsLocationRole       deliveryAddressRole = LogisticsLocationRole::findBytype(LogisticsLocationRoleType::Delivery);
        LogisticsLocationDefault    defaults = LogisticsLocationDefault::construct(_inventLocation);
        LogisticsLocation           logisticsLocation = defaults.getDefaultActiveLocation(deliveryAddressRole);

        if (!logisticsLocation)
        {
            logisticsLocation = InventLocation::getPrimaryActiveLocationFromRole(_inventLocation, deliveryAddressRole);
        }

        return LogisticsPostalAddress::findByLocation(logisticsLocation.RecId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>