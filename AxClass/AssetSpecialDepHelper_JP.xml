<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetSpecialDepHelper_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Helper class for special depreciation
/// </summary>
class AssetSpecialDepHelper_JP
{
    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetAccrual2AssetAccrualFiscal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <C>AssetAccrual</C> to <C>AssetAccrualFiscal</C>
    /// </summary>
    /// <param name="_accrual">
    /// <C>AssetAccrual</C>
    /// </param>
    /// <returns>
    /// <C>AssetAccrualFiscal</C>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function %1 has been incorrectly called.
    /// </exception>
    public static AssetAccrualFiscal assetAccrual2AssetAccrualFiscal(AssetAccrual _accrual)
    {
        AssetAccrualFiscal ret = AssetSpecialDepHelper_JP::getAssetAccrualFiscal(_accrual);
        boolean isKnownAccrual = AssetSpecialDepHelper_JP::checkKnownAssetAccrual(_accrual);

        if (!isKnownAccrual)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAccrualFiscal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <C>AssetAccrualFiscal</C> enumeration value.
    /// </summary>
    /// <param name = "_accrual">
    /// The <c>AssetAccrual</c> enumeration value.
    /// </param>
    /// <returns>
    /// A <c>AssetAccrualFiscal</c> enumeration value.
    /// </returns>
    protected static AssetAccrualFiscal getAssetAccrualFiscal(AssetAccrual _accrual)
    {
        AssetAccrualFiscal assetAccrualFiscal;

        switch (_accrual)
        {
            case AssetAccrual::Yearly:
                assetAccrualFiscal = AssetAccrualFiscal::Yearly;
                break;
            case AssetAccrual::FiscalPeriod:
                assetAccrualFiscal = AssetAccrualFiscal::FiscalPeriod;
                break;
            case AssetAccrual::Quarterly:
                assetAccrualFiscal = AssetAccrualFiscal::Quarterly;
                break;
            default:
                break;
        }

        return assetAccrualFiscal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkKnownAssetAccrual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the given asset accrual is a known accrual.
    /// </summary>
    /// <param name = "_accrual">
    /// The <c>AssetAccrual</c> enumeration value.
    /// </param>
    /// <returns>
    /// true if the <c>AssetAccrual</c> enumeration value is of known type; otherwise, false.
    /// </returns>
    protected static boolean checkKnownAssetAccrual(AssetAccrual _accrual)
    {
        boolean isKnownAccrual = true;

        switch (_accrual)
        {
            case AssetAccrual::Yearly:
            case AssetAccrual::FiscalPeriod:
            case AssetAccrual::Quarterly:
                break;
            default:
                isKnownAccrual = false;
        }

        return isKnownAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetAccuralFiscal2AssetAccural</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <C>AssetAccrualFiscal</C> to <C>AssetAccrual</C>
    /// </summary>
    /// <param name="_assetAccuralFiscal">
    /// <C>AssetAccrualFiscal</C>
    /// </param>
    /// <returns>
    /// <C>AssetAccrual</C>
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function %1 has been incorrectly called.
    /// </exception>
    public static AssetAccrual assetAccuralFiscal2AssetAccural(AssetAccrualFiscal _assetAccuralFiscal)
    {
        AssetAccrual    ret;

        switch (_assetAccuralFiscal)
        {
            case AssetAccrualFiscal::FiscalPeriod:
                ret = AssetAccrual::FiscalPeriod;
                break;
            case AssetAccrualFiscal::Yearly:
                ret = AssetAccrual::Yearly;
                break;
            case AssetAccrualFiscal::Quarterly:
                ret = AssetAccrual::Quarterly;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTableIntervalForAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <C>AssetTableInterval</C> for reserve allocation during special depreciation.
    /// </summary>
    /// <param name="_depBookMap">
    /// An <c>AssetGroupDepBookMap_JP</c> record, which can be an <c>AssetBook</c>, <c>AssetDepBook</c>,
    /// <c>AssetGroupBookSetup</c> or <c>AssetGroupDepBookSetup</c> record.
    /// </param>
    /// <returns>
    /// An instance of <C>AssetTableInterval</C>.
    /// </returns>
    public static AssetTableInterval assetTableIntervalForAllocation(AssetGroupDepBookMap_JP _depBookMap)
    {
        AssetDepreciationProfile    depProfile;
        AssetTableInterval          ret;

        depProfile = _depBookMap.depreciationExtProfile();
        depProfile.Accrual = AssetSpecialDepHelper_JP::assetAccuralFiscal2AssetAccural(_depBookMap.SpecialDepAllocationUnit_JP);
        ret = _depBookMap.AssetGroupDepBookMap_JP::assetTableIntervalForDepProfile(depProfile, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetTableIntervalForAllocationWithDepBookMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of <C>AssetTableInterval</C> for reserve allocation during special depreciation.
    /// </summary>
    /// <param name="_depBookMap">
    /// An <c>AssetDepBookMap_JP</c> record, which can be an <c>AssetBook</c>, <c>AssetDepBook</c> record.
    /// </param>
    /// <returns>
    /// An instance of <C>AssetTableInterval</C>.
    /// </returns>
    public static AssetTableInterval assetTableIntervalForAllocationWithDepBookMap(AssetDepBookMap_JP _depBookMap)
    {
        AssetTableInterval          ret;
        AssetBook                   assetBook;

        assetBook = _depBookMap;
        ret = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(assetBook);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAccumulatedAllocationAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accumulated allocation amount in accounting currency in specified date range.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_fromDate">
    /// Transaction from date.
    /// </param>
    /// <param name="_toDate">
    /// Transaction to date.
    /// </param>
    /// <returns>
    /// The accumulated allocation amount in accounting currency.
    /// </returns>
    public static AssetAmount calcAccumulatedAllocationAmountMst(
        AssetDepBookMap_JP  _assetDepBookMap,
        AssetTransDate      _fromDate,
        AssetTransDate      _toDate)
    {
        AssetAmount     ret;

        ret = AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(_assetDepBookMap, _fromDate, _toDate, AssetTransType::SpecialDepReserveAllocation_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAccumulatedReserveAmountMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the accumulated reserve amount in accounting currency in specified date range.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_fromDate">
    /// Transaction from date.
    /// </param>
    /// <param name="_toDate">
    /// The to date.
    /// </param>
    /// <returns>
    /// The accumulated reserve amount in accounting currency.
    /// </returns>
    public static AssetAmount calcAccumulatedReserveAmountMst(
        AssetDepBookMap_JP  _assetDepBookMap,
        AssetTransDate      _fromDate,
        AssetTransDate      _toDate)
    {
        AssetAmount     ret;

        ret = -AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(_assetDepBookMap, _fromDate, _toDate, AssetTransType::SpecialDepReserve_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllocationEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate special alloation end date
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// Instance of <C>AssetDepBookMap_JP</C>
    /// </param>
    /// <param name="_reserveDate">
    /// Date of special reserve
    /// </param>
    /// <returns>
    /// The end date of special allocation
    /// </returns>
    public static AssetTransDate calcAllocationEndDate(AssetDepBookMap_JP _assetDepBookMap, AssetTransDate _reserveDate)
    {
        AssetTableInterval  interval;
        AssetTransDate      allocationStartDate, allocationEndDate;
        AssetLifeTime       totalAllocationPeriods = _assetDepBookMap.SpecialDepAllocationPeriods_JP;

        interval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocationWithDepBookMap(_assetDepBookMap);
        allocationStartDate = interval.findLastDayOfYear(_reserveDate) + 1;
        while (totalAllocationPeriods > 0)
        {
            allocationEndDate   = interval.endPeriod(allocationStartDate);
            allocationStartDate = allocationEndDate + 1;
            totalAllocationPeriods--;
        }

        return allocationEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAllocationStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the start date of special depreciation allocation
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A <C>AssetDepBookMap_JP</C> record.
    /// </param>
    /// <returns>
    /// Container [end date of reserve, start date of allocation]
    /// </returns>
    public static container calcAllocationStartDate(AssetDepBookMap_JP _assetDepBookMap)
    {
        AssetTransDate              allocationStartDate;
        AssetTransDate              reserveEndDate;
        AssetTransDate              depreciationStartDate   = _assetDepBookMap.DepreciationStartDate;
        AssetDepreciationProfile    depProfile              = _assetDepBookMap.depreciationExtProfile();
        AssetTableInterval          depInterval             = _assetDepBookMap.AssetGroupDepBookMap_JP::assetTableIntervalForDepProfile(depProfile);
        AssetAccrualFiscal          assetAccrualFiscal      = depProfile.accrualFiscal(false, AssetAccrualFiscal::FiscalPeriod);
        int                         applyNumOfPeriods       = depProfile.SpecialDepApplyNumOfPeriods_JP;

        switch (assetAccrualFiscal)
        {
            case AssetAccrualFiscal::FiscalPeriod:
            case AssetAccrualFiscal::Quarterly:
                reserveEndDate = depInterval.startDatePeriodFwd(depreciationStartDate, applyNumOfPeriods)-1;
                if (_assetDepBookMap.SpecialDepAllocationConvention_JP ==AssetSpecialDepAllocationConvention_JP::FollowingFiscalPeriod)
                {
                    allocationStartDate = reserveEndDate + 1;
                }
                else
                {
                    allocationStartDate = depInterval.findLastDayOfYear(reserveEndDate) + 1;
                }
                break;
            default:
                allocationStartDate = depreciationStartDate;
                while (applyNumOfPeriods > 0)
                {
                    reserveEndDate = depInterval.findLastDayOfYear(allocationStartDate);
                    allocationStartDate = reserveEndDate+1;
                    applyNumOfPeriods--;
                }
                break;
        }

        return [reserveEndDate, allocationStartDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates asset document type for the transaction
    /// </summary>
    /// <param name="_depProfile">
    /// <C>AssetDepreciationProfile</C>
    /// </param>
    /// <param name="_transDate">
    /// Transaction date
    /// </param>
    /// <param name="_allocationStartDate">
    /// Allocation start date of special depreciation under reserve accounting method
    /// </param>
    /// <returns>
    /// Asset document type
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Function %1 has been incorrectly called.
    /// </exception>
    public static AssetDocumentType_JP calcAssetDocumentType(AssetDepreciationProfile _depProfile, AssetTransDate _transDate, AssetTransDate _allocationStartDate = dateNull())
    {
        AssetDocumentType_JP    ret;

        switch (_depProfile.Method)
        {
            case AssetDepreciationMethod::SpecialDepreciation_JP:
                switch (_depProfile.SpecialDepAccountingMethod_JP)
                {
                    case AssetSpecialDepAccountingMethod_JP::DirectOff:
                        ret = AssetDocumentType_JP::SpecialDepDirectOff;
                        break;
                    case AssetSpecialDepAccountingMethod_JP::Reserve:
                        if (_transDate < _allocationStartDate)
                        {
                            ret = AssetDocumentType_JP::SpecialDepReserve;
                        }
                        else
                        {
                            ret = AssetDocumentType_JP::SpecialDepReserveAllocation;
                        }
                        break;
                    default:
                        throw error(error::wrongUseOfFunction(funcName()));
                }
                break;

            case AssetDepreciationMethod::AdditionalDepreciation_JP:
                switch (_depProfile.SpecialDepAccountingMethod_JP)
                {
                    case AssetSpecialDepAccountingMethod_JP::DirectOff:
                        ret = AssetDocumentType_JP::AdditionalDepDirectOff;
                        break;
                    case AssetSpecialDepAccountingMethod_JP::Reserve:
                        ret = AssetDocumentType_JP::AdditionalDepReserve;
                        break;
                    default:
                        throw error(error::wrongUseOfFunction(funcName()));
                }
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalOfAccumuAllocDepAmtMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated allocation amount in accounting currency for the specified date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_assetTableInterval">
    /// An instance of an <c>AssetTableInterval</c> subclass.
    /// </param>
    /// <param name="_date">
    /// The date to calculate beginning balance.
    /// </param>
    /// <returns>
    /// The beginning balance of accumulated allocation amount in accounting currency.
    /// </returns>
    public static AssetAmount calcBeginningBalOfAccumuAllocDepAmtMst(
        AssetDepBookMap_JP  _assetDepBookMap,
        AssetTableInterval  _assetTableInterval,
        AssetTransDate      _date)
    {
        AssetAmount     ret;

        ret = AssetDepTransMap_JP::calcBeginningBalOfAccuAmtMstPerTransType(_assetDepBookMap, _assetTableInterval, _date, AssetTransType::SpecialDepReserveAllocation_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalOfAccumuDirOffDepAmtMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated direct-off amount in accounting currency for the specified date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_assetTableInterval">
    /// An instance of an <c>AssetTableInterval</c> subclass.
    /// </param>
    /// <param name="_date">
    /// The date to calculate beginning balance.
    /// </param>
    /// <returns>
    /// The beginning balance of accumulated direct-off amount in accounting currency.
    /// </returns>
    public static AssetAmount calcBeginningBalOfAccumuDirOffDepAmtMst(
        AssetDepBookMap_JP  _assetDepBookMap,
        AssetTableInterval  _assetTableInterval,
        AssetTransDate      _date)
    {
        AssetAmount     ret;

        ret = AssetDepTransMap_JP::calcBeginningBalOfAccumuExtDepAmtMst(_assetDepBookMap, _assetTableInterval, _date, 0, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcBeginningBalOfAccumuReserveDepAmtMst</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the beginning balance of accumulated reserve amount in accounting currency for the specified date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// A buffer of a table that mapped to map <C>AssetDepBookMap_JP</C>.
    /// </param>
    /// <param name="_assetTableInterval">
    /// An instance of an <c>AssetTableInterval</c> subclass.
    /// </param>
    /// <param name="_date">
    /// The date to calculate beginning balance.
    /// </param>
    /// <returns>
    /// The beginning balance of accumulated reserve amount in accounting currency.
    /// </returns>
    public static AssetAmount calcBeginningBalOfAccumuReserveDepAmtMst(
        AssetDepBookMap_JP  _assetDepBookMap,
        AssetTableInterval  _assetTableInterval,
        AssetTransDate      _date)
    {
        AssetAmount     ret;

        ret = -AssetDepTransMap_JP::calcBeginningBalOfAccuAmtMstPerTransType(_assetDepBookMap, _assetTableInterval, _date, AssetTransType::SpecialDepReserve_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfAllocatedPeriodsInCurYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calcualte the number of allocation periods for the specified year
    /// </summary>
    /// <param name="_depBookMap">
    /// Instance of <C>AssetDepBookMap_JP</C>
    /// </param>
    /// <param name="_date">
    /// The date to identify the year
    /// </param>
    /// <returns>
    /// The number of allocation periods for the specified year
    /// </returns>
    public static int calcNumOfAllocatedPeriodsInCurYear(
        AssetGroupDepBookMap_JP _depBookMap,
        AssetTransDate          _date)
    {
        int                 ret;
        AssetTableInterval  assetTableInterval;

        assetTableInterval  = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(_depBookMap);
        ret = assetTableInterval.numOfPeriodsLeftInYear(_date);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcNumOfYearsToReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of years to reserve during special depreciation under reserve accounting method
    /// </summary>
    /// <param name="_calcArgs">
    /// An instance of class <C>AssetDepCalculationArgs_JP</C> which includes all calculation related parameters.
    /// </param>
    /// <returns>
    /// Number of years to reserve
    /// </returns>
    public static int calcNumOfYearsToReserve(AssetDepCalculationArgs_JP _calcArgs)
    {
        int                     ret=1;
        AssetTableInterval      depInterval = _calcArgs.parmAssetTableInterval();
        AssetTransDate          startDate = _calcArgs.parmDepreciationStartDate();
        AssetTransDate          endDate = _calcArgs.parmSpecialDepAllocationStartDate()-1;
        AssetTransDate          lastDayOfYear = depInterval.findLastDayOfYear(startDate);

        while (lastDayOfYear && lastDayOfYear < endDate)
        {
            startDate = lastDayOfYear+1;
            lastDayOfYear = depInterval.findLastDayOfYear(startDate);
            ret++;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReserveAllocationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates reserve allocation periods
    /// </summary>
    /// <param name="_depBookMap">
    /// An <c>AssetGroupDepBookMap_JP</c> record.
    /// </param>
    /// <returns>
    /// Number of periods to reserve allocation.
    /// </returns>
    protected static AssetSpecialDepAllocationPeriods_JP calcReserveAllocationPeriods(AssetGroupDepBookMap_JP _depBookMap)
    {
        AssetSpecialDepAllocationPeriods_JP ret;
        AssetTableInterval                  assetTableInterval;
        AssetServiceLife                    svcLife, allocationYears;

        svcLife = _depBookMap.AssetGroupDepBookMap_JP::CurrentServiceLife();
        if (svcLife >= #ServiceLife10)
        {
            allocationYears = #ServiceLife7;
        }
        else if (svcLife >= #ServiceLife5)
        {
            allocationYears = #ServiceLife5;
        }
        else
        {
            allocationYears = svcLife;
        }

        assetTableInterval = AssetSpecialDepHelper_JP::assetTableIntervalForAllocation(_depBookMap);
        ret = assetTableInterval.yearToPeriod(allocationYears);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReserveEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate reserve effective date according to the special allocation last date.
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// Instance of <C>AssetDepBookMap_JP</C>
    /// </param>
    /// <returns>
    /// The effective reserve date for the special allocation last date
    /// </returns>
    public static AssetTransDate calcReserveEffectiveDate(AssetDepBookMap_JP _assetDepBookMap)
    {
        AssetTransDate      effectiveReserveDate;
        AssetTableInterval  assetTableInterval;
        int                 allocationPeriods;
        AssetTransDate      startAllocationDate;

        if (_assetDepBookMap.SpecialDepLastAllocationDate)
        {
            assetTableInterval  = AssetSpecialDepHelper_JP::assetTableIntervalForAllocationWithDepBookMap(_assetDepBookMap);
            allocationPeriods   = _assetDepBookMap.SpecialDepAllocationPeriods_JP;
            startAllocationDate = assetTableInterval.startOfPeriod(_assetDepBookMap.SpecialDepLastAllocationDate + 1);

            while (allocationPeriods > 1 && startAllocationDate)
            {
                startAllocationDate = assetTableInterval.startOfPeriod(startAllocationDate - 1);
                allocationPeriods--;
            }

            if (startAllocationDate)
            {
                effectiveReserveDate = assetTableInterval.findFirstDayOfYear(assetTableInterval.findFirstDayOfYear(startAllocationDate) - 1);
            }
        }

        return effectiveReserveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReserveEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate special reserve end date
    /// </summary>
    /// <param name="_assetDepBookMap">
    /// Instance of <C>AssetDepBookMap_JP</C>
    /// </param>
    /// <param name="_reserveStartDate">
    /// Start date of special reserve
    /// </param>
    /// <returns>
    /// The end date of special reserve
    /// </returns>
    public static AssetTransDate calcReserveEndDate(AssetDepBookMap_JP _assetDepBookMap, AssetTransDate _reserveStartDate)
    {
        AssetTransDate      reserveEndDate;
        AssetTableInterval  interval;
        int                 applyNumOfPeriods;

        interval            = _assetDepBookMap.AssetDepBookMap_JP::assetTableInterval(dateNull(), true, true);
        applyNumOfPeriods   = _assetDepBookMap.depreciationExtProfile().SpecialDepApplyNumOfPeriods_JP;
        reserveEndDate      = interval.endPeriod(_reserveStartDate);

        while (applyNumOfPeriods > 1)
        {
            reserveEndDate      = interval.endPeriod(reserveEndDate + 1);
            applyNumOfPeriods--;
        }

        return reserveEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDefaultAllocationPeriods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates default allocation unit and periods for value for value mode and depreciation book on fixed asset level
    /// </summary>
    /// <param name="_depBookMap">
    /// An <c>AssetGroupDepBookMap_JP</c> record, which can be an <c>AssetBook</c>, <c>AssetDepBook</c>,
    /// <c>AssetGroupBookSetup</c>, <c>AssetGroupDepBookSetup</c> or <c>AssetDepBookMap_JP</c> record.
    /// </param>
    /// <param name="_updateAllocationUnit">
    /// Whether to update allocation unit or not.
    /// </param>
    public static void updateDefaultAllocationPeriods(AssetGroupDepBookMap_JP _depBookMap, boolean _updateAllocationUnit = false)
    {
        AssetDepreciationProfile depProfile = _depBookMap.depreciationExtProfile();

        if (depProfile
            && AssetDepreciationprofile::isSpecialDepMethod_JP(depProfile.Method)
            && depProfile.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::Reserve)
        {
            if (_updateAllocationUnit)
            {
                _depBookMap.SpecialDepAllocationUnit_JP = AssetSpecialDepHelper_JP::AssetAccrual2AssetAccrualFiscal(depProfile.Accrual);
            }

            _depBookMap.SpecialDepAllocationPeriods_JP = AssetSpecialDepHelper_JP::calcReserveAllocationPeriods(_depBookMap);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>