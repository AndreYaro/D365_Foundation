<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesExportFineLedgerJournal_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesExportFineLedgerJournal_RU extends RunBaseBatch implements BatchRetryable
{
    LedgerJournalNameId     journalNameId;
    DialogField             dlgJournalNameId;
    NoYesId                 postJournal;
    DialogField             dlgPostJournal;

    JournalTableData        journalTableData;

    SalesTmpExportFactureProcessing_RU  tmpExportFactureProcessing;

    protected const int currentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    protected void createJournal()
    {
        LedgerJournalTable ledgerJournalTable;

        journalTableData = JournalTableData::newTable(ledgerJournalTable);
        ledgerJournalTable.JournalNum = journalTableData.nextJournalId();
        ledgerJournalTable.initFromLedgerJournalName(journalNameId);
        ledgerJournalTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    protected void createJournalLines()
    {
        LedgerJournalTrans  ledgerJournalTrans;
        FactureTrans_RU     factureTrans;

        LineNum             lineNum;

        JournalVoucherNum journalVoucherNum = new JournalVoucherNum(journalTableData);

        while select sum(FineAmountToPost), TaxCode from factureTrans
            group by TaxCode
            where factureTrans.FactureId == tmpExportFactureProcessing.FactureId &&
                  factureTrans.Module    == tmpExportFactureProcessing.Module
        {
            if (factureTrans.FineAmountToPost != 0)
            {
                ++lineNum;
                Voucher voucher = journalVoucherNum.getNew(true);

                ledgerJournalTrans.clear();
                ledgerJournalTrans.Voucher      = voucher;
                ledgerJournalTrans.JournalNum   = journalTableData.journalTable().JournalId;
                ledgerJournalTrans.LineNum      = lineNum;
                ledgerJournalTrans.TransDate    = tmpExportFactureProcessing.FineCalculationDate;

                this.initJournalLine(ledgerJournalTrans, factureTrans);

                ledgerJournalTrans.insert();
                journalVoucherNum.used(voucher);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dlgJournalNameId = dialog.addFieldValue(extendedTypeStr(LedgerJournalNameId), journalNameId);
        dlgJournalNameId.registerOverrideMethod(methodStr(FormStringControl, lookup),
            methodStr(SalesExportFineLedgerJournal_RU, journalNameIdLookup), this);
        dlgPostJournal   = dialog.addFieldValue(extendedTypeStr(NoYesId), postJournal, "@SYS6098", "@SYS85344");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameIdLookup</Name>
				<Source><![CDATA[
    private void journalNameIdLookup(FormStringControl _control)
    {
        LedgerJournalName::lookupJournalName(_control, '', '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
        journalNameId = dlgJournalNameId.value();
        postJournal   = dlgPostJournal.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalLine</Name>
				<Source><![CDATA[
    private void initJournalLine(LedgerJournalTrans _journalTrans, FactureTrans_RU  _factureTrans)
    {
        _journalTrans.parmLedgerDimension(
            _journalTrans.getLedgerDimensionForLedgerType(this.ledgerDimension(_factureTrans.TaxCode), curext()));
        _journalTrans.AccountType          = LedgerJournalACType::Ledger;
        _journalTrans.TransactionType      = LedgerTransType::None;
        _journalTrans.CurrencyCode         = CompanyInfoHelper::standardCurrency();
        _journalTrans.ExchRate             = ExchangeRateHelper::exchRate(_journalTrans.CurrencyCode, _journalTrans.TransDate);
        _journalTrans.Txt                  = "";
        _journalTrans.Company              = curext();
        _journalTrans.OffsetCompany        = curext();
        _journalTrans.OffsetAccountType    = LedgerJournalACType::Ledger;
        _journalTrans.parmOffsetLedgerDimension(
            _journalTrans.getLedgerDimensionForLedgerType(this.offsetLedgerDimension(_factureTrans.TaxCode), curext()));
        _journalTrans.AmountCurDebit       = CurrencyExchangeHelper::amount(_factureTrans.FineAmountToPost, _journalTrans.CurrencyCode);
        _journalTrans.TaxCode              = _factureTrans.TaxCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount ledgerDimension(TaxCode    _taxCode)
    {
        return RTax25TaxTable::find(RTax25TaxModule::Tax, _taxCode).ExportVATFineLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>offsetLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount offsetLedgerDimension(TaxCode    _taxCode)
    {
        TaxAccountGroup taxAccountGroup = TaxTable::findAccountGroup(_taxCode);
        TaxLedgerAccountGroup taxLedgerAccountGroup = TaxLedgerAccountGroup::find(taxAccountGroup);

        return taxLedgerAccountGroup.TaxFineLedgerDimension_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, journalNameId, postJournal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpFactureProcessing</Name>
				<Source><![CDATA[
    void parmTmpFactureProcessing(SalesTmpExportFactureProcessing_RU _tmpExportFactureProcessing)
    {
        tmpExportFactureProcessing = _tmpExportFactureProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postJournal</Name>
				<Source><![CDATA[
    protected void postJournal()
    {
        if (postJournal)
        {
            LedgerJournalCheckPost journalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(journalTableData.journalTable(), NoYes::Yes);
            LedgerJournalCheckPost::processOperation(journalCheckPost);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            select forupdate tmpExportFactureProcessing
                where tmpExportFactureProcessing.Mark == NoYes::Yes;

            if (tmpExportFactureProcessing)
            {
                ttsbegin;
                this.createJournal();

                while (tmpExportFactureProcessing)
                {
                    this.createJournalLines();
                    this.updateFacture();
                    tmpExportFactureProcessing.delete();
                    next tmpExportFactureProcessing;
                }

                info(strFmt("@GLS113153", journalTableData.journalTable().JournalId));
                this.postJournal();
                ttscommit;

                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00026, funcName());
            }
        }
        catch
        {
            error("@GLS113154");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case currentVersion:
                [version, journalNameId, postJournal] = packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFacture</Name>
				<Source><![CDATA[
    protected void updateFacture()
    {
        FactureJour_RU factureJournal = tmpExportFactureProcessing.factureJour(true);
        factureJournal.FineCalculationDate = tmpExportFactureProcessing.FineCalculationDate;
        factureJournal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (!journalNameId)
        {
            ret = checkFailed("@GLS113155");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesExportFineLedgerJournal_RU construct( SalesTmpExportFactureProcessing_RU  _tmpExportFactureProcessing)
    {
        SalesExportFineLedgerJournal_RU fineLedgerJournal = new SalesExportFineLedgerJournal_RU();
        fineLedgerJournal.parmTmpFactureProcessing(_tmpExportFactureProcessing);

        return fineLedgerJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return  "@GLS113152";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>