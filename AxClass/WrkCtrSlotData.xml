<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrSlotData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WrkCtrSlotData
{
    Integer          num;
    Integer          qty;

    TransDate        transDate[];
    Seconds          fromTime[];
    Seconds          toTime[];
    RealBase    capacity[];
    RealBase    percent[];
    RealBase    capPerSec[];
    PropertyId       property[];
    Integer          overlap[];

    Integer          saveLevel;
    Integer          saveStak[];

    TransDate        firstDate;
    TransDate        lastDate;
    Seconds          firstTime;
    Seconds          lastTime;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcConflictInterval</Name>
				<Source><![CDATA[
        Integer calcConflictInterval(Percent                   _percent,
                                 SchedDirection            _direction,
                                 TransDate                 _fromDate,
                                 Seconds                   _fromTime,
                                 TransDate                 _toDate,
                                 Seconds                   _toTime)
    {
        Integer          x;
        Integer          y;
        Integer          conflictNum;

        while (x < qty)
        {
            x += 1;

            if (_percent + percent[x] > 100)
            {
                y = 0;
                if (_direction == SchedDirection::Forward)
                {
                    if (transDate[x] > _fromDate || (transDate[x] == _fromDate && toTime[x] > _fromTime))
                    {
                        y = x;
                        _fromDate   = transDate[x];
                        _fromTime   = toTime[x];
                    }
                }
                else
                {
                    if (transDate[x] < _toDate || (transDate[x] == _toDate && fromTime[x] < _toTime))
                    {
                        y = x;
                        _toDate     = transDate[x];
                        _toTime     = fromTime[x];
                    }
                }

                if (y)
                    conflictNum = y;
            }
        }

        return conflictNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOverlapTypeSlots</Name>
				<Source><![CDATA[
        WrkCtrOverlapType calcOverlapTypeSlots(Integer y, Integer x) // MRPCapacityTable.CalcOverlaps
    {
        return ProdMultiScheduling::calcOverlap(transDate[y],
                                          transDate[y],
                                          fromTime[y],
                                          toTime[y],
                                          transDate[x],
                                          transDate[x],
                                          fromTime[x],
                                          toTime[x]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
        boolean find(Integer idx) // MRPCapacityTable.SetNum
    {
        if (idx < 1 || idx > qty)
            return false;

        num = idx;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>first</Name>
				<Source><![CDATA[
        boolean first()
    {
        if (qty < 1)
            return false;

        num = 1;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstDate</Name>
				<Source><![CDATA[
        TransDate firstDate()
    {
        return firstDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>firstTime</Name>
				<Source><![CDATA[
        Seconds firstTime()
    {
        return firstTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
        void insert(TransDate           _transDate,
                Seconds             _fromSec,
                Seconds             _toSec,
                RealBase       _capacity,
                RealBase       _percent     = 100,
                PropertyId          _property    = '',
                RealBase       _capPrSec    = -1,
                Integer             _overlap     =  1
               )
    {
        if (_toSec  > _fromSec)
        {
            qty   += 1;

            transDate[qty]      = _transDate;
            fromTime[qty]       = _fromSec;
            toTime[qty]         = _toSec;
            capacity[qty]       = _capacity;
            percent[qty]        = _percent;
            property[qty]       = _property;
            overlap[qty]        = _overlap;

            capPerSec[qty]    = _capPrSec != -1 ? _capPrSec : _capacity  / (_toSec  - _fromSec);

            if (qty == 1)
            {
                firstDate   = _transDate;
                firstTime   = _fromSec;
                lastDate    = _transDate;
                lastTime    = _toSec;
            }
            else
            {
                if (_transDate <  firstDate   ||
                   (_transDate == firstDate   && _fromSec < firstTime))
                {
                    firstDate   = _transDate;
                    firstTime   = _fromSec;
                }

                if (_transDate >  lastDate     ||
                   (_transDate == lastDate     && _toSec  > lastTime))
                {
                    lastDate    = _transDate;
                    lastTime    = _toSec;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCopySlot</Name>
				<Source><![CDATA[
        void insertCopySlot(Integer x)
    {
        this.insert(transDate[x],
                    fromTime[x],
                    toTime[x],
                    capacity[x],
                    percent[x],
                    property[x],
                    capPerSec[x],
                    overlap[x]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>last</Name>
				<Source><![CDATA[
        boolean last()
    {
        if (qty < 1)
            return false;

        num = qty;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDate</Name>
				<Source><![CDATA[
        TransDate lastDate()
    {
        return lastDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastTime</Name>
				<Source><![CDATA[
        Seconds lastTime()
    {
        return lastTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCopyCriteriaOverlaps</Name>
				<Source><![CDATA[
        WrkCtrSlotData newCopyCriteriaOverlaps(Integer _overlaps, PropertyId _property = '')
    {
        WrkCtrSlotData wrkCtrSlotData = new WrkCtrSlotData();

        Integer     x;

        x = 0;

        while (x < qty)
        {
            x += 1;

            if (overlap[x]      == _overlaps        &&
                fromTime[x]     <  toTime[x]        &&
               (property[x]     == _property || _property == ''))
            {
                wrkCtrSlotData.insert(transDate[x],
                                      fromTime[x],
                                      toTime[x],
                                      capacity[x],
                                      percent[x],
                                      property[x],
                                      capPerSec[x],
                                      overlap[x]);
            }
        }

        return wrkCtrSlotData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>next</Name>
				<Source><![CDATA[
        boolean next()
    {
        if (num >= qty)
            return false;

        num++;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        container pack()
    {
        Integer     x = 1;
        container   data;

        data = conins(data,x,[firstDate,
                              firstTime,
                              lastDate,
                              lastTime,
                              qty]);

        while (x <= qty)
        {
            data = conins(data,x+1,[transDate[x],
                                    fromTime[x],
                                    toTime[x],
                                    capacity[x],
                                    percent[x],
                                    capPerSec[x],
                                    property[x],
                                    overlap[x]]);
            x++;
        }

        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prev</Name>
				<Source><![CDATA[
        boolean prev()
    {
        if (num <= 1)
            return false;

        num--;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
        Integer qty()
    {
        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Capacity</Name>
				<Source><![CDATA[
        RealBase rec_Capacity()
    {
        return capacity[num];
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_FromTime</Name>
				<Source><![CDATA[
        Seconds rec_FromTime()
    {
        return fromTime[num];
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_Overlap</Name>
				<Source><![CDATA[
        Integer  rec_Overlap()
    {
        return overlap[num];
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_ToTime</Name>
				<Source><![CDATA[
        Seconds  rec_ToTime()
    {
        return toTime[num];
    }

]]></Source>
			</Method>
			<Method>
				<Name>rec_TransDate</Name>
				<Source><![CDATA[
        TransDate rec_TransDate()
    {
        return transDate[num];
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortDateTime</Name>
				<Source><![CDATA[
        void sortDateTime()  // MRpCapacityTable.Sorting
    {
        boolean         stop;
        Integer         x;
        Integer         y;
        Integer         z;

        if (qty   > 1)
        {
            stop = false;
            while (! stop)
            {
                stop = true;
                x = 0;

                while (x < qty   - 1)
                {
                    x += 1;

                    if (transDate[x]    >  transDate[x+1]  ||
                       (transDate[x]    == transDate[x+1]  &&  fromTime[x]  >  fromTime[x+1]) )
                    {
                        z = qty   + 1;
                        transDate[z]       = transDate[x];
                        fromTime[z]        = fromTime[x];
                        toTime[z]          = toTime[x];
                        capacity[z]        = capacity[x];
                        capPerSec[z]       = capPerSec[x];
                        percent[z]         = percent[x];
                        property[z]        = property[x];
                        overlap[z]         = overlap[x];

                        y = x + 1;
                        transDate[x]       = transDate[y];
                        fromTime[x]        = fromTime[y];
                        toTime[x]          = toTime[y];
                        capacity[x]        = capacity[y];
                        capPerSec[x]       = capPerSec[y];
                        percent[x]         = percent[y];
                        overlap[x]         = overlap[y];

                        transDate[y]       = transDate[z];
                        fromTime[y]        = fromTime[z];
                        toTime[y]          = toTime[z];
                        capacity[y]        = capacity[z];
                        capPerSec[y]       = capPerSec[z];
                        percent[y]         = percent[z];
                        overlap[y]         = overlap[z];

                        stop = false;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpSlots</Name>
				<Source><![CDATA[
        void sumUpSlots(int minMaxPerSec = 0)    // MRPCapacityTable.SumUpIntervals
    {
        int             overlapType;

        Integer         x;
        Integer         y;

        void xPlusY(Integer xVal, Integer yVal)
        {
            overlap[xVal]     = overlap[xVal]  + overlap[yVal];
            percent[xVal]     = percent[xVal]  + percent[yVal];

            if (minMaxPerSec== 0)
                capPerSec[xVal]   = min(capPerSec[yVal],capPerSec[xVal]);
            else
                capPerSec[xVal]   = max(capPerSec[yVal],capPerSec[xVal]);

            property[xVal] = property[xVal] ? property[xVal] : property[yVal];
        }

        if (qty   > 1)
        {
            x = 0;
            while (x < qty   - 1)
            {
                x += 1;
                y = x;

                while (y < qty   && percent[x] > 0)
                {
                    y += 1;

                    if (transDate[x] == transDate[y] && percent[y] > 0)
                    {
                        overlapType = this.calcOverlapTypeSlots(y,x);

                        if (overlapType == WrkCtrOverlapType::Start)
                        {
                            if (fromTime[y] == fromTime[x])
                            {
                                xPlusY(x,y);

                                fromTime[y] = toTime[x];
                            }
                            else
                            {
                                this.insertCopySlot(y);
                                xPlusY(y,x);

                                fromTime[qty] = toTime[x];

                                toTime[y]      = toTime[x];
                                toTime[x]      = fromTime[y];
                            }
                        }
                        else if (overlapType == WrkCtrOverlapType::End)
                        {
                            if (toTime[y] == toTime[x])
                            {
                                xPlusY(x,y);

                                toTime[y]  = fromTime[x];
                            }
                            else
                            {
                                this.insertCopySlot(y);
                                xPlusY(y,x);

                                toTime[qty] = fromTime[x];
                                fromTime[y]      = fromTime[x];
                                fromTime[x]      = toTime[y];
                            }
                        }
                        else if (overlapType == WrkCtrOverlapType::Complete)
                        {
                            if (fromTime[x] == fromTime[y] && toTime[x] == toTime[y])
                            {
                                xPlusY(x,y);

                                overlap[y] = 0;
                                percent[y]  = 0;
                                capPerSec[y] = 0;
                            }
                            else
                            if (fromTime[y] == fromTime[x])
                            {
                                xPlusY(y,x);

                                fromTime[x]  = toTime[y];
                            }
                            else
                            if (toTime[y] == toTime[x])
                            {
                                xPlusY(y,x);

                                toTime[x]  = fromTime[y];
                            }
                            else
                            {
                                this.insertCopySlot(x);
                                xPlusY(y,x);

                                fromTime[qty] = toTime[y];
                                toTime[x]     = fromTime[y];
                            }
                        }
                        else if (overlapType == WrkCtrOverlapType::Subset)
                        {
                            this.insertCopySlot(y);
                            xPlusY(x,y);

                            fromTime[qty]  = toTime[x];
                            toTime[y]      = fromTime[x];
                        }
                    }
                }
            }

            x = 0;
            while (x < qty)
            {
                x += 1;
                capacity[x] = capPerSec[x] * (toTime[x] - fromTime[x]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unPack</Name>
				<Source><![CDATA[
        void unPack(container data)
    {
        Integer     x;

        [firstDate,
         firstTime,
         lastDate,
         lastTime,
         qty]   = conpeek(data,1);

        while (x < qty)
        {
            x++;

            [transDate[x],
             fromTime[x],
             toTime[x],
             capacity[x],
             percent[x],
             capPerSec[x],
             property[x],
             overlap[x]] = conpeek(data,x + 1);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>