<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceOnhandChangeScheduleHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceOnhandChangeScheduleHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>InventTrans_onInserted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTrans), DataEventType::Inserted)]
    public static void InventTrans_onInserted(Common _sender, DataEventArgs _e)
    {
        InventTrans inventTrans = _sender as InventTrans;

        if (InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans) &&
            InventInventoryDataServiceOnhandChangeScheduleHandler::isAtpIntegrationEnabled())
        {
            InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTrans_onUpdated</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTrans), DataEventType::Updated)]
    public static void InventTrans_onUpdated(Common _sender, DataEventArgs _e)
    {
        InventTrans inventTrans = _sender as InventTrans;

        if (InventInventoryDataServiceOnhandChangeScheduleHandler::isAtpIntegrationEnabled())
        {
            if (inventTrans.Qty > 0 &&
                inventTrans.StatusIssue == StatusIssue::None)
            {
                if (inventTrans.orig().StatusReceipt > StatusReceipt::Ordered &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans))
                {
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans);
                }
                else if (inventTrans.StatusReceipt < StatusReceipt::Arrived &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans.orig()))
                {
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans.orig(), true);
                }
                else if (InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans)    &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans.orig())  &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isOhcsRelatedUpdate(inventTrans))
                {
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans.orig(), true);
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans);
                }
            }
            else if (inventTrans.Qty < 0 &&
                inventTrans.StatusReceipt == StatusReceipt::None)
            {
                if (inventTrans.orig().StatusIssue > statusIssue::OnOrder &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans))
                {
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans);
                }
                else if (inventTrans.StatusIssue < StatusIssue::ReservPhysical &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans.orig()))
                {
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans.orig(), true);
                }
                else if (InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans)      &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans.orig())    &&
                    InventInventoryDataServiceOnhandChangeScheduleHandler::isOhcsRelatedUpdate(inventTrans))
                {
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans.orig(), true);
                    InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>InventTrans_onDeleted</Name>
				<Source><![CDATA[
    [DataEventHandler(tableStr(InventTrans), DataEventType::Deleted)]
    public static void InventTrans_onDeleted(Common _sender, DataEventArgs _e)
    {
        InventTrans inventTrans = _sender as InventTrans;
        
        if (InventInventoryDataServiceOnhandChangeScheduleHandler::isInventTransConsideredForOhcs(inventTrans) &&
            InventInventoryDataServiceOnhandChangeScheduleHandler::isAtpIntegrationEnabled())
        {
            InventInventoryDataServiceOnhandChangeScheduleQueue::insertInventtransToOhcsQueue(inventTrans, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOhcsRelatedUpdate</Name>
				<Source><![CDATA[
    private static boolean isOhcsRelatedUpdate(InventTrans _inventTrans)
    {
        if (_inventTrans.ItemId != _inventTrans.orig().ItemId || _inventTrans.InventDimId != _inventTrans.orig().InventDimId || _inventTrans.DateExpected != _inventTrans.orig().DateExpected ||
            _inventTrans.Qty != _inventTrans.orig().Qty ||  _inventTrans.StatusIssue != _inventTrans.orig().StatusIssue || _inventTrans.StatusReceipt != _inventTrans.orig().StatusReceipt)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAtpIntegrationEnabled</Name>
				<Source><![CDATA[
    private static boolean isAtpIntegrationEnabled()
    {
        if (FeatureStateProvider::isFeatureEnabled(InventInventoryDataServiceOnhandChangeScheduleFeature::instance()))
        {
            InventInventoryDataServiceParameters parameter = InventInventoryDataServiceParameters::find();
            InventoryServiceStatus atpStatus = parameter.InventoryServiceAtpStatus;

            return atpStatus == InventoryServiceStatus::InitialSync || atpStatus == InventoryServiceStatus::Enabled;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventTransConsideredForOhcs</Name>
				<Source><![CDATA[
    private static boolean isInventTransConsideredForOhcs(InventTrans _inventTrans)
    {
        if ((_inventTrans.Qty > 0 && 
            _inventTrans.StatusIssue == StatusIssue::None && 
            _inventTrans.StatusReceipt <= StatusReceipt::Ordered && 
            _inventTrans.StatusReceipt >= StatusReceipt::Arrived) ||
            (_inventTrans.Qty < 0 && 
            _inventTrans.StatusReceipt == StatusReceipt::None && 
            _inventTrans.StatusIssue <= StatusIssue::OnOrder &&  
            _inventTrans.StatusIssue >= StatusIssue::ReservPhysical))
        {   
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionExcluded</Name>
				<Source><![CDATA[
    private static boolean isTransactionExcluded(InventTrans _inventTrans)
    {
        Purchline           purchLine;
        SalesLine           salesLine;

        InventTransOrigin inventTransOrigin = InventTransOrigin::find(_inventTrans.InventTransOrigin);
        InventTransType inventTransType = inventTransOrigin.ReferenceCategory;

        if (inventTransType == InventTransType::Sales)
        {
            select firstonly DeliveryType from salesLine
                where salesLine.InventTransId == inventTransOrigin.InventTransId;

            if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
            {
                return true;
            }
        }

        if (inventTransType == InventTransType::Purch)
        {
            select firstonly DeliveryType from purchLine
                where purchLine.InventTransId == inventTransOrigin.InventTransId;

            if (purchLine.DeliveryType == TradeLineDlvType::DropShip)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>