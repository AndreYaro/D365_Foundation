<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSalesShipmentAnalysisDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesShipmentAnalysisReportDP</c> class is the Report Data Provider class for the<c>SalesShipmentReport</c> Overview Report.
/// </summary>
/// <remarks>
/// This is the RDP class for the Inventory <c>SalesShipmentReport</c> SRS Report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(InventSalesShipmentAnalysisContract_CN))
]
class InventSalesShipmentAnalysisDP_CN extends SrsReportDataProviderPreProcessTempDB
{
    //TMP table and contract class
    InventSalesShipmentAnalysisTmp_CN salesShipmentAnalysisTmp_CN;
    InventSalesShipmentAnalysisContract_CN contract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>executeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the related query to get data
    /// </summary>
    private void executeQuery()
    {
        //Initial Contract class
        contract = this.parmDataContract() as InventSalesShipmentAnalysisContract_CN;

        //Get parameters from Contract
        ItemId itemId = contract.parmItemId();
        CustAccount custAccount = contract.parmCustAccount();
        PackingSlipId packingSlipId = contract.parmPackingSlipId();
        TransDate fromDate = contract.parmFromDate();
        TransDate toDate = contract.parmToDate();
        TMSCarrierCode carrierCode = contract.parmCarrierCode();

        Query queryOrder = this.buildQueryForOrder();
        SysQuery::findOrCreateRange(queryOrder.dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, ItemId)).value(itemId);
        SysQuery::findOrCreateRange(queryOrder.dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, CustAccount)).value(custAccount);
        SysQuery::findOrCreateRange(queryOrder.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, PackingSlipId)).value(packingSlipId);
        SysQuery::findOrCreateRange(queryOrder.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DatePhysical)).value(queryRange(fromDate, toDate));
        SysQuery::findOrCreateRange(queryOrder.dataSourceTable(tableNum(TMSCarrier)), fieldNum(TMSCarrier, CarrierCode)).value(carrierCode);
        QueryRun queryRunOrder = new QueryRun(queryOrder);

        while (queryRunOrder.next())
        {
            SalesLine salesLineOrder = queryRunOrder.get(tableNum(SalesLine));
            DirPartyTable dirPartyTable = queryRunOrder.get(tableNum(DirPartyTable));
            TMSCarrier tMSCarrier = queryRunOrder.get(tableNum(TMSCarrier));

            //insert Sales line and carrier info to tmp table.
            this.insertIntoShipmentAnalysisTmp(salesLineOrder, dirPartyTable, tMSCarrier);
        }

        //Execute the Query and insert the InventTrans quantity and amount(Received, On-time, Delayed) to tmp table
        Query queryTrans = this.buildQueryForInventTrans();
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, ItemId)).value(itemId);
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, CustAccount)).value(custAccount);
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, PackingSlipId)).value(packingSlipId);
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DatePhysical)).value(queryRange(fromDate, toDate));
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, Qty)).value(' < 0');
        SysQuery::findOrCreateRange(queryTrans.dataSourceTable(tableNum(TMSCarrier)), fieldNum(TMSCarrier, CarrierCode)).value(carrierCode);
        QueryRun queryRunTrans = new QueryRun(queryTrans);

        while (queryRunTrans.next())
        {
            SalesLine salesLineTrans = queryRunTrans.get(tableNum(SalesLine));
            InventTrans inventTrans = queryRunTrans.get(tableNum(InventTrans));
            TMSCarrier tMSCarrier = queryRunTrans.get(tableNum(TMSCarrier));

            //insert InventTrans quantity and amount(Received, On-time, Dealyed) to tmp table.
            this.insertInventTrans(salesLineTrans, inventTrans, tMSCarrier);
        }

        //Execute the Query and insert the InventTrans quantity and amount(Returned) to tmp table
        Query queryReturn = this.buildQueryForInventTrans();
        SysQuery::findOrCreateRange(queryReturn.dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, ItemId)).value(itemId);
        SysQuery::findOrCreateRange(queryReturn.dataSourceTable(tableNum(SalesLine)), fieldNum(SalesLine, CustAccount)).value(custAccount);
        SysQuery::findOrCreateRange(queryReturn.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, PackingSlipId)).value(packingSlipId);
        SysQuery::findOrCreateRange(queryReturn.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, DatePhysical)).value(queryRange(fromDate, toDate));
        SysQuery::findOrCreateRange(queryReturn.dataSourceTable(tableNum(InventTrans)), fieldNum(InventTrans, Qty)).value(' > 0');
        SysQuery::findOrCreateRange(queryReturn.dataSourceTable(tableNum(TMSCarrier)), fieldNum(TMSCarrier, CarrierCode)).value(carrierCode);
        QueryRun queryRunReturn = new QueryRun(queryReturn);

        while (queryRunReturn.next())
        {
            SalesLine salesLineReturn = queryRunReturn.get(tableNum(SalesLine));
            InventTrans inventTransReturn = queryRunReturn.get(tableNum(InventTrans));
            TMSCarrier tMSCarrier = queryRunReturn.get(tableNum(TMSCarrier));

            //insert InventTrans quantity and amount(Returned) to tmp table.
            this.insertInventReturn(salesLineReturn, inventTransReturn, tMSCarrier);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQuantityToInventoryUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert the specified item quantity to the inventory unit
    /// </summary>
    /// <param name = "_itemId">Item number</param>
    /// <param name = "_inventDimId">Inventory dimension</param>
    /// <param name = "_unitSymbolFrom">Unit to convert from</param>
    /// <param name = "_qtyToConvert">Quantity to convert</param>
    /// <returns>Quantity in inventory unit</returns>
    protected Qty convertQuantityToInventoryUnit(
        ItemId              _itemId, 
        InventDimId         _inventDimId,
        UnitOfMeasureSymbol _unitSymbolFrom, 
        Qty                 _qtyToConvert)
    {
        return InventTableModule::unitConvert(_itemId, ModuleInventPurchSales::Invent, _unitSymbolFrom, _qtyToConvert, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesShipmentAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data from the <c>InventSalesShipmentAnalysisReport</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>InventSalesShipmentAnalysisReport</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventSalesShipmentAnalysisTmp_CN))
    ]
    public InventSalesShipmentAnalysisTmp_CN getSalesShipmentAnalysisTmp()
    {
        select salesShipmentAnalysisTmp_CN;
        return salesShipmentAnalysisTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts InventTrans quantity and amount(Returned) to tmp table.
    /// </summary>
    /// <param name = "_salesLine">
    /// SalesLine
    /// </param>
    /// <param name = "_inventTrans">
    /// InventTrans
    /// </param>
    /// <param name="_tMSCarrier">
    /// TMSCarrier
    /// </param>
    public void insertInventReturn(SalesLine _salesLine, InventTrans _inventTrans, TMSCarrier _tMSCarrier)
    {
        select firstOnly forUpdate salesShipmentAnalysisTmp_CN
            where salesShipmentAnalysisTmp_CN.ItemId == _salesLine.ItemId
                && salesShipmentAnalysisTmp_CN.CustAccount == _salesLine.CustAccount
                && salesShipmentAnalysisTmp_CN.CarrierCode == _tMSCarrier.CarrierCode;

        Debug::assert(salesShipmentAnalysisTmp_CN.RecId);
        salesShipmentAnalysisTmp_CN.ReturnedQty     += this.convertQuantityToInventoryUnit(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit, _inventTrans.Qty);
        salesShipmentAnalysisTmp_CN.ReturnedAmount  += _inventTrans.CostAmountPhysical;
        salesShipmentAnalysisTmp_CN.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts InventTrans quantity and amount(Received, On-time, Dealyed) to tmp table.
    /// </summary>
    /// <param name = "_salesLine">
    /// SalesLine
    /// </param>
    /// <param name = "_inventTrans">
    /// InventTrans
    /// </param>
    /// <param name="_tMSCarrier">
    /// TMSCarrier
    /// </param>
    public void insertInventTrans(SalesLine _salesLine, InventTrans _inventTrans, TMSCarrier _tMSCarrier)
    {
        select firstOnly forUpdate salesShipmentAnalysisTmp_CN
            where salesShipmentAnalysisTmp_CN.ItemId == _salesLine.ItemId
                && salesShipmentAnalysisTmp_CN.CustAccount == _salesLine.CustAccount
                && salesShipmentAnalysisTmp_CN.CarrierCode == _tMSCarrier.CarrierCode;

        Debug::assert(salesShipmentAnalysisTmp_CN.RecId);
        salesShipmentAnalysisTmp_CN.ReceivedQty     += - this.convertQuantityToInventoryUnit(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit, _inventTrans.Qty);
        salesShipmentAnalysisTmp_CN.ReceivedAmount  += - _inventTrans.CostAmountPhysical;
        if (_inventTrans.DatePhysical <= _inventTrans.DateExpected)
        {
            //If DateExpected is later than DatePhysical, set the On-time quantity and amount.
            salesShipmentAnalysisTmp_CN.OnTimeReceivedQty     += - this.convertQuantityToInventoryUnit(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit, _inventTrans.Qty);
            salesShipmentAnalysisTmp_CN.OnTimeReceivedAmount  += -(_inventTrans.CostAmountPhysical);
        }
        else
        {
            //If DateExpected is earlier than DatePhysical, set the Delayed quantity and amount.
            salesShipmentAnalysisTmp_CN.DelayedQty     += - this.convertQuantityToInventoryUnit(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit, _inventTrans.Qty);
            salesShipmentAnalysisTmp_CN.DelayedAmount  += -(_inventTrans.CostAmountPhysical);
        }
        salesShipmentAnalysisTmp_CN.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoShipmentAnalysisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the sales line and carrier info to the tmp table.
    /// </summary>
    /// <param name="_salesLine">
    /// SalesLine
    /// </param>
    /// <param name="_dirPartyTable">
    /// DirPartyTable
    /// </param>
    /// <param name="_tMSCarrier">
    /// TMSCarrier
    /// </param>
    public void insertIntoShipmentAnalysisTmp(SalesLine _salesLine, DirPartyTable _dirPartyTable, TMSCarrier _tMSCarrier)
    {
        select firstOnly forUpdate salesShipmentAnalysisTmp_CN
            where salesShipmentAnalysisTmp_CN.ItemId == _salesLine.ItemId
                && salesShipmentAnalysisTmp_CN.CustAccount == _salesLine.CustAccount
                && salesShipmentAnalysisTmp_CN.CarrierCode == _tMSCarrier.CarrierCode;

        if (salesShipmentAnalysisTmp_CN.RecId == 0)
        {
            InventTable item = InventTable::find(_salesLine.ItemId);
            salesShipmentAnalysisTmp_CN.CustAccount     = _salesLine.CustAccount;
            salesShipmentAnalysisTmp_CN.CustName        = _dirPartyTable.Name;
            salesShipmentAnalysisTmp_CN.ItemId          = _salesLine.ItemId;
            salesShipmentAnalysisTmp_CN.Name            = item.itemName();
            salesShipmentAnalysisTmp_CN.SalesUnit       = item.inventUnitId();
            salesShipmentAnalysisTmp_CN.OrderedQty      = this.convertQuantityToInventoryUnit(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit, _salesLine.SalesQty);
            salesShipmentAnalysisTmp_CN.OrderedAmount   = _salesLine.LineAmount;
            salesShipmentAnalysisTmp_CN.CarrierCode     = _tMSCarrier.CarrierCode;
            salesShipmentAnalysisTmp_CN.CarrierName     = _tMSCarrier.Name;
            salesShipmentAnalysisTmp_CN.insert();
        }
        else
        {
            salesShipmentAnalysisTmp_CN.OrderedQty     += this.convertQuantityToInventoryUnit(_salesLine.ItemId, _salesLine.InventDimId, _salesLine.SalesUnit, _salesLine.SalesQty);
            salesShipmentAnalysisTmp_CN.OrderedAmount  += _salesLine.LineAmount;
            salesShipmentAnalysisTmp_CN.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query from <C>InventSalesShipmentAnalysisOrder_CN</C>
    /// When shipping carrier has value, filter data to show specified shipping carrier code.
    /// When shipping carrier is empty, show all the data with or without shipping carrier info.
    /// </summary>
    /// <returns>The built query</returns>
    private Query buildQueryForOrder()
    {
        Query queryLocal = new Query(queryStr(InventSalesShipmentAnalysisOrder_CN));

        if (contract.parmCarrierCode())
        {
            queryLocal.dataSourceTable(tableNum(TMSSalesTable)).joinMode(JoinMode::InnerJoin);
            queryLocal.dataSourceTable(tableNum(TMSCarrier)).joinMode(JoinMode::InnerJoin);
        }

        return queryLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query from <C>InventSalesShipmentAnalysisTrans_CN</C>
    /// Narrow down the data when shipping carrier has value.
    /// </summary>
    /// <returns>The built query</returns>
    public Query buildQueryForInventTrans()
    {
        Query queryLocal = new Query(queryStr(InventSalesShipmentAnalysisTrans_CN));

        if (contract.parmCarrierCode())
        {
            queryLocal.dataSourceTable(tableNum(TMSSalesTable)).joinMode(JoinMode::InnerJoin);
            queryLocal.dataSourceTable(tableNum(TMSCarrier)).joinMode(JoinMode::InnerJoin);
        }

        return queryLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by SSRS at
    /// runtime. The method should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00133, funcName());

        this.executeQuery();

        select firstOnly forUpdate RecId from salesShipmentAnalysisTmp_CN;
        if (salesShipmentAnalysisTmp_CN.RecId == 0)
        {
            salesShipmentAnalysisTmp_CN.clear();
            salesShipmentAnalysisTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>