<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPost_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to check if the ledger journal is validate.
/// </summary>
public class LedgerJournalCheckPost_IN extends LedgerJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInterCompanyTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the TaxWithholdParameter is marked for the payment and invoice transactions.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The LedgerJournalTrans buffer.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    /// The posting messages collection; optional.
    /// </param>
    public static void checkInterCompanyTransaction(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (ledgerJournalTransTaxExt.tdsGroup || ledgerJournalTransTaxExt.tcsGroup)
        {
            if (ledgerJournalTransTaxExt.tdsGroup)
            {
                if (!TaxWithholdParameters_IN::find().tdsPayment)
                {
                    if (_ledgerPostingMessageCollection)
                    {
                        _ledgerPostingMessageCollection.logAndThrowError(strFmt("@GLS6064", "@SYS828", "@GLS5362"));
                    }
                    else
                    {
                        throw error(strFmt("@GLS6064", "@SYS828", "@GLS5362"));
                    }
                }
            }
            else if (ledgerJournalTransTaxExt.tcsGroup)
            {
                if (!TaxWithholdParameters_IN::find().tcsPayment)
                {
                    if (_ledgerPostingMessageCollection)
                    {
                        _ledgerPostingMessageCollection.logAndThrowError(strFmt("@GLS6064", "@SYS828", "@GLS5363"));
                    }
                    else
                    {
                        throw error(strFmt("@GLS6064", "@SYS828", "@GLS5363"));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentForCP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether journal can be posted for centralized payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Given <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    /// The posting messages collection; optional.
    /// </param>
    /// <returns>
    /// Returns true if payment journal can be posted; Otherwise, returns false.
    /// </returns>
    /// <remarks>
    /// Returns false only if following conditions are matched:
    /// 1. Company account of payment journal is not logged in company.
    /// 2. TDS/TCS group is attached to payment journal.
    /// 3. Payment journal is used to settle invoice which does not belong to selected company account.
    /// </remarks>
    public static boolean checkPaymentForCP(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        SpecTrans specTrans;
        boolean ret = true;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact
            && (ledgerJournalTransTaxExt.tdsGroup
                || ledgerJournalTransTaxExt.tcsGroup)
            && _ledgerJournalTrans.Company != curext())
        {
            select firstonly RecId from specTrans
                where specTrans.SpecRecId == _ledgerJournalTrans.RecId
                    && specTrans.SpecTableId == _ledgerJournalTrans.TableId
                    && specTrans.RefCompany != _ledgerJournalTrans.Company;
            if (specTrans.RecId)
            {
                if (_ledgerPostingMessageCollection)
                {
                    _ledgerPostingMessageCollection.logAndThrowError("@SYS4081891");
                }
                else
                {
                    throw error("@SYS4081891");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverpaymentForCP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether journal can be posted with overpayment for centralized payment.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// Given <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <param name="_ledgerPostingMessageCollection">
    /// The posting messages collection; optional.
    /// </param>
    /// <returns>
    /// Returns true if journal can be posted; Otherwise, returns false.
    /// </returns>
    /// <remarks>
    /// There are two cases will block posting when doing overpayment:
    /// 1. The WHT don't be posted when invoice.
    /// 2. The WHT is posted when invoice and WHT group is also attached to current transaction.
    /// </remarks>
    public static boolean checkOverpaymentForCP(
        LedgerJournalTrans _ledgerJournalTrans,
        LedgerPostingMessageLog _ledgerPostingMessageCollection = null)
    {
        SpecTrans   specTrans;
        AmountCur   totalSettledAmount;
        boolean     notExistPostedWHT;
        boolean     ret = true;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt =  _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact
            && _ledgerJournalTrans.Company    == _ledgerJournalTrans.OffsetCompany)
        {
            select firstonly RecId from specTrans
                where specTrans.SpecRecId    == _ledgerJournalTrans.RecId
                    && specTrans.SpecTableId == _ledgerJournalTrans.TableId
                    && specTrans.RefCompany  != curext();

            if (specTrans.RecId)
            {
                notExistPostedWHT = _ledgerJournalTrans.notExistsPostedWHTForCP_IN();
                if (notExistPostedWHT
                    || (!notExistPostedWHT && (ledgerJournalTransTaxExt.tdsGroup || ledgerJournalTransTaxExt.tcsGroup)))
                {
                    totalSettledAmount = SpecTransManager::getTotalSettleAmountForSpecReference(
                        _ledgerJournalTrans.company(),
                        _ledgerJournalTrans.TableId,
                        _ledgerJournalTrans.RecId,
                        _ledgerJournalTrans.CurrencyCode,
                        _ledgerJournalTrans.Company,
                        _ledgerJournalTrans.TransDate);

                    if (abs(_ledgerJournalTrans.amount()) > abs(totalSettledAmount))
                    {
                        if (_ledgerPostingMessageCollection)
                        {
                            _ledgerPostingMessageCollection.logAndThrowError(strFmt("@GLS6642", _ledgerJournalTrans.Company));
                        }
                        else
                        {
                            throw error(strFmt("@GLS6642", _ledgerJournalTrans.Company));
                        }
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPaymentWarningMsg</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether warning message should appear for the payment.
    /// </summary>
    /// <param name="_caller">
    /// The <c>LedgerJournalCheckPost</c> instance.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// Given <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <returns>
    /// Returns true if payment journal can be posted without warning; Otherwise, returns false.
    /// </returns>
    public static boolean checkPaymentWarningMsg(LedgerJournalTrans _ledgerJournalTrans)
    {
        SpecTrans           specTrans;
        VendTransOpen       vendTransOpen;
        VendTrans           vendTrans;
        CustTransOpen       custTransOpen;
        CustTrans           custTrans;
        TaxWithholdTrans_IN taxWithholdTransLoc;
        boolean ret = true;
        LedgerJournalTransTaxExtensionIN ledgerJournalTransTaxExt = _ledgerJournalTrans.ledgerJournalTransTaxExtensionIN();

        if (_ledgerJournalTrans.SettleVoucher == SettlementType::SelectedTransact
            && (ledgerJournalTransTaxExt.TDSGroup
                || ledgerJournalTransTaxExt.TCSGroup))
        {
            while select RefTableId, RefRecId from specTrans
                where specTrans.SpecRecId == _ledgerJournalTrans.RecId
                    && specTrans.SpecTableId == _ledgerJournalTrans.TableId
                    && specTrans.RefCompany == _ledgerJournalTrans.Company
            {
                if (specTrans.RefTableId == tableNum(vendTransOpen))
                {
                    while select RecId, RefRecId, AccountNum from vendTransOpen
                        where vendTransOpen.RecId == specTrans.RefRecId
                            && (vendTransOpen.TDSAmount_IN == 0 && vendTransOpen.TCSAmount_IN == 0
                            )
                    {
                        select firstOnly RecId from taxWithholdTransLoc
                            join Voucher, TransDate, AccountNum, RecId
                                from vendTrans
                            where taxWithholdTransLoc.Voucher == vendTrans.Voucher
                                && taxWithholdTransLoc.TransDate == vendTrans.TransDate
                                && vendTrans.AccountNum == vendTransOpen.AccountNum
                                && vendTrans.RecId == vendTransOpen.RefRecId;
                        if (!taxWithholdTransLoc.RecId)
                        {
                            ret = false;
                        }
                    }
                }

                if (specTrans.RefTableId == tableNum(custTransOpen))
                {
                    while select RecId, RefRecId, AccountNum from custTransOpen
                        where custTransOpen.RecId == specTrans.RefRecId
                            && (custTransOpen.TDSAmount_IN == 0 && custTransOpen.TCSAmount_IN == 0)
                    {
                        select firstOnly RecId from taxWithholdTransLoc
                            join Voucher, TransDate, AccountNum, RecId
                                from custTrans
                            where taxWithholdTransLoc.Voucher == custTrans.Voucher
                                && taxWithholdTransLoc.TransDate == custTrans.TransDate
                                && custTrans.AccountNum == custTransOpen.AccountNum
                                && custTrans.RecId == custTransOpen.RefRecId;
                        if (!taxWithholdTransLoc.RecId)
                        {
                            ret = false;
                        }
                    }
                }
            }
        }

        if (!ret)
        {
            if (Box::confirm("@SYP4880000"))
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction is inter company transaction.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal trans.
    /// </param>
    /// <returns>
    /// Returns true if the transaction is inter company transaction.
    /// </returns>
    public static boolean isInterCompanyTransaction (LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ret;

        if ((_ledgerJournalTrans.AccountType        == LedgerJournalACType::Vend    ||
            _ledgerJournalTrans.AccountType         == LedgerJournalACType::Ledger) &&
           (_ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Vend    ||
            _ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Ledger) )
        {
            if (_ledgerJournalTrans.Company != _ledgerJournalTrans.OffsetCompany)
            {
                ret = true;
            }
        }

        if ((_ledgerJournalTrans.AccountType        == LedgerJournalACType::Cust    ||
            _ledgerJournalTrans.AccountType         == LedgerJournalACType::Ledger) &&
           (_ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Cust    ||
            _ledgerJournalTrans.OffsetAccountType   == LedgerJournalACType::Ledger) )
        {
            if (_ledgerJournalTrans.Company != _ledgerJournalTrans.OffsetCompany)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInterCompanyTransactionForST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction is inter company transaction for stock transfer.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The ledger journal trans.</param>
    /// <returns>Returns true if the transaction is inter company transaction for stock transfer.</returns>
    public static boolean isInterCompanyTransactionForST(LedgerJournalTrans    _ledgerJournalTrans)
    {
        if ((_ledgerJournalTrans.AccountType    == LedgerJournalACType::Vend  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank )
           ||(_ledgerJournalTrans.AccountType   == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend )
           ||(_ledgerJournalTrans.AccountType   == LedgerJournalACType::Cust  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank )
           ||(_ledgerJournalTrans.AccountType   == LedgerJournalACType::Bank  && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust ))
        {
            if (_ledgerJournalTrans.Company != _ledgerJournalTrans.OffsetCompany)
            {
                if (_ledgerJournalTrans.isServiceApplicable_IN())
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the india tax setting for project journals .
    /// </summary>
    /// <param name="_ledgerJournalTable">
    /// The <c>LedgerJournalTable</c> table holds the expense journal.
    /// </param>
    /// <returns>
    /// true if the journal is validated; otherwise, false.
    /// </returns>
    protected boolean validateProjTrans(LedgerJournalTable  _ledgerJournalTable)
    {
        LedgerJournalTrans              ledgerJournalTrans;
        LedgerJournalTrans_Project      ledgerJournalTrans_Project;
        TaxItemGroupHeading             taxItemGroup;

        select firstonly RecId from ledgerJournalTrans_Project
            where  ledgerJournalTrans_Project.TaxGroupSales
                && ledgerJournalTrans_Project.TaxItemGroupSales
            exists join taxItemGroup
                where taxItemGroup.TaxItemGroup == ledgerJournalTrans_Project.TaxItemGroupSales
                    && taxItemGroup.ReverseChargePercentage_IN
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.RecId == ledgerJournalTrans_Project.RefRecId
                        && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum;
        if (ledgerJournalTrans_Project.RecId)
        {
            return checkFailed("@SYS4002410");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdGetCheckNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the <c>LedgerJournalTrans</c> buffer to get the cheque number.
    /// </summary>
    /// <param name="_custVendPaymFeeId">
    /// FeeId used to find the record from <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_voucher">
    /// Voucher used to find the record from <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <param name="_transDate">
    /// TransDate used to find the record from <c>LedgerJournalTrans</c> table.
    /// </param>
    /// <returns>
    /// Return the check number for the found tranaction.
    /// </returns>
    public static BankNegInstNum taxWithholdGetCheckNum(CustVendPaymFeeId _custVendPaymFeeId,
                                                     Voucher           _voucher,
                                                     TransDate         _transDate)
    {
        BankNegInstNum          checkNumber;
        TaxWithholdFeeType_IN   taxWithholdFeeType;
        LedgerJournalTrans      ledgerJournalTransLoc;

        taxWithholdFeeType = VendPaymFee::find(_custVendPaymFeeId).TaxWithholdFeeType_IN;
        if (taxWithholdFeeType      == TaxWithholdFeeType_IN::Interest
            || taxWithholdFeeType   == TaxWithholdFeeType_IN::Others)
        {
            select firstonly BankChequeNum from ledgerJournalTransLoc
                where ledgerJournalTransLoc.Voucher         == _voucher
                   && ledgerJournalTransLoc.TransDate       == _transDate
                   && ledgerJournalTransLoc.TransactionType == LedgerTransType::Payment;
            checkNumber = ledgerJournalTransLoc.BankChequeNum;
        }

        return checkNumber;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>