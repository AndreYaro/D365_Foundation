<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingFilter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationMatchingFilter</c> class applies the filters to collect
/// vendor invoices eligible for automatic matching process.
/// </summary>
internal final class VendInvoiceAutomationMatchingFilter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>collectInvoicesReadyForAutomationMatching</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies filters to get all the applicable invoices for automatic matching process.
    /// </summary>
    /// <param name="_matchingLogHandler">
    /// Matching log handler for execution.
    /// </param>
    /// <returns>
    /// <c>VendInvoiceAutomationInvoiceTmp</c> buffer containing invoices qualified for automatic matching.
    /// </returns>
    internal static VendInvoiceAutomationInvoiceTmp collectInvoicesReadyForAutomationMatching(VendInvoiceAutomationMatchingLogHandler _matchingLogHandler)
    {
        VendInvoiceAutomationInvoiceTmp invoicesReadyForMatching;

        if (VendAutomateVendorInvoicesFeature::isEnabled())
        {
            invoicesReadyForMatching.skipDataMethods(true);
            invoicesReadyForMatching.skipDatabaseLog(true);
            invoicesReadyForMatching.skipEvents(true);
            invoicesReadyForMatching.skipDeleteActions(true);
            invoicesReadyForMatching.skipDeleteMethod(true);

            VendParameters vendParameters;
            VendInvoiceAutomationInvoiceTmp invoicesNotApplicableForMatching;
            VendInvoiceAutomationInstrumentationMatchingActivities instrumentationMatchingActivities =
                VendInvoiceAutomationInstrumentationMatchingActivities::createFromLoggerName(classStr(VendInvoiceAutomationMatchingFilter));

            using (var activityContext = instrumentationMatchingActivities.collectMatchingInvoicesReadyContext())
            {
                while select crosscompany DataAreaId, AutomationWorkflowSubmission, AutomationPrepaymentApplication, BlockAutomationWhenPrepaymentApplicationFailed
                    from vendParameters
                    where vendParameters.AutomationProductReceiptMatching == NoYes::Yes
                {
                    changecompany(vendParameters.DataAreaId)
                    {
                        if (VendInvoiceIncludeManualCreatedInvoiceIntoAutomationFeature::isEnabled())
                        {
                            VendInvoiceAutomationMatchingFilter::filterInvoicesIncludedInAutomation(invoicesReadyForMatching, vendParameters);
                        }
                        else 
                        {
                            if (vendParameters.AutomationWorkflowSubmission == NoYes::Yes)
                            {
                                VendInvoiceAutomationMatchingFilter::filterInvoicesWithAutomaticWFSubmission(invoicesReadyForMatching, vendParameters);
                            }
                            else
                            {
                                VendInvoiceAutomationMatchingFilter::filterInvoicesWithoutAutomaticWFSubmission(invoicesReadyForMatching, vendParameters);
                            }
                        }
                        
                        if (vendParameters.AutomationPrepaymentApplication == NoYes::Yes
                            && vendParameters.BlockAutomationWhenPrepaymentApplicationFailed == NoYes::Yes)
                        {
                            VendInvoiceAutomationMatchingFilter::filterInvoiceAutomationHistoryPrepaymentApplicationFailed(invoicesReadyForMatching, vendParameters.DataAreaId);
                        }

                        VendInvoiceAutomationMatchingFilter::filterBasedOnMatchingCriteria(invoicesReadyForMatching,
                        vendParameters.DataAreaId,
                        invoicesNotApplicableForMatching);
                    }
                }
            
                _matchingLogHandler.generateNotApplicableMatchingInvoiceLogs(invoicesNotApplicableForMatching, invoicesReadyForMatching);

                instrumentationMatchingActivities.properties().notApplicablePercentProperty(activityContext, invoicesNotApplicableForMatching, invoicesReadyForMatching);
            }
        }
            
        return invoicesReadyForMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesIncludedInAutomation</Name>
				<Source><![CDATA[
    private static void filterInvoicesIncludedInAutomation(VendInvoiceAutomationInvoiceTmp _invoicesReadyForMatching, VendParameters _vendParameters)
    {
        // Applies filters to get eligible invoices for automatic matching process.
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceAutomationInvoicesInMatching invoicesAlreadyInMatching;
        NoYes automaticPrepaymentApplication = _vendParameters.AutomationPrepaymentApplication;
        NoYes blockAutomationWhenPrepaymentFailed = _vendParameters.BlockAutomationWhenPrepaymentApplicationFailed;

        //Automatic matching criteria for imported/otherthan imported invoices
        insert_recordset _invoicesReadyForMatching(
            VendInvoiceRecId,
            VendInvoiceDataAreaId,
            VendInvoiceParmId,
            VendInvoiceTableRefId,
            VendInvoiceNum,
            VendParametersAutomationPrepaymentApplication,
            VendParametersBlockAutomationWhenPrepaymentApplicationFailed)
            select RecId, DataAreaId, ParmId, TableRefId, Num, automaticPrepaymentApplication, blockAutomationWhenPrepaymentFailed
                from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.IncludeInAutomatedProcessing == NoYes::Yes
                        && vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::Included
                        && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                        && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft
                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Cancelled)
                notexists join invoicesAlreadyInMatching
                    where invoicesAlreadyInMatching.VendInvoiceRecId == vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesWithAutomaticWFSubmission</Name>
				<Source><![CDATA[
    private static void filterInvoicesWithAutomaticWFSubmission(VendInvoiceAutomationInvoiceTmp _invoicesReadyForMatching, VendParameters _vendParameters)
    {
        // Applies filters to get eligible invoices for automatic matching process when automatic workflow submission process is enabled.
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceAutomationInvoicesInMatching invoicesAlreadyInMatching;
        NoYes automaticPrepaymentApplication = _vendParameters.AutomationPrepaymentApplication;
        NoYes blockAutomationWhenPrepaymentFailed = _vendParameters.BlockAutomationWhenPrepaymentApplicationFailed;

        // Automatic matching criteria for imported invoices.
        insert_recordset _invoicesReadyForMatching(
            VendInvoiceRecId,
            VendInvoiceDataAreaId,
            VendInvoiceParmId,
            VendInvoiceTableRefId,
            VendInvoiceNum,
            VendParametersAutomationPrepaymentApplication,
            VendParametersBlockAutomationWhenPrepaymentApplicationFailed)
            select RecId, DataAreaId, ParmId, TableRefId, Num, automaticPrepaymentApplication, blockAutomationWhenPrepaymentFailed
                from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.DocumentOrigin == DocumentOrigin::Service
                        && vendInvoiceInfoTable.IncludeInAutomatedProcessing == NoYes::Yes
                        && vendInvoiceInfoTable.AutomationStatus == VendInvoiceAutomationStatus::Included
                        && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                        && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft
                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Cancelled)
                notexists join invoicesAlreadyInMatching
                    where invoicesAlreadyInMatching.VendInvoiceRecId == vendInvoiceInfoTable.RecId;

        // Automatic matching criteria for invoices other than imported.
        insert_recordset _invoicesReadyForMatching(
            VendInvoiceRecId,
            VendInvoiceDataAreaId,
            VendInvoiceParmId,
            VendInvoiceTableRefId,
            VendInvoiceNum,
            VendParametersAutomationPrepaymentApplication,
            VendParametersBlockAutomationWhenPrepaymentApplicationFailed)
            select RecId, DataAreaId, ParmId, TableRefId, Num, automaticPrepaymentApplication, blockAutomationWhenPrepaymentFailed
                from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.DocumentOrigin != DocumentOrigin::Service
                        && vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                        && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft
                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Cancelled)
                notexists join invoicesAlreadyInMatching
                    where invoicesAlreadyInMatching.VendInvoiceRecId == vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesWithoutAutomaticWFSubmission</Name>
				<Source><![CDATA[
    private static void filterInvoicesWithoutAutomaticWFSubmission(VendInvoiceAutomationInvoiceTmp _invoicesReadyForMatching, VendParameters _vendParameters)
    {
        // Applies filters to get eligible invoices for automatic matching process when automatic workflow submission process is not enabled.
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceAutomationInvoicesInMatching invoicesAlreadyInMatching;
        NoYes automaticPrepaymentApplication = _vendParameters.AutomationPrepaymentApplication;
        NoYes blockAutomationWhenPrepaymentFailed = _vendParameters.BlockAutomationWhenPrepaymentApplicationFailed;

        insert_recordset _invoicesReadyForMatching(
            VendInvoiceRecId,
            VendInvoiceDataAreaId,
            VendInvoiceParmId,
            VendInvoiceTableRefId,
            VendInvoiceNum,
            VendParametersAutomationPrepaymentApplication,
            VendParametersBlockAutomationWhenPrepaymentApplicationFailed)
            select RecId, DataAreaId, ParmId, TableRefId, Num, automaticPrepaymentApplication, blockAutomationWhenPrepaymentFailed
                from vendInvoiceInfoTable
                    where vendInvoiceInfoTable.ParmJobStatus == ParmJobStatus::Waiting
                        && vendInvoiceInfoTable.VendInvoiceSaveStatus == VendInvoiceSaveStatus::Pending
                        && (vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Draft
                        || vendInvoiceInfoTable.RequestStatus == VendInvoiceRequestStatus::Cancelled)
                notexists join invoicesAlreadyInMatching
                    where invoicesAlreadyInMatching.VendInvoiceRecId == vendInvoiceInfoTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterBasedOnMatchingCriteria</Name>
				<Source><![CDATA[
    private static void filterBasedOnMatchingCriteria(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId,
        VendInvoiceAutomationInvoiceTmp _invoicesNotApplicableForMatching)
    {
        // Applies filters to filter out 'Not applicable' invoices for automatic matching process.
        VendInvoiceAutomationMatchingFilter::filterInvoiceAutomationHistoryFailedOrCompleted(_invoicesEligibleForMatching, _dataAreaId);
        VendInvoiceAutomationMatchingFilter::filterInvoiceInUse(_invoicesEligibleForMatching, _dataAreaId);
        VendInvoiceAutomationMatchingFilter::filterInvoicesWithNoLines(_invoicesEligibleForMatching, _dataAreaId);

        VendInvoiceAutomationMatchingFilter::collectInvoicesNotApplicableForMatching(_invoicesEligibleForMatching, _invoicesNotApplicableForMatching);

        VendInvoiceAutomationMatchingFilter::filterInvoiceLineNoReferencePO(_invoicesEligibleForMatching, _dataAreaId);
        VendInvoiceAutomationMatchingFilter::filterMatchingPolicy(_invoicesEligibleForMatching, _dataAreaId);
        VendInvoiceAutomationMatchingFilter::filterInvoicesFullyMatched(_invoicesEligibleForMatching, _dataAreaId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoiceAutomationHistoryFailedOrCompleted</Name>
				<Source><![CDATA[
    private static void filterInvoiceAutomationHistoryFailedOrCompleted(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        DocumentEvent matchingEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceAutomationHistory(_invoicesEligibleForMatching, matchingEvent);
        
        DocumentEventLog documentEventLog;

        // Remove invoices that have recent automation history failed or completed
        delete_from _invoicesEligibleForMatching
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
            exists join documentEventLog
                where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                    && documentEventLog.DocumentEvent == matchingEvent.RecId
                    && documentEventLog.SourceRecId == _invoicesEligibleForMatching.VendInvoiceRecId
                    && (documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed
                    || documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed)
            exists join documentEventLogTmp
                    where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoiceAutomationHistoryPrepaymentApplicationFailed</Name>
				<Source><![CDATA[
    private static void filterInvoiceAutomationHistoryPrepaymentApplicationFailed(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        DocumentEventLog documentEventLog;
        DocumentEvent prepaymentEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceAutomationPrepaymentApplicationEvent));
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceAutomationHistory(_invoicesEligibleForMatching, prepaymentEvent);

        // Remove invoices that have recent prepayment application failure in the automation history
        delete_from _invoicesEligibleForMatching
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
                && _invoicesEligibleForMatching.VendParametersAutomationPrepaymentApplication == NoYes::Yes
                && _invoicesEligibleForMatching.VendParametersBlockAutomationWhenPrepaymentApplicationFailed == NoYes::Yes
        exists join documentEventLog
            where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                && documentEventLog.DocumentEvent == prepaymentEvent.RecId
                && documentEventLog.SourceRecId == _invoicesEligibleForMatching.VendInvoiceRecId
                && documentEventLog.EventEnumValue == VendInvoiceAutomationPrepaymentApplicationEvent::Failed
        exists join documentEventLogTmp
            where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesFullyMatched</Name>
				<Source><![CDATA[
    private static void filterInvoicesFullyMatched(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        // Filters vendor invoices with eligible lines are fully matched
        // 1- invoice lines with reference to purchase order lines
        // 2- invoice lines with three way matching policy.
        VendInvoiceAutomationInvoiceTmp invoicesFullyMatched = VendInvoiceFullyMatchedCheck::getInvoicesFullyMatched(_invoicesEligibleForMatching, _dataAreaId);

        delete_from _invoicesEligibleForMatching
            exists join invoicesFullyMatched
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
                && invoicesFullyMatched.VendInvoiceRecId == _invoicesEligibleForMatching.VendInvoiceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoiceLineNoReferencePO</Name>
				<Source><![CDATA[
    private static void filterInvoiceLineNoReferencePO(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        // Filters vendor invoices without any invoice lines referencing to a purchase order.
        VendInvoiceInfoLine vendInvoiceInfoLine;

        delete_from _invoicesEligibleForMatching
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
            notexists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.TableRefId == _invoicesEligibleForMatching.VendInvoiceTableRefId
                    && vendInvoiceInfoLine.ParmId == _invoicesEligibleForMatching.VendInvoiceParmId
                    && vendInvoiceInfoLine.PurchLineRecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterMatchingPolicy</Name>
				<Source><![CDATA[
    private static void filterMatchingPolicy(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        // Filters vendor invoices without any invoice lines set to three way matching policy.
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        // Second not exists will be a nested loop for first not exists to vendInvoiceInfoLine
        delete_from _invoicesEligibleForMatching
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
            notexists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.TableRefId ==  _invoicesEligibleForMatching.VendInvoiceTableRefId
                    && vendInvoiceInfoLine.ParmId == _invoicesEligibleForMatching.VendInvoiceParmId
            notexists join purchLine
                where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                    && purchLine.MatchingPolicy != PurchMatchingPolicyOption::ThreeWayMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoiceInUse</Name>
				<Source><![CDATA[
    private static void filterInvoiceInUse(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        // Filters invoices that are in use.
        VendInvoiceInfoTable vendInvoiceInfoTable;

        delete_from  _invoicesEligibleForMatching
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
            exists join vendInvoiceInfoTable
                where vendInvoiceInfoTable.Recid ==  _invoicesEligibleForMatching.VendInvoiceRecId
                    && vendInvoiceInfoTable.ParmId != ''
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectInvoicesNotApplicableForMatching</Name>
				<Source><![CDATA[
    private static void collectInvoicesNotApplicableForMatching(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        VendInvoiceAutomationInvoiceTmp _invoicesNotApplicableForMatching)
    {
        VendInvoiceAutomationInvoiceTmp invoicesAlreadyInNotApplicableTmp;
        invoicesAlreadyInNotApplicableTmp.linkPhysicalTableInstance(_invoicesNotApplicableForMatching);

        insert_recordset _invoicesNotApplicableForMatching(
            VendInvoiceRecId,
            VendInvoiceDataAreaId)
        select VendInvoiceRecId,
            VendInvoiceDataAreaId from _invoicesEligibleForMatching
                notexists join invoicesAlreadyInNotApplicableTmp
                    where invoicesAlreadyInNotApplicableTmp.VendInvoiceRecId == _invoicesEligibleForMatching.VendInvoiceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterInvoicesWithNoLines</Name>
				<Source><![CDATA[
    private static void filterInvoicesWithNoLines(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;

        delete_from  _invoicesEligibleForMatching
            where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
            notexists join vendInvoiceInfoLine
                where vendInvoiceInfoLine.ParmId == _invoicesEligibleForMatching.VendInvoiceParmId
                    && vendInvoiceInfoLine.TableRefId == _invoicesEligibleForMatching.VendInvoiceTableRefId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>