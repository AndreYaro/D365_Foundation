<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUpdateLoyaltyCardTiersTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailUpdateLoyaltyCardTiersTask</c> is used to update loyalty card tiers.
/// </summary>
public class RetailUpdateLoyaltyCardTiersTask extends RunBaseBatch implements BatchRetryable
{
    RecId fromCardRecId, toCardRecId;
    date evaludationDate;
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        fromCardRecId, toCardRecId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndBlock</Name>
				<Source><![CDATA[
    public RecId parmEndBlock( RecId _toCardRecId = toCardRecId)
    {
        toCardRecId = _toCardRecId;
        return toCardRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEvaluationDate</Name>
				<Source><![CDATA[
    public date parmEvaluationDate(date _evaludationDate = evaludationDate)
    {
        evaludationDate = _evaludationDate;
        return evaludationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartBlock</Name>
				<Source><![CDATA[
    public RecId parmStartBlock(RecId _fromCardRecId = fromCardRecId)
    {
        fromCardRecId = _fromCardRecId;
        return fromCardRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RetailLoyaltyCard                   loyaltyCard;

        /* Each task knows the range of work items it needs to process.
        This range information is already packed when the task is created */
        while select loyaltyCard
            order by RecId
                where loyaltyCard.RecId >= fromCardRecId
            && loyaltyCard.RecId <= toCardRecId
        {
            RetailLoyaltyManager::EvaluateLoyaltyCardTiers(loyaltyCard.CardNumber, DateTimeUtil::date(DateTimeUtil::utcNow()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>RetailUpdateLoyaltyCardTiersTask</c> object.
    /// </summary>
    /// <param name="_fromCardRecId">
    /// The start value of the card recid range.
    /// </param>
    /// <param name="_toCardRecId">
    /// The end value of the card recid range.
    /// </param>
    /// <param name="_evaludationDate">
    /// The evaluation date.
    /// </param>
    /// <returns>
    /// The initialized <c>RetailUpdateLoyaltyCardTiersTask</c> object.
    /// </returns>
    public static RetailUpdateLoyaltyCardTiersTask construct(RecId _fromCardRecId, RecId _toCardRecId, date _evaludationDate)
    {
        RetailUpdateLoyaltyCardTiersTask  updateTask;
        updateTask = new RetailUpdateLoyaltyCardTiersTask();
        updateTask.parmStartBlock(_fromCardRecId);
        updateTask.parmEndBlock(_toCardRecId);
        updateTask.parmEvaluationDate(_evaludationDate);
        return updateTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailUpdateLoyaltyCardTiersTask</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailUpdateLoyaltyCardTiersTask</c> can
    ///  be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>