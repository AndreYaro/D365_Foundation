<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingEventHandlerRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Register the data event handlers in runtime for price change tracking.
/// We don't direclty add the handlers in methods becuase it will impacts the set based operatons for customers who do not need price change tracking at all.
/// </summary>
public class RetailPriceChangeTrackingEventHandlerRegister
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerDataEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register the data event handlers for tables when price change tracking feature is on.
    /// </summary>
    [Replaceable]
    public static void registerDataEventHandlers()
    {
        RetailPriceChangeTrackingEventHandlerRegister::registerOnUpdatedEventHandlers();
        RetailPriceChangeTrackingEventHandlerRegister::registerOnInsertedEventHandlers();
        RetailPriceChangeTrackingEventHandlerRegister::registerOnDeletedEventHandlers();
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEntityEventHandlers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterDataEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unregister the data event handlers for tables when price change tracking feature is off.
    /// </summary>
    [Replaceable]
    public static void unRegisterDataEventHandlers()
    {
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterOnUpdatedEventHandlers();
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterOnInsertedEventHandlers();
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterOnDeletedEventHandlers();
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEntityEventHandlers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataEventRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if given data event handler is registered on the table.
    /// </summary>
    /// <param name = "_tableName">The table to register data event handler.</param>
    /// <param name = "_dataEventType">The data event type.</param>
    /// <param name = "_classIdentifierStr">The class of the data event handler method.</param>
    /// <param name = "_handlerMethodStr">the data event handler method.</param>
    /// <returns>True if data event is registered, otherwise, false.</returns>
    public static boolean isDataEventRegistered(str _tableName, DataEventType _dataEventType, str _classIdentifierStr, str _handlerMethodStr)
    {
        System.Object dataEvent = Microsoft.Dynamics.Ax.Xpp.DataEventManager::GetEvent(_tableName);
        if (dataEvent != null)
        {
            str eventName = RetailPriceChangeTrackingEventHandlerRegister::getEventNameByDataEventType(_dataEventType);
            System.Type eventType = dataEvent.GetType();
            Microsoft.Dynamics.Ax.Xpp.DataEventHandler deh = eventType.GetField(eventName).GetValue(dataEvent);
            if (deh != null)
            {
                System.Delegate[] invocationList = deh.GetInvocationList();
                for (int i = invocationList.Length - 1; i >= 0; i--)
                {
                    System.Delegate del = invocationList.Get(i);
                    if (del.Method.Name == _handlerMethodStr && del.Method.DeclaringType.FullName == _classIdentifierStr)
                    {
                        return true;
                    }
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerDataEntityEventHandlers</Name>
				<Source><![CDATA[
    public static void registerDataEntityEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingDataEntityEventHandler);
        str dataEntitySetPriceChangeTrackingContextMethodStr = staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DataEntity_OnMappingEntityToDataSource);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailDiscountEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailDiscountLineEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailDiscountPriceGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(SalesLineDiscountAgreementEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(SalesPriceAgreementEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(PriceDiscPriceCustomerGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailChannelPriceGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailCatalogPriceGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailCatalogEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailCatalogProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResReleasedProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResReleasedProductV2Entity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResReleasedDistinctProductCDSEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResSellableReleasedProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductCategoryAssignmentEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductAttributeValueEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductV2Entity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);


        str dmfExecutionUpdateMethodStr = staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DMFDefinitionGroupExecution_onUpdated);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(DMFDefinitionGroupExecution), DataEventType::Updated, classIdentifierStr, dmfExecutionUpdateMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterDataEntityEventHandlers</Name>
				<Source><![CDATA[
    public static void unRegisterDataEntityEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingDataEntityEventHandler);
        str dataEntitySetPriceChangeTrackingContextMethodStr = staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DataEntity_OnMappingEntityToDataSource);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailDiscountEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailDiscountLineEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailDiscountPriceGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(SalesLineDiscountAgreementEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(SalesPriceAgreementEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(PriceDiscPriceCustomerGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailChannelPriceGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailCatalogPriceGroupEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailCatalogEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailCatalogProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResReleasedProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResReleasedProductV2Entity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResReleasedDistinctProductCDSEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResSellableReleasedProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductCategoryAssignmentEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductAttributeValueEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductEntity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductV2Entity), DataEventType::MappingEntityToDataSource, classIdentifierStr, dataEntitySetPriceChangeTrackingContextMethodStr);


        str dmfExecutionUpdateMethodStr = staticMethodStr(RetailPriceChangeTrackingDataEntityEventHandler, DMFDefinitionGroupExecution_onUpdated);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(DMFDefinitionGroupExecution), DataEventType::Updated, classIdentifierStr, dmfExecutionUpdateMethodStr);

    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOnUpdatedEventHandlers</Name>
				<Source><![CDATA[
    public static void registerOnUpdatedEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingEventHandlerDispatcher);
        str eventHandlerMethodStr = staticMethodStr(RetailPriceChangeTrackingEventHandlerDispatcher, scheduleBatchForOnUpdatedDataEvent);

        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(InventTableModule), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailGroupMemberLine), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailDiscountPriceGroup), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailCatalogPriceGroup), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailChannelPriceGroup), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductCategory), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(PriceDiscTable), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailInventTable), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailChannelTable), DataEventType::Updating, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailPeriodicDiscount), DataEventType::Updating, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(PriceParameters), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(SalesParameters), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(InventDimCombination), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(CatalogProduct), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOnInsertedEventHandlers</Name>
				<Source><![CDATA[
    public static void registerOnInsertedEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingEventHandlerDispatcher);
        str eventHandlerMethodStr = staticMethodStr(RetailPriceChangeTrackingEventHandlerDispatcher, scheduleBatchForOnInsertedDataEvent);

        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(InventTableModule), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailGroupMemberLine), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailDiscountPriceGroup), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailCatalogPriceGroup), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailChannelPriceGroup), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductCategory), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(PriceDiscTable), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(InventDimCombination), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(CatalogProduct), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOnDeletedEventHandlers</Name>
				<Source><![CDATA[
    public static void registerOnDeletedEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingEventHandlerDispatcher);
        str eventHandlerMethodStr = staticMethodStr(RetailPriceChangeTrackingEventHandlerDispatcher, scheduleBatchForOnDeletedDataEvent);

        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(InventTableModule), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailGroupMemberLine), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailDiscountPriceGroup), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailCatalogPriceGroup), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailChannelPriceGroup), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(EcoResProductCategory), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(PriceDiscTable), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(RetailPeriodicDiscount), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(InventDimCombination), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::registerDataEventHandler(tableStr(CatalogProduct), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterOnUpdatedEventHandlers</Name>
				<Source><![CDATA[
    public static void unRegisterOnUpdatedEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingEventHandlerDispatcher);
        str eventHandlerMethodStr = staticMethodStr(RetailPriceChangeTrackingEventHandlerDispatcher, scheduleBatchForOnUpdatedDataEvent);

        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(InventTableModule), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailGroupMemberLine), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailInventTable), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailChannelTable), DataEventType::Updating, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailDiscountPriceGroup), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailCatalogPriceGroup), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailChannelPriceGroup), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductCategory), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(PriceDiscTable), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailPeriodicDiscount), DataEventType::Updating, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(PriceParameters), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(SalesParameters), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(CatalogProduct), DataEventType::Updated, classIdentifierStr, eventHandlerMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterOnInsertedEventHandlers</Name>
				<Source><![CDATA[
    public static void unRegisterOnInsertedEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingEventHandlerDispatcher);
        str eventHandlerMethodStr = staticMethodStr(RetailPriceChangeTrackingEventHandlerDispatcher, scheduleBatchForOnInsertedDataEvent);

        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(InventTableModule), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailGroupMemberLine), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailDiscountPriceGroup), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailCatalogPriceGroup), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailChannelPriceGroup), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductCategory), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(PriceDiscTable), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(CatalogProduct), DataEventType::Inserted, classIdentifierStr, eventHandlerMethodStr);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterOnDeletedEventHandlers</Name>
				<Source><![CDATA[
    public static void unRegisterOnDeletedEventHandlers()
    {
        str classIdentifierStr = identifierstr(Dynamics.AX.Application.RetailPriceChangeTrackingEventHandlerDispatcher);
        str eventHandlerMethodStr = staticMethodStr(RetailPriceChangeTrackingEventHandlerDispatcher, scheduleBatchForOnDeletedDataEvent);

        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(InventTableModule), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailPeriodicDiscountLine), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailGroupMemberLine), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailDiscountPriceGroup), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailCatalogPriceGroup), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailChannelPriceGroup), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(EcoResProductCategory), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(PriceDiscTable), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(RetailPeriodicDiscount), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
        RetailPriceChangeTrackingEventHandlerRegister::unRegisterDataEventHandler(tableStr(CatalogProduct), DataEventType::Deleted, classIdentifierStr, eventHandlerMethodStr);
     }

]]></Source>
			</Method>
			<Method>
				<Name>registerDataEventHandler</Name>
				<Source><![CDATA[
    public static void registerDataEventHandler(str _tableName, DataEventType _dataEventType, str _classIdentifierStr, str _handlerMethodStr)
    {
        if (RetailPriceChangeTrackingEventHandlerRegister::isDataEventRegistered(_tableName, _dataEventType, _classIdentifierStr, _handlerMethodStr))
        {
            return;
        }

        System.Type handlerType = CLRInterop::getType('Microsoft.Dynamics.Ax.Xpp.DataEventHandler');
        System.Reflection.MethodInfo mi = System.Type::GetType(_classIdentifierStr).GetMethod(
            _handlerMethodStr,
            System.Reflection.BindingFlags::Public | System.Reflection.BindingFlags::Static);

        Microsoft.Dynamics.Ax.Xpp.DataEventHandler dataEventHandler = mi.CreateDelegate(handlerType);
        Microsoft.Dynamics.Ax.Xpp.DataEventManager::Subscribe(_tableName, _dataEventType, dataEventHandler);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterDataEventHandler</Name>
				<Source><![CDATA[
    public static void unRegisterDataEventHandler(str _tableName, DataEventType _dataEventType, str _classIdentifierStr, str _handlerMethodStr)
    {
        System.Object dataEvent = Microsoft.Dynamics.Ax.Xpp.DataEventManager::GetEvent(_tableName);
        if (dataEvent != null)
        {
            str eventName = RetailPriceChangeTrackingEventHandlerRegister::getEventNameByDataEventType(_dataEventType);
            System.Type eventType = dataEvent.GetType();
            Microsoft.Dynamics.Ax.Xpp.DataEventHandler deh = eventType.GetField(eventName).GetValue(dataEvent);
            if (deh != null)
            {
                System.Delegate[] invocationList = deh.GetInvocationList();
                for (int i = invocationList.Length - 1; i >= 0; i--)
                {
                    System.Delegate del = invocationList.Get(i);
                    if (del.Method.Name == _handlerMethodStr && del.Method.DeclaringType.FullName == _classIdentifierStr)
                    {
                        eventType.GetField(eventName).SetValue(dataEvent, System.Delegate::Remove(deh, del));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventNameByDataEventType</Name>
				<Source><![CDATA[
    public static str getEventNameByDataEventType(DataEventType _dataEventType)
    {
        switch(_dataEventType)
        {
            case DataEventType::Inserting:
                return 'InsertingEvent';

            case DataEventType::Inserted:
                return 'InsertedEvent';

            case DataEventType::Updating:
                return 'UpdatingEvent';

            case DataEventType::Updated:
                return 'UpdatedEvent';

            case DataEventType::Deleting:
                return 'DeletingEvent';

            case DataEventType::Deleted:
                return 'DeletedEvent';


            case DataEventType::UpdatingEntityDataSource:
                return 'UpdatingEntityDataSource';

            case DataEventType::InsertingEntityDataSource:
                return 'InsertingEntityDataSource';

            case DataEventType::MappingDataSourceToEntity:
                return 'MappingDataSourceToEntity';

            case DataEventType::MappedDataSourceToEntity:
                return 'MappedDataSourceToEntity';

            case DataEventType::MappingEntityToDataSource:
                return 'MappingEntityToDataSource';

            case DataEventType::MappedEntityToDataSource:
                return 'MappedEntityToDataSource';

            default:
                return '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>