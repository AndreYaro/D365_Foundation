<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscHeadingInterfaceQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscHeadingInterfaceQueryBuilder</c> class creates queries related to the <c>PriceDiscLine</c> map.
/// </summary>
public final class PriceDiscHeadingInterfaceQueryBuilder
{
    public PriceDiscLine            priceDiscLine;
    public SalesId                  salesId;
    public ModuleInventPurchSales   moduleType;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>PriceDiscHeadingInterfaceQueryBuilder</c> class object.
    /// </summary>
    /// <param name = "_priceDiscLine">
    /// The <c>PriceDiscLine</c> table buffer.
    /// </param>
    /// <param name = "_salesId">
    /// The Sales ID.
    /// </param>
    /// <param name = "_moduleType">
    /// The Module Type.
    /// </param>
    private void initialize(PriceDiscLine _priceDiscLine, SalesId _salesId, ModuleInventPurchSales _moduleType)
    {
        priceDiscLine   = _priceDiscLine;
        salesId         = _salesId;
        moduleType      = _moduleType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a field id on a map to field string on an actual mapped table.
    /// </summary>
    /// <param name="_mapFieldId">
    /// The field id from the map.
    /// </param>
    /// <param name="_tableId">
    /// The table id of the map.
    /// </param>
    /// <returns>
    /// The modified sort order object.
    /// </returns>
    private FieldName mappedFieldName(FieldId _mapFieldId, TableId _tableId)
    {
        FieldId fieldId = SysDictField::findMappedFieldId(tableNum(PriceDiscLine), _mapFieldId, _tableId);

        return fieldId2Name(_tableId, fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildNonSalesTableQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>PriceDiscLine</c> map query.
    /// </summary>
    /// <param name = "_priceDiscLine">
    /// The <c>PriceDiscLine</c> map buffer.
    /// </param>
    /// <param name = "_salesId">
    /// The Sales ID.
    /// </param>
    /// <returns>
    /// The <c>PriceDiscLine</c> query.
    /// </returns>
    static internal SysDaQueryObject buildNonSalesTableQuery(PriceDiscLine _priceDiscLine, SalesId _salesId, ModuleInventPurchSales _moduleType)
    {
        PriceDiscHeadingInterfaceQueryBuilder priceDiscHeadingInterfaceQueryBuilder = new PriceDiscHeadingInterfaceQueryBuilder();
        priceDiscHeadingInterfaceQueryBuilder.initialize(_priceDiscLine, _salesId, _moduleType);

        SysDaQueryObject nonSalesTableQueryObject = priceDiscHeadingInterfaceQueryBuilder.getPriceDiscLineQuery();

        priceDiscHeadingInterfaceQueryBuilder.joinInventTableModule(nonSalesTableQueryObject);

        return nonSalesTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceDiscLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>PriceDiscLine</c> query object with where clause.
    /// </summary>
    /// <returns>
    /// The <c>PriceDiscLine</c> query object.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject getPriceDiscLineQuery()
    {   
        FieldName   fieldNameFromPriceDiscLineMap;

        SysDaQueryObject priceDiscLineQuery = new SysDaQueryObject(priceDiscLine);
        priceDiscLineQuery.projection().addSum(fieldStr(PriceDiscLine, LineAmount));
               
        fieldNameFromPriceDiscLineMap = this.mappedFieldName(fieldNum(PriceDiscLine, SalesPurchId), priceDiscLine.TableId);
        priceDiscLineQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(priceDiscLine, fieldNameFromPriceDiscLineMap),
                new SysDaValueExpression(salesId))
            .and(new SysDaGreaterThanExpression(
                new SysDaFieldExpression(priceDiscLine, fieldStr(PriceDiscLine, ItemId)),
                new SysDaValueExpression(''))));
        
        return priceDiscLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Joins the query object to <c>InventTableModule</c> table.
    /// </summary>
    /// <param name = "_nonSalesTableQueryObject">
    /// The query object.
    /// </param>
    /// <returns>
    /// The query object.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject joinInventTableModule(SysDaQueryObject _nonSalesTableQueryObject)
    {
        InventTableModule inventTableModule;

        SysDaQueryObject inventTableModuleQuery = new SysDaQueryObject(inventTableModule);
        inventTableModuleQuery = this.addWhereClauseToInventTableModule(inventTableModuleQuery, inventTableModule);
        _nonSalesTableQueryObject.joinClause(SysDaJoinKind::ExistsJoin, inventTableModuleQuery);

        return _nonSalesTableQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWhereClauseToInventTableModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds where clause to the <c>InventTableModule</c> table of query object.
    /// </summary>
    /// <param name = "_inventTableModuleQuery">
    /// The query object.
    /// </param>
    /// <param name = "_inventTableModule">
    /// The <c>InventTableModule</c> buffer.
    /// </param>
    /// <returns>
    /// The query object.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject addWhereClauseToInventTableModule(SysDaQueryObject _inventTableModuleQuery, InventTableModule _inventTableModule)
    {   
        _inventTableModuleQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTableModule, fieldStr(InventTableModule, ItemId)),
                new SysDaFieldExpression(priceDiscLine, fieldStr(PriceDiscLine, ItemId)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTableModule, fieldStr(InventTableModule, ModuleType)),
                new SysDaValueExpression(moduleType)))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_inventTableModule, fieldStr(InventTableModule, EndDisc)),
                new SysDaValueExpression(NoYes::Yes))));
          
        return _inventTableModuleQuery;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>