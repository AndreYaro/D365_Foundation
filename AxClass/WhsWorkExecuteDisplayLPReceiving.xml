<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayLPReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the mobile device flow used to handle received license plates.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::LicensePlateReceiving)]
[WHSWorkExecuteMode(WHSWorkExecuteMode::LicensePlateReceivingAndLocate)]
public class WhsWorkExecuteDisplayLPReceiving extends WHSWorkExecuteDisplay
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createReceivingExceptionLog</Name>
				<Source><![CDATA[
    protected void createReceivingExceptionLog(WhsWorkExecute _workExecute, WHSUserId _localUserId)
    {
        if (pass.lookupNum(#Module) == WHSModule::Transfer)
        {
            _workExecute.createTOReceivingException(WHSUOMStructure::findFirstByLicensePlateModule(pass.lookupStr(#LicensePlateId), WHSModule::Transfer),
                                                    pass.lookup(#ReceivingExceptionDesc),
                                                    _localUserId,
                                                    pass.lookupStr(#TONum),
                                                    pass.lookupNum(#TOLineNum));
        }
        else
        {
            var orderProvider = this.receivingOrderProvider(false);
            if (!orderProvider)
            {
                orderProvider = new WHSWorkExecuteDisplayReceivingPurchOrderProvider();
            }

            _workExecute.createInboundOrderReceivingException(WHSUOMStructure::findFirstByLicensePlateModule(pass.lookupStr(#LicensePlateId), orderProvider.module()),
                                                pass.lookup(#ReceivingExceptionDesc),
                                                _localUserId,
                                                orderProvider.orderNum(pass),
                                                orderProvider.lineNum(pass),
                                                orderProvider.workTransType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemInfoForReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates item info string for receiving item.
    /// </summary>
    /// <param name="_asnItem">
    /// ASN item containing the item info.
    /// </param>
    /// <returns>
    /// String representation of the item info for receiving.
    /// </returns>
    protected str generateItemInfoForReceiving(WHSASNItem _asnItem)
    {
        WHSInventTable whsInventTable = WHSInventTable::find(_asnItem.ItemId);
        str            desc1;
        str            desc2;

        if (whsInventTable.rfDescription1)
        {
            desc1 = '\n        ' + whsInventTable.rfDescription1;
        }
        if (whsInventTable.rfDescription2)
        {
            desc2 = '\n        ' + whsInventTable.rfDescription2 + '\n';
        }
        else
        {
            desc1 = desc1 + '\n';
        }

        InventTable inventTable = InventTable::find(_asnItem.ItemId);
        InventHandlingUnitId unitID = whsCatchWeightHelper::inventHandlingUnitId(InventTable.ItemId);

        str dimensions = this.generateItemDimension(_asnItem.ItemId, _asnItem.InventDimId);

        str convertedQty;
        if (unitID != _asnItem.uom)
        {
            var releasedProductUnitConverter = EcoResReleasedProductUnitConverter::construct();

            convertedQty = strFmt('\n        %1 %2',
                releasedProductUnitConverter.convert(_asnItem.Qty,
                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(_asnItem.uom),
                                                        UnitOfMeasure::unitOfMeasureIdBySymbol(unitID),
                                                        NoYes::No,
                                                        _asnItem.ItemId,
                                                        _asnItem.InventDimId,
                                                        NoYes::No),
                unitID);
        }

        // Item Id: %1%2%3Qty: %4 %5%6%7
        return strFmt("@WAX734", _asnItem.ItemId, desc1, desc2, _asnItem.Qty, _asnItem.uom, convertedQty, dimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDisplayInfoForReceivedOrderLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build up the controls displaying information about the order lines being received.
    /// </summary>
    /// <param name = "_ret">Mobile device form state container.</param>
    /// <param name = "_asnItem"><c>WHSASNItem</c> record containing information about the item being received.</param>
    /// <param name = "_module">Is this a purchase or a transfer order receipt?</param>
    /// <param name = "_recordIdx">Index of the <c>WHSASNItem</c> record being displayed, used for ensuring unique control naming.</param>
    /// <param name = "_prevVendName">Name of the vendor from the previous <c>WHSASNItem</c> record.</param>
    /// <param name = "_prevOrderNum">Order number from the previous <c>WHSASNItem</c> record.</param>
    /// <returns>Container with display information elements.</returns>
    protected container buildDisplayInfoForReceivedOrderLines(container _ret, WHSASNItem _asnItem, WHSModule _module, int _recordIdx, VendName _prevVendName, WHSOrderNum _prevOrderNum)
    {
        VendName    vendName;
        WHSOrderNum orderNum;

        if (this.isModuleForExternalInboundShipment(_module))
        {
            WHSLoadLine loadLine = WHSLoadLine::findbyRecId(_asnItem.LoadLineRefRecId);
            vendName = loadLine.displayVendName();

            if (vendName != _prevVendName)
            {
                _ret += [this.buildControl(#RFLabel, strFmt('%1.2', _recordIdx), strFmt("@SYS82246", vendName), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(VendName))];
            }
        }

        orderNum = WHSLoadLine::findbyRecId(_asnItem.LoadLineRefRecId).OrderNum;
        if (orderNum != _prevOrderNum)
        {
            _ret += [this.buildControl(#RFLabel, strFmt('%1.3', _recordIdx), strFmt("@WAX3657", orderNum), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSOrderNum))];
        }

        str itemInfo = this.generateItemInfoForReceiving(_asnItem);
        _ret += [this.buildControl(#RFLabel, strFmt('%1.4', _recordIdx), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(ItemId))];

        return [vendName, orderNum, _recordIdx + 1, _ret];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isModuleForExternalInboundShipment</Name>
				<Source><![CDATA[
    protected boolean isModuleForExternalInboundShipment(WHSModule _module)
    {
        return _module == WHSModule::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceivingLicensePlateInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for showing info of receiving license plate.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_licensePlateId">
    /// License plate id of the receiving license plate.
    /// </param>
    /// <param name="_module">
    /// Module of the receiving license plate.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    protected container buildReceivingLicensePlateInfo(
        container           _con,
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _module)
    {
        container ret = _con;

        ret += [this.buildControl(#RFLabel, strFmt('%1.1', 0), strFmt("@WAX730", _licensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];

        ret = this.buildReceivingLicensePlateDisplayInfo(ret, _licensePlateId, _module);

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).ShowDisposition && _module != WHSModule::Transfer)
        {
            ret = this.buildDispositon(ret, pass.lookupStr(#Disposition), true, true);
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceivingLicensePlateDisplayInfo</Name>
				<Source><![CDATA[
    private container buildReceivingLicensePlateDisplayInfo(
        container           _con,
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _module)
    {
        container ret = _con;

        if (this.shouldBuildReceivingLicensePlateWithUOMStructureDisplayInfo(_licensePlateId))
        {
            ret = this.buildReceivingLicensePlateWithUOMStructureDisplayInfo(ret, _licensePlateId, _module);
        }
        else
        {
            ret = this.buildReceivingLicensePlateWithoutUOMStructureDisplayInfo(ret, _licensePlateId, _module);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBuildReceivingLicensePlateWithUOMStructureDisplayInfo</Name>
				<Source><![CDATA[
    private boolean shouldBuildReceivingLicensePlateWithUOMStructureDisplayInfo(WHSLicensePlateId _licensePlateId)
    {
        return WHSUOMStructure::existForParentLicensePlateId(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceivingLicensePlateWithUOMStructureDisplayInfo</Name>
				<Source><![CDATA[
    protected container buildReceivingLicensePlateWithUOMStructureDisplayInfo(
        container           _con,
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _module)
    {
        container ret = _con;
        
        VendName    prevVendName;
        WHSOrderNum prevOrderNum;
        int         recordIdx;

        WHSASNItem      asnItem;
        WHSUOMStructure uomStructure;

        while select sum(Qty) from asnItem
            group by ItemId, UOM, LoadId, LoadLineRefRecId, InventDimId
            join TableId from uomStructure
                where uomStructure.LicensePlateId == asnItem.LicensePlateId
                    && uomStructure.LicensePlateParent == _licensePlateId
                    && uomStructure.Module == _module
        {
            [prevVendName, prevOrderNum, recordIdx, ret] = this.buildDisplayInfoForReceivedOrderLines(ret, asnItem, _module, recordIdx, prevVendName, prevOrderNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceivingLicensePlateWithoutUOMStructureDisplayInfo</Name>
				<Source><![CDATA[
    protected container buildReceivingLicensePlateWithoutUOMStructureDisplayInfo(
        container           _con,
        WHSLicensePlateId   _licensePlateId,
        WHSModule           _module)
    {
        container ret = _con;

        VendName    prevVendName;
        WHSOrderNum prevOrderNum;
        int         recordIdx;

        WHSASNItem asnItem;

        if (this.isModuleForExternalInboundShipment(_module))
        {
            InventDim inventDim;
            InventLocationId currentWarehouseId = pass.lookupStr(#InventLocationId);
            
            while select asnItem
                where asnItem.LicensePlateId == _licensePlateId
                    && asnItem.Module == _module
                join InventLocationId from inventDim
                    where inventDim.inventDimId == asnItem.InventDimId
            {
                if (this.isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed(inventDim.InventLocationId, currentWarehouseId))
                {
                    [prevVendName, prevOrderNum, recordIdx, ret] = this.buildDisplayInfoForReceivedOrderLines(ret, asnItem, _module, recordIdx, prevVendName, prevOrderNum);
                }
            }
        }
        else
        {
            while select asnItem
                where asnItem.LicensePlateId == _licensePlateId
                    && asnItem.Module == _module
            {
                [prevVendName, prevOrderNum, recordIdx, ret] = this.buildDisplayInfoForReceivedOrderLines(ret, asnItem, _module, recordIdx, prevVendName, prevOrderNum);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDisplayingReceivingSummaryPage</Name>
				<Source><![CDATA[
    private boolean skipDisplayingReceivingSummaryPage()
    {
        return WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).ReceivingSummaryPageDisplayRule == WHSReceivingSummaryPageDisplayRule::SkipSummary;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayNextForm</Name>
				<Source><![CDATA[
    public container displayNextForm(container _con, str _buttonClicked = '')
    {
        WHSWorkExecuteDisplay   workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        WMSLocationId           newLocationId;
        Set                     excludeLocationId = new Set(Types::String);
        container               tmpCon;
        container               ret = conNull();
        container               con = _con;
        container               tmpPass;
        boolean                 recall;
        boolean                 addCancel = true;
        boolean                 addExceptionButton;
        WHSRFPassthrough        globalPass = pass;
        WHSUOMStructure         uomStructure;
        WHSOrderNum             orderNum;

        if (WHSBarcodeDataParserFactory::isBarcodeDataParsingEnabled() && step != 0)
        {
            container tmpFieldValues;

            //processControl won't be called in this case, so calling it to process barcodes
            pass = WHSRFPassthrough::create(conPeek(_con, 2));
            pass = this.combineMaps(globalPass, pass);

            [con, tmpFieldValues] = WHSRFControlData::processDataWithCallback(this, _con, pass);
            
            pass = WHSRFPassthrough::create(conPeek(con, 2));
        
            WHSRFPassthrough fieldValues = new WHSRFPassthrough(Types::String, Types::String);
            fieldValues = WHSRFPassthrough::create(tmpFieldValues);
            pass = this.combineMaps(pass, fieldValues);

            globalPass = pass;

            pass = WHSRFPassthrough::create(conPeek(con, 2));
        }
        else
        {
            pass = WHSRFPassthrough::create(conPeek(_con, 2));
        }
     
        pass = this.combineMaps(globalPass, pass);

        int hasError = this.hasError(con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        if (!pass.exists(#NewLicensePlateId))
        {
            pass.insert(#NewLicensePlateId, '');
        }

        if (_buttonClicked == #RFException)      // Exception
        {
            step = #ReceivingExceptionStep1;
            addCancel = false;
        }
        else if (_buttonClicked == #RFNextException)   // Next Exception
        {
            addCancel = false;
        }
        else if (_buttonClicked == #RFOverride)  // Override
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFFull)  // Full (Split)
        {
            step = #SplitWork;
        }
        else if (_buttonClicked == #RFNoLocation)  // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
            }
            [newLocationId, tmpCon] = workExecute.findNewLocation(workLine, excludeLocationId);
            excludeLocationId = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
            if (pass.exists(#PrevStep))
            {
                step = pass.lookup(#PrevStep);
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }
        else if (_buttonClicked == #RFSkip)
        {
            WHSWorkLine::skipWorkLine(pass.lookup(#WorkId), pass.parmLineNum());
            workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);

            if (workLine.RecId)
            {
                pass.parmLineNum(workLine.LineNum);
                pass.insert(#DetermineStep, 1);
                workLine.clear();
            }
        }
        else if (_buttonClicked == #RFSplitPut)
        {
            this.validateSplitPutAllowed();
            step = #SplitPutWork;
        }

        switch (step)
        {
            case 0:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                }
                ret = this.buildGetLicensePlate(ret);
                step = 1;

                if (this.skipDisplayingReceivingSummaryPage())
                {
                    pass.insert(#CreateWork, 1);
                }

                break;

            case 1:
                if (pass.exists(#WorkComplete))
                {
                    pass.remove(#WorkComplete);
                }

                if (!this.checkWarehouseAllowsRFReceipt(WHSWorkUserSession::find(pass.lookup(#UserId)).InventLocationId))
                {
                    throw error("@WAX4806");
                }

                // Avoid hitting this code during putaway by validating that work has not already been created
                if (!pass.exists(#LicensePlateId)
                || (!pass.exists(#ContainerType)
                &&  !pass.exists(#WorkId)))
                {
                    if (!pass.exists(#LicensePlateId))
                    {
                        pass.insert(#LicensePlateId, this.getDataFromCon(con, #LicensePlateId));
                        if (pass.lookup(#LicensePlateId) == '')
                        {
                            throw error("@WAX691");
                        }

                        if (WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).DisplayContainerTypeCode == NoYes::Yes)
                        {
                            ret = this.buildGetLicensePlate(ret, '', pass.lookupStr(#LicensePlateId));
                            break;
                        }
                    }
                    else if (pass.exists(#Initiation))
                    {
                        pass.insert(#ContainerType, this.getDataFromCon(con, #ContainerType));
                        pass.remove(#Initiation);
                    }

                    uomStructure = workExecute.getLicensePlateValidStructure(pass.lookup(#LicensePlateId), pass.lookupStr(#InventLocationId), pass.exists(#CreateWork));

                    this.validateLicensePlateIsApplicable(pass.lookup(#LicensePlateId), uomStructure, pass.lookupStr(#InventLocationId));
                    pass.parmModule(uomStructure.Module);
                }

                if (pass.exists(#WorkId) && pass.exists(#LineNum))
                {
                    workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }
                    workTable = workLine.whsWorkTable();
                    if (workTable.InventLocationId != pass.lookup(#InventLocationId))
                    {
                        throw error(strFmt("@WAX:WhsLPReceivingWrongWarehouseWithInfo", workTable.InventLocationId));                       
                    }
                    if (WhsWorkTransactionType::singletonFromTypeOrDefault(workTable.WorkTransType).isForExternalInboundShipment()
                         && !InventLocation::find(workTable.InventLocationId).wmsLocationIdDefaultReceipt)
                    {
                        throw error("@WAX4667");
                    }
                }
                else
                {
                    // Change order of conditions to prevent hard error after capturing catch weight
                    if (!pass.exists(#LicensePlateId) && this.getDataFromCon(con, #LicensePlateId))
                    {
                        pass.insert(#LicensePlateId, this.getDataFromCon(con, #LicensePlateId));
                    }

                    ttsBegin;
                    
                    workExecute.parmDefaultReceivingLocationId(this.receivingLocationId());
                    
                    RefRecId asnItemLeftToCapture = this.getASNItemRecIdToCaptureWeight(pass.lookup(#LicensePlateId));
                    boolean isWorkCreationProcess = pass.exists(#CreateWork);

                    if (!isWorkCreationProcess)
                    {
                        if (!pass.parmModule())
                        {
                            Debug::assert(pass.parmModule());
                            pass.parmModule(WHSModule::Purch);
                        }

                        workLine = workExecute.scanLicensePlate(pass.lookup(#LicensePlateId), userId, pass.parmModule());
                    }
                    else if (asnItemLeftToCapture != 0)
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId, asnItemLeftToCapture);
                        ret = this.buildLPRecWeightCapture(ret);
                        step = #CatchWeightTagCapture;
                        ttsCommit;
                        break;
                    }
                    else
                    {
                        boolean deferredReceivingFlightEnabled = WHSDeferredLPReceivingFlight::instance().isEnabled();
                        boolean receivingWorkWasDeferred = false;
                        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));
                        pass.parmReceiptId(NumberSeq::newGetNum(WHSParameters::numRefWHSReceiptId()).num());

                        if (menuItemTable.DeferredReceivingPolicyId != '' && deferredReceivingFlightEnabled)
                        {
                            using (var deferredReceivingBatchTaskBundleCreationContext = WHSDeferredReceivingBatchTaskBundleCreationFlight::instance().isEnabled() ? WHSDeferredReceivingBatchTaskBundleCreationContext::construct() : null)
                            {
                                if (WHSDeferredReceivingDispositionCodeAndUnitizedQtyFlight::instance().isEnabled())
                                {
                                    receivingWorkWasDeferred = this.tryToDeferWork(uomStructure, menuItemTable, this.getDispositionCodeFromCon(_con));
                                }
                                else
                                {
                                    receivingWorkWasDeferred = this.tryToDeferWork(uomStructure, menuItemTable);
                                }
                            }
                        }
                        
                        if (receivingWorkWasDeferred && deferredReceivingFlightEnabled)
                        {
                            WHSDeferredReceivingPolicy deferredReceivingPolicy = WHSDeferredReceivingPolicy::find(menuItemTable.DeferredReceivingPolicyId);

                            if (deferredReceivingPolicy.LabelPrintingOnConfirmingReceiving != WHSDeferredReceivingPrintLabelProcessEnum::DoNotGenerateLabels)
                            {
                                this.buildLicensePlateLabelsForDeferredReceiving(uomStructure, menuItemTable);
                            }
                        }
                        else
                        {
                            this.createWorkFromLicensePlate(con, this.getDefaultContainerTypeCode(), workExecute);
                        }
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    workTable = workLine.whsWorkTable();

                    if (workTable && workTable.InventLocationId != pass.lookup(#InventLocationId))
                    {
                        throw error(strFmt("@WAX:WhsLPReceivingWrongWarehouseWithInfo", workTable.InventLocationId));
                    }

                    ttsCommit;

                    if (workLine.LineNum == -100 && !isWorkCreationProcess)
                    {
                        pass.insert(#CreateWork, 1);
                        ret = this.buildReceivingLicensePlateInfo(ret, pass.lookup(#LicensePlateId), uomStructure.Module);
                        step = 1;
                        pass.insert(#PrevStep, step);
                        addExceptionButton = true;
                        break;
                    }
                }

                if ((workLine &&  mode == WHSWorkExecuteMode::LicensePlateReceiving)
                        || (!workLine && !workExecute.parmWasLPWorkCreationAttempted()))
                {
                    pass.remove(#LicensePlateId);
                    pass.remove(#PrevStep);
                    pass.insert(#NewLicensePlateId, '');
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                    ret = this.buildGetLicensePlate(ret);
                    step = 1;

                    if (this.skipDisplayingReceivingSummaryPage())
                    {
                        pass.insert(#CreateWork, 1);
                    }

                    break;
                }

                pass.insert(#DetermineStep, 1);
                if (workLine)
                {
                    con = conPoke(con, 2, pass.pack());
                    [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                    pass = new WHSRFPassthrough(Types::String, Types::String);
                    pass = WHSRFPassthrough::create(tmpPass);

                    if (step == #Restart)
                    {
                        step = 0;

                        // If restarting, need to remove target lp that might have been saved from group puts
                        if (pass.exists(#TargetLicensePlateId))
                        {
                            pass.remove(#TargetLicensePlateId);
                        }
                    }
                    else if (step == #StepOne)
                    {                        
                        if (workTable.WorkTransType == WHSWorkTransType::CrossDocking)
                        {
                            // The system will execute WHSWorkExecuteDisplay.processWorkLine which is removing 
                            // the LicensePlateId from the pass. For cross docking work and LP receiving and putaway, if the LicensePlateId is not in the pass,
                            // the system will consider that the work was not created and runs the code to validate if the WHSUOMStructure did not have work created
                            // and it would throw an error.
                            // In order to workaround this issue, the system inserts the target license plate of the work in the pass, so it does not try to execute
                            // code that should be run only when work is not created yet.

                            this.insertLicensePlateIdForInitialPickWorkLine();
                        }                        

                        step = 1;
                        pass.insert(#DetermineStep, 1);
                    }

                    if (recall)
                    {
                        con = this.updateModeStepPass(con, mode, step, pass);
                        con = conPoke(con, 1, [mode, step]);
                        workExecuteDisplay.setGlobals(mode, step, userId, pass, null);

                        return [ret, false, con, _buttonClicked, recall, addCancel, addExceptionButton];
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;

            case #CatchWeightTagCapture:
                ret = this.processLPRecWeightCapture(hasError, con);
                break;

            default:
                if (pass.exists(#WorkId))
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    workTable = workLine.whsWorkTable();
                }

                WHSWorkBuildId workBuildId = workTable.WorkBuildId;
                con = conPoke(con, 2, pass.pack());
                [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                pass = new WHSRFPassthrough(Types::String, Types::String);
                pass = WHSRFPassthrough::create(tmpPass);

                if (step == #Restart)
                {
                    // Check for additional work to execute in case of cross docking
                    workLine = WHSWorkTable::findOpenCrossDockWorkByWorkBuildId(workBuildId, userId);

                    if (workLine.RecId != 0)
                    {
                        if (pass.exists(#WorkComplete))
                        {
                            pass.remove(#WorkComplete);
                        }

                        this.restartForCrossDockInbound();
                        con = this.updateModeStepPass(con, mode, step, pass);
                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, mode, step, userId, newLocationId, _buttonClicked, false);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(tmpPass);
                    }
                    else
                    {
                        step = 0;

                        // If restarting, need to remove target lp that might have been saved from group puts
                        if (pass.exists(#TargetLicensePlateId))
                        {
                            pass.remove(#TargetLicensePlateId);
                        }
                    }
                }
                else if (step == #StepOne)
                {
                    step = 1;
                    if (!pass.exists(#RebuildForm))
                    {
                        this.insertLicensePlateIdForInitialPickWorkLine();

                        step = 1;
                        pass.insert(#DetermineStep, 1);
                    }
                    else
                    {
                        ret = conNull();
                        if (pass.exists(#LicensePlateId))
                        {
                            ret = this.buildReceivingLicensePlateInfo(ret, pass.lookup(#LicensePlateId), uomStructure.Module);
                        }
                        else
                        {
                            ret = this.buildGetLicensePlate(ret, '', pass.lookupStr(#LicensePlateId));
                        }
                        pass.remove(#RebuildForm);
                        addExceptionButton = true;
                        addCancel = true;
                    }
                }

                if (recall)
                {
                    con = this.updateModeStepPass(con, mode, step, pass);
                    con = conPoke(con, 1, [mode, step]);
                    workExecuteDisplay.setGlobals(mode, step, userId, pass, null);

                    var currRet = [ret, false, con, _buttonClicked, recall, addCancel, addExceptionButton];
                    return currRet;
                }
                break;
        }

        return [ret, true, con, _buttonClicked, recall, addCancel, addExceptionButton];
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryToDeferWork</Name>
				<Source><![CDATA[
    private boolean tryToDeferWork(WHSUOMStructure _uomStructure, WHSRFMenuItemTable _menuItemTable, WHSDispositionCode _dispositionCode = '')
    {
        if (!WHSDeferredLPReceivingFlight::instance().isEnabled())
        {
            return false;
        }

        WHSDeferredLPReceiving deferredReceiving;

        if (WHSDeferredReceivingLPConstructorRefactoringFlight::instance().isEnabled())
        {
            deferredReceiving = WHSDeferredLPReceivingFactory::newFromModule(_uomStructure.Module);
            deferredReceiving.initFromParameters(pass, _menuItemTable, this.getDefaultContainerTypeCode());
            deferredReceiving.initFromUOMStructure(_uomStructure);
        }
        else if (WHSDeferredReceivingISOFlight::instance().isEnabled())
        {
            deferredReceiving = this.createDeferredReceiving(pass, _uomStructure, _menuItemTable,
                this.getDefaultContainerTypeCode(), WHSRFMenuItemTable::getWorkTransTypeForMixedLP(_menuItemTable.MenuItemName, pass));
        }
        else
        {
            deferredReceiving = WHSDeferredLPReceiving::newFromParameters(
                pass,
                _uomStructure,
                _menuItemTable,
                this.getDefaultContainerTypeCode(),
                WHSRFMenuItemTable::getWorkTransTypeForMixedLP(_menuItemTable.MenuItemName, null));
        }

        if (!deferredReceiving)
        {
            return false;
        }

        deferredReceiving.parmDispositionCode(_dispositionCode);

        boolean wasWorkDeferred = deferredReceiving.tryToDeferLPReceiveOrder();
        if (wasWorkDeferred)
        {
            pass.remove(#CreateWork);
        }

        return wasWorkDeferred;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeferredReceiving</Name>
				<Source><![CDATA[
    [Wrappable(true), Replaceable(true), SysObsolete('Use WHSDeferredLPReceivingFactory instead. Delete when WHSDeferredReceivingISOFlight is deleted.', false, 25\07\2024)]
    internal WHSDeferredLPReceiving createDeferredReceiving(
        WHSRFPassthrough _pass,
        WHSUOMStructure _uomStructure,
        WHSRFMenuItemTable _menuItemTable,
        WHSDefaultContainerTypeCode _defaultContainerCode,
        WHSWorkTransType _workTransType)
    {
        return WHSDeferredLPReceiving::newFromParameters(_pass, _uomStructure, _menuItemTable,
           _defaultContainerCode, _workTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLicensePlateLabelsForDeferredReceiving</Name>
				<Source><![CDATA[
    private void buildLicensePlateLabelsForDeferredReceiving(WHSUOMStructure _uomStructure, WHSRFMenuItemTable _menuItemTable)
    {
        if (!WHSDeferredLPReceivingFlight::instance().isEnabled())
        {
            return;
        }

        WHSDeferredLPReceivingWHSLicensePlateLabelBuilder licensePlateBuilder = WHSDeferredLPReceivingWHSLicensePlateLabelBuilder::newFromParm(pass, _uomStructure, _menuItemTable);
        licensePlateBuilder.buildLicensePlateLabels();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLicensePlateIdForInitialPickWorkLine</Name>
				<Source><![CDATA[
    private void insertLicensePlateIdForInitialPickWorkLine()
    {
        if (workLine.isInitialPickLine())
        {
            pass.insert(#LicensePlateId, workTable.TargetLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findToWarehouseForASNTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the to warehouse for an ASN transfer.
    /// </summary>
    /// <param name = "_uomStructure">The UOM structure.</param>
    /// <returns>The to warehouse.</returns>
    protected InventLocationId findToWarehouseForASNTransfer(WHSUOMStructure _uomStructure)
    {
        return WhsWorkExecute::findToWarehouseForASNTransfer(_uomStructure);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed</Name>
				<Source><![CDATA[
    private boolean isReceiptAtPlannedWarehouseOrAtOtherWarehouseAllowed(InventLocationId _plannedWarehouseId, InventLocationId _currentWarehouseId)
    {
        return (_plannedWarehouseId == _currentWarehouseId
               || InventSite::allowReceiptAtOtherWarehouse(_plannedWarehouseId, _currentWarehouseId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateIsApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that license plate is valid and can be used.
    /// </summary>
    /// <param name = "_licensePlateId">A license plate Id.</param>
    /// <param name = "_uomStructure">A unit structure.</param>
    /// <param name = "_inventLocationId">An inventory location Id.</param>
    /// <exception cref="Exception::Error">
    /// License plate is invalid or cannot be used.
    /// </exception>
    protected void validateLicensePlateIsApplicable(
        WHSLicensePlateId _licensePlateId,
        WHSUOMStructure _uomStructure,
        InventLocationId _inventLocationId)
    {
        WhsWorkExecute::validateLicensePlateIsApplicable(_licensePlateId, _uomStructure, _inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkFromLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a work line through scanning a license plate.
    /// </summary>
    /// <param name = "_con">A previous form container.</param>
    /// <param name = "_defaultContainerTypeCode">A default container type code.</param>
    /// <param name = "_workExecute">An instance of the <c>WhsWorkExecute</c> class.</param>
    protected void createWorkFromLicensePlate(
        container _con,
        WHSDefaultContainerTypeCode _defaultContainerTypeCode,
        WhsWorkExecute _workExecute)
    {
        WHSLicensePlate licensePlate = this.createOrUpdateLicensePlate(pass.lookup(#LicensePlateId), _defaultContainerTypeCode);

        workLine = this.createWork(_workExecute, licensePlate, this.getDispositionCodeFromCon(_con));

        WHSWorkTransType workTransType = workLine.whsWorkTable().WorkTransType;

        if (this.workLineHasCatchWeightTagTrackedItem(workLine))
        {
            if (pass.exists(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList))
            {
                WHSCatchWeightTagLastRegistration::updateCatchWeightTagRegistrationWorkLine(str2con(pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList)), workLine.WorkId);
            }
            else if (workTransType == WHSWorkTransType::TransferReceipt)
            {
                this.linkTagsForAllCatchWeightTagItemsToWorkLine(workLine);
            }
        }

        this.updateCatchWeightTagDimensions(workTransType);

        this.printLabels();

        pass.remove(#CreateWork);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCatchWeightTagDimensions</Name>
				<Source><![CDATA[
    private void updateCatchWeightTagDimensions(WHSWorkTransType _workTransType)
    {
        if (WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isForExternalInboundShipment()
            && pass.exists(WHSWorkExecuteDisplayCatchWeightControls::ProcessedASNItemRecIdCollection))
        {
            container asnItemRecIds = str2con(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::ProcessedASNItemRecIdCollection));

            for (int counter = 1; counter <= conLen(asnItemRecIds); counter++)
            {
                WHSASNItem asnItem = WHSASNItem::findByRecId(conPeek(asnItemRecIds, counter));
                
                if (this.isAutoTrackingEnabled(asnItem.ItemId)
                    && WHSInventTable::isCatchWeightTagTracked(asnItem.ItemId))
                {
                    InventTrans inventTrans;
                    InventTransOrigin inventTransOrigin;
                    InventDim inventDim;

                    select firstonly InventDimId from inventTrans
                        where inventTrans.ItemId == asnItem.ItemId
                            && inventTrans.StatusIssue == 0
                            && inventTrans.StatusReceipt == StatusReceipt::Registered
                        exists join inventTransOrigin
                            where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                                && inventTransOrigin.InventTransId == asnItem.InventTransId
                        exists join inventDim
                            where inventDim.InventDimId == inventTrans.InventDimId
                                && inventDim.LicensePlateId == asnItem.LicensePlateId;

                    if (inventTrans.RecId)
                    {
                        this.updateAllCatchWeightTagDimensions(InventDim::find(WHSCatchWeightTag::inventDimWithTagSpecificDimensions(inventTrans.inventDim(), asnItem.ItemId)));
                    }
                }
            }
        }

        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::ProcessedASNItemRecIdCollection);
        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildGetLicensePlate</Name>
				<Source><![CDATA[
    public container buildGetLicensePlate(container _con, str _extraText = '', WHSLicensePlateId _licensePlateId = '')
    {
        container ret = super(_con, _extraText, _licensePlateId);

        container locCon = this.buildControl(#RFText, #WMSLocationId, "@SYS80395", 1, this.receivingLocationId(), extendedTypeNum(WMSLocationId), '', 0, false);
        ret = conIns(ret, this.getLPControlPosition(ret), locCon);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLPControlPosition</Name>
				<Source><![CDATA[
    private int getLPControlPosition(container _con)
    {
        int length = conLen(_con);

        for (int i = 1; i <= length; i++)
        {
            str name = conPeek(conPeek(_con, i), #name);

            if (name == #LicensePlateId)
            {
                return i;
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workLineHasCatchWeightTagTrackedItem</Name>
				<Source><![CDATA[
    private boolean workLineHasCatchWeightTagTrackedItem(WHSWorkLine _workLine)
    {
        if (!WHSCatchWeightTagCache::construct().isCatchWeightTagFeatureUsed())
        {
            return false;
        }

        if (!_workLine.ItemId)
        {
            WHSWorkInventTrans workInventTrans;
            WHSInventTable whsInventTable;
            WHSCatchWeightItemHandlingPolicy itemHandlingPolicy;

            select firstonly RecId from workInventTrans
                where workInventTrans.WorkId == _workLine.WorkId
                    && workInventTrans.LineNum == _workLine.LineNum
                exists join whsInventTable
                    where whsInventTable.ItemId == workInventTrans.ItemId
                exists join itemHandlingPolicy
                    where itemHandlingPolicy.PolicyName == whsInventTable.CatchWeightItemHandlingPolicyName
                        && itemHandlingPolicy.CatchWeightTagTracking == NoYes::Yes;
        
            return workInventTrans.RecId != 0;
        }
        else
        {
            return WHSInventTable::isCatchWeightTagTracked(_workLine.ItemId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkTagsForAllCatchWeightTagItemsToWorkLine</Name>
				<Source><![CDATA[
    private void linkTagsForAllCatchWeightTagItemsToWorkLine(WHSWorkLine _workLine)
    {
        ttsbegin;

        if (!_workLine.ItemId)
        {
            WHSWorkInventTrans workInventTrans;
            WHSInventTable whsInventTable;
            WHSCatchWeightItemHandlingPolicy itemHandlingPolicy;

            while select ItemId from workInventTrans
                group by ItemId
                where workInventTrans.WorkId == _workLine.WorkId
                    && workInventTrans.LineNum == _workLine.LineNum
                exists join whsInventTable
                    where whsInventTable.ItemId == workInventTrans.ItemId
                exists join itemHandlingPolicy
                    where itemHandlingPolicy.PolicyName == whsInventTable.CatchWeightItemHandlingPolicyName
                        && itemHandlingPolicy.CatchWeightTagTracking == NoYes::Yes
                        && itemHandlingPolicy.CatchWeightTagDimensionTrackingMethod == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions
            {
                this.linkCatchWeightTagsByLPToWorkLine(_workLine.RecId, workInventTrans.ItemId);
            }

            while select ItemId, InventTransIdParent from workInventTrans
                where workInventTrans.WorkId == _workLine.WorkId
                    && workInventTrans.LineNum == _workLine.LineNum
                exists join whsInventTable
                    where whsInventTable.ItemId == workInventTrans.ItemId
                exists join itemHandlingPolicy
                    where itemHandlingPolicy.PolicyName == whsInventTable.CatchWeightItemHandlingPolicyName
                        && itemHandlingPolicy.CatchWeightTagTracking == NoYes::Yes
                        && itemHandlingPolicy.CatchWeightTagDimensionTrackingMethod == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndInventoryStatus
            {
                this.linkCatchWeightTagsByInventTransIdToWorkLine(_workLine.RecId, workInventTrans.ItemId, workInventTrans.InventTransIdParent);
            }
        }
        else
        {
            if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_workLine.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
            {
                this.linkCatchWeightTagsByLPToWorkLine(_workLine.RecId, _workLine.ItemId);
            }
            else
            {
                this.linkCatchWeightTagsByInventTransIdToWorkLine(_workLine.RecId, _workLine.ItemId, _workLine.InventTransId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkCatchWeightTagsByLPToWorkLine</Name>
				<Source><![CDATA[
    private void linkCatchWeightTagsByLPToWorkLine(WHSWorkLineRecId _workLineRecId, ItemId _itemId)
    {
        WHSCatchWeightTagLastRegistration lastRegistration;
        WHSCatchWeightTag catchWeightTag;
        InventDim inventDim;

        while select forupdate lastRegistration
                exists join catchWeightTag
                    where catchWeightTag.TagNumber == lastRegistration.TagNumber
                        && catchWeightTag.ItemId == _itemId
                exists join inventDim
                    where inventDim.InventDimId == catchWeightTag.InventDimId
                        && inventDim.LicensePlateId == pass.lookup(#LicensePlateId)
        {
            lastRegistration.WorkLine = _workLineRecId;
            lastRegistration.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkCatchWeightTagsByInventTransIdToWorkLine</Name>
				<Source><![CDATA[
    // The only way to determine the tags for status only tracked method is to use the receipt Lot Id; this emulates the original logic
    private void linkCatchWeightTagsByInventTransIdToWorkLine(WHSWorkLineRecId _workLineRecId, ItemId _itemId, InventTransId _inventTransId)
    {
        WHSCatchWeightTagLastRegistration lastRegistration;
        WHSCatchWeightTag catchWeightTag;

        while select forupdate lastRegistration
            where lastRegistration.InventTransId == _inventTransId
            exists join catchWeightTag
                where catchWeightTag.TagNumber == lastRegistration.TagNumber
                    && catchWeightTag.ItemId == _itemId
        {
            lastRegistration.WorkLine = _workLineRecId;
            lastRegistration.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        boolean recall, addCancel, addExceptionButton, isComplete;
        container ret;

        do
        {
            recall = false;
            [ret, isComplete, _con, _buttonClicked, recall, addCancel, addExceptionButton] = this.displayNextForm(_con, _buttonClicked);
        }
        while (recall);

        if (!isComplete)
        {
            pass = new WHSRFPassthrough(Types::String, Types::String);
            pass = WHSRFPassthrough::create(conPeek(ret, 2));
            if (pass.exists(#WorkId) && pass.exists(#LineNum))
            {
                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                workTable = workLine.whsWorkTable();
            }
        }

        ret = this.executePostProcessing(ret, addCancel, addExceptionButton);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executePostProcessing</Name>
				<Source><![CDATA[
    private container executePostProcessing(container _ret, boolean _addCancel, boolean _addExceptionButton)
    {
        if (step > 1)
        {
            _ret = this.addButtons(_ret);
        }
        if (_addCancel && step != #ReceivingExceptionStep1 && step != #ReceivingExceptionStep2)
        {
            _ret = this.addCancelButton(_ret, 1, true);
        }
        if (_addExceptionButton)
        {
            _ret = this.addExceptionButton(_ret);
        }

        _ret = this.updateModeStepPass(_ret, mode, step, pass);
        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateLicensePlate</Name>
				<Source><![CDATA[
    protected WHSLicensePlate createOrUpdateLicensePlate(WHSLicensePlateId _licensePlateId, WHSDefaultContainerTypeCode _containerTypeCode)
    {
        return WHSLicensePlate::createLicensePlate(_licensePlateId, true, _containerTypeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWork</Name>
				<Source><![CDATA[
    protected WHSWorkLine createWork(WHSWorkExecute _workExecute, WHSLicensePlate _licensePlate, WHSDispositionCode _dispositionCode)
    {
        return _workExecute.scanLicensePlate(_licensePlate.LicensePlateId, userId, pass.parmModule(), '', true, _dispositionCode, _licensePlate.ContainerTypeCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printLabels</Name>
				<Source><![CDATA[
    protected void printLabels()
    {
        if (workline.WorkId && WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).PrintLabel)
        {
            var whsLicensePlateLabelBuild = new WHSLicensePlateLabelBuild(workline.WorkId, null, pass.lookupStr(#MenuItem), userId);
            whsLicensePlateLabelBuild.buildAllLicensePlateLabels(pass.lookup(#LicensePlateId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDispositionCodeFromCon</Name>
				<Source><![CDATA[
    public WHSDispositionCode getDispositionCodeFromCon(container  _con)
    {
        return this.getDataFromCon(_con, #Disposition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataFromCon</Name>
				<Source><![CDATA[
    private str getDataFromCon(container _con, str _controlName)
    {
        str data;
        int length = conLen(_con);

        for (int i = 3; i <= length; i++)
        {
            str name = conPeek(conPeek(_con, i), #name);

            if (name == _controlName)
            {
                data = conPeek(conPeek(_con, i), #data);
            }
        }
        return data;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [SysObsolete('Use WhsWorkExecuteDisplay::construct() instead.', true, 31\05\2017)]
    static WHSWorkExecuteDisplayLPReceiving construct()
    {
        WHSWorkExecuteDisplayLPReceiving   workExecuteDisplayLPReceiving;

        workExecuteDisplayLPReceiving = new WHSWorkExecuteDisplayLPReceiving();

        return workExecuteDisplayLPReceiving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionLabelsFromInventDimId</Name>
				<Source><![CDATA[
    private container buildDimensionLabelsFromInventDimId(
        container   _con,
        ItemId      _itemId,
        InventDimId _inventDimId)
    {
        container       ret         = _con;
        InventDim       inventDim   = InventDim::find(_inventDimId);

        InventTable inventTable = InventTable::find(_itemId);

        ListEnumerator le = InventDimGroupSetup::newDimensionGroups(inventTable.productDimensionGroup(),
                                                                    0,
                                                                    inventTable.trackingDimensionGroup()).activeFields().getEnumerator();

        while (le.moveNext())
        {
            DictType dictType = WHSWorkExecuteDisplay::dictTypeForTableField(tableNum(InventDim), le.current());

            ret += [this.buildControl(#RFLabel,
                                      fieldId2name(tableNum(InventDim),
                                      le.current()),
                                      strFmt("@WAX736", dictType.label(), inventDim.(le.current())),
                                      1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLPRecWeightCapture</Name>
				<Source><![CDATA[
    private container buildLPRecWeightCapture(container _con)
    {
        WHSASNItem  asnItem;
        container   ret = _con;

        select firstOnly asnItem
            where asnItem.RecId == pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId);

        if (WHSInventTable::isCatchWeightTagTracked(asnItem.ItemId))
        {
            ret = this.buildReceivingLicensePlateWithCatchWeightTagCapture(ret, asnItem);
        }
        else
        {
            ret += [this.buildControl(#RFLabel, #Scan, "@WAX:WHSCaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];
            ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", asnItem.ItemId), 1, '', #WHSRFUndefinedDataType, '', 0)];

            ret = this.buildDimensionLabelsFromInventDimId(ret, asnItem.ItemId, asnItem.InventDimId);

            ret += [this.buildControl(#RFLabel, #Qty, strFmt("@WAX736", asnItem.Qty, asnItem.UOM), 1, '', #WHSRFUndefinedDataType, '', 0)];
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, "@WAX:Weight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight), extendedTypeNum(Weight), '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReceivingLicensePlateWithCatchWeightTagCapture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state to build catch weight tag capture screen during the LP receiving.
    /// </summary>
    /// <param name = "_con">Container containing the form state before the controls are added.</param>
    /// <param name = "_asnItem">The <c>WHSASNItem</c> buffer.</param>
    /// <returns>Container containing the form state after the controls are added.</returns>
    protected container buildReceivingLicensePlateWithCatchWeightTagCapture(container _con, WHSASNItem _asnItem)
    {
        container ret = _con;

        if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, 1);
            pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty,
                        WHSCatchWeightHelper::convertInventQuantity(_asnItem.ItemId, _asnItem.UOM, _asnItem.Qty, _asnItem.InventDimId));
        }

        ret += [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret += [this.buildControl(#RFLabel,
                                  WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter,
                                  strFmt("@WAX:CatchWeightTagCountOfWhole", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter), pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty)),
                                  1,
                                  '',
                                  #WHSRFUndefinedDataType,
                                  '',
                                  0)];

        ret += [this.buildControl(#RFLabel, #ItemId, strFmt("@WAX2007", _asnItem.ItemId), 1, '', #WHSRFUndefinedDataType, '', 0)];

        ret = this.buildDimensionLabelsFromInventDimId(ret, _asnItem.ItemId, _asnItem.InventDimId);

        if (WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).GenerateCatchWeightTag)
        {
            if (!pass.exists(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag))
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, NumberSeq::newGetNum(WHSParameters::numRefWHSCatchWeightTagNumber()).num());
            }

            ret += [this.buildControl(#RFLabel, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, strFmt("@WAX:MobileDeviceLabelCatchWeightTagX", pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }
        else
        {
            ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag, "@WAX:MobileDeviceLabelCatchWeightTag", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag), extendedTypeNum(WHSCatchWeightTagNumber), '', 0)];
        }

        ret += [this.buildControl(#RFText, WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight, "@WAX:CatchWeightTagWeight", 1, pass.lookupStr(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight), extendedTypeNum(WHSCapturedWeight), '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getASNItemRecIdToCaptureWeight</Name>
				<Source><![CDATA[
    private RefRecId getASNItemRecIdToCaptureWeight(WHSLicensePlateId _licensePlateId)
    {
        WHSASNItem          asnItem;
        WHSUOMStructure     uomStructure;
        PdsCatchWeightItem  catchWeightItem;
        
        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            //we do not know if the structure exist or has packs so the SQL is divided in smaller statements
            select firstonly uomStructure
                where uomStructure.LicensePlateId == _licensePlateId
                    && uomStructure.Module == WHSModule::Purch;

            //we found one and it is the case without a parent
            if (uomStructure.RecId && !uomStructure.HasPacks)
            {
                select firstOnly RecId from asnItem
                    where asnItem.LicensePlateId == uomStructure.LicensePlateId
                       && asnItem.Module == uomStructure.Module
                       && asnItem.ShipmentId == uomStructure.ShipmentId
                       && asnItem.CapturedWeight == 0
                    exists join catchWeightItem
                        where catchWeightItem.ItemId == asnItem.ItemId;
            }
            else
            {
                //we need to consider that the structure can have multiple packs
                select firstonly uomStructure
                    where uomStructure.LicensePlateParent == _licensePlateId
                       && uomStructure.Module == WHSModule::Purch
                    join firstOnly RecId from asnItem
                        where asnItem.LicensePlateId == uomStructure.LicensePlateId
                           && asnItem.Module == uomStructure.Module
                           && asnItem.ShipmentId == uomStructure.ShipmentId
                           && asnItem.CapturedWeight == 0
                        exists join catchWeightItem
                            where catchWeightItem.ItemId == asnItem.ItemId;
            }
        }

        return asnItem.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLPRecWeightCapture</Name>
				<Source><![CDATA[
    private container processLPRecWeightCapture(
        boolean     _hasError,
        container   _con)
    {
        container           ret = _con;
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        boolean             hasError;
        boolean             complete;
        WHSASNItem          asnItem;

        if (_hasError)
        {
            ret = conDel(ret, #RFErrorLoc, 1);
        }

        [ret, tmpFieldValues] = WHSRFControlData::processData(ret, pass);
        fieldValues = WHSRFPassthrough::create(tmpFieldValues);
        pass = this.combineMaps(pass, fieldValues);
        hasError = this.hasError(ret);

        if (hasError)
        {
            return ret;
        }

        if (!fieldValues.empty())
        {
            [ret, complete] = this.processFieldValues(ret, fieldValues);

            if (complete)
            {
                select firstOnly forUpdate asnItem
                    where asnItem.RecId == pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId);

                if (WHSInventTable::IsCatchWeightTagTracked(asnItem.ItemId))
                {
                    if (!pass.exists(#WMSLocationId)
                    &&   pass.exists(#InventLocationId))
                    {
                        pass.insert(#WMSLocationId, this.receivingLocationId());
                    }
                    
                    ret = this.processLPRecCatchWeightTagCapture(ret, asnItem);
                }
                else
                {
                    ttsBegin;

                    // Update captured weight on ASN Item record to be used during registration
                    asnItem.CapturedWeight = pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);
                    
                    if (!asnItem.validateWrite())
                    {
                        throw error(strFmt("@WAX:WHSCannotUpdateRecordInTable", tablePName(WHSASNItem)));
                    }
                    else
                    {
                        asnItem.update();
                    }
                    

                    ttsCommit;

                    pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight);

                    // Determine if weight needs to be captured for any additional inventory
                    RefRecId asnItemLeftToCapture = this.getASNItemRecIdToCaptureWeight(pass.lookup(#LicensePlateId));

                    if (asnItemLeftToCapture != 0)
                    {
                        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId, asnItemLeftToCapture);

                        ret = conNull();
                        ret = this.buildLPRecWeightCapture(ret);
                    }
                    else
                    {
                        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId);

                        step = 1;
                        ret = conNull();
                        ret += [this.buildControl(#RFLabel, #Scan, "@WAX:WHSCaptureWeight", 1, '', #WHSRFUndefinedDataType, '', 0)];
                        ret = this.updateModeStepPass(ret, mode, step, pass);
                        ret = this.displayForm(ret);
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCatchWeightTagFromASNItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a catch weight tag from the selected ASN item buffer.
    /// </summary>
    /// <param name = "_asnItem">A <c>WHSASNItem</c> buffer.</param>
    /// <returns>The created catch weight tag.</returns>
    private WHSCatchWeightTag createCatchWeightTagFromASNItem(WHSASNItem _asnItem)
    {
        WHSCatchWeightTagCreationSource tagSource = WHSCatchWeightTagCreationSource::instantiateFromSource(_asnItem, pass);
        WHSCatchWeightTagCreationMethod tagMethod = WHSCatchWeightTagCreationMethod::newSingleTagCreation(
                                    pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag),
                                    pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight));

        WHSCatchWeightTagCreator tagCreator = WHSCatchWeightTagCreator::construct();

        return tagCreator.createCatchWeightTags(tagSource, tagMethod).getCollectionIterator().value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLPRecCatchWeightTagCapture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the catch weight tag capture display step during LP receiving.
    /// </summary>
    /// <param name="_con">The current mobile device container being built.</param>
    /// <param name="_asnItem">A <c>WHSASNItem</c> buffer.</param>
    /// <returns>
    /// An updated mobile device container.
    /// </returns>
    private container processLPRecCatchWeightTagCapture(container _con, WHSASNItem _asnItem)
    {
        container ret = _con;

        WHSCatchWeightTag tagRecord = this.createCatchWeightTagFromASNItem(_asnItem);

        this.trackScannedCatchWeightTags(tagRecord.RecId);
        WHSASNItem::updateCapturedWeight(_asnItem.RecId, pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight));
        
        // Remove current Tag Id and increment Tag Counter
        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTag);
        pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagWeight);
        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter, (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) + 1));

        // Check to see if all tags have been captured
        if (pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter) > pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty))
        {
            this.trackProcessedASNItemRecId(pass.lookupInt64(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId));

            pass.remove(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId);
            pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagCounter);
            pass.remove(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);

            // Determine if weight needs to be captured for any additional inventory
            RefRecId asnItemLeftToCapture = this.getASNItemRecIdToCaptureWeight(pass.lookup(#LicensePlateId));

            if (asnItemLeftToCapture)
            {
                pass.insert(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId, asnItemLeftToCapture);

                ret = conNull();
                ret = this.buildLPRecWeightCapture(ret);
            }
            else
            {
                step = 1;
                ret = [this.buildControl(#RFLabel, #Scan, "@WAX:CatchWeightAssignCatchWeightTag", 1, '', #WHSRFUndefinedDataType, '', 0)];
                ret = this.updateModeStepPass(ret, mode, step, pass);
                ret = this.displayForm(ret);
            }
        }
        else
        {
            ret = conNull();
            ret = this.buildLPRecWeightCapture(ret);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackProcessedASNItemRecId</Name>
				<Source><![CDATA[
    private void trackProcessedASNItemRecId(WHSASNItemRecId _asnItemRecId)
    {
        container asnItemRecIds;

        // Add the processed ASN item reference ID to the list in the pass.
        if (pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::ProcessedASNItemRecIdCollection))
        {
            // Must avoid lookupStr so we don't start the container with an empty value.
            asnItemRecIds = str2con(pass.lookup(WHSWorkExecuteDisplayCatchWeightControls::ProcessedASNItemRecIdCollection));
        }

        asnItemRecIds += _asnItemRecId;

        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::ProcessedASNItemRecIdCollection, con2Str(asnItemRecIds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCatchWeightItemsPutUseInventQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean canCatchWeightItemsPutUseInventQty()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>