<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerInterunitBalancer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerInterunitBalancer</c> class performs balancing for the interunit dimensions.
/// </summary>
public abstract class LedgerInterunitBalancer
{
    LedgerTmpInterunitBalancerAccountEntry ledgerTmpInterunitBalancerAccountEntry;
    LedgerTmpInterunitBalancerTotal ledgerTmpInterunitBalancerTotal;
    private LedgerInterunitBalancerInstrumentation ledgerInterunitBalancerLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLedgerTmpInterunitBalancerAccountEntry</Name>
				<Source><![CDATA[
    public LedgerTmpInterunitBalancerAccountEntry parmLedgerTmpInterunitBalancerAccountEntry(LedgerTmpInterunitBalancerAccountEntry _ledgerTmpInterunitBalancerAccountEntry = ledgerTmpInterunitBalancerAccountEntry)
    {
        ledgerTmpInterunitBalancerAccountEntry.linkPhysicalTableInstance(_ledgerTmpInterunitBalancerAccountEntry);

        return ledgerTmpInterunitBalancerAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerTmpInterunitBalancerTotal</Name>
				<Source><![CDATA[
    public LedgerTmpInterunitBalancerTotal parmLedgerTmpInterunitBalancerTotal(LedgerTmpInterunitBalancerTotal _ledgerTmpInterunitBalancerTotal = ledgerTmpInterunitBalancerTotal)
    {
        ledgerTmpInterunitBalancerTotal.linkPhysicalTableInstance(_ledgerTmpInterunitBalancerTotal);

        return ledgerTmpInterunitBalancerTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToInterunitTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified record to the totals of the interunit balancer.
    /// </summary>
    /// <param name="_ledgerTmpInterunitBalancerAccountEntry">
    /// The <c>LedgerTmpInterunitBalancerAccountEntry</c> record.
    /// </param>
    /// <returns>
    /// true if the record was added; otherwise, false.
    /// </returns>
    protected boolean addToInterunitTotals(LedgerTmpInterunitBalancerAccountEntry _ledgerTmpInterunitBalancerAccountEntry)
    {
        Enumerator balDimValues;
        List balDimValuesList;
        DimensionAttributeRecId dimAttrRecId;
        boolean added = false;

        changeCompany (CompanyInfo::getDataArea(_ledgerTmpInterunitBalancerAccountEntry.LegalEntity))
        {
            balDimValuesList = LedgerDimensionFacade::serviceGetInterunitDimValuesForLedgerDim(_ledgerTmpInterunitBalancerAccountEntry.LedgerDimension);
        }

        balDimValues = balDimValuesList.getEnumerator();

        while (balDimValues.moveNext())
        {
            added = true;

            dimAttrRecId = balDimValues.current();

            select firstOnly forUpdate AccountingCurrencyAmount, ReportingCurrencyAmount from ledgerTmpInterunitBalancerTotal
                where ledgerTmpInterunitBalancerTotal.AccountingEvent == _ledgerTmpInterunitBalancerAccountEntry.AccountingEvent
                    && ledgerTmpInterunitBalancerTotal.LegalEntity == _ledgerTmpInterunitBalancerAccountEntry.LegalEntity
                    && ledgerTmpInterunitBalancerTotal.SubledgerJournalEntryType == _ledgerTmpInterunitBalancerAccountEntry.SubledgerJournalEntryType
                    && ledgerTmpInterunitBalancerTotal.DimensionAttributeValueRecId == dimAttrRecId;

            ledgerTmpInterunitBalancerTotal.AccountingCurrencyAmount += _ledgerTmpInterunitBalancerAccountEntry.AccountingCurrencyAmount;
            ledgerTmpInterunitBalancerTotal.ReportingCurrencyAmount += _ledgerTmpInterunitBalancerAccountEntry.ReportingCurrencyAmount;

            if (ledgerTmpInterunitBalancerTotal == null)
            {
                ledgerTmpInterunitBalancerTotal.initFromInterunitBalancerEntry(_ledgerTmpInterunitBalancerAccountEntry);
                ledgerTmpInterunitBalancerTotal.DimensionAttributeValueRecId = dimAttrRecId;
                ledgerTmpInterunitBalancerTotal.insert();
            }
            else
            {
                ledgerTmpInterunitBalancerTotal.update();
            }
        }

        return added;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>performBalancing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs balancing for the interunit dimensions.
    /// </summary>
    /// <returns>
    /// A <c>LedgerTmpInterunitBalancerAccountEntry</c> table reference that contains
    /// the balancing entries for the interunit dimensions.
    /// </returns>
    /// <remarks>
    /// Call this method after adding the individual account entries.
    /// </remarks>
    public LedgerTmpInterunitBalancerAccountEntry performBalancing()
    {
        Enumerator balDimValues;
        List dimensionValues;
        boolean isBalanced;
        DimensionAttributeRecId dimAttrRecId;
        LedgerDimensionDefaultAccount defaultAccount;

        ttsBegin;

        while select forUpdate ledgerTmpInterunitBalancerAccountEntry
        {
            dimensionValues = LedgerDimensionFacade::serviceGetInterunitDimValuesForLedgerDim(ledgerTmpInterunitBalancerAccountEntry.LedgerDimension);

            isBalanced = true;

            balDimValues = dimensionValues.getEnumerator();
            while (balDimValues.moveNext() && isBalanced)
            {
                dimAttrRecId = balDimValues.current();

                select firstOnly RecId from ledgerTmpInterunitBalancerTotal
                    where ledgerTmpInterunitBalancerTotal.AccountingEvent == ledgerTmpInterunitBalancerAccountEntry.AccountingEvent
                        && ledgerTmpInterunitBalancerTotal.LegalEntity == ledgerTmpInterunitBalancerAccountEntry.LegalEntity
                        && ledgerTmpInterunitBalancerTotal.SubledgerJournalEntryType == ledgerTmpInterunitBalancerAccountEntry.SubledgerJournalEntryType
                        && ledgerTmpInterunitBalancerTotal.DimensionAttributeValueRecId == dimAttrRecId
                        && (ledgerTmpInterunitBalancerTotal.AccountingCurrencyAmount != 0
                            || ledgerTmpInterunitBalancerTotal.ReportingCurrencyAmount != 0);

                if (ledgerTmpInterunitBalancerTotal != null)
                {
                    isBalanced = false;
                }
            }

            if (isBalanced)
            {
                ledgerTmpInterunitBalancerAccountEntry.delete();

                continue;
            }

            if (ledgerTmpInterunitBalancerAccountEntry.AmountSign == DebitCredit::Credit)
            {
                ledgerTmpInterunitBalancerAccountEntry.PostingType = LedgerPostingType::InterunitDebit;
            }
            else
            {
                ledgerTmpInterunitBalancerAccountEntry.PostingType = LedgerPostingType::InterunitCredit;
            }

            changeCompany (CompanyInfo::getDataArea(ledgerTmpInterunitBalancerAccountEntry.LegalEntity))
            {
                defaultAccount = LedgerSystemAccounts::defaultAccount(ledgerTmpInterunitBalancerAccountEntry.PostingType);

                if (defaultAccount == 0)
                {
                    ledgerTmpInterunitBalancerAccountEntry.LedgerDimension = 0;
                }
                else
                {
                    ledgerTmpInterunitBalancerAccountEntry.LedgerDimension = LedgerDimensionFacade::serviceMergeLedgerDimensions(defaultAccount, ledgerTmpInterunitBalancerAccountEntry.LedgerDimension);
                    ledgerTmpInterunitBalancerAccountEntry.LedgerDimension = LedgerDimensionFacade::serviceApplyFixedDimensions(ledgerTmpInterunitBalancerAccountEntry.LedgerDimension, Ledger::current());
                }
            }

            ledgerTmpInterunitBalancerAccountEntry.reverseSign();
            ledgerTmpInterunitBalancerAccountEntry.update();
        }

        ttsCommit;

        return ledgerTmpInterunitBalancerAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBalancingEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether balancing by intraunit dimension is enabled.
    /// </summary>
    /// <returns>
    /// true if balancing by intraunit dimension is enabled; otherwise, false.
    /// </returns>
    public static boolean isBalancingEnabled()
    {
        return LedgerInterunitDimensionAttribute::exist(Ledger::current());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerInterunitBalancerInstrumentation</Name>
				<Source><![CDATA[
    internal LedgerInterunitBalancerInstrumentation ledgerInterunitBalancerInstrumentation()
    {
        if (!ledgerInterunitBalancerLogger)
        {
            ledgerInterunitBalancerLogger = LedgerInterunitBalancerInstrumentation::createLogger(classId2Name(classIdGet(this)));
        }

        return ledgerInterunitBalancerLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>