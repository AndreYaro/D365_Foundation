<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendCurrentVendorSearchRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendCurrentVendorSearchRequest</c> class extends the base class that has vendor specific
/// attributes and properties.
/// </summary>
class VendCurrentVendorSearchRequest extends VendSearchRequest
{
    VendIgnoreNoYes         bidOnly;
    VendIgnoreNoYes         veteranOwner;
    VendIgnoreNoYes         disabledOwner;
    VendIgnoreNoYes         oneTimeSupplier;

    HcmEthnicOriginId       ethnicOrigin;
    boolean                 includeEmployeesThatAreVendors;

    CustVendorBlocked       vendorHold;
    VendCategoryStatus      categoryStatus;
    str                     criterionGroup;
    str                     criterion;
    str                     searchString;
    container               conVendorGroupNameAndId;
    str                     categoryStatusList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAddressDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the address tables to the vendor search query.
    /// </summary>
    private void addAddressDataSource()
    {
        QueryBuildDataSource    qbdsDirPartyTable;
        QueryBuildDataSource    qbdsDirPartyLocation;
        QueryBuildDataSource    qbdsLogisticsLocation;
        QueryBuildDataSource    qbdsLogisticsPostalAddress;

        qbdsDirPartyTable = query.dataSourceTable(tablenum(DirPartyTable));
        qbdsDirPartyLocation        = this.addAttributeDataSouce(qbdsDirPartyTable, tablenum(DirPartyLocation), JoinMode::ExistsJoin);
        qbdsLogisticsLocation       = this.addAttributeDataSouce(qbdsDirPartyLocation, tablenum(LogisticsLocation), JoinMode::ExistsJoin);
        qbdsLogisticsPostalAddress  = this.addAttributeDataSouce(qbdsLogisticsLocation, tablenum(LogisticsPostalAddress), JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCategoryStatusDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the category status tables to vendor search query.
    /// </summary>
    private void addCategoryStatusDataSource()
    {
        QueryBuildDataSource qbdsVendCategory;
        QueryBuildDataSource qbdsVendCatOperatingUnit;

        qbdsVendCategory = query.dataSourceTable(tablenum(VendCategory));
        qbdsVendCatOperatingUnit = this.addAttributeDataSouce(qbdsVendCategory, tablenum(VendProcurementCategoryStatus), JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCriteriaDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the vendor evaluation criteria tables to vendor search query.
    /// </summary>
    private void addCriteriaDataSource()
    {
        QueryBuildDataSource qbdsVendReviewCriterionGroup;
        QueryBuildDataSource qbdsVendReviewCriterion;

        this.addCriterionGroupDataSource();
        qbdsVendReviewCriterionGroup = query.dataSourceTable(tablenum(VendReviewCriterionGroup));
        qbdsVendReviewCriterion = this.addAttributeDataSouce(qbdsVendReviewCriterionGroup, tablenum(VendReviewCriterion), JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCriterionGroupDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the vendor evaluation criterion group tables to vendor search query.
    /// </summary>
    private void addCriterionGroupDataSource()
    {
        QueryBuildDataSource qbdsEcoResCategory;
        QueryBuildDataSource qbdsVendReviewCategoryCriterionGroup;
        QueryBuildDataSource qbdsVendReviewCriterionGroup;

        this.addProcCategoryDataSource();
        qbdsEcoResCategory = query.dataSourceTable(tablenum(EcoResCategory));
        qbdsVendReviewCategoryCriterionGroup = this.addAttributeDataSouce(qbdsEcoResCategory, tablenum(VendReviewCategoryCriterionGroup), JoinMode::ExistsJoin);
        qbdsVendReviewCriterionGroup = this.addAttributeDataSouce(qbdsVendReviewCategoryCriterionGroup, tablenum(VendReviewCriterionGroup), JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCriterionGroupRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the range condition values to vendor evaluation criterion group tables.
    /// </summary>
    private void addCriterionGroupRange()
    {
        QueryBuildDataSource    qbdsVendReviewCriterionGroup;
        List                    list;
        ListEnumerator          items;
        str                     currentItem;
        str                     selectedCriterionGroups;

        qbdsVendReviewCriterionGroup = query.dataSourceTable(tablenum(VendReviewCriterionGroup));

        selectedCriterionGroups = this.parmCriterionGroup();
        list = new List(Types::String);

        if (selectedCriterionGroups != strMin())
        {
            list = strSplit(selectedCriterionGroups, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(tablenum(VendReviewCriterionGroup),
                                                fieldnum(VendReviewCriterionGroup, Name), currentItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addCriterionRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the range condition values to vendor evaluation criteria tables.
    /// </summary>
    private void addCriterionRange()
    {
        QueryBuildDataSource    qbdsVendReviewCriterion;
        List                    list;
        ListEnumerator          items;
        str                     currentItem;
        str                     selectedCriterion;

        qbdsVendReviewCriterion = query.dataSourceTable(tablenum(VendReviewCriterion));

        selectedCriterion = this.parmCriterion();
        list = new List(Types::String);

        if (selectedCriterion != strMin())
        {
            list = strSplit(selectedCriterion, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(tablenum(VendReviewCriterion),
                                                fieldnum(VendReviewCriterion, Name), currentItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEmployeesDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the worker tables to the vendor search query.
    /// </summary>
    private void addEmployeesDataSource()
    {
        QueryBuildDataSource    qbdsDirPartyTable;
        QueryBuildDataSource    qbdsDirPerson;
        QueryBuildDataSource    qbdsHCMWorker;
        QueryBuildDataSource    qbdsHcmEmployment;

        qbdsDirPartyTable   = query.dataSourceTable(tablenum(DirPartyTable));
        qbdsDirPerson       = this.addAttributeDataSouce(qbdsDirPartyTable, tablenum(DirPerson), JoinMode::NoExistsJoin);
        qbdsHCMWorker       = this.addAttributeDataSouce(qbdsDirPerson, tablenum(HcmWorker), JoinMode::ExistsJoin);
        qbdsHcmEmployment   = this.addAttributeDataSouce(qbdsHCMWorker, tablenum(HcmEmployment), JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcCategoryDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the procurement category tables to vendor search query.
    /// </summary>
    private void addProcCategoryDataSource()
    {
        QueryBuildDataSource    qbdsVendTable;
        QueryBuildDataSource    qbdsVendCategory;
        QueryBuildDataSource    qbdsEcoResCategory;

        qbdsVendTable = query.dataSourceTable(tablenum(VendTable));
        qbdsVendCategory = this.addAttributeDataSouce(qbdsVendTable, tablenum(VendCategory), JoinMode::ExistsJoin);
        qbdsEcoResCategory = this.addAttributeDataSouce(qbdsVendCategory, tablenum(EcoResCategory), JoinMode::ExistsJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProcCategoryRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the range condition values to procurement category tables.
    /// </summary>
    private void addProcCategoryRange()
    {
        QueryBuildDataSource    qbdsEcoResCategory;
        List                    list;
        ListEnumerator          items;
        str                     currentItem;
        str                     selectedCategories;

        qbdsEcoResCategory = query.dataSourceTable(tablenum(EcoResCategory));

        selectedCategories = this.parmProcurementCategory();
        list = new List(Types::String);

        if (selectedCategories != strMin())
        {
            list = strSplit(selectedCategories, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(tablenum(EcoResCategory), fieldnum(EcoResCategory, Name), currentItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendCategoryStatusRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the range condition values to the <c>VendProcurementCategoryStatus</c> table.
    /// </summary>
    private void addVendCategoryStatusRange()
    {
        QueryBuildDataSource    qbdsVendCategoryStatus;
        List                    list;
        ListEnumerator          items;
        str                     currentItem;
        str                     selectedCategoryStatusList;

        qbdsVendCategoryStatus = query.dataSourceTable(tablenum(VendProcurementCategoryStatus));
        selectedCategoryStatusList = this.parmVendCategoryStatusList();
        list = new List(Types::String);

        if (selectedCategoryStatusList != strMin())
        {
            list = strSplit(selectedCategoryStatusList, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(tablenum(VendProcurementCategoryStatus),
                        fieldnum(VendProcurementCategoryStatus, VendorCategoryStatus),
                        currentItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query for the search on vendor master using attributes to create ranges.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query buildQuery()
    {
        query = new Query(querystr(VendSearchCurrentVendor));

        if (!(Global::strLRTrim(this.parmName()) == strMin()))
        {
            this.addPartyNameSearchCriteria(tablenum(VendTable), this.parmName());
        }

        if (!(Global::strLRTrim(this.parmAddressCity()) == strMin() &&  Global::strLRTrim(this.parmAddressState()) == strMin() && Global::strLRTrim(this.parmAddressCountry()) == strMin()))
        {
            this.addAddressDataSource();
        }

        this.addRangeMultipleValue(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, City), this.parmAddressCity());
        this.addRangeMultipleValue(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, State), this.parmAddressState());
        this.addRangeMultipleValue(tablenum(LogisticsPostalAddress), fieldnum(LogisticsPostalAddress, CountryRegionId), this.parmAddressCountry());

        if (this.parmIncludeEmployees() == false)
        {
            this.addEmployeesDataSource();
        }

        if (Global::strLRTrim(this.parmProcurementCategory()) != strMin() || Global::strLRTrim(this.parmCriterionGroup()) != strMin() || Global::strLRTrim(this.parmCriterion()) != strMin())
        {
            //following adds the data source for relation model
            if (Global::strLRTrim(this.parmCriterion()) != strMin())
            {
                this.addCriteriaDataSource();
                this.addCriterionRange();
            }
            else if (Global::strLRTrim(this.parmCriterionGroup()) != strMin())
            {
                this.addCriterionGroupDataSource();
                this.addCriterionGroupRange();
            }
            else if (Global::strLRTrim(this.parmProcurementCategory()) != strMin())
            {
                this.addProcCategoryDataSource();
                this.addProcCategoryRange();
            }

            if (Global::strLRTrim(this.parmProcurementCategory()) != strMin())
            {
                this.addCategoryStatusDataSource();

                if (this.parmVendCategoryStatusList() != strMin())
                {
                    this.addVendCategoryStatusRange();
                }
                else
                {
                    this.addSearchCriteriaString(tablenum(VendProcurementCategoryStatus),
                                            fieldnum(VendProcurementCategoryStatus, VendorCategoryStatus),
                                            enum2str(this.parmCategoryStatus()), false);
                }
            }
        }

        //Below 4 lines are common attributes
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, FemaleOwned), this.parmFemaleOwned());
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, MinorityOwned), this.parmMinorityOwned());
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, SmallBusiness), this.parmSmallBusiness());
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, LocallyOwned), this.parmLocallyOwned());

        //Below are current vendor specific attributes
        this.addRangeMultipleValue(tablenum(VendTable), fieldnum(VendTable, VendGroup), this.parmVendorGroup());

        // Vendor hold as to be set only if all legal entities are not included.
        if (this.parmIncludeAllLegalEntities() == false)
        {
            this.addSearchCriteriaString(tablenum(VendTable), fieldnum(VendTable, Blocked), enum2str(this.parmVendorOnHold()), false);
            // If Blocked is set default value No, then value Never should be included
            // because Never is the same as No in this context
            // But if option Never is selected, the search query should not include option No.
            if (this.parmVendorOnHold() == CustVendorBlocked::No)
            {
                this.addSearchCriteriaString(tablenum(VendTable), fieldnum(VendTable, Blocked), enum2str(CustVendorBlocked::Never), false);
            }
        }

        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, BidOnly), this.parmBidOnly());
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, OneTimeVendor), this.parmOneTimeSupplier());
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, VeteranOwned), this.parmVeteran());
        this.addSearchCriteriaNoYes(tablenum(VendTable), fieldnum(VendTable, DisabledOwned), this.parmDisabled());
        if (Global::strLRTrim(this.parmEthnicOrigin()) != strMin())
        {
            this.addSearchCriteriaString(tablenum(VendTable), fieldnum(VendTable, EthnicOriginId), this.parmEthnicOrigin(), false);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the vendor search expression for current vendors.
    /// </summary>
    /// <returns>
    /// A string value that contains the search expression.
    /// </returns>
    public str buildSearchExpression()
    {
        TextBuffer expression = new TextBuffer();

        if (this.parmCriterionGroup() != strMin()) //Criterion Group
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelCriterionGroup(),
                                                        this.parmCriterionGroup()));
        }

        if (this.parmCriterion() != strMin()) //Criterion
        {
            expression.appendText(this.labelCriterion() + pairDelimiter + strReplace(this.parmCriterion(), ExpressionDelimiter, ValueDelimiter) + ExpressionDelimiter);
        }

        // Vendor hold as to be set only if all legal entities are not included.
        if (this.parmIncludeAllLegalEntities() == false) //VendorOnHold
        {
            expression.appendText(this.labelVendorHold() + pairDelimiter + enum2str(this.parmVendorOnHold()) + ExpressionDelimiter);
        }

        if (this.parmProcurementCategory() != strMin()) //CategoryStatus is depended on procurement category
        {
            expression.appendText(this.labelCategoryStatus() + pairDelimiter + enum2str(this.parmCategoryStatus()) + ExpressionDelimiter);
        }

        if (this.parmBidOnly() != VendIgnoreNoYes::Ignore) //BidOnly
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelBidOnly(),
                                                        enum2str(this.parmBidOnly())));
        }

        if (this.parmOneTimeSupplier() != VendIgnoreNoYes::Ignore) //OneTime
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelOneTimeSupplier(),
                                                        enum2str(this.parmOneTimeSupplier())));
        }

        if (this.parmVeteran() != VendIgnoreNoYes::Ignore) //Veteran
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelVeteran(),
                                                        enum2str(this.parmVeteran())));
        }

        if (this.parmDisabled() != VendIgnoreNoYes::Ignore) //Disabled
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelDisabled(),
                                                        enum2str(this.parmDisabled())));
        }

        if (this.parmEthnicOrigin() != strMin()) //EthnicOrigin
        {
            expression.appendText(VendSearchRequest::buildAttributeValues(
                                                        this.labelEthnicOrigin(),
                                                        this.parmEthnicOrigin()));
        }

        return expression.getText();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAllRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all range values specific to current vendors.
    /// </summary>
    /// <remarks>
    /// Used to reset range values.
    /// </remarks>
    public void clearAllRanges()
    {
        super();

        bidOnly         = VendIgnoreNoYes::Ignore;
        veteranOwner    = VendIgnoreNoYes::Ignore;
        disabledOwner   = VendIgnoreNoYes::Ignore;
        oneTimeSupplier = VendIgnoreNoYes::Ignore;
        ethnicOrigin    = '';
        vendorHold      = CustVendorBlocked::No;
        categoryStatus  = VendCategoryStatus::Standard;
        criterionGroup  = '';
        criterion       = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the parameters that relate to current vendors from the specified form.
    /// </summary>
    /// <param name="_form">
    /// An instance of the <c>VendSearchCriteria</c> form.
    /// </param>
    public void getFormParameters(FormRun _form)
    {
        Object formObject = _form;

        super(_form);

        this.parmVendorOnHold(formObject.parmVendorHold());
        this.parmCategoryStatus(formObject.parmCategoryStatus());

        this.parmBidOnly(formObject.parmBidOnly());
        this.parmOneTimeSupplier(formObject.parmOneTimeSupplier());
        this.parmVeteran(formObject.parmOwnerIsVeteran());
        this.parmDisabled(formObject.parmOwnerIsDisabled());
        this.parmEthnicOrigin(formObject.parmEthnicOrigin());

        this.parmCriterionGroup(formObject.parmCriterionGroup());
        this.parmCriterion(formObject.parmCriterion());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves record count for respective vendors on selection of refresh button.
    /// </summary>
    /// <param name="_isAllLEIncluded">
    /// A Boolean value that indicates whether the vendors that belong to all legal entities should be
    /// considered for vendor search.
    /// </param>
    /// <returns>
    /// An integer value that contains the record count.
    /// </returns>
    public int getResultCount(boolean _isAllLEIncluded)
    {
        TableId vendTableId  = tablenum(VendTable);
        FieldId recIdFieldId = fieldnum(VendTable, RecId);

        int ret = this.calculateResultCount(vendTableId, recIdFieldId, _isAllLEIncluded);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelBidOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelBidOnly()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendBidOnly));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelCategoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelCategoryStatus()
    {
        DictEnum typeDictionary= new DictEnum(enumnum(VendCategoryStatus));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelCriterion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the criterion attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelCriterion()
    {
        return "@SYS312119";
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelCriterionGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the criterion group attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelCriterionGroup()
    {
        return "@SYS312144";
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the disabled attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelDisabled()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendDisabledOwned));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelEthnicOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the ethnic attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelEthnicOrigin()
    {
        DictType typeDictionary = new DictType(extendedtypenum(HcmEthnicOriginId));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelOneTimeSupplier</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of one time vendor attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelOneTimeSupplier()
    {
        DictType typeDictionary = new DictType(extendedtypenum(OneTimeSupplier));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelVendorHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of the vendor on hold attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelVendorHold()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendBlocked));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelVeteran</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the localized label of vendor is a veteran attribute.
    /// </summary>
    /// <returns>
    /// The label caption as a string.
    /// </returns>
    public str labelVeteran()
    {
        DictType typeDictionary = new DictType(extendedtypenum(VendVeteranOwned));

        return typeDictionary.label();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBidOnly</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmBidOnly(VendIgnoreNoYes _bidOnly = bidOnly)
    {
        bidOnly = _bidOnly;
        return bidOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryStatus</Name>
				<Source><![CDATA[
    public VendCategoryStatus parmCategoryStatus(VendCategoryStatus _categoryStatus = categoryStatus)
    {
        categoryStatus = _categoryStatus;
        return categoryStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriterion</Name>
				<Source><![CDATA[
    public str parmCriterion(str _criterion = criterion)
    {
        criterion = _criterion;
        return criterion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCriterionGroup</Name>
				<Source><![CDATA[
    public str parmCriterionGroup(str _criterionGroup = criterionGroup)
    {
        criterionGroup = _criterionGroup;
        return criterionGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisabled</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmDisabled(VendIgnoreNoYes _disabledOwner = disabledOwner)
    {
        disabledOwner = _disabledOwner;
        return disabledOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEthnicOrigin</Name>
				<Source><![CDATA[
    public HcmEthnicOriginId parmEthnicOrigin(HcmEthnicOriginId _ethnicOrigin = ethnicOrigin)
    {
        ethnicOrigin = _ethnicOrigin;
        return ethnicOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeEmployees</Name>
				<Source><![CDATA[
    public boolean parmIncludeEmployees(boolean _includeEmployeesThatAreVendors = includeEmployeesThatAreVendors)
    {
        includeEmployeesThatAreVendors = _includeEmployeesThatAreVendors;
        return includeEmployeesThatAreVendors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOneTimeSupplier</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmOneTimeSupplier(VendIgnoreNoYes _oneTimeSupplier = oneTimeSupplier)
    {
        oneTimeSupplier = _oneTimeSupplier;
        return oneTimeSupplier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendCategoryStatusList</Name>
				<Source><![CDATA[
    public str parmVendCategoryStatusList(str _categoryStatusList = categoryStatusList)
    {
        categoryStatusList = _categoryStatusList;
        return categoryStatusList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorGroup</Name>
				<Source><![CDATA[
    public str parmVendorGroup(str _vendorGroup = vendorGroup)
    {
        if (_vendorGroup != strMin() && _vendorGroup != vendorGroup)
        {
            vendorGroup = strReplace(_vendorGroup, ValueDelimiter, ExpressionDelimiter);
        }
        return vendorGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorOnHold</Name>
				<Source><![CDATA[
    public CustVendorBlocked parmVendorOnHold(CustVendorBlocked _vendorHold = vendorHold)
    {
        vendorHold = _vendorHold;
        return vendorHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVeteran</Name>
				<Source><![CDATA[
    public VendIgnoreNoYes parmVeteran(VendIgnoreNoYes _veteranOwner = veteranOwner)
    {
        veteranOwner = _veteranOwner;
        return veteranOwner;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the specified string pair.
    /// </summary>
    /// <param name="_searchString">
    /// A string value that contains the key and comma separated values.
    /// </param>
    /// <returns>
    /// A string value that contains the unparsed value.
    /// </returns>
    public str parse(str _searchString)
    {
        int                posMaxPair          = strlen(_searchString);
        int                posPair             = 0;
        str                singleAttribute     = strMin();
        str                singlevalue         = strMin();
        str                returnString        = strMin();
        str                newSearchString     = strMin();
        VendIgnoreNoYes    vendIgnoreNoYes     = VendIgnoreNoYes::Ignore;
        CustVendorBlocked  vendorBlocked       = CustVendorBlocked::No;
        VendCategoryStatus vendCategoryStatus  = VendCategoryStatus::Preferred;

        if (_searchString != strMin())
        {
            newSearchString = super(_searchString);

            //analyze pair left=right
            posPair = strfind(newSearchString, pairDelimiter, 1, posMaxPair);
            if (posPair)
            {
                singleAttribute = substr(newSearchString, 1, posPair -1);
                singlevalue = substr(newSearchString, posPair + 1, posMaxPair - posPair);
                if (singleAttribute != strMin() && singlevalue != strMin())
                {
                    switch (singleAttribute)
                    {
                        case this.labelVendorGroup():
                            this.parmVendorGroup(singlevalue);
                            break;

                        case this.labelVendorHold():
                            this.parmVendorOnHold(str2enum(vendorBlocked,singlevalue));
                            break;

                        case this.labelCategoryStatus():
                            this.parmCategoryStatus(str2enum(vendCategoryStatus, singlevalue));
                            break;

                        case this.labelBidOnly():
                            this.parmBidOnly(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelDisabled():
                            this.parmDisabled(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelOneTimeSupplier():
                            this.parmOneTimeSupplier(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelVeteran():
                            this.parmVeteran(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelEthnicOrigin():
                            this.parmEthnicOrigin(singlevalue);
                            break;

                        case this.labelCriterionGroup():
                            this.parmCriterionGroup(singlevalue);
                            break;

                        case this.labelCriterion():
                            this.parmCriterion(singlevalue);
                            break;

                        default:
                            returnString = newSearchString;
                            break;
                    }
                }
            }
        }

        return returnString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets Vendor Specific parameters to the specified form.
    /// </summary>
    /// <param name="_form">
    /// An instance of the <c>VendSearchCriteria</c> form.
    /// </param>
    public void setFormParameters(FormRun _form)
    {
        Object formObject = _form;

        // setting vendor specific attributes
        formObject.parmVendorHold(this.parmVendorOnHold());
        formObject.parmCategoryStatus(this.parmCategoryStatus());
        formObject.parmBidOnly(this.parmBidOnly());
        formObject.parmOneTimeSupplier(this.parmOneTimeSupplier());
        formObject.parmOwnerIsVeteran(this.parmVeteran());
        formObject.parmOwnerIsDisabled(this.parmDisabled());
        formObject.parmEthnicOrigin(this.parmEthnicOrigin());
        formObject.parmCriterionGroup(this.parmCriterionGroup(), true);
        formObject.parmCriterion(this.parmCriterion(), true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>