<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDisputeHistoryAutomationAging</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CustDisputeHistoryAutomationAging</c> holds the logic to update payments during
/// the aging process.
/// </summary>
class CustDisputeHistoryAutomationAging extends CustDisputeHistoryAutomation
{
    CustVendTransAging custVendTransAging;
    TransDate asOfDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCollectionsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs an instance of the <c>CustDisputeHistoryAutomationAging</c> class.
    /// </summary>
    /// <param name = "_custVendTransAging">The temporary <c>CustVendTransAging</c> table used to age customers.</param>
    public static void updateCollectionsStatus(CustVendTransAging _custVendTransAging, TransDate _asOfDate)
    {
        CustDisputeHistoryAutomationAging updateCollectionsStatus = new CustDisputeHistoryAutomationAging();
        updateCollectionsStatus.parmCustVendTransAging(_custVendTransAging);
        updateCollectionsStatus.parmAsOfDate(_asOfDate);
        updateCollectionsStatus.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendTransAging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>CustVendTransAging</c> temporary table.
    /// </summary>
    /// <param name = "_custVendTransAging">The <c>CustVendTransAging</c> temporary table.</param>
    /// <returns>The <c>CustVendTransAging</c> temporary table.</returns>
    public CustVendTransAging parmCustVendTransAging(CustVendTransAging _custVendTransAging = custVendTransAging)
    {
        custVendTransAging = _custVendTransAging;
        return custVendTransAging;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAsOfDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the aging as of date.
    /// </summary>
    /// <param name = "_asOfDate">The date to run aging as of.</param>
    /// <returns>the date to run aging as of.</returns>
    public TransDate parmAsOfDate(TransDate _asOfDate = asOfDate)
    {
        asOfDate = _asOfDate;
        return asOfDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustDisputeHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all collections status records of a customer.
    /// </summary>
    public void updateCustDisputeHistory()
    {
        CustDispute dispute;
        CustTrans custTrans;
        date currentDate = this.parmAsOfDate();
        CustVendTransAging tmpCustAging = this.parmCustVendTransAging();

        UserConnection userConnection;

        if (CustDisputeHistoryAutomationAvoidTempDbLeakFlight::instance().isEnabled())
        {
            userConnection = new UserConnection();
            tmpCustAging.setConnection(userConnection);
        }
        else
        {
            tmpCustAging.takeOwnershipOfTempDBTable(true);
        }
        try
        {
            ttsbegin;
            // publish business events for dispute status changes
            this.publishDisputeStatusChangeBusinessEvents(currentDate, tmpCustAging);

            update_recordset dispute
                setting Status = CustVendDisputeStatus::PromiseToPayBroken,
                    StatusChangedDate = currentDate,
                    IsAutomaticUpdate = true,
                    LastPayment = dispute.AmountCur,
                    Note = "@AccountsReceivable:CustDisputeHistoryAutomationAgingBroken"
                where dispute.Status == CustVendDisputeStatus::PromiseToPay
                        && dispute.FollowUpDate < currentDate
                exists join custTrans
                    where custTrans.RecId == dispute.CustTrans
                        && !custTrans.Closed
                exists join tmpCustAging
                    where tmpCustAging.AccountNum == custTrans.AccountNum;
            ttscommit;
        }
        finally
        {
            if (CustDisputeHistoryAutomationAvoidTempDbLeakFlight::instance().isEnabled())
            {
                //tmpCustAging is disposed in CustAgingLineCalculation after update collections status is called.
                userConnection.finalize();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>publishDisputeStatusChangeBusinessEvents</Name>
				<Source><![CDATA[
    private void publishDisputeStatusChangeBusinessEvents(date _currentDate, CustVendTransAging _tmpCustAging)
    {
        CustDispute dispute;
        CustTrans custTrans;

        if (BusinessEventsConfigurationReader::isBusinessEventEnabled(classStr(CollectionStatusUpdatedBusinessEvent)))
        {
            while select dispute
                where dispute.Status == CustVendDisputeStatus::PromiseToPay
                        && dispute.FollowUpDate < _currentDate
                exists join custTrans
                    where custTrans.RecId == dispute.CustTrans
                        && !custTrans.Closed
                exists join _tmpCustAging
                    where _tmpCustAging.AccountNum == custTrans.AccountNum
            {
                CollectionStatusUpdatedBusinessEvent::newFromCustDispute(dispute).send();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>