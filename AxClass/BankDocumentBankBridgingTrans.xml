<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDocumentBankBridgingTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
[BankDocumentAttribute(BankDocumentBookType::BankClearing)]
internal class BankDocumentBankBridgingTrans extends BankDocumentPayment implements BankDocumentIStateChangeEventHandler
{
    private BankBridgingTrans bankBridgingTrans;
    private BankAccountTrans bankAccountTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankDocumentStateChanged</Name>
				<Source><![CDATA[
    public void bankDocumentStateChanged(BankDocumentState _bankDocumentState)
    {
        ttsbegin;

        bankAccountTrans = BankAccountTrans::findBySource(tableNum(LedgerJournalTrans), bankBridgingTrans.BridgedLedgerJournalTransRecId);
        BankDocumentStatusChangeType bankDocumentStatusChangeType = _bankDocumentState.parmBankDocumentStatusChangeType();

        if (bankAccountTrans && bankBridgingTrans.BridgingStatus == BankBridgingStatus::Cleared)
        {
            this.processBankAccountTransReconcileStatus(bankDocumentStatusChangeType);
            this.processBankAccountTransCorrection(bankDocumentStatusChangeType);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentType</Name>
				<Source><![CDATA[
    public BankDocumentBookType getDocumentType()
    {
        return BankDocumentBookType::BankClearing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrignalBankDocumentStatusName</Name>
				<Source><![CDATA[
    public BankDocumentOrigDocumentStatus getOrignalBankDocumentStatusName()
    {
        return enum2str(bankBridgingTrans.BridgingStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyCompany</Name>
				<Source><![CDATA[
    public CompanyId getRelatedPartyCompany()
    {
        return ledgerJournalTrans.OffsetCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPartyType</Name>
				<Source><![CDATA[
    public BankReconciliationRelatedPartyType getRelatedPartyType()
    {
        switch (ledgerJournalTrans.AccountType)
        {
            case LedgerJournalACType::Cust:
                return DirPartyRoleType::Customer;
            case LedgerJournalACType::Vend:
                return DirPartyRoleType::Vendor;
            default:
                return DirPartyRoleType::None;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSourceBuffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void loadSourceBuffer()
    {
        ledgerJournalTrans = documentMap;

        select firstonly bankBridgingTrans
            where ledgerJournalTrans.RecId == bankBridgingTrans.BridgedLedgerJournalTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankAccountTransCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the correction of the bank account transaction.
    /// </summary>
    /// <param name="_changeType">
    /// The bank document state change type.
    /// </param>
    private void processBankAccountTransCorrection(BankDocumentStatusChangeType _changeType)
    {
        if (documentTable.isWithCorrection())
        {
            if (_changeType == BankDocumentStatusChangeType::Reconcile)
            {
                BankDocument::postBankTransactionCorrection(bankAccountTrans.RecId, documentTable.getCorrectionBankCurrencyAmount());
            }
            else if (_changeType == BankDocumentStatusChangeType::ReverseReconcile)
            {
                BankDocument::reverseBankTransactionCorrection(bankAccountTrans.RecId);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>