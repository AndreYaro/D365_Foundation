<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MainAccountLegalEntityTableEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handler for the <c>MainAccountLegalEntityTable</c> table.
/// </summary>
public static class MainAccountLegalEntityTableEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>MainAccountLegalEntity_onValidatingField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for validating field.
    /// </summary>
    /// <param name="sender">The <c>MainAccountLegalEntity</c> record.</param>
    /// <param name="e">The event arguments.</param>
    [DataEventHandler(tableStr(MainAccountLegalEntity), DataEventType::ValidatingField), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void MainAccountLegalEntity_onValidatingField(Common sender, DataEventArgs e)
    {
        boolean isValid = true;
        MainAccount mainAccount;
        MainAccountLegalEntity mainAccountLegalEntity = sender as MainAccountLegalEntity;
        ValidateFieldEventArgs ve = e;

        LedgerISubledgerJournalProvider subledgerJournalProvider = LedgerSubledgerJournalProviderFactory::newLedgerSubledgerJournalProvider();

        FieldId fieldId = ve.parmFieldId();

        switch (fieldId)
        {
            // Super does not check for the existence of the tax values becuase IgnoreEDTRelations is set to true for multi-company scenarios
            case (fieldNum(MainAccountLegalEntity, TaxGroup)):
            if (mainAccountLegalEntity.TaxGroup)
                {
                    changeCompany(CompanyInfo::getDataArea(mainAccountLegalEntity.LegalEntity))
                    {
                        isValid = TaxGroupHeading::checkExist(mainAccountLegalEntity.TaxGroup);
                    }
                }
                break;

            case (fieldNum(MainAccountLegalEntity, TaxItemGroup)):
            if (mainAccountLegalEntity.TaxItemGroup)
                {
                    changeCompany(CompanyInfo::getDataArea(mainAccountLegalEntity.LegalEntity))
                    {
                        isValid = TaxItemGroupHeading::checkExist(mainAccountLegalEntity.TaxItemGroup);
                    }
                }
                break;

            case (fieldNum(MainAccountLegalEntity, TaxCode)):
                changeCompany(CompanyInfo::getDataArea(mainAccountLegalEntity.LegalEntity))
                {
                    isValid = TaxTable::checkExist(mainAccountLegalEntity.TaxCode);
                }
                break;

            case (fieldNum(MainAccountLegalEntity, ValidateTaxCode)) :
            select firstonly MainAccountId from mainAccount
                    where mainAccount.RecId== mainAccountLegalEntity.MainAccount;

                if (mainAccount.MainAccountId && subledgerJournalProvider.subLedgerJournalNotTransferredRecId(mainAccountLegalEntity.MainAccount))
                {
                    // only needed for error reporting
                    mainAccount = MainAccount::find(mainAccountLegalEntity.MainAccount);

                    error(strFmt("@SYS329026",fieldId2pname(mainAccountLegalEntity.TableId, fieldId), mainAccount.MainAccountId));
                    isValid = false;
                }
                break;
        }
        ve.parmValidateResult(isValid);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>