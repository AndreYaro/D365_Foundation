<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileAppServiceDecoratorRuleGenericDataInquiryDisplayArea</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileAppServiceDecoratorRuleGenericDataInquiryDisplayArea</c> class populates the DisplayArea for the Inquiry pattern used in generic data inquiry flows.
/// </summary>
public class WHSMobileAppServiceDecoratorRuleGenericDataInquiryDisplayArea implements WHSIMobileAppServiceXMLDecoratorRule
{
    #WHSRF

    private const str newLine = '\n';
    private const FieldName InquiryFiltersControlName = 'GenericDataInquiryFilters';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileAppServiceDecoratorRuleGenericDataInquiryDisplayArea construct()
    {
        return new WHSMobileAppServiceDecoratorRuleGenericDataInquiryDisplayArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDisplayArea</Name>
				<Source><![CDATA[
    private str getDisplayArea(ExtendedTypeId _controlInputType, str _controlName)
    {
        switch (_controlInputType)
        {
            case extendedTypeNum(WHSRFUndefinedDataType):
                if (_controlName == InquiryFiltersControlName)
                {
                    return WHSMobileAppXMLDisplayArea::SubHeaderArea;
                }
        
            case extendedTypeNum(NotesLine):
                return WHSMobileAppXMLDisplayArea::BodyArea;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to run the transformation.
    /// </summary>
    /// <param name = "_pageInfo">
    /// The <c>WHSMobileAppPageInfo</c> containing controls and information to carry out the transformation.
    /// </param>
    public void run(WHSMobileAppPageInfo _pageInfo)
    {
        ListEnumerator le = _pageInfo.parmControlsEnumerator();

        while (le.moveNext())
        {
            Map controlMap = le.current();
            if (this.mustDecorateControl(controlMap))
            {
                this.decorateControl(controlMap);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>decorateControl</Name>
				<Source><![CDATA[
    private void decorateControl(Map _controlMap)
    {
        ExtendedTypeId controlInputType = _controlMap.lookup(#XMLControlInputType);
        str controlName = _controlMap.lookup(#XMLControlName);

        str displayArea = this.getDisplayArea(controlInputType, controlName);
        if (displayArea)
        {
            this.setDisplayArea(_controlMap, displayArea);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustDecorateControl</Name>
				<Source><![CDATA[
    private boolean mustDecorateControl(Map _controlMap)
    {
        return _controlMap.lookup(#XMLControlCtrlType) == #RFLabel &&
               !this.newLineControl(_controlMap.lookup(#XMLControlLabel));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDisplayArea</Name>
				<Source><![CDATA[
    private void setDisplayArea(Map _controlMap, str _displayArea)
    {
        _controlMap.insert(#XMLControlDisplayArea, _displayArea);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLineControl</Name>
				<Source><![CDATA[
    private boolean newLineControl(str _controlLabel)
    {
        return _controlLabel == newLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>