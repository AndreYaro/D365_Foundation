<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingQualityOrderSync</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventBlockingQualityOrderSync</c> class provides methods to synchronize inventory blocking
///    and related quality orders.
/// </summary>
class InventBlockingQualityOrderSync
{
    boolean         whsItemIsWHSControlled;
    ItemId          itemId;
    InventQty       maxReferredLotBlockingQty;      // The maximum quantity that can be blocked for a given lot
    PdsCWInventQty  maxReferredLotBlockingCWQty;    // The maximum CW quantity that can be blocked for a given lot

    boolean     maxReferredLotBlockingQtyInitialized;

    // Quality order information
    InventTestReferenceType     inventTestReferenceType;
    InventRefId                 inventRefId;
    InventRefTransId            inventRefTransId;
    InventDimId                 inventDimId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory blocking quantity based on the related quality orders.
    /// </summary>
    /// <param name="_existingInventBlockingId">
    /// The inventory blocking ID the inventory blocking quantity; otherwise, 0.
    /// </param>
    /// <returns>
    /// A container that contains an inventory quantity and a catch weight quantity.
    /// </returns>
    protected container blockingQuantity(RefRecId _existingInventBlockingId)
    {
        InventQty       inventBlockingQty;
        InventQty       maxLotQty;
        InventQty       totalQOQty;
        InventQty       minQty;
        PdsCWInventQty  cwInventBlockingQty;
        PdsCWInventQty  cwTotalQOQty;
        PdsCWInventQty  cwMinQty;
        PdsCWInventQty  cwMaxLotQty;
        InventQty       destructiveQty;
        PdsCWInventQty  destructiveCWQty;

        if (inventRefTransId)
        {
            [maxLotQty, cwMaxLotQty]  = this.maxReferredLotBlockingQty();

            [totalQOQty , cwTotalQOQty] = this.totalQualityOrderBlockingQty(_existingInventBlockingId);
            inventBlockingQty = min(maxLotQty, totalQOQty);
            cwInventBlockingQty= min(cwMaxLotQty, cwTotalQOQty);
        }
        else
        {
            [inventBlockingQty , cwInventBlockingQty] = this.totalQualityOrderBlockingQty(_existingInventBlockingId);
        }
        [minQty, cwMinQty] = this.minBlockingQty();
        inventBlockingQty = max(inventBlockingQty, minQty);
        cwInventBlockingQty = max(cwInventBlockingQty, cwMinQty);

        InventChangeBlockingQtyOnDestructiveTestContext context = InventChangeBlockingQtyOnDestructiveTestContext::current();
        boolean skipDeductDestructiveQty = context && context.parmSkipDeductDestructiveQty();
        if (!skipDeductDestructiveQty)
        {
            [destructiveQty, destructiveCWQty] = this.destructiveQualityOrderQty();
            inventBlockingQty = max(0, inventBlockingQty - destructiveQty);
            cwInventBlockingQty = max(0, cwInventBlockingQty - destructiveCWQty);
        }
        return [inventBlockingQty, cwInventBlockingQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>destructiveQualityOrderQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total quantity of the related destructive quality orders.
    /// </summary>
    /// <returns>
    /// A container that contains an inventory quantity and a catch weight quantity.
    /// </returns>
    protected container destructiveQualityOrderQty()
    {
        QueryBuildDataSource        dsQualityOrder, dsInventDim;

        // Here we assume that all entries sharing an InventBlocking refer to the same reference document
        if (!inventRefTransId)
        {
            return [0, 0.0];
        }

        // Select all related destructive orders, even if closed in which case there is no related InventBlockingQualityOrder
        Query query = new Query();
        dsQualityOrder = query.addDataSource(tableNum(InventQualityOrderTable));

        dsQualityOrder.addRange(fieldNum(InventQualityOrderTable, TestDestructive)).value(queryValue(NoYes::Yes));
        dsQualityOrder.addRange(fieldNum(InventQualityOrderTable, ReferenceType)).value(queryValue(inventTestReferenceType));
        dsQualityOrder.addRange(fieldNum(InventQualityOrderTable, InventRefId)).value(queryValue(inventRefId));
        dsQualityOrder.addRange(fieldNum(InventQualityOrderTable, InventRefTransId)).value(queryValue(inventRefTransId));

        dsQualityOrder.addSelectionField(fieldNum(InventQualityOrderTable, Qty), SelectionField::Sum);
        dsQualityOrder.addSelectionField(fieldNum(InventQualityOrderTable, PdsCWQty), SelectionField::Sum);

        if (!whsItemIsWHSControlled)
        {
            dsQualityOrder.addRange(fieldNum(InventQualityOrderTable, InventDimId)).value(queryValue(inventDimId));
        }
        else
        {
            InventDimParm dimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(itemId));
            InventDim blockingInventDim = InventDim::find(inventDimId);

            dsInventDim = dsQualityOrder.addDataSource(tableNum(InventDim));
            dsInventDim.relations(true);
            InventDim::queryAddRangeCriteria(dsInventDim, blockingInventDim, dimParmAboveLocation.selectedDimFields());
        }

        QueryRun queryRun = new queryRun(query);
        queryRun.next();
        InventQualityOrderTable inventQualityOrderTable = queryRun.get(tableNum(InventQualityOrderTable));

        return [inventQualityOrderTable.Qty, inventQualityOrderTable.PdsCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables from the specified quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> table record.
    /// </param>
    protected void initFromQualityOrderTable(InventQualityOrderTable _inventQualityOrderTable)
    {
        inventTestReferenceType = _inventQualityOrderTable.ReferenceType;
        inventRefId             = _inventQualityOrderTable.InventRefId;
        inventRefTransId        = _inventQualityOrderTable.InventRefTransId;
        inventDimId             = _inventQualityOrderTable.InventDimId;
        itemId                  = _inventQualityOrderTable.ItemId;
        whsItemIsWHSControlled  = WHSInventEnabled::exist(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQualityOrderLinkedToAProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if the referred quality orders are linked to a process.
    /// </summary>
    /// <param name="_inventBlockingId">
    ///    The inventory blocking ID.
    /// </param>
    /// <returns>
    ///    true if referred quality orders are linked to a process; otherwise, false.
    /// </returns>
    protected boolean isQualityOrderLinkedToAProcess(RefRecId _inventBlockingId)
    {
        InventQualityOrderTable     qualityOrder;
        InventBlockingQualityOrder  blockingQualityOrder;

        select firstonly InventRefTransId
            from        qualityOrder
            exists join blockingQualityOrder
            where       qualityOrder.QualityOrderId         == blockingQualityOrder.InventQualityOrderId
            &&          blockingQualityOrder.InventBlocking == _inventBlockingId;

        return (qualityOrder.InventRefTransId != '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a link between the quality order and the inventory blocking.
    /// </summary>
    /// <param name="_inventQualityOrderId">
    ///    The quality order ID.
    /// </param>
    /// <param name="_inventBlockingId">
    ///    The inventory blocking ID.
    /// </param>
    protected void linkQualityOrder(
        InventQualityOrderId _inventQualityOrderId,
        RefRecId  _inventBlockingId)
    {
        InventBlockingQualityOrder  inventBlockingQualityOrder;

        inventBlockingQualityOrder.InventBlocking       = _inventBlockingId;
        inventBlockingQualityOrder.InventQualityOrderId = _inventQualityOrderId;
        inventBlockingQualityOrder.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxReferredLotBlockingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the maximum inventory blocking quantity.
    /// </summary>
    /// <returns>
    /// A container that contains an inventory quantity and a catch weight quantity.
    /// </returns>
    protected container maxReferredLotBlockingQty()
    {
        if (!maxReferredLotBlockingQtyInitialized)
        {
            if (inventRefTransId != '')
            {
                [maxReferredLotBlockingQty, maxReferredLotBlockingCWQty] = this.referredLotQty();
            }
            else
            {
                maxReferredLotBlockingQty = 0;
                maxReferredLotBlockingCWQty = 0;
            }
            maxReferredLotBlockingQtyInitialized = true;
        }
        return [maxReferredLotBlockingQty, maxReferredLotBlockingCWQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>minBlockingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the minimum inventory blocking quantity.
    /// </summary>
    /// <returns>
    /// A container that contains an inventory quantity and a catch weight quantity.
    /// </returns>
    protected container minBlockingQty()
    {
        InventQualityOrderTable     qualityOrder;
        InventQty                   blockingQty;
        PdsCWInventQty              cwBlockingQty;

        if (!inventRefTransId)
        {
            // Not linked to a process, so no minimum blocking requirements
            return [0,0];
        }

        select maxof(BlockingQty), maxof(PdsCWBlockingQty)
            from        qualityOrder
            where       qualityOrder.OrderStatus        == InventTestOrderStatus::Open
            &&          qualityOrder.ReferenceType      == inventTestReferenceType
            &&          qualityOrder.InventRefId        == inventRefId
            &&          qualityOrder.InventRefTransId   == inventRefTransId
            &&          qualityOrder.InventDimId        == inventDimId;

        [blockingQty, cwBlockingQty] = this.maxReferredLotBlockingQty();
        return [min(qualityOrder.BlockingQty, blockingQty), min(qualityOrder.PdsCWBlockingQty, cwBlockingQty)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onQualityOrderBlockingQtyIncrease</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new or updates an existing inventory blocking for the specified quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> table record.
    /// </param>
    public void onQualityOrderBlockingQtyIncrease(InventQualityOrderTable _inventQualityOrderTable)
    {
        this.initFromQualityOrderTable(_inventQualityOrderTable);

        ttsbegin;
        InventBlocking inventBlocking = InventBlockingQualityOrder::findInventBlockingByQualityOrderId(_inventQualityOrderTable.QualityOrderId, true);
        Debug::assert(inventBlocking.RecId != 0);   // Use onQualityOrderCreate if blocking doesn't exist

        [inventBlocking.Qty, inventBlocking.PdsCWQty] = this.blockingQuantity(inventBlocking.RecId);
        inventBlocking.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onQualityOrderBlockingQtyReduce</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles updates to a related inventory blocking for the specified quality order when blocking
    /// quantity is reduced.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> table record.
    /// </param>
    public void onQualityOrderBlockingQtyReduce(InventQualityOrderTable _inventQualityOrderTable)
    {
        InventBlockingQualityOrder              inventBlockingQualityOrder;
        InventQualityOrderTable                 inventQualityOrderTableOther;
        InventQty                               qtyNew      = _inventQualityOrderTable.BlockingQty;
        PdsCWInventQty                          cwQtyNew    = _inventQualityOrderTable.PdsCWBlockingQty;

        Debug::assert(_inventQualityOrderTable.BlockingQty > 0);  // If blocking is to be removed use onQualityOrderRemove

        this.initFromQualityOrderTable(_inventQualityOrderTable);

        ttsbegin;
        InventBlocking relatedInventBlocking = InventBlockingQualityOrder::findInventBlockingByQualityOrderId(_inventQualityOrderTable.QualityOrderId, true);

        if (relatedInventBlocking)
        {
            if (_inventQualityOrderTable.InventRefTransId)
            {
                // See if other quality orders are linked to the same related blocking
                select sum(BlockingQty), sum(PdsCWBlockingQty)
                        from inventQualityOrderTableOther
                    exists join inventBlockingQualityOrder
                    where inventBlockingQualityOrder.InventBlocking     == relatedInventBlocking.RecId
                      &&  inventQualityOrderTableOther.QualityOrderId   != _inventQualityOrderTable.QualityOrderId;
                if (inventQualityOrderTableOther.BlockingQty +  _inventQualityOrderTable.BlockingQty > qtyNew)
                {
                    container maxRefLotBlockedQtys = this.maxReferredLotBlockingQty();
                    qtyNew      = min(inventQualityOrderTableOther.BlockingQty,         conPeek(maxRefLotBlockedQtys, 1));
                    cwQtyNew    = min(inventQualityOrderTableOther.PdsCWBlockingQty,    conPeek(maxRefLotBlockedQtys, 2));
                }
            }

            relatedInventBlocking.Qty = qtyNew;
            relatedInventBlocking.PdsCWQty = cwQtyNew;
            relatedInventBlocking.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onQualityOrderBlockingRequestCancel</Name>
				<Source><![CDATA[
    [SysObsolete('To support catch weight use onQualityOrderBlockingRequestDelete instead.', false, 31\01\2016)]
    public InventQty onQualityOrderBlockingRequestCancel(InventQualityOrderTable _inventQualityOrderTable)
    {
        InventQty       qtyDifference = 0;
        PdsCWInventQty  cwQtyDifference = 0;

        [qtyDifference, cwQtyDifference] = this.onQualityOrderBlockingRequestDelete(_inventQualityOrderTable);
        return qtyDifference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onQualityOrderBlockingRequestCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates an inventory blocking for the specified quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> table record.
    /// </param>
    public void onQualityOrderBlockingRequestCreate(InventQualityOrderTable _inventQualityOrderTable)
    {
        InventBlocking                          inventBlocking;
        InventBlockingQualityOrder              inventBlockingQualityOrder;
        InventQualityOrderTable                 qualityOrder;

        Debug::assert(_inventQualityOrderTable.BlockingQty > 0);

        this.initFromQualityOrderTable(_inventQualityOrderTable);

        ttsbegin;

        using (var relatedInfo = InventBlockingRelatedTransactionInfoSingleton::instance().init(_inventQualityOrderTable))
        {
            if (_inventQualityOrderTable.InventRefTransId)
            {
                select firstonly forupdate inventBlocking
                    where   inventBlocking.InventDimId  == _inventQualityOrderTable.inventDimForBlocking().inventDimId
                    exists join inventBlockingQualityOrder
                        where   inventBlocking.RecId                            == inventBlockingQualityOrder.InventBlocking
                    exists join qualityOrder
                        where   inventBlockingQualityOrder.InventQualityOrderId == qualityOrder.QualityOrderId
                            &&  qualityOrder.InventRefTransId                   == _inventQualityOrderTable.InventRefTransId;
            }

            if (!inventBlocking)
            {
                inventBlocking.initFromQualityOrderTable(_inventQualityOrderTable);
                inventBlocking.insert();

                inventBlocking = InventBlocking::find(inventBlocking.RecId, true);
            }

            this.linkQualityOrder(_inventQualityOrderTable.QualityOrderId, inventBlocking.RecId);

            if (_inventQualityOrderTable.InventRefTransId)
            {
                [inventBlocking.Qty, inventBlocking.PdsCWQty] = this.blockingQuantity(inventBlocking.RecId);
            }
            else
            {
                inventBlocking.Qty = _inventQualityOrderTable.BlockingQty;
                inventBlocking.PdsCWQty = _inventQualityOrderTable.PdsCWBlockingQty;
            }

            using (InventBlockingFindMarkedOrderDescContext context = InventBlockingFindMarkedOrderDescContext::construct())
            {
                inventBlocking.update();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onQualityOrderBlockingRequestDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes or updates an inventory blocking when the specified quality order is removed or changes
    /// status not to require blocking.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// An <c>InventQualityOrderTable</c> table record.
    /// </param>
    /// <returns>
    /// A <c>container</c> of the total change in inventory blocking upon delete or update, the container packs an inventory quantity and a catch weight quantity.
    /// </returns>
    public container onQualityOrderBlockingRequestDelete(InventQualityOrderTable _inventQualityOrderTable)
    {
        InventBlockingQualityOrder              inventBlockingQualityOrder;
        InventQty                               qtyDifference = 0;
        PdsCWInventQty                          cwQtyDifference = 0;

        this.initFromQualityOrderTable(_inventQualityOrderTable);

        ttsbegin;
        
        InventBlocking relatedInventBlocking = InventBlockingQualityOrder::findInventBlockingByQualityOrderId(_inventQualityOrderTable.QualityOrderId, true);

        if (relatedInventBlocking)
        {
            qtyDifference = relatedInventBlocking.Qty;
            cwQtyDifference = relatedInventBlocking.PdsCWQty;
            Integer transRefSign = relatedInventBlocking.inventTransRefSign(); // save the value before unlink removes it.

            this.unlinkQualityOrder(_inventQualityOrderTable.QualityOrderId);

            if (_inventQualityOrderTable.InventRefTransId)
            {
                // See if other quality orders are linked to the same related blocking
                select firstonly RecId from inventBlockingQualityOrder
                    where inventBlockingQualityOrder.InventBlocking == relatedInventBlocking.RecId;
            }

            if (inventBlockingQualityOrder.RecId)
            {
                [relatedInventBlocking.Qty, relatedInventBlocking.PdsCWQty] = this.blockingQuantity(relatedInventBlocking.RecId);
                cwQtyDifference          -= relatedInventBlocking.PdsCWQty;
                qtyDifference            -= relatedInventBlocking.Qty;

                if(PurchLine::findInventTransId(_inventQualityOrderTable.InventRefTransId).ProjId)
                {
                    // set default value based on class <c>InventBlockingMarkingSync</c> new construct method.
                    boolean allowOriginalIssueReservPhys = true;
                    boolean unmark = false;

                    if (qtyDifference > 0 && _inventQualityOrderTable.mustCreateQuarantineOrder())
                    {
                        allowOriginalIssueReservPhys = false;
                    }

                    if ((_inventQualityOrderTable.OrderStatus   == InventTestOrderStatus::Fail)     &&
                        (_inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch))
                    {
                        unmark = true;
                    }

                    this.setContainerValueInCache(InventBlockingQualityOrderSync::transactionScopeCacheKey(relatedInventBlocking.RecId),
                        [allowOriginalIssueReservPhys, unmark]);
                    
                    relatedInventBlocking.update();

                    this.removeContainerValueInCache(InventBlockingQualityOrderSync::transactionScopeCacheKey(relatedInventBlocking.RecId));
                }
                else
                {
                    relatedInventBlocking.update();
                }
            }
            else
            {
                InventBlockingMarkingSync inventBlockingMarkingSync = InventBlockingMarkingSync::newFromInventBlocking(relatedInventBlocking, -relatedInventBlocking.Qty,
                        InventTransOrigin::findByInventTransId(_inventQualityOrderTable.InventRefTransId).RecId,
                        transRefSign, -relatedInventBlocking.PdsCWQty);
                inventBlockingMarkingSync.parmReceiptCanHaveOnlyDimAboveLocation(_inventQualityOrderTable.whsIsForWorkGeneratingProcess());

                if (qtyDifference > 0 && _inventQualityOrderTable.mustCreateQuarantineOrder())
                {
                    // Quarantine order cannot be created if physical reservation happened on issue inventTrans
                    inventBlockingMarkingSync.parmAllowOriginalIssueReservPhys(false);
                }

                if ((_inventQualityOrderTable.OrderStatus   == InventTestOrderStatus::Fail)    &&
                    (_inventQualityOrderTable.ReferenceType == InventTestReferenceType::Purch) &&
                    (PurchLine::findInventTransId(_inventQualityOrderTable.InventRefTransId).ProjId))
                {
                    inventBlockingMarkingSync.parmUnmark(true);
                }

                inventBlockingMarkingSync.unmark();
                relatedInventBlocking.delete();
                inventBlockingMarkingSync.mark();
            }
        }

        ttscommit;

        return [max(qtyDifference, 0), max(cwQtyDifference, 0)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAjustInventQtyForQualityOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the related quality orders from inventory quantity adjustment.
    /// </summary>
    /// <param name="_inventBlockingId">
    /// The inventory blocking ID.
    /// </param>
    /// <param name="_qtyDelta">
    /// The quantity change for the inventory quantity adjustment.
    /// </param>
    /// <param name="_cwQtyDelta">
    /// The catch weight quantity change for the inventory quantity adjustment.
    /// </param>
    /// <param name="_updateMarkCompleteBlocking">
    /// A <c>NoYes</c> enumeration value that indicates whether the update should target the blocking or
    /// non-blocking quality orders.
    /// </param>
    protected void pdsAjustInventQtyForQualityOrders(
        RefRecId        _inventBlockingId,
        InventQty       _qtyDelta,
        PdsCWInventQty  _cwQtyDelta,
        NoYes           _updateMarkCompleteBlocking = NoYes::No)
    {
        InventQualityOrderTable     qualityOrder;
        InventBlockingQualityOrder  inventBlockingQualityOrder;

        update_recordset qualityOrder
            setting     BlockingQty         = qualityOrder.BlockingQty      + _qtyDelta,
                        PdsCWBlockingQty    = qualityOrder.PdsCWBlockingQty + _cwQtyDelta
            exists join inventBlockingQualityOrder
            where       qualityOrder.QualityOrderId                 == inventBlockingQualityOrder.InventQualityOrderId
                &&      qualityOrder.CompleteBlocking               == _updateMarkCompleteBlocking
                &&      inventBlockingQualityOrder.InventBlocking   == _inventBlockingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referredLotQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the referred inventory transactions quantity.
    /// </summary>
    /// <returns>
    /// A container that contains an inventory quantity and a catch weight quantity.
    /// </returns>
    protected container referredLotQty()
    {
        if (!inventRefTransId)
        {
            return [0, 0];
        }

        InventTrans inventTrans = InventTrans::findTransId(inventRefTransId);
        InventMovement movement = InventMovement::construct(inventTrans);
        return [abs(movement.transIdSum().receipt()      + movement.transIdSum().issue()),
                abs(movement.transIdSum().pdsCWReceipt() + movement.transIdSum().pdsCWIssue())];
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQualityOrderBlockingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total blocking quantity for the related quality orders.
    /// </summary>
    /// <param name="_inventBlockingId">
    /// The inventory blocking ID.
    /// </param>
    /// <returns>
    /// A container that contains an inventory quantity and a catch weight quantity.
    /// </returns>
    protected container totalQualityOrderBlockingQty(RefRecId  _inventBlockingId)
    {
        InventQualityOrderTable     qualityOrder;
        InventBlockingQualityOrder  blockingQualityOrder;

        select sum(BlockingQty),sum(PdsCWBlockingQty)
            from        qualityOrder
            exists join blockingQualityOrder
            where       qualityOrder.QualityOrderId         == blockingQualityOrder.InventQualityOrderId
            &&          blockingQualityOrder.InventBlocking == _inventBlockingId;

        return [qualityOrder.BlockingQty, qualityOrder.PdsCWBlockingQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the link between quality order and inventory blocking.
    /// </summary>
    /// <param name="_inventQualityOrderId">
    ///    The quality order ID.
    /// </param>
    protected void unlinkQualityOrder(InventQualityOrderId _inventQualityOrderId)
    {
        InventBlockingQualityOrder inventBlockingQualityOrder = InventBlockingQualityOrder::findByQualityOrderId(_inventQualityOrderId, true);
        inventBlockingQualityOrder.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventBlockingQualityOrderSync construct()
    {
        return new InventBlockingQualityOrderSync();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContainerValueInCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set container value into transaction scope cache to represent whether allowing original issue reserve physical
    /// and original receipt transaction should be unmarked or not in quality order validation.
    /// </summary>
    /// <param name="_transactionScopeCacheKey">
    ///    The transaction scope cache key value.
    /// </param>
    ///  <param name="_cacheValue">
    ///    The <c>container</c> contains flag values representing whether quarantine order need to be created and original receipt transactions should be unmarked or not.
    /// </param>
    private void setContainerValueInCache(str _transactionScopeCacheKey, container _cacheValue)
    {
        SysGlobalCache transactionCache = appl.transactionScope().parmTransactionScopeCache();
        if (!transactionCache.isSet(InventBlockingQualityOrderSync::cacheOwner(), _transactionScopeCacheKey))
        {
            transactionCache.set(InventBlockingQualityOrderSync::cacheOwner(), _transactionScopeCacheKey, _cacheValue);
        }            
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeContainerValueInCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove cache value according to transaction scope key
    /// </summary>
    /// <param name="_transactionScopeCacheKey">
    ///    The transaction scope cache key value.
    /// </param>
    private void removeContainerValueInCache(str _transactionScopeCacheKey)
    {
        SysGlobalCache transactionCache = appl.transactionScope().parmTransactionScopeCache();
        if (transactionCache.isSet(InventBlockingQualityOrderSync::cacheOwner(), _transactionScopeCacheKey))
        {
            transactionCache.remove(InventBlockingQualityOrderSync::cacheOwner(), _transactionScopeCacheKey);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContainerValueFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get <c>container</c> value which contains flag values represent whether allowing original issue reserve physical and original receipt transactions should be unmarked or not.
    /// </summary>
    /// <param name="_transactionScopeCacheKey">
    ///    The transaction scope cache key string value.
    /// </param>    
    internal static container getContainerValueFromCache(str _transactionScopeCacheKey)
    {
        SysTransactionScope transactionScope = appl.transactionScope();
        SysGlobalCache transactionCache = transactionScope.parmTransactionScopeCache();
                
        return transactionCache.get(InventBlockingQualityOrderSync::cacheOwner(), _transactionScopeCacheKey, conNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates cache owner string.
    /// </summary>   
    /// <returns>
    /// A string value represents cache owner.
    /// </returns>
    [Hookable(false)]
    internal static str cacheOwner()
    {
        return classStr(InventBlockingQualityOrderSync);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionScopeCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the transaction scope cache key.
    /// </summary>
    /// <param name="_inventBlockingRecId">
    /// The record ID from <c>InventBlocking</c> buffer.
    /// </param>
    /// <returns>
    /// A string value contains the transaction scope cache key.
    /// </returns>
    [Hookable(false)]
    internal static str transactionScopeCacheKey(RecId _inventBlockingRecId)
    {
        return strFmt("%1#%2", int642Str(_inventBlockingRecId),
                int642str(InventUpdateOnhandGlobal::Instance().inventUpdateOnhand().ttsId()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>