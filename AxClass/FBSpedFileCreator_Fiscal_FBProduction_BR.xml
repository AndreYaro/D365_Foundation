<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBSpedFileCreator_Fiscal_FBProduction_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     This class has the responsability to manage all the generic production booked in a given period.
/// </summary>
public class FBSpedFileCreator_Fiscal_FBProduction_BR
{
    FBSpedFileItemTmp_BR spedFileItem;
    FiscalEstablishmentRecId_BR fiscalEstablishmentRecId;
    FBSpedItemIdGenerator_BR spedItemIdGenerator;
    FBSpedFileItemManufacturedTmp_BR spedFileManufacturedProduct;
    FBSpedFiscalBlockKWriter_BR spedFileBlockKWriter;
    FBSpedFileItemManufacturedInPeriodTmp_BR spedFileManufacturedProductInPeriod;
    FBBookingPeriodRecId_BR fbBookinPeriodRecId;

    private FBSPEDFiscalBlockK_BR blockK;
    private FBSPEDFiscalVersion_BR spedFiscalVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateSpedItemId</Name>
				<Source><![CDATA[
    private SpedItemId generateSpedItemId(FBProductionHeader_BR _productionHeader, BOMId _masterBOMId)
    {
        SpedItemId ret;

        if (!_productionHeader.shouldGenerateSpedItemId(_masterBOMId, spedFileItem.dataAreaId))
        {
            ret = _productionHeader.ItemId;
        }
        else
        {
            FBSpedFileItemManufacturedTmp_BR manufacturedProduct = FBSpedFileItemManufacturedTmp_BR::findProdId(spedFileManufacturedProduct, fiscalEstablishmentRecId, _productionHeader.ProductionId);

            ret = manufacturedProduct ?
               manufacturedProduct.SpedItemId :
               spedItemIdGenerator.createSpedItemId(_productionHeader.ItemId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMasterBOMIdFromFinishedGood</Name>
				<Source><![CDATA[
    private BOMId getMasterBOMIdFromFinishedGood(ItemId _fbProdTableViewFinishedGood, BOMId _bomIDRelatedProduction)
    {
        BOMId masterBOMId = FBSpedFileItemTmp_BR::getMasterBOMId(spedFileItem, fiscalEstablishmentRecId, _fbProdTableViewFinishedGood);

        return masterBOMId ? masterBOMId : _bomIDRelatedProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFBBookingPeriod</Name>
				<Source><![CDATA[
    public FBBookingPeriodRecId_BR parmFBBookingPeriod(FBBookingPeriodRecId_BR _fbBookinPeriodRecId = fbBookinPeriodRecId)
    {
        fbBookinPeriodRecId = _fbBookinPeriodRecId;

        return fbBookinPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFiscalEstablishmentRecId</Name>
				<Source><![CDATA[
    public FiscalEstablishmentRecId_BR parmFiscalEstablishmentRecId(FiscalEstablishmentRecId_BR _fiscalEstablishmentRecId = fiscalEstablishmentRecId)
    {
        fiscalEstablishmentRecId = _fiscalEstablishmentRecId;

        return fiscalEstablishmentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileBlockKWriter</Name>
				<Source><![CDATA[
    public FBSpedFiscalBlockKWriter_BR parmSpedFileBlockKWriter(FBSpedFiscalBlockKWriter_BR _spedFileBlockKWriter = spedFileBlockKWriter)
    {
        spedFileBlockKWriter = _spedFileBlockKWriter;

        return spedFileBlockKWriter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileItemManufacturedInPeriod</Name>
				<Source><![CDATA[
    public FBSpedFileItemManufacturedInPeriodTmp_BR parmSpedFileItemManufacturedInPeriod(FBSpedFileItemManufacturedInPeriodTmp_BR _spedFileManufacturedProductInPeriod = spedFileManufacturedProductInPeriod)
    {
        spedFileManufacturedProductInPeriod = _spedFileManufacturedProductInPeriod;

        return spedFileManufacturedProductInPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileItemTmp</Name>
				<Source><![CDATA[
    public FBSpedFileItemTmp_BR parmSpedFileItemTmp(FBSpedFileItemTmp_BR _spedFileItem = spedFileItem)
    {
        spedFileItem =_spedFileItem;

        return spedFileItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFileManufacturedProduct</Name>
				<Source><![CDATA[
    public FBSpedFileItemManufacturedTmp_BR parmSpedFileManufacturedProduct(FBSpedFileItemManufacturedTmp_BR _spedFileManufacturedProduct = spedFileManufacturedProduct)
    {
        spedFileManufacturedProduct = _spedFileManufacturedProduct;

        return spedFileManufacturedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedItemIdGenerator</Name>
				<Source><![CDATA[
    public FBSpedItemIdGenerator_BR parmSpedItemIdGenerator(FBSpedItemIdGenerator_BR _spedItemIdGenerator = spedItemIdGenerator)
    {
        spedItemIdGenerator = _spedItemIdGenerator;

        return spedItemIdGenerator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processProductionLine</Name>
				<Source><![CDATA[
    private void processProductionLine(FBProductionReportingPeriod_BR _productionReportingPeriod, ProdId _prodId)
    {
        if (spedFiscalVersion >= FBSPEDFiscalVersion_BR::v116 && blockK != FBSPEDFiscalBlockK_BR::Full)
        {
            return;
        }

        FBProductionLine_BR productionLine;
        FBBookingPeriodProduction_BR bookedProductionHeader;
        InventTable inventTable;

        while select sum(Qty) from productionLine
            group by TransDate, ItemId
                join InventProductType_BR from inventTable
                    group by InventProductType_BR
                    where inventTable.ItemId == productionLine.ItemId
                exists join bookedProductionHeader
                    where bookedProductionHeader.FBProductionHeader_BR == productionLine.FBProductionHeader_BR
                        && bookedProductionHeader.ProductionId == _prodId
        {
            if (!FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportConsumptionOfProductType(inventTable.InventProductType_BR))
            {
                warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFileCtreator_ItemValidation", productionLine.ItemId, _prodId, inventTable.InventProductType_BR));
                continue;
            }

            if (!FBSpedFileItemTmp_BR::existsForItemId(spedFileItem, fiscalEstablishmentRecId, productionLine.ItemId))
            {
                spedFileItem.insertUniqueFromSpedFiscalBlockK(fiscalEstablishmentRecId, productionLine.ItemId, '', '');
            }

            spedFileBlockKWriter.writeRecordK235(productionLine.TransDate, productionLine.ItemId, productionLine.Qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventProductTypeValid</Name>
				<Source><![CDATA[
    private boolean isInventProductTypeValid(InventProductTypeId_BR _inventProductType, ItemId _ItemId, Num _prodId)
    {
        boolean ret;

        if (conFind(['00','01','02','03','04','05','10'], _inventProductType))
        {
            ret = true;
        }
        else
        {
            warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFileCtreator_BomItemValidation", _ItemId, _prodId, _inventProductType));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecord0210BasedOnProduction</Name>
				<Source><![CDATA[
    public final void processRecord0210BasedOnProduction(SpedItemId _spedItemId)
    {
        FBProductionBOMLine_BR productionBOMLines;
        InventTable inventTable;

        while select ProdId, TotalScheduledQty, CountOfProdId from spedFileManufacturedProduct
            where spedFileManufacturedProduct.SpedItemId == _spedItemId
            join ItemId, Qty, ProductionId, VariableScrap, ConstantScrap from productionBOMLines
                order by productionBOMLines.ItemId
                where productionBOMLines.ProductionId == spedFileManufacturedProduct.ProdId
            join InventProductType_BR from inventTable
                where inventTable.ItemId == productionBOMLines.ItemId &&
                      inventTable.Phantom == NoYes::No
        {
            if (!this.isInventProductTypeValid(inventTable.InventProductType_BR, productionBOMLines.ItemId, productionBOMLines.ProductionId))
            {
                continue;
            }

            spedFileBlockKWriter.writeRecord0210(
                productionBOMLines.ItemId,
                productionBOMLines.Qty,
                productionBOMLines.calculateTotalScrapInPorcentage(spedFileManufacturedProduct.CountOfProdId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecordK230AndK235</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Process all productions given reporting period.
    /// </summary>
    /// <param name="_productionReportingPeriod">
    ///     The production reporting period.
    /// </param>
    public void processRecordK230AndK235(FBProductionReportingPeriod_BR _productionReportingPeriod)
    {
        FBBookingPeriodProduction_BR bookingPeriodProduction;
        FBProductionHeader_BR fbProductionHeader;
        InventTable inventTable;

        Debug::assert(_productionReportingPeriod.RecId != 0);

        while select sum(Qty) from fbProductionHeader
            group by ProductionId, ItemId, BOMId, BOMDataArea, StartDate, EndDate
            join InventProductType_BR from inventTable
                group by InventProductType_BR
                where InventTable.ItemId == fbProductionHeader.ItemId
            exists join bookingPeriodProduction
                where bookingPeriodProduction.FBProductionHeader_BR == fbProductionHeader.RecId
                    && bookingPeriodProduction.FBProductionReportingPeriod_BR == _productionReportingPeriod.RecId
        {
            if (!FBSpedFileCreator_Fiscal_ProdTable_BR::shouldReportProductionOfProductType(inventTable.InventProductType_BR))
            {
                warning(strFmt("@FiscalBooks_SpedFiscal:FBSpedFileCtreator_ProductionValidation", fbProductionHeader.ProductionId, fbProductionHeader.ItemId, inventTable.InventProductType_BR));
                continue;
            }

            BomId masterBOMId = this.getMasterBOMIdFromFinishedGood(fbProductionHeader.ItemId, fbProductionHeader.BOMId);

            SpedItemId spedItemId = this.generateSpedItemId(fbProductionHeader, masterBOMId);

            // 0200
            spedFileItem.insertUniqueFromSpedFiscalBlockK(fiscalEstablishmentRecId, fbProductionHeader.ItemId, spedItemId, masterBOMId);

            // createRelationWithRecord0210
            spedFileManufacturedProduct.insertUniqueSpedFileItemManufacturedTmp(
                fiscalEstablishmentRecId,
                fbProductionHeader.ProductionId,
                fbProductionHeader.ItemId,
                fbProductionHeader.Qty,
                spedItemId);

            // K220
            if (fbProductionHeader.ItemId != spedItemId)
            {
                spedFileManufacturedProductInPeriod.insertUnique(
                    fiscalEstablishmentRecId,
                    spedItemId,
                    spedFileBlockKWriter.parmTaxAssessmentToDate(),
                    fbProductionHeader.Qty);
            }

            if (fbProductionHeader.StartDate != dateNull()
               && fbProductionHeader.ProductionId
               && spedItemId)
            {
                spedFileBlockKWriter.writeRecordK230(
                    fbProductionHeader.StartDate,
                    fbProductionHeader.EndDate,
                    fbProductionHeader.ProductionId,
                    spedItemId,
                    fbProductionHeader.Qty);

                this.processProductionLine(_productionReportingPeriod, fbProductionHeader.ProductionId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static FBSpedFileCreator_Fiscal_FBProduction_BR construct(
        FBSpedFileItemTmp_BR _spedFileItem,
        FBSpedFileItemManufacturedTmp_BR _spedFileManufacturedProduct,
        FBSpedFileItemManufacturedInPeriodTmp_BR _spedFileManufacturedProductInPeriod,
        FBBookingPeriod_BR _fbBookingPeriod,
        FBSpedFiscalBlockKWriter_BR  _spedFileCreatorFiscalBlockK)
    {
        FBSpedFileCreator_Fiscal_FBProduction_BR spedFileCreatorFiscalBlockK = new FBSpedFileCreator_Fiscal_FBProduction_BR();

        spedFileCreatorFiscalBlockK.parmSpedFileBlockKWriter(_spedFileCreatorFiscalBlockK);

        spedFileCreatorFiscalBlockK.parmSpedFileItemTmp(_spedFileItem);
        spedFileCreatorFiscalBlockK.parmSpedFileManufacturedProduct(_spedFileManufacturedProduct);
        spedFileCreatorFiscalBlockK.parmSpedFileItemManufacturedInPeriod(_spedFileManufacturedProductInPeriod);
        spedFileCreatorFiscalBlockK.parmFBBookingPeriod(_fbBookingPeriod.RecId);
        spedFileCreatorFiscalBlockK.parmFiscalEstablishmentRecId(_fbBookingPeriod.fiscalEstablishment().RecId);
        spedFileCreatorFiscalBlockK.parmSpedItemIdGenerator(FBSpedItemIdGenerator_BR::construct());

        return spedFileCreatorFiscalBlockK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockK</Name>
				<Source><![CDATA[
    internal FBSPEDFiscalBlockK_BR parmBlockK(FBSPEDFiscalBlockK_BR _blockK = blockK)
    {
        blockK = _blockK;
        return blockK;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSpedFiscalVersion</Name>
				<Source><![CDATA[
    internal FBSPEDFiscalVersion_BR parmSpedFiscalVersion(FBSPEDFiscalVersion_BR _spedFiscalVersion = spedFiscalVersion)
    {
        spedFiscalVersion = _spedFiscalVersion;
        return spedFiscalVersion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>