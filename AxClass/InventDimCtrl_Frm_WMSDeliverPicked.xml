<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimCtrl_Frm_WMSDeliverPicked</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimCtrl_Frm_WMSDeliverPicked extends InventDimCtrl_Frm
{
    FormControl         ctrlGridItemId;
    FormControl         ctrlGridItemName;

    List                wmsPickingRouteIdList;
    WMSPickingRouteID   wmsPickingRouteID;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formSetControlsRightClick</Name>
				<Source><![CDATA[
    public void formSetControlsRightClick(
        boolean     _lockForm,
        boolean     _resizeGrid = false,
        Args        _args = null)
    {
        super(_lockForm, _resizeGrid, _args);
        callingElement.formObject().rightClickModifyQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmLockedRightClick</Name>
				<Source><![CDATA[
    protected InventDimParm initDimParmLockedRightClick()
    {
        dimParmLockedRightClick.clear();

        dimParmLockedRightClick.initSiteDimAllGrp();

        dimParmLockedRightClick.InventLocationIdFlag = NoYes::Yes;
        dimParmLockedRightClick.wmsLocationIdFlag    = NoYes::Yes;

        return dimParmLockedRightClick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimParmVisibleGrid</Name>
				<Source><![CDATA[
    protected InventDimParm initDimParmVisibleGrid()
    {
        InventDimParm inventDimParm     = super();

        inventDimParm.initProductDimensionsAllGroups();
        inventDimParm.initSiteDimAllGrp();

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryWMSOrderTrans</Name>
				<Source><![CDATA[
    public void initQueryWMSOrderTrans(FormDataSource _wmsOrderTrans_DS)
    {
        QueryBuildDataSource qbds = _wmsOrderTrans_DS.query().dataSourceName(_wmsOrderTrans_DS.name());

        if (wmsPickingRouteIdList)
        {
            SysQuery::findOrCreateRange(qbds, fieldnum(WMSOrderTrans,RouteId)).value(this.list2Range(wmsPickingRouteIdList));
        }
        else
        {
            SysQuery::findOrCreateRange(qbds, fieldnum(WMSOrderTrans,RouteId)).value(queryValue(wmsPickingRouteID));
        }

        SysQuery::findOrCreateRange(qbds, fieldnum(WMSOrderTrans,ExpeditionStatus)).value(enum2Value(WMSExpeditionStatus::Picked));

        qbds.addSortField(fieldnum(WMSOrderTrans,RouteId));
        qbds.orderMode(OrderMode::GroupBy);

        QueryBuildFieldList qbfl = qbds.fields();
        qbfl.addField(fieldnum(WMSOrderTrans,Qty),SelectionField::Sum);

        if (#PdsCatchWeightEnabled)
        {
            qbfl.addField(fieldNum(WMSOrderTrans, PdsCWQty), SelectionField::Sum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryWMSOrderTransSum</Name>
				<Source><![CDATA[
    public void initQueryWMSOrderTransSum(FormDataSource _wmsOrderTrans_DS)
    {
        QueryBuildDataSource qbds = _wmsOrderTrans_DS.query().dataSourceName(_wmsOrderTrans_DS.name());

        if (wmsPickingRouteIdList)
        {
            SysQuery::findOrCreateRange(qbds, fieldnum(WMSOrderTrans,RouteId)).value(this.list2Range(wmsPickingRouteIdList));
        }
        else
        {
            SysQuery::findOrCreateRange(qbds, fieldnum(WMSOrderTrans,RouteId)).value(queryValue(wmsPickingRouteID));
        }

        SysQuery::findOrCreateRange(qbds, fieldnum(WMSOrderTrans,ExpeditionStatus)).value(enum2Value(WMSExpeditionStatus::Picked));

        qbds.addSortField(fieldnum(WMSOrderTrans,RouteId));
        qbds.orderMode(OrderMode::GroupBy);

        QueryBuildFieldList qbfl = qbds.fields();
        qbfl.addField(fieldnum(WMSOrderTrans,Qty),SelectionField::Sum);

        if (#PdsCatchWeightEnabled)
        {
            qbfl.addField(fieldNum(WMSOrderTrans, PdsCWQty), SelectionField::Sum);
        }

        qbfl.addField(fieldnum(WMSOrderTrans,RecId),SelectionField::Count);
    }

]]></Source>
			</Method>
			<Method>
				<Name>list2Range</Name>
				<Source><![CDATA[
    protected Range list2Range(List _list)
    {
        Range           range;
        DictType        rangeDictType       = new DictType(extendedTypeNum(Range));
        ListEnumerator  le                  = _list.getEnumerator();

        while (le.moveNext())
        {
            WMSPickingRoute wmsPickingRoute = WMSPickingRoute::find(le.current(),true);

            if ((strLen(range) + strLen(wmsPickingRoute.PickingRouteID)) > rangeDictType.stringLen())
            {
                throw error("@SYS117838");
            }
            range = queryRangeConcat(range,wmsPickingRoute.PickingRouteID);
        }
        return range;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    public void modifyQuery(
        FormDataSource  _wmsOrderTrans_DS,
        FormDataSource  _inventDim_DS)
    {
        QueryBuildDataSource qbsOrderTrans = _inventDim_DS.query().dataSourceName(_wmsOrderTrans_DS.name());

        qbsOrderTrans.sortClear();

        if (dimParmVisibleGrid.ItemIdFlag)
        {
            qbsOrderTrans.addSortField(fieldNum(WMSOrderTrans, ItemId));
        }

        qbsOrderTrans.addSortField(fieldNum(WMSOrderTrans, RouteId));
        qbsOrderTrans.orderMode(OrderMode::GroupBy);

        QueryBuildDataSource qbsDim = _inventDim_DS.query().dataSourceName(_inventDim_DS.name());

        qbsDim.sortClear();

        dimParmLockedRightClick.queryAddSortField(qbsDim);
        if (!dimParmVisibleGrid.queryAddSortField(qbsDim))
        {
            qbsDim.addSortField(fieldNum(InventDim, TableId));
            qbsDim.orderMode(OrderMode::GroupBy);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustShowGridField</Name>
				<Source><![CDATA[
    protected NoYes mustShowGridField(FieldId _dimFieldId)
    {
        switch (_dimFieldId)
        {
            case fieldNum(InventDim,InventLocationId):
                return NoYes::Yes;
            case fieldNum(InventDim, wmsLocationId):
                return NoYes::Yes;
            case fieldNum(InventDim, wmsPalletId):
                return NoYes::Yes;
            default:
                return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickingRouteId</Name>
				<Source><![CDATA[
    public WMSPickingRouteID parmPickingRouteId(WMSPickingRouteID _wmsPickingRouteID = wmsPickingRouteID)
    {
        wmsPickingRouteID = _wmsPickingRouteID;
        return wmsPickingRouteID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickingRouteIdList</Name>
				<Source><![CDATA[
    public List parmPickingRouteIdList(List _wmsPickingRouteIdList = wmsPickingRouteIdList)
    {
        wmsPickingRouteIdList = _wmsPickingRouteIdList;
        return wmsPickingRouteIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCtrlItemId</Name>
				<Source><![CDATA[
    public void setCtrlItemId(FormControl _ctrlGridItemId)
    {
        ctrlGridItemId = _ctrlGridItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCtrlItemName</Name>
				<Source><![CDATA[
    public void setCtrlItemName(FormControl _ctrlGridItemName)
    {
        ctrlGridItemName = _ctrlGridItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the controls in the user interface, such as a form or report, by using the current
    /// parameter values.
    /// </summary>
    /// <remarks>
    /// This method hides or shows controls. It is also responsible for enabling and disabling controls.
    /// </remarks>
    public void updateControls()
    {
        super();

        if (ctrlGridItemId)
        {
            ctrlGridItemId.visible(dimParmVisibleGrid.ItemIdFlag);
        }

        if (ctrlGridItemName)
        {
            ctrlGridItemName.visible(dimParmVisibleGrid.ItemIdFlag);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimCtrl_Frm_WMSDeliverPicked construct()
    {
        return new InventDimCtrl_Frm_WMSDeliverPicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes an instance of this class that must be used in forms.
    /// </summary>
    /// <param name="_formRun">
    ///    The form where controls are maintained.
    /// </param>
    /// <returns>
    ///    An instance of this class that must be used in a form.
    /// </returns>
    public static InventDimCtrl_Frm_WMSDeliverPicked newFromForm(FormRun _formRun)
    {
        InventDimCtrl_Frm_WMSDeliverPicked    inventDimCtrl = InventDimCtrl_Frm_WMSDeliverPicked::construct();
        InventDimAxFormAdapter adapter = InventDimAxFormAdapter::newFromForm(_formRun);

        inventDimCtrl.parmCallingElement(adapter);
        inventDimCtrl.init();
        return inventDimCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
