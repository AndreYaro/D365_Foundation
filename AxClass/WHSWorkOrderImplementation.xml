<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkOrderImplementation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkOrderImplementation</c> class provides an abstraction for <c>WHSWorkTable</c> records.
/// </summary>
[WHSWorkOrderInterfaceFactoryAttribute(tableStr(WHSWorkTable))]
public final class WHSWorkOrderImplementation extends WHSWorkOrderInterface
{
    private WHSWorkTable work;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Common buffer()
    {
        return work as Common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkId parmWorkId(WHSWorkId _workId = '')
    {
        if (!prmIsDefault(_workId))
        {
            work.WorkId = _workId;
        }

        return work.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkBuildId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkBuildId parmWorkBuildId(WHSWorkBuildId _workBuildId = '')
    {
        if (!prmIsDefault(_workBuildId))
        {
            work.WorkBuildId = _workBuildId;
        }

        return work.WorkBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTargetLicensePlateId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLicensePlateId parmTargetLicensePlateId(WHSLicensePlateId _targetLicensePlateId = '')
    {
        if (!prmIsDefault(_targetLicensePlateId))
        {
            work.TargetLicensePlateId = _targetLicensePlateId;
        }

        return work.TargetLicensePlateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventSiteId parmInventSiteId(InventSiteId _inventSiteId = '')
    {
        if (!prmIsDefault(_inventSiteId))
        {
            work.InventSiteId = _inventSiteId;
        }

        return work.InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityOrderId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventQualityOrderId parmInventQualityOrderId(InventQualityOrderId _inventQualityOrderId = '')
    {
        if (!prmIsDefault(_inventQualityOrderId))
        {
            work.InventQualityOrderId = _inventQualityOrderId;
        }

        return work.InventQualityOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventLocationId parmInventLocationId(InventLocationId _inventLocationId = '')
    {
        if (!prmIsDefault(_inventLocationId))
        {
            work.InventLocationId = _inventLocationId;
        }

        return work.InventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTransType</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkTransType parmWorkTransType(WHSWorkTransType _workTransType = WHSWorkTransType::None)
    {
        if (!prmIsDefault(_workTransType))
        {
            work.WorkTransType = _workTransType;
        }
        
        return work.WorkTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaveId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWaveId parmWaveId(WHSWaveId _waveId = '')
    {
        if (!prmIsDefault(_waveId))
        {
            work.WaveId = _waveId;
        }

        return work.WaveId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSShipmentId parmShipmentId(WHSShipmentId _shipmentId = '')
    {
        if (!prmIsDefault(_shipmentId))
        {
            work.shipmentId = _shipmentId;
        }

        return work.shipmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadId parmLoadId(WHSLoadId _loadId = '')
    {
        if (!prmIsDefault(_loadId))
        {
            work.LoadId = _loadId;
        }

        return work.LoadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderNum</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSOrderNum parmOrderNum(WHSOrderNum _orderNum = '')
    {
        if (!prmIsDefault(_orderNum))
        {
            work.OrderNum = _orderNum;
        }

        return work.OrderNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignNewWorkId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a new work id on the underlying record.
    /// </summary>
    [Hookable(false)]
    internal void assignNewWorkId()
    {
        work.setWorkId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImmediateReplenishmentUnitId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UnitOfMeasureSymbol parmImmediateReplenishmentUnitId(UnitOfMeasureSymbol _immediateReplenishmentUnitId = '')
    {
        if (!prmIsDefault(_immediateReplenishmentUnitId))
        {
            work.ImmediateReplenishmentUnitId = _immediateReplenishmentUnitId;
        }

        return work.ImmediateReplenishmentUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSContainerId parmContainerId(WHSContainerId _containerId = '')
    {
        
        if (!prmIsDefault(_containerId))
        {
            work.ContainerId = _containerId;
        }

        return work.ContainerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseWorkForWaveReplen</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSUseWorkForWaveReplen parmUseWorkForWaveReplen(WHSUseWorkForWaveReplen _useWorkForWaveReplen = NoYes::No)
    {
        
        if (!prmIsDefault(_useWorkForWaveReplen))
        {
            work.UseWorkForWaveReplen = _useWorkForWaveReplen;
        }
         
        return work.UseWorkForWaveReplen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCancelReplenWhenDemandCanceled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSCancelReplenWhenDemandCanceled parmCancelReplenWhenDemandCanceled(WHSCancelReplenWhenDemandCanceled _cancelReplenWhenDemandCanceled = NoYes::No)
    {
        if (!prmIsDefault(_cancelReplenWhenDemandCanceled))
        {
            work.CancelReplenWhenDemandCanceled = _cancelReplenWhenDemandCanceled;
        }
         
        return work.CancelReplenWhenDemandCanceled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransTxt</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal TransTxt parmTransTxt(TransTxt _transTxt = '')
    {
        if (!prmIsDefault(_transTxt))
        {
            work.TransTxt = _transTxt;
        }
         
        return work.TransTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialized the class based on the buffer.
    /// </summary>
    /// <param name = "_buffer">A record buffer.</param>
    [Hookable(false)]
    public void initializeFromBuffer(Common _buffer)
    {
        work = _buffer as WHSWorkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWorkTableFromTmpWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initalizes the underlying buffer based on the provided <c>WHSTmpWorkLine</c>.
    /// </summary>
    /// <param name = "_tmpWorkLine">The <c>WHSTmpWorkLine</c> to be used for the initialization.</param>
    protected internal void initializeWorkTableFromTmpWorkLine(WHSTmpWorkLine _tmpWorkLine)
    {
        //this method is added as an extension request, it has to be executed as part of initializeFromTmpWorkLine(WHSTmpWorkLine _tmpWorkLine)
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromTmpWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initializeFromTmpWorkLine(WHSTmpWorkLine _tmpWorkLine)
    {
        this.initializeCommonFromTmpWorkLine(_tmpWorkLine);

        this.initializeWorkTableFromTmpWorkLine(_tmpWorkLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Common findRecord(WHSWorkId _workId, boolean _forUpdate = false)
    {
        return WHSWorkTable::find(_workId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a record of the correct type.
    /// </summary>
    /// <param name = "_workId">The work Id.</param>
    /// <returns>A record of the correct type.</returns>
    [Hookable(false)]
    internal boolean exist(WHSWorkId _workId)
    {
        return WHSWorkTable::exist(_workId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreatedBy</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal UserId parmWorkCreatedBy(UserId _workCreatedBy = '')
    {
        if (!prmIsDefault(_workCreatedBy))
        {
            work.WorkCreatedBy = _workCreatedBy;
        }
         
        return work.WorkCreatedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDispositionCode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSDispositionCode parmDispositionCode(WHSDispositionCode _dispositionCode = '')
    {
        if (!prmIsDefault(_dispositionCode))
        {
            work.DispositionCode = _dispositionCode;
        }
         
        return work.DispositionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWorkTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the underlying record using the <c>WHSWorkTemplateTable</c> provided.
    /// </summary>
    /// <param name = "_workTemplateTable">The <c>WHSWorkTemplateTable</c> to be used for the initialization.</param>
    [Hookable(false)]
    internal void initializeFromWorkTemplate(WHSWorkTemplateTable  _workTemplateTable)
    {
        work.AutoExecute                                = _workTemplateTable.AutoExecute;
        work.WorkPriority                               = _workTemplateTable.DefaultWorkPriority;
        work.WorkTemplateCode                           = _workTemplateTable.WorkTemplateCode;
        work.WorkPoolId                                 = _workTemplateTable.WorkPoolId;
        work.ReplenishmentDependentWorkBlockingPolicy   = _workTemplateTable.ReplenishmentDependentWorkBlockingPolicy;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the specified work.
    /// </summary>
    /// <param name = "_workId">The work id to delete.</param>
    [Hookable(false)]
    internal void deleteWork(WHSWorkId _workId)
    {
        WHSWorkTable deleteWorkTable;

        delete_from deleteWorkTable
            where deleteWorkTable.WorkId == _workId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSingleWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a single work line and cleans up the remaining work lines.
    /// </summary>
    /// <param name = "_workId">The work id of the work line to delete.</param>
    /// <param name = "_inventTransId">The invent trans id of the work line to delete.</param>
    [Hookable(false)]
    internal WHSWorkOrderLineInterface deleteSingleWorkLine(WHSWorkId _workId, InventTransId _inventTransId)
    {
        WHSWorkLine workLine;

        // Delete a single line of the Work.
        select firstonly forupdate workLine
                where workLine.WorkId == _workId
                    && workLine.InventTransId == _inventTransId;

        WHSWorkTable::deleteWorkLineAndCleanupRemainingLines(workLine);

        return WHSWorkOrderLineInterface::createInstanceFromBuffer(workLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the specified work, and ensures the correct state.
    /// </summary>
    /// <param name = "_workId">
    /// The Work ID to cancel.
    /// </param>
    /// <param name = "_throwError">
    /// true if the method should throw an error on failure, otherwise, false.
    /// </param>
    /// <param name = "_allowCancelClosed">
    /// true if cancelling of closed work is allowed, otherwise, false.
    /// </param>
    /// <param name = "_cancelReplenishmentWorkWithDependentWork">
    /// Should the replenishment work that has dependent work be canceled? Optional.
    /// </param>
    /// <param name = "_cancellingProductReceipt">
    /// true if product receipt is being cancelled, otherwise, false.
    /// </param>
    /// <param name = "_decrementLoadLineWorkCreatedQty">
    /// true if load lines work created quantity is being decremented, otherwise, false.
    /// </param>
    /// <returns>
    /// true, if the work was cancelled successfully; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal void cancelWork(
        WHSWorkId    _workId,
        boolean      _throwError = true,
        boolean      _allowCancelClosed = false,
        UnknownNoYes _cancelReplenishmentWorkWithDependentWork = UnknownNoYes::Unknown,
        boolean      _cancellingProductReceipt = false,
        boolean      _decrementLoadLineWorkCreatedQty = true)
    {
        WHSWorkTable::cancelWork(_workId, _throwError, _allowCancelClosed, _cancelReplenishmentWorkWithDependentWork, _cancellingProductReceipt, _decrementLoadLineWorkCreatedQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workOrderLineInterface</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal  WHSWorkOrderLineInterface workOrderLineInterface()
    {
        return WHSWorkOrderLineInterface::createInstanceFromTableName(tableStr(WHSWorkLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineLoadLineDetailsEnumerator</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkLineLoadLineDetailsEnumerator getWorkLineLoadLineDetailsEnumerator(WHSWorkId _workId)
    {
        return WHSWorkLineLoadLineDetailsEnumerator::newFromWorkId(_workId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>decrementWorkCreatedQty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true), Replaceable(true)]
    internal void decrementWorkCreatedQty(RecId _loadLineRecId, InventQty _workCreatedQtyDecrement, WHSWaveId _waveId)
    {
        WHSLoadLine::decrementWorkCreatedQty(_loadLineRecId, _workCreatedQtyDecrement, _waveId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>