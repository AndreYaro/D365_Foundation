<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSettlementTreeNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class InventSettlementTreeNode
{
    Common          nodeRecord;

    str             financialDim;       // is set in order to save a server call
    ItemName        itemName;           // is set in order to save a server call

    Description     nodeDescription;    //alternative description if nodeRecord isn't an inventTrans

    InventQty       qtySettled;
    CostAmount      valueSettled;
    boolean         hasChildren;

    boolean         circularity;
    boolean         expanded;
    TreeItemIdx     nodeIdx;
    TreeItemIdx     parentNodeIdx;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        nodeRecord,
        financialDim,
        itemName,
        nodeDescription,
        qtySettled,
        valueSettled,
        hasChildren
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCircularity</Name>
				<Source><![CDATA[
    public boolean parmCircularity(boolean _circularity = circularity)
    {
        circularity = _circularity;

        return circularity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpanded</Name>
				<Source><![CDATA[
    public boolean parmExpanded(boolean _expanded = expanded)
    {
        expanded = _expanded;

        return expanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinancialDim</Name>
				<Source><![CDATA[
    public str parmFinancialDim(str _financialDim = financialDim)
    {
        financialDim = _financialDim;

        return financialDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasChildren</Name>
				<Source><![CDATA[
    public boolean parmHasChildren(boolean _hasChildren = hasChildren)
    {
        hasChildren = _hasChildren;

        return hasChildren;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemName</Name>
				<Source><![CDATA[
    public ItemName parmItemName(ItemName _itemName = itemName)
    {
        itemName = _itemName;

        return itemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeDescription</Name>
				<Source><![CDATA[
    public Description parmNodeDescription(Description _nodeDescription = nodeDescription)
    {
        nodeDescription = _nodeDescription;

        return nodeDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeIdx</Name>
				<Source><![CDATA[
    public TreeItemIdx parmNodeIdx(TreeItemIdx _nodeIdx = nodeIdx)
    {
        nodeIdx = _nodeIdx;

        return nodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeRecord</Name>
				<Source><![CDATA[
    public Common parmNodeRecord(Common _nodeRecord = nodeRecord)
    {
        nodeRecord = _nodeRecord;

        return nodeRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentNodeIdx</Name>
				<Source><![CDATA[
    public TreeItemIdx parmParentNodeIdx(TreeItemIdx _parentNodeIdx = parentNodeIdx)
    {
        parentNodeIdx = _parentNodeIdx;

        return parentNodeIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQtySettled</Name>
				<Source><![CDATA[
    public InventQty parmQtySettled(InventQty _qtySettled = qtySettled)
    {
        qtySettled = _qtySettled;

        return qtySettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValueSettled</Name>
				<Source><![CDATA[
    public CostAmount parmValueSettled(CostAmount _valueSettled = valueSettled)
    {
        valueSettled = _valueSettled;

        return valueSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version     = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventSettlementTreeNode construct()
    {
        return new InventSettlementTreeNode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static InventSettlementTreeNode create(container _packedTreeNode)
    {
        InventSettlementTreeNode inventSettlementTreeNode = InventSettlementTreeNode::construct();
        inventSettlementTreeNode.unpack(_packedTreeNode);

        return inventSettlementTreeNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventTrans</Name>
				<Source><![CDATA[
    public static InventSettlementTreeNode newInventTrans(
        InventTrans     _inventTrans,
        InventQty       _qtySettled,
        CostAmount      _valueSettled,
        UnknownNoYes    _hasChildren)
    {
        InventSettlementTreeNode    inventSettlementTreeNode = InventSettlementTreeNode::construct();
        InventDim                   inventDimFinancial;
        InventTransOrigin           inventTransOrigin = _inventTrans.inventTransOrigin();

        inventSettlementTreeNode.parmNodeRecord(_inventTrans.data());

        inventDimFinancial.copyDimFinancial(InventDimGroupSetup::newItemId(_inventTrans.ItemId), _inventTrans.inventDim());
        inventSettlementTreeNode.parmFinancialDim(inventDimFinancial.preFixValue());

        inventSettlementTreeNode.parmItemName(_inventTrans.itemName());
        inventSettlementTreeNode.parmQtySettled(_qtySettled);
        inventSettlementTreeNode.parmValueSettled(_valueSettled);

        switch (_hasChildren)
        {
            case UnknownNoYes::Unknown:

                if (_inventTrans.Qty > 0)
                {
                    if (inventTransOrigin.isTransfer() ||
                        inventTransOrigin.ReferenceCategory == InventTransType::Production ||
                        inventTransOrigin.ReferenceCategory == InventTransType::BOMMain)
                    {
                        inventSettlementTreeNode.parmHasChildren(true);
                    }
                    else
                    {
                        if (CurrencyExchangeHelper::amount(_inventTrans.CostAmountPosted * abs(_qtySettled) / abs(_inventTrans.Qty) - _valueSettled) != 0)
                        {
                            inventSettlementTreeNode.parmHasChildren(true);
                        }
                        else
                        {
                            inventSettlementTreeNode.parmHasChildren(false);
                        }
                    }
                }
                break;

            case UnknownNoYes::No:
                inventSettlementTreeNode.parmHasChildren(false);
                break;

            case UnknownNoYes::Yes:
                inventSettlementTreeNode.parmHasChildren(true);
                break;
        }

        return inventSettlementTreeNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    public static InventSettlementTreeNode newParameters(
        Common          _nodeRecord,
        str             _nodeDescription,
        InventQty       _qtySettled,
        CostAmount      _valueSettled,
        boolean         _hasChildren)
    {
        InventSettlementTreeNode    inventSettlementTreeNode = InventSettlementTreeNode::construct();

        inventSettlementTreeNode.parmNodeRecord(_nodeRecord.data());
        inventSettlementTreeNode.parmNodeDescription(_nodeDescription);
        inventSettlementTreeNode.parmQtySettled(_qtySettled);
        inventSettlementTreeNode.parmValueSettled(_valueSettled);
        inventSettlementTreeNode.parmHasChildren(_hasChildren);

        return inventSettlementTreeNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
