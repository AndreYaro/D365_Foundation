<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayListWork</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to display a work list and process a work further.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::WorkList)]
public class WHSWorkExecuteDisplayListWork extends WHSWorkExecuteDisplay
{
    #WHSRF
    private const str WorkListBack   = 'RFWorkListBack';
    private const int ListWork       = 0;
    private const int ProcessWork    = 1;
    private const int ListMenuItems  = 2;
    private const int FilterWorklist = 3;

    WHSMobileDisplaySortManager                 sortManager;
    [SysObsolete('PageManager is no longer used. Avoid paging in the mobile application.', false, 30\5\2022)]
    WHSMobileDisplayPageManager                 pageManager;
    WHSWorkUserMobileDisplayMenuItemValidator   menuItemValidator;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetFieldName</Name>
				<Source><![CDATA[
    /// <summary>Adds controls to form state for scanning work list grouping field value.</summary>
    /// <param name="_con">Container containing the form state before the controls are added.</param>
    /// <param name="_extraText">Label if it should display something other than the default label.</param>
    /// <returns>Container holding the form state after the controls are added.</returns>
    protected container buildGetFieldName(container _con, str _extraText = '')
    {
        container ret = this.buildGetFieldNameScanFieldOK(_con, _extraText);

        ret += [this.buildControl(#RFButton, #RFBack, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildErrorPage</Name>
				<Source><![CDATA[
    private container buildErrorPage()
    {
        container ret = conNull();

        ret += [this.buildControl(#rflabel, #RFError, "@WAX:NoMenuItemsFoundForWorkId", 0, '', #whsrfundefineddatatype, '', 0)];
        ret += [this.buildControl(#RFButton, WorkListBack, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 1)];
        step = ListWork;
        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGroupFieldValue</Name>
				<Source><![CDATA[
    private str findGroupFieldValue(
        container   _con,
        str         _buttonClicked)
    {
        str ret;

		// If a group field value has been entered get it from the container.
        if (_buttonClicked == #RFOK)
        {
            ret = conPeek(conPeek(_con, 4), #data);
        }
        // If work has been completed or canceled use override or find the group field value from the previous work.
        else if ((_buttonClicked == ''
               || _buttonClicked == #RFCancel)
               && pass.exists(#PrevWorkId))
        {
            // User override value if it exists. Otherwise, try to use previous work.
            if (pass.exists(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue))
            {
                ret = pass.lookupStr(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue);
            }
            else
            {
                ret = WHSWorkTable::find(pass.lookup(#PrevWorkId)).(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupFieldNum);
            }
        }
        else if (_buttonClicked == #RFCancel)
        {
            ret = pass.lookupStr(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGroupFieldValue</Name>
				<Source><![CDATA[
    private container validateGroupFieldValue(
        container           _con,
        str                 _buttonClicked,
        WHSRFMenuItemTable  _menuItemTable)
    {
        container ret;

		// If there is no group field value prompt.
        if (pass.lookupStr(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue) == '')
        {
			// If this is from prompt, show error.
            if (_buttonClicked == #RFOK)
            {
                ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
            }
            // If this is from work completion, show work complete.
            else if (_buttonClicked == '')
            {
                ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
            }

            ret = this.buildGetFieldName(ret, '');
        }
		// If there is a group field value get the work list.
        else 
        {
            ret = this.getListWorkStep(_con, _buttonClicked, _menuItemTable);
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListWorkStepGroupingFilter</Name>
				<Source><![CDATA[
    private container getListWorkStepGroupingFilter(
        container           _con,
        str                 _buttonClicked,
        WHSRFMenuItemTable  _menuItemTable)
    {
        container ret;
        container con = _con;

        if (this.hasError(con))
        {
            con = conDel(con, 3, 1);
        }
        
        switch (_buttonClicked)
        {
			// If called from prompt, cancel, or work complete validate group field value. 
            case #RFOK :
            case #RFCancel :
            case '' :
                pass.insert(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue, this.findGroupFieldValue(con, _buttonClicked));
                ret = this.validateGroupFieldValue(con, _buttonClicked, _menuItemTable);
                break;
            default :
                ret = this.getListWorkStep(con, _buttonClicked, _menuItemTable);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getListWorkStep</Name>
				<Source><![CDATA[
    private container getListWorkStep(
        container           _con,
        str                 _buttonClicked,
        WHSRFMenuItemTable  _menuItemTable)
    {
        container ret = this.buildWorkListHeader(_con, _buttonClicked, _menuItemTable);
        ret           = this.buildTableContents(ret, _menuItemTable);
        ret           = this.buildPagingControls(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkListHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the work list header controls.
    /// </summary>
    /// <param name = "_con">Elements for work list display screens.</param>
    /// <param name = "_buttonClicked">Identifier of clicked button.</param>
    /// <param name = "_menuItemTable">A menu item record</param>
    /// <returns>Container of elements for work list display.</returns>
    protected container buildWorkListHeader(
        container           _con,
        str                 _buttonClicked,
        WHSRFMenuItemTable  _menuItemTable)
    {
        container ret = conNull();

        if (_menuItemTable.ShowFilter)
        {
            if (_buttonClicked == #RFApplyFilter)
            {
                pass.insert(#Filter, conPeek(conPeek(_con, #ControlsStart + 1), #IndexOfDataInBuildControl));
            }

            ret += [this.buildControl(#RFLabel, '', "@WAX:FilterWork", 1, '', #WHSRFUndefinedDatatype, '', 0)];
            ret += [this.buildControl(#RFCombobox,  #RFFilter, '', 0, this.getFilterList(), #WHSRFUndefinedDatatype, '', 0, true, pass.lookupStr(#Filter))];
            ret += [this.buildControl(#RFButton, #RFApplyFilter, "@SYS122037", 0, '', #WHSRFUndefinedDatatype, '', 0)];
        }

        //build header
        ret += [this.buildControl(#RFLabel,  #WorkList, "@WAX:WorkListMobileDevice", 1, '', #WHSRFUndefinedDatatype, '', 0)];

        int length = conLen(_menuItemTable.WorkListFieldList);

        for (int i = 1; i <= length; i++)
        {
            TableId         tableId;
            IdentifierName  identifierName;

            [identifierName, tableId] = _menuItemTable.workFieldAtPosition(i);

            if (tableId)
            {
                FieldId fieldId = fieldName2id(tableId, identifierName);

                ret += [this.buildControl(#RFButton, identifierName, fieldId2PName(tableId, fieldId), (i == 1), '', this.getHeaderControlDataType(tableId, fieldId), '', 0)];
            }
            else
            {
                // If no table Id must be a display method.
                SysDictMethod method = new SysDictMethod(UtilElementType::TableInstanceMethod, tableNum(WHSWorkTable), identifierName);

                // Assert the display method was found
                Debug::assert(method && method.name() == identifierName);

                ret += [this.buildControl(#RFLabel, identifierName, extendedTypeId2pname(method.returnId()), 0, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPagingControls</Name>
				<Source><![CDATA[
    private container buildPagingControls(container _con)
    {
        container ret = _con;

        if (WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).IsWorkListGroupingFilterDisplayed)
        {
            // Add a filter work list button to take the user back to the group field prompt.
            ret += [this.buildControl(#RFButton, #Scan, "@WAX:RFButton_FilterWorkList_Label", 0, '', #whsrfundefineddatatype, '', 0)];
        }

        ret += [this.buildControl(#RFButton, #RFBack, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 1)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTableContents</Name>
				<Source><![CDATA[
    private container buildTableContents(container _con, WHSRFMenuItemTable _menuItemTable)
    {
        container ret = _con;
        Set       works = new Set(Types::String);
        Map       validMenuItemsMap = new Map(Types::String, Types::Integer);

        WhsWorkExecute workExecute = WhsWorkExecute::construct();
        QueryRun qrWork = new QueryRun(this.buildWorkTableQuery(_menuItemTable));

        while (qrWork.Next())
        {
            WHSWorkTable workTableLocal = qrWork.get(tableNum(WHSWorkTable));

            // Skip work that was already added to the list
            if (works.in(workTableLocal.WorkId))
            {
                continue;
            }

            // Skip work that cannot be executed for one reason or the other
            WHSWorkLine workLineLocal = workExecute.getFirstOpenLineByWorkTable(workTableLocal, userId, false);
            if (!workLineLocal)
            {
                continue;
            }

            // Skip work which the work user has no access to execute
            Counter validMenuItemsCount;

            if (validMenuItemsMap.exists(workLineLocal.WorkClassId))
            {
                validMenuItemsCount = validMenuItemsMap.lookup(workLineLocal.WorkClassId);
            }
            else
            {
                validMenuItemsCount = menuItemValidator.getValidMenuItemNames(workLineLocal.WorkClassId, userId).elements();
                validMenuItemsMap.insert(workLineLocal.WorkClassId, validMenuItemsCount);
            }

            if (!WHSRFMenuItemLine::validateMenuItemWorkClass(_menuItemTable.MenuItemName, workLineLocal.WorkClassId)
                || validMenuItemsCount == 0
                || !WHSWorkTable::validateWorkInCluster(workTableLocal.WorkId))
            {
                continue;
            }

            works.add(workTableLocal.WorkId);

            ret = this.addWorkToWorkList(ret, _menuItemTable, qrWork);

            if (_menuItemTable.WorkListMaximumDisplayedRecords > 0 && works.elements() >= _menuItemTable.WorkListMaximumDisplayedRecords)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkToWorkList</Name>
				<Source><![CDATA[
	/// <summary>
    /// Adds the work information to the work list.
    /// </summary>
    /// <param name = "_con">Elements for work list display screens.</param>
    /// <param name = "_menuItemTable">A <c>WHSRFMenuItemTable</c> record.</param>
    /// <param name = "_workQueryRun">The query run used to get the <c>WHSWorkTable</c> record.</param>
    /// <returns>Container of elements for work list display.</returns>
    protected container addWorkToWorkList(container _con, WHSRFMenuItemTable _menuItemTable, QueryRun _workQueryRun)
    {
        WHSWorkTable workTableLocal = _workQueryRun.get(tableNum(WHSWorkTable));
        // First field in display must be the Work Id
        _con += [this.buildControl(#RFButton, workTableLocal.WorkId, workTableLocal.WorkId,  1, '', #WHSRFUndefinedDatatype, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSWorkId))];

        Counter length = conLen(_menuItemTable.WorkListFieldList);
        for (int i = 2; i <= length; i++)
        {
            IdentifierName  identifierName;
            TableId         tableId;

            [identifierName, tableId] = _menuItemTable.workFieldAtPosition(i);

            _con += [this.addWorkListFieldForWork(workTableLocal, identifierName, tableId, _workQueryRun)];
        }
        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkListFieldSourceRecord</Name>
				<Source><![CDATA[
    private Common getWorkListFieldSourceRecord(QueryRun _queryRun, TableId _tableId, WHSWorkTable _workTable)
    {
        if (_tableId == tableNum(WHSWorkTable))
        {
            return _workTable;
        }

        return _queryRun.get(tableNum(WHSLoadTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorkListFieldForWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds work list field for work.
    /// </summary>
    /// <param name = "_workTable">The <c>WHSWorkTable</c> record.</param>
    /// <param name = "_identifierName">The identifier name.</param>
    /// <param name = "_tableId">The table id.</param>
    /// <param name = "_queryRunWork">An instance of the <c>QueryRun</c>.</param>
    /// <returns>A container containing the state of the control.</returns>
    protected container addWorkListFieldForWork(WHSWorkTable _workTable, IdentifierName _identifierName, TableId _tableId, QueryRun _queryRunWork)
    {
        if (_tableId)
        {
            FieldId fieldId = fieldName2id(_tableId, _identifierName);
            SysDictField dictField = new SysDictField(_tableId, fieldId);

            Common workListFieldSourceRecord = this.getWorkListFieldSourceRecord(_queryRunWork, _tableId, _workTable);

            switch (dictField.baseType())
            {
                case Types::Enum:
                    SysDictEnum dictEnum = new SysDictEnum(dictField.enumId());
                    return this.buildControl(#RFLabel, workListFieldSourceRecord.(fieldId), dictEnum.value2Label(workListFieldSourceRecord.(fieldId)), 0, '', #WHSRFUndefinedDatatype, '', 0);

                case Types::UtcDateTime:
                    return this.buildControl(#RFLabel, '', WhsrfControlData::convertDateTime2DateTimeFormatStrCurrentUserDateCulture(
                                                                                DateTimeUtil::applyTimeZoneOffset(workListFieldSourceRecord.(fieldId), 
                                                                                InventSite::timeZoneSite(_workTable.InventSiteId)), 
                                                                                pass.lookupStr(#UserId)), 
                                              0, '', #WHSRFUndefinedDatatype, '', 0);

                case Types::Date:
                    if (WHSWorkExecuteDisplayWorkListDateLabelFlight::instance().isEnabled())
                    {
                        str dateValueStr = WhsrfControlData::convertDate2DateFormatStrCurrentUserDateCulture(workListFieldSourceRecord.(fieldId), pass.lookupStr(#UserId));

                        return this.buildControl(#RFLabel, _identifierName, dateValueStr, 0, '', #WHSRFUndefinedDatatype, '', 0);
                    }

                default:
                    return this.buildControl(#RFLabel, workListFieldSourceRecord.(fieldId), workListFieldSourceRecord.(fieldId),  0, '', #WHSRFUndefinedDatatype, '', 0);
            }
        }
        else
        {
            // If no table must be display method from Work Table
            SysDictTable dictTable = new SysDictTable(tableNum(WHSWorkTable));
            anytype value = dictTable.callObject(_identifierName, _workTable);
            str valueStr = WHSWorkExecuteDisplay::value2StrDisplay(value, _workTable.InventSiteId, pass.lookupStr(#UserId));
            return this.buildControl(#RFLabel, _identifierName, valueStr, 0, '', #WHSRFUndefinedDatatype, '', 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    public container displayForm(container _con, str _buttonClicked = '')
    {
        container ret = connull();
        container con = _con;

        menuItemValidator   = WHSWorkUserMobileDisplayMenuItemValidator::construct();
        sortManager         = WHSMobileDisplaySortManager::construct();

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (!pass.exists(#InventLocationId))
        {
            pass.insert(#InventLocationId, WHSWorkUserSession::find(pass.lookup(#UserId)).InventLocationId);
            pass.insert(#InventSiteId, InventLocation::find(pass.lookup(#InventLocationId)).InventSiteId);
        }

        WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));

        if (menuItemTable.IsWorkListGroupingFilterDisplayed
        && (_buttonClicked == pass.lookupStr(#MenuItem)
        ||  _buttonClicked == #Scan))
        {
            step = FilterWorklist;
        }
        else if (menuItemTable.IsWorkListGroupingFilterDisplayed
             &&  _buttonClicked == #RFOK
             &&  step           == FilterWorklist)
        {
            step = ListWork;
            pass.insert(#PageIndex, 1);
        }

        // Remove #WorkComplete from the pass because methods in the switch statement below insert the pass into the db,
        // which would result in the subsequent work execution to show the work completed message as well.
        boolean addWorkComplete = pass.exists(#WorkComplete);
        if (addWorkComplete)
        {
            pass.remove(#WorkComplete);
        }

        switch (step)
        {
            case ListWork:
                ret = this.displayListWorkStep(con, _buttonClicked);
                break;

            case ProcessWork:
                ret = this.displayProcessWorkStep(_buttonClicked);
                break;

            case ListMenuItems:
                ret = this.displayListMenuItemsStep(con, _buttonClicked);
                break;

            case FilterWorklist:
                ret = this.updateModeStepPass(this.buildGetFieldName(ret, ''), mode, step, pass);
                break;
        }

        // Add the work completed message at the end of container to keep correct structure.
        if (addWorkComplete)
        {
            ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePassThrough</Name>
				<Source><![CDATA[
    private void handlePassThrough(str _buttonClicked)
    {
        // Handle pass through if the button clicked does not display a worklist.
        if (_buttonClicked != pass.lookup(#MenuItem)
         && _buttonClicked != #RFApplyFilter
         && _buttonClicked != #RFCancel
         && _buttonClicked != WorkListBack)
        {
            this.consumeOrUpdatePassThrough(_buttonClicked);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlePassThroughGroup</Name>
				<Source><![CDATA[
    private void handlePassThroughGroup(str _buttonClicked)
    {
        // Handle pass through if the button clicked does not display a worklist,
		// including the group field prompt and work complete.
        if (_buttonClicked != pass.lookup(#MenuItem)
         && _buttonClicked != #RFApplyFilter
         && _buttonClicked != #RFCancel
         && _buttonClicked != #RFOK
         && _buttonClicked != ''
         && _buttonClicked != WorkListBack)
        {
            this.consumeOrUpdatePassThrough(_buttonClicked);   
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consumeOrUpdatePassThrough</Name>
				<Source><![CDATA[
	private void consumeOrUpdatePassThrough(str _buttonClicked)
    {		
        sortManager.processSortAndUpdatePassThrough(pass, _buttonClicked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayListMenuItemsStep</Name>
				<Source><![CDATA[
    private container displayListMenuItemsStep(container _con, str _buttonClicked)
    {
        container           ret = conNull();

        if (_buttonClicked == WorkListBack)
        {
            step = ListWork;
            pass.remove(#WHSWorkId);
            ret = this.updateModeStepPass(_con, mode, step, pass);
            ret = this.displayForm(ret, '');
        }
        else
        {
            step = ProcessWork;

            WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(_buttonClicked);
            ret = this.processWork(menuItemTable.MenuItemName, pass.lookup(#WHSWorkId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayListWorkStep</Name>
				<Source><![CDATA[
	/// <summary>
    /// Retrieve elements for work step on form.
    /// </summary>
    /// <param name = "_con">Elements for work execution display screens.</param>
    /// <param name = "_buttonClicked">Identifier of clicked button.</param>
    /// <returns>Container of elements for work step display.</returns>
    protected container displayListWorkStep(container _con, str _buttonClicked)
    {
        container           ret = conNull();

        if (_buttonClicked == ''
            || _buttonClicked == #RFCancel
            || _buttonClicked == #RFApplyFilter
            || _buttonClicked == WorkListBack
            || _buttonClicked == pass.lookup(#MenuItem)
            || !WHSWorkTable::exist(_buttonClicked))
        {
            WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));

            if (menuItemTable.IsWorkListGroupingFilterDisplayed)
            {
                this.handlePassThroughGroup(_buttonClicked);
                ret = this.getListWorkStepGroupingFilter(_con, _buttonClicked, menuItemTable);
            }
            else
            {
                this.handlePassThrough(_buttonClicked);
                ret = this.getListWorkStep(_con, _buttonClicked, menuItemTable);
            }
            
            ret = this.updateModeStepPass(ret, mode, step, pass);
        }
        else
        {
            step = ProcessWork;
            ret = this.updateModeStepPass(_con, mode, step, pass);
            ret = this.displayForm(ret, _buttonClicked);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayProcessWorkStep</Name>
				<Source><![CDATA[
    private container displayProcessWorkStep(str _buttonClicked)
    {
        container           ret = conNull();
        WhsWorkExecute      workExecute = WhsWorkExecute::construct();

        //have a workid - redirect to correct workflow
        //  get the first open workline - capture the WORKCLASSID
        //  use WORKCLASSID to lookup matching rows whsrfmenuitemline - figure out correct menu item to load next
        workTable = WHSWorkTable::find(_buttonClicked);

        workLine = workExecute.getFirstOpenLine(workTable.WorkId, userId);
        List validMenuItemNames = menuItemValidator.getValidMenuItemNames(workLine.workClassId, userId);
        int countOfValidMenuItems = validMenuItemNames.elements();

        if (countOfValidMenuItems == 0)
        {
            //error - no valid menu items found
            ret = this.buildErrorPage();
        }
        else if (countOfValidMenuItems == 1)
        {
            ListEnumerator listEnumerator = validMenuItemNames.getEnumerator();
            listEnumerator.moveNext();

            //load menu item and navigate to correct workflow
            ret = this.processWork(listEnumerator.current(), workTable.WorkId);
        }
        else
        {
            //more than 1 menu item valid - need to present list
            ret += [this.buildControl(#rflabel, '', "@WAX:MultipleMenuItemsFound", 0, '', #whsrfundefineddatatype, '', 0)];

            ret = this.addMenuItemControlsInContainer(validMenuItemNames, ret);

            ret += [this.buildControl(#RFButton, WorkListBack, "@SYS56453", 1, '', #WHSRFUndefinedDataType, '', 1)];
            step = ListMenuItems;
            pass.insert(#WHSWorkId, workTable.WorkId);
            ret = this.updateModeStepPass(ret, mode, step, pass);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFilterList</Name>
				<Source><![CDATA[
    private str getFilterList()
    {
        str      ret = "@SYS80094";
        int      i;

        DictEnum dEnum = new DictEnum(enumNum(WHSWorkTransType));
        for (i=0; i < dEnum.values(); i++)
        {
            ret += '||' + dEnum.index2Label(i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMenuItemControlsInContainer</Name>
				<Source><![CDATA[
    private container addMenuItemControlsInContainer(List _menuItemNamesList, container _con)
    {
        ListEnumerator  listEnumerator =  _menuItemNamesList.getEnumerator();

        while (listEnumerator.moveNext())
        {
            WHSMenuItemName currentMenuItemName = listEnumerator.current();
            _con += [this.buildControl(#RFButton, currentMenuItemName, currentMenuItemName, 1, '', #whsrfundefineddatatype, '', 0)];
        }

        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWorkTableQuery</Name>
				<Source><![CDATA[
	/// <summary>
    /// Builds the query used to get the list of <c>WHSWorkTable</c> records.
    /// </summary>
    /// <param name = "_menuItemTable">The <c>WHSRFMenuItemTable</c> used to initialize the query.</param>
    /// <returns>The built query.</returns>
    protected Query buildWorkTableQuery(WHSRFMenuItemTable _menuItemTable)
    {
        Query query = new Query(_menuItemTable.WorkListQuery);
        QueryBuildDataSource qbdWork = query.dataSourceTable(tableNum(WHSWorkTable));

        QueryBuildDataSource qbdLoad = query.dataSourceTable(tableNum(WHSLoadTable));

        qbdWork.addRange(fieldNum(WHSWorkTable, InventLocationId)).value(pass.lookup(#InventLocationId));

        str userQueryRange = queryRangeConcat(SysQuery::valueEmptyString(), userId);
        qbdWork.addRange(fieldNum(WHSWorkTable, LockedUser)).value(userQueryRange);

        if (pass.exists(#Filter) && pass.lookup(#Filter) != "@SYS80094")
        {
            qbdWork.addRange(fieldNum(WHSWorkTable, WorkTransType)).value(pass.lookup(#Filter));
        }
        
        WHSRFMenuItemTable  menuItemTable = WHSRFMenuItemTable::find(pass.lookup(#MenuItem));

        if (menuItemTable.IsWorkListGroupingFilterDisplayed
            && pass.lookupStr(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue))
        {
            qbdWork.addRange(menuItemTable.rfSysGroupFieldNum).value(pass.lookupStr(WHSWorkExecuteDisplayListWorkControls::WorkListGroupingFieldValue));
        }

        FieldName fieldName = sortManager.parmCurrentSortField();

        if (fieldName)
        {
            query.clearOrderBy();

            // Work table is built up first, so must check if sort is built from work table first.
            if (fieldName2id(tableNum(WHSWorkTable), fieldName))
            {
                qbdWork.addSortField(fieldName2id(tableNum(WHSWorkTable), fieldName), sortManager.parmCurrentSortOrder());
            }
            else
            {
                qbdLoad.addSortField(fieldName2id(tableNum(WHSLoadTable), fieldName), sortManager.parmCurrentSortOrder());
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWork</Name>
				<Source><![CDATA[
    private container processWork(WHSMenuItemName _menuItemName, WHSWorkID _workID)
    {
        if (menuItemValidator.hasAccessToMenuItem(userId, _menuItemName))
        {
            WHSRFMenuItemTable menuItemTable = WHSRFMenuItemTable::find(_menuItemName);
            WHSWorkExecuteMode workMode = WHSRFMenuItemTable::getWHSWorkExecuteMode(menuItemTable);

            pass.insert(#CameFromWorkList, pass.lookup(#MenuItem));
            pass.insert(#MenuItem, _menuItemName);
            pass.insert(#WorkListSavedID, _workID);

            return WHSWorkExecuteDisplay::getNextForm([[workMode, step], pass.pack()]);
        }

        return this.buildErrorPage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSWorkExecuteDisplayListWork construct()
    {
        WHSWorkExecuteDisplayListWork workExecuteDisplayListWork = new WHSWorkExecuteDisplayListWork();

        return workExecuteDisplayListWork;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>