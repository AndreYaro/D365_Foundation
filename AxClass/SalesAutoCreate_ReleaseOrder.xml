<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesAutoCreate_ReleaseOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       SalesAutoCreate_ReleaseOrder
extends     SalesAutoCreate
{
    SalesTableLinks                    salesTableLinks;
    SalesCreateReleaseOrderLineTmp     releaseOrderLine;
    SalesCreateReleaseOrderTableTmp    releaseOrderTable;
    SalesTable                         createFromSalesTable;
    SalesLine                          createFromSalesLine;
    SalesId                            currentSalesId;
    SalesId                            salesId;
    boolean                            firstRecord;
    private SalesInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkSalesId</Name>
				<Source><![CDATA[
    boolean checkSalesId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkUpSalesLine</Name>
				<Source><![CDATA[
    void copyMarkUpSalesLine()
    {
        Markup::delete(salesLine);
        Markup::copy(NoYes::No, createFromSalesLine, salesLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkUpSalesTable</Name>
				<Source><![CDATA[
    void copyMarkUpSalesTable()
    {
        Markup::delete(salesTable);
        Markup::copy(NoYes::No, createFromSalesTable, salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    void  create()
    {
        try
        {
            super();
        }

        catch (Exception::Error)
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineCreateLineParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>SalesLineCreateLineParameters</c> object to be used to create a <c>SaleLine</c>.
    /// </summary>
    /// <returns>The <c>SalesLineCreateLineParameters</c> object to be used to create a <c>SaleLine</c>.</returns>
    [Hookable]
    protected SalesLineCreateLineParameters getSalesLineCreateLineParameters()
    {
        SalesLineCreateLineParameters salesLineCreateLineParameters = SalesLineCreateLineParameters::construct();
        salesLineCreateLineParameters.calcInventQty = true;
        salesLineCreateLineParameters.searchMarkup = false;

        return salesLineCreateLineParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    void  createSalesLine()
    {
        using(var context = instrumentationLogger.salesOrderLineCreationActivities().createFromReleaseOrder())
        {
            ttsbegin;

            InventDim inventDim                 = InventDim::find(salesLine.InventDimId);
            InventDim releaseOrderLineInventDim = InventDim::find(releaseOrderLine.InventDimId);
            inventDim.InventLocationId = releaseOrderLineInventDim.InventLocationId;
            inventDim.initFromInventLocation(inventDim.inventLocation());
            if (!releaseOrderLineInventDim.InventLocationId)
            inventDim.InventSiteId = releaseOrderLineInventDim.InventSiteId;
        
            salesLine.setInventDimIdFromInventDim(inventDim);

            SalesLineCreateLineParameters salesLineCreateLineParameters = this.getSalesLineCreateLineParameters();
            salesLine.createLineFromParameters(salesLineCreateLineParameters);

            salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
            ttscommit;
        }

        this.copyMarkUpSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesTable</Name>
				<Source><![CDATA[
    void  createSalesTable()
    {
        this.initSalesTable();

        super();

        this.copyMarkUpSalesTable();
        salesTable.setPriceDiscChangePolicy(PriceDiscSystemSource::Agreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SalesTable</c> record.
    /// </summary>
    protected void initSalesTable()
    {
        InventSiteId inventSiteId          = releaseOrderTable.InventSiteId            ? releaseOrderTable.InventSiteId            : createFromSalesTable.InventSiteId;

        salesTable.RecId                   = 0;
        salesTable                         = createFromSalesTable.data();
        salesTable.SalesId                 = currentSalesId;
        salesTable.SalesType               = this.salesType();
        salesTable.SalesOriginId           = this.salesOriginId();
        salesTable.DocumentStatus          = DocumentStatus::None;
        salesTable.InterCompanyPurchId     = '';

        salesTable.ReceiptDateRequested    = releaseOrderTable.ReceiptDateRequested    ? releaseOrderTable.ReceiptDateRequested    : createFromSalesTable.ReceiptDateRequested;
        salesTable.ShippingDateRequested   = releaseOrderTable.ShippingDateRequested   ? releaseOrderTable.ShippingDateRequested   : createFromSalesTable.ShippingDateRequested;
        salesTable.DeliveryDateControlType = releaseOrderTable.DeliveryDateControlType ? releaseOrderTable.DeliveryDateControlType : createFromSalesTable.DeliveryDateControlType;

        salesTable.DlvMode                 = releaseOrderTable.DlvMode                 ? releaseOrderTable.DlvMode                 : createFromSalesTable.DlvMode;
        salesTable.setInventSiteId(inventSiteId);
        salesTable.InventLocationId        = releaseOrderTable.InventLocationId        ? releaseOrderTable.InventLocationId        : createFromSalesTable.InventSiteId == salesTable.InventSiteId ? createFromSalesTable.InventLocationId : '';

        salesTable.DeliveryName            = releaseOrderTable.DeliveryName            ? releaseOrderTable.DeliveryName            : createFromSalesTable.DeliveryName;
        salesTable.DeliveryPostalAddress   = releaseOrderTable.DeliveryPostalAddress   ? releaseOrderLine.DeliveryPostalAddress    : createFromSalesTable.DeliveryPostalAddress;

        salesTable.PurchOrderFormNum       = releaseOrderTable.PurcOrderFormNum;
        salesTable.CustomerRef             = releaseOrderTable.CustomerRef;
        salesTable.ContactPersonId         = releaseOrderTable.ContactPersonId;

        salesTable.AddressRefRecId         = releaseOrderTable.AddressRefRecId;
        salesTable.AddressRefTableId       = releaseOrderTable.AddressRefTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount</Name>
				<Source><![CDATA[
    CustAccount custAccount()
    {
        return createFromSalesTable.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endUpdate</Name>
				<Source><![CDATA[
    void  endUpdate()
    {
        if (!salesTable)
            throw Exception::Error;

        if (salesTable.setEstimate())
            salesTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSalesTableLinks</Name>
				<Source><![CDATA[
    void insertSalesTableLinks()
    {
        if (createFromSalesTable.SalesId && salesTable.SalesId)
        {
            salesTableLinks.MainSalesId = createFromSalesTable.SalesId;
            salesTableLinks.SubSalesId  = salesTable.SalesId;
            salesTableLinks.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    CustInvoiceAccount invoiceAccount()
    {
        return createFromSalesTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesCreateReleaseOrderLineTmp  _releaseOrderLine,
             Object                          _callBackClass     = null,
             SalesCreateReleaseOrderTableTmp _releaseOrderTable = null)
    {
        releaseOrderLine     = _releaseOrderLine;
        releaseOrderTable    = _releaseOrderTable;
        select releaseOrderLine order by AddressRefRecId
            where releaseOrderLine.SalesQty != 0;

        createFromSalesLine  = SalesLine::findInventTransId(_releaseOrderLine.InventTransId, true);
        createFromSalesTable = createFromSalesLine.salesTable(true);

        currentSalesId       = '';
        firstRecord          = true;
        super(_releaseOrderLine,_callBackClass);
        instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(SalesAutoCreate_ReleaseOrder));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextRecord</Name>
				<Source><![CDATA[
    void nextRecord()
    {
        recId prevAddressRecid = releaseOrderLine.AddressRefRecId;

        if (PdsGlobal::pdsIsCWItem(createFromSalesLine.ItemId))
        {
            createFromSalesLine.PdsCWRemainInventPhysical -= salesLine.PdsCWQty;
            createFromSalesLine.RemainSalesPhysical =
                    PdsCatchWeight::inventQty(
                            salesLine.ItemId,
                            createFromSalesLine.PdsCWRemainInventPhysical,
                            salesLine.SalesUnit);
        }
        else
        {
            createFromSalesLine.RemainSalesPhysical     -= salesLine.SalesQty;
        }

        createFromSalesLine.RemainInventPhysical -= salesLine.QtyOrdered;

        createFromSalesLine.update();

        next releaseOrderLine;

        if (releaseOrderLine.AddressRefRecId != prevAddressRecid)
            firstRecord = true;

        if (releaseOrderLine.RecId)
            createFromSalesLine  = SalesLine::findInventTransId(releaseOrderLine.InventTransId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordExist</Name>
				<Source><![CDATA[
    boolean recordExist()
    {
        return releaseOrderLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    SalesType salesType()
    {
        return SalesType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCust</Name>
				<Source><![CDATA[
    void setCust()
    {
        if (this.custAccount())
            custTable = CustTable::find(this.custAccount());

        if (!custTable)
        {
            checkFailed(strFmt("@SYS16734",this.custAccount()));
            throw error("@SYS23020");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLine</Name>
				<Source><![CDATA[
    void  setSalesLine()
    {
        if (!releaseOrderLine.SalesQty
            && MCROrderParameters::isCallCenterEnabledAndInUse())
        {
            return;
        }

        setprefix(#PreFixField(createFromSalesLine,ItemId));

        super();

        salesLine.initFromSalesLine(createFromSalesLine);
        if (#PdsCatchWeightEnabled)
        {
            salesLine.PdsCWQty            = releaseOrderLine.PdsCWQty;
        }

        salesLine.SalesQty                = releaseOrderLine.SalesQty;
        salesLine.ConfirmedDlv            = releaseOrderLine.ShippingDateRequested;
        salesLine.DlvMode                 = releaseOrderLine.DlvMode;
        salesLine.DeliveryDateControlType = releaseOrderLine.DeliveryDateControlType;
        salesLine.ShippingDateRequested   = releaseOrderLine.ShippingDateRequested;
        salesLine.ReceiptDateRequested    = releaseOrderLine.ReceiptDateRequested;
        salesLine.DeliveryPostalAddress   = releaseOrderLine.DeliveryPostalAddress;
        salesLine.DeliveryName            = releaseOrderLine.DeliveryName;
        salesLine.LineAmount              = salesLine.calcLineAmount();
        salesLine.AddressRefRecId         = releaseOrderLine.AddressRefRecId;
        salesLine.AddressRefTableId       = releaseOrderLine.AddressRefTableId;

        InventMovement::setMinMaxQty(salesLine);

        if (salesLine.SalesQty != 0)
        {
            this.createSalesLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTable</Name>
				<Source><![CDATA[
    void  setSalesTable()
    {
        if (firstRecord)
        {
            if (salesId)
            {
                if (!this.checkSalesId())
                {
                    throw error("@SYS23020");
                }
                else
                {
                    salesTable  = SalesTable::find(salesId);
                }
            }
            else
            {
                super();
                currentSalesId      = salesTable.SalesId;
                this.insertSalesTableLinks();
                this.createSalesTable();
            }

            if (!salesTable)
            {
                checkFailed(strFmt("@SYS15067", this.salesId()));
                throw error("@SYS23020");
            }
        }
        else
        {
            salesTable = SalesTable::find(salesTable.SalesId,true);
            salesTable.SkipUpdate = InterCompanySkipUpdate::No;
            salesTable.update();
        }
        firstRecord         = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>