<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingTree</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPeggingTree</c> class builds a tree of pegged requirements and supplies.
/// </summary>
/// <remarks>
///    This class can be used for visualization purposes or from code where pegged relationships have to
///    be explored.
/// </remarks>
public class ReqPeggingTree
{
    Map             mapChildren;            // Node ID -> List of child node IDs
    Map             mapNodes;               // Node ID -> ReqPeggingTreeNode
    Map             mapRoots;               // Node ID -> Root ID

    List            firstLevelNodes;        // First level nodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>expandNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands the next level of tree nodes under a specific node.
    /// inside the <c>FormTreeControl</c>.
    /// </summary>
    /// <param name="_nodeId">
    /// The node ID to expand.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void expandNode(int _nodeId)
    {
        ReqPeggingTreeNode  reqPeggingTreeNode;
        List                listExpandNode;

        if (mapNodes.exists(_nodeId))
        {
            if (!mapChildren.exists(_nodeId))
            {
                reqPeggingTreeNode = mapNodes.lookup(_nodeId);
                listExpandNode     = reqPeggingTreeNode.listChildren();
                if (listExpandNode)
                {
                    this.insertNodeList(_nodeId, listExpandNode, false);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the child nodes of a particular tree node.
    /// </summary>
    /// <param name="_node">
    /// The node which children are needed.
    /// </param>
    /// <returns>
    /// A list containing all the children <c>ReqPeggingTreeNode</c> nodes.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List getChildren(ReqPeggingTreeNode _node)
    {
        int                 nodeId = _node.parmNodeId();
        int                 currentId;
        List                result;
        List                childrenIDs;
        ListEnumerator      listEnumerator;
        ReqPeggingTreeNode  currNode;

        if (!mapChildren.exists(nodeId))
        {
            return null;
        }

        result = new List(Types::Class);
        childrenIDs = mapChildren.lookup(nodeId);
        listEnumerator = childrenIDs.getEnumerator();

        while (listEnumerator.moveNext())
        {
            currentId = listEnumerator.current();
            currNode = mapNodes.lookup(currentId);

            if (currNode)
            {
                result.addEnd(currNode);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a tree node by its identificator.
    /// </summary>
    /// <param name="_idx">
    /// The node identificator.
    /// </param>
    /// <returns>
    /// a <c>ReqPeggingTreeNode</c> instance if the node is found; otherwise null.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqPeggingTreeNode getNode(int _idx)
    {
        ReqPeggingTreeNode result;

        if (mapNodes.exists(_idx))
        {
            result = mapNodes.lookup(_idx);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal map structures.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initMaps()
    {
        mapNodes         = new Map(Types::Integer,Types::Class);
        mapChildren      = new Map(Types::Integer,Types::Class);
        mapRoots         = new Map(Types::Integer,Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a node under a parent node.
    /// </summary>
    /// <param name="_parentNodeId">
    /// The parent node ID.
    /// </param>
    /// <param name="_reqPeggingTreeNode">
    /// The <c>ReqPeggingTreeNode</c> instance that represents the node being inserted.
    /// </param>
    /// <param name="_insertChildren">
    /// A boolean value indicating whether the children nodes will be inserted too.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertNode(
        int                _parentNodeId,
        ReqPeggingTreeNode _reqPeggingTreeNode,
        boolean            _insertChildren)
    {
        int             nodeId;
        int             parentRootId;
        List            listChildNodes;

        // Add the node instance to the instances map
        nodeId = mapNodes.elements() + 1;

        if ( _parentNodeId)
        {
            parentRootId = mapRoots.lookup(_parentNodeId);
        }
        else
        {
            parentRootId = nodeId;
        }

        _reqPeggingTreeNode.parmNodeId(nodeId);
        _reqPeggingTreeNode.parmParentNodeId(_parentNodeId);

        mapNodes.insert(nodeId,_reqPeggingTreeNode);
        mapRoots.insert(nodeId, parentRootId);

        // Add the node ID to the IDs map by linking the node ID
        // to a new or existing parent node.
        if (mapChildren.exists(_parentNodeId))
        {
            listChildNodes = mapChildren.lookup(_parentNodeId);
        }
        else
        {
            listChildNodes = new List(Types::Integer);
        }

        listChildNodes.addEnd(nodeId);
        mapChildren.insert(_parentNodeId, listChildNodes);

        // notify subscribers of the change
        this.NodeAdded(_parentNodeId, _reqPeggingTreeNode);

        // Insert children below
        if (_insertChildren)
        {
            this.insertNodeList(nodeId, _reqPeggingTreeNode.listChildren(), false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNodeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a list of nodes under a parent node.
    /// </summary>
    /// <param name="_parentNodeId">
    /// The parent node ID.
    /// </param>
    /// <param name="_childNodes">
    /// The list of child nodes to insert.
    /// </param>
    /// <param name="_insertChildren">
    /// A boolean value indicating whether the children nodes will be inserted too.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertNodeList(
        int     _parentNodeId,
        List    _childNodes,
        boolean _insertChildren)
    {
        ReqPeggingTreeNode  reqPeggingTreeNode;
        ListEnumerator      le;
        Common              common;

        if (_childNodes)
        {
            le = _childNodes.getEnumerator();
            while (le.moveNext())
            {
                common             = le.current();
                reqPeggingTreeNode = ReqPeggingTreeNode::newStandard(common);
                this.insertNode(_parentNodeId, reqPeggingTreeNode, _insertChildren);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>NodeAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event for observing insertion of pegging tree nodes.
    /// </summary>
    /// <param name="_parentId">
    /// The identificator of the parent node.
    /// </param>
    /// <param name="_node">
    /// The node that was added.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    delegate void NodeAdded(int _parentId, ReqPeggingTreeNode _node)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>nodeHasChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the node has any currently loaded children.
    /// </summary>
    /// <param name="_nodeId">
    /// The node identificator.
    /// </param>
    /// <returns>
    /// true if the node has children; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean nodeHasChildren(int _nodeId)
    {
        return mapChildren.exists(_nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstLevelNodes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public List parmFirstLevelNodes(List _firstLevelNodes = firstLevelNodes)
    {
        firstLevelNodes = _firstLevelNodes;
        return firstLevelNodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the root node for a given tree node.
    /// </summary>
    /// <param name="_node">
    /// A <c>ReqPeggingTreeNode</c> instance which root is to be returned.
    /// </param>
    /// <returns>
    /// A <c>ReqPeggingTreeNode</c> instance, the root of _node.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqPeggingTreeNode rootNode(ReqPeggingTreeNode _node)
    {
        int rootIdx = mapRoots.lookup(_node.parmNodeId());

        if (!rootIdx)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return mapNodes.lookup(rootIdx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the pegging tree and the form control with the first level nodes.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        this.initMaps();

        this.insertNodeList(0, firstLevelNodes, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        private static ReqPeggingTree construct()
    {
        return new ReqPeggingTree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFirstLevelNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_firstLevelNodes">
    /// The list that contains the first level nodes of the tree.
    /// </param>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTree newFirstLevelNodes(List _firstLevelNodes)
    {
        ReqPeggingTree  reqPeggingTree = ReqPeggingTree::construct();

        reqPeggingTree.parmFirstLevelNodes(_firstLevelNodes);

        return reqPeggingTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_common">
    /// The record buffer that represents the root node of the tree.
    /// </param>
    /// <returns>
    /// A new instance of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTree newStandard(Common _common)
    {
        List firstLevelNodes = new List(Types::Record);
        firstLevelNodes.addEnd(_common);
        return ReqPeggingTree::newFirstLevelNodes(firstLevelNodes);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>